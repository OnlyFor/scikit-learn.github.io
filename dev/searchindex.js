Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_beta_divergence", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_boston", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_beta_divergence.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_boston.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Beta-divergence loss functions", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_boston", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_hist_gradient_boosting", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.if_delegate_has_method", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.2", "Version 1.2.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 408, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 458, 459, 461, 463, 464, 467, 470, 471, 472, 473, 474, 476, 477, 478, 480, 483, 484, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 709, 710, 711, 712, 713, 714, 715, 716, 721, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 741, 742, 747, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 783, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 890, 891, 896, 897, 899, 901, 902, 907, 909, 914, 915, 917, 920, 922, 923, 926, 927, 936, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 976, 978, 981, 982, 983, 984, 985, 986, 987, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "wa": [0, 4, 8, 13, 16, 40, 45, 69, 70, 79, 85, 89, 91, 101, 102, 119, 121, 123, 124, 126, 129, 158, 166, 172, 180, 193, 195, 204, 221, 246, 249, 253, 255, 257, 261, 262, 275, 293, 305, 306, 309, 314, 315, 337, 339, 346, 348, 352, 360, 362, 363, 365, 368, 369, 377, 380, 383, 385, 386, 389, 392, 393, 397, 401, 416, 417, 421, 425, 429, 432, 444, 449, 474, 490, 498, 510, 511, 513, 515, 516, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 560, 561, 563, 565, 566, 577, 602, 605, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 651, 655, 660, 661, 768, 769, 770, 773, 774, 783, 794, 796, 808, 818, 844, 863, 867, 873, 874, 876, 878, 879, 880, 881, 901, 902, 940, 941, 942, 951, 952, 955, 958, 962, 965, 968, 972, 978, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "start": [0, 4, 7, 10, 12, 26, 57, 63, 66, 73, 85, 96, 98, 109, 115, 120, 122, 143, 146, 154, 156, 172, 176, 177, 185, 196, 197, 198, 204, 214, 217, 221, 230, 243, 255, 263, 275, 309, 313, 337, 346, 348, 352, 353, 354, 355, 358, 365, 366, 369, 370, 375, 377, 380, 386, 389, 393, 394, 398, 399, 401, 416, 418, 425, 429, 431, 508, 513, 585, 592, 607, 620, 634, 641, 643, 651, 652, 653, 665, 669, 754, 755, 768, 769, 770, 773, 774, 783, 813, 814, 815, 817, 819, 827, 912, 936, 941, 948, 951, 956, 957, 966, 973, 976, 978, 986, 987, 997, 999, 1002, 1004, 1006, 1007, 1008, 1009], "2007": [0, 38, 184, 360, 389, 398, 416, 427, 429, 435, 437, 541, 631, 666, 691, 707, 710, 731, 732, 766, 944, 948, 950, 952], "googl": [0, 17, 375, 389, 418, 971, 983, 994], "summer": [0, 4, 48, 994], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 359, 363, 364, 367, 368, 373, 375, 377, 378, 380, 383, 385, 388, 389, 396, 397, 418, 419, 422, 424, 434, 470, 474, 501, 505, 506, 512, 513, 517, 518, 520, 521, 523, 541, 547, 554, 556, 557, 560, 561, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 640, 657, 658, 660, 661, 801, 838, 845, 920, 949, 953, 962, 964, 966, 967, 972, 973, 975, 976, 979, 987, 994, 996, 997], "david": [0, 2, 37, 80, 175, 198, 256, 258, 337, 338, 339, 360, 389, 396, 399, 437, 474, 507, 511, 542, 543, 597, 598, 603, 698, 768, 867, 942, 948, 956, 965, 976, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "cournapeau": [0, 2, 994, 997], "later": [0, 11, 34, 45, 115, 123, 149, 172, 175, 180, 195, 204, 240, 241, 242, 245, 246, 288, 339, 348, 370, 375, 376, 380, 383, 817, 840, 841, 849, 851, 962, 982, 987, 997, 1000, 1002, 1006], "year": [0, 4, 132, 146, 154, 166, 196, 197, 214, 362, 364, 375, 393, 397, 399, 772, 776, 778, 850, 948, 952, 973, 976, 985], "matthieu": [0, 2, 994, 998, 1009], "brucher": [0, 2, 994], "work": [0, 4, 9, 17, 19, 32, 34, 37, 43, 44, 45, 48, 50, 52, 56, 59, 66, 77, 84, 89, 95, 96, 101, 102, 112, 113, 119, 121, 123, 124, 129, 132, 146, 153, 155, 156, 157, 158, 166, 167, 180, 185, 188, 193, 195, 196, 204, 205, 213, 214, 240, 241, 242, 245, 246, 253, 266, 281, 282, 306, 308, 309, 326, 329, 332, 338, 339, 343, 348, 353, 354, 355, 359, 360, 363, 365, 366, 367, 368, 369, 370, 372, 376, 377, 378, 380, 385, 386, 387, 389, 390, 391, 394, 396, 397, 398, 401, 402, 403, 404, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 436, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 483, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 670, 682, 715, 747, 751, 752, 753, 754, 761, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 858, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 907, 911, 941, 942, 944, 946, 947, 948, 949, 951, 952, 954, 955, 958, 959, 962, 965, 966, 972, 973, 976, 978, 979, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "part": [0, 31, 36, 60, 67, 70, 81, 113, 118, 122, 127, 135, 136, 137, 138, 143, 154, 164, 175, 243, 250, 252, 269, 291, 299, 339, 354, 360, 362, 365, 366, 370, 372, 376, 377, 380, 389, 393, 394, 396, 397, 399, 424, 467, 468, 469, 496, 506, 512, 517, 549, 559, 560, 561, 588, 600, 764, 836, 853, 855, 856, 857, 858, 859, 860, 861, 941, 942, 944, 949, 953, 971, 972, 973, 974, 976, 980, 987, 989, 994, 1002, 1003, 1005, 1007, 1009], "hi": [0, 390, 952, 987], "thesi": [0, 362, 389, 396], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 56, 57, 59, 65, 66, 70, 73, 74, 77, 79, 80, 81, 85, 88, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 122, 124, 127, 129, 132, 142, 143, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 184, 185, 187, 191, 196, 197, 198, 199, 200, 201, 204, 213, 214, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 243, 245, 249, 252, 253, 255, 256, 257, 258, 260, 261, 264, 266, 267, 269, 270, 273, 275, 281, 282, 284, 294, 297, 298, 299, 302, 305, 306, 307, 309, 314, 316, 324, 332, 337, 338, 339, 342, 346, 348, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 405, 413, 416, 417, 418, 419, 420, 422, 423, 424, 427, 437, 438, 439, 444, 447, 450, 467, 470, 474, 478, 483, 484, 486, 498, 509, 511, 513, 515, 516, 517, 519, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 577, 581, 584, 585, 586, 605, 607, 608, 609, 611, 618, 619, 620, 622, 623, 624, 626, 628, 630, 633, 634, 636, 638, 640, 641, 643, 644, 649, 650, 651, 654, 655, 659, 660, 661, 671, 674, 677, 686, 692, 694, 699, 701, 702, 707, 708, 711, 713, 715, 727, 729, 730, 754, 756, 758, 761, 765, 767, 768, 769, 770, 773, 774, 783, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 821, 822, 823, 828, 836, 838, 844, 845, 849, 850, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 875, 878, 880, 885, 889, 891, 907, 920, 941, 942, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 973, 975, 976, 978, 985, 986, 987, 991, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "2010": [0, 47, 66, 78, 260, 261, 386, 389, 391, 393, 394, 450, 511, 678, 682, 693, 694, 713, 796, 828, 829, 944, 948, 952, 956, 966, 971, 994], "fabian": [0, 2, 183, 201, 218, 287, 994, 995, 996, 997, 998, 1000, 1001, 1003], "pedregosa": [0, 2, 183, 201, 218, 287, 994, 995, 996, 997, 998, 1000], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 65, 66, 81, 97, 101, 185, 186, 218, 230, 242, 971, 973, 976, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 65, 66, 72, 81, 88, 89, 97, 101, 102, 179, 185, 186, 193, 194, 218, 220, 228, 230, 242, 299, 328, 329, 378, 971, 976, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 181, 183, 184, 185, 187, 189, 190, 225, 228, 261, 268, 287, 378, 976, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 181, 183, 184, 185, 187, 189, 190, 225, 228, 261, 268, 287, 378, 976, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "vincent": [0, 2, 47, 66, 152, 156, 976, 994, 996, 998, 999, 1001, 1004, 1009], "michel": [0, 2, 47, 66, 994, 996, 997, 999, 1001, 1008], "inria": [0, 5, 9, 30, 37, 52, 54, 74, 81, 155, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 256, 258, 261, 268, 287, 332, 337, 338, 339, 633, 970, 994], "took": [0, 42, 263], "leadership": 0, "made": [0, 69, 80, 88, 100, 132, 156, 196, 214, 246, 259, 306, 324, 343, 352, 360, 362, 365, 368, 377, 378, 389, 397, 401, 419, 422, 424, 434, 470, 478, 563, 564, 566, 605, 606, 631, 640, 660, 661, 708, 756, 770, 773, 774, 783, 787, 788, 789, 808, 811, 812, 953, 958, 968, 976, 984, 986, 994, 995, 996, 997, 998, 1001, 1003, 1004, 1007, 1008], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 56, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 79, 84, 85, 88, 89, 90, 100, 104, 111, 115, 116, 117, 118, 119, 121, 123, 126, 129, 130, 131, 132, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 169, 172, 175, 177, 179, 185, 192, 193, 194, 197, 198, 205, 210, 218, 221, 229, 230, 232, 233, 235, 237, 242, 246, 250, 255, 257, 258, 262, 264, 266, 267, 273, 277, 278, 280, 284, 285, 286, 291, 293, 297, 299, 302, 306, 307, 313, 316, 320, 321, 324, 326, 332, 337, 338, 339, 342, 343, 346, 348, 353, 354, 359, 360, 362, 363, 364, 366, 368, 369, 370, 372, 375, 377, 386, 387, 389, 392, 393, 394, 396, 397, 398, 399, 401, 419, 422, 425, 434, 435, 439, 447, 457, 461, 462, 464, 465, 466, 468, 471, 474, 475, 477, 479, 483, 484, 485, 503, 508, 509, 513, 516, 528, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 557, 559, 563, 564, 565, 566, 568, 585, 586, 592, 596, 599, 606, 607, 608, 609, 621, 627, 634, 641, 643, 649, 651, 663, 670, 673, 674, 675, 676, 686, 690, 709, 736, 737, 755, 765, 768, 769, 773, 774, 775, 776, 781, 783, 790, 799, 800, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 836, 844, 848, 849, 850, 852, 859, 860, 872, 875, 878, 879, 880, 881, 883, 885, 890, 891, 892, 909, 915, 923, 926, 938, 941, 942, 946, 947, 948, 949, 951, 952, 953, 954, 955, 959, 962, 963, 966, 967, 968, 976, 978, 984, 985, 986, 987, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "public": [0, 78, 359, 363, 365, 366, 368, 369, 375, 376, 377, 378, 393, 396, 639, 646, 660, 661, 667, 948, 956, 994, 999, 1000, 1005, 1006, 1007], "releas": [0, 34, 45, 180, 195, 204, 240, 241, 242, 245, 246, 310, 353, 355, 363, 365, 367, 372, 375, 377, 397, 419, 422, 439, 442, 464, 465, 470, 479, 487, 490, 499, 513, 536, 537, 539, 540, 542, 574, 577, 603, 605, 609, 615, 621, 623, 627, 633, 644, 655, 663, 691, 721, 761, 770, 773, 774, 783, 797, 813, 815, 832, 841, 844, 846, 850, 851, 867, 868, 870, 875, 879, 902, 920, 968, 970, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "februari": [0, 391, 448, 952, 995, 999], "1st": [0, 4, 59, 89, 157, 197, 302, 849, 850], "sinc": [0, 4, 5, 11, 25, 27, 34, 37, 65, 69, 70, 71, 96, 119, 125, 135, 143, 146, 149, 154, 166, 167, 172, 178, 196, 198, 213, 226, 230, 231, 240, 241, 242, 245, 246, 255, 258, 264, 265, 275, 277, 308, 309, 317, 321, 324, 332, 337, 338, 339, 348, 353, 360, 363, 365, 366, 368, 369, 370, 372, 375, 376, 377, 380, 389, 390, 391, 392, 393, 394, 396, 397, 399, 401, 405, 413, 415, 417, 421, 425, 428, 431, 444, 447, 470, 508, 511, 512, 513, 514, 515, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 544, 563, 564, 566, 577, 585, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 613, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 654, 667, 674, 681, 683, 708, 762, 773, 774, 799, 800, 801, 802, 806, 807, 808, 809, 810, 813, 818, 821, 828, 829, 836, 844, 860, 861, 865, 866, 870, 872, 875, 878, 879, 880, 881, 901, 904, 907, 915, 941, 944, 945, 946, 948, 949, 953, 954, 955, 956, 958, 960, 962, 966, 967, 968, 976, 978, 987, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 60, 73, 90, 113, 120, 127, 129, 132, 143, 149, 154, 155, 164, 166, 172, 185, 196, 216, 217, 223, 229, 242, 250, 255, 260, 277, 292, 297, 308, 332, 337, 338, 352, 359, 360, 362, 365, 366, 369, 375, 377, 386, 388, 389, 390, 393, 395, 396, 397, 399, 422, 424, 439, 461, 473, 483, 484, 513, 530, 531, 534, 535, 538, 539, 540, 545, 563, 564, 566, 585, 620, 621, 627, 663, 664, 665, 666, 667, 668, 768, 769, 770, 773, 774, 783, 799, 800, 806, 807, 808, 809, 810, 830, 831, 838, 854, 878, 879, 880, 881, 893, 920, 941, 944, 949, 952, 953, 955, 960, 962, 966, 968, 969, 971, 972, 975, 976, 978, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1007], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 45, 46, 47, 50, 59, 61, 63, 64, 69, 70, 77, 79, 84, 85, 88, 90, 91, 100, 102, 110, 116, 118, 119, 120, 122, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 172, 175, 196, 197, 198, 214, 221, 225, 227, 232, 234, 235, 241, 242, 243, 249, 252, 255, 256, 257, 258, 261, 262, 269, 277, 281, 282, 297, 302, 305, 307, 308, 313, 314, 315, 321, 327, 329, 337, 338, 346, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 466, 468, 469, 470, 483, 484, 489, 498, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 662, 663, 664, 665, 666, 667, 674, 678, 679, 686, 689, 694, 699, 704, 709, 715, 729, 730, 731, 732, 755, 758, 759, 763, 766, 768, 769, 770, 773, 774, 775, 780, 783, 787, 792, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 890, 892, 894, 896, 927, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 972, 973, 976, 978, 979, 982, 983, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "appear": [0, 8, 46, 48, 113, 166, 250, 252, 253, 281, 282, 291, 293, 298, 313, 337, 338, 339, 360, 363, 365, 369, 377, 391, 394, 462, 463, 530, 542, 543, 553, 585, 602, 603, 605, 672, 676, 686, 690, 692, 762, 771, 787, 806, 807, 808, 809, 810, 872, 875, 909, 948, 954, 958, 994, 1002, 1006, 1007], "follow": [0, 4, 7, 19, 26, 37, 45, 54, 62, 66, 70, 71, 91, 95, 105, 110, 113, 122, 126, 141, 154, 161, 166, 168, 175, 177, 180, 184, 185, 194, 195, 196, 197, 211, 214, 226, 232, 234, 246, 255, 297, 305, 306, 308, 309, 321, 332, 337, 338, 339, 342, 346, 348, 352, 353, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 417, 419, 421, 422, 424, 428, 438, 439, 440, 443, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 490, 509, 513, 515, 516, 532, 533, 534, 535, 538, 539, 540, 541, 545, 556, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 606, 608, 609, 621, 627, 633, 634, 645, 646, 655, 667, 669, 674, 679, 683, 687, 692, 788, 808, 813, 814, 815, 817, 819, 821, 822, 823, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 859, 868, 870, 871, 878, 879, 880, 881, 885, 886, 906, 920, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 978, 987, 991, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 141, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 229, 230, 231, 232, 234, 236, 240, 241, 242, 244, 245, 246, 250, 253, 254, 255, 256, 257, 258, 259, 261, 263, 265, 266, 267, 268, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 315, 316, 317, 320, 321, 323, 324, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 343, 344, 346, 348, 353, 354, 359, 360, 362, 363, 365, 366, 368, 369, 370, 375, 376, 377, 380, 381, 382, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 413, 415, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 437, 439, 441, 442, 444, 445, 446, 447, 449, 450, 451, 456, 457, 458, 459, 467, 468, 470, 471, 474, 479, 480, 481, 482, 485, 487, 491, 492, 493, 494, 500, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 522, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 544, 545, 551, 556, 558, 559, 562, 568, 569, 577, 578, 582, 583, 585, 587, 592, 602, 603, 604, 605, 607, 610, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 665, 667, 668, 669, 674, 677, 678, 679, 683, 687, 690, 691, 695, 696, 697, 699, 701, 704, 707, 708, 709, 710, 714, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 729, 730, 741, 742, 748, 754, 756, 758, 759, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 835, 836, 837, 842, 843, 844, 845, 846, 847, 849, 850, 851, 858, 863, 864, 865, 866, 867, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 896, 901, 906, 907, 909, 910, 911, 912, 915, 917, 918, 920, 926, 941, 942, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 958, 959, 962, 963, 965, 967, 968, 970, 971, 978, 979, 982, 983, 985, 986, 990, 992, 994, 995, 996, 997, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009], "month": [0, 4, 154, 360, 365, 368, 378, 994], "cycl": [0, 4, 42, 44, 50, 61, 95, 181, 241, 245, 246, 262, 264, 308, 309, 365, 368, 388, 394, 553, 555, 602, 773, 774, 886, 941, 942, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "thrive": [0, 365], "intern": [0, 26, 70, 81, 100, 123, 135, 150, 161, 196, 275, 277, 314, 339, 348, 353, 360, 362, 366, 370, 373, 375, 377, 383, 386, 389, 393, 394, 396, 397, 399, 400, 413, 415, 420, 440, 443, 486, 509, 510, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 568, 569, 585, 586, 615, 618, 621, 627, 643, 651, 653, 671, 682, 704, 707, 731, 732, 756, 811, 812, 827, 828, 829, 850, 865, 866, 868, 870, 871, 872, 875, 878, 879, 880, 881, 920, 948, 949, 950, 952, 955, 958, 964, 967, 968, 976, 994, 997, 1003, 1005, 1006, 1007, 1008, 1009], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 59, 73, 79, 80, 84, 85, 95, 115, 118, 120, 122, 131, 149, 154, 155, 156, 162, 166, 167, 168, 172, 189, 193, 196, 197, 198, 202, 213, 214, 217, 225, 229, 231, 235, 240, 241, 243, 246, 250, 253, 254, 255, 257, 258, 259, 261, 266, 267, 273, 281, 282, 283, 285, 293, 297, 298, 300, 302, 305, 306, 307, 308, 309, 312, 315, 324, 329, 331, 337, 346, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 368, 369, 372, 373, 375, 376, 377, 378, 383, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 401, 410, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 467, 468, 471, 472, 474, 483, 484, 491, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 594, 602, 603, 604, 605, 608, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 662, 663, 664, 665, 666, 667, 670, 685, 687, 694, 714, 736, 747, 751, 764, 768, 769, 770, 771, 773, 774, 775, 776, 783, 787, 790, 795, 796, 799, 800, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 885, 889, 890, 891, 909, 921, 937, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 962, 964, 965, 966, 967, 968, 973, 976, 978, 982, 985, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "been": [0, 4, 9, 16, 26, 44, 59, 80, 100, 146, 149, 154, 156, 166, 221, 225, 227, 232, 252, 253, 255, 261, 305, 306, 307, 308, 309, 314, 337, 348, 359, 360, 362, 363, 364, 365, 366, 368, 370, 372, 373, 375, 376, 377, 378, 383, 386, 387, 389, 391, 393, 394, 396, 399, 410, 413, 444, 446, 447, 449, 453, 461, 498, 509, 511, 512, 524, 525, 542, 543, 556, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 608, 609, 633, 634, 641, 643, 648, 650, 651, 652, 653, 694, 764, 770, 773, 774, 783, 795, 796, 820, 867, 870, 942, 944, 945, 947, 948, 949, 952, 953, 955, 958, 962, 964, 966, 967, 973, 976, 978, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "lead": [0, 7, 25, 31, 37, 52, 60, 71, 119, 122, 146, 166, 167, 168, 175, 185, 187, 196, 200, 230, 255, 256, 258, 262, 280, 281, 293, 297, 299, 307, 324, 338, 342, 348, 352, 353, 359, 364, 372, 373, 376, 377, 383, 386, 389, 391, 393, 394, 395, 396, 398, 427, 437, 440, 443, 470, 490, 502, 510, 513, 514, 515, 518, 522, 526, 532, 533, 534, 535, 538, 539, 540, 541, 581, 605, 621, 622, 625, 627, 628, 629, 635, 636, 637, 638, 654, 666, 670, 719, 768, 773, 774, 799, 811, 812, 816, 835, 842, 862, 863, 868, 870, 878, 879, 880, 881, 941, 946, 948, 949, 951, 952, 953, 955, 956, 958, 960, 962, 965, 966, 968, 976, 978, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 30, 31, 32, 34, 37, 39, 40, 43, 44, 45, 46, 47, 48, 50, 52, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 90, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 172, 175, 177, 178, 179, 180, 181, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 202, 204, 205, 213, 214, 216, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 246, 249, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 273, 275, 277, 280, 281, 282, 283, 284, 285, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 314, 315, 321, 322, 324, 328, 329, 330, 332, 333, 334, 337, 338, 339, 342, 344, 345, 346, 348, 352, 353, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 725, 726, 727, 728, 729, 730, 731, 732, 735, 737, 738, 739, 740, 743, 744, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 917, 919, 920, 921, 922, 923, 926, 936, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 965, 966, 967, 968, 969, 971, 972, 973, 975, 976, 978, 979, 980, 982, 983, 984, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "decis": [0, 4, 16, 25, 27, 31, 34, 55, 57, 59, 108, 109, 112, 113, 115, 125, 127, 133, 153, 166, 178, 179, 188, 205, 206, 209, 210, 225, 226, 228, 235, 258, 278, 283, 286, 291, 297, 298, 299, 311, 318, 320, 321, 322, 323, 324, 325, 326, 330, 333, 334, 337, 347, 352, 355, 361, 362, 365, 377, 387, 389, 396, 413, 444, 475, 479, 494, 511, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 568, 569, 606, 607, 608, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 673, 675, 676, 677, 681, 694, 699, 700, 708, 712, 713, 715, 729, 755, 761, 762, 765, 770, 773, 774, 783, 797, 799, 800, 802, 813, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 946, 952, 953, 954, 955, 956, 958, 959, 960, 965, 966, 967, 970, 972, 973, 974, 976, 985, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 55, 56, 60, 61, 66, 72, 100, 119, 122, 127, 143, 146, 149, 154, 157, 166, 167, 168, 175, 182, 185, 188, 189, 190, 192, 196, 197, 198, 202, 214, 218, 227, 229, 231, 232, 240, 242, 246, 250, 255, 258, 264, 266, 284, 293, 297, 298, 302, 309, 324, 334, 337, 338, 339, 348, 352, 353, 354, 355, 359, 360, 363, 364, 366, 367, 369, 370, 372, 375, 377, 380, 383, 386, 387, 389, 390, 391, 393, 394, 396, 397, 398, 399, 401, 416, 417, 418, 419, 421, 422, 424, 426, 427, 428, 433, 434, 435, 437, 462, 478, 489, 490, 497, 498, 502, 507, 509, 516, 526, 527, 530, 531, 558, 559, 582, 583, 606, 624, 630, 631, 646, 666, 670, 710, 715, 741, 742, 754, 768, 769, 770, 772, 775, 780, 784, 785, 786, 788, 789, 793, 794, 801, 802, 805, 838, 847, 850, 851, 854, 858, 860, 861, 862, 863, 876, 884, 890, 891, 901, 907, 913, 914, 938, 941, 942, 944, 946, 948, 949, 951, 952, 953, 954, 955, 957, 958, 959, 960, 962, 965, 966, 967, 968, 970, 971, 972, 973, 975, 976, 978, 983, 985, 987, 991, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "process": [0, 4, 5, 26, 30, 31, 45, 46, 47, 48, 50, 65, 69, 71, 73, 78, 80, 96, 97, 99, 119, 126, 135, 136, 137, 138, 159, 175, 198, 232, 240, 241, 246, 255, 258, 267, 297, 307, 313, 338, 339, 342, 352, 353, 354, 355, 360, 364, 365, 366, 368, 370, 373, 375, 376, 377, 383, 389, 390, 391, 393, 394, 395, 396, 397, 398, 423, 424, 470, 479, 498, 509, 510, 511, 512, 513, 536, 537, 538, 563, 564, 566, 585, 586, 588, 589, 590, 592, 593, 594, 597, 598, 600, 602, 607, 608, 614, 618, 639, 647, 660, 661, 677, 696, 714, 754, 768, 770, 773, 774, 783, 792, 793, 794, 803, 804, 820, 834, 838, 840, 841, 842, 851, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 920, 941, 944, 948, 952, 955, 962, 964, 966, 968, 970, 971, 972, 973, 974, 976, 978, 979, 986, 987, 989, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 44, 67, 81, 106, 125, 148, 159, 164, 217, 221, 227, 246, 250, 261, 280, 306, 309, 311, 318, 324, 341, 343, 347, 352, 360, 362, 365, 366, 369, 375, 377, 378, 380, 386, 389, 391, 392, 393, 394, 396, 397, 398, 399, 417, 418, 421, 425, 426, 427, 428, 429, 432, 437, 438, 447, 470, 478, 479, 483, 486, 488, 489, 496, 505, 510, 516, 519, 538, 585, 586, 587, 591, 592, 593, 664, 671, 683, 687, 797, 819, 824, 851, 862, 863, 866, 878, 879, 880, 881, 884, 906, 907, 923, 926, 949, 951, 955, 957, 958, 962, 965, 968, 972, 973, 981, 986, 987, 994, 995, 997, 998, 1000, 1004], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 284, 285, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 322, 323, 324, 329, 330, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 376, 377, 378, 379, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 909, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 926, 927, 933, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 978, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "laid": [0, 365], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 69, 70, 103, 108, 114, 116, 123, 133, 138, 164, 168, 196, 198, 204, 214, 240, 242, 253, 255, 258, 263, 267, 273, 308, 315, 317, 320, 321, 324, 337, 351, 360, 362, 363, 365, 367, 368, 370, 375, 377, 389, 392, 394, 396, 399, 411, 412, 447, 459, 473, 490, 491, 513, 515, 522, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 563, 564, 566, 579, 582, 583, 609, 626, 630, 641, 643, 648, 650, 651, 700, 715, 770, 772, 773, 774, 775, 776, 777, 778, 779, 783, 797, 806, 807, 808, 809, 810, 841, 848, 859, 885, 916, 918, 921, 942, 946, 947, 951, 952, 953, 955, 960, 962, 973, 974, 975, 976, 982, 985, 987, 989, 994, 996, 998, 1000, 1002, 1003, 1006, 1007], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 53, 70, 72, 88, 89, 91, 95, 126, 177, 179, 193, 194, 211, 229, 232, 256, 257, 293, 316, 329, 339, 340, 352, 353, 354, 355, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 372, 375, 377, 378, 380, 383, 386, 388, 389, 394, 397, 400, 420, 422, 423, 424, 425, 428, 432, 439, 462, 463, 473, 474, 476, 486, 496, 498, 511, 519, 539, 563, 564, 565, 566, 569, 579, 606, 614, 618, 633, 634, 641, 643, 648, 649, 650, 651, 671, 677, 679, 685, 691, 710, 731, 732, 742, 751, 752, 753, 764, 766, 770, 773, 774, 783, 793, 795, 798, 801, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 832, 843, 870, 875, 886, 889, 891, 904, 941, 948, 950, 952, 953, 954, 955, 956, 960, 966, 969, 970, 971, 976, 980, 985, 987, 995, 996, 1000], "peopl": [0, 6, 69, 233, 258, 337, 338, 353, 354, 360, 362, 364, 365, 395, 467, 468, 616, 808, 972, 983], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 37, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 61, 63, 65, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 142, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 200, 205, 207, 214, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 241, 242, 243, 245, 249, 250, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 273, 275, 277, 280, 281, 285, 288, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 309, 312, 314, 315, 316, 317, 322, 324, 326, 328, 332, 333, 337, 338, 339, 342, 346, 348, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 462, 463, 467, 469, 470, 472, 475, 476, 477, 478, 479, 483, 484, 485, 487, 490, 491, 492, 493, 494, 495, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 681, 683, 686, 687, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 713, 714, 716, 718, 719, 721, 723, 724, 726, 727, 729, 730, 734, 735, 736, 738, 740, 741, 742, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 773, 774, 776, 781, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 895, 896, 899, 901, 906, 907, 908, 911, 912, 915, 917, 918, 920, 923, 926, 927, 931, 932, 933, 936, 938, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 975, 976, 978, 979, 980, 981, 982, 984, 985, 986, 987, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "current": [0, 8, 46, 84, 154, 166, 214, 297, 305, 353, 354, 360, 363, 365, 366, 369, 373, 375, 377, 378, 385, 386, 388, 389, 393, 396, 397, 398, 399, 416, 425, 443, 444, 445, 446, 447, 448, 449, 450, 451, 507, 510, 516, 528, 529, 532, 533, 534, 535, 537, 539, 540, 541, 566, 568, 585, 592, 601, 602, 621, 633, 642, 646, 650, 651, 652, 653, 761, 768, 769, 816, 820, 828, 829, 847, 858, 868, 878, 879, 880, 881, 884, 927, 941, 946, 948, 952, 955, 956, 962, 973, 985, 1002, 1006, 1008, 1009], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 74, 77, 78, 81, 84, 89, 90, 91, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 118, 119, 121, 122, 123, 125, 127, 128, 130, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 166, 167, 169, 172, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 194, 196, 198, 202, 203, 205, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 231, 232, 234, 240, 242, 243, 250, 255, 256, 258, 259, 262, 266, 268, 269, 275, 278, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 294, 297, 300, 302, 305, 307, 308, 309, 313, 314, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 334, 337, 338, 339, 343, 344, 345, 346, 348, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 377, 378, 379, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 399, 401, 403, 410, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 463, 470, 472, 474, 475, 479, 485, 486, 494, 500, 501, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 547, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 662, 663, 664, 665, 666, 667, 668, 675, 676, 682, 685, 690, 694, 708, 714, 715, 731, 732, 752, 753, 768, 769, 770, 772, 773, 774, 778, 783, 787, 788, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 885, 888, 890, 891, 894, 909, 936, 940, 941, 943, 944, 946, 948, 949, 950, 953, 954, 955, 956, 957, 959, 960, 962, 964, 965, 966, 967, 968, 972, 973, 976, 978, 982, 983, 985, 986, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mainten": [0, 365, 372, 375, 380, 382, 948, 973, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "j\u00e9r\u00e9mie": [0, 1, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "du": [0, 1, 2, 994, 995, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "boisberrang": [0, 1, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "jori": [0, 1, 1001, 1002, 1003, 1006, 1007], "van": [0, 1, 359, 391, 444, 449, 509, 602, 667, 671, 942, 949, 952, 958, 976, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007], "den": [0, 1, 995, 996, 1001, 1002, 1003, 1006, 1007], "bossch": [0, 1, 1001, 1002, 1003, 1007], "lo\u00efc": [0, 1, 1002, 1005, 1007, 1008, 1009], "est\u00e8v": [0, 1, 1002, 1005, 1007, 1008, 1009], "thoma": [0, 1, 103, 225, 297, 356, 378, 866, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "j": [0, 1, 11, 17, 37, 38, 40, 43, 60, 69, 78, 79, 80, 94, 109, 113, 114, 124, 129, 150, 162, 167, 208, 220, 233, 240, 254, 255, 260, 266, 279, 285, 288, 301, 346, 359, 360, 362, 368, 375, 386, 387, 389, 391, 393, 394, 396, 397, 399, 400, 413, 416, 420, 428, 429, 444, 449, 472, 488, 491, 492, 493, 495, 503, 506, 509, 511, 512, 513, 515, 516, 522, 534, 535, 568, 569, 607, 608, 612, 619, 620, 623, 624, 641, 642, 644, 655, 663, 664, 665, 667, 668, 669, 671, 679, 682, 684, 688, 690, 692, 695, 696, 697, 699, 728, 729, 731, 732, 747, 751, 761, 762, 763, 764, 800, 801, 808, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 842, 851, 878, 879, 941, 942, 946, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 964, 966, 967, 968, 970, 987, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "fan": [0, 1, 378, 967, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "olivi": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 256, 258, 337, 338, 339, 378, 866, 965, 971, 973, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "grisel": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 256, 258, 337, 338, 339, 378, 971, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "yaroslav": [0, 1, 994, 995, 996, 997, 1000, 1001, 1002, 1003], "halchenko": [0, 1, 994, 995, 996, 997, 1000, 1001, 1002, 1003], "nicola": [0, 1, 146, 301, 633, 948, 965, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "hug": [0, 1, 146, 301, 970, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "adrin": [0, 1, 64, 333, 378, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "jalali": [0, 1, 64, 333, 378, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "julien": [0, 1, 633, 948, 976, 994, 997, 1001, 1002, 1006, 1007, 1008, 1009], "jerphanion": [0, 1, 1006, 1007, 1008, 1009], "guillaum": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 184, 185, 198, 218, 297, 976, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "lemaitr": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 184, 185, 198, 218, 297, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "christian": [0, 1, 19, 196, 197, 198, 214, 337, 338, 360, 976, 987, 994, 995, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "lorentzen": [0, 1, 196, 197, 198, 214, 1004, 1005, 1006, 1007, 1008, 1009], "jan": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 197, 231, 850, 994, 997, 998, 999, 1000, 1002, 1003, 1006], "hendrik": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 994, 997, 998, 999, 1000], "metzen": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 994, 997, 998, 999, 1000], "andrea": [0, 1, 31, 73, 100, 114, 187, 230, 298, 299, 314, 332, 333, 378, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "mueller": [0, 1, 73, 100, 114, 187, 230, 314, 332, 333, 976, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "vlad": [0, 1, 95, 232, 294, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003], "nicula": [0, 1, 95, 232, 294, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003], "joel": [0, 1, 71, 378, 397, 510, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "nothman": [0, 1, 71, 378, 397, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "hanmin": [0, 1, 298, 1001, 1002, 1003, 1004, 1005], "qin": [0, 1, 298, 362, 397, 1001, 1002, 1003, 1004, 1005], "bertrand": [0, 1, 994, 1000, 1001, 1006, 1007], "thirion": [0, 1, 994, 1000, 1001, 1007], "tom": [0, 1, 188, 204, 275, 277, 299, 300, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "dupr\u00e9": [0, 1, 299, 300, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "la": [0, 1, 188, 204, 275, 277, 299, 300, 362, 976, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "tour": [0, 1, 188, 204, 275, 277, 299, 300, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "nell": [0, 1, 39, 220, 228, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006], "roman": [0, 1, 196, 214, 378, 602, 884, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "yurchak": [0, 1, 196, 214, 378, 397, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "pleas": [0, 12, 17, 26, 70, 109, 115, 116, 117, 123, 129, 132, 143, 154, 166, 168, 177, 200, 226, 227, 228, 230, 235, 236, 237, 253, 255, 256, 262, 267, 275, 285, 294, 305, 306, 307, 308, 309, 314, 346, 353, 359, 360, 363, 365, 366, 368, 372, 375, 376, 377, 380, 383, 385, 388, 389, 396, 397, 425, 470, 542, 543, 606, 607, 608, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 773, 774, 794, 848, 859, 872, 875, 878, 879, 880, 881, 941, 956, 962, 966, 967, 972, 973, 975, 978, 985, 987, 994, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "do": [0, 4, 10, 25, 42, 60, 66, 73, 89, 99, 101, 105, 114, 116, 118, 120, 122, 123, 129, 136, 143, 154, 161, 166, 167, 168, 196, 214, 217, 219, 232, 246, 250, 253, 256, 257, 258, 273, 275, 277, 281, 308, 317, 321, 324, 329, 332, 337, 338, 339, 346, 348, 352, 353, 354, 360, 362, 364, 365, 366, 367, 368, 371, 372, 377, 378, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 425, 436, 478, 511, 513, 517, 519, 527, 530, 556, 557, 558, 563, 564, 566, 620, 621, 627, 630, 631, 634, 641, 643, 651, 710, 736, 751, 755, 786, 789, 803, 804, 808, 834, 835, 836, 838, 843, 849, 851, 855, 856, 858, 859, 860, 861, 878, 879, 880, 881, 889, 926, 941, 944, 946, 948, 949, 952, 953, 955, 956, 960, 962, 967, 968, 972, 973, 976, 978, 985, 987, 994, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "email": [0, 337, 365, 375, 397, 806, 954, 976], "directli": [0, 6, 19, 27, 37, 45, 46, 55, 70, 115, 146, 157, 184, 196, 202, 214, 226, 252, 260, 294, 297, 309, 339, 348, 352, 363, 365, 366, 368, 370, 376, 377, 386, 387, 389, 390, 391, 392, 393, 397, 399, 418, 427, 437, 439, 444, 449, 502, 542, 543, 544, 545, 572, 586, 595, 607, 618, 621, 622, 627, 628, 635, 636, 637, 638, 639, 652, 656, 659, 665, 747, 751, 754, 763, 764, 770, 773, 774, 783, 816, 830, 831, 832, 838, 848, 850, 852, 859, 920, 941, 948, 950, 955, 957, 959, 962, 967, 968, 973, 979, 982, 983, 994, 1002, 1003, 1005, 1006, 1007], "ask": [0, 161, 162, 255, 355, 364, 365, 368, 369, 372, 377, 378, 398, 813, 814, 815, 817, 819, 821, 822, 823, 970, 975], "assist": [0, 365, 375, 962, 976], "report": [0, 4, 8, 32, 69, 74, 143, 157, 184, 253, 263, 264, 275, 305, 312, 348, 360, 364, 366, 367, 370, 372, 375, 377, 380, 389, 393, 586, 624, 633, 639, 660, 661, 675, 687, 702, 703, 711, 756, 757, 760, 800, 809, 865, 883, 901, 948, 955, 972, 973, 975, 995, 998, 1001, 1002, 1004, 1005, 1007], "issu": [0, 4, 25, 78, 85, 196, 214, 260, 353, 355, 359, 367, 368, 369, 372, 373, 375, 377, 378, 379, 380, 383, 385, 389, 391, 392, 397, 399, 424, 427, 437, 448, 450, 456, 457, 458, 474, 509, 514, 518, 548, 560, 561, 563, 564, 566, 586, 602, 666, 670, 742, 842, 847, 858, 897, 941, 942, 949, 955, 960, 962, 967, 972, 973, 975, 986, 987, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009], "instead": [0, 4, 5, 6, 37, 45, 48, 49, 55, 70, 89, 95, 100, 101, 102, 113, 117, 126, 143, 146, 149, 166, 193, 196, 198, 211, 214, 221, 246, 256, 273, 280, 297, 305, 306, 307, 308, 309, 324, 326, 337, 339, 348, 352, 353, 359, 360, 363, 364, 365, 366, 368, 369, 372, 373, 375, 376, 377, 383, 385, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 408, 413, 416, 417, 418, 420, 421, 422, 425, 431, 434, 440, 442, 447, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 484, 485, 508, 510, 512, 514, 515, 516, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 545, 565, 582, 583, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 607, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 645, 646, 647, 648, 651, 653, 654, 662, 665, 669, 674, 681, 719, 747, 751, 756, 768, 769, 770, 774, 781, 783, 788, 789, 804, 805, 814, 822, 829, 832, 833, 844, 849, 851, 860, 861, 864, 871, 873, 875, 876, 878, 879, 880, 881, 884, 896, 902, 907, 915, 927, 941, 942, 944, 948, 949, 951, 952, 953, 956, 957, 962, 966, 967, 968, 972, 975, 983, 985, 987, 991, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 50, 57, 61, 63, 64, 66, 68, 79, 85, 88, 89, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 121, 123, 129, 135, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 166, 167, 169, 172, 175, 176, 177, 187, 197, 198, 199, 202, 213, 214, 217, 219, 227, 229, 235, 236, 241, 242, 243, 249, 250, 252, 254, 255, 256, 257, 258, 262, 264, 265, 266, 269, 270, 275, 281, 282, 284, 288, 297, 305, 306, 307, 308, 309, 314, 324, 337, 338, 339, 342, 343, 344, 345, 348, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 370, 371, 372, 375, 376, 377, 380, 387, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 413, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 461, 462, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 557, 558, 559, 563, 564, 565, 566, 569, 570, 571, 573, 574, 575, 577, 582, 583, 584, 585, 586, 589, 594, 597, 598, 602, 607, 608, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 680, 682, 685, 687, 716, 736, 747, 751, 752, 753, 754, 761, 763, 764, 768, 769, 770, 772, 773, 774, 775, 780, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 833, 835, 836, 840, 841, 843, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 906, 907, 921, 923, 926, 941, 942, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 971, 973, 976, 978, 980, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "what": [0, 4, 9, 12, 40, 45, 52, 85, 96, 100, 118, 166, 185, 202, 204, 212, 227, 293, 337, 339, 342, 348, 353, 360, 365, 366, 368, 370, 372, 376, 377, 378, 379, 389, 395, 396, 397, 478, 511, 563, 564, 566, 621, 627, 671, 855, 856, 858, 859, 860, 861, 878, 879, 880, 881, 951, 952, 953, 955, 968, 973, 975, 978, 994, 1001], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 60, 69, 70, 71, 72, 77, 84, 95, 99, 103, 104, 105, 113, 119, 120, 121, 122, 123, 129, 132, 146, 149, 150, 155, 161, 166, 175, 180, 184, 185, 192, 210, 211, 212, 217, 220, 225, 230, 231, 234, 242, 246, 249, 253, 254, 255, 256, 257, 259, 262, 263, 266, 267, 269, 270, 273, 279, 284, 298, 307, 308, 324, 327, 332, 337, 338, 339, 345, 352, 359, 362, 364, 365, 370, 376, 377, 380, 386, 387, 389, 393, 394, 396, 397, 398, 399, 408, 419, 422, 424, 426, 427, 428, 434, 437, 440, 447, 456, 457, 458, 513, 520, 521, 527, 529, 531, 532, 533, 534, 535, 537, 539, 540, 541, 543, 545, 568, 569, 572, 577, 585, 586, 610, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 650, 651, 653, 654, 655, 663, 664, 665, 668, 669, 677, 682, 693, 694, 695, 696, 697, 701, 702, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 756, 757, 758, 760, 763, 764, 765, 767, 768, 769, 770, 773, 774, 783, 794, 796, 799, 804, 805, 814, 822, 829, 871, 873, 876, 878, 879, 880, 881, 941, 946, 947, 948, 949, 952, 955, 956, 958, 966, 968, 972, 973, 976, 978, 983, 987, 994, 997, 1000, 1002, 1003, 1004, 1007, 1008], "wai": [0, 4, 17, 27, 50, 59, 70, 73, 115, 121, 127, 146, 156, 166, 168, 169, 197, 201, 211, 227, 228, 231, 235, 250, 255, 262, 297, 298, 308, 348, 352, 353, 354, 359, 361, 363, 364, 366, 367, 368, 372, 373, 377, 378, 380, 383, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 404, 419, 420, 426, 427, 428, 434, 435, 437, 438, 444, 470, 530, 531, 538, 547, 564, 574, 575, 586, 607, 641, 642, 651, 652, 653, 678, 680, 691, 709, 710, 727, 728, 730, 736, 747, 751, 761, 766, 792, 800, 817, 838, 844, 849, 854, 880, 881, 923, 926, 941, 942, 946, 947, 948, 949, 950, 951, 952, 953, 955, 957, 958, 959, 960, 962, 964, 966, 967, 968, 972, 973, 975, 976, 978, 986, 987, 994, 996, 1002, 1007, 1008], "question": [0, 135, 255, 332, 355, 364, 365, 369, 372, 393, 396, 800, 872, 875, 948, 951, 952, 958, 970, 976], "faq": [0, 372, 393, 667, 949, 962], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 59, 68, 69, 70, 73, 77, 79, 85, 101, 105, 110, 111, 114, 117, 118, 119, 120, 122, 123, 127, 129, 143, 154, 156, 164, 166, 167, 168, 169, 172, 177, 185, 186, 192, 197, 198, 199, 200, 203, 204, 210, 214, 221, 222, 227, 230, 233, 234, 235, 237, 246, 250, 251, 253, 255, 256, 257, 262, 265, 267, 268, 269, 275, 277, 279, 281, 282, 293, 306, 307, 308, 321, 322, 324, 327, 332, 337, 338, 342, 346, 352, 353, 354, 355, 360, 363, 364, 366, 367, 369, 372, 376, 377, 378, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 413, 419, 420, 422, 427, 439, 511, 534, 568, 569, 572, 585, 597, 598, 610, 614, 666, 667, 678, 694, 730, 763, 770, 773, 774, 783, 794, 817, 828, 829, 875, 941, 942, 946, 947, 948, 949, 951, 952, 958, 959, 960, 962, 964, 965, 967, 968, 971, 973, 975, 976, 978, 980, 982, 987, 989, 994, 996, 999, 1005, 1008, 1009], "you": [0, 4, 14, 16, 24, 70, 117, 118, 119, 121, 123, 143, 146, 157, 162, 167, 184, 197, 198, 227, 243, 250, 255, 256, 262, 270, 281, 305, 306, 309, 313, 316, 337, 348, 352, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 372, 373, 376, 377, 380, 383, 387, 388, 389, 390, 391, 393, 396, 397, 398, 400, 401, 405, 413, 420, 424, 439, 442, 444, 470, 474, 475, 478, 479, 484, 485, 507, 508, 511, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 543, 544, 545, 553, 555, 563, 564, 566, 582, 583, 585, 602, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 662, 675, 758, 769, 772, 773, 774, 775, 784, 785, 786, 788, 789, 799, 800, 801, 802, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 821, 828, 830, 831, 835, 836, 843, 844, 845, 855, 856, 858, 859, 860, 861, 863, 865, 866, 870, 872, 875, 878, 879, 880, 881, 907, 941, 942, 947, 948, 952, 953, 956, 958, 959, 962, 963, 966, 967, 968, 971, 972, 975, 976, 978, 979, 982, 985, 987, 994, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 55, 57, 59, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 79, 80, 81, 85, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 141, 142, 143, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 181, 184, 185, 187, 189, 191, 192, 194, 196, 197, 198, 200, 201, 202, 204, 212, 213, 214, 217, 218, 219, 225, 226, 227, 228, 229, 231, 235, 240, 241, 242, 243, 245, 246, 249, 250, 252, 253, 255, 256, 257, 258, 259, 262, 264, 266, 267, 269, 270, 273, 275, 277, 279, 280, 281, 282, 284, 292, 293, 294, 297, 298, 299, 301, 302, 305, 306, 307, 308, 309, 313, 314, 316, 317, 321, 322, 324, 327, 332, 337, 338, 339, 344, 345, 346, 348, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 376, 377, 378, 379, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 408, 410, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 431, 432, 434, 436, 437, 439, 440, 441, 442, 443, 447, 456, 457, 458, 461, 470, 473, 474, 478, 483, 484, 487, 496, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 553, 554, 555, 556, 557, 558, 559, 563, 564, 566, 567, 569, 572, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 607, 609, 610, 613, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 664, 666, 667, 668, 669, 670, 673, 674, 675, 676, 678, 681, 683, 685, 686, 692, 694, 695, 696, 697, 699, 700, 702, 703, 705, 706, 710, 711, 712, 713, 715, 716, 719, 725, 728, 729, 730, 731, 732, 736, 752, 753, 755, 756, 757, 758, 760, 761, 762, 765, 766, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 828, 829, 830, 831, 834, 835, 836, 838, 839, 840, 844, 845, 846, 849, 850, 851, 855, 862, 863, 868, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 886, 888, 890, 894, 896, 901, 906, 907, 913, 915, 917, 920, 922, 923, 926, 933, 936, 937, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "contribut": [0, 13, 123, 154, 355, 362, 363, 366, 367, 368, 372, 377, 378, 380, 394, 395, 396, 399, 422, 424, 528, 529, 534, 535, 699, 702, 729, 946, 952, 955, 960, 967, 970, 972, 973, 976, 985, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "activ": [0, 164, 204, 240, 246, 256, 311, 318, 339, 359, 360, 363, 365, 372, 375, 377, 378, 380, 390, 470, 477, 501, 607, 610, 612, 625, 626, 628, 629, 630, 638, 639, 640, 657, 658, 659, 660, 661, 687, 692, 768, 827, 828, 829, 866, 948, 949, 950, 951, 955, 956, 957, 965], "who": [0, 69, 353, 355, 360, 365, 371, 378, 380, 813, 814, 815, 817, 819, 821, 822, 823, 970, 972, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 57, 59, 63, 69, 70, 77, 79, 84, 85, 95, 103, 105, 113, 117, 119, 121, 122, 123, 127, 129, 142, 143, 144, 146, 149, 151, 154, 162, 166, 167, 168, 169, 172, 176, 177, 179, 185, 188, 189, 192, 196, 197, 198, 201, 205, 213, 214, 217, 228, 230, 235, 245, 246, 253, 255, 256, 258, 261, 262, 264, 265, 266, 275, 278, 283, 286, 288, 291, 297, 298, 299, 301, 305, 306, 307, 308, 317, 320, 321, 322, 324, 326, 337, 338, 339, 342, 343, 346, 348, 352, 353, 354, 358, 359, 360, 362, 363, 364, 365, 366, 368, 370, 372, 373, 375, 376, 377, 380, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 413, 414, 415, 417, 418, 421, 422, 423, 425, 427, 437, 438, 440, 442, 456, 458, 466, 470, 472, 478, 483, 507, 508, 510, 511, 516, 521, 524, 526, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 582, 583, 584, 585, 586, 597, 607, 608, 610, 618, 619, 620, 621, 622, 625, 627, 628, 629, 631, 635, 636, 637, 638, 647, 651, 653, 656, 659, 662, 666, 669, 670, 674, 684, 687, 696, 702, 703, 711, 716, 736, 752, 753, 756, 757, 760, 768, 769, 770, 773, 774, 783, 786, 789, 793, 794, 796, 797, 798, 800, 810, 813, 814, 815, 817, 818, 819, 821, 822, 823, 827, 828, 829, 831, 833, 834, 839, 840, 844, 848, 851, 855, 859, 872, 875, 878, 879, 880, 881, 890, 909, 918, 920, 941, 942, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 965, 966, 967, 968, 972, 973, 975, 976, 978, 983, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "help": [0, 4, 9, 11, 16, 69, 73, 100, 106, 217, 256, 258, 294, 321, 324, 338, 339, 348, 352, 353, 363, 366, 367, 368, 369, 370, 372, 373, 377, 378, 379, 383, 389, 390, 393, 397, 399, 511, 551, 602, 625, 629, 640, 660, 661, 667, 688, 807, 878, 879, 880, 881, 942, 946, 947, 949, 951, 952, 954, 956, 963, 968, 971, 972, 973, 975, 976, 987, 1000, 1001, 1002, 1005, 1008], "triag": [0, 355, 365, 367], "pr": [0, 131, 353, 365, 367, 372, 397, 714, 952, 1004, 1006], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 69, 70, 71, 72, 73, 74, 78, 80, 84, 85, 87, 88, 89, 92, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 143, 144, 145, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 172, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 297, 298, 299, 300, 301, 302, 305, 307, 308, 309, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 352, 353, 355, 357, 358, 360, 362, 366, 367, 368, 369, 370, 372, 373, 375, 376, 383, 386, 387, 389, 393, 395, 397, 398, 399, 401, 408, 413, 416, 419, 422, 424, 427, 429, 433, 434, 435, 437, 439, 440, 442, 444, 447, 449, 456, 457, 458, 462, 465, 466, 469, 470, 471, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 513, 515, 516, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 589, 590, 593, 594, 595, 597, 598, 602, 603, 604, 605, 607, 608, 609, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 650, 652, 653, 654, 655, 660, 661, 664, 665, 666, 667, 668, 669, 670, 678, 680, 691, 695, 696, 697, 710, 716, 730, 751, 754, 758, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 802, 803, 804, 805, 811, 812, 814, 816, 817, 819, 820, 821, 822, 823, 827, 828, 829, 831, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 858, 859, 860, 861, 862, 863, 870, 871, 872, 873, 875, 876, 879, 881, 882, 883, 884, 901, 902, 906, 907, 910, 911, 919, 921, 923, 926, 941, 942, 944, 946, 947, 949, 951, 952, 953, 955, 957, 958, 959, 960, 964, 965, 967, 968, 970, 972, 974, 975, 976, 978, 981, 985, 986, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "juan": [0, 356, 994, 1005, 1006, 1007, 1008, 1009], "carlo": [0, 230, 356, 396, 399, 586, 616, 617, 944, 957, 994, 1005, 1006, 1007, 1008], "alfaro": [0, 356, 1005, 1006, 1007, 1008], "jim\u00e9nez": [0, 356, 1002, 1005, 1006, 1007, 1008], "arturo": [0, 37, 175, 256, 258, 337, 338, 339, 356, 1008, 1009], "amor": [0, 37, 175, 256, 258, 337, 338, 339, 356, 1008, 1009], "luci": [0, 261, 356, 1005, 1006, 1007, 1008, 1009], "liu": [0, 261, 356, 538, 699, 729, 952, 958, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009], "maxwel": [0, 356, 1004, 1007, 1008], "martin": [0, 356, 695, 696, 697, 948, 952, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "loyola": [0, 356, 1007, 1008], "sylvain": [0, 356, 998, 1003, 1004, 1005, 1006, 1007, 1008], "mari\u00e9": [0, 356, 1003, 1004, 1005, 1006, 1007, 1008], "chiara": [0, 356, 1004, 1005, 1006, 1007, 1008, 1009], "marmo": [0, 356, 1004, 1005, 1006, 1007, 1008, 1009], "norbert": [0, 356, 996, 1006, 1007, 1008], "prein": [0, 356, 1006, 1007, 1008], "reshama": [0, 350, 356, 1002, 1003, 1005, 1006, 1007, 1008], "shaikh": [0, 350, 356, 1002, 1003, 1005, 1006, 1007, 1008], "albert": [0, 225, 356, 1001, 1002, 1003, 1006, 1007], "meekail": [0, 356, 1008, 1009], "zain": [0, 356, 1008, 1009], "around": [0, 4, 26, 37, 52, 84, 113, 122, 155, 172, 257, 258, 294, 312, 314, 315, 324, 327, 337, 338, 339, 348, 360, 362, 365, 370, 375, 389, 393, 394, 397, 399, 446, 447, 490, 519, 595, 615, 624, 678, 768, 817, 819, 821, 822, 823, 851, 948, 949, 951, 958, 962, 966, 972, 973, 976, 985, 987, 998, 999], "lauren": [0, 349, 667, 671, 949, 1006], "burk": [0, 349], "francoisgoupil": [0, 349, 1008], "longer": [0, 4, 37, 113, 181, 293, 308, 365, 366, 393, 396, 397, 399, 424, 511, 947, 951, 952, 954, 957, 967, 976, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mathieu": [0, 2, 24, 48, 100, 187, 197, 218, 232, 256, 337, 994, 995, 996, 997, 998, 999, 1000, 1001, 1007], "blondel": [0, 2, 24, 48, 100, 187, 197, 218, 232, 256, 337, 994, 995, 996, 997, 998, 999, 1000, 1001, 1007], "lar": [0, 2, 14, 98, 146, 164, 174, 185, 215, 337, 338, 339, 362, 446, 447, 453, 476, 506, 512, 514, 517, 518, 520, 521, 523, 626, 627, 628, 629, 630, 631, 638, 639, 640, 653, 657, 658, 659, 660, 661, 974, 985, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1007], "buitinck": [0, 2, 14, 337, 338, 339, 994, 995, 996, 997, 998, 999, 1000, 1001], "noel": [0, 2, 109, 110, 111, 112, 994, 995, 996, 997, 998, 1006], "daw": [0, 2, 109, 110, 111, 112, 994, 995, 996, 997, 998], "dubourg": [0, 2, 152, 156, 976, 994, 998], "edouard": [0, 2, 994], "duchesnai": [0, 2, 994], "alexand": [0, 2, 389, 394, 510, 837, 996, 997, 998, 1000, 1001, 1002, 1006, 1007, 1008], "fabisch": [0, 2, 996, 997, 998, 1000], "virgil": [0, 2, 9, 994, 995, 997], "fritsch": [0, 2, 9, 994, 995, 997], "satrajit": [0, 2, 994, 995], "ghosh": [0, 2, 389, 994, 995], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 994, 997, 1002, 1003, 1004, 1005, 1008], "gorgolewski": [0, 2, 994, 997], "jaqu": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 179, 192, 193, 194, 219, 329, 332, 994, 995, 996, 997], "grobler": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 179, 192, 193, 194, 219, 329, 332, 994, 995, 996, 997], "brian": [0, 2, 46, 682, 952, 994, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008], "holt": [0, 2, 994], "arnaud": [0, 2, 995, 996, 997, 998, 999, 1000], "joli": [0, 2, 995, 996, 997, 998, 999, 1000], "thoui": [0, 2, 994], "rai": [0, 2, 920, 952, 994, 1004, 1006, 1007], "jone": [0, 2, 360, 994], "kyle": [0, 2, 99, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006], "kastner": [0, 2, 99, 996, 997, 998, 1005, 1006], "manoj": [0, 2, 42, 146, 178, 997, 998, 999, 1000, 1001], "kumar": [0, 2, 42, 146, 178, 360, 389, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "robert": [0, 2, 48, 71, 146, 184, 362, 394, 503, 510, 603, 631, 695, 696, 697, 708, 837, 942, 948, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004], "layton": [0, 2, 48, 994, 995, 996, 997, 999], "wei": [0, 2, 966, 994, 995, 998, 999, 1000, 1001, 1003, 1007], "li": [0, 2, 315, 360, 614, 617, 671, 699, 729, 863, 941, 944, 952, 955, 962, 964, 967, 994, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "paolo": [0, 2, 994, 998, 1004], "losi": [0, 2, 994], "gill": [0, 2, 113, 114, 994, 995, 996, 997, 998, 999, 1000], "loupp": [0, 2, 113, 114, 396, 530, 531, 994, 995, 996, 997, 998, 999, 1000], "jarrod": [0, 2, 1003], "millman": [0, 2, 1003], "passo": [0, 2, 994, 995], "peter": [0, 2, 11, 16, 62, 109, 121, 123, 124, 256, 337, 338, 389, 423, 425, 432, 624, 763, 764, 948, 952, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007], "prettenhof": [0, 2, 11, 16, 109, 121, 123, 124, 256, 337, 338, 994, 995, 996, 997, 998, 999], "venkat": [0, 2], "raghav": [0, 2, 120, 259, 297, 998, 999, 1000, 1001, 1002, 1006], "rajagopalan": [0, 2, 1002, 1006], "jacob": [0, 2, 999, 1000, 1001], "schreiber": [0, 2, 999, 1000, 1001], "shiqiao": [0, 2, 994, 995], "jake": [0, 2, 11, 156, 197, 217, 243, 280, 288, 971, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1008], "vanderpla": [0, 2, 11, 156, 197, 217, 243, 280, 288, 971, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002], "ward": [0, 2, 36, 39, 44, 52, 54, 55, 61, 67, 164, 169, 397, 417, 421, 438, 505, 824, 994, 997, 999], "farlei": [0, 2, 994], "ron": [0, 2, 242, 994], "weiss": [0, 2, 242, 389, 666, 994], "respons": [0, 146, 192, 196, 199, 265, 337, 362, 370, 377, 388, 389, 390, 396, 399, 439, 456, 457, 458, 606, 607, 608, 649, 650, 673, 675, 676, 768, 769, 953, 959, 970, 978], "If": [0, 4, 11, 16, 27, 42, 70, 81, 98, 117, 122, 129, 158, 162, 166, 177, 180, 195, 196, 211, 213, 255, 257, 262, 270, 280, 288, 297, 302, 324, 332, 333, 337, 338, 339, 346, 348, 352, 353, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 383, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 489, 490, 494, 497, 498, 499, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 685, 686, 687, 688, 690, 691, 692, 699, 700, 701, 702, 703, 704, 705, 709, 711, 714, 715, 718, 719, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 739, 740, 741, 742, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 781, 783, 786, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 899, 907, 909, 915, 917, 920, 921, 923, 926, 927, 933, 936, 937, 938, 939, 941, 942, 944, 946, 947, 948, 949, 950, 952, 955, 956, 958, 959, 962, 964, 966, 967, 968, 969, 972, 973, 975, 978, 979, 985, 986, 987, 994, 997, 998, 999, 1000, 1003, 1004, 1006, 1007, 1008], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 93, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 145, 146, 149, 150, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 208, 211, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 242, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 294, 296, 297, 299, 301, 302, 303, 305, 306, 307, 308, 309, 312, 313, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 339, 340, 342, 344, 345, 346, 351, 352, 353, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 371, 373, 376, 377, 378, 379, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 395, 399, 400, 401, 402, 406, 407, 408, 414, 415, 431, 432, 434, 436, 438, 443, 446, 453, 455, 459, 467, 474, 478, 483, 484, 491, 506, 518, 520, 521, 522, 523, 530, 547, 549, 550, 551, 552, 554, 558, 560, 561, 567, 570, 571, 573, 576, 578, 582, 584, 591, 595, 596, 599, 604, 606, 611, 613, 617, 622, 625, 626, 629, 634, 635, 636, 638, 642, 650, 658, 660, 661, 662, 669, 670, 671, 673, 674, 685, 688, 689, 690, 695, 696, 697, 699, 701, 703, 705, 708, 709, 712, 716, 719, 724, 729, 731, 732, 736, 737, 739, 740, 741, 742, 744, 747, 748, 749, 750, 753, 754, 756, 765, 776, 777, 778, 779, 780, 781, 782, 791, 799, 801, 803, 805, 807, 811, 812, 819, 821, 822, 823, 825, 833, 834, 837, 839, 842, 852, 853, 855, 857, 858, 860, 861, 862, 865, 869, 871, 880, 881, 882, 883, 886, 889, 890, 891, 896, 897, 906, 907, 915, 917, 920, 921, 923, 924, 928, 929, 930, 934, 935, 941, 942, 944, 945, 947, 950, 951, 953, 954, 955, 957, 958, 959, 960, 962, 963, 964, 965, 969, 970, 971, 972, 973, 974, 975, 978, 979, 981, 982, 983, 984, 986, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "scientif": [0, 32, 135, 136, 137, 138, 230, 355, 359, 363, 375, 380, 389, 427, 437, 476, 976, 979], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 50, 53, 55, 57, 61, 63, 64, 65, 69, 70, 71, 72, 74, 77, 79, 80, 81, 85, 88, 89, 91, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 129, 131, 132, 135, 141, 142, 143, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 179, 182, 184, 185, 187, 189, 191, 193, 196, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 212, 214, 217, 218, 221, 222, 225, 226, 228, 229, 230, 232, 235, 237, 240, 241, 242, 243, 246, 250, 252, 253, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 269, 273, 275, 277, 278, 280, 283, 284, 285, 286, 288, 291, 292, 293, 294, 297, 298, 299, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 320, 321, 322, 324, 325, 326, 327, 329, 332, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 375, 376, 377, 378, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 425, 444, 445, 446, 447, 448, 449, 450, 451, 476, 498, 506, 507, 509, 512, 524, 536, 537, 538, 544, 545, 586, 592, 602, 607, 608, 615, 626, 630, 633, 634, 641, 643, 648, 649, 650, 651, 652, 667, 685, 692, 694, 699, 719, 729, 737, 754, 792, 813, 814, 815, 817, 819, 820, 821, 822, 823, 844, 845, 851, 855, 856, 858, 859, 860, 861, 863, 866, 870, 874, 918, 941, 942, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 964, 965, 966, 967, 968, 969, 971, 972, 973, 976, 978, 982, 983, 984, 985, 986, 987, 991, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "would": [0, 4, 6, 9, 26, 32, 45, 57, 69, 77, 79, 80, 85, 91, 100, 101, 122, 146, 149, 154, 155, 166, 167, 168, 169, 172, 186, 196, 197, 198, 211, 214, 225, 242, 255, 256, 261, 263, 281, 293, 297, 298, 308, 315, 324, 333, 337, 339, 348, 352, 360, 361, 365, 366, 368, 370, 372, 373, 375, 376, 377, 378, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 408, 440, 443, 456, 457, 458, 463, 507, 509, 511, 516, 519, 527, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 545, 558, 559, 562, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 676, 682, 686, 687, 694, 729, 758, 762, 770, 772, 783, 796, 804, 805, 814, 822, 829, 855, 856, 858, 859, 860, 861, 862, 863, 868, 870, 871, 873, 876, 878, 879, 880, 881, 941, 942, 945, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 962, 967, 973, 976, 978, 983, 985, 987, 991, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "appreci": [0, 365], "citat": [0, 359, 362, 375], "paper": [0, 146, 172, 255, 362, 370, 375, 389, 391, 418, 424, 453, 479, 509, 516, 538, 616, 633, 641, 642, 646, 651, 654, 667, 761, 808, 817, 820, 862, 863, 948, 952, 955, 958, 967, 987, 994, 1001, 1002], "machin": [0, 4, 6, 8, 9, 27, 62, 142, 143, 149, 154, 167, 168, 208, 237, 255, 258, 261, 290, 295, 297, 302, 307, 320, 325, 332, 337, 339, 352, 353, 355, 358, 359, 360, 362, 363, 365, 367, 370, 371, 375, 376, 377, 379, 383, 387, 389, 393, 394, 396, 397, 399, 413, 415, 423, 453, 474, 477, 479, 485, 491, 492, 493, 505, 507, 509, 516, 519, 530, 531, 532, 533, 534, 535, 539, 540, 541, 568, 569, 585, 586, 589, 594, 597, 609, 613, 614, 616, 618, 619, 620, 625, 626, 629, 630, 631, 633, 634, 651, 657, 658, 667, 682, 687, 698, 708, 714, 716, 761, 768, 796, 797, 811, 812, 817, 820, 827, 828, 829, 831, 849, 851, 856, 870, 871, 872, 873, 875, 876, 880, 881, 941, 944, 945, 948, 949, 950, 952, 953, 955, 958, 959, 960, 962, 966, 968, 971, 972, 973, 974, 975, 976, 979, 980, 981, 983, 987, 988, 989, 991, 994, 996, 1006, 1007, 1008, 1009], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 352, 354, 359, 363, 365, 366, 367, 368, 369, 372, 373, 375, 377, 378, 380, 390, 397, 470, 483, 484, 556, 674, 780, 920, 952, 962, 968, 970, 973, 975, 976, 978, 979, 981, 987, 989, 994, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "et": [0, 11, 77, 78, 109, 110, 124, 184, 288, 362, 386, 389, 391, 394, 396, 397, 398, 426, 450, 472, 494, 495, 503, 510, 516, 519, 538, 657, 658, 693, 694, 806, 808, 828, 829, 863, 906, 907, 948, 949, 952, 958, 962, 964, 967, 968, 1002], "al": [0, 11, 77, 78, 109, 110, 124, 184, 288, 362, 386, 389, 391, 394, 396, 397, 398, 426, 450, 472, 494, 495, 503, 510, 516, 519, 538, 657, 658, 693, 694, 806, 808, 828, 829, 863, 906, 907, 948, 949, 952, 958, 962, 964, 967, 968, 1002, 1007], "jmlr": [0, 389, 641, 642, 651, 678, 948, 967], "12": [0, 4, 6, 10, 12, 13, 15, 33, 40, 42, 45, 50, 55, 56, 72, 73, 74, 84, 118, 119, 123, 133, 139, 152, 153, 154, 162, 163, 166, 169, 176, 182, 196, 214, 217, 219, 220, 221, 225, 226, 228, 235, 242, 243, 254, 255, 258, 261, 267, 271, 273, 274, 301, 339, 362, 363, 369, 376, 378, 389, 393, 397, 419, 422, 424, 456, 457, 458, 459, 507, 509, 516, 545, 639, 644, 646, 660, 661, 664, 667, 668, 768, 769, 771, 787, 790, 802, 823, 839, 941, 942, 948, 950, 953, 962, 966, 967, 970, 978, 983, 992, 995, 997, 1001, 1002, 1004, 1005], "pp": [0, 62, 254, 362, 389, 391, 397, 400, 401, 420, 423, 427, 437, 486, 508, 509, 516, 565, 610, 618, 639, 660, 661, 694, 699, 703, 713, 729, 742, 756, 806, 808, 810, 827, 847, 858, 945, 952, 954, 955, 965], "2825": 0, "2830": 0, "2011": [0, 47, 218, 370, 394, 397, 510, 513, 515, 516, 522, 565, 602, 613, 633, 703, 942, 956, 966, 971, 994], "bibtex": 0, "entri": [0, 16, 70, 74, 129, 162, 166, 251, 305, 338, 348, 368, 370, 372, 376, 377, 386, 387, 389, 394, 396, 399, 438, 447, 506, 507, 512, 520, 521, 536, 537, 563, 566, 569, 586, 595, 607, 613, 615, 622, 626, 628, 630, 631, 634, 636, 638, 639, 640, 648, 650, 657, 658, 660, 661, 674, 678, 681, 683, 686, 689, 690, 692, 699, 702, 703, 704, 707, 708, 711, 716, 729, 731, 732, 756, 758, 761, 762, 763, 764, 782, 795, 811, 812, 819, 820, 821, 822, 823, 842, 848, 859, 938, 941, 942, 948, 952, 955, 962, 967, 973, 978, 1001, 1004, 1005, 1007], "articl": [0, 17, 69, 337, 360, 364, 365, 372, 393, 402, 450, 679, 948, 952, 987, 1007], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 71, 77, 78, 80, 81, 84, 85, 90, 94, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 117, 118, 119, 122, 123, 125, 128, 129, 131, 132, 138, 141, 142, 144, 146, 149, 150, 151, 153, 154, 155, 156, 157, 166, 175, 176, 178, 180, 181, 183, 184, 185, 188, 189, 195, 196, 198, 200, 201, 202, 204, 205, 210, 213, 214, 217, 218, 219, 225, 229, 230, 231, 232, 233, 240, 241, 242, 243, 244, 245, 246, 249, 250, 254, 255, 256, 257, 258, 259, 260, 264, 265, 269, 270, 277, 278, 281, 282, 283, 284, 286, 287, 288, 297, 301, 314, 317, 320, 321, 322, 323, 324, 327, 333, 334, 337, 343, 344, 345, 364, 365, 368, 372, 390, 952, 975, 983], "p": [0, 11, 13, 24, 26, 27, 41, 60, 79, 80, 84, 91, 103, 121, 142, 152, 172, 208, 213, 214, 217, 219, 229, 243, 255, 261, 262, 288, 359, 360, 362, 363, 369, 372, 386, 387, 389, 391, 392, 394, 396, 398, 399, 400, 418, 420, 422, 425, 432, 444, 446, 449, 450, 453, 472, 503, 509, 513, 515, 516, 522, 524, 525, 526, 528, 530, 531, 532, 533, 534, 536, 539, 540, 541, 565, 567, 568, 569, 570, 571, 573, 574, 575, 579, 580, 581, 582, 583, 584, 590, 591, 602, 615, 618, 663, 665, 667, 669, 674, 679, 689, 697, 714, 725, 759, 761, 772, 777, 778, 779, 782, 796, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 827, 831, 832, 847, 858, 864, 880, 881, 882, 945, 946, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 962, 966, 967, 970, 982, 985, 994, 995, 997, 1000, 1002], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 52, 57, 63, 66, 70, 74, 85, 98, 113, 116, 117, 119, 122, 130, 137, 140, 142, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 172, 180, 182, 185, 196, 197, 198, 206, 214, 218, 229, 231, 234, 245, 253, 255, 256, 258, 261, 262, 267, 291, 292, 293, 299, 302, 305, 307, 309, 312, 313, 332, 337, 338, 339, 348, 360, 365, 366, 370, 375, 387, 390, 394, 396, 397, 398, 399, 461, 483, 484, 506, 507, 512, 513, 541, 556, 557, 567, 570, 571, 573, 574, 575, 579, 580, 581, 582, 583, 584, 592, 602, 607, 610, 633, 687, 696, 699, 702, 703, 729, 756, 757, 760, 761, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 828, 829, 833, 842, 846, 850, 851, 885, 890, 891, 944, 947, 956, 959, 960, 962, 966, 996, 1002, 1003, 1004, 1006, 1008], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 64, 69, 72, 81, 85, 103, 113, 114, 121, 122, 129, 136, 149, 150, 151, 152, 154, 156, 157, 158, 162, 178, 181, 196, 197, 198, 214, 218, 222, 231, 240, 255, 257, 259, 260, 266, 273, 281, 297, 302, 315, 331, 339, 348, 352, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 375, 377, 383, 387, 388, 389, 391, 393, 394, 396, 397, 398, 399, 401, 478, 503, 506, 508, 509, 512, 516, 530, 531, 532, 533, 534, 539, 540, 542, 543, 544, 545, 556, 557, 563, 564, 566, 568, 569, 572, 579, 586, 592, 597, 598, 605, 608, 609, 639, 649, 652, 655, 661, 667, 672, 694, 701, 711, 713, 736, 758, 770, 773, 774, 783, 787, 792, 793, 794, 795, 798, 801, 806, 810, 813, 814, 815, 818, 820, 821, 822, 823, 827, 834, 836, 841, 844, 847, 849, 851, 853, 855, 856, 857, 858, 859, 860, 861, 870, 878, 879, 880, 881, 906, 907, 920, 941, 942, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 962, 966, 967, 968, 973, 975, 976, 987, 994, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 59, 67, 74, 77, 80, 85, 91, 94, 96, 97, 98, 103, 111, 112, 116, 117, 119, 128, 132, 135, 136, 137, 138, 143, 144, 145, 149, 152, 154, 156, 157, 158, 164, 166, 167, 184, 197, 206, 210, 211, 214, 218, 255, 256, 257, 258, 262, 269, 291, 297, 299, 305, 307, 313, 315, 317, 324, 329, 337, 338, 339, 344, 346, 348, 352, 354, 355, 359, 360, 362, 363, 365, 366, 367, 369, 372, 375, 376, 377, 378, 379, 384, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 408, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 462, 464, 465, 466, 468, 471, 474, 475, 476, 477, 478, 479, 483, 485, 486, 487, 488, 489, 495, 497, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 556, 563, 564, 565, 566, 568, 569, 572, 577, 582, 583, 586, 592, 595, 602, 605, 607, 608, 610, 612, 613, 614, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 650, 651, 652, 653, 654, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 678, 679, 684, 685, 686, 690, 691, 693, 695, 696, 697, 698, 699, 704, 709, 710, 713, 716, 717, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 737, 739, 740, 747, 748, 749, 750, 751, 754, 761, 764, 766, 768, 769, 770, 773, 774, 780, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 838, 842, 847, 851, 854, 855, 856, 858, 859, 860, 861, 866, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 883, 905, 906, 907, 937, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 965, 966, 967, 968, 971, 972, 973, 978, 979, 985, 986, 987, 989, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "v": [0, 4, 16, 17, 19, 30, 33, 34, 36, 37, 38, 49, 57, 67, 69, 74, 76, 79, 82, 83, 84, 86, 95, 97, 98, 101, 114, 122, 129, 145, 164, 165, 169, 170, 174, 185, 196, 211, 215, 229, 241, 242, 245, 246, 248, 257, 264, 270, 271, 302, 305, 321, 338, 348, 353, 357, 362, 365, 370, 372, 377, 386, 388, 391, 392, 394, 396, 397, 408, 417, 421, 427, 437, 438, 439, 440, 445, 448, 449, 450, 451, 452, 456, 457, 458, 470, 487, 499, 505, 506, 512, 516, 520, 521, 525, 527, 529, 531, 533, 535, 537, 539, 540, 543, 545, 556, 564, 568, 569, 575, 581, 586, 605, 609, 610, 614, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 645, 647, 648, 651, 653, 654, 663, 670, 674, 678, 691, 709, 710, 712, 727, 728, 730, 761, 766, 770, 775, 781, 783, 793, 797, 799, 800, 801, 804, 805, 806, 814, 822, 824, 827, 829, 831, 832, 835, 838, 844, 845, 846, 851, 854, 864, 870, 871, 872, 873, 875, 876, 879, 881, 885, 946, 947, 948, 949, 952, 953, 954, 957, 960, 966, 967, 969, 989, 994, 997, 998, 999, 1002, 1004, 1005, 1008, 1009], "b": [0, 8, 9, 10, 24, 26, 53, 58, 64, 79, 101, 103, 110, 112, 113, 118, 122, 123, 132, 135, 136, 150, 151, 152, 157, 162, 178, 181, 196, 197, 202, 214, 232, 234, 245, 254, 258, 260, 265, 269, 273, 308, 315, 348, 360, 362, 365, 368, 369, 370, 386, 387, 389, 392, 393, 394, 397, 413, 456, 474, 475, 512, 516, 521, 541, 563, 564, 565, 566, 582, 583, 585, 586, 603, 621, 622, 624, 633, 647, 649, 651, 662, 663, 679, 693, 703, 704, 763, 764, 780, 781, 818, 844, 846, 847, 850, 851, 858, 885, 907, 908, 917, 942, 944, 948, 949, 950, 952, 955, 957, 962, 966, 967, 982, 994, 1002, 1005, 1007, 1008, 1009], "o": [0, 8, 17, 19, 30, 38, 49, 59, 60, 62, 63, 81, 84, 90, 97, 126, 157, 184, 189, 194, 196, 211, 231, 240, 255, 257, 297, 298, 302, 306, 309, 316, 342, 352, 360, 362, 365, 380, 389, 391, 394, 396, 400, 420, 422, 423, 424, 425, 448, 509, 579, 602, 641, 642, 667, 799, 827, 842, 882, 920, 921, 944, 946, 948, 949, 952, 953, 955, 956, 966, 967, 968, 994, 997, 1000, 1002, 1003, 1006, 1007], "m": [0, 8, 9, 11, 19, 26, 27, 44, 57, 58, 62, 63, 64, 79, 80, 95, 132, 154, 178, 180, 196, 214, 255, 259, 288, 316, 320, 331, 337, 352, 359, 360, 362, 363, 368, 370, 380, 386, 387, 389, 391, 394, 396, 398, 400, 420, 421, 425, 432, 448, 449, 474, 475, 488, 503, 507, 509, 511, 516, 614, 620, 624, 639, 646, 660, 661, 664, 668, 682, 690, 699, 714, 729, 731, 732, 768, 769, 817, 842, 907, 931, 932, 942, 944, 946, 948, 949, 950, 952, 953, 954, 955, 956, 960, 962, 966, 968, 976, 1002, 1003, 1004, 1005, 1008], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 64, 74, 77, 78, 79, 80, 85, 95, 103, 106, 110, 113, 114, 118, 122, 123, 124, 129, 132, 142, 150, 151, 152, 156, 157, 158, 161, 162, 166, 167, 178, 180, 181, 185, 196, 203, 206, 214, 222, 228, 231, 240, 243, 246, 254, 255, 257, 258, 260, 261, 262, 265, 268, 270, 273, 277, 282, 286, 288, 309, 326, 339, 348, 360, 362, 368, 375, 377, 386, 387, 389, 391, 392, 393, 394, 396, 397, 408, 413, 426, 428, 440, 444, 449, 453, 456, 457, 458, 472, 479, 488, 495, 509, 527, 528, 529, 531, 533, 534, 535, 536, 537, 540, 543, 545, 563, 564, 565, 566, 581, 584, 586, 602, 610, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 653, 654, 655, 660, 661, 667, 671, 690, 695, 696, 697, 701, 703, 754, 758, 761, 770, 783, 786, 801, 804, 805, 808, 811, 812, 814, 817, 818, 820, 822, 829, 842, 847, 858, 871, 873, 876, 878, 879, 881, 883, 942, 944, 946, 948, 949, 952, 953, 954, 955, 956, 959, 960, 962, 966, 967, 968, 972, 987, 994, 998, 1001, 1004, 1005, 1006, 1007, 1009], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 59, 60, 62, 69, 70, 81, 88, 91, 95, 98, 103, 105, 120, 145, 149, 157, 196, 204, 210, 212, 214, 222, 226, 228, 229, 230, 231, 243, 254, 255, 263, 273, 281, 282, 288, 293, 312, 313, 316, 323, 324, 329, 339, 359, 360, 362, 366, 370, 375, 387, 389, 391, 392, 394, 396, 397, 399, 400, 420, 422, 427, 435, 438, 462, 467, 478, 501, 509, 511, 532, 533, 540, 541, 556, 557, 565, 589, 590, 594, 597, 598, 619, 620, 623, 644, 645, 646, 655, 663, 664, 667, 668, 672, 674, 679, 682, 695, 696, 697, 699, 729, 737, 741, 751, 754, 761, 781, 806, 808, 810, 811, 812, 827, 838, 842, 844, 847, 858, 863, 880, 881, 885, 944, 946, 948, 949, 950, 951, 952, 954, 960, 962, 964, 967, 968, 975, 983, 984, 985, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "perrot": [0, 994], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 60, 69, 77, 79, 80, 81, 84, 85, 98, 100, 101, 113, 119, 121, 122, 129, 135, 142, 146, 157, 166, 167, 172, 176, 185, 186, 196, 197, 198, 214, 217, 218, 231, 255, 256, 257, 258, 260, 261, 269, 270, 281, 288, 299, 302, 305, 307, 332, 339, 344, 345, 346, 348, 352, 354, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 375, 376, 377, 380, 383, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 413, 415, 417, 420, 421, 422, 425, 429, 438, 444, 445, 446, 447, 448, 450, 451, 470, 472, 474, 475, 476, 477, 478, 499, 508, 510, 511, 513, 515, 516, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 551, 556, 557, 563, 564, 565, 566, 568, 569, 572, 578, 579, 581, 582, 583, 584, 585, 586, 592, 597, 598, 605, 608, 609, 610, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 662, 663, 665, 667, 669, 672, 674, 678, 679, 682, 683, 701, 702, 703, 704, 711, 714, 715, 728, 736, 740, 758, 761, 768, 769, 770, 773, 774, 782, 783, 787, 792, 793, 794, 795, 796, 798, 810, 811, 812, 813, 814, 815, 817, 821, 822, 823, 827, 828, 829, 834, 836, 839, 841, 842, 843, 844, 846, 847, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 870, 871, 877, 878, 879, 880, 881, 885, 901, 906, 907, 909, 912, 913, 920, 927, 938, 941, 942, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 962, 963, 966, 967, 968, 973, 975, 976, 985, 986, 987, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "journal": [0, 80, 167, 255, 261, 359, 360, 362, 389, 391, 396, 427, 437, 448, 474, 509, 516, 602, 610, 620, 664, 667, 668, 679, 689, 704, 707, 708, 731, 732, 759, 796, 801, 847, 858, 941, 942, 946, 948, 949, 950, 953, 959, 964, 966, 967], "research": [0, 255, 261, 360, 362, 375, 389, 474, 476, 488, 610, 620, 667, 708, 796, 801, 941, 949, 953, 955, 967, 972, 973, 976], "volum": [0, 65, 78, 154, 360, 362, 389, 391, 399, 448, 450, 509, 742, 948, 967, 976], "page": [0, 12, 17, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 217, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 352, 360, 362, 365, 366, 368, 370, 372, 378, 388, 389, 391, 448, 491, 492, 493, 603, 619, 801, 865, 907, 942, 952, 953, 978, 987, 992, 994, 998, 999], "want": [0, 4, 12, 24, 25, 26, 63, 70, 146, 162, 166, 196, 197, 198, 246, 255, 269, 293, 317, 321, 337, 338, 348, 352, 353, 354, 363, 364, 366, 368, 369, 370, 375, 376, 377, 378, 380, 383, 387, 388, 389, 390, 391, 397, 398, 475, 478, 479, 485, 510, 524, 629, 630, 631, 633, 634, 641, 643, 649, 650, 651, 737, 817, 820, 836, 843, 863, 870, 941, 948, 951, 952, 953, 956, 958, 962, 963, 967, 972, 973, 978, 986, 994, 1008], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 64, 65, 77, 79, 81, 85, 90, 91, 95, 100, 118, 119, 122, 135, 146, 149, 154, 156, 166, 167, 169, 172, 175, 185, 209, 213, 214, 219, 225, 233, 236, 240, 246, 254, 258, 260, 262, 275, 277, 281, 282, 299, 308, 309, 315, 321, 334, 337, 338, 342, 346, 348, 353, 354, 358, 359, 360, 361, 363, 365, 366, 368, 369, 372, 375, 376, 377, 378, 380, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 416, 417, 418, 420, 421, 425, 429, 431, 438, 439, 440, 442, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 471, 478, 498, 506, 508, 509, 512, 513, 515, 516, 517, 519, 525, 530, 531, 532, 533, 534, 535, 539, 540, 541, 558, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 619, 620, 646, 647, 649, 660, 661, 662, 663, 667, 671, 682, 698, 702, 703, 709, 710, 714, 751, 754, 756, 768, 769, 770, 792, 799, 800, 813, 814, 815, 817, 818, 819, 821, 822, 823, 830, 831, 835, 840, 843, 844, 846, 862, 863, 866, 870, 871, 878, 880, 890, 891, 896, 902, 920, 922, 941, 947, 948, 949, 951, 952, 953, 954, 955, 958, 959, 960, 965, 966, 967, 968, 972, 976, 978, 980, 982, 985, 986, 987, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "api": [0, 12, 37, 50, 164, 224, 226, 235, 238, 338, 339, 354, 355, 358, 359, 365, 367, 373, 374, 375, 376, 378, 380, 394, 396, 397, 406, 407, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 443, 444, 445, 446, 447, 448, 449, 450, 451, 470, 483, 485, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 524, 538, 539, 541, 544, 545, 553, 555, 556, 557, 558, 563, 564, 566, 586, 602, 603, 604, 605, 652, 663, 664, 665, 666, 768, 769, 773, 774, 797, 815, 817, 819, 823, 834, 835, 840, 841, 843, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 868, 874, 875, 920, 941, 950, 951, 952, 955, 962, 966, 972, 973, 976, 978, 982, 984, 989, 991, 992, 993, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "design": [0, 13, 79, 129, 152, 166, 177, 297, 346, 354, 359, 365, 369, 375, 376, 377, 378, 379, 389, 396, 398, 399, 490, 503, 607, 608, 623, 640, 644, 651, 655, 660, 770, 787, 788, 806, 808, 942, 948, 949, 952, 953, 962, 972, 973, 976, 980, 996, 1003], "mai": [0, 8, 19, 25, 39, 44, 46, 55, 70, 85, 95, 109, 119, 146, 153, 155, 157, 158, 166, 172, 176, 185, 202, 222, 258, 260, 262, 263, 291, 313, 324, 337, 338, 339, 348, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 368, 369, 372, 375, 377, 378, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 408, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 428, 429, 434, 437, 440, 444, 447, 456, 457, 458, 461, 462, 463, 470, 483, 484, 490, 509, 510, 513, 515, 519, 522, 523, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 549, 556, 569, 572, 577, 585, 586, 592, 595, 609, 610, 612, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 649, 651, 652, 653, 654, 656, 659, 661, 663, 664, 666, 667, 668, 670, 672, 679, 686, 689, 690, 692, 693, 695, 696, 697, 699, 711, 729, 736, 758, 759, 770, 772, 773, 774, 775, 783, 784, 785, 786, 788, 789, 792, 796, 799, 804, 805, 806, 807, 808, 810, 813, 814, 815, 817, 819, 821, 822, 823, 829, 830, 831, 834, 836, 846, 848, 849, 850, 851, 853, 859, 862, 863, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 888, 910, 920, 941, 942, 944, 946, 948, 949, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 973, 978, 984, 985, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "consid": [0, 4, 12, 13, 25, 39, 65, 70, 80, 95, 99, 119, 120, 122, 141, 145, 146, 162, 196, 198, 214, 255, 258, 262, 264, 266, 275, 281, 282, 297, 302, 307, 321, 329, 332, 337, 348, 352, 353, 354, 357, 364, 365, 366, 370, 372, 375, 377, 385, 389, 394, 395, 396, 397, 398, 399, 400, 401, 414, 420, 425, 432, 449, 483, 484, 496, 508, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 560, 561, 563, 564, 566, 568, 582, 583, 595, 621, 627, 633, 634, 635, 637, 646, 654, 663, 664, 665, 667, 668, 669, 671, 675, 676, 679, 681, 683, 689, 699, 703, 707, 729, 759, 761, 765, 813, 814, 815, 817, 819, 821, 822, 823, 826, 828, 829, 834, 844, 865, 866, 875, 876, 878, 879, 880, 881, 936, 941, 947, 948, 949, 950, 952, 953, 955, 958, 959, 960, 962, 966, 967, 968, 973, 978, 985, 997, 998, 1002, 1006, 1007, 1009], "softwar": [0, 338, 352, 362, 365, 372, 375, 377, 397, 602, 610, 633, 942, 976], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 354, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 481, 482, 483, 484, 485, 487, 490, 494, 496, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 662, 663, 664, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 736, 737, 741, 742, 744, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 899, 900, 901, 902, 907, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 923, 926, 940, 941, 942, 944, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 976, 979, 981, 982, 983, 984, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "2013": [0, 172, 362, 393, 394, 511, 699, 729, 944, 952, 971, 995, 996], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 65, 66, 80, 113, 166, 168, 188, 191, 205, 206, 214, 260, 261, 262, 292, 301, 332, 362, 363, 370, 372, 386, 387, 389, 393, 394, 396, 399, 449, 474, 491, 492, 493, 513, 515, 522, 530, 531, 532, 533, 540, 541, 565, 582, 583, 585, 586, 590, 594, 597, 598, 609, 624, 633, 647, 649, 662, 664, 667, 668, 679, 689, 698, 699, 704, 729, 759, 808, 842, 878, 879, 880, 881, 941, 946, 948, 949, 952, 954, 955, 956, 960, 964, 966, 968, 986, 997, 1002, 1006, 1007, 1008, 1009], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 397, 806, 954, 971], "languag": [0, 339, 369, 383, 394, 397, 966, 972, 973, 976, 979], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 54, 55, 56, 58, 59, 61, 64, 67, 68, 70, 71, 73, 75, 78, 80, 89, 91, 93, 95, 98, 99, 104, 106, 107, 112, 113, 115, 118, 119, 120, 121, 122, 125, 127, 128, 130, 132, 135, 136, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 159, 161, 164, 166, 174, 175, 178, 179, 181, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 225, 228, 229, 230, 233, 235, 240, 241, 242, 243, 244, 246, 249, 253, 255, 257, 258, 259, 260, 263, 264, 269, 273, 275, 278, 279, 281, 282, 283, 284, 285, 286, 288, 292, 293, 296, 298, 299, 300, 302, 303, 305, 307, 309, 313, 314, 316, 317, 320, 321, 323, 328, 329, 332, 337, 343, 344, 345, 346, 351, 353, 355, 357, 358, 359, 361, 362, 365, 366, 367, 370, 371, 372, 373, 376, 380, 383, 385, 386, 387, 388, 391, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 434, 435, 436, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 495, 496, 497, 498, 499, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 590, 592, 593, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 684, 685, 687, 691, 692, 694, 698, 700, 701, 702, 703, 704, 707, 709, 710, 711, 713, 714, 715, 727, 728, 730, 734, 736, 737, 742, 756, 757, 758, 760, 761, 762, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 894, 895, 896, 906, 907, 917, 923, 924, 926, 927, 928, 929, 930, 933, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 979, 980, 982, 983, 985, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mine": [0, 255, 338, 360, 389, 400, 420, 486, 538, 694, 707, 713, 756, 948, 952, 958, 964], "108": [0, 149, 159, 338, 995], "122": [0, 112, 154, 162, 167, 182, 200, 230, 299, 303, 346, 347, 370, 953], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 61, 64, 69, 73, 79, 80, 97, 98, 113, 115, 116, 117, 122, 123, 125, 127, 137, 138, 146, 149, 155, 162, 168, 169, 191, 197, 198, 210, 217, 218, 219, 225, 229, 240, 246, 253, 257, 261, 262, 270, 281, 282, 291, 293, 299, 301, 315, 321, 323, 324, 337, 338, 344, 345, 352, 360, 362, 365, 369, 372, 373, 375, 376, 386, 387, 388, 389, 393, 395, 396, 397, 398, 399, 420, 422, 424, 425, 427, 444, 456, 457, 458, 528, 529, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 619, 645, 646, 654, 664, 667, 668, 699, 704, 715, 719, 729, 762, 763, 777, 779, 811, 812, 816, 846, 850, 872, 874, 875, 878, 879, 880, 881, 921, 941, 946, 947, 948, 949, 951, 952, 955, 956, 958, 960, 962, 964, 967, 968, 969, 972, 973, 978, 979, 981, 987, 994, 995, 997, 998, 1002, 1005, 1006, 1007, 1008, 1009], "qualiti": [0, 6, 24, 37, 46, 48, 57, 98, 118, 166, 202, 249, 253, 262, 263, 264, 265, 365, 372, 375, 377, 383, 384, 388, 389, 391, 394, 427, 437, 444, 449, 474, 532, 533, 534, 535, 539, 540, 716, 783, 862, 863, 878, 879, 880, 881, 907, 947, 949, 957, 964, 968, 972, 973, 976, 982, 983, 989], "png": [0, 32, 882], "svg": 0, "logo": [0, 393, 776], "avail": [0, 5, 11, 12, 13, 37, 41, 55, 98, 117, 120, 121, 146, 149, 154, 158, 166, 185, 196, 204, 214, 218, 234, 252, 253, 258, 259, 262, 280, 281, 282, 288, 302, 305, 306, 307, 308, 315, 317, 348, 352, 359, 360, 362, 363, 364, 365, 369, 370, 373, 376, 377, 380, 383, 386, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 422, 425, 426, 427, 428, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 483, 510, 524, 530, 531, 532, 533, 534, 535, 539, 540, 563, 566, 568, 569, 585, 586, 607, 608, 632, 640, 645, 647, 648, 649, 651, 664, 671, 674, 705, 706, 770, 773, 774, 783, 793, 794, 799, 800, 802, 803, 804, 805, 817, 838, 847, 854, 858, 863, 914, 920, 942, 946, 949, 951, 952, 953, 954, 955, 958, 962, 965, 966, 967, 971, 972, 973, 976, 978, 982, 987, 989, 994, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008], "doc": [0, 4, 8, 19, 337, 339, 353, 363, 365, 368, 369, 370, 372, 377, 380, 382, 397, 563, 564, 566, 751, 754, 763, 764, 794, 987, 994, 998, 1008], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 359, 362, 364, 365, 367, 368, 370, 372, 373, 375, 376, 380, 383, 386, 390, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 936, 937, 938, 939, 940, 949, 962, 968, 972, 976, 986, 987, 1004, 1008], "directori": [0, 8, 277, 359, 363, 365, 366, 370, 372, 377, 380, 390, 417, 421, 425, 460, 473, 831, 832, 1008], "driven": [0, 972, 976], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 59, 71, 74, 77, 81, 84, 100, 103, 113, 115, 119, 122, 123, 129, 143, 146, 149, 154, 155, 167, 168, 177, 185, 196, 218, 221, 222, 225, 231, 255, 257, 262, 269, 273, 280, 292, 297, 307, 332, 337, 338, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 370, 372, 375, 377, 386, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 416, 419, 422, 424, 426, 429, 434, 470, 483, 507, 526, 556, 564, 581, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 605, 607, 608, 618, 630, 631, 647, 662, 667, 670, 675, 736, 738, 770, 773, 774, 783, 794, 798, 799, 810, 828, 829, 844, 849, 872, 873, 875, 886, 921, 941, 942, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 957, 959, 960, 962, 966, 967, 968, 978, 982, 985, 1003, 1004, 1006, 1007], "institut": [0, 362, 955], "privat": [0, 368, 377, 378, 886, 976, 994, 1002, 1004, 1005, 1007, 1008], "grant": [0, 365], "assur": [0, 377, 768, 769, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "sustain": 0, "like": [0, 4, 12, 19, 52, 57, 59, 69, 88, 91, 98, 103, 105, 112, 116, 122, 125, 149, 155, 166, 176, 196, 246, 255, 257, 258, 259, 262, 263, 269, 284, 294, 297, 305, 315, 324, 337, 338, 348, 352, 354, 357, 359, 360, 363, 364, 365, 366, 368, 371, 372, 373, 375, 376, 377, 383, 385, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 490, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 553, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 741, 742, 743, 745, 746, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 895, 896, 904, 905, 909, 917, 918, 920, 923, 924, 925, 937, 939, 941, 944, 946, 947, 948, 949, 952, 954, 955, 956, 958, 959, 962, 967, 968, 972, 973, 975, 976, 978, 985, 987, 991, 994, 997, 998, 1001, 1002, 1004, 1005, 1006, 1008], "thank": [0, 4, 17, 25, 85, 168, 172, 196, 337, 338, 353, 364, 372, 976, 994, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "funder": 0, "member": [0, 337, 338, 360, 365, 367, 368, 378, 389, 404, 418, 423, 426, 428, 466, 530, 531, 538, 556, 633, 634, 641, 643, 651, 652, 653, 678, 679, 689, 691, 704, 709, 710, 730, 759, 766, 770, 870, 948, 955, 978, 994, 1006, 1009], "consortium": [0, 976], "foundat": [0, 129, 365, 955], "face": [0, 3, 15, 36, 53, 67, 93, 98, 107, 117, 164, 224, 238, 358, 365, 368, 389, 394, 396, 398, 424, 447, 467, 468, 469, 496, 507, 508, 512, 514, 515, 516, 533, 559, 632, 648, 687, 783, 797, 814, 851, 875, 893, 955, 968, 969, 970, 981, 986, 989, 994, 1002], "2022": [0, 679, 1008], "microsoft": [0, 12, 363, 380], "m\u00fcller": [0, 31, 298, 299, 378, 394, 510, 837, 956, 962, 966, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008], "2020": [0, 360, 1004, 1005, 1006, 1007], "quansight": 0, "lab": [0, 360, 443, 511, 868, 976, 1005], "2021": [0, 363, 365, 380, 646, 1006, 1007], "columbia": 0, "univers": [0, 157, 337, 360, 362, 367, 389, 394, 397, 565, 761, 806, 810, 865, 948, 950, 952, 954], "2016": [0, 222, 359, 389, 941, 999, 1000], "sydnei": 0, "2017": [0, 255, 359, 387, 389, 400, 420, 952, 1000, 1001], "receiv": [0, 19, 135, 164, 248, 252, 271, 339, 348, 365, 366, 372, 377, 393, 396, 479, 676, 680, 682, 700, 755, 761, 762, 788, 793, 797, 799, 800, 854, 875, 953, 956, 957, 966, 1004, 1005], "improv": [0, 4, 24, 25, 33, 77, 78, 81, 100, 106, 110, 111, 118, 120, 121, 122, 124, 129, 142, 162, 166, 172, 182, 196, 204, 252, 256, 258, 294, 327, 338, 348, 353, 363, 367, 369, 370, 372, 373, 375, 377, 378, 383, 388, 394, 396, 398, 424, 425, 506, 507, 509, 512, 513, 514, 516, 517, 518, 521, 529, 532, 533, 534, 535, 536, 537, 539, 540, 577, 585, 586, 618, 627, 639, 641, 642, 643, 647, 648, 649, 650, 651, 653, 660, 662, 667, 702, 703, 757, 760, 761, 820, 828, 829, 847, 858, 878, 879, 881, 907, 946, 948, 949, 952, 955, 956, 966, 967, 968, 971, 972, 973, 976, 985, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 66, 106, 126, 131, 166, 181, 191, 196, 197, 198, 214, 220, 229, 234, 252, 255, 258, 262, 264, 265, 297, 306, 307, 337, 346, 352, 360, 364, 365, 366, 371, 373, 377, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 401, 414, 415, 418, 422, 424, 439, 442, 468, 472, 474, 475, 479, 483, 484, 485, 500, 502, 504, 505, 506, 508, 510, 511, 512, 517, 520, 521, 523, 524, 525, 536, 538, 567, 568, 569, 570, 571, 573, 574, 575, 581, 585, 586, 595, 607, 618, 621, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 644, 647, 648, 649, 650, 652, 655, 656, 657, 658, 659, 662, 665, 673, 675, 676, 681, 683, 686, 687, 689, 692, 694, 697, 700, 702, 703, 704, 708, 709, 711, 712, 713, 714, 715, 716, 717, 725, 727, 731, 755, 756, 757, 760, 761, 762, 768, 769, 773, 774, 811, 812, 817, 834, 835, 838, 844, 847, 850, 854, 858, 862, 863, 865, 866, 870, 871, 874, 875, 876, 887, 905, 907, 919, 943, 944, 948, 950, 952, 953, 955, 956, 957, 959, 962, 967, 983, 985, 987, 995, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 45, 57, 71, 77, 79, 81, 95, 98, 99, 105, 113, 115, 118, 122, 129, 146, 154, 155, 156, 161, 162, 166, 167, 168, 176, 184, 185, 193, 196, 210, 213, 214, 217, 218, 225, 230, 250, 252, 253, 255, 256, 258, 261, 262, 275, 278, 281, 282, 283, 285, 286, 288, 297, 301, 302, 305, 320, 324, 332, 337, 338, 339, 346, 348, 352, 353, 354, 358, 360, 362, 363, 365, 366, 368, 369, 370, 372, 373, 375, 376, 377, 380, 383, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 410, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 427, 434, 437, 442, 444, 449, 453, 459, 461, 470, 483, 490, 499, 508, 510, 511, 513, 515, 516, 524, 525, 528, 529, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 554, 557, 564, 571, 581, 582, 583, 586, 589, 590, 594, 595, 597, 598, 602, 605, 606, 607, 608, 616, 617, 618, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 651, 652, 653, 656, 657, 658, 659, 662, 664, 666, 667, 668, 670, 671, 672, 673, 675, 676, 678, 682, 683, 684, 690, 696, 707, 715, 716, 720, 731, 732, 735, 738, 754, 756, 770, 772, 773, 774, 781, 782, 783, 807, 808, 813, 814, 815, 817, 820, 821, 822, 823, 827, 828, 829, 833, 834, 835, 839, 840, 841, 845, 848, 850, 859, 862, 863, 867, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 894, 905, 907, 920, 923, 926, 928, 929, 930, 931, 932, 933, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 965, 966, 967, 968, 972, 976, 978, 984, 985, 986, 987, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 59, 80, 95, 112, 116, 117, 127, 129, 149, 155, 166, 167, 175, 182, 184, 185, 188, 197, 205, 218, 222, 226, 227, 245, 255, 256, 261, 285, 288, 293, 297, 301, 305, 306, 308, 322, 329, 337, 338, 342, 343, 348, 352, 354, 357, 359, 360, 361, 363, 364, 365, 366, 367, 370, 372, 373, 375, 376, 377, 379, 380, 385, 386, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 400, 401, 413, 416, 418, 419, 420, 422, 424, 425, 427, 467, 468, 470, 472, 476, 507, 508, 509, 526, 527, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 563, 566, 568, 569, 576, 580, 586, 602, 607, 608, 609, 618, 621, 622, 627, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 646, 648, 651, 652, 653, 656, 669, 674, 685, 708, 714, 737, 747, 751, 761, 765, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 788, 789, 790, 800, 802, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 821, 822, 823, 841, 842, 846, 848, 866, 870, 871, 874, 875, 878, 879, 880, 881, 885, 896, 901, 915, 928, 929, 930, 941, 942, 944, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 969, 972, 973, 976, 978, 982, 985, 987, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "2012": [0, 80, 387, 396, 530, 531, 538, 614, 716, 941, 945, 952, 971, 994], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 372, 375, 377, 378, 380, 385, 386, 387, 388, 389, 391, 392, 394, 396, 397, 399, 400, 413, 417, 419, 420, 421, 422, 425, 427, 430, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 447, 470, 473, 476, 494, 498, 509, 511, 513, 515, 522, 537, 542, 543, 544, 545, 565, 585, 594, 602, 603, 604, 605, 609, 614, 615, 618, 621, 623, 625, 627, 629, 635, 637, 639, 641, 642, 644, 648, 651, 652, 653, 655, 660, 661, 665, 667, 669, 765, 768, 769, 770, 772, 773, 774, 775, 776, 778, 783, 784, 785, 788, 790, 792, 793, 794, 795, 796, 799, 801, 806, 807, 808, 809, 810, 811, 812, 819, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 841, 844, 845, 846, 850, 854, 862, 863, 867, 868, 872, 875, 876, 884, 909, 941, 942, 944, 945, 948, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 962, 964, 965, 966, 967, 968, 972, 976, 978, 983, 985, 986, 987, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "host": [0, 337, 360, 365, 368, 372, 373, 863, 920, 987], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 65, 68, 71, 84, 85, 97, 98, 100, 103, 113, 115, 118, 119, 123, 131, 141, 161, 162, 164, 166, 167, 168, 172, 175, 189, 196, 214, 217, 218, 219, 221, 225, 226, 227, 229, 231, 235, 242, 250, 252, 255, 256, 264, 280, 281, 282, 297, 301, 302, 305, 306, 308, 312, 324, 331, 334, 337, 338, 342, 346, 348, 352, 357, 358, 360, 361, 362, 365, 366, 368, 369, 370, 372, 373, 376, 377, 378, 380, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 420, 423, 425, 427, 432, 444, 462, 471, 478, 509, 510, 516, 524, 526, 527, 535, 542, 543, 556, 563, 564, 566, 572, 577, 585, 586, 587, 588, 595, 602, 603, 605, 614, 618, 627, 633, 634, 646, 647, 648, 649, 650, 651, 654, 662, 667, 671, 674, 678, 692, 736, 747, 751, 758, 763, 770, 773, 774, 775, 776, 778, 783, 786, 788, 791, 792, 793, 794, 795, 796, 798, 800, 818, 826, 831, 843, 847, 851, 858, 870, 871, 872, 873, 874, 875, 876, 901, 941, 942, 944, 945, 946, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 970, 973, 975, 976, 978, 982, 985, 986, 989, 995, 997, 998, 1000, 1001, 1002, 1003, 1007, 1008, 1009], "event": [0, 4, 16, 196, 214, 258, 389, 563, 564, 611, 806, 895, 948, 953, 954, 972, 976, 1000], "pari": [0, 362, 390, 441, 737, 839, 963, 1008], "saclai": 0, "center": [0, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 55, 58, 59, 60, 62, 63, 74, 80, 90, 100, 102, 105, 120, 122, 123, 146, 162, 167, 177, 188, 190, 196, 197, 207, 208, 220, 221, 225, 226, 240, 243, 244, 250, 256, 266, 280, 283, 285, 292, 297, 299, 300, 309, 314, 322, 324, 325, 326, 331, 338, 339, 360, 361, 362, 369, 388, 389, 391, 392, 394, 395, 396, 402, 416, 418, 419, 422, 423, 424, 427, 429, 434, 435, 436, 437, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 476, 487, 499, 509, 510, 516, 519, 525, 581, 584, 585, 586, 607, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 653, 665, 669, 768, 836, 837, 840, 849, 851, 860, 861, 870, 871, 946, 948, 949, 951, 959, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008], "scienc": [0, 38, 79, 157, 359, 362, 375, 389, 416, 429, 474, 513, 515, 522, 663, 664, 668, 818, 942, 944, 948, 949, 952, 955, 964, 973, 976, 981, 1002], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 33, 37, 40, 47, 57, 59, 60, 63, 65, 70, 80, 88, 90, 95, 98, 100, 101, 105, 110, 115, 122, 129, 132, 146, 149, 156, 157, 161, 166, 167, 168, 169, 172, 175, 176, 185, 186, 188, 189, 190, 192, 196, 198, 200, 205, 206, 211, 214, 219, 225, 232, 242, 253, 255, 256, 257, 258, 259, 262, 263, 264, 265, 273, 275, 280, 294, 298, 299, 302, 305, 307, 308, 309, 315, 323, 324, 333, 337, 338, 339, 342, 346, 348, 352, 353, 354, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 383, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 415, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 435, 437, 439, 444, 449, 450, 461, 462, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 489, 509, 514, 515, 518, 522, 526, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 544, 556, 558, 559, 563, 564, 565, 566, 585, 586, 590, 591, 595, 602, 605, 607, 608, 609, 610, 618, 622, 624, 625, 629, 632, 633, 634, 636, 641, 643, 646, 648, 649, 650, 651, 653, 663, 667, 670, 674, 677, 683, 694, 707, 723, 724, 727, 736, 744, 747, 751, 752, 753, 754, 756, 761, 763, 764, 767, 768, 769, 770, 773, 774, 776, 777, 779, 781, 783, 787, 788, 792, 794, 795, 797, 798, 799, 800, 801, 803, 804, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 827, 831, 834, 835, 836, 838, 839, 841, 842, 843, 844, 845, 850, 851, 854, 856, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 886, 896, 899, 909, 923, 941, 942, 944, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 966, 967, 968, 969, 971, 972, 976, 978, 982, 984, 985, 986, 987, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "2014": [0, 52, 359, 394, 396, 399, 505, 582, 583, 597, 598, 633, 667, 828, 829, 906, 907, 949, 956, 976, 997], "2015": [0, 167, 359, 399, 682, 695, 696, 697, 828, 829, 952, 959, 976, 998, 999], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 58, 59, 64, 65, 69, 84, 91, 95, 98, 105, 113, 122, 125, 127, 128, 150, 152, 153, 154, 155, 166, 167, 172, 176, 180, 191, 196, 199, 203, 204, 208, 210, 212, 214, 217, 221, 222, 228, 229, 231, 250, 255, 257, 258, 268, 294, 297, 301, 307, 309, 313, 315, 317, 322, 331, 332, 338, 360, 362, 365, 369, 393, 396, 397, 398, 401, 418, 448, 474, 475, 479, 498, 508, 514, 519, 528, 529, 544, 568, 569, 590, 592, 633, 634, 641, 643, 645, 651, 652, 653, 667, 687, 770, 783, 800, 820, 870, 879, 947, 948, 952, 953, 955, 958, 962, 994], "2018": [0, 196, 214, 397, 425, 941, 952, 970, 976, 1001, 1002], "nyu": [0, 120, 178, 820], "moor": [0, 708, 952, 976], "environ": [0, 12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 352, 360, 362, 363, 365, 370, 372, 375, 380, 383, 390, 473, 972, 973, 976, 1001, 1002], "student": [0, 97, 255, 949, 973, 976], "t\u00e9l\u00e9com": [0, 970], "paristech": [0, 24, 25, 42, 225, 970], "rv": [0, 120, 259, 297, 774, 781, 783, 941, 994, 995, 998, 999, 1000, 1001, 1002], "thierri": [0, 240, 242, 976, 1000, 1001, 1008], "guillemot": [0, 240, 242, 1000, 1001], "labex": 0, "digicosm": 0, "goix": [0, 998, 1000, 1001, 1002, 1003], "mathurin": [0, 1005, 1007, 1008], "massia": [0, 1005, 1007, 1008], "2019": [0, 353, 363, 389, 427, 437, 667, 949, 959, 962, 1002, 1003, 1004], "dure": [0, 4, 5, 12, 50, 57, 71, 74, 85, 100, 114, 119, 126, 143, 149, 154, 166, 169, 185, 197, 204, 253, 307, 308, 352, 354, 363, 365, 366, 369, 377, 378, 389, 390, 394, 396, 397, 399, 400, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 588, 589, 590, 592, 594, 595, 597, 598, 600, 602, 603, 604, 605, 607, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 762, 768, 769, 770, 773, 774, 783, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 942, 944, 948, 949, 955, 962, 964, 982, 987, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "phd": [0, 389, 396, 973, 976], "chan": [0, 809, 851], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 59, 63, 67, 80, 123, 130, 131, 132, 150, 155, 164, 166, 167, 176, 189, 211, 217, 218, 222, 239, 242, 247, 255, 307, 314, 324, 338, 348, 353, 360, 365, 366, 372, 373, 375, 377, 389, 394, 396, 398, 399, 401, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 453, 487, 490, 506, 507, 508, 512, 513, 515, 518, 520, 521, 522, 523, 528, 529, 534, 535, 568, 582, 583, 585, 586, 594, 595, 602, 615, 620, 621, 622, 623, 627, 628, 633, 635, 636, 637, 638, 641, 642, 643, 644, 646, 651, 652, 653, 655, 656, 659, 665, 666, 667, 669, 670, 768, 769, 801, 820, 827, 828, 829, 866, 893, 906, 907, 921, 926, 927, 944, 948, 949, 956, 957, 958, 966, 968, 972, 984, 986, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "were": [0, 4, 32, 69, 70, 73, 79, 80, 119, 122, 143, 146, 154, 162, 196, 197, 226, 266, 293, 294, 306, 307, 309, 315, 337, 339, 346, 348, 359, 360, 362, 365, 368, 375, 377, 386, 390, 396, 397, 439, 442, 443, 470, 536, 537, 554, 563, 566, 577, 773, 774, 788, 867, 868, 904, 941, 952, 953, 968, 975, 986, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "through": [0, 7, 115, 119, 157, 166, 217, 230, 250, 255, 258, 280, 301, 302, 322, 329, 339, 346, 362, 363, 365, 366, 371, 373, 377, 378, 380, 389, 392, 394, 396, 398, 399, 439, 442, 447, 510, 532, 533, 536, 539, 540, 541, 556, 568, 569, 572, 622, 626, 628, 630, 633, 634, 636, 638, 640, 643, 651, 652, 663, 666, 694, 847, 858, 862, 863, 878, 879, 880, 881, 913, 941, 942, 949, 952, 954, 955, 956, 958, 960, 962, 966, 967, 968, 976, 978, 985, 987, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009], "program": [0, 50, 338, 348, 353, 354, 362, 363, 365, 370, 375, 483, 610, 645, 860, 861, 948, 967, 968, 972, 973, 994, 996], "immanuel": [0, 994, 995, 999], "bayer": [0, 994, 995, 999], "kemal": [0, 20, 21, 996, 997], "eren": [0, 20, 21, 996, 997], "tr\u00e9segni": [0, 996], "hamzeh": [0, 997, 998], "alsalhi": [0, 997, 998], "issam": [0, 291, 1000], "laradji": [0, 291, 1000], "maheshakya": [0, 997, 998, 999], "wijewardena": [0, 997, 998, 999], "xue": [0, 998, 999, 1000, 1002, 1003, 1006], "nelson": [0, 1000, 1001, 1006], "yenchen": [0, 1000], "lin": [0, 509, 633, 967, 999, 1000, 1001, 1002], "neurodebian": 0, "debian": [0, 352, 363, 370], "packag": [0, 19, 46, 161, 166, 256, 275, 353, 358, 359, 362, 363, 365, 366, 368, 370, 373, 375, 377, 380, 391, 396, 397, 427, 453, 621, 622, 920, 942, 948, 951, 955, 962, 968, 976, 981, 994, 1000, 1002, 1003, 1004], "dr": [0, 362, 389, 1008], "jame": [0, 362, 393, 801, 953, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007], "haxbi": 0, "dartmouth": 0, "colleg": 0, "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 55, 56, 57, 61, 66, 70, 73, 77, 79, 80, 85, 89, 95, 111, 112, 122, 125, 126, 129, 130, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 177, 179, 184, 185, 186, 190, 191, 196, 197, 204, 205, 210, 213, 214, 217, 219, 225, 229, 234, 241, 242, 243, 249, 250, 255, 256, 258, 261, 263, 264, 265, 278, 281, 282, 286, 292, 293, 297, 306, 307, 308, 309, 320, 321, 323, 324, 334, 337, 338, 339, 346, 348, 352, 353, 354, 358, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 408, 419, 422, 424, 426, 428, 434, 438, 440, 456, 457, 458, 473, 483, 484, 490, 498, 499, 509, 511, 516, 523, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 545, 547, 549, 563, 581, 584, 586, 607, 608, 610, 614, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 657, 658, 664, 667, 668, 672, 673, 675, 676, 681, 682, 689, 694, 699, 700, 711, 712, 713, 719, 727, 729, 730, 736, 755, 757, 760, 761, 762, 765, 768, 787, 788, 804, 805, 806, 807, 808, 809, 810, 814, 822, 829, 831, 838, 871, 873, 876, 878, 879, 880, 881, 890, 891, 920, 941, 942, 944, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 962, 965, 966, 967, 968, 971, 972, 973, 975, 976, 978, 983, 985, 986, 987, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "particip": [0, 364, 365, 378, 976], "could": [0, 4, 9, 13, 27, 37, 42, 70, 71, 95, 98, 111, 112, 119, 122, 143, 149, 154, 162, 166, 167, 196, 197, 205, 221, 230, 231, 249, 255, 257, 278, 283, 286, 308, 320, 321, 337, 342, 354, 365, 370, 372, 377, 380, 383, 387, 393, 397, 401, 449, 508, 513, 582, 583, 604, 646, 772, 776, 778, 941, 948, 949, 959, 960, 962, 967, 973, 986, 991, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "attend": 0, "psf": [0, 365], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 70, 77, 95, 113, 149, 166, 167, 168, 196, 200, 213, 214, 230, 255, 256, 257, 258, 260, 261, 262, 265, 273, 305, 324, 332, 337, 338, 348, 352, 353, 354, 358, 359, 360, 363, 365, 366, 367, 368, 370, 372, 375, 376, 377, 380, 383, 386, 387, 388, 389, 390, 392, 393, 394, 396, 397, 399, 401, 403, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 470, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 667, 678, 683, 695, 696, 697, 701, 729, 730, 751, 756, 758, 761, 768, 769, 770, 772, 773, 774, 781, 782, 783, 787, 788, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 888, 890, 891, 894, 899, 920, 923, 926, 941, 944, 947, 948, 949, 951, 952, 953, 954, 955, 960, 962, 967, 968, 973, 976, 978, 985, 986, 987, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009], "tinyclu": 0, "french": [0, 214], "associ": [0, 11, 24, 25, 79, 149, 243, 312, 314, 337, 372, 389, 391, 393, 394, 396, 397, 424, 444, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 499, 532, 536, 539, 580, 581, 605, 620, 633, 634, 641, 643, 649, 650, 651, 664, 670, 674, 704, 712, 814, 822, 848, 859, 867, 876, 878, 880, 896, 951, 952, 955, 962, 965, 976, 986, 994, 1006], "fond": [0, 976], "de": [0, 12, 24, 25, 26, 27, 73, 114, 129, 149, 150, 152, 153, 154, 155, 156, 158, 187, 230, 231, 314, 332, 362, 610, 663, 737, 948, 949, 973, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 61, 65, 71, 117, 122, 129, 143, 146, 154, 161, 167, 168, 185, 196, 197, 198, 214, 218, 230, 249, 252, 255, 256, 258, 302, 324, 332, 338, 346, 352, 360, 362, 365, 369, 370, 372, 375, 378, 389, 391, 394, 397, 399, 467, 468, 475, 479, 485, 621, 622, 870, 942, 948, 949, 952, 957, 958, 959, 973, 976, 983, 985, 986, 994], "our": [0, 4, 5, 7, 11, 12, 42, 55, 69, 70, 79, 80, 85, 95, 96, 109, 111, 116, 119, 122, 123, 125, 141, 146, 149, 154, 156, 166, 168, 169, 196, 214, 219, 221, 249, 255, 258, 261, 262, 293, 297, 306, 308, 317, 321, 327, 328, 329, 332, 337, 338, 339, 348, 353, 364, 368, 369, 372, 375, 376, 377, 378, 389, 393, 396, 397, 400, 420, 425, 538, 619, 667, 682, 694, 699, 711, 729, 813, 814, 815, 817, 819, 821, 822, 823, 941, 942, 948, 949, 952, 958, 962, 965, 966, 967, 973, 976, 978, 985, 986, 987, 1001, 1002, 1004, 1005, 1008, 1009], "vianumfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 48, 52, 54, 59, 63, 74, 81, 90, 95, 97, 98, 110, 115, 117, 118, 122, 131, 132, 146, 154, 155, 157, 164, 166, 167, 175, 182, 188, 189, 190, 196, 197, 198, 199, 205, 207, 211, 213, 214, 217, 218, 225, 231, 235, 241, 243, 253, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 273, 280, 293, 297, 298, 302, 305, 306, 307, 308, 312, 314, 315, 316, 321, 324, 329, 333, 337, 338, 339, 343, 346, 348, 352, 353, 354, 358, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 375, 376, 377, 378, 385, 386, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 483, 484, 490, 502, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 676, 679, 683, 687, 688, 689, 690, 691, 692, 694, 695, 696, 699, 701, 702, 703, 705, 706, 708, 709, 710, 711, 718, 719, 721, 723, 724, 726, 729, 734, 742, 747, 751, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 778, 779, 781, 783, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 896, 898, 899, 900, 901, 912, 917, 920, 927, 936, 941, 942, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 962, 965, 966, 967, 968, 972, 973, 976, 978, 979, 981, 982, 984, 985, 986, 987, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "handl": [0, 4, 70, 119, 129, 172, 262, 275, 305, 337, 339, 352, 357, 359, 363, 365, 366, 373, 375, 377, 397, 470, 519, 551, 556, 557, 560, 561, 563, 564, 566, 585, 610, 621, 622, 627, 633, 634, 635, 636, 637, 643, 650, 651, 653, 656, 694, 761, 844, 870, 875, 882, 908, 949, 952, 953, 954, 955, 958, 960, 967, 968, 972, 973, 976, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 61, 70, 74, 79, 81, 96, 97, 98, 100, 109, 112, 119, 126, 127, 129, 142, 143, 153, 155, 162, 164, 166, 167, 168, 174, 175, 182, 189, 190, 195, 197, 198, 200, 202, 211, 212, 215, 220, 221, 226, 227, 228, 229, 231, 240, 242, 246, 248, 249, 255, 271, 275, 279, 294, 297, 299, 301, 306, 307, 308, 309, 316, 319, 321, 326, 327, 332, 333, 335, 337, 338, 339, 346, 348, 352, 353, 357, 360, 361, 362, 365, 366, 369, 370, 372, 373, 375, 377, 378, 387, 388, 389, 390, 393, 395, 396, 397, 398, 399, 401, 413, 417, 421, 425, 427, 431, 437, 438, 439, 440, 442, 443, 462, 470, 471, 474, 478, 479, 483, 501, 507, 510, 511, 513, 515, 519, 522, 524, 526, 527, 528, 532, 533, 534, 535, 536, 537, 539, 540, 541, 547, 563, 564, 566, 567, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 610, 613, 618, 625, 627, 632, 633, 634, 635, 639, 640, 641, 643, 644, 647, 651, 652, 653, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 676, 680, 681, 686, 689, 691, 693, 694, 699, 700, 701, 708, 710, 712, 713, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 755, 758, 761, 762, 765, 768, 769, 770, 771, 775, 776, 777, 778, 779, 781, 787, 793, 797, 800, 819, 821, 822, 823, 826, 831, 832, 834, 835, 836, 839, 843, 844, 845, 846, 847, 848, 850, 851, 857, 858, 859, 860, 861, 863, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 890, 891, 905, 911, 913, 917, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 963, 964, 965, 966, 967, 968, 973, 985, 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "profit": 0, "organ": [0, 11, 69, 79, 337, 359, 364, 365, 378, 819, 972], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 44, 46, 49, 55, 57, 64, 66, 69, 70, 71, 74, 77, 79, 80, 85, 91, 97, 99, 100, 101, 106, 113, 114, 115, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 135, 141, 143, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 169, 172, 175, 176, 185, 189, 196, 197, 198, 202, 204, 210, 212, 213, 214, 217, 218, 219, 221, 225, 226, 229, 230, 231, 232, 234, 235, 240, 241, 245, 246, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 269, 270, 273, 275, 280, 281, 282, 292, 297, 299, 300, 301, 302, 305, 307, 308, 309, 312, 314, 315, 316, 324, 332, 334, 337, 338, 339, 342, 346, 348, 352, 353, 354, 357, 359, 360, 362, 363, 365, 366, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 461, 498, 506, 507, 508, 509, 512, 516, 517, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 553, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 592, 594, 597, 602, 603, 604, 605, 607, 608, 609, 615, 617, 618, 619, 622, 623, 624, 629, 630, 631, 633, 634, 636, 641, 643, 644, 646, 648, 649, 650, 651, 652, 653, 655, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 681, 683, 690, 691, 693, 694, 696, 698, 699, 707, 708, 709, 710, 716, 719, 729, 731, 751, 752, 753, 754, 755, 756, 762, 768, 769, 770, 773, 774, 775, 777, 779, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 828, 831, 835, 838, 842, 844, 846, 849, 850, 851, 852, 854, 862, 863, 865, 866, 867, 870, 872, 875, 876, 878, 879, 880, 881, 882, 886, 899, 902, 906, 907, 909, 920, 921, 924, 927, 933, 936, 941, 942, 943, 944, 945, 946, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 971, 972, 973, 976, 978, 980, 982, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "manag": [0, 85, 351, 359, 362, 363, 366, 368, 372, 375, 377, 378, 425, 443, 474, 601, 868, 946, 968, 973, 976, 987, 989, 1007], "board": [0, 19], "scipi": [0, 13, 17, 19, 34, 41, 46, 47, 53, 54, 77, 78, 81, 96, 98, 101, 103, 121, 166, 169, 182, 186, 198, 241, 245, 246, 252, 255, 263, 267, 275, 280, 285, 294, 306, 307, 312, 313, 352, 353, 359, 360, 363, 365, 366, 368, 370, 373, 375, 376, 377, 380, 382, 389, 394, 397, 425, 426, 427, 428, 432, 437, 438, 470, 478, 483, 507, 509, 510, 516, 519, 556, 557, 560, 561, 563, 564, 585, 586, 624, 628, 632, 633, 634, 638, 641, 643, 645, 647, 649, 651, 652, 653, 659, 662, 666, 667, 670, 674, 733, 736, 751, 752, 753, 754, 763, 764, 774, 781, 783, 797, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 834, 843, 849, 850, 851, 853, 857, 860, 861, 870, 872, 873, 875, 876, 909, 923, 926, 941, 942, 948, 950, 953, 955, 956, 962, 966, 967, 971, 973, 981, 986, 987, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "mission": [0, 338, 976], "foster": [0, 1002], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 57, 59, 60, 69, 71, 78, 79, 80, 81, 96, 105, 109, 113, 116, 117, 121, 122, 123, 124, 145, 149, 154, 156, 157, 161, 166, 167, 168, 169, 172, 176, 177, 181, 182, 183, 184, 185, 196, 198, 204, 210, 213, 214, 218, 221, 226, 228, 229, 231, 234, 235, 237, 253, 255, 256, 258, 262, 264, 266, 275, 277, 279, 281, 282, 284, 285, 288, 297, 305, 309, 313, 315, 324, 337, 338, 339, 346, 353, 354, 355, 359, 360, 362, 365, 369, 370, 371, 373, 375, 376, 377, 379, 380, 383, 384, 386, 387, 388, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 432, 434, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 491, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 557, 560, 561, 564, 565, 566, 568, 569, 578, 579, 580, 581, 584, 585, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 707, 709, 711, 712, 713, 715, 716, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 836, 837, 840, 841, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 875, 877, 878, 879, 880, 881, 904, 905, 906, 907, 919, 925, 927, 933, 941, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 965, 966, 967, 968, 972, 973, 976, 982, 983, 986, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "particular": [0, 4, 11, 13, 37, 39, 40, 59, 70, 77, 91, 100, 104, 119, 122, 125, 153, 161, 166, 196, 198, 204, 230, 234, 252, 256, 258, 284, 288, 297, 305, 306, 309, 338, 339, 348, 352, 359, 360, 363, 364, 365, 366, 368, 369, 370, 372, 373, 376, 377, 380, 389, 393, 394, 396, 397, 398, 399, 444, 448, 450, 470, 519, 538, 584, 628, 633, 638, 647, 649, 659, 662, 686, 701, 758, 803, 818, 889, 891, 942, 944, 946, 948, 952, 955, 956, 957, 958, 960, 962, 973, 976, 986, 994, 997, 1001, 1002, 1003, 1005, 1007, 1008, 1009], "As": [0, 4, 7, 25, 27, 30, 40, 57, 65, 81, 85, 100, 110, 111, 116, 119, 121, 123, 128, 141, 149, 154, 162, 166, 168, 172, 175, 178, 185, 187, 196, 200, 204, 214, 222, 243, 250, 252, 253, 255, 256, 258, 268, 273, 275, 280, 298, 302, 308, 315, 324, 338, 339, 342, 344, 345, 348, 352, 353, 360, 363, 364, 365, 366, 368, 369, 376, 377, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 467, 529, 537, 541, 594, 607, 630, 631, 647, 649, 662, 708, 731, 737, 813, 814, 815, 817, 819, 850, 941, 946, 948, 949, 951, 952, 953, 955, 959, 962, 966, 967, 968, 973, 976, 978, 982, 985, 986, 987, 994, 1000, 1005], "fiscal": 0, "home": [0, 4, 8, 12, 19, 34, 37, 43, 44, 45, 48, 50, 56, 59, 84, 89, 95, 96, 101, 102, 112, 119, 121, 123, 124, 129, 153, 155, 157, 158, 166, 180, 188, 193, 195, 196, 204, 205, 214, 240, 241, 242, 245, 246, 256, 266, 306, 309, 329, 343, 360, 362, 363, 372, 380, 388, 460, 473, 654, 976], "ensur": [0, 41, 81, 91, 116, 169, 196, 218, 250, 258, 293, 346, 348, 352, 353, 365, 366, 368, 369, 370, 378, 380, 387, 389, 390, 393, 401, 444, 508, 509, 516, 586, 602, 623, 644, 655, 671, 679, 755, 762, 792, 863, 890, 891, 907, 913, 948, 949, 952, 962, 968, 982, 996, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "monei": [0, 214, 976], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 55, 59, 66, 69, 70, 71, 77, 79, 80, 85, 95, 98, 99, 100, 103, 113, 118, 119, 120, 122, 125, 129, 130, 131, 143, 149, 161, 166, 167, 168, 169, 175, 176, 185, 187, 189, 193, 196, 198, 201, 212, 225, 226, 227, 231, 241, 243, 252, 254, 255, 256, 258, 262, 265, 266, 275, 277, 281, 282, 283, 297, 299, 301, 302, 305, 306, 307, 308, 309, 314, 315, 317, 324, 327, 328, 332, 337, 338, 339, 342, 348, 352, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 380, 383, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 408, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 463, 464, 465, 466, 470, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 490, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 552, 554, 556, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 678, 679, 681, 682, 686, 687, 690, 700, 701, 702, 703, 705, 707, 708, 711, 715, 719, 721, 724, 727, 728, 730, 734, 736, 740, 741, 742, 744, 747, 751, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 766, 768, 769, 770, 773, 774, 775, 783, 787, 788, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 856, 857, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 889, 890, 891, 897, 901, 906, 907, 908, 910, 911, 914, 920, 921, 941, 942, 944, 946, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 973, 976, 978, 984, 985, 986, 987, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "need": [0, 4, 9, 12, 32, 46, 48, 53, 81, 97, 119, 121, 122, 123, 129, 146, 149, 154, 161, 162, 166, 184, 198, 213, 218, 225, 228, 230, 235, 240, 241, 246, 253, 255, 258, 260, 277, 305, 315, 324, 332, 337, 338, 348, 352, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 383, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 413, 415, 417, 421, 424, 440, 478, 516, 526, 547, 557, 563, 564, 565, 566, 602, 610, 614, 615, 617, 624, 641, 643, 646, 651, 654, 667, 694, 695, 696, 697, 754, 758, 768, 769, 770, 773, 774, 783, 784, 785, 792, 800, 803, 811, 812, 828, 831, 838, 844, 848, 865, 872, 875, 941, 942, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 965, 966, 967, 968, 973, 976, 984, 985, 986, 987, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "keep": [0, 6, 42, 74, 98, 100, 161, 166, 168, 169, 196, 197, 198, 204, 250, 253, 301, 308, 313, 324, 337, 338, 342, 348, 352, 353, 365, 368, 376, 377, 389, 390, 391, 392, 393, 394, 408, 425, 440, 456, 457, 458, 459, 467, 468, 509, 515, 516, 519, 522, 529, 531, 533, 535, 537, 540, 543, 545, 570, 573, 575, 577, 578, 586, 609, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 651, 652, 653, 654, 682, 787, 804, 805, 814, 822, 828, 829, 866, 871, 873, 876, 879, 881, 948, 953, 957, 960, 962, 973, 976, 978, 983, 985, 987, 994, 999, 1002, 1003, 1007, 1008], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 61, 65, 69, 72, 74, 91, 99, 100, 110, 113, 116, 129, 146, 150, 155, 157, 158, 161, 166, 167, 168, 172, 175, 177, 185, 190, 196, 198, 212, 225, 228, 229, 232, 241, 242, 246, 249, 250, 254, 255, 256, 258, 262, 263, 264, 265, 266, 268, 277, 297, 298, 299, 302, 305, 308, 321, 324, 332, 337, 339, 346, 348, 353, 357, 358, 359, 360, 361, 364, 365, 366, 368, 369, 370, 372, 373, 375, 377, 378, 383, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 420, 439, 442, 443, 457, 459, 470, 496, 507, 527, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 550, 557, 563, 564, 565, 566, 569, 572, 581, 609, 618, 621, 622, 624, 631, 632, 633, 634, 651, 652, 653, 654, 682, 702, 703, 711, 727, 747, 751, 756, 757, 760, 761, 765, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 792, 793, 794, 795, 796, 798, 806, 817, 819, 821, 822, 823, 830, 831, 832, 833, 834, 847, 858, 863, 868, 870, 871, 878, 879, 880, 881, 886, 911, 941, 945, 946, 948, 949, 951, 952, 953, 954, 955, 958, 959, 962, 964, 967, 968, 973, 978, 984, 985, 987, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "complianc": 0, "tax": [0, 362], "regul": 0, "mostli": [0, 46, 69, 196, 214, 372, 375, 377, 394, 396, 397, 496, 752, 753, 951, 967, 976, 1002, 1003, 1004], "go": [0, 26, 129, 146, 162, 166, 184, 255, 308, 337, 346, 360, 365, 366, 369, 373, 380, 390, 394, 396, 398, 419, 536, 537, 560, 561, 694, 910, 911, 962, 972, 973, 978, 987, 1005], "toward": [0, 26, 27, 62, 81, 116, 122, 128, 149, 168, 175, 200, 201, 222, 365, 377, 389, 423, 427, 437, 651, 653, 670, 845, 951, 966, 968, 971, 973], "cover": [0, 52, 172, 196, 214, 348, 357, 360, 365, 376, 610, 694, 765, 952, 953, 971], "travel": 0, "expens": [0, 55, 129, 149, 167, 226, 257, 324, 337, 338, 339, 354, 370, 377, 389, 390, 393, 396, 397, 424, 443, 483, 770, 773, 774, 783, 794, 868, 870, 949, 951, 967, 972, 976, 987, 998], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 57, 61, 69, 77, 85, 111, 113, 120, 122, 127, 129, 146, 154, 156, 166, 167, 168, 172, 184, 194, 196, 197, 198, 200, 204, 217, 218, 219, 222, 225, 229, 234, 242, 255, 262, 266, 270, 280, 281, 282, 306, 307, 308, 309, 332, 337, 338, 339, 348, 360, 362, 364, 365, 368, 370, 372, 373, 375, 376, 377, 378, 387, 389, 391, 393, 394, 396, 399, 400, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 434, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 675, 695, 696, 697, 758, 761, 763, 766, 768, 769, 770, 773, 774, 783, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 906, 941, 942, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 962, 965, 966, 968, 969, 972, 973, 976, 986, 987, 994, 995, 998, 1000, 1001, 1002, 1005], "budget": [0, 119, 806, 807, 808, 809, 810, 941], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 310, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 376, 377, 378, 380, 381, 382, 383, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 462, 463, 465, 467, 469, 470, 471, 474, 475, 476, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 551, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 736, 737, 739, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 896, 901, 904, 907, 909, 911, 912, 914, 915, 916, 917, 918, 919, 920, 923, 926, 927, 933, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 970, 972, 973, 975, 976, 978, 979, 982, 983, 984, 985, 986, 990, 992, 996], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 65, 70, 71, 79, 81, 84, 85, 91, 98, 113, 114, 118, 122, 123, 146, 149, 156, 161, 166, 167, 168, 172, 184, 185, 189, 196, 197, 198, 200, 204, 210, 212, 214, 217, 218, 219, 221, 225, 226, 228, 230, 231, 232, 241, 250, 255, 257, 258, 261, 262, 263, 273, 275, 277, 281, 282, 292, 297, 298, 301, 302, 305, 306, 307, 308, 309, 313, 315, 317, 324, 337, 346, 352, 353, 359, 362, 365, 366, 368, 370, 371, 375, 376, 377, 380, 384, 387, 388, 389, 391, 392, 394, 396, 397, 399, 400, 401, 402, 403, 404, 408, 410, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 439, 440, 443, 444, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 461, 464, 470, 472, 474, 479, 484, 490, 494, 502, 505, 509, 513, 514, 515, 516, 518, 519, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 560, 561, 563, 565, 566, 568, 569, 572, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 607, 608, 610, 611, 613, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 670, 671, 674, 675, 677, 681, 682, 687, 689, 694, 695, 696, 697, 701, 702, 703, 705, 707, 711, 714, 715, 719, 727, 728, 731, 736, 737, 741, 743, 747, 751, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 796, 798, 800, 803, 804, 805, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 838, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 886, 896, 897, 906, 907, 917, 920, 927, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 955, 956, 958, 959, 960, 962, 965, 966, 967, 968, 969, 971, 973, 975, 978, 985, 986, 987, 989, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "regard": [0, 5, 7, 11, 70, 100, 137, 149, 154, 168, 185, 193, 198, 219, 231, 257, 338, 361, 365, 369, 375, 377, 383, 388, 389, 394, 396, 397, 399, 419, 422, 427, 434, 437, 476, 589, 594, 631, 633, 716, 769, 795, 813, 814, 945, 948, 952, 954, 955, 957, 959, 966, 967, 968, 980, 987, 1001, 1004], "might": [0, 4, 5, 31, 42, 44, 59, 61, 69, 110, 118, 127, 143, 155, 162, 166, 168, 172, 196, 214, 225, 252, 255, 292, 302, 307, 334, 348, 352, 353, 359, 363, 365, 366, 368, 369, 372, 375, 377, 380, 383, 390, 393, 394, 395, 396, 397, 399, 410, 419, 462, 470, 476, 478, 483, 490, 498, 511, 530, 531, 532, 539, 553, 555, 557, 585, 586, 602, 625, 629, 630, 631, 633, 634, 651, 653, 667, 730, 765, 773, 774, 795, 820, 836, 851, 863, 882, 884, 886, 890, 891, 907, 921, 941, 942, 944, 946, 948, 949, 951, 952, 954, 955, 959, 960, 962, 967, 968, 987, 995, 997, 1002, 1003, 1005, 1008, 1009], "pai": [0, 214, 365], "dn": [0, 955], "continu": [0, 17, 19, 42, 119, 120, 149, 164, 197, 204, 214, 218, 221, 237, 241, 245, 246, 293, 296, 302, 303, 307, 308, 346, 360, 363, 366, 367, 368, 369, 372, 375, 377, 378, 380, 389, 394, 396, 466, 567, 571, 574, 575, 582, 583, 584, 621, 622, 627, 628, 632, 635, 636, 637, 638, 699, 715, 729, 781, 783, 834, 836, 838, 840, 841, 850, 851, 867, 879, 917, 941, 948, 949, 952, 953, 955, 956, 962, 968, 973, 975, 976, 978, 985, 991, 994, 996, 997, 1002, 1007, 1008], "integr": [0, 42, 70, 143, 157, 185, 293, 307, 363, 366, 367, 368, 370, 372, 377, 380, 394, 399, 689, 759, 927, 951, 959, 976, 981, 995, 997, 998, 1006, 1007], "servic": [0, 4, 226, 365, 368, 976, 1002], "azur": [0, 365], "travi": [0, 367, 994, 1002], "cl": [0, 8, 12, 16, 371, 377, 880], "circlecl": 0, "free": [0, 5, 154, 155, 162, 195, 245, 297, 359, 364, 365, 372, 375, 380, 397, 399, 427, 584, 646, 827, 876, 941, 944, 948, 952, 973, 1002], "cpu": [0, 60, 256, 352, 353, 363, 370, 377, 380, 397, 470, 607, 622, 626, 628, 630, 633, 634, 636, 638, 640, 641, 643, 651, 654, 770, 783, 792, 793, 794, 815, 823, 863, 920, 952, 978, 982, 987, 999, 1008, 1009], "server": [0, 352, 362, 363, 470, 1002], "anaconda": [0, 353, 363, 368], "inc": [0, 69, 254, 942, 964, 976], "storag": [0, 339, 377, 633, 634, 641, 643, 651, 652, 653, 870, 955, 967, 997, 1002], "thei": [0, 4, 26, 27, 37, 50, 81, 97, 111, 116, 117, 119, 121, 123, 125, 142, 149, 150, 154, 166, 167, 180, 182, 185, 191, 195, 196, 197, 214, 218, 221, 225, 231, 249, 252, 255, 256, 258, 277, 292, 297, 302, 307, 309, 337, 338, 344, 345, 348, 352, 353, 354, 358, 360, 361, 362, 363, 364, 365, 366, 368, 372, 373, 375, 376, 377, 378, 386, 388, 389, 390, 391, 392, 394, 396, 398, 399, 401, 416, 418, 422, 428, 429, 434, 442, 470, 483, 484, 508, 510, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 554, 563, 566, 585, 594, 604, 618, 621, 622, 627, 633, 634, 635, 636, 637, 645, 647, 651, 653, 656, 662, 735, 736, 738, 741, 747, 762, 770, 783, 800, 806, 807, 808, 809, 810, 828, 831, 833, 839, 850, 851, 872, 875, 878, 879, 880, 881, 885, 941, 942, 944, 946, 948, 951, 952, 953, 954, 955, 957, 958, 959, 960, 962, 963, 964, 966, 967, 968, 976, 978, 982, 984, 985, 987, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "stage": [0, 7, 26, 71, 115, 120, 123, 368, 385, 389, 396, 423, 528, 529, 534, 535, 536, 537, 563, 564, 566, 577, 949, 962, 971, 1002, 1006], "nightli": [0, 353, 367, 368], "build": [0, 4, 7, 17, 32, 43, 66, 73, 99, 118, 120, 126, 132, 143, 145, 160, 161, 163, 164, 166, 204, 260, 263, 275, 293, 294, 298, 339, 348, 352, 353, 354, 361, 366, 367, 368, 369, 370, 377, 380, 382, 388, 389, 390, 393, 396, 397, 418, 464, 476, 478, 499, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 560, 561, 563, 564, 566, 602, 603, 605, 666, 687, 688, 771, 775, 778, 787, 791, 793, 832, 849, 851, 878, 879, 880, 881, 883, 903, 941, 942, 949, 952, 956, 958, 962, 967, 968, 972, 973, 976, 979, 981, 985, 986, 994, 997, 999, 1000, 1001, 1003, 1006], "applic": [3, 4, 5, 19, 49, 79, 164, 172, 196, 213, 219, 249, 258, 297, 352, 354, 360, 362, 365, 366, 370, 372, 373, 375, 377, 389, 393, 394, 395, 396, 399, 401, 420, 427, 470, 472, 507, 508, 509, 528, 529, 604, 663, 664, 665, 669, 686, 702, 703, 711, 756, 757, 760, 797, 941, 948, 949, 950, 951, 952, 956, 958, 964, 968, 972, 973, 976, 985, 987, 994, 995, 1000, 1002, 1005], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 65, 95, 110, 113, 117, 122, 123, 149, 164, 168, 172, 175, 182, 185, 189, 190, 196, 198, 213, 214, 219, 225, 226, 232, 237, 245, 253, 255, 260, 269, 280, 287, 301, 308, 321, 324, 332, 333, 337, 338, 348, 352, 360, 361, 362, 363, 364, 366, 369, 370, 373, 375, 377, 387, 388, 389, 391, 393, 395, 396, 397, 398, 399, 400, 401, 420, 422, 424, 425, 427, 432, 437, 440, 453, 474, 478, 483, 484, 490, 491, 492, 493, 498, 499, 503, 506, 508, 512, 514, 517, 518, 519, 520, 521, 522, 523, 526, 527, 532, 536, 539, 542, 546, 548, 564, 585, 606, 618, 625, 627, 629, 630, 631, 632, 633, 634, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 654, 660, 661, 662, 663, 664, 666, 668, 670, 682, 690, 702, 703, 708, 712, 757, 760, 761, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 785, 786, 787, 788, 789, 791, 799, 800, 801, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 837, 838, 844, 854, 860, 861, 870, 871, 878, 880, 896, 907, 942, 943, 947, 948, 949, 951, 952, 953, 954, 955, 956, 960, 962, 966, 969, 973, 974, 976, 979, 980, 981, 987, 988, 989, 994, 995, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009], "medium": [3, 164, 231, 270, 324, 389, 394, 399, 618, 945, 948], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 53, 54, 56, 57, 59, 60, 61, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 98, 99, 101, 103, 105, 113, 121, 122, 125, 126, 142, 149, 151, 152, 155, 156, 164, 167, 168, 175, 176, 177, 178, 180, 182, 186, 191, 194, 197, 198, 199, 202, 209, 210, 217, 222, 225, 228, 229, 230, 231, 233, 234, 242, 249, 251, 253, 255, 257, 258, 260, 261, 281, 282, 283, 291, 294, 298, 299, 300, 301, 302, 306, 309, 313, 317, 320, 322, 323, 324, 334, 337, 338, 339, 342, 352, 353, 354, 360, 361, 365, 369, 373, 375, 376, 377, 380, 386, 387, 388, 391, 393, 394, 397, 399, 400, 420, 421, 423, 424, 425, 432, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 467, 468, 469, 490, 502, 509, 511, 513, 515, 522, 532, 533, 534, 535, 536, 537, 539, 540, 562, 563, 566, 569, 607, 608, 618, 632, 641, 642, 654, 658, 667, 670, 679, 693, 711, 713, 716, 754, 764, 772, 775, 779, 786, 789, 790, 792, 795, 797, 806, 807, 808, 810, 813, 814, 815, 816, 817, 819, 821, 822, 823, 828, 829, 846, 848, 859, 864, 868, 872, 873, 874, 875, 876, 878, 879, 880, 881, 884, 906, 910, 917, 918, 921, 927, 942, 944, 945, 947, 948, 949, 951, 952, 953, 954, 955, 956, 959, 962, 964, 966, 967, 968, 976, 981, 983, 985, 986, 997, 998, 999, 1000, 1001, 1002, 1004], "interact": [3, 89, 123, 164, 196, 222, 227, 256, 306, 364, 366, 370, 375, 377, 378, 390, 396, 534, 535, 607, 608, 846, 850, 941, 944, 948, 949, 950, 957, 959, 962, 971, 973, 996, 1001, 1008], "user": [3, 25, 68, 95, 158, 164, 166, 184, 217, 252, 257, 262, 281, 282, 285, 305, 306, 307, 308, 309, 348, 352, 353, 355, 359, 363, 364, 365, 366, 368, 370, 371, 372, 375, 376, 377, 380, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 400, 401, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 903, 907, 941, 942, 948, 949, 951, 952, 953, 955, 962, 966, 970, 973, 976, 980, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "interfac": [3, 109, 164, 358, 359, 366, 373, 375, 377, 393, 399, 400, 417, 421, 425, 470, 674, 770, 773, 774, 783, 831, 832, 856, 937, 941, 955, 967, 972, 973, 976, 994, 996, 999, 1000, 1002, 1003, 1008], "compress": [3, 11, 15, 19, 48, 53, 164, 297, 360, 389, 394, 397, 627, 647, 667, 801, 923, 926, 948, 962, 986, 994, 1003], "sens": [3, 4, 15, 25, 155, 164, 172, 229, 297, 313, 324, 337, 348, 352, 368, 377, 389, 391, 393, 437, 444, 445, 446, 447, 448, 449, 450, 451, 627, 630, 631, 647, 771, 780, 867, 946, 948, 955, 956, 958, 962, 965], "tomographi": [3, 15, 164, 627, 647, 948], "reconstruct": [3, 15, 95, 96, 100, 164, 195, 220, 221, 309, 394, 397, 456, 457, 458, 506, 508, 510, 512, 513, 514, 515, 517, 518, 523, 558, 562, 627, 647, 663, 664, 668, 862, 863, 948, 949, 1008], "l1": [3, 7, 15, 30, 40, 81, 84, 164, 174, 181, 185, 207, 211, 215, 227, 256, 275, 308, 373, 375, 388, 389, 391, 394, 417, 421, 425, 432, 439, 444, 445, 446, 447, 448, 449, 450, 451, 453, 470, 477, 479, 506, 512, 513, 514, 515, 517, 518, 522, 523, 533, 540, 564, 565, 566, 572, 621, 622, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 645, 647, 651, 652, 653, 654, 656, 663, 708, 735, 741, 746, 751, 752, 753, 783, 797, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 843, 851, 857, 870, 871, 877, 879, 881, 893, 934, 948, 950, 952, 955, 962, 966, 967, 968, 985, 999, 1001, 1007], "prior": [3, 15, 46, 47, 66, 148, 149, 159, 164, 168, 175, 177, 239, 241, 245, 246, 247, 255, 362, 365, 366, 368, 377, 380, 389, 392, 394, 396, 399, 440, 498, 511, 523, 524, 525, 526, 534, 560, 561, 586, 588, 589, 590, 594, 597, 598, 605, 619, 620, 621, 622, 626, 627, 629, 630, 631, 635, 636, 637, 647, 653, 656, 690, 768, 806, 807, 808, 809, 810, 831, 832, 846, 872, 875, 941, 944, 946, 948, 951, 952, 954, 960, 968, 969, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007], "lasso": [3, 15, 105, 129, 135, 164, 166, 174, 215, 308, 352, 375, 391, 392, 394, 396, 397, 398, 446, 447, 453, 476, 499, 506, 512, 514, 517, 518, 520, 521, 523, 572, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 653, 656, 657, 658, 659, 660, 661, 695, 696, 697, 758, 792, 793, 794, 832, 851, 941, 952, 966, 974, 982, 985, 989, 994, 998, 999, 1000, 1002, 1003, 1005, 1007, 1008], "recognit": [3, 9, 15, 164, 294, 358, 369, 394, 396, 398, 468, 477, 507, 509, 516, 682, 687, 714, 742, 761, 762, 768, 783, 797, 851, 875, 944, 948, 952, 953, 957, 967, 969, 978, 981, 989, 994], "eigenfac": [3, 15, 164, 360, 394, 468, 516, 687, 783, 797, 851, 875, 969, 981, 994], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 69, 71, 73, 130, 134, 136, 139, 140, 144, 145, 147, 164, 174, 189, 215, 225, 231, 232, 236, 237, 249, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 270, 299, 302, 305, 307, 311, 315, 318, 319, 322, 331, 332, 335, 337, 352, 355, 360, 366, 370, 377, 383, 390, 393, 394, 396, 398, 413, 468, 479, 487, 490, 516, 530, 531, 538, 542, 543, 551, 568, 569, 574, 575, 579, 580, 614, 618, 643, 651, 652, 653, 664, 672, 673, 675, 676, 687, 708, 715, 770, 783, 789, 793, 794, 797, 799, 800, 817, 831, 832, 844, 851, 866, 867, 940, 941, 944, 947, 949, 950, 952, 953, 957, 965, 967, 969, 974, 978, 981, 982, 983, 987, 989, 991, 994, 995, 996, 998, 999, 1000, 1001], "imag": [3, 6, 13, 15, 19, 32, 36, 46, 48, 51, 53, 54, 57, 67, 69, 88, 93, 95, 107, 117, 144, 153, 164, 187, 218, 227, 230, 233, 253, 284, 293, 294, 306, 312, 313, 337, 338, 357, 358, 360, 362, 365, 369, 372, 375, 377, 380, 382, 389, 394, 417, 421, 427, 437, 467, 468, 469, 470, 477, 478, 481, 482, 509, 510, 512, 516, 582, 583, 666, 672, 711, 797, 841, 948, 952, 953, 955, 957, 964, 968, 972, 976, 978, 983, 984, 986, 987, 989, 994, 997, 1002, 1003, 1007], "denois": [3, 15, 93, 107, 164, 394, 470, 510, 512, 516, 559, 562, 797, 841], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 73, 93, 105, 107, 130, 136, 138, 144, 145, 148, 150, 151, 152, 153, 156, 157, 159, 161, 173, 197, 210, 224, 225, 232, 236, 238, 249, 253, 255, 257, 260, 261, 264, 265, 270, 276, 289, 308, 314, 317, 319, 321, 324, 325, 326, 329, 330, 333, 335, 348, 352, 355, 357, 366, 375, 377, 387, 389, 390, 393, 396, 397, 408, 416, 423, 427, 436, 437, 440, 456, 457, 458, 465, 470, 472, 477, 479, 489, 508, 509, 510, 516, 519, 529, 531, 533, 535, 537, 540, 543, 545, 568, 569, 585, 586, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 651, 652, 653, 654, 663, 665, 666, 667, 670, 708, 731, 732, 734, 739, 740, 747, 748, 749, 750, 770, 780, 783, 795, 797, 799, 804, 805, 811, 812, 814, 816, 822, 829, 831, 832, 837, 841, 843, 844, 851, 865, 866, 870, 871, 872, 873, 874, 875, 876, 879, 881, 941, 947, 948, 949, 952, 953, 955, 958, 965, 966, 972, 974, 978, 982, 983, 988, 989, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "pca": [3, 6, 15, 68, 71, 73, 75, 85, 89, 93, 97, 106, 107, 164, 218, 220, 230, 232, 236, 254, 275, 279, 284, 302, 308, 348, 357, 377, 388, 389, 390, 395, 448, 451, 470, 477, 479, 489, 507, 508, 509, 510, 514, 515, 518, 519, 524, 618, 633, 663, 665, 667, 770, 793, 797, 820, 827, 830, 831, 833, 841, 849, 851, 944, 946, 949, 955, 962, 966, 968, 983, 988, 989, 994, 996, 997, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1009], "libsvm": [3, 15, 164, 172, 322, 358, 370, 461, 483, 538, 870, 871, 872, 873, 874, 875, 876, 967, 972, 989, 994, 996, 1002, 1005, 1008], "gui": [3, 15, 164, 461, 874, 875, 985, 994, 995, 1005], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 54, 55, 57, 60, 68, 70, 75, 77, 81, 85, 93, 95, 107, 110, 113, 115, 118, 120, 121, 122, 124, 125, 128, 129, 132, 135, 136, 138, 140, 142, 147, 152, 153, 155, 156, 157, 158, 162, 165, 169, 170, 176, 178, 180, 182, 186, 187, 189, 191, 192, 193, 197, 198, 200, 202, 204, 208, 209, 211, 212, 213, 215, 225, 228, 232, 240, 242, 243, 244, 247, 249, 250, 253, 256, 257, 258, 260, 261, 263, 268, 269, 271, 273, 275, 277, 279, 281, 282, 284, 288, 298, 301, 305, 307, 309, 312, 313, 321, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 338, 339, 343, 344, 345, 348, 355, 357, 359, 360, 362, 367, 370, 377, 378, 379, 385, 386, 387, 389, 390, 392, 394, 395, 396, 397, 398, 399, 407, 408, 410, 413, 418, 424, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 462, 463, 470, 472, 476, 477, 478, 484, 497, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 563, 564, 566, 568, 569, 572, 577, 581, 584, 585, 586, 590, 602, 609, 610, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 680, 685, 695, 696, 697, 707, 708, 714, 715, 723, 726, 758, 761, 762, 763, 768, 769, 770, 773, 774, 783, 784, 785, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 816, 817, 818, 820, 822, 827, 828, 829, 831, 832, 834, 836, 838, 843, 844, 846, 847, 848, 850, 851, 855, 856, 858, 859, 860, 861, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 942, 944, 945, 946, 949, 950, 953, 955, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 976, 979, 981, 983, 987, 988, 989, 994, 995, 996, 997, 998, 999], "complex": [3, 9, 14, 15, 16, 149, 154, 161, 164, 210, 213, 224, 231, 238, 248, 257, 271, 298, 305, 308, 309, 311, 318, 324, 339, 341, 347, 361, 365, 369, 375, 390, 394, 396, 399, 400, 416, 420, 422, 423, 425, 442, 463, 475, 476, 477, 489, 509, 516, 526, 532, 533, 534, 535, 537, 539, 540, 579, 605, 613, 631, 633, 651, 652, 707, 723, 770, 797, 799, 827, 831, 832, 836, 844, 851, 866, 870, 873, 876, 878, 879, 880, 881, 941, 944, 945, 947, 951, 953, 958, 962, 965, 973, 974, 976, 989, 995, 997, 1003, 1004, 1007], "influenc": [3, 9, 15, 79, 80, 164, 166, 167, 178, 240, 263, 297, 324, 332, 348, 354, 391, 394, 396, 408, 416, 429, 440, 456, 457, 458, 463, 476, 529, 531, 533, 535, 537, 540, 543, 545, 586, 603, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 651, 653, 654, 707, 723, 797, 804, 805, 813, 814, 821, 822, 829, 848, 849, 859, 871, 873, 876, 879, 881, 890, 941, 946, 947, 955, 958, 962, 966, 967, 976, 997, 1002, 1003], "core": [3, 15, 49, 64, 70, 117, 118, 164, 166, 351, 353, 355, 363, 365, 367, 372, 377, 380, 389, 394, 396, 400, 420, 424, 425, 430, 432, 473, 513, 564, 569, 633, 634, 641, 643, 651, 806, 807, 808, 809, 810, 815, 823, 948, 955, 958, 967, 970, 973, 974, 976, 985, 987, 989, 996, 998, 999, 1001, 1004, 1008, 1009], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 70, 71, 72, 87, 92, 98, 109, 110, 112, 114, 116, 117, 118, 120, 123, 127, 134, 139, 142, 143, 144, 145, 148, 157, 159, 166, 167, 172, 174, 188, 189, 196, 204, 215, 224, 226, 230, 234, 237, 238, 243, 248, 252, 253, 254, 255, 256, 257, 264, 270, 271, 276, 277, 283, 285, 288, 289, 290, 295, 299, 312, 318, 320, 324, 327, 330, 332, 333, 336, 338, 339, 340, 348, 352, 354, 355, 358, 359, 360, 362, 366, 369, 373, 376, 377, 384, 387, 389, 390, 393, 394, 397, 398, 405, 413, 444, 450, 456, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 475, 477, 478, 479, 485, 487, 489, 490, 494, 495, 497, 498, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 544, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 584, 585, 586, 588, 589, 597, 607, 608, 618, 633, 641, 643, 649, 650, 651, 672, 677, 679, 681, 682, 686, 687, 689, 690, 692, 699, 700, 702, 703, 707, 711, 714, 715, 716, 727, 729, 731, 732, 755, 756, 757, 759, 760, 761, 762, 765, 767, 770, 771, 773, 774, 775, 783, 787, 788, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 813, 818, 820, 821, 827, 828, 829, 831, 835, 838, 843, 844, 851, 854, 856, 865, 866, 867, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 893, 896, 904, 941, 942, 944, 945, 946, 949, 950, 954, 957, 959, 960, 962, 963, 965, 971, 972, 974, 975, 976, 978, 979, 983, 984, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 59, 61, 63, 69, 74, 79, 80, 120, 166, 176, 190, 191, 225, 229, 235, 236, 240, 242, 245, 248, 261, 262, 266, 271, 280, 283, 285, 291, 299, 308, 311, 313, 318, 331, 340, 342, 352, 354, 355, 357, 358, 359, 365, 369, 375, 377, 389, 390, 392, 393, 394, 396, 399, 422, 424, 443, 461, 462, 463, 473, 478, 483, 496, 511, 519, 539, 590, 600, 633, 641, 643, 649, 651, 672, 677, 679, 681, 687, 691, 702, 710, 764, 766, 770, 783, 797, 806, 808, 810, 813, 818, 831, 832, 834, 835, 843, 866, 867, 868, 870, 882, 883, 884, 904, 941, 944, 948, 950, 952, 953, 954, 956, 959, 962, 964, 966, 967, 971, 973, 976, 979, 989, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "outlier": [3, 15, 44, 79, 80, 122, 164, 174, 198, 199, 202, 215, 224, 238, 276, 289, 296, 303, 334, 360, 377, 389, 391, 396, 444, 445, 448, 449, 450, 451, 464, 465, 466, 470, 485, 487, 497, 499, 538, 614, 624, 645, 646, 647, 651, 652, 653, 654, 667, 676, 817, 821, 832, 838, 840, 841, 843, 847, 848, 849, 851, 856, 859, 873, 874, 876, 952, 966, 967, 972, 974, 988, 989, 994, 999, 1000, 1002], "detect": [3, 8, 10, 15, 62, 64, 79, 81, 116, 125, 164, 177, 224, 238, 248, 255, 258, 271, 276, 289, 323, 360, 363, 365, 368, 375, 377, 388, 389, 391, 393, 397, 424, 444, 445, 448, 449, 450, 451, 462, 463, 465, 466, 470, 485, 487, 490, 497, 512, 513, 514, 521, 538, 539, 563, 566, 571, 614, 652, 676, 700, 762, 797, 817, 821, 832, 838, 851, 870, 874, 944, 973, 974, 976, 982, 987, 988, 989, 994, 997, 1000, 1001, 1002, 1004, 1006, 1007, 1009], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 19, 25, 26, 27, 30, 31, 37, 41, 42, 43, 44, 45, 46, 48, 49, 50, 54, 56, 57, 59, 61, 63, 64, 65, 69, 70, 72, 79, 80, 81, 85, 89, 93, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 131, 135, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 175, 180, 181, 184, 185, 187, 189, 191, 192, 195, 196, 197, 198, 200, 201, 204, 209, 210, 214, 217, 218, 219, 225, 226, 227, 228, 230, 231, 240, 242, 244, 249, 250, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 269, 273, 277, 281, 282, 283, 284, 285, 288, 292, 293, 294, 297, 299, 301, 302, 305, 306, 307, 308, 309, 312, 313, 316, 317, 321, 323, 326, 332, 337, 338, 339, 344, 345, 348, 352, 353, 354, 357, 358, 360, 362, 363, 365, 366, 368, 369, 371, 372, 376, 377, 378, 380, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 410, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 462, 463, 467, 469, 470, 471, 473, 477, 478, 479, 483, 484, 485, 490, 498, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 672, 673, 675, 676, 677, 687, 688, 693, 695, 696, 699, 700, 701, 702, 703, 704, 707, 711, 713, 718, 719, 721, 723, 724, 726, 729, 752, 753, 755, 756, 757, 758, 760, 762, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 890, 891, 901, 902, 907, 920, 921, 922, 923, 926, 927, 933, 936, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 979, 981, 982, 983, 986, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 55, 57, 61, 69, 70, 71, 72, 74, 84, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 123, 125, 127, 128, 129, 130, 131, 133, 137, 138, 143, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 172, 175, 178, 179, 180, 188, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 210, 211, 213, 214, 225, 226, 228, 230, 233, 241, 242, 243, 244, 245, 246, 248, 249, 253, 255, 257, 258, 261, 264, 269, 271, 273, 275, 278, 281, 282, 283, 286, 287, 294, 297, 298, 302, 305, 306, 307, 308, 309, 313, 315, 316, 317, 320, 321, 323, 324, 330, 331, 332, 333, 337, 338, 343, 344, 345, 346, 348, 351, 355, 357, 360, 362, 365, 366, 371, 373, 377, 379, 383, 384, 385, 387, 388, 389, 390, 394, 396, 397, 398, 405, 408, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 440, 444, 456, 457, 458, 461, 476, 483, 499, 509, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 551, 557, 568, 569, 577, 581, 585, 586, 588, 589, 590, 591, 597, 600, 602, 603, 605, 606, 607, 608, 609, 610, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 672, 673, 675, 676, 677, 679, 680, 681, 682, 683, 684, 686, 688, 689, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 711, 714, 715, 716, 719, 721, 723, 725, 729, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 773, 774, 783, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 817, 818, 821, 822, 828, 829, 831, 838, 851, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 926, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 965, 966, 967, 968, 971, 972, 973, 975, 976, 979, 981, 982, 983, 987, 989, 991, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "latenc": [3, 7, 15, 120, 164, 351, 499, 540, 647, 653, 797, 851, 876, 919, 926, 972, 989, 997], "speci": [3, 15, 164, 276, 289, 337, 360, 395, 472, 680, 762, 816, 874, 885, 952, 958, 994], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 56, 61, 74, 78, 79, 80, 91, 110, 112, 122, 141, 149, 158, 164, 166, 172, 175, 196, 198, 200, 219, 221, 225, 229, 240, 246, 255, 261, 263, 276, 280, 289, 296, 297, 299, 302, 303, 312, 313, 329, 332, 337, 352, 353, 360, 361, 362, 363, 365, 368, 369, 370, 377, 383, 387, 388, 389, 391, 393, 394, 395, 399, 401, 422, 424, 444, 445, 446, 447, 448, 449, 450, 451, 462, 472, 478, 490, 491, 492, 493, 494, 498, 507, 508, 511, 525, 526, 527, 538, 586, 600, 615, 617, 619, 620, 623, 633, 634, 644, 654, 655, 663, 664, 665, 667, 680, 682, 697, 725, 762, 768, 769, 774, 775, 781, 783, 787, 788, 797, 807, 810, 816, 820, 827, 834, 847, 848, 849, 850, 851, 858, 859, 860, 865, 866, 874, 885, 909, 920, 941, 946, 948, 950, 951, 952, 954, 955, 957, 958, 964, 965, 970, 972, 973, 978, 982, 986, 988, 989, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "relat": [3, 7, 12, 15, 17, 44, 61, 96, 98, 100, 164, 165, 166, 191, 234, 248, 262, 337, 346, 355, 360, 361, 364, 367, 368, 369, 371, 372, 373, 375, 377, 378, 379, 388, 389, 390, 391, 392, 393, 394, 396, 399, 425, 439, 444, 470, 524, 525, 537, 538, 614, 648, 652, 667, 696, 716, 790, 794, 829, 830, 832, 835, 836, 841, 844, 845, 846, 847, 850, 858, 874, 941, 946, 952, 953, 955, 956, 962, 967, 968, 969, 970, 973, 989, 994, 998, 999, 1000, 1002, 1003, 1006, 1007], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 57, 59, 62, 67, 68, 69, 70, 71, 75, 79, 80, 85, 88, 89, 90, 91, 95, 97, 99, 103, 104, 106, 108, 109, 118, 124, 125, 126, 128, 129, 130, 132, 133, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 170, 174, 179, 182, 183, 185, 192, 196, 197, 198, 200, 201, 205, 211, 212, 213, 215, 224, 227, 229, 237, 238, 248, 255, 257, 261, 262, 264, 265, 269, 271, 273, 278, 283, 284, 286, 290, 293, 295, 296, 297, 300, 303, 304, 306, 309, 319, 320, 321, 324, 332, 335, 336, 339, 340, 343, 345, 346, 348, 355, 357, 358, 359, 360, 361, 362, 363, 366, 367, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 387, 389, 391, 392, 393, 394, 395, 399, 400, 401, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 553, 555, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 660, 661, 662, 663, 664, 665, 666, 667, 677, 687, 695, 696, 697, 731, 732, 736, 737, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 754, 758, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 890, 891, 904, 919, 927, 928, 929, 933, 941, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 976, 978, 979, 983, 984, 985, 989, 991, 992, 993, 994, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "engin": [3, 15, 19, 40, 115, 154, 164, 352, 359, 362, 389, 395, 397, 399, 439, 470, 474, 537, 614, 648, 790, 794, 829, 830, 832, 835, 836, 841, 844, 845, 846, 850, 942, 952, 962, 970, 1000], "topic": [3, 7, 8, 15, 69, 164, 337, 338, 339, 360, 361, 393, 394, 397, 462, 471, 511, 513, 515, 522, 563, 566, 948, 953, 972, 973, 987, 999, 1001], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 68, 69, 70, 75, 84, 95, 164, 200, 211, 248, 271, 294, 302, 337, 339, 348, 355, 357, 360, 362, 366, 370, 373, 375, 389, 390, 393, 394, 425, 427, 430, 431, 437, 439, 462, 463, 467, 468, 478, 479, 506, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 558, 559, 563, 564, 566, 568, 569, 572, 574, 606, 692, 761, 770, 783, 808, 830, 831, 875, 907, 918, 941, 949, 953, 957, 962, 966, 972, 976, 979, 983, 984, 989, 994, 995, 1003, 1006], "neg": [3, 4, 15, 16, 24, 59, 74, 77, 85, 121, 122, 126, 164, 166, 174, 196, 214, 215, 244, 252, 255, 258, 262, 297, 301, 309, 337, 370, 377, 389, 393, 396, 397, 400, 401, 408, 416, 420, 427, 440, 444, 456, 457, 458, 462, 506, 508, 510, 511, 512, 513, 515, 517, 519, 522, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 563, 566, 567, 570, 571, 573, 574, 575, 579, 580, 581, 582, 583, 584, 586, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 652, 653, 654, 655, 662, 673, 674, 678, 679, 686, 687, 689, 692, 693, 695, 696, 697, 700, 702, 703, 704, 708, 711, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 755, 756, 757, 758, 760, 764, 768, 769, 792, 797, 804, 805, 814, 817, 822, 829, 838, 847, 849, 850, 854, 858, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 907, 920, 950, 952, 953, 955, 956, 957, 958, 966, 967, 987, 988, 989, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 61, 69, 78, 79, 80, 81, 84, 95, 96, 97, 106, 156, 157, 164, 169, 174, 182, 197, 201, 215, 226, 229, 230, 248, 262, 264, 271, 293, 309, 312, 313, 337, 338, 339, 346, 352, 355, 360, 361, 362, 365, 366, 370, 373, 375, 376, 377, 386, 390, 391, 392, 397, 398, 399, 400, 401, 408, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 429, 432, 434, 435, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 470, 471, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 494, 496, 498, 499, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 560, 561, 563, 564, 565, 566, 568, 569, 578, 579, 580, 581, 582, 583, 584, 586, 595, 604, 605, 606, 610, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 681, 686, 687, 688, 689, 690, 692, 702, 703, 704, 707, 711, 712, 713, 714, 727, 728, 731, 732, 733, 734, 736, 737, 739, 740, 741, 745, 747, 748, 750, 751, 752, 753, 754, 756, 757, 760, 761, 767, 768, 769, 770, 773, 774, 783, 797, 800, 802, 803, 804, 805, 806, 807, 808, 810, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 838, 840, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 888, 889, 890, 891, 896, 905, 906, 907, 908, 911, 912, 913, 917, 918, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 938, 942, 944, 946, 948, 949, 953, 954, 955, 956, 962, 963, 964, 965, 966, 968, 969, 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "factor": [3, 15, 26, 31, 44, 46, 61, 93, 100, 105, 107, 127, 164, 166, 222, 225, 234, 266, 267, 276, 289, 291, 292, 297, 299, 307, 309, 352, 353, 370, 373, 377, 386, 388, 389, 396, 397, 399, 416, 418, 429, 444, 448, 449, 451, 453, 462, 479, 489, 490, 502, 507, 510, 511, 513, 515, 516, 519, 520, 521, 522, 524, 525, 536, 537, 538, 563, 566, 572, 588, 624, 625, 626, 629, 630, 631, 657, 658, 667, 693, 756, 770, 773, 774, 793, 817, 851, 864, 866, 874, 906, 907, 941, 948, 949, 955, 965, 969, 972, 988, 989, 994, 995, 997, 998, 1000, 1008], "latent": [3, 15, 17, 106, 164, 294, 338, 392, 397, 399, 462, 507, 511, 513, 514, 515, 518, 519, 563, 566, 827, 951, 972, 987, 988, 989, 996, 999], "dirichlet": [3, 15, 164, 240, 241, 246, 250, 397, 462, 511, 513, 515, 563, 566, 768, 972, 988, 989, 994, 999, 1000], "alloc": [3, 15, 25, 60, 164, 267, 307, 361, 365, 389, 397, 419, 422, 434, 462, 511, 513, 515, 559, 563, 566, 621, 627, 635, 637, 773, 774, 795, 798, 941, 962, 972, 988, 989, 998, 999, 1004, 1005], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 52, 59, 60, 79, 90, 93, 97, 99, 105, 107, 123, 127, 131, 132, 157, 162, 164, 167, 169, 180, 187, 196, 198, 214, 222, 224, 227, 230, 235, 236, 238, 248, 249, 251, 252, 256, 271, 280, 284, 285, 290, 292, 295, 297, 301, 302, 305, 307, 313, 355, 357, 361, 363, 370, 371, 386, 388, 391, 393, 394, 395, 396, 414, 417, 421, 429, 447, 470, 477, 479, 482, 485, 489, 497, 507, 509, 516, 539, 541, 546, 606, 608, 633, 664, 667, 672, 673, 675, 676, 692, 700, 755, 762, 771, 772, 775, 786, 787, 788, 789, 790, 797, 828, 832, 851, 875, 884, 903, 947, 949, 950, 952, 955, 956, 958, 959, 962, 968, 972, 978, 989, 997, 1004, 1005, 1006, 1008], "stock": [3, 15, 164, 389, 391, 429, 447, 664, 981], "market": [3, 15, 164, 389, 391, 429, 447, 664, 976, 981], "wikipedia": [3, 15, 24, 164, 372, 388, 389, 570, 582, 583, 611, 631, 643, 646, 657, 658, 670, 678, 679, 681, 683, 686, 690, 692, 699, 702, 703, 704, 707, 708, 711, 716, 729, 756, 758, 759, 761, 762, 763, 764, 813, 814, 819, 820, 821, 822, 849, 864, 878, 879, 944, 948, 952, 955, 964, 968, 987, 994, 1001], "princip": [3, 15, 83, 86, 93, 97, 99, 100, 102, 104, 107, 127, 164, 217, 230, 232, 284, 302, 307, 357, 389, 392, 401, 458, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 525, 632, 663, 664, 665, 667, 668, 797, 820, 832, 851, 906, 907, 949, 955, 988, 989, 994], "eigenvector": [3, 15, 46, 85, 89, 164, 240, 389, 427, 437, 509, 510, 516, 525, 663, 664, 666, 670, 949, 994, 998, 1008], "click": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 365, 372, 976, 978, 980], "here": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 372, 375, 376, 383, 385, 386, 389, 390, 392, 393, 394, 395, 396, 397, 400, 413, 416, 417, 418, 419, 420, 421, 422, 424, 427, 439, 447, 450, 511, 513, 514, 518, 519, 542, 543, 544, 545, 556, 557, 559, 563, 566, 569, 577, 603, 605, 622, 626, 628, 630, 636, 638, 640, 648, 650, 664, 666, 670, 674, 686, 699, 719, 729, 765, 770, 773, 774, 783, 791, 792, 793, 794, 795, 796, 798, 807, 811, 812, 835, 843, 846, 849, 862, 863, 873, 941, 944, 948, 949, 950, 951, 952, 955, 958, 962, 964, 965, 966, 967, 972, 973, 975, 976, 978, 979, 985, 994, 1002, 1007], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 358, 360, 362, 363, 368, 369, 372, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 485, 968, 983, 985, 987, 989, 998, 999, 1002, 1006, 1007, 1008], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 352, 353, 355, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 380, 382, 383, 388, 400, 401, 414, 415, 431, 436, 443, 446, 459, 474, 482, 483, 506, 518, 522, 530, 547, 548, 551, 558, 567, 570, 571, 573, 578, 582, 587, 591, 595, 596, 599, 604, 606, 613, 617, 622, 625, 626, 629, 634, 635, 636, 638, 642, 650, 673, 674, 682, 689, 695, 696, 697, 699, 701, 703, 704, 708, 712, 716, 717, 719, 720, 724, 727, 729, 736, 737, 741, 742, 744, 746, 754, 756, 765, 776, 777, 778, 779, 780, 781, 782, 799, 801, 803, 805, 807, 811, 812, 819, 821, 822, 823, 825, 833, 834, 837, 839, 842, 852, 855, 857, 858, 860, 861, 862, 865, 871, 880, 881, 882, 883, 896, 909, 910, 912, 916, 917, 918, 923, 940, 942, 950, 973, 974, 976, 979, 982, 983, 987, 989, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1007], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 363, 365, 366, 368, 369, 370, 371, 372, 375, 377, 378, 380, 385, 389, 391, 393, 396, 399, 400, 401, 413, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 439, 442, 446, 447, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 557, 567, 569, 570, 571, 573, 574, 575, 577, 585, 586, 609, 615, 621, 622, 624, 626, 627, 628, 630, 631, 635, 636, 637, 638, 657, 658, 663, 664, 665, 666, 667, 668, 669, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 803, 804, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 828, 829, 830, 833, 865, 866, 870, 871, 872, 873, 874, 875, 876, 878, 879, 901, 902, 920, 923, 926, 941, 951, 953, 956, 965, 967, 968, 972, 973, 976, 978, 985, 987, 994, 997, 999, 1001, 1002, 1003, 1004, 1008], "yourbrowser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 365, 372, 962], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 370, 390, 443, 868, 968, 971, 973, 1005, 1008], "introduc": [4, 77, 79, 80, 100, 168, 175, 229, 262, 339, 358, 361, 363, 365, 366, 368, 369, 372, 375, 377, 380, 387, 389, 391, 393, 394, 396, 397, 417, 419, 421, 422, 434, 490, 530, 531, 582, 583, 639, 660, 661, 850, 864, 946, 948, 951, 954, 955, 958, 962, 964, 966, 967, 978, 985, 994, 995, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 118, 119, 122, 124, 129, 130, 131, 132, 135, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 168, 172, 175, 176, 182, 183, 184, 185, 187, 193, 196, 197, 198, 200, 201, 202, 203, 204, 214, 217, 218, 219, 222, 225, 227, 230, 231, 234, 240, 242, 243, 244, 246, 250, 252, 253, 255, 256, 258, 260, 261, 262, 263, 265, 269, 270, 281, 282, 284, 291, 292, 296, 301, 302, 303, 305, 319, 323, 324, 328, 332, 333, 335, 337, 338, 339, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 367, 369, 371, 373, 376, 377, 380, 383, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 410, 413, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 433, 434, 437, 439, 453, 464, 467, 468, 470, 478, 479, 483, 484, 487, 489, 497, 512, 513, 514, 515, 521, 522, 524, 525, 530, 531, 538, 563, 564, 565, 566, 569, 586, 588, 589, 590, 594, 597, 598, 602, 607, 608, 609, 613, 618, 619, 622, 624, 626, 630, 633, 636, 641, 642, 643, 651, 652, 653, 655, 665, 667, 669, 673, 674, 675, 678, 679, 680, 681, 683, 689, 691, 692, 700, 701, 702, 703, 704, 707, 710, 716, 730, 731, 732, 741, 751, 755, 756, 757, 759, 760, 762, 763, 764, 766, 769, 770, 772, 773, 774, 775, 778, 783, 784, 785, 786, 787, 788, 789, 792, 794, 795, 798, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 824, 827, 831, 836, 840, 841, 843, 847, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 870, 872, 875, 878, 879, 880, 881, 918, 941, 942, 944, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 965, 966, 967, 968, 969, 973, 976, 978, 980, 981, 982, 986, 987, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "strategi": [4, 52, 54, 57, 60, 70, 119, 124, 129, 161, 162, 164, 168, 185, 196, 204, 227, 236, 248, 256, 257, 258, 260, 271, 290, 295, 296, 303, 305, 306, 309, 339, 351, 366, 370, 376, 377, 393, 396, 397, 398, 401, 413, 414, 415, 427, 437, 447, 477, 479, 487, 489, 497, 508, 513, 526, 527, 536, 537, 542, 543, 546, 563, 564, 566, 567, 569, 577, 602, 603, 605, 609, 620, 622, 626, 628, 630, 636, 638, 640, 648, 650, 666, 670, 678, 687, 728, 730, 766, 770, 773, 774, 783, 786, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 828, 836, 841, 865, 870, 872, 875, 878, 879, 880, 881, 923, 941, 942, 951, 953, 954, 955, 956, 958, 960, 962, 966, 967, 968, 972, 982, 987, 989, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "leverag": [4, 8, 37, 85, 337, 338, 352, 363, 393, 396, 846, 941, 948, 978, 997, 1009], "task": [4, 7, 98, 109, 116, 117, 123, 144, 145, 157, 164, 174, 196, 212, 215, 217, 252, 339, 352, 354, 360, 362, 363, 364, 365, 368, 369, 370, 373, 375, 376, 377, 394, 396, 397, 398, 399, 467, 480, 490, 567, 570, 571, 573, 574, 575, 579, 580, 581, 584, 607, 608, 621, 622, 627, 628, 635, 636, 637, 638, 649, 656, 659, 681, 700, 702, 703, 727, 755, 757, 760, 762, 771, 775, 787, 791, 949, 952, 953, 954, 955, 963, 965, 967, 968, 970, 971, 973, 974, 975, 976, 978, 985, 986, 987, 989, 994, 999, 1003], "highli": [4, 9, 71, 79, 80, 97, 106, 125, 191, 201, 255, 258, 292, 338, 352, 353, 365, 366, 370, 387, 389, 393, 396, 397, 427, 437, 470, 538, 646, 667, 781, 783, 827, 948, 952, 955, 956, 958, 966, 967, 971], "depend": [4, 5, 7, 37, 74, 99, 119, 122, 123, 126, 129, 141, 155, 161, 164, 165, 166, 170, 172, 176, 200, 214, 218, 224, 225, 231, 238, 255, 256, 260, 261, 262, 275, 292, 297, 307, 321, 332, 338, 339, 348, 352, 353, 354, 358, 365, 366, 367, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 388, 389, 391, 393, 394, 396, 397, 398, 399, 400, 414, 415, 416, 420, 425, 427, 429, 432, 435, 437, 439, 444, 458, 463, 464, 465, 467, 470, 475, 476, 477, 479, 480, 485, 509, 510, 516, 519, 526, 534, 535, 537, 563, 564, 565, 566, 567, 577, 579, 582, 583, 586, 602, 607, 608, 613, 615, 633, 634, 646, 648, 651, 652, 653, 655, 662, 665, 666, 669, 670, 702, 751, 754, 763, 764, 768, 769, 788, 796, 797, 813, 814, 815, 817, 819, 820, 821, 822, 823, 829, 830, 832, 844, 848, 851, 864, 871, 872, 875, 879, 888, 941, 942, 944, 945, 946, 948, 949, 951, 952, 954, 955, 956, 957, 960, 964, 966, 967, 968, 978, 985, 987, 989, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005], "busi": [4, 196, 255, 362, 372, 375, 761, 952, 976], "dai": [4, 12, 154, 197, 353, 362, 365, 850, 976, 1000, 1001, 1008], "week": [4, 364, 365, 378, 976], "yearli": 4, "season": [4, 154, 197, 364, 399], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 57, 61, 63, 65, 66, 67, 69, 70, 73, 77, 85, 98, 105, 109, 110, 117, 119, 121, 123, 124, 128, 129, 135, 146, 150, 161, 162, 164, 166, 167, 168, 169, 172, 185, 196, 198, 202, 203, 204, 213, 214, 218, 219, 221, 225, 230, 232, 234, 242, 245, 248, 250, 252, 253, 255, 256, 257, 260, 261, 263, 266, 268, 270, 271, 273, 275, 288, 294, 297, 299, 301, 302, 305, 311, 318, 324, 327, 330, 337, 339, 348, 351, 353, 354, 360, 362, 366, 367, 372, 373, 375, 376, 377, 379, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 406, 416, 418, 419, 420, 422, 423, 425, 427, 429, 430, 434, 436, 443, 444, 456, 457, 458, 459, 477, 487, 490, 506, 507, 508, 510, 512, 514, 517, 518, 519, 520, 521, 523, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 563, 564, 565, 566, 576, 577, 578, 585, 586, 602, 605, 615, 620, 626, 629, 630, 631, 633, 639, 640, 641, 642, 643, 645, 648, 650, 651, 652, 653, 657, 658, 660, 662, 664, 665, 668, 669, 677, 678, 679, 681, 682, 686, 687, 699, 702, 703, 711, 713, 715, 728, 729, 730, 751, 756, 757, 759, 760, 761, 765, 766, 767, 768, 769, 770, 773, 774, 780, 781, 783, 787, 792, 793, 794, 796, 797, 800, 803, 804, 806, 807, 808, 809, 810, 811, 812, 818, 820, 826, 827, 828, 829, 831, 832, 834, 837, 838, 840, 841, 843, 844, 845, 847, 848, 851, 853, 855, 856, 857, 858, 859, 860, 861, 865, 866, 868, 872, 873, 874, 875, 876, 878, 879, 880, 881, 890, 891, 925, 936, 941, 942, 944, 946, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 972, 973, 976, 978, 979, 982, 985, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 352, 353, 354, 355, 358, 359, 360, 363, 364, 365, 366, 368, 369, 370, 372, 373, 375, 376, 377, 379, 380, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 941, 942, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 973, 978, 982, 983, 984, 985, 986, 987, 991, 994, 995, 996, 997, 998, 999, 1000, 1001], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 57, 61, 69, 70, 72, 74, 85, 95, 106, 115, 119, 142, 154, 158, 168, 172, 175, 177, 184, 185, 187, 196, 197, 202, 212, 214, 218, 226, 227, 235, 252, 262, 264, 269, 283, 284, 291, 292, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 316, 324, 327, 338, 354, 355, 357, 359, 362, 365, 369, 376, 377, 386, 389, 390, 393, 397, 398, 439, 440, 441, 442, 463, 542, 556, 557, 563, 564, 565, 566, 605, 633, 634, 647, 649, 651, 653, 662, 714, 800, 831, 832, 870, 871, 872, 873, 875, 876, 942, 948, 953, 956, 963, 966, 967, 969, 972, 975, 976, 978, 983, 984, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001], "splinetransform": [4, 197, 308, 846, 962, 1007], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 57, 70, 71, 90, 91, 100, 104, 108, 109, 117, 130, 133, 149, 150, 153, 157, 158, 161, 164, 166, 172, 174, 186, 187, 188, 204, 208, 211, 212, 215, 218, 225, 232, 234, 240, 241, 242, 248, 249, 250, 255, 257, 261, 264, 266, 271, 273, 275, 278, 280, 283, 284, 285, 286, 302, 305, 309, 312, 314, 315, 319, 320, 324, 325, 333, 335, 337, 338, 339, 354, 355, 357, 359, 360, 361, 362, 365, 366, 368, 369, 370, 371, 373, 375, 376, 380, 385, 387, 389, 390, 392, 394, 398, 399, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 475, 477, 478, 479, 483, 484, 485, 487, 489, 490, 494, 497, 498, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 694, 700, 702, 703, 704, 708, 709, 710, 711, 712, 713, 714, 715, 716, 727, 728, 730, 755, 756, 757, 759, 760, 761, 762, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 895, 896, 897, 898, 899, 901, 902, 914, 920, 922, 923, 936, 941, 942, 943, 944, 946, 948, 949, 953, 954, 956, 959, 960, 962, 963, 965, 968, 973, 974, 976, 978, 982, 985, 987, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "extrapol": [4, 149, 175, 197, 228, 258, 850, 952, 962, 968, 1007], "option": [4, 30, 46, 52, 103, 123, 155, 162, 167, 177, 197, 258, 306, 337, 342, 348, 354, 359, 360, 361, 365, 367, 369, 370, 372, 373, 375, 377, 378, 380, 383, 389, 390, 392, 393, 394, 396, 397, 400, 409, 417, 418, 420, 421, 422, 423, 424, 427, 434, 436, 437, 438, 470, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 522, 524, 532, 533, 537, 539, 540, 542, 543, 557, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 603, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 621, 627, 632, 633, 634, 645, 648, 650, 651, 652, 653, 655, 657, 658, 662, 663, 664, 667, 669, 670, 678, 685, 687, 691, 695, 696, 697, 708, 709, 710, 730, 731, 732, 737, 739, 740, 744, 747, 748, 749, 750, 751, 754, 763, 764, 766, 773, 774, 795, 797, 798, 802, 803, 804, 805, 811, 812, 815, 820, 823, 827, 830, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 862, 863, 870, 878, 879, 880, 881, 882, 884, 897, 938, 941, 948, 951, 952, 955, 962, 965, 967, 968, 973, 975, 985, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 70, 71, 88, 95, 106, 109, 115, 116, 118, 129, 130, 132, 143, 144, 154, 166, 172, 177, 192, 193, 196, 204, 212, 227, 228, 233, 234, 235, 236, 253, 255, 260, 262, 267, 273, 275, 279, 284, 292, 293, 294, 306, 307, 309, 314, 315, 316, 343, 346, 352, 355, 357, 360, 362, 367, 370, 376, 383, 388, 392, 393, 394, 396, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 507, 509, 518, 811, 812, 907, 962, 973, 979, 981, 983, 989, 994, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "openml": [4, 70, 129, 154, 166, 196, 204, 212, 214, 226, 273, 293, 358, 380, 470, 989, 1002, 1004, 1007], "repositori": [4, 8, 172, 358, 360, 362, 363, 365, 366, 368, 372, 378, 380, 479, 972, 975, 989], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 383, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 462, 469, 470, 474, 475, 477, 478, 479, 481, 482, 483, 485, 487, 490, 496, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 551, 553, 554, 555, 556, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 659, 663, 664, 665, 666, 667, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 689, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 736, 737, 741, 742, 744, 746, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 858, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 897, 902, 909, 910, 911, 912, 914, 916, 917, 918, 920, 923, 926, 940, 941, 942, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 962, 963, 964, 965, 966, 967, 968, 973, 976, 978, 981, 982, 983, 984, 985, 986, 987, 989, 991, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "fetch_openml": [4, 5, 70, 74, 119, 129, 154, 166, 168, 196, 204, 212, 214, 226, 234, 273, 275, 293, 305, 309, 359, 368, 474, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "bike_shar": 4, "bike_sharing_demand": 4, "version": [4, 46, 70, 84, 95, 100, 119, 121, 123, 124, 129, 151, 162, 166, 168, 172, 194, 196, 197, 198, 204, 210, 212, 234, 256, 266, 273, 293, 302, 305, 306, 307, 308, 324, 337, 352, 355, 360, 364, 365, 366, 367, 370, 372, 373, 375, 377, 378, 380, 382, 383, 388, 389, 392, 394, 396, 397, 399, 400, 401, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 485, 487, 489, 497, 498, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 682, 687, 688, 692, 695, 696, 697, 698, 700, 701, 702, 703, 704, 707, 712, 713, 714, 716, 719, 726, 727, 729, 730, 731, 732, 734, 739, 740, 742, 751, 757, 758, 760, 762, 768, 769, 770, 771, 772, 773, 774, 775, 782, 783, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 856, 858, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 888, 890, 891, 901, 902, 904, 906, 907, 915, 917, 920, 922, 927, 933, 938, 941, 944, 946, 949, 952, 954, 956, 958, 960, 965, 966, 968, 970, 973, 975, 986, 990, 992], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 135, 138, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 353, 354, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 373, 375, 376, 377, 380, 381, 382, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 434, 435, 437, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 453, 456, 457, 458, 459, 467, 470, 474, 475, 476, 482, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 551, 556, 557, 558, 559, 560, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 578, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 680, 682, 687, 689, 690, 691, 692, 695, 696, 697, 698, 699, 701, 702, 703, 704, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 736, 737, 741, 742, 744, 746, 749, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 854, 858, 863, 864, 866, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 885, 890, 891, 896, 904, 906, 907, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 923, 925, 926, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 970, 975, 978, 979, 982, 983, 984, 985, 986, 990, 991, 992, 994, 995, 996, 998, 999], "as_fram": [4, 5, 70, 74, 119, 129, 154, 166, 168, 184, 185, 196, 204, 212, 214, 234, 275, 293, 305, 307, 309, 359, 360, 463, 464, 465, 466, 470, 474, 475, 476, 477, 479, 480, 485, 1004, 1005, 1006, 1007], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 57, 59, 62, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 91, 95, 96, 97, 98, 100, 106, 109, 114, 119, 120, 121, 122, 124, 129, 130, 132, 135, 136, 137, 142, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 172, 180, 181, 183, 184, 185, 187, 189, 191, 192, 193, 195, 196, 198, 199, 200, 203, 204, 210, 211, 212, 214, 217, 220, 221, 225, 226, 229, 232, 233, 234, 237, 240, 243, 245, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 280, 281, 284, 288, 291, 292, 293, 294, 298, 302, 305, 307, 309, 313, 315, 316, 317, 327, 331, 332, 333, 337, 338, 339, 342, 343, 346, 348, 352, 353, 358, 360, 361, 365, 366, 369, 370, 371, 373, 376, 377, 379, 383, 385, 386, 387, 389, 390, 391, 393, 394, 396, 397, 398, 399, 401, 402, 403, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 494, 497, 498, 499, 501, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 686, 687, 688, 689, 692, 694, 697, 699, 700, 701, 702, 703, 704, 707, 708, 711, 712, 713, 714, 715, 716, 723, 724, 725, 727, 729, 734, 740, 741, 742, 751, 755, 756, 757, 758, 759, 760, 761, 762, 765, 767, 768, 769, 770, 773, 774, 775, 780, 781, 783, 787, 788, 791, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 888, 889, 890, 891, 901, 907, 908, 914, 915, 916, 919, 922, 923, 925, 933, 938, 940, 941, 942, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 964, 965, 966, 967, 968, 972, 978, 982, 983, 985, 986, 987, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "parser": [4, 5, 8, 70, 74, 119, 129, 154, 166, 168, 196, 204, 212, 214, 226, 234, 273, 275, 293, 305, 309, 470, 1009], "panda": [4, 5, 12, 25, 69, 70, 72, 74, 116, 119, 122, 129, 154, 161, 166, 167, 168, 175, 185, 196, 204, 212, 214, 226, 234, 235, 253, 255, 256, 258, 266, 267, 273, 275, 293, 305, 308, 309, 337, 338, 359, 360, 363, 364, 365, 367, 377, 380, 382, 390, 439, 441, 463, 464, 465, 466, 470, 474, 475, 476, 477, 479, 480, 485, 602, 603, 604, 605, 607, 770, 773, 774, 783, 797, 886, 941, 942, 962, 972, 973, 987, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "df": [4, 25, 27, 129, 175, 196, 214, 255, 301, 338, 369, 397, 565, 566, 941, 942], "frame": [4, 16, 70, 154, 166, 196, 360, 365, 375, 378, 463, 464, 465, 466, 470, 475, 476, 477, 479, 480, 485, 972, 983, 1006], "To": [4, 8, 16, 26, 27, 32, 46, 77, 79, 81, 85, 89, 100, 119, 122, 123, 129, 131, 135, 146, 154, 155, 158, 161, 162, 166, 172, 177, 184, 196, 197, 198, 204, 214, 229, 230, 236, 250, 252, 253, 255, 258, 260, 262, 273, 293, 297, 302, 305, 306, 307, 308, 309, 332, 334, 338, 342, 348, 352, 358, 359, 363, 365, 366, 368, 369, 370, 372, 375, 377, 383, 386, 389, 390, 391, 392, 393, 394, 396, 397, 423, 424, 425, 436, 439, 442, 466, 470, 477, 478, 482, 483, 506, 512, 513, 514, 516, 518, 519, 520, 521, 532, 533, 534, 535, 539, 540, 544, 572, 577, 602, 607, 621, 622, 627, 628, 631, 633, 634, 635, 636, 637, 638, 659, 675, 686, 701, 736, 758, 764, 773, 774, 793, 800, 842, 860, 861, 870, 871, 878, 879, 880, 881, 897, 907, 920, 939, 941, 942, 947, 948, 949, 950, 952, 953, 954, 955, 958, 962, 966, 967, 968, 975, 976, 978, 982, 984, 985, 987, 994, 997, 999, 1000, 1001, 1003, 1005], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 55, 96, 100, 122, 129, 131, 143, 146, 149, 154, 155, 161, 166, 167, 168, 169, 189, 198, 211, 214, 217, 232, 253, 256, 257, 259, 263, 266, 273, 280, 288, 298, 305, 313, 316, 321, 324, 326, 329, 332, 334, 337, 339, 342, 355, 358, 359, 360, 363, 365, 366, 368, 369, 370, 371, 372, 377, 380, 385, 389, 390, 391, 393, 394, 396, 397, 398, 399, 403, 404, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 670, 674, 695, 696, 697, 699, 705, 706, 715, 729, 736, 737, 742, 758, 761, 768, 769, 770, 773, 774, 783, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 885, 898, 899, 900, 906, 907, 941, 947, 948, 949, 951, 952, 962, 965, 966, 967, 968, 973, 975, 982, 985, 986, 987, 991, 994, 997, 1000, 1002, 1005, 1007, 1008], "quick": [4, 100, 237, 365, 366, 370, 380, 581, 797, 952, 953, 962, 976, 985, 991], "understand": [4, 9, 89, 154, 164, 250, 253, 307, 308, 321, 337, 341, 347, 348, 364, 365, 368, 370, 375, 379, 389, 396, 397, 479, 797, 828, 829, 878, 879, 880, 881, 884, 941, 942, 949, 951, 968, 971, 972, 976, 994, 1008], "pattern": [4, 16, 62, 81, 93, 107, 149, 161, 164, 308, 337, 338, 339, 348, 362, 365, 366, 386, 389, 390, 394, 396, 397, 423, 439, 441, 479, 507, 509, 516, 530, 531, 613, 682, 698, 714, 742, 761, 762, 768, 851, 944, 946, 948, 952, 953, 967, 969, 973, 976, 1006], "let": [4, 5, 63, 70, 95, 100, 109, 116, 119, 122, 123, 149, 155, 156, 162, 166, 167, 168, 177, 185, 196, 198, 217, 221, 250, 255, 258, 262, 337, 339, 346, 348, 360, 365, 366, 370, 375, 386, 389, 393, 396, 397, 475, 479, 485, 509, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 656, 659, 837, 844, 845, 948, 949, 950, 951, 952, 959, 960, 962, 967, 968, 976, 985, 987, 1004], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 55, 95, 103, 119, 120, 149, 158, 166, 167, 193, 197, 204, 218, 221, 229, 237, 241, 242, 246, 250, 255, 258, 262, 301, 337, 346, 353, 355, 360, 365, 368, 370, 372, 375, 380, 386, 389, 392, 394, 396, 397, 408, 438, 440, 456, 457, 458, 506, 512, 520, 521, 525, 527, 529, 531, 533, 535, 537, 540, 543, 545, 563, 564, 566, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 656, 659, 664, 668, 678, 694, 713, 728, 804, 805, 814, 822, 829, 851, 864, 871, 873, 876, 879, 881, 946, 951, 952, 959, 962, 970, 976, 987, 991, 1004], "look": [4, 5, 95, 98, 100, 122, 123, 149, 154, 155, 162, 166, 198, 217, 221, 225, 246, 250, 255, 293, 337, 338, 348, 354, 359, 360, 363, 365, 366, 368, 370, 372, 375, 376, 389, 392, 394, 395, 396, 397, 423, 462, 463, 532, 533, 534, 535, 539, 540, 577, 578, 606, 634, 667, 851, 878, 879, 880, 881, 948, 949, 962, 966, 967, 969, 987, 994, 1002, 1004], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 59, 61, 113, 114, 118, 122, 125, 130, 131, 132, 146, 154, 167, 177, 185, 196, 203, 214, 234, 258, 260, 263, 264, 273, 297, 305, 316, 337, 348, 352, 360, 362, 366, 386, 387, 391, 393, 397, 399, 400, 401, 413, 414, 417, 420, 421, 422, 424, 464, 467, 468, 498, 506, 507, 508, 512, 513, 515, 516, 522, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 544, 545, 562, 607, 608, 623, 633, 634, 641, 642, 644, 647, 649, 651, 652, 653, 655, 662, 675, 677, 678, 680, 681, 682, 687, 694, 695, 696, 698, 699, 701, 702, 703, 707, 708, 709, 711, 712, 713, 716, 718, 719, 721, 723, 724, 726, 729, 737, 754, 755, 756, 757, 758, 760, 761, 766, 767, 768, 769, 795, 817, 837, 938, 942, 947, 948, 953, 956, 958, 959, 966, 967, 968, 985, 987, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009], "per": [4, 10, 48, 63, 90, 115, 119, 154, 156, 166, 167, 196, 211, 214, 241, 245, 262, 264, 297, 307, 332, 337, 339, 352, 360, 361, 362, 365, 369, 370, 373, 375, 377, 387, 389, 393, 394, 395, 396, 397, 399, 423, 425, 432, 436, 439, 443, 461, 475, 477, 478, 479, 483, 485, 487, 490, 498, 507, 509, 510, 511, 514, 516, 518, 524, 525, 536, 537, 544, 558, 563, 566, 585, 586, 607, 608, 616, 617, 633, 634, 641, 643, 646, 648, 649, 650, 651, 653, 667, 671, 687, 690, 694, 714, 727, 731, 732, 754, 756, 768, 769, 792, 799, 800, 801, 803, 804, 807, 809, 827, 830, 836, 838, 840, 841, 844, 845, 851, 868, 870, 871, 872, 873, 874, 875, 876, 895, 896, 907, 927, 941, 944, 948, 951, 952, 953, 956, 959, 966, 967, 968, 972, 973, 985, 987, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008], "hour": [4, 166, 365, 368, 370, 949, 971], "sundai": 4, "weekend": 4, "clearli": [4, 59, 98, 167, 230, 257, 302, 364, 365, 375, 377, 394, 396, 953, 959], "distinguish": [4, 40, 79, 91, 100, 198, 252, 360, 366, 377, 396, 399, 941, 952, 955, 958], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 74, 85, 98, 122, 155, 166, 167, 168, 185, 196, 197, 204, 214, 221, 222, 231, 241, 261, 297, 299, 301, 317, 337, 338, 339, 348, 354, 360, 364, 365, 366, 368, 369, 372, 375, 377, 387, 388, 389, 391, 393, 394, 396, 397, 399, 417, 419, 421, 422, 423, 424, 434, 436, 507, 510, 532, 533, 534, 535, 539, 540, 557, 564, 569, 602, 603, 605, 614, 633, 634, 670, 679, 686, 716, 734, 740, 747, 751, 754, 759, 761, 794, 862, 863, 878, 879, 880, 881, 907, 921, 941, 942, 944, 946, 948, 951, 952, 955, 957, 958, 960, 962, 964, 966, 967, 968, 976, 987, 1001, 1002, 1003, 1006, 1008], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 44, 46, 52, 59, 66, 74, 79, 88, 89, 91, 95, 98, 102, 103, 111, 113, 116, 117, 119, 121, 122, 123, 124, 129, 146, 149, 155, 158, 162, 166, 167, 172, 175, 176, 182, 185, 187, 190, 194, 196, 197, 198, 211, 212, 213, 214, 217, 221, 225, 230, 231, 232, 236, 240, 242, 243, 246, 249, 253, 255, 256, 257, 258, 262, 275, 277, 285, 291, 292, 294, 297, 298, 299, 302, 305, 306, 307, 309, 313, 321, 324, 329, 332, 334, 337, 338, 339, 342, 343, 348, 352, 353, 354, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 376, 377, 378, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 903, 905, 907, 909, 917, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 975, 976, 978, 982, 983, 984, 985, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "spread": [4, 40, 219, 256, 297, 312, 313, 314, 317, 352, 365, 389, 427, 437, 490, 848, 859, 867, 952], "peak": [4, 27, 387, 393, 1008], "middl": [4, 24, 59, 100, 110, 167, 333, 362, 959, 962], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 309, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 359, 367, 371, 380, 382, 414, 477, 606, 607, 672, 673, 675, 676, 884, 972, 981, 983, 984, 985, 991, 1003, 1006, 1007, 1008, 1009], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 309, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 365, 371, 414, 477, 606, 607, 672, 673, 675, 676, 983, 984, 985, 991, 1008], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 309, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 371, 414, 477, 606, 607, 672, 673, 675, 676, 884, 959, 983, 984, 985, 991], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 59, 63, 65, 72, 77, 79, 85, 89, 95, 100, 101, 102, 106, 109, 115, 116, 119, 122, 123, 126, 127, 129, 131, 152, 158, 161, 166, 167, 169, 172, 176, 184, 187, 190, 191, 193, 194, 196, 197, 204, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 228, 234, 235, 250, 251, 252, 255, 256, 257, 258, 261, 265, 266, 273, 275, 277, 279, 280, 288, 292, 293, 297, 298, 299, 301, 302, 305, 309, 321, 331, 332, 333, 334, 337, 338, 339, 342, 371, 983], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 63, 65, 72, 79, 81, 85, 89, 91, 95, 101, 102, 106, 109, 112, 115, 116, 119, 126, 127, 129, 130, 131, 152, 153, 158, 161, 166, 167, 168, 169, 172, 175, 176, 179, 185, 187, 188, 191, 193, 194, 196, 197, 198, 200, 201, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 234, 235, 237, 240, 242, 250, 251, 252, 255, 257, 258, 259, 261, 262, 265, 266, 267, 269, 273, 275, 277, 278, 279, 280, 283, 285, 286, 291, 292, 293, 297, 299, 300, 301, 302, 305, 306, 309, 320, 321, 322, 325, 326, 331, 332, 333, 334, 337, 338, 339, 342, 343, 366, 367, 394, 399, 414, 509, 516, 525, 606, 607, 672, 673, 675, 676, 692, 884, 952, 955, 959, 991, 1004], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 54, 55, 56, 59, 61, 64, 65, 72, 74, 78, 79, 80, 81, 84, 85, 90, 91, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 118, 119, 123, 126, 127, 129, 130, 131, 141, 151, 153, 158, 161, 162, 166, 167, 169, 172, 176, 179, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 204, 209, 212, 214, 217, 218, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 240, 241, 242, 243, 245, 246, 250, 251, 252, 255, 257, 258, 260, 261, 262, 265, 266, 268, 269, 273, 275, 277, 278, 279, 280, 283, 284, 286, 287, 288, 291, 292, 293, 294, 298, 299, 300, 301, 302, 305, 309, 315, 317, 321, 322, 324, 331, 332, 333, 334, 337, 338, 339, 342, 343, 371, 983], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 72, 74, 79, 81, 84, 85, 88, 89, 90, 91, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 119, 120, 122, 123, 127, 129, 130, 141, 151, 153, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 179, 186, 190, 193, 194, 195, 196, 197, 198, 200, 202, 204, 207, 210, 212, 214, 217, 218, 219, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 240, 242, 243, 245, 246, 250, 252, 257, 258, 259, 262, 269, 273, 275, 277, 291, 292, 294, 297, 298, 299, 300, 301, 302, 309, 312, 314, 322, 324, 328, 329, 331, 332, 333, 334, 337, 338, 339, 884, 983], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 64, 65, 70, 71, 72, 73, 80, 81, 84, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 114, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 142, 144, 149, 151, 152, 154, 155, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 202, 203, 204, 206, 209, 210, 214, 217, 219, 222, 225, 229, 230, 231, 232, 233, 234, 236, 240, 241, 242, 243, 245, 246, 250, 251, 252, 253, 255, 256, 257, 258, 260, 262, 263, 264, 266, 269, 273, 275, 277, 279, 280, 281, 282, 285, 288, 291, 293, 294, 297, 298, 299, 300, 301, 305, 306, 308, 309, 312, 313, 314, 315, 316, 321, 323, 327, 328, 329, 332, 333, 334, 337, 338, 339, 346, 348, 353, 359, 360, 362, 363, 365, 369, 370, 373, 375, 376, 377, 380, 381, 382, 387, 389, 390, 391, 393, 394, 396, 397, 398, 399, 401, 413, 415, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 434, 435, 437, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 470, 474, 479, 487, 488, 491, 492, 493, 503, 507, 508, 509, 510, 512, 513, 514, 515, 516, 519, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 545, 551, 556, 557, 564, 565, 566, 568, 569, 578, 582, 583, 589, 592, 594, 597, 602, 603, 604, 605, 608, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 649, 652, 654, 655, 659, 662, 664, 665, 667, 668, 673, 674, 676, 680, 681, 689, 690, 699, 700, 707, 716, 717, 719, 720, 721, 722, 724, 725, 729, 741, 742, 754, 755, 761, 762, 765, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 797, 800, 801, 802, 805, 806, 807, 808, 810, 819, 828, 829, 830, 836, 837, 838, 843, 844, 846, 847, 849, 854, 858, 864, 870, 871, 873, 874, 876, 878, 879, 880, 896, 904, 906, 907, 909, 911, 912, 918, 920, 923, 941, 942, 945, 946, 947, 948, 950, 952, 953, 954, 955, 962, 963, 966, 967, 970, 978, 982, 983, 984, 985, 987, 990, 992, 995, 996, 997, 999, 1000, 1001, 1003, 1007, 1008, 1009], "average_week_demand": 4, "groupbi": [4, 72, 204, 214], "weekdai": 4, "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 67, 70, 78, 79, 80, 81, 85, 91, 95, 98, 99, 100, 102, 103, 112, 113, 118, 119, 122, 123, 129, 130, 131, 136, 146, 149, 154, 156, 158, 161, 164, 166, 167, 176, 178, 185, 187, 189, 192, 196, 198, 200, 202, 203, 205, 211, 212, 213, 214, 220, 222, 225, 228, 229, 230, 231, 232, 234, 235, 236, 240, 241, 242, 243, 245, 246, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 269, 270, 273, 286, 297, 300, 302, 305, 308, 315, 324, 327, 334, 336, 337, 339, 340, 348, 352, 357, 359, 360, 362, 365, 366, 368, 369, 370, 372, 373, 375, 376, 377, 386, 387, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 408, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 462, 476, 477, 479, 481, 487, 494, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 563, 564, 565, 566, 569, 572, 577, 581, 582, 583, 584, 585, 586, 588, 597, 602, 603, 605, 607, 609, 610, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 659, 663, 664, 665, 666, 667, 668, 669, 670, 678, 679, 681, 683, 686, 687, 690, 691, 697, 699, 702, 703, 704, 709, 710, 711, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 747, 751, 752, 754, 756, 757, 758, 760, 761, 763, 764, 766, 768, 769, 770, 773, 774, 783, 787, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 821, 822, 824, 825, 827, 828, 829, 830, 832, 833, 835, 836, 840, 841, 843, 847, 849, 851, 856, 858, 859, 861, 863, 865, 866, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 886, 890, 891, 893, 926, 927, 933, 937, 941, 942, 943, 946, 948, 949, 951, 954, 955, 956, 957, 959, 960, 965, 966, 967, 968, 972, 976, 982, 985, 987, 988, 989, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "count": [4, 14, 25, 27, 41, 49, 69, 70, 91, 130, 131, 166, 196, 198, 229, 275, 306, 307, 338, 339, 360, 362, 368, 373, 377, 387, 388, 389, 394, 396, 397, 424, 463, 511, 519, 556, 563, 564, 565, 566, 569, 579, 592, 615, 672, 679, 689, 692, 702, 703, 711, 727, 756, 757, 759, 760, 806, 810, 811, 812, 820, 823, 834, 882, 884, 909, 919, 941, 944, 948, 952, 954, 955, 962, 968, 976, 987, 994, 997, 999, 1002, 1003, 1005, 1006], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 72, 74, 78, 79, 80, 85, 87, 89, 92, 94, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 121, 122, 124, 125, 126, 127, 128, 133, 136, 138, 141, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 168, 169, 170, 172, 174, 178, 179, 181, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 220, 221, 222, 224, 225, 228, 229, 231, 232, 233, 238, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 255, 256, 258, 260, 261, 265, 266, 267, 269, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 297, 298, 299, 300, 301, 306, 309, 313, 314, 317, 319, 320, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 342, 344, 345, 346, 347, 355, 365, 367, 373, 375, 379, 380, 384, 387, 389, 391, 393, 395, 396, 414, 417, 425, 431, 446, 464, 476, 477, 479, 487, 490, 494, 498, 499, 528, 532, 535, 537, 539, 540, 544, 545, 585, 597, 606, 607, 608, 632, 633, 647, 651, 672, 673, 675, 676, 677, 692, 700, 723, 755, 757, 760, 761, 762, 786, 792, 795, 797, 798, 809, 813, 829, 832, 848, 851, 870, 875, 878, 879, 884, 945, 946, 948, 949, 951, 952, 955, 956, 958, 966, 967, 968, 973, 982, 983, 985, 989, 995, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 57, 62, 66, 69, 81, 91, 95, 100, 101, 103, 105, 113, 114, 115, 141, 149, 154, 155, 156, 166, 167, 172, 175, 179, 180, 181, 183, 184, 185, 188, 193, 194, 196, 198, 209, 213, 218, 221, 226, 231, 250, 255, 257, 258, 259, 261, 262, 264, 278, 283, 286, 294, 299, 306, 309, 313, 314, 337, 339, 343, 366, 370, 377, 394, 396, 397, 507, 508, 509, 510, 511, 513, 514, 515, 518, 522, 541, 572, 628, 638, 659, 663, 664, 665, 666, 671, 673, 675, 737, 770, 783, 815, 823, 942, 948, 949, 952, 954, 955, 956, 959, 960, 962, 967, 968, 985, 1001], "hourli": 4, "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 53, 57, 58, 61, 71, 81, 84, 89, 98, 119, 120, 121, 151, 152, 153, 157, 179, 186, 192, 209, 225, 232, 241, 242, 243, 245, 246, 254, 255, 269, 279, 288, 294, 312, 324, 327, 328, 329, 330, 672, 983], "24": [4, 5, 15, 19, 65, 164, 167, 304, 305, 310, 312, 313, 340, 363, 368, 380, 381, 382, 389, 396, 397, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 437, 439, 444, 445, 446, 447, 448, 449, 450, 451, 463, 464, 465, 466, 470, 479, 490, 491, 492, 493, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 588, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 673, 675, 676, 682, 688, 700, 719, 726, 768, 769, 770, 773, 774, 783, 790, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 832, 834, 835, 836, 837, 840, 841, 843, 845, 846, 847, 848, 849, 851, 860, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 901, 902, 927, 933, 941, 959, 962, 970, 990, 992, 994, 1002, 1003, 1004, 1005, 1007], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 59, 60, 62, 63, 64, 77, 78, 80, 81, 110, 112, 113, 114, 116, 122, 128, 141, 145, 150, 166, 167, 172, 185, 186, 190, 194, 196, 197, 203, 204, 212, 214, 218, 220, 228, 229, 233, 240, 242, 245, 246, 250, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 273, 275, 279, 285, 288, 294, 297, 302, 305, 309, 313, 324, 337, 338, 343, 346, 353, 359, 360, 362, 365, 366, 370, 373, 377, 383, 389, 393, 396, 399, 416, 444, 446, 447, 448, 449, 450, 451, 453, 455, 465, 468, 469, 489, 502, 516, 528, 529, 534, 535, 538, 563, 564, 566, 604, 607, 613, 615, 623, 624, 644, 646, 651, 655, 667, 686, 704, 719, 761, 797, 803, 817, 819, 821, 822, 827, 841, 848, 849, 850, 855, 856, 859, 860, 863, 864, 906, 907, 920, 941, 948, 952, 956, 959, 966, 973, 976, 981, 982, 983, 985, 999, 1000, 1001, 1002, 1004, 1007], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 54, 55, 59, 63, 64, 66, 71, 73, 79, 81, 84, 98, 109, 110, 113, 122, 129, 130, 158, 166, 167, 169, 172, 177, 178, 180, 189, 195, 196, 197, 198, 210, 214, 217, 225, 230, 231, 236, 240, 241, 244, 245, 250, 255, 257, 259, 261, 262, 266, 268, 273, 277, 280, 281, 283, 293, 294, 297, 301, 302, 305, 308, 309, 312, 313, 315, 316, 321, 323, 328, 332, 333, 338, 339, 348, 360, 362, 363, 365, 368, 369, 370, 380, 381, 382, 393, 394, 396, 397, 398, 399, 415, 420, 423, 425, 426, 427, 428, 437, 446, 447, 465, 507, 508, 509, 510, 511, 513, 519, 536, 537, 563, 566, 575, 602, 603, 605, 622, 624, 633, 636, 667, 695, 696, 697, 699, 701, 717, 718, 719, 723, 724, 726, 758, 765, 768, 771, 772, 776, 779, 786, 787, 790, 794, 797, 801, 811, 812, 820, 829, 830, 843, 865, 866, 907, 910, 911, 918, 941, 942, 947, 948, 950, 952, 953, 955, 956, 958, 962, 966, 967, 970, 978, 982, 985, 990, 992, 995, 996, 997, 1000, 1001, 1002, 1003, 1007], "xticklabel": [4, 10, 119], "sun": [4, 1002, 1007, 1008], "mon": 4, "tue": [4, 1000], "wed": 4, "thu": [4, 5, 24, 25, 26, 27, 40, 59, 77, 81, 98, 100, 113, 115, 117, 119, 142, 149, 154, 155, 167, 184, 185, 196, 198, 214, 225, 231, 235, 242, 253, 255, 260, 261, 262, 305, 308, 342, 348, 352, 353, 360, 366, 370, 375, 377, 387, 389, 393, 394, 396, 397, 399, 400, 413, 415, 438, 490, 502, 528, 529, 530, 531, 532, 533, 538, 539, 540, 578, 581, 585, 597, 602, 607, 608, 618, 620, 623, 633, 644, 652, 655, 679, 692, 698, 761, 766, 772, 776, 778, 790, 802, 805, 840, 870, 943, 944, 945, 946, 947, 948, 949, 952, 953, 958, 959, 960, 962, 964, 965, 966, 967, 973, 975, 976, 994, 996, 1000, 1002, 1003, 1004, 1006], "fri": [4, 360], "sat": [4, 397], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 60, 71, 77, 78, 80, 81, 84, 85, 89, 94, 97, 103, 110, 111, 112, 114, 119, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 210, 214, 229, 231, 232, 250, 254, 255, 259, 260, 264, 268, 269, 270, 277, 278, 281, 282, 321, 323, 324, 327, 337, 343, 344, 345, 606], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 60, 71, 77, 78, 80, 81, 84, 85, 89, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 214, 229, 231, 232, 250, 254, 255, 258, 259, 260, 264, 268, 269, 270, 278, 321, 324, 327, 337, 343, 344, 345, 606], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 54, 56, 60, 61, 62, 66, 67, 69, 71, 72, 74, 81, 84, 85, 90, 91, 95, 97, 99, 100, 103, 109, 110, 111, 113, 117, 118, 120, 121, 122, 123, 125, 129, 131, 142, 143, 145, 146, 157, 158, 162, 164, 166, 167, 172, 185, 195, 196, 197, 198, 203, 204, 210, 211, 212, 213, 214, 217, 225, 229, 232, 235, 240, 241, 243, 245, 246, 249, 250, 253, 254, 255, 256, 257, 260, 261, 262, 263, 275, 277, 281, 282, 297, 299, 300, 305, 306, 307, 308, 309, 316, 324, 328, 329, 332, 338, 339, 342, 346, 348, 353, 354, 359, 360, 361, 362, 363, 365, 367, 368, 370, 371, 372, 373, 375, 376, 377, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 556, 557, 558, 559, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 681, 686, 687, 688, 690, 692, 694, 697, 701, 702, 703, 704, 707, 708, 711, 713, 725, 728, 747, 751, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 890, 891, 894, 906, 907, 910, 911, 920, 921, 923, 926, 927, 942, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 966, 967, 968, 969, 972, 973, 975, 978, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "rental": 4, "runner": [4, 8, 19, 34, 37, 43, 44, 45, 48, 50, 56, 59, 84, 89, 95, 96, 101, 102, 112, 119, 121, 123, 124, 129, 153, 155, 157, 158, 166, 180, 188, 193, 195, 196, 204, 205, 214, 240, 241, 242, 245, 246, 256, 266, 306, 309, 329, 343], "scikit": [4, 6, 8, 10, 12, 16, 17, 19, 31, 32, 34, 37, 43, 44, 45, 48, 50, 56, 59, 69, 84, 89, 95, 96, 101, 102, 112, 115, 119, 121, 123, 124, 129, 143, 146, 153, 155, 157, 158, 162, 164, 166, 180, 184, 185, 188, 193, 195, 196, 204, 205, 214, 224, 237, 240, 241, 242, 245, 246, 248, 252, 266, 271, 275, 280, 282, 304, 310, 329, 337, 338, 342, 343, 348, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 367, 370, 371, 372, 373, 376, 377, 382, 383, 385, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 414, 419, 422, 425, 432, 434, 439, 440, 442, 443, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 487, 490, 499, 513, 536, 537, 539, 540, 542, 556, 557, 560, 561, 574, 577, 586, 601, 603, 605, 609, 615, 621, 623, 627, 633, 644, 655, 663, 675, 691, 721, 751, 752, 753, 761, 770, 771, 772, 773, 774, 775, 783, 786, 787, 788, 789, 790, 797, 799, 800, 813, 815, 832, 838, 841, 844, 846, 850, 851, 854, 867, 868, 870, 875, 879, 901, 902, 941, 942, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 962, 965, 966, 967, 968, 971, 975, 981, 982, 983, 985, 986, 989, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 19, 25, 26, 27, 31, 32, 34, 36, 37, 43, 44, 45, 48, 55, 56, 59, 66, 67, 69, 74, 80, 81, 84, 89, 93, 96, 100, 101, 102, 105, 107, 109, 112, 113, 114, 115, 117, 118, 119, 121, 123, 124, 126, 127, 128, 129, 135, 136, 137, 138, 143, 146, 149, 152, 153, 154, 155, 157, 158, 161, 162, 167, 168, 171, 173, 180, 182, 184, 185, 188, 193, 195, 196, 204, 205, 210, 214, 221, 223, 224, 225, 230, 232, 237, 240, 241, 242, 245, 246, 248, 252, 254, 255, 258, 260, 261, 263, 264, 266, 269, 271, 275, 279, 280, 281, 282, 283, 288, 290, 293, 294, 295, 297, 298, 302, 304, 310, 311, 315, 317, 318, 323, 329, 330, 332, 337, 338, 339, 342, 343, 344, 345, 348, 353, 355, 357, 358, 359, 360, 362, 364, 367, 370, 371, 372, 373, 376, 377, 379, 383, 384, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 418, 419, 422, 424, 425, 432, 434, 439, 440, 442, 443, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 485, 487, 489, 490, 491, 492, 493, 495, 497, 499, 500, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 546, 556, 557, 559, 560, 561, 562, 563, 565, 566, 568, 569, 574, 577, 578, 585, 586, 589, 594, 597, 601, 603, 605, 609, 615, 616, 618, 619, 620, 621, 623, 627, 633, 643, 644, 651, 652, 653, 655, 663, 664, 665, 666, 667, 671, 675, 682, 687, 691, 692, 695, 696, 697, 699, 708, 714, 716, 721, 729, 751, 752, 753, 761, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 813, 815, 820, 827, 828, 829, 830, 832, 838, 841, 843, 844, 846, 849, 850, 851, 854, 862, 863, 865, 866, 867, 868, 870, 871, 872, 875, 878, 879, 880, 881, 893, 901, 902, 941, 942, 944, 945, 946, 948, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 963, 966, 967, 968, 969, 971, 975, 980, 982, 983, 989, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 353, 363, 365, 368, 370, 372, 377, 380, 397, 400, 416, 420, 429, 436, 440, 472, 505, 619, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 795, 840, 841, 843, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 902, 952, 972, 985, 987, 994, 996, 1000, 1004, 1008], "40": [4, 14, 54, 65, 77, 89, 95, 101, 131, 149, 187, 188, 190, 213, 214, 219, 221, 232, 244, 256, 281, 287, 293, 299, 312, 313, 322, 323, 325, 327, 329, 331, 346, 353, 360, 393, 469, 492, 493, 811, 812, 816, 828, 829, 941, 953, 962, 994, 995], "futurewarn": [4, 19, 43, 44, 45, 48, 50, 56, 59, 84, 95, 96, 119, 121, 123, 124, 129, 166, 196, 256, 266, 306, 309, 365, 372, 1001, 1002, 1003, 1005, 1007], "default": [4, 14, 19, 25, 27, 30, 42, 43, 44, 45, 46, 48, 50, 56, 58, 59, 95, 96, 119, 142, 149, 161, 167, 175, 176, 185, 196, 197, 214, 227, 229, 236, 243, 250, 257, 258, 273, 282, 297, 301, 305, 306, 309, 333, 337, 338, 339, 342, 348, 352, 353, 359, 360, 363, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 380, 387, 389, 390, 393, 394, 396, 397, 398, 400, 401, 402, 403, 405, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 681, 682, 683, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 894, 896, 897, 899, 901, 906, 907, 908, 909, 910, 911, 912, 917, 919, 920, 921, 922, 923, 925, 926, 927, 933, 936, 938, 939, 941, 942, 944, 946, 948, 951, 952, 953, 955, 956, 958, 959, 962, 964, 966, 967, 978, 982, 985, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 43, 44, 45, 46, 48, 50, 53, 56, 59, 60, 61, 65, 70, 72, 74, 77, 79, 81, 95, 98, 106, 112, 114, 115, 116, 117, 119, 122, 123, 125, 126, 128, 129, 141, 142, 146, 149, 152, 153, 155, 157, 158, 163, 166, 167, 168, 169, 172, 175, 176, 178, 182, 184, 185, 186, 187, 189, 194, 196, 197, 198, 200, 202, 211, 214, 216, 220, 223, 225, 226, 227, 228, 229, 230, 231, 234, 237, 240, 246, 249, 253, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 270, 288, 291, 292, 294, 297, 298, 299, 300, 301, 306, 307, 309, 315, 324, 329, 332, 337, 338, 339, 342, 346, 348, 352, 353, 354, 355, 357, 358, 359, 360, 362, 366, 367, 369, 370, 371, 373, 375, 376, 377, 379, 380, 386, 387, 388, 389, 390, 391, 392, 393, 397, 398, 399, 400, 401, 403, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 461, 464, 465, 467, 470, 471, 472, 474, 476, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 742, 744, 747, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 778, 780, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 889, 890, 891, 894, 895, 896, 897, 899, 907, 909, 914, 916, 917, 918, 920, 928, 929, 930, 941, 944, 945, 946, 947, 948, 949, 951, 953, 954, 955, 956, 957, 958, 959, 963, 965, 966, 967, 968, 976, 978, 983, 985, 986, 987, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "numeric_onli": 4, "dataframegroupbi": 4, "deprec": [4, 16, 34, 37, 45, 89, 95, 101, 102, 121, 123, 124, 129, 166, 180, 193, 195, 204, 240, 241, 242, 245, 246, 256, 308, 355, 367, 368, 373, 377, 401, 413, 415, 417, 421, 422, 434, 447, 474, 508, 511, 512, 514, 516, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 544, 545, 553, 555, 557, 577, 602, 605, 607, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 644, 646, 647, 648, 649, 650, 651, 655, 667, 674, 729, 773, 774, 806, 807, 808, 810, 818, 830, 836, 844, 872, 873, 874, 875, 876, 878, 879, 880, 881, 886, 901, 902, 904, 907, 915, 941, 942, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "futur": [4, 84, 129, 154, 157, 166, 197, 237, 256, 266, 308, 365, 366, 368, 375, 377, 378, 383, 393, 397, 470, 509, 605, 610, 920, 922, 952, 953, 967, 968, 976, 991, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 63, 66, 69, 70, 71, 72, 78, 80, 91, 99, 101, 104, 105, 109, 116, 119, 122, 123, 129, 132, 135, 149, 154, 155, 156, 157, 166, 168, 169, 175, 176, 182, 184, 185, 195, 196, 197, 201, 202, 204, 212, 214, 220, 232, 234, 240, 252, 253, 255, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 275, 279, 285, 288, 292, 293, 297, 298, 305, 307, 308, 309, 314, 324, 326, 332, 333, 337, 338, 359, 365, 366, 369, 377, 387, 389, 390, 391, 393, 394, 396, 397, 398, 399, 401, 402, 410, 411, 412, 413, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 434, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 490, 498, 499, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 672, 673, 674, 676, 677, 682, 683, 685, 686, 687, 688, 689, 692, 699, 700, 701, 702, 703, 704, 711, 715, 716, 723, 724, 727, 729, 734, 736, 740, 741, 742, 747, 751, 755, 756, 757, 758, 760, 762, 765, 767, 768, 769, 770, 773, 774, 775, 780, 783, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 882, 883, 884, 888, 889, 890, 891, 901, 908, 914, 916, 919, 922, 923, 926, 933, 938, 939, 941, 942, 948, 952, 955, 962, 966, 967, 986, 987, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "either": [4, 10, 30, 70, 118, 119, 166, 184, 186, 226, 250, 259, 280, 337, 346, 352, 357, 360, 363, 365, 366, 370, 377, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 418, 422, 427, 461, 470, 487, 499, 508, 509, 511, 519, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 557, 558, 559, 563, 564, 565, 566, 568, 569, 572, 577, 582, 583, 585, 586, 597, 602, 605, 607, 608, 625, 629, 631, 639, 651, 653, 657, 658, 665, 672, 673, 676, 680, 681, 685, 686, 694, 697, 699, 700, 701, 708, 712, 713, 715, 725, 729, 742, 747, 751, 755, 758, 761, 762, 765, 770, 773, 774, 783, 791, 792, 793, 794, 795, 796, 798, 801, 860, 861, 867, 870, 871, 878, 879, 880, 881, 885, 914, 941, 948, 952, 953, 954, 955, 956, 957, 960, 962, 966, 967, 978, 986, 987, 994, 997, 1003, 1004, 1005, 1008], "specifi": [4, 95, 120, 150, 153, 155, 156, 157, 158, 185, 197, 204, 240, 257, 263, 352, 359, 363, 365, 366, 373, 376, 377, 389, 390, 393, 394, 396, 398, 399, 401, 403, 413, 417, 421, 425, 427, 438, 439, 442, 444, 445, 447, 448, 449, 450, 451, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 490, 506, 508, 512, 516, 521, 527, 532, 534, 535, 536, 537, 539, 542, 543, 558, 559, 568, 569, 572, 577, 585, 586, 595, 606, 607, 608, 613, 618, 621, 622, 623, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 638, 640, 643, 644, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 662, 666, 673, 674, 675, 676, 683, 685, 702, 703, 711, 727, 744, 752, 753, 756, 757, 760, 770, 772, 773, 774, 776, 778, 782, 783, 786, 791, 792, 793, 794, 795, 796, 798, 802, 805, 806, 807, 809, 810, 811, 812, 816, 844, 846, 849, 850, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 902, 936, 942, 948, 949, 951, 952, 955, 959, 960, 962, 965, 966, 967, 982, 986, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009], "select": [4, 7, 9, 36, 44, 61, 67, 68, 70, 73, 75, 81, 91, 93, 107, 112, 117, 119, 122, 125, 129, 136, 143, 145, 147, 154, 156, 166, 169, 172, 174, 176, 204, 211, 214, 215, 218, 225, 229, 231, 239, 240, 247, 253, 254, 255, 256, 257, 260, 279, 297, 307, 312, 313, 316, 319, 324, 332, 335, 337, 338, 339, 348, 352, 353, 355, 360, 362, 363, 365, 366, 368, 372, 376, 377, 386, 389, 390, 391, 394, 396, 397, 399, 419, 421, 422, 424, 426, 428, 433, 434, 435, 439, 441, 442, 447, 448, 451, 462, 463, 466, 467, 470, 471, 476, 477, 479, 487, 490, 507, 509, 510, 515, 516, 519, 524, 526, 533, 534, 535, 538, 540, 556, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 602, 606, 607, 620, 621, 622, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 646, 648, 651, 653, 657, 658, 666, 667, 672, 686, 690, 692, 727, 763, 764, 768, 769, 770, 773, 774, 775, 783, 793, 794, 795, 797, 799, 813, 814, 815, 817, 819, 821, 822, 823, 831, 832, 836, 841, 847, 851, 867, 870, 871, 875, 878, 879, 880, 881, 886, 921, 922, 946, 947, 949, 952, 953, 955, 956, 958, 962, 965, 966, 967, 968, 969, 972, 973, 974, 976, 978, 979, 981, 985, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 34, 37, 39, 40, 45, 57, 65, 69, 70, 71, 73, 74, 80, 89, 98, 99, 106, 110, 112, 116, 117, 118, 119, 121, 128, 129, 141, 142, 143, 146, 149, 151, 154, 156, 158, 162, 164, 166, 167, 172, 174, 179, 185, 192, 196, 197, 202, 204, 205, 214, 215, 217, 218, 225, 227, 229, 231, 235, 240, 241, 242, 245, 246, 252, 253, 255, 258, 261, 262, 263, 266, 267, 275, 278, 281, 283, 286, 288, 293, 297, 298, 307, 308, 312, 313, 315, 320, 321, 324, 329, 332, 333, 337, 338, 339, 342, 343, 346, 348, 352, 353, 354, 358, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 383, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 463, 464, 465, 466, 468, 470, 471, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 491, 494, 498, 499, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 681, 683, 687, 699, 702, 703, 707, 709, 710, 711, 714, 715, 716, 729, 731, 733, 747, 751, 752, 753, 754, 756, 757, 760, 761, 763, 764, 765, 768, 769, 770, 772, 773, 774, 783, 787, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 888, 890, 891, 894, 896, 899, 907, 909, 912, 914, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 963, 964, 966, 967, 968, 972, 973, 976, 985, 986, 987, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009], "column": [4, 20, 21, 59, 68, 74, 75, 89, 116, 118, 122, 129, 146, 154, 161, 164, 166, 167, 168, 185, 196, 197, 204, 214, 233, 235, 255, 256, 257, 266, 267, 293, 307, 308, 309, 337, 338, 339, 352, 359, 360, 362, 365, 366, 370, 373, 375, 376, 377, 386, 389, 390, 392, 394, 396, 397, 398, 401, 404, 426, 428, 439, 441, 442, 446, 447, 453, 461, 462, 463, 464, 465, 466, 468, 470, 474, 475, 476, 477, 479, 480, 483, 484, 485, 486, 488, 490, 501, 506, 509, 512, 517, 519, 523, 530, 532, 533, 539, 540, 541, 542, 556, 557, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 602, 605, 607, 609, 621, 623, 627, 633, 635, 637, 639, 640, 644, 655, 660, 661, 672, 687, 692, 693, 702, 703, 711, 727, 736, 741, 742, 743, 746, 756, 757, 760, 761, 770, 773, 774, 783, 792, 797, 802, 805, 806, 807, 808, 809, 810, 811, 812, 831, 835, 836, 837, 838, 844, 845, 846, 850, 851, 852, 854, 870, 872, 875, 878, 880, 886, 890, 891, 896, 917, 928, 929, 931, 939, 941, 942, 948, 950, 952, 953, 960, 962, 967, 973, 994, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 113, 119, 122, 146, 161, 166, 172, 175, 176, 180, 195, 196, 198, 214, 225, 230, 231, 255, 258, 261, 262, 275, 298, 299, 314, 324, 332, 338, 348, 352, 353, 354, 360, 363, 364, 365, 366, 368, 369, 371, 372, 373, 376, 377, 380, 383, 387, 389, 391, 393, 394, 396, 397, 398, 399, 400, 401, 403, 416, 418, 419, 420, 421, 422, 424, 425, 427, 429, 432, 433, 434, 437, 438, 439, 442, 449, 456, 457, 458, 459, 461, 470, 474, 478, 483, 484, 491, 496, 498, 499, 502, 507, 508, 511, 524, 532, 533, 536, 537, 538, 539, 540, 556, 557, 560, 561, 563, 564, 566, 568, 569, 572, 577, 582, 583, 595, 602, 603, 604, 606, 607, 608, 610, 613, 614, 615, 618, 620, 621, 622, 623, 624, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 659, 662, 664, 665, 666, 667, 668, 669, 670, 671, 683, 700, 701, 744, 747, 751, 752, 753, 754, 755, 758, 761, 762, 772, 777, 779, 786, 787, 788, 789, 793, 797, 799, 800, 811, 812, 813, 814, 815, 816, 817, 819, 821, 828, 829, 834, 835, 838, 839, 840, 842, 843, 844, 845, 853, 857, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 890, 894, 896, 899, 907, 914, 921, 923, 926, 927, 928, 929, 930, 931, 932, 933, 941, 942, 946, 947, 948, 949, 952, 953, 955, 957, 958, 959, 962, 965, 966, 967, 968, 973, 975, 976, 983, 987, 991, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 54, 58, 65, 69, 74, 93, 95, 98, 100, 107, 109, 115, 119, 121, 122, 123, 124, 125, 129, 142, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 174, 175, 178, 183, 194, 196, 197, 202, 204, 209, 210, 212, 214, 215, 217, 226, 228, 231, 235, 237, 253, 255, 256, 257, 258, 263, 264, 269, 291, 297, 305, 306, 308, 309, 317, 321, 322, 323, 324, 325, 326, 330, 332, 334, 337, 338, 343, 348, 352, 353, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 375, 376, 377, 380, 383, 387, 389, 390, 391, 392, 394, 395, 397, 398, 400, 401, 413, 416, 419, 420, 421, 422, 423, 425, 427, 429, 432, 433, 434, 435, 436, 439, 440, 444, 446, 447, 449, 453, 462, 463, 465, 466, 469, 471, 474, 478, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 547, 550, 556, 557, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 582, 583, 584, 585, 586, 590, 592, 594, 595, 597, 598, 602, 603, 606, 607, 608, 609, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 680, 685, 686, 690, 693, 695, 696, 697, 701, 705, 707, 708, 711, 713, 714, 715, 723, 728, 730, 734, 735, 736, 738, 741, 744, 747, 751, 752, 753, 754, 755, 756, 758, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 780, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 840, 841, 843, 847, 848, 849, 850, 851, 854, 856, 859, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 888, 897, 899, 900, 901, 906, 907, 920, 922, 923, 926, 927, 936, 941, 942, 943, 945, 947, 949, 950, 953, 955, 956, 957, 958, 959, 960, 962, 965, 966, 968, 972, 973, 974, 978, 981, 982, 983, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 68, 73, 75, 85, 89, 99, 102, 104, 109, 111, 117, 118, 119, 122, 123, 126, 128, 129, 130, 132, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 175, 179, 189, 192, 196, 198, 201, 204, 205, 218, 226, 228, 229, 230, 231, 233, 234, 235, 242, 249, 253, 256, 257, 258, 260, 261, 264, 265, 275, 278, 283, 286, 287, 292, 297, 302, 306, 307, 309, 312, 313, 316, 317, 320, 321, 324, 328, 330, 331, 337, 338, 343, 344, 345, 346, 348, 352, 354, 355, 357, 358, 359, 360, 361, 362, 366, 368, 369, 372, 373, 376, 379, 389, 393, 396, 399, 409, 413, 414, 415, 418, 421, 439, 440, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 483, 485, 495, 499, 506, 507, 509, 511, 512, 514, 517, 518, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 548, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 672, 673, 675, 676, 681, 682, 683, 686, 687, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 708, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 755, 756, 757, 758, 760, 761, 762, 765, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 818, 820, 821, 822, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 854, 859, 862, 863, 865, 866, 867, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 890, 916, 917, 918, 943, 944, 945, 948, 949, 952, 956, 959, 960, 966, 967, 968, 973, 975, 976, 978, 983, 985, 987, 989, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "absolut": [4, 74, 99, 119, 146, 166, 196, 198, 202, 214, 257, 366, 389, 391, 393, 394, 396, 397, 398, 399, 400, 420, 425, 431, 432, 506, 512, 517, 520, 521, 523, 524, 525, 533, 535, 536, 537, 540, 563, 565, 566, 568, 572, 577, 594, 602, 607, 621, 624, 625, 627, 629, 631, 646, 651, 653, 657, 658, 674, 678, 691, 695, 709, 710, 718, 719, 721, 726, 728, 730, 741, 766, 772, 786, 789, 795, 797, 809, 811, 812, 816, 835, 840, 843, 855, 879, 881, 938, 948, 949, 962, 966, 968, 985, 986, 995, 1000, 1005, 1006, 1007, 1008], "basi": [4, 6, 13, 100, 149, 154, 156, 197, 293, 308, 324, 357, 363, 389, 394, 396, 427, 509, 597, 607, 614, 666, 850, 950, 962, 967, 974, 982, 983, 986, 989, 1002, 1004, 1007], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 53, 57, 61, 66, 71, 76, 81, 82, 89, 95, 98, 106, 110, 112, 118, 127, 129, 135, 137, 138, 141, 142, 151, 153, 154, 162, 164, 166, 178, 183, 184, 185, 189, 191, 198, 199, 202, 210, 212, 214, 220, 229, 232, 245, 251, 253, 254, 255, 266, 268, 273, 275, 277, 281, 282, 288, 291, 293, 297, 299, 300, 308, 315, 317, 323, 330, 333, 352, 389, 391, 394, 444, 445, 446, 447, 448, 449, 450, 451, 452, 487, 511, 530, 531, 532, 533, 534, 535, 538, 539, 540, 581, 602, 606, 607, 623, 624, 644, 655, 666, 667, 671, 674, 678, 679, 714, 730, 762, 763, 764, 770, 828, 829, 840, 841, 843, 850, 856, 857, 878, 879, 880, 881, 920, 948, 950, 955, 962, 966, 967, 985, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "977": [4, 393], "rescal": [4, 46, 47, 100, 177, 184, 220, 297, 302, 334, 391, 401, 444, 445, 446, 447, 448, 449, 450, 451, 508, 513, 621, 624, 627, 843, 849, 872, 873, 874, 875, 876, 952, 962, 986, 998, 999], "variabl": [4, 9, 11, 12, 16, 37, 69, 113, 116, 122, 123, 137, 138, 141, 146, 156, 157, 161, 162, 167, 168, 172, 185, 196, 200, 201, 214, 219, 246, 255, 258, 348, 352, 354, 360, 362, 363, 365, 366, 368, 369, 372, 377, 389, 390, 391, 392, 394, 396, 397, 398, 425, 456, 457, 458, 461, 473, 474, 476, 483, 490, 507, 509, 511, 516, 519, 528, 534, 535, 579, 581, 582, 583, 615, 625, 626, 629, 630, 636, 657, 658, 670, 683, 720, 771, 772, 775, 776, 777, 778, 779, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 799, 803, 804, 834, 848, 859, 871, 941, 942, 944, 948, 951, 952, 953, 954, 955, 957, 959, 960, 962, 966, 968, 972, 973, 975, 978, 979, 981, 983, 994, 999, 1002, 1004, 1007], "rel": [4, 6, 8, 17, 27, 60, 100, 116, 154, 172, 176, 196, 214, 243, 257, 281, 282, 298, 306, 309, 324, 337, 338, 360, 364, 366, 372, 377, 387, 389, 393, 396, 397, 399, 416, 419, 422, 424, 434, 496, 499, 506, 509, 512, 516, 532, 533, 534, 535, 539, 540, 541, 579, 624, 633, 634, 646, 665, 669, 702, 720, 770, 773, 774, 783, 795, 798, 811, 812, 816, 828, 829, 840, 841, 851, 866, 870, 871, 872, 875, 877, 878, 879, 880, 881, 948, 949, 952, 954, 955, 956, 958, 975, 983], "so": [4, 9, 12, 16, 17, 42, 48, 55, 60, 64, 80, 118, 121, 128, 149, 154, 166, 167, 168, 172, 176, 196, 197, 225, 255, 257, 281, 282, 285, 292, 293, 298, 306, 315, 324, 337, 339, 346, 348, 352, 353, 354, 359, 360, 364, 365, 366, 368, 369, 370, 372, 373, 377, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 470, 483, 484, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 670, 679, 682, 690, 699, 714, 729, 761, 768, 769, 770, 773, 774, 776, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 860, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 907, 927, 941, 942, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 962, 964, 965, 966, 967, 973, 976, 985, 986, 987, 994, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "error": [4, 5, 7, 13, 17, 27, 74, 77, 78, 80, 99, 105, 108, 109, 110, 113, 116, 119, 123, 133, 149, 161, 164, 166, 185, 192, 196, 198, 200, 202, 203, 210, 214, 228, 231, 246, 248, 251, 255, 256, 260, 269, 271, 281, 282, 309, 323, 332, 337, 338, 362, 363, 365, 366, 367, 368, 369, 373, 375, 377, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 419, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 470, 478, 490, 499, 506, 512, 517, 518, 520, 523, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 542, 550, 567, 570, 571, 573, 574, 575, 581, 604, 607, 618, 621, 622, 623, 626, 628, 630, 636, 638, 640, 644, 646, 648, 650, 652, 653, 655, 660, 663, 664, 667, 668, 671, 673, 676, 683, 686, 694, 695, 696, 700, 713, 716, 717, 718, 719, 720, 721, 723, 724, 726, 729, 737, 751, 755, 761, 762, 770, 773, 774, 783, 793, 794, 795, 797, 798, 801, 806, 807, 808, 810, 811, 812, 818, 819, 821, 822, 823, 826, 829, 832, 844, 845, 850, 851, 868, 870, 872, 873, 874, 879, 881, 888, 889, 890, 891, 894, 917, 936, 939, 941, 942, 943, 945, 946, 947, 949, 953, 956, 960, 962, 966, 967, 968, 974, 985, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "easili": [4, 9, 31, 143, 169, 212, 230, 235, 255, 280, 299, 365, 366, 377, 378, 390, 396, 397, 399, 424, 946, 948, 949, 962, 966, 967, 968, 979, 982, 987, 1000], "interpret": [4, 27, 146, 156, 164, 165, 167, 170, 196, 197, 212, 249, 255, 257, 258, 294, 298, 301, 307, 337, 339, 352, 363, 365, 370, 372, 373, 377, 379, 387, 389, 390, 395, 397, 427, 439, 440, 442, 470, 516, 547, 586, 614, 618, 628, 647, 648, 666, 667, 670, 702, 726, 731, 732, 756, 763, 764, 784, 794, 795, 797, 800, 832, 844, 851, 920, 946, 948, 952, 953, 959, 962, 968, 972, 978, 986, 994, 995, 999, 1002, 1007, 1009], "fraction": [4, 25, 27, 120, 122, 196, 204, 214, 257, 332, 338, 387, 393, 396, 414, 415, 424, 425, 431, 432, 490, 502, 532, 533, 534, 535, 539, 540, 541, 565, 568, 577, 641, 642, 643, 646, 651, 652, 653, 677, 695, 696, 697, 707, 765, 767, 772, 795, 796, 810, 838, 872, 873, 874, 878, 879, 880, 881, 948, 952, 955, 959, 960, 962, 967, 968, 973, 995, 996, 997, 1008], "maximum": [4, 8, 11, 27, 33, 37, 77, 78, 79, 80, 81, 97, 115, 118, 120, 125, 150, 156, 164, 174, 184, 215, 257, 265, 277, 281, 282, 288, 297, 319, 335, 338, 342, 344, 345, 352, 369, 370, 376, 377, 386, 387, 389, 391, 392, 394, 396, 397, 399, 400, 401, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 432, 434, 436, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 472, 484, 486, 487, 488, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 558, 559, 572, 585, 602, 606, 607, 610, 612, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 651, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 690, 717, 754, 768, 770, 773, 774, 783, 790, 795, 820, 827, 828, 829, 835, 836, 840, 841, 843, 846, 847, 848, 850, 858, 859, 864, 865, 866, 867, 870, 871, 875, 878, 879, 880, 881, 882, 884, 887, 894, 941, 947, 948, 949, 951, 952, 954, 955, 956, 958, 962, 966, 967, 968, 986, 1001, 1002, 1004, 1005, 1008, 1009], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 169, 172, 174, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 220, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 337, 338, 342, 343, 344, 345, 346, 352, 354, 355, 357, 360, 362, 365, 367, 369, 370, 373, 375, 377, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 476, 484, 485, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 669, 672, 673, 675, 676, 685, 696, 708, 723, 761, 768, 769, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 899, 936, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 976, 982, 983, 984, 985, 986, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 50, 54, 55, 57, 60, 64, 67, 68, 75, 78, 79, 83, 86, 95, 98, 100, 104, 105, 106, 115, 116, 117, 123, 129, 141, 146, 161, 167, 172, 183, 185, 197, 204, 213, 216, 218, 223, 225, 231, 239, 247, 257, 262, 275, 281, 282, 284, 297, 301, 305, 307, 308, 337, 338, 339, 346, 348, 352, 354, 355, 357, 362, 363, 365, 366, 370, 371, 373, 375, 376, 379, 383, 385, 386, 387, 390, 391, 392, 393, 394, 395, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 434, 437, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 479, 487, 489, 497, 500, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 684, 685, 704, 705, 708, 709, 714, 715, 736, 741, 742, 747, 751, 756, 761, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 858, 859, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 893, 907, 914, 915, 921, 936, 937, 940, 941, 942, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 960, 962, 964, 965, 966, 967, 968, 969, 972, 974, 976, 978, 982, 984, 985, 987, 988, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "minim": [4, 12, 65, 77, 78, 122, 149, 157, 175, 192, 194, 196, 198, 204, 214, 217, 228, 229, 240, 256, 264, 265, 297, 305, 308, 321, 332, 342, 355, 364, 365, 367, 372, 375, 377, 387, 389, 391, 394, 396, 416, 417, 421, 425, 438, 513, 515, 522, 532, 533, 534, 535, 539, 540, 584, 585, 586, 616, 621, 624, 632, 633, 642, 646, 647, 649, 653, 654, 662, 667, 669, 670, 721, 753, 818, 820, 829, 847, 858, 864, 878, 879, 880, 881, 943, 948, 949, 952, 955, 956, 962, 964, 965, 966, 967, 972, 974, 985, 986, 989, 998, 1003, 1004], "squar": [4, 5, 60, 78, 79, 80, 83, 86, 96, 106, 113, 123, 146, 149, 154, 164, 166, 174, 175, 177, 185, 192, 196, 198, 200, 201, 206, 213, 214, 215, 228, 229, 231, 243, 269, 301, 307, 308, 321, 337, 357, 362, 365, 370, 373, 377, 387, 389, 391, 392, 394, 395, 396, 400, 401, 408, 416, 418, 419, 420, 422, 424, 425, 432, 434, 435, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 476, 506, 512, 514, 516, 518, 522, 524, 527, 529, 531, 533, 534, 535, 537, 540, 543, 545, 565, 566, 567, 570, 571, 573, 574, 575, 579, 580, 581, 584, 586, 590, 597, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 657, 658, 661, 662, 663, 665, 667, 669, 671, 674, 683, 695, 696, 697, 723, 724, 731, 732, 736, 742, 743, 758, 797, 804, 805, 813, 814, 817, 819, 821, 822, 829, 832, 851, 870, 871, 873, 875, 876, 877, 879, 881, 925, 938, 943, 945, 946, 955, 956, 960, 966, 968, 974, 985, 986, 989, 994, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 57, 60, 62, 70, 71, 73, 82, 84, 85, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 118, 120, 122, 126, 129, 130, 131, 132, 133, 135, 136, 144, 145, 146, 148, 149, 154, 156, 159, 160, 161, 163, 166, 167, 174, 177, 180, 184, 185, 191, 196, 198, 200, 201, 203, 204, 213, 214, 215, 224, 225, 226, 231, 236, 238, 239, 240, 242, 243, 247, 248, 249, 253, 255, 256, 257, 258, 259, 260, 262, 266, 267, 268, 271, 276, 282, 289, 297, 299, 308, 309, 327, 332, 338, 339, 343, 352, 353, 354, 355, 357, 363, 365, 367, 368, 371, 372, 373, 374, 380, 383, 384, 387, 389, 392, 394, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 466, 469, 470, 472, 476, 477, 499, 502, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 659, 662, 663, 664, 665, 666, 667, 672, 673, 675, 676, 681, 682, 685, 686, 687, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 755, 756, 757, 758, 760, 761, 762, 765, 768, 769, 770, 773, 774, 775, 780, 781, 783, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 889, 890, 891, 893, 895, 896, 899, 901, 902, 903, 915, 936, 940, 947, 949, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 973, 974, 976, 978, 979, 981, 983, 985, 986, 987, 988, 989, 991, 994, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009], "condit": [4, 12, 25, 27, 81, 117, 122, 164, 165, 166, 170, 185, 198, 201, 214, 258, 308, 346, 370, 375, 379, 386, 389, 391, 394, 396, 398, 426, 447, 448, 453, 464, 488, 498, 499, 511, 514, 515, 516, 518, 520, 522, 524, 525, 537, 602, 607, 608, 618, 625, 626, 627, 629, 630, 631, 645, 647, 648, 649, 650, 657, 658, 662, 672, 686, 691, 692, 709, 710, 766, 797, 806, 807, 808, 809, 810, 829, 832, 835, 848, 907, 946, 948, 949, 950, 952, 954, 955, 957, 962, 968, 972, 985, 989, 995, 997, 998, 999, 1001, 1002, 1004, 1006, 1008, 1009], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 57, 59, 60, 65, 67, 69, 70, 71, 72, 74, 77, 78, 79, 80, 88, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 132, 136, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 167, 168, 172, 174, 175, 176, 179, 180, 184, 191, 196, 197, 198, 201, 203, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 232, 240, 241, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 266, 268, 270, 273, 278, 281, 282, 283, 286, 288, 297, 302, 306, 307, 308, 313, 317, 320, 321, 323, 324, 326, 327, 332, 337, 338, 339, 342, 345, 346, 348, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 476, 478, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 550, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 585, 586, 587, 594, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 683, 685, 686, 692, 694, 695, 700, 702, 703, 707, 708, 710, 715, 716, 718, 719, 721, 723, 724, 726, 729, 731, 732, 736, 737, 739, 740, 741, 742, 743, 746, 748, 749, 750, 751, 754, 755, 756, 757, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 862, 863, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 885, 887, 888, 890, 891, 893, 894, 897, 901, 902, 903, 906, 907, 909, 911, 914, 915, 917, 918, 919, 920, 922, 923, 926, 927, 933, 936, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 976, 979, 981, 982, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "median": [4, 37, 70, 74, 79, 80, 122, 161, 162, 166, 167, 198, 202, 213, 227, 297, 306, 308, 309, 360, 362, 391, 396, 398, 416, 429, 433, 436, 449, 527, 529, 533, 540, 572, 602, 605, 610, 645, 646, 654, 695, 726, 818, 849, 860, 879, 881, 942, 959, 962, 968, 997, 998], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 57, 59, 60, 96, 113, 114, 122, 125, 132, 146, 149, 154, 164, 166, 172, 185, 190, 195, 196, 202, 248, 251, 253, 255, 261, 262, 264, 268, 271, 302, 337, 338, 352, 360, 362, 366, 370, 377, 386, 387, 388, 391, 393, 394, 395, 396, 397, 424, 427, 437, 472, 490, 513, 515, 522, 526, 532, 533, 534, 535, 538, 539, 540, 579, 582, 583, 586, 602, 633, 665, 667, 673, 674, 676, 678, 679, 681, 683, 686, 687, 690, 691, 694, 698, 699, 700, 702, 704, 709, 710, 712, 713, 716, 720, 728, 729, 730, 755, 756, 757, 759, 760, 762, 763, 766, 792, 794, 797, 817, 848, 859, 878, 879, 880, 881, 942, 948, 950, 955, 957, 958, 960, 966, 968, 982, 985, 994, 997, 999, 1000, 1002, 1004], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 69, 70, 84, 100, 109, 110, 113, 115, 116, 117, 120, 121, 122, 123, 124, 135, 138, 140, 142, 147, 149, 150, 164, 166, 167, 168, 169, 172, 180, 185, 191, 192, 196, 197, 198, 203, 204, 211, 212, 214, 221, 226, 231, 233, 242, 248, 249, 250, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 271, 273, 275, 283, 284, 291, 293, 299, 302, 316, 324, 332, 339, 348, 352, 353, 359, 360, 362, 367, 368, 369, 370, 375, 376, 377, 379, 380, 382, 384, 387, 390, 391, 394, 396, 397, 398, 399, 405, 407, 408, 411, 412, 413, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 462, 463, 467, 471, 472, 477, 479, 499, 506, 512, 514, 518, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 567, 569, 570, 571, 573, 574, 575, 577, 579, 580, 581, 583, 584, 585, 586, 602, 603, 605, 610, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 674, 686, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 818, 821, 822, 828, 829, 831, 855, 856, 858, 859, 860, 861, 865, 866, 868, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 899, 901, 902, 947, 951, 952, 955, 956, 960, 962, 966, 967, 968, 972, 973, 975, 976, 979, 982, 983, 989, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "discuss": [4, 57, 166, 185, 217, 222, 258, 337, 348, 354, 360, 362, 365, 369, 370, 372, 375, 377, 378, 389, 391, 395, 396, 399, 472, 657, 658, 813, 814, 819, 821, 822, 942, 946, 948, 949, 952, 955, 962, 969, 973, 997], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 59, 61, 65, 77, 101, 102, 118, 129, 135, 136, 146, 166, 169, 189, 232, 234, 250, 260, 267, 342, 348, 352, 353, 354, 355, 366, 369, 372, 377, 389, 391, 393, 396, 397, 399, 400, 419, 420, 422, 424, 434, 498, 507, 513, 534, 535, 557, 577, 633, 634, 647, 649, 654, 662, 663, 664, 668, 699, 729, 770, 773, 774, 783, 838, 878, 879, 880, 881, 942, 943, 947, 948, 949, 950, 951, 955, 962, 965, 966, 967, 979, 981, 985, 986, 996, 997, 1001, 1003, 1005], "focu": [4, 9, 27, 95, 149, 246, 285, 352, 369, 387, 396, 528, 529, 534, 536, 537, 653, 949, 955, 962, 972, 973], "intuit": [4, 31, 44, 52, 56, 61, 100, 113, 119, 141, 149, 166, 197, 198, 219, 225, 256, 280, 299, 302, 321, 324, 338, 365, 377, 387, 389, 391, 393, 395, 755, 756, 757, 760, 842, 944, 948, 949, 952, 953, 959, 962, 963, 967, 976, 985, 987, 994], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 71, 74, 79, 81, 85, 91, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 118, 119, 122, 146, 149, 155, 158, 161, 166, 167, 168, 172, 175, 182, 185, 196, 198, 202, 212, 213, 214, 221, 225, 231, 232, 241, 253, 255, 256, 258, 261, 273, 281, 282, 294, 297, 301, 302, 307, 309, 313, 337, 338, 339, 348, 352, 353, 354, 359, 360, 361, 364, 365, 366, 369, 370, 372, 377, 378, 383, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 429, 432, 438, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 467, 468, 470, 484, 489, 490, 498, 506, 509, 510, 511, 512, 513, 515, 516, 517, 519, 522, 523, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 548, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 602, 603, 605, 609, 615, 617, 618, 619, 620, 621, 622, 627, 628, 630, 633, 634, 635, 636, 637, 638, 641, 642, 643, 646, 647, 649, 651, 652, 653, 654, 657, 662, 667, 669, 671, 678, 679, 686, 694, 695, 696, 697, 708, 709, 712, 737, 752, 753, 754, 756, 758, 766, 768, 769, 770, 773, 774, 779, 783, 788, 790, 792, 793, 794, 795, 796, 799, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 825, 828, 829, 834, 844, 846, 848, 849, 851, 853, 859, 860, 864, 867, 870, 871, 872, 875, 876, 878, 879, 880, 881, 882, 896, 907, 909, 910, 917, 921, 923, 926, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 966, 967, 968, 972, 973, 978, 982, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "root": [4, 16, 79, 125, 146, 177, 346, 362, 365, 372, 389, 418, 476, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 614, 724, 878, 879, 880, 881, 882, 884, 958, 968, 996, 1002, 1003, 1004, 1005, 1008], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 57, 59, 63, 67, 69, 74, 81, 109, 110, 115, 123, 143, 150, 161, 164, 166, 168, 180, 185, 191, 192, 196, 198, 200, 202, 214, 220, 226, 229, 230, 234, 237, 248, 249, 252, 253, 255, 256, 258, 262, 264, 265, 271, 273, 275, 277, 285, 288, 294, 297, 302, 305, 306, 308, 309, 312, 313, 315, 316, 337, 338, 348, 352, 355, 357, 360, 365, 366, 375, 376, 377, 379, 384, 387, 394, 395, 396, 399, 400, 405, 413, 417, 420, 421, 425, 432, 444, 495, 510, 524, 525, 526, 528, 530, 532, 534, 536, 537, 539, 542, 544, 552, 577, 585, 595, 603, 609, 613, 614, 615, 616, 617, 618, 633, 634, 638, 641, 643, 649, 650, 651, 663, 665, 667, 669, 671, 770, 773, 774, 783, 792, 793, 794, 796, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 837, 843, 865, 866, 870, 872, 875, 878, 880, 942, 944, 947, 953, 958, 960, 972, 973, 982, 983, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001], "studi": [4, 59, 122, 196, 214, 258, 261, 262, 264, 337, 360, 362, 393, 398, 474, 671, 682, 731, 732, 796, 950, 952, 966, 978], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 55, 56, 59, 60, 61, 64, 65, 70, 71, 72, 73, 74, 80, 84, 85, 89, 90, 91, 94, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 217, 218, 219, 222, 226, 228, 229, 230, 231, 232, 234, 235, 237, 240, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 342, 343, 344, 345, 346, 348, 357, 358, 359, 360, 363, 365, 366, 369, 371, 373, 376, 377, 383, 387, 389, 390, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 472, 474, 475, 477, 480, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 674, 675, 676, 680, 685, 699, 708, 714, 715, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 758, 761, 762, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 890, 895, 896, 916, 917, 918, 923, 926, 939, 941, 942, 943, 944, 946, 947, 948, 950, 952, 953, 954, 955, 956, 957, 959, 962, 966, 967, 968, 973, 978, 982, 983, 985, 989, 991, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "hist": [4, 25, 27, 53, 74, 112, 196, 198, 229, 261, 280, 297, 301, 309], "bin": [4, 24, 25, 27, 53, 74, 112, 196, 214, 229, 261, 280, 297, 298, 299, 300, 301, 363, 372, 380, 387, 395, 396, 414, 415, 423, 436, 536, 537, 834, 836, 850, 909, 986, 1002, 1003, 1004, 1008], "30": [4, 8, 10, 14, 39, 40, 54, 59, 72, 77, 101, 103, 118, 122, 128, 135, 149, 150, 153, 155, 167, 172, 175, 190, 194, 196, 214, 217, 218, 222, 230, 233, 244, 255, 260, 269, 275, 284, 285, 301, 302, 312, 313, 317, 322, 325, 327, 330, 352, 360, 362, 369, 370, 393, 397, 400, 420, 425, 432, 475, 510, 513, 514, 516, 518, 545, 567, 570, 571, 573, 623, 667, 708, 756, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 866, 879, 941, 946, 952, 953, 955, 960, 983, 994, 995, 1001, 1002, 1003], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 56, 72, 95, 99, 109, 118, 122, 123, 155, 156, 157, 166, 167, 172, 175, 196, 199, 200, 204, 211, 214, 228, 229, 231, 250, 257, 279, 280, 293, 298, 299, 300, 301, 305, 308, 324, 330, 333, 339, 359, 362, 365, 367, 369, 373, 374, 375, 376, 377, 386, 387, 390, 393, 394, 395, 396, 397, 398, 399, 401, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 421, 423, 424, 425, 429, 432, 433, 436, 439, 440, 442, 443, 444, 447, 456, 457, 458, 463, 478, 484, 491, 492, 493, 495, 499, 503, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 586, 595, 597, 602, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 667, 668, 671, 672, 673, 674, 675, 676, 695, 696, 697, 701, 718, 719, 721, 723, 724, 726, 727, 734, 740, 741, 744, 745, 747, 751, 752, 753, 754, 758, 768, 769, 770, 773, 774, 783, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 817, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 887, 888, 889, 890, 891, 892, 896, 901, 906, 918, 925, 927, 933, 938, 939, 942, 944, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 964, 965, 966, 967, 968, 972, 973, 976, 978, 982, 983, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "annot": [4, 9, 26, 131, 172, 218, 259, 262, 337, 365, 366, 389, 690, 884, 952, 968, 1003], "log": [4, 20, 25, 26, 27, 77, 95, 122, 129, 142, 146, 150, 151, 153, 154, 155, 158, 181, 184, 185, 189, 196, 200, 201, 206, 214, 229, 231, 244, 285, 337, 360, 362, 363, 365, 368, 372, 373, 377, 386, 387, 389, 390, 391, 394, 396, 397, 399, 422, 423, 424, 426, 435, 440, 445, 446, 447, 448, 449, 450, 451, 507, 511, 516, 524, 525, 526, 528, 530, 532, 534, 537, 539, 565, 566, 568, 569, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 617, 620, 623, 633, 634, 644, 646, 651, 655, 714, 724, 728, 768, 769, 770, 773, 774, 783, 806, 807, 808, 809, 810, 811, 812, 816, 827, 828, 835, 836, 864, 867, 872, 875, 877, 878, 880, 905, 941, 944, 946, 948, 949, 954, 955, 957, 960, 962, 966, 968, 972, 973, 985, 996, 997, 998, 1003, 1004, 1005, 1008], "describ": [4, 55, 129, 166, 214, 230, 255, 348, 352, 353, 358, 360, 362, 364, 365, 366, 369, 372, 377, 378, 386, 389, 391, 392, 393, 394, 396, 397, 437, 444, 448, 449, 450, 465, 467, 469, 470, 471, 475, 476, 477, 478, 479, 480, 485, 491, 492, 493, 503, 582, 583, 620, 634, 688, 768, 769, 806, 808, 846, 907, 941, 944, 947, 948, 951, 952, 954, 958, 966, 967, 968, 975, 978, 984, 985, 1002, 1004], "weather": [4, 154, 399, 948, 952], "includ": [4, 32, 79, 119, 121, 166, 168, 196, 214, 256, 275, 292, 297, 308, 309, 324, 329, 337, 339, 348, 352, 353, 359, 361, 363, 365, 366, 368, 369, 370, 372, 373, 377, 378, 380, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 420, 425, 431, 441, 444, 445, 446, 447, 448, 449, 450, 451, 463, 464, 465, 470, 474, 475, 476, 477, 479, 480, 485, 509, 516, 532, 539, 549, 607, 613, 621, 622, 627, 635, 636, 637, 640, 656, 663, 664, 672, 687, 702, 703, 708, 710, 711, 744, 756, 757, 760, 766, 770, 772, 773, 774, 782, 783, 786, 789, 794, 797, 819, 821, 822, 823, 844, 845, 846, 850, 867, 878, 880, 882, 884, 890, 891, 894, 896, 899, 941, 948, 951, 952, 953, 955, 956, 962, 966, 967, 968, 972, 973, 975, 976, 985, 987, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 63, 70, 74, 77, 79, 84, 85, 100, 103, 109, 113, 116, 119, 128, 129, 132, 141, 142, 146, 149, 156, 158, 166, 167, 168, 175, 182, 184, 185, 196, 197, 198, 201, 202, 204, 214, 221, 231, 232, 240, 241, 242, 243, 244, 245, 255, 256, 257, 258, 262, 266, 270, 287, 297, 301, 305, 307, 314, 315, 321, 326, 337, 338, 339, 346, 348, 352, 353, 354, 358, 359, 360, 361, 363, 365, 366, 370, 371, 373, 375, 376, 377, 378, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 413, 422, 427, 434, 437, 443, 450, 456, 457, 458, 459, 462, 463, 470, 471, 475, 477, 480, 482, 483, 484, 509, 522, 526, 530, 531, 532, 538, 539, 540, 541, 542, 551, 563, 564, 566, 572, 582, 583, 602, 607, 608, 618, 632, 633, 634, 647, 649, 651, 653, 662, 674, 678, 686, 690, 704, 709, 730, 734, 740, 747, 751, 756, 761, 762, 766, 773, 774, 800, 828, 829, 843, 847, 858, 863, 868, 870, 871, 878, 880, 894, 908, 917, 927, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 965, 966, 967, 968, 972, 973, 975, 976, 982, 985, 986, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "numer": [4, 19, 65, 70, 74, 117, 119, 129, 146, 154, 157, 167, 168, 185, 196, 214, 236, 266, 285, 308, 339, 359, 360, 362, 367, 369, 370, 375, 376, 377, 389, 391, 396, 397, 398, 399, 401, 416, 419, 422, 434, 446, 447, 450, 453, 463, 464, 465, 470, 475, 476, 477, 479, 480, 485, 506, 508, 510, 515, 522, 556, 565, 586, 592, 595, 605, 607, 621, 627, 629, 647, 662, 665, 669, 688, 761, 765, 770, 773, 774, 783, 793, 794, 795, 798, 806, 807, 808, 809, 810, 828, 829, 834, 839, 844, 845, 882, 884, 890, 891, 906, 907, 941, 942, 948, 949, 953, 960, 962, 963, 968, 975, 976, 978, 987, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "categor": [4, 70, 108, 115, 129, 133, 164, 166, 168, 196, 236, 308, 354, 357, 359, 360, 362, 366, 369, 377, 390, 397, 441, 442, 463, 464, 470, 480, 536, 537, 556, 557, 582, 583, 683, 794, 806, 807, 808, 809, 810, 832, 834, 838, 839, 842, 844, 845, 865, 866, 942, 960, 968, 972, 973, 974, 975, 976, 987, 989, 994, 995, 998, 999, 1002, 1004, 1006], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 57, 65, 66, 69, 70, 85, 88, 89, 90, 102, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 166, 169, 172, 174, 175, 176, 197, 211, 213, 215, 235, 242, 243, 245, 250, 252, 255, 256, 260, 262, 281, 282, 285, 308, 327, 332, 337, 338, 339, 343, 346, 348, 352, 355, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 372, 375, 376, 377, 378, 383, 386, 393, 394, 396, 397, 398, 399, 427, 437, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 485, 490, 499, 503, 509, 510, 513, 514, 516, 518, 532, 536, 537, 539, 562, 564, 565, 567, 568, 569, 570, 571, 574, 575, 581, 582, 583, 584, 614, 615, 631, 633, 662, 666, 670, 672, 678, 679, 689, 699, 703, 716, 728, 729, 730, 759, 761, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 783, 787, 794, 806, 810, 811, 812, 816, 820, 832, 843, 848, 851, 855, 856, 858, 859, 860, 861, 866, 869, 872, 875, 878, 880, 882, 884, 942, 944, 949, 950, 951, 952, 953, 954, 955, 956, 958, 963, 966, 968, 973, 976, 984, 985, 986, 987, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "alreadi": [4, 6, 10, 16, 57, 100, 129, 146, 166, 226, 232, 237, 256, 262, 308, 365, 369, 370, 375, 377, 387, 391, 393, 395, 396, 401, 413, 473, 498, 508, 542, 543, 609, 621, 624, 639, 640, 641, 642, 643, 649, 651, 652, 653, 660, 661, 674, 741, 806, 826, 834, 840, 841, 843, 848, 853, 855, 856, 857, 859, 860, 861, 867, 870, 871, 893, 941, 958, 962, 963, 973, 978, 983, 987, 991, 995, 999, 1002, 1006, 1007, 1008], "expand": [4, 16, 49, 64, 227, 306, 348, 357, 396, 420, 425, 473, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 952, 995, 1002, 1003], "complementari": [4, 397], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 217, 218, 219, 222, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 352, 358, 359, 360, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 383, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 461, 467, 468, 469, 472, 474, 475, 476, 477, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 680, 684, 685, 698, 708, 715, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 761, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 894, 906, 907, 909, 914, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 941, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 962, 964, 965, 966, 967, 968, 973, 978, 982, 983, 985, 986, 987, 991, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "drop": [4, 5, 70, 74, 85, 154, 166, 167, 169, 196, 214, 307, 338, 372, 390, 394, 396, 439, 442, 542, 543, 544, 545, 670, 676, 762, 830, 844, 850, 948, 952, 960, 962, 972, 994, 995, 999, 1002, 1003, 1004, 1005, 1006, 1007], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 54, 60, 70, 71, 74, 81, 85, 90, 91, 94, 95, 96, 97, 98, 99, 105, 110, 112, 113, 116, 118, 125, 128, 132, 138, 142, 153, 154, 158, 161, 166, 167, 177, 181, 183, 185, 188, 189, 190, 196, 200, 201, 205, 208, 210, 211, 213, 214, 218, 219, 222, 225, 229, 230, 233, 234, 240, 242, 244, 252, 256, 257, 262, 264, 265, 270, 273, 275, 280, 281, 282, 285, 286, 287, 294, 297, 301, 302, 313, 315, 317, 320, 323, 324, 327, 328, 329, 330, 331, 332, 334, 337, 338, 343, 344, 345, 346, 366, 373, 377, 387, 389, 397, 401, 414, 421, 439, 442, 506, 508, 511, 512, 514, 516, 518, 525, 560, 587, 606, 607, 660, 661, 736, 752, 753, 754, 755, 799, 840, 841, 848, 849, 851, 853, 855, 856, 857, 859, 860, 861, 884, 886, 890, 891, 909, 927, 933, 942, 952, 959, 962, 967, 984, 986, 1002, 1004, 1006], "holidai": 4, "workingdai": 4, "temp": 4, "feel_temp": 4, "humid": 4, "windspe": 4, "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 352, 353, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 373, 375, 376, 377, 380, 381, 382, 383, 385, 386, 387, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 732, 733, 734, 736, 737, 739, 740, 741, 742, 744, 746, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 890, 891, 896, 901, 902, 904, 906, 907, 909, 910, 911, 912, 914, 916, 917, 919, 920, 921, 922, 923, 926, 927, 933, 941, 942, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 970, 973, 974, 978, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992], "spring": 4, "6": [4, 6, 9, 10, 11, 12, 16, 26, 31, 32, 33, 34, 37, 40, 44, 45, 46, 49, 50, 52, 55, 59, 60, 61, 62, 63, 64, 66, 70, 72, 73, 74, 77, 78, 79, 81, 89, 95, 97, 105, 111, 122, 123, 126, 128, 135, 138, 141, 146, 149, 152, 154, 156, 157, 161, 162, 166, 168, 172, 175, 176, 177, 180, 185, 189, 194, 195, 196, 197, 198, 200, 204, 210, 211, 214, 217, 218, 219, 221, 225, 226, 228, 229, 232, 235, 236, 240, 241, 242, 243, 245, 246, 249, 250, 254, 255, 256, 258, 260, 265, 266, 267, 270, 273, 277, 280, 288, 291, 293, 294, 297, 299, 301, 302, 305, 308, 309, 312, 313, 315, 316, 317, 324, 325, 327, 329, 334, 337, 338, 339, 345, 348, 359, 360, 362, 363, 369, 370, 376, 380, 381, 382, 387, 389, 390, 393, 394, 396, 397, 398, 399, 419, 423, 424, 425, 426, 427, 428, 437, 456, 457, 458, 459, 480, 505, 513, 515, 516, 522, 538, 544, 545, 568, 569, 586, 589, 590, 600, 602, 603, 605, 619, 620, 645, 664, 668, 695, 701, 711, 718, 719, 723, 724, 726, 742, 758, 761, 768, 769, 771, 772, 776, 778, 779, 781, 786, 787, 790, 797, 806, 807, 808, 810, 811, 812, 819, 821, 822, 823, 838, 839, 841, 846, 849, 850, 854, 885, 910, 912, 917, 941, 942, 946, 948, 949, 952, 962, 963, 966, 967, 970, 978, 982, 983, 985, 990, 992, 995, 996, 997, 1002, 1007], "clear": [4, 16, 59, 71, 166, 302, 360, 364, 365, 366, 375, 376, 377, 390, 395, 884, 885, 941, 946, 1005, 1006, 1007], "9": [4, 7, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 57, 61, 63, 73, 74, 81, 84, 90, 109, 118, 119, 120, 121, 122, 127, 129, 137, 138, 152, 156, 158, 162, 166, 167, 177, 178, 187, 196, 209, 210, 213, 214, 217, 220, 229, 230, 234, 240, 241, 242, 243, 249, 256, 258, 262, 273, 277, 279, 280, 283, 284, 285, 291, 292, 294, 297, 299, 300, 301, 312, 313, 315, 316, 317, 324, 328, 332, 334, 337, 338, 339, 348, 362, 363, 370, 376, 380, 381, 382, 387, 390, 391, 393, 396, 397, 415, 456, 457, 458, 459, 464, 495, 502, 509, 513, 514, 515, 522, 535, 542, 545, 558, 566, 582, 583, 602, 605, 609, 614, 622, 633, 636, 667, 683, 696, 699, 714, 721, 742, 768, 771, 773, 774, 787, 790, 797, 800, 808, 809, 813, 814, 819, 822, 828, 829, 837, 843, 846, 907, 911, 941, 948, 952, 956, 962, 966, 967, 970, 978, 982, 987, 992, 995, 996, 997, 999, 1008], "84": [4, 6, 45, 69, 143, 187, 214, 294, 299, 312, 348, 362, 396, 397, 761, 783, 947, 952, 962, 983], "14": [4, 8, 11, 38, 49, 59, 61, 62, 65, 73, 75, 80, 100, 141, 185, 187, 214, 219, 225, 230, 245, 254, 260, 261, 269, 273, 300, 301, 331, 334, 353, 360, 362, 376, 380, 389, 393, 472, 485, 528, 529, 560, 561, 610, 618, 667, 783, 787, 837, 945, 948, 952, 962, 967, 970, 978, 992, 994, 995, 997, 998, 1002, 1007], "395": 4, "81": [4, 6, 19, 50, 302, 312, 313, 362, 389, 474, 761, 770, 783, 952, 953, 955, 962], "0000": 4, "02": [4, 12, 15, 19, 35, 44, 50, 57, 61, 63, 67, 75, 81, 82, 84, 95, 98, 107, 112, 118, 147, 151, 156, 159, 166, 177, 214, 215, 225, 229, 232, 238, 245, 250, 256, 262, 271, 280, 291, 294, 295, 297, 299, 302, 317, 320, 338, 343, 359, 362, 369, 393, 417, 421, 572, 633, 651, 770, 783, 850, 865, 879, 948], "13": [4, 6, 8, 10, 11, 14, 15, 19, 44, 73, 100, 105, 118, 120, 121, 123, 161, 166, 172, 182, 205, 217, 223, 229, 238, 249, 256, 259, 261, 297, 301, 302, 324, 360, 362, 365, 370, 376, 393, 401, 474, 485, 488, 507, 508, 526, 527, 557, 610, 614, 707, 787, 815, 830, 837, 862, 863, 948, 952, 953, 958, 959, 962, 967, 970, 978, 992, 994, 996, 997, 1000, 1001, 1002, 1003, 1006], "635": [4, 591], "80": [4, 6, 11, 16, 27, 66, 80, 101, 129, 138, 143, 175, 180, 232, 294, 299, 312, 327, 328, 329, 337, 344, 348, 360, 362, 365, 387, 393, 398, 420, 485, 516, 687, 770, 783, 864, 883, 941, 947, 948, 952, 965, 968, 987], "75": [4, 7, 8, 10, 33, 44, 81, 113, 143, 156, 157, 162, 166, 172, 175, 178, 187, 203, 214, 242, 243, 255, 268, 280, 294, 297, 308, 334, 337, 348, 526, 633, 680, 686, 707, 712, 718, 726, 729, 765, 770, 849, 860, 867, 883, 952, 954, 962, 968, 971, 983, 996], "17374": 4, "19": [4, 5, 9, 15, 154, 166, 222, 295, 301, 313, 362, 368, 377, 389, 390, 397, 400, 420, 466, 491, 492, 493, 511, 515, 516, 522, 524, 525, 532, 533, 534, 535, 539, 540, 541, 557, 564, 623, 633, 634, 641, 642, 643, 646, 647, 649, 651, 653, 662, 666, 681, 754, 758, 770, 783, 794, 799, 800, 802, 803, 817, 818, 837, 848, 868, 872, 875, 878, 879, 880, 881, 941, 952, 962, 970, 990, 992, 994, 995, 996, 997, 999, 1002], "mistirow": [4, 19, 20, 21, 25, 27, 44, 59, 74, 89, 91, 118, 127, 130, 161, 196, 197, 198, 226, 229, 234, 235, 257, 299, 346, 352, 360, 366, 373, 376, 377, 386, 389, 392, 397, 404, 418, 419, 422, 424, 425, 426, 428, 431, 432, 434, 439, 443, 462, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 479, 480, 485, 486, 488, 509, 517, 523, 526, 565, 566, 595, 607, 618, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 667, 671, 672, 684, 692, 693, 698, 731, 732, 736, 739, 741, 742, 743, 744, 746, 747, 749, 751, 752, 753, 754, 768, 769, 800, 806, 807, 808, 809, 810, 816, 819, 820, 821, 822, 823, 826, 837, 841, 843, 846, 857, 860, 861, 864, 868, 886, 890, 891, 923, 926, 930, 932, 934, 935, 939, 941, 942, 946, 948, 950, 952, 953, 955, 962, 963, 966, 967, 973, 1001, 1002, 1003, 1004, 1009], "present": [4, 5, 49, 91, 95, 103, 115, 122, 155, 158, 175, 178, 185, 196, 225, 228, 253, 258, 261, 275, 297, 300, 338, 362, 363, 366, 369, 375, 377, 389, 391, 394, 396, 397, 406, 407, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463, 464, 465, 466, 470, 475, 476, 477, 478, 479, 480, 485, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 524, 525, 538, 541, 544, 545, 556, 557, 558, 563, 564, 566, 592, 602, 603, 604, 605, 625, 629, 652, 663, 664, 665, 666, 686, 702, 703, 711, 715, 742, 756, 757, 760, 768, 769, 770, 773, 774, 781, 783, 795, 813, 814, 815, 817, 819, 821, 822, 823, 830, 835, 843, 844, 845, 846, 847, 849, 862, 863, 874, 882, 884, 885, 907, 936, 951, 952, 953, 954, 959, 962, 971, 973, 997, 1002, 1004, 1005, 1006, 1008], "date": [4, 69, 154, 360, 362, 365, 368, 378, 390, 973], "datetim": [4, 17, 154], "http": [4, 6, 7, 8, 12, 17, 24, 50, 70, 123, 129, 146, 158, 162, 172, 196, 204, 212, 214, 222, 226, 234, 273, 275, 293, 359, 360, 362, 363, 365, 368, 369, 370, 372, 375, 377, 380, 389, 393, 398, 418, 424, 427, 437, 461, 466, 470, 474, 475, 477, 483, 484, 485, 505, 506, 509, 511, 512, 516, 570, 611, 616, 619, 624, 633, 639, 641, 642, 643, 646, 651, 654, 657, 658, 660, 661, 664, 666, 667, 668, 670, 679, 695, 696, 697, 731, 732, 742, 806, 808, 809, 810, 813, 814, 819, 820, 821, 822, 827, 849, 863, 864, 865, 866, 878, 879, 948, 950, 952, 955, 965, 968, 975, 976, 983, 999, 1004], "pydata": [4, 971, 976], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 60, 65, 70, 109, 115, 116, 117, 129, 132, 143, 154, 158, 166, 168, 172, 177, 187, 188, 196, 204, 212, 214, 218, 226, 227, 228, 230, 235, 236, 237, 253, 255, 256, 258, 262, 267, 273, 293, 294, 306, 307, 309, 312, 313, 314, 317, 337, 338, 339, 346, 353, 358, 363, 365, 367, 370, 372, 378, 380, 393, 570, 611, 643, 646, 651, 670, 679, 742, 813, 814, 819, 820, 821, 822, 849, 864, 878, 879, 948, 952, 968, 970, 989, 1002, 1006], "stabl": [4, 158, 166, 190, 194, 198, 306, 338, 363, 365, 368, 370, 373, 377, 380, 393, 397, 401, 446, 447, 453, 508, 554, 630, 647, 649, 662, 667, 697, 725, 906, 907, 948, 954, 955, 962, 973, 990, 994, 995, 1000, 1005, 1007], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 146, 154, 158, 166, 168, 172, 177, 226, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 360, 362, 365, 368, 370, 372, 390, 393, 397, 461, 483, 484, 633, 806, 810, 903, 950, 973, 1005, 1006, 1007, 1008, 1009], "compon": [4, 5, 17, 44, 57, 61, 69, 72, 83, 84, 86, 93, 96, 97, 99, 100, 102, 103, 104, 106, 107, 127, 154, 164, 217, 229, 230, 232, 240, 241, 244, 245, 246, 254, 256, 276, 289, 294, 302, 307, 352, 353, 357, 360, 365, 366, 370, 373, 375, 388, 389, 390, 392, 397, 399, 401, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 477, 479, 490, 496, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 548, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 670, 702, 703, 711, 756, 757, 760, 768, 769, 770, 773, 774, 783, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 906, 907, 944, 949, 962, 964, 967, 972, 973, 974, 976, 981, 987, 988, 989, 994, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "now": [4, 5, 7, 17, 70, 85, 100, 109, 111, 115, 116, 118, 119, 122, 123, 129, 132, 146, 149, 154, 155, 156, 162, 166, 167, 168, 172, 175, 177, 182, 184, 185, 197, 198, 221, 230, 255, 258, 266, 267, 306, 307, 309, 314, 324, 337, 338, 339, 348, 352, 354, 360, 365, 366, 370, 375, 376, 377, 386, 393, 394, 397, 401, 467, 487, 511, 524, 553, 554, 555, 557, 602, 605, 624, 628, 633, 638, 659, 699, 729, 768, 769, 773, 774, 803, 818, 927, 941, 942, 948, 952, 958, 961, 962, 967, 968, 971, 973, 978, 985, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "introspect": [4, 6, 70, 370, 534, 535, 563, 564, 566, 962, 983], "value_count": 4, "11413": 4, "4544": 4, "rain": [4, 948], "1419": 4, "heavy_rain": 4, "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 57, 61, 70, 72, 74, 81, 94, 96, 102, 113, 114, 115, 120, 122, 129, 166, 168, 185, 194, 196, 198, 202, 203, 211, 213, 214, 217, 218, 225, 231, 233, 234, 242, 250, 252, 253, 256, 258, 259, 262, 265, 275, 283, 284, 291, 292, 299, 301, 309, 316, 329, 332, 337, 338, 339, 354, 359, 360, 363, 365, 366, 368, 369, 371, 372, 377, 380, 383, 386, 389, 390, 393, 396, 397, 399, 403, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 667, 672, 673, 674, 675, 676, 682, 683, 687, 705, 706, 752, 753, 768, 769, 770, 773, 774, 781, 783, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 889, 890, 891, 894, 898, 899, 900, 902, 915, 917, 922, 936, 940, 941, 946, 948, 952, 953, 959, 960, 962, 968, 973, 982, 983, 985, 987, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "dtype": [4, 8, 10, 11, 17, 48, 49, 64, 69, 70, 121, 123, 124, 129, 150, 151, 152, 162, 166, 198, 214, 234, 240, 253, 257, 259, 263, 266, 275, 282, 288, 308, 309, 313, 346, 359, 360, 365, 366, 375, 377, 390, 393, 404, 406, 418, 419, 422, 423, 424, 425, 426, 428, 439, 441, 442, 444, 447, 449, 462, 463, 464, 465, 470, 471, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 489, 497, 517, 532, 533, 534, 535, 538, 539, 540, 541, 556, 557, 560, 561, 563, 564, 566, 568, 569, 577, 581, 602, 603, 604, 605, 607, 615, 616, 619, 620, 621, 627, 631, 632, 635, 636, 637, 638, 639, 640, 646, 648, 650, 672, 688, 689, 711, 759, 792, 795, 807, 811, 812, 814, 822, 836, 842, 844, 845, 851, 864, 872, 873, 874, 875, 876, 878, 879, 880, 881, 887, 888, 890, 891, 919, 927, 928, 929, 930, 933, 942, 962, 965, 967, 978, 995, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "int64": [4, 13, 54, 70, 166, 346, 377, 397, 406, 418, 423, 425, 563, 615, 688, 689, 807, 1002, 1005, 1007], "cannot": [4, 40, 55, 74, 81, 95, 100, 117, 166, 167, 196, 214, 297, 324, 354, 364, 368, 370, 377, 378, 389, 390, 391, 393, 394, 396, 397, 399, 440, 496, 513, 514, 515, 518, 522, 585, 588, 589, 590, 592, 594, 595, 597, 598, 600, 626, 630, 657, 667, 685, 691, 751, 773, 774, 818, 819, 821, 822, 823, 831, 832, 841, 842, 852, 888, 890, 891, 941, 942, 946, 948, 949, 953, 958, 962, 967, 968, 973, 976, 982, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 55, 57, 63, 69, 70, 74, 84, 85, 89, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 129, 130, 131, 135, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 172, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 196, 197, 198, 200, 203, 204, 205, 208, 210, 211, 214, 225, 228, 230, 233, 234, 242, 244, 248, 249, 250, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 275, 278, 281, 282, 283, 284, 286, 288, 291, 292, 293, 297, 299, 301, 302, 305, 308, 311, 312, 313, 316, 317, 318, 320, 323, 331, 332, 339, 341, 344, 345, 347, 348, 352, 354, 357, 362, 366, 369, 375, 376, 377, 383, 385, 387, 389, 390, 391, 392, 394, 396, 397, 398, 399, 401, 413, 416, 417, 419, 420, 422, 424, 426, 427, 428, 429, 434, 440, 444, 445, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 467, 471, 472, 475, 479, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 602, 603, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 666, 667, 671, 677, 714, 761, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 836, 837, 840, 841, 844, 845, 849, 850, 851, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 926, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 966, 967, 968, 972, 973, 974, 976, 979, 982, 983, 989, 991, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "simplifi": [4, 70, 184, 324, 364, 369, 392, 490, 537, 830, 831, 952, 954, 962], "represent": [4, 12, 17, 20, 26, 70, 95, 98, 109, 115, 116, 117, 127, 129, 132, 143, 154, 166, 168, 172, 177, 217, 218, 219, 226, 228, 235, 236, 237, 253, 255, 256, 262, 267, 285, 294, 307, 309, 314, 338, 339, 346, 348, 357, 359, 366, 377, 383, 389, 390, 394, 395, 396, 438, 506, 510, 512, 515, 517, 523, 541, 563, 565, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 605, 618, 621, 627, 633, 634, 635, 637, 641, 643, 651, 652, 653, 742, 768, 769, 827, 840, 844, 845, 849, 851, 863, 870, 882, 884, 887, 903, 944, 949, 951, 953, 955, 956, 957, 962, 967, 973, 978, 979, 981, 985, 987, 994, 995, 998, 1005, 1006, 1007, 1008, 1009], "collaps": [4, 297, 324, 375], "those": [4, 7, 12, 17, 19, 59, 70, 111, 122, 146, 158, 168, 169, 196, 198, 222, 229, 233, 234, 246, 249, 255, 258, 261, 292, 297, 302, 321, 324, 337, 338, 339, 352, 359, 365, 366, 368, 369, 370, 371, 375, 377, 380, 386, 387, 389, 393, 394, 396, 397, 399, 423, 425, 436, 439, 443, 468, 469, 470, 478, 532, 533, 539, 540, 544, 545, 556, 667, 672, 686, 692, 709, 770, 773, 774, 781, 783, 790, 813, 814, 815, 817, 819, 820, 821, 822, 823, 872, 875, 878, 879, 880, 881, 941, 944, 948, 951, 952, 954, 955, 956, 959, 962, 968, 971, 972, 976, 978, 987, 994, 997, 1000, 1001, 1002, 1007, 1008, 1009], "replac": [4, 25, 79, 99, 149, 156, 161, 182, 197, 234, 258, 275, 299, 307, 326, 363, 365, 366, 368, 370, 373, 377, 383, 390, 393, 396, 397, 417, 421, 478, 490, 530, 531, 538, 557, 563, 564, 565, 566, 582, 583, 605, 609, 614, 616, 701, 758, 781, 783, 830, 831, 834, 853, 866, 873, 921, 923, 926, 941, 942, 948, 952, 962, 967, 968, 972, 973, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009], "to_replac": 4, "inplac": [4, 214, 267, 429, 456, 457, 458, 459, 826, 834, 837, 840, 841, 843, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 861, 925, 928, 929, 930, 934, 935, 1003], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 85, 91, 100, 113, 115, 116, 119, 122, 143, 149, 155, 164, 165, 168, 170, 182, 187, 196, 197, 198, 204, 214, 229, 235, 241, 242, 246, 262, 337, 338, 348, 352, 353, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 385, 387, 389, 390, 391, 393, 396, 397, 398, 408, 439, 440, 442, 443, 444, 456, 457, 458, 464, 498, 507, 511, 513, 516, 527, 529, 530, 531, 533, 535, 537, 538, 540, 543, 545, 547, 560, 561, 563, 564, 566, 570, 572, 581, 586, 602, 607, 608, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 649, 650, 653, 654, 670, 678, 679, 690, 708, 761, 765, 797, 804, 805, 806, 807, 808, 809, 810, 814, 817, 822, 829, 832, 837, 844, 845, 848, 851, 860, 861, 868, 870, 871, 872, 873, 874, 875, 876, 879, 881, 917, 941, 948, 952, 954, 958, 962, 966, 967, 968, 975, 983, 987, 989, 994, 995, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "balanc": [4, 6, 65, 164, 201, 248, 258, 271, 297, 354, 375, 377, 393, 394, 396, 477, 490, 509, 515, 516, 522, 532, 536, 539, 615, 633, 634, 641, 643, 649, 650, 651, 677, 682, 702, 716, 755, 760, 770, 771, 787, 831, 870, 872, 875, 878, 880, 895, 896, 941, 967, 968, 983, 994, 996, 999, 1000, 1003, 1004, 1008], "fall": [4, 122, 156, 254, 255, 365, 366, 388, 389, 397, 410, 422, 483, 484, 700, 701, 765, 848, 859, 951, 952, 962, 978, 986, 1003], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 63, 64, 71, 77, 88, 105, 117, 118, 119, 123, 138, 154, 166, 169, 172, 185, 189, 192, 196, 197, 202, 210, 214, 219, 229, 242, 250, 253, 255, 262, 264, 273, 294, 297, 302, 307, 308, 332, 337, 339, 348, 352, 353, 360, 362, 365, 366, 368, 369, 370, 373, 377, 380, 383, 389, 390, 391, 393, 394, 395, 396, 397, 399, 401, 416, 419, 422, 424, 425, 430, 431, 432, 434, 439, 462, 463, 464, 469, 471, 490, 509, 510, 514, 515, 516, 518, 522, 526, 528, 530, 531, 532, 534, 538, 539, 542, 556, 563, 566, 568, 569, 572, 581, 582, 583, 585, 597, 602, 606, 615, 633, 634, 640, 651, 660, 661, 663, 664, 668, 672, 674, 676, 678, 686, 687, 692, 699, 702, 703, 711, 713, 714, 727, 729, 751, 756, 757, 760, 761, 762, 765, 770, 771, 773, 774, 775, 776, 780, 783, 787, 788, 792, 799, 800, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 821, 828, 831, 842, 844, 845, 846, 850, 851, 854, 855, 856, 858, 859, 860, 861, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 890, 891, 896, 907, 918, 921, 942, 948, 949, 952, 953, 955, 956, 962, 965, 966, 967, 968, 973, 982, 984, 985, 987, 994, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "sensit": [4, 44, 79, 80, 113, 122, 167, 198, 225, 297, 324, 353, 354, 378, 391, 396, 427, 437, 667, 686, 687, 761, 947, 948, 949, 951, 952, 956, 958, 966, 967, 978, 986, 998], "splitter": [4, 257, 377, 393, 413, 447, 542, 543, 569, 577, 622, 626, 628, 630, 636, 638, 640, 648, 650, 770, 772, 773, 774, 775, 783, 784, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 798, 802, 805, 878, 879, 880, 881, 973, 1000, 1001, 1002, 1003], "evalu": [4, 5, 6, 10, 11, 24, 36, 67, 70, 71, 98, 109, 116, 117, 119, 120, 122, 129, 142, 152, 164, 169, 172, 176, 185, 198, 203, 214, 224, 238, 248, 249, 253, 255, 257, 258, 260, 261, 262, 264, 265, 266, 267, 269, 271, 273, 284, 288, 307, 324, 337, 348, 355, 358, 360, 366, 370, 377, 379, 388, 390, 397, 398, 399, 422, 424, 462, 465, 466, 467, 470, 484, 495, 511, 526, 536, 537, 538, 542, 543, 566, 569, 577, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 606, 607, 608, 609, 622, 628, 634, 648, 650, 672, 674, 676, 677, 678, 679, 685, 687, 688, 689, 691, 692, 699, 700, 709, 710, 715, 727, 728, 729, 730, 759, 766, 768, 769, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 802, 808, 811, 812, 817, 829, 831, 838, 855, 856, 858, 859, 860, 861, 872, 875, 878, 893, 901, 926, 944, 948, 950, 954, 955, 958, 959, 960, 963, 966, 968, 972, 976, 978, 979, 982, 983, 985, 988, 989, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007], "forecast": [4, 255, 387, 952, 972], "realist": [4, 8, 264, 265, 321], "gap": [4, 337, 360, 393, 446, 447, 453, 563, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 790, 878, 879, 880, 881, 948, 949, 1002, 1006, 1008], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 59, 60, 65, 84, 98, 100, 104, 109, 113, 119, 122, 125, 141, 149, 154, 155, 157, 164, 166, 167, 168, 175, 182, 187, 191, 192, 196, 197, 198, 200, 201, 204, 214, 217, 225, 230, 234, 248, 254, 255, 256, 258, 260, 261, 262, 271, 277, 281, 282, 284, 285, 297, 308, 315, 324, 332, 337, 338, 339, 346, 348, 352, 353, 360, 365, 366, 373, 375, 376, 377, 383, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 416, 417, 420, 421, 425, 427, 428, 429, 431, 432, 433, 438, 444, 445, 446, 447, 448, 449, 450, 451, 465, 467, 468, 469, 470, 471, 472, 477, 489, 490, 496, 499, 502, 509, 511, 512, 513, 514, 515, 516, 521, 522, 524, 528, 529, 534, 535, 537, 538, 559, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 595, 602, 607, 608, 609, 614, 617, 620, 621, 622, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 651, 653, 654, 656, 659, 663, 665, 667, 669, 670, 671, 674, 677, 678, 679, 681, 683, 684, 688, 689, 690, 691, 693, 697, 698, 699, 702, 703, 704, 707, 709, 710, 716, 725, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 763, 764, 766, 767, 768, 769, 770, 772, 773, 778, 786, 787, 789, 796, 797, 799, 801, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 835, 838, 839, 841, 842, 844, 845, 848, 849, 850, 856, 859, 860, 864, 875, 878, 879, 880, 881, 883, 904, 921, 941, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 966, 967, 968, 969, 973, 985, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "side": [4, 16, 27, 58, 122, 189, 214, 219, 228, 252, 297, 337, 348, 360, 375, 387, 390, 393, 394, 397, 490, 949, 952, 954, 967, 1003], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 69, 100, 109, 115, 116, 118, 121, 122, 123, 124, 125, 135, 142, 166, 180, 191, 192, 196, 204, 226, 241, 242, 249, 250, 253, 255, 257, 260, 262, 264, 265, 284, 291, 293, 298, 299, 302, 309, 315, 324, 337, 339, 346, 360, 371, 376, 377, 380, 387, 389, 394, 396, 397, 413, 418, 419, 447, 448, 454, 471, 506, 512, 514, 517, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 563, 564, 566, 569, 577, 622, 626, 628, 630, 636, 638, 640, 648, 650, 670, 678, 679, 691, 704, 710, 730, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 811, 812, 828, 829, 855, 856, 858, 859, 860, 861, 878, 879, 880, 881, 923, 941, 948, 949, 955, 958, 959, 960, 966, 968, 973, 978, 982, 983, 985, 986, 987, 989, 994, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "limit": [4, 8, 17, 37, 42, 65, 81, 116, 117, 123, 129, 161, 166, 167, 168, 175, 196, 197, 213, 229, 262, 299, 308, 339, 348, 353, 366, 369, 375, 377, 378, 389, 392, 394, 398, 438, 443, 534, 535, 536, 537, 607, 625, 633, 634, 654, 657, 658, 663, 751, 790, 819, 821, 822, 823, 844, 868, 872, 873, 874, 875, 876, 920, 941, 948, 949, 951, 952, 959, 960, 962, 973, 978, 989, 1002, 1004, 1007, 1008], "cv": [4, 12, 24, 25, 26, 54, 70, 71, 72, 73, 77, 103, 119, 121, 135, 136, 145, 161, 162, 166, 185, 195, 198, 231, 251, 253, 254, 255, 256, 257, 258, 260, 261, 265, 269, 324, 332, 376, 377, 387, 393, 396, 413, 447, 542, 543, 569, 577, 622, 626, 628, 630, 634, 636, 638, 640, 648, 650, 770, 772, 773, 774, 775, 783, 784, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 798, 802, 805, 878, 879, 941, 944, 947, 948, 952, 973, 982, 983, 987, 996, 1000, 1001, 1002, 1003, 1004, 1006, 1008], "fold": [4, 66, 73, 77, 118, 121, 135, 166, 185, 242, 250, 253, 255, 256, 257, 258, 265, 315, 332, 348, 360, 367, 368, 376, 377, 389, 398, 413, 447, 467, 511, 542, 543, 569, 577, 622, 626, 628, 630, 634, 636, 638, 640, 648, 650, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 802, 805, 872, 875, 941, 948, 952, 967, 982, 994, 996, 998, 999, 1000, 1002, 1003, 1005, 1006], "1000": [4, 7, 8, 14, 26, 31, 37, 43, 50, 71, 84, 94, 105, 113, 115, 116, 121, 122, 131, 137, 141, 145, 155, 172, 182, 188, 199, 219, 228, 229, 231, 240, 244, 252, 253, 255, 261, 266, 280, 282, 298, 301, 306, 307, 309, 325, 326, 333, 337, 338, 362, 369, 370, 376, 387, 397, 413, 448, 454, 506, 507, 512, 517, 518, 520, 521, 523, 528, 539, 607, 621, 622, 626, 627, 628, 630, 635, 636, 637, 638, 641, 642, 643, 647, 651, 652, 653, 662, 667, 673, 737, 848, 859, 865, 870, 871, 941, 945, 967, 982, 985, 1001, 1003], "datapoint": [4, 42, 52, 55, 153, 156, 179, 230, 231, 250, 255, 273, 330, 399, 477, 532, 533, 534, 535, 539, 540, 541, 586, 878, 879, 880, 881, 945], "enough": [4, 37, 44, 61, 118, 149, 161, 167, 168, 185, 196, 230, 232, 257, 301, 337, 339, 348, 363, 365, 368, 378, 387, 388, 389, 391, 393, 396, 542, 543, 564, 770, 773, 774, 783, 795, 907, 941, 946, 949, 951, 958, 962, 967, 972, 976, 1000], "quantifi": [4, 37, 77, 154, 214, 262, 366, 377, 384, 388, 548, 834, 947, 960, 962, 989], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 50, 90, 95, 97, 104, 105, 116, 117, 125, 166, 167, 175, 183, 188, 198, 200, 201, 205, 219, 221, 230, 234, 243, 249, 252, 255, 258, 262, 280, 299, 337, 339, 346, 354, 357, 360, 362, 366, 375, 376, 377, 378, 383, 387, 389, 393, 394, 395, 396, 397, 398, 414, 418, 427, 438, 445, 446, 447, 448, 449, 450, 451, 462, 464, 465, 466, 468, 470, 472, 474, 475, 476, 477, 479, 480, 485, 509, 511, 513, 515, 516, 522, 530, 538, 556, 563, 566, 604, 607, 609, 615, 651, 653, 672, 716, 762, 770, 772, 782, 783, 786, 789, 794, 796, 797, 800, 801, 807, 813, 814, 815, 817, 818, 819, 821, 822, 823, 828, 829, 838, 844, 867, 890, 891, 942, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 962, 963, 965, 966, 968, 978, 983, 984, 986, 1000, 1002, 1005, 1006, 1009], "bit": [4, 48, 77, 98, 194, 198, 297, 324, 338, 348, 352, 360, 363, 396, 397, 557, 564, 633, 801, 890, 891, 949, 953, 971, 980, 987, 994, 997, 1000, 1002, 1003, 1006, 1007], "less": [4, 5, 8, 52, 59, 91, 95, 98, 106, 116, 122, 123, 149, 156, 166, 167, 178, 196, 198, 200, 231, 241, 243, 255, 256, 266, 269, 298, 301, 302, 307, 309, 332, 337, 338, 348, 352, 354, 360, 365, 366, 375, 377, 389, 393, 394, 396, 397, 401, 415, 417, 419, 421, 423, 425, 427, 432, 437, 438, 456, 457, 458, 470, 490, 506, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 565, 571, 594, 602, 609, 622, 636, 651, 653, 667, 695, 696, 697, 698, 709, 725, 737, 752, 753, 758, 766, 768, 769, 772, 773, 774, 779, 795, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 834, 846, 848, 849, 851, 853, 859, 860, 870, 871, 878, 879, 880, 881, 896, 910, 941, 942, 944, 945, 946, 949, 951, 952, 955, 957, 959, 962, 966, 967, 968, 972, 985, 987, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1008, 1009], "half": [4, 24, 98, 230, 233, 253, 255, 267, 360, 361, 394, 438, 497, 537, 568, 572, 577, 743, 830, 838, 952, 955, 968], "contigu": [4, 21, 366, 375, 386, 393, 397, 419, 422, 424, 434, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 754, 788, 811, 812, 870, 872, 873, 874, 875, 876, 967, 997, 1004, 1008], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 70, 71, 72, 73, 74, 77, 85, 100, 103, 109, 115, 116, 119, 120, 121, 122, 123, 124, 128, 129, 135, 136, 142, 143, 145, 149, 161, 162, 164, 166, 167, 168, 169, 172, 191, 196, 198, 203, 204, 211, 212, 214, 226, 231, 236, 237, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 277, 279, 283, 284, 291, 293, 294, 299, 301, 302, 305, 306, 307, 315, 316, 324, 327, 332, 342, 346, 348, 355, 365, 366, 369, 376, 377, 390, 393, 396, 413, 414, 533, 535, 542, 543, 553, 634, 672, 673, 675, 676, 715, 799, 802, 820, 828, 829, 831, 878, 879, 880, 881, 941, 942, 947, 952, 954, 955, 960, 962, 967, 973, 982, 983, 987, 991, 1000, 1001], "timeseriessplit": [4, 250, 393, 1000, 1001, 1006], "ts_cv": 4, "n_split": [4, 110, 121, 161, 162, 166, 242, 250, 255, 257, 260, 265, 315, 324, 332, 348, 393, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 794, 982, 1000, 1002], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 135, 136, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 168, 169, 172, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 268, 269, 270, 273, 275, 277, 279, 280, 281, 282, 284, 285, 287, 288, 291, 292, 293, 294, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 315, 316, 317, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 337, 338, 342, 343, 344, 345, 346, 348, 360, 362, 363, 365, 366, 369, 370, 375, 376, 377, 380, 381, 382, 387, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 413, 414, 415, 416, 418, 420, 423, 424, 425, 426, 427, 428, 429, 433, 437, 439, 441, 444, 447, 456, 457, 458, 459, 464, 467, 468, 474, 479, 491, 492, 496, 498, 499, 503, 506, 508, 509, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 527, 532, 534, 535, 538, 539, 540, 541, 542, 543, 545, 557, 567, 568, 569, 572, 577, 585, 588, 589, 590, 591, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 609, 613, 616, 618, 621, 622, 626, 627, 628, 630, 631, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 645, 647, 651, 652, 653, 655, 656, 659, 663, 664, 666, 667, 670, 671, 674, 677, 679, 683, 686, 687, 695, 696, 697, 699, 700, 701, 703, 708, 711, 712, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 742, 754, 755, 757, 758, 760, 761, 762, 765, 767, 770, 771, 772, 773, 774, 775, 776, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 828, 829, 830, 831, 836, 837, 838, 840, 841, 843, 844, 846, 847, 848, 850, 851, 858, 859, 864, 870, 871, 872, 873, 874, 875, 876, 878, 880, 896, 906, 907, 909, 911, 912, 917, 918, 920, 923, 941, 942, 944, 947, 948, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 964, 966, 967, 970, 974, 978, 982, 983, 985, 986, 987, 989, 990, 992, 995, 996, 997, 999, 1001, 1002, 1004, 1008, 1009], "48": [4, 45, 102, 154, 302, 310, 362, 370, 389, 485, 572, 719, 806, 941, 954, 962, 990], "max_train_s": [4, 393, 790, 1001], "10000": [4, 11, 30, 62, 71, 72, 74, 123, 135, 182, 189, 196, 204, 212, 214, 229, 231, 268, 275, 307, 321, 348, 354, 396, 397, 536, 537, 619, 654, 848, 876, 964, 983, 987], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 70, 109, 115, 120, 121, 123, 124, 128, 167, 172, 191, 196, 203, 204, 211, 212, 252, 253, 257, 262, 264, 268, 273, 283, 284, 291, 293, 294, 299, 301, 302, 307, 324, 332, 348, 369, 393, 673, 772, 786, 789, 790, 797, 799, 820, 942, 954, 955, 982, 983, 994, 995, 1000, 1001, 1006], "manual": [4, 46, 166, 169, 180, 197, 207, 275, 315, 322, 337, 339, 352, 353, 360, 365, 368, 369, 376, 380, 389, 393, 394, 395, 413, 424, 821, 844, 850, 941, 946, 948, 951, 952, 955, 962, 973, 978, 979, 987, 1002, 1004], "inspect": [4, 31, 55, 60, 112, 116, 123, 126, 130, 143, 149, 154, 155, 166, 167, 168, 169, 179, 188, 205, 235, 255, 258, 267, 278, 283, 286, 305, 306, 307, 308, 320, 321, 322, 325, 326, 337, 343, 355, 366, 377, 389, 390, 396, 397, 439, 528, 529, 532, 533, 534, 535, 539, 540, 541, 800, 831, 832, 878, 879, 880, 881, 940, 953, 956, 959, 960, 967, 972, 987, 989, 997], "variou": [4, 12, 36, 37, 57, 59, 60, 67, 80, 84, 94, 98, 164, 166, 174, 206, 215, 216, 217, 218, 223, 229, 257, 301, 306, 337, 339, 346, 348, 352, 359, 360, 361, 362, 365, 366, 369, 376, 378, 387, 388, 389, 391, 413, 417, 447, 477, 489, 490, 500, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 569, 577, 622, 626, 628, 630, 633, 636, 638, 640, 641, 643, 648, 650, 651, 666, 667, 674, 770, 773, 774, 783, 791, 792, 793, 794, 795, 796, 797, 798, 831, 870, 871, 941, 942, 949, 952, 955, 959, 962, 966, 968, 972, 976, 986, 987, 994, 997, 998], "check": [4, 5, 17, 46, 55, 99, 129, 149, 167, 168, 182, 184, 185, 196, 218, 308, 314, 346, 352, 353, 363, 364, 365, 366, 367, 368, 370, 371, 373, 375, 377, 380, 383, 390, 419, 426, 427, 440, 483, 484, 506, 511, 512, 523, 536, 537, 621, 622, 627, 628, 635, 636, 637, 638, 651, 653, 656, 662, 664, 667, 668, 827, 835, 875, 878, 879, 880, 881, 890, 891, 892, 901, 902, 913, 914, 916, 936, 937, 938, 940, 948, 949, 952, 967, 973, 976, 994, 995, 997, 1001, 1005, 1006, 1007, 1008, 1009], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 40, 44, 49, 61, 69, 105, 106, 114, 121, 136, 169, 235, 250, 253, 255, 256, 258, 259, 268, 284, 299, 305, 306, 307, 308, 309, 316, 327, 338, 339, 354, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 387, 388, 389, 390, 393, 395, 396, 397, 408, 410, 413, 425, 431, 432, 439, 440, 441, 447, 453, 456, 457, 458, 462, 463, 464, 465, 466, 470, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 498, 507, 525, 526, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 563, 564, 566, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 607, 609, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 656, 659, 667, 671, 672, 674, 684, 686, 687, 690, 692, 698, 706, 719, 727, 751, 754, 761, 765, 768, 769, 770, 773, 774, 780, 781, 783, 792, 793, 794, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 835, 839, 842, 844, 845, 850, 867, 871, 873, 876, 878, 879, 880, 881, 882, 883, 884, 886, 890, 891, 892, 896, 898, 899, 900, 902, 910, 911, 913, 915, 923, 926, 936, 941, 942, 948, 952, 954, 955, 956, 960, 963, 968, 970, 972, 973, 976, 978, 982, 984, 987, 990, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "train_0": 4, "test_0": 4, "iloc": [4, 129, 166, 214, 255], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 54, 79, 84, 90, 101, 103, 105, 110, 114, 122, 142, 143, 145, 150, 161, 166, 167, 176, 186, 225, 242, 255, 288, 291, 294, 297, 299, 312, 313, 337, 345, 348, 352, 362, 370, 393, 396, 397, 420, 452, 476, 479, 545, 572, 653, 707, 767, 786, 797, 823, 841, 846, 848, 849, 859, 860, 862, 863, 947, 948, 952, 953, 955, 962, 983, 994, 996, 1002, 1005], "760": 4, "68": [4, 187, 266, 294, 312, 389, 510, 516, 565, 994], "27": [4, 6, 19, 31, 47, 54, 166, 312, 313, 333, 362, 389, 397, 399, 687, 761, 762, 871, 952, 986, 994, 996], "9993": [4, 628, 630, 1002], "12380": 4, "32": [4, 5, 6, 15, 51, 98, 107, 168, 222, 233, 256, 309, 313, 359, 363, 369, 377, 386, 396, 397, 421, 539, 540, 557, 564, 609, 651, 850, 890, 891, 919, 960, 986, 994, 997, 1000, 1002, 1003, 1006, 1007], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 73, 150, 168, 172, 229, 253, 255, 275, 289, 308, 337, 338, 348, 360, 362, 370, 396, 397, 464, 536, 537, 619, 652, 966, 987, 1005], "77": [4, 6, 8, 44, 172, 294, 313, 359, 362, 509], "0028": 4, "12381": 4, "72": [4, 6, 7, 89, 98, 152, 180, 369], "9995": 4, "12382": 4, "240": [4, 44, 960, 994], "82": [4, 30, 57, 91, 143, 167, 199, 286, 294, 312, 761, 770, 783, 952, 955, 983, 994], "9980": [4, 1002], "12383": 4, "13374": 4, "34": [4, 8, 91, 122, 149, 222, 280, 294, 312, 313, 362, 393, 399, 495, 545, 572, 624, 642, 690, 737, 983, 994], "44": [4, 84, 154, 166, 167, 195, 279, 399, 754, 871, 874, 952, 959, 994], "150": [4, 6, 89, 91, 92, 114, 122, 135, 170, 218, 222, 225, 268, 362, 393, 398, 479, 577, 792, 793, 794, 952, 982, 983, 984], "53": [4, 6, 74, 389, 396, 510, 516, 763, 764], "15": [4, 6, 7, 8, 11, 12, 13, 14, 15, 30, 31, 34, 40, 43, 44, 54, 60, 61, 65, 72, 73, 79, 81, 91, 105, 110, 114, 118, 119, 122, 141, 143, 149, 153, 161, 166, 167, 185, 193, 198, 210, 214, 219, 222, 225, 242, 243, 250, 257, 258, 260, 263, 266, 267, 269, 275, 278, 279, 283, 286, 291, 292, 294, 297, 299, 301, 302, 313, 316, 322, 324, 327, 331, 334, 343, 359, 360, 365, 376, 393, 397, 416, 429, 464, 471, 506, 512, 530, 531, 573, 619, 627, 636, 638, 643, 651, 653, 667, 714, 787, 800, 823, 941, 947, 948, 949, 952, 955, 956, 962, 967, 970, 978, 983, 990, 992, 996, 1006, 1008], "0013": 4, "13375": 4, "39": [4, 204, 215, 234, 302, 360, 362, 363, 368, 389, 397, 469, 879], "49": [4, 91, 359, 360, 362, 369, 389, 425, 432, 687, 699, 729, 737, 768, 770, 947, 952, 962, 997], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 8, 13, 97, 155, 166, 196, 214, 215, 222, 327, 362, 370, 396, 397, 530, 531, 545, 708, 952, 987, 994], "08": [4, 8, 44, 50, 98, 107, 133, 147, 163, 166, 214, 215, 229, 247, 271, 294, 295, 340, 362, 506, 518, 520, 538, 616, 633, 770, 828, 829, 850, 958], "910": 4, "42": [4, 6, 24, 25, 26, 27, 31, 46, 55, 77, 91, 97, 103, 116, 117, 119, 122, 123, 125, 129, 142, 143, 162, 166, 168, 169, 172, 175, 180, 185, 188, 190, 191, 198, 202, 203, 204, 210, 211, 213, 218, 225, 231, 234, 237, 254, 256, 259, 275, 281, 282, 283, 291, 298, 299, 300, 302, 305, 307, 309, 315, 322, 324, 337, 338, 348, 353, 369, 370, 377, 389, 393, 396, 397, 400, 413, 420, 462, 466, 506, 512, 519, 532, 533, 540, 541, 542, 543, 545, 652, 768, 772, 797, 811, 812, 816, 820, 823, 862, 863, 865, 866, 867, 880, 881, 955, 962, 983, 987, 990, 991, 994], "0015": 4, "13378": 4, "35": [4, 6, 7, 8, 9, 11, 70, 91, 112, 131, 166, 175, 184, 225, 245, 256, 271, 307, 310, 312, 313, 519, 623, 624, 631, 676, 680, 681, 700, 714, 729, 755, 762, 804, 941, 948, 952, 958, 962, 983, 987, 994, 996], "26": [4, 42, 46, 54, 79, 97, 129, 133, 154, 166, 222, 233, 268, 302, 313, 370, 545, 623, 702, 756, 847, 858, 907, 952, 962, 994, 997, 998, 1006], "47": [4, 67, 84, 107, 192, 360, 467, 468, 510, 516, 947], "16": [4, 5, 19, 27, 50, 51, 54, 65, 73, 79, 95, 98, 141, 158, 172, 173, 189, 195, 196, 197, 214, 217, 218, 219, 230, 233, 258, 259, 275, 279, 289, 294, 297, 301, 302, 305, 338, 344, 360, 362, 363, 370, 376, 380, 381, 382, 393, 394, 397, 418, 453, 471, 477, 509, 510, 545, 564, 570, 571, 582, 583, 614, 625, 626, 629, 630, 631, 632, 657, 658, 782, 787, 797, 846, 871, 879, 941, 948, 952, 962, 967, 970, 978, 987, 990, 992, 994, 995, 999, 1000, 1002, 1003], "9979": 4, "2331": 4, "31": [4, 69, 78, 214, 222, 280, 308, 312, 313, 386, 397, 475, 536, 537, 572, 624, 646, 654, 919, 953, 994], "060": [4, 724], "0032": 4, "2332": 4, "2333": 4, "78": [4, 6, 172, 294, 299, 313, 467, 468, 628, 630, 639, 640, 770, 795, 952, 973, 983], "275": [4, 14, 99, 107, 313, 997], "2334": 4, "96": [4, 32, 48, 61, 156, 225, 253, 294, 299, 312, 313, 362, 393, 941, 947, 952, 962, 994], "515": 4, "64": [4, 8, 32, 48, 57, 88, 95, 154, 166, 193, 218, 219, 229, 230, 233, 253, 279, 284, 343, 352, 353, 362, 363, 370, 394, 469, 477, 574, 575, 621, 633, 663, 664, 665, 666, 871, 955, 984, 994, 996, 1002, 1003, 1006, 1007], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1003], "12329": 4, "46": [4, 188, 196, 238, 348, 370, 568, 569, 690, 874, 879, 947, 962, 990], "12330": [4, 1002], "52": [4, 154, 196, 240, 608, 768, 947, 994], "last": [4, 44, 56, 57, 88, 120, 122, 175, 196, 197, 204, 209, 225, 246, 258, 266, 267, 307, 309, 315, 342, 352, 360, 363, 366, 368, 369, 372, 377, 380, 389, 390, 397, 401, 414, 418, 422, 434, 439, 443, 490, 508, 536, 537, 558, 559, 562, 568, 569, 572, 585, 657, 658, 660, 661, 672, 673, 675, 676, 681, 755, 768, 769, 773, 774, 788, 811, 812, 816, 831, 836, 844, 850, 885, 910, 927, 941, 947, 948, 949, 951, 952, 953, 956, 966, 973, 978, 985, 994, 1001, 1002, 1003, 1008], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 8, 32, 54, 97, 118, 172, 195, 232, 268, 294, 299, 312, 313, 396, 638, 761, 947, 952, 953, 962, 987, 994], "665": 4, "16380": 4, "71": [4, 362, 485, 703, 952, 985, 996], "16381": 4, "76": [4, 8, 196, 313, 337, 348, 362, 370, 754, 985], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 22, 40, 44, 49, 59, 61, 73, 91, 98, 103, 110, 122, 158, 166, 167, 170, 207, 218, 222, 223, 225, 230, 255, 301, 303, 313, 318, 337, 338, 339, 365, 370, 390, 393, 394, 397, 422, 434, 466, 474, 475, 476, 477, 479, 480, 485, 510, 511, 513, 515, 516, 532, 533, 534, 535, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 564, 569, 574, 575, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 621, 624, 633, 634, 646, 688, 692, 704, 707, 708, 714, 716, 768, 769, 790, 804, 827, 828, 829, 835, 841, 849, 850, 860, 870, 871, 878, 879, 880, 881, 882, 906, 907, 941, 950, 952, 962, 970, 990, 992, 994, 995, 998, 999, 1001, 1002, 1004, 1005], "940": [4, 8], "6331": 4, "28": [4, 65, 122, 159, 166, 172, 212, 219, 222, 293, 302, 312, 313, 362, 370, 389, 393, 399, 425, 432, 962, 983, 994, 997, 1000], "790": [4, 69, 70], "89": [4, 6, 32, 101, 154, 187, 214, 294, 312, 313, 952, 962, 987, 994, 997, 1005], "6332": 4, "6333": 4, "88": [4, 32, 101, 180, 187, 254, 294, 312, 313, 342, 360, 362, 391, 448, 831, 983, 994], "820": [4, 811, 812], "79": [4, 30, 32, 79, 80, 98, 129, 172, 294, 313, 362, 369, 391, 449, 572, 809, 994, 996], "6334": 4, "6335": 4, "70": [4, 6, 11, 65, 72, 89, 240, 246, 255, 313, 360, 362, 393, 467, 468, 664, 668, 687, 699, 729, 770, 783, 941, 962, 983], "33": [4, 8, 79, 196, 302, 313, 360, 362, 368, 369, 370, 397, 507, 623, 686, 687, 702, 703, 711, 716, 756, 757, 760, 795, 797, 799, 881, 948, 952, 962, 983, 994, 1002], "335": 4, "74": [4, 42, 89, 112, 212, 312, 313, 362, 565, 770, 783, 850], "16326": [4, 1006], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 154, 197, 360, 368, 372], "tree": [4, 7, 26, 27, 31, 41, 44, 61, 108, 109, 112, 113, 114, 119, 120, 121, 122, 123, 125, 129, 130, 133, 157, 161, 167, 169, 218, 233, 235, 259, 275, 280, 288, 297, 298, 307, 347, 348, 352, 355, 360, 362, 370, 376, 377, 379, 387, 389, 395, 400, 413, 417, 418, 419, 420, 421, 423, 425, 432, 438, 469, 475, 479, 489, 490, 494, 519, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 606, 607, 608, 609, 633, 663, 667, 677, 761, 797, 806, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 832, 835, 844, 902, 942, 949, 952, 953, 958, 959, 972, 973, 974, 989, 994, 995, 996, 997, 998, 999, 1000, 1001], "often": [4, 19, 24, 25, 33, 69, 73, 127, 153, 161, 166, 167, 197, 214, 218, 242, 257, 260, 297, 324, 334, 337, 338, 339, 352, 353, 359, 360, 362, 365, 366, 369, 372, 375, 376, 377, 379, 383, 387, 389, 390, 391, 393, 394, 396, 397, 399, 401, 443, 496, 499, 508, 511, 607, 621, 622, 627, 628, 635, 636, 637, 638, 647, 649, 662, 701, 841, 849, 856, 868, 941, 942, 944, 947, 948, 949, 950, 951, 952, 954, 955, 957, 958, 959, 962, 965, 966, 968, 978, 980, 985, 986, 987, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "flexibl": [4, 25, 119, 161, 196, 298, 321, 339, 366, 371, 393, 399, 649, 870, 871, 941, 946, 948, 952, 956, 962, 973, 976, 1003, 1007], "effici": [4, 5, 12, 13, 42, 46, 95, 127, 167, 172, 185, 189, 198, 204, 280, 337, 352, 357, 359, 365, 366, 367, 369, 370, 375, 377, 383, 386, 388, 389, 394, 395, 396, 399, 401, 418, 419, 422, 424, 425, 427, 429, 432, 434, 436, 437, 470, 508, 509, 510, 513, 515, 516, 519, 538, 541, 549, 563, 566, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 613, 615, 630, 633, 634, 639, 641, 643, 648, 650, 651, 652, 653, 654, 660, 661, 663, 674, 699, 729, 736, 752, 753, 768, 769, 770, 783, 800, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 836, 848, 859, 863, 870, 879, 881, 907, 920, 941, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 972, 976, 978, 982, 985, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "heteorogen": 4, "tabular": [4, 167, 366, 960], "mix": [4, 61, 68, 75, 96, 97, 164, 196, 297, 359, 366, 375, 377, 390, 394, 401, 439, 441, 442, 470, 508, 513, 515, 522, 605, 621, 622, 627, 633, 634, 635, 636, 637, 638, 643, 651, 653, 656, 770, 797, 831, 844, 845, 851, 918, 923, 926, 948, 957, 986, 1006, 1008], "long": [4, 11, 12, 44, 61, 110, 122, 154, 162, 166, 168, 196, 232, 258, 288, 297, 306, 337, 338, 348, 353, 365, 372, 375, 377, 378, 383, 388, 389, 399, 428, 472, 513, 651, 652, 653, 773, 774, 806, 807, 808, 809, 810, 828, 829, 839, 952, 958, 962, 963, 965, 966, 971, 975, 996, 1000, 1006, 1008], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 55, 57, 58, 59, 64, 79, 80, 81, 85, 89, 91, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 130, 131, 132, 143, 149, 154, 155, 156, 158, 161, 164, 166, 167, 172, 174, 182, 184, 185, 196, 198, 200, 204, 210, 212, 213, 214, 215, 217, 225, 229, 230, 232, 234, 240, 241, 243, 244, 245, 246, 248, 250, 255, 257, 258, 259, 261, 263, 267, 269, 271, 273, 275, 278, 279, 280, 281, 282, 284, 285, 286, 297, 299, 300, 301, 305, 307, 308, 312, 314, 315, 316, 317, 319, 320, 322, 324, 326, 332, 335, 337, 338, 343, 346, 352, 355, 358, 360, 361, 364, 365, 366, 367, 375, 376, 386, 387, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 405, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 431, 432, 433, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 585, 586, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 662, 663, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 736, 737, 741, 742, 743, 744, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 890, 891, 895, 896, 907, 911, 921, 923, 926, 927, 930, 933, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 973, 975, 978, 984, 985, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "larg": [4, 12, 13, 21, 26, 37, 39, 47, 50, 52, 72, 74, 95, 99, 113, 115, 122, 127, 142, 154, 155, 168, 175, 176, 185, 187, 196, 198, 201, 202, 214, 230, 252, 258, 261, 277, 284, 293, 297, 299, 308, 309, 324, 329, 332, 338, 339, 352, 360, 365, 370, 373, 375, 376, 377, 380, 383, 388, 391, 393, 394, 395, 396, 398, 399, 400, 418, 420, 422, 425, 426, 427, 428, 433, 437, 448, 450, 473, 489, 509, 511, 513, 515, 519, 522, 524, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 557, 563, 564, 566, 609, 616, 618, 625, 629, 632, 633, 634, 639, 646, 647, 649, 652, 654, 660, 662, 664, 666, 667, 668, 670, 719, 752, 753, 770, 777, 779, 783, 787, 796, 806, 807, 808, 809, 810, 811, 812, 817, 828, 829, 836, 840, 841, 849, 851, 862, 863, 870, 871, 875, 876, 878, 879, 880, 881, 906, 907, 941, 944, 946, 948, 949, 951, 954, 955, 956, 960, 965, 966, 967, 968, 972, 973, 976, 983, 985, 986, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "ordin": [4, 70, 129, 300, 307, 359, 377, 396, 470, 683, 836, 839, 844, 845, 948, 949, 962, 973, 1002, 1008], "encod": [4, 8, 11, 48, 70, 95, 115, 129, 166, 168, 195, 196, 298, 299, 300, 307, 309, 324, 337, 339, 357, 359, 361, 366, 369, 375, 377, 390, 393, 394, 396, 397, 399, 461, 470, 478, 501, 506, 512, 514, 515, 517, 519, 520, 521, 523, 526, 536, 537, 541, 544, 556, 563, 564, 566, 605, 708, 772, 776, 778, 834, 836, 838, 839, 842, 844, 845, 854, 941, 942, 948, 949, 952, 954, 955, 957, 966, 972, 973, 989, 995, 996, 1002, 1006, 1008, 1009], "know": [4, 65, 119, 143, 146, 149, 158, 214, 232, 255, 273, 309, 312, 332, 338, 352, 365, 375, 383, 389, 392, 393, 394, 397, 475, 479, 485, 621, 627, 633, 634, 699, 729, 770, 783, 855, 856, 858, 859, 860, 861, 878, 879, 880, 881, 941, 951, 952, 953, 955, 964, 1000, 1001, 1004, 1006], "treat": [4, 6, 70, 119, 129, 161, 166, 196, 307, 315, 348, 365, 375, 377, 386, 396, 397, 418, 536, 537, 563, 564, 566, 582, 583, 607, 613, 620, 646, 649, 727, 761, 840, 841, 847, 848, 851, 855, 858, 859, 861, 942, 944, 948, 952, 953, 959, 962, 966, 968, 983, 998, 1006], "dedic": [4, 253, 334, 363, 370, 375, 378, 380, 385, 389, 559, 647, 649, 662, 941, 972, 978, 1002], "rule": [4, 172, 343, 346, 348, 352, 362, 365, 366, 375, 377, 378, 384, 388, 389, 393, 394, 396, 398, 511, 524, 525, 526, 527, 528, 536, 537, 544, 545, 577, 609, 620, 633, 634, 641, 643, 651, 652, 653, 680, 681, 770, 773, 774, 783, 794, 796, 820, 870, 883, 941, 946, 954, 955, 966, 968, 973, 978, 985, 989, 996, 999, 1006], "pass": [4, 7, 8, 20, 21, 34, 38, 119, 143, 157, 177, 180, 195, 197, 226, 228, 229, 235, 237, 240, 241, 242, 245, 246, 253, 256, 266, 305, 308, 329, 339, 348, 352, 353, 354, 360, 365, 366, 369, 370, 371, 372, 373, 375, 377, 389, 390, 393, 394, 396, 397, 399, 400, 401, 413, 414, 416, 419, 420, 422, 424, 425, 427, 429, 432, 434, 435, 437, 439, 440, 442, 444, 447, 449, 462, 465, 466, 469, 471, 478, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 556, 557, 563, 564, 566, 568, 569, 572, 582, 583, 585, 586, 592, 595, 601, 606, 607, 609, 614, 615, 616, 617, 618, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 651, 652, 653, 654, 656, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 705, 706, 715, 736, 747, 751, 752, 753, 754, 761, 763, 764, 768, 769, 770, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 835, 836, 838, 842, 844, 845, 846, 848, 851, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 890, 891, 897, 901, 902, 906, 907, 911, 913, 914, 920, 922, 923, 926, 941, 942, 948, 950, 952, 953, 954, 955, 956, 959, 962, 965, 966, 967, 973, 976, 978, 982, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "explicitli": [4, 19, 43, 44, 45, 46, 48, 50, 56, 59, 95, 116, 149, 156, 161, 162, 196, 197, 228, 306, 309, 339, 348, 359, 361, 365, 366, 368, 375, 377, 385, 393, 397, 399, 415, 524, 525, 553, 555, 572, 602, 683, 700, 755, 761, 762, 773, 774, 802, 805, 811, 812, 837, 860, 861, 907, 920, 941, 942, 944, 946, 949, 952, 954, 955, 962, 976, 987, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008], "logic": [4, 366, 371, 385, 968, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "integ": [4, 17, 48, 70, 129, 166, 196, 214, 257, 306, 307, 348, 352, 359, 360, 362, 366, 369, 373, 376, 377, 389, 390, 393, 394, 396, 397, 410, 413, 437, 439, 442, 447, 461, 470, 472, 476, 477, 478, 480, 483, 484, 487, 489, 490, 494, 497, 525, 534, 535, 536, 537, 538, 542, 543, 547, 557, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 607, 619, 626, 630, 634, 640, 648, 650, 651, 674, 688, 708, 770, 772, 773, 774, 775, 776, 778, 783, 784, 785, 786, 788, 789, 791, 802, 805, 807, 810, 811, 812, 836, 844, 845, 850, 851, 854, 864, 866, 878, 879, 880, 881, 886, 917, 918, 919, 921, 942, 948, 953, 955, 962, 965, 967, 968, 978, 985, 987, 994, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "lexicograph": [4, 377, 761, 765, 813, 821], "ad": [4, 13, 74, 103, 105, 109, 120, 142, 149, 155, 156, 175, 198, 221, 231, 255, 256, 297, 306, 307, 308, 309, 316, 338, 364, 365, 368, 370, 375, 377, 378, 394, 396, 397, 398, 399, 417, 418, 419, 421, 422, 424, 427, 434, 437, 439, 489, 497, 507, 510, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 557, 564, 565, 566, 568, 577, 582, 583, 586, 588, 602, 604, 617, 623, 625, 629, 633, 634, 644, 651, 653, 655, 670, 688, 748, 750, 768, 769, 770, 783, 792, 799, 809, 828, 829, 830, 844, 850, 852, 867, 878, 879, 880, 881, 897, 941, 945, 947, 948, 949, 953, 955, 956, 958, 973, 976, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "benefit": [4, 55, 73, 74, 166, 210, 221, 228, 230, 277, 309, 352, 365, 373, 377, 387, 389, 443, 483, 542, 543, 633, 634, 641, 643, 651, 652, 653, 868, 870, 941, 947, 955, 960, 962, 973, 976, 994, 997, 998, 999, 1006, 1007, 1008, 1009], "prevent": [4, 110, 122, 143, 197, 297, 324, 337, 342, 348, 365, 366, 375, 376, 389, 394, 397, 418, 424, 462, 463, 565, 566, 586, 701, 758, 828, 829, 855, 856, 858, 859, 860, 861, 952, 954, 957, 958, 968, 985, 996, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 66, 126, 141, 146, 154, 155, 156, 166, 167, 168, 180, 185, 195, 196, 214, 225, 228, 229, 241, 245, 246, 255, 256, 258, 261, 288, 297, 298, 301, 305, 307, 308, 324, 339, 348, 352, 353, 354, 359, 360, 362, 363, 365, 366, 368, 369, 370, 372, 376, 377, 378, 380, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 410, 416, 423, 424, 425, 427, 429, 431, 432, 436, 439, 442, 462, 463, 483, 484, 498, 509, 512, 514, 521, 526, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 545, 553, 555, 557, 563, 564, 566, 568, 578, 585, 586, 595, 602, 607, 608, 623, 633, 634, 641, 643, 644, 651, 652, 653, 654, 655, 667, 671, 674, 675, 678, 690, 691, 693, 697, 709, 710, 725, 728, 730, 747, 751, 752, 753, 754, 763, 764, 766, 770, 773, 774, 781, 782, 800, 803, 817, 821, 830, 831, 836, 840, 842, 844, 845, 860, 861, 864, 867, 870, 878, 879, 880, 881, 882, 884, 886, 890, 891, 922, 936, 941, 942, 944, 947, 948, 949, 952, 953, 954, 955, 958, 959, 960, 962, 964, 965, 966, 967, 968, 972, 978, 980, 984, 985, 987, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "unknown": [4, 16, 55, 166, 255, 312, 314, 354, 360, 377, 386, 397, 838, 844, 845, 917, 951, 962, 978, 998, 1002, 1006, 1007], "sake": [4, 122, 162, 166, 196, 337, 339, 372, 375, 645, 674], "simplic": [4, 13, 31, 337, 339, 377, 395, 955, 956, 957, 967], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 70, 98, 109, 115, 116, 117, 118, 129, 132, 143, 149, 154, 162, 166, 168, 172, 175, 177, 185, 226, 227, 228, 235, 236, 237, 241, 242, 253, 255, 256, 262, 267, 275, 288, 294, 306, 307, 309, 314, 326, 337, 338, 346, 353, 360, 363, 364, 365, 366, 369, 370, 372, 375, 377, 389, 392, 393, 397, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 478, 542, 551, 564, 633, 648, 650, 664, 668, 770, 773, 774, 781, 783, 792, 793, 794, 796, 849, 851, 870, 941, 948, 949, 958, 967, 968, 973, 975, 976, 978, 980, 983, 985, 986, 987, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "hyper": [4, 70, 249, 255, 260, 294, 324, 348, 366, 375, 376, 377, 384, 393, 396, 398, 619, 620, 774, 781, 783, 827, 947, 948, 952, 955, 966, 967, 978, 989, 994, 1008], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 34, 44, 54, 57, 59, 60, 61, 70, 71, 72, 78, 80, 81, 91, 95, 112, 114, 118, 123, 124, 135, 136, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 175, 176, 177, 178, 180, 181, 183, 184, 185, 187, 188, 195, 196, 198, 200, 201, 204, 205, 213, 214, 221, 222, 225, 227, 230, 231, 234, 240, 241, 242, 243, 245, 246, 249, 254, 255, 256, 257, 259, 260, 263, 266, 267, 268, 270, 275, 277, 281, 282, 288, 291, 292, 294, 297, 298, 299, 305, 306, 308, 309, 316, 319, 321, 326, 329, 333, 334, 335, 337, 338, 339, 342, 343, 344, 345, 348, 352, 353, 354, 355, 357, 358, 360, 367, 369, 370, 371, 372, 373, 375, 384, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 949, 951, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 968, 972, 973, 979, 981, 983, 984, 985, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "pipelin": [4, 31, 54, 57, 70, 73, 75, 85, 115, 119, 140, 142, 147, 161, 162, 167, 168, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 224, 225, 226, 230, 235, 238, 248, 252, 254, 262, 269, 271, 275, 277, 283, 284, 291, 294, 299, 302, 305, 306, 307, 308, 309, 316, 337, 338, 348, 352, 355, 357, 359, 360, 365, 367, 377, 393, 397, 399, 403, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 462, 477, 490, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 585, 586, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 672, 673, 675, 676, 687, 768, 769, 770, 773, 774, 783, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 942, 948, 955, 956, 961, 962, 966, 967, 972, 973, 974, 976, 979, 981, 989, 994, 995, 997, 998, 999, 1000, 1001], "make_pipelin": [4, 31, 57, 85, 115, 119, 129, 142, 143, 161, 162, 166, 167, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 225, 226, 227, 235, 236, 252, 262, 275, 284, 291, 299, 302, 305, 306, 307, 308, 309, 338, 348, 376, 390, 393, 542, 651, 653, 823, 831, 855, 856, 858, 859, 860, 861, 870, 871, 872, 873, 875, 876, 942, 955, 962, 966, 967, 997, 1004, 1007], "ordinalencod": [4, 119, 129, 168, 196, 359, 377, 396, 556, 807, 839, 844, 954, 962, 1002, 1003, 1006, 1007, 1008], "compos": [4, 5, 25, 68, 69, 70, 74, 85, 112, 119, 129, 164, 166, 168, 196, 198, 214, 227, 236, 306, 308, 309, 355, 376, 378, 389, 390, 393, 399, 490, 587, 951, 994], "columntransform": [4, 69, 70, 129, 166, 168, 196, 214, 227, 236, 306, 308, 309, 357, 359, 375, 376, 441, 442, 604, 836, 941, 942, 973, 989, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "ensembl": [4, 7, 10, 26, 27, 31, 55, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 161, 162, 167, 168, 169, 196, 218, 225, 233, 234, 236, 237, 252, 267, 273, 299, 305, 306, 307, 308, 337, 348, 352, 355, 368, 369, 376, 377, 387, 389, 393, 398, 413, 479, 490, 554, 607, 608, 610, 633, 773, 774, 797, 801, 832, 835, 844, 874, 878, 880, 881, 941, 952, 953, 958, 959, 968, 972, 973, 974, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001], "histgradientboostingregressor": [4, 7, 119, 122, 123, 126, 129, 161, 167, 196, 305, 306, 307, 308, 368, 396, 535, 554, 607, 608, 610, 942, 959, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "cross_valid": [4, 119, 129, 166, 198, 257, 258, 365, 376, 550, 792, 793, 952, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007], "categorical_column": [4, 166, 168, 442], "ordinal_encod": [4, 119], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 56, 61, 68, 73, 75, 85, 88, 97, 98, 100, 102, 104, 105, 108, 129, 133, 143, 155, 162, 164, 166, 167, 168, 172, 188, 196, 197, 204, 210, 212, 214, 218, 221, 225, 227, 230, 232, 242, 252, 253, 256, 275, 277, 283, 284, 285, 297, 298, 299, 300, 301, 302, 305, 306, 324, 327, 337, 339, 348, 355, 359, 360, 361, 362, 365, 366, 369, 373, 377, 385, 387, 388, 389, 391, 394, 396, 397, 398, 399, 409, 413, 417, 418, 419, 421, 422, 424, 427, 439, 440, 441, 442, 456, 457, 458, 459, 462, 463, 470, 478, 483, 484, 489, 490, 499, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 532, 534, 536, 539, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 611, 613, 614, 615, 616, 617, 628, 633, 638, 648, 651, 659, 663, 664, 665, 666, 667, 669, 687, 726, 727, 758, 770, 773, 774, 783, 797, 800, 806, 815, 820, 823, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 870, 872, 875, 876, 899, 901, 941, 942, 944, 946, 948, 949, 952, 953, 956, 966, 967, 969, 972, 973, 974, 978, 983, 984, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "remaind": [4, 119, 166, 185, 196, 198, 214, 342, 390, 439, 442, 994, 1001, 1002, 1003, 1006, 1007], "passthrough": [4, 71, 119, 166, 196, 214, 390, 439, 442, 542, 543, 830, 831, 962, 1003, 1005, 1008, 1009], "categorical_featur": [4, 70, 119, 307, 308, 309, 369, 396, 536, 537, 1002, 1006], "across": [4, 60, 66, 84, 135, 166, 185, 190, 218, 250, 255, 275, 297, 302, 366, 373, 377, 383, 388, 389, 393, 397, 401, 413, 416, 425, 427, 429, 432, 435, 437, 444, 447, 449, 462, 465, 466, 469, 471, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 542, 543, 563, 566, 569, 577, 582, 583, 585, 586, 607, 608, 609, 614, 615, 616, 617, 621, 622, 625, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 651, 653, 654, 660, 661, 664, 665, 666, 667, 668, 669, 670, 678, 679, 691, 704, 730, 761, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 816, 820, 827, 828, 829, 836, 840, 841, 848, 849, 851, 859, 862, 863, 865, 866, 870, 871, 872, 875, 878, 879, 906, 907, 923, 926, 941, 948, 950, 952, 962, 966, 968, 973, 976, 987, 994, 997, 1000, 1001, 1002, 1003, 1004], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 57, 60, 69, 91, 95, 97, 98, 101, 103, 105, 113, 115, 119, 120, 121, 122, 129, 152, 155, 157, 158, 162, 176, 184, 185, 188, 193, 196, 197, 204, 205, 206, 214, 217, 218, 232, 234, 240, 241, 242, 243, 246, 250, 253, 254, 255, 256, 257, 258, 263, 266, 269, 275, 280, 285, 288, 292, 294, 297, 299, 305, 316, 320, 324, 334, 337, 338, 339, 352, 360, 365, 366, 370, 371, 375, 390, 393, 397, 401, 483, 508, 572, 585, 586, 754, 897, 902, 914, 952, 959, 967, 983], "cv_result": [4, 70, 253, 254, 256, 258, 783, 794, 952], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 57, 59, 69, 70, 71, 72, 73, 77, 81, 85, 103, 109, 112, 118, 119, 121, 122, 128, 129, 136, 137, 142, 143, 145, 146, 161, 164, 167, 168, 169, 172, 187, 188, 191, 196, 198, 202, 204, 212, 214, 225, 230, 231, 234, 244, 245, 248, 253, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 271, 273, 282, 283, 284, 291, 292, 293, 294, 299, 302, 305, 306, 307, 308, 312, 313, 315, 316, 324, 332, 337, 338, 342, 348, 360, 365, 366, 369, 376, 377, 383, 384, 386, 387, 388, 390, 392, 394, 396, 398, 405, 407, 408, 413, 419, 422, 424, 427, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 477, 479, 507, 511, 516, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 584, 585, 586, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 715, 728, 729, 730, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 773, 774, 783, 788, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 816, 817, 818, 820, 821, 822, 827, 828, 829, 831, 851, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 909, 941, 944, 948, 950, 955, 958, 960, 962, 966, 973, 981, 983, 985, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "neg_mean_absolute_error": [4, 129, 198, 952], "neg_root_mean_squared_error": [4, 952], "mae": [4, 74, 129, 166, 196, 198, 533, 540, 718, 879, 881, 952, 968, 1001, 1002, 1006, 1007], "test_neg_mean_absolute_error": [4, 129, 198], "rmse": [4, 80, 723, 1005], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 57, 59, 60, 62, 66, 69, 70, 72, 73, 79, 84, 85, 91, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 121, 123, 135, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 167, 168, 169, 172, 180, 181, 182, 183, 187, 188, 191, 192, 196, 198, 199, 203, 204, 211, 212, 214, 218, 219, 222, 227, 229, 231, 234, 243, 249, 253, 254, 255, 256, 258, 260, 263, 264, 268, 275, 279, 286, 288, 292, 293, 294, 299, 302, 305, 306, 307, 309, 312, 313, 316, 324, 337, 338, 339, 342, 346, 348, 352, 359, 360, 363, 366, 372, 377, 390, 393, 396, 397, 399, 439, 442, 443, 447, 453, 474, 477, 487, 516, 519, 524, 525, 534, 535, 536, 537, 539, 540, 544, 545, 551, 558, 559, 563, 564, 566, 587, 592, 605, 621, 622, 624, 625, 627, 628, 629, 631, 635, 636, 637, 638, 641, 642, 651, 652, 659, 687, 691, 710, 766, 768, 769, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 793, 794, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 828, 829, 830, 831, 832, 833, 841, 847, 851, 858, 868, 869, 870, 871, 872, 875, 883, 894, 914, 920, 942, 952, 953, 954, 955, 960, 968, 978, 982, 983, 985, 986, 987, 994, 996, 1002, 1003, 1005], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 57, 70, 72, 85, 116, 117, 142, 146, 149, 150, 151, 153, 158, 167, 168, 176, 180, 182, 188, 196, 198, 202, 211, 212, 214, 218, 229, 231, 253, 255, 256, 258, 261, 263, 266, 275, 291, 316, 337, 338, 339, 960, 983], "std": [4, 11, 12, 37, 46, 50, 54, 60, 65, 78, 80, 81, 96, 97, 98, 116, 118, 119, 129, 136, 158, 161, 162, 166, 176, 181, 205, 229, 253, 254, 255, 257, 258, 260, 263, 265, 269, 270, 315, 327, 338, 348, 377, 389, 393, 396, 490, 581, 584, 851, 861, 962, 986, 1002, 1006], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 57, 69, 74, 79, 84, 91, 95, 98, 100, 103, 105, 106, 112, 113, 116, 120, 129, 131, 141, 146, 149, 153, 158, 167, 176, 192, 196, 197, 211, 213, 214, 217, 228, 229, 230, 232, 240, 242, 243, 253, 255, 258, 260, 261, 262, 264, 275, 280, 294, 299, 301, 302, 307, 313, 332, 346, 352, 359, 362, 363, 365, 368, 373, 380, 386, 387, 389, 392, 393, 394, 395, 396, 397, 399, 400, 420, 421, 422, 423, 425, 444, 446, 449, 453, 463, 490, 491, 492, 493, 498, 503, 513, 515, 516, 522, 532, 533, 534, 535, 538, 539, 540, 541, 563, 564, 565, 566, 582, 583, 589, 602, 624, 646, 654, 667, 671, 674, 680, 681, 728, 775, 777, 779, 784, 785, 788, 807, 811, 812, 816, 836, 862, 864, 878, 879, 880, 881, 909, 910, 911, 927, 931, 932, 941, 944, 946, 948, 949, 952, 953, 954, 955, 956, 958, 959, 962, 964, 966, 967, 968, 978, 985, 987, 994, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "044": [4, 253, 724, 952], "003": 4, "068": [4, 255], "005": [4, 121, 133, 255, 259, 280, 297, 338, 370], "quit": [4, 85, 113, 135, 146, 166, 194, 263, 308, 337, 352, 369, 376, 389, 397, 947, 949, 954, 976, 1002], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 57, 73, 80, 85, 105, 118, 121, 122, 150, 154, 161, 166, 185, 196, 197, 202, 211, 222, 225, 229, 234, 241, 243, 249, 255, 257, 261, 270, 294, 307, 312, 317, 324, 337, 338, 348, 352, 353, 354, 364, 366, 367, 370, 375, 377, 383, 386, 387, 389, 391, 393, 394, 396, 397, 398, 399, 413, 415, 420, 509, 534, 536, 537, 565, 605, 615, 622, 631, 633, 634, 636, 665, 669, 696, 704, 715, 737, 796, 864, 907, 941, 947, 948, 949, 952, 953, 955, 956, 957, 959, 960, 962, 966, 967, 968, 973, 976, 978, 982, 985, 987, 1000], "trial": [4, 260, 435, 646, 768, 769, 948, 1000], "without": [4, 5, 13, 24, 36, 42, 55, 66, 67, 74, 100, 121, 124, 126, 129, 142, 146, 156, 164, 166, 167, 185, 204, 225, 229, 232, 235, 237, 249, 256, 260, 262, 276, 289, 297, 298, 302, 305, 338, 354, 360, 361, 363, 365, 366, 368, 369, 370, 373, 375, 376, 377, 383, 389, 390, 394, 396, 397, 398, 399, 410, 415, 417, 444, 449, 470, 479, 490, 507, 509, 530, 531, 538, 553, 555, 586, 602, 609, 614, 634, 667, 675, 754, 773, 774, 775, 781, 783, 796, 797, 813, 820, 824, 830, 831, 834, 837, 840, 841, 843, 847, 848, 849, 851, 855, 870, 886, 920, 921, 941, 942, 946, 948, 949, 952, 955, 958, 962, 966, 967, 968, 972, 973, 978, 979, 987, 991, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009], "tune": [4, 44, 70, 100, 145, 149, 161, 167, 185, 201, 213, 221, 249, 260, 277, 298, 324, 337, 348, 352, 354, 376, 377, 384, 388, 389, 393, 396, 398, 399, 427, 437, 534, 535, 569, 588, 589, 590, 592, 594, 595, 597, 598, 600, 618, 634, 665, 669, 827, 946, 947, 948, 949, 951, 952, 955, 956, 958, 966, 979, 989, 994, 1008], "just": [4, 31, 69, 85, 95, 119, 146, 186, 193, 218, 230, 255, 262, 266, 291, 324, 337, 338, 348, 360, 364, 365, 366, 368, 369, 370, 372, 375, 376, 377, 386, 389, 390, 393, 396, 398, 399, 401, 443, 508, 517, 521, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 553, 558, 559, 564, 585, 586, 621, 627, 632, 633, 635, 637, 641, 642, 643, 651, 652, 653, 820, 828, 829, 834, 843, 941, 948, 951, 952, 953, 956, 960, 962, 966, 973, 985, 994, 998, 1000, 1002, 1006], "had": [4, 9, 47, 122, 154, 297, 308, 348, 365, 397, 400, 420, 474, 942, 952, 976, 978, 994, 995, 1001, 1002, 1003, 1004, 1005, 1009], "explicit": [4, 164, 172, 224, 238, 352, 353, 354, 364, 375, 377, 378, 390, 397, 403, 447, 473, 476, 477, 516, 526, 527, 613, 614, 616, 651, 770, 771, 777, 815, 823, 831, 870, 875, 918, 920, 944, 946, 948, 952, 962, 968, 972, 994, 998, 1003, 1004, 1007], "them": [4, 5, 8, 32, 39, 40, 49, 55, 59, 64, 65, 69, 70, 85, 95, 97, 100, 109, 110, 111, 141, 146, 149, 161, 162, 166, 167, 168, 172, 175, 191, 197, 198, 214, 229, 235, 253, 255, 256, 258, 277, 297, 308, 316, 324, 339, 346, 352, 354, 360, 365, 366, 367, 368, 372, 375, 377, 378, 379, 383, 387, 388, 389, 390, 393, 394, 396, 397, 399, 420, 425, 432, 439, 442, 467, 468, 483, 521, 542, 543, 544, 545, 582, 583, 591, 595, 596, 599, 607, 614, 639, 667, 741, 744, 747, 751, 752, 753, 754, 762, 770, 783, 790, 796, 835, 845, 849, 851, 860, 861, 867, 878, 879, 941, 942, 948, 951, 952, 953, 955, 956, 957, 959, 962, 967, 968, 971, 972, 975, 976, 978, 985, 986, 987, 994, 995, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "But": [4, 9, 197, 198, 255, 297, 365, 375, 389, 392, 395, 437, 719, 878, 879, 941, 952, 967, 973], "much": [4, 6, 7, 9, 19, 25, 39, 40, 79, 81, 91, 98, 105, 115, 122, 123, 129, 130, 131, 149, 161, 162, 166, 167, 168, 169, 172, 193, 194, 198, 229, 255, 257, 258, 261, 266, 293, 298, 302, 307, 308, 324, 329, 337, 338, 348, 352, 354, 360, 365, 366, 369, 372, 375, 376, 380, 388, 391, 392, 393, 394, 395, 396, 397, 398, 422, 423, 470, 509, 510, 511, 513, 534, 535, 536, 537, 633, 634, 641, 643, 651, 652, 653, 667, 752, 753, 773, 774, 787, 846, 863, 870, 941, 944, 947, 948, 949, 951, 952, 953, 955, 956, 958, 960, 964, 965, 967, 968, 973, 976, 982, 983, 985, 986, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "monoton": [4, 25, 108, 133, 164, 167, 214, 228, 306, 387, 536, 537, 610, 611, 669, 680, 847, 858, 872, 875, 949, 953, 962, 967, 1001, 1005], "relationship": [4, 111, 155, 166, 167, 175, 196, 198, 262, 298, 377, 389, 391, 393, 399, 437, 611, 688, 949, 952, 954, 955, 959, 960, 985, 999], "case": [4, 7, 8, 25, 27, 37, 52, 60, 65, 70, 71, 80, 85, 100, 103, 113, 115, 122, 123, 129, 143, 146, 149, 156, 166, 167, 182, 185, 187, 196, 197, 198, 201, 204, 210, 212, 213, 214, 225, 229, 230, 231, 235, 245, 249, 254, 255, 256, 258, 261, 262, 282, 293, 297, 299, 305, 308, 337, 338, 339, 346, 348, 352, 353, 354, 359, 360, 363, 365, 366, 368, 369, 370, 371, 373, 375, 376, 377, 378, 380, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 413, 416, 419, 420, 422, 426, 428, 438, 439, 442, 449, 470, 474, 483, 484, 490, 514, 516, 517, 518, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 556, 557, 568, 569, 572, 577, 581, 584, 585, 586, 600, 603, 605, 607, 622, 623, 628, 631, 632, 633, 634, 636, 638, 641, 643, 644, 647, 649, 650, 651, 655, 657, 658, 659, 660, 661, 662, 674, 677, 682, 683, 686, 692, 694, 695, 696, 699, 701, 702, 707, 708, 711, 715, 716, 718, 719, 721, 723, 726, 727, 729, 736, 751, 754, 756, 758, 761, 765, 767, 769, 770, 773, 774, 783, 787, 791, 792, 793, 794, 795, 796, 798, 800, 808, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 831, 838, 840, 841, 844, 845, 846, 849, 850, 851, 854, 860, 861, 862, 863, 870, 872, 875, 878, 879, 885, 886, 896, 907, 908, 920, 941, 942, 944, 946, 947, 949, 950, 951, 953, 954, 955, 956, 958, 959, 962, 966, 967, 968, 973, 975, 976, 978, 987, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "usual": [4, 40, 77, 78, 80, 121, 122, 124, 129, 167, 182, 196, 197, 249, 252, 255, 257, 264, 265, 298, 308, 324, 348, 352, 353, 362, 363, 365, 366, 368, 372, 375, 376, 377, 386, 389, 390, 393, 394, 396, 397, 398, 425, 431, 513, 515, 517, 522, 534, 535, 558, 582, 583, 605, 615, 633, 634, 641, 643, 651, 652, 653, 667, 699, 731, 795, 799, 834, 843, 870, 907, 941, 942, 944, 947, 948, 949, 951, 952, 953, 956, 957, 958, 959, 962, 966, 967, 968, 978, 984, 985, 1009], "hot": [4, 70, 115, 117, 129, 166, 196, 298, 299, 307, 324, 377, 396, 397, 526, 541, 556, 834, 836, 838, 839, 842, 844, 845, 962, 1002, 1008], "For": [4, 8, 9, 12, 13, 19, 27, 37, 40, 44, 46, 48, 57, 59, 66, 72, 79, 85, 90, 96, 113, 115, 117, 122, 123, 127, 142, 143, 146, 149, 151, 156, 161, 162, 166, 167, 184, 185, 196, 197, 200, 201, 204, 213, 214, 217, 219, 222, 225, 226, 228, 229, 230, 255, 256, 257, 262, 270, 273, 275, 285, 291, 293, 294, 299, 301, 305, 306, 307, 308, 309, 315, 317, 324, 326, 332, 337, 338, 339, 342, 343, 346, 348, 352, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 383, 385, 386, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 408, 413, 416, 418, 420, 422, 424, 425, 426, 429, 431, 432, 433, 435, 436, 437, 440, 441, 443, 447, 449, 456, 457, 458, 463, 470, 472, 478, 489, 490, 498, 507, 509, 513, 515, 516, 519, 522, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 556, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 572, 577, 582, 583, 584, 585, 586, 589, 594, 597, 598, 602, 603, 604, 605, 606, 607, 608, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 667, 668, 670, 674, 678, 680, 681, 702, 703, 711, 714, 715, 736, 742, 751, 756, 757, 760, 761, 770, 771, 772, 773, 774, 776, 777, 778, 779, 783, 791, 792, 793, 794, 795, 796, 798, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 828, 829, 831, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 890, 896, 917, 936, 941, 942, 944, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 966, 967, 968, 971, 975, 976, 978, 985, 986, 987, 994, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "consist": [4, 7, 26, 32, 37, 55, 69, 79, 84, 89, 91, 95, 119, 129, 132, 146, 152, 154, 157, 162, 196, 214, 231, 261, 293, 305, 308, 332, 338, 348, 352, 358, 360, 362, 365, 366, 370, 371, 372, 373, 376, 377, 378, 387, 389, 391, 395, 396, 397, 399, 406, 407, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 464, 471, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 566, 586, 602, 603, 604, 605, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 649, 652, 653, 654, 662, 663, 664, 665, 666, 674, 675, 708, 768, 769, 776, 799, 800, 801, 803, 804, 805, 806, 814, 815, 817, 819, 822, 823, 829, 835, 836, 838, 842, 843, 846, 847, 849, 850, 862, 863, 866, 870, 871, 873, 874, 876, 879, 881, 890, 892, 913, 923, 926, 941, 944, 945, 946, 948, 949, 951, 952, 953, 955, 956, 962, 965, 967, 968, 971, 972, 973, 976, 978, 985, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "scale": [4, 5, 12, 25, 27, 37, 40, 46, 47, 55, 57, 60, 70, 78, 81, 85, 97, 100, 101, 126, 146, 149, 150, 151, 154, 155, 156, 158, 164, 167, 172, 176, 177, 184, 196, 198, 210, 211, 212, 214, 216, 219, 223, 225, 231, 252, 255, 256, 262, 292, 293, 294, 296, 297, 303, 306, 309, 317, 319, 321, 324, 335, 348, 351, 352, 357, 358, 359, 362, 365, 369, 373, 375, 376, 377, 388, 389, 390, 394, 396, 398, 399, 422, 425, 426, 432, 439, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 476, 485, 489, 490, 499, 509, 513, 515, 516, 522, 524, 525, 536, 537, 557, 565, 566, 572, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 607, 616, 619, 620, 621, 622, 624, 627, 633, 634, 635, 636, 637, 647, 649, 651, 652, 653, 656, 662, 663, 664, 665, 667, 669, 674, 677, 690, 720, 730, 732, 742, 748, 750, 770, 783, 786, 797, 799, 809, 811, 812, 828, 829, 832, 835, 840, 841, 843, 846, 848, 849, 851, 855, 856, 857, 859, 860, 862, 863, 870, 871, 872, 873, 874, 875, 876, 893, 928, 929, 930, 941, 944, 945, 948, 952, 953, 954, 955, 956, 960, 966, 967, 973, 976, 978, 985, 986, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 57, 63, 69, 70, 71, 74, 91, 95, 97, 100, 103, 105, 111, 113, 116, 119, 120, 122, 123, 127, 146, 149, 166, 167, 169, 182, 184, 185, 190, 196, 197, 198, 204, 214, 234, 235, 250, 251, 252, 253, 255, 256, 258, 260, 261, 263, 268, 275, 280, 293, 297, 298, 300, 302, 305, 307, 315, 324, 337, 338, 339, 346, 348, 352, 353, 354, 359, 360, 362, 364, 365, 366, 368, 370, 373, 375, 376, 377, 378, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 410, 414, 415, 425, 431, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 467, 469, 470, 472, 479, 483, 484, 506, 507, 511, 512, 513, 514, 515, 518, 522, 524, 526, 527, 528, 529, 532, 534, 535, 536, 537, 539, 540, 542, 543, 564, 565, 577, 578, 581, 585, 586, 588, 597, 602, 603, 604, 607, 608, 621, 624, 627, 628, 630, 633, 634, 638, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 659, 662, 674, 678, 679, 686, 687, 689, 691, 699, 704, 705, 709, 728, 729, 730, 751, 752, 753, 759, 761, 763, 765, 766, 768, 769, 770, 771, 773, 774, 777, 778, 783, 787, 788, 792, 793, 794, 795, 796, 797, 798, 813, 814, 815, 819, 821, 822, 823, 834, 835, 836, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 859, 870, 871, 878, 880, 892, 896, 907, 923, 926, 927, 937, 941, 942, 944, 946, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 966, 967, 968, 973, 982, 987, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "minmaxscal": [4, 5, 142, 172, 218, 292, 307, 354, 390, 439, 856, 942, 962, 996, 999, 1002, 1004, 1005, 1006], "although": [4, 9, 25, 116, 129, 193, 214, 225, 242, 273, 348, 354, 366, 377, 389, 390, 394, 397, 470, 786, 789, 842, 951, 953, 954, 955, 958, 968, 978, 985, 986, 987, 994, 1002, 1009], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 56, 69, 71, 72, 85, 106, 115, 118, 124, 129, 146, 155, 166, 167, 193, 196, 202, 214, 217, 218, 219, 222, 225, 228, 229, 230, 232, 242, 243, 250, 255, 258, 262, 264, 265, 273, 288, 297, 299, 301, 308, 309, 315, 316, 322, 324, 332, 334, 337, 338, 339, 352, 359, 363, 365, 366, 368, 372, 376, 377, 383, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 410, 416, 418, 422, 424, 425, 429, 431, 442, 448, 450, 454, 461, 473, 478, 483, 502, 510, 512, 513, 514, 516, 519, 521, 524, 525, 532, 533, 534, 535, 536, 537, 539, 540, 556, 563, 564, 566, 568, 569, 572, 577, 581, 585, 607, 624, 625, 626, 629, 630, 631, 634, 646, 657, 658, 673, 675, 676, 681, 701, 702, 703, 707, 709, 711, 716, 719, 751, 756, 757, 760, 761, 765, 770, 773, 774, 783, 828, 832, 833, 834, 836, 838, 840, 843, 844, 845, 848, 851, 859, 862, 863, 867, 870, 871, 878, 879, 880, 881, 885, 890, 894, 907, 910, 920, 936, 941, 942, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 960, 962, 966, 967, 968, 987, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 37, 40, 42, 44, 45, 46, 48, 54, 56, 59, 61, 65, 70, 72, 74, 80, 85, 95, 98, 100, 102, 106, 113, 114, 115, 116, 119, 122, 123, 127, 128, 138, 146, 149, 151, 153, 157, 161, 166, 168, 169, 176, 181, 182, 185, 186, 191, 197, 198, 200, 204, 210, 211, 214, 217, 218, 221, 225, 228, 230, 235, 240, 245, 246, 249, 250, 253, 255, 256, 258, 261, 262, 263, 266, 267, 270, 275, 277, 281, 291, 292, 293, 297, 298, 299, 302, 305, 307, 309, 312, 315, 317, 324, 328, 329, 332, 337, 339, 344, 345, 352, 353, 354, 359, 360, 362, 365, 366, 368, 369, 370, 372, 375, 376, 377, 378, 383, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 410, 416, 417, 419, 421, 422, 425, 426, 427, 428, 429, 430, 432, 434, 437, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 454, 463, 483, 484, 486, 488, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 553, 555, 556, 557, 559, 563, 564, 566, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 607, 609, 611, 615, 618, 633, 639, 640, 641, 642, 651, 652, 653, 661, 664, 665, 666, 667, 668, 669, 670, 682, 684, 686, 691, 698, 699, 701, 702, 703, 704, 705, 709, 710, 711, 727, 729, 730, 737, 744, 747, 751, 752, 753, 754, 756, 757, 758, 760, 764, 765, 768, 769, 770, 772, 773, 774, 775, 779, 783, 784, 785, 786, 788, 789, 792, 798, 799, 800, 802, 803, 804, 805, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 835, 836, 844, 845, 848, 849, 859, 863, 867, 870, 872, 875, 878, 879, 880, 881, 882, 883, 890, 891, 906, 907, 909, 913, 919, 923, 926, 942, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 964, 966, 967, 968, 973, 975, 978, 982, 983, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 70, 81, 85, 115, 117, 122, 146, 150, 153, 156, 166, 169, 176, 182, 189, 196, 202, 204, 231, 241, 252, 255, 256, 261, 273, 275, 292, 293, 294, 297, 301, 302, 314, 324, 332, 337, 338, 339, 342, 348, 352, 353, 360, 366, 369, 372, 375, 376, 377, 383, 386, 387, 389, 393, 394, 395, 396, 397, 399, 408, 422, 423, 436, 440, 450, 456, 457, 458, 509, 511, 527, 529, 531, 533, 535, 537, 540, 543, 545, 563, 566, 582, 583, 586, 607, 608, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 651, 652, 653, 654, 655, 664, 674, 683, 686, 687, 695, 696, 697, 719, 736, 758, 761, 765, 770, 783, 795, 799, 804, 805, 814, 817, 819, 821, 822, 823, 829, 840, 841, 849, 851, 855, 856, 858, 859, 860, 861, 871, 873, 876, 879, 881, 918, 942, 944, 945, 946, 947, 948, 949, 950, 952, 953, 955, 957, 959, 962, 967, 968, 976, 1000, 1001, 1003, 1004, 1005, 1006, 1008], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 54, 57, 63, 67, 71, 80, 83, 85, 86, 94, 98, 103, 105, 108, 110, 111, 113, 118, 119, 122, 127, 129, 133, 146, 153, 161, 162, 164, 166, 168, 169, 174, 178, 180, 184, 185, 191, 193, 196, 199, 202, 204, 206, 213, 214, 215, 217, 218, 221, 224, 227, 230, 235, 237, 238, 242, 243, 248, 250, 252, 260, 262, 264, 266, 271, 276, 280, 284, 285, 289, 290, 295, 296, 298, 302, 303, 307, 337, 338, 339, 346, 348, 354, 360, 362, 365, 366, 386, 387, 389, 391, 392, 393, 394, 396, 398, 399, 402, 416, 417, 418, 420, 421, 423, 424, 425, 427, 433, 438, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 464, 477, 479, 487, 489, 497, 499, 503, 506, 512, 526, 527, 536, 537, 538, 540, 546, 614, 619, 620, 628, 630, 632, 633, 638, 641, 643, 651, 652, 659, 670, 679, 686, 689, 704, 711, 716, 759, 769, 770, 783, 797, 804, 813, 817, 820, 824, 828, 831, 832, 839, 840, 841, 843, 846, 847, 848, 849, 851, 856, 859, 872, 874, 875, 941, 944, 945, 946, 948, 949, 951, 952, 953, 954, 955, 956, 958, 962, 963, 966, 967, 968, 971, 972, 985, 986, 994, 996, 1001, 1002, 1007], "onehotencod": [4, 70, 115, 119, 129, 166, 196, 214, 227, 236, 306, 308, 359, 377, 390, 396, 441, 442, 541, 556, 557, 834, 838, 839, 842, 845, 962, 995, 998, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 70, 72, 74, 85, 115, 129, 131, 132, 135, 137, 146, 149, 161, 164, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 225, 226, 227, 228, 233, 236, 251, 258, 263, 268, 269, 273, 294, 298, 299, 305, 306, 307, 308, 309, 316, 337, 348, 352, 354, 355, 364, 365, 366, 370, 372, 373, 376, 377, 390, 396, 414, 440, 512, 514, 517, 518, 520, 521, 523, 542, 543, 544, 545, 572, 606, 607, 609, 610, 613, 615, 616, 617, 618, 675, 761, 783, 792, 793, 794, 802, 803, 804, 805, 829, 846, 850, 870, 871, 874, 877, 902, 944, 947, 948, 952, 953, 958, 960, 962, 966, 982, 983, 985, 987, 994, 995, 996, 997, 998, 999, 1000, 1001], "ridgecv": [4, 74, 129, 146, 166, 233, 377, 396, 543, 618, 647, 650, 948, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 279, 280, 281, 282, 284, 285, 286, 287, 288, 291, 294, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 343, 344, 345, 346, 348, 352, 358, 359, 360, 363, 365, 366, 367, 368, 370, 372, 373, 375, 376, 377, 380, 382, 383, 385, 386, 389, 390, 393, 394, 395, 396, 397, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 435, 437, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 459, 464, 467, 468, 470, 474, 478, 481, 483, 484, 506, 509, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 544, 545, 556, 557, 563, 564, 566, 602, 603, 604, 605, 606, 607, 618, 621, 622, 624, 627, 628, 632, 633, 634, 635, 636, 637, 638, 641, 643, 645, 647, 651, 652, 653, 659, 663, 666, 667, 668, 670, 674, 676, 677, 680, 681, 683, 686, 688, 699, 700, 707, 708, 711, 712, 727, 729, 741, 746, 752, 754, 755, 756, 761, 762, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 797, 799, 800, 803, 804, 806, 807, 808, 809, 810, 811, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 834, 835, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 872, 873, 875, 876, 878, 893, 911, 912, 913, 916, 917, 921, 923, 926, 939, 941, 942, 947, 948, 950, 952, 953, 955, 958, 962, 964, 967, 971, 973, 975, 978, 981, 982, 983, 985, 986, 987, 994, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 91, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 279, 280, 281, 282, 284, 285, 286, 287, 288, 291, 294, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 343, 344, 345, 346, 348, 352, 359, 360, 365, 366, 369, 370, 373, 375, 377, 386, 389, 390, 393, 394, 395, 396, 397, 399, 402, 404, 406, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 435, 437, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 459, 470, 471, 474, 483, 484, 495, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 532, 533, 534, 535, 536, 538, 539, 540, 541, 544, 545, 556, 557, 560, 561, 563, 564, 568, 569, 572, 581, 584, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 616, 618, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 645, 646, 647, 649, 650, 651, 652, 653, 656, 657, 658, 659, 666, 667, 670, 676, 677, 680, 681, 683, 686, 688, 689, 699, 700, 707, 708, 711, 712, 727, 729, 736, 741, 742, 746, 751, 754, 755, 756, 761, 762, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 803, 804, 806, 807, 808, 809, 810, 811, 812, 816, 817, 818, 819, 821, 822, 823, 827, 828, 835, 836, 838, 844, 845, 846, 847, 848, 850, 851, 858, 859, 862, 863, 865, 866, 867, 870, 872, 873, 875, 876, 878, 879, 880, 881, 888, 890, 891, 893, 895, 896, 905, 912, 916, 917, 919, 921, 923, 926, 928, 929, 930, 941, 942, 947, 948, 950, 952, 953, 955, 956, 958, 962, 963, 964, 966, 967, 968, 978, 982, 983, 985, 986, 987, 995, 997, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "one_hot_encod": [4, 119], "handle_unknown": [4, 70, 115, 119, 129, 168, 227, 236, 306, 309, 844, 845, 962, 998, 1002, 1006, 1007], "ignor": [4, 6, 8, 17, 44, 49, 61, 70, 95, 112, 115, 119, 129, 157, 184, 188, 196, 205, 211, 227, 236, 246, 292, 293, 306, 309, 329, 338, 343, 365, 366, 368, 370, 377, 380, 389, 390, 396, 397, 406, 407, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 436, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 457, 458, 462, 474, 478, 483, 484, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 526, 532, 533, 534, 535, 538, 539, 540, 541, 553, 556, 557, 558, 563, 564, 565, 566, 577, 578, 602, 603, 604, 605, 607, 608, 610, 614, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 651, 652, 653, 663, 664, 665, 666, 667, 681, 687, 688, 699, 702, 703, 711, 728, 729, 736, 742, 747, 751, 756, 757, 760, 761, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 815, 816, 817, 819, 820, 823, 830, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 904, 927, 948, 949, 952, 954, 958, 962, 967, 983, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "spars": [4, 7, 12, 13, 17, 39, 40, 54, 76, 82, 93, 107, 115, 119, 127, 164, 174, 191, 195, 212, 215, 229, 231, 256, 275, 306, 309, 332, 336, 339, 340, 346, 352, 357, 359, 360, 361, 365, 366, 367, 368, 369, 375, 376, 377, 388, 389, 390, 396, 397, 399, 400, 404, 414, 416, 418, 419, 420, 422, 424, 425, 426, 427, 428, 432, 434, 435, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 461, 462, 463, 470, 471, 478, 483, 498, 499, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 556, 557, 560, 561, 563, 564, 565, 566, 568, 569, 578, 579, 580, 581, 582, 583, 584, 604, 605, 606, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 686, 687, 688, 702, 703, 704, 707, 711, 712, 713, 727, 728, 733, 734, 736, 740, 741, 751, 752, 753, 754, 756, 757, 758, 760, 767, 770, 773, 774, 783, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 838, 840, 841, 842, 843, 844, 846, 848, 849, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 888, 889, 890, 891, 896, 904, 907, 908, 911, 912, 913, 917, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 938, 942, 945, 948, 949, 950, 952, 953, 955, 965, 967, 968, 973, 974, 985, 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 55, 59, 64, 81, 85, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 118, 122, 126, 128, 129, 130, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 166, 175, 176, 177, 178, 180, 181, 182, 184, 185, 190, 191, 193, 194, 196, 197, 198, 200, 201, 205, 208, 209, 214, 217, 218, 221, 231, 237, 240, 255, 256, 257, 258, 259, 262, 263, 265, 267, 268, 270, 273, 275, 278, 280, 283, 285, 291, 293, 297, 298, 299, 300, 302, 306, 308, 309, 314, 316, 321, 322, 325, 326, 329, 333, 334, 337, 352, 360, 366, 370, 375, 391, 392, 394, 396, 398, 399, 401, 446, 447, 453, 502, 506, 508, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 535, 570, 571, 573, 586, 588, 590, 591, 598, 606, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 662, 696, 721, 806, 807, 808, 810, 828, 829, 866, 878, 879, 880, 881, 941, 947, 948, 952, 954, 956, 960, 965, 966, 967, 968, 982, 985, 987, 991, 994, 996, 997, 998, 999, 1001, 1002, 1006, 1007, 1008, 1009], "logspac": [4, 12, 72, 77, 103, 135, 136, 146, 150, 155, 166, 189, 200, 201, 229, 231, 244, 256, 268, 270, 279, 291, 299, 324, 332, 941, 947, 948, 982, 983, 985], "naive_linear_pipelin": 4, "_encod": [4, 119, 309, 1002], "815": [4, 119, 306, 309, 310], "renam": [4, 119, 256, 309, 365, 368, 389, 417, 421, 422, 434, 446, 447, 453, 511, 528, 529, 530, 531, 844, 994, 995, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "sparse_output": [4, 119, 309, 541, 838, 842, 844, 854, 962, 1009], "remov": [4, 5, 14, 16, 17, 45, 49, 54, 69, 74, 89, 95, 101, 102, 119, 121, 123, 124, 146, 161, 162, 166, 169, 180, 193, 195, 204, 214, 256, 297, 305, 306, 307, 309, 337, 338, 342, 348, 357, 360, 364, 365, 368, 369, 373, 377, 389, 390, 393, 396, 397, 399, 400, 413, 415, 418, 420, 422, 434, 447, 462, 463, 474, 509, 510, 512, 514, 516, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 553, 554, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 586, 605, 607, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 644, 646, 647, 648, 649, 650, 651, 655, 667, 674, 795, 818, 830, 831, 835, 836, 844, 848, 849, 851, 859, 873, 874, 876, 878, 879, 880, 881, 885, 901, 902, 904, 915, 942, 949, 955, 968, 974, 979, 989, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "sparse_out": [4, 119, 309], "unless": [4, 119, 241, 246, 257, 309, 353, 365, 366, 367, 375, 377, 389, 392, 400, 413, 420, 423, 425, 427, 432, 433, 436, 439, 442, 447, 463, 470, 474, 483, 484, 506, 510, 511, 512, 514, 517, 518, 520, 521, 523, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 586, 607, 609, 614, 621, 622, 626, 627, 628, 630, 632, 633, 634, 636, 638, 640, 641, 643, 651, 654, 663, 664, 665, 666, 667, 668, 669, 683, 688, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 817, 819, 821, 822, 824, 825, 828, 829, 830, 833, 855, 856, 858, 859, 860, 861, 865, 866, 878, 879, 880, 881, 886, 890, 891, 907, 920, 948, 951, 953, 994, 996, 1000, 1002, 1005, 1006], "leav": [4, 115, 119, 123, 169, 214, 262, 309, 346, 348, 352, 362, 364, 369, 377, 389, 396, 399, 417, 418, 421, 438, 478, 532, 533, 534, 535, 536, 537, 539, 540, 541, 648, 650, 772, 776, 777, 778, 779, 787, 788, 811, 812, 859, 878, 879, 880, 881, 941, 949, 955, 959, 968, 982, 985, 994, 1001, 1003, 1005, 1006], "142": [4, 48, 57, 205, 215, 271, 396], "014": [4, 338, 370], "184": [4, 182, 196, 241, 247, 294, 370, 985], "020": [4, 960], "three": [4, 7, 26, 40, 41, 45, 46, 56, 57, 77, 89, 90, 110, 115, 116, 119, 121, 130, 131, 132, 143, 157, 166, 167, 188, 193, 196, 198, 205, 207, 231, 240, 243, 306, 328, 358, 362, 380, 386, 389, 393, 394, 395, 397, 426, 437, 472, 683, 909, 945, 947, 949, 952, 955, 962, 966, 967, 971, 978, 986, 994], "higher": [4, 79, 98, 103, 113, 115, 122, 149, 151, 156, 157, 167, 168, 172, 196, 197, 214, 221, 222, 246, 249, 253, 255, 258, 269, 280, 324, 337, 338, 339, 348, 352, 360, 363, 366, 386, 389, 391, 396, 398, 399, 400, 420, 423, 424, 446, 453, 484, 507, 514, 518, 523, 528, 529, 532, 533, 534, 535, 536, 537, 539, 540, 541, 548, 563, 566, 582, 583, 594, 602, 606, 610, 612, 621, 622, 627, 628, 635, 636, 637, 638, 651, 653, 654, 678, 697, 701, 725, 758, 768, 770, 773, 774, 783, 790, 795, 798, 817, 820, 846, 862, 863, 864, 872, 873, 874, 875, 876, 883, 944, 948, 949, 951, 952, 955, 962, 966, 967, 985, 987, 995, 1000, 1002, 1009], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 53, 55, 57, 73, 74, 95, 97, 98, 105, 127, 142, 143, 149, 151, 153, 154, 161, 162, 172, 184, 185, 217, 218, 219, 221, 222, 229, 230, 231, 246, 258, 283, 294, 298, 313, 330, 337, 339, 348, 360, 362, 364, 365, 366, 368, 369, 375, 377, 386, 390, 393, 394, 396, 397, 399, 400, 401, 410, 417, 419, 420, 421, 422, 425, 434, 438, 439, 440, 450, 456, 457, 458, 467, 468, 469, 474, 476, 494, 506, 509, 510, 512, 513, 514, 515, 516, 518, 519, 528, 529, 530, 531, 534, 536, 537, 538, 540, 542, 543, 544, 545, 548, 556, 559, 569, 582, 583, 589, 605, 607, 613, 616, 617, 618, 624, 646, 667, 671, 701, 736, 742, 796, 817, 831, 835, 836, 839, 840, 844, 845, 847, 848, 849, 851, 859, 862, 863, 864, 867, 872, 875, 888, 890, 891, 895, 896, 923, 926, 945, 946, 948, 949, 951, 952, 955, 958, 963, 964, 965, 966, 969, 972, 976, 978, 987, 997, 998, 1000, 1002, 1004, 1006, 1008], "mere": [4, 255, 377, 798, 966], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 53, 57, 74, 89, 95, 98, 112, 118, 121, 122, 127, 129, 138, 151, 153, 154, 155, 162, 166, 178, 184, 185, 191, 198, 199, 202, 210, 218, 229, 230, 232, 245, 251, 273, 281, 282, 288, 291, 293, 297, 299, 300, 317, 323, 330, 333, 373, 389, 392, 394, 456, 457, 458, 459, 487, 509, 510, 513, 515, 516, 524, 525, 538, 602, 606, 607, 629, 630, 631, 632, 657, 658, 678, 714, 730, 753, 773, 774, 820, 828, 829, 841, 850, 856, 907, 919, 948, 952, 955, 962, 1000, 1003, 1005, 1006, 1009], "properli": [4, 25, 126, 154, 250, 305, 354, 363, 365, 368, 372, 380, 395, 870, 871, 872, 873, 874, 875, 876, 941, 997, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "automat": [4, 8, 12, 46, 62, 64, 70, 103, 135, 145, 175, 240, 241, 253, 256, 297, 306, 316, 326, 355, 360, 363, 365, 366, 368, 372, 377, 380, 385, 389, 390, 391, 394, 396, 397, 398, 425, 427, 431, 437, 439, 440, 442, 470, 473, 490, 516, 524, 526, 532, 536, 539, 563, 566, 569, 577, 618, 620, 621, 622, 627, 628, 633, 634, 635, 636, 637, 638, 641, 642, 643, 647, 649, 650, 651, 653, 656, 659, 662, 663, 666, 670, 772, 786, 789, 797, 807, 828, 829, 832, 833, 835, 844, 845, 862, 863, 870, 872, 875, 878, 880, 884, 896, 923, 926, 941, 943, 946, 951, 956, 962, 966, 968, 972, 973, 982, 994, 997, 998, 999, 1005, 1008, 1009], "term": [4, 13, 14, 25, 57, 100, 113, 119, 122, 154, 184, 185, 196, 198, 200, 210, 213, 214, 253, 257, 291, 308, 332, 337, 339, 354, 355, 365, 366, 368, 375, 383, 388, 389, 391, 393, 394, 396, 399, 419, 422, 424, 427, 434, 437, 499, 510, 513, 515, 519, 522, 524, 563, 564, 565, 566, 579, 582, 583, 607, 608, 615, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 650, 651, 653, 655, 662, 670, 799, 800, 828, 829, 846, 850, 852, 870, 871, 872, 873, 874, 875, 876, 941, 943, 946, 947, 948, 949, 952, 953, 954, 956, 957, 962, 966, 967, 978, 987, 1002, 1008, 1009], "raw": [4, 12, 14, 37, 80, 97, 129, 154, 166, 172, 294, 314, 339, 352, 360, 372, 377, 387, 388, 389, 391, 394, 397, 444, 449, 476, 477, 478, 534, 535, 536, 538, 557, 563, 564, 565, 566, 609, 652, 665, 669, 679, 759, 817, 874, 949, 952, 956, 958, 959, 962, 965, 984, 986, 995, 999, 1002, 1005], "recogn": [4, 29, 35, 85, 117, 164, 197, 308, 370, 389, 397, 477, 672, 687, 797, 875, 952, 978], "increas": [4, 7, 14, 26, 37, 43, 57, 60, 74, 98, 111, 113, 118, 126, 142, 149, 153, 154, 155, 158, 166, 167, 172, 176, 178, 196, 197, 198, 200, 214, 222, 229, 242, 252, 255, 256, 257, 262, 268, 291, 298, 299, 307, 313, 324, 332, 338, 339, 342, 352, 353, 354, 364, 372, 373, 377, 387, 389, 391, 394, 396, 397, 400, 416, 420, 427, 438, 453, 507, 511, 528, 529, 534, 535, 536, 537, 542, 543, 563, 566, 602, 610, 611, 612, 620, 625, 626, 629, 630, 631, 633, 634, 641, 643, 651, 652, 653, 657, 658, 660, 661, 667, 680, 681, 686, 755, 762, 773, 774, 800, 819, 821, 822, 823, 826, 828, 829, 870, 871, 907, 941, 943, 947, 948, 949, 951, 952, 955, 966, 967, 968, 976, 994, 996, 999, 1003, 1005, 1006, 1009], "strong": [4, 164, 166, 167, 174, 189, 193, 200, 202, 214, 215, 231, 388, 394, 396, 399, 499, 624, 647, 945, 946, 948, 949, 951, 959, 967, 985], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 59, 74, 85, 95, 99, 122, 149, 156, 157, 166, 167, 168, 196, 198, 210, 217, 219, 220, 221, 225, 231, 246, 252, 255, 258, 261, 262, 263, 273, 275, 297, 308, 323, 338, 339, 348, 352, 357, 359, 361, 363, 364, 365, 366, 369, 370, 373, 375, 377, 383, 386, 387, 389, 392, 393, 394, 396, 397, 398, 399, 400, 416, 417, 419, 420, 421, 425, 427, 429, 430, 478, 483, 484, 511, 557, 564, 565, 566, 585, 652, 667, 670, 677, 679, 689, 693, 698, 701, 702, 704, 707, 711, 713, 728, 733, 734, 759, 763, 764, 767, 768, 769, 793, 798, 843, 863, 866, 870, 871, 872, 873, 891, 941, 944, 945, 947, 948, 949, 951, 953, 955, 956, 958, 959, 962, 964, 965, 966, 967, 968, 972, 973, 978, 986, 989, 994, 998, 999, 1000, 1002, 1006, 1007], "magnitud": [4, 105, 112, 150, 162, 166, 213, 260, 297, 302, 308, 352, 360, 370, 389, 396, 399, 588, 678, 851, 948, 952, 956, 962, 966, 968, 996, 1003], "discret": [4, 46, 105, 108, 133, 148, 159, 164, 196, 214, 296, 300, 303, 354, 357, 360, 361, 368, 376, 377, 389, 394, 396, 397, 399, 414, 415, 423, 427, 435, 436, 437, 466, 489, 490, 495, 497, 528, 534, 546, 563, 564, 567, 570, 571, 574, 575, 582, 583, 585, 586, 587, 591, 592, 593, 632, 633, 715, 767, 770, 780, 797, 806, 807, 810, 832, 836, 844, 845, 848, 851, 859, 870, 875, 878, 879, 917, 941, 949, 950, 952, 953, 955, 968, 972, 978, 989, 996, 999, 1007, 1008], "manner": [4, 74, 95, 143, 167, 172, 242, 309, 353, 365, 370, 389, 394, 396, 397, 683, 811, 812, 941, 968, 997, 1004], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 62, 66, 116, 117, 123, 124, 166, 168, 211, 214, 242, 264, 284, 315, 337, 338, 339, 359, 366, 373, 377, 389, 390, 393, 396, 397, 416, 425, 429, 431, 439, 442, 470, 524, 525, 526, 528, 529, 532, 533, 534, 535, 536, 537, 539, 540, 541, 585, 608, 609, 610, 641, 643, 651, 672, 683, 727, 755, 770, 772, 783, 794, 799, 800, 803, 809, 818, 823, 828, 842, 844, 845, 854, 870, 872, 878, 879, 880, 881, 895, 907, 917, 918, 948, 953, 976, 985, 1002, 1005, 1006, 1008], "decid": [4, 11, 59, 70, 246, 255, 262, 360, 365, 378, 397, 399, 425, 432, 534, 535, 610, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 646, 656, 659, 768, 813, 814, 815, 817, 819, 821, 822, 823, 834, 951, 958, 976, 1007], "therebi": [4, 393, 396, 944, 1004], "assumpt": [4, 9, 25, 27, 36, 67, 77, 78, 98, 154, 164, 196, 225, 297, 370, 375, 376, 379, 387, 388, 389, 391, 393, 394, 397, 399, 422, 426, 428, 462, 474, 478, 487, 507, 509, 516, 625, 629, 770, 773, 774, 783, 808, 862, 863, 946, 948, 952, 953, 954, 955, 957, 958, 959, 962, 965, 968, 1001, 1007], "impli": [4, 149, 337, 338, 339, 394, 396, 399, 449, 548, 557, 585, 586, 597, 708, 894, 948, 949, 987, 1005], "give": [4, 12, 13, 24, 25, 39, 44, 59, 61, 63, 69, 70, 74, 97, 121, 149, 154, 158, 161, 166, 185, 187, 193, 196, 197, 198, 225, 246, 252, 264, 275, 277, 281, 284, 294, 308, 309, 316, 352, 354, 360, 362, 364, 365, 366, 370, 372, 375, 376, 377, 378, 383, 386, 387, 388, 389, 390, 391, 394, 396, 397, 401, 410, 422, 424, 426, 434, 447, 470, 473, 474, 478, 508, 513, 524, 525, 526, 527, 532, 533, 539, 540, 541, 568, 569, 572, 582, 583, 613, 622, 636, 640, 651, 694, 709, 712, 765, 770, 773, 774, 783, 792, 793, 794, 796, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 848, 849, 851, 859, 948, 952, 955, 956, 957, 959, 960, 962, 966, 967, 968, 972, 976, 978, 980, 985, 986, 987, 994, 998, 1001, 1002, 1004, 1005, 1006, 1008], "lot": [4, 81, 166, 360, 362, 365, 366, 372, 394, 396, 773, 774, 862, 863, 941, 964, 966, 967, 972, 973, 976, 986, 987, 994, 999, 1001, 1002, 1003, 1004, 1006], "addit": [4, 5, 7, 12, 13, 14, 65, 70, 81, 95, 98, 110, 114, 116, 119, 120, 154, 155, 156, 162, 166, 175, 180, 185, 197, 198, 221, 235, 269, 273, 297, 306, 307, 314, 339, 344, 348, 352, 353, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 372, 375, 376, 378, 380, 383, 388, 389, 391, 393, 394, 397, 398, 399, 400, 409, 417, 418, 420, 421, 425, 432, 444, 449, 470, 478, 506, 507, 509, 511, 512, 514, 516, 517, 518, 524, 528, 529, 534, 535, 536, 537, 542, 543, 544, 545, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 586, 587, 594, 603, 605, 606, 610, 613, 614, 615, 616, 617, 618, 619, 620, 645, 662, 663, 667, 673, 674, 676, 715, 731, 732, 761, 768, 769, 800, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 852, 862, 863, 870, 871, 901, 907, 920, 941, 946, 948, 952, 953, 955, 956, 962, 964, 965, 966, 967, 968, 972, 978, 989, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "level": [4, 9, 11, 12, 16, 27, 41, 95, 115, 118, 138, 146, 148, 153, 154, 156, 159, 164, 207, 208, 209, 210, 211, 214, 225, 229, 244, 255, 258, 281, 288, 322, 323, 325, 326, 328, 330, 338, 346, 352, 360, 362, 363, 365, 370, 377, 379, 380, 387, 394, 397, 403, 429, 467, 468, 478, 496, 506, 511, 512, 522, 536, 537, 542, 543, 586, 597, 600, 641, 642, 643, 651, 652, 653, 662, 665, 667, 669, 690, 696, 701, 758, 792, 793, 794, 796, 799, 800, 827, 828, 829, 883, 941, 948, 952, 953, 955, 960, 966, 968, 972, 973, 987, 997, 1005, 1008, 1009], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 143, 147, 370], "131": [4, 13, 55, 110, 370, 952, 995], "rate": [4, 109, 114, 119, 141, 167, 196, 203, 214, 229, 234, 252, 255, 262, 264, 265, 292, 293, 294, 354, 362, 365, 389, 390, 394, 398, 441, 511, 528, 529, 534, 535, 536, 537, 567, 570, 571, 573, 574, 575, 581, 619, 620, 643, 651, 652, 653, 667, 673, 676, 700, 755, 762, 827, 828, 829, 864, 941, 948, 949, 952, 955, 956, 966, 968, 976, 998, 1002, 1003], "better": [4, 5, 9, 19, 24, 31, 50, 73, 74, 77, 78, 79, 80, 85, 89, 95, 98, 113, 121, 122, 129, 141, 153, 154, 155, 157, 158, 161, 167, 168, 176, 182, 185, 196, 197, 198, 204, 211, 213, 214, 221, 230, 231, 245, 249, 255, 258, 261, 264, 265, 294, 301, 309, 324, 332, 337, 338, 339, 342, 348, 352, 360, 364, 365, 366, 369, 370, 372, 377, 379, 383, 387, 389, 391, 393, 394, 395, 396, 397, 399, 424, 425, 513, 515, 522, 534, 535, 536, 537, 582, 583, 605, 646, 652, 667, 683, 698, 707, 712, 715, 736, 769, 796, 806, 807, 808, 809, 810, 811, 812, 817, 828, 829, 848, 849, 859, 862, 863, 870, 871, 920, 941, 942, 944, 945, 946, 948, 949, 951, 952, 954, 955, 956, 960, 962, 965, 966, 968, 973, 975, 976, 980, 982, 987, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "confirm": [4, 85, 113, 119, 122, 168, 196, 198, 258, 261, 339, 368, 941, 962, 1002], "progress": [4, 7, 8, 95, 132, 146, 162, 189, 280, 309, 362, 365, 368, 369, 378, 380, 385, 389, 534, 535, 667, 800, 802, 805, 820, 828, 829, 976, 985, 987, 994, 996, 1003, 1008], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 59, 61, 79, 80, 81, 84, 91, 98, 101, 122, 127, 135, 154, 161, 166, 167, 168, 185, 196, 197, 198, 201, 204, 221, 225, 231, 240, 257, 258, 261, 262, 264, 265, 270, 275, 293, 297, 308, 312, 315, 324, 334, 337, 339, 348, 352, 360, 364, 365, 366, 369, 370, 372, 375, 376, 377, 387, 389, 391, 393, 394, 395, 396, 397, 398, 399, 418, 422, 427, 437, 446, 447, 453, 475, 479, 485, 532, 533, 536, 537, 539, 540, 542, 543, 564, 565, 597, 625, 626, 629, 630, 631, 639, 657, 658, 660, 666, 667, 670, 679, 716, 719, 763, 768, 770, 777, 779, 783, 786, 789, 811, 812, 836, 840, 841, 842, 851, 862, 863, 872, 875, 878, 879, 880, 881, 907, 941, 944, 945, 947, 948, 949, 950, 951, 952, 955, 956, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 971, 972, 973, 975, 976, 985, 986, 994, 999, 1000, 1002, 1005, 1007, 1009], "new": [4, 7, 8, 10, 50, 55, 57, 59, 69, 70, 103, 109, 112, 114, 115, 122, 125, 128, 129, 143, 146, 149, 155, 162, 168, 169, 196, 202, 210, 225, 254, 262, 279, 281, 306, 309, 313, 316, 323, 348, 353, 354, 359, 360, 362, 363, 364, 366, 367, 368, 370, 372, 373, 376, 377, 378, 380, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 483, 484, 485, 487, 498, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 556, 557, 558, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 678, 682, 687, 688, 692, 695, 696, 697, 698, 700, 701, 704, 707, 712, 713, 714, 716, 719, 726, 727, 730, 734, 739, 740, 742, 751, 758, 761, 762, 768, 769, 770, 773, 774, 782, 783, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 856, 858, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 888, 890, 891, 893, 901, 902, 906, 907, 917, 920, 922, 927, 933, 941, 942, 944, 948, 952, 953, 955, 956, 957, 958, 962, 964, 965, 966, 967, 973, 976, 978, 979, 982, 985, 987, 992, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 360, 365, 949, 971], "1440": 4, "caus": [4, 25, 27, 122, 150, 194, 196, 201, 214, 339, 348, 363, 369, 387, 389, 394, 395, 397, 399, 419, 422, 424, 434, 484, 507, 557, 564, 585, 586, 806, 807, 808, 810, 835, 844, 846, 849, 850, 890, 891, 941, 942, 948, 952, 960, 962, 965, 973, 978, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "signific": [4, 122, 142, 164, 248, 255, 271, 273, 337, 348, 359, 360, 375, 389, 392, 393, 396, 479, 507, 509, 524, 525, 602, 633, 634, 641, 643, 651, 652, 653, 788, 796, 870, 872, 873, 874, 875, 876, 951, 952, 955, 994, 996, 997, 998, 1002], "overfit": [4, 115, 122, 164, 168, 175, 214, 225, 242, 248, 250, 256, 260, 270, 271, 291, 298, 299, 301, 324, 342, 344, 345, 360, 377, 387, 393, 396, 413, 462, 463, 542, 543, 632, 770, 773, 774, 783, 793, 794, 828, 829, 831, 846, 850, 947, 956, 958, 960, 968, 976, 985, 997], "avoid": [4, 7, 12, 44, 61, 71, 115, 166, 167, 198, 205, 214, 220, 250, 256, 260, 278, 283, 285, 286, 301, 320, 321, 338, 353, 363, 365, 366, 368, 369, 370, 377, 378, 380, 387, 389, 391, 393, 396, 397, 400, 416, 418, 420, 427, 437, 443, 467, 468, 469, 473, 483, 484, 509, 514, 518, 521, 560, 561, 609, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 664, 666, 668, 670, 686, 770, 771, 775, 780, 783, 792, 793, 794, 831, 834, 840, 841, 843, 848, 849, 850, 851, 853, 855, 856, 857, 859, 860, 861, 863, 868, 907, 946, 949, 951, 952, 955, 956, 958, 960, 962, 967, 968, 973, 987, 989, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "kbinsdiscret": [4, 164, 196, 214, 296, 299, 303, 487, 632, 834, 850, 879, 962, 1002, 1006, 1007, 1008], "re": [4, 8, 13, 26, 55, 69, 70, 119, 152, 214, 241, 258, 260, 306, 337, 339, 353, 365, 368, 372, 376, 378, 393, 397, 444, 445, 446, 447, 448, 449, 450, 451, 530, 531, 536, 537, 538, 621, 627, 635, 637, 772, 786, 789, 878, 879, 880, 881, 948, 953, 955, 962, 967, 973, 976, 987, 994, 998, 999, 1001, 1003], "fine": [4, 37, 118, 212, 246, 253, 344, 345, 362, 368, 377, 397, 907, 955, 958, 973, 1004], "grain": [4, 31, 37, 230, 246, 299, 370, 397, 973], "still": [4, 44, 61, 81, 99, 117, 119, 122, 129, 149, 155, 166, 168, 175, 196, 198, 214, 230, 257, 258, 297, 307, 308, 337, 338, 348, 354, 359, 364, 365, 366, 368, 369, 370, 372, 375, 377, 389, 393, 396, 397, 400, 416, 420, 429, 449, 470, 554, 602, 607, 610, 612, 691, 729, 751, 754, 763, 764, 773, 774, 786, 789, 849, 851, 870, 888, 941, 942, 946, 948, 951, 955, 958, 960, 967, 968, 971, 973, 976, 994, 996, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1009], "express": [4, 7, 12, 149, 154, 166, 255, 256, 307, 321, 339, 359, 360, 365, 370, 389, 394, 397, 425, 431, 432, 563, 564, 566, 690, 770, 783, 792, 793, 794, 795, 798, 818, 948, 952, 956, 962, 963, 968, 1002], "advantag": [4, 5, 39, 95, 100, 196, 197, 225, 241, 256, 309, 348, 377, 387, 393, 394, 397, 399, 417, 421, 435, 509, 564, 624, 649, 650, 736, 799, 800, 801, 831, 832, 870, 871, 872, 873, 874, 875, 876, 941, 944, 947, 948, 949, 952, 953, 955, 956, 962, 966, 967, 968, 997], "final": [4, 26, 40, 42, 45, 69, 70, 79, 81, 85, 90, 100, 109, 111, 113, 115, 119, 120, 123, 129, 132, 143, 154, 162, 172, 175, 184, 185, 193, 196, 198, 213, 214, 218, 225, 244, 253, 261, 264, 305, 306, 324, 352, 354, 363, 365, 368, 376, 377, 386, 387, 389, 390, 393, 396, 397, 413, 418, 422, 423, 427, 434, 437, 439, 511, 530, 531, 542, 543, 545, 602, 622, 628, 634, 654, 665, 669, 693, 770, 799, 800, 831, 832, 867, 870, 941, 942, 948, 949, 952, 955, 958, 959, 962, 965, 976, 985, 999, 1002, 1003, 1004, 1005, 1007], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 61, 70, 77, 79, 80, 81, 96, 97, 100, 103, 109, 113, 114, 116, 122, 125, 128, 137, 138, 146, 149, 152, 154, 155, 156, 158, 166, 167, 168, 175, 176, 191, 192, 194, 196, 197, 198, 200, 210, 214, 221, 222, 228, 229, 255, 258, 262, 281, 288, 302, 315, 323, 324, 329, 337, 338, 339, 344, 345, 360, 362, 377, 387, 389, 390, 391, 392, 393, 394, 395, 398, 399, 417, 419, 421, 422, 424, 434, 444, 445, 446, 447, 448, 449, 450, 451, 499, 507, 526, 527, 538, 585, 586, 621, 627, 632, 690, 692, 731, 790, 809, 817, 850, 948, 951, 952, 956, 957, 958, 959, 965, 966, 967, 968, 975, 979, 981, 982, 984, 995, 1007, 1008], "complet": [4, 37, 38, 39, 44, 49, 52, 57, 61, 85, 127, 141, 143, 146, 164, 168, 169, 202, 224, 225, 238, 253, 305, 338, 348, 360, 365, 368, 369, 372, 375, 390, 393, 394, 396, 397, 417, 421, 424, 427, 437, 438, 439, 442, 469, 511, 512, 513, 514, 519, 521, 533, 544, 545, 556, 562, 563, 564, 566, 602, 603, 604, 605, 624, 632, 646, 648, 678, 679, 689, 690, 691, 704, 709, 710, 730, 759, 766, 799, 802, 805, 814, 830, 831, 832, 833, 893, 937, 941, 946, 948, 952, 953, 955, 967, 968, 978, 987, 994, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "induct": [4, 36, 67, 122, 164, 377, 389, 396, 403, 417, 487, 539, 602, 865, 866, 914, 936, 948, 965, 996], "bia": [4, 27, 77, 108, 116, 117, 122, 133, 164, 167, 168, 175, 176, 178, 200, 260, 291, 332, 348, 360, 377, 387, 391, 395, 396, 399, 499, 531, 534, 535, 582, 583, 589, 617, 623, 624, 633, 634, 644, 645, 655, 828, 829, 844, 846, 850, 855, 856, 858, 859, 860, 861, 879, 947, 948, 951, 952, 956, 957, 960, 966, 985], "preserv": [4, 48, 100, 221, 229, 250, 366, 367, 388, 393, 394, 397, 556, 563, 564, 566, 621, 627, 671, 674, 747, 751, 787, 788, 789, 854, 890, 891, 942, 948, 949, 962, 964, 982, 994, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "smooth": [4, 46, 47, 54, 154, 189, 197, 212, 324, 362, 378, 389, 395, 399, 423, 424, 512, 513, 514, 521, 532, 533, 534, 535, 539, 540, 541, 565, 566, 594, 597, 651, 806, 807, 808, 810, 848, 859, 878, 879, 880, 881, 948, 954, 962, 966, 967, 968, 987], "local": [4, 39, 60, 95, 98, 154, 155, 164, 197, 216, 219, 221, 223, 225, 234, 276, 289, 344, 345, 353, 362, 363, 365, 368, 370, 372, 380, 389, 394, 396, 397, 399, 422, 427, 437, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 477, 513, 515, 519, 522, 524, 534, 535, 538, 541, 585, 586, 663, 664, 665, 666, 667, 668, 670, 671, 731, 732, 814, 817, 820, 822, 832, 841, 863, 866, 874, 950, 951, 955, 956, 968, 986, 988, 989, 998, 1002, 1006], "attempt": [4, 54, 192, 202, 250, 337, 352, 364, 377, 389, 401, 425, 432, 443, 606, 663, 664, 668, 787, 813, 814, 815, 817, 819, 821, 822, 823, 849, 851, 868, 890, 891, 948, 949, 955, 968, 978, 1001, 1006], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 57, 59, 60, 69, 70, 72, 73, 74, 84, 85, 88, 90, 91, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 127, 128, 129, 130, 131, 132, 142, 144, 146, 151, 153, 158, 161, 162, 166, 167, 169, 172, 175, 182, 183, 185, 190, 194, 196, 197, 198, 200, 201, 204, 211, 214, 218, 225, 226, 229, 230, 231, 232, 235, 236, 240, 243, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 264, 273, 275, 278, 280, 284, 286, 288, 291, 292, 294, 297, 298, 299, 300, 305, 307, 308, 309, 312, 313, 314, 317, 324, 330, 332, 338, 339, 342, 343, 346, 348, 352, 353, 354, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 375, 376, 377, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 494, 497, 498, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 681, 682, 684, 687, 693, 698, 701, 702, 703, 711, 712, 718, 719, 721, 723, 724, 726, 727, 731, 732, 735, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 749, 751, 752, 753, 754, 756, 757, 758, 760, 761, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 896, 901, 902, 907, 909, 910, 920, 928, 929, 930, 933, 942, 944, 946, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 976, 978, 982, 984, 985, 986, 987, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "sine": [4, 149, 154, 155, 164, 190, 202, 239, 247, 344, 361, 590, 768, 769, 951, 968], "cosin": [4, 40, 269, 275, 280, 357, 360, 377, 389, 394, 395, 417, 421, 425, 432, 510, 565, 566, 595, 671, 733, 734, 735, 738, 743, 744, 747, 751, 752, 753, 811, 812, 816, 843, 955, 968, 989, 1004], "match": [4, 37, 45, 95, 98, 102, 164, 172, 174, 196, 215, 219, 228, 266, 339, 360, 363, 366, 368, 389, 394, 396, 397, 424, 439, 441, 483, 484, 490, 501, 506, 512, 517, 523, 526, 542, 543, 547, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 633, 639, 640, 660, 661, 674, 677, 678, 679, 687, 689, 693, 707, 759, 811, 812, 816, 820, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 870, 877, 894, 920, 949, 951, 952, 954, 955, 974, 978, 987, 989, 994, 1000, 1001, 1002, 1004, 1006, 1007], "togeth": [4, 12, 51, 59, 70, 118, 129, 149, 155, 166, 177, 218, 221, 309, 327, 343, 348, 366, 368, 375, 376, 377, 383, 389, 396, 397, 404, 426, 428, 542, 543, 664, 689, 770, 783, 831, 832, 948, 949, 953, 959, 962, 968, 969, 976, 979, 981, 1000], "equival": [4, 14, 119, 125, 149, 154, 166, 214, 339, 348, 352, 363, 370, 373, 376, 377, 389, 390, 391, 392, 393, 394, 396, 398, 399, 417, 419, 420, 421, 422, 424, 425, 432, 444, 449, 484, 509, 516, 533, 534, 536, 538, 540, 563, 566, 588, 591, 594, 596, 599, 621, 622, 623, 627, 629, 633, 634, 641, 642, 643, 644, 647, 651, 652, 655, 658, 662, 663, 668, 682, 683, 696, 707, 720, 721, 722, 734, 743, 752, 753, 768, 769, 773, 774, 777, 779, 802, 805, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 828, 834, 840, 841, 843, 846, 847, 848, 849, 851, 858, 860, 861, 894, 905, 938, 941, 946, 948, 949, 950, 952, 958, 962, 966, 967, 968, 1002, 1003, 1004, 1005, 1007, 1008], "importantli": [4, 13, 96, 167, 172, 297, 389], "jump": [4, 197, 297, 362, 365, 397, 850], "functiontransform": [4, 69, 115, 196, 214, 316, 440, 962, 999, 1000, 1002, 1007, 1008, 1009], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 55, 56, 60, 69, 91, 101, 103, 105, 113, 115, 121, 122, 129, 152, 155, 157, 162, 175, 176, 184, 185, 188, 196, 197, 204, 205, 206, 214, 234, 237, 243, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 269, 275, 280, 285, 288, 294, 297, 299, 305, 320, 324, 337, 339, 342, 346, 352, 358, 359, 360, 365, 366, 370, 371, 373, 375, 377, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 912, 913, 914, 915, 916, 917, 918, 921, 922, 923, 924, 925, 926, 927, 933, 936, 937, 938, 939, 940, 942, 952, 955, 959, 960, 967, 968, 973, 978, 983, 985, 987, 991, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "lambda": [4, 7, 8, 10, 19, 55, 72, 121, 136, 176, 214, 255, 256, 301, 316, 385, 389, 394, 396, 397, 619, 620, 621, 622, 835, 847, 948, 962, 982, 1002, 1008], "sin": [4, 13, 19, 39, 96, 111, 121, 122, 126, 128, 141, 149, 155, 156, 158, 175, 176, 190, 197, 202, 219, 231, 246, 287, 298, 306, 331, 344, 345, 399, 491, 590, 674, 737, 986], "pi": [4, 13, 34, 39, 40, 96, 105, 126, 128, 141, 149, 176, 184, 190, 197, 219, 240, 241, 242, 245, 246, 269, 288, 306, 345, 380, 395, 399, 491, 492, 493, 590, 617, 946, 947, 948, 954, 986], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 126, 128, 154, 164, 166, 197, 219, 255, 269, 309, 345, 368, 395, 397, 424, 426, 428, 462, 486, 566, 674, 693, 737, 766, 947, 962, 976, 988, 989], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 61, 68, 75, 85, 98, 100, 122, 124, 126, 149, 150, 154, 156, 164, 166, 167, 169, 196, 197, 198, 201, 202, 216, 221, 223, 241, 255, 256, 260, 263, 294, 296, 298, 303, 306, 311, 318, 324, 329, 332, 333, 334, 337, 338, 339, 348, 363, 365, 366, 369, 375, 377, 387, 389, 390, 394, 395, 396, 397, 399, 400, 425, 440, 464, 470, 475, 489, 499, 500, 532, 533, 534, 535, 539, 540, 541, 563, 564, 565, 566, 581, 584, 624, 633, 634, 647, 648, 649, 662, 666, 667, 677, 726, 758, 768, 775, 780, 788, 797, 817, 828, 829, 835, 840, 841, 843, 847, 848, 849, 851, 856, 859, 867, 870, 871, 875, 878, 879, 880, 881, 890, 891, 907, 926, 941, 946, 948, 949, 951, 952, 953, 959, 962, 965, 967, 968, 983, 985, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "expans": [4, 161, 307, 425, 846, 1003], "synthet": [4, 13, 25, 27, 31, 37, 42, 116, 122, 127, 149, 154, 156, 167, 186, 198, 213, 291, 299, 348, 352, 358, 367, 378, 389, 391, 398, 633, 634, 870, 871, 877, 946, 985, 1000], "beyond": [4, 27, 197, 198, 352, 354, 364, 365, 375, 387, 396, 875, 949, 953, 962, 967, 973, 1002], "pd": [4, 12, 25, 70, 72, 116, 122, 154, 161, 166, 167, 168, 175, 185, 196, 204, 214, 234, 235, 253, 255, 256, 258, 266, 267, 308, 309, 337, 338, 369, 377, 390, 439, 441, 474, 602, 603, 604, 605, 607, 751, 888, 890, 891, 941, 942, 959, 962, 1005, 1007, 1008], "hour_df": 4, "datafram": [4, 25, 69, 70, 72, 119, 122, 154, 161, 166, 167, 168, 175, 185, 204, 214, 235, 253, 255, 256, 258, 266, 267, 308, 309, 337, 338, 359, 360, 365, 369, 377, 390, 439, 441, 442, 463, 464, 465, 466, 470, 475, 476, 477, 479, 480, 485, 544, 545, 602, 603, 604, 605, 606, 607, 608, 609, 770, 773, 774, 783, 797, 886, 913, 923, 926, 941, 942, 973, 987, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "arang": [4, 11, 13, 16, 40, 57, 59, 64, 71, 72, 78, 79, 103, 106, 109, 118, 119, 120, 121, 123, 124, 127, 131, 142, 149, 151, 156, 157, 161, 162, 169, 180, 196, 199, 201, 205, 220, 228, 230, 250, 255, 258, 263, 266, 273, 275, 288, 291, 299, 308, 312, 313, 315, 317, 324, 331, 337, 339, 344, 345, 346, 348, 375, 386, 393, 397, 440, 519, 797, 846, 850, 947, 948, 956, 962, 966, 983], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 57, 71, 79, 84, 95, 98, 105, 113, 117, 118, 125, 127, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 175, 187, 193, 209, 210, 212, 213, 218, 220, 222, 225, 230, 233, 244, 253, 279, 281, 288, 291, 293, 294, 298, 299, 300, 305, 308, 309, 317, 323, 324, 328, 329, 330, 333, 334, 375, 386, 394, 396, 397, 421, 440, 559, 606, 797, 846, 850, 948, 962, 983, 986, 999], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 57, 61, 89, 96, 99, 106, 127, 172, 187, 212, 214, 217, 218, 219, 220, 221, 222, 228, 229, 232, 234, 275, 279, 292, 297, 298, 305, 308, 324, 337, 338, 339, 348, 357, 360, 366, 369, 370, 377, 385, 390, 394, 397, 398, 409, 418, 419, 421, 422, 424, 439, 441, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 541, 542, 543, 544, 545, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 663, 664, 665, 666, 667, 815, 820, 823, 827, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 942, 944, 948, 953, 955, 962, 963, 964, 978, 983, 986, 987, 998, 999, 1000, 1002, 1003, 1004, 1006, 1008], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 60, 61, 67, 93, 107, 127, 164, 190, 197, 202, 217, 219, 222, 225, 228, 229, 321, 324, 359, 361, 365, 366, 373, 377, 389, 390, 394, 397, 399, 417, 427, 437, 439, 442, 462, 464, 465, 466, 467, 468, 474, 475, 476, 477, 479, 485, 489, 508, 516, 524, 559, 561, 610, 618, 632, 647, 666, 711, 752, 792, 796, 800, 838, 886, 890, 891, 906, 917, 938, 939, 946, 948, 949, 952, 959, 963, 968, 978, 984, 994, 998, 1001, 1002, 1003, 1006, 1008], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 52, 55, 56, 57, 58, 59, 61, 66, 74, 79, 85, 89, 90, 91, 97, 99, 100, 101, 102, 104, 111, 112, 118, 125, 127, 128, 129, 130, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 172, 176, 179, 186, 188, 192, 193, 194, 197, 198, 199, 205, 208, 209, 210, 213, 217, 218, 219, 220, 221, 222, 225, 230, 231, 232, 240, 241, 242, 243, 244, 245, 246, 250, 251, 256, 258, 269, 275, 281, 282, 283, 284, 285, 286, 287, 291, 297, 299, 300, 302, 309, 314, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 337, 343, 344, 345, 391, 606, 946, 948, 985], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 42, 44, 45, 46, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 71, 77, 78, 79, 80, 81, 85, 90, 91, 94, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 118, 119, 120, 121, 124, 126, 127, 131, 135, 138, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 166, 168, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 213, 214, 218, 219, 220, 222, 225, 229, 230, 231, 232, 235, 240, 241, 242, 243, 244, 245, 246, 250, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 270, 273, 277, 278, 280, 281, 282, 283, 286, 287, 288, 291, 297, 298, 299, 301, 302, 306, 314, 315, 317, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 343, 344, 359, 360, 362, 372, 389, 396, 397, 422, 467, 468, 481, 558, 559, 752, 926, 966, 968, 999, 1004, 1006], "map": [4, 5, 10, 11, 17, 19, 26, 100, 114, 121, 124, 127, 136, 149, 164, 172, 196, 217, 219, 224, 238, 256, 259, 278, 283, 286, 288, 296, 297, 303, 316, 324, 330, 338, 339, 359, 375, 377, 387, 388, 389, 390, 393, 394, 396, 397, 403, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 470, 472, 477, 484, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 735, 738, 768, 769, 770, 773, 774, 780, 781, 783, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 858, 859, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 912, 941, 944, 949, 952, 954, 964, 967, 1002, 1003, 1004, 1006, 1007, 1008], "space": [4, 8, 10, 19, 31, 46, 48, 57, 59, 60, 62, 64, 69, 73, 85, 95, 97, 104, 106, 115, 118, 122, 127, 143, 149, 155, 172, 197, 217, 218, 219, 221, 229, 230, 231, 234, 235, 241, 246, 263, 266, 267, 275, 284, 285, 299, 307, 337, 338, 339, 346, 348, 352, 357, 360, 361, 362, 365, 371, 375, 376, 377, 386, 388, 389, 392, 394, 395, 396, 397, 399, 419, 422, 423, 424, 427, 437, 439, 440, 441, 442, 456, 457, 458, 472, 507, 509, 510, 513, 514, 515, 516, 518, 519, 524, 548, 557, 563, 564, 566, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 613, 615, 616, 617, 618, 663, 664, 665, 667, 668, 669, 671, 674, 770, 773, 774, 783, 801, 811, 812, 819, 820, 821, 822, 831, 836, 837, 843, 848, 862, 863, 864, 883, 944, 945, 946, 947, 948, 950, 952, 953, 955, 956, 957, 958, 962, 963, 964, 965, 966, 967, 968, 972, 973, 978, 985, 987, 988, 989, 994, 995, 997, 1002, 1003, 1004, 1008], "akin": [4, 197, 377], "sort": [4, 8, 10, 12, 19, 20, 24, 53, 59, 69, 113, 119, 122, 128, 146, 175, 196, 197, 214, 233, 255, 256, 259, 269, 287, 331, 337, 344, 345, 365, 368, 372, 373, 377, 393, 396, 397, 399, 509, 516, 530, 541, 556, 585, 592, 672, 686, 692, 702, 703, 711, 727, 756, 757, 760, 762, 770, 794, 806, 807, 808, 809, 810, 811, 812, 819, 821, 822, 823, 826, 836, 842, 844, 845, 848, 850, 859, 872, 875, 912, 948, 955, 958, 962, 976, 987, 994, 998, 1004, 1005, 1006, 1008, 1009], "analog": [4, 124, 370, 396, 952, 953, 967, 1003], "clock": 4, "25th": [4, 849], "back": [4, 100, 236, 353, 365, 366, 378, 383, 390, 397, 410, 419, 422, 434, 456, 457, 458, 483, 484, 508, 509, 510, 513, 515, 516, 519, 556, 605, 633, 634, 641, 643, 651, 652, 653, 701, 836, 838, 839, 840, 844, 845, 846, 848, 849, 851, 862, 863, 870, 952, 956, 973, 978, 987, 997, 1002, 1004, 1005, 1008], "natur": [4, 31, 122, 156, 166, 167, 172, 196, 197, 213, 214, 221, 240, 246, 337, 365, 366, 377, 394, 396, 397, 400, 420, 425, 432, 526, 565, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 667, 678, 714, 728, 730, 813, 814, 815, 817, 819, 821, 822, 823, 850, 948, 949, 951, 952, 955, 957, 962, 966, 972, 975, 994, 1002], "sp": [4, 166, 942, 986], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 55, 56, 58, 59, 60, 64, 70, 71, 73, 85, 89, 90, 91, 100, 101, 102, 110, 112, 113, 118, 119, 125, 127, 128, 130, 131, 136, 138, 144, 150, 151, 152, 153, 157, 166, 172, 179, 181, 186, 187, 188, 189, 191, 193, 194, 200, 203, 205, 207, 208, 209, 210, 212, 213, 217, 218, 219, 221, 222, 230, 231, 232, 236, 241, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 258, 260, 266, 275, 278, 280, 281, 283, 284, 285, 286, 287, 288, 291, 292, 294, 297, 298, 299, 305, 306, 307, 308, 309, 314, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 337, 343, 344, 345, 353, 359, 360, 362, 365, 366, 367, 369, 372, 373, 375, 380, 386, 387, 389, 390, 392, 393, 394, 398, 413, 418, 419, 422, 424, 434, 443, 498, 503, 509, 513, 515, 516, 522, 524, 525, 565, 582, 583, 585, 606, 614, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 648, 654, 660, 661, 663, 664, 667, 668, 682, 688, 689, 692, 704, 708, 714, 715, 731, 732, 770, 783, 796, 806, 807, 808, 809, 810, 811, 812, 818, 820, 827, 842, 844, 846, 850, 865, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 885, 890, 891, 917, 941, 944, 945, 948, 949, 950, 952, 954, 955, 957, 959, 962, 964, 966, 967, 968, 972, 976, 978, 982, 983, 985, 986, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007], "colorbar": [4, 11, 30, 40, 95, 106, 117, 144, 150, 152, 153, 155, 167, 217, 229, 244, 266, 297, 324, 672, 1006], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 79, 308, 424, 509, 941, 952, 962], "166": [4, 166, 294, 370, 952, 994], "simpl": [4, 16, 27, 70, 74, 77, 84, 85, 95, 120, 156, 164, 197, 213, 237, 256, 276, 289, 309, 320, 337, 339, 343, 348, 363, 365, 366, 367, 368, 369, 371, 375, 376, 377, 378, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 489, 497, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 759, 761, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 944, 946, 947, 948, 949, 951, 952, 955, 962, 964, 966, 968, 973, 976, 978, 987, 991, 994], "wors": [4, 85, 150, 202, 214, 255, 263, 348, 389, 399, 408, 440, 456, 457, 458, 527, 529, 531, 533, 535, 537, 540, 543, 545, 585, 586, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 653, 654, 655, 679, 695, 696, 697, 701, 758, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 952, 962, 1003], "further": [4, 25, 42, 77, 85, 95, 113, 118, 120, 149, 154, 166, 168, 175, 217, 222, 252, 255, 256, 262, 324, 338, 346, 352, 365, 375, 377, 388, 389, 391, 394, 396, 397, 399, 427, 437, 474, 490, 507, 510, 557, 589, 597, 603, 633, 634, 641, 643, 651, 652, 653, 666, 670, 710, 747, 751, 754, 763, 764, 807, 813, 814, 821, 822, 849, 851, 870, 872, 875, 907, 951, 952, 954, 955, 956, 958, 962, 966, 967, 985, 987, 1003, 1007], "analyz": [4, 7, 17, 337, 339, 369, 370, 389, 397, 478, 563, 564, 566, 761, 949, 952, 959, 960, 968, 987, 994, 1003], "reason": [4, 8, 12, 42, 69, 122, 146, 166, 167, 172, 196, 197, 204, 214, 225, 229, 230, 234, 252, 255, 256, 261, 275, 298, 332, 338, 339, 348, 352, 353, 354, 360, 364, 365, 366, 368, 372, 375, 376, 377, 378, 389, 390, 391, 394, 396, 397, 399, 483, 507, 549, 613, 621, 627, 629, 647, 662, 667, 736, 770, 783, 815, 820, 827, 846, 867, 941, 942, 947, 948, 949, 952, 954, 955, 956, 958, 962, 966, 967, 976, 987, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "disappoint": 4, "outcom": [4, 166, 377, 544, 633, 683, 715, 765, 799, 865, 866, 867, 872, 875, 948, 952, 968, 975, 987, 998, 1002, 1004], "end": [4, 11, 26, 52, 73, 80, 85, 115, 129, 201, 204, 243, 250, 255, 257, 259, 307, 308, 312, 315, 316, 338, 363, 365, 366, 368, 375, 377, 380, 386, 389, 390, 392, 396, 425, 431, 443, 462, 463, 483, 484, 512, 521, 532, 533, 534, 535, 539, 540, 541, 620, 621, 622, 625, 626, 627, 628, 629, 630, 635, 636, 637, 638, 656, 657, 658, 659, 770, 773, 774, 783, 790, 792, 829, 831, 868, 878, 879, 880, 881, 911, 912, 936, 941, 948, 949, 951, 952, 962, 964, 966, 976, 984, 987, 999, 1001, 1004, 1007, 1008], "altern": [4, 26, 37, 70, 85, 116, 117, 123, 129, 168, 180, 196, 214, 226, 243, 246, 305, 337, 338, 339, 348, 360, 367, 368, 370, 375, 377, 380, 384, 386, 387, 389, 390, 391, 393, 394, 396, 397, 399, 417, 418, 421, 422, 427, 438, 473, 474, 513, 515, 516, 522, 528, 529, 532, 533, 534, 535, 539, 540, 541, 557, 563, 564, 566, 592, 595, 618, 667, 680, 682, 744, 747, 751, 754, 772, 800, 835, 841, 844, 856, 863, 865, 878, 879, 880, 881, 920, 946, 948, 949, 951, 952, 955, 956, 960, 962, 964, 965, 967, 968, 973, 982, 987, 989, 999, 1001, 1007, 1008], "larger": [4, 7, 27, 37, 39, 42, 47, 79, 81, 91, 105, 113, 123, 150, 155, 156, 162, 166, 167, 172, 176, 211, 212, 213, 222, 229, 231, 240, 246, 256, 258, 264, 265, 277, 291, 292, 294, 297, 324, 338, 339, 358, 360, 365, 370, 375, 377, 386, 387, 389, 390, 391, 393, 394, 396, 397, 399, 416, 419, 424, 425, 427, 429, 431, 490, 502, 516, 519, 536, 537, 538, 542, 543, 557, 564, 618, 627, 647, 648, 649, 650, 654, 662, 667, 678, 693, 709, 768, 816, 817, 848, 850, 851, 859, 864, 906, 907, 923, 926, 944, 945, 948, 949, 951, 952, 955, 956, 960, 962, 966, 967, 985, 987, 998, 999, 1002, 1003, 1004, 1007, 1008], "periodic_spline_transform": 4, "n_spline": [4, 850], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 54, 55, 61, 97, 100, 105, 114, 118, 119, 121, 124, 129, 138, 150, 156, 157, 169, 175, 196, 197, 204, 207, 214, 217, 231, 232, 249, 255, 256, 257, 267, 275, 280, 282, 286, 301, 307, 308, 313, 316, 322, 324, 325, 328, 329, 331, 337, 338, 360, 362, 365, 366, 371, 373, 377, 389, 393, 396, 399, 400, 401, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 681, 682, 683, 685, 686, 687, 688, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 707, 708, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 859, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 893, 894, 895, 896, 899, 901, 906, 907, 910, 911, 912, 913, 917, 920, 921, 923, 926, 927, 933, 936, 937, 941, 948, 952, 962, 965, 968, 978, 982, 987, 989, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "degre": [4, 16, 34, 97, 112, 154, 161, 172, 175, 184, 185, 197, 231, 236, 240, 241, 242, 245, 246, 255, 269, 294, 307, 308, 321, 331, 394, 398, 427, 472, 510, 516, 614, 615, 618, 631, 748, 768, 770, 817, 846, 850, 872, 873, 874, 875, 876, 944, 945, 947, 948, 949, 950, 952, 953, 955, 958, 962, 965, 967, 985, 997, 1003, 1007, 1008], "n_knot": [4, 197, 308, 850, 962, 1007], "include_bia": [4, 175, 269, 846, 850, 1008], "knot": [4, 197, 308, 850, 962, 1007], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 53, 79, 80, 94, 96, 105, 111, 120, 122, 125, 149, 150, 152, 153, 154, 155, 156, 158, 175, 176, 178, 186, 190, 196, 197, 198, 202, 206, 207, 208, 209, 210, 214, 222, 225, 228, 229, 231, 232, 244, 255, 257, 258, 262, 263, 265, 269, 280, 281, 287, 288, 298, 300, 309, 323, 324, 327, 329, 330, 332, 333, 334, 606, 607, 795, 811, 812, 986], "again": [4, 66, 71, 122, 153, 155, 157, 158, 166, 221, 256, 337, 348, 368, 373, 377, 378, 389, 390, 391, 397, 447, 542, 543, 609, 622, 626, 628, 630, 636, 638, 640, 667, 941, 948, 952, 966, 991, 994, 1002], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 57, 59, 60, 65, 69, 73, 74, 79, 84, 94, 95, 96, 98, 101, 111, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 138, 142, 144, 150, 151, 153, 155, 156, 161, 162, 164, 168, 180, 184, 185, 196, 198, 203, 205, 208, 209, 210, 211, 212, 216, 218, 220, 223, 225, 228, 229, 230, 231, 233, 234, 240, 242, 244, 246, 253, 255, 257, 258, 261, 262, 264, 265, 275, 280, 281, 285, 288, 291, 293, 299, 300, 305, 307, 314, 315, 317, 321, 323, 324, 327, 328, 329, 330, 333, 334, 337, 338, 346, 352, 358, 359, 360, 365, 366, 377, 386, 387, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 892, 895, 896, 901, 907, 912, 916, 918, 921, 923, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 952, 953, 954, 955, 956, 958, 962, 963, 964, 965, 966, 967, 968, 983, 984, 986, 987, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1008], "concat": [4, 161, 185, 214], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 57, 79, 81, 88, 89, 95, 98, 102, 106, 112, 117, 118, 125, 138, 144, 152, 153, 167, 175, 179, 187, 188, 205, 208, 209, 210, 212, 218, 219, 220, 229, 230, 233, 249, 250, 275, 278, 279, 281, 283, 284, 286, 288, 291, 293, 294, 297, 299, 312, 313, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 334, 343, 672, 983, 984], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 25, 27, 31, 32, 34, 38, 39, 40, 46, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 66, 79, 81, 88, 89, 95, 98, 102, 112, 117, 118, 125, 138, 144, 152, 153, 167, 179, 188, 205, 208, 209, 210, 212, 218, 219, 220, 226, 229, 230, 233, 249, 250, 275, 279, 281, 285, 288, 291, 293, 294, 297, 299, 307, 312, 313, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 334, 343, 362, 390, 672, 883, 952, 962, 968, 983, 984], "tab20b": 4, "stai": [4, 26, 37, 105, 166, 338, 364, 365, 368, 377, 378, 957, 1000], "midnight": 4, "fewer": [4, 13, 26, 110, 118, 120, 196, 352, 398, 399, 423, 436, 528, 569, 671, 801, 948, 953, 955, 999, 1000, 1001], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 61, 77, 84, 85, 104, 116, 123, 129, 141, 142, 143, 146, 154, 162, 166, 167, 168, 169, 172, 196, 197, 214, 235, 240, 246, 253, 258, 262, 263, 284, 297, 305, 308, 313, 324, 337, 338, 339, 348, 352, 354, 360, 361, 363, 365, 366, 368, 369, 370, 372, 375, 377, 378, 380, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 419, 420, 425, 431, 432, 435, 443, 470, 478, 496, 499, 507, 509, 514, 518, 524, 526, 536, 537, 541, 542, 563, 564, 566, 568, 579, 586, 602, 605, 624, 633, 647, 649, 651, 653, 662, 663, 667, 670, 698, 701, 719, 731, 732, 736, 758, 765, 768, 769, 773, 774, 788, 799, 800, 813, 814, 815, 817, 819, 820, 821, 822, 823, 846, 848, 855, 856, 858, 859, 860, 861, 868, 906, 907, 909, 917, 920, 941, 942, 946, 947, 948, 949, 950, 951, 952, 953, 955, 958, 959, 960, 965, 966, 967, 968, 971, 973, 976, 983, 985, 987, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 14, 251, 271, 362], "132": [4, 8, 13, 55, 110, 396], "013": [4, 110, 133, 338], "successfulli": [4, 13, 301, 364, 368, 397, 966], "reduc": [4, 7, 42, 45, 46, 47, 48, 71, 77, 113, 120, 122, 124, 127, 143, 166, 175, 176, 194, 201, 204, 227, 229, 234, 256, 262, 284, 299, 332, 338, 339, 348, 357, 359, 362, 365, 370, 375, 377, 387, 388, 389, 391, 393, 394, 396, 397, 398, 400, 420, 421, 425, 432, 435, 467, 509, 519, 524, 530, 531, 532, 533, 538, 539, 540, 548, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 602, 618, 627, 647, 648, 649, 650, 662, 667, 670, 754, 770, 773, 774, 783, 792, 793, 794, 795, 798, 848, 859, 862, 863, 878, 879, 880, 881, 941, 944, 946, 947, 948, 949, 952, 955, 964, 965, 969, 978, 986, 994, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1008], "choic": [4, 7, 40, 46, 64, 69, 77, 103, 149, 150, 156, 161, 185, 197, 234, 249, 253, 255, 258, 280, 307, 337, 338, 348, 352, 363, 366, 369, 375, 380, 389, 391, 393, 395, 396, 398, 399, 427, 437, 446, 447, 448, 449, 450, 451, 453, 513, 515, 516, 522, 534, 613, 622, 631, 633, 634, 636, 667, 679, 800, 813, 814, 819, 821, 822, 848, 851, 859, 861, 870, 871, 894, 941, 946, 948, 949, 950, 952, 953, 958, 960, 965, 966, 967, 968, 1001, 1004, 1005, 1009], "arbitrari": [4, 85, 95, 97, 115, 156, 175, 196, 213, 214, 253, 297, 301, 307, 337, 346, 353, 365, 375, 377, 390, 393, 394, 396, 397, 401, 425, 430, 432, 440, 507, 508, 534, 535, 556, 614, 663, 771, 772, 776, 778, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 835, 837, 850, 941, 943, 944, 948, 949, 952, 955, 962, 973, 987, 994, 995, 998, 1000, 1001, 1002, 1004, 1008], "held": [4, 8, 70, 103, 123, 168, 204, 242, 258, 263, 273, 396, 534, 535, 536, 537, 770, 773, 774, 783, 841, 941, 942, 951, 960, 987], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 57, 59, 63, 66, 79, 80, 84, 89, 90, 91, 93, 98, 100, 101, 107, 112, 118, 119, 127, 151, 156, 157, 164, 166, 168, 175, 179, 185, 188, 190, 192, 194, 196, 197, 198, 202, 205, 208, 209, 213, 217, 218, 219, 220, 221, 225, 228, 230, 234, 242, 246, 249, 252, 256, 262, 264, 265, 273, 275, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 298, 299, 301, 312, 313, 317, 320, 323, 324, 325, 326, 328, 329, 333, 334, 337, 338, 339, 343, 348, 352, 354, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 375, 377, 378, 388, 389, 394, 395, 396, 397, 400, 401, 416, 417, 418, 419, 420, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 435, 436, 444, 447, 449, 472, 474, 479, 487, 489, 490, 494, 497, 500, 505, 508, 510, 516, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 585, 586, 603, 606, 607, 608, 612, 613, 614, 619, 620, 626, 630, 632, 645, 646, 648, 650, 651, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 669, 674, 680, 681, 684, 687, 691, 696, 698, 704, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 737, 752, 753, 768, 769, 770, 783, 792, 801, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 836, 850, 864, 865, 866, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 888, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 962, 964, 965, 967, 968, 972, 973, 982, 985, 986, 987, 994, 995, 996, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 297], "insight": [4, 7, 166, 197, 198, 293, 297, 337, 346, 387, 770, 773, 774, 783, 794, 959, 968, 976], "last_hour": 4, "slice": [4, 17, 118, 205, 219, 222, 230, 278, 283, 286, 308, 309, 320, 360, 366, 373, 390, 439, 442, 467, 468, 483, 521, 614, 747, 751, 754, 886, 910, 911, 923, 1006, 1008], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 59, 66, 74, 95, 98, 106, 118, 119, 126, 129, 158, 166, 167, 190, 195, 211, 212, 217, 218, 219, 233, 243, 294, 297, 299, 305, 307, 312, 313, 317, 331, 343], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 59, 62, 63, 64, 65, 66, 71, 72, 77, 78, 79, 80, 84, 85, 90, 91, 94, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 126, 128, 129, 132, 136, 142, 149, 150, 154, 155, 156, 157, 158, 161, 164, 169, 172, 175, 176, 178, 179, 180, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 211, 213, 214, 218, 219, 220, 225, 230, 231, 232, 234, 235, 242, 249, 250, 253, 254, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 273, 280, 282, 284, 287, 292, 294, 297, 298, 302, 305, 306, 309, 311, 315, 316, 317, 318, 331, 332, 337, 338, 342, 343, 344, 345, 354, 357, 358, 359, 364, 365, 366, 369, 373, 377, 378, 386, 387, 388, 399, 400, 405, 406, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 440, 444, 461, 462, 463, 467, 468, 469, 470, 477, 478, 483, 484, 487, 489, 490, 494, 497, 498, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 544, 545, 567, 568, 569, 570, 571, 573, 574, 575, 579, 580, 581, 584, 585, 606, 633, 634, 641, 642, 643, 648, 649, 650, 651, 652, 653, 672, 673, 675, 676, 677, 678, 679, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 698, 699, 700, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 727, 728, 729, 730, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 817, 818, 820, 821, 828, 829, 831, 835, 838, 839, 842, 844, 845, 854, 865, 866, 867, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 890, 895, 896, 917, 918, 923, 941, 948, 949, 953, 954, 955, 956, 958, 959, 962, 966, 967, 968, 972, 974, 978, 983, 985, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "actual": [4, 27, 46, 59, 85, 110, 172, 185, 196, 204, 242, 258, 339, 348, 352, 354, 362, 363, 365, 366, 369, 370, 375, 376, 377, 387, 389, 394, 397, 398, 410, 484, 490, 491, 502, 513, 515, 522, 537, 538, 620, 623, 633, 634, 641, 642, 643, 644, 645, 647, 649, 651, 652, 653, 655, 662, 666, 670, 678, 683, 689, 695, 696, 697, 758, 768, 773, 774, 788, 789, 817, 848, 870, 876, 898, 899, 900, 927, 944, 951, 952, 955, 959, 960, 1001, 1002, 1008], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 79, 80, 91, 95, 110, 118, 141, 149, 150, 154, 155, 158, 162, 167, 175, 184, 185, 186, 188, 192, 196, 197, 198, 202, 205, 208, 209, 214, 225, 240, 243, 278, 280, 291, 292, 294, 317, 334, 343, 344, 345, 362, 365, 380, 382, 389, 396, 399, 530, 531, 606, 958, 959, 968, 972, 978], "One": [4, 9, 12, 24, 30, 90, 100, 103, 117, 119, 122, 164, 169, 174, 211, 215, 225, 235, 255, 262, 264, 284, 298, 319, 321, 335, 338, 352, 362, 365, 376, 377, 389, 392, 394, 395, 396, 397, 400, 420, 424, 447, 449, 453, 487, 541, 614, 633, 641, 643, 648, 650, 651, 652, 761, 776, 777, 799, 800, 801, 832, 833, 844, 874, 917, 942, 944, 948, 949, 950, 951, 952, 953, 955, 956, 959, 960, 962, 967, 974, 989, 998, 1000, 1007, 1009], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 60, 71, 72, 77, 78, 79, 80, 84, 85, 94, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 142, 149, 150, 154, 155, 156, 157, 158, 172, 175, 176, 178, 180, 181, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 220, 228, 229, 230, 231, 232, 235, 242, 245, 250, 252, 254, 255, 257, 258, 259, 260, 262, 264, 265, 267, 268, 269, 270, 280, 281, 282, 287, 292, 298, 302, 306, 309, 314, 323, 326, 331, 332, 337, 342, 343, 344, 345, 675], "draw": [4, 7, 16, 59, 158, 166, 192, 235, 262, 264, 324, 371, 392, 394, 395, 396, 530, 531, 532, 533, 538, 539, 540, 541, 586, 609, 882, 884, 951, 972, 981, 1007, 1008], "conclus": [4, 100, 166, 168, 196, 198, 255, 348, 396, 981], "abov": [4, 25, 26, 37, 44, 65, 69, 112, 115, 120, 122, 132, 146, 166, 169, 182, 196, 198, 202, 207, 229, 232, 255, 261, 280, 299, 302, 306, 308, 338, 339, 346, 348, 352, 353, 354, 359, 360, 362, 363, 364, 365, 366, 368, 370, 375, 377, 378, 389, 390, 391, 393, 394, 395, 397, 399, 417, 421, 439, 442, 463, 469, 470, 471, 498, 565, 609, 678, 728, 770, 781, 783, 792, 834, 835, 848, 853, 859, 867, 917, 941, 942, 944, 946, 948, 949, 952, 955, 957, 959, 962, 966, 967, 968, 973, 978, 979, 985, 986, 987, 1000], "problemat": [4, 390, 1002], "captur": [4, 9, 12, 37, 39, 85, 122, 141, 154, 175, 196, 246, 306, 324, 372, 396, 397, 398, 546, 563, 564, 566, 817, 952, 957, 965, 969, 985, 1006], "big": [4, 44, 59, 61, 200, 201, 218, 246, 257, 353, 365, 370, 378, 391, 397, 401, 513, 536, 537, 795, 806, 807, 808, 809, 810, 973, 976, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "goe": [4, 115, 346, 365, 396, 446, 447, 453, 532, 533, 539, 540, 541, 878, 879, 880, 881, 962, 966], "artifact": [4, 13, 46, 47, 297, 354, 368], "discontinu": [4, 375], "fail": [4, 54, 65, 96, 103, 157, 158, 175, 255, 305, 353, 363, 365, 366, 367, 368, 372, 378, 380, 392, 393, 416, 447, 449, 651, 652, 653, 828, 829, 901, 941, 949, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "intra": [4, 563, 566, 763, 764], "variat": [4, 12, 37, 126, 154, 155, 164, 166, 167, 201, 239, 241, 246, 247, 273, 306, 324, 362, 393, 394, 399, 419, 422, 434, 511, 618, 647, 649, 650, 768, 769, 787, 788, 790, 941, 952, 962, 965, 968, 972, 983, 985, 988, 989, 997, 999, 1000], "harmon": [4, 37, 262, 338, 389, 510, 516, 702, 703, 709, 756, 766, 952], "phase": [4, 190, 352, 602, 944, 949, 955, 976, 1002, 1004], "potenti": [4, 77, 162, 167, 175, 281, 282, 291, 339, 352, 377, 380, 389, 393, 396, 397, 443, 456, 457, 458, 459, 470, 499, 524, 532, 533, 536, 537, 539, 540, 548, 581, 586, 609, 736, 860, 861, 868, 878, 879, 880, 881, 920, 958, 966, 987, 997, 1004, 1005, 1008], "fix": [4, 6, 8, 25, 34, 46, 105, 115, 118, 149, 150, 154, 157, 166, 198, 214, 246, 258, 263, 291, 305, 306, 307, 308, 309, 338, 352, 353, 359, 361, 363, 364, 365, 366, 368, 372, 375, 377, 378, 390, 393, 394, 396, 397, 399, 427, 437, 447, 474, 479, 487, 506, 512, 515, 517, 523, 524, 534, 535, 539, 540, 563, 566, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 628, 638, 645, 659, 662, 666, 670, 681, 758, 768, 783, 790, 813, 814, 816, 819, 821, 822, 838, 854, 878, 879, 907, 941, 948, 951, 952, 955, 962, 973, 975, 983, 987, 992, 993, 995, 996, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "two": [4, 7, 9, 11, 14, 24, 26, 30, 34, 37, 39, 40, 45, 59, 63, 69, 70, 74, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 104, 108, 111, 117, 118, 119, 122, 127, 130, 133, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 166, 167, 168, 175, 179, 180, 184, 185, 186, 187, 192, 195, 196, 197, 198, 204, 205, 208, 213, 214, 219, 221, 222, 225, 230, 232, 234, 240, 241, 242, 244, 245, 246, 250, 252, 256, 262, 278, 280, 283, 284, 286, 288, 297, 299, 302, 305, 306, 308, 309, 314, 320, 321, 324, 325, 326, 332, 333, 337, 338, 339, 343, 348, 358, 359, 360, 361, 362, 363, 365, 366, 368, 370, 371, 372, 375, 377, 378, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 432, 434, 439, 444, 445, 446, 447, 448, 449, 450, 451, 462, 464, 465, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482, 485, 489, 494, 497, 511, 513, 515, 519, 522, 524, 525, 528, 535, 545, 556, 559, 565, 566, 567, 570, 571, 573, 574, 575, 577, 578, 581, 582, 583, 585, 586, 595, 596, 599, 603, 607, 614, 618, 620, 645, 646, 648, 667, 674, 677, 678, 679, 686, 689, 690, 693, 695, 696, 697, 704, 705, 708, 709, 711, 714, 716, 727, 728, 730, 736, 737, 744, 747, 750, 751, 752, 753, 754, 758, 759, 765, 766, 767, 768, 800, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 828, 829, 835, 836, 843, 844, 845, 846, 864, 865, 866, 870, 878, 880, 881, 917, 931, 932, 938, 941, 942, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 978, 982, 985, 986, 987, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "onc": [4, 8, 50, 143, 146, 149, 218, 253, 256, 305, 309, 337, 339, 346, 348, 352, 354, 359, 360, 365, 368, 369, 370, 371, 372, 376, 377, 378, 389, 390, 392, 393, 394, 396, 397, 398, 399, 424, 426, 428, 447, 483, 484, 513, 519, 526, 534, 535, 565, 566, 572, 594, 602, 622, 626, 628, 630, 636, 638, 640, 641, 642, 643, 651, 652, 653, 672, 686, 690, 692, 709, 754, 771, 775, 777, 787, 806, 807, 808, 809, 810, 882, 948, 949, 955, 962, 966, 967, 968, 978, 987, 991, 994, 1002, 1004, 1005, 1006, 1007], "specif": [4, 11, 12, 27, 44, 61, 64, 69, 71, 129, 154, 157, 166, 172, 250, 255, 264, 297, 305, 306, 337, 338, 339, 348, 352, 353, 360, 365, 367, 368, 369, 370, 372, 375, 377, 380, 385, 388, 389, 390, 393, 394, 396, 397, 398, 399, 470, 478, 509, 526, 532, 539, 542, 543, 544, 545, 549, 563, 566, 568, 572, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 600, 615, 618, 621, 622, 627, 633, 647, 662, 672, 686, 687, 719, 770, 771, 772, 776, 777, 778, 783, 794, 807, 899, 901, 902, 917, 928, 929, 930, 946, 948, 949, 951, 952, 954, 955, 957, 959, 962, 966, 968, 969, 970, 971, 987, 989, 994, 998, 1002, 1003, 1004, 1005, 1008], "furthermor": [4, 37, 155, 168, 235, 237, 337, 338, 352, 354, 371, 389, 394, 396, 397, 474, 537, 565, 581, 594, 678, 709, 719, 728, 730, 766, 870, 960, 997, 1001], "enforc": [4, 12, 95, 154, 190, 284, 352, 365, 391, 394, 396, 399, 483, 502, 506, 512, 514, 517, 518, 520, 521, 523, 536, 537, 850, 890, 891, 942, 949, 996, 1002, 1004, 1006], "behav": [4, 12, 48, 52, 250, 297, 307, 324, 348, 365, 370, 375, 376, 389, 393, 851, 948, 962, 967, 969, 973, 987, 994, 1001, 1003, 1007, 1008], "similarli": [4, 12, 37, 91, 167, 185, 196, 226, 255, 291, 297, 324, 348, 353, 361, 363, 366, 368, 369, 377, 378, 386, 392, 393, 397, 949, 950, 952, 959, 966, 967, 969, 978, 982, 1002, 1008], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 55, 57, 113, 143, 146, 162, 168, 179, 227, 253, 257, 266, 267, 278, 286, 305, 317, 320, 321, 327, 337, 338, 339, 351, 352, 353, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 375, 377, 380, 386, 387, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 403, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 437, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 462, 465, 466, 469, 470, 471, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 551, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 582, 583, 585, 586, 595, 602, 603, 604, 605, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 681, 694, 702, 703, 711, 744, 747, 751, 752, 753, 754, 756, 757, 760, 761, 762, 763, 764, 768, 769, 770, 772, 773, 774, 775, 776, 778, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 859, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 890, 891, 893, 901, 902, 906, 907, 920, 921, 922, 923, 926, 936, 937, 941, 942, 948, 949, 952, 954, 955, 958, 960, 962, 966, 967, 968, 973, 975, 978, 985, 986, 987, 989, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "shorter": [4, 125, 155, 243, 375, 389, 394, 399, 425, 432, 538, 672, 954, 958, 987, 1005], "necessarili": [4, 31, 71, 98, 196, 204, 230, 231, 241, 275, 299, 337, 338, 359, 368, 387, 389, 396, 602, 819, 821, 822, 823, 946, 949, 951, 952], "59": [4, 362, 370, 390, 485, 952, 990, 994], "37": [4, 211, 222, 258, 312, 360, 396, 690, 851, 994], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 44, 46, 52, 53, 57, 59, 61, 70, 71, 79, 85, 97, 100, 112, 115, 118, 119, 122, 128, 144, 145, 149, 151, 154, 155, 156, 158, 162, 167, 175, 177, 179, 182, 192, 197, 198, 208, 209, 219, 230, 235, 237, 250, 253, 255, 265, 273, 278, 283, 285, 286, 299, 301, 305, 308, 309, 317, 320, 321, 325, 326, 329, 333, 334, 339, 342, 344, 345, 348, 353, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 380, 387, 389, 390, 393, 395, 396, 397, 399, 414, 426, 428, 440, 441, 473, 490, 491, 492, 493, 521, 528, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 563, 564, 566, 572, 603, 605, 606, 607, 608, 672, 673, 675, 676, 762, 770, 772, 779, 783, 787, 792, 793, 794, 801, 832, 844, 872, 875, 878, 879, 880, 881, 885, 888, 910, 911, 915, 925, 937, 942, 948, 951, 952, 953, 955, 959, 962, 963, 964, 966, 967, 968, 972, 973, 976, 983, 985, 986, 991, 994, 995, 997, 1000, 1004, 1007, 1008], "turn": [4, 32, 77, 161, 162, 166, 187, 211, 212, 230, 255, 279, 339, 352, 354, 360, 375, 377, 378, 388, 389, 390, 392, 394, 397, 398, 399, 556, 557, 564, 582, 583, 800, 804, 872, 875, 893, 942, 946, 954, 957, 962, 976, 987, 999, 1001, 1002, 1007], "downstream": [4, 79, 339, 397, 506, 509, 512, 516, 517, 581, 844, 962, 1004], "freedom": [4, 97, 154, 184, 185, 187, 255, 516, 631, 768, 948, 997], "underfit": [4, 122, 149, 164, 168, 248, 270, 271, 291, 632, 770, 773, 774, 783, 793, 794, 831, 846, 947, 948], "approxim": [4, 5, 27, 33, 46, 79, 99, 100, 105, 114, 121, 122, 150, 166, 173, 176, 192, 196, 197, 210, 214, 224, 225, 228, 231, 238, 246, 255, 260, 269, 276, 284, 289, 297, 299, 300, 305, 308, 337, 339, 344, 345, 348, 355, 357, 362, 373, 375, 377, 386, 387, 390, 392, 393, 394, 396, 399, 401, 402, 403, 409, 424, 444, 445, 448, 449, 450, 451, 456, 457, 458, 465, 470, 477, 496, 499, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 534, 535, 557, 564, 585, 586, 594, 613, 614, 615, 616, 617, 632, 633, 634, 647, 649, 651, 652, 654, 662, 667, 731, 732, 737, 768, 771, 787, 792, 796, 797, 811, 812, 815, 819, 821, 822, 823, 827, 831, 832, 837, 841, 843, 844, 848, 859, 870, 875, 906, 907, 926, 945, 946, 947, 948, 949, 951, 955, 956, 957, 958, 959, 960, 964, 966, 967, 968, 972, 973, 987, 989, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "especi": [4, 8, 55, 119, 122, 196, 328, 338, 348, 359, 365, 372, 375, 377, 387, 389, 397, 419, 424, 476, 513, 532, 533, 534, 535, 539, 540, 541, 621, 622, 625, 627, 628, 629, 635, 636, 637, 638, 670, 679, 719, 806, 807, 808, 809, 810, 878, 879, 880, 881, 948, 954, 955, 960, 962, 976, 997, 1002, 1006, 1007, 1008], "sharp": [4, 962], "rush": [4, 365], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 79, 95, 124, 149, 156, 166, 167, 211, 214, 255, 262, 266, 309, 337, 338, 348, 364, 387, 389, 391, 394, 396, 397, 398, 413, 419, 422, 426, 428, 434, 506, 513, 515, 517, 518, 520, 521, 522, 582, 583, 609, 773, 774, 811, 812, 906, 907, 944, 949, 952, 968, 1008], "tend": [4, 12, 27, 37, 39, 52, 167, 185, 196, 200, 201, 214, 240, 243, 252, 256, 273, 294, 339, 352, 354, 365, 366, 377, 387, 389, 391, 394, 396, 398, 413, 423, 817, 848, 859, 907, 948, 949, 955, 968, 987], "under": [4, 7, 11, 24, 25, 27, 41, 66, 77, 78, 103, 119, 122, 157, 196, 225, 234, 255, 262, 265, 298, 332, 359, 363, 365, 366, 368, 370, 372, 377, 380, 383, 387, 389, 391, 393, 394, 397, 398, 426, 428, 445, 446, 447, 448, 449, 450, 451, 507, 514, 516, 518, 629, 630, 631, 676, 680, 681, 682, 689, 715, 727, 761, 762, 768, 769, 816, 948, 949, 950, 952, 955, 962, 966, 967, 968, 972, 973, 987, 994, 996, 997, 999, 1002, 1006], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 118, 164, 185, 196, 197, 198, 200, 226, 262, 273, 275, 279, 294, 297, 304, 309, 313, 315, 348, 352, 353, 358, 361, 362, 365, 366, 368, 371, 373, 375, 377, 380, 383, 386, 387, 388, 389, 392, 394, 396, 397, 398, 399, 418, 423, 472, 483, 484, 490, 513, 542, 543, 577, 578, 643, 651, 652, 680, 706, 729, 751, 765, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 816, 817, 836, 941, 943, 946, 948, 949, 952, 953, 963, 965, 967, 972, 978, 982, 987, 994, 1000, 1002, 1003, 1004, 1007], "systemat": [4, 255, 366, 686, 701, 952], "reveal": [4, 166, 168, 337, 370, 386, 949], "form": [4, 9, 19, 42, 59, 66, 95, 132, 156, 157, 166, 231, 246, 255, 312, 348, 359, 362, 365, 366, 368, 377, 378, 386, 388, 389, 392, 393, 394, 395, 396, 397, 399, 401, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 434, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 674, 768, 769, 770, 773, 774, 775, 777, 779, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 896, 941, 943, 945, 946, 948, 949, 952, 953, 956, 957, 958, 962, 967, 972, 978, 985, 1000, 1004, 1006], "explain": [4, 5, 12, 55, 72, 84, 85, 104, 122, 149, 154, 155, 167, 168, 196, 214, 225, 246, 268, 337, 338, 363, 365, 368, 385, 392, 394, 399, 467, 496, 499, 509, 516, 519, 524, 600, 623, 631, 644, 655, 695, 696, 697, 701, 758, 948, 955, 968, 971, 972, 983, 985, 986, 1005, 1007, 1008], "lack": [4, 365, 366, 375, 393, 796, 885, 967, 1008], "deriv": [4, 19, 105, 106, 121, 154, 157, 168, 184, 185, 189, 197, 353, 360, 366, 387, 391, 393, 395, 396, 397, 399, 401, 417, 421, 440, 508, 581, 592, 597, 623, 644, 651, 655, 828, 829, 844, 850, 870, 871, 946, 948, 949, 952, 956, 958, 967, 994, 995, 996, 1001, 1002, 1003, 1009], "address": [4, 48, 337, 360, 362, 365, 389, 397, 632, 948, 949, 954, 955, 956, 957, 958, 962, 976, 985, 1002], "section": [4, 37, 95, 100, 113, 129, 135, 136, 137, 138, 154, 158, 166, 167, 175, 184, 185, 198, 221, 226, 236, 253, 255, 258, 264, 307, 337, 338, 339, 348, 358, 360, 363, 365, 366, 368, 369, 370, 371, 372, 383, 387, 388, 390, 392, 393, 394, 396, 397, 398, 399, 415, 419, 434, 509, 589, 594, 597, 612, 620, 761, 769, 872, 875, 941, 946, 948, 952, 953, 955, 956, 958, 959, 966, 967, 969, 971, 985, 987, 994, 996, 997, 998, 1001], "margin": [4, 12, 25, 27, 150, 151, 153, 154, 155, 164, 166, 167, 174, 215, 255, 297, 319, 322, 324, 326, 335, 362, 387, 388, 394, 396, 399, 487, 585, 586, 620, 651, 708, 800, 848, 859, 872, 875, 948, 952, 954, 958, 959, 962, 966, 967, 985, 1001, 1003], "construct": [4, 11, 69, 71, 110, 112, 114, 117, 129, 214, 226, 236, 273, 288, 298, 300, 306, 309, 359, 362, 366, 373, 377, 389, 393, 394, 396, 397, 400, 410, 417, 418, 420, 421, 425, 427, 432, 438, 440, 442, 494, 510, 516, 519, 530, 531, 556, 562, 614, 663, 665, 666, 783, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 830, 831, 832, 833, 835, 875, 889, 891, 906, 907, 917, 941, 942, 944, 948, 949, 952, 953, 955, 962, 965, 967, 968, 973, 978, 982, 999, 1001, 1002, 1005, 1008], "polynomialfeatur": [4, 175, 196, 197, 202, 236, 269, 307, 850, 948, 962, 998, 1002, 1003, 1004, 1007, 1008], "coars": [4, 118, 370, 423, 436], "too": [4, 7, 12, 17, 44, 50, 61, 69, 73, 81, 99, 122, 161, 168, 197, 214, 218, 229, 241, 249, 253, 262, 270, 293, 324, 337, 344, 345, 352, 362, 365, 370, 372, 375, 377, 389, 391, 393, 396, 397, 398, 401, 413, 424, 513, 563, 566, 654, 667, 681, 806, 807, 808, 809, 810, 836, 849, 851, 947, 949, 951, 952, 954, 955, 959, 985, 995, 998, 1001, 1002, 1003, 1004, 1006], "mani": [4, 7, 10, 19, 55, 73, 77, 81, 116, 117, 118, 120, 123, 142, 146, 168, 196, 217, 229, 241, 249, 255, 262, 263, 267, 297, 302, 305, 306, 307, 308, 309, 337, 348, 352, 354, 360, 362, 364, 365, 376, 377, 378, 386, 389, 390, 391, 394, 396, 397, 398, 399, 401, 478, 528, 529, 532, 533, 534, 535, 539, 540, 541, 563, 566, 581, 584, 602, 614, 625, 629, 633, 634, 641, 643, 651, 652, 653, 667, 670, 674, 747, 751, 770, 774, 783, 828, 829, 844, 849, 851, 870, 878, 879, 880, 881, 941, 942, 944, 948, 949, 951, 952, 953, 954, 955, 958, 959, 960, 962, 965, 967, 969, 971, 972, 973, 976, 985, 987, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009], "featureunion": [4, 73, 357, 377, 388, 439, 604, 833, 942, 973, 976, 989, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "hour_workday_interact": 4, "interaction_onli": [4, 846, 948, 962], "combin": [4, 12, 25, 27, 60, 69, 70, 72, 73, 95, 104, 105, 108, 120, 124, 133, 149, 155, 162, 164, 166, 196, 213, 221, 225, 230, 255, 256, 264, 266, 267, 284, 292, 307, 308, 327, 339, 343, 352, 357, 361, 362, 365, 369, 376, 377, 386, 387, 389, 390, 393, 394, 395, 396, 397, 398, 399, 401, 402, 421, 439, 441, 442, 448, 450, 451, 454, 455, 463, 470, 483, 484, 490, 496, 499, 501, 506, 512, 513, 515, 517, 522, 524, 535, 537, 540, 542, 543, 585, 589, 591, 596, 599, 605, 609, 618, 621, 622, 627, 628, 633, 634, 635, 636, 637, 638, 641, 643, 647, 648, 649, 650, 651, 653, 654, 656, 659, 703, 761, 770, 780, 781, 792, 794, 798, 830, 832, 836, 844, 845, 846, 851, 870, 926, 941, 944, 945, 948, 952, 953, 955, 958, 962, 965, 966, 969, 976, 983, 985, 987, 994, 999, 1002, 1005, 1006, 1007, 1009], "ones": [4, 11, 34, 43, 70, 80, 149, 172, 201, 225, 228, 255, 263, 266, 282, 301, 313, 334, 352, 365, 372, 389, 391, 393, 396, 425, 507, 541, 556, 585, 586, 633, 634, 645, 651, 677, 741, 767, 772, 776, 787, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 846, 850, 912, 948, 952, 957, 958, 962, 967, 985, 994, 1002, 1003, 1004], "previou": [4, 43, 70, 95, 113, 119, 122, 129, 149, 154, 155, 166, 182, 197, 229, 231, 255, 258, 262, 297, 309, 337, 338, 339, 348, 352, 360, 365, 366, 369, 370, 372, 375, 377, 380, 389, 396, 397, 443, 521, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 605, 621, 623, 627, 633, 635, 637, 641, 642, 643, 644, 651, 652, 653, 655, 681, 788, 802, 805, 820, 828, 829, 867, 884, 907, 948, 952, 956, 962, 973, 978, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "nice": [4, 66, 197, 297, 332, 352, 368, 394, 987], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 114, 116, 133, 256, 263, 271, 338, 370], "104": [4, 24], "highlight": [4, 79, 91, 149, 150, 155, 167, 214, 301, 310, 337, 339, 355, 365, 368, 369, 370, 372, 375, 399, 419, 422, 439, 442, 464, 465, 470, 479, 487, 490, 499, 513, 536, 537, 539, 540, 542, 574, 577, 603, 605, 609, 615, 621, 623, 627, 633, 644, 655, 663, 691, 721, 761, 770, 773, 774, 783, 797, 813, 815, 832, 841, 844, 846, 850, 851, 867, 868, 870, 875, 879, 902, 949, 952, 960, 962, 967, 1004, 1005, 1006, 1007, 1008], "anoth": [4, 37, 95, 100, 124, 146, 149, 157, 162, 166, 167, 185, 204, 222, 225, 235, 241, 255, 258, 261, 264, 265, 285, 302, 337, 339, 342, 348, 352, 354, 359, 360, 363, 365, 366, 370, 375, 377, 383, 386, 389, 393, 394, 396, 397, 398, 400, 418, 420, 427, 430, 437, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 483, 513, 515, 522, 648, 651, 667, 683, 693, 830, 831, 941, 947, 948, 949, 952, 953, 955, 958, 962, 966, 967, 978, 985, 986, 987, 1003, 1004], "after": [4, 17, 20, 21, 26, 46, 69, 70, 74, 80, 97, 110, 120, 127, 129, 132, 142, 146, 154, 156, 158, 161, 166, 172, 189, 196, 234, 235, 243, 255, 283, 285, 297, 298, 301, 302, 337, 338, 354, 360, 362, 363, 364, 365, 366, 368, 370, 371, 372, 375, 377, 378, 383, 385, 386, 389, 390, 393, 394, 397, 398, 399, 401, 418, 422, 425, 426, 427, 428, 431, 437, 490, 507, 511, 528, 529, 534, 535, 536, 537, 572, 602, 605, 633, 634, 641, 642, 643, 648, 650, 651, 652, 653, 667, 686, 699, 729, 765, 768, 769, 773, 774, 820, 827, 831, 850, 870, 875, 876, 941, 946, 948, 952, 956, 957, 962, 964, 966, 967, 968, 973, 978, 985, 987, 994, 997, 1001, 1002, 1005, 1006], "quadrat": [4, 29, 35, 154, 158, 164, 210, 308, 388, 416, 433, 436, 524, 525, 598, 651, 690, 875, 876, 949, 952, 955, 958, 962, 966, 967, 974, 989, 995], "tractabl": [4, 393, 609, 972, 1007], "nystr\u00f6m": 4, "latter": [4, 14, 255, 283, 332, 354, 362, 365, 377, 393, 396, 397, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 715, 768, 769, 770, 773, 774, 778, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 955, 1003], "kernel_approxim": [4, 161, 164, 171, 172, 210, 225, 230, 307, 355, 652, 731, 732, 837, 944, 978, 995, 1001], "nystroem": [4, 161, 210, 225, 230, 357, 615, 616, 617, 652, 837, 875, 876, 989, 995, 1001, 1004, 1006, 1007, 1008], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 138, 172, 255, 321, 328, 331, 427, 510, 595, 738, 747, 770, 846, 872, 873, 874, 875, 876, 948, 962, 985], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 69, 72, 73, 84, 85, 89, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 127, 172, 195, 217, 218, 219, 220, 221, 222, 225, 229, 230, 232, 236, 240, 241, 242, 243, 244, 245, 246, 254, 279, 284, 294, 302, 307, 309, 338, 366, 369, 370, 377, 392, 394, 401, 426, 427, 437, 439, 456, 457, 458, 459, 501, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 614, 615, 616, 617, 663, 664, 665, 666, 667, 668, 669, 670, 671, 768, 769, 820, 827, 830, 862, 863, 864, 907, 944, 946, 949, 951, 955, 983, 986, 995, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "300": [4, 20, 21, 34, 38, 50, 57, 98, 110, 111, 112, 162, 186, 196, 222, 225, 229, 244, 258, 285, 300, 307, 312, 321, 330, 332, 335, 366, 419, 422, 423, 434, 436, 614, 619, 620, 654, 665, 667, 669, 828, 948, 1004], "random_stalmost": [4, 120, 121, 198, 204, 269, 315, 348, 358, 360, 368, 370, 375, 376, 377, 389, 393, 394, 445, 446, 447, 448, 450, 451, 452, 768, 941, 947, 948, 951, 952, 967, 986, 987, 1002, 1007], "rival": [4, 867, 965], "intermedi": [4, 7, 52, 115, 122, 324, 397, 534, 535, 594, 831, 952, 1006], "compound": [4, 214, 397, 585, 587, 655, 697, 725, 948, 987], "one_hot_poly_pipelin": 4, "082": [4, 337], "006": [4, 338, 370], "111": [4, 7, 8, 16, 45, 66, 89, 101, 102, 109, 193, 211, 221, 255, 823, 997], "competit": [4, 122, 337, 619, 955], "low": [4, 11, 12, 37, 50, 80, 85, 97, 99, 103, 113, 125, 146, 168, 189, 191, 196, 198, 210, 217, 219, 225, 229, 234, 240, 241, 243, 246, 249, 255, 257, 261, 262, 270, 281, 282, 293, 301, 315, 323, 324, 337, 346, 361, 362, 365, 369, 372, 377, 380, 386, 387, 388, 393, 394, 397, 418, 424, 496, 499, 510, 557, 564, 578, 654, 667, 671, 679, 699, 715, 762, 816, 907, 919, 920, 941, 944, 947, 948, 949, 951, 952, 955, 957, 958, 959, 960, 962, 964, 967, 968, 974, 989, 995, 998, 999, 1000, 1002, 1003, 1008, 1009], "rank": [4, 17, 25, 79, 99, 103, 116, 144, 168, 169, 214, 253, 255, 263, 361, 384, 386, 387, 391, 392, 394, 396, 397, 483, 484, 496, 499, 524, 525, 568, 569, 581, 623, 632, 644, 655, 671, 674, 694, 699, 700, 712, 713, 729, 765, 907, 941, 943, 944, 949, 960, 962, 976, 989, 995, 1000, 1003, 1004, 1008, 1009], "fact": [4, 11, 19, 25, 80, 85, 122, 168, 229, 337, 359, 371, 375, 377, 392, 394, 395, 396, 397, 564, 624, 643, 645, 678, 946, 948, 955, 962, 966, 967, 973, 976], "smoother": [4, 5, 122, 167, 257, 293, 395], "allow": [4, 55, 57, 73, 74, 99, 100, 113, 114, 127, 149, 154, 156, 158, 190, 196, 214, 218, 226, 229, 235, 237, 240, 255, 273, 305, 306, 307, 308, 329, 337, 346, 348, 352, 359, 363, 365, 366, 368, 371, 373, 377, 378, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 417, 420, 421, 439, 441, 442, 498, 499, 509, 528, 529, 534, 535, 536, 537, 542, 543, 568, 569, 572, 578, 585, 586, 590, 602, 603, 605, 609, 618, 621, 622, 627, 628, 633, 635, 636, 637, 638, 651, 653, 656, 657, 658, 659, 663, 667, 735, 738, 747, 751, 754, 763, 764, 768, 769, 770, 772, 773, 774, 776, 778, 780, 783, 790, 797, 817, 826, 833, 837, 838, 854, 863, 865, 866, 867, 870, 871, 878, 879, 880, 881, 888, 890, 891, 901, 902, 918, 941, 942, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 962, 964, 965, 966, 967, 968, 972, 973, 976, 978, 991, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 64, 72, 79, 80, 95, 97, 99, 100, 106, 120, 129, 149, 153, 155, 157, 158, 184, 185, 198, 204, 217, 219, 221, 222, 228, 254, 255, 256, 266, 283, 284, 285, 305, 326, 327, 332, 337, 338, 342, 353, 362, 363, 365, 366, 369, 370, 373, 375, 376, 377, 378, 386, 389, 391, 392, 394, 396, 397, 398, 400, 417, 420, 421, 425, 426, 427, 428, 437, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 533, 540, 557, 564, 585, 586, 622, 625, 628, 629, 630, 631, 633, 634, 646, 663, 681, 702, 703, 711, 755, 756, 757, 760, 761, 765, 770, 783, 813, 814, 815, 817, 819, 821, 822, 823, 844, 845, 850, 862, 863, 864, 878, 879, 881, 887, 906, 907, 909, 941, 942, 944, 947, 948, 949, 951, 952, 953, 956, 958, 962, 966, 967, 968, 971, 973, 976, 978, 980, 982, 983, 985, 986, 987, 994, 1001, 1002, 1003, 1004, 1006, 1008], "abl": [4, 5, 9, 24, 47, 60, 81, 85, 99, 100, 126, 155, 185, 196, 212, 214, 221, 261, 266, 324, 348, 352, 353, 354, 359, 365, 366, 368, 369, 375, 391, 393, 397, 459, 478, 509, 796, 843, 941, 942, 948, 951, 952, 953, 958, 962, 965, 968, 969, 973, 978, 986, 987, 1000, 1001, 1005], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 172, 277, 332, 339, 352, 385, 391, 397, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 779, 811, 812, 878, 879, 880, 881, 941, 955, 968, 976, 981, 985, 997, 998], "depth": [4, 109, 115, 119, 123, 130, 342, 344, 345, 346, 352, 363, 365, 368, 376, 396, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 811, 812, 816, 878, 879, 880, 881, 882, 884, 912, 957, 958, 968, 996, 997, 1005], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 69, 71, 72, 110, 116, 120, 121, 127, 142, 143, 145, 150, 169, 172, 196, 204, 211, 212, 242, 253, 254, 255, 256, 257, 259, 261, 270, 277, 283, 284, 285, 294, 299, 302, 312, 313, 315, 324, 327, 348, 352, 366, 376, 377, 388, 389, 393, 396, 397, 398, 405, 413, 424, 444, 446, 447, 453, 507, 509, 516, 524, 525, 526, 528, 530, 532, 533, 534, 536, 539, 540, 542, 544, 585, 609, 633, 634, 641, 643, 646, 649, 650, 651, 667, 672, 677, 682, 687, 692, 707, 711, 716, 727, 736, 760, 765, 767, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 813, 818, 820, 821, 828, 865, 866, 870, 872, 875, 878, 880, 906, 907, 941, 946, 947, 948, 949, 953, 955, 956, 960, 964, 966, 968, 982, 987, 1002, 1003], "On": [4, 12, 17, 26, 66, 70, 84, 85, 100, 109, 113, 115, 116, 117, 122, 129, 132, 141, 143, 153, 154, 166, 167, 168, 177, 184, 185, 198, 226, 227, 228, 229, 231, 235, 236, 237, 240, 242, 250, 252, 253, 255, 256, 258, 260, 262, 267, 294, 297, 299, 301, 306, 307, 309, 314, 324, 346, 352, 363, 366, 368, 375, 377, 383, 387, 389, 393, 394, 396, 398, 399, 618, 631, 666, 708, 734, 941, 945, 948, 951, 952, 954, 958, 965, 967, 982, 985], "contrari": [4, 13, 166, 218, 222, 240, 258, 297, 337, 359, 389, 470, 519, 581, 786, 948, 954, 958], "significantli": [4, 24, 25, 37, 77, 78, 120, 146, 166, 167, 168, 196, 204, 212, 214, 255, 306, 307, 338, 339, 348, 353, 389, 394, 396, 397, 402, 444, 449, 454, 513, 515, 522, 533, 540, 621, 622, 627, 628, 635, 636, 637, 638, 659, 667, 811, 812, 944, 948, 949, 955, 960, 967, 994, 996, 997, 1001, 1002, 1007, 1008, 1009], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 71, 73, 95, 113, 125, 141, 149, 157, 161, 167, 178, 190, 196, 204, 214, 225, 252, 255, 256, 258, 260, 262, 263, 267, 280, 288, 291, 292, 299, 308, 309, 312, 337, 338, 352, 353, 354, 360, 361, 362, 364, 365, 366, 370, 376, 377, 385, 387, 388, 389, 390, 393, 394, 395, 396, 397, 399, 401, 424, 439, 447, 484, 508, 509, 511, 512, 513, 514, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 563, 564, 566, 569, 577, 607, 608, 609, 619, 620, 621, 622, 627, 628, 633, 635, 636, 637, 638, 640, 641, 642, 643, 651, 652, 653, 660, 661, 672, 690, 692, 712, 736, 761, 764, 768, 770, 773, 774, 780, 781, 783, 792, 793, 794, 795, 796, 798, 827, 828, 829, 830, 846, 850, 870, 887, 896, 920, 941, 948, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 972, 973, 976, 983, 986, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007], "compet": 4, "access": [4, 77, 241, 246, 337, 346, 352, 353, 362, 363, 365, 366, 372, 375, 377, 378, 389, 391, 392, 396, 397, 399, 425, 432, 439, 511, 542, 543, 544, 545, 592, 674, 831, 885, 915, 948, 951, 952, 958, 959, 960, 966, 967, 973, 976, 978, 986, 987, 994, 996, 1000, 1001, 1002, 1003, 1006, 1008], "requir": [4, 7, 13, 25, 45, 46, 48, 57, 66, 69, 89, 99, 101, 115, 119, 123, 125, 129, 146, 167, 185, 196, 214, 217, 219, 226, 229, 256, 257, 266, 275, 277, 297, 302, 307, 308, 337, 338, 339, 359, 362, 363, 365, 366, 368, 370, 372, 375, 377, 378, 380, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 400, 405, 413, 414, 415, 420, 425, 427, 432, 437, 439, 442, 444, 456, 457, 458, 470, 483, 496, 499, 510, 516, 524, 525, 526, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 547, 553, 555, 556, 585, 586, 594, 602, 607, 608, 609, 618, 633, 634, 641, 643, 646, 649, 650, 651, 652, 653, 661, 664, 666, 667, 668, 670, 674, 697, 702, 703, 715, 720, 722, 725, 736, 757, 760, 770, 773, 774, 776, 778, 783, 794, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 828, 831, 832, 833, 835, 845, 846, 847, 849, 851, 858, 862, 863, 865, 866, 870, 871, 872, 875, 878, 879, 880, 881, 938, 941, 946, 947, 948, 949, 952, 953, 954, 955, 956, 958, 959, 962, 966, 967, 968, 973, 978, 985, 987, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "geograph": [4, 11, 288, 360, 472], "repartit": 4, "immobil": 4, "quant": 4, "ncol": [4, 5, 32, 65, 95, 100, 106, 167, 196, 197, 198, 204, 214, 217, 218, 228, 258, 266, 275, 292, 298, 299, 301, 302, 331, 338], "sharei": [4, 74, 91, 100, 106, 130, 158, 196, 198, 266, 280, 298, 331, 332, 338], "pred": [4, 7, 11, 333, 337, 360, 623, 644, 655, 672, 676, 680, 692, 702, 703, 711, 756, 757, 760, 761, 952], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 49, 53, 62, 63, 64, 71, 85, 91, 95, 96, 99, 104, 105, 106, 110, 112, 114, 129, 130, 155, 161, 164, 166, 168, 181, 187, 188, 196, 204, 205, 217, 229, 241, 245, 246, 253, 258, 259, 262, 264, 275, 280, 283, 291, 292, 293, 299, 301, 302, 316, 321, 332, 333, 343, 363, 396, 987, 990], "perfect": [4, 26, 37, 69, 80, 98, 100, 192, 196, 337, 338, 365, 368, 389, 393, 528, 529, 665, 669, 678, 679, 682, 691, 699, 701, 704, 710, 716, 729, 730, 758, 759, 766, 948, 952, 955, 967, 976, 985, 1008], "xlim": [4, 9, 12, 26, 34, 44, 57, 61, 72, 77, 78, 79, 89, 97, 110, 112, 113, 114, 125, 128, 135, 150, 151, 166, 175, 186, 188, 195, 202, 205, 210, 225, 232, 241, 246, 250, 264, 265, 269, 281, 282, 323, 328, 329, 333, 345], "ylim": [4, 9, 12, 24, 26, 34, 37, 44, 57, 61, 71, 77, 78, 79, 89, 97, 110, 112, 113, 119, 120, 122, 125, 128, 131, 136, 150, 151, 166, 183, 185, 186, 188, 189, 190, 202, 205, 206, 210, 225, 232, 241, 245, 246, 250, 254, 257, 258, 264, 265, 268, 269, 270, 281, 282, 323, 328, 329, 333, 337, 345], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 157, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 342, 343, 344, 345, 346, 354, 365, 370, 375, 376, 378, 380, 386, 387, 391, 393, 394, 395, 396, 398, 399, 414, 477, 534, 568, 569, 606, 607, 672, 673, 675, 676, 687, 882, 883, 884, 941, 946, 947, 949, 951, 952, 954, 955, 956, 958, 959, 962, 966, 967, 973, 982, 983, 987, 996, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008], "seem": [4, 9, 46, 122, 167, 196, 221, 225, 256, 292, 301, 337, 338, 364, 365, 369, 393, 476, 948, 952], "regim": [4, 377, 870, 871, 951], "overal": [4, 48, 113, 129, 154, 214, 252, 338, 352, 364, 365, 370, 386, 387, 396, 399, 422, 424, 439, 446, 447, 453, 524, 949, 952, 968, 976, 1004], "closer": [4, 27, 37, 98, 100, 128, 149, 175, 339, 387, 389, 394, 424, 528, 603, 686, 813, 814, 819, 821, 822, 823, 967, 1001], "diagon": [4, 25, 40, 81, 84, 214, 234, 242, 246, 249, 324, 386, 389, 391, 399, 428, 453, 455, 486, 488, 502, 507, 525, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 625, 626, 629, 630, 631, 657, 658, 689, 763, 768, 769, 815, 823, 946, 948, 951, 955, 962, 1000, 1002, 1003, 1004], "obtain": [4, 7, 9, 12, 27, 48, 57, 70, 73, 74, 100, 103, 119, 122, 123, 127, 135, 146, 151, 153, 166, 167, 196, 198, 210, 221, 240, 241, 242, 251, 255, 256, 261, 275, 308, 322, 338, 339, 346, 348, 360, 362, 375, 383, 387, 389, 391, 392, 394, 396, 397, 398, 399, 413, 418, 444, 470, 507, 508, 530, 531, 532, 533, 534, 535, 538, 539, 540, 568, 581, 589, 620, 634, 636, 641, 643, 647, 649, 651, 652, 662, 682, 686, 699, 712, 729, 764, 796, 799, 800, 803, 817, 828, 848, 859, 872, 875, 878, 879, 907, 942, 944, 946, 948, 949, 951, 952, 953, 955, 956, 958, 959, 962, 966, 967, 1000, 1002, 1005, 1007, 1008], "slightli": [4, 25, 63, 81, 113, 119, 122, 129, 146, 149, 150, 151, 168, 175, 196, 220, 222, 263, 305, 321, 339, 364, 365, 375, 387, 389, 396, 397, 399, 401, 402, 563, 564, 566, 613, 633, 773, 774, 870, 872, 875, 906, 907, 941, 948, 962, 966, 967, 1003, 1007, 1008], "cost": [4, 39, 98, 149, 164, 172, 217, 230, 305, 324, 338, 339, 341, 347, 365, 370, 372, 375, 387, 389, 396, 453, 475, 512, 513, 514, 521, 532, 533, 534, 535, 539, 540, 585, 594, 602, 621, 622, 627, 628, 635, 636, 637, 638, 643, 647, 649, 651, 653, 662, 663, 667, 797, 870, 871, 872, 875, 878, 879, 880, 881, 907, 944, 948, 949, 952, 955, 965, 966, 967, 974, 989, 1000, 1003, 1004], "durat": [4, 8, 196, 214, 275, 277, 339, 353, 948], "regressor": [4, 74, 85, 123, 128, 129, 132, 149, 154, 162, 164, 166, 174, 176, 178, 196, 199, 213, 214, 215, 306, 307, 332, 352, 365, 366, 375, 377, 387, 390, 399, 408, 412, 440, 456, 457, 458, 459, 499, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 540, 541, 542, 543, 544, 545, 580, 581, 584, 586, 607, 608, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 642, 644, 645, 647, 648, 649, 650, 653, 654, 799, 800, 803, 804, 805, 814, 822, 827, 828, 829, 832, 838, 846, 851, 871, 873, 876, 878, 879, 880, 881, 884, 899, 901, 941, 942, 948, 952, 953, 955, 960, 966, 974, 982, 989, 994, 995, 999, 1000, 1001, 1003, 1004, 1007, 1008], "mlpregressor": [4, 167, 235, 354, 827, 828, 956, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "hidden": [4, 293, 294, 372, 386, 394, 827, 828, 829, 956, 957, 972, 994, 1005], "layer": [4, 164, 212, 235, 290, 293, 294, 295, 352, 372, 396, 489, 490, 497, 797, 827, 828, 829, 832, 851, 957, 974, 989, 1000], "cyclic": [4, 621, 622, 627, 628, 635, 636, 637, 638, 1006], "within": [4, 59, 115, 116, 117, 128, 143, 146, 192, 197, 198, 208, 214, 235, 253, 254, 257, 258, 268, 297, 298, 307, 322, 325, 332, 339, 348, 352, 360, 365, 368, 373, 375, 377, 378, 386, 389, 390, 393, 395, 396, 400, 420, 423, 436, 438, 439, 444, 449, 490, 524, 542, 543, 544, 545, 568, 569, 607, 667, 671, 674, 684, 698, 754, 768, 769, 775, 787, 788, 795, 796, 811, 812, 813, 814, 819, 821, 822, 823, 830, 831, 832, 844, 855, 856, 858, 859, 860, 861, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 946, 948, 949, 955, 958, 962, 965, 967, 968, 973, 976, 978, 982, 985, 987, 996, 997, 1001, 1002, 1007, 1008], "finer": [4, 37, 277, 324, 353, 389, 393, 941, 955, 1004], "resolut": [4, 11, 17, 105, 287, 288, 324, 378, 978, 1004], "taken": [4, 7, 31, 42, 124, 154, 166, 167, 229, 230, 243, 261, 299, 360, 362, 364, 365, 368, 377, 383, 388, 389, 393, 397, 399, 401, 416, 508, 558, 559, 621, 622, 625, 627, 628, 629, 633, 634, 635, 636, 637, 638, 652, 654, 656, 659, 670, 844, 845, 864, 867, 873, 874, 952, 954, 962, 964, 1000, 1003, 1006, 1007], "everi": [4, 95, 161, 194, 197, 218, 231, 241, 246, 264, 308, 348, 360, 363, 365, 366, 368, 372, 377, 378, 389, 391, 393, 394, 397, 416, 429, 483, 511, 514, 520, 532, 534, 535, 539, 565, 566, 578, 621, 622, 624, 627, 628, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 660, 661, 662, 667, 671, 727, 744, 752, 753, 782, 820, 878, 880, 882, 884, 896, 945, 947, 953, 954, 962, 968, 976, 982, 994, 998, 1000, 1003, 1007], "offer": [4, 366, 372, 375, 376, 380, 393, 394, 396, 397, 941, 953, 956, 968, 972, 973, 976, 1000], "view": [4, 16, 30, 42, 46, 77, 97, 167, 193, 198, 236, 352, 354, 365, 389, 397, 511, 620, 632, 811, 812, 885, 948, 949], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 60, 77, 78, 79, 80, 81, 90, 96, 97, 98, 105, 111, 112, 122, 159, 162, 175, 186, 225, 229, 242, 243, 247, 280, 288, 301, 321, 355, 357, 361, 366, 369, 377, 389, 391, 394, 395, 401, 427, 444, 445, 446, 447, 448, 449, 450, 451, 470, 479, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 505, 507, 519, 524, 525, 538, 585, 586, 588, 589, 590, 592, 593, 594, 597, 598, 600, 602, 618, 619, 647, 652, 655, 677, 697, 714, 725, 749, 768, 769, 783, 806, 807, 808, 809, 810, 811, 812, 816, 847, 851, 858, 862, 863, 864, 946, 948, 949, 950, 958, 974, 976, 986, 988, 989, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1006, 1008], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 53, 54, 57, 59, 60, 61, 63, 64, 65, 70, 74, 77, 78, 79, 80, 81, 84, 85, 91, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 116, 117, 118, 121, 122, 124, 125, 126, 129, 132, 133, 138, 141, 142, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 170, 175, 176, 177, 178, 180, 185, 186, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 209, 210, 213, 214, 217, 218, 220, 221, 222, 224, 225, 230, 231, 233, 234, 238, 240, 241, 243, 244, 245, 246, 248, 250, 252, 255, 256, 258, 260, 262, 264, 265, 266, 267, 269, 271, 273, 275, 280, 281, 282, 287, 291, 298, 300, 301, 306, 307, 309, 312, 313, 316, 317, 323, 324, 326, 327, 329, 330, 331, 334, 337, 338, 344, 345, 352, 353, 355, 357, 361, 367, 369, 375, 376, 377, 384, 387, 389, 397, 398, 410, 416, 419, 422, 424, 426, 427, 428, 429, 433, 434, 435, 437, 439, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 465, 466, 469, 470, 471, 477, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 513, 514, 515, 516, 519, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 548, 557, 558, 559, 564, 582, 583, 585, 586, 602, 605, 607, 609, 614, 615, 616, 617, 618, 621, 622, 624, 625, 627, 628, 629, 633, 635, 636, 637, 638, 645, 646, 647, 651, 652, 653, 654, 664, 665, 666, 667, 668, 669, 670, 678, 679, 682, 704, 716, 754, 764, 768, 769, 770, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 790, 796, 797, 802, 804, 805, 806, 807, 808, 810, 811, 812, 816, 820, 827, 828, 829, 831, 834, 836, 845, 848, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 893, 906, 907, 923, 926, 942, 944, 947, 949, 951, 952, 956, 957, 958, 960, 962, 967, 968, 972, 973, 974, 978, 982, 983, 985, 986, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "constant": [4, 105, 113, 152, 156, 162, 166, 167, 184, 197, 198, 200, 214, 227, 236, 258, 287, 292, 294, 298, 300, 306, 332, 334, 348, 366, 373, 377, 386, 396, 399, 408, 440, 456, 457, 458, 486, 488, 509, 513, 515, 522, 524, 525, 526, 527, 529, 531, 533, 535, 537, 540, 543, 545, 565, 581, 584, 586, 588, 602, 605, 607, 608, 610, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 651, 652, 653, 654, 655, 662, 664, 668, 670, 695, 696, 697, 701, 748, 750, 758, 804, 805, 814, 822, 828, 829, 836, 847, 850, 858, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 942, 946, 948, 949, 952, 954, 955, 959, 962, 966, 968, 997, 1002, 1004, 1006, 1007, 1008], "varianc": [4, 5, 27, 44, 56, 61, 72, 77, 79, 84, 85, 95, 96, 97, 100, 103, 104, 106, 108, 124, 133, 156, 158, 164, 166, 174, 176, 185, 196, 198, 201, 214, 215, 255, 258, 265, 268, 284, 291, 297, 302, 332, 338, 348, 357, 361, 373, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 401, 417, 421, 424, 438, 496, 499, 507, 508, 509, 516, 519, 524, 525, 530, 531, 533, 534, 535, 540, 578, 582, 583, 586, 600, 618, 619, 620, 627, 631, 632, 635, 637, 647, 648, 649, 650, 651, 662, 684, 701, 758, 768, 769, 809, 820, 835, 841, 847, 849, 851, 856, 858, 860, 861, 879, 881, 927, 928, 929, 933, 946, 947, 948, 950, 955, 956, 957, 964, 966, 967, 968, 969, 974, 983, 985, 986, 989, 994, 1002, 1004, 1005, 1006, 1007, 1008], "poisson": [4, 164, 174, 215, 232, 361, 396, 439, 440, 470, 498, 527, 533, 537, 540, 623, 644, 647, 655, 680, 697, 718, 722, 723, 725, 797, 831, 832, 835, 836, 844, 845, 846, 851, 879, 881, 911, 948, 968, 1004, 1005, 1006, 1007, 1008], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 130, 138, 172, 210, 225, 230, 231, 253, 255, 257, 260, 266, 270, 307, 312, 313, 315, 317, 321, 323, 324, 327, 328, 330, 331, 334, 392, 394, 399, 427, 510, 594, 595, 614, 615, 616, 618, 619, 620, 623, 655, 660, 666, 697, 720, 725, 732, 739, 748, 749, 750, 768, 780, 783, 865, 866, 867, 872, 873, 874, 875, 876, 941, 944, 947, 948, 950, 965, 967, 978, 982, 983, 985, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1008], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 118, 120, 127, 157, 172, 196, 204, 252, 255, 262, 315, 324, 327, 332, 337, 348, 352, 354, 359, 360, 362, 366, 370, 375, 377, 386, 387, 389, 393, 394, 396, 397, 528, 533, 540, 615, 624, 651, 653, 681, 713, 736, 773, 774, 807, 851, 941, 942, 944, 948, 952, 962, 965, 967, 975, 987, 1007], "gridsearchcv": [4, 54, 68, 70, 72, 73, 75, 77, 103, 164, 231, 236, 248, 253, 254, 255, 256, 260, 263, 266, 271, 277, 279, 294, 299, 307, 324, 332, 348, 353, 366, 375, 377, 390, 393, 477, 495, 515, 516, 550, 574, 579, 677, 715, 780, 783, 831, 870, 878, 941, 948, 952, 956, 966, 967, 972, 973, 982, 983, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "tweedieregressor": [4, 306, 309, 623, 644, 948, 1005, 1008, 1009], "power": [4, 7, 17, 120, 197, 214, 246, 258, 263, 279, 297, 298, 301, 312, 321, 352, 376, 387, 389, 392, 395, 396, 397, 400, 420, 456, 457, 458, 507, 510, 516, 519, 605, 655, 669, 674, 697, 720, 722, 725, 813, 814, 821, 822, 824, 825, 846, 847, 848, 858, 859, 906, 907, 948, 949, 952, 960, 962, 966, 967, 976, 997, 1000, 1002, 1004, 1005, 1007], "param_grid": [4, 6, 70, 71, 72, 73, 122, 231, 236, 253, 254, 255, 259, 260, 263, 266, 277, 299, 324, 332, 377, 390, 396, 715, 770, 773, 780, 781, 941, 952, 982, 983], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 353, 359, 360, 362, 370, 386, 389, 395, 397, 400, 408, 420, 440, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 479, 480, 485, 487, 489, 490, 494, 497, 498, 511, 512, 519, 527, 528, 529, 531, 532, 533, 534, 535, 537, 539, 540, 541, 543, 545, 558, 559, 565, 569, 571, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 651, 652, 653, 654, 672, 678, 679, 687, 702, 703, 704, 707, 711, 712, 730, 742, 756, 757, 760, 765, 766, 767, 770, 783, 792, 793, 794, 804, 805, 806, 807, 814, 816, 822, 829, 846, 850, 871, 873, 876, 878, 879, 880, 881, 907, 941, 948, 949, 952, 953, 954, 955, 962, 966, 967, 968, 983, 987, 995, 1000, 1002], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 348, 365, 366, 367, 368, 370, 375, 377, 380, 397, 973, 975, 987], "998": [4, 15, 956], "secondjupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 390, 443, 868, 968, 973, 1005, 1008], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 360, 365, 366, 377, 380, 382, 983, 994, 998, 1001], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 365, 368, 377, 380, 382, 987, 994, 1001], "kernelpca": [5, 390, 394, 508, 509, 516, 519, 663, 665, 667, 837, 962, 995, 996, 1000, 1003, 1004, 1005, 1006, 1007, 1008], "short": [5, 187, 253, 293, 337, 365, 372, 393, 397, 401, 948, 949, 955, 999, 1004, 1005, 1006, 1007, 1008], "take": [5, 8, 30, 46, 65, 74, 79, 89, 91, 95, 110, 118, 149, 151, 154, 158, 166, 167, 172, 179, 204, 205, 221, 242, 243, 250, 256, 260, 265, 273, 275, 278, 281, 282, 283, 285, 286, 297, 309, 315, 320, 321, 324, 334, 338, 339, 343, 352, 353, 354, 359, 360, 363, 365, 366, 369, 370, 371, 372, 375, 377, 378, 387, 389, 390, 392, 393, 394, 396, 397, 398, 399, 401, 413, 419, 422, 424, 425, 427, 432, 433, 434, 436, 438, 444, 494, 508, 513, 514, 515, 521, 522, 556, 567, 570, 571, 573, 574, 575, 585, 586, 591, 595, 596, 599, 607, 618, 624, 646, 648, 649, 650, 651, 654, 666, 667, 674, 679, 681, 683, 693, 702, 703, 711, 715, 716, 729, 744, 747, 751, 752, 753, 754, 756, 757, 760, 761, 770, 771, 775, 783, 787, 795, 813, 814, 815, 817, 819, 820, 821, 822, 823, 835, 865, 866, 870, 871, 872, 873, 874, 875, 876, 894, 922, 941, 944, 948, 949, 951, 952, 953, 955, 957, 958, 962, 967, 968, 976, 978, 982, 984, 991, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "exact": [5, 7, 81, 100, 154, 200, 230, 348, 352, 353, 359, 365, 366, 373, 375, 376, 377, 389, 398, 399, 410, 456, 457, 458, 462, 470, 509, 510, 516, 536, 537, 613, 617, 621, 667, 770, 783, 792, 793, 794, 872, 875, 941, 944, 948, 949, 958, 962, 966, 967, 1001, 1002, 1004], "usp": 5, "digit": [5, 29, 35, 36, 51, 67, 71, 87, 92, 134, 139, 144, 164, 187, 203, 212, 216, 221, 223, 229, 230, 253, 254, 257, 279, 284, 290, 292, 293, 295, 311, 318, 358, 365, 370, 389, 395, 396, 398, 417, 421, 422, 477, 516, 519, 524, 541, 633, 663, 664, 665, 666, 667, 678, 679, 687, 691, 692, 710, 764, 766, 793, 797, 813, 820, 827, 831, 832, 841, 851, 856, 863, 866, 875, 882, 883, 884, 941, 947, 949, 952, 955, 957, 965, 978, 982, 985, 986, 989, 998], "reproduc": [5, 12, 59, 110, 166, 172, 184, 294, 353, 355, 364, 365, 366, 367, 372, 375, 377, 383, 389, 393, 394, 397, 401, 415, 416, 429, 435, 444, 449, 462, 465, 466, 469, 471, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 526, 528, 529, 530, 531, 534, 535, 536, 537, 538, 582, 583, 585, 586, 609, 614, 615, 616, 617, 621, 622, 625, 627, 628, 629, 635, 636, 637, 638, 641, 642, 643, 646, 651, 653, 654, 664, 665, 667, 668, 669, 764, 768, 769, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 795, 796, 797, 801, 802, 805, 816, 820, 827, 828, 829, 836, 848, 859, 862, 863, 870, 871, 872, 875, 906, 907, 923, 926, 944, 972, 975, 994, 1002, 1007, 1008], "sect": 5, "bak\u0131r": [5, 394, 510], "g\u00f6khan": [5, 394, 510], "h": [5, 6, 48, 57, 95, 96, 109, 110, 111, 127, 151, 166, 242, 280, 283, 291, 299, 309, 317, 320, 339, 362, 370, 389, 391, 394, 395, 396, 397, 400, 420, 494, 507, 510, 513, 515, 522, 528, 542, 543, 557, 565, 582, 583, 664, 668, 678, 682, 730, 806, 810, 811, 812, 817, 827, 842, 851, 944, 946, 948, 949, 950, 952, 954, 956, 957, 966, 968, 983, 1000, 1005], "jason": [5, 394, 510, 866, 1000, 1002, 1006], "weston": [5, 394, 510, 568, 569, 866], "bernhard": [5, 394, 510, 802, 837, 866, 953, 958, 967, 1000], "sch\u00f6lkopf": [5, 394, 510, 837, 958, 962, 967], "pre": [5, 70, 119, 166, 185, 297, 339, 355, 363, 365, 377, 380, 391, 393, 394, 396, 397, 398, 400, 401, 419, 420, 422, 434, 508, 510, 665, 686, 736, 834, 875, 952, 957, 962, 967, 968, 972, 973, 989, 997, 1002, 1008], "advanc": [5, 164, 224, 226, 238, 255, 354, 389, 394, 463, 476, 510, 607, 614, 756, 768, 820, 829, 832, 851, 879, 944, 955, 962, 976, 991, 996], "neural": [5, 6, 31, 167, 255, 293, 355, 375, 377, 383, 393, 394, 396, 401, 508, 510, 513, 515, 522, 542, 543, 614, 620, 671, 714, 768, 820, 827, 828, 829, 837, 944, 948, 949, 950, 952, 955, 958, 962, 966, 968, 972, 974, 976, 983, 988, 989, 994, 1006], "system": [5, 100, 255, 262, 348, 352, 354, 360, 362, 365, 366, 367, 372, 375, 380, 389, 394, 396, 400, 420, 453, 510, 514, 518, 525, 614, 620, 625, 626, 629, 630, 631, 657, 658, 699, 729, 742, 768, 820, 865, 866, 920, 952, 955, 964, 972, 973, 976, 987, 994, 1002, 1003], "2004": [5, 146, 255, 360, 362, 389, 391, 394, 448, 510, 582, 583, 664, 668, 679, 716, 756, 866, 946, 948, 949, 954, 967, 985], "449": [5, 394, 510], "456": [5, 73, 75, 394, 510], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 54, 55, 56, 60, 64, 65, 66, 69, 70, 71, 73, 74, 81, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 175, 176, 178, 181, 183, 184, 185, 187, 188, 189, 190, 196, 197, 198, 200, 201, 203, 204, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 240, 242, 243, 254, 256, 258, 259, 261, 268, 273, 275, 277, 280, 287, 288, 291, 294, 297, 298, 300, 301, 312, 313, 314, 315, 317, 332, 337, 338, 339, 359, 365, 368, 372, 375, 377, 393, 426, 474, 509, 838, 944, 970, 972, 997], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 74, 81, 155, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 256, 258, 261, 268, 287, 332, 337, 338, 339, 506, 512, 633, 639, 660, 661, 731, 732, 950, 952], "licenc": [5, 359], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 240, 242, 256, 259, 261, 268, 273, 275, 277, 283, 284, 285, 287, 288, 291, 294, 297, 298, 299, 300, 301, 302, 312, 313, 314, 315, 317, 328, 329, 332, 333, 337, 338, 339, 370], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 225, 230, 231, 232, 234, 240, 242, 256, 261, 268, 273, 275, 277, 283, 284, 285, 287, 288, 291, 297, 298, 299, 300, 301, 302, 328, 329, 332, 333, 337, 338, 339], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 60, 61, 65, 72, 74, 77, 78, 79, 84, 85, 96, 101, 110, 111, 113, 121, 122, 125, 126, 141, 152, 155, 156, 162, 164, 166, 174, 175, 176, 177, 178, 180, 184, 185, 186, 189, 191, 194, 195, 198, 199, 200, 202, 210, 215, 220, 234, 240, 246, 249, 252, 255, 261, 280, 281, 296, 298, 302, 303, 306, 309, 315, 324, 338, 339, 348, 355, 357, 360, 361, 362, 365, 369, 373, 376, 377, 386, 387, 389, 390, 392, 395, 396, 397, 401, 415, 416, 424, 426, 427, 428, 437, 439, 440, 450, 456, 457, 458, 463, 470, 487, 490, 494, 501, 502, 508, 511, 516, 517, 519, 523, 524, 527, 528, 529, 532, 533, 534, 535, 537, 538, 539, 540, 541, 553, 554, 555, 557, 563, 564, 565, 566, 586, 600, 602, 614, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 651, 655, 662, 666, 670, 672, 677, 678, 680, 692, 697, 699, 707, 709, 714, 718, 722, 723, 725, 728, 729, 730, 734, 743, 765, 766, 767, 773, 774, 797, 799, 808, 810, 816, 817, 820, 831, 832, 835, 836, 839, 840, 841, 844, 845, 846, 847, 848, 849, 851, 855, 856, 858, 859, 860, 861, 865, 866, 878, 879, 880, 881, 906, 907, 911, 928, 929, 934, 935, 941, 946, 948, 949, 950, 951, 954, 958, 963, 965, 967, 968, 983, 985, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "pixel": [5, 6, 13, 32, 47, 48, 95, 108, 133, 144, 164, 172, 229, 253, 293, 294, 362, 389, 394, 396, 397, 398, 467, 468, 469, 539, 560, 561, 582, 583, 609, 955, 957, 968, 983, 986], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 70, 74, 85, 100, 109, 115, 116, 120, 121, 122, 123, 124, 128, 142, 143, 166, 167, 168, 169, 172, 191, 196, 203, 204, 211, 212, 214, 226, 237, 249, 252, 253, 258, 262, 264, 268, 273, 283, 284, 291, 293, 294, 299, 301, 302, 305, 306, 307, 316, 342, 346, 348, 369, 376, 390, 393, 396, 413, 414, 533, 535, 542, 543, 672, 673, 675, 676, 770, 799, 802, 820, 828, 829, 831, 880, 881, 941, 942, 952, 954, 955, 960, 962, 967, 983, 991, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1007], "data_id": [5, 119, 154, 166, 196, 214, 226, 359, 470], "41082": 5, "return_x_i": [5, 7, 14, 57, 69, 70, 71, 72, 95, 119, 120, 132, 135, 136, 137, 142, 161, 162, 168, 172, 181, 183, 184, 185, 187, 192, 193, 203, 211, 212, 226, 233, 237, 251, 254, 257, 262, 263, 270, 273, 277, 284, 292, 293, 294, 302, 305, 307, 309, 315, 327, 339, 342, 358, 369, 370, 376, 383, 389, 390, 393, 396, 398, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 485, 507, 508, 509, 510, 533, 536, 537, 542, 543, 567, 570, 571, 573, 574, 575, 577, 585, 594, 595, 597, 598, 613, 614, 633, 634, 643, 648, 649, 650, 663, 664, 665, 666, 761, 773, 774, 799, 804, 815, 820, 823, 879, 880, 881, 942, 947, 952, 953, 954, 955, 962, 978, 982, 983, 985, 986, 991, 1000, 1002, 1004, 1007], "idea": [5, 79, 80, 146, 154, 166, 197, 217, 280, 324, 342, 352, 353, 365, 369, 370, 391, 392, 393, 394, 395, 396, 398, 582, 583, 948, 949, 952, 955, 958, 971, 976, 987], "noisi": [5, 33, 61, 96, 142, 149, 155, 195, 198, 200, 220, 228, 246, 256, 262, 264, 265, 344, 345, 348, 389, 397, 400, 420, 425, 496, 499, 907, 947, 949, 955, 967, 972], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 56, 60, 65, 70, 71, 74, 78, 79, 95, 97, 98, 105, 111, 125, 128, 131, 150, 154, 157, 158, 166, 169, 172, 175, 176, 178, 180, 182, 186, 187, 188, 190, 195, 196, 197, 198, 205, 206, 207, 209, 211, 212, 214, 219, 220, 222, 228, 229, 230, 231, 235, 240, 242, 246, 250, 253, 255, 258, 260, 265, 266, 269, 280, 281, 282, 294, 298, 299, 301, 308, 316, 317, 322, 323, 325, 326, 327, 329, 331, 332, 334, 335, 337, 338, 342, 345, 346, 352, 354, 360, 362, 365, 366, 369, 370, 386, 389, 390, 393, 394, 395, 396, 397, 413, 417, 421, 424, 446, 447, 453, 464, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 503, 505, 506, 509, 511, 512, 514, 519, 520, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 585, 606, 607, 608, 614, 615, 616, 617, 621, 622, 623, 624, 627, 628, 633, 634, 635, 636, 637, 638, 640, 642, 644, 646, 655, 656, 659, 663, 664, 665, 666, 668, 719, 768, 769, 772, 796, 801, 806, 807, 808, 810, 811, 812, 816, 828, 829, 847, 849, 860, 941, 942, 945, 949, 952, 953, 959, 962, 964, 978, 982, 986, 987, 1002, 1003, 1004, 1007, 1008], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 60, 61, 66, 74, 85, 95, 96, 98, 100, 103, 111, 113, 122, 126, 127, 148, 149, 154, 159, 164, 175, 177, 178, 180, 185, 186, 191, 194, 195, 198, 199, 201, 213, 220, 222, 225, 227, 228, 231, 255, 263, 268, 269, 287, 291, 292, 299, 306, 331, 344, 345, 348, 361, 366, 369, 387, 389, 394, 396, 398, 400, 420, 427, 486, 488, 489, 490, 491, 492, 493, 497, 499, 500, 505, 507, 509, 516, 582, 583, 586, 588, 589, 590, 591, 592, 596, 597, 599, 600, 619, 620, 624, 625, 626, 628, 629, 630, 631, 638, 639, 640, 646, 654, 667, 848, 859, 865, 945, 947, 948, 949, 952, 955, 965, 985, 986, 995, 1000, 1005, 1007, 1008], "approach": [5, 8, 57, 62, 65, 99, 146, 149, 161, 166, 169, 178, 184, 196, 198, 204, 214, 217, 337, 338, 339, 354, 364, 365, 370, 373, 377, 380, 383, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 413, 419, 423, 427, 437, 495, 507, 557, 564, 610, 633, 634, 649, 650, 800, 816, 907, 941, 942, 948, 949, 952, 953, 955, 956, 962, 966, 967, 971, 972, 976, 980, 985, 986, 998], "copi": [5, 12, 17, 44, 61, 74, 98, 113, 161, 162, 166, 168, 182, 189, 202, 212, 214, 218, 312, 313, 315, 317, 338, 343, 353, 362, 365, 366, 368, 369, 370, 375, 377, 410, 413, 416, 418, 419, 420, 422, 424, 429, 434, 456, 457, 458, 459, 475, 477, 485, 507, 508, 509, 510, 516, 523, 528, 529, 534, 536, 537, 547, 565, 572, 582, 583, 585, 586, 603, 605, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 646, 647, 649, 654, 656, 659, 660, 661, 705, 742, 770, 783, 811, 812, 826, 834, 837, 840, 841, 842, 843, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 861, 865, 866, 870, 872, 873, 874, 875, 876, 885, 888, 890, 891, 923, 925, 926, 962, 967, 968, 973, 979, 982, 987, 994, 997, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "add": [5, 12, 16, 17, 25, 26, 27, 33, 40, 44, 54, 79, 80, 85, 96, 118, 121, 142, 146, 149, 154, 155, 156, 161, 162, 178, 180, 185, 191, 197, 199, 211, 220, 225, 229, 231, 262, 264, 265, 275, 287, 299, 301, 305, 307, 308, 327, 331, 332, 338, 352, 363, 364, 365, 366, 368, 370, 372, 377, 380, 387, 393, 396, 397, 398, 490, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 577, 602, 603, 605, 607, 633, 634, 669, 672, 790, 811, 812, 867, 897, 920, 941, 942, 951, 958, 962, 965, 966, 973, 985, 986, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "corrupt": [5, 103, 180, 202, 213, 375, 827, 948, 960], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 55, 57, 66, 69, 70, 74, 79, 95, 96, 109, 111, 121, 122, 123, 127, 129, 132, 140, 143, 147, 149, 154, 155, 157, 167, 168, 169, 185, 196, 197, 204, 213, 214, 217, 225, 232, 252, 253, 258, 275, 288, 294, 297, 298, 300, 307, 309, 317, 322, 338, 342, 352, 355, 359, 360, 361, 362, 363, 366, 367, 372, 377, 378, 379, 387, 390, 394, 395, 397, 399, 400, 401, 413, 420, 422, 423, 424, 425, 427, 431, 432, 436, 438, 439, 440, 441, 442, 461, 476, 483, 484, 507, 508, 510, 511, 512, 513, 514, 516, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 552, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 585, 586, 591, 592, 593, 596, 599, 607, 608, 610, 611, 620, 621, 625, 626, 627, 629, 630, 631, 639, 646, 647, 648, 649, 650, 657, 658, 660, 661, 662, 665, 667, 678, 691, 699, 708, 709, 710, 712, 714, 728, 729, 730, 766, 770, 772, 773, 774, 776, 778, 783, 787, 788, 789, 795, 801, 802, 805, 813, 814, 815, 817, 819, 821, 822, 823, 828, 829, 833, 836, 843, 844, 846, 850, 859, 862, 863, 865, 866, 867, 872, 873, 874, 875, 876, 878, 879, 880, 881, 893, 901, 915, 920, 921, 941, 943, 944, 946, 947, 949, 952, 953, 954, 955, 956, 957, 958, 959, 962, 964, 965, 966, 967, 968, 971, 972, 973, 974, 976, 982, 989, 990, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1005], "solv": [5, 6, 65, 149, 185, 230, 255, 364, 365, 366, 369, 375, 389, 391, 393, 394, 399, 422, 428, 437, 453, 506, 512, 513, 514, 518, 520, 521, 522, 523, 610, 612, 621, 627, 629, 630, 639, 640, 645, 647, 649, 652, 660, 661, 662, 801, 870, 871, 874, 907, 943, 946, 948, 949, 952, 953, 966, 967, 968, 971, 972, 976, 980, 983, 987, 1000, 1004, 1007], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 210, 211, 212, 214, 226, 233, 237, 242, 244, 249, 252, 253, 258, 262, 264, 268, 273, 281, 283, 284, 291, 293, 294, 299, 301, 302, 305, 306, 307, 315, 316, 323, 337, 342, 346, 348, 352, 359, 366, 369, 376, 390, 393, 396, 413, 414, 484, 533, 534, 535, 542, 543, 672, 673, 675, 676, 797, 799, 802, 820, 828, 829, 831, 880, 881, 942, 952, 954, 955, 956, 958, 960, 962, 966, 967, 982, 983, 991], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 172, 176, 180, 186, 191, 193, 194, 202, 203, 204, 210, 211, 212, 214, 226, 228, 233, 237, 242, 249, 252, 253, 258, 262, 264, 268, 269, 273, 281, 283, 284, 291, 293, 294, 299, 301, 302, 305, 306, 307, 315, 316, 323, 337, 342, 344, 345, 346, 348, 352, 359, 366, 369, 376, 390, 393, 396, 414, 445, 446, 447, 448, 449, 450, 451, 484, 533, 534, 535, 542, 543, 672, 673, 675, 676, 797, 799, 802, 820, 828, 829, 831, 880, 881, 942, 952, 954, 955, 956, 958, 962, 966, 967, 982, 983, 985, 991, 994], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 211, 212, 226, 233, 237, 242, 249, 252, 253, 258, 262, 264, 268, 273, 283, 284, 291, 293, 294, 299, 302, 305, 306, 307, 312, 313, 315, 316, 317, 337, 342, 346, 348, 352, 359, 366, 369, 376, 390, 393, 396, 413, 414, 533, 534, 535, 542, 543, 672, 673, 675, 676, 797, 799, 802, 820, 828, 829, 831, 880, 881, 942, 952, 954, 955, 960, 962, 967, 982, 983, 991], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 128, 137, 138, 142, 143, 157, 166, 167, 168, 169, 172, 180, 191, 193, 196, 202, 203, 204, 211, 212, 214, 226, 233, 237, 242, 249, 252, 253, 258, 262, 264, 268, 273, 283, 284, 291, 293, 294, 299, 302, 305, 306, 307, 315, 316, 337, 342, 346, 348, 359, 369, 376, 390, 393, 396, 414, 533, 534, 535, 542, 543, 672, 673, 675, 676, 797, 799, 802, 820, 828, 829, 831, 880, 881, 952, 954, 955, 962, 967, 982, 983, 991, 994], "stratifi": [5, 100, 116, 142, 168, 211, 226, 250, 255, 258, 283, 284, 305, 366, 377, 526, 534, 542, 543, 577, 634, 641, 643, 651, 770, 773, 774, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 820, 828, 923, 952, 955, 982, 999, 1000, 1001, 1003, 1004, 1007], "train_siz": [5, 7, 10, 128, 150, 172, 212, 231, 257, 268, 307, 332, 772, 786, 789, 795, 797, 947, 982, 994, 995, 1000, 1001], "1_000": [5, 48, 100, 149, 154, 156, 229], "rng": [5, 20, 21, 31, 37, 50, 80, 85, 95, 97, 103, 111, 122, 125, 126, 128, 149, 150, 153, 155, 156, 158, 161, 162, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 225, 231, 233, 234, 240, 250, 258, 261, 266, 267, 291, 301, 306, 307, 309, 312, 313, 317, 327, 344, 345, 348, 353, 366, 369, 445, 449, 450, 451, 618, 624, 645, 647, 653, 781, 806, 807, 808, 810, 811, 812, 816, 819, 821, 822, 823, 848, 859, 862, 863, 865, 866, 867, 876, 978], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 60, 80, 81, 85, 95, 97, 103, 111, 121, 122, 125, 126, 128, 142, 149, 150, 153, 155, 156, 158, 161, 162, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 220, 225, 231, 234, 240, 243, 250, 258, 261, 262, 264, 265, 266, 267, 275, 291, 298, 300, 301, 306, 307, 309, 312, 313, 317, 327, 344, 345, 366, 369, 373, 377, 394, 401, 416, 419, 422, 424, 426, 427, 428, 429, 433, 434, 435, 437, 444, 445, 449, 450, 451, 462, 465, 466, 469, 471, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 558, 559, 582, 583, 585, 586, 602, 607, 609, 614, 615, 616, 617, 618, 621, 622, 624, 625, 627, 628, 629, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 646, 647, 649, 651, 652, 653, 654, 662, 664, 665, 666, 667, 668, 669, 670, 754, 764, 768, 769, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 795, 796, 797, 801, 802, 805, 806, 807, 808, 810, 811, 812, 816, 820, 827, 828, 829, 836, 848, 859, 862, 863, 865, 866, 867, 870, 871, 872, 875, 876, 878, 879, 880, 881, 893, 906, 907, 921, 923, 926, 962, 978, 989], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 214, 266, 358, 366, 367, 376, 377, 393, 550, 982, 983, 994, 1001, 1002, 1003, 1007], "qualit": [5, 6, 60, 122, 196, 360, 389, 415, 983], "assess": [5, 37, 59, 120, 122, 196, 234, 252, 254, 258, 387, 396, 716, 951, 952, 958, 973], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 69, 77, 81, 85, 90, 100, 111, 113, 119, 121, 122, 154, 156, 166, 167, 176, 182, 186, 187, 197, 202, 211, 213, 214, 242, 255, 262, 267, 277, 288, 292, 294, 297, 299, 301, 307, 312, 317, 324, 329, 337, 338, 354, 358, 360, 362, 365, 367, 373, 377, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 417, 419, 421, 422, 424, 433, 434, 438, 450, 470, 472, 513, 515, 522, 530, 531, 532, 536, 537, 539, 557, 564, 565, 582, 583, 625, 629, 630, 631, 633, 634, 654, 657, 658, 719, 773, 774, 787, 796, 799, 828, 829, 836, 863, 872, 875, 907, 941, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 962, 964, 965, 968, 973, 976, 985, 986, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009], "nrow": [5, 32, 65, 72, 95, 158, 196, 198, 204, 214, 217, 218, 221, 258, 275, 299, 301, 313, 331, 332, 983], "img": [5, 50, 65, 481, 561], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 57, 79, 105, 111, 113, 118, 122, 125, 127, 128, 129, 138, 149, 151, 153, 154, 155, 156, 166, 175, 186, 187, 189, 196, 204, 209, 210, 218, 222, 225, 229, 231, 242, 244, 258, 262, 264, 275, 280, 281, 287, 288, 291, 292, 293, 294, 299, 300, 309, 317, 323, 324, 328, 329, 330, 331, 333, 334, 337, 344, 345, 440, 467, 468, 469, 606, 692, 939, 952], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 57, 81, 88, 95, 98, 106, 151, 152, 153, 157, 169, 187, 212, 218, 233, 266, 279, 294, 312, 313, 324, 330, 333, 359, 672, 983, 984, 1008], "grei": [5, 34, 265, 297, 360], "off": [5, 12, 13, 39, 40, 47, 48, 52, 77, 81, 84, 95, 218, 230, 233, 249, 254, 256, 297, 313, 317, 324, 334, 337, 360, 365, 366, 389, 391, 396, 398, 418, 528, 529, 534, 535, 563, 566, 609, 631, 667, 689, 768, 769, 770, 773, 774, 783, 794, 911, 951, 957, 967, 973, 994, 998, 999, 1001], "fontsiz": [5, 8, 10, 14, 34, 50, 59, 74, 90, 98, 118, 141, 152, 153, 155, 158, 176, 186, 195, 207, 218, 219, 243, 245, 250, 259, 260, 261, 266, 267, 294, 301, 331, 884], "mse": [5, 7, 77, 78, 122, 123, 161, 162, 196, 198, 202, 269, 622, 628, 723, 952, 968, 1005, 1007], "quantit": [5, 6, 25, 60, 122, 132, 146, 269, 362, 983], "nmse": [5, 269], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 61, 63, 66, 74, 84, 91, 98, 105, 122, 128, 129, 141, 166, 167, 169, 172, 176, 185, 187, 192, 196, 211, 212, 213, 214, 225, 229, 254, 258, 259, 261, 263, 264, 265, 283, 284, 291, 299, 309, 324, 332, 337, 338, 348, 390, 393, 396], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 73, 74, 84, 85, 95, 100, 104, 109, 113, 115, 127, 129, 132, 135, 136, 138, 141, 144, 145, 146, 153, 155, 161, 162, 165, 167, 170, 172, 178, 182, 184, 185, 186, 191, 193, 194, 197, 198, 204, 208, 210, 212, 213, 214, 215, 216, 219, 221, 223, 228, 231, 232, 233, 236, 249, 252, 253, 255, 258, 260, 261, 262, 263, 264, 265, 269, 280, 283, 284, 294, 297, 298, 299, 307, 308, 319, 321, 324, 325, 326, 328, 329, 333, 335, 337, 344, 345, 353, 355, 357, 361, 362, 363, 366, 367, 369, 377, 379, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 418, 430, 440, 442, 450, 456, 457, 458, 470, 476, 477, 487, 490, 496, 499, 507, 508, 509, 510, 511, 514, 516, 518, 519, 523, 524, 525, 529, 541, 557, 564, 568, 569, 581, 584, 589, 595, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 668, 681, 690, 723, 726, 738, 740, 747, 758, 770, 780, 784, 794, 797, 811, 812, 816, 820, 827, 828, 829, 832, 837, 838, 841, 844, 846, 848, 849, 850, 851, 859, 863, 870, 871, 872, 873, 874, 875, 876, 941, 943, 944, 945, 947, 952, 955, 956, 957, 958, 959, 960, 966, 967, 972, 974, 976, 978, 981, 982, 987, 988, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008], "radial": [5, 100, 149, 154, 156, 324, 357, 362, 427, 597, 666, 950, 967, 989], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 130, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 210, 224, 225, 231, 238, 253, 255, 257, 260, 317, 319, 321, 328, 330, 331, 335, 357, 390, 394, 396, 423, 427, 477, 479, 510, 516, 585, 586, 587, 588, 591, 594, 595, 596, 598, 599, 614, 615, 616, 617, 618, 651, 666, 738, 747, 749, 770, 780, 783, 789, 831, 851, 865, 866, 870, 872, 873, 874, 875, 876, 941, 944, 945, 949, 952, 958, 962, 965, 978, 983, 989, 1000, 1005], "decomposit": [5, 6, 14, 17, 57, 69, 71, 72, 73, 85, 86, 89, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 133, 217, 218, 220, 230, 232, 236, 254, 279, 284, 302, 309, 338, 354, 355, 358, 370, 373, 377, 386, 390, 396, 424, 426, 427, 428, 437, 456, 457, 458, 469, 524, 531, 586, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 647, 648, 649, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 768, 769, 820, 827, 830, 833, 849, 879, 906, 907, 948, 949, 952, 969, 972, 974, 981, 983, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001], "kernel_pca": [5, 100, 390], "400": [5, 26, 50, 95, 109, 124, 128, 149, 162, 202, 214, 222, 267, 275, 292, 338, 360, 394, 469, 987], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 154, 155, 156, 157, 158, 161, 166, 176, 189, 196, 197, 203, 210, 214, 220, 225, 231, 235, 240, 243, 246, 253, 263, 266, 293, 308, 316, 322, 324, 332, 337, 370, 401, 419, 422, 427, 434, 437, 446, 447, 453, 456, 457, 458, 506, 507, 508, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 534, 535, 536, 537, 567, 572, 586, 588, 589, 590, 594, 595, 597, 598, 600, 602, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 627, 628, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 662, 664, 665, 666, 667, 668, 669, 670, 701, 714, 758, 768, 769, 783, 806, 807, 808, 809, 810, 811, 812, 820, 828, 829, 836, 865, 866, 870, 871, 872, 873, 874, 875, 876, 938, 941, 952, 956, 960, 962, 966, 983, 987, 1002, 1007, 1008, 1009], "fit_inverse_transform": [5, 100, 510, 1003], "5e": [5, 95, 181, 570, 571, 573], "inde": [5, 7, 25, 39, 40, 57, 81, 85, 100, 113, 146, 149, 166, 168, 175, 184, 185, 196, 198, 258, 262, 297, 338, 348, 352, 364, 369, 376, 377, 378, 391, 396, 542, 543, 948, 962, 966, 1008], "least": [5, 14, 79, 80, 83, 86, 98, 120, 123, 146, 157, 164, 174, 175, 189, 196, 198, 201, 204, 213, 214, 215, 229, 255, 257, 273, 307, 308, 324, 338, 339, 352, 358, 360, 362, 364, 365, 370, 372, 375, 377, 378, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 420, 423, 425, 431, 432, 433, 436, 449, 456, 457, 458, 459, 468, 491, 506, 512, 514, 516, 517, 518, 520, 521, 522, 523, 524, 532, 533, 534, 535, 537, 539, 540, 541, 568, 577, 610, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 638, 639, 640, 641, 642, 643, 646, 647, 649, 651, 653, 654, 657, 658, 659, 660, 661, 662, 667, 672, 686, 690, 692, 758, 771, 775, 781, 783, 784, 785, 787, 788, 790, 792, 795, 796, 797, 828, 829, 832, 843, 851, 875, 878, 879, 880, 881, 899, 917, 942, 945, 949, 955, 964, 966, 967, 968, 973, 974, 976, 985, 989, 994, 996, 997, 1000, 1001, 1005], "hope": [5, 214, 377, 388, 1003], "think": [5, 37, 167, 302, 337, 338, 365, 395, 951, 973, 975, 976, 978], "happen": [5, 115, 184, 297, 338, 348, 352, 353, 364, 365, 368, 369, 370, 375, 377, 378, 380, 389, 391, 393, 396, 413, 490, 547, 633, 758, 849, 851, 870, 948, 952, 953, 967, 973, 987, 1002, 1006, 1007], "ridg": [5, 10, 13, 54, 74, 129, 146, 148, 159, 161, 164, 166, 174, 175, 196, 197, 215, 224, 233, 238, 337, 352, 355, 375, 394, 396, 499, 510, 514, 518, 586, 590, 597, 600, 618, 619, 620, 622, 624, 632, 636, 648, 649, 650, 653, 662, 723, 770, 783, 795, 804, 876, 947, 960, 962, 966, 967, 974, 985, 989, 994, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1007, 1008, 1009], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 143, 279, 338, 394, 397, 421, 440, 456, 457, 458, 508, 509, 510, 513, 514, 515, 516, 518, 519, 556, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 605, 770, 773, 774, 783, 831, 835, 836, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 851, 862, 863, 962, 963, 964, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 57, 78, 85, 95, 97, 103, 109, 110, 113, 118, 122, 149, 151, 153, 155, 157, 168, 181, 182, 186, 196, 197, 198, 199, 209, 217, 221, 228, 229, 233, 242, 246, 254, 255, 257, 258, 262, 263, 264, 265, 268, 279, 281, 282, 299, 309, 315, 324, 330, 337, 338, 339, 343, 360, 362, 365, 387, 388, 389, 392, 393, 394, 395, 396, 397, 400, 420, 423, 439, 442, 472, 484, 507, 509, 516, 519, 528, 534, 535, 536, 537, 538, 563, 564, 566, 578, 586, 588, 589, 590, 592, 594, 595, 597, 598, 600, 607, 608, 610, 612, 652, 654, 686, 690, 698, 701, 707, 712, 768, 769, 817, 819, 821, 822, 823, 825, 872, 873, 874, 877, 894, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 960, 964, 966, 967, 968, 985, 996, 997, 1002, 1009], "analysi": [5, 7, 9, 25, 29, 35, 36, 62, 67, 93, 96, 97, 99, 100, 102, 104, 107, 119, 164, 166, 185, 218, 239, 247, 252, 255, 256, 260, 276, 289, 297, 302, 338, 355, 357, 360, 362, 365, 366, 378, 386, 389, 391, 396, 397, 401, 415, 422, 423, 448, 450, 451, 456, 457, 459, 477, 479, 487, 490, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 530, 531, 613, 663, 665, 666, 667, 668, 684, 693, 698, 699, 729, 761, 762, 763, 764, 768, 770, 793, 797, 813, 820, 831, 832, 837, 847, 851, 858, 906, 907, 942, 948, 949, 951, 952, 962, 971, 972, 974, 976, 979, 988, 989, 994, 995, 996, 998, 1003], "favor": [5, 81, 157, 240, 246, 375, 391, 396, 703, 777, 779, 830, 901, 941, 960, 996, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1009], "background": [5, 11, 47, 65, 294, 299, 360, 365, 372, 389, 467, 468, 949, 957, 966, 1004], "359": [5, 15], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 66, 67, 70, 71, 72, 73, 74, 79, 80, 81, 85, 92, 93, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 148, 157, 159, 161, 162, 167, 168, 169, 172, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 195, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 215, 219, 221, 222, 224, 226, 229, 231, 232, 233, 234, 237, 238, 240, 242, 243, 244, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 270, 273, 275, 277, 278, 279, 283, 284, 285, 286, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 322, 324, 325, 326, 327, 328, 332, 333, 334, 335, 338, 339, 341, 342, 344, 345, 346, 347, 348, 353, 354, 355, 366, 367, 368, 370, 376, 377, 379, 380, 383, 385, 386, 387, 389, 390, 393, 394, 395, 396, 397, 398, 404, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 433, 434, 444, 445, 448, 449, 450, 451, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 558, 559, 563, 564, 565, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 585, 586, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 609, 610, 613, 614, 615, 618, 621, 622, 624, 626, 627, 628, 630, 632, 633, 634, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 654, 663, 664, 665, 666, 667, 672, 673, 675, 676, 677, 678, 682, 702, 728, 730, 760, 761, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 827, 828, 829, 831, 832, 835, 836, 844, 845, 849, 851, 852, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 890, 891, 895, 896, 941, 942, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 972, 973, 975, 976, 979, 981, 982, 983, 986, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001], "excerpt": [6, 964, 983], "wild": [6, 358, 467, 468, 483, 484, 983, 989, 994], "aka": [6, 291, 337, 375, 397, 427, 511, 513, 515, 519, 522, 556, 557, 590, 597, 626, 627, 629, 630, 631, 633, 634, 637, 641, 642, 643, 645, 651, 652, 653, 714, 838, 842, 844, 948, 956, 966, 978, 983, 996, 1008], "lfw": [6, 360, 467, 468, 983, 994], "vi": [6, 8, 360, 674, 983, 1002, 1005], "www": [6, 70, 172, 196, 212, 214, 226, 273, 293, 359, 360, 365, 368, 370, 372, 380, 389, 393, 418, 424, 461, 483, 484, 506, 509, 512, 516, 619, 633, 639, 646, 660, 661, 820, 827, 878, 879, 948, 965, 983], "umass": [6, 360, 983], "edu": [6, 8, 11, 17, 46, 120, 146, 156, 172, 178, 217, 243, 254, 280, 288, 301, 337, 359, 360, 362, 389, 424, 461, 474, 477, 483, 484, 485, 509, 616, 619, 624, 633, 641, 642, 651, 654, 657, 658, 664, 666, 668, 806, 808, 809, 810, 820, 827, 863, 864, 865, 866, 878, 879, 948, 950, 983], "funnel": [6, 467, 468, 983], "tgz": [6, 983], "233mb": [6, 983], "randomizedsearchcv": [6, 149, 256, 263, 307, 348, 376, 550, 941, 952, 966, 972, 983, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "fetch_lfw_peopl": [6, 360, 983], "classification_report": [6, 32, 69, 143, 253, 294, 312, 313, 952, 983, 987, 996, 998, 1002, 1003, 1004, 1006], "confusionmatrixdisplai": [6, 32, 249, 308, 312, 337, 606, 692, 952, 983, 1004, 1005, 1007, 1008, 1009], "standardscal": [6, 10, 31, 44, 49, 57, 61, 70, 72, 85, 106, 129, 166, 175, 184, 185, 187, 196, 212, 214, 226, 227, 235, 236, 252, 262, 283, 284, 291, 299, 302, 305, 306, 308, 309, 324, 327, 348, 354, 365, 369, 373, 376, 390, 393, 441, 442, 542, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 651, 653, 831, 832, 835, 848, 861, 870, 871, 872, 873, 875, 876, 942, 949, 956, 962, 966, 967, 969, 983, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007], "svc": [6, 16, 25, 27, 30, 31, 32, 69, 73, 130, 136, 138, 144, 145, 164, 172, 230, 232, 236, 249, 253, 255, 257, 260, 261, 262, 264, 265, 266, 270, 299, 305, 307, 315, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 352, 366, 370, 377, 383, 390, 393, 396, 443, 490, 530, 672, 673, 675, 676, 770, 786, 800, 831, 867, 868, 870, 872, 893, 940, 941, 947, 950, 952, 953, 962, 978, 982, 983, 985, 991, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "util": [6, 8, 10, 11, 48, 55, 60, 88, 121, 123, 124, 129, 149, 196, 198, 204, 212, 219, 228, 233, 243, 261, 263, 275, 299, 305, 315, 324, 332, 337, 353, 355, 359, 360, 363, 365, 366, 367, 368, 375, 376, 377, 385, 389, 390, 393, 394, 397, 428, 443, 546, 547, 548, 551, 645, 674, 770, 791, 797, 798, 838, 941, 950, 952, 953, 962, 963, 972, 976, 979, 983, 989, 994, 995, 997, 998, 1000, 1001], "loguniform": [6, 149, 263, 941, 983, 1004], "disk": [6, 13, 360, 363, 365, 369, 377, 383, 983], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 60, 61, 63, 69, 71, 80, 84, 91, 96, 97, 110, 121, 123, 128, 131, 136, 143, 146, 150, 151, 152, 157, 166, 175, 177, 189, 190, 193, 196, 197, 203, 213, 218, 219, 225, 229, 235, 240, 241, 242, 244, 245, 250, 251, 253, 255, 256, 257, 259, 260, 273, 288, 300, 305, 308, 309, 313, 320, 327, 337, 345, 346, 348, 352, 353, 358, 359, 360, 365, 366, 367, 369, 370, 372, 374, 375, 376, 377, 383, 386, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 486, 487, 488, 490, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 556, 557, 558, 559, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 886, 887, 888, 890, 891, 892, 895, 896, 904, 905, 906, 908, 909, 911, 912, 913, 916, 917, 918, 923, 924, 925, 926, 927, 928, 929, 930, 938, 939, 942, 947, 948, 950, 952, 953, 955, 956, 958, 959, 962, 963, 964, 966, 967, 968, 971, 976, 982, 983, 984, 985, 986, 987, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "lfw_peopl": [6, 360, 983], "min_faces_per_person": [6, 360, 468, 983], "resiz": [6, 46, 47, 235, 360, 467, 468, 983], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 69, 74, 77, 78, 79, 80, 81, 85, 91, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 126, 137, 138, 145, 146, 158, 161, 162, 175, 177, 178, 180, 182, 184, 186, 188, 190, 191, 195, 196, 197, 199, 200, 204, 208, 211, 213, 214, 217, 218, 219, 220, 221, 222, 225, 229, 230, 241, 243, 244, 245, 246, 252, 253, 255, 257, 258, 259, 262, 264, 265, 266, 267, 268, 269, 275, 285, 299, 300, 301, 306, 307, 309, 314, 322, 325, 326, 332, 337, 338, 348, 358, 362, 365, 366, 369, 373, 375, 376, 377, 389, 391, 392, 393, 394, 396, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 476, 479, 483, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 596, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 743, 744, 745, 746, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 895, 896, 911, 916, 921, 923, 926, 927, 928, 929, 930, 931, 932, 933, 941, 944, 948, 952, 953, 955, 956, 962, 963, 964, 966, 967, 968, 978, 983, 984, 985, 986, 987, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "w": [6, 12, 13, 16, 30, 34, 42, 45, 48, 57, 63, 102, 105, 129, 161, 180, 195, 200, 213, 232, 240, 241, 242, 245, 246, 266, 294, 308, 309, 329, 332, 339, 348, 360, 362, 370, 389, 390, 394, 396, 397, 401, 444, 447, 449, 498, 513, 515, 522, 536, 537, 563, 564, 566, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 646, 647, 652, 655, 656, 657, 658, 659, 668, 674, 698, 699, 729, 770, 783, 817, 863, 904, 909, 948, 952, 956, 957, 962, 964, 966, 967, 983, 987, 1004, 1008, 1009], "info": [6, 42, 70, 95, 166, 253, 362, 364, 368, 377, 397, 983], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 53, 57, 59, 60, 77, 78, 79, 80, 81, 84, 90, 91, 95, 103, 110, 112, 114, 116, 143, 145, 146, 161, 162, 172, 175, 178, 180, 182, 190, 191, 195, 199, 200, 211, 213, 218, 225, 229, 230, 240, 252, 257, 258, 262, 264, 265, 267, 268, 285, 291, 299, 305, 306, 307, 309, 332, 337, 338, 339, 348, 352, 358, 359, 365, 366, 369, 375, 376, 377, 389, 391, 392, 394, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 476, 479, 483, 484, 487, 490, 491, 494, 496, 498, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 684, 698, 731, 732, 733, 734, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 927, 928, 929, 930, 931, 932, 933, 944, 948, 953, 955, 956, 962, 966, 967, 968, 978, 983, 984, 986, 987, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "id": [6, 214, 288, 346, 359, 360, 365, 372, 391, 393, 397, 468, 469, 470, 882, 884, 902, 983, 987, 1002, 1003, 1006], "person": [6, 258, 360, 364, 393, 397, 467, 468, 469, 959, 962, 983, 1002], "target_nam": [6, 19, 52, 99, 104, 205, 218, 242, 249, 256, 278, 316, 337, 343, 358, 360, 462, 463, 465, 466, 467, 468, 470, 471, 475, 477, 478, 479, 480, 485, 687, 952, 968, 978, 983, 987, 1004], "n_class": [6, 30, 37, 90, 91, 110, 112, 116, 118, 143, 145, 211, 218, 230, 232, 242, 262, 263, 264, 284, 285, 305, 343, 348, 365, 366, 377, 396, 413, 462, 463, 477, 490, 494, 498, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 544, 568, 569, 579, 585, 609, 614, 633, 634, 641, 642, 643, 649, 650, 651, 652, 672, 681, 690, 692, 708, 711, 714, 727, 761, 765, 770, 773, 774, 783, 792, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 813, 818, 820, 821, 828, 831, 838, 839, 842, 845, 854, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 880, 895, 896, 952, 953, 956, 963, 966, 967, 975, 983, 999, 1000, 1001, 1003, 1004, 1005], "1288": [6, 360], "1850": [6, 360], "scaler": [6, 70, 72, 164, 212, 230, 236, 283, 296, 302, 303, 324, 327, 332, 348, 369, 390, 393, 464, 633, 634, 647, 649, 662, 831, 840, 841, 843, 847, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 956, 962, 966, 983, 994, 999, 1002, 1007], "unlabel": [6, 232, 307, 312, 313, 314, 316, 317, 377, 388, 389, 865, 866, 867, 951, 978, 981, 983, 985, 1006], "unsupervis": [6, 12, 37, 71, 72, 85, 95, 115, 127, 225, 232, 257, 281, 282, 323, 337, 338, 348, 355, 357, 360, 366, 376, 377, 388, 389, 394, 395, 396, 397, 409, 418, 421, 506, 507, 509, 511, 512, 514, 517, 518, 524, 538, 541, 542, 543, 544, 545, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 603, 605, 609, 610, 613, 614, 615, 616, 617, 652, 715, 770, 773, 774, 783, 795, 798, 813, 814, 817, 819, 820, 821, 827, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 862, 863, 867, 874, 949, 952, 958, 965, 974, 978, 979, 981, 983, 989, 994, 997, 1007], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 57, 61, 68, 72, 73, 75, 84, 85, 91, 95, 103, 110, 115, 127, 137, 138, 149, 151, 152, 156, 164, 192, 197, 213, 216, 218, 219, 221, 223, 225, 229, 230, 232, 241, 242, 276, 279, 289, 299, 321, 337, 348, 352, 357, 360, 361, 362, 365, 373, 377, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 421, 422, 424, 440, 444, 448, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 479, 480, 485, 490, 494, 507, 509, 510, 513, 514, 515, 516, 519, 522, 524, 538, 541, 548, 574, 579, 606, 615, 616, 617, 663, 664, 665, 666, 667, 668, 669, 671, 674, 684, 698, 768, 769, 770, 797, 811, 812, 813, 816, 819, 820, 827, 831, 832, 835, 846, 851, 862, 863, 864, 870, 874, 907, 909, 938, 943, 944, 947, 948, 953, 954, 958, 964, 965, 966, 967, 968, 974, 976, 978, 979, 981, 983, 984, 986, 987, 988, 989, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1006], "reduct": [6, 19, 54, 68, 72, 75, 85, 95, 113, 127, 164, 216, 218, 219, 223, 229, 232, 276, 289, 309, 321, 348, 352, 357, 388, 389, 390, 392, 394, 396, 398, 443, 456, 457, 458, 459, 477, 505, 507, 509, 510, 513, 514, 515, 516, 519, 522, 524, 528, 529, 532, 533, 534, 535, 539, 540, 541, 574, 579, 663, 664, 665, 666, 667, 668, 754, 770, 797, 813, 820, 827, 831, 832, 851, 868, 870, 878, 879, 880, 881, 944, 949, 964, 968, 973, 974, 976, 983, 989, 995, 996, 997, 1000, 1008, 1009], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 51, 61, 63, 70, 90, 97, 115, 118, 129, 132, 166, 167, 196, 198, 207, 211, 225, 234, 235, 240, 242, 243, 246, 252, 256, 264, 265, 280, 297, 299, 306, 312, 313, 324, 337, 348, 363, 365, 368, 370, 375, 386, 387, 389, 394, 395, 396, 461, 562, 563, 566, 574, 699, 729, 765, 882, 884, 941, 944, 948, 950, 960, 976, 983, 986, 987, 1008], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 57, 61, 63, 98, 182, 211, 212, 213, 219, 222, 225, 229, 231, 256, 337, 338, 339, 651, 652, 653, 983], "svd_solver": [6, 95, 103, 394, 510, 516, 983, 1000], "whiten": [6, 95, 96, 97, 279, 394, 401, 508, 509, 516, 849, 851, 983, 998, 1000, 1008, 1009], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 98, 143, 146, 154, 166, 167, 172, 175, 182, 213, 231, 253, 256, 259, 300, 307, 337, 338, 339, 348, 359, 363, 365, 366, 368, 370, 371, 372, 373, 375, 377, 389, 391, 393, 394, 396, 417, 418, 421, 425, 427, 447, 456, 457, 458, 459, 463, 510, 536, 537, 557, 581, 603, 605, 607, 609, 618, 619, 620, 634, 714, 768, 769, 770, 783, 788, 789, 835, 849, 937, 941, 942, 945, 948, 949, 952, 954, 955, 956, 962, 965, 966, 967, 968, 973, 978, 982, 983, 985, 987, 994, 996, 1001, 1004, 1006], "components_": [6, 14, 57, 85, 95, 97, 98, 101, 106, 229, 230, 294, 302, 309, 377, 390, 394, 420, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 518, 519, 614, 820, 827, 862, 863, 964, 983, 998, 1000, 1006, 1009], "project": [6, 8, 11, 13, 17, 45, 57, 66, 89, 93, 95, 97, 99, 101, 102, 107, 164, 167, 193, 217, 218, 219, 221, 224, 230, 232, 238, 279, 284, 288, 321, 338, 352, 355, 357, 359, 363, 364, 368, 369, 370, 373, 377, 378, 380, 386, 392, 394, 395, 401, 416, 426, 427, 437, 449, 456, 457, 458, 459, 463, 477, 479, 506, 508, 509, 510, 512, 514, 516, 517, 518, 519, 523, 524, 548, 557, 564, 616, 617, 624, 663, 666, 670, 671, 801, 820, 848, 862, 863, 864, 906, 907, 946, 948, 949, 950, 953, 955, 956, 958, 965, 968, 970, 975, 976, 978, 983, 986, 989, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "orthonorm": [6, 373, 906, 983], "x_train_pca": [6, 983], "x_test_pca": [6, 100, 983], "966": [6, 8, 235, 238], "087": 6, "010": [6, 370, 960], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 55, 69, 70, 71, 72, 100, 109, 111, 112, 114, 116, 117, 118, 121, 127, 130, 131, 142, 143, 164, 168, 172, 174, 186, 187, 188, 194, 203, 205, 208, 211, 215, 225, 230, 237, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 270, 272, 274, 277, 278, 283, 284, 286, 291, 294, 299, 302, 307, 308, 311, 312, 313, 315, 316, 318, 319, 320, 323, 325, 326, 327, 333, 334, 335, 339, 360, 362, 365, 366, 369, 375, 377, 389, 390, 393, 397, 398, 399, 405, 411, 413, 414, 415, 462, 463, 470, 479, 487, 489, 490, 497, 506, 511, 512, 517, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 568, 569, 577, 581, 585, 597, 604, 606, 607, 608, 624, 633, 634, 641, 643, 646, 647, 648, 649, 650, 651, 672, 673, 675, 676, 677, 681, 682, 683, 686, 687, 692, 694, 699, 700, 702, 703, 707, 708, 711, 712, 713, 714, 715, 716, 727, 729, 755, 756, 757, 760, 761, 762, 765, 767, 770, 773, 774, 783, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 818, 819, 821, 822, 827, 828, 829, 831, 832, 838, 851, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 899, 901, 941, 942, 944, 947, 948, 949, 952, 953, 954, 957, 960, 962, 965, 966, 967, 968, 972, 973, 974, 976, 978, 979, 981, 982, 983, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "1e3": [6, 7, 10, 149, 155, 161, 231, 266, 941, 983], "1e5": [6, 154, 177, 179, 186, 266, 588, 589, 590, 594, 595, 597, 598, 600, 859, 864, 964, 983, 985], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 53, 54, 57, 62, 70, 89, 101, 102, 114, 121, 124, 125, 130, 135, 138, 142, 143, 151, 153, 169, 186, 188, 189, 193, 194, 200, 203, 205, 208, 209, 210, 212, 220, 226, 227, 230, 232, 234, 244, 245, 252, 256, 260, 261, 263, 266, 267, 278, 281, 282, 283, 286, 291, 299, 305, 306, 307, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 337, 342, 343, 346, 352, 360, 376, 377, 383, 390, 393, 396, 398, 414, 524, 525, 528, 530, 532, 534, 536, 538, 539, 542, 568, 569, 572, 607, 609, 613, 614, 615, 616, 617, 619, 620, 623, 627, 633, 634, 635, 636, 637, 641, 643, 644, 647, 648, 649, 650, 651, 652, 655, 672, 673, 675, 676, 761, 770, 773, 774, 783, 799, 800, 801, 803, 806, 807, 808, 809, 810, 817, 818, 828, 870, 872, 874, 875, 878, 882, 884, 942, 944, 948, 952, 953, 955, 956, 958, 959, 966, 967, 968, 978, 982, 983, 987], "class_weight": [6, 326, 377, 532, 536, 539, 633, 634, 641, 643, 649, 650, 651, 652, 870, 872, 875, 877, 878, 880, 941, 966, 967, 983, 994, 995, 997, 998, 999, 1000, 1002, 1008, 1009], "n_iter": [6, 17, 95, 149, 175, 204, 217, 218, 222, 256, 263, 275, 294, 326, 366, 370, 376, 401, 429, 453, 507, 508, 512, 514, 519, 520, 521, 522, 619, 620, 621, 622, 627, 628, 635, 636, 637, 638, 656, 657, 658, 659, 660, 661, 662, 667, 669, 773, 774, 781, 783, 827, 829, 906, 907, 941, 966, 983, 995, 1000, 1001, 1002, 1006, 1008, 1009], "found": [6, 19, 20, 21, 106, 116, 149, 153, 155, 157, 158, 200, 232, 253, 256, 257, 258, 305, 308, 324, 339, 352, 354, 359, 362, 364, 365, 366, 370, 375, 377, 378, 386, 389, 392, 393, 394, 396, 397, 399, 410, 417, 420, 421, 434, 447, 532, 533, 534, 535, 539, 540, 563, 565, 585, 586, 603, 611, 622, 626, 628, 630, 636, 638, 640, 646, 647, 649, 651, 653, 662, 663, 686, 693, 770, 773, 774, 783, 808, 813, 814, 820, 842, 844, 845, 878, 879, 880, 881, 885, 936, 940, 941, 944, 948, 949, 951, 953, 954, 955, 956, 962, 966, 967, 973, 975, 978, 983, 987, 994, 997, 998, 1001, 1002, 1004, 1008], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 60, 70, 71, 73, 77, 81, 118, 120, 127, 153, 164, 166, 185, 214, 222, 230, 231, 235, 240, 248, 252, 254, 256, 257, 259, 260, 271, 273, 277, 279, 280, 288, 294, 299, 300, 302, 321, 324, 330, 332, 337, 366, 371, 375, 377, 384, 390, 393, 395, 396, 397, 399, 423, 436, 439, 447, 472, 477, 490, 497, 606, 607, 608, 622, 625, 628, 629, 631, 634, 636, 638, 651, 687, 701, 715, 758, 761, 770, 773, 774, 780, 783, 785, 797, 798, 875, 945, 947, 952, 955, 959, 973, 978, 979, 981, 983, 985, 989, 994, 997, 998, 999, 1001, 1002, 1008], "search": [6, 46, 54, 70, 71, 72, 73, 122, 143, 149, 164, 214, 231, 248, 256, 259, 260, 267, 271, 277, 279, 294, 299, 324, 337, 348, 355, 362, 363, 365, 366, 375, 377, 384, 389, 390, 393, 396, 397, 398, 399, 400, 419, 425, 427, 432, 433, 439, 446, 447, 453, 477, 490, 497, 532, 533, 534, 535, 539, 540, 541, 553, 574, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 603, 651, 663, 664, 667, 668, 687, 701, 758, 761, 770, 773, 774, 780, 781, 783, 785, 797, 798, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 875, 878, 879, 880, 881, 912, 940, 945, 947, 949, 952, 955, 956, 966, 968, 972, 973, 978, 979, 981, 983, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1008], "best_estimator_": [6, 54, 72, 73, 77, 103, 231, 256, 259, 279, 770, 773, 774, 783, 941, 982, 983, 1001], "545": 6, "76823": 6, "03433306453": 6, "003418945823095797": 6, "y_pred": [6, 7, 25, 30, 34, 44, 56, 61, 69, 74, 109, 121, 122, 123, 124, 129, 143, 166, 196, 198, 203, 206, 211, 213, 214, 225, 226, 234, 253, 258, 282, 286, 294, 315, 316, 348, 365, 371, 377, 396, 408, 415, 440, 456, 457, 458, 524, 527, 529, 531, 533, 535, 537, 540, 542, 543, 545, 586, 606, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 672, 673, 675, 676, 677, 682, 686, 687, 692, 695, 696, 697, 701, 702, 703, 707, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 756, 757, 758, 760, 761, 767, 770, 773, 774, 783, 792, 802, 804, 805, 814, 822, 829, 831, 870, 871, 872, 873, 874, 875, 876, 879, 881, 952, 954, 983, 1000, 1001, 1003, 1005], "from_estim": [6, 25, 27, 31, 55, 112, 115, 126, 130, 167, 179, 188, 205, 235, 237, 249, 252, 258, 262, 265, 278, 283, 286, 305, 306, 307, 308, 320, 321, 322, 325, 326, 343, 371, 387, 414, 606, 607, 608, 672, 673, 675, 676, 692, 700, 755, 757, 760, 761, 762, 952, 959, 983, 991, 1007, 1008, 1009], "display_label": [6, 249, 672, 983, 1006], "xticks_rot": [6, 672, 983], "vertic": [6, 17, 59, 121, 169, 185, 229, 230, 259, 273, 297, 300, 329, 331, 377, 386, 389, 394, 490, 672, 754, 983], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 64, 72, 74, 85, 95, 96, 106, 112, 116, 118, 123, 127, 129, 131, 151, 153, 158, 161, 168, 169, 175, 176, 186, 194, 196, 204, 207, 211, 214, 217, 230, 234, 250, 267, 273, 275, 277, 287, 298, 299, 300, 301, 302, 305, 309, 322, 338, 342, 343, 983], "049": [6, 446], "precis": [6, 25, 32, 69, 74, 81, 95, 143, 155, 156, 164, 172, 226, 248, 249, 253, 271, 294, 297, 312, 313, 365, 366, 377, 386, 388, 389, 391, 394, 396, 419, 444, 445, 446, 447, 448, 449, 450, 451, 453, 479, 498, 507, 509, 516, 519, 619, 620, 621, 625, 626, 627, 629, 630, 631, 647, 649, 657, 658, 662, 675, 680, 681, 682, 687, 700, 702, 703, 704, 712, 736, 755, 756, 757, 760, 761, 768, 769, 797, 800, 811, 812, 817, 832, 851, 854, 870, 875, 882, 884, 907, 946, 948, 955, 956, 967, 983, 987, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "recal": [6, 25, 32, 69, 100, 143, 164, 226, 248, 253, 271, 294, 312, 313, 365, 377, 389, 479, 579, 675, 680, 681, 682, 686, 687, 700, 702, 703, 704, 755, 756, 757, 760, 761, 797, 800, 832, 851, 854, 870, 948, 968, 983, 987, 997, 998, 1001, 1003, 1004, 1006, 1007, 1008], "f1": [6, 25, 32, 69, 143, 253, 294, 312, 313, 316, 393, 687, 702, 703, 711, 756, 952, 953, 983, 987, 998], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 69, 71, 94, 108, 114, 120, 128, 133, 142, 143, 167, 197, 206, 207, 208, 214, 230, 231, 237, 249, 253, 260, 262, 275, 294, 297, 301, 309, 312, 313, 316, 317, 320, 321, 324, 325, 327, 329, 332, 335, 352, 353, 354, 355, 359, 363, 365, 366, 368, 369, 371, 373, 374, 376, 377, 378, 389, 393, 394, 397, 399, 413, 416, 425, 427, 428, 439, 441, 442, 444, 449, 461, 470, 487, 513, 515, 516, 519, 522, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 588, 589, 590, 592, 594, 595, 597, 598, 600, 602, 607, 608, 618, 620, 632, 633, 634, 645, 646, 647, 649, 650, 651, 652, 653, 662, 665, 669, 681, 687, 702, 703, 711, 716, 741, 751, 752, 753, 756, 757, 760, 761, 770, 773, 774, 783, 794, 795, 803, 804, 809, 811, 812, 815, 817, 818, 823, 831, 832, 836, 842, 844, 845, 847, 851, 858, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 896, 901, 902, 940, 941, 942, 944, 945, 946, 948, 951, 952, 953, 954, 955, 956, 958, 959, 962, 963, 966, 968, 970, 972, 973, 974, 976, 978, 981, 983, 987, 989, 991, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "ariel": [6, 360, 994, 1000], "sharon": [6, 360], "83": [6, 30, 34, 39, 45, 69, 294, 312, 362, 366, 399, 681, 759, 952, 983, 987, 997], "colin": [6, 360, 1000], "powel": [6, 360], "87": [6, 32, 69, 158, 253, 294, 313, 572, 642, 761, 770, 847, 858, 952, 987], "90": [6, 8, 10, 14, 32, 45, 73, 101, 105, 106, 122, 123, 143, 154, 169, 176, 187, 193, 195, 198, 203, 214, 240, 266, 294, 299, 312, 313, 348, 352, 365, 370, 393, 538, 754, 770, 800, 947, 952, 983, 987], "donald": [6, 360, 389, 698, 942], "rumsfeld": [6, 360], "67": [6, 65, 166, 214, 362, 491, 492, 493, 602, 642, 687, 783, 942, 952, 966, 990, 994], "69": [6, 187, 313, 389, 446, 447, 582, 583, 729, 952, 962, 985], "georg": [6, 360, 389, 1000, 1006, 1007, 1008], "bush": [6, 360], "95": [6, 8, 14, 30, 32, 44, 45, 52, 66, 74, 90, 101, 102, 118, 122, 156, 166, 175, 196, 198, 203, 242, 243, 246, 255, 256, 280, 288, 294, 299, 309, 313, 324, 348, 396, 502, 607, 608, 611, 622, 636, 721, 867, 948, 952, 953, 965, 987, 997], "93": [6, 32, 196, 253, 294, 313, 337, 362, 761, 770, 878, 947, 952, 983, 987], "146": [6, 396], "gerhard": [6, 360], "schroeder": [6, 360], "hugo": [6, 360, 1000, 1005, 1006, 1007, 1008], "chavez": [6, 360], "00": [6, 15, 22, 28, 32, 35, 67, 75, 79, 82, 86, 92, 98, 107, 133, 139, 147, 154, 159, 163, 166, 170, 173, 187, 214, 215, 223, 238, 247, 253, 256, 271, 274, 289, 294, 295, 302, 303, 310, 312, 313, 318, 335, 338, 340, 347, 359, 362, 370, 389, 396, 397, 687, 689, 761, 770, 783, 879, 948, 952, 962, 964, 966, 986], "toni": [6, 360, 538, 851, 958, 1007, 1008], "blair": [6, 360], "85": [6, 16, 17, 32, 45, 50, 69, 98, 143, 167, 211, 214, 266, 294, 313, 348, 396, 415, 475, 530, 531, 572, 627, 633, 718, 726, 761, 770, 952, 953, 983, 994], "322": [6, 14, 90, 151, 159, 446, 447], "macro": [6, 32, 69, 143, 253, 264, 294, 305, 312, 313, 360, 393, 681, 687, 702, 703, 711, 756, 757, 760, 761, 952, 987, 994, 1002], "avg": [6, 32, 69, 143, 253, 294, 312, 313, 544, 678, 687, 952, 983, 987], "weight": [6, 13, 14, 19, 24, 32, 54, 69, 106, 110, 122, 130, 131, 142, 143, 154, 162, 164, 166, 174, 185, 187, 196, 200, 201, 210, 211, 212, 214, 215, 236, 240, 253, 258, 262, 264, 278, 287, 290, 291, 294, 295, 302, 305, 308, 312, 313, 319, 326, 335, 337, 338, 339, 348, 361, 362, 373, 375, 377, 389, 391, 392, 394, 395, 398, 400, 405, 408, 413, 416, 419, 420, 422, 424, 428, 434, 438, 439, 440, 442, 444, 449, 456, 457, 458, 470, 490, 499, 513, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 561, 564, 565, 566, 568, 572, 577, 578, 585, 586, 603, 609, 610, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 664, 668, 672, 673, 674, 675, 676, 677, 681, 682, 683, 686, 687, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 742, 755, 756, 757, 758, 760, 761, 762, 765, 766, 767, 768, 769, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 833, 850, 851, 865, 866, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 895, 896, 909, 927, 933, 942, 943, 948, 949, 951, 952, 954, 955, 956, 957, 959, 965, 966, 967, 968, 973, 978, 985, 987, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "86": [6, 32, 69, 143, 187, 299, 312, 313, 761, 878, 952, 983], "plot_galleri": [6, 95, 983], "n_row": [6, 19, 95, 386, 404, 426, 428, 486, 488, 983], "n_col": [6, 19, 95, 233, 404, 426, 428, 486, 488, 607, 983], "portrait": [6, 394, 983], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 71, 77, 81, 84, 88, 89, 90, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 127, 128, 132, 135, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 166, 167, 168, 175, 181, 186, 189, 190, 193, 195, 197, 198, 200, 202, 207, 210, 211, 212, 213, 219, 220, 221, 225, 229, 230, 231, 232, 233, 235, 240, 242, 243, 245, 246, 249, 254, 259, 260, 264, 269, 280, 284, 285, 288, 291, 294, 297, 299, 300, 305, 307, 312, 313, 314, 322, 324, 328, 329, 332, 343, 344, 345, 365, 389, 395, 396, 397, 399, 414, 606, 607, 672, 673, 675, 676, 884, 941, 945, 948, 951, 952, 955, 956, 959, 966, 967, 968, 983, 985, 1007], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 50, 51, 54, 61, 63, 79, 81, 90, 91, 97, 98, 105, 110, 112, 113, 129, 166, 167, 195, 196, 211, 214, 225, 232, 240, 242, 243, 245, 246, 250, 266, 268, 280, 288, 291, 294, 299, 307, 313, 321, 324, 983], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 51, 61, 63, 90, 91, 120, 127, 129, 132, 167, 196, 207, 225, 240, 242, 243, 245, 246, 255, 266, 280, 297, 313, 315, 324, 365, 387, 389, 395, 562, 882, 946, 948, 952, 973, 983, 986], "left": [6, 7, 12, 13, 14, 16, 24, 39, 42, 44, 51, 61, 63, 71, 80, 81, 90, 91, 97, 98, 110, 113, 115, 116, 119, 122, 125, 129, 131, 152, 158, 162, 166, 167, 181, 189, 196, 197, 198, 200, 207, 209, 210, 213, 214, 225, 229, 232, 234, 235, 240, 242, 243, 246, 252, 253, 254, 256, 264, 265, 267, 280, 281, 282, 288, 291, 294, 297, 309, 313, 323, 324, 346, 365, 366, 368, 386, 389, 392, 393, 395, 396, 397, 399, 447, 456, 457, 458, 459, 467, 472, 524, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 562, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 610, 614, 618, 626, 630, 768, 769, 770, 773, 774, 776, 783, 844, 851, 878, 879, 880, 881, 882, 894, 907, 923, 926, 941, 944, 946, 948, 950, 952, 954, 959, 964, 966, 968, 982, 983, 985, 1001, 1003, 1008], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 53, 61, 67, 75, 84, 95, 97, 98, 113, 120, 121, 123, 126, 127, 133, 146, 154, 158, 159, 166, 167, 177, 180, 187, 203, 208, 209, 214, 215, 217, 218, 223, 225, 229, 231, 235, 238, 242, 245, 246, 249, 254, 255, 256, 257, 260, 262, 271, 280, 289, 292, 297, 302, 303, 306, 310, 318, 326, 335, 338, 344, 345, 347, 360, 362, 369, 389, 398, 424, 446, 490, 507, 514, 518, 570, 571, 573, 617, 621, 629, 633, 653, 671, 689, 770, 783, 864, 921, 948, 952, 956, 962, 964, 966, 983, 987], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 51, 59, 61, 63, 78, 79, 81, 90, 91, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 121, 122, 123, 124, 129, 131, 142, 149, 152, 162, 167, 186, 197, 198, 199, 200, 202, 203, 206, 207, 225, 228, 229, 240, 242, 243, 245, 246, 250, 252, 255, 258, 262, 264, 265, 266, 268, 280, 288, 291, 294, 297, 299, 302, 313, 324, 326, 332, 334, 337, 338, 343, 346, 348, 355, 365, 375, 378, 386, 389, 392, 394, 395, 396, 399, 439, 456, 457, 458, 459, 509, 516, 519, 532, 533, 534, 535, 536, 537, 539, 540, 541, 562, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 610, 651, 653, 836, 878, 879, 880, 881, 882, 894, 941, 944, 946, 948, 950, 952, 954, 955, 959, 964, 966, 967, 968, 972, 973, 976, 979, 983, 985, 986, 996, 1002, 1008], "99": [6, 25, 32, 44, 51, 61, 95, 214, 225, 229, 240, 242, 253, 256, 294, 297, 313, 353, 358, 362, 368, 393, 396, 397, 466, 622, 636, 646, 761, 818, 921, 947, 952, 962, 966, 983, 989, 996], "hspace": [6, 13, 14, 44, 61, 95, 167, 214, 225, 240, 242, 243, 245, 246, 280, 307, 313, 321, 983], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 124, 194, 196, 214, 229, 232, 233, 262, 293, 362, 394, 467, 468, 477, 496, 983, 986, 1005], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 53, 57, 58, 61, 81, 84, 89, 98, 120, 123, 136, 142, 151, 152, 153, 157, 179, 186, 192, 209, 225, 232, 241, 242, 243, 245, 246, 250, 269, 279, 288, 294, 312, 324, 328, 329, 330, 337, 983], "portion": [6, 8, 80, 352, 360, 362, 365, 370, 377, 761, 792, 809, 941, 951, 955, 983, 987], "pred_nam": [6, 983], "rsplit": [6, 17, 256, 983], "true_nam": [6, 983], "ntrue": [6, 312, 313, 983], "prediction_titl": [6, 983], "signif": [6, 983], "eigenface_titl": [6, 983], "convolut": [6, 157, 983], "network": [6, 167, 293, 352, 353, 354, 355, 359, 360, 375, 377, 378, 383, 389, 394, 396, 401, 470, 508, 510, 542, 543, 671, 714, 828, 829, 920, 948, 950, 952, 966, 968, 972, 974, 983, 988, 989, 994, 1008], "famili": [6, 352, 354, 377, 389, 392, 394, 396, 397, 398, 567, 570, 571, 573, 574, 575, 581, 623, 644, 655, 828, 829, 847, 858, 948, 962, 966, 983, 985, 998, 1008], "outsid": [6, 9, 19, 118, 197, 198, 228, 375, 397, 610, 850, 958, 983, 1002], "scope": [6, 352, 354, 365, 375, 397, 972, 973, 983], "librari": [6, 255, 308, 344, 348, 357, 359, 360, 362, 363, 364, 365, 370, 375, 376, 377, 380, 385, 633, 870, 871, 872, 873, 875, 876, 920, 948, 952, 967, 968, 972, 973, 976, 983, 987, 992, 997, 1001, 1002, 1003, 1004, 1005, 1007], "reader": [6, 42, 308, 354, 365, 983], "pytorch": [6, 375, 972, 973, 983], "tensorflow": [6, 375, 972, 983], "implement": [6, 7, 13, 16, 17, 46, 55, 80, 95, 162, 172, 181, 185, 210, 214, 217, 225, 231, 253, 255, 257, 277, 280, 300, 305, 306, 307, 308, 309, 337, 339, 352, 353, 354, 359, 360, 362, 363, 365, 366, 369, 370, 372, 373, 377, 380, 383, 385, 386, 388, 391, 393, 394, 395, 396, 398, 399, 400, 401, 402, 413, 418, 419, 420, 422, 423, 424, 425, 467, 470, 483, 507, 508, 509, 510, 511, 513, 516, 517, 518, 528, 529, 530, 532, 533, 536, 537, 538, 542, 547, 557, 558, 563, 564, 566, 568, 572, 576, 585, 586, 607, 608, 615, 616, 620, 621, 628, 632, 633, 634, 638, 639, 643, 646, 647, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 666, 667, 670, 681, 685, 694, 708, 711, 751, 755, 761, 762, 768, 770, 773, 774, 783, 787, 788, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 813, 814, 816, 819, 821, 827, 828, 829, 831, 834, 843, 852, 860, 861, 867, 870, 871, 872, 873, 874, 875, 876, 906, 907, 919, 920, 921, 923, 941, 942, 944, 946, 948, 949, 950, 951, 953, 954, 956, 957, 958, 962, 964, 965, 968, 969, 970, 972, 973, 974, 976, 978, 983, 984, 985, 986, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "913": [6, 15, 396, 534], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 60, 67, 69, 71, 114, 123, 143, 157, 164, 197, 237, 242, 246, 248, 252, 258, 261, 269, 271, 277, 280, 287, 296, 299, 301, 303, 307, 311, 313, 314, 317, 318, 322, 337, 339, 348, 354, 360, 361, 365, 369, 375, 385, 389, 393, 396, 422, 474, 477, 487, 495, 677, 687, 715, 770, 836, 866, 878, 941, 942, 946, 952, 953, 954, 955, 962, 965, 968, 971], "diabet": [7, 123, 132, 134, 139, 146, 162, 164, 183, 184, 185, 192, 193, 358, 396, 476, 627, 628, 770, 775, 792, 793, 794, 960, 978, 982, 989], "regress": [7, 10, 13, 25, 27, 30, 54, 68, 70, 75, 79, 80, 83, 86, 98, 108, 113, 115, 120, 128, 133, 146, 148, 157, 159, 161, 162, 164, 166, 167, 174, 178, 180, 182, 186, 190, 191, 193, 197, 199, 200, 201, 212, 215, 224, 226, 233, 238, 257, 268, 269, 273, 276, 289, 294, 298, 302, 307, 308, 309, 319, 335, 337, 341, 347, 353, 354, 355, 357, 358, 360, 362, 365, 366, 369, 372, 373, 375, 376, 377, 384, 391, 392, 393, 394, 398, 408, 413, 439, 440, 449, 458, 463, 464, 466, 470, 474, 476, 477, 479, 480, 487, 491, 492, 493, 499, 503, 506, 510, 512, 514, 516, 517, 518, 520, 521, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 545, 546, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 584, 585, 586, 589, 590, 597, 598, 600, 607, 608, 609, 610, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 669, 680, 695, 696, 697, 701, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 758, 770, 773, 774, 783, 794, 795, 797, 798, 802, 804, 805, 813, 814, 819, 821, 822, 828, 829, 831, 832, 835, 836, 838, 844, 845, 846, 848, 851, 854, 859, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 884, 890, 893, 895, 911, 941, 942, 944, 947, 949, 959, 960, 962, 963, 972, 973, 974, 975, 976, 978, 981, 984, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "patient": [7, 132, 146, 162, 362, 372, 393, 985], "diseas": [7, 132, 146, 162, 258, 362, 686, 952, 985], "newsgroup": [7, 14, 19, 229, 256, 316, 338, 339, 358, 386, 397, 462, 463, 979, 989], "post": [7, 14, 19, 69, 164, 309, 337, 338, 339, 341, 347, 352, 360, 364, 365, 368, 369, 376, 389, 423, 462, 463, 475, 686, 797, 878, 952, 968, 976, 987, 1005], "written": [7, 29, 35, 88, 164, 203, 308, 353, 362, 365, 366, 370, 372, 375, 377, 390, 395, 461, 477, 483, 687, 797, 875, 882, 946, 948, 952, 956, 957, 966, 971, 978, 979, 984, 987, 1003], "about": [7, 11, 29, 44, 61, 69, 85, 88, 118, 143, 158, 164, 166, 169, 213, 225, 252, 253, 255, 262, 280, 305, 307, 308, 309, 313, 337, 339, 346, 348, 352, 353, 355, 358, 360, 364, 365, 368, 369, 376, 377, 378, 383, 393, 394, 397, 399, 414, 466, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 485, 490, 536, 537, 568, 569, 582, 583, 589, 615, 651, 653, 716, 770, 783, 800, 891, 942, 948, 949, 951, 953, 955, 958, 959, 962, 963, 965, 967, 968, 970, 972, 976, 978, 979, 985, 987, 999, 1000], "sgdclassifi": [7, 8, 203, 204, 205, 206, 207, 208, 209, 230, 263, 316, 326, 337, 348, 352, 354, 370, 377, 387, 388, 397, 613, 615, 616, 617, 621, 633, 641, 643, 870, 875, 944, 948, 953, 966, 967, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009], "stochast": [7, 57, 121, 124, 164, 172, 174, 215, 219, 221, 225, 230, 283, 284, 290, 295, 308, 389, 394, 396, 437, 462, 470, 477, 478, 479, 489, 497, 511, 519, 534, 535, 546, 579, 602, 614, 633, 634, 643, 647, 649, 651, 652, 653, 654, 662, 663, 664, 665, 667, 797, 820, 827, 828, 829, 832, 841, 874, 906, 907, 926, 941, 955, 956, 958, 974, 988, 989, 994, 995, 998, 999, 1001, 1003, 1005], "gradient": [7, 46, 65, 108, 115, 126, 129, 132, 133, 154, 155, 164, 166, 174, 215, 225, 230, 297, 377, 389, 399, 427, 437, 441, 442, 462, 470, 476, 478, 479, 490, 495, 528, 529, 534, 535, 536, 537, 546, 561, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 609, 610, 614, 623, 624, 633, 634, 643, 644, 647, 649, 651, 652, 653, 655, 662, 667, 669, 670, 715, 721, 723, 773, 774, 775, 794, 797, 827, 828, 829, 832, 844, 845, 874, 926, 949, 952, 955, 956, 957, 958, 972, 974, 989, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1007, 1009], "descent": [7, 13, 164, 174, 181, 215, 225, 230, 308, 394, 396, 446, 447, 453, 462, 470, 478, 506, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 546, 614, 621, 622, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 643, 647, 649, 651, 652, 653, 656, 657, 658, 659, 662, 669, 797, 828, 829, 832, 870, 874, 926, 949, 956, 958, 967, 974, 985, 989, 994, 997, 998, 999, 1001, 1003, 1005, 1007, 1008], "nusvr": [7, 352, 876, 967, 996, 1002, 1004, 1005, 1006, 1008, 1009], "nu": [7, 9, 11, 158, 210, 225, 323, 352, 396, 399, 594, 652, 872, 873, 874, 958, 966, 967, 1005, 1009], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 67, 71, 88, 95, 97, 125, 142, 149, 157, 177, 183, 200, 201, 208, 212, 230, 231, 234, 237, 253, 255, 256, 257, 260, 281, 294, 297, 317, 320, 321, 323, 324, 325, 327, 328, 329, 332, 334, 335, 338, 352, 354, 355, 369, 370, 373, 375, 377, 386, 387, 389, 391, 392, 393, 394, 396, 399, 400, 401, 413, 419, 420, 421, 422, 424, 425, 426, 428, 439, 440, 442, 443, 456, 457, 458, 459, 461, 463, 471, 484, 487, 496, 499, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 542, 543, 544, 545, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 597, 598, 600, 613, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 661, 662, 663, 664, 666, 667, 668, 670, 674, 693, 708, 736, 741, 742, 743, 744, 746, 747, 748, 750, 751, 770, 773, 774, 783, 795, 798, 799, 800, 806, 807, 808, 809, 810, 813, 814, 815, 817, 818, 819, 821, 822, 823, 828, 829, 838, 843, 851, 854, 857, 868, 870, 871, 872, 873, 874, 875, 876, 877, 890, 904, 906, 907, 917, 921, 941, 944, 945, 946, 948, 949, 950, 952, 953, 954, 956, 957, 958, 962, 966, 968, 974, 978, 981, 984, 987, 989, 991, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1005, 1007], "gradientboostingregressor": [7, 122, 123, 129, 132, 352, 369, 375, 396, 529, 537, 607, 608, 948, 952, 953, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "forward": [7, 146, 307, 352, 365, 398, 483, 484, 514, 518, 528, 534, 535, 560, 561, 577, 660, 661, 835, 948, 973, 1006], "wise": [7, 26, 48, 157, 197, 225, 297, 338, 352, 377, 387, 389, 393, 394, 398, 433, 506, 509, 512, 516, 520, 521, 524, 525, 528, 530, 531, 534, 535, 567, 570, 571, 573, 574, 575, 581, 615, 675, 727, 799, 848, 860, 861, 864, 925, 927, 928, 929, 930, 933, 944, 946, 952, 953, 966, 973, 994, 999, 1002, 1003, 1004], "fashion": [7, 115, 120, 204, 353, 377, 386, 387, 394, 396, 528, 532, 533, 534, 535, 539, 540, 541, 577, 602, 797, 820, 835, 838, 844, 854, 878, 879, 880, 881, 923, 942, 948, 962, 1003], "notic": [7, 25, 26, 79, 113, 115, 122, 125, 175, 225, 237, 253, 255, 256, 258, 337, 338, 339, 348, 369, 393, 470, 516, 538, 941, 951, 952, 958, 987, 991, 1007], "faster": [7, 19, 39, 63, 72, 95, 110, 115, 119, 122, 146, 167, 172, 182, 196, 198, 211, 212, 214, 231, 275, 277, 293, 306, 308, 309, 337, 338, 339, 352, 353, 359, 365, 372, 373, 377, 388, 389, 394, 398, 399, 401, 419, 422, 424, 426, 427, 428, 437, 483, 506, 507, 508, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 528, 534, 535, 536, 537, 618, 621, 622, 627, 628, 633, 634, 635, 636, 637, 638, 647, 649, 659, 662, 666, 670, 674, 699, 729, 751, 752, 753, 811, 812, 816, 828, 829, 846, 848, 850, 859, 863, 907, 921, 941, 945, 948, 953, 955, 956, 959, 964, 966, 967, 968, 972, 975, 983, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "10_000": [7, 25, 115, 122, 172, 229, 258, 534, 535, 848], "vari": [7, 34, 44, 46, 61, 74, 116, 118, 164, 166, 167, 185, 187, 190, 194, 222, 230, 255, 258, 290, 295, 297, 302, 311, 318, 324, 327, 348, 352, 354, 360, 377, 417, 421, 475, 483, 489, 490, 497, 534, 535, 539, 540, 621, 622, 625, 626, 627, 628, 629, 630, 635, 636, 637, 638, 656, 659, 677, 736, 788, 795, 797, 798, 828, 832, 836, 851, 867, 875, 878, 879, 926, 944, 947, 948, 952, 955, 956, 965, 968, 976, 1001, 1002], "relev": [7, 9, 19, 76, 82, 144, 164, 175, 190, 255, 256, 262, 348, 352, 354, 360, 362, 364, 365, 366, 368, 369, 370, 377, 391, 392, 398, 399, 445, 449, 509, 516, 620, 630, 699, 713, 729, 773, 774, 800, 849, 851, 882, 884, 952, 953, 958, 969, 973, 997, 1002, 1006, 1008], "next": [7, 25, 45, 59, 79, 118, 119, 123, 132, 156, 169, 189, 193, 196, 226, 233, 237, 242, 250, 261, 273, 307, 313, 337, 342, 346, 348, 355, 363, 365, 366, 368, 386, 389, 390, 393, 396, 483, 484, 585, 609, 667, 673, 675, 676, 754, 768, 769, 797, 941, 945, 951, 952, 962, 976, 991, 994, 1007], "ham": [7, 425, 432, 556, 674, 677, 683, 707, 714, 751, 752, 753, 767], "loss": [7, 24, 25, 26, 27, 93, 107, 120, 121, 122, 123, 124, 149, 150, 164, 174, 178, 186, 189, 198, 201, 203, 204, 208, 214, 215, 231, 263, 292, 293, 308, 316, 321, 322, 326, 332, 337, 375, 377, 387, 388, 394, 399, 439, 440, 470, 483, 484, 507, 513, 514, 515, 518, 522, 527, 528, 529, 533, 534, 535, 536, 537, 540, 618, 621, 624, 633, 634, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 677, 680, 683, 696, 707, 708, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 767, 770, 773, 774, 783, 793, 794, 797, 828, 829, 831, 832, 835, 836, 844, 845, 846, 851, 870, 871, 876, 877, 879, 881, 907, 911, 945, 948, 956, 960, 965, 966, 967, 968, 987, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "eustach": [7, 8, 10, 976, 996, 997], "diemert": [7, 8, 10, 976, 996, 997], "maria": [7, 123, 129, 146, 162, 389, 1005, 1006, 1007, 1008], "telenczuk": [7, 123, 129, 146, 162, 1003, 1006, 1007], "github": [7, 8, 12, 26, 70, 109, 115, 116, 117, 123, 129, 132, 143, 154, 162, 166, 168, 177, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 275, 294, 306, 307, 309, 314, 346, 359, 363, 364, 367, 368, 369, 370, 372, 375, 377, 378, 380, 383, 385, 427, 437, 483, 511, 666, 667, 670, 955, 971, 972, 975, 976, 987, 999, 1004], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 50, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 162, 176, 196, 198, 203, 213, 214, 218, 220, 222, 228, 240, 242, 243, 256, 259, 275, 297, 298, 301, 302, 337, 338, 359, 360, 363, 365, 368, 369, 370, 372, 375, 380, 389, 418, 427, 437, 483, 509, 511, 516, 646, 666, 670, 679, 955, 970, 975, 999, 1001, 1004], "maikia": [7, 123, 129, 162, 1002, 1003, 1005, 1006], "lemaitre58": [7, 129, 149, 154, 156, 158, 218, 297], "gmail": [7, 11, 14, 16, 24, 42, 48, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 176, 196, 198, 213, 214, 218, 220, 228, 240, 242, 243, 256, 259, 297, 302, 337, 338], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 240, 242, 256, 259, 261, 268, 273, 275, 277, 283, 284, 285, 287, 288, 291, 294, 297, 298, 299, 300, 301, 302, 312, 313, 314, 315, 317, 328, 329, 332, 333, 337, 338, 339, 359, 377, 383, 968, 976], "mean_squared_error": [7, 122, 123, 192, 196, 198, 200, 202, 214, 348, 396, 715, 725, 952, 995, 997, 1004, 1005], "hamming_loss": [7, 677, 767, 952, 996, 1000, 1003], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 53, 54, 58, 59, 61, 63, 64, 70, 77, 78, 79, 91, 96, 101, 102, 113, 118, 138, 141, 168, 180, 186, 191, 194, 199, 202, 205, 209, 213, 220, 241, 243, 244, 245, 246, 258, 261, 269, 280, 281, 282, 287, 329, 330, 334, 338, 348, 353, 366, 373, 375, 377, 389, 393, 394, 419, 422, 423, 425, 427, 432, 434, 435, 436, 437, 446, 447, 448, 511, 519, 528, 529, 530, 531, 534, 535, 602, 621, 622, 627, 628, 635, 636, 637, 638, 652, 664, 666, 668, 670, 768, 769, 774, 802, 805, 820, 873, 893, 906, 907, 919, 921, 941, 942, 947, 949, 985, 998, 999, 1003, 1004], "fetch_20newsgroups_vector": [7, 211, 229, 360, 994, 1004, 1006], "generate_data": [7, 33], "load_diabet": [7, 123, 132, 135, 146, 162, 181, 183, 184, 185, 192, 193, 235, 251, 396, 533, 537, 543, 648, 792, 793, 794, 879, 881, 960, 982, 985, 1000, 1005, 1008], "elif": [7, 8, 16, 34, 176, 198, 232, 234, 242, 280, 847], "subset": [7, 19, 26, 27, 32, 69, 70, 79, 80, 116, 118, 119, 135, 143, 185, 197, 211, 212, 213, 214, 228, 230, 233, 234, 253, 256, 258, 265, 267, 307, 312, 316, 337, 338, 339, 348, 360, 365, 366, 372, 375, 377, 386, 387, 389, 390, 393, 396, 397, 399, 405, 413, 424, 439, 441, 442, 444, 462, 463, 466, 467, 471, 483, 524, 525, 526, 528, 530, 531, 532, 534, 536, 537, 538, 539, 542, 544, 577, 585, 604, 614, 615, 616, 617, 626, 630, 633, 641, 643, 646, 649, 650, 651, 652, 653, 654, 672, 677, 678, 687, 690, 692, 704, 707, 728, 730, 764, 767, 772, 795, 797, 799, 800, 801, 802, 806, 807, 808, 809, 810, 813, 818, 821, 828, 837, 865, 866, 870, 872, 875, 878, 880, 886, 921, 941, 948, 952, 953, 963, 965, 967, 968, 987, 997, 1002, 1003, 1005, 1007], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 58, 79, 108, 114, 130, 133, 162, 164, 169, 192, 201, 213, 254, 255, 261, 264, 265, 269, 273, 322, 329, 348, 352, 371, 377, 386, 387, 389, 393, 394, 396, 400, 414, 417, 419, 420, 421, 423, 425, 426, 428, 430, 431, 446, 447, 453, 455, 511, 528, 539, 544, 572, 586, 595, 607, 608, 609, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 654, 656, 659, 663, 665, 667, 669, 681, 690, 702, 703, 708, 709, 711, 717, 727, 737, 742, 744, 745, 746, 747, 751, 754, 756, 757, 760, 761, 762, 763, 764, 766, 776, 778, 792, 796, 809, 811, 812, 849, 850, 851, 856, 860, 870, 871, 896, 944, 946, 948, 949, 950, 952, 954, 955, 956, 960, 962, 965, 967, 982, 985, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "given": [7, 10, 11, 27, 37, 57, 59, 77, 84, 96, 100, 127, 129, 149, 156, 166, 167, 196, 197, 214, 218, 225, 229, 230, 233, 235, 255, 256, 258, 281, 282, 283, 299, 308, 332, 337, 338, 339, 345, 352, 354, 360, 364, 365, 366, 368, 370, 372, 373, 375, 377, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 433, 434, 435, 436, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 461, 470, 476, 478, 480, 498, 511, 513, 514, 515, 518, 522, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 563, 564, 565, 566, 568, 576, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 606, 607, 619, 621, 624, 626, 627, 630, 633, 634, 636, 638, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 662, 663, 666, 672, 673, 674, 675, 676, 678, 679, 680, 686, 688, 691, 692, 694, 697, 699, 700, 707, 709, 710, 713, 725, 728, 729, 731, 732, 737, 747, 751, 754, 755, 757, 760, 761, 762, 765, 766, 768, 769, 770, 773, 774, 781, 783, 787, 793, 794, 795, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 838, 841, 842, 844, 845, 846, 847, 848, 850, 851, 856, 857, 859, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 880, 885, 894, 895, 896, 936, 940, 941, 944, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 965, 966, 967, 968, 976, 978, 982, 983, 985, 986, 987, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "round": [7, 9, 25, 84, 161, 162, 203, 214, 255, 261, 299, 301, 337, 425, 431, 432, 568, 569, 572, 602, 667, 687, 772, 781, 836, 867, 882, 884, 942, 956, 968, 996, 998, 1000, 1002, 1003, 1005, 1007, 1008], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 79, 114, 125, 132, 146, 154, 162, 169, 184, 189, 210, 220, 228, 258, 281, 323, 326, 338, 339, 352, 360, 362, 368, 380, 393, 394, 396, 397, 399, 439, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 544, 545, 556, 558, 559, 563, 564, 565, 566, 607, 772, 776, 778, 923, 926, 941, 947, 948, 952, 958, 963, 973, 976, 982, 987, 996, 1006], "chang": [7, 16, 19, 25, 26, 43, 44, 45, 48, 50, 56, 59, 95, 99, 100, 113, 123, 150, 157, 161, 166, 169, 197, 198, 200, 201, 235, 236, 250, 255, 262, 265, 301, 302, 305, 306, 307, 308, 309, 313, 324, 332, 339, 348, 352, 353, 354, 360, 363, 366, 367, 368, 369, 372, 375, 377, 378, 387, 389, 393, 396, 397, 399, 413, 416, 422, 424, 427, 429, 434, 437, 443, 446, 447, 453, 467, 468, 470, 474, 479, 487, 488, 489, 497, 506, 510, 511, 512, 513, 514, 515, 521, 522, 524, 525, 526, 532, 533, 534, 535, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 563, 564, 566, 568, 569, 572, 577, 585, 586, 588, 589, 590, 592, 594, 595, 597, 598, 600, 602, 610, 622, 624, 626, 628, 630, 633, 634, 636, 638, 640, 645, 647, 649, 654, 662, 667, 675, 678, 681, 686, 690, 691, 702, 703, 709, 710, 728, 729, 730, 751, 757, 758, 760, 766, 768, 769, 770, 771, 772, 773, 774, 775, 783, 787, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 803, 804, 806, 807, 808, 810, 811, 812, 817, 818, 830, 833, 835, 844, 858, 859, 864, 865, 868, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 888, 890, 891, 902, 907, 920, 922, 941, 942, 943, 951, 952, 953, 955, 962, 965, 966, 967, 968, 970, 973, 978, 985, 987, 992, 993], "affect": [7, 25, 79, 156, 166, 200, 221, 235, 258, 265, 348, 352, 354, 361, 377, 379, 389, 392, 393, 395, 397, 400, 420, 425, 432, 448, 450, 454, 524, 525, 544, 686, 761, 770, 773, 774, 775, 783, 787, 788, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 851, 861, 875, 951, 955, 967, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 368, 387, 393, 806, 954, 1008], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 60, 70, 103, 110, 113, 114, 120, 122, 136, 162, 169, 189, 200, 201, 203, 204, 211, 214, 230, 231, 245, 255, 258, 265, 268, 273, 291, 292, 315, 324, 327, 337, 338, 339, 342, 346, 370, 377, 390, 397, 633, 634, 870, 871, 877, 897, 962, 982], "start_tim": [7, 10, 19, 116, 117, 129, 149, 185, 218], "elapsed_tim": [7, 39, 66, 116, 117, 129, 213], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 59, 60, 64, 65, 66, 70, 98, 102, 138, 157, 166, 182, 186, 220, 254, 255, 257, 259, 263, 332, 339, 352, 359, 360, 365, 373, 377, 389, 390, 397, 398, 400, 401, 402, 405, 407, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 461, 466, 467, 468, 470, 472, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 558, 559, 563, 566, 567, 568, 569, 570, 571, 572, 573, 577, 578, 585, 586, 588, 589, 590, 591, 592, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 739, 742, 748, 749, 750, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 783, 786, 789, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 828, 829, 831, 834, 837, 838, 844, 845, 847, 849, 851, 852, 853, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 888, 890, 891, 894, 904, 917, 927, 933, 938, 942, 952, 953, 955, 956, 962, 967, 968, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 121, 123, 211, 212, 214], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 67, 93, 107, 164, 195, 338, 339, 358, 359, 360, 366, 375, 377, 389, 397, 424, 439, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 485, 501, 506, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 542, 543, 544, 545, 556, 557, 559, 562, 563, 564, 607, 608, 609, 639, 660, 661, 687, 770, 773, 774, 780, 781, 783, 794, 835, 844, 878, 879, 880, 881, 885, 895, 941, 948, 952, 967, 978, 987, 988, 989, 994, 1002, 1005, 1006, 1007, 1008], "necessari": [7, 13, 114, 196, 201, 240, 255, 256, 262, 264, 277, 344, 352, 360, 363, 364, 365, 366, 367, 368, 370, 372, 375, 389, 391, 396, 427, 437, 462, 463, 465, 466, 467, 468, 469, 471, 509, 619, 620, 621, 627, 631, 632, 635, 636, 637, 638, 639, 640, 646, 648, 650, 651, 666, 670, 766, 834, 843, 853, 857, 863, 941, 944, 948, 951, 954, 962, 968, 987, 994, 1002], "defin": [7, 9, 12, 65, 69, 70, 72, 85, 95, 100, 109, 110, 111, 129, 146, 149, 156, 157, 158, 168, 175, 197, 200, 204, 213, 214, 225, 229, 235, 237, 240, 255, 256, 257, 258, 262, 266, 267, 297, 306, 324, 337, 338, 352, 361, 364, 365, 366, 370, 371, 373, 375, 376, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 399, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 434, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 463, 494, 495, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 597, 598, 602, 603, 604, 605, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 671, 672, 674, 682, 684, 690, 695, 696, 697, 698, 701, 704, 711, 714, 718, 719, 721, 723, 724, 726, 727, 730, 733, 739, 754, 758, 763, 764, 768, 769, 770, 773, 774, 783, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 894, 896, 899, 905, 936, 941, 942, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 962, 964, 966, 967, 968, 973, 983, 986, 989, 991, 996, 1000, 1001, 1002, 1004, 1005, 1006, 1008], "complexity_label": [7, 10], "type": [7, 16, 54, 68, 69, 75, 80, 89, 105, 118, 154, 164, 166, 172, 196, 198, 239, 242, 245, 247, 250, 261, 262, 328, 337, 339, 346, 348, 355, 358, 359, 360, 362, 363, 365, 367, 368, 369, 370, 375, 376, 380, 385, 386, 390, 397, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 470, 483, 484, 490, 542, 547, 556, 557, 560, 561, 563, 564, 566, 592, 602, 604, 605, 613, 631, 633, 647, 649, 654, 662, 664, 667, 668, 681, 688, 690, 702, 703, 711, 756, 757, 760, 761, 768, 769, 770, 783, 795, 797, 798, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 831, 832, 833, 836, 838, 844, 845, 851, 872, 873, 874, 875, 876, 886, 888, 890, 891, 894, 898, 899, 917, 918, 923, 926, 942, 944, 949, 951, 952, 953, 954, 955, 956, 962, 964, 968, 975, 976, 980, 985, 986, 987, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 84, 142, 143, 146, 166, 175, 178, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 201, 205, 211, 212, 232, 268, 309, 322, 329, 333, 337, 348, 360, 366, 377, 392, 398, 440, 456, 457, 458, 524, 568, 569, 572, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 870, 871, 872, 873, 874, 875, 876, 936, 946, 948, 966, 967, 985, 994, 996, 999, 1001, 1006, 1008], "toarrai": [7, 275, 316, 346, 390, 397, 541, 557, 563, 565, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 844, 860, 861, 923, 926, 942, 955, 962], "count_nonzero": [7, 10, 352], "configur": [7, 10, 71, 167, 236, 337, 351, 363, 365, 370, 372, 375, 377, 380, 385, 390, 397, 398, 427, 437, 439, 443, 567, 570, 571, 573, 574, 575, 577, 601, 607, 665, 666, 669, 670, 761, 868, 949, 952, 962, 967, 972, 987, 989, 998, 1001, 1002, 1003, 1004, 1006, 1008], "penalti": [7, 10, 30, 81, 164, 174, 175, 185, 189, 196, 211, 212, 215, 227, 263, 291, 308, 316, 329, 337, 352, 372, 375, 388, 391, 394, 398, 446, 447, 448, 449, 450, 451, 453, 477, 506, 512, 513, 514, 515, 517, 518, 522, 523, 572, 618, 621, 622, 623, 624, 627, 629, 632, 633, 634, 635, 636, 637, 643, 644, 645, 647, 651, 653, 655, 656, 662, 783, 851, 870, 871, 873, 875, 876, 877, 941, 948, 951, 956, 962, 966, 967, 985, 987, 996, 999, 1001, 1003, 1004, 1006, 1007, 1009], "elasticnet": [7, 10, 177, 187, 263, 268, 352, 370, 375, 394, 622, 627, 632, 633, 634, 635, 636, 637, 638, 643, 651, 653, 656, 948, 966, 994, 995, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008], "001": [7, 13, 32, 44, 61, 94, 149, 166, 205, 225, 240, 253, 255, 257, 315, 338, 362, 370, 393, 511, 512, 514, 521, 602, 619, 620, 621, 622, 627, 628, 635, 636, 637, 638, 641, 642, 643, 651, 652, 653, 654, 656, 659, 664, 665, 668, 669, 768, 769, 828, 829, 865, 866, 872, 873, 874, 875, 876, 941, 978, 987], "modified_hub": [7, 651, 966], "fit_intercept": [7, 175, 176, 182, 201, 210, 225, 263, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 870, 871, 877, 948, 966, 998, 1002, 1003, 1004, 1006, 1007, 1008], "tol": [7, 10, 17, 72, 95, 120, 161, 176, 187, 189, 203, 204, 210, 212, 225, 235, 243, 294, 308, 332, 337, 366, 370, 396, 401, 419, 422, 424, 427, 434, 437, 446, 447, 453, 456, 457, 458, 506, 507, 508, 510, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 534, 535, 536, 537, 577, 602, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 647, 649, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 666, 668, 670, 768, 769, 783, 820, 828, 829, 865, 866, 870, 871, 872, 873, 874, 875, 876, 938, 948, 966, 967, 983, 987, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "n_iter_no_chang": [7, 120, 204, 308, 337, 369, 377, 396, 534, 535, 536, 537, 641, 642, 643, 651, 652, 653, 828, 829, 966, 1002, 1005], "l1_ratio": [7, 10, 14, 180, 181, 187, 263, 268, 352, 375, 394, 513, 515, 522, 621, 622, 627, 633, 634, 635, 636, 637, 638, 643, 651, 653, 656, 948, 966, 995, 997, 999, 1006, 1008], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 57, 59, 77, 78, 81, 95, 98, 143, 164, 165, 170, 174, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 198, 199, 211, 214, 215, 293, 307, 308, 309, 337, 338, 339, 352, 361, 365, 366, 377, 379, 388, 391, 392, 394, 398, 399, 402, 408, 427, 440, 442, 448, 450, 451, 453, 454, 455, 456, 457, 458, 470, 499, 501, 502, 506, 510, 512, 514, 517, 518, 523, 527, 529, 531, 533, 535, 537, 540, 543, 545, 557, 564, 568, 572, 584, 586, 589, 602, 610, 611, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 666, 677, 690, 693, 702, 707, 711, 716, 723, 726, 748, 750, 758, 759, 763, 764, 767, 784, 794, 797, 804, 805, 814, 822, 829, 832, 844, 851, 870, 871, 872, 873, 874, 875, 876, 879, 881, 943, 946, 948, 966, 967, 985, 994, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "misclassif": [7, 767, 966, 967, 968, 995], "ratio": [7, 65, 72, 104, 164, 229, 231, 243, 248, 271, 352, 362, 365, 389, 391, 393, 396, 425, 431, 467, 468, 490, 516, 524, 525, 526, 633, 684, 686, 690, 698, 709, 712, 755, 756, 757, 760, 766, 794, 797, 817, 863, 921, 946, 958, 968, 983, 1009], "sparsifi": [7, 180, 352, 633, 634, 641, 643, 651, 652, 653, 870, 936, 996], "05": [7, 8, 14, 24, 26, 30, 37, 44, 52, 59, 61, 63, 64, 66, 67, 74, 75, 84, 90, 100, 113, 120, 122, 127, 133, 139, 142, 154, 157, 158, 166, 176, 177, 195, 198, 210, 221, 222, 225, 238, 240, 242, 243, 246, 255, 256, 262, 264, 265, 266, 271, 280, 283, 288, 289, 295, 297, 299, 305, 309, 313, 315, 329, 335, 338, 362, 398, 425, 431, 567, 570, 571, 573, 588, 589, 590, 594, 595, 597, 598, 600, 607, 608, 624, 665, 669, 729, 770, 820, 870, 871, 948, 956, 962], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 64, 69, 71, 98, 101, 105, 106, 110, 113, 118, 120, 137, 138, 144, 145, 149, 157, 162, 169, 195, 196, 204, 214, 220, 225, 228, 229, 230, 233, 234, 240, 242, 243, 245, 250, 253, 255, 256, 263, 266, 269, 273, 275, 282, 284, 285, 291, 298, 299, 300, 312, 313, 316, 324, 331, 334, 337, 338, 339, 346, 375, 399, 413, 421, 425, 431, 439, 482, 490, 525, 544, 545, 557, 572, 607, 608, 755, 770, 783, 793, 797, 799, 802, 865, 866, 985, 986, 987, 1003, 1006], "support_vectors_": [7, 10, 16, 325, 328, 329, 872, 873, 874, 875, 876, 967], "squared_error": [7, 105, 122, 123, 308, 396, 533, 534, 535, 537, 540, 646, 651, 653, 668, 879, 881, 966, 1007], "learning_r": [7, 109, 110, 121, 122, 123, 124, 222, 275, 292, 294, 306, 308, 396, 528, 529, 534, 535, 536, 537, 643, 651, 652, 653, 667, 827, 828, 829, 949, 959, 966, 995, 1003, 1007], "max_depth": [7, 31, 109, 110, 111, 112, 115, 118, 121, 122, 123, 124, 127, 128, 130, 161, 218, 252, 267, 307, 308, 342, 344, 345, 346, 376, 377, 396, 528, 529, 532, 533, 534, 535, 536, 537, 539, 540, 541, 773, 774, 878, 879, 880, 881, 882, 883, 884, 941, 959, 968, 1003, 1005], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 127, 128, 131, 161, 169, 218, 233, 237, 242, 252, 267, 299, 305, 307, 352, 376, 377, 396, 398, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 607, 773, 774, 941, 958, 959, 991, 1002], "n_tree": [7, 275], "loop": [7, 8, 113, 122, 166, 250, 260, 337, 346, 352, 365, 370, 389, 393, 398, 621, 622, 627, 628, 634, 635, 636, 637, 638, 941, 965, 966, 982, 997, 998, 1001, 1006, 1007], "previous": [7, 70, 155, 166, 253, 262, 309, 360, 372, 375, 380, 389, 394, 397, 416, 419, 429, 499, 509, 516, 624, 633, 634, 641, 643, 651, 652, 653, 870, 920, 948, 962, 972, 991, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "subsequ": [7, 32, 57, 74, 98, 143, 184, 198, 260, 277, 324, 348, 365, 366, 370, 377, 389, 390, 396, 399, 413, 470, 483, 528, 529, 534, 536, 537, 641, 643, 651, 773, 774, 799, 800, 803, 806, 807, 808, 809, 810, 828, 846, 850, 942, 951, 953, 1003, 1004, 1008], "relax": [7, 389, 397, 428, 965, 1001], "sgd": [7, 8, 164, 174, 203, 210, 215, 225, 263, 292, 293, 308, 337, 348, 354, 479, 487, 624, 641, 642, 643, 646, 651, 652, 653, 654, 828, 829, 941, 956, 974, 989, 994, 997, 998, 999, 1001, 1005, 1007], "svr": [7, 10, 164, 224, 238, 305, 319, 335, 352, 531, 542, 543, 568, 569, 618, 653, 770, 795, 871, 873, 875, 945, 985, 994, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "optim": [7, 13, 27, 54, 59, 71, 77, 78, 95, 109, 121, 123, 145, 149, 150, 153, 154, 155, 156, 157, 158, 184, 185, 189, 204, 212, 231, 253, 260, 263, 268, 273, 275, 279, 294, 297, 309, 315, 326, 332, 337, 338, 339, 348, 352, 353, 355, 359, 362, 365, 366, 367, 375, 377, 380, 384, 386, 387, 389, 391, 393, 394, 396, 398, 399, 400, 420, 422, 424, 425, 427, 432, 437, 447, 448, 454, 506, 509, 510, 512, 514, 518, 532, 533, 534, 535, 549, 585, 586, 594, 595, 610, 613, 615, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 643, 645, 647, 648, 649, 651, 652, 653, 656, 657, 658, 659, 662, 665, 667, 669, 670, 696, 703, 770, 783, 813, 814, 815, 817, 819, 820, 821, 822, 823, 828, 829, 847, 858, 862, 863, 870, 871, 872, 873, 874, 875, 876, 944, 945, 946, 947, 948, 952, 953, 954, 955, 956, 957, 966, 967, 968, 972, 976, 982, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009], "few": [7, 14, 19, 39, 46, 52, 99, 119, 152, 155, 156, 185, 194, 196, 214, 231, 240, 258, 262, 293, 297, 301, 305, 306, 307, 308, 309, 312, 339, 352, 360, 361, 362, 365, 366, 376, 378, 383, 386, 387, 389, 393, 394, 398, 399, 413, 424, 536, 537, 563, 566, 630, 667, 670, 863, 907, 920, 948, 949, 951, 952, 955, 956, 965, 967, 968, 976, 978, 985, 986, 987, 1000], "drawn": [7, 52, 79, 113, 149, 158, 235, 262, 264, 279, 337, 361, 389, 395, 396, 399, 401, 444, 445, 446, 447, 448, 449, 450, 451, 490, 498, 508, 530, 531, 538, 586, 602, 607, 616, 807, 862, 863, 880, 881, 948, 962, 964, 997], "boost": [7, 108, 109, 110, 111, 115, 126, 129, 132, 133, 164, 370, 377, 398, 423, 441, 442, 470, 476, 479, 490, 495, 528, 529, 534, 535, 536, 537, 607, 608, 609, 610, 715, 721, 723, 773, 774, 775, 794, 797, 832, 844, 845, 948, 952, 972, 974, 989, 994, 995, 997, 999, 1000, 1001, 1003, 1007], "detriment": [7, 353, 398, 948], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 59, 64, 66, 72, 74, 79, 91, 119, 162, 169, 196, 226, 228, 235, 240, 258, 266, 298, 302, 315, 337, 338, 983], "add_subplot": [7, 16, 25, 27, 42, 45, 63, 66, 89, 101, 102, 109, 167, 193, 211, 219, 221, 312, 313, 371], "line1": [7, 12, 220], "tab": [7, 126, 149, 154, 156, 184, 185, 306, 390, 1001], "blue": [7, 20, 21, 26, 34, 91, 95, 113, 116, 124, 126, 131, 144, 154, 156, 167, 172, 176, 184, 185, 192, 194, 220, 229, 249, 250, 255, 292, 302, 306, 314, 362, 389, 394], "set_xlabel": [7, 10, 45, 59, 72, 74, 89, 91, 100, 109, 129, 158, 161, 162, 167, 168, 172, 185, 191, 193, 194, 196, 198, 211, 212, 230, 234, 245, 251, 255, 257, 261, 266, 267, 280, 297, 298, 302, 315, 332, 338, 339, 342], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 59, 64, 72, 74, 79, 89, 91, 100, 106, 109, 116, 129, 158, 167, 172, 185, 187, 191, 193, 194, 196, 198, 211, 230, 234, 240, 251, 255, 257, 261, 266, 267, 273, 280, 297, 298, 302, 305, 315, 332, 338, 342, 983], "spine": [7, 14, 129, 207, 297], "set_color": [7, 207], "get_color": 7, "yaxi": [7, 10, 45, 59, 89, 101, 102, 193, 217, 219, 222, 240, 275, 280, 337], "tick_param": [7, 14, 132, 240, 255, 301, 315], "ax2": [7, 59, 64, 66, 79, 91, 119, 162, 169, 196, 226, 235, 240, 258, 266, 285, 298, 302, 315, 337], "sharex": [7, 14, 72, 91, 100, 130, 158, 198, 280, 315, 983], "frameon": [7, 202], "line2": [7, 12, 220, 333], "orang": [7, 91, 96, 97, 103, 124, 126, 156, 162, 167, 184, 185, 206, 232, 243, 278, 286, 306, 345, 953], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "loc": [7, 8, 9, 24, 26, 33, 40, 71, 78, 79, 80, 84, 94, 97, 99, 103, 104, 105, 109, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 136, 142, 149, 150, 156, 158, 178, 180, 181, 186, 190, 196, 197, 198, 199, 202, 203, 206, 209, 210, 213, 214, 220, 228, 229, 230, 231, 232, 242, 243, 250, 253, 254, 255, 257, 258, 259, 262, 264, 265, 268, 269, 270, 280, 281, 282, 292, 298, 301, 302, 306, 309, 314, 323, 326, 331, 332, 337, 343, 345, 783, 848, 859], "upper": [7, 9, 24, 71, 78, 79, 80, 109, 112, 113, 114, 121, 122, 123, 124, 125, 129, 131, 142, 153, 155, 158, 190, 196, 202, 203, 206, 210, 213, 214, 229, 232, 233, 254, 255, 256, 280, 281, 282, 292, 302, 315, 323, 326, 331, 389, 395, 438, 563, 564, 566, 570, 588, 589, 590, 592, 594, 595, 597, 598, 600, 607, 608, 610, 612, 625, 629, 652, 708, 844, 872, 873, 874, 894, 951, 952, 955, 962, 966, 967, 968, 1002], "__name__": [7, 16, 25, 60, 161, 196, 198, 250, 275, 299, 316, 337, 338, 339, 371, 375], "prediction_perform": 7, "4948": 7, "2675": 7, "076540": 7, "1847": 7, "3264": 7, "056169": 7, "997": [7, 40], "3383": 7, "047032": 7, "802": [7, 362], "3582": 7, "041579": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000189": 7, "5289": 7, "8022": [7, 377, 448, 1003], "000277": 7, "5193": 7, "8353": 7, "000464": 7, "124": [7, 49, 67, 396, 996], "5131": [7, 999], "3279": 7, "000720": 7, "178": [7, 362, 370, 485, 815], "5149": 7, "0779": 7, "000993": 7, "4066": 7, "4812": 7, "000150": 7, "3551": 7, "1723": 7, "000177": 7, "3445": 7, "2171": 7, "000217": 7, "3433": 7, "0358": 7, "000251": 7, "3456": 7, "0602": 7, "deduc": 7, "guarante": [7, 8, 79, 80, 166, 204, 229, 273, 297, 338, 348, 354, 359, 372, 373, 389, 393, 394, 397, 511, 620, 633, 634, 643, 647, 649, 651, 653, 662, 669, 786, 789, 811, 812, 849, 851, 863, 864, 877, 944, 948, 949, 951, 955, 960, 964, 968, 986, 1004], "aspect": [7, 57, 85, 95, 153, 217, 225, 284, 330, 352, 354, 365, 377, 389, 633, 634, 968, 976], "141": [7, 15, 509, 870, 953], "plot_model_complexity_influ": [7, 15], "doesn": [8, 196, 241, 293, 324, 372, 377, 389, 397, 398, 410, 450, 557, 607, 608, 641, 643, 651, 690, 803, 813, 814, 828, 951, 952, 968, 998], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 57, 69, 77, 78, 79, 81, 84, 91, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 120, 121, 122, 123, 124, 128, 129, 145, 146, 150, 152, 153, 154, 157, 158, 164, 166, 167, 168, 169, 175, 177, 183, 190, 193, 194, 196, 197, 214, 216, 218, 219, 220, 221, 223, 232, 241, 244, 246, 254, 255, 287, 288, 293, 305, 308, 309, 312, 313, 315, 320, 321, 324, 325, 328, 329, 337, 338, 339, 345, 346, 348, 352, 353, 359, 360, 362, 365, 366, 368, 370, 372, 375, 376, 377, 380, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 410, 422, 423, 425, 431, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 469, 470, 488, 489, 490, 494, 495, 500, 505, 507, 509, 516, 519, 528, 530, 531, 534, 535, 536, 537, 557, 565, 566, 569, 582, 583, 602, 603, 605, 606, 607, 608, 610, 614, 621, 622, 623, 625, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 648, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 671, 678, 684, 690, 691, 699, 709, 710, 728, 729, 730, 740, 761, 762, 765, 766, 770, 773, 774, 783, 799, 800, 801, 803, 813, 814, 817, 818, 827, 828, 829, 837, 842, 844, 845, 851, 863, 872, 875, 878, 879, 880, 881, 907, 918, 941, 946, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 966, 967, 968, 975, 978, 985, 986, 987, 988, 989, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "memori": [8, 54, 70, 71, 99, 120, 166, 277, 305, 307, 309, 337, 338, 339, 353, 354, 359, 365, 367, 373, 377, 390, 393, 394, 397, 400, 401, 417, 418, 419, 420, 421, 422, 424, 425, 429, 432, 434, 443, 448, 454, 470, 478, 483, 508, 509, 510, 512, 513, 530, 531, 532, 533, 538, 539, 540, 556, 557, 563, 564, 566, 621, 622, 627, 628, 633, 634, 635, 636, 637, 638, 641, 643, 651, 652, 653, 654, 656, 659, 751, 752, 753, 754, 770, 783, 792, 793, 794, 795, 798, 799, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 831, 832, 849, 851, 860, 861, 863, 868, 870, 871, 878, 879, 880, 881, 891, 921, 937, 954, 955, 962, 964, 965, 967, 968, 972, 973, 976, 978, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "onlin": [8, 14, 36, 67, 95, 98, 164, 174, 210, 215, 354, 360, 364, 369, 377, 389, 394, 397, 399, 418, 422, 424, 469, 477, 506, 511, 512, 513, 514, 520, 521, 557, 559, 633, 641, 642, 643, 651, 653, 797, 806, 807, 808, 809, 810, 813, 814, 819, 821, 822, 840, 841, 851, 870, 871, 944, 948, 956, 958, 971, 974, 976, 985, 989, 994, 998, 999, 1001], "partial_fit": [8, 50, 95, 309, 354, 366, 377, 389, 394, 418, 424, 509, 511, 512, 513, 564, 572, 633, 634, 641, 642, 643, 651, 652, 653, 799, 800, 803, 804, 806, 807, 808, 809, 810, 827, 828, 829, 840, 841, 851, 870, 948, 954, 956, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1009], "fed": [8, 129, 348, 360, 397, 941, 957, 962, 1005], "batch": [8, 11, 63, 95, 99, 288, 309, 354, 373, 377, 397, 416, 418, 422, 424, 426, 428, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 520, 521, 639, 660, 661, 775, 787, 788, 806, 807, 808, 809, 810, 828, 829, 840, 841, 851, 863, 910, 956, 957, 966, 994, 998, 999, 1002, 1003, 1004, 1005, 1007], "remain": [8, 25, 27, 37, 70, 116, 121, 123, 166, 167, 196, 212, 240, 253, 261, 386, 390, 391, 393, 397, 439, 442, 490, 491, 496, 503, 509, 545, 585, 586, 674, 736, 742, 772, 773, 774, 775, 777, 779, 806, 807, 808, 810, 941, 942, 951, 952, 956, 959, 962, 968, 973, 996, 1002, 1008], "hashingvector": [8, 339, 354, 463, 563, 565, 995, 1001, 1002, 1003, 1004, 1007], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 56, 79, 85, 91, 95, 98, 101, 105, 106, 109, 112, 114, 119, 120, 122, 126, 143, 146, 149, 155, 158, 162, 166, 167, 175, 180, 188, 197, 205, 206, 207, 209, 213, 217, 219, 220, 225, 226, 229, 232, 236, 246, 251, 255, 257, 261, 262, 266, 267, 294, 297, 299, 300, 301, 305, 307, 308, 313, 314, 322, 332, 333, 334, 337, 342, 343, 348, 352, 353, 354, 359, 361, 362, 364, 365, 366, 368, 370, 371, 372, 375, 376, 377, 380, 383, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 413, 420, 422, 423, 427, 436, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 461, 470, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 557, 558, 559, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 584, 585, 586, 588, 590, 594, 597, 598, 600, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 663, 666, 667, 668, 671, 674, 681, 686, 690, 698, 702, 703, 704, 712, 715, 728, 736, 741, 742, 743, 746, 754, 755, 756, 757, 760, 763, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 796, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 814, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 841, 844, 846, 847, 850, 851, 856, 858, 864, 865, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 898, 899, 900, 901, 907, 937, 941, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 966, 967, 968, 973, 975, 978, 979, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "word": [8, 14, 19, 69, 149, 229, 232, 324, 338, 339, 352, 360, 361, 365, 366, 369, 377, 386, 389, 391, 392, 393, 394, 428, 486, 498, 509, 511, 516, 563, 564, 566, 671, 800, 810, 867, 946, 950, 954, 957, 962, 965, 966, 976, 985, 986, 994, 1002], "federicov": 8, "glob": 8, "itertool": [8, 42, 44, 61, 130, 181, 241, 245, 246, 255, 262, 264, 396], "path": [8, 16, 17, 125, 164, 174, 181, 185, 215, 342, 359, 363, 365, 368, 372, 373, 377, 417, 421, 425, 460, 461, 462, 473, 475, 476, 478, 479, 480, 483, 484, 523, 532, 533, 538, 539, 540, 541, 568, 569, 572, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 656, 657, 658, 659, 660, 661, 663, 831, 832, 877, 878, 879, 880, 881, 912, 941, 948, 949, 958, 972, 973, 994, 995, 998, 1000, 1001, 1003, 1004, 1006, 1007], "tarfil": 8, "sy": [8, 12, 16, 19, 204, 229, 275, 316, 339, 360, 375, 592], "rcparam": [8, 225, 230], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 167, 196, 214, 308, 353, 359, 363, 364, 367, 377, 378, 394, 397, 398, 424, 547, 586, 607, 674, 955, 987, 1000, 1001, 1002], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 65, 69, 98, 164, 256, 316, 336, 337, 338, 339, 354, 355, 360, 389, 390, 397, 439, 478, 519, 844, 950, 986, 987, 994, 995, 996, 997, 1000, 1001], "passiveaggressiveclassifi": [8, 203, 352, 354, 948, 953, 995, 998, 999, 1001, 1002, 1005, 1007], "perceptron": [8, 164, 203, 206, 212, 235, 290, 295, 354, 375, 397, 489, 490, 497, 641, 651, 797, 827, 828, 829, 832, 851, 950, 953, 957, 966, 974, 989, 998, 1000, 1001, 1002, 1006], "naive_bay": [8, 24, 25, 27, 31, 127, 131, 256, 257, 302, 337, 348, 354, 355, 360, 390, 396, 413, 544, 832, 946, 953, 954, 987, 995, 996, 998, 999, 1000, 1001], "multinomialnb": [8, 354, 360, 390, 397, 806, 807, 808, 809, 954, 987, 996, 998, 1001, 1002, 1006, 1007, 1009], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 70, 152, 155, 157, 196, 214, 218, 226, 253, 297, 346, 348, 353, 360, 363, 364, 365, 366, 368, 369, 370, 377, 390, 391, 393, 394, 396, 398, 401, 415, 416, 418, 426, 428, 429, 434, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 461, 462, 465, 466, 470, 471, 478, 483, 484, 489, 497, 502, 506, 507, 512, 513, 514, 515, 517, 520, 521, 523, 527, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 556, 563, 564, 565, 566, 572, 577, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 604, 606, 607, 608, 610, 611, 612, 613, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 665, 669, 670, 672, 673, 675, 676, 678, 686, 715, 734, 740, 747, 751, 762, 770, 773, 774, 775, 783, 787, 788, 791, 794, 795, 797, 800, 802, 805, 806, 807, 808, 810, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 828, 829, 835, 857, 870, 871, 872, 873, 874, 875, 876, 882, 884, 888, 890, 891, 892, 894, 906, 907, 925, 936, 940, 941, 942, 947, 948, 952, 957, 958, 964, 966, 967, 976, 1001, 1002, 1003], "builder": [8, 10, 368], "__file__": [8, 10, 1007], "global": [8, 10, 42, 95, 196, 217, 218, 293, 306, 348, 352, 353, 370, 375, 377, 389, 399, 418, 427, 437, 443, 565, 601, 607, 663, 666, 667, 670, 681, 702, 703, 711, 756, 757, 760, 761, 787, 866, 868, 920, 922, 941, 949, 952, 958, 968, 976, 1002], "21578": [8, 1007], "uci": [8, 302, 359, 362, 475, 477, 479, 485], "ml": [8, 359, 362, 369, 475, 477, 485, 950, 972, 973, 976], "uncompress": [8, 483, 484, 987], "reuterspars": 8, "pars": [8, 17, 352, 359, 360, 483], "sgml": [8, 352], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 50, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 215, 223, 238, 247, 271, 274, 289, 295, 303, 310, 318, 335, 337, 338, 340, 347, 352, 354, 359, 360, 362, 363, 365, 368, 369, 370, 372, 375, 383, 390, 394, 461, 467, 468, 470, 478, 483, 484, 509, 553, 555, 563, 564, 566, 882, 955, 968, 972, 975, 979, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009], "yield": [8, 9, 25, 45, 77, 78, 79, 80, 120, 122, 191, 196, 211, 214, 257, 260, 273, 291, 297, 321, 326, 337, 338, 348, 352, 354, 359, 369, 377, 386, 389, 391, 393, 394, 396, 397, 398, 399, 413, 424, 443, 447, 483, 484, 512, 513, 514, 516, 521, 528, 529, 534, 535, 536, 537, 542, 543, 569, 577, 622, 626, 628, 630, 636, 638, 640, 648, 650, 661, 674, 699, 754, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 798, 802, 805, 862, 863, 901, 908, 910, 911, 944, 946, 948, 949, 952, 967, 968, 982, 999, 1000, 1002, 1005, 1007], "__init__": [8, 16, 34, 55, 157, 240, 241, 242, 245, 246, 275, 324, 365, 366, 368, 369, 370, 371, 377, 397, 403, 914, 995, 1000, 1002, 1007, 1008, 1009], "self": [8, 16, 19, 25, 27, 55, 157, 164, 275, 311, 317, 318, 324, 337, 359, 365, 366, 369, 370, 371, 372, 389, 397, 399, 403, 405, 408, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 474, 475, 483, 484, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 677, 768, 769, 770, 773, 774, 783, 788, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 914, 926, 955, 973, 974, 976, 989, 996, 1001, 1008], "latin": [8, 397], "_reset": 8, "handle_starttag": 8, "tag": [8, 70, 225, 314, 359, 364, 367, 368, 372, 375, 377, 397, 470, 799, 973, 975, 999, 1003, 1004, 1005, 1008], "attr": [8, 55], "start_": 8, "getattr": [8, 297, 377], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 69, 146, 235, 362], "topic_d": 8, "fd": 8, "chunk": [8, 50, 352, 389, 394, 400, 420, 424, 443, 513, 751, 754, 799, 800, 806, 807, 808, 809, 810, 868, 954, 1001, 1002, 1003, 1004, 1005], "feed": [8, 85, 197, 339, 360, 369, 375, 389, 397, 844, 953], "decod": [8, 288, 360, 377, 478, 544, 563, 564, 566, 994, 995], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 59, 65, 77, 78, 81, 100, 113, 119, 122, 129, 149, 150, 153, 154, 155, 156, 157, 158, 166, 168, 202, 218, 225, 231, 234, 240, 246, 255, 256, 281, 282, 297, 302, 305, 324, 329, 338, 348, 360, 365, 366, 372, 375, 377, 378, 387, 388, 389, 392, 393, 396, 399, 425, 430, 447, 483, 484, 507, 538, 603, 618, 622, 636, 647, 649, 662, 679, 719, 768, 787, 788, 806, 807, 808, 810, 817, 891, 941, 945, 946, 948, 949, 951, 952, 953, 955, 958, 959, 962, 967, 976, 985, 997, 1001, 1002, 1003], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 45, 70, 84, 89, 101, 102, 104, 116, 117, 120, 121, 123, 124, 142, 146, 193, 196, 204, 234, 253, 254, 259, 267, 284, 288, 308, 339, 346, 354, 355, 358, 359, 360, 362, 365, 367, 371, 375, 385, 386, 387, 389, 390, 391, 392, 394, 396, 397, 398, 399, 404, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 485, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 672, 673, 675, 676, 709, 766, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 914, 915, 936, 946, 948, 953, 955, 956, 958, 962, 965, 966, 967, 968, 976, 978, 984, 987, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "end_reut": 8, "sub": [8, 37, 48, 59, 69, 105, 233, 240, 307, 312, 313, 321, 324, 333, 360, 365, 366, 370, 390, 396, 397, 511, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 646, 915, 948, 952, 966, 987, 1004, 1008], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 71, 81, 95, 98, 110, 113, 118, 120, 121, 123, 124, 146, 158, 161, 164, 175, 176, 204, 211, 242, 243, 248, 250, 257, 266, 271, 291, 293, 294, 299, 307, 313, 315, 316, 324, 332, 365, 366, 370, 372, 373, 376, 377, 384, 389, 392, 394, 396, 398, 401, 413, 416, 417, 419, 421, 422, 423, 424, 427, 429, 434, 436, 437, 438, 446, 447, 453, 456, 457, 458, 486, 490, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 528, 529, 534, 535, 536, 537, 539, 542, 543, 556, 557, 563, 564, 566, 568, 569, 577, 585, 602, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 805, 820, 827, 828, 829, 830, 831, 835, 842, 844, 846, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 885, 906, 907, 913, 942, 948, 949, 951, 952, 955, 956, 957, 965, 966, 967, 968, 973, 976, 982, 986, 987, 989, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "archiv": [8, 359, 360, 362, 363, 383, 389, 418, 477, 485, 731, 732, 950, 967, 987], "exist": [8, 9, 17, 19, 214, 255, 293, 297, 359, 364, 366, 367, 370, 375, 377, 378, 380, 389, 393, 394, 396, 397, 399, 404, 413, 426, 428, 443, 473, 524, 530, 531, 532, 533, 539, 540, 557, 560, 564, 572, 578, 607, 608, 620, 651, 652, 653, 655, 673, 675, 676, 735, 738, 742, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 816, 831, 836, 844, 845, 936, 944, 949, 951, 952, 956, 958, 959, 962, 972, 976, 986, 994, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "str": [8, 10, 16, 57, 59, 104, 106, 118, 214, 234, 255, 257, 266, 267, 285, 322, 337, 359, 360, 373, 397, 400, 401, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 427, 432, 439, 440, 441, 442, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 526, 536, 537, 541, 542, 543, 544, 545, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 592, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 634, 641, 642, 646, 648, 650, 651, 653, 663, 664, 667, 671, 672, 673, 674, 675, 676, 678, 681, 683, 685, 687, 700, 702, 703, 705, 706, 711, 730, 744, 747, 751, 752, 753, 754, 755, 756, 757, 760, 762, 763, 764, 770, 773, 774, 780, 781, 783, 792, 793, 794, 795, 796, 798, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 882, 883, 884, 886, 889, 890, 891, 894, 897, 899, 903, 915, 917, 936, 937, 940], "kei": [8, 9, 10, 17, 19, 42, 119, 161, 214, 237, 256, 258, 259, 306, 307, 308, 309, 354, 358, 363, 366, 369, 370, 371, 375, 377, 380, 389, 390, 393, 399, 439, 447, 542, 543, 544, 545, 563, 566, 569, 592, 601, 607, 609, 634, 770, 773, 774, 781, 783, 794, 830, 831, 885, 895, 919, 973, 987, 991, 1000, 1006, 1007], "download_url": 8, "ic": [8, 167, 307, 359, 362, 379, 477, 485, 607, 608, 989, 1006, 1007], "databas": [8, 352, 354, 360, 362, 389, 394, 396, 397, 400, 418, 420, 485, 530, 531, 863, 964], "reuters21578": 8, "mld": 8, "tar": [8, 368], "gz": [8, 368, 380, 483, 484], "archive_filenam": 8, "join": [8, 11, 12, 19, 161, 204, 214, 255, 299, 360, 378, 438, 987, 994, 1002], "mkdir": [8, 372], "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 215, 223, 229, 238, 247, 271, 274, 289, 295, 303, 310, 318, 335, 337, 339, 340, 347, 360, 370, 872, 873, 874, 875, 876, 967, 990], "1e6": [8, 10, 189, 229, 337, 339, 352, 511, 864, 952, 964], "current_sz_mb": 8, "stdout": [8, 95, 204, 800, 820, 828, 829], "write": [8, 17, 162, 337, 352, 353, 359, 363, 364, 367, 368, 369, 370, 372, 373, 375, 377, 380, 390, 394, 397, 963, 973, 987, 995, 1007], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 316, 360, 370, 383, 462, 474, 475, 478, 479, 482, 563, 564, 566, 987, 994, 999, 1002, 1003], "reporthook": 8, "untar": 8, "open": [8, 12, 17, 219, 359, 360, 364, 365, 368, 370, 375, 376, 378, 380, 383, 390, 397, 461, 470, 483, 484, 942, 976, 981, 997, 1001, 1002, 1004], "extractal": 8, "sgm": 8, "rb": 8, "decode_error": [8, 397, 478, 563, 564, 566, 996], "alternate_sign": [8, 397, 557, 564, 1001], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 127, 143, 157, 166, 172, 187, 189, 196, 204, 218, 226, 237, 253, 257, 258, 264, 270, 273, 279, 324, 330, 346, 348, 359, 360, 361, 366, 368, 369, 377, 380, 383, 386, 387, 388, 389, 396, 397, 399, 413, 414, 415, 427, 461, 475, 483, 484, 495, 498, 524, 525, 528, 530, 534, 536, 541, 542, 543, 556, 563, 564, 566, 568, 569, 577, 585, 602, 603, 604, 605, 607, 608, 633, 634, 641, 643, 648, 649, 650, 651, 675, 677, 681, 682, 683, 686, 687, 689, 692, 694, 700, 702, 703, 707, 708, 711, 712, 713, 714, 715, 716, 755, 756, 757, 760, 761, 762, 765, 767, 770, 771, 773, 774, 775, 783, 787, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 806, 817, 827, 838, 842, 844, 854, 870, 872, 875, 917, 942, 953, 954, 955, 956, 957, 959, 960, 962, 963, 964, 966, 967, 968, 975, 978, 991, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1008, 1009], "acq": 8, "chosen": [8, 46, 72, 129, 150, 166, 167, 185, 197, 200, 213, 232, 249, 250, 252, 258, 338, 348, 352, 375, 389, 391, 392, 396, 399, 416, 424, 426, 428, 429, 435, 470, 498, 510, 532, 533, 534, 535, 539, 540, 622, 628, 631, 633, 634, 636, 638, 646, 651, 652, 653, 654, 655, 665, 669, 765, 768, 769, 770, 773, 774, 783, 801, 820, 870, 878, 879, 880, 881, 907, 941, 944, 946, 948, 949, 951, 953, 958, 959, 966, 982, 983, 985, 1002], "evenli": [8, 39, 52, 122, 250, 397, 987], "care": [8, 123, 352, 354, 368, 370, 375, 377, 378, 387, 389, 391, 397, 413, 435, 444, 615, 633, 634, 641, 643, 651, 652, 653, 670, 870, 949, 967, 976], "all_class": 8, "positive_class": [8, 686], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 71, 72, 95, 98, 115, 131, 135, 137, 158, 161, 162, 166, 182, 188, 189, 196, 203, 204, 205, 208, 209, 211, 214, 217, 218, 219, 220, 235, 236, 240, 242, 243, 246, 268, 285, 291, 292, 293, 307, 308, 309, 312, 313, 321, 337, 338, 370, 377, 396, 401, 416, 419, 422, 423, 424, 429, 434, 436, 446, 447, 453, 456, 457, 458, 506, 507, 508, 510, 511, 512, 513, 514, 515, 518, 520, 521, 522, 523, 536, 537, 602, 613, 615, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 647, 649, 651, 652, 653, 654, 655, 657, 658, 662, 663, 664, 665, 668, 669, 768, 769, 783, 820, 828, 829, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 942, 944, 948, 955, 956, 965, 966, 983, 987, 995, 998, 1001, 1002, 1003, 1004, 1006, 1008, 1009], "nb": [8, 103, 127, 348, 808, 954], "multinomi": [8, 30, 164, 174, 211, 215, 232, 250, 360, 361, 365, 394, 396, 470, 487, 498, 526, 528, 534, 536, 544, 633, 634, 714, 797, 805, 806, 807, 808, 809, 810, 851, 893, 952, 953, 968, 974, 987, 989, 994, 998, 1000, 1001, 1002, 1007, 1008], "passiv": [8, 203, 641, 642, 974, 989, 995], "aggress": [8, 203, 641, 642, 773, 774, 974, 989, 995], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 389, 394, 424, 509, 651, 827, 828, 829, 972, 994], "tupl": [8, 48, 49, 105, 214, 257, 358, 359, 360, 366, 377, 393, 401, 410, 426, 428, 439, 442, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 483, 485, 487, 488, 489, 497, 508, 512, 521, 542, 543, 544, 545, 557, 558, 559, 562, 563, 564, 566, 602, 607, 608, 609, 686, 693, 754, 756, 768, 770, 783, 794, 811, 812, 830, 831, 841, 842, 846, 849, 856, 860, 872, 873, 874, 875, 876, 885, 891, 892, 894, 898, 899, 900, 901, 915, 936, 959, 1000, 1001, 1005, 1006, 1007], "x_text": 8, "befor": [8, 12, 25, 42, 69, 71, 74, 85, 129, 142, 156, 158, 160, 163, 164, 166, 167, 169, 177, 184, 185, 189, 255, 262, 277, 298, 301, 302, 308, 327, 348, 352, 353, 360, 363, 365, 366, 367, 369, 370, 372, 373, 375, 377, 378, 379, 383, 389, 390, 391, 393, 394, 398, 401, 402, 419, 422, 423, 424, 434, 436, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 464, 476, 509, 512, 513, 514, 515, 516, 519, 521, 522, 536, 537, 540, 544, 545, 551, 563, 564, 566, 586, 602, 603, 605, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 653, 662, 667, 669, 674, 768, 769, 775, 787, 788, 790, 793, 795, 797, 811, 812, 819, 820, 821, 822, 823, 826, 831, 832, 835, 838, 849, 850, 851, 855, 856, 858, 859, 860, 861, 867, 878, 879, 907, 936, 942, 948, 949, 952, 958, 962, 966, 967, 968, 973, 987, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "exclud": [8, 19, 297, 365, 368, 377, 441, 702, 703, 711, 756, 757, 760, 782, 790, 846, 927, 952, 955, 1003], "invalid": [8, 196, 377, 552, 646, 686, 747, 948, 952, 1000, 1002, 1004, 1005, 1007, 1008], "assign": [8, 17, 37, 46, 57, 59, 115, 127, 142, 151, 209, 214, 225, 230, 232, 291, 299, 317, 338, 360, 365, 366, 377, 386, 393, 394, 396, 397, 398, 399, 416, 417, 418, 419, 421, 422, 423, 424, 427, 429, 431, 434, 436, 437, 490, 511, 536, 537, 568, 569, 582, 583, 585, 633, 634, 641, 642, 643, 651, 652, 653, 678, 679, 689, 690, 691, 694, 704, 712, 716, 728, 730, 759, 764, 765, 766, 770, 773, 774, 778, 783, 792, 793, 794, 795, 798, 815, 821, 823, 824, 825, 838, 865, 866, 870, 871, 872, 873, 874, 875, 876, 946, 951, 952, 953, 954, 955, 956, 957, 962, 965, 976, 978, 987, 994, 999, 1001, 1002], "format": [8, 11, 12, 19, 20, 21, 48, 54, 57, 60, 69, 79, 95, 105, 113, 118, 121, 123, 129, 135, 141, 142, 169, 172, 176, 182, 187, 196, 214, 250, 260, 262, 263, 264, 265, 266, 269, 279, 280, 283, 284, 301, 305, 331, 342, 346, 352, 358, 364, 365, 366, 367, 372, 373, 376, 377, 390, 393, 396, 397, 419, 422, 424, 425, 427, 434, 461, 463, 470, 471, 472, 483, 484, 485, 498, 526, 532, 533, 539, 540, 541, 558, 559, 604, 621, 627, 633, 634, 635, 637, 641, 643, 651, 652, 653, 672, 687, 694, 712, 713, 724, 741, 800, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 834, 835, 838, 842, 843, 844, 846, 853, 854, 857, 863, 870, 882, 890, 891, 912, 916, 923, 926, 928, 929, 930, 931, 932, 933, 942, 952, 955, 960, 962, 963, 966, 968, 972, 978, 979, 989, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009], "islic": [8, 44, 61], "asarrai": [8, 17, 196, 214, 294, 314, 337, 338, 366, 377, 385, 560, 561, 699, 729, 819, 821, 822, 823, 962, 967], "int": [8, 10, 13, 16, 17, 19, 37, 44, 61, 80, 113, 121, 137, 138, 150, 151, 152, 158, 162, 177, 187, 189, 196, 204, 214, 222, 225, 231, 234, 240, 250, 253, 254, 255, 257, 275, 280, 282, 288, 313, 339, 360, 365, 366, 375, 377, 387, 390, 393, 397, 400, 401, 404, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 458, 459, 462, 465, 466, 468, 469, 470, 471, 477, 478, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 582, 583, 585, 586, 592, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 683, 687, 688, 691, 699, 700, 702, 703, 704, 707, 709, 710, 711, 728, 729, 730, 742, 747, 748, 751, 752, 753, 754, 755, 756, 757, 760, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 886, 890, 891, 893, 894, 906, 907, 909, 910, 911, 912, 919, 921, 923, 926, 931, 932, 948, 959, 994, 1000, 1004, 1005], "iter_minibatch": 8, "minibatch_s": [8, 354], "statist": [8, 80, 109, 113, 114, 124, 135, 136, 137, 138, 141, 146, 164, 167, 168, 184, 248, 254, 271, 297, 307, 348, 355, 358, 360, 362, 365, 370, 377, 389, 390, 391, 393, 394, 396, 398, 410, 444, 449, 467, 468, 491, 492, 493, 495, 497, 516, 521, 534, 535, 537, 579, 580, 581, 584, 602, 605, 609, 610, 619, 624, 631, 665, 669, 671, 684, 690, 695, 696, 697, 704, 716, 761, 770, 785, 801, 828, 829, 847, 848, 849, 851, 855, 858, 859, 861, 875, 878, 879, 927, 941, 942, 946, 948, 949, 951, 952, 953, 954, 959, 962, 966, 967, 968, 969, 970, 971, 979, 985, 986, 999, 1002, 1005, 1006, 1008], "test_stat": 8, "n_test": [8, 10, 33, 113, 255, 994, 997], "n_test_po": 8, "hold": [8, 16, 26, 27, 196, 256, 346, 358, 365, 366, 387, 389, 393, 396, 397, 399, 478, 536, 564, 607, 609, 709, 770, 773, 774, 783, 807, 838, 839, 844, 845, 854, 942, 946, 956, 966, 967, 968, 975, 978, 987, 1002, 1006], "n_test_docu": 8, "tick": [8, 43, 59, 152, 167, 235, 266, 607, 795], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 60, 80, 91, 98, 105, 121, 122, 142, 146, 157, 166, 177, 183, 192, 196, 211, 214, 218, 220, 275, 282, 285, 309, 316, 329, 332, 337, 338, 339, 346, 362, 370, 377, 386, 387, 388, 389, 391, 392, 394, 395, 396, 397, 399, 408, 418, 419, 422, 424, 434, 439, 440, 456, 457, 458, 490, 495, 498, 506, 509, 511, 512, 516, 519, 520, 521, 524, 525, 527, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 565, 566, 586, 588, 598, 600, 610, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 651, 652, 653, 654, 656, 659, 665, 669, 671, 674, 683, 684, 693, 699, 714, 729, 731, 732, 736, 761, 799, 800, 804, 805, 814, 818, 822, 829, 830, 850, 851, 870, 871, 873, 876, 878, 879, 880, 881, 909, 927, 933, 938, 948, 952, 953, 954, 955, 967, 968, 985, 997, 998, 1000, 1002, 1003, 1005], "cls_name": [8, 10], "stat": [8, 10, 69, 79, 101, 146, 169, 252, 255, 263, 267, 280, 307, 312, 313, 362, 373, 376, 391, 449, 474, 567, 570, 571, 573, 574, 575, 579, 580, 581, 584, 657, 658, 774, 781, 783, 878, 879, 909, 941, 948, 1001, 1003, 1007], "string": [8, 70, 118, 157, 214, 227, 259, 308, 339, 352, 359, 360, 365, 366, 370, 377, 383, 390, 393, 396, 397, 398, 400, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 463, 464, 470, 480, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 592, 595, 602, 603, 604, 605, 606, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 674, 683, 685, 693, 705, 735, 738, 744, 747, 751, 752, 753, 754, 763, 764, 768, 769, 770, 773, 774, 783, 794, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 888, 890, 891, 898, 899, 900, 918, 920, 936, 937, 941, 942, 952, 965, 967, 978, 985, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "n_train": [8, 10, 33, 113, 255, 994, 997], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 177, 258, 352, 386, 391, 398, 483, 484, 524, 572, 602, 605, 619, 844, 848, 859, 942, 948, 1002, 1006], "mini": [8, 63, 95, 309, 354, 377, 397, 416, 418, 422, 424, 426, 428, 506, 508, 511, 512, 513, 514, 515, 517, 518, 520, 521, 956, 957, 994, 1005, 1007], "smaller": [8, 24, 40, 46, 81, 154, 155, 158, 161, 181, 185, 187, 200, 229, 281, 282, 291, 297, 324, 332, 338, 365, 386, 388, 389, 391, 393, 394, 396, 398, 399, 415, 416, 425, 429, 431, 489, 509, 510, 532, 533, 534, 535, 539, 540, 568, 585, 594, 608, 621, 622, 624, 625, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 657, 658, 667, 683, 768, 773, 774, 817, 820, 844, 862, 863, 870, 878, 879, 880, 881, 907, 946, 948, 949, 951, 952, 953, 955, 956, 958, 962, 964, 966, 967, 968, 973, 987, 1002, 1007], "bigger": [8, 40, 59, 209, 255, 294, 334, 338, 351, 353, 397, 414, 415, 483, 513, 817, 982, 989], "overhead": [8, 353, 354, 365, 370, 373, 375, 377, 396, 417, 421, 424, 509, 674, 803, 804, 806, 807, 808, 809, 810, 811, 812, 920, 954, 955, 997, 1002, 1003, 1006], "partial": [8, 12, 50, 83, 86, 126, 164, 165, 170, 214, 224, 238, 307, 362, 377, 379, 391, 392, 394, 396, 399, 456, 457, 458, 459, 464, 476, 509, 511, 516, 537, 564, 607, 608, 632, 761, 797, 799, 800, 827, 828, 829, 832, 848, 851, 879, 949, 956, 966, 987, 989, 991, 995, 1002, 1003, 1007], "stream": [8, 389, 394, 397, 437, 564, 840, 841, 851, 944, 972, 1002, 1005], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "enumer": [8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 50, 58, 59, 60, 61, 69, 71, 78, 80, 81, 85, 94, 96, 98, 105, 109, 113, 120, 121, 123, 124, 135, 151, 153, 158, 169, 176, 178, 187, 196, 218, 219, 222, 225, 230, 233, 234, 240, 241, 242, 243, 245, 246, 250, 258, 265, 275, 280, 284, 285, 287, 294, 299, 300, 312, 313, 315, 317, 322, 324, 331, 332, 337, 343, 360, 534, 535, 539, 540, 754, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790], "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 114, 119, 122, 166, 194, 198, 204, 218, 231, 233, 242, 252, 256, 258, 309, 313, 338, 358, 365, 366, 373, 390, 439, 501, 563, 564, 566, 607, 781, 844, 865, 866, 885, 886, 912, 944, 965, 973, 978], "updat": [8, 16, 44, 61, 94, 110, 124, 230, 305, 339, 363, 364, 365, 368, 372, 377, 389, 394, 396, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 885, 927, 948, 955, 956, 957, 966, 975, 976, 995, 1001, 1002, 1003, 1005, 1007, 1009], "accumul": [8, 50, 116, 117, 185, 368, 370, 389, 397, 952, 995, 1002], "acc_histori": 8, "run_histori": 8, "scikit_learn_data": [8, 50, 360, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "985": [8, 263], "982": 8, "887": 8, "1301": 8, "898": 8, "1295": 8, "866": [8, 960], "1278": 8, "916": [8, 49], "1273": 8, "3758": 8, "483": [8, 623], "955": [8, 98, 107, 393, 629], "06": [8, 35, 46, 52, 67, 74, 82, 84, 139, 166, 170, 187, 195, 196, 214, 215, 223, 238, 247, 255, 256, 271, 294, 299, 318, 331, 335, 340, 370, 456, 457, 458, 619, 620, 664, 668, 768, 769, 770, 783, 879, 948, 962, 964], "1821": 8, "07": [8, 28, 66, 67, 105, 133, 166, 192, 214, 271, 348, 360, 389, 506, 536, 537, 667, 952, 966], "1818": 8, "885": [8, 362], "1810": 8, "944": [8, 982], "1807": 8, "6603": 8, "787": 8, "956": [8, 14, 309, 310, 982], "1980": [8, 362], "937": 8, "1979": [8, 389, 698, 742], "901": 8, "1973": [8, 362], "946": [8, 80], "1972": [8, 362], "9524": [8, 1002], "1189": [8, 396], "929": 8, "2052": 8, "949": [8, 284, 289], "2051": 8, "919": 8, "2047": 8, "954": [8, 847, 858], "2046": 8, "12456": 8, "1553": 8, "2097": 8, "961": [8, 363, 380, 381, 382, 828], "2096": 8, "926": 8, "2092": 8, "973": [8, 315, 318, 338, 393], "2091": 8, "14840": 8, "1820": 8, "950": 8, "2081": 8, "2080": 8, "928": [8, 80, 413], "2077": 8, "969": [8, 359], "2076": 8, "17201": 8, "2099": 8, "957": [8, 399, 701, 952], "2061": 8, "2060": 8, "931": 8, "2058": 8, "972": 8, "2057": 8, "curv": [8, 11, 23, 28, 74, 77, 113, 115, 121, 164, 167, 174, 175, 186, 196, 214, 215, 217, 219, 222, 224, 226, 234, 235, 238, 239, 247, 248, 255, 265, 271, 292, 305, 332, 344, 371, 384, 388, 393, 395, 413, 414, 415, 477, 485, 490, 496, 500, 539, 607, 620, 633, 673, 675, 676, 680, 681, 682, 683, 700, 702, 714, 715, 755, 757, 760, 761, 762, 768, 769, 786, 795, 797, 798, 809, 832, 851, 870, 875, 948, 949, 951, 952, 958, 968, 974, 976, 989, 991, 996, 997, 1000, 1004, 1006, 1007, 1008], "evolut": [8, 10, 267, 352, 354, 521], "cours": [8, 9, 172, 352, 365, 366, 394, 397, 398, 942, 947, 948, 976], "valid": [8, 13, 26, 54, 55, 70, 73, 77, 81, 103, 114, 118, 119, 120, 121, 122, 134, 139, 140, 144, 146, 147, 157, 164, 166, 168, 174, 184, 196, 198, 204, 214, 215, 233, 242, 248, 255, 256, 257, 259, 261, 263, 264, 269, 271, 279, 294, 298, 305, 307, 315, 324, 332, 342, 353, 360, 365, 367, 375, 376, 377, 383, 384, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 413, 418, 419, 421, 422, 424, 425, 432, 438, 439, 443, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 467, 474, 476, 477, 479, 490, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 568, 569, 572, 577, 607, 609, 613, 614, 615, 616, 617, 618, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 674, 680, 687, 701, 735, 738, 747, 751, 752, 753, 758, 761, 763, 764, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 835, 837, 851, 862, 863, 865, 866, 868, 870, 872, 875, 877, 878, 879, 880, 881, 890, 891, 894, 901, 913, 942, 951, 952, 953, 956, 960, 962, 964, 966, 967, 968, 972, 973, 976, 978, 981, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "consumpt": [8, 352, 509, 532, 533, 539, 540, 770, 783, 792, 793, 794, 878, 879, 880, 881, 978, 994, 996, 1000, 1002, 1003, 1008], "queue": [8, 955, 997], "up": [8, 11, 37, 44, 46, 47, 48, 52, 61, 69, 79, 80, 88, 91, 115, 162, 175, 189, 197, 212, 213, 234, 242, 260, 288, 294, 298, 309, 313, 321, 332, 337, 339, 354, 359, 360, 363, 365, 368, 370, 371, 372, 373, 375, 377, 387, 389, 394, 396, 397, 419, 422, 423, 424, 425, 427, 431, 434, 435, 436, 483, 484, 511, 524, 525, 532, 533, 534, 535, 536, 537, 539, 540, 541, 585, 602, 607, 608, 614, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 656, 657, 658, 659, 667, 679, 742, 768, 769, 772, 773, 774, 795, 846, 849, 860, 878, 879, 880, 881, 884, 907, 910, 911, 941, 948, 949, 952, 955, 966, 967, 973, 975, 976, 986, 987, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "amount": [8, 12, 45, 65, 77, 80, 95, 99, 111, 113, 155, 166, 214, 230, 307, 312, 315, 317, 324, 332, 339, 352, 354, 375, 388, 389, 391, 394, 396, 397, 398, 419, 429, 444, 513, 514, 516, 518, 538, 571, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 640, 656, 659, 667, 773, 774, 811, 812, 817, 866, 867, 880, 881, 947, 948, 951, 954, 956, 962, 964, 965, 966, 967, 985, 986, 1007], "learner": [8, 109, 111, 120, 129, 354, 534, 535, 557, 564, 605, 813, 814, 819, 821, 954, 957, 968, 972, 973, 987], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 61, 85, 152, 200, 201, 205, 207, 225, 237, 259, 283, 285, 298, 320, 322, 325, 326, 959, 991], "set_ylim": [8, 10, 16, 31, 42, 59, 74, 91, 109, 115, 126, 127, 129, 158, 169, 176, 194, 196, 197, 230, 240, 257, 259, 262, 273, 280, 291, 297, 299, 300, 306, 315, 333], "runtim": [8, 10, 57, 182, 211, 213, 230, 294, 299, 366, 367, 375, 377, 388, 389, 396, 425, 538, 654, 783, 870, 871, 872, 873, 874, 875, 876, 966, 967, 997, 1001, 1002, 1008, 1009], "gcf": [8, 959], "cls_runtim": 8, "bar_color": 8, "rectangl": [8, 129], "bar": [8, 10, 14, 71, 116, 119, 120, 123, 131, 142, 146, 157, 161, 175, 240, 245, 254, 256, 260, 273, 309, 338, 366, 392, 556, 623, 644, 655, 952, 966, 968, 1000, 1001, 1002, 1003], "width": [8, 10, 16, 45, 79, 89, 97, 98, 104, 105, 106, 113, 118, 119, 122, 131, 142, 151, 157, 179, 214, 240, 245, 254, 297, 299, 300, 307, 321, 362, 390, 414, 415, 427, 439, 467, 468, 481, 496, 561, 836, 883, 962, 966, 968, 984, 985, 1002], "set_xtick": [8, 10, 16, 31, 34, 43, 59, 63, 106, 127, 131, 169, 187, 212, 230, 240, 266, 267, 273, 291, 293, 299, 300, 321], "set_xticklabel": [8, 10, 79, 106, 131, 152, 169, 266, 267, 273], "ymax": [8, 10, 11, 77, 183, 185, 188, 189, 197, 205, 255, 257, 288], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 59, 63, 64, 74, 79, 89, 91, 100, 106, 115, 116, 127, 129, 130, 158, 161, 162, 168, 175, 176, 185, 187, 194, 196, 197, 198, 204, 217, 218, 221, 222, 228, 230, 234, 235, 240, 249, 250, 252, 255, 257, 258, 262, 266, 267, 273, 275, 279, 280, 285, 291, 292, 297, 298, 299, 300, 301, 302, 305, 309, 312, 313, 321, 332, 333, 334, 337, 342], "autolabel": [8, 120], "attach": [8, 120, 337, 410, 816, 995, 1005], "rect": [8, 52, 74, 120, 175], "height": [8, 14, 98, 119, 146, 169, 297, 302, 337, 395, 467, 468, 481, 561], "get_height": [8, 120], "get_x": [8, 120], "get_width": [8, 120], "va": [8, 120, 266, 283, 285, 331], "setp": [8, 10, 180, 266, 269], "rotat": [8, 40, 93, 97, 100, 107, 131, 164, 169, 220, 266, 267, 273, 324, 331, 392, 394, 399, 401, 479, 507, 516, 525, 589, 672, 851, 882, 948, 1005, 1006], "read": [8, 17, 95, 217, 262, 305, 306, 307, 309, 352, 359, 363, 366, 367, 368, 369, 371, 372, 375, 376, 377, 389, 400, 401, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 589, 590, 591, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 903, 941, 948, 952, 953, 972, 976, 987, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007], "feat": [8, 10, 397], "extr": 8, "hash": [8, 108, 133, 164, 338, 339, 352, 354, 357, 365, 367, 375, 396, 489, 519, 532, 541, 556, 557, 564, 615, 806, 919, 944, 987, 989, 995, 998, 1001], "vect": [8, 69, 256, 316, 397, 987], "228": [8, 15, 231, 238], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 53, 55, 56, 69, 70, 73, 74, 77, 79, 85, 91, 97, 101, 109, 110, 113, 117, 120, 124, 126, 128, 129, 141, 146, 148, 149, 150, 151, 154, 155, 156, 157, 159, 164, 167, 168, 172, 185, 192, 193, 196, 198, 200, 204, 210, 213, 214, 217, 218, 220, 222, 225, 227, 228, 230, 231, 233, 255, 262, 267, 268, 276, 289, 302, 304, 305, 307, 315, 324, 325, 329, 330, 332, 333, 338, 339, 345, 348, 352, 362, 365, 369, 372, 376, 392, 394, 396, 397, 490, 585, 586, 588, 589, 590, 594, 597, 598, 820, 941, 948, 952, 955, 958, 964, 965, 966, 967, 976, 978], "robust": [9, 60, 62, 76, 82, 122, 162, 164, 166, 167, 174, 198, 213, 215, 225, 297, 354, 362, 366, 372, 389, 396, 397, 423, 444, 445, 448, 449, 450, 451, 499, 509, 534, 535, 624, 632, 645, 646, 653, 654, 723, 801, 832, 846, 848, 849, 859, 865, 905, 952, 956, 958, 962, 965, 966, 972, 974, 976, 988, 989, 994, 995, 997, 998, 999, 1000, 1001], "covari": [9, 12, 29, 33, 35, 78, 82, 84, 103, 106, 149, 156, 225, 239, 241, 244, 245, 246, 247, 355, 373, 377, 389, 392, 394, 399, 456, 457, 458, 459, 479, 490, 494, 502, 507, 509, 516, 521, 523, 524, 525, 538, 585, 586, 588, 597, 598, 619, 620, 625, 629, 631, 657, 658, 661, 664, 668, 768, 769, 770, 788, 951, 958, 962, 974, 988, 989, 994, 996, 997, 998, 999, 1001, 1003], "wine": [9, 237, 302, 358, 485, 989], "kind": [9, 12, 24, 25, 104, 141, 166, 167, 249, 307, 321, 324, 337, 354, 358, 360, 365, 366, 370, 375, 376, 387, 389, 392, 393, 394, 396, 397, 398, 462, 463, 478, 483, 484, 496, 499, 563, 607, 608, 899, 948, 954, 959, 968, 997, 1006, 1008], "tool": [9, 11, 253, 258, 348, 358, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 379, 380, 383, 388, 389, 390, 391, 461, 667, 941, 947, 948, 952, 958, 962, 967, 969, 972, 973, 976, 978, 987, 1001, 1004, 1007, 1008, 1009], "purpos": [9, 12, 16, 37, 85, 161, 210, 211, 212, 217, 219, 232, 243, 324, 325, 337, 338, 348, 360, 365, 366, 376, 377, 378, 380, 382, 386, 389, 390, 394, 396, 397, 398, 399, 474, 521, 793, 794, 831, 949, 952, 953, 955, 958, 970, 972, 978, 1006, 1008], "awar": [9, 14, 109, 143, 158, 321, 337, 363, 366, 375, 378, 393, 397, 542, 543, 629, 630, 631, 817, 846, 958, 962, 968, 991, 994, 995, 1008], "thing": [9, 218, 250, 337, 353, 354, 360, 364, 365, 366, 375, 389, 391, 397, 534, 535, 948, 962, 976, 1000], "trivial": [9, 198, 342, 365, 389, 787, 872, 875, 949, 973, 994], "dimens": [9, 12, 14, 37, 40, 81, 84, 89, 95, 151, 153, 155, 157, 158, 167, 179, 194, 200, 219, 221, 225, 229, 230, 235, 241, 242, 279, 280, 284, 300, 337, 338, 339, 360, 362, 377, 388, 389, 394, 395, 399, 401, 418, 419, 421, 422, 423, 424, 427, 439, 440, 456, 457, 458, 467, 468, 490, 499, 500, 504, 505, 508, 516, 524, 557, 558, 559, 560, 562, 564, 572, 594, 597, 616, 619, 634, 665, 666, 667, 669, 670, 674, 737, 792, 811, 812, 816, 830, 862, 863, 864, 872, 873, 874, 875, 876, 890, 891, 892, 917, 923, 926, 942, 944, 946, 948, 949, 950, 953, 955, 956, 958, 964, 967, 978, 985, 986, 1001, 1003, 1004, 1006], "below": [9, 25, 26, 27, 32, 59, 69, 74, 79, 88, 89, 95, 114, 116, 117, 122, 141, 179, 192, 193, 196, 198, 212, 213, 218, 222, 227, 236, 250, 253, 258, 260, 261, 262, 297, 301, 305, 306, 307, 308, 309, 328, 329, 332, 337, 346, 348, 353, 358, 359, 363, 365, 366, 368, 369, 373, 377, 380, 389, 391, 392, 393, 394, 396, 397, 398, 399, 423, 446, 447, 453, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 485, 506, 512, 517, 523, 557, 570, 571, 572, 573, 574, 575, 608, 621, 627, 633, 634, 642, 648, 650, 667, 674, 679, 716, 736, 768, 769, 770, 780, 783, 800, 831, 834, 844, 848, 853, 859, 941, 942, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 962, 966, 967, 968, 969, 972, 980, 987, 990, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "main": [9, 16, 32, 61, 85, 99, 119, 164, 225, 304, 332, 337, 352, 353, 354, 358, 363, 365, 366, 368, 370, 372, 375, 376, 377, 379, 387, 388, 389, 394, 396, 397, 399, 478, 500, 505, 524, 525, 600, 687, 801, 941, 949, 951, 952, 959, 964, 973, 975, 984, 987, 994, 997, 1002, 1004, 1005, 1006, 1007, 1008], "empir": [9, 24, 25, 36, 67, 76, 79, 81, 82, 164, 214, 261, 297, 387, 393, 396, 399, 422, 424, 444, 445, 449, 452, 453, 507, 509, 514, 516, 518, 524, 526, 540, 565, 578, 614, 624, 642, 646, 653, 654, 690, 695, 696, 697, 796, 806, 807, 808, 810, 829, 893, 926, 944, 946, 952, 954, 956, 964, 966, 988, 989], "heterogen": [9, 24, 68, 70, 75, 164, 196, 302, 305, 357, 359, 375, 439, 462, 519, 556, 566, 687, 831, 835, 870, 949, 959, 962, 972, 989, 998, 1002, 1004, 1005], "mode": [9, 10, 46, 47, 53, 79, 196, 225, 275, 277, 294, 305, 365, 367, 372, 373, 375, 386, 392, 396, 400, 419, 420, 422, 424, 427, 434, 437, 446, 447, 453, 456, 461, 483, 484, 532, 536, 539, 567, 570, 571, 573, 574, 575, 585, 602, 619, 620, 633, 634, 641, 643, 648, 649, 650, 651, 654, 657, 658, 664, 668, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 827, 870, 872, 875, 878, 880, 896, 906, 907, 909, 955, 958, 972, 978, 979, 986, 995, 1003, 1008], "stick": [9, 768, 951], "bias": [9, 27, 81, 98, 122, 128, 166, 168, 200, 260, 360, 379, 387, 396, 499, 524, 827, 851, 861, 947, 951, 960, 966, 968], "yet": [9, 214, 256, 339, 354, 360, 364, 375, 379, 380, 393, 394, 396, 397, 399, 423, 427, 436, 437, 551, 751, 936, 941, 948, 952, 958, 966, 973, 1003], "extent": [9, 30, 57, 151, 152, 153, 229, 330, 333, 416, 510, 671, 768, 952], "assum": [9, 124, 156, 162, 166, 185, 196, 214, 225, 228, 234, 246, 255, 297, 339, 353, 364, 365, 366, 368, 370, 375, 376, 377, 379, 383, 386, 387, 389, 391, 393, 394, 396, 397, 399, 400, 413, 415, 420, 425, 432, 438, 444, 445, 446, 447, 448, 449, 450, 451, 474, 478, 483, 484, 507, 517, 523, 524, 542, 543, 562, 563, 564, 566, 595, 618, 619, 621, 622, 627, 633, 634, 635, 636, 637, 641, 642, 643, 646, 647, 651, 652, 653, 656, 660, 662, 663, 667, 683, 699, 708, 714, 729, 737, 742, 747, 751, 754, 770, 773, 774, 783, 807, 813, 814, 817, 818, 819, 821, 822, 827, 838, 851, 928, 929, 930, 942, 946, 948, 950, 951, 952, 954, 955, 957, 958, 959, 962, 966, 967, 968, 1000, 1006], "parametr": [9, 24, 25, 81, 228, 279, 301, 308, 387, 390, 395, 396, 413, 526, 528, 610, 660, 671, 847, 858, 901, 902, 948, 951, 954, 955, 962, 965, 968, 1002, 1004, 1007], "therefor": [9, 13, 24, 37, 52, 70, 71, 74, 79, 85, 100, 105, 110, 113, 115, 122, 127, 129, 167, 168, 196, 212, 213, 240, 246, 256, 258, 275, 293, 297, 312, 324, 333, 337, 338, 346, 352, 359, 363, 369, 375, 389, 390, 391, 393, 394, 396, 397, 413, 470, 474, 510, 524, 526, 528, 529, 534, 535, 539, 540, 579, 581, 633, 634, 640, 643, 646, 651, 653, 654, 686, 708, 730, 768, 831, 832, 844, 848, 859, 870, 871, 942, 946, 948, 949, 952, 954, 955, 956, 957, 960, 962, 967, 968, 973, 978, 985, 987, 1003, 1004, 1007, 1008], "minimum": [9, 79, 122, 123, 125, 145, 185, 206, 229, 257, 265, 281, 282, 366, 373, 380, 382, 386, 389, 396, 397, 417, 421, 425, 429, 431, 444, 445, 448, 449, 450, 451, 486, 488, 516, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 569, 602, 606, 607, 610, 612, 643, 646, 651, 653, 654, 657, 658, 667, 679, 698, 752, 753, 773, 774, 792, 807, 828, 829, 840, 841, 844, 846, 850, 863, 864, 877, 878, 879, 880, 881, 887, 890, 891, 894, 910, 949, 952, 956, 958, 962, 964, 968, 994, 997, 1001, 1002, 1006, 1007], "determin": [9, 11, 13, 19, 46, 79, 112, 154, 166, 175, 176, 192, 255, 257, 297, 302, 339, 346, 348, 364, 365, 366, 373, 376, 377, 386, 387, 389, 393, 394, 396, 397, 398, 399, 408, 413, 417, 418, 419, 421, 422, 424, 425, 431, 434, 435, 436, 440, 444, 445, 447, 448, 449, 450, 451, 456, 457, 458, 462, 465, 466, 469, 471, 478, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 512, 514, 517, 518, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 540, 542, 543, 545, 557, 558, 559, 563, 566, 569, 577, 582, 583, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 610, 611, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 662, 664, 665, 667, 668, 669, 681, 685, 696, 702, 703, 711, 756, 757, 758, 760, 761, 764, 770, 772, 773, 774, 783, 791, 792, 793, 794, 795, 796, 798, 802, 804, 805, 807, 814, 816, 817, 822, 827, 828, 829, 835, 836, 844, 845, 846, 848, 859, 870, 871, 873, 876, 879, 881, 884, 917, 921, 923, 926, 941, 944, 946, 951, 955, 957, 958, 962, 965, 966, 968, 978, 994, 999, 1002, 1003, 1005, 1006, 1007], "concentr": [9, 100, 110, 127, 154, 164, 222, 239, 246, 247, 299, 314, 361, 362, 365, 396, 399, 419, 494, 768, 951, 958], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 56, 58, 60, 61, 67, 79, 90, 102, 112, 118, 169, 222, 240, 241, 242, 243, 256, 281, 282, 284, 300, 306, 326, 336, 337, 339, 340, 354, 355, 358, 360, 362, 365, 366, 369, 375, 377, 384, 395, 397, 403, 404, 406, 462, 477, 478, 479, 486, 487, 488, 489, 490, 497, 505, 516, 519, 539, 541, 564, 565, 566, 666, 667, 670, 678, 679, 684, 691, 693, 698, 704, 709, 710, 728, 730, 751, 752, 759, 763, 764, 766, 768, 769, 823, 824, 832, 836, 843, 851, 899, 901, 914, 920, 936, 942, 949, 951, 955, 958, 960, 962, 965, 969, 972, 973, 976, 978, 981, 984, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001], "outli": [9, 79, 377, 444, 449, 948, 958], "skew": [9, 122, 229, 297, 357, 393, 614, 615, 616, 617, 847, 858, 948, 962, 989, 997, 1001], "Of": [9, 25, 27, 161, 352, 366, 389, 397, 942], "screen": [9, 1007], "presenc": [9, 59, 61, 79, 80, 297, 363, 377, 391, 394, 686, 699, 729, 742, 800, 834, 842, 844, 936, 942, 948, 952, 953, 966, 997, 998, 1000, 1004, 1006, 1008], "mixtur": [9, 44, 242, 243, 247, 355, 360, 361, 377, 389, 394, 395, 399, 598, 972, 973, 988, 989, 994, 998, 999, 1000, 1001], "univari": [9, 36, 67, 71, 73, 140, 141, 147, 164, 211, 319, 335, 357, 388, 389, 390, 397, 421, 479, 500, 505, 567, 570, 571, 573, 574, 575, 577, 579, 580, 581, 582, 583, 584, 602, 603, 604, 605, 620, 770, 775, 793, 797, 831, 832, 841, 846, 850, 851, 870, 875, 948, 967, 969, 974, 986, 989, 994, 1000], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 57, 61, 70, 72, 74, 85, 95, 96, 102, 104, 106, 115, 122, 142, 149, 166, 168, 185, 201, 210, 217, 218, 219, 225, 230, 255, 256, 258, 266, 267, 273, 284, 297, 301, 302, 306, 324, 339, 346, 348, 352, 357, 365, 366, 372, 375, 376, 377, 386, 387, 388, 389, 390, 391, 393, 394, 396, 397, 399, 401, 416, 427, 437, 439, 440, 442, 444, 449, 456, 457, 458, 459, 483, 484, 491, 492, 493, 499, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 523, 524, 525, 528, 529, 532, 533, 534, 535, 539, 540, 541, 563, 564, 565, 566, 602, 607, 608, 613, 614, 616, 617, 633, 634, 643, 651, 652, 653, 666, 674, 681, 699, 729, 731, 732, 754, 761, 763, 764, 770, 783, 797, 800, 806, 807, 808, 809, 810, 820, 830, 831, 840, 847, 848, 851, 855, 856, 858, 859, 860, 861, 866, 877, 878, 879, 880, 881, 890, 896, 899, 906, 907, 924, 942, 944, 948, 949, 950, 951, 952, 954, 956, 958, 962, 966, 967, 968, 969, 971, 976, 995, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008], "ellipticenvelop": [9, 225, 445, 448, 449, 450, 451, 538, 958, 994, 997, 1001, 1002, 1007], "oneclasssvm": [9, 11, 16, 210, 225, 308, 323, 538, 652, 817, 958, 966, 967, 996, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "font_manag": [9, 80, 281, 323], "load_win": [9, 237, 302, 815, 823, 991, 1005], "support_fract": [9, 444, 449], "contamin": [9, 79, 80, 225, 234, 281, 282, 444, 538, 817, 958, 1002], "ocsvm": [9, 210], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 84, 90, 112, 121, 152, 208, 220, 234, 297, 321, 366, 377, 439, 484, 542, 543, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 674, 737, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 986], "frontier": [9, 210, 281, 323, 958, 985], "xx1": [9, 112, 606], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 57, 79, 118, 125, 127, 150, 151, 152, 153, 155, 167, 207, 208, 209, 210, 222, 225, 244, 281, 288, 291, 299, 300, 317, 323, 324, 329, 330, 333, 334, 606], "500": [9, 10, 44, 50, 56, 59, 60, 62, 84, 85, 103, 105, 114, 123, 149, 172, 209, 210, 218, 235, 236, 240, 241, 245, 255, 258, 268, 275, 281, 287, 301, 306, 323, 330, 334, 352, 396, 444, 445, 449, 450, 451, 456, 457, 458, 586, 588, 589, 591, 596, 599, 600, 625, 626, 629, 630, 631, 655, 657, 658, 829, 941, 967], "clf_name": [9, 10, 337], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 55, 112, 125, 138, 208, 209, 210, 226, 234, 262, 264, 281, 282, 291, 299, 322, 323, 324, 328, 329, 330, 334, 366, 377, 387, 396, 413, 444, 524, 525, 528, 530, 534, 536, 538, 542, 568, 569, 606, 607, 608, 633, 634, 641, 643, 649, 650, 651, 652, 673, 675, 676, 681, 694, 699, 700, 708, 712, 713, 715, 729, 755, 761, 762, 765, 770, 773, 774, 783, 792, 799, 800, 801, 802, 817, 831, 838, 867, 870, 872, 874, 875, 948, 952, 958, 959, 966, 967, 985, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 57, 79, 96, 101, 118, 121, 125, 126, 127, 136, 138, 151, 194, 209, 210, 212, 225, 234, 264, 265, 281, 300, 317, 323, 324, 328, 330, 333, 334, 389, 634, 688, 689, 692, 952, 982, 985, 986], "contour": [9, 11, 16, 34, 46, 47, 79, 118, 138, 152, 153, 155, 207, 208, 209, 210, 225, 244, 281, 288, 322, 323, 325, 326, 328, 329, 330, 362, 606, 607, 958, 966], "linewidth": [9, 24, 33, 34, 37, 57, 72, 77, 85, 91, 111, 122, 126, 129, 149, 153, 157, 185, 186, 190, 191, 192, 194, 197, 199, 202, 210, 213, 225, 232, 234, 264, 268, 281, 285, 298, 306, 322, 323, 325, 330, 344, 983], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 84, 93, 101, 107, 164, 372, 394, 508, 516, 667, 971, 972, 986], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 69, 72, 73, 102, 122, 124, 194, 202, 225, 233, 242, 253, 254, 256, 259, 262, 264, 275, 279, 299, 309, 316, 324, 332, 338, 339, 354, 357, 359, 366, 375, 377, 390, 393, 400, 401, 403, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 470, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 672, 673, 675, 676, 687, 735, 738, 744, 752, 753, 768, 769, 770, 773, 774, 780, 781, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 885, 895, 896, 912, 941, 952, 962, 982, 987, 989, 994, 1000, 1001], "boxstyl": [9, 299], "fc": [9, 129, 280, 360], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 262, 288, 329, 380, 621, 622, 625, 627, 628, 629, 635, 636, 637, 638, 639, 656, 657, 658, 659, 661], "xycoord": [9, 26], "textcoord": [9, 172], "xytext": [9, 26, 172], "bbox": [9, 12, 34, 45, 102, 240, 241, 242, 245, 246, 299], "arrowprop": [9, 26], "prop": [9, 33, 72, 80, 202, 242, 281, 323, 346], "fontproperti": [9, 80, 281, 323], "ash": [9, 362, 997, 1000], "malic_acid": 9, "abil": [9, 60, 79, 122, 155, 161, 166, 168, 196, 214, 225, 337, 354, 380, 396, 397, 755, 756, 757, 760, 949, 952, 955, 958, 968, 973, 994, 996, 1001, 1003, 1007, 1008], "locat": [9, 25, 54, 71, 79, 80, 167, 190, 288, 307, 324, 358, 363, 365, 369, 372, 373, 380, 389, 391, 395, 423, 435, 436, 444, 445, 446, 447, 448, 449, 450, 451, 462, 474, 475, 476, 479, 480, 487, 490, 937, 942, 948, 953, 958, 962, 968, 1002], "hard": [9, 196, 225, 229, 255, 354, 364, 375, 377, 389, 394, 397, 509, 516, 544, 651, 872, 873, 874, 875, 876, 948, 965, 967, 968, 973, 985, 986, 987, 1003, 1004], "due": [9, 26, 27, 59, 74, 113, 149, 166, 167, 175, 187, 194, 196, 198, 213, 214, 229, 241, 252, 263, 302, 337, 338, 339, 365, 370, 377, 380, 387, 389, 393, 394, 396, 399, 419, 422, 434, 510, 514, 518, 519, 549, 646, 770, 773, 774, 777, 779, 783, 792, 793, 794, 796, 799, 803, 804, 836, 840, 841, 851, 942, 948, 949, 951, 952, 953, 955, 959, 966, 973, 986, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "banana": 9, "anywai": [9, 337, 366, 640, 660, 661], "rid": [9, 966], "difficulti": [9, 27, 214, 297, 354, 365, 387, 828, 829, 951, 955], "adjust": [9, 36, 38, 49, 57, 67, 77, 122, 164, 225, 237, 256, 305, 316, 332, 338, 371, 389, 394, 396, 397, 499, 528, 529, 532, 534, 536, 537, 539, 633, 634, 641, 643, 649, 650, 651, 678, 679, 682, 688, 689, 728, 730, 759, 766, 806, 807, 809, 810, 841, 862, 863, 870, 871, 872, 875, 878, 880, 896, 951, 952, 956, 962, 985, 991, 994, 1000], "bandwidth": [9, 44, 62, 231, 279, 280, 288, 375, 377, 389, 395, 423, 433, 436, 811, 812, 816, 945, 958, 972, 1005, 1009], "compromis": [9, 167, 352, 365, 622, 654, 955, 997], "risk": [9, 196, 214, 298, 332, 348, 364, 365, 377, 388, 393, 542, 543, 855, 856, 858, 859, 860, 861, 948, 952, 976, 1001], "x2": [9, 16, 84, 90, 112, 121, 152, 208, 234, 366, 390, 563, 604, 674, 737, 986], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 362], "588": [9, 15], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 85, 161, 172, 196, 211, 214, 233, 234, 253, 337, 353, 354, 360, 366, 369, 370, 377, 378, 379, 394, 396, 398, 474, 517, 523, 565, 568, 712, 952, 955, 957, 958, 966, 967, 968, 970, 976, 978, 981, 985, 987, 1002], "boxplot": [10, 79, 123, 166, 169, 305], "defaultdict": [10, 19, 25, 169, 258, 338, 339], "gc": 10, "make_regress": [10, 74, 175, 177, 178, 182, 199, 200, 268, 306, 348, 361, 367, 376, 529, 531, 535, 540, 610, 621, 622, 624, 626, 628, 630, 638, 639, 640, 642, 646, 654, 829, 871, 952, 953, 955], "randomforestregressor": [10, 128, 129, 132, 161, 162, 307, 376, 396, 532, 533, 535, 537, 541, 543, 545, 607, 608, 880, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "sgdregressor": [10, 207, 352, 354, 375, 388, 621, 624, 642, 646, 651, 654, 829, 871, 876, 948, 966, 996, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1009], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 59, 60, 95, 109, 116, 118, 129, 162, 204, 205, 210, 225, 256, 260, 261, 264, 268, 275, 312, 313, 314, 315, 326, 337, 338, 348, 360, 373, 377, 384, 444, 449, 462, 463, 465, 466, 469, 471, 478, 486, 487, 488, 489, 490, 494, 497, 499, 506, 512, 514, 515, 521, 522, 528, 529, 530, 531, 539, 540, 542, 543, 577, 633, 634, 641, 642, 643, 647, 649, 651, 652, 653, 662, 770, 772, 773, 774, 775, 783, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 828, 829, 870, 871, 872, 875, 906, 907, 921, 923, 947, 948, 953, 960, 966, 967, 982, 987, 989, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 63, 69, 71, 73, 129, 183, 256, 293, 294, 297, 308, 316, 337, 363, 368, 377, 383, 416, 419, 422, 424, 427, 429, 434, 437, 439, 442, 446, 447, 453, 506, 511, 512, 513, 514, 515, 518, 520, 521, 522, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 568, 569, 602, 605, 607, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 667, 669, 738, 751, 768, 769, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 800, 802, 805, 820, 827, 828, 829, 830, 831, 832, 833, 867, 870, 871, 872, 873, 874, 875, 876, 973, 996, 997, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009], "n_instanc": [10, 608], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 78, 80, 81, 94, 95, 98, 100, 109, 112, 113, 121, 123, 124, 128, 143, 162, 175, 182, 187, 189, 190, 195, 196, 197, 200, 201, 202, 206, 211, 214, 229, 232, 240, 244, 246, 255, 260, 264, 265, 280, 297, 302, 306, 307, 332, 338, 339, 342, 346, 352, 353, 360, 366, 370, 377, 387, 388, 389, 391, 394, 396, 397, 398, 399, 402, 427, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 461, 471, 483, 484, 498, 501, 502, 506, 507, 510, 512, 513, 514, 515, 517, 518, 522, 523, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 586, 611, 614, 618, 619, 620, 625, 633, 634, 639, 640, 641, 643, 646, 651, 652, 653, 660, 661, 677, 683, 686, 687, 689, 690, 698, 702, 703, 707, 711, 713, 719, 756, 757, 758, 760, 767, 768, 784, 785, 788, 789, 800, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 834, 841, 843, 844, 846, 847, 848, 850, 851, 856, 857, 858, 859, 863, 870, 878, 879, 880, 881, 938, 948, 950, 951, 954, 955, 956, 962, 963, 964, 966, 967, 968, 978, 985, 987, 994, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "atomic_benchmark": 10, "percentil": [10, 122, 297, 352, 567, 570, 571, 573, 574, 575, 578, 581, 607, 608, 721, 962, 999, 1007], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 73, 120, 132, 162, 197, 234, 252, 259, 302, 324, 342, 352, 363, 365, 375, 376, 390, 392, 396, 399, 424, 457, 513, 530, 531, 532, 533, 538, 539, 540, 541, 545, 660, 661, 770, 773, 774, 783, 795, 806, 807, 808, 809, 810, 941, 952, 987, 1002, 1004], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 65, 78, 80, 121, 146, 149, 155, 156, 172, 198, 250, 255, 256, 267, 313, 338, 339, 366, 373, 377, 386, 387, 388, 389, 394, 397, 398, 399, 563, 568, 582, 583, 590, 602, 609, 634, 775, 784, 785, 788, 896, 942, 951, 989, 1002, 1004], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 57, 63, 100, 112, 114, 118, 122, 138, 153, 157, 176, 179, 188, 205, 208, 214, 229, 230, 250, 255, 262, 317, 320, 322, 324, 325, 326, 328, 330, 338, 343, 360, 375, 377, 386, 387, 390, 393, 397, 399, 413, 416, 417, 421, 425, 432, 438, 453, 467, 483, 484, 557, 567, 570, 571, 573, 574, 575, 585, 588, 589, 590, 592, 594, 595, 597, 598, 600, 602, 607, 608, 618, 667, 675, 679, 680, 681, 689, 704, 713, 731, 732, 736, 739, 742, 743, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 759, 799, 811, 812, 885, 952, 953, 954, 955, 962, 968, 994, 1006, 1007, 1009], "contain": [10, 19, 24, 27, 33, 40, 49, 55, 57, 69, 70, 112, 114, 117, 155, 166, 169, 172, 187, 214, 225, 234, 235, 253, 255, 257, 261, 273, 281, 282, 284, 297, 308, 313, 316, 337, 338, 353, 358, 359, 360, 362, 365, 366, 368, 369, 370, 371, 372, 373, 376, 377, 383, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 401, 403, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 477, 478, 479, 483, 484, 485, 489, 490, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 661, 663, 664, 665, 666, 667, 671, 672, 673, 675, 676, 683, 686, 708, 709, 710, 741, 745, 752, 753, 761, 765, 768, 769, 770, 773, 774, 783, 787, 788, 794, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 884, 885, 886, 889, 890, 891, 910, 911, 913, 917, 921, 941, 942, 944, 950, 953, 956, 958, 962, 963, 965, 968, 978, 987, 994, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "generate_dataset": 10, "coef": [10, 54, 105, 166, 175, 180, 183, 187, 188, 190, 195, 199, 200, 201, 205, 212, 268, 293, 333, 499, 621, 622, 623, 624, 627, 628, 634, 635, 636, 637, 638, 644, 655, 656, 657, 658, 659, 660, 661, 662, 956], "random_se": [10, 91, 118], "x_scaler": 10, "y_scaler": 10, "ok": [10, 365, 958], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 264, 288, 316, 352, 681, 687, 702, 703, 711, 756, 757, 760, 761, 952, 994, 1002, 1003, 1009], "bp": [10, 123, 146, 184, 185, 362, 960], "cls_info": 10, "estimator_conf": 10, "box": [10, 30, 167, 168, 218, 297, 301, 371, 394, 396, 487, 530, 531, 847, 858, 882, 884, 952, 953, 959, 962, 968, 972, 978, 1002], "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 59, 79, 91, 95, 96, 97, 113, 125, 132, 158, 166, 172, 175, 176, 186, 194, 222, 235, 250, 261, 288, 292, 298, 302, 314, 324, 345, 363, 377, 389, 394, 953], "marker": [10, 11, 17, 30, 34, 37, 38, 42, 52, 57, 58, 59, 62, 63, 64, 84, 90, 91, 97, 101, 128, 156, 157, 172, 184, 189, 191, 193, 194, 196, 198, 199, 211, 213, 218, 240, 242, 243, 250, 255, 258, 259, 297, 302, 314, 342, 365, 368, 397, 1002, 1004, 1005], "linestyl": [10, 11, 16, 33, 53, 59, 72, 79, 103, 105, 110, 131, 135, 138, 149, 152, 154, 156, 158, 168, 181, 183, 184, 185, 196, 197, 198, 202, 206, 208, 209, 214, 232, 234, 252, 254, 258, 259, 264, 265, 280, 288, 292, 298, 322, 325, 326, 328, 329, 330, 983], "major": [10, 14, 262, 297, 301, 305, 306, 307, 308, 309, 339, 352, 360, 364, 365, 367, 370, 375, 378, 389, 393, 395, 397, 399, 526, 544, 545, 669, 702, 703, 711, 756, 757, 760, 882, 884, 952, 955, 966, 973, 976, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 204, 371, 414, 673, 675, 676, 889], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 639, 660, 661, 948, 952], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 204, 219, 222, 275], "1e2": [10, 149, 156, 231, 246, 324, 719], "randomforest": [10, 118, 352, 396, 878, 879, 999], "0001": [10, 135, 204, 253, 366, 401, 419, 422, 434, 446, 447, 453, 508, 513, 515, 522, 524, 525, 534, 535, 621, 622, 623, 624, 627, 628, 633, 634, 635, 636, 637, 638, 643, 644, 647, 649, 651, 653, 655, 662, 664, 668, 828, 829, 870, 871, 941], "250": [10, 64, 122, 172, 217, 467, 667, 941, 964, 1001], "467": [10, 15], "plot_prediction_lat": [10, 15], "conserv": [11, 557, 564, 862, 863, 951, 964], "biologi": 11, "south": [11, 166, 288, 395], "american": [11, 12, 69, 80, 360, 389, 391, 395, 396, 397, 444, 449, 704, 851], "mammal": 11, "past": [11, 369, 372, 375, 378, 393, 394, 396, 513, 530, 531, 653, 976, 979], "environment": [11, 214, 474], "unsuccess": 11, "cast": [11, 196, 218, 359, 377, 378, 397, 470, 619, 620, 621, 627, 631, 632, 635, 636, 637, 638, 639, 640, 648, 650, 919, 1001, 1002, 1003, 1004, 1007], "densiti": [11, 49, 59, 64, 74, 101, 105, 146, 164, 182, 196, 211, 214, 221, 225, 229, 239, 246, 247, 255, 261, 276, 281, 282, 289, 297, 324, 337, 362, 373, 377, 389, 396, 400, 407, 420, 423, 425, 427, 439, 442, 472, 477, 511, 516, 524, 525, 768, 769, 770, 811, 812, 816, 817, 863, 946, 948, 951, 955, 957, 958, 964, 972, 974, 978, 988, 989, 996, 998, 1002, 1003, 1009], "phillip": [11, 288, 472], "2006": [11, 288, 396, 399, 437, 472, 532, 533, 540, 541, 585, 586, 589, 594, 597, 624, 641, 642, 714, 761, 762, 768, 806, 863, 880, 881, 948, 952, 954, 957, 964, 965], "basemap": [11, 288], "coast": [11, 288], "line": [11, 17, 40, 59, 69, 95, 100, 121, 125, 148, 159, 161, 162, 164, 166, 167, 184, 185, 186, 188, 191, 192, 194, 197, 198, 199, 204, 205, 207, 208, 225, 229, 230, 232, 234, 252, 259, 261, 262, 285, 288, 298, 307, 323, 328, 329, 333, 334, 337, 359, 360, 363, 365, 366, 368, 369, 370, 371, 372, 375, 394, 395, 396, 414, 461, 462, 463, 483, 484, 517, 528, 529, 530, 531, 585, 588, 589, 607, 608, 645, 661, 920, 946, 956, 959, 966, 972, 975, 985, 987, 996, 1005, 1007], "nation": [11, 79, 288, 360, 818], "boundari": [11, 13, 25, 26, 27, 31, 34, 57, 59, 108, 112, 118, 127, 133, 150, 153, 164, 179, 197, 225, 230, 232, 258, 278, 283, 285, 286, 288, 291, 297, 299, 311, 318, 321, 322, 324, 326, 333, 334, 343, 361, 387, 396, 397, 399, 425, 431, 479, 511, 524, 525, 544, 563, 564, 566, 606, 800, 813, 819, 821, 822, 823, 850, 866, 867, 874, 875, 878, 894, 946, 955, 958, 962, 965, 966, 967, 994, 996, 998, 1007, 1008, 1009], "america": [11, 12, 79, 288, 818, 962], "bradypu": [11, 288, 472], "variegatu": [11, 288, 472], "brown": [11, 91, 288, 472, 603, 942, 999, 1001, 1002, 1003, 1006], "throat": [11, 288, 472], "sloth": [11, 288, 472], "microryzomi": [11, 288, 472], "minutu": [11, 288, 472], "known": [11, 17, 25, 27, 39, 57, 80, 104, 105, 129, 154, 156, 162, 196, 197, 214, 225, 255, 284, 288, 298, 308, 312, 321, 338, 354, 362, 363, 365, 372, 375, 377, 380, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 399, 414, 438, 456, 458, 472, 483, 484, 519, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 563, 564, 566, 569, 584, 597, 608, 633, 634, 647, 657, 658, 669, 678, 684, 687, 692, 702, 716, 728, 730, 766, 800, 806, 807, 808, 809, 810, 813, 818, 821, 827, 854, 878, 879, 880, 881, 942, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 962, 967, 968, 978, 983, 985, 986], "forest": [11, 27, 31, 108, 115, 118, 124, 125, 127, 129, 132, 133, 161, 164, 165, 170, 172, 225, 234, 252, 288, 307, 337, 348, 358, 376, 377, 387, 398, 438, 439, 465, 469, 470, 472, 490, 530, 531, 532, 533, 535, 538, 539, 540, 541, 605, 609, 797, 804, 831, 845, 874, 878, 879, 880, 941, 942, 953, 960, 972, 973, 974, 989, 991, 994, 995, 997, 998, 999, 1000, 1001, 1003], "rice": [11, 288, 472, 1007], "rat": [11, 288, 472], "rodent": [11, 288, 472], "live": [11, 69, 166, 288, 365, 389, 472, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "peru": [11, 288, 472], "colombia": [11, 288, 472], "ecuador": [11, 288, 472], "venezuela": [11, 288, 472], "entropi": [11, 236, 267, 288, 307, 312, 313, 348, 389, 396, 401, 472, 508, 532, 539, 582, 583, 633, 691, 709, 710, 714, 766, 878, 880, 948, 949, 952, 956, 968, 996, 998, 1002, 1003, 1008], "anderson": [11, 288, 472, 1000, 1006], "schapir": [11, 288, 396, 472, 528, 529], "ecolog": [11, 288, 472], "190": [11, 51, 67, 101, 107, 121, 214, 288, 370, 472], "231": [11, 288, 328, 333, 335, 389, 400, 420, 472, 559], "259": [11, 157, 159, 219, 288, 396, 472, 542, 543], "________________________________________________________________________________": [11, 54, 337], "coastlin": [11, 288, 362], "coverag": [11, 122, 196, 214, 288, 367, 385, 472, 602, 694], "area": [11, 34, 196, 214, 234, 252, 255, 262, 265, 324, 329, 333, 362, 365, 368, 375, 387, 389, 396, 397, 676, 680, 681, 682, 715, 761, 762, 949, 952, 955, 971, 996], "roc": [11, 25, 115, 164, 224, 226, 234, 235, 238, 248, 252, 271, 371, 387, 393, 479, 485, 539, 676, 680, 681, 682, 700, 715, 755, 761, 762, 788, 793, 797, 800, 854, 875, 958, 991, 996, 997, 999, 1000, 1004, 1006], "868443": 11, "993919": 11, "elaps": [11, 47, 66, 116, 117, 352, 439, 442, 544, 545, 830, 831, 832, 833], "61": [11, 80, 158, 214, 242, 329, 359, 362, 370, 390, 516, 535, 687], "astro": [11, 156, 217, 243], "washington": [11, 156, 217, 243, 280, 288], "bunch": [11, 358, 359, 360, 439, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 485, 542, 543, 544, 545, 607, 608, 609, 831, 878, 879, 880, 881, 976, 987, 999, 1001, 1004, 1006], "fetch_species_distribut": [11, 288, 1003], "ll": [11, 117, 250, 288, 365, 375, 507, 516, 955, 968, 978], "otherwis": [11, 55, 61, 112, 158, 162, 177, 198, 204, 257, 288, 348, 354, 362, 366, 368, 370, 377, 389, 391, 393, 397, 399, 410, 411, 412, 414, 416, 417, 418, 421, 426, 428, 429, 439, 442, 456, 457, 458, 459, 470, 501, 510, 511, 513, 515, 516, 522, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 565, 572, 577, 585, 586, 589, 606, 607, 608, 621, 627, 633, 634, 635, 637, 640, 641, 642, 643, 648, 650, 651, 652, 653, 660, 661, 665, 667, 671, 672, 673, 675, 676, 677, 681, 683, 687, 688, 697, 699, 700, 701, 702, 703, 711, 714, 725, 727, 728, 729, 747, 751, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 783, 787, 788, 795, 800, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 826, 828, 829, 835, 836, 838, 842, 851, 852, 855, 856, 857, 859, 860, 861, 870, 872, 873, 874, 875, 876, 885, 891, 893, 906, 907, 914, 936, 938, 947, 948, 949, 952, 955, 956, 958, 959, 962, 964, 966, 967, 972, 976, 978, 996, 1002, 1003, 1004, 1007], "improvis": [11, 288], "mpl_toolkit": [11, 45, 66, 89, 101, 167, 217, 219, 288], "except": [11, 16, 44, 53, 98, 167, 204, 211, 225, 263, 275, 288, 292, 293, 297, 299, 355, 358, 365, 366, 367, 368, 369, 375, 377, 383, 386, 390, 393, 394, 396, 397, 399, 408, 435, 440, 456, 457, 458, 484, 529, 531, 532, 533, 535, 537, 539, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 662, 685, 751, 776, 804, 805, 811, 812, 814, 817, 822, 828, 829, 835, 849, 851, 871, 873, 876, 879, 881, 911, 938, 948, 952, 959, 967, 978, 986, 987, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007], "importerror": [11, 16, 53, 98, 275, 288, 372, 470], "construct_grid": [11, 288], "object": [11, 13, 14, 19, 26, 44, 50, 61, 65, 69, 70, 98, 129, 135, 144, 145, 154, 164, 192, 196, 212, 214, 224, 235, 237, 238, 253, 257, 266, 267, 288, 308, 309, 312, 338, 339, 348, 358, 359, 360, 365, 367, 369, 370, 371, 373, 376, 377, 378, 383, 389, 390, 391, 394, 397, 398, 399, 403, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 685, 692, 705, 706, 715, 731, 732, 754, 755, 762, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 885, 890, 891, 892, 893, 894, 897, 901, 903, 913, 914, 915, 917, 919, 920, 937, 938, 940, 948, 949, 950, 951, 955, 958, 959, 962, 965, 966, 967, 972, 973, 978, 979, 981, 982, 985, 987, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "func": [11, 74, 115, 166, 176, 214, 288, 365, 390, 440, 674, 835, 962, 998, 1000, 1002, 1003], "xgrid": [11, 288], "ygrid": [11, 288], "correspond": [11, 13, 16, 26, 37, 41, 64, 77, 81, 97, 113, 116, 118, 142, 146, 150, 155, 158, 166, 185, 188, 196, 197, 205, 214, 226, 231, 245, 252, 254, 256, 258, 259, 288, 302, 307, 308, 309, 332, 338, 342, 343, 348, 353, 359, 360, 361, 364, 365, 366, 368, 371, 372, 376, 377, 386, 387, 389, 391, 392, 393, 394, 396, 397, 398, 399, 404, 413, 415, 417, 421, 423, 426, 428, 434, 436, 438, 439, 447, 450, 456, 457, 458, 464, 465, 466, 467, 468, 469, 470, 509, 516, 519, 520, 521, 524, 525, 527, 530, 532, 534, 535, 536, 539, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 592, 605, 607, 608, 610, 618, 621, 622, 623, 627, 633, 634, 635, 636, 637, 643, 644, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 662, 665, 666, 667, 669, 677, 684, 687, 697, 698, 707, 711, 725, 727, 747, 751, 755, 761, 762, 765, 767, 768, 769, 770, 773, 774, 783, 792, 800, 803, 806, 807, 808, 809, 810, 811, 812, 816, 817, 818, 820, 828, 829, 838, 842, 844, 845, 848, 859, 872, 875, 878, 879, 880, 881, 895, 901, 927, 941, 942, 944, 945, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 962, 963, 966, 967, 971, 978, 984, 987, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "coordin": [11, 12, 13, 54, 100, 128, 153, 181, 217, 256, 288, 352, 394, 399, 419, 422, 423, 424, 436, 446, 447, 453, 506, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 525, 589, 621, 622, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 656, 657, 658, 659, 663, 664, 665, 668, 669, 680, 737, 742, 870, 948, 949, 967, 985, 994, 997, 998, 999, 1003, 1005, 1007, 1008], "corner": [11, 13, 26, 252, 256, 264, 265, 288, 365, 472, 882, 884, 952, 1008], "cell": [11, 12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 288, 294, 306, 307, 309, 314, 346, 362, 369, 667, 952, 953, 1000, 1008], "xmin": [11, 77, 186, 188, 205, 206, 288], "x_left_lower_corn": [11, 288, 472], "grid_siz": [11, 60, 288, 472], "xmax": [11, 77, 186, 188, 205, 206, 288], "nx": [11, 34, 288, 472], "ymin": [11, 77, 183, 185, 188, 189, 197, 205, 255, 257, 288], "y_left_lower_corn": [11, 288, 472], "ny": [11, 34, 254, 288, 362, 472, 942, 964], "create_species_bunch": 11, "species_nam": [11, 288], "record": [11, 96, 114, 168, 339, 352, 365, 389, 391, 425, 432, 472, 595, 618, 667, 744, 747, 751, 752, 753, 754, 794, 817, 1007, 1008], "ascii": [11, 288, 397, 461, 563, 564, 566], "pt": [11, 360, 398, 847, 962], "desir": [11, 24, 112, 146, 162, 196, 198, 297, 301, 358, 365, 366, 368, 372, 383, 386, 389, 392, 393, 394, 398, 478, 513, 515, 519, 522, 568, 577, 578, 639, 645, 660, 661, 682, 709, 811, 812, 816, 836, 838, 841, 842, 844, 845, 847, 848, 854, 856, 858, 859, 894, 921, 944, 946, 949, 955, 962, 966, 967, 968, 978, 994, 1002, 1003, 1004, 1007], "pts_": 11, "ix": [11, 331], "searchsort": [11, 53], "dd": [11, 12, 127, 288, 472], "ii": [11, 96, 167, 203, 250, 362, 397, 641, 642, 948, 962, 971], "lat": [11, 288, 472], "cov_": [11, 81], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 80, 91, 121, 162, 168, 220, 228, 233, 267, 307, 366, 369, 376, 774, 790, 806, 807, 808, 810, 941, 942], "land": [11, 288, 362, 378], "water": 11, "land_refer": [11, 288], "standard": [11, 12, 26, 32, 34, 60, 69, 70, 72, 79, 80, 85, 96, 110, 113, 115, 116, 117, 118, 129, 146, 149, 154, 156, 158, 166, 175, 181, 185, 194, 196, 205, 217, 218, 219, 230, 250, 253, 254, 255, 256, 258, 297, 302, 322, 337, 352, 353, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 370, 373, 375, 377, 380, 383, 385, 389, 391, 392, 393, 397, 399, 443, 447, 462, 470, 476, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 499, 500, 505, 507, 510, 516, 527, 565, 569, 586, 609, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 651, 653, 662, 664, 668, 761, 790, 808, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 835, 840, 841, 844, 847, 848, 849, 851, 858, 859, 860, 861, 868, 870, 871, 890, 941, 944, 948, 949, 952, 954, 955, 956, 958, 966, 967, 973, 976, 978, 983, 985, 986, 987, 989, 1000, 1001, 1002, 1003, 1005, 1006, 1007], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 288], "llcrnrlat": [11, 288], "urcrnrlat": [11, 288], "llcrnrlon": [11, 288], "urcrnrlon": [11, 288], "drawcoastlin": [11, 288], "drawcountri": [11, 288], "els": [11, 12, 16, 19, 41, 44, 49, 55, 61, 81, 99, 113, 118, 122, 157, 166, 185, 198, 214, 218, 225, 229, 231, 232, 233, 255, 256, 259, 266, 275, 280, 288, 291, 292, 299, 337, 338, 346, 365, 368, 370, 396, 397, 399, 401, 413, 424, 483, 495, 508, 544, 600, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 647, 648, 649, 651, 654, 656, 657, 658, 659, 677, 683, 741, 761, 765, 767, 773, 774, 797, 844, 847, 857, 870, 871, 885, 916, 918, 939, 968], "9998": [11, 288], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 59, 62, 64, 67, 73, 74, 79, 89, 90, 91, 95, 102, 103, 109, 112, 118, 122, 125, 127, 128, 130, 131, 135, 138, 142, 143, 150, 152, 153, 157, 162, 164, 166, 167, 168, 178, 179, 181, 190, 193, 200, 208, 210, 229, 231, 232, 233, 240, 243, 251, 255, 258, 259, 264, 265, 268, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 298, 299, 300, 301, 302, 305, 309, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 336, 337, 339, 340, 348, 353, 359, 360, 362, 365, 372, 373, 377, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 416, 419, 422, 423, 424, 425, 426, 427, 428, 434, 435, 437, 444, 447, 462, 477, 479, 481, 487, 498, 506, 512, 516, 519, 520, 521, 524, 525, 528, 530, 532, 533, 534, 556, 564, 565, 566, 567, 569, 570, 571, 573, 574, 575, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 614, 615, 623, 625, 626, 628, 629, 630, 631, 633, 634, 638, 639, 640, 641, 642, 644, 654, 655, 657, 658, 659, 660, 661, 663, 666, 670, 671, 678, 679, 682, 691, 699, 710, 716, 729, 731, 732, 734, 739, 742, 747, 748, 749, 750, 752, 764, 765, 766, 768, 769, 771, 775, 776, 777, 778, 781, 784, 785, 787, 788, 790, 795, 806, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 832, 836, 837, 838, 842, 843, 844, 846, 847, 851, 858, 863, 877, 885, 893, 902, 907, 926, 941, 942, 944, 945, 946, 948, 949, 950, 951, 954, 956, 957, 958, 960, 965, 966, 967, 968, 972, 975, 982, 988, 989, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "solid": [11, 16, 31, 33, 152, 208, 209, 225, 288, 299, 976], "z": [11, 16, 34, 57, 101, 118, 125, 138, 151, 153, 167, 206, 208, 209, 210, 217, 219, 225, 230, 244, 281, 288, 291, 299, 302, 317, 323, 324, 328, 329, 330, 334, 362, 386, 394, 396, 528, 529, 560, 614, 639, 646, 660, 661, 664, 668, 674, 697, 758, 851, 948, 949, 956, 957], "float64": [11, 13, 48, 70, 121, 123, 124, 166, 309, 353, 359, 365, 366, 377, 397, 453, 470, 471, 483, 484, 517, 556, 557, 564, 566, 616, 633, 648, 650, 711, 836, 844, 845, 872, 873, 875, 876, 879, 881, 888, 890, 923, 926, 928, 929, 930, 967, 978, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "idx": [11, 16, 19, 30, 105, 112, 118, 130, 158, 169, 180, 188, 195, 196, 205, 218, 234, 343, 390, 393], "9999": [11, 214, 288, 315, 472, 602, 1002], "coverages_land": 11, "contourf": [11, 16, 118, 125, 210, 230, 281, 288, 291, 299, 300, 317, 323, 329, 334, 606, 607], "pts_train": 11, "pts_test": 11, "equal": [11, 12, 26, 37, 39, 53, 59, 79, 85, 110, 122, 152, 166, 197, 198, 200, 207, 213, 235, 242, 249, 253, 255, 264, 285, 299, 324, 326, 333, 338, 360, 361, 365, 366, 377, 386, 387, 389, 393, 394, 396, 397, 402, 413, 416, 417, 418, 419, 421, 422, 424, 429, 434, 438, 444, 449, 454, 478, 487, 490, 494, 507, 508, 509, 514, 516, 518, 519, 524, 525, 526, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 563, 568, 569, 572, 574, 575, 582, 583, 600, 603, 604, 607, 608, 609, 610, 612, 616, 617, 620, 624, 633, 634, 646, 674, 677, 692, 694, 702, 741, 756, 760, 761, 765, 767, 770, 771, 773, 774, 782, 783, 787, 792, 799, 803, 804, 811, 812, 813, 814, 819, 820, 821, 822, 823, 828, 829, 834, 835, 836, 843, 846, 849, 850, 851, 853, 860, 867, 870, 871, 877, 878, 879, 880, 881, 896, 907, 927, 933, 946, 948, 952, 953, 955, 956, 958, 962, 966, 967, 968, 986, 987, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "auc": [11, 25, 196, 214, 234, 255, 259, 262, 264, 265, 676, 682, 761, 952, 999, 1002, 1006], "pred_background": 11, "pred_test": [11, 302], "cov_test": 11, "r_": [11, 34, 101, 105, 125, 209, 210, 241, 245, 262, 281, 282, 323, 329, 334, 389, 681, 952, 968], "fpr": [11, 226, 234, 264, 265, 371, 567, 571, 673, 676, 680, 700, 762, 952, 991, 994], "tpr": [11, 226, 234, 264, 265, 371, 676, 680, 762, 952, 991, 994], "threshold": [11, 25, 42, 64, 98, 105, 146, 164, 169, 191, 226, 228, 253, 254, 262, 273, 311, 318, 343, 346, 377, 389, 394, 396, 398, 417, 418, 421, 444, 475, 483, 484, 506, 512, 517, 523, 524, 525, 538, 563, 566, 568, 572, 577, 578, 619, 642, 646, 651, 653, 667, 673, 675, 676, 677, 680, 681, 694, 699, 700, 712, 713, 729, 755, 761, 762, 765, 768, 769, 788, 806, 817, 818, 834, 836, 838, 853, 865, 866, 867, 875, 882, 884, 926, 948, 952, 955, 956, 958, 962, 965, 967, 968, 973, 994, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "roc_curv": [11, 226, 252, 264, 676, 680, 700, 755, 761, 952, 994, 995, 996, 999, 1000, 1002, 1007], "roc_auc": [11, 255, 259, 264, 265, 371, 609, 676, 952, 991], "ntime": [11, 266], "832": [11, 15, 168, 300, 303, 396, 530, 531], "plot_species_distribution_model": [11, 15, 472], "emploi": [12, 149, 231, 391, 397, 399, 425, 453, 557, 564, 960, 976, 986, 1000], "techniqu": [12, 69, 71, 97, 106, 111, 120, 137, 162, 204, 219, 221, 260, 279, 308, 313, 342, 354, 362, 375, 377, 388, 389, 393, 394, 395, 396, 397, 398, 422, 423, 424, 425, 509, 529, 652, 664, 668, 669, 699, 729, 944, 948, 949, 951, 952, 955, 958, 960, 964, 966, 968, 973, 976, 981, 986, 987, 1007], "histor": [12, 196, 973], "quot": [12, 14, 69, 256, 337, 338, 353, 359, 360, 363, 368, 388, 462, 463, 470, 952, 964, 967, 987], "quantiti": [12, 119, 255, 262, 307, 352, 377, 389, 396, 695, 696, 697, 758, 827, 941, 943, 946, 948, 999], "daili": [12, 368, 976], "price": [12, 74, 119, 129, 167, 358, 474, 942, 948, 959, 976, 983, 989], "link": [12, 17, 167, 175, 196, 214, 240, 258, 285, 342, 353, 363, 364, 365, 368, 372, 377, 389, 391, 394, 399, 536, 537, 585, 623, 644, 655, 663, 679, 889, 891, 948, 955, 968, 969, 972, 975, 981, 985, 987, 992, 994, 997, 998, 1001, 1002, 1005], "fluctuat": [12, 59, 196, 262, 1002], "normalesup": [12, 32, 46, 65, 230], "2003": [12, 386, 389, 394, 397, 426, 427, 437, 488, 490, 664, 668, 806, 808, 948, 949, 954, 964, 1002], "2008": [12, 391, 393, 394, 453, 509, 538, 565, 620, 639, 660, 661, 667, 690, 699, 729, 801, 806, 810, 827, 946, 949, 950, 952, 953, 954, 957, 958, 967], "calm": 12, "ago": [12, 973], "tech": [12, 362, 809], "firm": [12, 389], "crash": [12, 365, 443, 860, 861, 868, 962, 998, 1002], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 372, 827, 957, 985], "msft": 12, "ibm": [12, 19, 316, 339, 360], "twx": 12, "warner": 12, "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 987], "amzn": 12, "amazon": 12, "tm": [12, 955], "toyota": 12, "caj": 12, "canon": [12, 377, 396, 456, 457, 459, 741, 973, 974, 989], "sne": [12, 164, 216, 217, 218, 219, 221, 223, 489, 500, 667, 988, 989], "soni": [12, 1004, 1006], "ford": 12, "hmc": 12, "honda": [12, 19], "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 828, 829, 956], "boe": 12, "ko": [12, 26, 150], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 79, 80, 391, 444, 449], "mcdonald": 12, "pep": [12, 372, 994], "pepsi": 12, "kellogg": 12, "un": [12, 365, 387, 397, 401, 508, 564, 766, 834, 843, 853, 857, 1003], "unilev": 12, "mar": [12, 970], "marriott": 12, "pg": [12, 370, 624, 948, 999], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 943, 954, 1006], "electr": [12, 362, 389], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 976], "chase": [12, 994], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 976], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 352, 363, 375, 953, 970], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 69], "instrument": [12, 69, 96], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1004], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 132], "dynam": [12, 167, 530, 531, 538, 553, 555, 651, 652, 653, 968, 972, 976, 1000, 1006], "rtn": 12, "raytheon": 12, "cat": [12, 70, 168, 308, 309, 360, 397, 557, 686, 692, 727, 756, 952, 962, 1003, 1004, 1006], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 339, 366, 391, 397, 473, 557, 563, 564, 566, 882, 884, 972], "fetch": [12, 17, 129, 166, 214, 358, 359, 360, 365, 368, 369, 372, 388, 394, 470, 474, 530, 531, 538, 563, 564, 566, 1002], "histori": [12, 355, 521, 970, 994], "stderr": [12, 800], "url": [12, 17, 146, 359, 362, 368], "githubusercont": 12, "master": [12, 16, 275, 365, 368, 976, 999], "financi": [12, 389], "csv": [12, 359, 362, 369, 474, 975, 1002, 1007], "read_csv": [12, 369, 474, 1009], "close_pric": 12, "vstack": [12, 26, 56, 64, 145, 152, 153, 178, 240, 244, 275, 288, 329, 606, 953, 1002], "q": [12, 70, 84, 122, 196, 308, 386, 389, 394, 906, 948, 967], "open_pric": 12, "carri": [12, 31, 162, 255, 258, 263, 292, 299, 339, 378, 383, 397, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 976, 986], "invers": [12, 54, 76, 82, 164, 324, 338, 339, 357, 377, 388, 390, 392, 393, 394, 397, 401, 421, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 502, 508, 509, 510, 514, 516, 518, 532, 536, 539, 564, 565, 566, 603, 619, 620, 633, 634, 641, 643, 649, 650, 651, 652, 653, 655, 697, 716, 725, 768, 769, 813, 814, 821, 822, 828, 829, 831, 835, 838, 844, 845, 847, 862, 863, 870, 871, 872, 875, 876, 878, 880, 896, 946, 948, 952, 955, 956, 962, 966, 967, 985, 987, 988, 989, 994, 997, 1002, 1005, 1006, 1008], "correl": [12, 27, 81, 84, 85, 106, 126, 142, 154, 164, 165, 167, 168, 170, 185, 191, 214, 255, 273, 306, 307, 332, 358, 361, 362, 369, 377, 379, 386, 391, 393, 398, 399, 425, 432, 456, 457, 459, 467, 468, 475, 499, 539, 581, 584, 602, 609, 610, 611, 657, 658, 716, 730, 751, 752, 753, 797, 811, 812, 848, 849, 851, 859, 943, 948, 953, 959, 962, 966, 968, 973, 974, 989, 994, 995, 996, 1007, 1008], "condition": [12, 27, 196, 387, 391, 731, 946], "connect": [12, 39, 44, 47, 51, 54, 61, 65, 66, 363, 365, 373, 377, 391, 417, 421, 427, 437, 438, 560, 561, 670, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 950, 955, 957, 965, 998, 1007], "num": [12, 70, 146, 149, 154, 155, 156, 168, 198, 262, 263, 309, 607, 941], "edge_model": 12, "graphicallassocv": [12, 81, 391, 446, 448, 449, 450, 451, 453, 1002, 1006, 1008], "seri": [12, 81, 116, 129, 168, 178, 196, 217, 234, 260, 266, 309, 312, 357, 360, 369, 377, 389, 463, 464, 465, 466, 470, 475, 476, 477, 479, 480, 485, 516, 665, 669, 790, 886, 943, 948, 949, 953, 955, 966, 972, 997, 1000, 1001, 1002, 1006], "rather": [12, 81, 113, 161, 166, 196, 197, 210, 301, 337, 338, 348, 353, 361, 365, 366, 369, 370, 372, 375, 376, 377, 378, 389, 393, 394, 396, 397, 399, 423, 436, 438, 540, 556, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 604, 621, 622, 627, 628, 635, 636, 637, 638, 754, 783, 802, 804, 805, 834, 870, 871, 882, 907, 946, 948, 949, 952, 954, 955, 959, 973, 982, 985, 994, 995, 996, 997, 1001, 1002, 1003, 1004, 1009], "former": [12, 339, 396, 397, 540, 772, 778, 787, 954, 994, 1000, 1003], "recoveri": [12, 81, 195, 391], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 372], "trust": [12, 26, 70, 80, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 378, 387, 982, 1008], "unabl": [12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 196, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 353, 354, 851, 962, 1003], "render": [12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 191, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346, 365, 368, 369, 370, 377, 526, 564, 606, 848, 859, 882, 884, 951, 968, 1007], "nbviewer": [12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314, 346], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 57, 59, 131, 169, 196, 218, 246, 250, 314, 338, 346, 360, 369, 377, 378, 389, 395, 396, 397, 410, 469, 563, 564, 566, 569, 692, 761, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 844, 880, 881, 948, 949, 951, 952, 953, 968, 969, 970, 972, 978, 981, 982, 1000, 1001, 1002, 1003, 1006, 1007, 1008], "amongst": [12, 968], "indic": [12, 19, 25, 26, 27, 48, 58, 59, 65, 74, 85, 95, 115, 154, 157, 162, 193, 214, 219, 229, 249, 257, 258, 261, 262, 264, 275, 288, 312, 313, 316, 337, 338, 339, 346, 353, 360, 365, 366, 368, 372, 373, 375, 377, 386, 387, 389, 391, 393, 394, 396, 397, 399, 400, 404, 413, 416, 420, 425, 426, 427, 428, 430, 431, 432, 435, 439, 442, 447, 461, 483, 484, 486, 487, 488, 498, 507, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 556, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 595, 602, 603, 604, 605, 607, 614, 622, 625, 626, 628, 629, 630, 636, 638, 640, 648, 650, 657, 658, 665, 667, 669, 671, 677, 681, 686, 687, 692, 693, 694, 698, 701, 702, 703, 704, 707, 711, 712, 713, 714, 727, 744, 751, 752, 753, 754, 756, 757, 758, 760, 761, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 804, 805, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 835, 838, 842, 844, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 886, 890, 891, 896, 917, 918, 942, 947, 948, 949, 952, 953, 954, 955, 956, 960, 962, 963, 966, 967, 973, 978, 982, 985, 987, 994, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1007, 1009], "reflect": [12, 40, 46, 47, 79, 91, 96, 119, 168, 196, 214, 279, 338, 361, 364, 368, 377, 379, 386, 425, 431, 949, 952, 958, 960, 986, 995, 1003], "properti": [12, 25, 156, 157, 198, 213, 241, 252, 277, 302, 346, 352, 355, 358, 362, 365, 366, 380, 386, 389, 391, 394, 396, 398, 399, 404, 418, 421, 426, 427, 428, 439, 440, 456, 457, 458, 512, 516, 517, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 565, 566, 568, 569, 572, 585, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 607, 621, 623, 627, 630, 635, 637, 644, 649, 650, 655, 674, 678, 679, 682, 770, 773, 774, 783, 799, 800, 830, 831, 844, 846, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 944, 947, 948, 949, 952, 953, 955, 958, 962, 965, 967, 968, 969, 973, 978, 999, 1003, 1004, 1008], "impact": [12, 25, 36, 37, 67, 74, 142, 164, 166, 167, 198, 214, 249, 338, 348, 352, 353, 358, 375, 378, 389, 394, 422, 424, 474, 511, 515, 522, 565, 641, 642, 643, 651, 652, 653, 667, 765, 770, 773, 774, 783, 794, 811, 812, 848, 859, 893, 907, 923, 926, 941, 951, 967, 1001, 1004, 1007], "affinity_propag": [12, 44], "covariance_": [12, 34, 79, 81, 444, 445, 446, 447, 448, 449, 450, 451, 524, 525, 946, 1001], "n_label": [12, 91, 232, 377, 461, 498, 687, 694, 699, 712, 713, 727, 729, 763, 764, 789, 1000, 1002], "lai": [12, 958], "canva": [12, 16], "manifold": [12, 39, 52, 66, 220, 221, 222, 223, 275, 305, 309, 314, 355, 358, 377, 389, 394, 396, 477, 500, 505, 519, 524, 541, 820, 832, 841, 863, 893, 955, 988, 989, 994, 995, 997, 998, 999, 1000, 1001], "dens": [12, 164, 174, 215, 309, 316, 352, 373, 377, 389, 394, 396, 398, 419, 422, 424, 439, 442, 470, 498, 499, 509, 510, 519, 541, 560, 561, 582, 583, 604, 627, 632, 633, 634, 641, 643, 647, 648, 651, 652, 653, 662, 663, 664, 667, 668, 733, 734, 740, 752, 763, 828, 829, 836, 843, 844, 846, 848, 849, 851, 859, 860, 861, 862, 863, 870, 871, 872, 873, 875, 876, 908, 923, 926, 942, 945, 948, 949, 953, 955, 958, 962, 964, 965, 966, 967, 968, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "eigen_solv": [12, 44, 46, 65, 217, 218, 394, 427, 437, 510, 663, 664, 666, 668, 670, 949, 995, 1004, 1007, 1008, 1009], "arpack": [12, 19, 44, 46, 65, 218, 394, 426, 427, 428, 437, 510, 516, 519, 663, 664, 666, 668, 670, 949, 1000, 1001, 1006], "don": [12, 54, 69, 120, 166, 218, 232, 255, 315, 321, 325, 337, 338, 352, 359, 365, 366, 368, 370, 372, 375, 376, 390, 397, 621, 627, 799, 878, 879, 880, 881, 918, 941, 948, 951, 953, 956, 958, 966, 975, 986, 987, 998, 1003], "control": [12, 16, 60, 99, 100, 135, 154, 156, 197, 204, 228, 229, 256, 258, 277, 306, 308, 342, 344, 345, 352, 353, 358, 361, 365, 366, 369, 372, 375, 377, 380, 383, 388, 389, 392, 393, 394, 395, 398, 399, 410, 416, 424, 429, 446, 447, 453, 506, 511, 512, 513, 514, 515, 518, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 568, 569, 571, 589, 594, 600, 602, 605, 607, 609, 614, 616, 617, 621, 622, 624, 625, 626, 627, 629, 630, 631, 647, 651, 652, 657, 658, 662, 667, 683, 768, 769, 770, 772, 773, 774, 775, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 797, 798, 801, 802, 805, 828, 829, 850, 862, 863, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 884, 939, 941, 948, 949, 951, 952, 953, 955, 958, 959, 964, 966, 967, 968, 972, 973, 974, 985, 989, 994, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "neighbor": [12, 31, 39, 44, 47, 59, 127, 130, 137, 161, 162, 218, 219, 221, 225, 233, 234, 279, 280, 281, 282, 284, 285, 286, 288, 289, 302, 307, 309, 337, 355, 357, 362, 373, 377, 389, 395, 396, 397, 400, 403, 409, 417, 420, 421, 425, 427, 432, 433, 438, 470, 477, 479, 538, 545, 577, 582, 583, 602, 603, 663, 664, 665, 666, 667, 668, 671, 754, 770, 797, 831, 832, 851, 866, 874, 926, 953, 958, 973, 974, 981, 986, 988, 989, 994, 996, 997, 998, 999, 1000, 1001], "node": [12, 41, 119, 123, 125, 305, 342, 346, 372, 373, 389, 391, 394, 396, 417, 418, 421, 438, 532, 533, 534, 535, 538, 539, 540, 541, 625, 629, 631, 657, 658, 667, 811, 812, 878, 879, 880, 881, 882, 884, 912, 920, 955, 957, 958, 959, 968, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008], "plane": [12, 125, 208, 230, 281, 323, 326, 328, 329, 334, 362, 427, 437, 946, 948, 967, 985], "node_position_model": 12, "locallylinearembed": [12, 217, 218, 219, 309, 663, 665, 667, 949, 955, 999, 1000, 1008, 1009], "n_neighbor": [12, 44, 61, 66, 130, 161, 217, 218, 219, 221, 225, 234, 275, 277, 278, 281, 282, 283, 284, 286, 287, 305, 307, 337, 396, 427, 577, 582, 583, 603, 663, 664, 666, 668, 671, 813, 814, 815, 817, 819, 820, 824, 865, 866, 942, 949, 955, 958, 965, 1001, 1008], "output": [12, 14, 16, 25, 27, 37, 58, 98, 108, 113, 118, 119, 129, 133, 137, 138, 149, 157, 161, 162, 164, 166, 192, 224, 238, 243, 249, 253, 255, 258, 262, 264, 265, 275, 298, 301, 305, 308, 309, 338, 339, 341, 346, 347, 358, 359, 360, 362, 365, 366, 370, 372, 375, 376, 377, 387, 388, 389, 390, 392, 393, 396, 397, 398, 413, 417, 418, 419, 421, 422, 424, 425, 427, 434, 435, 437, 438, 439, 440, 441, 442, 456, 457, 458, 459, 462, 465, 466, 467, 468, 469, 470, 471, 478, 480, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 621, 622, 625, 627, 628, 629, 632, 633, 635, 636, 637, 638, 641, 642, 643, 646, 648, 649, 651, 653, 654, 656, 657, 658, 659, 663, 664, 665, 667, 669, 671, 674, 675, 687, 688, 695, 696, 697, 699, 701, 708, 715, 718, 719, 721, 723, 724, 725, 726, 727, 729, 734, 740, 745, 758, 761, 768, 769, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 792, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 814, 815, 816, 820, 821, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 858, 859, 862, 863, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 891, 893, 896, 907, 908, 939, 941, 942, 944, 946, 948, 949, 952, 953, 954, 955, 956, 959, 962, 967, 974, 978, 979, 981, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "edg": [12, 26, 46, 65, 98, 119, 220, 262, 372, 377, 386, 389, 391, 428, 536, 537, 560, 561, 563, 564, 566, 768, 808, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 836, 883, 962, 965, 976, 1000, 1002, 1005, 1008], "displai": [12, 25, 27, 34, 37, 45, 46, 48, 59, 70, 80, 81, 84, 85, 88, 95, 120, 164, 167, 181, 183, 200, 214, 224, 225, 234, 238, 244, 252, 256, 262, 269, 285, 306, 307, 328, 343, 352, 365, 367, 371, 373, 380, 390, 394, 397, 398, 414, 439, 442, 443, 470, 516, 539, 605, 606, 607, 633, 662, 672, 673, 675, 676, 687, 692, 755, 762, 770, 783, 797, 831, 832, 844, 846, 851, 868, 875, 882, 883, 884, 898, 939, 956, 972, 989, 1003, 1005, 1006, 1008, 1009], "strength": [12, 129, 156, 196, 200, 256, 305, 352, 392, 396, 542, 543, 618, 623, 624, 627, 633, 634, 644, 647, 648, 649, 650, 651, 653, 655, 662, 756, 828, 829, 870, 871, 875, 876, 941, 948, 955, 958, 966, 967], "plan": [12, 359, 363, 365, 378, 962, 997], "fair": [12, 396, 665, 669, 800, 953, 976], "crucial": [12, 250, 352, 364, 365, 378, 389, 399, 967], "challeng": [12, 129, 149, 175, 225, 354, 360, 361, 389, 391, 437, 447, 952, 958, 976, 978], "overlap": [12, 37, 110, 123, 220, 242, 338, 363, 386, 389, 393, 397, 562, 763, 764, 771, 775, 776, 777, 778, 779, 787, 949, 962, 1000], "heurist": [12, 14, 121, 337, 353, 389, 398, 424, 427, 436, 437, 483, 484, 512, 514, 521, 651, 652, 653, 666, 670, 773, 774, 872, 873, 874, 875, 876, 895, 949, 950, 955, 966, 968, 976, 985, 994, 995, 999, 1003, 1006, 1007], "direct": [12, 84, 85, 89, 95, 97, 101, 104, 146, 202, 240, 246, 252, 284, 294, 302, 324, 329, 353, 363, 365, 368, 370, 372, 378, 389, 392, 394, 397, 398, 427, 437, 446, 447, 453, 509, 516, 524, 563, 564, 566, 577, 616, 663, 820, 946, 948, 953, 955, 957, 973, 986, 994, 997], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 57, 60, 81, 88, 95, 98, 125, 153, 162, 187, 208, 212, 233, 279, 281, 284, 285, 289, 294, 302, 323, 324, 328, 329, 330, 334, 355, 357, 362, 373, 377, 389, 395, 396, 400, 403, 409, 420, 423, 425, 427, 432, 436, 437, 470, 477, 479, 582, 583, 602, 603, 605, 610, 663, 664, 666, 667, 671, 763, 764, 770, 797, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 831, 832, 836, 851, 926, 949, 958, 967, 973, 974, 981, 989, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1006], "along": [12, 13, 55, 58, 65, 85, 116, 122, 183, 196, 230, 259, 305, 338, 339, 348, 368, 370, 372, 373, 377, 380, 383, 386, 394, 396, 397, 398, 399, 401, 508, 525, 562, 586, 587, 605, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 651, 653, 656, 657, 658, 659, 660, 661, 752, 753, 763, 770, 783, 840, 841, 844, 848, 849, 850, 851, 855, 856, 857, 859, 860, 861, 886, 909, 927, 933, 941, 948, 955, 962, 965, 976, 994, 999, 1000, 1002, 1006, 1007], "linecollect": [12, 220, 228, 607], "facecolor": [12, 16, 26, 34, 45, 59, 95, 102, 112, 138, 157, 217, 232, 255, 282, 299, 322, 325, 328, 329, 331], "partial_correl": 12, "precision_": [12, 81, 444, 445, 446, 447, 448, 449, 450, 451], "sqrt": [12, 79, 80, 81, 98, 101, 105, 114, 135, 175, 177, 220, 222, 236, 240, 241, 242, 245, 246, 255, 329, 389, 396, 397, 399, 438, 444, 445, 446, 447, 448, 449, 450, 451, 513, 515, 522, 532, 533, 534, 535, 539, 540, 594, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 674, 704, 736, 737, 742, 851, 863, 878, 879, 880, 881, 944, 948, 949, 952, 954, 964, 1008], "diag": [12, 81, 157, 242, 245, 394, 399, 507, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 768, 769, 948, 1009], "newaxi": [12, 13, 19, 24, 42, 81, 105, 111, 150, 177, 186, 192, 197, 198, 199, 201, 202, 213, 228, 230, 269, 280, 287, 332, 344, 345, 386, 511, 948], "ab": [12, 17, 40, 74, 99, 106, 112, 119, 142, 146, 169, 183, 187, 207, 209, 212, 214, 220, 255, 297, 322, 334, 389, 513, 515, 522, 602, 719, 811, 812, 846, 952], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 59, 60, 102], "start_idx": [12, 220], "end_idx": [12, 220], "sequenc": [12, 118, 157, 184, 220, 266, 366, 377, 390, 393, 394, 396, 397, 478, 487, 544, 545, 556, 557, 563, 564, 566, 621, 770, 773, 780, 797, 854, 917, 923, 926, 972, 994, 997, 999, 1000], "line0": [12, 220], "linen": [12, 220], "x0": [12, 34, 188, 205, 220, 297, 321, 377, 439, 542, 543, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 834, 835, 836, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851], "y0": [12, 220], "y1": [12, 90, 112, 220, 484, 690, 737, 953, 954], "xm": [12, 220], "ym": [12, 220], "segment": [12, 36, 47, 67, 164, 220, 228, 353, 360, 372, 387, 389, 397, 427, 437, 483, 484, 666, 827, 952, 972, 976, 1002, 1004, 1006], "stop": [12, 17, 44, 61, 108, 133, 154, 156, 164, 174, 198, 215, 306, 365, 366, 372, 373, 377, 389, 394, 396, 398, 416, 417, 419, 421, 422, 424, 427, 429, 437, 438, 446, 447, 453, 456, 457, 458, 470, 479, 483, 484, 490, 495, 507, 511, 512, 513, 514, 515, 518, 520, 521, 522, 528, 529, 532, 533, 534, 535, 536, 537, 539, 540, 546, 563, 564, 566, 577, 592, 602, 619, 620, 621, 623, 624, 627, 631, 633, 634, 641, 642, 643, 644, 646, 651, 652, 653, 655, 666, 667, 670, 688, 768, 769, 797, 828, 829, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 912, 926, 941, 948, 956, 957, 967, 968, 973, 974, 976, 989, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009], "lc": [12, 220, 228], "zorder": [12, 34, 57, 97, 126, 138, 150, 158, 186, 194, 218, 220, 228, 231, 240, 306, 328, 329], "hot_r": [12, 297], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 152, 155, 175, 182, 187, 220, 240, 241, 242, 244, 246, 252, 256, 280, 297, 324, 338, 370, 373, 377, 389, 397, 398, 418, 419, 422, 434, 435, 439, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 463, 506, 509, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 564, 565, 566, 572, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 651, 653, 656, 659, 660, 661, 665, 667, 668, 669, 743, 808, 843, 857, 870, 872, 875, 934, 935, 945, 948, 950, 952, 962, 966, 997, 999, 1001, 1005], "set_arrai": [12, 220, 228], "set_linewidth": [12, 220, 228], "add_collect": [12, 220, 228], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 57, 115, 116, 120, 129, 143, 146, 154, 161, 166, 168, 196, 214, 235, 241, 242, 246, 250, 253, 254, 255, 256, 258, 266, 267, 275, 297, 309, 312, 313, 338, 339, 360, 362, 363, 365, 366, 368, 373, 375, 377, 386, 390, 393, 394, 396, 397, 404, 419, 422, 423, 424, 425, 426, 428, 429, 432, 434, 435, 439, 442, 478, 484, 532, 533, 534, 535, 539, 540, 541, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 592, 607, 615, 672, 678, 679, 686, 690, 692, 704, 711, 730, 752, 753, 759, 761, 765, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 797, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 844, 878, 879, 880, 881, 911, 923, 926, 931, 932, 952, 954, 955, 956, 966, 968, 972, 985, 987, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "dx": [12, 13, 501, 674], "dy": [12, 674], "this_dx": 12, "argmin": [12, 121, 245, 254, 366, 391, 506, 512, 520, 521, 660, 752, 753, 968], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 61, 102, 225, 240, 291, 299], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 53, 55, 59, 66, 89, 90, 91, 102, 112, 118, 125, 127, 128, 129, 130, 131, 138, 141, 150, 151, 153, 157, 167, 179, 188, 198, 205, 208, 209, 210, 229, 230, 231, 232, 240, 243, 251, 255, 258, 269, 278, 281, 282, 283, 286, 291, 299, 300, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 334, 343, 344, 345, 606], "ptp": 12, "03": [12, 28, 46, 52, 75, 79, 84, 95, 133, 154, 163, 166, 177, 214, 229, 240, 245, 246, 256, 271, 295, 302, 313, 335, 338, 362, 397, 721, 770, 948, 952], "330": [12, 15, 313], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 118, 133, 164, 198, 256, 257, 306, 307, 309, 329, 346, 351, 357, 365, 367, 368, 375, 377, 390, 398, 400, 401, 413, 420, 423, 424, 425, 427, 432, 433, 436, 439, 442, 447, 469, 506, 508, 509, 510, 512, 514, 516, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 564, 569, 577, 585, 607, 609, 614, 633, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 780, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 830, 833, 865, 866, 920, 922, 973, 982, 987, 989, 994, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006], "acquir": [13, 117, 1006], "angl": [13, 34, 98, 146, 240, 241, 242, 245, 246, 362, 394, 506, 512, 514, 517, 518, 520, 521, 523, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 653, 657, 658, 659, 660, 661, 667, 949, 950, 974, 989, 994], "Such": [13, 149, 154, 175, 185, 197, 258, 337, 377, 378, 393, 394, 396, 530, 531, 631, 942, 952, 955, 962, 968, 985, 1004], "ct": [13, 157, 390, 439, 441, 442], "cellular": 13, "materi": [13, 378, 556, 860, 861, 971], "haar": 13, "wavelet": [13, 105, 394], "sparsiti": [13, 81, 164, 174, 189, 211, 212, 215, 231, 338, 352, 377, 391, 394, 396, 398, 476, 477, 502, 506, 512, 513, 514, 515, 518, 520, 521, 522, 621, 627, 632, 633, 651, 653, 695, 696, 697, 840, 846, 851, 855, 945, 948, 955, 962, 981, 986, 996], "oper": [13, 19, 157, 164, 231, 248, 252, 262, 271, 339, 352, 353, 362, 363, 365, 367, 370, 375, 377, 378, 380, 383, 385, 393, 394, 396, 397, 398, 423, 436, 443, 450, 456, 457, 458, 459, 479, 508, 509, 516, 526, 527, 541, 547, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 596, 599, 605, 610, 618, 664, 668, 676, 680, 681, 682, 700, 747, 754, 755, 761, 762, 788, 793, 797, 800, 811, 812, 834, 838, 843, 853, 854, 868, 875, 878, 909, 920, 925, 948, 955, 962, 967, 972, 976, 985, 998, 1000, 1001, 1002, 1004, 1005], "fidel": 13, "penal": [13, 30, 81, 129, 185, 189, 196, 212, 214, 332, 389, 391, 394, 398, 444, 445, 446, 447, 448, 449, 450, 451, 453, 622, 628, 636, 638, 651, 679, 689, 707, 759, 766, 844, 870, 877, 948, 952, 954, 956, 966, 967, 985], "account": [13, 97, 104, 154, 161, 166, 167, 214, 255, 284, 332, 334, 338, 352, 361, 365, 377, 378, 383, 389, 392, 393, 394, 396, 397, 438, 542, 543, 602, 603, 605, 607, 608, 624, 648, 654, 678, 681, 701, 702, 703, 711, 716, 729, 756, 757, 760, 761, 771, 775, 787, 944, 946, 950, 952, 953, 954, 955, 966, 968, 999, 1001, 1002, 1003, 1006, 1007], "call": [13, 17, 46, 48, 50, 54, 70, 91, 115, 121, 143, 149, 153, 155, 157, 158, 167, 184, 196, 197, 214, 235, 237, 255, 256, 269, 270, 277, 307, 308, 337, 338, 339, 346, 352, 353, 354, 360, 363, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 387, 389, 390, 391, 392, 393, 394, 396, 397, 399, 401, 408, 416, 419, 422, 424, 425, 426, 427, 428, 429, 432, 435, 437, 440, 443, 444, 449, 456, 457, 458, 462, 465, 466, 469, 471, 478, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 551, 560, 561, 563, 564, 566, 572, 577, 582, 583, 585, 586, 589, 592, 595, 602, 604, 606, 607, 609, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 664, 665, 666, 667, 668, 669, 670, 672, 674, 678, 705, 715, 728, 744, 747, 751, 752, 753, 754, 764, 768, 769, 770, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 820, 822, 827, 828, 829, 831, 835, 836, 838, 840, 841, 848, 851, 854, 859, 860, 861, 862, 863, 867, 870, 871, 872, 873, 875, 876, 879, 881, 897, 901, 906, 907, 920, 923, 926, 936, 941, 942, 944, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 962, 964, 965, 967, 968, 972, 976, 978, 982, 985, 986, 987, 989, 991, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 55, 60, 61, 65, 67, 78, 84, 95, 97, 109, 110, 111, 112, 164, 167, 172, 183, 185, 199, 212, 219, 221, 224, 228, 234, 238, 241, 242, 243, 246, 252, 255, 281, 282, 284, 288, 297, 299, 302, 305, 306, 307, 323, 337, 338, 348, 352, 353, 354, 358, 359, 360, 361, 362, 365, 366, 367, 372, 373, 376, 377, 379, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 444, 449, 450, 453, 456, 457, 458, 462, 478, 486, 487, 488, 489, 490, 497, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 520, 521, 522, 523, 528, 529, 530, 531, 534, 535, 538, 566, 578, 579, 585, 586, 610, 612, 614, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 678, 679, 682, 691, 693, 708, 710, 716, 747, 751, 752, 764, 766, 768, 769, 799, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 827, 832, 836, 838, 851, 854, 866, 870, 871, 872, 873, 874, 875, 876, 878, 879, 890, 906, 907, 909, 919, 921, 927, 942, 944, 947, 949, 950, 952, 954, 957, 958, 962, 965, 966, 967, 971, 972, 973, 974, 976, 978, 981, 982, 984, 986, 987, 989, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "computation": [13, 77, 95, 121, 129, 149, 337, 351, 388, 389, 390, 393, 394, 396, 399, 513, 607, 608, 646, 736, 770, 772, 773, 774, 783, 794, 948, 949, 951, 959, 960, 964, 986, 989, 998], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 67, 78, 93, 96, 97, 107, 122, 127, 132, 140, 147, 148, 159, 164, 168, 178, 182, 184, 187, 194, 211, 216, 219, 223, 224, 228, 238, 242, 248, 250, 252, 271, 273, 291, 299, 301, 305, 307, 317, 321, 336, 338, 340, 348, 360, 362, 377, 387, 391, 392, 394, 398, 413, 419, 422, 424, 462, 479, 487, 489, 490, 497, 500, 516, 524, 525, 528, 539, 556, 557, 563, 564, 565, 566, 581, 583, 585, 586, 590, 597, 600, 614, 618, 633, 647, 663, 664, 665, 666, 667, 678, 711, 716, 752, 761, 770, 773, 783, 785, 795, 797, 806, 809, 813, 828, 832, 840, 841, 843, 847, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861, 870, 872, 873, 875, 876, 878, 941, 946, 949, 952, 954, 955, 958, 967, 991], "l2": [13, 30, 40, 81, 84, 164, 174, 181, 187, 196, 207, 211, 212, 215, 256, 275, 297, 316, 337, 338, 366, 373, 375, 389, 391, 394, 397, 417, 421, 425, 432, 499, 513, 515, 522, 533, 536, 537, 540, 564, 565, 566, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 647, 648, 649, 650, 651, 653, 656, 661, 662, 663, 708, 723, 734, 735, 751, 752, 753, 783, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 828, 829, 843, 851, 857, 870, 871, 875, 876, 877, 879, 881, 935, 941, 945, 948, 950, 955, 956, 962, 966, 968, 985, 987, 996, 998, 999, 1001, 1003], "produc": [13, 25, 26, 44, 56, 69, 98, 122, 123, 124, 125, 261, 294, 315, 348, 360, 361, 365, 366, 369, 377, 378, 389, 390, 393, 394, 396, 416, 419, 427, 494, 511, 534, 538, 556, 563, 568, 569, 607, 608, 772, 773, 774, 781, 786, 789, 792, 836, 846, 872, 875, 910, 943, 944, 948, 950, 951, 952, 955, 958, 959, 963, 965, 966, 967, 978, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 59, 61, 65, 72, 79, 93, 95, 100, 107, 110, 112, 115, 117, 127, 162, 164, 167, 168, 172, 174, 197, 215, 218, 232, 242, 255, 258, 297, 299, 307, 315, 319, 324, 328, 329, 332, 335, 337, 348, 352, 361, 362, 366, 368, 369, 372, 375, 377, 387, 389, 390, 391, 394, 396, 397, 399, 439, 487, 494, 508, 513, 515, 516, 522, 524, 556, 563, 564, 566, 585, 613, 621, 622, 648, 651, 652, 665, 669, 698, 705, 718, 719, 721, 726, 763, 788, 803, 804, 830, 831, 872, 874, 875, 880, 881, 941, 942, 944, 946, 948, 949, 951, 958, 959, 962, 966, 967, 983, 985, 986, 994, 997, 999, 1000, 1004, 1006, 1007], "central": [13, 198, 389, 958, 972], "emmanuel": [13, 65, 994, 1001, 1002, 1003], "gouillart": [13, 65, 994], "nsup": 13, "ndimag": [13, 46, 47, 54, 294, 986], "_weight": [13, 214], "orig": 13, "floor_x": 13, "floor": [13, 245], "astyp": [13, 37, 41, 44, 45, 59, 61, 65, 80, 102, 119, 121, 138, 186, 187, 214, 220, 231, 234, 275, 397, 942, 948, 1001], "hstack": [13, 33, 34, 42, 131, 142, 222, 233, 250, 327, 393, 474, 830], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 138, 328], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 298, 327, 610], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 121, 131, 275, 338, 811, 812], "mask": [13, 42, 65, 117, 196, 204, 253, 254, 316, 373, 377, 390, 396, 444, 449, 536, 537, 556, 560, 561, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 604, 605, 624, 646, 770, 773, 774, 783, 924, 942, 994, 997, 999, 1000, 1002, 1004], "logical_and": [13, 122], "proj_oper": 13, "coo_matrix": [13, 182, 427, 560, 561, 923, 926], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 57, 61, 103, 113, 126, 128, 141, 175, 219, 220, 225, 231, 269, 287, 306, 307, 316, 317, 331, 332, 338, 344, 345, 373, 519, 678, 679, 689, 730, 754, 759, 862, 863, 865, 866, 867, 964, 978, 994, 1005, 1006], "gaussian_filt": [13, 46, 47, 54, 986], "sigma": [13, 46, 47, 54, 79, 103, 122, 253, 255, 386, 391, 394, 396, 589, 624, 946, 948, 950, 954, 957, 986], "logical_xor": [13, 153, 330], "binary_eros": 13, "128": [13, 14, 196, 324, 335, 352, 511], "proj": [13, 624], "randn": [13, 33, 34, 39, 54, 64, 65, 79, 80, 98, 103, 125, 141, 149, 153, 168, 180, 185, 190, 191, 195, 209, 210, 213, 241, 244, 245, 250, 262, 264, 265, 269, 275, 281, 282, 306, 307, 323, 329, 330, 332, 334, 366, 369, 618, 645, 647, 653, 790, 873, 876], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 57, 70, 73, 77, 81, 86, 103, 118, 119, 121, 122, 134, 139, 140, 144, 146, 147, 166, 174, 184, 196, 198, 215, 242, 243, 248, 255, 256, 257, 259, 261, 264, 269, 270, 271, 279, 294, 298, 305, 307, 315, 324, 332, 355, 360, 366, 367, 373, 375, 376, 377, 383, 384, 387, 390, 391, 394, 396, 397, 398, 399, 413, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 467, 476, 477, 479, 490, 516, 542, 543, 550, 568, 569, 572, 577, 581, 584, 617, 618, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 651, 653, 654, 656, 657, 658, 659, 660, 661, 680, 687, 701, 714, 758, 761, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 805, 831, 832, 851, 870, 872, 875, 913, 951, 952, 955, 956, 960, 967, 968, 972, 973, 974, 976, 978, 981, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "lassocv": [13, 129, 135, 166, 185, 396, 398, 626, 627, 629, 630, 631, 638, 659, 948, 982, 994, 997, 1001, 1004, 1005, 1007, 1008], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 57, 81, 88, 95, 98, 153, 156, 164, 174, 187, 212, 215, 228, 233, 264, 279, 287, 294, 313, 324, 330, 399, 610, 620, 628, 638, 647, 659, 675, 681, 814, 822, 832, 846, 850, 943, 948, 952, 962, 1001, 1006], "133": [13, 55, 110], "wspace": [13, 14, 39, 44, 61, 79, 95, 110, 112, 167, 196, 214, 225, 240, 242, 243, 246, 280, 288, 313, 321], "194": [13, 15, 294], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 71, 94, 370, 388, 397, 510, 513, 519, 522, 988, 989, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "latentdirichletalloc": [14, 354, 369, 394, 972, 999, 1001, 1008, 1009], "corpu": [14, 338, 339, 360, 394, 563, 564, 565, 566, 987, 995], "frobeniu": [14, 98, 419, 422, 434, 444, 445, 446, 447, 448, 449, 450, 451, 506, 512, 513, 515, 520, 521, 522, 948, 1001], "kullback": [14, 217, 394, 513, 515, 522, 667, 949, 1001], "leibler": [14, 217, 394, 513, 515, 522, 667, 949, 1001], "diverg": [14, 93, 107, 121, 164, 217, 222, 280, 513, 515, 522, 667, 827, 949, 951, 952, 957, 959, 1001, 1002, 1007], "probabilist": [14, 27, 30, 81, 93, 107, 148, 149, 152, 156, 159, 164, 337, 377, 387, 395, 396, 413, 448, 451, 507, 509, 510, 516, 534, 563, 564, 585, 597, 618, 620, 651, 677, 714, 770, 793, 838, 872, 873, 875, 876, 945, 946, 948, 951, 952, 957, 962, 967, 972, 976, 994, 997, 1001], "semant": [14, 337, 338, 377, 519, 987, 988, 989, 996], "runnabl": [14, 368, 369], "coupl": [14, 52, 218, 359, 360, 370, 386, 387, 389, 398, 564, 876, 941, 967], "ten": [14, 19, 110, 146, 218, 246, 360, 362, 396, 495, 875, 1003], "polynomi": [14, 161, 164, 171, 173, 174, 196, 202, 215, 236, 255, 269, 307, 308, 321, 328, 331, 357, 361, 427, 465, 595, 614, 615, 616, 618, 647, 738, 747, 748, 797, 832, 841, 843, 846, 850, 870, 872, 873, 874, 875, 876, 947, 967, 974, 989, 1006, 1007], "lda": [14, 34, 93, 107, 164, 284, 348, 362, 385, 479, 511, 516, 524, 525, 820, 972, 974, 988, 989, 999], "proport": [14, 26, 40, 145, 182, 196, 203, 209, 225, 258, 282, 285, 334, 352, 360, 362, 387, 389, 391, 393, 394, 396, 397, 414, 415, 444, 449, 490, 524, 525, 530, 532, 534, 535, 536, 537, 538, 539, 558, 559, 563, 566, 602, 607, 633, 634, 641, 642, 643, 649, 650, 651, 653, 671, 686, 771, 772, 773, 774, 786, 789, 797, 817, 828, 829, 870, 871, 872, 875, 876, 878, 880, 882, 884, 896, 941, 951, 952, 955, 958, 966, 967, 968, 999], "325": [14, 90], "tf": [14, 19, 229, 337, 338, 339, 360, 394, 496, 519, 563, 564, 565, 566, 810, 818, 843, 941, 950, 954, 962, 972, 987], "idf": [14, 19, 229, 337, 338, 339, 360, 394, 496, 519, 563, 564, 565, 566, 810, 818, 843, 941, 950, 954, 962, 987, 994], "314": 14, "2000": [14, 26, 40, 50, 74, 96, 103, 120, 172, 243, 246, 255, 275, 291, 309, 338, 360, 362, 389, 390, 396, 401, 427, 437, 508, 509, 534, 664, 666, 668, 716, 761, 768, 817, 847, 858, 949, 952, 958, 964, 978, 986], "086": [14, 208, 215], "277": [14, 960, 996], "minibatchnmf": [14, 354, 394, 1008], "batch_siz": [14, 19, 42, 63, 95, 98, 99, 338, 394, 424, 509, 511, 512, 513, 514, 521, 827, 828, 829, 910, 911, 995, 1002, 1005, 1007, 1008], "ensta": [14, 17, 37, 48, 60, 196, 214, 218, 256, 258, 337, 338, 339], "chyi": [14, 997, 998, 999, 1000, 1001], "kwei": [14, 997, 998, 999, 1000, 1001], "yau": [14, 997, 998, 999, 1000, 1001], "chyikwei": 14, "tfidfvector": [14, 19, 69, 256, 337, 360, 394, 397, 463, 563, 564, 565, 994, 996, 1002, 1003, 1004, 1007, 1008], "countvector": [14, 316, 339, 360, 369, 390, 394, 397, 463, 511, 557, 564, 565, 566, 987, 994, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007], "fetch_20newsgroup": [14, 19, 69, 256, 316, 337, 338, 339, 360, 463, 987, 999, 1004], "n_top_word": 14, "init": [14, 42, 45, 57, 58, 60, 63, 167, 176, 217, 218, 220, 221, 222, 243, 275, 338, 367, 372, 389, 394, 396, 419, 422, 424, 426, 428, 434, 435, 513, 515, 522, 523, 534, 535, 607, 608, 665, 667, 669, 820, 949, 994, 1003, 1006, 1008, 1009], "nndsvda": [14, 394, 513, 515, 522, 1003, 1006], "plot_top_word": 14, "feature_nam": [14, 19, 106, 116, 123, 126, 146, 166, 167, 168, 169, 205, 235, 278, 297, 305, 306, 307, 321, 337, 343, 358, 360, 369, 390, 464, 465, 466, 470, 474, 475, 476, 477, 479, 480, 485, 557, 606, 607, 882, 883, 884, 960, 968], "flatten": [14, 32, 220, 230, 253, 301, 321, 333, 370, 477, 544, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 820], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 121, 123, 168, 169, 196, 214, 257, 305, 312, 313, 337, 338, 360, 960], "top_featur": 14, "barh": [14, 123, 161, 162, 166, 168, 169, 337, 338, 339], "fontdict": [14, 39], "invert_yaxi": [14, 162, 339], "labels": [14, 301], "set_vis": [14, 129, 279, 285, 297], "filter": [14, 46, 47, 202, 214, 253, 255, 277, 337, 366, 368, 370, 373, 388, 389, 397, 423, 462, 463, 478, 563, 566, 570, 571, 572, 573, 747, 806, 899, 919, 954, 955, 984, 987, 1004], "useless": [14, 118, 258, 370, 398, 490, 503, 633, 686, 948, 962, 1003], "earli": [14, 44, 61, 108, 110, 118, 133, 164, 174, 215, 306, 377, 396, 417, 421, 424, 438, 470, 479, 490, 495, 511, 512, 513, 514, 521, 528, 529, 534, 535, 536, 537, 546, 602, 631, 641, 642, 643, 651, 653, 667, 797, 828, 829, 926, 949, 955, 962, 971, 973, 976, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009], "strip": [14, 214, 338, 352, 359, 360, 470], "header": [14, 69, 256, 337, 338, 360, 363, 397, 462, 463, 474, 770, 773, 774, 783], "footer": [14, 69, 256, 337, 338, 360, 462, 463], "repli": [14, 337, 364, 365, 367], "common": [14, 17, 19, 98, 143, 146, 164, 165, 170, 250, 262, 307, 337, 339, 346, 352, 355, 359, 365, 366, 372, 375, 376, 379, 380, 386, 387, 388, 389, 390, 393, 395, 398, 399, 440, 442, 470, 565, 607, 628, 647, 648, 719, 726, 742, 784, 794, 797, 832, 834, 842, 843, 844, 849, 851, 855, 856, 858, 859, 860, 861, 909, 941, 942, 948, 955, 958, 962, 967, 968, 973, 976, 978, 989, 994, 1002, 1004, 1005], "english": [14, 19, 69, 337, 338, 339, 369, 397, 563, 564, 566, 972, 973, 987, 1007], "occur": [14, 69, 196, 214, 348, 365, 366, 372, 378, 386, 389, 391, 393, 397, 483, 484, 547, 556, 563, 565, 566, 602, 646, 769, 770, 773, 774, 783, 793, 794, 795, 798, 895, 952, 954, 962, 987, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 256, 316, 337, 338, 563, 566, 1005], "min_df": [14, 19, 69, 256, 316, 337, 338, 397, 563, 566, 994, 996, 1005], "max_featur": [14, 31, 114, 124, 233, 252, 267, 307, 396, 398, 530, 531, 532, 533, 534, 535, 538, 539, 540, 563, 566, 572, 878, 879, 880, 881, 941, 948, 994, 996, 997, 1001, 1002, 1005, 1008], "stop_word": [14, 19, 337, 338, 397, 563, 564, 566], "tfidf": [14, 69, 316, 397, 566, 987], "tf_vector": 14, "beta_loss": [14, 513, 515, 522, 1001], "alpha_w": [14, 394, 513, 515, 522, 1007], "00005": 14, "alpha_h": [14, 394, 513, 515, 522, 1007], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 166, 168, 308, 337, 338, 339, 360, 377, 390, 397, 418, 419, 421, 422, 424, 439, 442, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 541, 542, 543, 544, 545, 556, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 663, 664, 815, 820, 823, 827, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 962, 1007, 1008, 1009], "solver": [14, 30, 33, 34, 46, 65, 94, 164, 174, 185, 187, 188, 189, 198, 211, 212, 214, 215, 291, 292, 293, 294, 337, 370, 375, 380, 385, 389, 401, 427, 437, 446, 447, 453, 477, 508, 510, 515, 516, 519, 522, 524, 621, 622, 623, 627, 628, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 647, 649, 651, 655, 656, 659, 662, 663, 664, 666, 668, 670, 761, 783, 797, 802, 805, 828, 829, 872, 873, 874, 875, 876, 946, 949, 952, 956, 966, 967, 972, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mu": [14, 79, 80, 94, 255, 394, 402, 448, 450, 451, 454, 455, 515, 522, 946, 948, 1001, 1004], "mbnmf": 14, "learning_method": [14, 369, 511], "learning_offset": [14, 511], "tf_feature_nam": 14, "550": [14, 15, 111, 133], "plot_topics_extraction_with_nmf_lda": [14, 15], "57": [15, 45, 102, 149, 166, 212, 294, 362, 363, 380, 381, 382, 390, 679, 754, 804, 952, 962, 994], "600": [15, 26, 50, 128, 129, 360, 655], "execut": [15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 161, 163, 170, 173, 185, 215, 223, 231, 238, 247, 260, 271, 274, 289, 295, 303, 310, 318, 335, 340, 347, 353, 365, 370, 383, 389, 394, 400, 419, 436, 770, 783, 792, 793, 794, 795, 798, 816, 962, 965, 979, 987, 996, 999, 1002], "auto_examples_appl": 15, "real": [15, 31, 69, 73, 77, 79, 108, 133, 152, 166, 221, 234, 249, 261, 269, 279, 298, 299, 339, 352, 355, 358, 359, 362, 368, 370, 373, 375, 376, 377, 386, 387, 389, 391, 393, 394, 396, 397, 444, 463, 464, 467, 468, 469, 470, 471, 474, 475, 476, 479, 485, 495, 526, 527, 528, 530, 531, 532, 533, 534, 535, 539, 540, 567, 569, 570, 571, 572, 573, 574, 575, 674, 678, 697, 701, 725, 728, 730, 758, 766, 767, 796, 797, 828, 829, 872, 873, 874, 875, 876, 878, 879, 881, 942, 943, 944, 949, 952, 954, 956, 957, 958, 968, 971, 989, 994, 1007], "svm_gui": [15, 16, 985], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 80, 167, 316, 337, 338, 339, 360, 370, 388, 389, 391, 394, 763, 764, 768, 801, 882, 952, 953, 959, 972, 987], "frontend": [16, 370], "mainli": [16, 27, 113, 149, 352, 366, 387, 586, 954], "intend": [16, 57, 99, 197, 337, 365, 366, 371, 375, 393, 443, 557, 648, 674, 840, 841, 851, 868, 948, 952, 956, 963], "didact": [16, 365, 973], "region": [16, 25, 36, 47, 55, 65, 67, 130, 156, 164, 166, 196, 214, 225, 229, 230, 246, 300, 324, 362, 371, 377, 389, 396, 399, 423, 425, 431, 437, 562, 949, 952, 955, 958, 966, 968, 986], "induc": [16, 26, 55, 166, 187, 189, 194, 197, 211, 231, 339, 386, 388, 394, 396, 399, 424, 514, 518, 528, 532, 533, 534, 535, 539, 540, 541, 618, 699, 729, 844, 878, 879, 880, 881, 945, 952, 966, 985], "mous": [16, 359], "button": [16, 365, 372, 985], "prettenho": 16, "tkagg": 16, "backend": [16, 353, 377, 443, 868, 920, 922, 952, 997, 1002, 1003, 1004, 1005], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 994, 995, 999, 1009], "y_min": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 230, 291, 299, 317, 328, 329, 610, 612], "y_max": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 214, 230, 291, 299, 317, 328, 329, 610, 612], "x_min": [16, 31, 34, 52, 57, 89, 112, 118, 122, 127, 138, 151, 185, 230, 291, 299, 317, 328, 329], "x_max": [16, 31, 34, 52, 57, 89, 112, 118, 127, 138, 151, 230, 291, 299, 317, 328, 329], "notifi": [16, 547, 548, 549, 975, 992, 1004], "regist": [16, 337, 370, 920, 922], "surfac": [16, 108, 133, 164, 188, 205, 320, 321, 341, 347, 396, 479, 528, 532, 539, 737, 878, 884, 946, 951, 966, 967, 968], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 172, 331, 427, 510, 614, 615, 618, 748, 750, 872, 873, 874, 875, 876, 950, 967], "kernel_map": 16, "hasattr": [16, 44, 55, 61, 81, 118, 214, 229, 291, 299, 337, 377, 914, 915, 1004], "decision_surfac": 16, "delta": [16, 392, 427], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 116, 135, 164, 248, 254, 256, 259, 271, 332, 377, 393, 399, 477, 542, 602, 634, 640, 687, 770, 773, 774, 783, 797, 875, 941, 948, 952, 1001, 1002, 1003], "docstr": [16, 365, 366, 370, 377, 447, 674, 897, 941, 952, 955, 956, 966, 994, 1001, 1002, 1007, 1008], "set_ytick": [16, 31, 34, 43, 59, 63, 106, 127, 161, 162, 169, 187, 212, 240, 266, 291, 293, 299, 300, 321, 339], "set_xlim": [16, 31, 42, 59, 74, 79, 91, 115, 127, 129, 162, 194, 196, 201, 230, 240, 259, 261, 262, 280, 291, 297, 299, 300, 301, 306, 333], "attributeerror": [16, 390, 534, 551, 914, 986, 1003, 1004, 1006], "get_tk_widget": 16, "pack": [16, 373, 1002], "fill": [16, 34, 118, 129, 135, 168, 250, 280, 343, 377, 390, 394, 490, 502, 513, 515, 522, 562, 605, 882, 884, 942, 955, 968], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 65, 101, 105, 113, 122, 150, 180, 206, 280, 285, 288, 306, 307, 387, 389, 390, 395, 401, 427, 440, 496, 508, 511, 590, 591, 597, 616, 732, 739, 749, 828, 829, 847, 946, 948, 950, 954, 955, 956, 965, 966, 967, 985], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 129, 214, 365, 370, 389, 511, 621, 627, 949, 973, 975, 994, 999, 1000, 1002, 1007, 1008, 1009], "isinst": [16, 118, 214, 377], "lineset": 16, "support_vector": [16, 322], "place": [16, 59, 226, 235, 279, 352, 363, 365, 366, 369, 371, 378, 397, 399, 417, 421, 456, 457, 458, 490, 556, 565, 603, 605, 606, 741, 754, 768, 931, 932, 972, 994, 1001, 1004, 1005, 1007], "circl": [16, 59, 100, 127, 128, 138, 222, 232, 282, 285, 292, 297, 299, 314, 345, 361, 368, 372, 389, 427, 437, 489, 497, 737, 967], "dash": [16, 33, 79, 110, 131, 149, 152, 154, 167, 183, 188, 191, 197, 198, 205, 208, 209, 234, 255, 326, 330, 966], "bone": [16, 209, 334], "rais": [16, 197, 232, 258, 301, 308, 365, 366, 368, 369, 370, 373, 375, 377, 390, 393, 401, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 484, 508, 525, 534, 542, 548, 551, 563, 564, 566, 578, 592, 604, 605, 607, 610, 611, 646, 671, 673, 674, 676, 683, 685, 686, 687, 688, 700, 702, 703, 711, 729, 751, 755, 756, 757, 760, 761, 762, 768, 769, 770, 773, 774, 783, 793, 794, 795, 798, 803, 818, 820, 821, 826, 830, 835, 836, 844, 845, 849, 850, 851, 857, 873, 874, 875, 876, 885, 888, 890, 891, 893, 894, 911, 914, 936, 937, 938, 939, 952, 962, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "valueerror": [16, 232, 366, 370, 401, 443, 508, 551, 578, 592, 610, 646, 688, 803, 821, 830, 836, 850, 889, 893, 894, 937, 938, 939, 952, 962, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 229, 352, 353, 363, 365, 368, 370, 372, 380, 397, 483, 972, 987, 996], "anchor": [16, 266], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 164, 174, 188, 205, 215, 232, 258, 319, 321, 324, 329, 335, 487, 633, 634, 641, 643, 649, 650, 651, 652, 870, 872, 874, 875, 966, 967], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 368, 554, 557, 564, 633, 634, 641, 643, 651, 652, 653, 828, 829, 870, 962], "add_opt": 16, "action": [16, 308, 337, 364, 367, 368, 380, 962, 1004], "store": [16, 32, 54, 69, 71, 80, 89, 143, 157, 172, 182, 185, 218, 226, 235, 260, 312, 339, 346, 352, 359, 360, 365, 366, 371, 372, 373, 375, 377, 390, 392, 394, 396, 397, 399, 400, 414, 416, 420, 425, 432, 444, 445, 448, 449, 450, 451, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 483, 509, 510, 516, 524, 525, 530, 531, 538, 544, 545, 564, 585, 586, 602, 606, 607, 610, 613, 624, 625, 629, 635, 636, 637, 638, 641, 642, 648, 650, 651, 652, 653, 663, 664, 665, 667, 672, 673, 675, 676, 754, 768, 769, 770, 783, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 826, 842, 849, 851, 867, 890, 891, 923, 926, 942, 944, 948, 955, 964, 967, 968, 972, 978, 987, 991, 994, 995, 996, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "dest": 16, "dump": [16, 17, 383, 461, 811, 812], "argv": [16, 229], "opt": [16, 363], "arg": [16, 292, 377, 394, 396, 403, 546, 547, 548, 549, 550, 551, 552, 592, 674, 835, 948, 954, 955], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 275, 316, 375], "classic": [17, 191, 221, 234, 240, 246, 362, 363, 391, 393, 394, 419, 422, 424, 434, 466, 475, 479, 485, 607, 608, 880, 881, 946, 948, 954, 981, 994, 995, 999, 1008], "assert": [17, 48, 96, 229, 255, 353, 367, 973], "graph": [17, 25, 39, 44, 46, 65, 66, 157, 217, 252, 275, 277, 315, 352, 365, 367, 377, 386, 391, 400, 417, 420, 421, 427, 428, 432, 437, 438, 446, 447, 453, 486, 560, 561, 663, 666, 667, 670, 755, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 866, 949, 952, 955, 957, 965, 968, 972, 976, 983, 986, 994, 1001, 1002, 1004, 1007, 1009], "vertex": [17, 26, 428, 1007], "en": [17, 24, 372, 506, 512, 570, 611, 639, 643, 646, 660, 661, 670, 679, 813, 814, 819, 820, 821, 822, 849, 864, 878, 879, 948, 952, 967, 968], "wiki": [17, 24, 370, 372, 570, 611, 643, 646, 670, 679, 813, 814, 819, 820, 821, 822, 849, 864, 878, 879, 948, 968], "eigenvector_centr": 17, "webpag": [17, 172, 365], "pagerank": 17, "insid": [17, 19, 26, 167, 198, 255, 314, 324, 354, 359, 360, 366, 370, 389, 397, 563, 564, 566, 850, 920, 959, 976], "accord": [17, 24, 26, 37, 77, 121, 146, 150, 179, 196, 214, 229, 305, 338, 348, 365, 366, 375, 376, 377, 378, 386, 389, 391, 393, 394, 396, 397, 399, 413, 425, 427, 431, 435, 437, 440, 444, 479, 491, 492, 493, 500, 505, 507, 510, 511, 513, 515, 525, 528, 529, 536, 537, 538, 541, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 616, 617, 619, 620, 624, 633, 634, 645, 655, 666, 670, 708, 752, 753, 770, 771, 772, 773, 774, 776, 777, 778, 783, 792, 806, 807, 808, 809, 810, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 834, 841, 849, 860, 862, 863, 870, 871, 872, 873, 875, 876, 915, 946, 948, 952, 954, 955, 962, 965, 966, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "tradit": [17, 196, 211, 338, 354, 387, 396, 397, 607, 669, 948, 951, 976], "power_iter": 17, "martinsson": [17, 510, 516, 907], "dbpedia": 17, "content": [17, 302, 337, 339, 360, 368, 370, 388, 397, 460, 478, 483, 484, 563, 564, 566, 646, 884, 961, 976, 987, 995, 1004], "bz2": [17, 483, 484], "bz2file": 17, "pprint": [17, 122, 256, 360, 902], "randomized_svd": [17, 373, 426, 428, 507, 516, 519, 521, 994, 995, 1000, 1007, 1008, 1009], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 122, 161, 196, 293, 307, 351, 355, 367, 376, 773, 774, 953, 970, 973, 976, 979, 989, 1002, 1007, 1008], "wait": [17, 365, 368, 377, 641, 642, 643, 651, 653, 1006], "wb": 17, "index_map": 17, "setdefault": [17, 885], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 69, 256, 277, 305, 365, 372, 399, 439, 442, 795, 831, 1000, 1001, 1007], "get_redirect": 17, "transit": [17, 368, 1005], "malform": [17, 998], "1000000": [17, 511], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 65, 81, 98, 105, 116, 122, 166, 192, 221, 228, 292, 297, 302, 324, 332, 337, 360, 366, 368, 376, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 496, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 598, 602, 603, 604, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 927, 933, 941, 947, 955, 956, 968, 976, 982, 983, 985, 986, 1006, 1007, 1008, 1009], "break": [17, 39, 46, 69, 80, 164, 185, 202, 242, 308, 313, 319, 335, 337, 339, 365, 366, 368, 370, 376, 389, 444, 487, 614, 747, 751, 754, 768, 844, 851, 855, 872, 875, 948, 951, 960, 962, 967, 973, 994, 995, 1001, 1002, 1004, 1006], "get_adjacency_matrix": 17, "resolv": [17, 364, 365, 368, 372, 378, 397, 427, 437, 666, 670, 907, 942, 952, 1001, 1003, 1004, 1007], "lil_matrix": 17, "float32": [17, 121, 220, 294, 353, 360, 365, 366, 532, 533, 534, 535, 538, 539, 540, 541, 568, 569, 615, 616, 633, 736, 836, 878, 879, 880, 881, 888, 928, 929, 930, 968, 978, 987, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "del": [17, 370, 1006, 1007], "convert": [17, 34, 46, 48, 65, 70, 98, 154, 169, 196, 217, 237, 241, 242, 245, 246, 288, 352, 359, 373, 375, 377, 383, 397, 416, 419, 420, 422, 424, 425, 426, 427, 434, 439, 440, 470, 509, 516, 528, 529, 532, 533, 534, 535, 538, 539, 540, 541, 547, 556, 557, 563, 564, 565, 566, 568, 569, 581, 602, 603, 604, 605, 621, 627, 633, 634, 635, 637, 641, 643, 645, 649, 651, 652, 653, 667, 674, 751, 826, 835, 836, 838, 842, 844, 845, 846, 848, 870, 878, 879, 880, 881, 888, 890, 891, 913, 937, 938, 941, 948, 949, 950, 952, 962, 963, 967, 968, 987, 994, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006], "csr": [17, 339, 352, 359, 360, 373, 375, 377, 397, 400, 419, 422, 424, 425, 434, 471, 483, 498, 528, 529, 532, 533, 539, 540, 541, 605, 633, 667, 674, 688, 741, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 826, 834, 838, 840, 842, 843, 846, 849, 851, 853, 854, 855, 857, 860, 863, 878, 879, 880, 881, 886, 890, 891, 913, 917, 927, 928, 929, 930, 931, 932, 933, 955, 962, 966, 994, 995, 1000, 1002, 1003, 1009], "tocsr": 17, "convers": [17, 122, 187, 337, 348, 354, 359, 365, 366, 372, 375, 383, 397, 547, 826, 835, 843, 890, 891, 938, 949, 973, 976, 1002, 1003, 1004, 1007], "5m": 17, "ram": [17, 354, 396, 862, 863, 954, 967, 987, 1000, 1006], "5000000": 17, "strongest": [17, 189], "highest": [17, 19, 26, 81, 142, 146, 253, 255, 266, 307, 337, 365, 375, 387, 393, 396, 398, 413, 530, 532, 539, 567, 570, 571, 573, 574, 575, 578, 579, 581, 610, 612, 699, 729, 765, 768, 770, 773, 774, 783, 867, 878, 909, 941, 948, 952, 953, 956, 966, 968, 1006], "centrality_scor": 17, "networkx": [17, 373], "copyright": [17, 81], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 362], "dan": [17, 994, 998, 999, 1000, 1002, 1003], "schult": 17, "dschult": 17, "pieter": [17, 1000, 1001, 1008], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 195, 229, 259, 339, 386, 400, 420, 498, 499, 506, 512, 517, 523, 563, 566, 660, 661, 674, 813, 814, 817, 819, 821, 822, 948, 952], "indptr": [17, 275, 346, 1002], "dangl": 17, "isclos": 17, "guess": [17, 118, 393, 396, 397, 453, 507, 513, 515, 516, 522, 952, 966], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 54, 56, 61, 77, 78, 79, 81, 84, 85, 96, 97, 98, 103, 105, 113, 149, 150, 156, 157, 166, 177, 180, 188, 190, 191, 203, 230, 241, 242, 244, 245, 259, 320, 322, 352, 366, 370, 373, 377, 386, 394, 397, 508, 513, 515, 522, 565, 566, 589, 621, 622, 625, 627, 628, 629, 632, 635, 636, 637, 638, 656, 657, 658, 659, 662, 734, 736, 843, 882, 908, 950, 954, 962, 966, 967, 986, 1003], "converg": [17, 60, 77, 78, 110, 120, 122, 149, 155, 158, 189, 198, 200, 204, 212, 243, 292, 293, 297, 313, 354, 373, 377, 386, 389, 394, 397, 399, 401, 416, 419, 422, 423, 424, 427, 429, 434, 435, 436, 437, 446, 447, 453, 456, 457, 458, 508, 510, 511, 512, 513, 514, 521, 528, 546, 585, 619, 620, 621, 622, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 643, 647, 649, 651, 653, 657, 658, 662, 663, 665, 666, 669, 670, 768, 769, 820, 828, 829, 865, 866, 872, 942, 947, 948, 949, 951, 956, 966, 994, 997, 998, 999, 1001, 1002, 1005, 1007, 1008], "l_inf": 17, "scores_max": 17, "err": [17, 84, 99], "6f": [17, 99, 260, 264, 710, 766], "concern": [18, 36, 76, 83, 87, 93, 108, 140, 148, 160, 164, 171, 174, 216, 239, 245, 272, 276, 290, 296, 311, 319, 336, 341, 352, 366, 388, 949, 964], "modul": [18, 36, 37, 76, 83, 87, 93, 95, 108, 140, 148, 158, 160, 164, 165, 171, 174, 211, 216, 217, 239, 248, 272, 276, 290, 292, 293, 296, 311, 319, 336, 341, 344, 359, 360, 363, 364, 365, 366, 368, 369, 370, 372, 373, 375, 377, 379, 380, 386, 387, 388, 389, 392, 396, 397, 398, 400, 420, 478, 510, 553, 555, 634, 865, 899, 941, 946, 948, 950, 952, 953, 956, 958, 959, 962, 964, 966, 968, 969, 976, 981, 982, 987, 995, 996, 997, 999, 1000, 1004, 1006, 1008], "demo": [18, 22, 36, 67, 164, 202, 256, 337, 338, 366, 386, 389, 397, 416, 417, 420, 422, 423, 425, 426, 428, 430, 433, 477, 486, 487, 488, 516, 678, 679, 691, 693, 710, 764, 766, 832, 851], "spectral": [18, 22, 36, 44, 46, 49, 67, 164, 218, 219, 365, 397, 424, 426, 427, 428, 437, 444, 445, 446, 447, 448, 449, 450, 451, 462, 486, 488, 566, 663, 664, 665, 666, 667, 670, 693, 766, 955, 965, 988, 989, 994, 995], "twenti": [19, 229, 362, 386, 389, 987], "comp": [19, 84, 85, 98, 106, 294, 316, 337, 338, 339, 360, 987], "window": [19, 316, 360, 365, 366, 367, 397, 972, 994, 997, 1001, 1005, 1007], "misc": [19, 53, 98, 256, 316, 337, 338, 339, 360, 986], "categori": [19, 44, 61, 69, 70, 119, 129, 166, 196, 204, 211, 234, 256, 292, 293, 299, 307, 316, 337, 338, 339, 359, 360, 373, 388, 389, 390, 396, 397, 399, 462, 470, 471, 478, 536, 537, 716, 731, 732, 807, 844, 845, 942, 949, 950, 954, 960, 978, 987, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "noth": [19, 69, 337, 338, 369, 517, 558, 563, 564, 566, 688, 834, 843, 891, 962], "frequenc": [19, 27, 149, 190, 196, 229, 306, 307, 337, 338, 339, 360, 368, 375, 387, 393, 394, 396, 397, 526, 532, 534, 535, 536, 539, 563, 564, 565, 566, 579, 633, 634, 639, 641, 643, 649, 650, 651, 660, 661, 800, 835, 844, 870, 872, 875, 878, 880, 896, 948, 949, 954, 962, 966, 968, 996, 998, 999, 1005], "dhillon": [19, 386, 426, 428, 486], "cut": [19, 46, 64, 65, 219, 368, 375, 386, 389, 427, 428, 437, 563, 566, 666, 670, 962], "minibatchkmean": [19, 36, 44, 50, 60, 67, 164, 338, 354, 389, 394, 416, 418, 422, 487, 752, 995, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009], "coclust": [19, 386, 426, 488], "58": [19, 65, 78, 271, 294, 362, 391, 450, 737, 962, 983], "4431": 19, "_kmean": [19, 43, 44, 45, 48, 50, 56, 59, 95, 306, 309], "867": [19, 43, 44, 45, 48, 50, 56, 59, 73, 95, 306, 309], "n_init": [19, 42, 43, 44, 45, 48, 50, 53, 56, 57, 59, 60, 63, 95, 217, 218, 219, 220, 306, 309, 338, 389, 419, 422, 423, 424, 426, 427, 428, 434, 436, 437, 665, 669, 768, 769, 986, 994, 1002, 1008, 1009], "auto": [19, 33, 43, 44, 45, 48, 50, 56, 57, 59, 91, 95, 153, 179, 217, 222, 234, 236, 275, 278, 283, 306, 307, 308, 309, 320, 321, 327, 330, 331, 339, 359, 360, 365, 366, 396, 399, 400, 417, 420, 421, 422, 424, 425, 427, 432, 434, 437, 470, 483, 484, 510, 516, 519, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 568, 569, 572, 577, 582, 583, 604, 606, 607, 608, 610, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 647, 648, 649, 655, 656, 657, 659, 660, 662, 663, 664, 666, 667, 668, 670, 673, 675, 676, 773, 774, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 828, 829, 844, 845, 862, 863, 867, 872, 873, 874, 875, 876, 878, 879, 880, 881, 906, 907, 921, 943, 946, 948, 949, 955, 972, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "suppress": [19, 43, 44, 45, 48, 50, 56, 59, 95, 166, 306, 309, 352, 372, 667, 907, 955, 1001], "warn": [19, 43, 44, 45, 48, 50, 56, 59, 61, 71, 95, 196, 211, 258, 292, 293, 301, 306, 309, 352, 355, 365, 367, 368, 369, 377, 397, 401, 422, 424, 434, 470, 474, 501, 508, 512, 521, 525, 528, 529, 532, 533, 534, 535, 539, 540, 541, 546, 547, 548, 549, 550, 552, 577, 605, 611, 645, 668, 686, 687, 702, 703, 711, 756, 757, 760, 806, 807, 808, 810, 835, 836, 873, 874, 875, 876, 878, 879, 880, 881, 890, 891, 897, 907, 920, 922, 938, 939, 941, 952, 962, 985, 994, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "3177": 19, "1961": 19, "4388": 19, "talk": [19, 69, 256, 337, 338, 339, 355, 360, 377, 383, 976, 979, 987], "polit": [19, 337, 360, 364, 953], "gun": [19, 360], "17": [19, 22, 39, 52, 73, 79, 109, 133, 150, 166, 195, 229, 258, 291, 301, 360, 363, 369, 380, 381, 382, 389, 393, 399, 420, 436, 461, 471, 498, 506, 511, 515, 522, 524, 525, 530, 534, 535, 544, 545, 572, 603, 624, 632, 633, 634, 641, 644, 647, 649, 662, 667, 702, 703, 713, 734, 739, 757, 760, 762, 787, 809, 820, 835, 840, 841, 849, 851, 856, 872, 875, 878, 879, 880, 881, 941, 942, 953, 955, 962, 970, 990, 992, 994, 995, 996, 997, 1000, 1003, 1008], "sci": [19, 69, 74, 337, 338, 339, 360, 375, 664, 668, 842, 949, 962, 987], "med": [19, 69, 360, 962, 987], "geb": 19, "gordon": [19, 243, 1000, 1004, 1006, 1008], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1269": 19, "3558": 19, "soc": [19, 360, 987], "religion": [19, 256, 337, 338, 339, 360, 953, 987], "mideast": [19, 360], "alt": [19, 256, 316, 337, 338, 339, 360, 372, 987], "atheism": [19, 256, 316, 337, 338, 339, 360, 987], "god": [19, 337, 338, 987], "jesu": [19, 337, 338], "kent": 19, "belief": [19, 255, 827, 957], "christ": 19, "faith": [19, 155, 329], "moral": [19, 70, 337, 338, 633, 1002, 1006, 1007], "2201": 19, "2747": 19, "mac": [19, 316, 360, 365, 682, 952], "hardwar": [19, 316, 339, 352, 360, 363, 970, 1008, 1009], "pc": [19, 302, 316, 339, 360], "voltag": 19, "dsp": 19, "stereo": 19, "ship": [19, 37, 129, 162, 343, 353, 363, 380, 397, 948, 994, 1003], "1773": 19, "2620": 19, "rec": [19, 339, 360, 616], "motorcycl": [19, 360], "forsal": [19, 339, 360], "bike": 19, "car": [19, 196], "dod": 19, "ride": 19, "helmet": 19, "bmw": 19, "201": [19, 121, 362, 559], "1175": 19, "turkish": 19, "armenia": 19, "armenian": 19, "turk": 19, "petch": 19, "sera": 19, "zuma": 19, "argic": 19, "gvg47": 19, "spectralcoclust": [19, 21, 386, 426, 996, 1001, 1005], "v_measure_scor": [19, 37, 38, 49, 57, 338, 389, 691, 709, 710, 730, 952, 1003], "number_norm": 19, "token": [19, 339, 352, 360, 397, 511, 563, 564, 565, 566, 994, 1002, 1006], "placehold": [19, 368, 602, 603, 604, 605, 784, 785, 788, 789, 942], "begin": [19, 149, 250, 257, 273, 308, 337, 348, 365, 369, 370, 377, 386, 389, 396, 528, 529, 534, 536, 537, 641, 642, 651, 652, 653, 941, 948, 952, 962, 964, 966, 1002, 1008, 1009], "By": [19, 45, 95, 126, 175, 297, 305, 337, 353, 365, 370, 371, 377, 389, 390, 392, 393, 394, 395, 396, 398, 414, 417, 421, 425, 439, 442, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 499, 501, 524, 525, 532, 533, 534, 535, 539, 540, 560, 561, 563, 564, 566, 581, 584, 607, 608, 646, 648, 650, 652, 665, 667, 669, 672, 675, 676, 677, 692, 702, 703, 707, 711, 756, 757, 760, 765, 767, 773, 774, 817, 831, 832, 844, 845, 847, 849, 858, 860, 873, 874, 878, 879, 880, 881, 890, 891, 920, 941, 942, 944, 948, 952, 959, 962, 964, 968, 978, 982, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008], "isdigit": [19, 397], "numbernormalizingvector": 19, "build_token": [19, 397, 563, 564, 566], "super": [19, 25, 27, 397, 1002], "sport": [19, 360], "basebal": [19, 360], "hockei": [19, 360], "crypt": [19, 360], "electron": [19, 360, 362, 513, 515, 522, 602], "y_true": [19, 58, 129, 152, 196, 206, 214, 243, 315, 365, 408, 414, 415, 440, 456, 457, 458, 527, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 672, 673, 675, 676, 677, 681, 682, 683, 686, 687, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 755, 756, 757, 758, 760, 761, 762, 765, 767, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 952, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 95, 309, 338, 365, 377, 389, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 486, 488, 986, 994, 998, 1000, 1002, 1003, 1005, 1008], "svd_method": [19, 426, 428, 507, 997], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 56, 57, 58, 60, 67, 164, 243, 246, 300, 309, 338, 373, 389, 416, 419, 423, 424, 427, 434, 437, 487, 763, 764, 768, 769, 836, 955, 962, 973, 986, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "20000": [19, 97], "y_coclust": 19, "row_labels_": [19, 20, 21, 386, 426, 428], "y_kmean": 19, "fit_predict": [19, 55, 56, 59, 225, 282, 366, 377, 389, 406, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 444, 538, 652, 768, 769, 817, 823, 831, 874, 958, 999, 1002, 1003, 1007, 1009], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 58, 62, 63, 69, 130, 217, 234, 333, 486, 488], "get_indic": [19, 404, 426, 428], "float_info": 19, "row_compl": 19, "logical_not": [19, 63, 105, 199], "rows_": [19, 386, 404, 426, 428], "col_compl": 19, "columns_": [19, 386, 404, 426, 428], "ident": [19, 63, 121, 191, 196, 214, 225, 229, 317, 337, 360, 366, 377, 386, 389, 390, 391, 393, 399, 402, 414, 415, 427, 439, 440, 448, 450, 451, 454, 455, 462, 478, 526, 534, 535, 539, 540, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 618, 654, 655, 674, 678, 679, 709, 758, 766, 772, 775, 784, 785, 786, 788, 789, 813, 814, 820, 828, 829, 835, 836, 848, 859, 878, 879, 945, 946, 949, 952, 955, 956, 967, 998, 1002, 1003, 1004, 1008], "most_common": 19, "counter": [19, 389, 651, 652, 653, 1007], "itemgett": 19, "revers": [19, 74, 146, 201, 255, 509, 516, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 586, 762, 831, 952, 994, 995, 1004, 1006], "best_idx": [19, 254], "get_shap": [19, 404, 426, 428], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 57], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "608": [19, 22, 35, 54, 67, 240, 247], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 386, 426, 428, 486, 488], "make_checkerboard": [20, 486, 996], "rearrang": [20, 21, 386], "outer": [20, 100, 260, 314, 426, 489, 615, 625, 626, 629, 944, 995], "product": [20, 95, 130, 149, 154, 348, 352, 363, 366, 367, 370, 373, 383, 386, 394, 396, 426, 513, 515, 522, 557, 564, 565, 566, 588, 589, 608, 615, 639, 640, 660, 661, 734, 736, 748, 750, 843, 846, 862, 863, 908, 941, 944, 948, 950, 962, 964, 966, 967, 972, 976, 1002], "consensu": [20, 21, 37, 364, 365, 378, 386, 389, 624, 646, 653, 654, 693, 952], "kemaleren": [20, 21], "spectralbiclust": [20, 386, 428, 996, 1000, 1001, 1005], "consensus_scor": [20, 21, 386, 996], "matshow": [20, 21, 65, 117, 144, 293, 477], "row_idx": [20, 21, 196], "permut": [20, 21, 37, 80, 117, 123, 138, 164, 165, 170, 212, 248, 271, 379, 384, 389, 396, 439, 470, 475, 479, 534, 535, 539, 540, 602, 605, 609, 654, 678, 679, 691, 709, 710, 728, 730, 766, 786, 788, 796, 797, 831, 845, 875, 878, 879, 907, 921, 923, 926, 952, 966, 982, 985, 989, 994, 1000, 1007], "col_idx": [20, 21], "biclusters_": [20, 21, 404, 426, 428], "1f": [20, 30, 50, 94, 98, 176, 196, 229, 240, 242, 262, 305, 338, 339], "fit_data": [20, 21], "column_labels_": [20, 21, 386, 426, 428], "628": [20, 22, 72, 75, 112, 133, 338], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 355, 397, 404, 424, 426, 428, 462, 486, 488, 566, 693, 766, 952, 988, 989, 996, 1000, 1001], "make_biclust": [21, 488, 996], "implant": 21, "415": [21, 22], "plot_spectral_coclust": [21, 22], "651": [22, 370], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 74, 91, 108, 109, 110, 130, 133, 141, 148, 149, 150, 151, 159, 164, 166, 217, 221, 226, 229, 255, 258, 261, 262, 264, 265, 297, 301, 305, 307, 315, 317, 352, 355, 360, 361, 366, 370, 375, 377, 389, 393, 394, 397, 398, 399, 411, 412, 413, 414, 415, 422, 424, 474, 479, 487, 490, 498, 502, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 544, 545, 568, 569, 585, 588, 589, 597, 602, 607, 608, 633, 634, 646, 651, 667, 673, 675, 676, 677, 680, 681, 683, 686, 690, 694, 699, 700, 702, 712, 713, 714, 715, 729, 755, 757, 760, 761, 762, 765, 768, 769, 770, 773, 774, 783, 796, 797, 800, 802, 803, 806, 807, 808, 809, 810, 813, 816, 821, 827, 828, 863, 864, 865, 866, 867, 870, 872, 875, 878, 880, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 962, 964, 965, 966, 968, 973, 974, 975, 987, 989, 994, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008], "confid": [24, 25, 26, 27, 154, 156, 241, 255, 258, 315, 378, 387, 399, 611, 633, 634, 641, 643, 646, 649, 650, 651, 673, 676, 681, 694, 699, 700, 712, 713, 729, 762, 799, 838, 870, 872, 875, 948, 951, 952, 953, 958, 965, 966, 967, 976, 987, 1004], "being": [24, 27, 45, 52, 81, 85, 89, 100, 114, 126, 149, 154, 166, 168, 172, 190, 249, 255, 301, 302, 324, 337, 339, 363, 364, 365, 366, 369, 375, 377, 378, 383, 389, 391, 393, 396, 397, 398, 399, 400, 417, 418, 420, 421, 425, 431, 444, 467, 498, 544, 615, 624, 631, 647, 649, 662, 665, 669, 686, 692, 707, 709, 756, 762, 768, 811, 812, 817, 819, 821, 822, 823, 846, 863, 908, 941, 942, 948, 951, 952, 955, 958, 959, 960, 962, 964, 966, 967, 968, 994, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009], "postprocess": [24, 387, 510, 516], "brier": [24, 25, 387, 683], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 357, 396, 413, 427, 510, 536, 595, 614, 618, 738, 747, 750, 828, 829, 872, 873, 874, 875, 876, 957, 967, 985, 989, 1007], "isoton": [24, 25, 164, 224, 238, 355, 413, 632, 893, 974, 989, 995, 996, 997, 998, 1000, 1007], "belong": [24, 27, 59, 234, 255, 305, 314, 359, 360, 386, 387, 389, 392, 393, 396, 404, 416, 419, 422, 423, 424, 426, 428, 498, 686, 704, 776, 782, 792, 818, 838, 948, 951, 952, 954, 955, 956, 958, 967, 972, 978, 985], "mblondel": [24, 48, 187, 218, 256, 337, 359, 483], "telecom": [24, 25, 42, 225, 976], "balaz": [24, 998], "kegl": [24, 998], "jhm": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231], "informatik": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 952], "uni": [24, 25, 26, 27, 73, 114, 149, 150, 152, 153, 154, 155, 156, 158, 187, 230, 231, 314, 332], "bremen": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231], "style": [24, 26, 37, 74, 80, 122, 185, 214, 259, 365, 371, 389, 397, 419, 422, 434, 675, 890, 891, 994, 997, 1008], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 58, 59, 61, 62, 63, 90, 188, 208, 225, 243, 300, 306, 309, 322, 325, 326, 333, 361, 366, 367, 396, 490, 1002, 1005, 1008], "50000": 24, "n_bin": [24, 25, 27, 196, 214, 298, 300, 414, 415, 836, 962], "calibration_curv": [24, 387, 413, 414, 1003, 1008], "blob": [24, 33, 42, 44, 56, 61, 63, 90, 389, 423, 487, 999], "sample_weight": [24, 177, 196, 209, 214, 306, 334, 365, 377, 389, 396, 400, 405, 408, 413, 419, 420, 422, 424, 434, 440, 444, 456, 457, 458, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 585, 586, 609, 610, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 672, 673, 675, 676, 677, 681, 682, 683, 686, 687, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 707, 708, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 755, 756, 757, 758, 760, 761, 762, 765, 767, 770, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 816, 818, 821, 822, 828, 829, 831, 850, 851, 865, 866, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 940, 952, 966, 967, 968, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "sw_train": [24, 306], "sw_test": [24, 306], "calibratedclassifiercv": [24, 25, 26, 348, 377, 387, 651, 941, 967, 973, 998, 1000, 1003, 1004, 1006, 1007, 1008, 1009], "brier_score_loss": [24, 25, 387, 952, 1002, 1003, 1004], "gaussiannb": [24, 25, 27, 31, 131, 257, 302, 348, 387, 396, 413, 544, 806, 807, 808, 810, 832, 946, 953, 954, 998, 999, 1000, 1002, 1007], "With": [24, 34, 44, 66, 74, 100, 120, 126, 142, 164, 167, 196, 198, 224, 226, 231, 232, 238, 255, 279, 352, 355, 360, 365, 377, 389, 390, 393, 398, 413, 415, 476, 607, 608, 633, 741, 829, 832, 834, 851, 877, 879, 945, 948, 949, 952, 953, 955, 956, 959, 966, 968, 978, 979, 986, 991, 997, 1001, 1002, 1004, 1006, 1008], "itself": [24, 122, 194, 237, 324, 338, 352, 354, 364, 365, 366, 368, 377, 388, 389, 400, 416, 417, 420, 421, 444, 445, 446, 447, 448, 449, 450, 451, 502, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 526, 541, 544, 558, 567, 570, 571, 573, 574, 575, 577, 578, 614, 615, 616, 617, 618, 620, 630, 664, 666, 763, 764, 806, 807, 808, 809, 810, 811, 812, 816, 824, 825, 836, 837, 838, 865, 866, 944, 948, 949, 951, 955, 956, 960, 998], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 127, 131, 150, 151, 152, 153, 264, 291, 299, 305, 307, 337, 366, 371, 377, 387, 388, 396, 413, 414, 415, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 544, 568, 569, 585, 594, 595, 597, 598, 606, 607, 608, 633, 634, 651, 673, 675, 676, 714, 715, 761, 768, 769, 770, 773, 774, 783, 792, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 813, 821, 828, 831, 838, 865, 866, 867, 872, 875, 878, 880, 948, 952, 954, 956, 959, 965, 966, 967, 968, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 124, 188, 202, 204, 205, 313, 329, 332, 343, 362, 372, 375, 380, 389, 449, 534, 535, 557, 564, 565, 566, 610, 620, 639, 651, 653, 660, 661, 768, 948], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 325, 335], "109": [24, 231, 953, 996], "y_uniqu": 24, "rainbow": [24, 219], "this_i": [24, 202], "this_x": [24, 194, 202, 985], "this_sw": 24, "lexsort": 24, "51": [24, 91, 154, 170, 214, 389, 390, 754, 947, 948, 990], "uncalibr": [24, 25, 26, 413], "gnb": [24, 25, 27, 131, 302, 396, 544, 954], "413": [24, 28, 307, 310, 338], "plot_calibr": [24, 28], "reliabl": [25, 27, 387, 393, 414, 415, 621, 968, 976], "diagram": [25, 27, 70, 236, 306, 387, 389, 414, 415, 443, 868, 1005, 1006], "redund": [25, 27, 106, 241, 246, 348, 361, 364, 365, 369, 377, 387, 490, 609, 973, 987, 1006], "uninform": [25, 27, 361, 369, 397, 941, 948, 1002], "rest": [25, 30, 119, 123, 164, 174, 211, 215, 243, 264, 305, 316, 321, 370, 377, 388, 399, 487, 585, 619, 633, 634, 651, 727, 761, 799, 800, 801, 820, 870, 872, 875, 948, 952, 953, 956, 959, 967, 976, 998, 999, 1008, 1009], "make_classif": [25, 27, 31, 90, 114, 115, 116, 120, 143, 145, 252, 258, 266, 267, 285, 291, 299, 305, 307, 332, 348, 361, 367, 385, 413, 414, 487, 528, 530, 532, 539, 641, 672, 673, 675, 676, 801, 828, 831, 870, 941, 952, 953, 962, 967, 1000, 1001, 1002, 1004], "100_000": [25, 27, 166], "n_inform": [25, 27, 31, 90, 114, 116, 143, 145, 175, 199, 252, 258, 268, 285, 291, 299, 305, 332, 369, 490, 499, 528, 529, 530, 531, 539, 540, 640, 801, 953, 1002], "n_redund": [25, 27, 31, 90, 116, 143, 145, 252, 258, 285, 291, 299, 369, 413, 490, 528, 530, 539, 801], "logisticregress": [25, 27, 30, 70, 72, 115, 131, 137, 179, 186, 187, 188, 189, 203, 211, 212, 226, 227, 236, 258, 273, 294, 299, 305, 306, 307, 308, 309, 337, 352, 365, 366, 370, 372, 376, 387, 390, 396, 398, 414, 542, 544, 572, 606, 609, 618, 627, 634, 647, 648, 649, 650, 651, 662, 675, 761, 783, 802, 803, 805, 855, 856, 858, 859, 860, 861, 877, 902, 948, 952, 953, 962, 966, 967, 983, 985, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "baselin": [25, 119, 122, 132, 146, 175, 214, 273, 307, 338, 362, 389, 398, 526, 527, 609, 952, 955, 987], "regular": [25, 36, 67, 70, 72, 78, 100, 108, 125, 133, 156, 161, 164, 174, 175, 176, 181, 183, 184, 185, 187, 196, 210, 214, 215, 231, 241, 249, 256, 259, 268, 280, 281, 290, 293, 294, 295, 319, 321, 323, 324, 325, 335, 337, 339, 342, 352, 365, 368, 375, 376, 387, 389, 391, 392, 394, 395, 396, 399, 413, 419, 422, 446, 451, 453, 454, 455, 479, 487, 489, 490, 495, 497, 499, 503, 513, 514, 515, 518, 522, 523, 525, 534, 536, 537, 563, 564, 566, 613, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 668, 708, 723, 768, 769, 770, 786, 797, 828, 829, 832, 851, 870, 871, 875, 876, 877, 893, 941, 942, 944, 945, 946, 949, 951, 957, 958, 962, 965, 966, 967, 974, 976, 982, 983, 985, 989, 994, 995, 996, 998, 999, 1003, 1004, 1006, 1007], "logist": [25, 27, 30, 68, 70, 75, 115, 137, 164, 174, 215, 226, 273, 294, 302, 309, 337, 377, 387, 390, 396, 398, 399, 413, 463, 470, 477, 479, 487, 516, 534, 536, 546, 585, 621, 632, 633, 634, 641, 643, 651, 714, 770, 783, 797, 827, 828, 829, 831, 851, 877, 893, 895, 952, 956, 957, 966, 967, 974, 976, 983, 989, 998, 1001, 1002, 1004, 1005], "guid": [25, 68, 95, 158, 164, 166, 184, 217, 257, 262, 281, 282, 285, 305, 306, 307, 308, 309, 355, 363, 364, 365, 369, 370, 371, 376, 377, 378, 388, 390, 396, 400, 401, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 830, 831, 834, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 903, 953, 980, 987, 994, 995, 996, 997, 999, 1001, 1003, 1004], "gridspec": [25, 27, 64, 240, 371], "calibrationdisplai": [25, 27, 387, 1007, 1008], "lr": [25, 27, 115, 131, 132, 199, 211, 227, 228, 251, 258, 376, 396, 543, 544, 545, 686], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 329], "dark2": [25, 27, 218], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 196, 229, 261, 280, 297, 307, 387, 534, 535, 536, 537, 617, 731, 732, 944, 950, 962, 974, 986, 988, 989, 1006], "grid_posit": [25, 27], "y_prob": [25, 27, 152, 264, 414, 415, 683, 802, 828, 952, 1008], "poorli": [25, 61, 77, 85, 113, 124, 221, 353, 389, 396, 503, 605, 949, 1000], "violat": [25, 324, 372, 375, 377, 610, 894, 959, 966, 968], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 118, 156, 167, 233, 255, 258, 260, 273, 297, 305, 338, 348, 352, 353, 361, 366, 368, 376, 377, 380, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 401, 424, 439, 462, 478, 490, 491, 492, 493, 495, 507, 508, 510, 512, 514, 515, 521, 522, 526, 527, 579, 582, 583, 600, 615, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 678, 679, 691, 709, 710, 728, 730, 766, 772, 796, 800, 802, 804, 805, 843, 847, 848, 849, 851, 854, 855, 856, 857, 859, 860, 861, 864, 872, 873, 874, 875, 876, 901, 941, 944, 946, 948, 949, 952, 953, 954, 957, 959, 962, 967, 968, 988, 989, 994, 995, 1000, 1002, 1004], "overli": [25, 26, 185, 260, 348, 394, 952], "typic": [25, 27, 99, 110, 172, 196, 214, 231, 258, 262, 264, 265, 281, 282, 307, 324, 338, 352, 358, 359, 360, 363, 366, 367, 373, 376, 377, 387, 388, 389, 390, 393, 394, 396, 397, 399, 419, 422, 424, 470, 526, 528, 530, 531, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 604, 613, 615, 618, 629, 630, 631, 646, 657, 658, 686, 838, 849, 906, 907, 937, 941, 945, 948, 949, 951, 952, 953, 954, 958, 960, 976, 987, 1003, 1007], "transpos": [25, 84, 255, 401, 501, 513, 515, 522, 635, 636, 637, 638, 761, 907, 938, 952, 964, 986, 994, 1008], "nearli": [25, 167, 258, 360, 377, 388, 737, 952, 955, 959, 964, 987], "ref": [25, 257, 365, 371, 372, 942, 1000], "sigmoid_regressor": 25, "albeit": 25, "strongli": [25, 27, 81, 85, 98, 119, 123, 166, 178, 211, 261, 337, 365, 379, 380, 387, 396, 474, 633, 709, 766, 948, 949, 989, 1003], "plenti": 25, "greater": [25, 91, 112, 166, 167, 213, 230, 243, 261, 273, 281, 282, 342, 352, 361, 369, 377, 387, 389, 392, 396, 417, 421, 424, 427, 438, 447, 511, 516, 532, 533, 534, 535, 536, 537, 539, 540, 541, 568, 569, 572, 585, 586, 603, 615, 617, 620, 639, 641, 642, 646, 651, 652, 653, 667, 683, 686, 694, 708, 709, 712, 715, 761, 766, 768, 769, 801, 813, 814, 821, 822, 828, 829, 834, 849, 860, 864, 867, 878, 879, 880, 881, 907, 921, 941, 947, 948, 949, 952, 953, 958, 959, 962, 967, 968, 997, 1002, 1005, 1007, 1008, 1009], "exploit": [25, 273, 953, 973, 997], "precision_scor": [25, 262, 682, 760, 952, 994, 996, 997, 998, 999, 1004], "recall_scor": [25, 262, 393, 682, 757, 952, 994, 996, 997, 998, 999, 1004], "f1_score": [25, 262, 316, 360, 711, 952, 994, 996, 997, 998, 999, 1003, 1004], "log_loss": [25, 26, 150, 316, 337, 396, 532, 534, 536, 539, 621, 651, 878, 880, 941, 952, 966, 996, 998, 1000, 1008, 1009], "roc_auc_scor": [25, 255, 264, 265, 305, 676, 680, 681, 682, 762, 952, 996, 997, 1002, 1004, 1008, 1009], "score_nam": [25, 37, 338], "score_df": 25, "set_index": [25, 122, 154, 185, 214, 255, 338], "decim": [25, 155, 275, 446, 447, 883, 1001, 1002], "098921": 25, "323178": 25, "872009": 25, "851408": 25, "861586": 25, "863157": 25, "117608": 25, "782247": 25, "857400": 25, "875941": 25, "866571": 25, "865055": 25, "098332": 25, "368412": 25, "883065": 25, "836224": 25, "859007": 25, "862690": 25, "108880": 25, "368896": 25, "861106": 25, "871277": 25, "866161": 25, "865300": 25, "refin": [25, 81, 387, 447, 683, 952, 987], "alter": [25, 162, 377, 702, 703, 711, 756, 757, 760, 999, 1003, 1006], "uncertainti": [25, 149, 156, 175, 389, 542, 543, 618, 831, 942, 964], "linearsvc": [25, 27, 69, 71, 142, 143, 164, 172, 230, 252, 254, 262, 299, 305, 319, 321, 332, 335, 337, 352, 366, 370, 387, 397, 398, 413, 487, 542, 551, 614, 618, 627, 647, 648, 649, 650, 651, 662, 708, 715, 794, 799, 871, 872, 875, 877, 948, 952, 953, 994, 995, 996, 1000, 1002, 1005], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 53, 214, 228, 297, 324, 610, 651, 714, 841, 962, 998, 1005, 1006], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 131, 413, 878, 880], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 66, 100, 166, 185, 262, 377, 387, 391, 393, 398, 419, 422, 424, 444, 513, 515, 522, 538, 686, 817, 874, 994], "behavior": [25, 27, 37, 39, 52, 129, 157, 161, 164, 166, 196, 214, 246, 248, 258, 266, 271, 293, 297, 299, 324, 348, 353, 359, 362, 365, 366, 368, 372, 373, 377, 387, 389, 393, 397, 415, 511, 526, 541, 641, 642, 643, 651, 652, 653, 702, 703, 756, 757, 760, 771, 772, 775, 786, 787, 788, 789, 790, 808, 907, 941, 948, 953, 958, 962, 976, 978, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "hing": [25, 203, 206, 208, 263, 321, 322, 326, 377, 641, 651, 708, 870, 877, 948, 966, 967, 987], "focus": [25, 77, 185, 360, 375, 396, 949, 962, 972], "far": [25, 59, 81, 119, 150, 156, 166, 196, 214, 324, 337, 339, 365, 373, 399, 694, 851, 927, 957, 958, 967, 976, 985], "awai": [25, 26, 27, 59, 77, 118, 149, 150, 154, 329, 360, 387, 399, 603, 813, 814, 821, 822, 951, 967, 985], "shown": [25, 45, 48, 88, 110, 112, 122, 158, 186, 194, 214, 222, 225, 230, 242, 245, 255, 257, 258, 261, 280, 292, 293, 297, 298, 299, 312, 337, 338, 365, 369, 378, 389, 390, 393, 394, 395, 397, 399, 414, 607, 673, 675, 676, 687, 770, 783, 882, 884, 947, 948, 949, 952, 955, 960, 962, 966, 967, 968, 987, 998, 1003, 1004, 1005, 1008], "varieti": [25, 161, 242, 324, 372, 375, 388, 389, 391, 396, 397, 618, 955, 968, 972, 976, 996, 1009], "niculescu": [25, 27, 387, 413, 415], "mizil": [25, 27, 387, 413, 415], "caruana": [25, 27, 387, 413, 415], "144944": 25, "465647": 25, "872201": 25, "851772": 25, "861865": 25, "863420": 25, "099827": 25, "374535": 25, "853032": 25, "878041": 25, "865356": 25, "863306": 25, "098760": 25, "321306": 25, "873703": 25, "848723": 25, "861032": 25, "862957": 25, "deal": [25, 70, 161, 166, 221, 339, 365, 369, 388, 390, 397, 398, 399, 449, 470, 677, 682, 736, 760, 837, 907, 948, 976, 984, 997], "situat": [25, 44, 56, 71, 166, 202, 225, 258, 365, 372, 391, 393, 394, 396, 503, 509, 557, 844, 847, 858, 946, 948, 954, 955, 965, 968, 1002], "supervis": [25, 27, 37, 54, 57, 85, 104, 115, 137, 138, 218, 232, 242, 255, 284, 307, 315, 318, 338, 352, 355, 360, 366, 376, 377, 387, 389, 392, 393, 394, 396, 397, 399, 413, 415, 439, 462, 478, 479, 528, 563, 565, 568, 569, 609, 651, 702, 771, 772, 775, 776, 777, 778, 779, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 820, 830, 831, 835, 865, 866, 867, 875, 946, 949, 952, 954, 955, 958, 963, 967, 968, 969, 972, 973, 975, 978, 979, 981, 987, 989, 994, 1000, 1006], "icml": [25, 27, 387, 389, 397, 413, 415, 806, 808, 827, 952, 954, 966, 971], "2005": [25, 27, 80, 362, 387, 413, 415, 820, 948, 955, 965], "582": [25, 28, 871], "plot_calibration_curv": [25, 28], "simplex": [26, 645, 768, 846], "arrow": [26, 1008], "green": [26, 34, 80, 91, 113, 125, 126, 131, 149, 172, 222, 292, 298, 302, 306, 377, 953, 1002, 1003, 1005, 1006], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 58, 59, 61, 62, 63, 208, 225, 243, 300, 326, 487], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 55, 114, 115, 116, 117, 118, 131, 168, 169, 236, 237, 252, 267, 305, 307, 337, 348, 376, 377, 387, 396, 398, 532, 533, 534, 536, 541, 542, 544, 773, 774, 801, 880, 941, 953, 976, 991, 998, 999, 1002, 1003, 1004, 1007, 1008, 1009], "concaten": [26, 39, 50, 60, 68, 75, 80, 112, 157, 164, 175, 178, 218, 225, 234, 240, 244, 262, 264, 280, 294, 301, 313, 337, 390, 439, 442, 479, 484, 506, 512, 516, 517, 574, 754, 770, 830, 831, 833, 836, 875, 953, 982, 995], "randomforestclassifierrandomforestclassifi": [26, 116, 117, 168, 236, 267], "cal_clf": 26, "prefit": [26, 377, 387, 398, 413, 542, 543, 572, 973, 1006, 1007, 1008], "x27": [26, 70, 109, 115, 129, 132, 143, 166, 168, 226, 227, 235, 236, 253, 255, 256, 262, 267, 294, 306, 307, 309, 314], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1006], "unit": [26, 69, 79, 96, 166, 172, 196, 214, 280, 293, 297, 338, 360, 362, 365, 366, 370, 372, 373, 394, 397, 401, 439, 463, 464, 494, 499, 507, 508, 509, 516, 517, 564, 565, 566, 586, 619, 620, 633, 634, 651, 660, 674, 743, 818, 827, 828, 829, 835, 841, 843, 847, 849, 851, 856, 857, 858, 860, 861, 870, 871, 948, 950, 951, 957, 962, 968, 972, 985, 998, 1002, 1008], "mid": [26, 324, 952, 954], "frac": [26, 79, 80, 255, 262, 308, 386, 387, 389, 391, 394, 395, 396, 397, 399, 408, 438, 440, 456, 457, 458, 529, 531, 533, 535, 537, 540, 543, 545, 586, 590, 594, 597, 598, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 653, 654, 655, 671, 728, 742, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 944, 946, 947, 948, 949, 950, 952, 954, 955, 956, 957, 959, 960, 962, 964, 966, 967, 968, 985], "shrink": [26, 81, 95, 123, 191, 194, 217, 244, 297, 394, 534, 535, 651, 653, 818, 828, 829, 872, 873, 874, 875, 876, 955, 967, 985], "perfectli": [26, 37, 258, 269, 379, 389, 396, 414, 542, 581, 678, 679, 689, 691, 709, 710, 730, 759, 766, 844, 947, 949, 952, 967, 1007, 1008], "head": [26, 70, 115, 128, 154, 166, 184, 185, 214, 305, 365, 372, 394, 976, 999, 1000, 1009], "incur": [26, 594, 870, 967, 1002], "correct": [26, 27, 80, 145, 157, 166, 185, 196, 214, 240, 249, 255, 262, 324, 326, 337, 348, 362, 365, 366, 368, 378, 387, 388, 389, 393, 394, 397, 425, 431, 444, 449, 462, 476, 478, 610, 642, 651, 653, 677, 678, 682, 686, 687, 692, 695, 696, 697, 701, 702, 703, 707, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 756, 757, 758, 760, 765, 767, 801, 808, 816, 842, 937, 948, 952, 953, 967, 978, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "decreas": [26, 39, 46, 57, 65, 74, 126, 157, 166, 180, 204, 214, 228, 229, 257, 262, 268, 291, 299, 305, 342, 352, 354, 365, 387, 389, 396, 417, 421, 438, 496, 509, 510, 516, 532, 533, 534, 535, 536, 537, 539, 540, 541, 610, 611, 612, 651, 652, 653, 680, 686, 700, 755, 762, 828, 829, 878, 879, 880, 881, 941, 943, 948, 949, 952, 955, 956, 960, 966, 967, 976, 985, 996, 1001, 1004, 1007], "cal_scor": 26, "290": [26, 190, 215, 313, 663, 664, 668, 949], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 131], "p2": [26, 131, 214], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 387, 413], "this_p": 26, "sure": [26, 55, 189, 202, 232, 348, 352, 353, 359, 363, 364, 365, 366, 368, 369, 372, 375, 387, 390, 397, 467, 498, 624, 890, 891, 901, 938, 942, 949, 966, 973, 1001, 1002, 1004], "renorm": 26, "step": [26, 33, 42, 54, 57, 66, 69, 70, 72, 73, 80, 85, 98, 103, 115, 118, 129, 143, 144, 145, 151, 154, 166, 168, 196, 204, 214, 226, 227, 230, 235, 246, 253, 256, 262, 277, 283, 291, 294, 299, 302, 306, 309, 317, 320, 324, 338, 339, 342, 348, 352, 355, 360, 363, 364, 365, 366, 368, 369, 372, 375, 377, 386, 387, 389, 391, 392, 394, 396, 397, 398, 418, 511, 512, 513, 514, 521, 538, 563, 564, 566, 568, 569, 572, 581, 602, 619, 641, 642, 651, 653, 654, 669, 675, 768, 769, 770, 773, 774, 783, 803, 804, 805, 827, 828, 829, 831, 832, 834, 870, 871, 872, 873, 875, 876, 906, 907, 923, 927, 942, 948, 951, 956, 957, 962, 966, 968, 969, 972, 975, 983, 987, 994, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007], "multiclass": [26, 30, 164, 174, 215, 232, 257, 262, 273, 321, 333, 355, 360, 361, 366, 367, 369, 377, 389, 396, 413, 427, 437, 463, 534, 536, 542, 543, 546, 569, 577, 585, 606, 607, 608, 633, 634, 641, 643, 648, 649, 650, 651, 682, 702, 703, 707, 708, 711, 716, 727, 756, 757, 760, 761, 765, 770, 771, 773, 774, 775, 783, 787, 791, 792, 793, 794, 795, 796, 797, 798, 838, 870, 872, 875, 946, 948, 963, 967, 968, 974, 975, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1009], "argmax": [26, 103, 254, 268, 366, 396, 544, 799, 878, 967, 1007], "988": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 387, 770, 773, 774, 783, 838], "four": [27, 142, 157, 172, 178, 197, 242, 243, 313, 321, 361, 365, 377, 532, 539, 693, 878, 880, 896, 948, 950, 951, 952, 959, 962, 971], "naiv": [27, 31, 127, 255, 257, 302, 337, 339, 355, 360, 396, 397, 413, 519, 806, 807, 808, 809, 810, 946, 947, 952, 955, 974, 989, 994, 995, 996, 997, 1002, 1004, 1007, 1009], "bay": [27, 31, 113, 127, 149, 185, 257, 302, 337, 355, 360, 394, 396, 397, 399, 511, 524, 525, 631, 806, 807, 808, 809, 810, 946, 947, 948, 974, 987, 989, 994, 995, 996, 997, 1002, 1004, 1007, 1009], "train_sampl": [27, 211, 212], "against": [27, 37, 85, 105, 113, 123, 141, 172, 187, 188, 205, 213, 264, 305, 324, 360, 365, 378, 387, 389, 393, 397, 414, 484, 517, 523, 526, 651, 653, 728, 730, 761, 772, 776, 778, 796, 800, 944, 948, 952, 953, 955, 967, 971, 978], "rfc": [27, 237, 305, 991], "contrast": [27, 104, 198, 231, 255, 284, 302, 338, 377, 387, 389, 390, 392, 396, 399, 424, 427, 437, 594, 618, 783, 827, 942, 945, 947, 948, 952, 955, 957, 960, 962, 965, 966, 968, 1004], "push": [27, 365, 368, 387, 975], "equat": [27, 332, 365, 389, 394, 396, 532, 533, 534, 535, 539, 540, 541, 565, 602, 657, 658, 662, 736, 851, 878, 879, 880, 881, 942, 949, 957, 1002], "twice": [27, 267, 337, 339, 366, 399, 594, 705, 909, 1003], "approx": [27, 95, 230, 394, 396, 397, 952, 959, 966], "rare": [27, 348, 368, 375, 377, 379, 387, 389, 393, 564, 870, 895, 920, 962, 976, 1001, 1002, 1003, 1007], "explan": [27, 85, 352, 364, 365, 387, 397, 941, 951, 953, 968, 976, 997], "bag": [27, 69, 108, 114, 124, 133, 164, 168, 338, 339, 361, 387, 491, 492, 493, 530, 531, 532, 533, 534, 535, 538, 539, 540, 775, 797, 879, 950, 953, 974, 989, 994, 996, 997, 998, 999, 1000, 1007, 1008], "underli": [27, 55, 79, 128, 146, 197, 260, 279, 280, 345, 353, 375, 377, 379, 385, 387, 391, 393, 394, 395, 396, 398, 399, 413, 426, 427, 428, 437, 439, 440, 446, 447, 453, 499, 542, 543, 544, 545, 568, 569, 572, 577, 633, 643, 655, 666, 670, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 816, 870, 878, 879, 880, 881, 919, 948, 949, 953, 958, 965, 967, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007], "restrict": [27, 65, 66, 161, 164, 213, 290, 295, 366, 370, 375, 387, 389, 397, 440, 467, 477, 507, 556, 585, 628, 629, 630, 631, 633, 657, 658, 681, 687, 755, 761, 762, 797, 819, 821, 822, 823, 825, 827, 828, 829, 831, 856, 952, 968, 988, 989, 994, 996, 1004, 1006], "interv": [27, 108, 133, 156, 164, 196, 197, 198, 214, 255, 360, 368, 377, 387, 393, 396, 399, 414, 415, 491, 492, 493, 532, 533, 535, 537, 539, 540, 610, 611, 613, 652, 715, 721, 723, 774, 790, 797, 834, 836, 850, 872, 873, 874, 894, 944, 948, 952, 962, 968, 1001, 1005], "move": [27, 118, 256, 294, 324, 364, 365, 370, 387, 389, 524, 525, 546, 547, 548, 550, 551, 552, 986, 994, 995, 999, 1002, 1004, 1007, 1008], "characterist": [27, 44, 61, 146, 154, 164, 225, 248, 252, 271, 297, 348, 360, 362, 369, 387, 393, 399, 478, 479, 598, 613, 676, 680, 682, 700, 755, 761, 762, 788, 793, 797, 800, 854, 875, 948], "difficult": [27, 166, 204, 365, 372, 387, 394, 396, 528, 529, 534, 536, 537, 947, 949, 951, 955, 957, 959, 968, 976, 994, 1008], "bayesian": [27, 54, 164, 174, 184, 215, 239, 241, 245, 246, 247, 394, 413, 499, 503, 507, 619, 620, 631, 632, 768, 769, 832, 834, 846, 851, 941, 972, 974, 988, 989, 1000, 1007], "domingo": [27, 761, 952], "pazzani": 27, "proc": [27, 78, 387, 391, 397, 425, 450, 664, 668, 806, 941, 949, 954, 958], "13th": 27, "intl": [27, 393], "1996": [27, 389, 396, 400, 420, 491, 492, 493, 530, 531, 962], "zadrozni": [27, 387, 413, 651], "bianca": 27, "charl": [27, 362, 737, 994, 997, 1000, 1004, 1006], "elkan": [27, 306, 387, 413, 419, 422, 434, 651, 1000, 1004, 1005, 1007, 1008], "vol": [27, 157, 261, 362, 389, 449, 534, 535, 603, 610, 620, 639, 660, 661, 768, 796, 808, 942, 954, 955], "2001": [27, 154, 168, 254, 386, 389, 396, 413, 426, 427, 428, 437, 486, 534, 535, 539, 540, 603, 609, 614, 620, 666, 671, 708, 761, 863, 895, 942, 948, 952, 958, 960, 964, 967], "438": [27, 28, 166, 960], "plot_compare_calibr": [27, 28], "421": [28, 699, 729, 952], "auto_examples_calibr": 28, "calibr": [28, 30, 214, 355, 377, 487, 490, 539, 544, 633, 651, 683, 702, 714, 757, 760, 761, 797, 809, 867, 870, 941, 948, 952, 965, 967, 974, 989, 991, 998, 1000], "discrimin": [29, 35, 104, 141, 143, 164, 172, 211, 218, 232, 284, 355, 362, 396, 450, 487, 524, 525, 541, 756, 820, 941, 949, 952, 955, 966, 968, 974, 985, 989, 997], "ellipsoid": [29, 35, 164, 239, 240, 247, 524, 525, 768, 769, 946, 951], "ledoit": [29, 35, 76, 77, 81, 82, 164, 448, 450, 454, 487, 524, 946], "wolf": [29, 35, 76, 77, 81, 82, 164, 448, 450, 454, 487, 524, 946, 1001], "oa": [29, 35, 76, 82, 164, 391, 444, 445, 448, 449, 451, 452, 487, 524, 770, 946], "hand": [29, 35, 85, 88, 97, 100, 122, 141, 154, 164, 166, 167, 189, 203, 221, 228, 229, 231, 252, 324, 352, 359, 360, 362, 365, 366, 370, 372, 376, 383, 394, 395, 396, 398, 477, 618, 687, 761, 797, 875, 941, 945, 948, 952, 954, 956, 960, 965, 967, 976, 978, 981, 984, 985], "built": [30, 85, 111, 118, 120, 168, 204, 258, 288, 305, 343, 352, 362, 363, 365, 366, 368, 370, 372, 373, 375, 376, 377, 380, 383, 388, 389, 390, 393, 396, 398, 421, 478, 528, 529, 530, 531, 536, 537, 563, 564, 568, 572, 614, 615, 616, 617, 618, 621, 622, 627, 633, 635, 636, 637, 638, 647, 648, 649, 650, 656, 773, 774, 780, 802, 805, 811, 812, 880, 881, 936, 948, 952, 953, 965, 966, 968, 972, 976, 987, 994, 997, 998, 1000, 1006], "enabl": [30, 50, 71, 120, 167, 204, 219, 299, 306, 308, 309, 333, 353, 363, 365, 369, 372, 375, 377, 380, 385, 388, 389, 390, 394, 396, 397, 424, 509, 510, 516, 534, 535, 536, 537, 538, 553, 554, 555, 565, 566, 577, 585, 768, 769, 770, 773, 831, 832, 844, 867, 870, 871, 872, 873, 874, 875, 876, 885, 915, 942, 944, 949, 951, 952, 955, 962, 963, 966, 967, 973, 976, 994, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "troubl": [30, 397], "ovr": [30, 188, 211, 264, 273, 305, 333, 633, 634, 761, 800, 870, 872, 875, 948, 952, 953, 967, 994, 999, 1000, 1002, 1003, 1004, 1008, 1009], "gpc": [30, 148, 159, 164, 479, 585, 586, 588, 589, 594, 595, 597, 598, 677, 714, 974, 989, 1004], "accuracy_scor": [30, 110, 150, 259, 302, 315, 337, 348, 376, 682, 702, 703, 707, 711, 715, 756, 757, 760, 765, 767, 941, 952, 995, 996, 997, 1006], "gaussian_process": [30, 31, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 355, 377, 399, 618, 953, 997, 1000, 1001], "gaussianprocessclassifi": [30, 31, 150, 151, 152, 153, 157, 377, 399, 586, 594, 595, 597, 598, 953, 1000, 1002, 1004, 1008], "iri": [30, 41, 45, 73, 87, 92, 93, 99, 106, 107, 108, 120, 130, 133, 138, 142, 148, 159, 164, 174, 179, 189, 215, 242, 249, 260, 261, 264, 265, 278, 286, 292, 307, 311, 318, 319, 320, 324, 327, 335, 341, 346, 347, 358, 359, 376, 389, 390, 393, 394, 396, 470, 479, 516, 524, 528, 532, 539, 585, 597, 606, 651, 770, 783, 865, 866, 867, 870, 875, 878, 882, 883, 884, 941, 942, 946, 951, 955, 959, 962, 965, 966, 967, 968, 978, 985, 986, 989, 1007], "load_iri": [30, 41, 45, 73, 89, 99, 102, 104, 106, 118, 120, 130, 138, 142, 151, 179, 189, 205, 242, 249, 260, 261, 262, 264, 265, 278, 283, 286, 292, 305, 307, 317, 320, 321, 324, 327, 343, 346, 376, 383, 389, 390, 393, 396, 398, 536, 542, 577, 585, 594, 595, 597, 598, 606, 633, 634, 761, 770, 773, 774, 783, 799, 820, 865, 866, 867, 878, 880, 882, 883, 884, 942, 947, 952, 953, 954, 955, 959, 962, 968, 978, 984, 985, 986, 1000, 1002, 1005], "saga": [30, 187, 211, 212, 633, 634, 647, 649, 662, 783, 948, 1001, 1003], "multi_class": [30, 188, 211, 264, 305, 544, 585, 633, 634, 761, 805, 870, 948, 953, 967, 994, 998, 1002, 1007, 1009], "n_classifi": [30, 544, 545], "xx": [30, 34, 42, 57, 79, 118, 122, 125, 127, 138, 151, 152, 153, 167, 183, 203, 206, 207, 208, 209, 210, 222, 225, 232, 244, 281, 291, 299, 300, 317, 323, 324, 328, 329, 330, 333, 334, 368], "yy": [30, 34, 42, 57, 79, 118, 125, 127, 138, 151, 153, 167, 203, 207, 208, 209, 210, 222, 225, 232, 281, 291, 299, 300, 317, 323, 324, 328, 329, 330, 333, 334], "xfull": 30, "imshow_handl": 30, "04": [30, 40, 42, 54, 66, 67, 74, 97, 105, 133, 147, 154, 159, 166, 170, 177, 195, 214, 223, 229, 232, 240, 246, 255, 256, 268, 288, 289, 302, 303, 331, 362, 396, 398, 446, 447, 761, 770, 783, 948, 952, 956, 966], "cax": [30, 152, 266], "orient": [30, 95, 166, 217, 297, 377, 882, 949], "horizont": [30, 95, 217, 230, 297, 300, 369, 377, 439, 490, 672], "378": [30, 35, 166, 396, 987, 994], "plot_classification_prob": [30, 35], "salt": [31, 230, 299, 1008], "convei": [31, 222, 299, 985], "particularli": [31, 69, 70, 73, 105, 127, 197, 227, 255, 299, 306, 334, 348, 352, 365, 373, 377, 389, 390, 392, 395, 397, 470, 808, 907, 920, 921, 948, 949, 952, 954, 973, 976, 986, 994, 999, 1001, 1002, 1008], "linearli": [31, 100, 112, 166, 175, 210, 218, 225, 299, 328, 337, 352, 362, 375, 394, 396, 415, 490, 617, 681, 952, 955, 958, 967, 985, 1001], "semi": [31, 232, 299, 307, 318, 355, 360, 377, 462, 479, 510, 563, 565, 651, 702, 797, 831, 835, 865, 866, 867, 875, 950, 955, 958, 974, 989, 994, 1006], "transpar": [31, 299, 937, 976], "ga\u00ebl": [31, 45, 51, 53, 72, 88, 89, 102, 179, 193, 194, 299, 328, 329, 378, 976], "modifi": [31, 45, 51, 53, 72, 74, 88, 89, 179, 193, 194, 206, 217, 218, 219, 242, 329, 334, 363, 365, 366, 368, 377, 396, 399, 402, 419, 422, 429, 434, 443, 456, 457, 458, 459, 469, 485, 556, 585, 586, 588, 594, 651, 653, 664, 668, 702, 703, 741, 756, 757, 760, 888, 948, 965, 966, 973, 984, 988, 989, 994, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009], "listedcolormap": [31, 118, 278, 283, 286, 291, 299], "make_moon": [31, 44, 61, 225, 255, 291, 292, 299, 361, 941, 1001, 1005], "make_circl": [31, 44, 61, 100, 127, 222, 291, 292, 299, 314, 361, 995, 1002, 1005], "neural_network": [31, 164, 167, 235, 290, 291, 292, 293, 294, 354, 355, 375, 953, 956, 996], "mlpclassifi": [31, 164, 290, 291, 293, 295, 354, 477, 479, 489, 497, 546, 827, 829, 841, 953, 956, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "kneighborsclassifi": [31, 130, 137, 277, 278, 283, 284, 307, 309, 337, 396, 577, 814, 818, 819, 820, 821, 822, 953, 955, 985, 994, 1004, 1006, 1007, 1008, 1009], "decisiontreeclassifi": [31, 109, 110, 112, 118, 130, 259, 342, 343, 346, 377, 396, 528, 530, 532, 534, 536, 539, 606, 879, 880, 882, 883, 884, 942, 953, 968, 995, 996, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008], "adaboostclassifi": [31, 109, 110, 112, 118, 396, 529, 534, 536, 996, 997, 1000, 1001, 1003, 1004, 1007, 1009], "discriminant_analysi": [31, 33, 34, 104, 218, 284, 348, 355, 385, 511, 820, 946, 953, 994, 997, 998, 999, 1000, 1001], "quadraticdiscriminantanalysi": [31, 34, 524, 946, 953, 955, 994, 999, 1001, 1009], "decisionboundarydisplai": [31, 55, 112, 130, 179, 188, 205, 258, 278, 283, 286, 320, 321, 322, 325, 326, 343, 1008], "net": [31, 164, 174, 187, 207, 215, 268, 370, 388, 393, 446, 447, 453, 476, 499, 532, 533, 534, 535, 539, 540, 541, 621, 622, 627, 632, 633, 634, 635, 636, 637, 638, 643, 651, 653, 656, 659, 758, 827, 878, 879, 880, 881, 941, 952, 957, 966, 974, 976, 989, 994, 999, 1003, 1004, 1006], "adaboost": [31, 108, 118, 133, 164, 494, 495, 528, 529, 534, 677, 767, 797, 878, 879, 974, 989, 996], "qda": [31, 34, 362, 524, 525, 974, 989, 999], "025": [31, 198, 252, 338, 665, 669], "n_clusters_per_class": [31, 90, 114, 143, 145, 252, 285, 291, 299, 369, 490], "uniform": [31, 37, 121, 122, 125, 142, 150, 155, 158, 175, 176, 210, 222, 225, 228, 263, 278, 281, 282, 287, 291, 298, 300, 301, 309, 323, 366, 369, 389, 414, 415, 526, 544, 545, 585, 586, 603, 614, 624, 625, 629, 643, 651, 652, 653, 674, 695, 696, 701, 718, 719, 721, 723, 724, 726, 758, 774, 781, 783, 806, 807, 810, 813, 814, 821, 822, 836, 848, 850, 859, 895, 909, 941, 942, 951, 952, 955, 1000, 1002, 1004, 1008], "linearly_separ": [31, 291], "ds_cnt": [31, 299, 300], "rdbu": [31, 95, 212, 291, 324, 329], "cm_bright": [31, 291, 299], "ff0000": [31, 283, 291], "0000ff": [31, 283, 291], "ep": [31, 44, 46, 49, 64, 179, 181, 220, 229, 375, 389, 400, 420, 425, 430, 453, 606, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 656, 657, 658, 659, 665, 669, 688, 714, 823, 862, 863, 864, 964, 1009], "lstrip": [31, 44, 61, 225, 291, 299], "822": [31, 35, 723], "plot_classifier_comparison": [31, 35, 299], "8x8": [32, 88, 187, 229, 284, 294, 362, 477, 984], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 57, 71, 72, 88, 136, 137, 144, 187, 203, 218, 229, 230, 253, 254, 257, 263, 270, 277, 279, 284, 292, 294, 312, 313, 370, 390, 421, 507, 508, 509, 510, 574, 575, 613, 614, 643, 663, 664, 665, 666, 978, 982, 983, 984, 985, 986, 1000, 1005], "set_axis_off": 32, "gray_r": [32, 88, 98, 152, 218, 294, 312, 313, 984], "entir": [32, 161, 196, 204, 294, 297, 306, 346, 348, 359, 366, 377, 383, 389, 393, 395, 397, 447, 466, 509, 563, 564, 565, 566, 622, 626, 628, 630, 633, 634, 636, 638, 640, 641, 643, 651, 657, 658, 707, 767, 799, 800, 803, 828, 830, 831, 844, 855, 856, 858, 859, 860, 861, 921, 941, 942, 952, 966, 968, 985, 1003, 1004], "97": [32, 105, 169, 214, 232, 245, 246, 294, 313, 324, 362, 370, 376, 393, 633, 953, 962, 994], "98": [32, 34, 42, 44, 53, 54, 61, 63, 81, 98, 225, 245, 253, 291, 294, 299, 302, 313, 362, 368, 393, 396, 634, 806, 947, 954, 982, 987], "91": [32, 51, 154, 294, 312, 313, 396, 947, 983, 987], "92": [32, 34, 50, 98, 143, 253, 263, 294, 312, 313, 324, 360, 362, 513, 515, 522, 537, 572, 770, 783, 947, 987], "899": [32, 167, 253], "confus": [32, 164, 248, 271, 312, 313, 337, 377, 479, 606, 672, 687, 689, 692, 702, 703, 711, 727, 757, 760, 797, 875, 987, 994, 995, 999, 1003, 1004, 1006, 1007, 1008, 1009], "disp": [32, 112, 126, 249, 258, 306, 321, 326, 414, 606, 672, 675, 820], "from_predict": [32, 234, 262, 308, 312, 337, 371, 414, 606, 672, 673, 675, 676, 692, 700, 755, 757, 760, 761, 762, 952, 991, 1007, 1008, 1009], "figure_": [32, 167, 235, 305, 307, 371, 414, 606, 607, 672, 673, 675, 676], "confusion_matrix": [32, 226, 249, 312, 313, 672, 687, 727, 794, 952, 987, 995, 1000, 1001, 1004, 1005, 1007], "536": [32, 35, 154], "plot_digits_classif": [32, 35], "oracl": [33, 196, 214, 402, 444, 445, 448, 449, 450, 451, 946, 994], "shrinkag": [33, 76, 78, 81, 82, 103, 124, 164, 286, 402, 444, 445, 448, 449, 450, 451, 452, 454, 455, 514, 518, 524, 536, 537, 770, 948, 974, 989, 994, 998, 999, 1001], "lineardiscriminantanalysi": [33, 34, 104, 218, 284, 348, 385, 511, 525, 820, 946, 953, 955, 994, 997, 998, 999, 1000, 1001, 1003, 1006, 1008, 1009], "200": [33, 34, 44, 50, 54, 59, 74, 98, 112, 120, 122, 128, 153, 182, 191, 197, 200, 201, 202, 208, 213, 218, 236, 240, 256, 262, 264, 265, 286, 289, 297, 300, 314, 323, 324, 345, 348, 360, 375, 394, 396, 401, 416, 429, 443, 446, 447, 508, 509, 510, 513, 514, 515, 518, 522, 559, 624, 626, 646, 654, 667, 783, 828, 829, 868, 872, 873, 874, 875, 876, 967], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 130, 131, 396, 544], "lsqr": [33, 524, 647, 649, 662, 946, 995, 1001, 1008], "clf2": [33, 130, 131, 366, 383, 396, 544], "store_precis": [33, 78, 444, 445, 448, 449, 450, 451], "assume_cent": [33, 78, 391, 402, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454], "clf3": [33, 130, 131, 366, 396, 544], "covariance_estim": [33, 524, 946, 1006], "features_samples_ratio": 33, "navi": [33, 69, 78, 99, 104, 105, 128, 175, 199, 207, 220, 241, 242, 243, 245, 246, 262, 264, 270, 280, 287, 314, 332, 345], "gold": [33, 190, 197, 199, 202, 206, 210, 213, 241, 246, 262, 281, 323, 370], "520": [33, 35, 603, 820, 942, 955], "plot_lda": [33, 35], "doubl": [34, 267, 365, 377, 394, 399, 513, 515, 522, 674, 811, 812, 822, 936, 942, 967, 968, 994, 1004, 1005], "deviat": [34, 60, 79, 113, 116, 117, 118, 146, 149, 154, 156, 158, 166, 175, 202, 252, 253, 254, 255, 256, 258, 281, 282, 297, 302, 357, 361, 362, 369, 373, 377, 387, 393, 396, 425, 447, 476, 486, 487, 488, 489, 491, 492, 493, 497, 499, 500, 505, 527, 569, 586, 609, 619, 620, 646, 697, 725, 817, 840, 841, 851, 859, 860, 861, 948, 952, 958, 962, 985, 1000, 1001, 1002, 1005, 1006, 1007], "own": [34, 214, 275, 277, 314, 338, 353, 359, 367, 368, 369, 372, 373, 380, 388, 389, 401, 416, 429, 508, 532, 539, 621, 768, 769, 813, 814, 815, 817, 819, 821, 822, 823, 878, 880, 896, 901, 920, 948, 954, 955, 958, 967, 976, 986, 987, 1001, 1002, 1004], "mpl": [34, 240, 241, 242, 245, 246, 297], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "dataset_fixed_cov": 34, "dim": [34, 205, 229, 278, 283, 284, 286, 320, 321, 502, 674], "dataset_cov": 34, "matric": [34, 40, 79, 81, 95, 201, 241, 242, 244, 246, 275, 288, 306, 316, 337, 338, 357, 359, 366, 367, 375, 376, 377, 388, 389, 390, 391, 392, 394, 397, 398, 404, 425, 426, 428, 439, 448, 456, 457, 458, 509, 510, 513, 515, 516, 519, 522, 524, 525, 530, 531, 538, 541, 556, 557, 564, 618, 633, 639, 647, 649, 662, 727, 733, 741, 747, 751, 752, 753, 754, 763, 768, 769, 797, 815, 818, 823, 834, 838, 840, 843, 846, 848, 849, 851, 853, 855, 857, 859, 860, 861, 862, 863, 872, 873, 875, 876, 886, 907, 913, 918, 923, 925, 926, 942, 946, 949, 950, 951, 953, 955, 956, 964, 966, 967, 972, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "linalg": [34, 54, 77, 78, 81, 101, 103, 105, 182, 240, 241, 242, 245, 246, 365, 370, 394, 426, 427, 428, 437, 507, 510, 516, 519, 632, 647, 649, 662, 666, 670], "plot_data": 34, "fig_index": 34, "splot": [34, 241, 245, 246], "tp": [34, 389, 686, 692, 704, 755, 756, 757, 760, 882, 952], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 166, 324, 360], "000099": 34, "pcolormesh": [34, 127, 138, 179, 278, 283, 320, 324, 328, 606], "white": [34, 57, 59, 95, 125, 154, 166, 210, 217, 281, 294, 299, 317, 323, 394, 397, 399, 600, 968, 994, 997, 1000, 1004, 1008], "means_": [34, 240, 241, 242, 243, 245, 246, 524, 525, 768, 769], "yellow": [34, 91, 324, 953], "markers": [34, 49, 57, 60, 62, 63, 122, 152, 156, 228, 309], "markeredgecolor": [34, 49, 60, 62, 63], "plot_ellips": [34, 240], "cov": [34, 81, 85, 112, 245, 365, 377, 380, 382, 392, 402, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 494, 507, 509, 516, 523], "eigh": [34, 240, 241, 242, 245, 246, 394, 401, 508, 510, 1009], "arctan": [34, 241, 246, 361, 493], "180": [34, 240, 241, 242, 245, 246, 284, 288, 331, 335, 370, 399, 477], "ell": [34, 240, 241, 242, 245, 246, 386], "patch": [34, 50, 240, 241, 242, 245, 246, 250, 360, 368, 375, 394, 396, 530, 531, 558, 559, 562, 994, 1002], "ellips": [34, 225, 240, 241, 242, 245, 246, 958], "set_clip_box": [34, 240, 241, 242, 245, 246], "set_alpha": [34, 109, 240, 241, 242, 245, 246], "add_artist": [34, 218, 240, 241, 242, 245, 246], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 127, 218, 338, 373, 385, 392, 401, 426, 428, 456, 457, 459, 507, 508, 509, 510, 514, 515, 516, 519, 521, 524, 525, 639, 647, 648, 649, 660, 661, 662, 830, 907, 946, 987, 996, 1000, 1001, 1007, 1009], "store_covari": [34, 524, 525, 999, 1001], "tight": [34, 40, 105, 112, 118, 125, 138, 142, 181, 183, 188, 189, 190, 200, 201, 205, 208, 210, 213, 219, 222, 244, 275, 281, 282, 286, 287, 320, 323, 324, 327, 328, 329, 343, 557, 667, 1006], "plot_lda_qda": [34, 35], "138": [34, 370, 396, 399, 952], "matplotlibdeprecationwarn": [34, 37, 45, 89, 101, 102, 180, 193, 195, 204, 240, 241, 242, 245, 246], "position": [34, 180, 195, 240, 241, 242, 245, 246, 377], "becom": [34, 50, 71, 79, 198, 240, 241, 242, 245, 246, 298, 324, 337, 348, 359, 365, 366, 368, 372, 377, 378, 389, 391, 396, 397, 399, 416, 425, 429, 430, 432, 556, 563, 564, 566, 577, 594, 602, 633, 634, 651, 653, 870, 871, 877, 947, 948, 949, 951, 955, 962, 967, 985, 987, 995, 1002, 1003, 1006, 1007, 1008], "keyword": [34, 180, 195, 240, 241, 242, 245, 246, 337, 359, 365, 366, 369, 371, 377, 389, 400, 403, 414, 420, 421, 425, 427, 432, 439, 442, 478, 510, 513, 515, 534, 535, 542, 543, 544, 545, 595, 603, 606, 607, 614, 618, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 663, 667, 672, 673, 675, 676, 747, 751, 752, 753, 754, 763, 764, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 831, 835, 902, 904, 941, 949, 952, 955, 965, 994, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009], "minor": [34, 45, 180, 195, 204, 240, 241, 242, 245, 246, 258, 262, 360, 367, 378, 470, 952, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "352": [34, 35, 255, 338, 370], "auto_examples_classif": 35, "handwritten": [36, 67, 164, 216, 221, 223, 229, 253, 293, 294, 312, 313, 358, 389, 396, 422, 477, 516, 519, 524, 541, 663, 664, 665, 666, 667, 678, 679, 691, 710, 764, 766, 820, 832, 841, 851, 863, 949, 955, 978, 989], "hierarch": [36, 40, 54, 67, 164, 169, 309, 377, 397, 417, 419, 421, 479, 487, 489, 497, 505, 522, 704, 824, 851, 969, 973, 988, 989, 994, 997, 998], "coin": [36, 67, 164, 389, 397, 417, 437, 964, 986], "shift": [36, 44, 67, 164, 175, 220, 280, 294, 297, 391, 395, 416, 423, 433, 436, 444, 487, 490, 664, 668, 817, 840, 962, 988, 989, 994, 998, 1002], "chanc": [36, 67, 164, 196, 204, 211, 214, 255, 261, 265, 338, 348, 364, 389, 393, 678, 679, 682, 690, 728, 730, 759, 766, 796, 952, 960, 968], "agglom": [36, 44, 47, 67, 164, 389, 417, 421, 477, 666, 751, 824, 997], "bisect": [36, 67, 164, 419, 422, 487, 1008], "quantiz": [36, 67, 164, 359, 360, 389, 419, 422, 424, 481, 752, 926, 962], "birch": [36, 44, 67, 164, 309, 354, 377, 424, 487, 988, 989, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "toi": [36, 67, 85, 99, 113, 130, 131, 164, 178, 186, 210, 224, 238, 240, 292, 321, 331, 358, 370, 375, 396, 397, 416, 417, 418, 420, 423, 424, 425, 427, 433, 444, 487, 489, 497, 538, 614, 652, 699, 729, 769, 817, 824, 832, 851, 874, 949, 951, 952, 958, 962, 989], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 66, 67, 164, 169, 416, 417, 421, 438, 487, 489, 497, 851, 972, 986, 997, 1002, 1005], "dbscan": [36, 44, 64, 67, 164, 375, 377, 425, 427, 430, 487, 678, 679, 691, 710, 764, 766, 823, 851, 955, 988, 989, 994, 996, 998, 999, 1001, 1002, 1003], "optic": [36, 44, 67, 164, 309, 358, 400, 420, 430, 431, 432, 477, 988, 989, 1003, 1007, 1008, 1009], "affin": [36, 44, 67, 164, 297, 357, 366, 377, 388, 394, 416, 417, 421, 427, 429, 437, 487, 510, 666, 670, 678, 679, 691, 710, 764, 766, 866, 946, 949, 952, 988, 989, 994, 995, 998, 1004, 1005, 1007, 1009], "propag": [36, 67, 164, 311, 318, 360, 388, 416, 429, 477, 487, 489, 678, 679, 687, 688, 691, 692, 710, 764, 766, 831, 845, 865, 866, 867, 956, 974, 988, 989, 994, 1006, 1009], "agglomer": [36, 67, 164, 357, 389, 397, 421, 477, 575, 581, 620, 770, 775, 831, 989], "unstructur": [36, 67, 164, 293, 389, 417, 421, 438, 478, 505, 824, 964, 976, 998], "dendrogram": [36, 67, 164, 169, 389, 417, 421, 479, 1006], "pictur": [36, 67, 164, 229, 246, 360, 378, 389, 394, 397, 437, 467, 468, 496, 973], "greek": [36, 67, 164, 389, 437], "silhouett": [36, 38, 49, 57, 67, 164, 338, 365, 422, 487, 763, 764, 994, 998], "embed": [36, 44, 46, 67, 115, 149, 164, 216, 219, 221, 223, 224, 238, 275, 284, 370, 377, 388, 389, 417, 427, 437, 463, 477, 519, 524, 541, 557, 614, 663, 664, 665, 666, 667, 668, 669, 670, 671, 820, 832, 841, 862, 863, 864, 944, 955, 958, 964, 969, 988, 989, 994, 995, 1005, 1006, 1008], "explor": [37, 113, 114, 221, 222, 256, 263, 307, 324, 338, 348, 359, 362, 364, 370, 383, 389, 396, 447, 770, 773, 780, 941, 948, 949, 951, 957, 959, 960, 962, 976, 981, 987, 1000], "uniformli": [37, 122, 141, 225, 240, 305, 366, 491, 492, 493, 526, 617, 774, 781, 783, 850, 941, 942, 952, 955, 962, 998, 1003], "divid": [37, 48, 90, 95, 143, 154, 196, 240, 348, 361, 362, 386, 389, 393, 394, 444, 445, 446, 447, 448, 449, 450, 451, 487, 494, 509, 516, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 651, 652, 653, 693, 699, 707, 711, 729, 765, 767, 828, 829, 872, 875, 907, 910, 941, 949, 951, 952, 955, 962, 966, 987, 994, 1001, 1002, 1005], "randomli": [37, 48, 50, 60, 87, 92, 113, 125, 161, 164, 200, 213, 229, 232, 250, 257, 261, 273, 312, 348, 353, 373, 375, 376, 389, 393, 396, 399, 424, 433, 487, 490, 494, 498, 506, 512, 520, 521, 526, 534, 535, 538, 539, 540, 585, 586, 646, 654, 665, 669, 690, 768, 769, 827, 864, 878, 879, 880, 881, 951, 953, 955, 958, 960, 964, 968, 985, 987, 1005], "quiroz": [37, 175, 256, 258, 337, 338, 339], "fundament": [37, 80, 338, 363, 376, 392, 470, 513, 515, 522, 682, 948, 952], "homogen": [37, 38, 39, 44, 46, 49, 57, 338, 360, 375, 377, 391, 396, 399, 589, 678, 691, 704, 709, 710, 730, 766, 949, 950, 952, 1003], "frequent": [37, 162, 258, 338, 355, 362, 365, 397, 526, 565, 605, 821, 844, 848, 859, 942, 944, 952, 966, 970, 973], "ari": [37, 57, 338, 389, 679, 999, 1005], "mutual": [37, 38, 49, 57, 140, 147, 164, 396, 398, 567, 570, 571, 574, 575, 581, 582, 583, 584, 678, 679, 689, 728, 730, 759, 766, 952, 953, 994, 1000], "mi": [37, 141, 389, 582, 583, 678, 728, 730, 942, 966], "theoret": [37, 149, 245, 388, 389, 396, 422, 424, 528, 529, 614, 678, 699, 729, 870, 941, 949, 951, 952, 954, 964, 966, 967, 975, 976], "nmi": [37, 389, 691, 709, 710, 730], "ami": [37, 57, 389, 678], "score_func": [37, 567, 570, 571, 573, 574, 575, 715, 994, 996], "rand_scor": [37, 389, 689, 952, 1006], "adjusted_rand_scor": [37, 38, 49, 57, 338, 389, 678, 689, 715, 730, 759, 952, 1007], "mutual_info_scor": [37, 389, 678, 952, 1002, 1005, 1006], "normalized_mutual_info_scor": [37, 389, 709, 728, 766, 952, 1002, 1008], "adjusted_mutual_info_scor": [37, 38, 49, 57, 389, 679, 689, 728, 730, 759, 952, 994, 1002, 1006], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 60, 172, 338], "clase": 37, "seaborn": [37, 109, 111, 166, 175, 255, 278, 365, 380, 382, 972], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 60, 78, 80, 155, 156, 277, 315, 327], "refer": [37, 38, 59, 62, 70, 123, 129, 146, 158, 214, 257, 262, 285, 297, 305, 306, 307, 308, 309, 338, 353, 355, 357, 363, 365, 366, 368, 369, 370, 371, 372, 375, 376, 377, 378, 380, 383, 390, 400, 401, 413, 414, 415, 416, 418, 420, 423, 425, 426, 427, 428, 429, 432, 437, 438, 439, 442, 444, 447, 448, 449, 450, 472, 474, 478, 486, 488, 490, 491, 492, 493, 494, 495, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 519, 522, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 565, 568, 569, 570, 577, 582, 583, 585, 586, 589, 594, 597, 598, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 622, 624, 626, 628, 630, 631, 633, 636, 638, 640, 641, 642, 643, 646, 648, 650, 651, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 708, 709, 710, 711, 713, 714, 716, 729, 731, 732, 742, 756, 758, 759, 761, 762, 763, 764, 766, 768, 769, 770, 772, 773, 774, 783, 791, 792, 793, 794, 795, 796, 798, 801, 802, 806, 807, 808, 810, 816, 817, 818, 820, 827, 828, 829, 837, 838, 847, 848, 858, 863, 864, 865, 866, 867, 870, 872, 873, 875, 876, 878, 879, 880, 881, 895, 907, 963, 973, 978, 982, 986, 987, 989, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "plot_adjusted_for_chance_measur": [37, 67], "120": [37, 218, 398, 565, 994], "v0_8": 37, "satur": [37, 166, 297], "uniform_labelings_scor": 37, "nwith": [37, 60, 338], "constantli": [37, 196, 976], "unbound": [37, 951, 1008], "cardin": [37, 116, 117, 123, 168, 389, 396, 438, 528, 529, 532, 533, 534, 535, 539, 540, 541, 654, 844, 878, 879, 880, 881, 952, 953, 960, 962, 1008], "henc": [37, 59, 71, 125, 166, 200, 229, 324, 337, 338, 352, 360, 366, 368, 370, 377, 389, 393, 396, 397, 461, 483, 514, 516, 517, 518, 538, 558, 565, 618, 621, 627, 635, 637, 647, 662, 678, 679, 683, 689, 704, 730, 759, 766, 788, 789, 806, 807, 808, 809, 810, 834, 843, 846, 949, 951, 952, 953, 958, 959, 962, 973, 1001, 1002, 1005, 1006, 1008], "safe": [37, 166, 185, 338, 365, 366, 389, 390, 410, 483, 484, 554, 563, 566, 747, 751, 864, 924, 955, 1000, 1001, 1002, 1007, 1008], "stabil": [37, 114, 166, 200, 218, 260, 297, 338, 377, 386, 625, 629, 645, 809, 828, 829, 847, 858, 906, 942, 948, 951, 962, 973, 978, 994, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mislead": [37, 116, 117, 123, 166, 379, 396, 528, 529, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 989, 1007], "meaning": [37, 222, 284, 339, 386, 393, 397, 398, 399, 523, 702, 703, 711, 756, 757, 760, 820, 956, 966, 967, 994], "315": [37, 67, 362], "brendan": [38, 416, 429], "frei": [38, 416, 429, 1004], "delbert": [38, 416, 429], "dueck": [38, 416, 429], "messag": [38, 44, 61, 69, 95, 337, 338, 360, 363, 364, 365, 368, 369, 372, 373, 389, 416, 429, 514, 518, 523, 549, 602, 686, 770, 773, 774, 783, 795, 798, 800, 820, 828, 829, 889, 890, 891, 894, 897, 917, 936, 952, 962, 994, 998, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "feb": [38, 416, 429], "affinitypropag": [38, 44, 309, 389, 994, 997, 998, 1002, 1005, 1007, 1008, 1009], "labels_tru": [38, 49, 63, 389, 678, 679, 688, 689, 691, 704, 709, 710, 728, 730, 759, 766], "af": 38, "prefer": [38, 44, 246, 297, 348, 352, 353, 354, 363, 365, 366, 377, 389, 393, 394, 396, 397, 416, 429, 446, 447, 453, 461, 483, 484, 602, 607, 608, 629, 633, 634, 699, 701, 730, 731, 820, 846, 870, 871, 912, 941, 944, 946, 948, 952, 957, 967, 968, 972, 985, 995, 1001, 1003, 1007, 1008], "cluster_centers_indic": [38, 429], "cluster_centers_indices_": [38, 416], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 53, 57, 60, 61, 62, 64, 66, 309, 338, 365, 377, 389, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 430, 986, 999], "n_clusters_": [38, 49, 62, 417, 421], "homogeneity_scor": [38, 49, 57, 338, 389, 691, 709, 766, 952], "completeness_scor": [38, 49, 57, 306, 338, 389, 709, 710, 766, 952], "silhouette_scor": [38, 49, 57, 59, 338, 365, 389, 994, 998, 1000, 1002, 1004, 1008], "sqeuclidean": [38, 425, 432, 751, 752, 753], "872": [38, 960], "912": 38, "871": [38, 79, 80, 391, 449], "753": [38, 48, 67, 337], "cycler": 38, "viridi": [38, 275, 672], "class_memb": 38, "cluster_cent": [38, 60, 62, 63, 436], "397": [38, 44, 67, 338, 360], "plot_affinity_propag": [38, 67, 416, 429], "impos": [39, 126, 190, 375, 389, 394, 396, 397, 502, 632, 948], "simpli": [39, 85, 127, 149, 157, 221, 232, 288, 307, 308, 352, 360, 365, 366, 369, 375, 377, 391, 392, 393, 394, 396, 397, 459, 670, 735, 738, 838, 909, 944, 952, 953, 954, 955, 966, 979, 987, 1001, 1002, 1003], "There": [39, 46, 149, 214, 221, 234, 246, 250, 252, 255, 337, 358, 360, 362, 365, 366, 369, 375, 377, 380, 386, 388, 389, 394, 396, 397, 398, 427, 437, 509, 528, 529, 534, 535, 563, 564, 566, 581, 620, 942, 948, 949, 950, 951, 952, 955, 959, 962, 966, 967, 968, 971, 975, 986, 994, 1002], "singl": [39, 48, 52, 57, 60, 61, 71, 108, 111, 118, 119, 120, 128, 133, 146, 149, 155, 161, 164, 167, 169, 172, 196, 198, 235, 237, 293, 309, 324, 337, 338, 339, 343, 345, 348, 352, 353, 359, 360, 365, 369, 371, 372, 373, 375, 376, 377, 387, 388, 390, 392, 393, 394, 396, 397, 398, 410, 413, 416, 417, 421, 422, 424, 429, 439, 441, 442, 467, 468, 470, 481, 484, 509, 528, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 557, 567, 574, 575, 577, 581, 602, 607, 609, 618, 641, 642, 648, 651, 652, 653, 665, 667, 669, 684, 695, 696, 697, 698, 709, 710, 711, 714, 747, 758, 768, 769, 770, 773, 774, 783, 790, 793, 794, 796, 797, 800, 808, 811, 812, 816, 828, 829, 830, 840, 841, 844, 845, 846, 851, 865, 866, 878, 879, 880, 881, 886, 918, 920, 939, 941, 947, 948, 949, 952, 953, 955, 957, 959, 960, 962, 966, 967, 968, 972, 976, 978, 985, 987, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "unstabl": [39, 65, 166, 389, 391, 392, 664, 668, 906, 907, 968, 998, 999, 1001, 1006, 1008], "quickli": [39, 235, 292, 305, 362, 365, 393, 396, 667, 948, 955, 956, 976, 987, 1005], "fight": [39, 976], "percol": 39, "distanc": [39, 40, 59, 60, 64, 66, 76, 80, 82, 100, 161, 164, 169, 182, 197, 217, 219, 222, 229, 275, 277, 278, 283, 285, 287, 288, 297, 305, 309, 337, 338, 352, 362, 373, 375, 377, 386, 389, 391, 394, 395, 399, 400, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 430, 431, 432, 433, 434, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 513, 515, 522, 582, 583, 590, 594, 595, 597, 598, 603, 633, 634, 641, 643, 649, 650, 651, 652, 653, 663, 664, 665, 667, 668, 669, 670, 671, 674, 677, 698, 707, 731, 733, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 763, 764, 767, 800, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 850, 864, 868, 870, 872, 874, 875, 876, 878, 879, 880, 881, 942, 946, 949, 950, 952, 958, 962, 964, 966, 967, 973, 985, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "merg": [39, 41, 46, 51, 308, 363, 365, 367, 372, 375, 378, 389, 416, 417, 418, 421, 438, 789, 986, 994, 1001], "exagger": [39, 667, 949], "behaviour": [39, 100, 197, 198, 214, 326, 365, 377, 389, 396, 534, 535, 539, 540, 577, 868, 878, 879, 925, 941, 942, 952, 962, 1002, 1005, 1006], "shortest": [39, 369, 373, 663, 912, 949, 1007], "mechan": [39, 333, 337, 366, 389, 397, 439, 830, 950, 968, 976], "resembl": 39, "brittl": [39, 389], "pronounc": [39, 40, 52, 154], "kneighbors_graph": [39, 44, 61, 66, 275, 377, 389, 417, 421, 813, 814, 815, 817, 819, 821, 822, 823, 825, 955, 994, 998, 1003], "geometri": [39, 389, 949, 955], "instabl": [39, 166, 285, 427, 510, 514, 518, 670, 1001, 1004, 1007], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 55, 61, 66, 377, 389, 416, 418, 421, 986, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "1500": [39, 50, 56, 61, 66, 91, 217, 221, 240], "knn_graph": 39, "include_self": [39, 44, 66, 824, 825, 998], "202": [39, 67], "plot_agglomerative_clust": [39, 67], "waveform": 40, "euclidean": [40, 57, 182, 229, 275, 283, 305, 338, 386, 388, 389, 394, 395, 396, 397, 399, 416, 417, 420, 421, 425, 427, 432, 435, 438, 506, 512, 564, 590, 594, 597, 598, 651, 653, 665, 667, 670, 671, 674, 735, 736, 742, 743, 744, 745, 751, 752, 753, 754, 763, 764, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 864, 942, 946, 950, 953, 955, 964, 973, 998, 1001, 1002, 1003, 1004], "cityblock": [40, 44, 389, 425, 432, 735, 751, 752, 753, 955], "invari": [40, 362, 377, 389, 399, 589, 664, 720, 787, 788, 948, 949, 952, 967, 973, 1002, 1005, 1006, 1007], "ie": [40, 65, 96, 416, 678, 741, 948, 962], "inter": [40, 116, 348, 396, 690, 913], "character": [40, 214, 342, 389, 393, 949], "ill": [40, 81, 201, 453, 625, 626, 629, 630, 631, 657, 658, 948, 951, 986, 1004], "recov": [40, 64, 81, 96, 97, 103, 119, 149, 195, 196, 217, 339, 391, 395, 398, 401, 508, 534, 948, 949, 951, 973, 986, 1000], "put": [40, 57, 138, 149, 151, 230, 236, 240, 291, 299, 309, 317, 328, 329, 334, 354, 366, 368, 369, 372, 399, 419, 422, 434, 490, 589, 622, 636, 768, 848, 859, 872, 873, 874, 875, 876, 897, 942, 949, 951, 952, 953, 959, 962, 975, 979, 981, 987, 1006], "cc": [40, 363], "pairwise_dist": [40, 377, 389, 400, 417, 420, 421, 425, 432, 663, 671, 735, 744, 752, 753, 763, 764, 815, 817, 819, 823, 950, 994, 998, 1000, 1002, 1003, 1005, 1006], "sqr": 40, "sign": [40, 78, 85, 96, 99, 112, 180, 291, 332, 365, 389, 391, 394, 397, 450, 519, 557, 564, 581, 610, 611, 633, 634, 641, 643, 649, 650, 651, 652, 708, 715, 870, 874, 907, 919, 948, 952, 957, 962, 966, 967, 986, 994, 998, 1003, 1007, 1009], "phi": [40, 394, 716, 837, 944, 952, 962, 967], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "ground": [40, 45, 57, 60, 77, 81, 85, 98, 157, 180, 190, 196, 197, 246, 258, 338, 377, 388, 389, 677, 678, 679, 682, 686, 687, 688, 689, 691, 692, 695, 696, 697, 701, 702, 703, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 756, 757, 758, 759, 760, 766, 767, 952, 965, 978, 986, 1002], "truth": [40, 45, 57, 60, 77, 81, 85, 98, 103, 157, 166, 180, 190, 196, 197, 246, 258, 338, 377, 388, 389, 677, 678, 679, 682, 686, 687, 688, 689, 691, 692, 695, 696, 697, 699, 701, 702, 703, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 756, 757, 758, 759, 760, 766, 767, 952, 978, 986, 1002, 1008], "rgb": [40, 48, 360, 397, 467, 468, 558, 559, 562], "set_label": [40, 152, 229], "avg_dist": [40, 754], "gnuplot2": 40, "vmin": [40, 53, 81, 95, 98, 106, 152, 155, 175, 187, 212, 244, 250, 293, 324], "45": [40, 63, 72, 98, 142, 154, 168, 185, 196, 214, 262, 266, 267, 313, 324, 348, 393, 396, 397, 539, 540, 602, 609, 761, 768, 864, 874, 942, 952, 960, 971, 983, 990, 994, 997], "interclass": 40, "rgbk": 40, "224": [40, 56, 67, 84, 127, 389, 698], "plot_agglomerative_clustering_metr": [40, 67], "hierarchi": [41, 169, 425, 431, 438, 957, 986], "plot_dendrogram": 41, "kwarg": [41, 98, 366, 371, 403, 414, 439, 510, 513, 515, 592, 606, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 673, 674, 675, 676, 715, 811, 812, 830, 831, 835, 885, 904, 1001, 1005, 1007], "children_": [41, 417, 421, 438], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 127, 342, 346, 389, 396, 400, 417, 418, 419, 420, 421, 425, 432, 438, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 878, 879, 880, 881, 882, 883, 955, 968, 997, 999, 1001, 1005, 1008], "linkage_matrix": 41, "column_stack": [41, 291, 299], "distances_": [41, 417, 421, 1006], "distance_threshold": [41, 417, 421, 1003, 1006], "truncate_mod": 41, "parenthesi": [41, 365], "121": [41, 66, 67, 112, 162, 180, 200, 215, 230, 320, 335, 644, 962], "plot_agglomerative_dendrogram": [41, 67], "scalabl": [42, 44, 61, 164, 171, 173, 257, 338, 365, 389, 396, 397, 423, 465, 564, 615, 797, 832, 841, 843, 870, 872, 875, 876, 944, 949, 952, 965, 967, 976, 994, 998, 1004, 1005, 1008, 1009], "hundr": [42, 121, 218, 301, 360, 393, 396, 536, 537, 949, 1005], "thousand": [42, 229, 231, 301, 338, 360, 389, 396, 828, 829, 875, 949, 987, 1003, 1005], "million": [42, 55, 154, 172, 362, 397, 399, 667, 949, 967, 976, 1008, 1009], "chose": [42, 166, 982], "usag": [42, 70, 73, 84, 99, 120, 143, 166, 226, 230, 249, 278, 284, 286, 293, 320, 339, 352, 364, 365, 366, 367, 371, 372, 374, 377, 378, 389, 393, 394, 399, 400, 420, 425, 463, 584, 633, 634, 635, 641, 643, 651, 652, 653, 654, 751, 754, 763, 764, 870, 878, 879, 880, 881, 907, 941, 944, 951, 952, 953, 955, 967, 974, 978, 982, 989, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "enjoi": 42, "edit": [42, 362, 364, 365, 367, 368, 372, 375, 380, 505, 509, 801, 946, 948, 953, 959, 987], "158": [42, 115, 133, 396, 644], "73": [42, 195, 259, 294, 313, 376, 770, 783, 817, 879, 962, 983, 994, 996], "manojkumarsivaraj334": 42, "joblib": [42, 54, 71, 257, 306, 360, 363, 365, 367, 373, 375, 377, 380, 382, 383, 388, 390, 400, 413, 417, 420, 421, 423, 425, 427, 432, 433, 436, 439, 442, 447, 483, 506, 510, 511, 512, 514, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 607, 609, 614, 622, 626, 628, 630, 632, 633, 634, 636, 638, 640, 641, 643, 651, 654, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 817, 819, 821, 822, 824, 825, 830, 831, 832, 833, 865, 866, 920, 922, 937, 952, 973, 994, 995, 997, 999, 1001, 1002, 1003, 1005, 1006], "cpu_count": [42, 920], "n_center": [42, 487], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 164, 276, 289, 300, 309, 338, 361, 389, 418, 419, 422, 423, 424, 427, 434, 435, 437, 479, 524, 818, 974, 989, 994, 998, 1001, 1006], "subcluster_centers_": [42, 418], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 63], "256": [42, 48, 53, 121, 269, 271, 338, 360, 389, 396, 424, 443, 538, 827, 858, 868, 987, 1008], "max_no_improv": [42, 60, 63, 424, 512, 513, 514, 521, 1008, 1009], "t_mini_batch": [42, 63], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 53, 57, 59, 60, 62, 63, 95, 309, 338, 416, 419, 422, 423, 424, 986], "477": [42, 67, 338], "plot_birch_vs_minibatchkmean": [42, 67], "bisectingkmean": [43, 389, 1008], "__doc__": [43, 154, 234, 243, 377], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 61], "variant": [43, 95, 160, 163, 164, 255, 308, 309, 338, 339, 370, 389, 392, 394, 397, 399, 424, 464, 467, 468, 487, 490, 518, 534, 535, 540, 590, 594, 597, 598, 602, 605, 613, 614, 616, 620, 647, 678, 771, 775, 776, 777, 778, 787, 793, 814, 832, 867, 942, 948, 949, 950, 951, 952, 954, 955, 966, 973, 987, 994, 1002], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 372, 806, 807, 808, 809, 810, 997, 1002], "flat": [43, 95, 101, 217, 218, 219, 253, 389, 397, 416, 423, 436, 484, 986, 994, 995], "label_out": 43, "457": [43, 67, 590], "plot_bisect_kmean": [43, 67], "null": [44, 70, 166, 168, 255, 261, 393, 623, 644, 655, 678, 704, 730, 766, 796, 948, 949, 952, 967, 1004], "mismatch": [44, 951, 1003], "noisy_circl": [44, 61], "noisy_moon": [44, 61], "no_structur": [44, 61], "anisotropicli": [44, 56, 61], "170": [44, 56, 61, 146, 228, 238, 370], "x_aniso": [44, 56, 61], "aniso": [44, 61], "plot_num": [44, 61, 225], "default_bas": [44, 61], "quantil": [44, 62, 90, 110, 112, 164, 174, 215, 297, 300, 301, 375, 396, 414, 415, 433, 494, 527, 535, 537, 632, 645, 696, 718, 721, 723, 794, 836, 848, 849, 850, 859, 860, 952, 962, 974, 989, 994, 998, 1001, 1003, 1007, 1008], "damp": [44, 389, 416, 429], "min_sampl": [44, 49, 64, 375, 377, 389, 400, 420, 425, 431, 432, 646, 948, 1003, 1007], "xi": [44, 64, 94, 362, 389, 392, 397, 425, 431, 484, 966, 1005], "min_cluster_s": [44, 64, 425, 431, 1003], "220": [44, 994], "i_dataset": [44, 61, 225], "algo_param": [44, 61], "param": [44, 60, 61, 70, 121, 123, 124, 217, 231, 253, 255, 263, 266, 267, 279, 292, 365, 366, 377, 396, 399, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 781, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 1000, 1004, 1005, 1007, 1008], "easier": [44, 61, 65, 81, 175, 181, 227, 252, 253, 297, 324, 337, 348, 360, 365, 366, 369, 372, 375, 380, 391, 393, 443, 490, 868, 901, 952, 959, 968, 973, 976, 987, 1003, 1008], "estimate_bandwidth": [44, 62, 389, 423, 436], "symmetr": [44, 122, 169, 198, 377, 387, 389, 427, 437, 438, 449, 494, 502, 504, 665, 669, 670, 678, 679, 689, 690, 691, 697, 701, 709, 710, 728, 730, 736, 758, 766, 768, 769, 905, 938, 941, 948, 952, 955], "meanshift": [44, 309, 389, 416, 997, 998, 999, 1002, 1004, 1005, 1008, 1009], "bin_seed": [44, 62, 423, 436, 1005], "two_mean": 44, "spectralclust": [44, 309, 389, 416, 955, 994, 995, 1004, 1006, 1007, 1008, 1009], "nearest_neighbor": [44, 427, 666], "average_linkag": 44, "gmm": [44, 164, 239, 241, 244, 245, 246, 247, 479, 487, 769, 788, 951, 994, 995, 998, 999, 1000], "gaussianmixtur": [44, 241, 242, 243, 244, 245, 246, 395, 768, 1000, 1002, 1003, 1007, 1008], "covariance_typ": [44, 241, 242, 244, 245, 246, 768, 769], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 61, 293, 372, 373], "catch_warn": [44, 61, 292, 293, 474], "filterwarn": [44, 61, 211, 292, 293, 365, 474, 962], "userwarn": [44, 61, 112, 157, 158, 188, 205, 214, 329, 343, 369, 686, 962, 1000, 1002, 1007], "fulli": [44, 116, 122, 352, 359, 360, 377, 395, 396, 398, 419, 422, 532, 533, 539, 540, 878, 879, 880, 881, 882, 884, 941, 948, 957, 965, 972, 1007, 1008], "t1": [44, 46, 61, 211, 219, 222, 225], "377eb8": [44, 61, 62, 225], "ff7f00": [44, 61, 225], "4daf4a": [44, 61], "f781bf": [44, 61, 62], "a65628": [44, 61], "984ea3": [44, 61], "999999": [44, 61], "e41a1c": [44, 61], "dede00": [44, 61, 62], "000000": [44, 166, 185, 214, 255, 301, 710], "transax": [44, 61, 166, 221, 225, 242, 283, 299], "plot_cluster_comparison": [44, 67], "firstli": [45, 98, 352, 375, 632, 987], "bad": [45, 59, 60, 150, 337, 348, 365, 389, 399, 667, 719, 941, 948, 949, 954, 960, 986, 994], "eight": [45, 987], "deliv": [45, 352, 976], "plot_cluster_iri": [45, 67], "55": [45, 102, 166, 191, 196, 205, 211, 214, 219, 241, 313, 369, 389, 393, 465, 572, 770, 783, 795, 952, 994], "w_xaxi": [45, 89, 101, 102, 193], "xaxi": [45, 89, 101, 102, 193, 217, 219, 222, 275, 280, 337], "w_yaxi": [45, 89, 101, 102, 193], "w_zaxi": [45, 89, 101, 102, 193], "zaxi": [45, 89, 101, 102, 193, 217], "62": [45, 110, 172, 214, 249, 294, 313, 348, 360, 389, 467, 468, 811, 812, 990, 997], "dist": [45, 79, 218, 229, 275, 368, 444, 445, 446, 447, 448, 449, 450, 451, 674, 736, 742, 811, 812], "though": [45, 146, 172, 175, 261, 280, 299, 301, 338, 339, 348, 352, 359, 362, 365, 366, 376, 377, 389, 394, 395, 396, 397, 398, 674, 776, 778, 870, 941, 942, 944, 949, 952, 955, 962, 966, 987, 1002], "3d": [45, 48, 66, 89, 101, 102, 193, 217, 219, 221, 397, 481, 561, 917, 1001, 1002, 1004], "mplot3d": [45, 66, 89, 101, 167, 217, 219], "noqa": [45, 66, 89, 101, 122, 161, 162, 167, 217, 219, 266, 267, 307, 368, 553, 555, 602, 773, 774, 941, 1003], "f401": [45, 66, 89, 101, 167, 217, 219], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "fignum": [45, 328, 329], "est": [45, 129, 166, 167, 233, 299, 307, 348, 396, 537, 708, 836, 941, 952, 962, 966, 1005, 1006], "elev": [45, 66, 89, 101, 102, 167, 193, 217, 221], "azim": [45, 66, 89, 101, 102, 167, 193, 217, 221], "134": [45, 102, 121, 255, 997], "set_posit": [45, 66, 101, 102, 129, 207, 297], "set_ticklabel": [45, 89, 101, 102, 193, 337], "petal": [45, 89, 104, 106, 118, 307, 362, 390, 883, 968, 984, 985], "sepal": [45, 89, 104, 106, 118, 151, 179, 307, 321, 362, 962, 984, 985], "length": [45, 69, 88, 89, 91, 104, 106, 118, 125, 149, 150, 151, 154, 155, 157, 172, 179, 232, 235, 307, 321, 339, 358, 362, 365, 372, 373, 377, 390, 394, 396, 397, 399, 421, 464, 483, 484, 487, 490, 498, 526, 538, 556, 557, 564, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 607, 621, 622, 625, 626, 627, 628, 629, 631, 632, 635, 636, 637, 638, 656, 659, 754, 770, 773, 774, 783, 797, 799, 802, 803, 805, 813, 814, 815, 817, 819, 857, 883, 890, 892, 896, 912, 913, 923, 926, 951, 958, 962, 978, 984, 985, 994, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006], "set_zlabel": [45, 89, 167, 193], "setosa": [45, 89, 102, 104, 362, 479, 978, 985], "versicolour": [45, 89, 102, 104, 362, 985], "virginica": [45, 89, 102, 104, 362, 479, 985], "text3d": [45, 102], "reorder": [45, 102, 377, 672, 692, 973, 1002], "392": [45, 67], "voxel": [46, 65, 560], "multipl": [46, 68, 75, 91, 94, 105, 117, 118, 164, 166, 190, 230, 255, 267, 277, 305, 352, 353, 354, 359, 361, 362, 365, 366, 367, 368, 369, 375, 377, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 420, 435, 439, 441, 442, 444, 449, 462, 465, 466, 469, 470, 471, 478, 479, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 526, 528, 529, 530, 531, 534, 535, 536, 537, 538, 556, 574, 582, 583, 585, 586, 602, 607, 609, 614, 615, 616, 617, 621, 622, 625, 627, 628, 629, 632, 635, 636, 637, 638, 641, 642, 643, 646, 648, 651, 653, 654, 664, 665, 667, 668, 669, 695, 696, 701, 718, 719, 721, 723, 724, 726, 758, 761, 764, 768, 769, 770, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 797, 801, 802, 803, 804, 805, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 833, 836, 848, 859, 862, 863, 870, 871, 872, 875, 886, 901, 906, 907, 923, 926, 944, 947, 948, 949, 953, 954, 955, 959, 960, 965, 966, 968, 972, 973, 978, 987, 994, 995, 997, 1000, 1001, 1004, 1005, 1006, 1007], "partli": [46, 742], "procedur": [46, 55, 122, 146, 176, 184, 245, 300, 324, 337, 348, 365, 366, 375, 376, 377, 378, 387, 388, 391, 393, 394, 396, 398, 506, 512, 513, 515, 520, 521, 522, 528, 529, 530, 531, 534, 535, 568, 570, 577, 584, 619, 647, 649, 662, 701, 758, 828, 829, 848, 859, 923, 941, 948, 954, 960, 962, 965, 966, 967, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "solut": [46, 175, 185, 187, 200, 201, 210, 225, 231, 308, 324, 363, 366, 377, 386, 389, 391, 393, 394, 397, 398, 399, 424, 426, 428, 506, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 585, 621, 623, 625, 627, 629, 630, 631, 633, 635, 637, 639, 640, 641, 642, 643, 644, 647, 649, 651, 652, 653, 654, 655, 657, 658, 660, 661, 662, 768, 769, 783, 820, 828, 829, 945, 946, 948, 949, 951, 956, 958, 966, 967, 971, 976, 982, 985, 987, 994, 997, 1007, 1008], "closest": [46, 63, 366, 389, 416, 418, 419, 422, 423, 424, 434, 752, 753, 801, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 943, 946, 953, 955, 985], "partit": [46, 65, 69, 125, 127, 255, 293, 386, 389, 393, 396, 424, 426, 428, 437, 486, 532, 533, 534, 535, 538, 539, 540, 678, 679, 689, 759, 819, 878, 879, 880, 881, 951, 955, 958, 962, 968, 987], "cluster_qr": [46, 389, 427, 437, 1008], "qr": [46, 198, 509, 516, 519, 906, 907, 949, 1000], "pivot": [46, 266, 267], "cheung": [46, 995], "andrew": [46, 389, 437, 666, 670, 691, 710, 766, 846, 956, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "knyazev": [46, 389, 427, 437, 670, 1004, 1007, 1008], "ucdenv": 46, "skimag": [46, 47, 359, 986], "spectral_clust": [46, 65, 1002, 1004, 1006, 1007, 1008, 1009], "orig_coin": [46, 47], "speed": [46, 47, 69, 98, 162, 182, 185, 189, 234, 275, 307, 313, 337, 339, 354, 355, 365, 367, 373, 375, 377, 387, 389, 394, 397, 400, 419, 420, 422, 423, 424, 425, 427, 432, 434, 435, 436, 437, 506, 507, 585, 602, 607, 608, 609, 614, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 656, 659, 667, 768, 769, 795, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 846, 907, 941, 949, 951, 953, 966, 976, 986, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "down": [46, 47, 80, 187, 211, 212, 219, 229, 230, 258, 294, 297, 348, 359, 367, 372, 391, 394, 419, 425, 431, 565, 568, 569, 614, 624, 747, 751, 754, 846, 849, 850, 860, 872, 875, 882, 948, 978, 986, 1002], "alias": [46, 47, 363, 365, 367, 422, 434, 994, 998, 1008], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 986], "anti_alias": [46, 47, 986], "img_to_graph": [46, 65, 397, 997, 1007], "exponenti": [46, 74, 149, 154, 280, 285, 395, 396, 399, 424, 511, 529, 534, 589, 594, 597, 614, 618, 731, 732, 811, 812, 816, 828, 829, 846, 944, 948, 952, 967, 985, 1001, 1007], "beta": [46, 84, 93, 107, 164, 370, 387, 389, 392, 511, 513, 515, 522, 619, 702, 703, 709, 715, 756, 766, 768, 952, 985, 996, 999, 1001, 1003, 1004], "voronoi": [46, 65, 389], "n_region": 46, "extra": [46, 118, 129, 233, 275, 339, 363, 364, 377, 396, 397, 414, 419, 422, 434, 507, 532, 533, 541, 565, 566, 675, 676, 792, 815, 880, 881, 897, 951, 955, 994, 997, 999, 1000, 1002, 1007, 1009], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 427, 437, 663, 666, 670, 1004, 1007, 1008, 1009], "amg": [46, 65, 389, 427, 437, 666, 670, 1004, 1008, 1009], "pyamg": [46, 380, 382, 389, 427, 437, 666, 670], "toler": [46, 72, 161, 187, 189, 212, 213, 339, 360, 366, 373, 389, 401, 419, 422, 427, 434, 437, 446, 447, 453, 456, 457, 458, 506, 507, 508, 510, 511, 515, 516, 517, 518, 519, 520, 522, 523, 534, 535, 536, 537, 602, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 651, 653, 654, 656, 657, 658, 659, 663, 664, 665, 666, 668, 669, 670, 811, 812, 816, 820, 828, 829, 865, 866, 870, 871, 872, 873, 874, 875, 876, 938, 948, 952, 966, 967, 983, 1006, 1007, 1008, 1009], "eigen_tol": [46, 427, 437, 666, 670, 995, 1008, 1009], "todo": [46, 229, 368, 370, 372, 377, 389, 1009], "21243": 46, "assign_label": [46, 389, 427, 437], "individu": [46, 59, 79, 108, 113, 129, 133, 141, 158, 164, 165, 170, 196, 214, 226, 258, 260, 305, 332, 353, 368, 371, 373, 377, 379, 386, 390, 393, 396, 397, 413, 427, 437, 439, 464, 476, 478, 484, 530, 531, 534, 535, 537, 538, 540, 542, 543, 544, 545, 578, 584, 585, 607, 608, 618, 620, 632, 633, 634, 643, 646, 647, 648, 649, 650, 651, 652, 653, 662, 686, 693, 701, 707, 723, 724, 758, 770, 783, 797, 799, 803, 804, 806, 807, 808, 809, 810, 829, 832, 840, 841, 843, 848, 850, 851, 855, 856, 857, 870, 871, 952, 953, 962, 967, 982, 987, 989, 995, 998, 1000, 1006, 1008], "comment": [46, 337, 363, 364, 365, 367, 368, 372, 378, 461, 553, 952], "paus": 46, "21194": [46, 1007], "098": [46, 67, 275], "plot_coin_segment": [46, 67], "spatial": [47, 49, 169, 213, 293, 360, 377, 389, 400, 420, 425, 427, 432, 654, 667, 674, 733, 736, 751, 752, 753, 754, 763, 764, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 948, 955, 962, 996, 1000, 1007], "constrain": [47, 95, 119, 126, 187, 291, 306, 322, 324, 358, 377, 388, 389, 394, 396, 484, 536, 537, 610, 633, 665, 669, 796, 948, 951, 998], "piec": [47, 197, 951], "grid_to_graph": [47, 51, 54, 389, 397, 986, 1007], "st": [47, 66, 255, 997, 1000, 1002], "171": [47, 362, 370, 761, 952], "4697": 47, "583": [47, 67, 389, 985], "plot_coin_ward_segment": [47, 67], "vq": [48, 57], "palac": 48, "china": [48, 389, 481, 482, 559], "615": 48, "literatur": [48, 154, 255, 338, 362, 365, 370, 372, 375, 376, 389, 392, 394, 396, 419, 422, 424, 476, 511, 513, 515, 522, 530, 531, 563, 566, 682, 768, 941, 944, 948, 952, 1004], "codebook": [48, 541, 801], "palett": [48, 166, 255, 278], "byte": [48, 397, 461, 478, 483, 484, 557, 563, 564, 566, 919, 985, 987, 994, 1001, 1002], "wherea": [48, 66, 79, 109, 167, 200, 210, 256, 258, 333, 354, 393, 396, 540, 633, 634, 772, 787, 799, 944, 951, 953, 955, 959, 962, 968, 1007], "gif": 48, "pick": [48, 59, 169, 232, 263, 309, 312, 360, 365, 368, 389, 396, 419, 435, 498, 648, 880, 881, 941, 948, 949, 951, 966, 1005], "079": [48, 191, 215, 338, 362], "robertlayton": 48, "pairwise_distances_argmin": [48, 63, 309, 753, 1002, 1008, 1009], "load_sample_imag": [48, 558, 559, 1003], "n_color": 48, "photo": 48, "jpg": [48, 481, 559], "255": [48, 98, 275, 293, 308, 360, 467, 468, 536, 537], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 235], "book": [48, 69, 419, 422, 424, 801, 806, 810, 948, 949, 950, 953, 970, 1006], "alongsid": [48, 365, 370, 377, 380, 398, 952, 959, 972, 973], "plot_color_quant": [48, 67], "750": [49, 117, 255], "db": [49, 389], "core_samples_mask": 49, "zeros_lik": [49, 198, 264], "bool": [49, 65, 80, 162, 214, 346, 365, 401, 402, 403, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 494, 497, 498, 499, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 676, 677, 682, 685, 686, 687, 688, 699, 701, 704, 714, 715, 723, 724, 727, 729, 734, 736, 740, 741, 742, 747, 751, 758, 762, 765, 767, 768, 769, 770, 773, 774, 775, 783, 787, 788, 791, 794, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 901, 907, 908, 916, 919, 923, 925, 933, 938, 939, 940, 942, 1003, 1006, 1007], "core_sample_indices_": [49, 420], "n_noise_": 49, "953": 49, "883": 49, "917": 49, "952": 49, "626": [49, 81, 82, 182], "unique_label": [49, 338, 366, 373], "class_member_mask": 49, "markerfacecolor": [49, 60, 62, 63], "plot_dbscan": [49, 67, 400, 420], "constitut": [50, 377, 393, 396, 425, 431, 563, 564, 566, 956], "standpoint": 50, "proce": [50, 143, 177, 363, 368, 392, 393, 396, 416, 948], "reassign": [50, 365, 422, 424, 995, 999], "success": [50, 164, 248, 262, 271, 348, 384, 389, 393, 394, 396, 490, 539, 553, 770, 773, 774, 790, 875, 955, 976, 982, 986, 989, 1006], "fetch_olivetti_fac": [50, 95, 117, 233, 360, 1002, 1003, 1004], "olivetti": [50, 95, 117, 358, 394, 469, 989, 994, 1002], "ndownload": 50, "figshar": 50, "5976027": 50, "extract_patches_2d": [50, 98, 397, 1002], "patch_siz": [50, 98, 397, 558, 559], "buffer": [50, 1007], "max_patch": [50, 397, 558, 559, 1002], "4i": 50, "dt": [50, 98, 109, 130, 396, 397, 968], "2400": 50, "700": [50, 80, 82, 307], "800": [50, 120, 308, 360, 559, 667], "900": [50, 73, 74], "1100": 50, "1200": [50, 121, 297, 396], "1300": 50, "1400": [50, 449], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 308], "2200": [50, 360, 467], "2300": [50, 185], "ntrain": 50, "085": [50, 67], "plot_dict_face_patch": [50, 67], "agglo": [51, 421, 986], "featureagglomer": [51, 54, 416, 417, 969, 986, 997, 1003, 1004, 1007, 1008], "x_reduc": [51, 89, 127, 421, 986], "x_restor": 51, "images_restor": 51, "vmax": [51, 53, 81, 95, 98, 106, 152, 155, 175, 187, 212, 244, 250, 293, 324], "plot_digits_agglomer": [51, 67], "why": [52, 95, 166, 168, 172, 185, 252, 255, 337, 338, 365, 372, 377, 389, 391, 394, 400, 420, 422, 426, 952, 954, 967, 982, 985, 997], "rich": [52, 372, 375, 389, 415, 976, 1005, 1008], "richer": [52, 105, 389], "uneven": [52, 250, 389, 393], "patholog": [52, 951, 1000], "clean": [52, 70, 195, 348, 357, 362, 363, 395, 474, 958, 962, 1004], "fring": [52, 389], "sensibl": [52, 161, 338, 366, 948, 962], "resampl": [52, 122, 154, 166, 279, 373, 375, 530, 531, 926, 973, 1003, 1007], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 217, 218, 219, 663, 664, 665, 667, 949, 995, 1000, 1004, 1008, 1009], "622": [52, 67, 516], "plot_digits_linkag": [52, 67], "1024": [53, 105, 424, 443, 513, 868, 1007], "768": 53, "raccoon": [53, 98, 394], "raccoon_fac": [53, 98], "k_mean": [53, 63, 373, 377, 986, 1002], "squeez": [53, 74, 155, 156, 275, 297, 986], "raccoon_face_compress": 53, "regular_valu": 53, "regular_label": 53, "regular_raccoon_fac": 53, "center_1": 53, "center_2": 53, "axvlin": [53, 59, 72, 81, 103, 121, 131, 166, 168, 185, 261, 983], "218": [53, 67, 362, 446, 689, 759], "plot_face_compress": [53, 67], "anova": [54, 140, 147, 164, 319, 335, 390, 479, 490, 567, 570, 571, 573, 574, 575, 579, 580, 581, 584, 687, 793, 797, 831, 832, 851, 870, 875, 967], "bayesianridg": [54, 161, 175, 176, 307, 602, 619, 948, 1001, 1002, 1003, 1004, 1007, 1008], "shutil": [54, 71, 390], "tempfil": [54, 277, 305, 390, 955], "feature_select": [54, 71, 73, 140, 141, 142, 143, 144, 145, 146, 164, 307, 309, 327, 348, 355, 377, 390, 398, 556, 941, 994, 995, 997, 998, 999, 1000, 1001], "kfold": [54, 121, 135, 250, 257, 260, 348, 393, 413, 447, 542, 543, 569, 577, 622, 626, 628, 630, 636, 638, 640, 648, 770, 773, 774, 777, 779, 783, 788, 790, 791, 792, 793, 794, 795, 796, 798, 802, 805, 982, 995, 996, 997, 999, 1000, 1002, 1004], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 77, 266, 399, 972], "cachedir": [54, 71, 373, 390], "mkdtemp": [54, 390], "mem": [54, 370, 483], "n_x": [54, 560], "n_y": [54, 560, 954], "parcel": [54, 66, 389], "ward__n_clust": 54, "n_job": [54, 71, 72, 116, 117, 122, 123, 129, 136, 161, 166, 167, 168, 218, 220, 236, 254, 256, 257, 259, 270, 275, 305, 306, 307, 353, 365, 377, 396, 400, 413, 420, 423, 425, 427, 432, 433, 436, 439, 442, 447, 506, 510, 511, 512, 514, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 607, 609, 614, 622, 626, 628, 630, 632, 633, 634, 636, 638, 640, 641, 643, 651, 654, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 830, 833, 865, 866, 920, 941, 952, 953, 955, 982, 983, 987, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 417, 421, 994, 998], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 124, 167, 227, 249, 254, 262, 264, 306, 338, 342, 346, 355, 362, 364, 365, 366, 373, 378, 386, 388, 389, 393, 394, 396, 397, 400, 420, 427, 439, 461, 483, 487, 489, 495, 497, 501, 502, 506, 512, 513, 515, 525, 532, 533, 534, 535, 539, 540, 541, 542, 543, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 592, 607, 633, 634, 641, 643, 651, 652, 653, 681, 691, 700, 707, 709, 719, 736, 742, 751, 755, 761, 762, 801, 811, 812, 813, 814, 815, 817, 819, 821, 822, 826, 828, 829, 834, 850, 851, 853, 857, 870, 875, 878, 879, 880, 881, 910, 911, 923, 925, 926, 946, 948, 952, 953, 956, 959, 962, 963, 964, 968, 976, 978, 999, 1000, 1002, 1004, 1005, 1006, 1008], "return_dist": [54, 438, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 955, 998], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 141, 398, 567, 570, 571, 573, 574, 575, 579, 580, 584, 997, 1001, 1008], "cach": [54, 164, 256, 276, 289, 352, 360, 377, 417, 421, 425, 443, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 477, 483, 770, 813, 815, 831, 832, 868, 872, 873, 874, 875, 876, 937, 955, 967, 997, 1001, 1002, 1003, 1004, 1006, 1007], "selectpercentil": [54, 327, 398, 567, 570, 571, 573, 574, 578, 581, 995, 1000], "percentag": [54, 104, 119, 187, 214, 250, 258, 261, 393, 398, 509, 516, 519, 524, 568, 569, 623, 644, 655, 677, 707, 719, 787, 788, 789, 801, 882, 884, 953, 968, 996, 1000, 1006, 1007], "anova__percentil": [54, 327], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 233, 238, 360, 362, 996], "638768": 54, "rdbu_r": [54, 81, 106, 324], "temporari": [54, 69, 71, 352, 353, 443, 662, 754, 868, 955, 997, 998, 1001, 1007, 1008], "worri": [54, 949, 979], "rmtree": [54, 71, 390], "ignore_error": 54, "plot_feature_agglomeration_vs_univariate_select": [54, 67], "recomput": [55, 235, 237, 277, 305, 444, 449, 948, 964, 999], "intract": [55, 394, 949, 957], "unlik": [55, 167, 217, 219, 245, 297, 322, 365, 366, 370, 375, 377, 391, 393, 394, 397, 425, 510, 625, 626, 629, 630, 631, 657, 658, 758, 790, 811, 812, 851, 861, 873, 948, 951, 952, 959, 967, 994, 1000], "inferenti": 55, "capabl": [55, 85, 154, 221, 366, 377, 380, 953, 956, 967, 968, 976, 994, 1003], "meta": [55, 69, 108, 132, 133, 164, 196, 348, 359, 363, 366, 368, 375, 377, 385, 387, 388, 398, 399, 440, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 545, 550, 572, 578, 797, 804, 941, 953, 973, 974, 989, 994, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008], "extend": [55, 66, 197, 244, 262, 264, 324, 362, 363, 375, 377, 387, 388, 389, 394, 396, 606, 694, 800, 803, 804, 836, 838, 854, 885, 944, 952, 953, 967, 973, 974, 989, 999, 1000, 1001, 1002, 1004], "chirag": 55, "nagpal": 55, "christo": [55, 1003, 1004, 1006, 1008], "arida": [55, 1003, 1004, 1006, 1008], "baseestim": [55, 275, 365, 376, 377, 607, 608, 899, 994, 1001, 1004, 1006, 1008], "clone": [55, 122, 157, 257, 294, 348, 363, 365, 367, 368, 372, 377, 387, 390, 399, 413, 440, 544, 545, 572, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 795, 798, 802, 805, 831, 832, 867, 973, 994, 1000, 1002, 1006], "metaestim": [55, 377, 998, 1007, 1008], "available_if": [55, 377, 915, 1007, 1008], "check_is_fit": [55, 366, 373, 377, 1004, 1007, 1008], "5000": [55, 126, 182, 211, 212, 214, 307], "_classifier_ha": 55, "deleg": [55, 370, 915, 998, 1000, 1006], "unfit": [55, 390, 410, 439, 544, 545, 577, 586, 1002, 1004], "classifier_": 55, "inductivecluster": 55, "clusterer_": 55, "plot_scatt": 55, "cluster_label": [55, 59], "x_new": [55, 390, 394, 398, 409, 418, 419, 421, 422, 424, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 524, 542, 543, 544, 545, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 603, 605, 610, 613, 614, 615, 616, 617, 663, 664, 665, 666, 667, 820, 827, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 964, 978], "y_new": 55, "declar": [55, 218, 348, 365, 366, 370, 377, 419, 422, 434, 446, 447, 453, 665, 669, 1001, 1005], "membership": [55, 378, 386, 388, 389, 486, 487, 488, 489, 490, 494, 497, 967], "inductive_learn": 55, "probable_clust": 55, "response_method": [55, 112, 130, 179, 188, 205, 258, 278, 283, 286, 320, 321, 343, 606, 607, 608, 673, 675, 676], "144": [55, 67, 204, 244, 247, 255, 275, 370, 994], "plot_inductive_clust": [55, 67], "meant": [56, 146, 360, 366, 373, 449, 467, 652, 817, 942, 956, 958, 962, 995], "unintuit": 56, "possibli": [56, 85, 146, 196, 211, 338, 362, 364, 372, 383, 389, 397, 426, 428, 564, 806, 807, 808, 809, 810, 875, 876, 878, 879, 880, 881, 941, 944, 949, 955, 962, 1009], "unexpect": [56, 348, 365, 369, 372, 383, 510, 671, 952, 967, 996, 1002, 1003, 1006, 1008], "conform": [56, 556, 603, 799, 800, 952, 972, 973, 1001, 1007], "implicit": [56, 196, 377, 396, 397, 547, 657, 658, 946, 951, 972, 1003], "undesir": [56, 150, 399], "despit": [56, 85, 194, 196, 214, 231, 284, 377, 391, 602, 603, 605, 948, 955, 976, 1002, 1003], "unevenli": [56, 196, 250], "phil": [56, 999], "roth": [56, 999, 1002, 1009], "mr": [56, 995, 998, 1008], "incorrect": [56, 262, 302, 315, 348, 365, 389, 582, 583, 607, 608, 707, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "221": [56, 84, 127, 997], "60834549": 56, "63667341": 56, "40887718": 56, "85253229": 56, "222": [56, 84, 127, 967], "x_vari": 56, "y_vari": 56, "223": [56, 84, 127, 150, 159, 201, 215, 362], "unequ": [56, 1002], "x_filter": 56, "494": [56, 67], "plot_kmeans_assumpt": [56, 67], "judg": [57, 202, 389, 982], "definit": [57, 80, 184, 196, 262, 275, 338, 365, 366, 368, 377, 379, 389, 391, 392, 394, 502, 504, 510, 586, 603, 667, 682, 692, 701, 731, 768, 769, 941, 944, 946, 948, 950, 952, 955, 966, 971, 989, 998, 1002, 1009], "shorthand": [57, 377, 390, 442, 832, 833, 997], "homo": 57, "compl": 57, "mea": 57, "context": [57, 234, 257, 352, 353, 359, 364, 376, 377, 389, 390, 395, 396, 397, 399, 400, 413, 420, 423, 425, 427, 432, 433, 436, 439, 442, 443, 447, 506, 510, 511, 512, 514, 517, 518, 519, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 601, 602, 605, 607, 609, 614, 622, 626, 628, 630, 632, 633, 634, 636, 638, 640, 641, 643, 651, 654, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 817, 819, 821, 822, 824, 825, 830, 833, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 942, 948, 952, 958, 962, 966, 973, 976, 985, 994, 1001, 1002, 1007], "n_digit": 57, "1797": [57, 88, 253, 294, 312, 362, 421, 477, 507, 508, 509, 510, 574, 575, 663, 664, 665, 666, 955, 984], "bench_k_mean": 57, "tabl": [57, 214, 255, 362, 365, 368, 373, 389, 397, 557, 633, 655, 770, 783, 808, 919, 948, 952, 953, 958, 995], "ndarrai": [57, 89, 196, 253, 254, 255, 365, 366, 370, 371, 385, 397, 400, 401, 404, 406, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 680, 681, 689, 692, 694, 695, 696, 697, 699, 700, 701, 711, 712, 713, 718, 719, 721, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 758, 762, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 888, 889, 890, 895, 896, 906, 907, 908, 909, 912, 913, 916, 918, 919, 921, 924, 925, 927, 928, 929, 930, 933, 938, 939, 952, 967, 973, 997, 1001, 1004, 1005, 1008], "fit_tim": [57, 119, 185, 204, 257, 393, 794, 795], "inertia_": [57, 60, 63, 419, 422, 424, 1005], "clustering_metr": 57, "sample_s": [57, 230, 338, 764], "formatter_result": 57, "determinist": [57, 122, 353, 361, 366, 377, 389, 419, 422, 424, 426, 427, 428, 433, 434, 437, 526, 534, 535, 539, 540, 558, 559, 666, 670, 780, 781, 827, 878, 879, 944, 948, 995, 998, 1000, 1002, 1003, 1006, 1009], "suffic": [57, 366, 987], "ttime": 57, "tinertia": 57, "thomo": 57, "tcompl": 57, "tv": 57, "tari": 57, "tami": 57, "tsilhouett": 57, "__________________________________________________________________________________": 57, "inertia": [57, 60, 338, 389, 419, 422, 424, 427, 434, 435, 437, 438, 1005], "056": [57, 960], "69662": 57, "680": [57, 213, 215], "719": 57, "699": [57, 255, 271, 338], "570": [57, 362, 985], "695": [57, 253], "181": [57, 294, 370], "037": [57, 337, 683], "69707": 57, "675": [57, 149, 223], "716": [57, 310, 488], "694": 57, "560": [57, 196, 492, 493], "691": [57, 695], "174": [57, 89, 92, 121, 157, 231, 294, 370, 559], "015": [57, 342, 960], "72686": 57, "636": [57, 370], "658": [57, 85], "647": 57, "521": 57, "643": [57, 253, 279, 289], "reduced_data": 57, "mesh": [57, 118, 127, 151, 230, 283, 291, 299, 317, 320], "169": [57, 294], "mark": [57, 91, 141, 162, 167, 259, 266, 357, 365, 366, 368, 372, 373, 377, 389, 510, 564, 582, 583, 586, 607, 633, 824, 825, 865, 866, 883, 897, 902, 907, 948, 976, 989, 994, 995, 1000, 1002, 1003], "938": [57, 67, 192, 758, 952, 982], "plot_kmeans_digit": [57, 67], "kmeans_plusplu": [58, 389, 1006], "4000": [58, 124, 243], "centers_init": 58, "4eacc5": [58, 63], "ff9c34": [58, 63], "4e9a06": [58, 63], "cluster_data": 58, "077": [58, 67], "plot_kmeans_plusplu": [58, 67], "wrong": [59, 196, 281, 337, 348, 362, 365, 366, 397, 474, 479, 699, 729, 764, 952, 958, 967, 997, 999, 1001, 1002, 1003, 1004, 1007], "wide": [59, 60, 113, 229, 298, 375, 389, 394, 397, 941, 972, 976, 987, 994, 996], "ambival": 59, "thick": [59, 285, 955], "ow": 59, "verifi": [59, 166, 196, 365, 369, 936, 955], "7049787496083262": 59, "5882004012129721": 59, "6505186632729437": 59, "56376469026194": 59, "4504666294372765": 59, "silhouette_sampl": [59, 764, 998, 1000, 1002], "distinct": [59, 255, 314, 337, 339, 360, 366, 369, 377, 393, 396, 397, 564, 771, 779, 787, 845, 846, 865, 866, 941, 948, 955, 958, 987, 1002], "center_box": [59, 487], "range_n_clust": 59, "set_size_inch": [59, 135, 235], "lie": [59, 84, 166, 230, 297, 314, 322, 324, 394, 396, 581, 819, 821, 822, 823, 946, 949, 962, 967], "insert": [59, 166, 196, 375, 389, 461, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 885], "blank": [59, 369, 942, 968], "demarc": 59, "perspect": [59, 196, 352, 360, 375, 378, 505, 618, 870, 945], "silhouette_avg": 59, "sample_silhouette_valu": 59, "y_lower": [59, 122], "aggreg": [59, 114, 214, 258, 264, 309, 389, 396, 509, 530, 531, 695, 696, 701, 718, 719, 721, 723, 724, 726, 758, 953, 955, 962], "ith_cluster_silhouette_valu": 59, "size_cluster_i": 59, "y_upper": [59, 122], "fill_betweenx": 59, "2nd": [59, 89, 157, 302, 389, 400, 420, 505, 962], "lw": [59, 77, 78, 80, 99, 104, 105, 190, 197, 199, 202, 206, 213, 220, 243, 250, 251, 264, 265, 270, 280, 297, 314, 331, 332], "fontweight": [59, 191], "bold": [59, 122, 185, 191, 365], "350": [59, 67, 166], "plot_kmeans_silhouette_analysi": [59, 67], "reach": [60, 146, 196, 198, 212, 214, 309, 324, 346, 369, 378, 380, 389, 394, 398, 425, 432, 483, 484, 568, 569, 602, 620, 621, 622, 627, 628, 629, 630, 631, 635, 636, 637, 638, 641, 642, 643, 651, 652, 653, 654, 656, 657, 658, 659, 702, 703, 756, 768, 769, 828, 829, 867, 941, 952, 956, 966, 968, 976, 1005, 1009], "optimum": [60, 155, 166, 172, 268, 394, 447, 948, 951], "stuck": [60, 667, 949], "isotrop": [60, 100, 151, 153, 217, 219, 389, 391, 399, 487, 494, 507, 590, 594, 595, 597, 598], "check_random_st": [60, 212, 219, 228, 233, 332, 366, 373, 377], "trade": [60, 77, 168, 254, 256, 324, 337, 388, 389, 391, 528, 529, 534, 535, 609, 631, 667, 770, 773, 774, 783, 794, 949, 956, 964, 966, 967, 973], "n_init_rang": 60, "n_samples_per_cent": 60, "make_data": 60, "n_clusters_tru": 60, "init_s": [60, 338, 424], "factori": [60, 255, 397, 715, 922, 952], "empti": [60, 69, 105, 208, 275, 315, 352, 360, 366, 368, 389, 401, 457, 508, 536, 537, 605, 606, 780, 836, 877, 885, 890, 891, 897, 967, 985, 996, 998, 1002, 1003, 1005, 1006, 1008], "run_id": 60, "km": [60, 309, 338], "fmt": [60, 207], "my_memb": [60, 62, 63], "540": [60, 67], "plot_kmeans_stability_low_dim_dens": [60, 67], "fast": [61, 172, 185, 211, 212, 230, 231, 298, 339, 352, 360, 365, 373, 389, 391, 393, 394, 396, 397, 399, 401, 422, 444, 449, 483, 507, 508, 510, 513, 515, 519, 522, 541, 563, 564, 566, 607, 608, 615, 633, 634, 647, 649, 662, 674, 770, 783, 792, 793, 794, 803, 804, 811, 812, 816, 827, 907, 921, 944, 948, 951, 954, 955, 957, 958, 968, 972, 976, 987, 994, 995, 1000, 1001, 1004, 1005], "globular": [61, 389], "cleanli": [61, 994], "342": [61, 67], "plot_linkage_comparison": [61, 67], "dorin": [62, 423], "comaniciu": [62, 389, 423], "meer": [62, 389, 423], "ieee": [62, 78, 80, 362, 389, 391, 398, 423, 450, 509, 538, 639, 660, 661, 698, 742, 948, 952, 958], "transact": [62, 362, 389, 400, 420, 423, 509, 513, 515, 522, 538, 619, 639, 660, 661, 698, 699, 729, 742, 952], "intellig": [62, 337, 362, 389, 396, 423, 530, 531, 613, 671, 698, 801, 828, 829, 953, 964, 973, 976], "2002": [62, 387, 389, 396, 413, 423, 568, 569, 699, 729, 818, 865, 944, 952], "603": [62, 423], "619": [62, 423], "labels_uniqu": 62, "538": [62, 67], "plot_mean_shift": [62, 67, 436], "3000": [63, 110, 220, 862, 863], "t_batch": 63, "pairwis": [63, 166, 229, 264, 305, 309, 337, 352, 357, 366, 377, 389, 394, 399, 433, 436, 437, 443, 461, 483, 484, 510, 595, 613, 614, 615, 616, 617, 618, 663, 665, 667, 669, 671, 674, 751, 754, 761, 763, 764, 799, 815, 817, 819, 823, 837, 868, 952, 955, 964, 967, 989, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009], "k_means_cluster_cent": 63, "mbk_means_cluster_cent": 63, "k_means_label": 63, "mbk_means_label": 63, "ninertia": 63, "bbbbbb": 63, "226": [63, 67, 389, 400, 420], "plot_mini_batch_kmean": [63, 67], "reachabl": [64, 389, 425, 430, 431, 432, 817, 912], "shane": [64, 1003, 1006], "grigsbi": 64, "refug": 64, "rocktalu": 64, "cluster_optics_dbscan": [64, 389], "n_points_per_clust": 64, "c1": [64, 119, 157, 228, 332], "c2": [64, 119, 157, 228], "c3": [64, 119], "c4": [64, 974, 989], "c5": [64, 974, 989], "c6": 64, "clust": [64, 425, 432], "labels_050": 64, "reachability_": [64, 389, 425, 430, 431, 432], "core_dist": [64, 430], "core_distances_": [64, 425, 430, 432], "ordering_": [64, 389, 425, 430, 431, 432], "labels_200": 64, "ax3": [64, 315], "ax4": 64, "klass": 64, "xk": [64, 525], "rk": 64, "full_lik": 64, "epsilon": [64, 178, 220, 231, 331, 394, 430, 618, 624, 642, 651, 653, 719, 828, 829, 871, 873, 876, 945, 948, 952, 956, 966, 967, 985, 994], "noptic": 64, "greenyellow": 64, "oliv": [64, 315, 317, 1002, 1003, 1005, 1006, 1007], "ndbscan": 64, "405": [64, 67], "plot_opt": [64, 67], "tri": [65, 104, 217, 284, 353, 366, 369, 375, 378, 387, 396, 424, 426, 428, 606, 607, 608, 645, 667, 673, 675, 676, 783, 920, 957, 975, 978, 996, 1002, 1006], "intens": [65, 98, 362, 394, 419, 422, 434, 582, 583, 607, 608, 772, 941, 959, 976, 1002], "weakli": 65, "outlin": [65, 118, 365, 366, 377, 378, 379, 941, 989], "center1": 65, "center2": 65, "center3": 65, "center4": 65, "radius1": 65, "radius2": 65, "radius3": 65, "radius4": 65, "circle1": 65, "circle2": 65, "circle3": 65, "circle4": 65, "foreground": 65, "label_im": 65, "cleaner": 65, "610": [65, 67], "plot_segmentation_toi": [65, 67], "swiss": [66, 164, 216, 223, 389, 505, 667, 668, 1008], "roll": [66, 164, 216, 223, 367, 389, 505, 667, 668, 901, 976, 1004, 1009], "constraint": [66, 95, 108, 133, 164, 191, 250, 292, 293, 294, 306, 365, 375, 394, 397, 461, 483, 484, 536, 537, 610, 787, 788, 921, 941, 943, 948, 949, 966, 998, 1001, 1002, 1005, 1007], "sole": [66, 353, 375, 389], "respect": [66, 100, 114, 118, 126, 157, 167, 172, 175, 185, 198, 210, 213, 217, 219, 226, 229, 231, 281, 282, 294, 302, 309, 321, 352, 360, 361, 365, 387, 389, 392, 394, 396, 397, 399, 439, 442, 445, 446, 447, 448, 449, 450, 451, 509, 515, 516, 522, 528, 572, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 611, 618, 646, 665, 669, 686, 701, 755, 758, 768, 769, 807, 817, 828, 829, 882, 884, 941, 945, 946, 948, 949, 952, 955, 956, 957, 958, 962, 967, 976, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "oppos": [66, 365, 368, 385, 389, 866, 955, 967, 978, 994], "make_swiss_rol": [66, 221, 1008], "thinner": 66, "come": [66, 69, 79, 85, 100, 101, 149, 230, 305, 332, 337, 338, 352, 354, 358, 362, 365, 368, 372, 375, 377, 380, 389, 393, 396, 397, 415, 425, 431, 447, 525, 679, 766, 790, 872, 875, 941, 942, 946, 949, 951, 955, 958, 967, 978, 994, 1005], "fig1": 66, "jet": 66, "fig2": 66, "428": [66, 67, 120, 133, 338], "plot_ward_structured_vs_unstructur": [66, 67], "355": 67, "auto_examples_clust": 67, "chain": [68, 75, 164, 272, 274, 275, 348, 355, 357, 375, 377, 388, 399, 470, 477, 516, 586, 602, 633, 711, 770, 797, 800, 802, 803, 804, 805, 831, 832, 851, 941, 942, 953, 957, 969, 972, 976, 987, 989], "scenario": [69, 149, 172, 258, 348, 353, 371, 393, 396, 512, 518, 520, 521, 946, 952, 962, 1004], "raster": 69, "caption": 69, "serv": [69, 99, 155, 258, 390, 521, 526, 944, 1008], "matt": [69, 997, 998, 999, 1004, 1005], "terri": [69, 998], "truncatedsvd": [69, 127, 218, 338, 394, 509, 510, 514, 515, 516, 667, 830, 833, 949, 996, 1001, 1005, 1006, 1008], "dictvector": [69, 164, 336, 338, 340, 360, 397, 462, 557, 563, 564, 565, 566, 844, 994, 995, 998, 1004, 1006, 1007], "compris": [69, 122, 253, 337, 338, 339, 360, 375, 394, 396, 490, 776, 949], "subject": [69, 126, 246, 258, 337, 360, 365, 366, 368, 375, 377, 378, 387, 388, 391, 393, 394, 469, 633, 634, 660, 834, 870, 871, 920, 922, 943, 948, 967, 971, 987, 1003, 1004, 1007, 1009], "mccall": 69, "mksol": 69, "dseg": 69, "ti": [69, 196, 242, 245, 253, 333, 352, 574, 575, 610, 694, 699, 729, 768, 769, 872, 875, 878, 951, 952, 967, 995, 997, 998, 1002, 1004, 1008], "fred": [69, 994, 1007], "575": [69, 196], "3539": 69, "1993apr6": 69, "131900": 69, "8407": 69, "perhap": [69, 118, 362, 364, 372, 377, 395, 973], "militari": 69, "slug": 69, "school": [69, 362, 389, 761, 952], "physic": [69, 353, 474, 480, 919, 948], "teacher": [69, 362], "ex": [69, 363, 380, 998, 999], "fighter": 69, "jock": 69, "certainli": [69, 338], "wasn": [69, 1003], "poundal": 69, "flink": 69, "math": [69, 234, 255, 256, 362, 365, 380, 737], "funni": 69, "propon": 69, "si": 69, "insist": 69, "safeti": [69, 375, 390, 973, 1004], "ball": [69, 280, 288, 389, 395, 423, 667, 811, 812, 816, 819, 821, 822, 823, 994, 996, 999, 1005], "world": [69, 73, 166, 221, 234, 337, 352, 355, 358, 362, 389, 394, 397, 942, 952, 954, 971, 973, 976, 981, 989, 994], "mari": [69, 1002, 1003, 1004, 1005, 1008], "shafer": 69, "nasa": [69, 337, 338, 362], "am": [69, 74, 79, 129, 337, 369, 391, 449, 467, 474, 1001], "dryden": 69, "stateless": [69, 338, 354, 366, 397, 564, 834, 835, 843, 962], "state": [69, 71, 79, 198, 229, 236, 241, 261, 307, 348, 353, 354, 365, 366, 368, 370, 372, 375, 377, 388, 397, 416, 419, 422, 424, 429, 434, 450, 519, 564, 654, 773, 774, 781, 783, 785, 811, 812, 818, 865, 866, 893, 941, 942, 948, 954, 957, 964, 972, 973, 976, 996, 998, 1000, 1002, 1004, 1007], "subject_body_extractor": 69, "save": [69, 71, 245, 294, 364, 365, 370, 371, 372, 377, 383, 393, 401, 443, 509, 510, 602, 811, 812, 868, 948, 952, 968, 976, 987, 994, 997, 1001, 1004], "startswith": [69, 218, 288], "subject_body_transform": 69, "sentenc": [69, 337, 339, 360, 378, 397], "text_stat": 69, "num_sent": 69, "text_stats_transform": 69, "subjectbodyextractor": 69, "subjectbodi": 69, "union": [69, 166, 390, 470, 711, 727, 830, 1001], "body_bow": 69, "pull": [69, 308, 353, 363, 367, 377, 378, 1004], "body_stat": 69, "transformer_weight": [69, 439, 442, 830, 999, 1006], "dual": [69, 71, 332, 337, 397, 398, 446, 447, 453, 586, 621, 622, 627, 628, 633, 634, 635, 636, 637, 638, 656, 659, 811, 812, 870, 871, 872, 875, 967, 996, 1005, 1008], "396": [69, 362, 987], "394": [69, 158], "126": [69, 75, 396], "plot_column_transform": [69, 75], "handi": [70, 338, 339], "imput": [70, 129, 163, 168, 227, 236, 306, 309, 355, 357, 368, 376, 377, 390, 396, 464, 476, 540, 555, 614, 620, 647, 793, 814, 832, 889, 891, 972, 973, 989, 996, 997], "miss": [70, 129, 163, 168, 227, 236, 255, 306, 348, 352, 355, 357, 360, 362, 364, 365, 366, 368, 369, 377, 388, 389, 390, 391, 447, 464, 470, 472, 476, 536, 537, 540, 541, 602, 603, 604, 605, 614, 620, 647, 665, 669, 700, 742, 793, 814, 832, 840, 841, 845, 847, 848, 851, 855, 858, 859, 861, 948, 949, 952, 968, 972, 973, 976, 989, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "dispatch": [70, 355, 385, 443, 770, 783, 792, 793, 794, 868, 982, 989], "processor": [70, 129, 166, 257, 355, 400, 413, 420, 423, 425, 427, 432, 433, 436, 439, 442, 447, 506, 510, 511, 512, 514, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 607, 609, 614, 622, 626, 628, 630, 632, 633, 634, 636, 638, 640, 641, 643, 651, 654, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 813, 814, 817, 819, 821, 822, 824, 825, 830, 833, 865, 866], "pedro": [70, 995, 997, 998, 1002], "simpleimput": [70, 129, 161, 162, 168, 227, 236, 306, 309, 348, 377, 602, 603, 604, 942, 962, 1002, 1003, 1005, 1006, 1008], "40945": 70, "titan": [70, 168, 305, 309], "surviv": [70, 168, 941, 972], "ag": [70, 146, 166, 167, 168, 184, 185, 196, 214, 235, 236, 297, 308, 309, 360, 362, 959, 976, 978, 985], "fare": [70, 168, 309, 998, 999], "embark": [70, 168, 305, 309], "sex": [70, 146, 166, 168, 184, 185, 362, 960, 985], "femal": [70, 166, 369, 844, 845, 962], "male": [70, 166, 369, 844, 845, 962], "pclass": [70, 168, 305, 309], "numeric_featur": [70, 309], "numeric_transform": [70, 309], "categorical_transform": 70, "preprocessor": [70, 129, 166, 196, 227, 236, 306, 308, 309, 390, 397, 563, 564, 566, 972, 987, 994, 997, 1002, 1004], "pipelinepipelin": [70, 115, 129, 143, 166, 168, 226, 227, 235, 236, 256, 262, 306, 309], "columntransformercolumntransform": [70, 129, 166, 168, 227, 236, 306, 309], "simpleimputersimpleimput": [70, 129, 168, 227, 236, 306, 309], "standardscalerstandardscal": [70, 129, 166, 226, 227, 235, 236, 262, 306, 309], "onehotencoderonehotencod": [70, 115, 129, 166, 227, 236, 306, 309], "logisticregressionlogisticregress": [70, 115, 226, 227, 236, 294, 306, 309], "make_column_selector": [70, 119, 129, 390, 439, 442, 1004], "subset_featur": 70, "Then": [70, 109, 111, 115, 117, 129, 132, 143, 166, 172, 184, 196, 221, 226, 237, 258, 264, 337, 359, 363, 365, 368, 370, 372, 380, 386, 387, 389, 392, 394, 397, 398, 545, 568, 693, 729, 770, 783, 831, 942, 951, 952, 958, 967, 987, 1003], "int64index": 70, "1047": 70, "1118": 70, "684": [70, 79], "1045": 70, "841": 70, "1046": 70, "kb": [70, 166], "numerical_transform": 70, "practic": [70, 79, 85, 98, 119, 149, 166, 172, 198, 225, 231, 256, 263, 281, 282, 307, 324, 353, 355, 365, 366, 367, 368, 370, 372, 376, 377, 389, 391, 393, 394, 395, 396, 397, 399, 422, 427, 437, 496, 499, 564, 607, 608, 645, 768, 810, 863, 870, 941, 942, 946, 951, 952, 953, 954, 955, 958, 959, 962, 972, 973, 974, 976, 978, 987, 988, 989, 996, 1000, 1002, 1004, 1006], "yourself": [70, 364, 365, 369, 372, 956], "selector": [70, 142, 143, 372, 397, 441, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 996, 1004, 1006], "dtype_exclud": [70, 441], "dtype_includ": [70, 119, 129, 390, 441], "794": 70, "lt": [70, 115, 129, 166, 253, 267, 363, 365], "_column_transform": [70, 129], "0x7f2b4e38b7c0": 70, "gt": [70, 115, 129, 166, 253, 267, 363, 365, 368], "0x7f2b4e38b7f0": 70, "exactli": [70, 175, 189, 196, 246, 263, 298, 337, 365, 366, 368, 386, 389, 393, 394, 397, 402, 428, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 490, 501, 565, 566, 590, 651, 653, 677, 679, 736, 771, 787, 792, 944, 948, 949, 950, 952, 953, 968, 986, 987, 994, 1000, 1001, 1007], "hyperparamet": [70, 109, 149, 150, 156, 157, 161, 164, 167, 175, 185, 210, 214, 225, 248, 253, 258, 260, 271, 277, 294, 337, 366, 377, 393, 394, 396, 399, 477, 510, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 618, 634, 640, 648, 651, 701, 758, 770, 783, 941, 946, 947, 948, 951, 952, 954, 956, 958, 966, 973, 987, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "preprocessor__num__imputer__strategi": 70, "classifier__c": 70, "grid_search": [70, 73, 236, 253, 263, 390, 996, 997, 998, 999, 1000, 1001], "gridsearchcvgridsearchcv": [70, 236, 253, 255], "trigger": [70, 71, 368, 390, 831, 832, 890, 891, 907, 948, 987, 1002, 1008, 1009], "best_params_": [70, 72, 122, 149, 231, 253, 259, 307, 324, 376, 770, 773, 774, 783, 941, 983, 987], "best_score_": [70, 72, 231, 256, 259, 260, 324, 648, 650, 770, 773, 774, 783, 982, 983, 987, 1005], "784": [70, 293], "cv_results_": [70, 71, 72, 81, 135, 145, 253, 254, 255, 256, 259, 263, 266, 267, 277, 324, 332, 447, 569, 770, 773, 774, 783, 987, 1000, 1004, 1006, 1007], "sort_valu": [70, 168, 255, 266], "mean_test_scor": [70, 71, 72, 81, 135, 254, 255, 256, 263, 266, 267, 277, 324, 332, 447, 569, 770, 783, 941, 1000, 1007], "ascend": [70, 168, 396, 425, 431, 602, 610, 882, 884, 966, 1004], "std_test_scor": [70, 72, 135, 254, 255, 256, 263, 277, 447, 569, 770, 783, 1000, 1007], "param_preprocessor__num__imputer__strategi": 70, "param_classifier__c": 70, "784167": 70, "035824": 70, "780366": 70, "032722": 70, "780348": 70, "037245": 70, "779414": 70, "033105": 70, "864": [70, 75], "plot_column_transformer_mixed_typ": [70, 75], "addition": [71, 112, 166, 196, 214, 306, 308, 338, 365, 375, 387, 397, 585, 586, 621, 627, 646, 848, 941, 942, 952, 960, 972, 1000], "instanti": [71, 152, 308, 367, 396, 425, 542, 543, 577, 605, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 897, 958, 984, 994, 1002, 1006], "argument": [71, 197, 226, 229, 353, 359, 360, 365, 367, 369, 370, 372, 373, 375, 377, 389, 390, 393, 394, 396, 398, 400, 401, 403, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 427, 429, 432, 434, 436, 438, 467, 478, 483, 508, 510, 511, 513, 515, 526, 534, 535, 536, 542, 543, 544, 545, 551, 556, 557, 563, 564, 566, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 606, 614, 618, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 641, 643, 651, 656, 659, 663, 667, 671, 673, 674, 675, 676, 688, 693, 708, 715, 736, 752, 753, 799, 800, 803, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 828, 831, 835, 884, 888, 897, 902, 904, 920, 921, 922, 936, 941, 944, 948, 949, 950, 952, 955, 959, 960, 967, 968, 978, 982, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009], "memoiz": [71, 360, 377], "costli": [71, 77, 116, 161, 256, 333, 353, 370, 389, 419, 602, 777, 779, 862, 863, 907, 952, 955, 964, 973], "mcgibbon": [71, 996, 997, 1000], "selectkbest": [71, 73, 142, 143, 309, 348, 365, 390, 398, 556, 567, 570, 571, 573, 575, 581, 941, 995, 1000], "chi2": [71, 327, 397, 398, 427, 556, 567, 570, 571, 573, 574, 575, 580, 581, 584, 595, 613, 614, 615, 616, 617, 618, 732, 738, 747, 994, 1001, 1008], "pipe": [71, 72, 119, 236, 254, 307, 308, 376, 390, 397, 565, 831, 855, 856, 858, 859, 860, 861, 941, 962, 983], "reduce_dim": [71, 236, 254, 390], "popul": [71, 77, 79, 166, 196, 258, 297, 360, 362, 373, 377, 391, 416, 686, 692, 813, 814, 815, 817, 819, 821, 822, 823, 921, 952, 958, 962, 968], "n_features_opt": 71, "c_option": 71, "iterated_pow": [71, 507, 510, 516, 1000], "reduce_dim__n_compon": [71, 254, 390], "classify__c": 71, "reduce_dim__k": 71, "reducer_label": 71, "kbest": [71, 567], "mean_scor": [71, 267, 338, 447, 1007], "alphabet": [71, 377, 714], "bar_offset": 71, "bgrcmyk": 71, "reducer_scor": 71, "sometim": [71, 129, 255, 293, 338, 348, 354, 365, 366, 368, 370, 376, 377, 380, 389, 391, 394, 396, 397, 424, 509, 510, 513, 515, 516, 836, 837, 838, 885, 947, 948, 949, 952, 957, 962, 963, 967, 978, 986, 991, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "worthwhil": [71, 377], "slower": [71, 98, 119, 161, 231, 339, 396, 397, 398, 426, 428, 513, 515, 522, 530, 531, 533, 538, 540, 563, 564, 566, 606, 607, 608, 618, 634, 647, 649, 662, 667, 678, 799, 803, 804, 945, 949, 950, 951, 953, 955, 968, 987, 998, 1005], "constructor": [71, 228, 266, 366, 377, 388, 390, 397, 439, 442, 524, 525, 530, 542, 543, 544, 545, 556, 557, 563, 564, 572, 643, 651, 652, 813, 814, 815, 817, 818, 819, 821, 822, 823, 830, 831, 832, 833, 834, 843, 920, 941, 953, 962, 967, 973, 978, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009], "folder": [71, 360, 363, 365, 368, 372, 380, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 955, 987], "cached_pip": [71, 390], "delet": [71, 313, 315, 368, 369, 444, 449, 460], "exit": [71, 275, 372, 443], "benefici": [71, 73, 77, 95, 127, 297, 298, 363, 949], "266": [71, 75, 260, 271], "plot_compare_reduct": [71, 75], "924": 72, "logistic__c": [72, 983], "046415888336127774": 72, "pca__n_compon": [72, 983], "truncat": [72, 127, 218, 373, 509, 510, 514, 515, 516, 519, 651, 653, 699, 729, 768, 820, 883, 907, 941, 951, 952, 966, 983, 987, 988, 989, 1000, 1002], "x_digit": [72, 137, 292, 390, 982, 983, 985], "y_digit": [72, 137, 292, 390, 982, 983, 985], "__": [72, 256, 377, 390, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 983, 1002, 1003], "spectrum": [72, 499, 519, 670, 907, 976, 983, 1002], "ax0": [72, 74, 196, 228, 338, 983], "n_components_": [72, 103, 377, 417, 421, 509, 513, 514, 515, 516, 517, 518, 862, 863, 983, 1003, 1005], "explained_variance_ratio_": [72, 104, 338, 394, 509, 516, 519, 524, 983, 997, 1000], "named_step": [72, 85, 302, 390, 568, 569, 572, 831, 832, 870, 871, 948, 983, 1001, 1003], "components_col": 72, "param_pca__n_compon": 72, "best_clf": 72, "nlargest": 72, "yerr": [72, 78, 80, 116, 119, 277, 315], "val": [72, 208, 255, 909], "plot_digits_pip": [72, 75], "candid": [73, 253, 256, 263, 307, 354, 365, 368, 389, 396, 423, 425, 770, 773, 774, 781, 783, 948, 955, 968, 1000], "features__pca__n_compon": 73, "features__univ_select__k": 73, "svm__c": 73, "933": [73, 393], "967": [73, 952, 956], "transformer_list": [73, 390, 830, 833, 942, 1005, 1006], "univ_select": 73, "amuel": [73, 114, 187, 230, 314, 332], "ai": [73, 114, 187, 230, 314, 332, 393], "bonn": [73, 114, 187, 230, 314, 332], "mayb": [73, 293, 377, 397, 967, 973], "combined_featur": 73, "x_featur": [73, 615, 616, 617, 944], "plot_feature_union": [73, 75], "overview": [74, 367, 376, 377, 707, 716, 954, 966, 988, 989], "transformedtargetregressor": [74, 166, 196, 375, 390, 568, 569, 572, 1002, 1004, 1007], "hous": [74, 129, 161, 162, 297, 307, 358, 366, 464, 474, 959, 989], "median_absolute_error": [74, 166, 952, 998, 1004, 1006], "r2_score": [74, 180, 191, 192, 396, 408, 440, 456, 457, 458, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 697, 701, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 941, 952, 995, 997, 1003, 1007, 1008], "translat": [74, 366, 399, 502, 589, 840, 841, 856, 949, 952, 970, 976], "lowest": [74, 85, 359, 389, 393, 610, 612, 776, 877, 878, 949, 952, 968], "logarithm": [74, 129, 166, 229, 256, 324, 377, 398, 435, 565, 633, 634, 651, 678, 699, 714, 724, 728, 729, 730, 811, 812, 968, 982, 1001], "log1p": [74, 228, 835, 952, 962], "expm1": 74, "y_tran": 74, "At": [74, 201, 267, 312, 315, 352, 353, 378, 380, 385, 392, 396, 413, 416, 440, 563, 564, 566, 577, 799, 801, 838, 918, 941, 948, 951, 953, 957, 966, 976], "regr": [74, 192, 390, 529, 531, 540, 621, 622, 642, 804, 829, 871, 873, 876, 967, 985], "1750": 74, "regr_tran": 74, "inverse_func": [74, 166, 390, 440, 835, 962, 1002], "035": 74, "sell": 74, "quantiletransform": [74, 167, 301, 390, 440, 847, 859, 942, 962, 1001, 1002, 1003, 1004, 1005], "quantile_transform": [74, 848, 858, 962, 1001, 1002, 1003], "house_pric": [74, 129, 474], "select_dtyp": [74, 119, 441], "nan": [74, 119, 161, 162, 166, 214, 236, 250, 258, 305, 352, 353, 357, 366, 373, 377, 396, 443, 470, 530, 531, 532, 536, 537, 539, 568, 569, 572, 578, 581, 584, 602, 603, 604, 605, 610, 686, 688, 695, 696, 697, 701, 742, 751, 758, 770, 773, 774, 783, 793, 794, 795, 798, 840, 841, 845, 847, 848, 851, 855, 858, 859, 861, 888, 889, 890, 891, 927, 941, 952, 962, 989, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "inf": [74, 152, 285, 373, 389, 399, 425, 432, 446, 447, 453, 528, 529, 534, 535, 568, 569, 572, 581, 582, 583, 594, 602, 610, 612, 623, 624, 625, 627, 644, 646, 647, 651, 655, 662, 701, 703, 719, 751, 758, 827, 836, 843, 888, 890, 891, 905, 952, 962, 1001, 1003, 1004, 1005, 1006, 1008, 1009], "lotfrontag": 74, "garageyrblt": 74, "masvnrarea": [74, 129], "to_fram": 74, "n_quantil": [74, 301, 848, 859, 1003], "output_distribut": [74, 297, 301, 390, 847, 848, 858, 859, 962], "2e5": [74, 196, 836], "8e": 74, "ticklabel_format": 74, "scilimit": 74, "479": 74, "weaker": 74, "residu": [74, 192, 198, 408, 440, 456, 457, 458, 527, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 646, 647, 648, 653, 654, 660, 661, 717, 758, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 948, 952, 985, 1006, 1007], "smile": [74, 360, 1008], "7e5": 74, "5e4": 74, "8e5": 74, "multialign": [74, 267], "3e4": 74, "64e4": 74, "534": [74, 75, 166], "plot_transformed_target": [74, 75, 440], "873": [75, 362], "auto_examples_compos": 75, "mahalanobi": [76, 82, 164, 389, 391, 425, 432, 444, 445, 446, 447, 448, 449, 450, 451, 674, 751, 752, 753, 818, 946, 958, 1002, 1005, 1006], "ledoitwolf": [76, 78, 82, 103, 164, 391, 444, 445, 449, 450, 451, 452, 770, 998], "likelihood": [76, 78, 79, 80, 82, 103, 149, 150, 151, 153, 154, 155, 156, 158, 164, 184, 214, 244, 248, 255, 261, 271, 294, 297, 366, 377, 387, 391, 394, 396, 399, 413, 444, 445, 446, 447, 448, 449, 450, 451, 452, 490, 507, 511, 516, 524, 525, 526, 585, 586, 620, 633, 686, 714, 768, 769, 770, 794, 797, 816, 827, 847, 858, 948, 951, 954, 962, 967, 997, 998, 1003, 1009], "empiricalcovari": [77, 79, 80, 391, 444, 448, 449, 450, 451, 958], "unbias": [77, 387, 391, 394, 413, 525, 631, 647, 649, 662, 948, 982], "shrunk": [77, 103, 297, 402, 448, 450, 451, 454, 455, 524, 946, 966, 988, 989], "base_x_train": 77, "base_x_test": 77, "coloring_matrix": [77, 78], "shrunkcovari": [77, 103, 391, 444, 445, 448, 449, 450], "empirical_covari": [77, 391], "log_likelihood": [77, 585, 586, 768, 769], "span": [77, 122, 230, 252, 360, 368, 397, 524, 611, 770, 773, 952, 986], "negative_loglik": 77, "real_cov": [77, 78, 445, 448, 449, 450, 451], "emp_cov": [77, 79, 81, 453, 455], "loglik_r": 77, "inv": [77, 81, 292], "formula": [77, 78, 386, 389, 391, 402, 448, 450, 491, 492, 493, 565, 618, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 651, 653, 678, 702, 728, 737, 941, 946, 948, 952, 957, 958, 962, 966, 999, 1001, 1003], "propos": [77, 78, 275, 360, 365, 366, 375, 377, 389, 391, 396, 401, 425, 510, 582, 583, 651, 652, 653, 828, 829, 948, 951, 955, 966, 970, 1001], "asymptot": [77, 78, 185, 352, 391, 449, 511, 948, 951, 1004], "criterion": [77, 78, 169, 184, 204, 267, 306, 366, 373, 377, 389, 394, 417, 421, 424, 427, 434, 437, 507, 512, 514, 521, 528, 529, 532, 533, 534, 535, 539, 540, 541, 581, 602, 620, 623, 631, 641, 642, 643, 644, 646, 651, 652, 653, 655, 666, 670, 684, 769, 867, 872, 873, 874, 875, 876, 878, 879, 880, 881, 948, 951, 952, 960, 965, 968, 974, 986, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "chen": [77, 78, 391, 396, 450, 699, 729, 944, 952, 997, 1000, 1001, 1002, 1004, 1007, 1008], "Its": [77, 109, 253, 361, 366, 377, 394, 399, 513, 947, 957, 960, 966, 972, 976, 997], "tuned_paramet": [77, 135, 253], "loglik_lw": 77, "loglik_oa": 77, "unseen": [77, 120, 143, 185, 204, 268, 281, 354, 357, 366, 376, 377, 389, 393, 817, 848, 859, 943, 952, 958, 960, 962, 968, 978, 997, 1002, 1006], "loglog": [77, 229], "lik_max": 77, "amax": [77, 120], "lik_min": 77, "amin": 77, "vline": [77, 97, 183, 184, 185, 197, 255, 268, 298], "shrinkage_": [77, 78, 448, 450], "magenta": [77, 124], "purpl": [77, 91, 221], "cyan": [77, 113, 166, 278, 286, 332], "realli": [77, 168, 185, 368, 369, 370, 958, 976, 1008], "interestingli": [77, 146, 962], "outperform": [77, 85, 129, 302, 375, 393, 396, 427, 437, 954], "471": [77, 82, 167, 362], "plot_covariance_estim": [77, 82], "whose": [78, 79, 80, 146, 154, 196, 214, 322, 360, 372, 373, 377, 387, 389, 391, 396, 398, 399, 402, 413, 414, 415, 423, 436, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 490, 509, 513, 515, 516, 519, 522, 524, 547, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 615, 646, 670, 692, 770, 776, 783, 796, 817, 836, 862, 863, 906, 931, 932, 946, 953, 957, 958, 959, 967, 997, 1002, 1003, 1005, 1008], "inspir": [78, 126, 214, 365, 375, 396, 536, 537, 895, 942, 972, 1003], "mmse": [78, 391, 450], "tran": [78, 391, 450], "octob": [78, 360, 391, 450, 994, 1001, 1007], "toeplitz": 78, "choleski": [78, 373, 453, 502, 586, 625, 626, 629, 630, 631, 647, 649, 657, 658, 662, 768, 769, 948, 997, 1001, 1003, 1006], "simul": [78, 97, 190, 232, 255, 976], "n_samples_rang": [78, 229], "lw_mse": 78, "oa_ms": 78, "lw_shrinkag": 78, "oa_shrinkag": 78, "error_norm": [78, 80, 444, 445, 446, 447, 448, 449, 450, 451], "darkorang": [78, 99, 104, 105, 197, 207, 220, 241, 242, 243, 245, 246, 262, 264, 270, 278, 280, 286, 287, 314, 332, 344], "436": [78, 82, 229, 295], "plot_lw_vs_oa": [78, 82], "x_i": [79, 114, 141, 166, 197, 308, 332, 389, 394, 395, 396, 399, 589, 590, 594, 597, 598, 600, 806, 807, 810, 943, 944, 948, 954, 955, 956, 962, 966, 967, 968], "d_": [79, 389, 394, 623, 644, 655, 751, 949, 954], "mle": [79, 103, 516, 1002, 1005], "resist": [79, 80, 365], "erron": [79, 80, 394, 948, 995, 1002, 1006], "breakdown": [79, 80, 213, 654, 948], "n_": [79, 80, 255, 308, 389, 394, 396, 621, 627, 660, 671, 944, 948, 952, 954, 955, 959, 964, 967, 968], "behind": [79, 332, 366, 368, 372, 388, 391, 396, 951, 955, 964], "smallest": [79, 80, 196, 342, 360, 389, 391, 398, 415, 502, 516, 605, 629, 630, 631, 657, 658, 665, 669, 670, 770, 773, 774, 783, 788, 968, 1007], "pure": [79, 80, 85, 196, 377, 389, 448, 454, 470, 532, 533, 534, 535, 539, 540, 541, 557, 679, 689, 759, 766, 878, 879, 880, 881, 962], "rousseuw": [79, 80], "rousseeuw": [79, 80, 389, 391, 444, 449, 763, 764, 958], "ass": [79, 80, 391, 449], "1984": [79, 80, 391, 449, 878, 879, 968], "wilson": [79, 362, 994, 997], "hilferti": 79, "1931": 79, "chi": [79, 110, 301, 357, 398, 494, 567, 570, 571, 573, 574, 575, 579, 580, 581, 584, 613, 614, 615, 616, 617, 731, 732, 989, 994, 999, 1000], "proceed": [79, 360, 362, 370, 389, 400, 415, 420, 486, 671, 682, 699, 729, 818, 867, 952, 964, 965, 966], "academi": [79, 818], "688": 79, "n_outlier": [79, 80, 199, 225, 282], "gen_cov": 79, "ey": [79, 80, 242, 246, 324, 360, 509, 516, 525], "outliers_cov": 79, "mincovdet": [79, 80, 391, 444, 445, 448, 450, 451, 958, 994, 1001], "robust_cov": 79, "nmcd": 79, "nmle": 79, "26253567e": 79, "06695631e": 79, "22747343e": 79, "23773583": 79, "24640578": 79, "51963999": 79, "inlier": [79, 199, 225, 234, 297, 377, 391, 444, 538, 646, 652, 817, 848, 859, 873, 874, 876, 948, 958, 1001, 1002, 1007], "inlier_plot": 79, "outlier_plot": 79, "get_xlim": [79, 191, 201, 297], "zz": 79, "mahal_emp_cov": 79, "emp_cov_contour": 79, "pubu_r": 79, "mahal_robust_cov": 79, "robust_contour": 79, "ylorbr_r": 79, "borderaxespad": 79, "cubic": [79, 399], "suggest": [79, 98, 113, 116, 166, 169, 255, 324, 352, 364, 365, 371, 377, 393, 394, 396, 444, 449, 540, 620, 796, 946, 948, 949, 957, 967, 987, 998, 1005, 1008], "emp_mah": 79, "markeredgewidth": [79, 259], "rm": [79, 152, 362, 363, 368, 372, 391], "mahal": 79, "robust_mah": 79, "location_": [79, 80, 444, 445, 446, 447, 448, 449, 450, 451], "346": [79, 82, 96, 107, 396, 476, 530, 531], "plot_mahalanobis_dist": [79, 82], "aim": [80, 162, 283, 314, 354, 360, 363, 365, 377, 383, 389, 391, 397, 423, 674, 948, 955, 962, 967, 972, 978, 986, 1008], "compens": [80, 172, 196, 214, 256, 332, 391, 394], "soon": [80, 377, 985], "5n_": 80, "johanna": 80, "hardin": 80, "rock": 80, "decemb": [80, 154, 360, 639, 660, 661, 994, 1002, 1004, 1006], "zoubir": 80, "koivunen": 80, "chakhchoukh": 80, "muma": 80, "signal": [80, 95, 96, 97, 105, 122, 149, 154, 155, 164, 174, 195, 197, 215, 246, 308, 388, 389, 397, 398, 399, 478, 496, 501, 506, 509, 512, 516, 600, 621, 627, 628, 638, 639, 659, 660, 661, 758, 948, 952, 969, 976, 981, 988, 989], "tutori": [80, 135, 136, 137, 138, 185, 198, 214, 255, 355, 365, 370, 372, 376, 383, 389, 427, 437, 666, 967, 985, 997], "treatment": [80, 359, 394, 444, 449], "concept": [80, 120, 355, 365, 375, 388, 389, 395, 397, 944, 952, 955, 968, 976], "magazin": [80, 398], "29": [80, 150, 154, 187, 196, 213, 313, 362, 363, 380, 381, 382, 396, 534, 535, 665, 669, 754, 768, 823, 948, 949, 966], "range_n_outli": 80, "err_loc_mcd": 80, "err_cov_mcd": 80, "err_loc_emp_ful": 80, "err_cov_emp_ful": 80, "err_loc_emp_pur": 80, "err_cov_emp_pur": 80, "outliers_index": 80, "outliers_offset": 80, "inliers_mask": 80, "pure_x": 80, "pure_loc": 80, "pure_emp_cov": 80, "font_prop": 80, "hat": [80, 105, 255, 280, 308, 363, 387, 391, 395, 396, 943, 948, 949, 952, 954, 956], "_2": [80, 154, 394, 397, 506, 512, 520, 521, 621, 627, 948, 956, 966, 967], "x_size": 80, "plot_robust_vs_empirical_covari": [80, 82], "graphicallasso": [81, 391, 444, 445, 447, 448, 449, 450, 451, 453, 1002], "largest": [81, 97, 198, 362, 389, 391, 394, 415, 419, 502, 516, 532, 533, 534, 535, 539, 540, 563, 683, 768, 769, 788, 809, 878, 879, 880, 881, 907, 949, 952, 962, 967, 968], "invert": [81, 100, 143, 218, 338, 339, 375, 391, 397, 474, 605, 664, 668, 962, 1003], "fairli": [81, 121, 219, 270, 292, 372, 389, 534, 535, 674, 953, 985], "lost": [81, 360, 375, 949, 952], "tweak": [81, 393, 951, 987, 1005], "readabl": [81, 256, 308, 369, 370, 372, 383, 509, 1003, 1006, 1007, 1008, 1009], "neighborhood": [81, 164, 217, 276, 289, 362, 377, 389, 394, 400, 420, 425, 432, 477, 479, 490, 516, 524, 603, 671, 797, 813, 814, 817, 819, 820, 821, 822, 823, 825, 831, 832, 851, 949, 958, 974, 989, 1003], "make_sparse_spd_matrix": [81, 504], "prng": 81, "prec": [81, 226, 502, 952], "smallest_coef": [81, 502], "largest_coef": [81, 502], "multivariate_norm": [81, 85, 240, 444, 445, 446, 447, 448, 449, 450, 451], "ledoit_wolf": [81, 391, 1007], "prec_": 81, "lw_cov_": 81, "lw_prec_": 81, "this_cov": 81, "this_prec": 81, "ma": [81, 324, 948, 1000, 1005], "masked_equ": 81, "set_facecolor": [81, 240], "set_axis_bgcolor": 81, "alpha_": [81, 135, 166, 176, 184, 185, 447, 586, 619, 620, 622, 626, 628, 630, 631, 636, 638, 648, 650, 948, 968, 982, 994, 1001], "plot_sparse_cov": [81, 82], "579": 82, "auto_examples_covari": 82, "cross_decomposit": [83, 84, 85, 164, 232, 355, 998, 999, 1001, 1002, 1003], "plscanon": [84, 456, 458, 459, 974, 989, 998, 1002, 1004, 1006, 1008], "plsregress": [84, 85, 974, 989, 1001, 1004, 1006, 1008], "share": [84, 127, 166, 337, 346, 348, 352, 353, 363, 366, 372, 389, 394, 397, 524, 643, 678, 682, 768, 769, 946, 994, 996, 1002, 1004, 1006], "appar": [84, 954, 976], "scatterplot": [84, 175, 255, 278], "maxim": [84, 85, 95, 106, 122, 175, 246, 256, 260, 264, 265, 285, 302, 307, 324, 342, 346, 362, 377, 386, 389, 392, 394, 398, 399, 524, 585, 586, 619, 620, 623, 644, 654, 655, 694, 770, 773, 774, 783, 840, 846, 855, 946, 948, 952, 955, 957, 967, 982, 985, 997, 999, 1004, 1007], "weak": [84, 109, 120, 123, 214, 261, 393, 534, 605, 955, 976], "spheric": [84, 219, 242, 244, 245, 288, 361, 737, 768, 769, 948, 951, 955, 972], "var": [84, 85, 101, 113, 146, 176, 255, 362, 398, 620, 872, 873, 874, 875, 876, 952, 1002], "corr": [84, 169, 255], "corrcoef": [84, 106], "plsca": [84, 457], "x_train_r": 84, "y_train_r": 84, "x_test_r": 84, "y_test_r": 84, "yj": [84, 301], "noiz": 84, "xb": [84, 850], "_pl": 84, "503": 84, "n_target": [84, 377, 392, 456, 457, 458, 459, 499, 531, 586, 618, 621, 622, 625, 626, 627, 628, 629, 631, 632, 635, 636, 637, 638, 639, 640, 646, 647, 648, 649, 650, 656, 657, 658, 659, 660, 661, 662, 953, 1006, 1008], "50210309": 84, "55301008": 84, "72528805": 84, "03429511": 84, "83576671": 84, "74902647": 84, "03916339": 84, "84652988": 84, "78629756": 84, "11231897": 84, "1905275": 84, "33508757": 84, "35433161": 84, "32686504": 84, "39877158": 84, "47827435": 84, "38004088": 84, "35574845": 84, "exce": [84, 273, 306, 399, 418, 490, 577, 624, 633, 1003, 1006, 1008], "264": [84, 86, 176, 215, 275], "plot_compare_cross_decomposit": [84, 86], "pcr": [85, 392], "pl": [85, 200, 362, 392, 456, 457, 458, 459, 999], "greedili": [85, 146, 393, 398, 435], "suffer": [85, 117, 168, 297, 338, 352, 389, 396, 399, 519, 736, 947, 948, 952, 955, 1003], "mention": [85, 214, 306, 348, 352, 365, 368, 369, 375, 377, 671, 862, 863, 941, 946, 948, 973, 976, 987, 1001, 1002, 1003], "dive": [85, 365, 370], "explained_variance_": [85, 509, 516, 519, 986, 1001], "onto": [85, 218, 219, 230, 297, 375, 394, 397, 401, 415, 423, 436, 508, 514, 518, 602, 603, 605, 663, 946, 950, 955], "recommend": [85, 117, 161, 213, 226, 301, 307, 352, 353, 355, 359, 363, 365, 366, 370, 372, 375, 380, 392, 393, 394, 396, 398, 414, 415, 422, 424, 426, 470, 483, 510, 513, 519, 524, 536, 537, 544, 581, 586, 606, 607, 645, 651, 667, 672, 673, 675, 676, 781, 783, 827, 836, 850, 851, 855, 856, 858, 859, 860, 861, 863, 872, 875, 907, 920, 941, 948, 949, 952, 954, 956, 959, 962, 964, 966, 967, 968, 971, 976, 989, 996, 997, 1003, 1004, 1005, 1006, 1008], "linearregress": [85, 132, 175, 186, 191, 192, 193, 194, 199, 202, 213, 228, 233, 251, 269, 298, 348, 365, 375, 376, 390, 396, 440, 545, 607, 610, 621, 624, 627, 629, 646, 647, 662, 948, 962, 985, 998, 999, 1003, 1006, 1007, 1008], "retriev": [85, 166, 200, 262, 338, 346, 368, 377, 390, 394, 397, 398, 443, 470, 565, 568, 569, 601, 628, 638, 659, 699, 703, 705, 706, 729, 754, 806, 810, 843, 868, 948, 950, 952, 954, 972, 973, 986, 999, 1004, 1006, 1008], "026": 85, "remark": [85, 146, 354, 365, 962], "predit": 85, "pca_2": 85, "673": [85, 370], "524": [85, 86], "plot_pcr_vs_pl": [85, 86], "788": 86, "auto_examples_cross_decomposit": 86, "multilabel": [87, 92, 164, 224, 238, 262, 273, 360, 366, 367, 377, 384, 456, 461, 471, 483, 484, 490, 498, 516, 532, 539, 542, 649, 650, 677, 681, 687, 699, 702, 703, 707, 708, 711, 712, 727, 729, 756, 757, 760, 761, 765, 767, 800, 804, 828, 835, 838, 842, 844, 854, 875, 878, 880, 896, 916, 917, 918, 963, 974, 975, 987, 989, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1009], "067": [88, 92, 158], "plot_digits_last_imag": [88, 92], "iris": [89, 261, 262, 984], "150x4": 89, "plot_iris_dataset": [89, 92], "unus": [89, 101, 167, 217, 219, 438, 553, 736, 744, 941, 949, 994, 1002, 1004, 1005, 1007], "plai": [89, 96, 123, 151, 179, 205, 249, 264, 265, 278, 286, 320, 321, 352, 375, 987], "set1": [89, 255, 284, 285], "getter": [89, 444, 445, 446, 447, 448, 449, 450, 451, 568, 569, 572], "110": [89, 175, 193, 203, 228, 413, 946, 947], "3rd": [89, 157, 806, 849, 954, 962], "easi": [90, 167, 204, 243, 253, 255, 324, 337, 348, 360, 370, 372, 375, 376, 389, 396, 475, 479, 485, 838, 941, 947, 951, 959, 962, 972, 973, 976, 987, 1004], "make_gaussian_quantil": [90, 110, 112, 361, 445, 449, 450, 451, 495], "321": 90, "323": 90, "y2": [90, 112, 690, 737, 953], "324": [90, 360], "multi": [90, 108, 109, 133, 164, 174, 212, 215, 216, 219, 223, 224, 225, 232, 235, 238, 248, 264, 271, 273, 290, 295, 305, 337, 341, 347, 353, 360, 362, 366, 367, 373, 377, 380, 389, 396, 397, 399, 405, 413, 427, 437, 444, 449, 469, 470, 479, 480, 485, 489, 490, 494, 495, 497, 516, 524, 525, 526, 528, 530, 532, 533, 534, 536, 539, 540, 542, 544, 585, 608, 618, 621, 622, 627, 628, 632, 633, 635, 636, 637, 638, 641, 643, 647, 648, 649, 650, 651, 656, 659, 665, 677, 687, 694, 702, 707, 713, 715, 756, 770, 783, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 818, 819, 821, 827, 828, 829, 832, 838, 851, 854, 865, 866, 870, 872, 875, 878, 879, 880, 882, 884, 890, 893, 896, 941, 953, 955, 959, 962, 966, 972, 973, 974, 978, 984, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008], "326": [90, 229], "376": [90, 92, 327, 335, 960], "plot_random_dataset": [90, 92], "make_multilabel_classif": [91, 232, 361, 490, 511, 761, 802, 803, 952, 996, 997, 999, 1005], "star": [91, 132, 365], "degener": [91, 401, 416, 429, 508, 694, 948, 952, 1003, 1007, 1008], "vocabulari": [91, 211, 337, 338, 375, 397, 563, 564, 565, 566, 954, 978, 987, 994, 996, 999, 1002, 1005, 1007], "757": [91, 253, 362], "w0": 91, "w1": [91, 396, 632], "make_ml_clf": 91, "ff3333": 91, "0198e1": 91, "bf5fff": 91, "fcd116": 91, "ff7216": 91, "4dbd33": 91, "87421f": 91, "plot_2d": [91, 217], "p_c": [91, 498], "p_w_c": [91, 498], "allow_unlabel": [91, 232, 498], "return_distribut": [91, 498], "sep": [91, 474], "p_w": 91, "plot_random_multilabel_dataset": [91, 92], "767": 92, "auto_examples_dataset": 92, "blind": [93, 107, 164, 337, 394, 508, 516], "fastica": [93, 107, 164, 394, 507, 510, 516, 986, 994, 996, 1002, 1008, 1009], "increment": [93, 107, 164, 258, 368, 370, 418, 422, 438, 479, 508, 509, 510, 511, 514, 516, 519, 577, 621, 633, 641, 795, 803, 804, 806, 807, 808, 809, 810, 840, 841, 851, 870, 871, 927, 948, 954, 997, 998], "fa": [93, 106, 107, 164, 370, 394, 448, 451, 507, 516, 770, 793], "precomput": [93, 107, 164, 174, 215, 220, 275, 277, 366, 373, 375, 377, 389, 397, 400, 408, 416, 417, 420, 421, 425, 427, 432, 440, 456, 457, 458, 499, 506, 510, 512, 515, 517, 523, 529, 531, 533, 535, 537, 540, 543, 545, 585, 586, 595, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 656, 657, 659, 660, 663, 665, 666, 667, 671, 747, 751, 754, 763, 764, 804, 805, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 829, 871, 872, 873, 874, 875, 876, 879, 881, 928, 929, 930, 944, 950, 955, 967, 973, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009], "_nmf": [94, 370], "_beta_diverg": 94, "mbgyr": 94, "274": [94, 107, 141, 147, 229, 486], "plot_beta_diverg": [94, 107], "chapter": [95, 348, 366, 389, 394, 396, 399, 505, 507, 509, 589, 594, 597, 618, 942, 945, 948, 967, 968], "decompos": [95, 99, 113, 299, 388, 509, 513, 683, 792, 907, 947, 948, 952, 969, 988, 989], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 233], "constrained_layout": [95, 217], "set_constrained_layout_pad": 95, "w_pad": [95, 118, 343], "h_pad": [95, 118, 343], "set_edgecolor": 95, "vec": [95, 397, 513, 515, 522], "im": [95, 106, 266, 279, 975], "pad": [95, 118, 161, 217, 234, 337, 343, 397, 563, 564, 566], "initialis": [95, 513, 515, 522, 994, 1002, 1003], "mathbb": [95, 113, 152, 392, 952, 959, 967], "4096": [95, 360, 394, 469], "human": [95, 167, 302, 337, 383, 389, 394, 828, 829, 952, 959, 1003], "friendli": [95, 353, 365, 372, 394, 863, 964, 965, 972, 973], "visualis": [95, 98, 106, 232, 519, 955, 973], "64x64": [95, 360, 394], "singular": [95, 373, 386, 389, 392, 426, 428, 456, 457, 458, 459, 496, 499, 509, 513, 515, 516, 519, 522, 524, 525, 632, 647, 648, 649, 662, 907, 948, 949, 951, 988, 989, 1000, 1001], "scalar": [95, 308, 370, 377, 390, 399, 401, 439, 442, 499, 508, 590, 591, 592, 597, 598, 602, 603, 711, 715, 886, 894, 944, 956, 958, 962, 966, 972, 1004, 1005, 1008], "noise_variance_": [95, 184, 507, 509, 516, 631, 1001, 1008], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 166, 357, 391, 394, 397, 448, 491, 492, 493, 602, 603, 604, 605, 624, 646, 653, 654, 806, 807, 808, 809, 810, 946, 948, 951, 954, 972, 978, 986, 989], "subcompon": [95, 394], "ica_estim": 95, "15e": 95, "sparsepca": [95, 506, 508, 509, 510, 512, 514, 515, 516, 517, 520, 521, 994, 1001, 1002, 1004, 1005, 1007, 1008, 1009], "batch_pca_estim": 95, "_dict_learn": 95, "2293": 95, "minibatchdictionarylearn": [95, 98, 354, 394, 506, 513, 517, 520, 521, 995, 997, 1004, 1005, 1007, 1008, 1009], "batch_dict_estim": 95, "That": [95, 146, 185, 225, 255, 259, 338, 339, 353, 359, 372, 377, 393, 398, 399, 419, 422, 433, 532, 539, 568, 787, 878, 879, 941, 949, 950, 952, 958, 968, 1003, 1004], "enhanc": [95, 364, 365, 368, 375, 377, 389, 952, 970, 992, 993, 994, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "consum": [95, 348, 359, 377, 389, 393, 396, 424, 773, 774, 831, 832, 948, 976, 999], "kmeans_estim": 95, "heteroscedast": [95, 103, 122, 198, 394, 847, 858], "fa_estim": 95, "factoranalysi": [95, 103, 106, 394, 519, 995, 997, 1006, 1008], "wrap": [95, 115, 122, 275, 359, 377, 483, 560, 561, 632, 651, 715, 797, 854, 942, 952, 955, 967, 972, 994, 999, 1002, 1004, 1005, 1007], "suit": [95, 127, 166, 196, 197, 225, 245, 308, 309, 332, 337, 353, 365, 366, 369, 370, 372, 375, 380, 392, 394, 396, 399, 425, 427, 478, 652, 808, 901, 941, 944, 949, 952, 954, 955, 966, 972, 973, 976, 980, 1001, 1008], "colormap": [95, 112, 157, 188, 205, 324, 329, 343, 672, 1007], "uv": [95, 394], "x_1": [95, 141, 152, 193, 197, 332, 392, 394, 396, 399, 588, 600, 632, 948, 954, 956, 962, 966], "x_n": [95, 394, 954, 956, 966], "dict_pos_dict_estim": 95, "positive_dict": [95, 506, 512, 520, 521], "dict_pos_code_estim": 95, "fit_algorithm": [95, 506, 512], "cd": [95, 362, 363, 365, 368, 394, 446, 447, 453, 506, 512, 514, 515, 518, 520, 521, 522, 948, 987, 999], "positive_cod": [95, 506, 512, 517, 520, 521], "dict_pos_estim": 95, "339": [95, 107], "plot_faces_decomposit": [95, 107], "imagin": [96, 149, 393, 394, 397, 948], "simultan": [96, 259, 263, 345, 357, 386, 941, 952, 953, 968, 976, 1001], "microphon": 96, "s1": [96, 146, 157, 184, 185, 362, 986], "sinusoid": [96, 111, 122, 231, 399, 945, 986], "s2": [96, 146, 157, 184, 185, 362, 525, 986], "s3": [96, 146, 184, 185, 362, 986], "sawtooth": [96, 986], "saw": [96, 197, 986], "tooth": [96, 986], "s_": [96, 259, 949, 960, 986], "a_": [96, 386, 389, 513, 515, 522, 948, 986], "mixing_": [96, 97, 508, 986], "prove": [96, 976], "revert": [96, 605, 607, 608, 1001, 1006], "unmix": [96, 401, 508], "allclos": [96, 964, 986], "mean_": [96, 259, 507, 508, 509, 514, 516, 518, 851, 962, 986, 1002], "orthogon": [96, 97, 98, 164, 174, 215, 388, 394, 501, 506, 512, 514, 517, 518, 523, 639, 640, 660, 661, 964, 974, 989, 994], "_fastica": 96, "542": [96, 362], "v1": [96, 359, 380, 401, 415, 508, 534, 536, 651, 729, 768, 769, 806, 807, 808, 810, 907, 1006, 1009], "steelblu": [96, 97, 131], "sig": 96, "plot_ica_blind_source_separ": [96, 107], "ica": [97, 388, 401, 968, 988, 989], "geometr": [97, 389, 663, 678, 704, 730, 949, 1002], "identifi": [97, 104, 122, 123, 166, 196, 243, 245, 253, 258, 284, 307, 337, 338, 359, 360, 362, 364, 365, 368, 369, 377, 389, 390, 393, 396, 397, 399, 425, 432, 461, 470, 483, 484, 530, 531, 538, 581, 618, 624, 674, 686, 747, 796, 817, 836, 865, 866, 941, 948, 952, 958, 965, 976, 985, 1001, 1003, 1008], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 246], "axis_list": 97, "x_axi": [97, 204, 259], "y_axi": [97, 204], "quiver": 97, "hline": 97, "set_zord": 97, "09": [97, 105, 166, 232, 268, 318, 340, 389, 708, 809, 952, 962, 966], "341": [97, 107, 338], "plot_ica_vs_pca": [97, 107], "fragment": 98, "undistort": 98, "noiseless": [98, 950], "pursuit": [98, 164, 174, 215, 394, 449, 501, 506, 512, 517, 523, 639, 640, 660, 661, 974, 989, 994], "omp": [98, 105, 195, 394, 506, 512, 517, 523, 639, 640, 660, 661, 974, 989, 994, 1002], "promin": [98, 377], "reminisc": 98, "uint8": [98, 359, 471, 481, 482, 1006], "downsampl": [98, 234], "075": [98, 118, 133], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 204, 243, 377, 416, 422, 423, 424, 446, 447, 456, 457, 458, 506, 507, 508, 511, 512, 513, 514, 515, 518, 536, 537, 602, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 649, 651, 652, 653, 654, 655, 665, 667, 768, 769, 820, 828, 829, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 998, 1001, 1002, 1004, 1007, 1008], "n_steps_": [98, 424, 512, 513, 1007], "114": [98, 994], "41": [98, 196, 360, 362, 399, 444, 466, 506, 596, 599, 610, 633, 639, 660, 661, 754, 806, 954, 958], "reconstruct_from_patches_2d": [98, 397, 558], "intercept": [98, 188, 205, 213, 333, 377, 456, 457, 458, 524, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 846, 850, 852, 870, 871, 877, 948, 950, 952, 957, 966, 967, 997, 999, 1003, 1004], "transform_algorithm": [98, 105, 506, 512, 517], "n1": 98, "atom": [98, 105, 394, 506, 512, 514, 517, 518, 520, 521, 628, 638, 659, 948, 994, 1007], "transform_n_nonzero_coef": [98, 105, 506, 512, 517], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 506, 512, 517, 1007], "set_param": [98, 106, 114, 119, 122, 168, 176, 184, 185, 189, 200, 204, 230, 268, 305, 327, 338, 367, 377, 389, 390, 396, 399, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 958, 978, 985, 994, 1000, 1001, 1002, 1007, 1008], "63": [98, 193, 195, 362, 396, 532, 533, 540, 541, 699, 770, 783, 880, 881, 952, 990], "plot_image_denois": [98, 107], "ipca": [99, 508, 509], "flip": [99, 557, 715, 954, 998, 1007], "incrementalpca": [99, 354, 394, 508, 510, 514, 516, 519, 998, 1001, 1002, 1004, 1005, 1008], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 124, 202, 213, 220, 242, 243, 245, 262], "x_transform": [99, 127, 459, 506, 507, 508, 509, 510, 512, 514, 518, 541, 613, 614, 663, 664, 665, 666], "nmean": 99, "unsign": [99, 360, 557, 919], "shadow": [99, 104, 105, 220, 314, 331, 339, 397], "scatterpoint": [99, 104, 220, 242, 314], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 164, 185, 248, 271, 353, 370, 377, 380, 389, 393, 399, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 437, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 479, 494, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 775, 783, 793, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 920, 941, 952, 955, 994, 995, 998, 1000, 1001, 1002, 1008], "train_ax": 100, "test_ax": 100, "straight": [100, 186, 192, 194, 252, 352], "inner": [100, 122, 256, 260, 314, 352, 397, 419, 489, 521, 557, 564, 748, 750, 944, 952, 962, 967, 995, 998, 1008], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 367, 949], "untangl": 100, "mind": [100, 166, 301, 337, 338, 348, 365, 383, 391, 393, 396, 621, 622, 678, 948, 967, 972, 978, 985], "investig": [100, 106, 162, 365, 474, 948], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 119, 146, 169, 184, 185, 306, 337, 352, 353, 366, 369, 372, 373, 375, 377, 385, 386, 389, 394, 396, 397, 524, 560, 561, 568, 572, 582, 583, 836, 941, 944, 946, 948, 952, 955, 967, 976, 1002, 1003, 1004, 1008], "analyt": [100, 394, 399, 507, 595, 682, 942, 946, 952, 971, 976], "kernelridg": [100, 149, 231, 647, 945, 998], "relianc": 100, "667": [100, 107, 270, 271, 694, 713, 952], "plot_kernel_pca": [100, 107], "aid": [101, 252, 389, 763, 764, 949, 976, 994, 1006], "kevin": [101, 618, 996, 998, 1000, 1001, 1004, 1005, 1006, 1008, 1009], "hugh": [101, 846, 996, 1007], "pdf": [101, 146, 255, 280, 297, 362, 365, 389, 398, 418, 424, 506, 509, 512, 516, 616, 619, 624, 633, 639, 641, 642, 646, 651, 654, 657, 658, 660, 661, 667, 808, 809, 820, 827, 863, 865, 948, 965, 968, 975, 990, 994], "30000": [101, 360], "pdf_z": 101, "plot_fig": [101, 193], "fig_num": [101, 193], "pca_scor": [101, 103], "vt": [101, 525], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 167, 193], "plot_pca_3d": [101, 107], "plot_pca_iri": [102, 107], "cla": 102, "096": [102, 107], "consequ": [103, 255, 256, 297, 321, 348, 394, 396, 536, 537, 541, 630, 631, 942, 952, 968, 1003, 1005], "homoscedast": [103, 228, 301, 1002], "succe": 103, "subspac": [103, 392, 396, 427, 490, 530, 531, 666, 670, 907, 946, 955, 958, 964, 976, 986], "overestim": [103, 348, 393], "appropri": [103, 154, 166, 342, 348, 365, 366, 372, 377, 388, 389, 393, 395, 396, 400, 420, 425, 432, 463, 464, 465, 470, 475, 476, 477, 479, 480, 485, 551, 557, 566, 567, 570, 571, 573, 574, 575, 647, 649, 662, 683, 813, 814, 815, 817, 819, 821, 822, 823, 936, 948, 951, 952, 962, 998, 1001, 1007], "circumst": [103, 214, 955], "nip": [103, 362, 490, 516, 541, 616, 952], "598": [103, 150, 516], "604": [103, 516], "minka": [103, 516], "deni": [103, 996, 997, 1001, 1002, 1003], "engemann": [103, 996, 997, 1001], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 136, 161, 162, 164, 248, 260, 265, 269, 271, 327, 348, 365, 366, 375, 393, 396, 495, 550, 677, 715, 770, 792, 794, 878, 879, 941, 952, 982, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1006, 1007], "compute_scor": [103, 175, 176, 619, 620, 1003], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 135, 186, 254, 258], "violet": 103, "632": [103, 107], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 481, 482, 972], "92461872": 104, "05306648": 104, "x_r": [104, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578], "x_r2": 104, "249": [104, 107], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 394, 506, 512, 515, 523, 1001, 1002, 1004, 1006, 1008], "mexican": 105, "piecewis": [105, 308, 386, 943, 948, 962, 968], "matter": [105, 246, 348, 389, 396, 643, 651, 653, 948, 998], "motiv": [105, 365, 366, 377, 396, 944, 952, 962, 976, 1007], "heavier": [105, 391, 948], "subsampl": [105, 121, 124, 167, 196, 213, 307, 534, 535, 536, 537, 538, 607, 654, 773, 774, 797, 836, 848, 859, 886, 896, 944, 948, 973, 975, 994, 1004, 1008], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 506, 512, 517, 523, 1004], "n_nonzero": 105, "coder": [105, 517, 690], "flatnonzero": [105, 184, 254, 263, 754], "soft": [105, 130, 131, 365, 377, 544, 545, 866, 874, 966, 976, 999], "debias": 105, "lstsq": [105, 365, 632, 645], "rcond": 105, "327": [105, 107, 703, 985], "plot_sparse_cod": [105, 107], "uncov": [106, 670], "inher": [106, 191, 348, 389, 394, 942, 944, 946, 947, 949, 953], "varimax": [106, 394, 507, 1006], "jona": [106, 1006], "sassenhagen": [106, 1006], "set_yticklabel": [106, 152, 161, 162, 169, 266, 339], "n_comp": [106, 172], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "412": [106, 107, 470, 948], "plot_varimax_fa": [106, 107], "105": [107, 186, 215, 301], "auto_examples_decomposit": 107, "predictor": [108, 133, 164, 196, 366, 376, 377, 390, 392, 393, 396, 399, 441, 442, 456, 457, 458, 470, 491, 492, 493, 530, 531, 537, 540, 543, 577, 585, 605, 607, 608, 623, 628, 632, 644, 648, 655, 792, 794, 803, 804, 832, 844, 845, 851, 926, 948, 953, 995, 1001, 1004], "stack": [108, 133, 164, 280, 346, 364, 372, 375, 377, 395, 439, 441, 442, 470, 490, 537, 540, 542, 543, 587, 602, 603, 605, 628, 648, 792, 794, 832, 836, 844, 845, 851, 926, 942, 972, 973, 974, 975, 989, 997, 1001, 1002, 1003, 1004, 1005], "versu": [108, 129, 133, 164, 166, 174, 205, 211, 215, 231, 243, 248, 271, 283, 311, 318, 389, 393, 396, 399, 479, 495, 509, 528, 531, 585, 614, 633, 634, 641, 643, 649, 650, 651, 652, 756, 767, 770, 775, 793, 797, 803, 832, 866, 867, 874, 875, 878, 879, 941, 948, 952, 953, 958, 965, 966, 967, 985, 1002], "isolationforest": [108, 133, 164, 225, 234, 874, 958, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009], "oob": [108, 121, 133, 164, 396, 490, 539, 973, 996, 1007], "votingclassifi": [108, 133, 164, 479, 539, 545, 633, 809, 813, 875, 878, 941, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "vote": [108, 130, 131, 133, 164, 273, 377, 378, 476, 530, 531, 532, 535, 539, 540, 544, 545, 632, 799, 813, 814, 819, 821, 953, 955, 974, 985, 989, 997, 999, 1004], "hasti": [109, 110, 113, 114, 120, 124, 146, 167, 184, 254, 362, 393, 396, 494, 495, 528, 534, 535, 603, 631, 695, 696, 697, 801, 818, 863, 878, 879, 942, 946, 948, 953, 959, 964, 966, 968], "2009": [109, 110, 113, 114, 124, 167, 389, 393, 394, 396, 397, 494, 495, 503, 506, 512, 513, 515, 516, 519, 522, 528, 534, 535, 610, 646, 654, 671, 802, 878, 879, 906, 907, 948, 952, 953, 959, 968], "adapt": [109, 121, 122, 152, 240, 241, 299, 364, 365, 373, 396, 399, 490, 491, 492, 493, 651, 652, 653, 828, 829, 948, 954, 956, 962, 966, 972, 973, 1002, 1003], "tibshirani": [109, 113, 114, 124, 146, 167, 184, 254, 362, 393, 396, 495, 534, 535, 603, 631, 695, 696, 697, 801, 818, 878, 879, 942, 946, 948, 953, 959, 968], "friedman": [109, 113, 114, 124, 167, 254, 391, 393, 396, 453, 491, 492, 493, 495, 533, 534, 535, 540, 568, 569, 801, 878, 879, 881, 946, 948, 953, 959, 968], "ed": [109, 114, 124, 167, 396, 495, 534, 535, 964, 994, 1001], "springer": [109, 113, 114, 124, 167, 254, 393, 394, 396, 495, 510, 534, 535, 665, 669, 671, 679, 694, 699, 713, 714, 729, 768, 878, 879, 949, 952, 953, 959, 968], "zhu": [109, 110, 396, 494, 528, 633, 865], "zou": [109, 110, 184, 396, 494, 528, 631, 948, 966], "rosset": [109, 110, 396, 494, 528], "make_hastie_10_2": [109, 120, 124, 259, 361, 396, 534, 959], "12_000": 109, "Be": [109, 143, 158, 337, 365, 391, 542, 543, 629, 630, 631, 678, 787, 788, 846, 962, 991, 995], "stump": [109, 112, 396, 534, 1005], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 121, 122, 168, 305, 308, 342, 396, 532, 533, 534, 535, 536, 537, 539, 540, 541, 878, 879, 880, 881, 968, 1000], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 346], "ada_r": 109, "zero_one_loss": [109, 365, 677, 707, 952, 995, 996, 997], "ada_discrete_err": 109, "staged_predict": [109, 110, 123, 396, 528, 529, 534, 535, 536, 537, 994, 1006], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "sn": [109, 111, 166, 175, 255, 278], "color_palett": [109, 111], "leg": 109, "fancybox": [109, 331], "get_fram": 109, "304": [109, 113, 133, 301, 362], "plot_adaboost_hastie_10_2": [109, 133], "sphere": [110, 164, 216, 217, 223, 338, 395, 494, 564, 663, 664, 665, 666, 667, 737, 893, 946, 950, 955], "roughli": [110, 122, 185, 246, 265, 302, 352, 377, 394, 397, 399, 494, 949, 994], "samm": [110, 112, 396, 528], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 125, 369, 370, 372, 380, 389, 423, 436, 528, 529, 533, 534, 535, 538, 540, 641, 642, 643, 651, 653, 828, 829, 879, 881, 958, 968], "alwai": [110, 119, 122, 175, 196, 222, 229, 258, 261, 321, 338, 348, 352, 353, 359, 365, 366, 368, 370, 376, 377, 380, 387, 389, 390, 393, 396, 397, 398, 399, 408, 419, 424, 439, 440, 442, 444, 456, 457, 458, 462, 470, 483, 484, 519, 521, 524, 526, 527, 529, 531, 533, 534, 535, 536, 537, 539, 540, 543, 545, 556, 563, 564, 566, 569, 586, 603, 605, 607, 608, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 646, 647, 648, 651, 653, 654, 667, 670, 679, 683, 689, 695, 696, 697, 705, 707, 708, 712, 755, 758, 759, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 804, 805, 814, 815, 822, 823, 829, 836, 844, 849, 851, 863, 871, 872, 873, 875, 876, 878, 879, 881, 908, 941, 942, 944, 946, 948, 951, 952, 955, 958, 960, 964, 965, 967, 968, 976, 978, 985, 994, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "crop": [110, 372], "discrete_estimator_error": 110, "estimator_errors_": [110, 528, 529], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 528, 529], "plot_adaboost_multiclass": [110, 133], "r2": [111, 129, 167, 191, 231, 366, 390, 396, 529, 545, 648, 794, 952, 960, 1003], "1d": [111, 113, 164, 197, 229, 276, 289, 331, 344, 365, 371, 373, 376, 377, 390, 395, 439, 442, 592, 608, 628, 632, 635, 638, 659, 677, 682, 686, 687, 693, 702, 703, 707, 711, 715, 756, 757, 760, 767, 813, 814, 815, 816, 817, 819, 821, 822, 823, 836, 886, 890, 891, 917, 939, 953, 978, 985, 994, 999, 1000, 1001, 1003, 1007, 1008], "299": [111, 116, 133, 655], "detail": [111, 113, 116, 118, 123, 129, 184, 185, 222, 227, 230, 231, 236, 246, 253, 257, 262, 281, 282, 305, 306, 307, 308, 309, 342, 344, 345, 348, 352, 353, 354, 357, 358, 359, 360, 363, 365, 366, 368, 369, 370, 372, 375, 376, 377, 378, 380, 383, 388, 389, 392, 393, 394, 396, 398, 399, 400, 402, 410, 413, 419, 420, 422, 423, 424, 425, 427, 432, 433, 434, 436, 437, 439, 441, 442, 443, 447, 470, 474, 499, 506, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 523, 524, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 589, 594, 597, 606, 607, 609, 614, 620, 622, 626, 628, 630, 631, 632, 633, 634, 636, 638, 640, 641, 643, 647, 649, 651, 653, 654, 662, 663, 664, 665, 666, 667, 668, 669, 670, 687, 747, 751, 752, 753, 754, 769, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 809, 813, 814, 816, 817, 819, 821, 822, 824, 825, 830, 833, 835, 836, 848, 859, 865, 866, 868, 872, 875, 878, 879, 880, 881, 901, 941, 942, 946, 950, 951, 952, 953, 955, 956, 958, 965, 974, 975, 976, 978, 984, 987, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "drucker": [111, 396, 529], "1997": [111, 360, 394, 396, 399, 510, 529, 665, 669, 948, 949, 952], "dummi": [111, 196, 258, 355, 362, 366, 369, 384, 844, 852, 962, 968, 989, 995, 997, 998, 999, 1001], "decisiontreeregressor": [111, 113, 235, 298, 305, 344, 345, 369, 529, 531, 533, 534, 535, 537, 540, 607, 608, 878, 881, 883, 902, 968, 995, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008], "adaboostregressor": [111, 396, 528, 537, 996, 997, 1000, 1003, 1004, 1007, 1009], "regr_1": [111, 344, 345], "regr_2": [111, 344, 345], "y_1": [111, 332, 344, 345, 392, 952, 956, 966], "y_2": [111, 332, 344, 345, 956], "plot_adaboost_regress": [111, 133], "puriti": [112, 882, 884], "plot_adaboost_twoclass": [112, 133], "bdt": 112, "plot_color": [112, 343], "br": 112, "plot_step": [112, 118, 343], "class_nam": [112, 249, 882, 884, 968], "xx0": [112, 606], "twoclass_output": 112, "plot_rang": 112, "irreduc": 113, "light": [113, 167, 360], "beam": [113, 994], "pointwis": [113, 156, 400, 420], "offset": [113, 172, 375, 391, 394, 444, 483, 484, 538, 607, 608, 616, 617, 619, 620, 652, 701, 748, 750, 817, 874, 952, 966, 985, 1002], "narrow": [113, 122, 297, 299, 369, 811, 812], "tradeoff": [113, 164, 230, 248, 262, 263, 271, 337, 352, 372, 395, 490, 539, 700, 762, 797, 832, 851, 870, 949, 985, 1003, 1006], "bootstrap": [113, 114, 121, 161, 258, 267, 307, 393, 396, 529, 530, 531, 532, 533, 538, 539, 540, 896, 923, 948, 994, 995, 997, 999, 1002, 1004, 1007], "stem": [113, 168, 180, 195, 246, 393, 397, 944, 954], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": 113, "0092": 113, "baggingregressor": [113, 396, 530, 881, 997, 1000, 1002, 1005, 1009], "n_repeat": [113, 116, 123, 145, 166, 168, 169, 255, 305, 393, 490, 609, 784, 785, 960], "knn": [113, 130, 137, 161, 275, 283, 284, 287, 307, 314, 337, 396, 577, 820, 865, 866, 955, 965, 985, 1000], "y_predict": [113, 366, 994], "y_error": [113, 202], "y_nois": 113, "y_bia": 113, "y_var": 113, "plot_bias_vari": [113, 133], "z_i": [114, 956], "y_i": [114, 308, 332, 387, 396, 943, 944, 948, 952, 956, 966, 967, 968], "whilst": [114, 219], "practition": 114, "suitabl": [114, 122, 182, 292, 339, 359, 360, 370, 373, 389, 394, 397, 427, 437, 443, 461, 480, 483, 602, 610, 806, 807, 810, 846, 868, 919, 921, 946, 948, 951, 962, 964, 966, 972, 975, 987, 1008, 1009], "p592": 114, "593": 114, "kian": [114, 999], "ho": [114, 396, 530, 531, 952, 999, 1002, 1003, 1008], "hui": [114, 184, 513, 515, 522, 631, 948], "ordereddict": 114, "123": [114, 131, 178, 215, 348, 396, 491, 492, 493, 530, 531, 804, 953, 960], "warm_start": [114, 153, 189, 308, 366, 370, 377, 396, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 585, 621, 623, 624, 627, 633, 635, 637, 641, 642, 643, 644, 651, 652, 653, 655, 768, 769, 820, 828, 829, 958, 974, 989, 994, 997, 998, 999, 1002, 1003, 1004, 1005, 1008], "disabl": [114, 196, 337, 363, 365, 397, 424, 512, 513, 514, 521, 534, 535, 536, 537, 830, 890, 891, 962, 1000, 1003, 1007], "track": [114, 121, 313, 365, 367, 368, 380, 385, 509, 921, 953, 973, 1001, 1004], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 396, 530, 531, 532, 533, 539, 540, 999, 1001], "log2": [114, 206, 236, 532, 533, 534, 535, 539, 540, 878, 879, 880, 881, 953], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 530, 531, 532, 533, 539, 540, 996], "clf_err": 114, "plot_ensemble_oob": [114, 133], "tim": [115, 128, 994, 999, 1000, 1003, 1004, 1005, 1007, 1009], "betatim": [115, 128, 1009], "leak": [115, 260, 337, 348, 390, 393, 831, 855, 856, 858, 859, 860, 861, 962, 994, 1001, 1004], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 120, 121, 124, 299, 348, 375, 396, 528, 536, 607, 608, 953, 959, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "random_forest": 115, "gradient_boost": [115, 995, 996, 997, 1003], "histgradientboostingclassifi": [115, 305, 306, 307, 308, 353, 396, 534, 554, 607, 608, 942, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "randomtreesembed": [115, 127, 218, 396, 880, 995, 1002, 1003, 1007, 1008, 1009], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 835, 962, 1000], "rf_model": 115, "0x7f2b3bcb0670": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7f2b3bcb00d0": 115, "roccurvedisplai": [115, 234, 237, 252, 265, 305, 371, 761, 762, 958, 991, 1004], "rt": 115, "rf": [115, 128, 131, 132, 168, 305, 348, 396, 542, 544, 545], "gbdt": [115, 126, 305, 306, 369, 396], "model_displai": 115, "plot_feature_transform": [115, 133], "artifici": [116, 119, 126, 162, 217, 231, 294, 337, 360, 361, 362, 369, 386, 388, 389, 393, 394, 399, 510, 671, 801, 828, 829, 945, 949, 951, 953, 959, 964, 968, 973, 976, 994], "feature_importances_": [116, 117, 123, 146, 168, 169, 377, 396, 398, 528, 529, 532, 533, 534, 535, 539, 540, 541, 568, 569, 572, 878, 879, 880, 881, 996, 999, 1003], "estimators_": [116, 118, 232, 305, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 799, 800, 801, 802, 803, 804, 805, 995, 1001, 1008], "forest_import": 116, "mdi": [116, 123, 164, 165, 169, 170, 396, 439, 470, 539, 605, 609, 797, 831, 845, 960], "overcom": [116, 352, 397], "permutation_import": [116, 117, 123, 168, 169, 305, 396, 528, 529, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 960, 1004, 1006, 1007], "importances_mean": [116, 123, 168, 169, 305, 609, 960], "770": 116, "importances_std": [116, 609, 960], "omit": [116, 317, 369, 450, 509, 641, 643, 651, 776, 778, 799, 800, 803, 806, 807, 808, 809, 810, 828, 950, 957], "plot_forest_import": [116, 133], "hotter": 117, "job": [117, 243, 257, 365, 367, 372, 396, 400, 413, 420, 423, 425, 427, 432, 433, 436, 439, 442, 443, 447, 506, 510, 511, 512, 514, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 577, 585, 609, 614, 632, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 830, 833, 865, 866, 868, 976, 980], "five": [117, 241, 313, 316, 360, 362, 514, 520, 949, 955, 967, 976, 994], "drawback": [117, 213, 944, 947], "img_shap": 117, "imp_reshap": 117, "205": 117, "knowledg": [117, 166, 213, 234, 255, 360, 365, 376, 377, 389, 393, 396, 400, 420, 486, 530, 531, 538, 694, 709, 713, 756, 800, 952, 953, 964, 987], "met": [117, 366, 398, 509, 516, 602, 646, 948, 1002], "796": [117, 122, 133], "plot_forest_importances_fac": [117, 133], "third": [118, 123, 141, 146, 157, 214, 225, 246, 257, 280, 299, 353, 360, 364, 375, 378, 397, 509, 563, 564, 565, 566, 772, 773, 774, 778, 813, 814, 815, 817, 819, 849, 860, 920, 941, 963, 970, 994, 1005], "fourth": [118, 978], "descend": [118, 602, 1004], "extratreesclassifi": [118, 127, 396, 398, 533, 539, 541, 880, 881, 953, 997, 998, 1002, 1003, 1004, 1007, 1008, 1009], "decisiontre": [118, 999], "consol": [118, 363, 979], "worth": [118, 167, 196, 365, 372, 976], "extratre": [118, 127, 352, 997], "sequenti": [118, 140, 147, 164, 190, 256, 307, 363, 394, 396, 397, 476, 509, 568, 572, 577, 578, 580, 581, 621, 622, 627, 628, 635, 636, 637, 638, 648, 831, 942, 960, 966, 972, 974, 989, 994, 1003, 1006], "9266666666666666": 118, "8666666666666667": 118, "9933333333333333": 118, "rdylbu": [118, 343], "plot_step_coars": 118, "plot_idx": 118, "model_titl": 118, "model_detail": 118, "blend": [118, 129, 377, 393, 972], "estimator_alpha": 118, "coarser": [118, 122], "regularli": [118, 375, 954], "xx_coarser": 118, "yy_coars": 118, "z_points_coars": 118, "cs_point": 118, "plot_forest_iri": [118, 133], "equidist": [119, 667], "lowa": 119, "sale": [119, 255, 952, 976], "42165": 119, "categorical_columns_subset": 119, "bldgtype": 119, "garagefinish": 119, "lotconfig": 119, "masvnrtyp": [119, 129], "housestyl": [119, 129], "fireplacequ": 119, "extercond": 119, "exterqu": [119, 129], "poolqc": 119, "numerical_columns_subset": 119, "3ssnporch": 119, "fireplac": 119, "bsmthalfbath": 119, "halfbath": 119, "garagecar": [119, 129], "totrmsabvgrd": 119, "bsmtfinsf1": [119, 129], "bsmtfinsf2": 119, "grlivarea": 119, "screenporch": 119, "n_categorical_featur": [119, 536, 537], "n_numerical_featur": 119, "1460": [119, 129], "make_column_transform": [119, 129, 166, 227, 306, 390, 439, 441, 1002], "dropper": 119, "hist_drop": 119, "hist_one_hot": 119, "etc": [119, 196, 214, 250, 259, 260, 348, 352, 354, 365, 366, 368, 369, 375, 376, 377, 386, 390, 393, 397, 463, 478, 532, 533, 539, 540, 643, 651, 667, 692, 744, 770, 783, 802, 805, 835, 846, 878, 879, 880, 881, 882, 884, 890, 891, 901, 941, 942, 946, 952, 955, 972, 973, 976, 994, 1001, 1003, 1004], "use_encoded_valu": [119, 129, 168, 845, 1006], "unknown_valu": [119, 129, 168, 845, 1006, 1008], "hist_ordin": 119, "n_unique_categori": 119, "categorical_mask": 119, "hist_n": 119, "mean_absolute_percentage_error": [119, 952, 1006, 1008], "neg_mean_absolute_percentage_error": [119, 952, 960], "n_cv_fold": [119, 795, 798], "dropped_result": 119, "one_hot_result": 119, "ordinal_result": 119, "native_result": 119, "plot_result": [119, 240, 241, 246], "figure_titl": 119, "plot_info": 119, "test_scor": [119, 121, 123, 204, 254, 257, 270, 342, 376, 393, 794, 795, 798], "y_limit": 119, "mape_cv_mean": 119, "mape_cv_std": 119, "c0": [119, 228], "slowest": [119, 906, 907], "theori": [119, 231, 332, 362, 388, 389, 393, 396, 665, 669, 699, 729, 862, 863, 907, 941, 948, 949, 951, 952, 953, 967, 968], "poorer": [119, 348, 394], "slight": [119, 201, 307, 396, 424, 1004], "acf": 119, "bde": 119, "isol": [119, 125, 225, 234, 338, 363, 365, 370, 380, 538, 817, 874, 1003, 1004], "bcde": 119, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "altogeth": [119, 370, 1002], "827": [119, 133], "plot_gradient_boosting_categor": [119, 133], "suffici": [120, 129, 204, 269, 324, 352, 377, 389, 398, 507, 521, 632, 657, 658, 788, 789, 953, 955, 973, 1003], "validation_fract": [120, 204, 308, 396, 534, 535, 536, 537, 641, 642, 643, 651, 653, 828, 829, 966, 1002, 1008], "denot": [120, 373, 377, 380, 387, 393, 396, 563, 564, 566, 770, 783, 844, 845, 937, 941, 944, 948, 950, 952, 953, 962, 965, 978], "kept": [120, 332, 359, 368, 383, 399, 470, 510, 513, 515, 516, 521, 522, 572, 585, 586, 594, 595, 619, 670, 768, 769, 891, 962, 1002, 1003], "asid": [120, 204, 383, 534, 535, 536, 537, 641, 642, 643, 651, 653, 828, 829], "until": [120, 146, 204, 267, 307, 309, 369, 377, 378, 386, 389, 393, 398, 399, 483, 484, 532, 533, 534, 535, 539, 540, 541, 568, 577, 621, 622, 627, 628, 633, 634, 635, 636, 637, 638, 641, 643, 646, 651, 652, 653, 669, 768, 769, 773, 774, 828, 829, 867, 870, 878, 879, 880, 881, 927, 941, 948, 949, 957, 965, 968, 987, 997, 1001, 1002, 1008], "n_estimators_": [120, 534, 535], "vighnesh": [120, 999, 1000, 1002], "birodkar": [120, 999, 1000, 1002], "vighneshbirodkar": 120, "rvraghav93": [120, 259, 297], "data_list": 120, "n_gb": 120, "score_gb": 120, "time_gb": 120, "n_gbe": 120, "gbe": 120, "gb": [120, 132, 396, 528, 608], "bar_width": 120, "bar1": 120, "crimson": 120, "bar2": 120, "coral": 120, "n_est": 120, "max_i": [120, 232, 954], "plot_gradient_boosting_early_stop": [120, 133], "fly": [121, 369, 372, 483, 484, 557, 994, 996, 1003], "pessimist": [121, 396], "cumul": [121, 196, 214, 389, 699, 708, 729, 848, 859, 962, 966, 1001, 1003, 1004], "demand": [121, 362, 397, 474, 770, 783, 792, 793, 794], "6820": 121, "103": [121, 123, 124, 273, 360, 396, 471, 530, 531, 994], "loss_": [121, 123, 124, 292, 534, 535, 828, 829, 956, 1008], "special": [121, 166, 186, 214, 285, 324, 359, 361, 366, 370, 375, 377, 389, 392, 394, 439, 442, 474, 528, 530, 534, 792, 882, 941, 946, 948, 950, 951, 952, 953, 955, 968, 1001, 1004, 1006, 1008], "expit": [121, 186, 396, 536, 948, 1001], "ridgewai": [121, 396], "gbm": [121, 396, 997], "x3": [121, 234, 390, 986], "binomi": [121, 124, 396, 528, 534, 536, 1008], "acc": 121, "heldout_scor": 121, "devianc": [121, 124, 196, 214, 396, 528, 533, 534, 535, 536, 537, 540, 623, 644, 655, 695, 696, 697, 720, 722, 725, 879, 881, 948, 968, 995, 1004, 1005, 1007, 1008], "staged_decision_funct": [121, 124, 528, 534, 536], "cv_estim": 121, "cv_clf": 121, "val_scor": 121, "cv_score": [121, 145], "cumsum": [121, 196, 214, 1001], "oob_improvement_": [121, 396, 534, 535, 996], "oob_best_it": 121, "test_best_it": 121, "cv_best_it": 121, "brew": [121, 363, 380], "oob_color": 121, "212": [121, 260, 315, 362, 444, 475, 958, 985], "test_color": 121, "127": [121, 994], "cv_color": 121, "253": [121, 509], "192": [121, 285, 289, 370, 994], "xticks_po": 121, "tolist": [121, 161, 169, 254, 275, 307, 360], "xticks_label": 121, "plot_gradient_boosting_oob": [121, 133], "atleast_2d": [122, 366], "expected_i": 122, "amplitud": [122, 154, 156, 190, 399, 948], "lognorm": [122, 155, 177, 244, 301, 962], "tail": [122, 162, 166, 196, 198, 255, 297, 496, 499, 948], "imposs": [122, 339, 973], "mean_pinball_loss": [122, 308, 948, 952, 1007], "all_model": 122, "common_param": [122, 167, 258], "min_samples_split": [122, 123, 124, 259, 267, 298, 307, 396, 532, 533, 534, 535, 539, 540, 541, 773, 774, 878, 879, 880, 881, 941, 968, 1000], "gbr": 122, "gbr_l": 122, "5th": [122, 157], "95th": [122, 721], "y_med": 122, "fill_between": [122, 135, 149, 154, 156, 158, 175, 176, 214, 255, 257, 258, 259, 265, 270], "unfortun": [122, 214, 372, 375, 396, 483, 484], "sinoisoid": 122, "highlight_min": [122, 185], "font": [122, 185, 210, 230, 882, 884], "pbl": 122, "nbsp": [122, 185], "715413": 122, "750348": 122, "127128": 122, "253445": 122, "379763": 122, "933253": 122, "305438": 122, "622811": 122, "940184": 122, "827917": 122, "909909": 122, "145957": 122, "382005": 122, "667219": 122, "asymmetr": [122, 198, 377, 999], "signficiantli": 122, "nor": [122, 257, 258, 337, 348, 352, 369, 375, 397, 413, 569, 894, 956, 968, 1005], "917281": 122, "767498": 122, "617715": 122, "692901": 122, "144204": 122, "245961": 122, "347717": 122, "648026": 122, "412021": 122, "607752": 122, "803483": 122, "874771": 122, "354394": 122, "355445": 122, "356497": 122, "852774": 122, "underestim": [122, 196, 214, 255, 365], "extrem": [122, 196, 198, 233, 297, 315, 338, 365, 367, 389, 394, 532, 533, 539, 540, 541, 607, 608, 654, 697, 725, 880, 881, 882, 884, 952, 954], "coverage_fract": 122, "y_low": 122, "y_high": 122, "868": [122, 142, 161, 163], "hypothesi": [122, 255, 261, 332, 393, 665, 669, 796, 949], "pinbal": [122, 308, 537, 645, 696, 721, 948, 1007, 1008], "experiment": [122, 161, 162, 196, 266, 267, 307, 308, 355, 365, 366, 367, 374, 375, 377, 393, 470, 524, 602, 671, 773, 774, 920, 922, 941, 942, 948, 951, 952, 972, 973, 981, 989, 1002, 1003, 1006, 1007, 1008, 1009], "enable_halving_search_cv": [122, 266, 267, 307, 773, 774, 941], "halvingrandomsearchcv": [122, 267, 307, 553, 773, 941, 1006, 1008], "make_scor": [122, 259, 393, 770, 793, 794, 952, 1003], "neg_mean_pinball_loss_05p_scor": 122, "greater_is_bett": [122, 715, 952], "search_05p": 122, "max_resourc": [122, 773, 774, 941], "min_resourc": [122, 773, 774], "redefin": [122, 166], "neg_mean_pinball_loss_95p_scor": 122, "search_95p": 122, "estimator__alpha": 122, "did": [122, 149, 166, 169, 196, 204, 338, 360, 474, 602, 686, 788, 872, 986, 995, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009], "untun": 122, "joint": [122, 164, 167, 174, 215, 217, 390, 586, 627, 637, 667, 806, 807, 808, 809, 810, 870, 948, 949, 953, 957, 959, 963, 994], "9026666666666666": 122, "sadli": 122, "248": [122, 133, 194, 215], "plot_gradient_boosting_quantil": [122, 133], "tackl": [123, 255, 353, 365, 389, 808, 954, 976, 981], "katrina": [123, 1005], "ni": [123, 1000, 1005], "nilichen": 123, "reg": [123, 166, 176, 298, 306, 329, 396, 533, 535, 543, 625, 626, 628, 629, 630, 631, 632, 638, 639, 640, 645, 646, 653, 654, 664, 668, 881, 948, 999], "3025": 123, "7877": 123, "train_score_": [123, 396, 534, 535, 536, 537], "impur": [123, 346, 379, 396, 398, 528, 529, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 882, 884, 968, 989, 999, 1000, 1001, 1002], "feature_import": 123, "sorted_idx": [123, 305], "po": [123, 220, 397], "align": [123, 162, 217, 240, 266, 339, 370, 377, 664, 668, 955, 966, 988, 989], "vert": [123, 168, 169, 305, 966], "263": [123, 133], "plot_gradient_boosting_regress": [123, 133], "consider": [124, 150, 153, 167, 250, 256, 262, 365, 399, 594, 770, 783, 941, 954, 958, 966, 976], "return_invers": [124, 366], "original_param": 124, "max_leaf_nod": [124, 196, 308, 346, 396, 532, 533, 534, 535, 536, 537, 539, 540, 541, 878, 879, 880, 881, 997, 1003, 1005], "test_devi": 124, "696": [124, 133], "plot_gradient_boosting_regular": [124, 133], "anomali": [125, 164, 224, 234, 238, 281, 282, 360, 388, 444, 487, 497, 538, 614, 652, 817, 832, 874, 958, 1000, 1001], "recurs": [125, 140, 147, 164, 167, 342, 366, 388, 389, 393, 416, 417, 418, 421, 438, 477, 490, 538, 568, 569, 572, 577, 607, 608, 788, 875, 952, 955, 958, 959, 968, 974, 986, 989, 994, 1004, 1005], "novel": [125, 210, 281, 323, 348, 387, 941], "abnorm": [125, 210, 225, 281, 323, 360, 466, 538, 817, 958, 1002], "x_outlier": [125, 178, 210, 281, 282, 323], "max_sampl": [125, 161, 396, 530, 531, 532, 533, 538, 539, 540, 609, 1004, 1007], "y_pred_train": [125, 210, 323], "y_pred_test": [125, 210, 281, 323], "y_pred_outli": [125, 210, 281, 323], "blues_r": 125, "b1": [125, 210, 281, 323], "b2": [125, 210, 281, 323], "462": [125, 133], "plot_isolation_forest": [125, 133], "trend": [126, 154, 228, 292, 399, 976, 1001], "xgboost": [126, 396, 972], "partialdependencedisplai": [126, 167, 235, 306, 307, 308, 371, 608, 959, 1004, 1005, 1006, 1007, 1008], "f_0": 126, "f_1": [126, 262, 952], "line_kw": [126, 235, 306, 607], "unconstrain": [126, 306, 360, 966], "monotonic_cst": [126, 306, 308, 396, 536, 537], "axes_": [126, 235, 306, 371, 607], "f_idx": 126, "715": [126, 133], "plot_monotonic_constraint": [126, 133], "excel": [127, 359, 365, 665, 669, 948, 976], "bernoullinb": [127, 354, 807, 808, 809, 810, 953, 954, 995, 996, 998, 1001, 1006, 1007, 1009], "hasher": [127, 339, 397], "transformed_grid": 127, "y_grid_pr": 127, "422": [127, 133, 568, 569, 699, 729, 952], "plot_random_forest_embed": [127, 133], "multioutput": [128, 273, 355, 366, 377, 408, 440, 456, 457, 458, 526, 529, 531, 532, 533, 535, 537, 539, 540, 543, 545, 586, 607, 608, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 695, 696, 701, 718, 719, 721, 723, 724, 726, 758, 761, 792, 814, 822, 829, 838, 871, 873, 876, 878, 879, 880, 881, 896, 917, 918, 952, 974, 989, 994, 995, 996, 1000, 1001, 1007, 1008], "multioutputregressor": [128, 408, 440, 456, 457, 458, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 803, 805, 814, 822, 829, 871, 873, 876, 879, 881, 1000, 1001, 1003, 1005, 1006], "nativ": [128, 161, 360, 377, 396, 536, 537, 803, 804, 920, 948, 952, 972, 1004, 1006], "ever": [128, 373, 396, 976], "centr": [128, 362], "regr_multirf": 128, "regr_rf": 128, "y_multirf": 128, "y_rf": 128, "cornflowerblu": [128, 190, 199, 206, 241, 243, 245, 246, 262, 264, 278, 280, 286, 344, 345], "655": [128, 133], "plot_random_forest_regression_multioutput": [128, 133], "compil": [129, 339, 352, 365, 366, 367, 372, 373, 375, 972, 994], "dean": [129, 1002, 1008], "cock": [129, 1003], "becam": [129, 378, 1002], "kaggl": [129, 376], "residenti": [129, 362], "iowa": 129, "won": [129, 293, 338, 368, 389, 443, 470, 602, 603, 605, 662, 678, 691, 709, 710, 728, 730, 766, 951, 962, 999, 1000, 1005], "load_ames_h": 129, "yrsold": 129, "heatingqc": 129, "street": [129, 362], "yearremodadd": 129, "heat": [129, 324, 389, 427, 437, 670], "bsmtunfsf": 129, "mssubclass": 129, "condition2": 129, "garagetyp": 129, "overallqu": 129, "totalbsmtsf": 129, "miscfeatur": 129, "mosold": 129, "plot_stack_predictor": [129, 133], "lookup": [129, 373, 919, 1003], "retain": [129, 175, 377, 389, 392, 393, 397, 468, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 670, 671, 787, 844, 941, 965, 994], "cat_selector": 129, "num_selector": 129, "besid": [129, 228, 365, 369, 399, 564, 834, 843, 941, 1002], "cat_tree_processor": 129, "encoded_missing_valu": [129, 168, 845, 962, 1008], "num_tree_processor": 129, "add_ind": [129, 162, 602, 603, 605, 942, 1003, 1006], "tree_preprocessor": [129, 196], "0x7f2b4eb50340": 129, "0x7f2b4eb50610": 129, "ordinalencoderordinalencod": [129, 168], "cat_linear_processor": 129, "num_linear_processor": 129, "linear_preprocessor": 129, "tediou": 129, "wrote": [129, 360], "lasso_pipelin": 129, "lassocvlassocv": 129, "rf_pipelin": 129, "randomforestregressorrandomforestregressor": 129, "gbdt_pipelin": 129, "histgradientboostingregressorhistgradientboostingregressor": 129, "stackingregressor": [129, 305, 396, 542, 1004, 1005, 1006, 1007, 1008], "stacking_regressor": 129, "final_estim": [129, 305, 396, 542, 543], "unknown_v": 129, "stackingregressorstackingregressor": 129, "forestcolumntransform": 129, "lassocolumntransform": 129, "boostingcolumntransform": 129, "final_estimatorridgecvridgecv": 129, "plot_regression_result": 129, "cross_val_predict": [129, 251, 305, 387, 393, 396, 413, 542, 543, 793, 794, 998, 999, 1000, 1001, 1003, 1005, 1007], "get_xaxi": [129, 240, 285, 297], "tick_bottom": [129, 297], "get_yaxi": [129, 285, 297], "tick_left": [129, 297], "outward": [129, 297], "pm": [129, 158, 265, 396, 952], "test_r2": [129, 794], "172": [129, 133, 370, 467, 468, 624, 948], "exemplari": 130, "eclf": [130, 131, 396], "axarr": [130, 297], "tt": [130, 250, 440], "645": [130, 133], "plot_voting_decision_region": [130, 133], "examplari": 131, "class1_1": 131, "class2_1": 131, "lightgreen": [131, 202, 213], "p3": 131, "p4": 131, "nweight": 131, "420": [131, 133, 157], "plot_voting_proba": [131, 133], "votingregressor": [132, 396, 544, 1003, 1004, 1005, 1008], "cohort": 132, "reg1": [132, 396], "reg2": [132, 396], "reg3": [132, 396], "ereg": [132, 396], "votingregressorvotingregressor": 132, "gbgradientboostingregressorgradientboostingregressor": 132, "rfrandomforestregressorrandomforestregressor": 132, "lrlinearregressionlinearregress": 132, "xt": [132, 275, 377, 602, 604, 770, 773, 774, 783, 815, 823, 831, 836, 841, 848, 859, 888], "pred1": 132, "pred2": 132, "pred3": 132, "pred4": 132, "labelbottom": [132, 255], "958": [132, 133], "plot_voting_regressor": [132, 133], "54": [133, 172, 195, 196, 199, 316, 360, 362, 389, 465, 995, 996], "050": [133, 960], "auto_examples_ensembl": 133, "n_fold": [135, 622, 626, 628, 630, 634, 636, 638, 995, 996, 1000], "scores_std": [135, 136, 982], "semilogx": [135, 136, 185, 268, 270, 332], "std_error": 135, "transluc": 135, "31622776601683794": 135, "answer": [135, 255, 365, 375, 699, 729, 952, 976], "extern": [135, 149, 354, 355, 358, 362, 365, 366, 369, 375, 377, 386, 389, 397, 398, 399, 568, 585, 586, 691, 710, 766, 948, 951, 952, 955, 968, 973, 979, 985, 989, 1002, 1006], "lasso_cv": 135, "k_fold": [135, 982], "maximis": [135, 241, 283, 946, 955], "5f": [135, 309], "Not": [135, 352, 365, 375, 389, 406, 407, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 444, 445, 446, 447, 448, 449, 450, 451, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 538, 541, 544, 545, 556, 557, 558, 563, 564, 566, 602, 603, 604, 605, 652, 663, 664, 665, 666, 668, 741, 765, 768, 769, 770, 773, 774, 783, 808, 811, 812, 815, 816, 817, 819, 823, 835, 843, 846, 847, 849, 862, 863, 874, 952, 958, 972, 1003], "moreov": [135, 155, 299, 309, 348, 368, 389, 393, 399, 863, 922, 952, 976, 1002, 1008, 1009], "substanti": [135, 277, 281, 282, 298, 365, 817, 958, 998, 1001], "05968": 135, "54209": 135, "04520": 135, "15521": 135, "07880": 135, "45192": 135, "618": [135, 139, 253], "plot_cv_diabet": [135, 139], "this_scor": [136, 327], "451": [136, 139, 200, 215, 621], "plot_cv_digit": [136, 139], "961111": 137, "933333": [137, 820], "183": [137, 139, 237, 238, 313, 370, 953, 994], "plot_digits_classification_exercis": [137, 139], "200j": [138, 328], "660": [138, 139], "plot_iris_exercis": [138, 139], "911": 139, "auto_examples_exercis": 139, "exercis": [139, 354, 355, 362, 365, 476, 477, 479, 480, 627, 628, 633, 770, 775, 793, 813, 875, 979, 997], "elimin": [140, 147, 164, 388, 389, 393, 423, 477, 490, 568, 569, 572, 577, 773, 774, 788, 875, 938, 952, 974, 976, 989, 994], "x_2": [141, 152, 193, 332, 394, 396, 397, 399, 588, 600, 948, 956, 962], "x_3": [141, 962], "irrelev": [141, 348, 370, 391, 396, 398, 579, 713, 952], "agre": [141, 372, 378, 388, 389, 759, 978], "percept": [141, 167, 959], "correctli": [141, 196, 214, 262, 269, 285, 314, 324, 365, 373, 394, 396, 399, 405, 413, 444, 467, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 544, 585, 633, 641, 643, 649, 650, 651, 677, 765, 767, 799, 800, 801, 802, 806, 807, 808, 809, 810, 813, 818, 821, 828, 851, 865, 866, 870, 872, 873, 874, 875, 876, 878, 880, 908, 949, 952, 955, 956, 962, 967, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mutual_info_regress": [141, 309, 398, 567, 570, 571, 574, 575, 584, 1000, 1001, 1006, 1008, 1009], "f_test": 141, "x_": [141, 150, 246, 255, 305, 366, 392, 394, 602, 610, 865, 866, 948, 954, 959, 1000], "plot_f_test_vs_mi": [141, 147], "examin": [142, 370, 372, 389, 820], "f_classif": [142, 143, 398, 567, 570, 571, 573, 574, 575, 579, 581, 584], "log10": [142, 155, 166, 181, 189, 256, 324], "pvalues_": [142, 567, 570, 571, 573, 574, 575, 994], "x_indic": 142, "p_": [142, 952, 955, 968], "svm_weight": 142, "789": [142, 396], "clf_select": 142, "svm_weights_select": 142, "get_support": [142, 146, 307, 556, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 996], "235": [142, 147], "plot_feature_select": [142, 147], "mistak": [143, 313, 348, 389, 393, 708, 842, 855, 856, 858, 859, 860, 861, 948, 953], "anova_filt": 143, "anova_svm": 143, "selectkbestselectkbest": [143, 309], "linearsvclinearsvc": [143, 262], "75790919": 143, "27158706": 143, "26109741": 143, "plot_feature_selection_pipelin": [143, 147], "rfe": [144, 145, 398, 569, 572, 577, 994, 998, 1004, 1005, 1006, 1007, 1008], "n_features_to_select": [144, 146, 307, 398, 568, 577, 1006, 1008], "ranking_": [144, 568, 569], "294": [144, 147], "plot_rfe_digit": [144, 147], "stratifiedkfold": [145, 242, 250, 257, 261, 265, 315, 393, 413, 542, 543, 569, 577, 634, 648, 770, 771, 773, 774, 775, 777, 779, 783, 787, 789, 791, 792, 793, 794, 795, 796, 798, 982, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1007], "rfecv": [145, 398, 568, 572, 577, 998, 1000, 1002, 1004, 1005, 1006, 1007], "min_features_to_select": [145, 569, 1002], "n_features_": [145, 516, 568, 569, 1007, 1009], "n_score": 145, "split0_test_scor": [145, 770, 783, 1000], "split1_test_scor": [145, 770, 783], "465": [145, 147], "plot_rfe_with_cross_valid": [145, 147], "selectfrommodel": [146, 377, 568, 577, 578, 974, 989, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008], "sequentialfeatureselect": 146, "greedi": [146, 396, 398, 534, 535, 577, 948, 968], "442": [146, 162, 362, 476, 985], "descript": [146, 166, 358, 359, 364, 365, 368, 369, 372, 377, 389, 397, 422, 424, 427, 437, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482, 485, 519, 605, 651, 735, 738, 751, 952, 966, 967, 973, 975, 987, 1004, 1005, 1006, 1007, 1008], "descr": [146, 358, 359, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482, 485, 984, 1002], "_diabetes_dataset": 146, "mass": [146, 235, 362, 768, 948, 959], "blood": [146, 226, 362, 985], "pressur": [146, 362, 985], "six": [146, 197, 218, 301, 362, 1003], "serum": [146, 362], "bmi": [146, 184, 185, 235, 362, 960], "tc": [146, 362, 378], "cholesterol": [146, 362], "ldl": [146, 362], "lipoprotein": [146, 362], "hdl": [146, 362], "s4": [146, 184, 185, 362], "tch": [146, 362], "s5": [146, 184, 185, 362, 960], "ltg": [146, 362, 476], "triglycerid": [146, 362], "s6": [146, 184, 185, 362], "glu": [146, 362], "sugar": [146, 362], "www4": [146, 362], "ncsu": [146, 362], "boo": [146, 362], "bradlei": [146, 362, 948], "efron": [146, 362, 657, 658, 948], "trevor": [146, 184, 362, 603, 631, 695, 696, 697, 942, 948, 964, 998, 999, 1002, 1003, 1004, 1006], "iain": [146, 362, 948], "johnston": [146, 362, 948, 1003], "annal": [146, 184, 362, 396, 449, 491, 492, 493, 534, 535, 631, 948], "407": [146, 362], "499": [146, 214, 215, 362, 370], "web": [146, 359, 360, 362, 365, 367, 372, 389, 396, 397, 496, 863, 952, 962, 990, 994], "stanford": [146, 362, 624, 657, 658, 806, 809, 810, 863, 950], "leastangle_2002": [146, 362], "pitfal": [146, 164, 165, 168, 170, 307, 355, 376, 377, 379, 393, 440, 442, 470, 628, 647, 648, 726, 784, 794, 797, 832, 844, 851, 948, 989], "accept": [146, 149, 252, 305, 324, 337, 339, 348, 352, 353, 359, 365, 366, 373, 375, 376, 377, 378, 383, 385, 389, 394, 397, 413, 417, 420, 421, 423, 436, 439, 442, 530, 531, 544, 545, 556, 557, 568, 569, 572, 603, 610, 614, 618, 654, 700, 715, 751, 768, 769, 773, 774, 813, 814, 821, 822, 835, 888, 890, 891, 894, 948, 950, 952, 955, 960, 962, 967, 972, 973, 982, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "tic": [146, 167, 266, 954], "sfm": 146, "toc": 146, "sequentialfeatureselector": [146, 398, 568, 572, 578, 1006, 1007, 1008], "sf": [146, 234, 255, 307, 360, 398, 466, 577], "backward": [146, 307, 367, 377, 398, 470, 551, 577, 589, 590, 593, 594, 595, 597, 598, 623, 644, 655, 883, 886, 952, 956, 973, 994, 997, 1002, 1003, 1004, 1006, 1008], "tic_fwd": 146, "sfs_forward": 146, "toc_fwd": 146, "tic_bwd": 146, "sfs_backward": 146, "toc_bwd": 146, "481": 146, "isn": [146, 305, 337, 339, 348, 353, 365, 372, 490, 536, 537, 569, 765, 773, 774, 844, 955, 967, 1004], "sound": [146, 348], "finish": [146, 243, 949], "expos": [146, 308, 353, 358, 362, 387, 396, 398, 399, 413, 439, 528, 529, 542, 543, 544, 545, 568, 569, 577, 586, 770, 773, 774, 783, 800, 801, 802, 803, 804, 805, 885, 920, 948, 952, 954, 982, 984, 986, 991, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "751": [146, 147, 280, 289], "plot_select_from_model_diabet": [146, 147], "030": [147, 338], "auto_examples_feature_select": 147, "basic": [148, 159, 162, 164, 194, 329, 352, 354, 355, 365, 366, 368, 375, 377, 389, 393, 394, 396, 586, 597, 866, 878, 879, 880, 881, 941, 942, 955, 966, 971, 972, 973, 976, 985], "introductori": [148, 159, 164, 224, 586, 597, 976], "gpr": [148, 158, 159, 164, 470, 585, 586, 588, 589, 590, 591, 596, 597, 598, 599, 600, 974, 989, 1004], "mauna": [148, 159, 164, 470, 586, 590, 597, 598, 600], "loa": [148, 159, 164, 470, 586, 590, 597, 598, 600], "co2": [148, 159, 164, 470, 586, 590, 597, 598, 600, 1001], "xor": [148, 159, 164, 330, 585, 589, 597, 948, 968, 1001], "posterior": [148, 149, 150, 159, 164, 175, 255, 394, 399, 524, 525, 527, 585, 586, 588, 589, 590, 594, 597, 598, 602, 619, 620, 682, 768, 946, 972, 1000, 1003], "iso": [148, 159, 164, 219, 585, 588, 589], "trick": [149, 231, 285, 339, 351, 354, 355, 367, 375, 390, 399, 557, 564, 618, 647, 944, 945, 956, 966, 967, 985, 986, 989, 995, 1003], "drastic": [149, 229, 263, 389, 393, 955, 965], "theorem": [149, 388, 399, 954], "period": [149, 154, 158, 368, 377, 387, 399, 590, 790, 850, 1002, 1007], "reus": [149, 189, 256, 305, 339, 366, 377, 389, 390, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 609, 621, 623, 624, 627, 633, 635, 637, 641, 642, 643, 644, 651, 652, 653, 655, 828, 829, 960, 964, 976, 1001], "training_sample_indic": 149, "training_data": 149, "training_noisy_target": 149, "newer": [149, 364, 380, 394], "expsinesquar": [149, 154, 158, 399], "emb": [149, 218, 229, 284, 358, 359, 437, 670, 949], "kernel_ridg": [149, 231, 355, 998], "dashdot": [149, 152], "length_scal": [149, 150, 153, 154, 155, 156, 158, 399, 587, 590, 594, 596, 597, 598, 599], "tell": [149, 166, 255, 324, 329, 353, 360, 389, 397, 538, 553, 941, 946, 959, 987], "param_distribut": [149, 256, 263, 267, 307, 376, 774, 781, 783], "1e0": [149, 231, 246, 263, 941], "kernel__length_scal": 149, "kernel__period": 149, "1e1": [149, 155, 196, 231, 324], "kernel_ridge_tun": 149, "379": 149, "9915849773450223": 149, "7986499491396728": 149, "607275806426108": 149, "predictions_kr": 149, "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 399, 585, 588, 589, 590, 591, 592, 596, 599, 600, 618, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "whitekernel": [149, 154, 155, 399, 586, 587, 589, 1005], "periodicity_bound": [149, 154, 158, 590], "033": [149, 960], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 585, 586], "noise_level": [149, 154, 155, 399, 587, 600], "182": [149, 294, 370, 396], "mean_predictions_gpr": 149, "std_predictions_gpr": 149, "return_std": [149, 154, 155, 156, 158, 175, 176, 377, 527, 542, 543, 586, 588, 589, 590, 591, 600, 602, 619, 620, 831, 1001, 1002, 1006], "formul": [149, 158, 365, 391, 394, 397, 399, 524, 525, 532, 539, 625, 626, 629, 630, 631, 633, 634, 640, 645, 736, 742, 769, 872, 875, 878, 880, 952, 953, 962, 974, 989], "forc": [149, 181, 301, 337, 359, 363, 384, 393, 396, 425, 432, 470, 581, 584, 621, 622, 627, 628, 632, 635, 636, 637, 638, 647, 648, 649, 656, 659, 662, 727, 751, 754, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 872, 873, 874, 875, 876, 888, 890, 891, 962, 989, 999, 1002, 1003, 1004, 1006, 1007, 1008], "capac": [149, 168], "length_scale_bound": [149, 155, 156, 158, 399, 586, 590, 594, 597, 598], "attenu": [149, 167], "plot_compare_gpr_krr": [149, 159], "arbitrarili": [150, 241, 246, 337, 377, 399, 408, 440, 456, 457, 458, 527, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 644, 645, 647, 648, 653, 654, 655, 695, 696, 697, 719, 758, 762, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 952, 955, 962, 968], "lml": [150, 151, 155, 399], "exhibit": [150, 201, 337, 379, 393, 394, 396, 399, 960], "steep": [150, 264, 265, 389, 393, 399, 425, 431], "laplac": [150, 399, 585, 586, 806, 807, 808, 810, 954], "875": [150, 644], "214": [150, 249, 271, 326, 335, 399, 559], "319": [150, 182, 215, 987], "gp_fix": 150, "gp_opt": 150, "log_marginal_likelihood": [150, 151, 153, 155, 158, 399, 585, 586, 1004], "theta": [150, 151, 153, 155, 157, 158, 232, 394, 399, 498, 511, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 667, 954, 968], "landscap": [150, 399], "theta0": 150, "theta1": 150, "pcolor": 150, "xscale": [150, 155, 231], "yscale": [150, 155, 196, 231, 337], "plot_gpc": [150, 159], "anisotrop": [151, 399, 592, 594, 597], "gpc_rbf_isotrop": 151, "gpc_rbf_anisotrop": 151, "m_max": 151, "plot_gpc_iri": [151, 159], "0256": 152, "dotproduct": [152, 153, 158, 399, 586, 600], "sigma_0": [152, 153, 158, 399, 589], "constantkernel": [152, 158, 399, 586, 592, 596, 599], "lim": [152, 509], "experi": [152, 156, 166, 168, 172, 198, 338, 339, 353, 359, 365, 367, 388, 393, 490, 701, 758, 953, 964, 970, 971, 972, 976, 985, 987], "61611719": 152, "00099547": 152, "10469096": 152, "32782448": 152, "00000000": 152, "50000000": 152, "17289014": 152, "6984743": 152, "3109306": 152, "93271427": 152, "03823144": 152, "10584743": 152, "87600388": 152, "74310541": 152, "21301203": 152, "26386883": 152, "gp": [152, 157, 399, 585, 586, 597, 1000], "set_aspect": [152, 207, 242, 333], "cb": [152, 229, 244], "widehat": 152, "mathbf": [152, 394, 948, 952, 956, 957, 966], "leq": [152, 394, 396, 948, 952, 955, 966, 967, 968], "clim": 152, "666": [152, 247, 813, 942], "clabel": [152, 207], "334": [152, 215], "153": [152, 159, 638], "plot_gpc_isoprob": [152, 159], "stationari": [153, 399, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "coincid": [153, 198, 399], "430": [153, 155, 158, 401, 508], "convergencewarn": [153, 155, 157, 158, 204, 211, 292, 293, 299, 373, 377, 768, 769, 1002, 1003, 1006], "k1__constant_valu": [153, 158], "bound": [153, 155, 157, 158, 164, 198, 214, 224, 238, 254, 362, 363, 370, 371, 389, 394, 397, 399, 400, 420, 463, 477, 487, 498, 511, 570, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 610, 612, 625, 629, 633, 652, 679, 708, 768, 769, 811, 812, 848, 859, 862, 863, 864, 872, 873, 874, 877, 894, 920, 948, 951, 952, 955, 964, 966, 967, 969, 1002, 1005, 1006, 1008], "100000": [153, 214, 231, 240, 365, 588, 589, 590, 594, 595, 597, 598, 600, 859, 945, 985, 987], "puor_r": [153, 330], "516": [153, 159], "plot_gpc_xor": [153, 159], "rw2006": [154, 399, 585, 586], "ascent": [154, 399], "monthli": [154, 368, 378, 399, 952], "atmospher": [154, 399], "ppm": 154, "observatori": [154, 399], "hawaii": [154, 399], "1958": [154, 394, 396, 399, 507], "air": [154, 362, 474, 737], "41187": 154, "flag": [154, 363, 365, 367, 439, 585, 586, 602, 648, 650, 701, 758, 967, 1000, 1004, 1005, 1007, 1008, 1009], "station": 154, "mlo": 154, "316": [154, 158, 586, 589, 600, 847], "317": [154, 267, 271], "co2_data": 154, "to_datetim": 154, "timestamp": 154, "march": [154, 699, 729, 952, 994, 998, 1002, 1004], "dropna": 154, "nfrom": 154, "upcom": [154, 363], "to_numpi": 154, "rise": [154, 399], "irregular": [154, 389, 399, 955], "long_term_trend_kernel": 154, "decai": [154, 399, 519, 828, 829, 907, 952, 966, 998], "seasonal_kernel": 154, "ration": [154, 598, 950], "diffus": [154, 399], "accommod": [154, 399, 1002], "rationalquadrat": [154, 158, 399, 591], "irregularities_kernel": 154, "shall": [154, 399], "phenomena": [154, 399], "noise_kernel": 154, "noise_level_bound": [154, 155, 600], "co2_kernel": 154, "subtract": [154, 166, 392, 394, 399, 419, 422, 434, 509, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 1001], "normalize_i": [154, 399, 586, 1008], "y_mean": [154, 155, 158, 586, 619, 620], "gaussianprocessregressorgaussianprocessregressor": 154, "todai": [154, 375, 987], "current_month": 154, "mean_y_pr": 154, "std_y_pr": 154, "968": [154, 253], "188": [154, 277, 289, 362, 370, 559], "0367": 154, "6ppm": 154, "508": [154, 159, 985], "plot_gpr_co2": [154, 159], "target_gener": 155, "add_nois": 155, "minima": [155, 184, 394, 422, 667, 949, 986, 1002], "y_std": [155, 158, 527, 586, 619, 620, 1007], "k1__k2__length_scal": [155, 399], "noptimum": 155, "nlog": 155, "length_scale_grid": 155, "noise_level_grid": 155, "newshap": 155, "984": [155, 159], "plot_gpr_noisi": [155, 159], "principl": [156, 280, 302, 339, 365, 375, 377, 378, 393, 396, 399, 907, 941, 951, 955, 966, 1001], "tikhonov": [156, 399, 647], "training_indic": 156, "n_restarts_optim": [156, 399, 585, 586], "43": [156, 193, 229, 255, 362, 369, 770, 783], "mean_predict": 156, "std_predict": 156, "whenev": [156, 348, 359, 372, 377, 380, 387, 456, 457, 458, 470, 603, 605, 943, 951, 973, 1004], "noise_std": 156, "y_train_noisi": 156, "556": [156, 159], "plot_gpr_noisy_target": [156, 159], "gene": [157, 359, 386, 426, 488, 568, 569, 818, 851], "letter": [157, 360, 362, 368, 397, 761, 762, 952], "among": [157, 167, 172, 196, 273, 346, 354, 360, 366, 377, 378, 387, 388, 392, 487, 494, 765, 796, 814, 819, 821, 872, 875, 878, 879, 880, 881, 941, 944, 952, 953, 959, 962, 967, 994, 1000, 1001, 1004], "brighter": 157, "4th": [157, 362], "6th": 157, "haussler": 157, "1999": [157, 360, 387, 389, 391, 394, 396, 413, 425, 432, 444, 449, 509, 516, 530, 531, 534, 535, 696, 864, 872, 873, 875, 876, 958, 964], "646": 157, "technic": [157, 197, 218, 309, 360, 362, 365, 377, 396, 627, 639, 660, 661, 865, 948, 949, 955], "depart": [157, 389], "california": [157, 161, 162, 297, 307, 358, 362, 464, 474, 959, 989], "santa": 157, "cruz": 157, "baseline_similar": 157, "plot_gpr_on_structured_data": [157, 159], "unfil": 157, "generickernelmixin": [157, 1004], "sequencekernel": 157, "baseline_similarity_bound": 157, "hyperparameter_baseline_similar": 157, "_f": [157, 948], "_g": 157, "__call__": [157, 324, 377, 397, 399, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 1001], "eval_gradi": [157, 399, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "is_stationari": [157, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "clone_with_theta": [157, 399, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "agct": 157, "agc": 157, "aact": 157, "taa": 157, "aaa": 157, "gaaca": 157, "training_idx": 157, "cga": 157, "taac": 157, "tcg": 157, "cttt": 157, "tgct": 157, "atag": 157, "ctc": 157, "plot_gpr_sampl": 158, "gpr_model": 158, "y_sampl": [158, 586], "sample_i": [158, 399, 586, 1008], "single_prior": 158, "dev": [158, 166, 214, 260, 265, 363, 365, 368, 372, 952, 976, 990, 1001, 1006], "bbox_to_anchor": [158, 260, 331], "594": [158, 196], "279": [158, 214, 256, 948], "alpha_bound": [158, 598], "1e15": 158, "34e": 158, "799": [158, 338], "791": 158, "sigma_0_bound": [158, 589], "_gpr": 158, "629": 158, "lbfg": [158, 291, 366, 623, 624, 633, 634, 644, 647, 649, 655, 662, 802, 805, 828, 829, 948, 956, 998, 999, 1001, 1002, 1007, 1008, 1009], "statu": [158, 359, 362, 380, 470, 811, 812], "abnormal_termination_in_lnsrch": 158, "445": [158, 474, 960], "6576930005": 158, "798": [158, 219, 223, 396], "matern": [158, 399, 1005, 1009], "609": [158, 370], "484": 158, "185": [158, 362, 370, 828, 829], "441": [158, 159, 163], "plot_gpr_prior_posterior": [158, 159], "069": [159, 253], "auto_examples_gaussian_process": 159, "iterativeimput": [160, 162, 163, 164, 464, 540, 555, 603, 604, 605, 614, 620, 647, 793, 814, 832, 1003, 1004, 1005, 1006, 1008], "robin": [161, 162, 602, 942, 1000, 1003, 1008], "kneighborsregressor": [161, 233, 287, 309, 396, 545, 813, 819, 821, 822, 955, 994, 996, 998, 1004, 1006, 1007, 1008, 1009], "mimic": [161, 196, 337, 787], "missforest": [161, 942], "popular": [161, 221, 360, 363, 369, 372, 375, 377, 388, 395, 396, 397, 399, 427, 437, 942, 944, 948, 950, 957, 966, 973, 982, 987], "enable_iterative_imput": [161, 162, 368, 602, 942, 1003], "fetch_california_h": [161, 162, 167, 297, 307, 360, 376, 390, 474, 1003, 1005], "x_full": [161, 162, 297], "y_full": [161, 162, 297], "2k": 161, "br_estim": 161, "score_full_data": 161, "neg_mean_squared_error": [161, 162, 198, 231, 269, 794, 952, 960, 1000], "x_miss": [161, 162], "y_miss": [161, 162], "missing_sampl": [161, 162], "missing_featur": [161, 162], "score_simple_imput": 161, "missing_valu": [161, 162, 236, 377, 602, 603, 604, 605, 742, 942, 1002, 1003], "score_iterative_imput": 161, "stricter": 161, "impute_estim": 161, "__class__": [161, 196, 198, 299, 337, 338, 339, 371], "xerr": [161, 162, 338], "plot_iterative_imputer_variants_comparison": [161, 163], "ness": [162, 214], "auxiliari": [162, 363, 976], "district": [162, 167, 360], "neither": [162, 166, 257, 305, 337, 348, 375, 413, 569, 603, 894, 955, 968], "20640": [162, 360, 464], "feel": [162, 297, 364, 365, 372, 389, 968], "x_diabet": [162, 982], "y_diabet": [162, 982], "x_california": 162, "y_california": 162, "add_missing_valu": 162, "missing_r": 162, "n_missing_sampl": 162, "x_miss_california": 162, "y_miss_california": 162, "x_miss_diabet": 162, "y_miss_diabet": 162, "knnimput": [162, 305, 602, 605, 942, 1004, 1005, 1008], "get_scores_for_imput": 162, "impute_scor": 162, "x_label": 162, "mses_california": 162, "stds_california": 162, "mses_diabet": 162, "stds_diabet": 162, "get_full_scor": 162, "full_scor": 162, "get_impute_zero_scor": 162, "fill_valu": [162, 227, 236, 306, 605, 962, 1002], "zero_impute_scor": 162, "unweight": [162, 209, 438, 622, 628, 653, 681, 687, 702, 703, 711, 756, 757, 760, 761, 806, 807, 808, 809, 810, 942], "get_impute_knn_scor": 162, "knn_impute_scor": 162, "get_impute_mean": 162, "mean_impute_scor": 162, "obvious": [162, 352, 987], "get_impute_it": 162, "n_nearest_featur": [162, 602], "sample_posterior": [162, 602, 942], "iterative_impute_scor": 162, "n_bar": 162, "xval": 162, "domin": [162, 196, 201, 302, 360, 370, 851, 954, 962, 968], "573": [162, 163, 275, 397], "plot_missing_valu": [162, 163], "auto_examples_imput": 163, "prune": [164, 341, 347, 398, 475, 532, 533, 534, 535, 539, 540, 568, 619, 797, 878, 879, 880, 881, 955, 974, 989, 994, 997, 1004, 1005], "elast": [164, 174, 187, 207, 215, 268, 388, 446, 447, 453, 476, 499, 621, 622, 627, 632, 633, 634, 635, 636, 637, 638, 643, 651, 653, 656, 659, 758, 941, 952, 966, 974, 989, 994, 999, 1003, 1004], "gram": [164, 174, 215, 366, 394, 397, 463, 499, 523, 563, 564, 565, 566, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 640, 656, 657, 658, 659, 660, 661, 740, 748, 750, 941, 962, 987, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1007, 1008], "huberregressor": [164, 174, 202, 215, 499, 645, 646, 647, 653, 654, 948, 1000, 1001, 1002, 1003], "criteria": [164, 174, 185, 204, 215, 245, 255, 372, 389, 398, 441, 456, 457, 458, 476, 532, 533, 534, 535, 539, 540, 621, 627, 631, 633, 634, 646, 667, 832, 851, 870, 871, 878, 879, 880, 881, 942, 951, 956, 966, 986, 997, 1002, 1005], "aic": [164, 174, 184, 215, 245, 476, 626, 628, 629, 630, 631, 769, 832, 851, 941, 948, 994, 1001, 1007, 1008], "bic": [164, 174, 184, 215, 245, 398, 476, 626, 628, 629, 630, 631, 769, 832, 851, 941, 948, 951, 994, 1001, 1007, 1008], "mnist": [164, 174, 204, 215, 275, 290, 295, 470, 546, 633, 797, 828, 851, 893, 948, 956], "20newgroup": [164, 174, 215, 463, 546, 633, 797, 948], "ordinari": [164, 174, 175, 198, 201, 213, 215, 308, 610, 621, 627, 629, 630, 631, 632, 647, 653, 657, 658, 662, 966, 974, 989], "spline": [164, 174, 215, 491, 492, 493, 647, 832, 846, 850, 972, 1007], "ransac": [164, 174, 202, 213, 215, 499, 624, 632, 646, 653, 654], "convex": [164, 174, 215, 217, 333, 338, 389, 391, 394, 402, 427, 437, 448, 450, 451, 454, 455, 633, 651, 667, 948, 949, 955, 956, 966, 1007], "theil": [164, 174, 202, 215, 624, 632, 646, 653, 654], "sen": [164, 174, 202, 215, 624, 632, 646, 653, 654], "tweedi": [164, 174, 215, 439, 470, 623, 644, 655, 680, 697, 718, 720, 722, 723, 725, 797, 832, 835, 836, 844, 851, 948, 1004, 1005, 1007], "insur": [164, 174, 196, 215, 439, 470, 623, 644, 655, 680, 718, 723, 725, 797, 832, 835, 836, 844, 851, 948], "claim": [164, 174, 215, 365, 439, 470, 623, 644, 655, 680, 718, 723, 725, 797, 832, 835, 836, 844, 851, 948], "multicollinear": [164, 165, 170, 392, 475, 539, 609, 630, 797, 948, 960], "isomap": [164, 216, 219, 223, 305, 309, 396, 477, 519, 524, 541, 664, 665, 666, 667, 820, 832, 841, 863, 955, 988, 989, 1002, 1004, 1007, 1008, 1009], "And": [164, 216, 223, 255, 337, 372, 389, 393, 397, 505, 563, 564, 566, 667, 668, 948, 952, 970, 1001], "hole": [164, 216, 223, 505, 667, 668, 1008], "perplex": [164, 216, 217, 221, 223, 275, 489, 500, 511, 667, 949, 999, 1001, 1008], "johnson": [164, 224, 238, 297, 301, 357, 388, 463, 477, 847, 858, 862, 863, 864, 962, 969, 989, 1002, 1008], "lindenstrauss": [164, 224, 238, 357, 388, 463, 477, 862, 863, 864, 969, 989], "halv": [164, 248, 271, 384, 490, 539, 553, 770, 773, 774, 875, 989, 1006], "custom": [164, 235, 248, 256, 271, 277, 305, 319, 324, 335, 337, 339, 357, 360, 363, 366, 371, 372, 373, 375, 376, 377, 388, 389, 390, 393, 399, 443, 463, 467, 468, 477, 479, 513, 515, 522, 524, 546, 548, 577, 665, 687, 770, 797, 835, 868, 875, 936, 941, 946, 952, 955, 972, 973, 976, 987, 989, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1009], "det": [164, 248, 271, 391, 490, 539, 673, 700, 762, 797, 832, 851, 870, 905, 1006], "tsne": [164, 217, 218, 219, 221, 222, 276, 289, 309, 377, 403, 409, 470, 663, 664, 665, 815, 832, 926, 949, 955, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "novelti": [164, 225, 276, 282, 289, 323, 817, 974, 988, 989, 994, 1002], "lof": [164, 225, 234, 276, 289, 538, 817, 874, 958], "boltzmann": [164, 290, 295, 477, 633, 687, 797, 827, 828, 829, 831, 856, 988, 989, 996], "mlp": [164, 235, 290, 292, 295, 470, 546, 797, 828, 829, 956], "semi_supervis": [164, 307, 309, 311, 312, 313, 314, 315, 316, 317, 355, 953, 965, 995, 1000, 1001, 1008, 1009], "tie": [164, 319, 335, 375, 396, 487, 799, 875, 953, 967, 995], "unbalanc": [164, 258, 319, 335, 393, 487, 875, 895, 896, 941, 966], "featurehash": [164, 336, 338, 340, 354, 360, 397, 439, 462, 556, 563, 564, 565, 566, 844, 995, 1000, 1001, 1002, 1008], "auto_examples_python": 164, "auto_examples_jupyt": 164, "hint": [166, 352, 369, 383, 423, 985], "aris": [166, 258, 332, 353, 369, 389, 689, 948, 949, 1006], "survei": [166, 392], "1985": [166, 389, 679, 689, 759], "educ": [166, 365, 474, 690, 953], "race": [166, 360, 997], "occup": [166, 167, 297, 959], "sector": 166, "marr": 166, "not_memb": 166, "marri": 166, "freq": [166, 339], "289": 166, "440": 166, "156": [166, 362], "411": [166, 391, 401, 448, 508], "018727": 166, "822097": 166, "833333": 166, "615373": 166, "379710": 166, "726573": 166, "thereaft": [166, 175], "hispan": 166, "manufactur": 166, "unmarri": 166, "dollar": [166, 360], "exploratori": [166, 976], "emul": [166, 372], "train_dataset": [166, 359], "pairplot": 166, "diag_kind": 166, "kde": [166, 279, 280, 288, 395, 816], "rangeindex": 166, "533": 166, "normalis": [166, 586, 987], "numerical_column": [166, 168, 442], "if_binari": [166, 844, 962, 1005], "verbose_feature_names_out": [166, 168, 308, 309, 390, 439, 442, 1007], "prepend": [166, 994], "exp10": 166, "ufunc": 166, "passthroughpassthroughtransformedtargetregressor": 166, "transformedtargetregressortransformedtargetregressor": 166, "ridgeridg": 166, "string_scor": 166, "nmae": 166, "learnt": [166, 348, 377, 393, 941], "obviou": [166, 348, 352, 386, 394], "regressor_": [166, 440, 568, 569, 572], "race_hispan": 166, "013519": 166, "race_oth": 166, "009075": 166, "race_whit": 166, "022594": 166, "occupation_cler": 166, "000045": 166, "occupation_manag": 166, "090528": 166, "occupation_oth": 166, "025102": 166, "occupation_profession": 166, "071964": 166, "occupation_sal": 166, "046636": 166, "occupation_servic": 166, "091053": 166, "sector_construct": 166, "000198": 166, "sector_manufactur": 166, "031255": 166, "sector_oth": 166, "031025": 166, "marr_unmarri": 166, "032405": 166, "union_not_memb": 166, "117154": 166, "sex_mal": 166, "090808": 166, "south_y": 166, "033823": 166, "054699": 166, "035005": 166, "030867": 166, "adimension": 166, "Their": [166, 360, 362, 378, 389, 619, 994], "visibl": [166, 198, 334, 359, 365, 389, 827, 957, 999], "gaug": 166, "decad": [166, 973], "x_train_preprocess": 166, "multipli": [166, 214, 255, 352, 373, 377, 394, 396, 397, 439, 450, 490, 513, 515, 516, 522, 532, 536, 539, 621, 623, 627, 629, 633, 634, 635, 637, 643, 644, 645, 647, 651, 652, 653, 655, 661, 662, 664, 668, 737, 872, 875, 878, 880, 896, 928, 929, 930, 941, 948, 952, 966, 1005], "coef_i": 166, "std_i": 166, "emphas": [166, 334, 370, 394, 952], "perturb": [166, 213, 294, 394, 396, 951], "caution": [166, 214, 368, 416, 429, 1002], "repeatedkfold": [166, 393, 775, 785, 1001], "cv_model": 166, "return_estim": [166, 393, 794, 1002], "train_idx": [166, 377], "stripplot": 166, "whi": [166, 168], "mambaforg": [166, 256], "env": [166, 256, 363, 372, 380], "testenv": [166, 256], "lib": [166, 256, 353, 363, 380, 474, 972], "python3": [166, 256, 363, 380], "site": [166, 256, 363, 365, 367, 372, 380, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 976, 1002], "470": [166, 167, 342, 347], "iteritem": [166, 256], "collinear": [166, 169, 201, 214, 362, 396, 542, 623, 644, 655, 844, 948, 994], "teas": 166, "apart": [166, 308, 324, 375, 377, 390, 392, 398, 698, 967, 976, 1002], "vice": [166, 252, 337, 389, 399, 418, 582, 583, 800, 998], "versa": [166, 252, 337, 389, 399, 418, 582, 583, 800, 998], "column_to_drop": 166, "said": [166, 225, 256, 338, 360, 365, 763, 950, 958, 978, 985], "unchang": [166, 214, 262, 396, 517, 558, 736, 806, 807, 808, 810, 830, 834, 843, 859, 955, 978, 1002, 1008], "neglig": [166, 955, 997], "littl": [166, 167, 168, 169, 225, 360, 397, 437, 619, 770, 783, 907, 942, 949, 951, 967, 968, 985, 995, 1006], "ridgecvridgecv": 166, "alon": [166, 261, 324, 377, 383, 623, 644, 655, 715, 1001, 1003], "themselv": [166, 297, 361, 372, 377, 386, 389, 397, 399, 590, 763, 968, 987, 1004], "bring": [166, 297, 394, 651, 653, 949, 976], "must": [166, 167, 169, 177, 213, 214, 225, 235, 250, 281, 298, 337, 348, 360, 364, 365, 366, 368, 372, 377, 378, 385, 387, 389, 390, 393, 394, 396, 397, 398, 399, 400, 414, 417, 420, 421, 422, 424, 425, 426, 430, 432, 434, 437, 439, 441, 442, 444, 449, 461, 483, 484, 487, 498, 506, 512, 514, 516, 518, 519, 528, 529, 534, 535, 536, 537, 542, 543, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 586, 592, 595, 602, 603, 604, 605, 607, 608, 613, 617, 618, 623, 624, 627, 633, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 674, 677, 680, 683, 708, 719, 737, 744, 747, 751, 754, 761, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 781, 783, 784, 785, 787, 788, 790, 797, 806, 807, 808, 809, 810, 813, 814, 815, 817, 819, 820, 821, 822, 823, 826, 827, 828, 829, 831, 834, 835, 836, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 870, 871, 872, 873, 874, 875, 876, 877, 920, 927, 936, 938, 941, 942, 948, 949, 950, 952, 955, 956, 958, 959, 966, 967, 968, 978, 987, 994, 997, 1001, 1005, 1007, 1008], "proxi": [166, 394, 827, 982, 999], "respond": [166, 365, 389], "890": [166, 170, 253], "plot_linear_model_coefficient_interpret": [166, 170], "complement": [167, 337, 607, 608, 772, 786, 789, 797, 806, 807, 808, 809, 810, 959, 974, 989, 1002], "goldstein": [167, 959], "kapeln": [167, 959], "bleich": [167, 959], "pitkin": [167, 959], "peek": [167, 365, 959], "cal_hous": [167, 360], "pdp": [167, 607, 959, 1008], "hidden_layer_s": [167, 235, 291, 293, 828, 829, 956], "learning_rate_init": [167, 292, 293, 828, 829], "early_stop": [167, 204, 291, 308, 337, 377, 396, 536, 537, 641, 642, 643, 651, 652, 653, 828, 829, 966, 1002, 1005, 1008], "forget": [167, 348, 353, 359, 368, 375, 394, 949, 975], "poor": [167, 172, 261, 270, 315, 387, 393, 394, 665, 669, 711, 808, 811, 812, 946, 947, 949, 954, 973, 978, 1001, 1002, 1003, 1005, 1007], "overcrowd": 167, "grid_resolut": [167, 307, 322, 606, 607, 608], "medinc": [167, 297, 307, 360], "aveoccup": [167, 297, 307, 360], "houseag": [167, 307, 360], "averoom": [167, 297, 307, 360], "672": 167, "cheaper": [167, 389, 399, 648, 944, 948], "incom": [167, 297, 360, 416, 959], "household": [167, 360, 959], "room": [167, 297, 360, 362, 369, 389, 975], "decil": [167, 607, 1005], "meaningless": [167, 397, 872, 875, 997], "007": [167, 240, 263, 338], "partial_depend": [167, 607, 959, 995, 1003, 1004, 1005, 1006], "add_ax": [167, 221, 266], "surf": 167, "rstride": 167, "cstride": 167, "bupu": 167, "pretti": [167, 221, 253, 337, 352, 365, 375, 828, 829, 956, 1003], "view_init": [167, 217, 219, 221], "241": [167, 170, 188, 215, 291, 295, 396, 542, 543], "plot_partial_depend": [167, 170, 305, 306, 307, 999, 1003, 1004, 1005, 1006, 1007, 1008], "inflat": [168, 389, 393, 952], "mitig": [168, 353, 354, 949, 968, 985, 986, 1006], "breiman": [168, 393, 396, 491, 492, 493, 530, 531, 539, 540, 609, 878, 879, 960, 968], "random_num": 168, "random_cat": 168, "sibsp": 168, "parch": 168, "categorical_encod": 168, "numerical_pip": 168, "memor": 168, "814": [168, 985], "mdi_import": 168, "sorted_importances_idx": 168, "retri": [168, 470, 1002, 1008], "classifier__min_samples_leaf": 168, "anymor": [168, 196, 305, 306, 324, 348, 368, 390, 645, 1000, 1003, 1006, 1007, 1008], "810": 168, "train_result": 168, "test_result": 168, "train_import": 168, "test_import": 168, "031": [168, 170, 362], "plot_permutation_import": [168, 170], "wisconsin": [169, 358, 475, 989, 999], "spearman": [169, 610, 611, 943], "spearmanr": 169, "squareform": 169, "load_breast_canc": [169, 315, 342, 369, 567, 570, 571, 573, 649, 650, 761, 952, 999, 1000, 1005], "012": [169, 172, 263], "contradict": [169, 973], "perm_sorted_idx": 169, "tree_importance_sorted_idx": 169, "tree_indic": 169, "heatmap": [169, 175, 266, 324], "fill_diagon": [169, 220], "distance_matrix": 169, "dist_linkag": 169, "dendro": 169, "leaf_rot": 169, "dendro_idx": 169, "ivl": 169, "cluster_id": [169, 338], "fcluster": 169, "cluster_id_to_feature_id": 169, "selected_featur": 169, "x_train_sel": 169, "x_test_sel": 169, "clf_sel": 169, "987": [169, 170, 338], "plot_permutation_importance_multicollinear": [169, 170], "auto_examples_inspect": 170, "polynomialcountsketch": [172, 614, 616, 944, 1006, 1008], "covtyp": 172, "tensor": [172, 357, 394, 513, 515, 522, 614, 615, 616, 989, 1006], "sketch": [172, 354, 357, 373, 388, 614, 615, 616, 919, 989, 1006], "daniel": [172, 352, 474, 976, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1006, 1008], "lopez": 172, "sanchez": [172, 1002, 1003], "lope": 172, "usal": 172, "581": 172, "cartograph": 172, "remot": [172, 313, 365, 367], "fetch_covtyp": [172, 234, 307, 360, 1003, 1006, 1008], "5_000": 172, "mm": 172, "lsvm": 172, "lsvm_time": 172, "lsvm_score": 172, "thumb": [172, 352, 365, 375, 389, 633, 634, 641, 643, 651, 652, 653, 870, 952], "condens": 172, "compact": [172, 297, 352, 362, 811, 812, 968, 996], "ps_lsvm_time": 172, "ps_lsvm_score": 172, "ksvm": 172, "ksvm_time": 172, "ksvm_score": 172, "pham": [172, 944, 1001], "ninh": 172, "rasmu": [172, 1001], "pagh": [172, 944], "kdd": [172, 360, 387, 413, 964], "doi": [172, 196, 214, 365, 389, 651, 664, 666, 668, 864, 866], "1145": [172, 389, 651], "2487575": 172, "2487591": 172, "csie": [172, 359, 461, 483, 484, 633], "ntu": [172, 359, 461, 483, 484, 633], "tw": [172, 359, 461, 483, 484, 633, 967], "cjlin": [172, 359, 461, 483, 484, 633, 997], "libsvmtool": [172, 359, 461, 483, 484], "370": [172, 173, 338], "plot_scalable_poly_kernel": [172, 173], "auto_examples_kernel_approxim": 173, "ard": [175, 619, 620], "ol": [175, 186, 191, 193, 194, 202, 213, 308, 631, 948], "allevi": [175, 389, 954], "true_weight": 175, "ardregress": [175, 620, 948, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "olr": 175, "brr": 175, "symlognorm": 175, "linthresh": 175, "10e": 175, "cbar_kw": 175, "seismic_r": 175, "stabilis": 175, "sparser": [175, 187, 394, 446, 453, 514, 518, 948, 955, 966], "ard_scor": 175, "scores_": [175, 176, 567, 570, 571, 573, 574, 575, 619, 620, 634, 994, 1004], "brr_score": 175, "cutoff": [175, 912, 962, 1003], "full_data": 175, "input_featur": [175, 377, 418, 419, 421, 422, 424, 439, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 541, 542, 543, 544, 545, 556, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 663, 664, 815, 820, 823, 827, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863], "x_plot": [175, 197, 202, 231, 258, 280], "y_plot": [175, 197, 202, 258], "ard_poli": 175, "brr_poli": 175, "y_ard": 175, "y_ard_std": 175, "y_brr": 175, "y_brr_std": 175, "queri": [175, 288, 352, 368, 395, 400, 420, 425, 432, 527, 585, 586, 603, 619, 620, 699, 729, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 952, 955, 968, 972, 996, 998, 999, 1002], "lambda_init": [175, 176, 620, 948, 1004], "intrins": [175, 377, 394, 396, 955, 960, 966, 1006], "685": [175, 215, 694, 713, 952], "plot_ard": [175, 215, 619], "alpha_init": [176, 620, 948, 1004], "conclud": [176, 255, 339, 348, 378], "yoshihiro": [176, 1004], "uchida": [176, 1004], "nimbus1after2a1sun7show": 176, "1234": [176, 243, 258, 365], "n_order": 176, "vander": 176, "ymean": 176, "ystd": 176, "pink": 176, "_init": 176, "lambda_": [176, 619, 620, 847, 948, 1001], "plot_bayesian_ridge_curvefit": [176, 215], "normalized_weight": 177, "x_offset": 177, "x_center": 177, "x_scale": [177, 841, 856, 962], "uncent": 177, "incorrectli": [177, 396, 397, 528, 534, 536, 707, 713, 952, 995, 1000, 1002, 1003, 1005], "lm": 177, "98809919e": 177, "48938813e": 177, "03237920e": 177, "25349312e": 177, "53959628e": 177, "67451144e": 177, "00768662e": 177, "19112072e": 177, "07963978e": 177, "47987268e": 177, "76195467e": 177, "00393284e": 177, "07582983e": 177, "66670169e": 177, "65799352e": 177, "99891212e": 177, "58195950e": 177, "58667835e": 177, "98350372e": 177, "60836363e": 177, "00911944e": 177, "elasticnetelasticnet": 177, "151": [177, 215, 231, 370, 396, 964], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [177, 215], "huber": [178, 206, 388, 396, 535, 624, 651, 653, 966, 994, 996, 997, 1006], "mks542": 178, "y_outlier": 178, "epsilon_valu": 178, "intercept_": [178, 186, 188, 205, 232, 322, 329, 333, 366, 377, 456, 457, 458, 524, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 870, 871, 872, 873, 874, 875, 876, 946, 948, 966, 967, 994, 1001, 1006, 1008], "coef_ridg": 178, "plot_huber_vs_ridg": [178, 215], "logreg": [179, 805], "plot_method": [179, 278, 283, 320, 322, 325, 326, 606], "shade": [179, 278, 283, 320, 394], "057": [179, 215, 370], "plot_iris_logist": [179, 215], "y_pred_lasso": 180, "r2_score_lasso": 180, "658064": 180, "enet": [180, 268], "y_pred_enet": 180, "r2_score_enet": 180, "642515": 180, "markerfmt": 180, "use_line_collect": [180, 195], "2ca02c": 180, "ff7f0e": 180, "bx": 180, "plot_lasso_and_elasticnet": [180, 215], "penalis": [181, 194, 211, 671], "lasso_path": [181, 626, 627, 628, 629, 630, 631, 638, 657, 658, 948, 994, 996, 998, 1007], "enet_path": [181, 377, 622, 996, 998, 1007], "alphas_lasso": 181, "coefs_lasso": 181, "alphas_positive_lasso": 181, "coefs_positive_lasso": 181, "alphas_enet": 181, "coefs_enet": 181, "alphas_positive_enet": 181, "coefs_positive_enet": 181, "neg_log_alphas_lasso": 181, "neg_log_alphas_enet": 181, "coef_l": 181, "neg_log_alphas_positive_lasso": 181, "coef_pl": 181, "neg_log_alphas_positive_enet": 181, "coef_p": 181, "347": [181, 215, 338], "plot_lasso_coordinate_descent_path": [181, 215, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659], "sai": [182, 225, 332, 337, 338, 365, 389, 390, 394, 396, 397, 422, 475, 479, 485, 652, 941, 958, 965, 976, 984, 985, 987], "x_sp": 182, "sparse_lasso": 182, "dense_lasso": 182, "coeff_diff": 182, "2e": [182, 269], "039": [182, 253, 724, 754, 952], "01e": 182, "xs_sp": 182, "tocsc": 182, "nnz": [182, 338, 360, 674], "893": 182, "65e": 182, "plot_lasso_dense_vs_sparse_data": [182, 215], "lars_path": [183, 373, 506, 512, 514, 517, 518, 520, 521, 523, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 658, 659, 660, 661, 948, 994, 996, 999, 1003, 1005], "095": [183, 215], "plot_lasso_lar": [183, 215], "zht2007": 184, "lassolars": [184, 185, 398, 626, 629, 630, 948, 994, 1001, 1003, 1007, 1008], "2173": [184, 631, 948], "2192": [184, 631, 948], "038076": [184, 185], "050680": [184, 185], "061696": [184, 185], "021872": [184, 185], "044223": [184, 185], "034821": [184, 185], "043401": [184, 185], "002592": [184, 185], "019907": [184, 185], "017646": [184, 185], "001882": [184, 185], "044642": [184, 185], "051474": [184, 185], "026328": [184, 185], "008449": [184, 185], "019163": [184, 185], "074412": [184, 185], "039493": [184, 185], "068332": [184, 185], "092204": [184, 185], "085299": [184, 185], "044451": [184, 185], "005670": [184, 185], "045599": [184, 185], "034194": [184, 185], "032356": [184, 185], "002861": [184, 185], "025930": [184, 185], "089063": [184, 185], "011595": [184, 185], "036656": [184, 185], "012191": [184, 185], "024991": [184, 185], "036038": [184, 185], "034309": [184, 185], "022688": [184, 185], "009362": [184, 185], "005383": [184, 185], "036385": [184, 185], "003935": [184, 185], "015596": [184, 185], "008142": [184, 185], "031988": [184, 185], "046641": [184, 185], "linearlars": 184, "akaik": [184, 185, 631, 769, 941, 948], "lasso_lars_": [184, 185], "mathemat": [184, 213, 258, 357, 362, 365, 377, 379, 388, 391, 394, 395, 524, 525, 532, 539, 610, 621, 631, 763, 764, 769, 829, 872, 875, 878, 880, 952, 962, 964, 974, 976, 985, 989, 1008], "zou_et_al_criterion_resc": 184, "noise_vari": [184, 507, 631, 948, 1008], "aic_criterion": 184, "criterion_": [184, 185, 631], "index_alpha_path_a": 184, "alphas_": [184, 185, 622, 625, 626, 628, 629, 630, 631, 636, 638, 657, 658, 994, 997, 1007], "lassolarsic__criterion": [184, 185], "bic_criterion": 184, "index_alpha_path_b": 184, "115": [184, 215, 866, 960], "plot_lasso_lars_": [184, 215], "n_random_featur": 185, "x_random": 185, "random_": 185, "02d": 185, "random_02": 185, "random_05": 185, "random_08": 185, "random_11": 185, "647689": 185, "234137": 185, "469474": 185, "465730": 185, "012831": 185, "412304": 185, "067528": 185, "110923": 185, "601707": 185, "057711": 185, "208864": 185, "196861": 185, "478522": 185, "057122": 185, "324084": 185, "611676": 185, "331263": 185, "185659": 185, "812526": 185, "003533": 185, "alpha_a": 185, "alpha_b": 185, "160030": 185, "5244": 185, "764779": 185, "300343": 185, "5208": 185, "250639": 185, "5212": 185, "341949": 185, "542052": 185, "4928": 185, "018900": 185, "4936": 185, "201520": 185, "034077": 185, "4869": 185, "678359": 185, "4881": [185, 999], "952289": 185, "189631": 185, "4815": 185, "437362": 185, "4831": [185, 630], "802601": 185, "329616": 185, "4810": 185, "423641": 185, "4830": 185, "880191": 185, "306012": 185, "4803": 185, "573491": 185, "4828": 185, "121351": 185, "124225": 185, "4804": 185, "126502": 185, "4832": 185, "765671": 185, "820705": 185, "621645": 185, "4836": 185, "352124": 185, "750389": 185, "4805": 185, "012521": 185, "4841": 185, "834310": 185, "570655": 185, "290075": 185, "4846": 185, "203174": 185, "550213": 185, "4807": 185, "075887": 185, "4852": 185, "080295": 185, "358295": 185, "4806": 185, "878051": 185, "4855": 185, "973770": 185, "259297": 185, "706026": 185, "4860": 185, "893055": 185, "237703": 185, "4809": [185, 258], "440409": 185, "4866": 185, "718747": 185, "850031": 185, "989341": 185, "4867": 185, "358990": 185, "384338": 185, "4801": 185, "702266": 185, "163224": 185, "296575": 185, "4802": 185, "594754": 185, "4872": 185, "147022": 185, "031555": 185, "236720": 185, "4874": 185, "880298": 185, "618263": 185, "4798": 185, "484109": 185, "4876": 185, "218997": 185, "526599": 185, "4799": 185, "543841": 185, "370039": 185, "586798": 185, "4794": 185, "238744": 185, "4880": 185, "156252": 185, "445978": 185, "4795": 185, "589715": 185, "4885": 185, "598533": 185, "259031": 185, "4796": 185, "966981": 185, "4891": 185, "067109": 185, "032179": 185, "662409": 185, "4894": 185, "853846": 185, "019069": 185, "652739": 185, "4888": 185, "752867": 185, "626286": 185, "817724": 185, "set_xscal": [185, 200, 201], "optimist": [185, 260, 337, 348, 681, 948, 952], "proper": [185, 354, 396, 415, 424, 516, 528, 651, 907, 927, 947, 948, 949, 952, 967, 994, 1004, 1005, 1006, 1007, 1008], "badli": [185, 196, 337, 354, 851, 948, 962], "lassolarscv": [185, 398, 627, 628, 629, 631, 638, 640, 657, 658, 659, 948, 994, 1001, 1007], "3800": 185, "mse_path_": [185, 622, 626, 628, 630, 636, 638], "cv_alphas_": [185, 626, 630, 1006], "kink": 185, "heavili": [185, 352, 353, 365, 372, 624, 630, 969], "efficaci": 185, "034": [185, 215, 446], "plot_lasso_model_select": [185, 215, 622, 628], "plot_logist": [186, 215], "38": [187, 195, 249, 280, 302, 396, 512, 607, 952, 962, 994, 995, 996], "axes_row": 187, "clf_l1_lr": 187, "clf_l2_lr": 187, "clf_en_lr": 187, "coef_l1_lr": 187, "coef_l2_lr": 187, "coef_en_lr": 187, "sparsity_l1_lr": 187, "sparsity_l2_lr": 187, "sparsity_en_lr": 187, "nl1_ratio": 187, "580": [187, 215, 811, 812], "plot_logistic_l1_l2_spars": [187, 215], "995": [188, 318], "plot_logistic_multinomi": [188, 215], "976": 188, "dupr": [188, 204, 275, 277, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "m4x": [188, 212], "sag": [188, 203, 633, 634, 647, 649, 662, 948, 966, 972, 999, 1000, 1001, 1003, 1004], "bry": [188, 205], "classes_": [188, 205, 226, 312, 313, 365, 366, 377, 413, 414, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 544, 568, 569, 585, 633, 634, 641, 643, 649, 650, 651, 672, 675, 676, 761, 770, 773, 774, 783, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 813, 818, 821, 828, 831, 838, 839, 842, 865, 866, 867, 870, 872, 875, 878, 880, 952, 963, 966, 995, 998, 999, 1001, 1004, 1006], "plot_hyperplan": [188, 205, 232], "looser": 189, "liblinear": [189, 322, 370, 633, 634, 761, 870, 871, 872, 875, 876, 952, 967, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "l1_min_c": [189, 948, 967, 994], "intercept_sc": [189, 633, 634, 870, 871, 877, 948], "coefs_": [189, 293, 828, 829, 956, 999], "149": [189, 215, 953, 994], "plot_logistic_path": [189, 215], "jointli": [190, 262, 388, 389, 394, 948], "instant": 190, "wave": [190, 365, 951], "n_task": [190, 948], "n_relevant_featur": 190, "multitasklasso": [190, 635, 638, 948, 994, 1002, 1005, 1007], "coef_lasso_": 190, "coef_multi_task_lasso_": 190, "spy": 190, "feature_to_plot": 190, "seagreen": 190, "plot_multi_task_lasso_support": [190, 215], "true_coef": 191, "reg_nnl": 191, "y_pred_nnl": 191, "r2_score_nnl": 191, "nnl": [191, 632], "8225220806196526": 191, "reg_ol": 191, "y_pred_ol": 191, "r2_score_ol": 191, "7436926291700356": 191, "low_x": 191, "high_x": 191, "low_i": 191, "high_i": 191, "get_ylim": [191, 297, 298], "847222222222214": 191, "plot_nnl": [191, 215], "23786125": 192, "2548": 192, "diabetes_x": [192, 985], "diabetes_i": [192, 985], "diabetes_x_train": [192, 985], "diabetes_x_test": [192, 985], "diabetes_y_train": [192, 985], "diabetes_y_test": [192, 985], "diabetes_y_pr": 192, "046": [192, 215], "plot_ol": [192, 215], "plot_ols_3d": [193, 215], "207": [193, 215, 294, 994], "great": [194, 348, 365, 375, 394, 737, 973, 976, 994, 1001], "slope": [194, 198, 213, 387, 389, 696, 721, 950, 952], "greatli": [194, 230, 365, 372, 427, 955, 968, 1000, 1008], "plot_ols_ridge_vari": [194, 215], "plot_omp": [195, 215], "orthogonalmatchingpursuit": [195, 640, 660, 661, 948, 994, 996, 999, 1002, 1007], "orthogonalmatchingpursuitcv": [195, 639, 996, 1007], "make_sparse_coded_sign": [195, 506, 512, 1008], "512": 195, "n_nonzero_coef": [195, 501, 506, 512, 517, 523, 625, 639, 660, 661], "xw": [195, 308, 621, 622, 624, 627, 628, 629, 630, 631, 635, 636, 637, 638, 647, 656, 657, 658, 659, 948], "_0": [195, 660, 948, 952, 967], "data_transpos": [195, 501, 506, 512, 1008], "distort": [195, 229, 362, 387, 388, 848, 859, 864, 949, 962, 964], "y_noisi": 195, "idx_r": 195, "omp_cv": 195, "252": [195, 215, 219, 362, 509, 847, 858], "gbrt": [196, 396], "polici": [196, 214, 377, 510, 516, 948, 1009], "contract": [196, 214, 353, 377, 973], "compani": [196, 214, 389, 976], "policyhold": [196, 214, 948], "vehicl": [196, 214], "driver": [196, 214, 1009], "exposur": [196, 214, 948], "accid": [196, 214], "noll": [196, 214], "salzmann": [196, 214], "wuthrich": [196, 214], "novemb": [196, 214, 362, 999, 1000, 1002], "2139": [196, 214], "ssrn": [196, 214], "3164764": [196, 214], "ch": [196, 198, 214, 315, 317], "rth": [196, 214], "41214": [196, 214], "idpol": [196, 214], "claimnb": [196, 214], "vehpow": [196, 214], "vehag": [196, 214], "drivag": [196, 214], "bonusmalu": [196, 214], "vehbrand": [196, 214], "vehga": [196, 214], "b12": [196, 214], "1217": 196, "r82": 196, "77000": 196, "75000": 196, "diesel": [196, 214], "r22": 196, "09000": 196, "r72": 196, "84000": 196, "678008": 196, "6114326": 196, "00274": 196, "3317": 196, "r93": 196, "678009": 196, "6114327": 196, "9850": 196, "r11": [196, 214], "678010": 196, "6114328": 196, "1323": 196, "678011": 196, "6114329": 196, "r26": 196, "678012": 196, "6114330": 196, "678013": [196, 214], "10070308464041304": 196, "log_scale_transform": [196, 214], "linear_model_preprocessor": 196, "passthrough_numer": [196, 214], "binned_numer": [196, 214], "log_scaled_numer": [196, 214], "onehot_categor": [196, 214], "imbalanc": [196, 258, 262, 338, 375, 387, 393, 677, 682, 760, 771, 775, 808, 952, 954, 960, 972], "simplist": [196, 397], "pertin": 196, "dummyregressor": [196, 526, 952, 995, 997, 998, 1001, 1002, 1004, 1007, 1008], "df_train": [196, 214], "df_test": [196, 214], "regressor__sample_weight": 196, "_discret": [196, 214], "216": [196, 256, 965], "onward": [196, 836, 998], "silenc": [196, 470], "mean_absolute_error": [196, 198, 214, 952, 995, 997], "mean_poisson_devi": [196, 952, 1004], "score_estim": [196, 214], "n_mask": 196, "564": 196, "189": [196, 370, 867, 965], "625": [196, 278, 289, 682], "comonli": 196, "ridge_glm": 196, "strictli": [196, 214, 297, 338, 369, 377, 392, 394, 397, 483, 484, 510, 516, 519, 536, 537, 563, 566, 617, 645, 646, 670, 675, 712, 770, 773, 774, 779, 783, 794, 820, 847, 858, 862, 863, 865, 866, 870, 871, 875, 876, 941, 943, 948, 952, 962, 966, 995, 1005], "domain": [196, 377, 379, 393, 610, 695, 696, 697, 771, 772, 776, 777, 778, 948, 973], "186": [196, 294, 335, 370, 761, 952], "595": 196, "223745": 196, "597": [196, 338], "glm": [196, 214, 306, 623, 644, 655, 948, 994, 1005], "vanilla": [196, 389, 604], "poissonregressor": [196, 214, 306, 309, 623, 655, 948, 1005, 1008, 1009], "poisson_glm": 196, "deep": [196, 366, 377, 403, 410, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 742, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 956, 957, 972, 973, 976, 999, 1005, 1006, 1008], "concis": [196, 369, 1005, 1007], "poisson_gbrt": 196, "566": 196, "prone": [196, 242, 301, 375, 387], "set_yscal": 196, "5e5": 196, "realiz": [196, 976], "priori": [196, 213, 273, 297, 377, 389, 563, 569, 951], "wrongli": [196, 324], "gen_even_slic": [196, 373, 910], "_mean_frequency_by_risk_group": 196, "bin_cent": 196, "y_true_bin": 196, "y_pred_bin": 196, "idx_sort": 196, "sl": 196, "y_true_seg": 196, "y_pred_seg": 196, "11935": 196, "11933": 196, "11937": 196, "12196": 196, "11931": 196, "portfolio": [196, 214, 946], "riskiest": [196, 214], "safest": [196, 214, 348, 359], "irrespect": [196, 229, 581], "lorenz": [196, 214, 999], "summar": [196, 246, 262, 339, 365, 366, 379, 396, 496, 633, 669, 680, 681, 948, 949, 952, 958], "gini": [196, 214, 236, 267, 307, 528, 529, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 941, 960, 968, 1002, 1003], "lorenz_curv": [196, 214], "ranked_frequ": 196, "ranked_exposur": [196, 214], "cumulated_claim": 196, "cumulated_exposur": 196, "cum_exposur": 196, "cum_claim": [196, 214], "0x7f2b39f37700": 196, "worst": [196, 362, 389, 422, 682, 702, 703, 756, 757, 760, 763, 764, 796, 952, 976, 994, 1007], "occurr": [196, 338, 339, 360, 365, 389, 397, 544, 545, 556, 564, 565, 592, 602, 603, 604, 605, 756, 806, 834, 954, 995, 1000], "circumstanti": 196, "extractor": [196, 294, 354, 360, 377, 397, 478, 941, 994], "discrim": 196, "profil": [196, 352, 365, 367, 496, 499, 948, 976], "ideal": [196, 198, 214, 255, 262, 264, 265, 348, 364, 365, 368, 369, 372, 375, 377, 699, 729, 941, 951, 966, 967, 973], "meaningfulli": [196, 952], "576": [196, 215], "plot_poisson_regression_non_normal_loss": [196, 215], "monomi": 197, "vandermond": [197, 962], "x_0": [197, 632], "pseudo": [197, 294, 366, 393, 401, 416, 427, 429, 437, 444, 445, 446, 448, 449, 450, 451, 508, 536, 537, 538, 602, 609, 614, 616, 617, 621, 622, 627, 628, 635, 636, 637, 638, 652, 666, 670, 773, 774, 781, 783, 820, 827, 862, 863, 867, 870, 871, 872, 875, 906, 907, 948, 964, 999, 1008], "consecut": [197, 387, 393, 397, 419, 422, 424, 425, 427, 431, 434, 437, 512, 513, 514, 521, 577, 620, 641, 642, 643, 651, 652, 653, 768, 769, 775, 806, 807, 808, 809, 810, 828, 829, 941, 962, 987, 1002], "basis_1": 197, "basis_2": 197, "infinit": [197, 240, 258, 352, 399, 597, 598, 751, 768, 888, 890, 891, 944, 951, 962, 967, 1002, 1004, 1007, 1008, 1009], "malt": [197, 1007, 1008], "londschien": [197, 1007], "prepar": [197, 252, 337, 352, 366, 367, 370, 372, 968, 976, 1002], "set_prop_cycl": 197, "teal": [197, 206, 262], "yellowgreen": [197, 199, 206, 344], "tomato": 197, "unwant": [197, 337], "oscillatori": [197, 962], "danger": [197, 393], "pft": 197, "splt": 197, "bsplines_": [197, 850], "refrain": [197, 365], "dec": [197, 652, 850, 874, 967], "31st": [197, 850], "advis": [197, 348, 365, 389, 397, 413, 621, 627, 629, 635, 637, 647, 662, 944, 948, 954, 956, 967], "x_plot_ext": 197, "y_plot_ext": 197, "532": [197, 215, 316, 318], "plot_polynomial_interpol": [197, 215, 846, 850], "pareto": 198, "dale": [198, 1007], "mail": [198, 302, 360, 365, 368, 372, 375, 378, 970, 1002, 1003], "ru": 198, "glemaitre58": 198, "y_true_mean": 198, "y_normal": 198, "y_pareto": 198, "huge": [198, 201, 352, 370, 602, 997], "heavi": [198, 386, 973], "sp_version": [198, 645], "parse_vers": [198, 645], "incompat": [198, 368, 470, 942, 1002, 1003], "older": [198, 364, 368, 997, 1004, 1006], "recent": [198, 355, 363, 368, 369, 372, 377, 380, 389, 443, 513, 540, 952, 966, 976, 997, 1006], "interior": [198, 645, 948, 1009], "out_bounds_predict": 198, "bool_": 198, "logical_or": [198, 204, 370], "hit": [198, 370], "wider": [198, 397, 883, 948], "asymmetri": [198, 337], "linger": 198, "linear_regress": [198, 269], "quantile_regress": 198, "y_pred_lr": 198, "y_pred_qr": 198, "805": 198, "486": 198, "670": 198, "cv_results_lr": 198, "cv_results_qr": 198, "test_neg_mean_squared_error": [198, 794], "732": 198, "690": 198, "679": [198, 870], "129": [198, 983, 994], "653": [198, 215, 370, 586, 589, 600], "plot_quantile_regress": [198, 215], "robustli": [199, 388], "faulti": [199, 994], "1903908407869": 199, "17236387": 199, "08533159": 199, "ransacregressor": [199, 202, 213, 624, 653, 654, 948, 997, 999, 1000, 1001, 1002, 1005, 1007, 1008], "inlier_mask": 199, "inlier_mask_": [199, 646], "outlier_mask": 199, "line_x": [199, 213], "line_i": 199, "line_y_ransac": 199, "estimator_": [199, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 568, 569, 572, 646, 936, 1009], "117": [199, 206, 215, 995], "plot_ransac": [199, 215], "regularis": [200, 402, 448, 450], "eventu": [200, 243, 388, 389, 398, 568, 976], "simpler": [200, 214, 324, 352, 364, 389, 394, 948, 953, 985, 999], "stronger": [200, 256, 618, 627, 633, 634, 647, 648, 649, 650, 651, 653, 662], "kornel": [200, 1000], "kielczewski": [200, 1000], "plusnet": 200, "plot_ridge_coeff": [200, 215], "certain": [201, 213, 255, 275, 301, 348, 360, 361, 368, 379, 389, 394, 398, 613, 624, 628, 633, 638, 659, 836, 870, 941, 944, 948, 949, 952, 953, 956, 962, 967, 978, 982, 999, 1003, 1006], "oscil": [201, 389, 416], "practis": 201, "maintain": [201, 214, 217, 255, 353, 355, 362, 364, 367, 370, 371, 372, 375, 377, 378, 380, 389, 396, 416, 418, 474, 840, 841, 847, 848, 851, 855, 858, 859, 861, 948, 949, 962, 973, 978, 989], "10x10": 201, "hilbert": [201, 837, 944, 962], "n_alpha": [201, 447, 621, 622, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 648, 650, 656, 657, 658, 659, 997], "plot_ridge_path": [201, 215], "theilsen": 202, "lessen": [202, 633, 634, 870, 871], "theilsenregressor": [202, 213, 624, 646, 653, 948, 998, 1006, 1008], "x_error": 202, "y_errors_larg": 202, "x_errors_larg": 202, "deviant": [202, 958], "legend_titl": 202, "nabsolut": 202, "nto": 202, "298": [202, 207, 215, 960], "plot_robust_fit": [202, 215], "asgd": [203, 966], "rob": [203, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1006], "zinkov": [203, 994, 995, 996, 998, 999], "heldout": 203, "squared_hing": [203, 332, 641, 651, 870, 877, 948], "0e4": 203, "yy_": 203, "246": [203, 215, 960, 994], "plot_sgd_comparison": [203, 215], "monitor": [204, 367, 377, 528, 529, 534, 535, 536, 537, 956, 997, 1002, 1004, 1006], "plot_sgd_early_stop": [204, 215], "_test": [204, 275, 299, 366, 1007], "ignore_warn": [204, 299, 1000], "load_mnist": [204, 275], "class_0": [204, 362, 485], "class_1": [204, 362, 485], "554": [204, 212, 293], "mnist_784": [204, 212, 275, 293], "fit_and_scor": 204, "train_scor": [204, 257, 270, 342, 794, 795, 798, 947], "estimator_dict": 204, "flush": 204, "results_df": [204, 255], "plot_list": 204, "ceil": [204, 234, 532, 533, 534, 535, 538, 539, 540, 541, 569, 646, 773, 774, 878, 879, 880, 881, 966], "get_shared_y_ax": 204, "group_df": 204, "801": [204, 215], "ova": [205, 641, 643, 651, 966], "plot_sgd_iri": [205, 215], "ugli": [205, 278, 283, 286, 320], "modified_huber_loss": 206, "darkorchid": 206, "plot_sgd_loss_funct": [206, 215], "l1_color": 207, "l2_color": 207, "elastic_net_color": 207, "1001": 207, "rho": [207, 394, 652, 948, 966, 995], "elastic_net": 207, "dpi": [207, 884, 1007], "elastic_net_contour": 207, "l2_contour": 207, "l1_contour": 207, "inlin": [207, 365, 968], "plot_sgd_penalti": [207, 215], "ndenumer": 208, "plot_sgd_separating_hyperplan": [208, 215], "no_weight": 209, "samples_weight": 209, "no_weights_handl": 209, "legend_el": [209, 258], "weights_handl": 209, "090": [209, 215, 275], "plot_sgd_weighted_sampl": [209, 215], "sgdoneclasssvm": [210, 225, 308, 874, 958, 966, 1007, 1009], "rc": [210, 368], "n_error_train": [210, 323], "n_error_test": [210, 281, 323], "n_error_outli": [210, 281, 323], "clf_sgd": 210, "pipe_sgd": 210, "y_pred_train_sgd": 210, "y_pred_test_sgd": 210, "y_pred_outliers_sgd": 210, "n_error_train_sgd": 210, "n_error_test_sgd": 210, "n_error_outliers_sgd": 210, "z_sgd": 210, "pubu": [210, 229, 281, 323], "darkr": [210, 281, 323], "palevioletr": [210, 281, 323], "blueviolet": [210, 281, 323], "372": [210, 215], "plot_sgdocsvm_vs_ocsvm": [210, 215], "newgroups20": 211, "trim": [211, 811, 812], "20newsgroup": [211, 358, 994], "4500": 211, "130107": [211, 229, 463], "epoch": [211, 377, 511, 641, 642, 643, 651, 652, 653, 828, 829, 966, 1001, 1002, 1007], "5960": 211, "26593496": 211, "43348936": 211, "26362917": 211, "31973683": 211, "37815029": 211, "2928359": 211, "27054655": 211, "62717609": 211, "19522393": 211, "30897646": 211, "34586917": 211, "28207552": 211, "34125758": 211, "29898468": 211, "34279478": 211, "59489497": 211, "38353048": 211, "35278655": 211, "19829832": 211, "14603365": 211, "6440": 211, "36047253": 211, "1268187": 211, "10606655": 211, "17985197": 211, "5395559": 211, "07993421": 211, "06686804": 211, "21443888": 211, "11528972": 211, "2075215": 211, "10914094": 211, "11144673": 211, "13988486": 211, "09684337": 211, "26286057": 211, "11682692": 211, "55800226": 211, "17370318": 211, "11452112": 211, "644": 211, "arthur": [211, 212, 389, 422, 435, 999, 1000, 1001, 1002, 1003, 1006, 1008], "mensch": [211, 212, 999, 1000, 1001, 1002], "timeit": [211, 243, 370], "default_tim": [211, 243], "model_param": 211, "this_max_it": 211, "train_tim": [211, 231, 337, 338], "ndataset": [211, 299], "run_tim": [211, 212], "707": [211, 215, 847, 858], "plot_sparse_logistic_regression_20newsgroup": [211, 215], "8253": 212, "853": 212, "l1_plot": 212, "935": [212, 215, 301, 303, 1001], "plot_sparse_logistic_regression_mnist": [212, 215], "subpopul": [213, 654, 948], "residual_threshold": [213, 646, 948, 1007], "remedi": 213, "max_subpopul": [213, 654, 1008], "lose": [213, 339, 360, 377, 392, 397, 399, 521, 906, 907, 942, 948, 987], "florian": [213, 976, 994, 998, 1000, 1004], "wilhelm": [213, 998, 1000, 1004], "indigo": 213, "plot_theilsen": [213, 215], "motor": 214, "parti": [214, 353, 364, 375, 772, 778, 920, 970, 994, 1005], "liabil": 214, "functool": 214, "mean_tweedie_devi": [214, 952, 1004], "load_mtpl2": 214, "fremtpl2freq": 214, "df_freq": 214, "fremtpl2sev": 214, "41215": 214, "df_sev": 214, "claimamount": 214, "fillna": 214, "unquot": 214, "field": [214, 362, 386, 389, 390, 397, 472, 476, 592, 948, 950, 959, 967, 972, 975, 987, 995], "column_nam": 214, "plot_obs_pr": 214, "y_label": 214, "fill_legend": 214, "df_": 214, "tweedie_pow": 214, "d\u00b2": 214, "scorer": [214, 257, 259, 366, 377, 393, 396, 536, 537, 569, 577, 609, 634, 648, 650, 685, 705, 706, 715, 770, 773, 774, 783, 793, 794, 795, 798, 941, 948, 952, 960, 973, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "subset_label": 214, "score_label": [214, 261], "est_freq": 214, "est_sev": 214, "unstack": [214, 258], "fremtpl2": 214, "60000": 214, "unreason": [214, 393], "exception": 214, "200000": 214, "column_tran": [214, 390], "purepremium": 214, "indirectli": 214, "avgclaimamount": 214, "fmax": 214, "option_context": 214, "max_column": 214, "139": [214, 370, 396, 427, 437, 666, 670, 953], "414": [214, 390, 699, 729, 847, 858, 952], "424": 214, "463": 214, "27000": 214, "303": [214, 610], "404": [214, 339], "333333": 214, "r25": 214, "1981": [214, 948], "14156": 214, "142857": 214, "4792": 214, "1456": 214, "10403": 214, "928571": 214, "10834": 214, "17474": 214, "193548": 214, "225806": 214, "r73": 214, "3986": 214, "12860": [214, 1003], "5417": 214, "quasi": [214, 366, 828, 829, 948], "newton": [214, 294, 585, 633, 634, 828, 829, 948, 998, 999, 1001, 1005, 1006, 1007, 1008], "bfg": [214, 292, 585, 586, 624, 633, 647, 649, 662, 955, 956, 1009], "glm_freq": 214, "0242": 214, "0214": 214, "1706": 214, "1661": 214, "3041": 214, "3043": 214, "bonu": [214, 365, 982, 987], "malu": 214, "younger": 214, "infti": [214, 245, 399, 594, 948, 962, 1001], "gammaregressor": [214, 306, 309, 655, 948, 1005, 1008, 1009], "mask_train": 214, "mask_test": 214, "glm_sev": 214, "000000e": 214, "600000e": 214, "699197e": 214, "027923e": 214, "548147e": 214, "094863e": 214, "avgclaim": 214, "nbclaim": 214, "1899": 214, "1884": 214, "introduct": [214, 253, 355, 365, 393, 394, 397, 565, 761, 762, 806, 810, 948, 950, 952, 954, 971, 979, 985, 988, 989], "apriori": 214, "regardless": [214, 256, 258, 353, 365, 389, 510, 633, 678, 689, 952, 964, 1002, 1009], "glm_pure_premium": 214, "999": [214, 255, 368, 396, 691, 828, 829], "scores_product_model": 214, "scores_glm_pure_premium": 214, "expand_frame_repr": 214, "650000e": 214, "580000e": 214, "216730e": 214, "640830e": 214, "960810e": 214, "618800e": 214, "7000": 214, "833290e": 214, "920670e": 214, "737390e": 214, "917490e": 214, "8000": [214, 258, 259], "106640e": 214, "148900e": 214, "047900e": 214, "148150e": 214, "9000": 214, "396080e": 214, "420700e": 214, "360070e": 214, "420840e": 214, "9900": 214, "989232e": 214, "996426e": 214, "986911e": 214, "996462e": 214, "9990": 214, "886428e": 214, "892749e": 214, "886206e": 214, "892753e": 214, "876452e": 214, "882692e": 214, "876430e": 214, "246568e": 214, "469359e": 214, "202462e": 214, "397027e": 214, "469184e": 214, "325903e": 214, "469327e": 214, "325470e": 214, "577616e": 214, "725665e": 214, "564861e": 214, "495183e": 214, "451556e": 214, "431967e": 214, "riski": 214, "operation": [214, 976], "develop": [214, 253, 255, 305, 337, 352, 355, 360, 364, 365, 375, 377, 379, 383, 386, 388, 391, 392, 396, 397, 467, 770, 948, 955, 968, 970, 972, 973, 975, 976, 985, 994, 1002, 1003, 1004, 1007, 1009], "ranked_pure_premium": 214, "cumulated_claim_amount": 214, "cumulated_sampl": 214, "y_pred_product": 214, "y_pred_tot": 214, "ordered_sampl": 214, "plot_tweedie_regression_insurance_claim": [214, 215], "auto_examples_linear_model": 215, "md": [217, 218, 219, 220, 368, 663, 667, 669, 988, 989, 994, 1006, 1009], "seek": [217, 219, 221, 364, 365, 375, 378, 483, 484, 949, 979, 981], "ticker": [217, 219, 222, 275], "s_point": 217, "s_color": 217, "make_s_curv": [217, 222], "plot_3d": 217, "points_color": 217, "subplot_kw": [217, 279], "set_major_loc": [217, 280], "multipleloc": [217, 280], "add_2d_scatt": 217, "set_major_formatt": [217, 219, 222, 275, 280], "nullformatt": [217, 219, 222, 275], "lle": [217, 218, 219, 221, 505, 664, 668, 949, 1006], "thought": [217, 280, 377, 389, 949, 953], "analys": [217, 346, 394, 773, 774, 949, 972, 976], "lle_standard": 217, "s_standard": 217, "lle_ltsa": 217, "ltsa": [217, 218, 219, 664, 668, 949], "s_ltsa": 217, "lle_hessian": 217, "hessian": [217, 218, 219, 396, 664, 668, 956, 988, 989], "s_hessian": 217, "lle_mod": 217, "s_mod": 217, "lle_method": 217, "tangent": [217, 664, 668, 950, 988, 989], "eigenmap": [217, 664, 666, 668, 670, 988, 989, 995], "isometr": [217, 663, 665, 666, 667, 949], "geodes": [217, 663, 949], "s_isomap": 217, "md_scale": 217, "s_scale": 217, "laplacian": [217, 357, 386, 416, 427, 437, 595, 614, 618, 666, 670, 738, 739, 747, 866, 948, 949, 965, 989, 995, 1000], "s_spectral": 217, "t_sne": [217, 1002], "s_t_sne": 217, "721": [217, 223, 513, 515, 522], "plot_compare_method": [217, 223], "offsetbox": 218, "plot_embed": 218, "425": [218, 590], "shown_imag": 218, "someth": [218, 337, 365, 366, 367, 372, 397, 952, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "4e": 218, "imagebox": 218, "annotationbbox": 218, "offsetimag": 218, "neighborhoodcomponentsanalysi": [218, 283, 284, 285, 955, 1003, 1008], "random_project": [218, 229, 355, 964, 969, 995, 1000], "sparserandomproject": [218, 229, 862, 964, 995, 1000, 1008], "embeed": 218, "n_iter_without_progress": [218, 667, 999, 1000], "nca": [218, 283, 284, 285, 820, 955], "431": [218, 223, 362], "plot_lle_digit": [218, 223], "gain": [219, 262, 275, 277, 313, 337, 338, 346, 364, 370, 372, 375, 396, 507, 532, 536, 537, 539, 699, 729, 768, 769, 800, 878, 880, 953, 957, 965, 968, 997, 1001, 1004], "pole": 219, "thin": [219, 595], "earth": [219, 338, 737, 972], "065": [219, 253, 370], "093": [219, 446, 999], "047": [219, 370], "251": [219, 362], "sphere_data": 219, "trans_data": 219, "2g": [219, 222, 672, 1005], "257": [219, 253], "258": 219, "se": [219, 362, 380], "plot_manifold_spher": [219, 223], "euclidean_dist": [220, 229, 366, 425, 432, 663, 735, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 994, 999, 1002, 1003], "finfo": [220, 453, 581, 625, 626, 629, 630, 631, 657, 658], "x_true": 220, "dissimilar": [220, 377, 386, 427, 665, 669, 949, 1000], "embedding_": [220, 377, 663, 664, 665, 666, 667], "nmd": 220, "npo": 220, "198": [220, 223, 994], "plot_md": [220, 223], "sr_point": 221, "sr_color": 221, "ambient": 221, "text2d": 221, "unrol": 221, "unnecessarili": [221, 1001, 1004], "clump": 221, "sr_lle": 221, "sr_err": 221, "locally_linear_embed": [221, 949], "sr_tsne": 221, "stretch": [221, 244], "byproduct": 221, "ultim": 221, "sh_point": 221, "sh_color": 221, "topologi": [221, 222], "sh_lle": 221, "sh_err": 221, "sh_tsne": 221, "375": [221, 223, 723, 952], "plot_swissrol": [221, 223], "tendenc": [222, 948, 949, 951, 954, 957], "clearer": [222, 967], "upon": [222, 288, 360, 365, 375, 377, 383, 536, 537, 602, 605, 646, 762, 768, 769, 811, 812, 941, 948, 968, 978, 987, 1008], "distil": 222, "pub": [222, 363, 809, 865], "misread": 222, "narin": [222, 1001, 1002], "kokhlikyan": [222, 1001, 1002], "152": [222, 223, 263, 271, 370], "plot_t_sne_perplex": [222, 223], "auto_examples_manifold": 223, "cope": [225, 354, 360, 948], "multimod": 225, "inli": [225, 948, 958], "degrad": [225, 297, 338, 395], "unimod": [225, 449], "localoutlierfactor": [225, 234, 281, 282, 309, 377, 538, 874, 958, 1001, 1002, 1004, 1008, 1009], "modal": [225, 449, 909], "hypercub": [225, 490], "decent": [225, 254, 360, 954], "handpick": 225, "absenc": [225, 258, 377, 686, 834, 951, 952], "negative_linestyl": 225, "outliers_fract": 225, "n_inlier": 225, "anomaly_algorithm": 225, "blobs_param": 225, "506": [225, 238, 362, 474], "plot_anomaly_comparison": [225, 238], "transfus": 226, "1464": 226, "donat": 226, "confust": 226, "cm_displai": 226, "y_score": [226, 262, 264, 377, 456, 457, 458, 681, 694, 699, 700, 712, 713, 729, 755, 761, 762, 765, 770, 773, 774, 783, 831, 952, 1000, 1008], "pos_label": [226, 234, 377, 414, 415, 673, 675, 676, 680, 681, 683, 700, 702, 703, 711, 755, 756, 757, 760, 762, 838, 854, 952, 1002, 1006, 1008], "roc_displai": 226, "previs": 226, "precision_recall_curv": [226, 262, 675, 680, 681, 700, 952, 995, 996, 1000, 1007, 1008], "pr_displai": 226, "easlii": 226, "368": [226, 238], "plot_display_object_visu": [226, 238], "spot": [227, 389], "summaris": [227, 306], "composit": [227, 306, 355, 357, 393, 633, 761, 942, 948, 961, 989, 995], "num_proc": [227, 306], "cat_proc": [227, 306], "feat1": [227, 306, 397], "feat3": [227, 306, 397], "feat0": [227, 306], "feat2": [227, 306, 397], "032": [227, 238], "plot_estimator_represent": [227, 238], "isotonicregress": [228, 943, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1006, 1008], "ir": [228, 394, 565, 699, 729, 806, 810, 950, 952], "out_of_bound": [228, 610], "y_": [228, 241, 245, 246, 287, 366, 392, 394, 612, 623, 644, 655, 702, 703, 711, 756, 757, 760, 948, 952, 1000], "linearregressionlinearregress": 228, "x_thresholds_": [228, 610, 1006], "y_thresholds_": [228, 610, 1006], "plot_isotonic_regress": [228, 238], "lemma": [229, 357, 388, 509, 516, 524, 862, 863, 864, 946, 989, 997], "johnson_lindenstrauss_min_dim": [229, 964, 995], "achliopta": [229, 863, 864, 964], "_compon": [229, 511], "geq": [229, 394, 396, 948, 952, 962, 966, 967], "_sampl": [229, 394, 513, 515, 522], "admiss": [229, 353], "eps_rang": 229, "min_n_compon": 229, "nn_sampl": [229, 267], "semilogi": 229, "nn_compon": [229, 230], "100k": 229, "n_components_rang": [229, 245], "rp": 229, "projected_data": 229, "n_byte": 229, "nbyte": 229, "projected_dist": 229, "min_dist": 229, "max_dist": 229, "hexbin": 229, "gridsiz": 229, "296": [229, 964], "930": [229, 982], "292": [229, 380, 396, 708], "268": 229, "jl": [229, 863], "040": [229, 238], "plot_johnson_lindenstrauss_bound": [229, 238], "rbfsampler": [230, 614, 615, 617, 944, 978, 998, 1008, 1009], "mont": [230, 399, 586, 616, 617, 944, 957], "fourier": [230, 388, 613, 614, 615, 616, 617, 731, 732, 944], "acceler": [230, 352, 375, 443, 667, 868, 949, 976, 1003, 1007, 1009], "data_train": [230, 256, 337], "targets_train": 230, "data_test": [230, 256, 337], "targets_test": 230, "kernel_svm": 230, "linear_svm": 230, "feature_map_fouri": 230, "feature_map_nystroem": [230, 614], "fourier_approx_svm": 230, "feature_map": [230, 297], "nystroem_approx_svm": 230, "kernel_svm_tim": 230, "kernel_svm_scor": 230, "linear_svm_tim": 230, "linear_svm_scor": 230, "fourier_scor": 230, "nystroem_scor": 230, "fourier_tim": 230, "nystroem_tim": 230, "feature_map__n_compon": 230, "timescal": 230, "ly": [230, 819, 821, 822, 823, 998], "flat_grid": 230, "568": [230, 238], "plot_kernel_approxim": [230, 238], "krr": [231, 399, 618, 945], "insensit": [231, 618, 651, 653, 761, 871, 945, 966, 967, 994], "fifth": [231, 945, 978], "kr": [231, 255, 1008], "svr_fit": 231, "kr_fit": 231, "sv_ratio": 231, "support_": [231, 331, 444, 449, 568, 569, 577, 872, 873, 874, 875, 876, 967], "y_svr": 231, "svr_predict": 231, "y_kr": 231, "kr_predict": 231, "737": 231, "631": 231, "723": 231, "340": [231, 312], "sv_ind": 231, "arithmet": [231, 370, 372, 389, 526, 678, 691, 709, 710, 730, 766, 952, 1002], "test_tim": [231, 337], "train_test_s": 231, "learning_curv": [231, 257, 947, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1008], "train_scores_svr": 231, "test_scores_svr": 231, "train_sizes_ab": [231, 795], "train_scores_kr": 231, "test_scores_kr": 231, "plot_kernel_ridge_regress": [231, 238], "theta_c": [232, 498], "reject": [232, 377, 378, 498, 646, 700, 890, 891, 948, 952, 1002], "never": [232, 348, 365, 373, 375, 383, 389, 392, 393, 425, 432, 498, 530, 531, 532, 539, 944, 1004, 1007], "likewis": [232, 389, 498], "surround": [232, 365, 817, 958], "cca": [232, 392, 457, 459, 998, 1002, 1003, 1004, 1006, 1008], "onevsrestclassifi": [232, 262, 264, 273, 387, 799, 801, 870, 978, 995, 996, 998, 1000, 1001, 1007, 1008], "metaclassifi": 232, "min_x": 232, "max_x": 232, "plot_subfigur": 232, "min_i": 232, "zero_class": 232, "one_class": 232, "160": [232, 941, 985], "nfor": 232, "229": [232, 238, 952], "plot_multilabel": [232, 238], "extratreesregressor": [233, 396, 532, 540, 541, 880, 881, 997, 1000, 1002, 1003, 1004, 1007, 1008, 1009], "n_face": 233, "face_id": 233, "n_pixel": [233, 253], "nn": [233, 397, 670, 985], "y_test_predict": 233, "true_fac": 233, "completed_fac": 233, "plot_multioutput_face_complet": [233, 238], "benchmark": [234, 275, 307, 338, 339, 352, 358, 360, 365, 375, 380, 382, 387, 443, 490, 868], "iforest": 234, "pharuj": 234, "rajborirug": 234, "ra": 234, "kmitl": 234, "ac": [234, 505, 639, 660, 661, 948, 965, 987], "th": [234, 308, 346, 376, 393, 396, 404, 417, 421, 426, 428, 434, 438, 447, 532, 533, 534, 535, 536, 537, 539, 540, 541, 568, 569, 607, 623, 624, 644, 646, 655, 671, 692, 753, 790, 895, 942, 948, 952, 956, 959, 966, 967], "preprocess_dataset": 234, "fetch_kddcup99": [234, 360, 1001, 1002, 1003, 1006, 1007], "labelbinar": [234, 377, 714, 800, 835, 844, 854, 953, 978, 997, 998, 999, 1003, 1008], "dataset_nam": [234, 275], "smtp": [234, 360, 466], "sa": [234, 360, 466], "percent10": [234, 466], "lb": [234, 838, 963], "forestcov": 234, "glass": [234, 360], "wdbc": [234, 362], "cardiotocographi": 234, "tablewar": 234, "x_mal": 234, "y_mal": 234, "x_ben": 234, "y_ben": 234, "x_mal2": 234, "y_mal2": 234, "compute_predict": 234, "model_nam": [234, 273], "negative_outlier_factor_": [234, 282, 817, 958], "datasets_nam": 234, "models_nam": 234, "489": [234, 238, 323, 335], "plot_outlier_detection_bench": [234, 238], "recalcul": [235, 237, 389, 991, 994], "mlpregressormlpregressor": 235, "tree_disp": 235, "mlp_disp": 235, "0x7f2b54e39f40": 235, "plot_partial_dependence_visualization_api": [235, 238], "set_config": [236, 306, 352, 353, 390, 443, 601, 1003, 1005, 1008], "deactiv": [236, 359, 363, 380, 390, 773, 774, 1008], "standard_scal": 236, "polynomialfeaturespolynomialfeatur": 236, "pcapca": 236, "svcsvc": [236, 237, 253, 255, 307], "numeric_preprocessor": 236, "imputation_mean": 236, "categorical_preprocessor": 236, "imputation_const": 236, "onehot": [236, 298, 299, 390, 836, 962], "gender": [236, 844, 962], "classifier__n_estim": 236, "classifier__max_featur": 236, "classifier__max_depth": 236, "classifier__criterion": 236, "113": [236, 238, 370, 997], "plot_pipeline_displai": [236, 238], "svc_disp": [237, 305, 991], "rfc_disp": [237, 305, 991], "plot_roc_curve_visualization_api": [237, 238], "auto_examples_miscellan": 238, "bayesiangaussianmixtur": [240, 241, 246, 769, 1000, 1002, 1003, 1007, 1008], "weight_concentration_prior_typ": [240, 246, 768, 951, 1000], "dirichlet_distribut": [240, 768, 951, 1000], "dirichlet_process": [240, 246, 768, 951, 1000], "weight_concentration_prior": [240, 246, 768, 951], "finit": [240, 246, 352, 360, 377, 443, 513, 526, 557, 581, 584, 585, 586, 633, 701, 751, 758, 768, 792, 868, 888, 890, 891, 948, 951, 952, 976, 978, 985, 1001, 1002, 1006, 1008, 1009], "unnecessari": [240, 369, 419, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 679, 955, 962, 973, 976, 997, 999, 1004, 1005, 1007], "plot_concentration_prior": [240, 247], "covar": [240, 241, 246], "eig_val": 240, "eig_vec": 240, "unit_eig_vec": 240, "arctan2": [240, 242, 245], "56b4e9": 240, "plot_titl": 240, "weights_": [240, 768, 769, 1008], "covariances_": [240, 241, 242, 245, 246, 768, 769, 1001], "set_tick_param": 240, "labelleft": 240, "0072b2": 240, "f0e442": 240, "d55e00": 240, "mean_precision_prior": [240, 246, 768], "nprior": 240, "gamma_0": [240, 246], "reg_covar": [240, 768, 769], "init_param": [240, 243, 246, 768, 769], "concentrations_prior": 240, "infer": [241, 245, 246, 255, 266, 343, 359, 366, 375, 388, 393, 394, 470, 483, 484, 490, 509, 511, 524, 525, 528, 534, 535, 607, 610, 683, 696, 714, 768, 769, 807, 865, 866, 878, 879, 880, 881, 917, 942, 948, 952, 957, 962, 965, 968, 972, 973, 981, 995, 999, 1000, 1005, 1008], "plot_gmm": [241, 247], "color_it": [241, 245, 246], "dp": [241, 246], "shouldn": [241, 246, 365], "em": [241, 242, 245, 246, 419, 422, 434, 511, 768, 769, 951, 1008], "dpgmm": [241, 246, 994, 998, 1000], "plot_gmm_covari": [242, 247], "ronweiss": 242, "make_ellips": 242, "datalim": 242, "skf": [242, 393, 788], "train_index": [242, 315, 393, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790], "test_index": [242, 315, 393, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790], "cov_typ": 242, "means_init": [242, 243, 769], "y_train_pr": 242, "train_accuraci": 242, "y_test_pr": 242, "test_accuraci": [242, 256], "233": [242, 247], "random_from_data": [243, 768, 769, 951], "diamond": 243, "colour": [243, 362, 397, 562, 953], "walsh": [243, 1006, 1008], "extmath": [243, 337, 373, 428, 1000, 1001, 1004, 1009], "row_norm": 243, "_samples_gener": 243, "timer": [243, 370], "x_squared_norm": [243, 435], "get_initial_mean": 243, "times_init": 243, "relative_tim": 243, "ini": 243, "init_tim": 243, "2fx": 243, "678": [243, 247], "plot_gmm_init": [243, 247], "shifted_gaussian": 244, "stretched_gaussian": 244, "score_sampl": [244, 280, 281, 282, 288, 377, 395, 444, 507, 516, 538, 652, 768, 769, 770, 773, 774, 783, 816, 817, 827, 831, 874, 958, 997, 1002, 1004, 1006], "plot_gmm_pdf": [244, 247], "plot_gmm_select": [245, 247], "lowest_b": 245, "cv_type": 245, "best_gmm": 245, "spl": 245, "xpo": 245, "mod": [245, 478], "winner": 245, "295": [245, 247], "loos": [246, 252, 967, 1002], "liberti": 246, "judgment": [246, 952], "panel": [246, 280, 297, 395, 972], "primarili": [246, 260, 365, 377, 385, 389, 976, 1003, 1004], "plot_gmm_sin": [246, 247], "covariance_prior": [246, 768], "525": [246, 247, 415, 603, 942], "auto_examples_mixtur": 247, "mislabel": [249, 396, 954], "imbal": [249, 258, 393, 681, 702, 703, 711, 756, 757, 760, 761, 952], "misclassifi": [249, 337, 967], "life": [249, 372, 949], "set_printopt": 249, "titles_opt": 249, "ax_": [249, 258, 262, 305, 371, 414, 606, 672, 673, 675, 676], "plot_confusion_matrix": [249, 271, 305, 1004, 1005, 1006, 1007], "shufflesplit": [250, 257, 332, 393, 772, 777, 779, 789, 797, 982, 994, 995, 997, 999, 1000], "groupshufflesplit": [250, 393, 982, 1000], "groupkfold": [250, 260, 393, 569, 770, 773, 774, 775, 776, 777, 778, 783, 787, 792, 793, 794, 795, 798, 982, 1000, 1007], "stratifiedshufflesplit": [250, 324, 393, 982, 994, 995, 1000, 1001, 1007], "stratifiedgroupkfold": [250, 1007], "1338": 250, "cmap_data": 250, "cmap_cv": 250, "coolwarm": [250, 321], "n_point": [250, 811, 812], "percentiles_class": 250, "perc": 250, "group_prior": 250, "visualize_group": 250, "yticklabel": [250, 337], "ngroup": 250, "nclass": 250, "plot_cv_indic": [250, 271], "tr": [250, 362, 368, 389, 391, 444, 445, 446, 447, 448, 449, 450, 451, 809], "axessubplot": 250, "this_cv": 250, "288": [250, 271, 510, 516], "plot_cv_predict": [251, 271], "commonli": [252, 358, 377, 389, 390, 399, 589, 731, 732, 768, 800, 843, 949, 950, 952, 953, 955], "det_curv": [252, 673, 755, 762, 952, 1006, 1007], "feedback": [252, 364, 365, 378, 972, 1002], "deduct": [252, 956], "willing": 252, "detcurvedisplai": [252, 308, 700, 1006, 1007], "ax_roc": 252, "ax_det": 252, "206": [252, 271], "plot_det": [252, 271], "n_imag": 253, "fastest": [253, 339, 422, 645, 647, 649, 662, 906, 907, 951], "print_datafram": 253, "filtered_cv_result": 253, "mean_precis": 253, "std_precis": 253, "mean_recal": 253, "std_recal": 253, "mean_test_precis": [253, 259], "std_test_precis": 253, "mean_test_recal": 253, "std_test_recal": 253, "03f": 253, "refit_strategi": 253, "best_index": [253, 259], "precision_threshold": 253, "high_precision_cv_result": 253, "mean_score_tim": [253, 256, 770, 783], "rank_test_recal": 253, "rank_test_precis": [253, 259], "best_recall_std": 253, "best_recal": 253, "best_recall_threshold": 253, "high_recall_cv_result": 253, "fastest_top_recall_high_precision_index": 253, "idxmin": 253, "nthe": [253, 346], "854": 253, "063": [253, 255, 413], "061": 253, "877": 253, "780": 253, "083": 253, "905": 253, "058": [253, 362], "889": [253, 339, 413], "074": [253, 338], "904": [253, 390], "073": [253, 446, 447], "743": [253, 985], "066": [253, 623], "611": [253, 255, 516], "028": 253, "744": 253, "003697": 253, "877206": 253, "069196": 253, "0x7f2b3a609ee0": 253, "807": [253, 255], "plateau": 253, "511": [253, 271], "plot_grid_search_digit": [253, 271], "minimis": [254, 389, 393, 633, 634, 968], "219": 254, "260": [254, 1007], "york": [254, 761, 768, 942, 952, 964], "usa": [254, 360, 867, 942, 949, 964, 965], "best_index_": [254, 259, 770, 773, 774, 783], "wenhao": [254, 1002, 1003], "zhang": [254, 389, 418, 639, 654, 660, 661, 664, 668, 731, 732, 948, 949, 950, 954, 966, 998, 999, 1001, 1002, 1003, 1004, 1006], "wenhaoz": 254, "ucla": [254, 948], "lower_bound": 254, "best_score_idx": 254, "best_low_complex": 254, "fewest": [254, 602], "candidate_idx": 254, "param_reduce_dim__n_compon": 254, "773": [254, 255, 271, 337, 623, 809], "plot_grid_search_refit_cal": [254, 271], "moon": [255, 292, 299, 337, 338, 497], "moder": [255, 365, 399, 429, 958], "hue": [255, 278, 362], "repeatedstratifiedkfold": [255, 393, 784, 788, 1001], "repetit": [255, 369, 393, 784, 785, 960, 1008], "rank_test_scor": [255, 263, 770, 783, 1000], "rename_axi": 255, "9400": 255, "079297": 255, "9300": 255, "077846": 255, "3_poli": 255, "9044": [255, 1001], "098776": 255, "2_poli": 255, "6852": 255, "169106": 255, "stori": [255, 360, 951], "certainti": [255, 366, 715, 952], "conduct": [255, 399, 972, 1008], "repreat": 255, "model_scor": [255, 273], "regex": [255, 339, 439, 441], "_test_scor": [255, 447, 569, 1007], "lineplot": 255, "labelpad": 255, "882561": 255, "783392": 255, "351390": 255, "746492": 255, "298688": 255, "355440": 255, "nadeau": [255, 1002], "bengio": [255, 828, 829, 941, 965], "framework": [255, 352, 366, 375, 377, 383, 389, 612, 663, 768, 948, 949, 956, 970, 973, 976, 994, 1000], "diebold": 255, "mariano": 255, "proven": [255, 422, 424, 946, 950, 976], "replic": [255, 364, 366], "cdot": [255, 386, 389, 394, 395, 399, 589, 590, 594, 597, 598, 837, 944, 946, 952, 956, 962], "sum_": [255, 332, 386, 387, 389, 394, 395, 396, 513, 515, 522, 671, 728, 946, 948, 949, 952, 954, 956, 957, 959, 960, 966, 967, 968], "ij": [255, 285, 386, 389, 394, 513, 515, 522, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 948, 949, 952, 954, 957, 967], "corrected_std": 255, "crossvalid": [255, 269], "corrected_var": 255, "ddof": [255, 851, 861], "compute_corrected_ttest": 255, "t_stat": 255, "p_val": 255, "model_1_scor": 255, "model_2_scor": 255, "ncorrect": 255, "227": [255, 264, 271, 389, 698], "uncorrect": [255, 570, 573], "t_stat_uncorrect": 255, "p_val_uncorrect": 255, "convent": [255, 365, 366, 368, 377, 406, 407, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 444, 445, 446, 447, 448, 449, 450, 451, 483, 484, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 522, 538, 541, 544, 545, 556, 557, 558, 563, 564, 566, 602, 603, 604, 605, 652, 663, 664, 665, 666, 674, 692, 768, 769, 799, 800, 815, 817, 819, 823, 835, 843, 846, 847, 849, 862, 863, 874, 901, 902, 952, 979, 994, 1001, 1002, 1005, 1007, 1008], "benavoli": 255, "colleagu": 255, "conjug": [255, 427, 437, 647, 649, 662, 670, 948], "overlin": [255, 386], "t_post": 255, "ppf": 255, "infin": [255, 516, 657, 658, 686, 792, 877, 889, 955], "minu": [255, 733, 952], "better_prob": 255, "cdf": 255, "essenti": [255, 363, 366, 389, 393, 394, 484, 944, 952, 955, 973, 976, 1002], "rope": 255, "rope_interv": 255, "rope_prob": 255, "432": [255, 391], "x_rope": 255, "uncertain": [255, 313, 364], "credibl": 255, "cred_interv": 255, "cred_int_df": 255, "000977": 255, "019023": 255, "005422": 255, "025422": 255, "016445": 255, "036445": 255, "bonferroni": 255, "n_comparison": 255, "pairwise_t_test": 255, "model_i": 255, "model_k": 255, "model_i_scor": 255, "model_k_scor": 255, "pairwise_comp_df": 255, "model_1": 255, "model_2": 255, "657": [255, 313, 318], "302": [255, 345, 347, 602], "565": 255, "276": 255, "851": 255, "pairwise_bayesian": 255, "worse_prob": 255, "pairwise_bayesian_df": 255, "018": [255, 447], "882": 255, "187": [255, 370, 559, 953, 985, 996], "dietterich": [255, 801, 953], "1998": [255, 360, 362, 394, 396, 530, 531, 801, 806, 837, 953, 954, 956, 962, 966], "bouckaert": 255, "frank": [255, 802, 953, 999, 1003, 1004], "pacif": 255, "asia": [255, 962], "confer": [255, 360, 362, 370, 389, 394, 400, 415, 420, 425, 486, 510, 538, 671, 682, 699, 729, 827, 828, 829, 952, 958, 964, 968], "discoveri": [255, 360, 370, 373, 389, 396, 398, 400, 420, 486, 530, 531, 538, 567, 570, 571, 573, 574, 575, 581, 694, 713, 756, 952, 964, 976, 1008, 1009], "corani": 255, "dem\u0161ar": 255, "zaffalon": 255, "accompani": [255, 1002], "1995": [255, 362, 387, 396, 528, 529, 801, 867, 953], "econom": [255, 362, 474], "plot_grid_search_stat": [255, 271], "loader": [256, 316, 337, 358, 359, 360, 472, 473, 483, 972, 973, 987, 994, 999, 1001, 1002, 1005], "fetch20newsgroup": 256, "857": [256, 316], "complementnb": [256, 337, 806, 807, 809, 810, 954, 1002, 1006, 1007, 1009], "tfidfvectorizertfidfvector": 256, "complementnbcomplementnb": 256, "vect__": 256, "clf__": 256, "parameter_grid": 256, "vect__max_df": 256, "vect__min_df": 256, "vect__ngram_rang": [256, 987], "unigram": [256, 360, 397, 563, 564, 566, 1001], "bigram": [256, 397, 563, 564, 566, 987], "vect__norm": 256, "clf__alpha": [256, 987], "exhaust": [256, 305, 306, 307, 308, 309, 352, 362, 369, 376, 384, 389, 770, 773, 774, 783, 860, 861, 863, 948, 987, 989], "parallelis": [256, 443, 868, 1001], "random_search": [256, 263], "best_paramet": 256, "get_param": [256, 367, 377, 399, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 941, 1004, 1005, 1006, 1008, 1009], "param_nam": [256, 270, 798, 947, 987], "816": [256, 446, 447], "709": 256, "ambigu": [256, 369, 397, 547, 686, 907, 955, 1003, 1005, 1007], "shorten_param": 256, "plotli": [256, 380, 382], "cursor": 256, "px": 256, "error_x": 256, "std_score_tim": [256, 770, 783], "error_i": 256, "hover_data": 256, "update_layout": 256, "xanchor": 256, "yanchor": 256, "autom": [256, 368, 380, 667, 941, 948, 949, 952, 972, 976], "parallel_coordin": 256, "understood": [256, 365, 389, 984], "column_result": 256, "transform_func": 256, "fromkei": [256, 885], "ngram_rang": [256, 316, 397, 563, 564, 566], "color_continuous_scal": 256, "viridis_r": 256, "_core": 256, "slide": [256, 619, 948, 971, 972], "intersect": [256, 321, 386, 389, 711], "undo": [256, 841, 998], "plot_grid_search_text_feature_extract": [256, 271], "plot_learning_curv": [257, 271, 795], "chart": [257, 260, 953, 980, 997], "obj": [257, 542, 543, 914], "parallel_backend": [257, 353, 400, 413, 420, 423, 425, 427, 432, 433, 436, 439, 442, 447, 506, 510, 511, 512, 514, 517, 518, 520, 521, 523, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 569, 577, 585, 607, 609, 614, 622, 626, 628, 630, 632, 633, 634, 636, 638, 640, 641, 643, 651, 654, 663, 664, 665, 666, 667, 668, 669, 747, 751, 754, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 813, 814, 817, 819, 821, 822, 824, 825, 830, 833, 865, 866, 1002], "glossari": [257, 348, 355, 365, 366, 370, 388, 400, 401, 413, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 439, 442, 444, 447, 449, 462, 465, 466, 469, 471, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 559, 569, 577, 582, 583, 585, 586, 602, 607, 609, 614, 615, 616, 617, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 662, 663, 664, 665, 666, 667, 668, 669, 670, 747, 751, 754, 764, 768, 769, 770, 772, 773, 774, 775, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 813, 814, 816, 817, 819, 820, 821, 822, 824, 825, 827, 828, 829, 830, 833, 836, 848, 859, 862, 863, 865, 866, 870, 871, 872, 875, 878, 879, 880, 881, 906, 907, 923, 926, 941, 942, 948, 978, 1002], "callabl": [257, 259, 377, 393, 397, 398, 400, 401, 417, 419, 420, 421, 422, 424, 425, 427, 432, 434, 439, 440, 441, 442, 508, 510, 512, 514, 520, 521, 534, 535, 536, 537, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 585, 586, 595, 603, 609, 614, 618, 634, 641, 646, 648, 650, 663, 666, 667, 671, 685, 693, 705, 715, 744, 747, 751, 752, 753, 754, 763, 764, 770, 773, 774, 783, 793, 794, 795, 796, 798, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 835, 865, 866, 872, 873, 874, 875, 876, 914, 922, 936, 941, 952, 962, 994, 998, 1001, 1002, 1003, 1004, 1006, 1008], "signatur": [257, 337, 338, 360, 462, 463, 569, 585, 586, 634, 648, 650, 685, 715, 793, 795, 798, 941, 1001, 1007], "n_tick": [257, 795, 798], "return_tim": [257, 795, 1004], "train_scores_mean": [257, 270], "train_scores_std": [257, 270], "test_scores_mean": [257, 270], "test_scores_std": [257, 270], "fit_times_mean": 257, "fit_times_std": 257, "fit_time_argsort": 257, "fit_time_sort": 257, "test_scores_mean_sort": 257, "test_scores_std_sort": 257, "578": [257, 271], "class_likelihood_ratio": [258, 952, 1009], "medicin": [258, 686, 952], "medic": [258, 393, 686, 976], "truli": [258, 262, 354, 686, 952], "odd": [258, 396, 489, 686, 952, 1001, 1002], "suppos": [258, 312, 352, 353, 366, 370, 391, 396, 397, 398, 532, 536, 539, 633, 634, 641, 643, 649, 650, 651, 715, 817, 870, 872, 875, 878, 880, 896, 956, 1003, 1005], "physiolog": [258, 362, 985], "hopefulli": [258, 372, 994], "indirect": [258, 377], "bio": 258, "diagnos": [258, 362, 372, 379, 390], "diagnosi": [258, 362, 818], "pos_lr": 258, "neg_lr": 258, "617": [258, 389, 742], "raise_warn": [258, 686, 938], "positive_likelihood_ratio": [258, 686], "negative_likelihood_ratio": [258, 686], "extract_scor": 258, "test_positive_likelihood_ratio": 258, "test_negative_likelihood_ratio": 258, "718894": 258, "724619": 258, "321091": 258, "054054": 258, "dummyclassifi": [258, 527, 952, 995, 997, 998, 999, 1001, 1002, 1003, 1004], "108843": 258, "986989": 258, "268147": 258, "034278": 258, "compat": [258, 275, 306, 359, 367, 373, 374, 375, 377, 380, 397, 438, 444, 483, 541, 551, 557, 560, 561, 564, 578, 589, 590, 593, 594, 595, 597, 598, 607, 608, 609, 623, 633, 634, 644, 648, 650, 655, 747, 751, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790, 815, 816, 836, 844, 845, 882, 883, 886, 917, 949, 952, 955, 957, 972, 973, 976, 989, 994, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "diagnost": [258, 358, 377, 475, 686, 793, 794, 952, 972, 973, 989], "most_frequ": [258, 526, 602, 605, 821, 942, 952, 1002, 1004, 1006], "undefin": [258, 377, 686, 702, 711, 714, 756, 921, 952, 1002, 1006], "373333": 258, "5557": 258, "235430": 258, "stand": [258, 339, 368, 375, 394, 506, 512, 520, 521, 571, 584, 653, 679, 691, 709, 710, 730, 759, 761, 766, 951, 952, 958], "lr_base": 258, "pos_lr_bas": 258, "pos_lr_base_std": 258, "neg_lr_bas": 258, "neg_lr_base_std": 258, "plot_indic": 258, "scoring_on_bootstrap": 258, "n_bootstrap": [258, 995], "results_for_preval": 258, "bootstrap_indic": 258, "default_rng": 258, "2039": 258, "507943": 258, "113516": 258, "207667": 258, "009778": 258, "3419": 258, "445329": 258, "125197": 258, "198280": 258, "008907": 258, "422287": 258, "123864": 258, "192630": 258, "006340": 258, "6196": [258, 999], "410507": 258, "163975": 258, "193761": 258, "005864": 258, "7578": [258, 1001], "335398": 258, "175224": 258, "189120": 258, "005820": 258, "8963": 258, "198284": 258, "238943": 258, "185496": 258, "005020": 258, "band": [258, 299, 962], "812": [258, 271], "plot_likelihood_ratio": [258, 271], "scorer_nam": [259, 770, 783], "predefin": [259, 782, 941, 955, 982], "403": 259, "return_train_scor": [259, 393, 770, 773, 774, 783, 794, 1000, 1001, 1003], "402": 259, "maskedarrai": [259, 1000], "param_min_samples_split": 259, "sample_score_mean": 259, "sample_score_std": 259, "std_": [259, 999], "rank_test_": 259, "best_scor": 259, "mean_test_": 259, "711": [259, 271], "plot_multi_metric_evalu": [259, 271], "cawlei": [260, 952], "talbot": 260, "mach": [260, 387, 393, 568, 569], "2079": 260, "2107": 260, "007581": 260, "007833": 260, "num_trial": 260, "x_iri": [260, 986], "y_iri": [260, 986], "p_grid": 260, "non_nested_scor": 260, "nested_scor": 260, "leaveoneout": [260, 393, 982], "leaveonegroupout": [260, 393, 771, 777, 778, 982, 1000], "inner_cv": 260, "outer_cv": 260, "non_nest": 260, "score_differ": 260, "211": [260, 315, 847, 858], "non_nested_scores_lin": 260, "nested_lin": 260, "difference_plot": 260, "plot_nested_cross_validation_iri": [260, 271], "permutation_test_scor": [261, 393, 994, 1001, 1006], "plant": [261, 358, 989], "uncorrel": [261, 361, 503, 509, 516, 985], "n_uncorrelated_featur": 261, "x_rand": 261, "undergo": 261, "score_iri": 261, "perm_scores_iri": 261, "pvalue_iri": 261, "n_permut": [261, 393, 796], "score_rand": 261, "perm_scores_rand": 261, "pvalue_rand": 261, "evid": [261, 337, 372, 389, 393, 394, 396, 619, 768, 951], "ndata": 261, "destroi": [261, 397, 766, 840, 962], "ojala": [261, 393, 796], "garriga": [261, 393, 796], "811": [261, 271], "plot_permutation_tests_for_classif": [261, 271], "t_p": 262, "plu": [262, 362, 369, 654, 802, 805, 953, 966], "f_p": 262, "f_n": 262, "denomin": [262, 397, 450, 565, 678, 730, 946], "stairstep": 262, "ap": [262, 681, 682, 952], "sum_n": [262, 681, 952], "r_n": [262, 681, 952], "p_n": [262, 681, 952], "nth": [262, 681, 952], "r_k": 262, "p_k": [262, 952], "trapezoid": [262, 680, 681, 952], "binar": [262, 264, 357, 359, 388, 390, 727, 806, 835, 836, 838, 842, 844, 854, 952, 954, 978, 989, 1008], "average_precision_scor": [262, 680, 682, 715, 755, 761, 952, 994, 997, 1001, 1002, 1008], "differenti": [262, 396, 399, 534, 535, 594, 597], "mt19937": [262, 267, 1005], "0x7f2b4ea0b640": 262, "precisionrecalldisplai": [262, 308, 755, 757, 760, 1004, 1007], "got": [262, 348, 369, 526, 624, 640, 1007], "label_binar": [262, 264, 838, 998], "average_precis": [262, 675, 681, 715, 952], "setup": [262, 352, 363, 366, 370, 372, 564, 955, 979], "f_score": 262, "get_legend_handles_label": 262, "extens": [262, 264, 280, 352, 359, 360, 363, 367, 368, 372, 373, 375, 383, 394, 470, 478, 509, 714, 901, 909, 949, 951, 952, 971, 972, 976, 994, 1000, 1007, 1008], "408": [262, 271], "plot_precision_recal": [262, 271], "pose": [263, 948, 986], "deem": [263, 509, 960, 1007], "993": 263, "022646578318204776": 263, "12316730350041682": 263, "3590066091145796": 263, "022051102678097068": 263, "983": [263, 528, 701], "011035767444412797": 263, "744009325678515": 263, "989": 263, "6666666666666666": 263, "2222222222222222": 263, "n_top": 263, "param_dist": [263, 267, 307], "n_iter_search": 263, "plot_randomized_search": [263, 271], "harder": [264, 301, 360, 364, 366, 372, 389, 490, 536, 537, 975], "all_fpr": 264, "mean_tpr": [264, 265], "interp": [264, 265, 324], "deeppink": 264, "aqua": 264, "scheme": [264, 280, 360, 377, 389, 393, 395, 397, 541, 565, 633, 634, 679, 782, 838, 839, 842, 844, 848, 854, 859, 870, 875, 941, 966, 994, 1002, 1005, 1006], "ovo": [264, 305, 761, 799, 872, 875, 952, 953, 967], "preval": [264, 305, 377, 686, 952], "macro_roc_auc_ovo": 264, "weighted_roc_auc_ovo": 264, "macro_roc_auc_ovr": 264, "weighted_roc_auc_ovr": 264, "698586": 264, "665839": 264, "plot_roc": [264, 271], "mean_fpr": 265, "viz": [265, 371], "interp_tpr": 265, "mean_auc": 265, "std_auc": 265, "std_tpr": 265, "tprs_upper": 265, "tprs_lower": 265, "204": [265, 271, 960, 965], "plot_roc_crossv": [265, 271], "halvinggridsearchcv": [266, 267, 307, 553, 774, 941, 1006, 1008], "1e4": [266, 634, 654, 864, 964], "gsh": 266, "gsh_time": 266, "gs_time": 266, "make_heatmap": 266, "is_sh": 266, "make_cbar": 266, "from_dict": 266, "params_str": [266, 267], "sh": [266, 363, 368, 372, 941], "scores_matrix": 266, "pivot_t": 266, "param_gamma": [266, 770, 783], "param_c": [266, 770], "aggfunc": 266, "0e": [266, 524, 525], "get_xticklabel": 266, "rotation_mod": 266, "cbar_ax": 266, "plot_successive_halving_heatmap": [266, 271], "rsh": [267, 307], "0x7f2b3b08b140": 267, "_distn_infrastructur": 267, "rv_discrete_frozen": 267, "0x7f2b38a43760": 267, "0x7f2b39cdf8b0": 267, "halvingrandomsearchcvhalvingrandomsearchcv": 267, "drop_dupl": 267, "n_resources_": [267, 773, 774, 941], "nn_candid": 267, "n_candidates_": [267, 773, 774, 941], "n_iterations_": [267, 773, 774], "plot_successive_halving_iter": [267, 271], "n_samples_train": [268, 872, 873, 874, 875, 876], "n_samples_test": [268, 872, 873, 874, 875, 876, 955, 962], "train_error": 268, "test_error": 268, "i_alpha_optim": 268, "alpha_optim": 268, "000335292414924956": 268, "054": [268, 271], "plot_train_error_vs_test_error": [268, 271], "nonlinear": [269, 308, 619, 663, 664, 668, 671, 837, 948, 949, 957, 962], "true_fun": 269, "polynomial_featur": 269, "plot_underfitting_overfit": [269, 271], "validation_curv": [270, 947, 1001, 1002, 1003, 1006], "subset_mask": 270, "isin": 270, "param_rang": [270, 798, 947], "plot_validation_curv": [270, 271], "auto_examples_model_select": 271, "yeast": 273, "2417": 273, "jaccard": [273, 386, 425, 432, 674, 677, 693, 702, 707, 711, 751, 752, 753, 767, 1002, 1003], "preced": [273, 353, 365, 461, 952, 994], "arrang": [273, 607, 802, 803, 804, 805], "presum": [273, 389, 397, 806], "adam": [273, 292, 828, 829, 956, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "kleczewski": [273, 1001, 1002], "classifierchain": [273, 377, 803, 805, 1001, 1006, 1009], "jaccard_scor": [273, 677, 702, 707, 767, 952, 1003, 1006], "40597": 273, "wrapper": [273, 275, 370, 373, 393, 399, 519, 595, 646, 870, 968, 972, 998, 1006], "base_lr": [273, 802], "y_pred_ovr": 273, "ovr_jaccard_scor": 273, "y_pred_chain": 273, "chain_jaccard_scor": 273, "y_pred_ensembl": 273, "ensemble_jaccard_scor": 273, "x_po": 273, "286": [273, 274, 396], "plot_classifier_chain_yeast": [273, 274], "auto_examples_multioutput": 274, "kneighborstransform": [275, 277, 305, 823, 955, 1004, 1008, 1009], "annoi": [275, 353], "nmslib": 275, "instal": [275, 305, 306, 307, 308, 309, 352, 353, 355, 365, 367, 368, 370, 372, 375, 376, 382, 389, 397, 427, 437, 470, 666, 670, 920, 968, 970, 987, 1001, 1002, 1003, 1007], "pip": [275, 305, 306, 307, 308, 309, 353, 363, 365, 368, 370, 380, 968], "mnist_2000": 275, "annoytransform": 275, "305": [275, 370], "nmslibtransform": 275, "818": 275, "592": [275, 586, 589, 600, 959], "338": 275, "nearestneighbor": [275, 309, 389, 400, 420, 663, 664, 668, 813, 814, 815, 817, 821, 822, 823, 955, 994, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "364": [275, 446, 447, 995], "mnist_10000": 275, "874": [275, 761, 762, 952], "118": [275, 565], "281": 275, "nullifi": 275, "csr_matrix": [275, 306, 416, 420, 427, 470, 509, 519, 532, 533, 534, 535, 538, 539, 540, 541, 563, 568, 569, 688, 797, 846, 872, 873, 875, 876, 878, 879, 880, 881, 953, 962, 966, 967, 968, 1009], "transformermixin": [275, 366, 377, 440, 1002], "assert_array_almost_equ": 275, "sw": [275, 363], "n_samples_fit_": [275, 813, 814, 815, 817, 819, 821, 822, 823], "cosinesimil": 275, "nmslib_": 275, "adddatapointbatch": 275, "createindex": 275, "n_samples_transform": [275, 815, 823], "knnquerybatch": 275, "num_thread": 275, "annoyindex": 275, "search_k": 275, "annoy_": 275, "add_item": 275, "_transform": 275, "get_n_item": 275, "get_nns_by_item": 275, "include_dist": 275, "get_nns_by_vector": 275, "test_transform": 275, "xt0": 275, "ann": [275, 994, 1006, 1008], "xt1": 275, "nm": [275, 352], "xt2": 275, "run_benchmark": 275, "tsne_param": 275, "barnes_hut": [275, 667, 1001, 1002], "i_ax": 275, "msg": [275, 936], "transformer_nam": 275, "longest": 275, "whitespac": [275, 397], "int32": [275, 365, 377, 419, 422, 424, 426, 428, 872, 873, 874, 875, 876, 919, 967, 1003, 1009], "approximate_nearest_neighbor": [275, 289], "slow": [277, 297, 337, 352, 359, 363, 365, 394, 397, 422, 674, 846, 850, 872, 875, 907, 949, 955, 973, 986, 1001], "temporarydirectori": [277, 305], "n_neighbors_list": 277, "graph_model": 277, "classifier_model": 277, "sklearn_graph_cache_": 277, "tmpdir": [277, 305], "full_model": 277, "classifier__n_neighbor": 277, "grid_model": 277, "mean_fit_tim": [277, 770, 783], "std_fit_tim": [277, 770, 783], "plot_caching_nearest_neighbor": [277, 289], "cmap_light": [278, 283, 286], "cmap_bold": [278, 283, 286], "darkblu": [278, 286], "neighbour": [278, 286, 437, 667, 957], "plot_classif": [278, 289], "79269019073225": 279, "kerneldens": [279, 280, 288, 395, 996, 1002, 1003, 1007, 1008, 1009], "new_data": [279, 366], "4x11": 279, "real_data": 279, "set_clim": 279, "plot_digits_kde_sampl": [279, 289], "block": [280, 297, 309, 360, 362, 365, 369, 372, 377, 386, 389, 392, 395, 427, 428, 437, 448, 454, 462, 463, 486, 488, 670, 920, 955, 957], "wildli": [280, 951], "kd": [280, 389, 395, 955, 1002, 1003, 1004], "jakevdp": [280, 288], "aaaaff": [280, 283], "tophat": [280, 395, 811, 812, 816], "log_den": 280, "x_src": 280, "format_func": 280, "ih": 280, "epanechnikov": [280, 395, 811, 812, 816], "funcformatt": 280, "nullloc": 280, "true_den": 280, "plot_kde_1d": [280, 289], "NOT": [281, 362, 367, 779, 811, 812], "862": [281, 289], "plot_lof_novelty_detect": [281, 289], "x_inlier": 282, "ground_truth": 282, "n_error": 282, "x_score": [282, 456, 457, 458, 459], "radiu": [282, 324, 362, 389, 418, 425, 663, 737, 754, 811, 812, 813, 814, 815, 819, 821, 822, 823, 825, 955, 996, 998, 1008], "legendhandl": 282, "_size": 282, "101": [282, 289, 362, 817, 995], "plot_lof_outlier_detect": [282, 289], "ffaaaa": 283, "aaffaa": 283, "00ff00": 283, "638": [283, 289, 370], "plot_nca_classif": [283, 289], "neighborhoodcomponentanalysi": 284, "dim_reduction_method": 284, "acc_knn": 284, "x_embed": [284, 285, 667, 671, 820, 955], "ntest": 284, "plot_nca_dim_reduct": [284, 289], "logsumexp": [285, 1001], "class_sep": [285, 490], "link_thickness_i": 285, "diff_embed": 285, "dist_embed": 285, "einsum": 285, "exp_dist_embed": 285, "relate_point": 285, "pt_i": 285, "pt_j": 285, "plot_nca_illustr": [285, 289], "8133333333333334": 286, "nearestcentroid": [286, 337, 953, 955, 994, 998, 1001, 1006, 1009], "shrink_threshold": [286, 818, 955, 994, 1006], "plot_nearest_centroid": [286, 289], "barycent": [287, 994], "203": [287, 289], "plot_regress": [287, 289], "geospati": [288, 395], "haversin": [288, 395, 674, 735, 737, 1003, 1006], "latitud": [288, 297, 360, 472, 674, 737], "longitud": [288, 297, 360, 472, 674, 737], "xtrain": 288, "ytrain": 288, "radian": [288, 674, 737], "land_mask": 288, "ball_tre": [288, 400, 420, 425, 432, 663, 664, 811, 813, 814, 815, 816, 817, 819, 821, 822, 823, 955, 994], "ocean": 288, "528": [288, 289], "plot_species_kd": [288, 289], "881": 289, "auto_examples_neighbor": 289, "combat": [291, 394], "encourag": [291, 324, 364, 365, 375, 967, 972], "lesser": [291, 377, 418, 516, 948], "curvatur": 291, "complic": [291, 370, 399, 669, 955], "plot_mlp_alpha": [291, 295], "980000": 292, "096950": 292, "momentum": [292, 828, 829, 956], "049530": 292, "nesterov": [292, 828, 829, 956], "049540": 292, "360000": 292, "978444": 292, "860000": 292, "503452": 292, "504185": 292, "045311": 292, "956038": 292, "243802": 292, "992766": 292, "041297": 292, "993879": 292, "042898": 292, "638843": 292, "855465": 292, "912632": 292, "290584": 292, "909293": 292, "318387": 292, "991653": 292, "045934": 292, "840000": 292, "601052": 292, "940000": 292, "157334": 292, "154453": 292, "500000": 292, "692470": 292, "689143": 292, "689751": 292, "150527": 292, "850000": 292, "341523": 292, "336188": 292, "335919": 292, "689015": 292, "830000": 292, "512595": 292, "513034": 292, "930000": 292, "170087": 292, "schedul": [292, 353, 368, 651, 652, 653, 828, 829, 920, 966, 976, 1001], "nesterovs_momentum": [292, 828, 829], "invscal": [292, 651, 652, 653, 828, 829, 966], "plot_arg": 292, "plot_on_dataset": 292, "nlearn": 292, "loss_curve_": [292, 828, 829], "data_set": 292, "get_lin": 292, "427": [292, 295, 362, 481, 482, 558, 559], "plot_mlp_training_curv": [292, 295], "28x28": 293, "throw": [293, 373, 889, 998, 1001, 1002, 1003, 1004, 1008], "infrastructur": [293, 970, 972, 973], "44139186": 293, "19174891": 293, "13983521": 293, "11378556": 293, "09443967": 293, "07846529": 293, "06506307": 293, "05534985": 293, "986429": 293, "953061": 293, "237": [293, 295, 340, 985], "plot_mnist_filt": [293, 295], "greyscal": 294, "bernoulli": [294, 397, 398, 806, 807, 808, 809, 810, 827, 828, 829, 834, 962, 974, 989, 994], "bernoullirbm": [294, 828, 829, 957, 962, 996, 997, 1006, 1008], "yann": [294, 994, 996], "dauphin": [294, 996], "gabriel": [294, 1002, 1003, 1004, 1007, 1008], "synnaev": 294, "convolv": 294, "minmax_scal": [294, 297, 841, 999, 1002], "nudge_dataset": 294, "1px": 294, "direction_vector": 294, "apply_along_axi": 294, "feature_rang": [294, 841, 856, 962, 996, 1006], "cg": [294, 633, 634, 647, 649, 662, 948, 998, 999, 1001, 1005, 1007, 1008], "rbm": [294, 827, 828, 829, 957], "rbm_features_classifi": 294, "6000": [294, 602], "raw_pixel_classifi": 294, "154": [294, 626, 953], "530": [294, 295], "plot_rbm_logistic_classif": [294, 295], "auto_examples_neural_network": 295, "unscal": [297, 302, 948, 952, 1002, 1008], "notabl": [297, 359, 377, 470, 701, 844, 949, 951, 955, 998, 1001], "unterthin": [297, 997, 998, 999], "housag": 297, "avebedrm": [297, 360], "bedroom": [297, 360], "features_idx": 297, "quantile_rang": [297, 849, 860, 1000], "yeo": [297, 301, 847, 858, 962, 1002, 1008], "cox": [297, 301, 847, 858, 962, 1002], "plasma": 297, "plasma_r": 297, "create_ax": 297, "bottom_h": 297, "left_h": 297, "rect_scatt": 297, "rect_histx": 297, "rect_histi": 297, "ax_scatt": 297, "ax_histx": 297, "ax_histi": 297, "ax_scatter_zoom": 297, "ax_histx_zoom": 297, "ax_histy_zoom": 297, "rect_colorbar": 297, "ax_colorbar": 297, "plot_distribut": 297, "hist_nbin": 297, "x0_label": 297, "x1_label": 297, "hist_x1": 297, "hist_x0": 297, "aesthet": [297, 968, 999], "layout": [297, 375, 870, 871, 872, 875, 891, 967, 997, 999], "ec": [297, 505], "make_plot": 297, "item_idx": 297, "ax_zoom_out": 297, "ax_zoom_in": 297, "zoom_in_percentile_rang": 297, "cutoffs_x0": 297, "cutoffs_x1": 297, "non_outliers_mask": 297, "colorbarbas": 297, "OR": [297, 389, 400, 420, 1005], "indistinguish": 297, "quadrant": 297, "036": [297, 303, 370, 447], "plot_all_sc": [297, 303, 840, 841, 843, 847, 848, 849, 851, 855, 856, 857, 858, 859, 860, 861], "straightforward": [298, 364, 394, 976], "anywher": 298, "qinhanmin2005": 298, "sina": [298, 1007], "rnd": [298, 332], "enc": [298, 300, 309, 844, 845, 962], "x_bin": 298, "line_bin": 298, "bin_edges_": [298, 836], "215": [298, 303, 559], "plot_discret": [298, 303], "get_nam": 299, "broader": [299, 948], "logisticregression__c": 299, "linearsvc__c": 299, "kbinsdiscretizer__n_bin": 299, "gradientboostingclassifier__learning_r": 299, "svc__c": 299, "cm_piyg": 299, "piyg": 299, "b30065": 299, "178000": 299, "est_idx": 299, "plot_discretization_classif": [299, 303], "centers_0": 300, "centers_1": 300, "x_list": 300, "grid_encod": 300, "stripe": 300, "plot_discretization_strategi": [300, 303], "powertransform": [301, 848, 858, 942, 962, 1002, 1005, 1008], "johnwon": 301, "weibul": 301, "bimod": [301, 395], "ineffect": [301, 962, 1002, 1003], "eric": [301, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "ericchang2017": 301, "northwestern": [301, 633], "contact": [301, 375, 972], "font_siz": 301, "bc": 301, "qt": [301, 848], "x_lognorm": [301, 962], "x_chisq": 301, "chisquar": 301, "x_weibul": 301, "x_gaussian": 301, "x_uniform": 301, "loc_a": 301, "loc_b": 301, "x_a": 301, "x_b": 301, "x_bimod": 301, "d81b60": 301, "0188ff": 301, "ffc107": 301, "b7a2ff": 301, "2ec5ac": 301, "figaspect": 301, "axes_idx": 301, "axes_list": 301, "x_trans_bc": 301, "lmbda_bc": 301, "lambdas_": [301, 847, 1007], "x_trans_yj": 301, "lmbda_yj": 301, "x_trans_qt": 301, "ax_origin": 301, "ax_bc": 301, "ax_yj": 301, "ax_qt": 301, "x_tran": [301, 366, 385, 418, 439, 847, 858, 962], "meth_nam": 301, "lmbda": 301, "plot_map_data_to_norm": [301, 303], "involv": [302, 305, 324, 352, 354, 360, 365, 368, 377, 378, 392, 399, 674, 799, 800, 949, 953, 955, 959, 967, 976, 985, 1002], "prime": 302, "meter": 302, "kilo": 302, "kilogram": 302, "alcohol": [302, 362], "malic": [302, 362], "acid": [302, 362], "wherein": [302, 377], "vastli": 302, "76e": 302, "36e": 302, "55e": 302, "31e": 302, "02e": 302, "53e": 302, "12e": 302, "33e": 302, "54e": 302, "43e": 302, "00e": 302, "tyler": [302, 1001, 1007, 1008], "lanigan": [302, 1001], "tylerlanigan": 302, "sebastian": [302, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "raschka": [302, 999, 1000, 1001, 1002, 1003, 1006], "sebastianraschka": 302, "fig_siz": 302, "unscaled_clf": 302, "std_clf": 302, "pred_test_std": 302, "npredict": 302, "pca_std": 302, "npc": 302, "x_train_transform": [302, 348, 393], "scaled_x_train": 302, "x_train_std_transform": 302, "untouch": 302, "target_class": 302, "270": [302, 303, 313], "plot_scaling_import": [302, 303], "410": [303, 338], "auto_examples_preprocess": 303, "announc": [305, 306, 307, 308, 309, 368, 378], "bug": [305, 306, 307, 308, 309, 355, 363, 366, 367, 368, 369, 372, 375, 377, 970, 973, 994, 995, 996, 1004, 1005, 1006, 1007, 1008, 1009], "latest": [305, 306, 307, 308, 309, 363, 365, 368, 370, 372, 968, 970], "upgrad": [305, 306, 307, 308, 309, 380, 973, 994, 999, 1002], "conda": [305, 306, 307, 308, 309, 353, 365, 367, 368, 372, 382, 968], "forg": [305, 306, 307, 308, 309, 353, 367, 368, 372, 380], "plot_roc_curv": [305, 1004, 1006], "plot_precision_recall_curv": [305, 1004, 1006, 1007], "stackingclassifi": [305, 348, 396, 543, 1004, 1005, 1006, 1007, 1008, 1009], "9473684210526315": 305, "radiusneighborstransform": [305, 815, 955, 1004, 1006, 1008, 1009], "sklearn_cache_": 305, "isomap__n_neighbor": 305, "nan_euclidean_dist": [305, 735, 942, 1004], "ccp_alpha": [305, 342, 532, 533, 534, 535, 539, 540, 878, 879, 880, 881, 968, 1004], "tree_": [305, 342, 346, 816, 878, 879, 880, 881], "node_count": [305, 342, 346, 878, 879, 880, 881], "check_estim": [305, 366, 377, 902, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "pytest": [305, 353, 363, 365, 366, 367, 380, 382, 901, 902, 1004, 1007], "decor": [305, 365, 366, 373, 897, 901, 902, 914, 915, 1004, 1007], "estimator_check": [305, 366, 377, 1001, 1002, 1004, 1005, 1008], "parametrize_with_check": [305, 366, 901, 1004, 1005], "test_sklearn_compatible_estim": [305, 902], "decision_function_shap": [305, 333, 872, 875, 967, 999, 1000, 1003, 1004], "9638666666666666": 305, "514": [305, 310], "plot_release_highlights_0_22_0": [305, 310], "await": 306, "lam": [306, 307, 1005], "3577618906572577": 306, "42425183539869404": 306, "openmp": [306, 363, 367, 375, 377, 389, 396, 920, 1005, 1007], "thread": [306, 309, 363, 375, 377, 389, 396, 803, 804, 920, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007], "7571304089239169": 306, "10k": [306, 422], "monotoinc": 306, "gbdt_no_cst": 306, "gbdt_cst": 306, "999791942438998": 306, "plot_release_highlights_0_23_0": [306, 310], "art": [307, 370, 624, 667, 972, 976], "footprint": [307, 352, 354, 389, 394, 530, 531, 538, 996, 999, 1000, 1005, 1006, 1009], "yarowski": [307, 867, 965], "selftrainingclassifi": [307, 315, 316, 317, 965, 1006], "random_unlabeled_point": [307, 865, 866, 867], "self_training_model": [307, 867], "base_estim": [307, 366, 387, 413, 528, 529, 530, 531, 646, 802, 805, 867, 941, 948, 1005, 1007, 1008, 1009], "selftrainingclassifierselftrainingclassifi": 307, "7373": 307, "linear_baselin": 307, "7137": 307, "decisiontreeregressordecisiontreeregressor": 307, "effort": [307, 365, 370, 972, 976, 1005, 1007], "plot_release_highlights_0_24_0": [307, 310], "l2_regular": [308, 396, 536, 537], "max_bin": [308, 309, 396, 536, 537], "typeerror": [308, 369, 685, 894, 936, 1001, 1002, 1005, 1007], "quantileregressor": [308, 948, 1007, 1008, 1009], "min_": [308, 389, 396, 841, 948, 962, 966, 967, 968], "sum_i": [308, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 943, 944, 948, 950, 952, 957], "pb_q": [308, 948], "_1": [308, 391, 394, 397, 506, 512, 513, 515, 520, 521, 522, 621, 622, 627, 628, 629, 630, 631, 635, 636, 637, 638, 656, 657, 658, 659, 739, 948, 950, 952, 967], "feature_names_in_": [308, 377, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 602, 603, 604, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 1007, 1008, 1009], "get_feature_nam": [308, 1002, 1003, 1005, 1006, 1007], "pet": [308, 761, 952], "dog": [308, 309, 557, 756, 962], "fish": 308, "pet_cat": 308, "pet_dog": 308, "pet_fish": 308, "plot_": [308, 380], "017": [308, 310, 370, 446, 447], "plot_release_highlights_1_0_0": [308, 310], "x_1d": 309, "hist_quantil": 309, "log_reg": 309, "log_reg_input_featur": 309, "gather": [309, 372, 378, 388, 389, 962, 976], "min_frequ": [309, 844, 962, 1008], "max_categori": [309, 844, 962, 1008], "rabbit": [309, 962], "snake": [309, 962], "infrequent_categories_": [309, 844, 962], "x0_cat": [309, 962], "x0_rabbit": [309, 962], "x0_infrequent_sklearn": [309, 962], "refactor": [309, 994, 996, 997, 998, 1004, 1007, 1008, 1009], "kneighbor": [309, 813, 814, 815, 817, 819, 955, 998, 1003, 1007, 1008, 1009], "radius_neighbor": [309, 819, 821, 822, 823, 998, 1003, 1004, 1006, 1007, 1008, 1009], "summari": [309, 348, 362, 375, 664, 666, 667, 668, 687, 864, 866, 883, 950, 953, 972, 987], "pairwise_distances_argmin_min": [309, 752, 997, 1002, 1008, 1009], "radiusneighborsclassifi": [309, 813, 814, 819, 822, 953, 955, 994, 996, 1000, 1002, 1004, 1006, 1007, 1008, 1009], "radiusneighborsregressor": [309, 813, 814, 819, 821, 955, 994, 996, 1002, 1004, 1006, 1007, 1008, 1009], "trustworthi": [309, 1002, 1003, 1008, 1009], "labelpropag": [309, 314, 866, 867, 953, 965, 995, 1000, 1001, 1004, 1005, 1006, 1008, 1009], "labelspread": [309, 312, 313, 314, 316, 317, 865, 867, 953, 965, 995, 1000, 1001, 1004, 1005, 1008, 1009], "blog": [309, 352, 365, 370, 372, 1005], "cython": [309, 352, 353, 363, 365, 367, 373, 375, 380, 382, 385, 389, 396, 483, 962, 963, 966, 967, 972, 973, 994, 997, 998, 1000, 1006, 1009], "readili": [309, 394, 968, 976], "true_w": 309, "true_h": 309, "x_reconstruct": [309, 456, 457, 458], "00364": 309, "divis": [309, 370, 389, 397, 565, 566, 569, 686, 687, 702, 703, 711, 719, 756, 757, 760, 952, 986, 998, 1002, 1003, 1006], "repeatedli": [309, 348, 377, 389, 396, 399, 483, 521, 641, 642, 651, 652, 653, 754, 942, 956, 982], "bisect_km": 309, "plot_release_highlights_1_1_0": [309, 310], "auto_examples_release_highlight": 310, "semisupervis": [312, 377], "clai": [312, 313, 314, 317, 994], "woolam": [312, 313, 314, 317, 994], "n_total_sampl": [312, 313], "n_labeled_point": [312, 313], "unlabeled_set": 312, "everyth": [312, 348, 368, 370, 375, 439, 913, 972, 973, 994], "lp_model": [312, 313], "predicted_label": [312, 313], "transduction_": [312, 313, 314, 865, 866, 867], "true_label": [312, 313], "_plot": 312, "0x7f2b4e9f6160": 312, "pred_entropi": [312, 313], "label_distributions_": [312, 313, 865, 866, 1005], "uncertainty_index": [312, 313], "image_index": [312, 313], "439": [312, 318, 338], "plot_label_propagation_digit": [312, 318], "max_iter": 313, "______________________________________________________________________": 313, "285": [313, 697], "280": 313, "unlabeled_indic": 313, "transduc": 313, "in1d": [313, 1001], "delete_indic": 313, "nfit": 313, "delete_index": 313, "plot_label_propagation_digits_active_learn": [313, 318], "label_spread": 314, "labelspreadinglabelspread": 314, "output_label": 314, "output_label_arrai": 314, "outer_numb": 314, "inner_numb": 314, "197": [314, 317, 318, 338, 399], "plot_label_propagation_structur": [314, 318], "breast_canc": 315, "569": [315, 362, 475, 567, 570, 571, 573], "augment": [315, 605, 852, 976], "rausch": [315, 317, 1002, 1003, 1006], "rauscho": [315, 317], "ethz": [315, 317], "total_sampl": [315, 511], "base_classifi": [315, 317, 965], "x_valu": 315, "99999": 315, "amount_label": 315, "amount_iter": 315, "self_training_clf": 315, "skfold": 315, "y_test_tru": 315, "labeled_iter_": [315, 867], "return_count": [315, 338, 823], "capsiz": 315, "twinx": 315, "plot_self_training_varying_threshold": [315, 318], "2823": 316, "2117": [316, 338], "908": [316, 952], "426": 316, "782": 316, "1691": [316, 948], "1161": 316, "173": [316, 370, 559], "683": 316, "tfidftransform": [316, 338, 339, 397, 463, 566, 987, 1001, 1002, 1008], "sdg_param": 316, "vectorizer_param": 316, "selftrain": 316, "st_pipelin": 316, "ls_pipelin": 316, "eval_and_print_metr": 316, "y_mask": 316, "x_20": 316, "y_20": 316, "plot_semi_supervised_newsgroup": [316, 318], "y_rand": 317, "y_30": 317, "y_50": 317, "ls30": 317, "ls50": 317, "ls100": 317, "st30": 317, "st50": 317, "rbf_svc": [317, 967], "color_map": 317, "plot_semi_supervised_versus_svm_iri": [317, 318], "auto_examples_semi_supervis": 318, "my_kernel": [320, 967], "plot_custom_kernel": [320, 335], "2x2": [321, 389, 727], "plot_iris_svc": [321, 335], "convention": [322, 377, 866], "support_vector_indic": 322, "193": [322, 335, 370, 689, 759, 965], "plot_linearsvc_support_vector": [322, 335], "plot_oneclass": [323, 335], "midpoint": 324, "blink": 324, "act": [324, 337, 365, 376, 395, 396, 687, 702, 703, 711, 756, 757, 760, 846, 850, 949, 952, 955, 967, 1002], "spuriou": [324, 372, 1007, 1008], "c_rang": 324, "gamma_rang": 324, "midpointnorm": 324, "masked_arrai": [324, 770, 783], "x_2d": 324, "y_2d": 324, "cheat": [324, 956, 966, 996], "c_2d_rang": 324, "gamma_2d_rang": 324, "bright": 324, "brutal": 324, "plot_rbf_paramet": [324, 335], "plot_separating_hyperplan": [325, 335], "plain": [326, 399, 632, 966], "n_samples_1": [326, 967], "n_samples_2": [326, 967], "clusters_std": 326, "wclf": 326, "wdisp": 326, "surface_": [326, 606], "plot_separating_hyperplane_unbalanc": [326, 335], "blown": 327, "score_mean": 327, "score_std": 327, "plot_svm_anova": [327, 335], "plot_svm_kernel": [328, 335], "plot_svm_margin": [329, 335], "unreg": 329, "perpendicular": 329, "yy_down": 329, "yy_up": 329, "nusvc": [330, 352, 873, 953, 994, 995, 996, 999, 1002, 1004, 1005, 1006, 1008], "951": [330, 335], "plot_svm_nonlinear": [330, 335], "svr_rbf": 331, "svr_lin": 331, "svr_poli": 331, "kernel_label": 331, "model_color": 331, "setdiff1d": 331, "plot_svm_regress": [331, 335], "mathcal": [332, 394, 396, 422, 424, 602, 671, 944, 946, 948, 952, 966, 1007], "omega": [332, 392, 946], "clf_set": 332, "grid_c": 332, "948": [332, 335, 758, 952], "plot_svm_scale_c": [332, 335], "break_ti": [333, 872, 875, 967, 1004], "accent": [333, 563, 564, 566, 1004], "plot_svm_tie_break": [333, 335], "emphasi": [334, 392, 872, 873, 874, 875, 876, 959, 972], "subtl": [334, 348, 951, 973], "deform": 334, "plot_decision_funct": 334, "sample_weight_last_ten": 334, "sample_weight_const": 334, "clf_no_weight": 334, "clf_weight": 334, "639": [334, 335], "plot_weighted_sampl": [334, 335], "auto_examples_svm": 335, "size_mb": 337, "utf": [337, 339, 397, 461, 478, 557, 563, 564, 566], "load_dataset": 337, "sublinear_tf": [337, 394, 397, 565, 566], "duration_train": 337, "duration_test": 337, "data_train_size_mb": 337, "data_test_size_mb": 337, "2034": [337, 360], "98mb": 337, "1353": 337, "87mb": 337, "493": [337, 618, 870, 945], "069mb": 337, "7831": 337, "318": [337, 425], "013mb": 337, "ridgeclassifi": [337, 352, 647, 648, 650, 948, 953, 999, 1003, 1007, 1008, 1009], "sparse_cg": [337, 647, 649, 662, 948, 995, 1001, 1003, 1004, 1008], "rarer": [337, 339, 397], "deeper": [337, 968], "plot_feature_effect": 337, "average_feature_effect": 337, "top5": 337, "top_indic": 337, "predictive_word": 337, "bar_siz": 337, "y_loc": 337, "keith": [337, 994, 999], "atheist": 337, "orbit": [337, 338], "caltech": 337, "expectedli": 337, "pollut": [337, 701, 758, 952, 958], "sender": [337, 360], "livesei": 337, "solntz": 337, "wpd": 337, "sgi": 337, "jon": [337, 1001, 1004, 1005, 1007, 1008], "nntp": [337, 360, 987], "1qlettinn8oi": 337, "cco": 337, "allan": [337, 1006], "schneider": [337, 1007], "me": 337, "instinct": 337, "happi": [337, 375, 787, 788], "listen": 337, "murder": 337, "voluntari": 337, "disregard": [337, 377, 397, 408, 440, 456, 457, 458, 527, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 695, 696, 697, 758, 804, 805, 814, 822, 829, 840, 841, 847, 848, 851, 855, 858, 859, 861, 871, 873, 876, 879, 881, 952, 1002], "beings": 337, "bahavior": 337, "theirs": 337, "mimicri": 337, "imit": 337, "parrot": 337, "polli": 337, "pulchritud": 337, "anim": [337, 397], "kill": 337, "Or": [337, 346, 393, 394, 844, 952, 958, 966], "sigh": 337, "wonder": 337, "bahaviour": 337, "believ": [337, 372, 375, 976], "primat": 337, "arbitarili": 337, "poster": [337, 364, 365, 986], "weren": [337, 845, 1003], "slai": 337, "mate": 337, "ritual": 337, "whatnot": 337, "aren": [337, 360, 368, 380, 388, 699, 729, 957, 1004, 1006], "ye": [337, 372, 377, 838, 854, 948], "child": [337, 346, 353, 375, 377, 389, 396, 418, 532, 533, 534, 535, 536, 537, 539, 540, 541, 878, 879, 880, 881, 920, 1001], "gorilla": 337, "dolphin": 337, "platypu": 337, "writer": 337, "launch": [337, 338, 380, 976], "custom_nam": 337, "clf_descr": 337, "rocchio": [337, 818], "401": [337, 338], "000742": 337, "5316": 337, "0429": 337, "000788": 337, "00106": 337, "136": 337, "704": 337, "000766": 337, "752": 337, "0298": 337, "000715": 337, "762": 337, "00356": 337, "748": [337, 370], "00222": 337, "000568": 337, "779": 337, "training_tim": 337, "txt": [337, 359, 467, 478], "curs": [337, 338, 389, 395, 399, 954, 955, 981, 986], "harm": [337, 366, 397, 766], "051": [337, 340, 447], "plot_document_classification_20newsgroup": [337, 340], "discov": [338, 389, 394, 397, 400, 420, 423, 978, 1009], "metadata": [338, 359, 360, 383, 462, 463, 470, 972, 973, 978], "category_s": 338, "true_k": 338, "3387": 338, "evaluations_std": 338, "fit_and_evalu": 338, "evaluation_std": 338, "score_valu": 338, "std_score": [338, 447, 1007], "reweight": [338, 377, 391, 396, 565, 566], "collis": [338, 339, 397, 557, 564], "x_tfidf": 338, "519": 338, "7929": [338, 1001], "devid": 338, "prod": [338, 596], "phenomenon": [338, 962], "cluster_s": 338, "asign": 338, "3384": 338, "1733": 338, "717": 338, "238": 338, "1115": 338, "1417": 338, "599": [338, 655], "1695": 338, "649": 338, "446": [338, 399, 699, 729, 952], "254": 338, "459": [338, 389, 418], "557": 338, "redo": 338, "x_lsa": 338, "explained_vari": [338, 952], "393": 338, "022": [338, 960], "329": [338, 425], "021": 338, "029": [338, 960], "minibatch_kmean": 338, "371": 338, "024": 338, "382": [338, 664, 668], "059": [338, 512], "influenti": [338, 362, 976], "original_space_centroid": 338, "order_centroid": 338, "bibl": 338, "shuttl": 338, "satellit": [338, 955], "sparciti": 338, "lsa_vector": 338, "50_000": 338, "x_hashed_lsa": 338, "390": 338, "016": 338, "328": [338, 703], "345": [338, 362], "055": [338, 362, 952], "358": 338, "309": 338, "df_std": 338, "speak": [338, 352, 365, 966], "notion": [338, 354, 375, 394, 396, 948, 952], "safer": [338, 348, 389, 393, 994], "590": [338, 340], "plot_document_clust": [338, 340], "assembl": [339, 831], "18000": [339, 360], "raw_data": 339, "data_size_mb": 339, "3803": 339, "245mb": 339, "anyth": [339, 370, 377, 393, 557, 918, 1008], "unicod": [339, 397, 461, 478, 557, 563, 564, 566, 919, 994, 1002, 1006], "charact": [339, 365, 369, 377, 397, 478, 483, 484, 563, 564, 566, 882, 957, 987, 994, 1007], "underscor": [339, 366, 377, 936, 984, 994, 1004, 1007], "tok": [339, 397], "findal": 339, "token_freq": 339, "dict_count_vector": 339, "47928": 339, "vocabulary_": [339, 397, 556, 563, 566, 987, 994], "19145": 339, "n_nonzero_column": 339, "749": 339, "43873": 339, "inact": [339, 359, 365], "742": 339, "47668": 339, "input_typ": [339, 397, 439, 557], "662": 339, "y_po": 339, "downsid": 339, "featureheash": 339, "implicitli": [339, 373, 396, 572, 607, 608, 850, 942, 944, 959, 962, 967], "token_pattern": [339, 397, 563, 564, 566], "47885": 339, "641": 339, "897": [339, 343, 347], "596": [339, 340, 690], "plot_hashing_vs_dict_vector": [339, 340], "auto_examples_text": 340, "parameter": [342, 399, 589, 590, 597, 598, 768, 769, 948, 949, 957, 962, 968], "weakest": [342, 968], "cost_complexity_pruning_path": [342, 878, 879, 880, 881], "drawstyl": [342, 675], "3272984419327777": 342, "plot_cost_complexity_prun": [342, 347], "ryb": 343, "pairidx": 343, "borderpad": 343, "handletextpad": 343, "plot_iris_dtc": [343, 347], "plot_tre": [343, 346, 968, 1003, 1005, 1006, 1007, 1009], "106": [344, 347, 362, 847, 946, 995], "plot_tree_regress": [344, 347], "regr_3": 345, "y_3": 345, "plot_tree_regression_multioutput": [345, 347], "decision_path": [346, 532, 533, 539, 540, 541, 878, 879, 880, 881, 1000, 1005], "children_left": 346, "children_right": 346, "n_node_sampl": 346, "travers": [346, 955, 959], "n_node": [346, 417, 421, 438, 532, 533, 539, 540, 541, 878, 879, 880, 881, 912], "node_depth": 346, "is_leav": 346, "pop": [346, 375, 885, 982, 1002], "visit": [346, 365, 959], "node_id": [346, 882, 884], "is_split_nod": 346, "children": [346, 389, 396, 417, 421, 438, 541, 998], "800000011920929": 346, "950000047683716": 346, "node_index": 346, "node_ind": 346, "leaf_id": 346, "sample_id": [346, 360, 471], "threshold_sign": 346, "inequ": [346, 377, 389, 419, 422, 434, 674, 949, 950, 955], "boolean": [346, 360, 365, 366, 373, 390, 396, 397, 398, 439, 536, 537, 556, 557, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 604, 611, 624, 646, 674, 800, 806, 827, 834, 853, 886, 936, 942, 948, 954, 962, 968, 994, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009], "common_nod": 346, "common_node_id": 346, "plot_unveil_tree_structur": [346, 347], "auto_examples_tre": 347, "anti": [348, 581, 806, 954], "x_test_transform": [348, 393], "standard_norm": 348, "unfair": 348, "x_select": 348, "gbc": 348, "x_train_select": 348, "x_test_select": 348, "tip": [348, 351, 355, 365, 367, 384, 397, 509, 516, 620, 667, 948, 974, 988, 989, 992, 997], "mtrand": 348, "_rand": 348, "85418642": 348, "79084103": 348, "13077794": 348, "11915045": 348, "56479934": 348, "70814003": 348, "25291366": 348, "55212743": 348, "18197458": 348, "37845099": 348, "snippet": [348, 365, 369, 372, 375, 385, 396, 397, 398, 942, 962, 975, 1007], "mutat": [348, 1002], "somewhat": [348, 354, 365, 366, 394, 396, 872, 875, 948, 967, 968], "debug": [348, 367, 370, 377, 379, 602, 869, 972, 987, 1002, 1006], "reset": [348, 372, 509, 651, 652, 653, 811, 812, 840, 841, 851, 996], "govern": [348, 352, 355, 365, 377, 970, 976], "seemingli": [348, 375], "implic": 348, "rf_123": 348, "rf_inst": 348, "didn": [348, 377, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "strict": [348, 363, 377, 394, 478, 510, 563, 564, 566, 948, 994, 1003, 1006], "pervas": [348, 365], "throughout": [348, 377, 602, 771, 828, 829, 978, 997, 1002], "codebas": [348, 365, 366, 370, 397, 994, 1000], "unlucki": 348, "lucki": 348, "fairer": 348, "temptat": [348, 365], "throughput": [351, 989, 997], "switch": [351, 653, 678, 691, 710, 728, 730, 766, 811, 812, 906, 907, 952, 955, 989, 994], "offlin": [352, 365], "review": [352, 360, 366, 367, 369, 370, 375, 378, 393, 394, 510, 516, 952, 962, 979], "bottleneck": [352, 370, 396, 423, 828, 829], "hurt": [352, 509, 1002], "toolkit": [352, 363, 972, 976], "branch": [352, 363, 365, 367, 368, 389, 418, 532, 533, 534, 535, 538, 539, 540, 541, 878, 879, 880, 881, 883, 955, 959, 968], "sklearn_assume_finit": 352, "config_context": [352, 385, 601, 868, 1001, 1007], "assume_finit": [352, 443, 868], "assert_all_finit": [352, 373, 443], "csc": [352, 375, 377, 397, 526, 528, 529, 645, 667, 838, 840, 846, 851, 853, 855, 861, 886, 890, 891, 917, 927, 928, 930, 931, 932, 933, 955, 962, 1002, 1003, 1005, 1008], "32bit": [352, 919], "speedup": [352, 394, 396, 625, 629, 632, 994, 995, 996, 997, 1009], "multithread": [352, 389, 870, 871, 872, 873, 874, 875, 876], "bla": [352, 363, 370, 994, 1002, 1003, 1005, 1006], "sparsity_ratio": 352, "gbt": 352, "role": [352, 364, 368, 375, 394, 970], "speedi": 352, "packet": 352, "reuter": [352, 360], "carefulli": [352, 394], "spawn": [352, 375, 770, 783, 792, 793, 794, 1005], "gil": [352, 353, 920, 997, 1002, 1003, 1006, 1007], "ought": 352, "lapack": [352, 363, 507, 510, 516, 663, 1009], "dgemm": 352, "distutil": [352, 363], "system_info": 352, "get_info": 352, "blas_opt": 352, "lapack_opt": 352, "atla": [352, 363], "rebuild": [352, 383, 397, 418], "openbla": [352, 353, 363, 375, 920, 1007], "mkl": [352, 353, 363, 375, 920, 994], "veclib": [352, 375], "osx": 352, "nouri": [352, 995, 997], "instruct": [352, 365, 366, 367, 368, 369, 372, 375, 376, 478, 563, 564, 566, 978, 987, 994], "ubuntu": [352, 363, 370, 372], "1gb": 352, "mib": [352, 443, 868], "working_memori": [352, 443, 754, 868, 1002], "adher": [352, 366, 377, 901, 902, 994, 995], "pairwise_distances_chunk": [352, 751, 1002, 1005], "facilit": [352, 377, 383, 972, 973, 1000, 1003], "moment": [352, 394, 399, 416, 590, 598, 828, 829, 918, 956, 957], "000024": 352, "027400": 352, "mileag": 352, "deploi": [352, 379, 383, 973, 976], "upstream": [352, 365, 368, 372, 375, 962, 1003], "lighter": [352, 676, 762], "bli": [353, 363, 375], "subsect": [353, 388], "worker": [353, 377, 397, 920], "14228": 353, "loki": [353, 920, 952, 1002, 1005], "duplic": [353, 364, 365, 377, 389, 400, 420, 423, 424, 490, 610, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 795, 842, 938, 955, 994, 997, 1006, 1008], "memmap": [353, 360, 377, 394, 483, 509, 1002], "1mb": [353, 999], "exclus": [353, 375, 394, 396, 941, 952, 953, 976, 1001, 1005], "omp_num_thread": 353, "my_script": 353, "algebra": [353, 363, 367, 375, 394, 397, 437, 837, 962], "mkl_num_thread": 353, "openblas_num_thread": 353, "blis_num_thread": 353, "pypi": [353, 363, 365, 366, 368, 370, 380, 948, 968, 1002, 1006, 1008, 1009], "channel": [353, 360, 363, 375, 397, 467, 468, 558, 559, 561, 562], "subscript": [353, 920, 1007], "max_thread": [353, 370], "n_cpu": [353, 377], "_num_thread": 353, "skip": [353, 365, 366, 373, 397, 443, 474, 543, 621, 622, 627, 635, 636, 637, 646, 656, 868, 987, 998, 1001, 1004, 1006, 1008], "fault": [353, 372, 1002, 1004, 1006], "singleton": [353, 777, 893, 1007], "aforement": [353, 953], "global_random_se": 353, "fixtur": [353, 365], "ci": [353, 367, 368, 372, 954, 1000, 1002], "build_numb": 353, "disrupt": 353, "config": [353, 365, 368, 372, 601, 1002], "contributor": [353, 367, 368, 369, 372, 375, 377, 952, 970, 973, 995, 996, 997], "encount": [353, 363, 383, 389, 396, 397, 470, 536, 537, 556, 806, 807, 808, 810, 844, 927, 962, 966, 975, 976, 987, 1002, 1005], "unrel": [353, 369, 372, 397, 490], "watch": [353, 370], "test_your_test_nam": 353, "global_dtyp": 353, "boundscheck": 353, "segfault": [353, 994, 1002, 1007], "drive": [354, 394, 395, 396, 524, 966, 976, 987], "passiveaggressiveregressor": [354, 948, 995, 998, 1001, 1002, 1005, 1007], "maxabsscal": [354, 835, 855, 942, 962, 999, 1002, 1003, 1004, 1005], "routin": [354, 359, 362, 365, 366, 367, 372, 375, 377, 398, 647, 649, 662, 674, 872, 873, 874, 875, 876, 949, 955, 962, 963, 966, 972, 976, 994, 1008, 1009], "passiveaggress": [354, 397], "late": 354, "fledg": [354, 397], "naivebay": 354, "dramat": 354, "welcom": [355, 364, 365, 372, 378, 973, 975], "roadmap": [355, 970], "video": [355, 359, 367, 478, 953, 976, 979], "persist": [355, 372, 375, 394, 585, 586, 827, 957, 989, 1000, 1003], "miscellan": [355, 358, 359, 1000, 1001, 1008, 1009], "craft": [355, 367], "curat": [355, 365, 367, 368], "conveni": [357, 372, 375, 390, 393, 397, 399, 404, 419, 422, 424, 426, 428, 439, 463, 586, 651, 653, 674, 701, 758, 830, 831, 926, 942, 944, 948, 949, 959, 976, 987, 994], "commun": [358, 364, 367, 369, 372, 377, 380, 389, 396, 513, 515, 522, 667, 684, 843, 942, 949, 955, 962, 966, 970, 972, 976, 1002, 1003], "fetcher": [358, 999, 1001], "boston": [358, 366, 474, 976, 989], "linnerrud": [358, 989], "breast": [358, 475, 989, 999], "cancer": [358, 475, 568, 569, 818, 989, 999], "covertyp": [358, 465, 989], "rcv1": [358, 471, 989, 999], "kddcup": [358, 466, 989], "svmlight": [358, 461, 483, 484, 972, 989, 994, 995, 1001, 1003], "jpeg": [359, 360, 467, 468], "publish": [359, 360, 366, 368, 372, 377, 964, 973, 1006], "creativ": 359, "spare": [359, 649, 650], "pyplpt": 359, "load_svmlight_fil": [359, 994, 995, 1000, 1001, 1002], "test_dataset": 359, "everybodi": [359, 365], "upload": [359, 363, 368, 375, 646], "mice": [359, 602, 942], "brain": 359, "miceprotein": 359, "1080": [359, 389], "sc": [359, 389], "clara": [359, 1006], "higuera": 359, "katheleen": 359, "gardin": 359, "krzysztof": 359, "cio": 359, "protein": [359, 972], "cite": [359, 389, 970], "kj": [359, 954], "critic": [359, 365, 376, 383, 396, 667, 949, 952, 960, 967, 976, 1005], "syndrom": 359, "plo": [359, 582, 583], "ONE": [359, 582, 583], "e0129126": 359, "40966": 359, "upload_d": 359, "08t16": 359, "17928620": 359, "file_id": 359, "default_target_attribut": 359, "row_id_attribut": 359, "mouseid": 359, "ignore_attribut": 359, "genotyp": 359, "cc18": 359, "study_135": 359, "study_98": 359, "study_99": 359, "md5_checksum": 359, "3c479a6885bfa0438971388283a1ce32": 359, "websit": [359, 360, 362, 365, 378, 956, 966, 976, 987, 995, 996, 997], "4550": 359, "creator": [359, 362], "17t14": 359, "1804243": 359, "pone": 359, "0129126": 359, "openml100": 359, "study_14": 359, "study_34": 359, "earliest": [359, 949], "earlier": [359, 365, 392, 802, 805, 962, 970, 992, 995, 1007, 1009], "iris_61": 359, "iris_969": 359, "iris_version_3": 359, "vanschoren": [359, 1006], "rijn": [359, 1002], "bischl": 359, "torgo": 359, "acm": [359, 360, 389, 400, 420, 425, 432, 435, 486, 538, 651, 699, 729, 817, 952, 955, 958, 964], "sigkdd": [359, 360, 486, 651, 964], "newslett": 359, "legaci": [359, 368, 377, 920, 994, 1001, 1006], "liac": [359, 365, 470, 1009], "my": [359, 365, 369, 372, 470], "columnar": [359, 439, 972], "usabl": [359, 365, 366, 377, 383, 397, 770, 920, 994, 1001, 1008, 1009], "io": [359, 362, 363, 365, 368, 370, 372, 377, 667, 992], "json": [359, 365, 380], "sql": 359, "smoothli": 359, "manipul": [359, 385, 482, 920, 972, 1000], "mat": [359, 397], "load_fil": [359, 360, 987, 996, 1008], "audio": [359, 478], "wish": [359, 365, 371, 373, 380, 389, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 907, 979, 987, 1001], "imageio": 359, "wavfil": 359, "wav": 359, "nomin": [359, 377, 378, 396, 397, 556, 557, 690, 962, 973], "hdf5": 359, "h5py": 359, "pytabl": 359, "april": [360, 639, 660, 661, 998, 1006], "1992": [360, 362, 393, 396, 542, 543, 620, 948], "1994": [360, 362, 619], "AT": [360, 469], "laboratori": [360, 972], "cambridg": [360, 394, 565, 806, 810, 948, 950, 954], "facial": 360, "upright": 360, "frontal": 360, "movement": 360, "credit": [360, 372, 396, 976], "18846": [360, 462, 463], "20news_hom": 360, "newsgroups_train": 360, "11314": 360, "1073": 360, "20new": [360, 987], "34118": 360, "159": [360, 994], "01327": 360, "newsgroups_test": 360, "vectors_test": 360, "class_prior": [360, 806, 807, 808, 810, 995, 998], "fit_prior": [360, 806, 807, 808, 810], "88213": 360, "suspici": 360, "show_top10": 360, "top10": 360, "affili": 360, "abund": 360, "clue": [360, 372, 949], "bare": [360, 949, 987], "quotat": 360, "77310": 360, "76995": 360, "cleveland": 360, "indian": 360, "leagu": 360, "team": [360, 367, 368, 375, 377, 970, 972, 976, 994], "ohio": 360, "spark": [360, 973], "death": 360, "floyd": [360, 663, 949], "reckon": 360, "coloni": 360, "owner": [360, 362], "paul": [360, 997, 1000, 1001, 1002, 1003, 1007, 1008], "dolan": 360, "nicknam": 360, "tribe": 360, "theme": [360, 994], "mlb": [360, 842], "inappropri": [360, 393, 399, 683, 790], "nlp": [360, 394, 397, 806, 810, 950, 976], "cultur": 360, "inflammatori": 360, "famou": [360, 362, 967], "internet": [360, 369, 962, 985], "offici": [360, 366, 370, 377, 380, 467, 471, 972, 987, 1002, 1003, 1006], "verif": [360, 952, 976], "identif": [360, 365, 471, 941, 979], "viola": [360, 1002], "opencv": 360, "detector": [360, 377, 817], "5749": [360, 467, 468], "13233": [360, 467, 468], "5828": [360, 467, 468], "200m": 360, "lfw_home": 360, "rectangular": [360, 377, 907, 973], "1140": 360, "fetch_lfw_pair": [360, 999], "lfw_pairs_train": 360, "subdivid": [360, 399], "10_fold": [360, 467], "gari": [360, 1001], "huang": [360, 633, 1000, 1005], "manu": 360, "ramesh": [360, 976, 997, 1000, 1004], "tamara": 360, "berg": [360, 995, 996, 1006], "erik": [360, 976, 997], "miller": [360, 1002, 1003, 1007], "massachusett": [360, 362], "amherst": [360, 362], "30m": 360, "seven": [360, 945], "homepag": [360, 505, 968], "581012": [360, 465], "newswir": 360, "ltd": [360, 976], "804414": [360, 471], "47236": [360, 471], "fetch_rcv1": [360, 999, 1003], "v2": [360, 471, 639, 660, 661, 948], "chronolog": [360, 471], "23149": [360, 471, 1008], "781265": [360, 471], "lyrl2004": [360, 471], "2286": 360, "810596": 360, "2287": 360, "2288": 360, "uint32": [360, 471], "gmil": 360, "381327": 360, "ccat": 360, "e11": 360, "ecat": 360, "m11": 360, "656": 360, "lewi": [360, 1001, 1005], "yang": [360, 389, 394, 509, 614, 1000, 1001, 1004, 1006, 1007, 1008], "rose": 360, "361": [360, 396, 530, 531], "cup": [360, 952], "tcpdump": 360, "darpa": 360, "intrus": 360, "mit": [360, 370, 389, 399, 585, 586, 589, 594, 597, 618, 641, 642, 651, 808, 945], "lincoln": 360, "inject": [360, 396], "attack": 360, "unrealist": 360, "logged_in": 360, "resp": [360, 396, 572, 768, 769, 966, 1002], "4898431": [360, 466], "976158": 360, "699691": 360, "619052": 360, "95373": 360, "kddcup99": [360, 466], "richard": [360, 398, 633, 995, 1004, 1006, 1008], "lippmann": 360, "joshua": [360, 996, 997, 999, 1000, 1006], "hain": 360, "jonathan": [360, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007], "korba": 360, "da": 360, "yamanishi": 360, "takeuchi": 360, "william": [360, 362, 399, 585, 586, 589, 594, 597, 614, 952, 956, 1001, 1002, 1003, 1004], "miln": 360, "discount": [360, 389, 699, 729, 1001, 1004], "sixth": 360, "320": [360, 941, 966, 994], "press": [360, 389, 394, 399, 400, 420, 565, 585, 586, 589, 594, 597, 618, 806, 810, 945, 948, 950, 954], "statlib": [360, 362], "dcc": 360, "ltorgo": 360, "1990": 360, "censu": 360, "bureau": 360, "resid": 360, "surpinsingli": 360, "vacat": 360, "resort": [360, 530, 1004], "pace": 360, "kellei": [360, 996, 997], "ronald": [360, 956, 997, 1007], "barri": [360, 1002], "autoregress": 360, "291": [360, 362], "297": 360, "hyperspher": [361, 972], "interleav": [361, 497], "simplif": [361, 364, 369, 994, 1000], "realiti": 361, "make_sparse_uncorrel": 361, "make_friedman1": [361, 396, 514, 518, 568, 569, 607], "make_friedman2": [361, 586, 588, 589, 590, 591, 592, 596, 599, 600], "reciproc": [361, 952], "make_friedman3": 361, "crim": 362, "capita": 362, "crime": 362, "town": 362, "zn": 362, "zone": 362, "sq": [362, 742], "ft": 362, "indu": 362, "retail": [362, 976], "acr": 362, "cha": 362, "river": 362, "tract": 362, "nox": 362, "nitric": 362, "oxid": 362, "dwell": 362, "occupi": [362, 389, 952], "1940": 362, "di": [362, 377, 389, 394, 506, 512, 639, 660, 661, 863, 998, 1007], "employ": 362, "rad": 362, "highwai": 362, "ptratio": 362, "pupil": 362, "bk": 362, "lstat": 362, "medv": 362, "harrison": [362, 474], "rubinfeld": [362, 474], "carnegi": [362, 865], "mellon": [362, 865], "hedon": [362, 474], "102": [362, 370, 474, 985, 996], "1978": [362, 474, 948], "belslei": 362, "kuh": 362, "welsch": 362, "wilei": [362, 942], "244": [362, 559], "261": 362, "quinlan": [362, 968], "1993": [362, 449, 639, 660, 661, 968], "tenth": 362, "236": 362, "243": [362, 559], "morgan": [362, 964, 968, 970], "kaufmann": [362, 964, 968, 1006], "7826": 362, "4194": 362, "9490": 362, "9565": 362, "fisher": [362, 396, 479, 611, 972], "donor": 362, "michael": [362, 389, 425, 603, 612, 666, 768, 942, 948, 976, 987, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008], "marshal": 362, "arc": [362, 396], "juli": [362, 398, 707, 997, 1001, 1002, 1003], "1988": 362, "sir": 362, "referenc": [362, 366, 367, 372, 377, 862, 863, 955, 1001, 1007], "duda": [362, 946], "hart": [362, 946, 1002], "taxonom": 362, "annual": [362, 389, 699, 729, 867, 952, 965], "eugen": [362, 995, 1000], "179": [362, 370, 396, 994], "1936": 362, "john": [362, 397, 511, 682, 708, 742, 846, 872, 873, 875, 876, 942, 948, 952, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1007], "1950": [362, 952], "scene": [362, 955, 957, 1007], "q327": 362, "d83": 362, "son": [362, 942], "isbn": [362, 389, 948], "22361": 362, "dasarathi": 362, "nose": [362, 997, 1001], "pami": [362, 389, 698], "gate": [362, 1007], "433": 362, "mlc": 362, "cheeseman": 362, "autoclass": 362, "conceptu": [362, 396, 950], "alpaydin": 362, "boun": 362, "nist": [362, 952], "bitmap": 362, "preprint": 362, "32x32": 362, "nonoverlap": 362, "4x4": [362, 394, 397], "garri": 362, "candela": 362, "dimmick": 362, "geist": 362, "grother": 362, "janet": 362, "handprint": 362, "nistir": 362, "5469": 362, "kaynak": 362, "msc": 362, "graduat": 362, "bogazici": 362, "cascad": 362, "kybernetika": 362, "ken": [362, 987, 996, 1003], "tang": [362, 1004, 1005, 1006], "ponnuthurai": 362, "suganthan": 362, "yao": [362, 1000, 1001, 1002, 1003], "kai": [362, 538, 958, 1001], "dimensionalityreduct": 362, "nanyang": 362, "technolog": 362, "claudio": [362, 1008], "gentil": [362, 1006], "linnerud": [362, 480], "men": 362, "club": 362, "waist": 362, "puls": 362, "chin": [362, 998], "situp": 362, "tenenhau": 362, "pratiqu": 362, "alcalin": 362, "magnesium": 362, "phenol": 362, "nonflavanoid": 362, "proanthocyanin": 362, "od280": 362, "od315": 362, "dilut": 362, "prolin": 362, "class_2": [362, 485], "162": 362, "278": [362, 811, 812], "1680": 362, "746": 362, "chemic": 362, "grown": [362, 396, 532, 533, 539, 540, 878, 879, 880, 881, 968], "itali": 362, "cultiv": 362, "thirteen": 362, "constitu": 362, "forina": 362, "parvu": 362, "pharmaceut": 362, "food": 362, "technologi": [362, 389, 972, 976], "brigata": 362, "salerno": 362, "16147": 362, "genoa": 362, "lichman": 362, "irvin": 362, "ca": [362, 389, 418, 878, 879, 964, 968], "aeberhard": 362, "cooman": 362, "vel": 362, "rep": [362, 972], "dept": 362, "cook": [362, 994, 1000], "north": [362, 389], "queensland": 362, "submit": [362, 363, 364, 366, 367, 368, 369, 372, 377, 378], "technometr": [362, 391, 444, 449, 958], "rda": 362, "1nn": 362, "THE": 362, "OF": 362, "chemometr": 362, "perimet": 362, "textur": [362, 731, 732, 950], "concav": 362, "symmetri": [362, 674, 844, 847, 858, 950], "fractal": 362, "malign": [362, 475], "benign": [362, 475], "981": [362, 952], "143": [362, 446, 447, 964, 994, 995], "2501": 362, "163": [362, 960], "019": [362, 370, 446], "135": 362, "008": [362, 370], "4254": 362, "071": [362, 413], "027": 362, "664": 362, "208": 362, "357": [362, 475, 871], "wolberg": 362, "nick": [362, 994, 1000, 1001, 1002, 1003], "olvi": 362, "mangasarian": 362, "goo": [362, 475], "gl": [362, 475], "u2uwz2": [362, 475], "needl": 362, "aspir": [362, 365], "fna": 362, "nuclei": 362, "multisurfac": 362, "msm": 362, "bennett": [362, 952], "midwest": 362, "cognit": 362, "societi": [362, 389, 391, 444, 449, 516, 602, 847, 858, 948, 966], "insepar": 362, "uw": [362, 1006], "ftp": [362, 657, 658], "wisc": [362, 865], "prog": 362, "cpo": 362, "nuclear": 362, "tumor": 362, "spie": 362, "symposium": [362, 389, 435], "1905": 362, "861": [362, 761, 762, 952], "870": 362, "san": [362, 397, 964], "jose": [362, 633, 952, 1002, 1004], "prognosi": 362, "577": 362, "august": [362, 389, 486, 509, 967, 994, 996, 997, 1001, 1008], "wheel": [363, 365, 368, 380, 1004, 1006, 1008], "quickest": 363, "git": [363, 366, 368, 372, 975, 990, 994], "fork": [363, 365, 368, 372, 375], "miniforge3": [363, 372], "miniforg": [363, 372, 380], "virtualenv": [363, 365], "venv": [363, 380], "dev0": [363, 368, 975, 990], "show_vers": [363, 365, 372, 380, 1002], "pyx": [363, 365, 370, 372], "pxd": [363, 365], "threadpoolctl": [363, 380, 382], "sklearn_fail_no_openmp": 363, "checkout": [363, 365, 368, 372], "cumbersom": 363, "reinstal": [363, 380], "setuptool": 363, "unix": [363, 397], "makefil": 363, "studio": [363, 976], "vs_buildtool": 363, "desktop": 363, "screenshot": 363, "secondli": [363, 365, 375, 389, 396, 632, 948, 987], "architectur": [363, 366, 372, 375, 383, 443, 868, 956, 970, 976, 994], "cmd": 363, "powershel": 363, "struct": [363, 377, 997], "calcsiz": 363, "prompt": [363, 365, 380, 382, 397, 978], "distutils_use_sdk": 363, "x86": 363, "buildtool": 363, "vc": 363, "vcvarsal": 363, "bat": 363, "x64": 363, "clang": 363, "confusingli": 363, "usr": 363, "gcc": [363, 370, 375], "libomp": [363, 1006], "silicon": [363, 970], "m1": [363, 970], "januari": [363, 365, 380, 994, 995, 1004, 1006], "arm64": [363, 365, 367, 380], "llvm": 363, "toolchain": 363, "xcode": 363, "conflict": [363, 365, 372, 380, 1001, 1002], "condarc": 363, "channel_prior": 363, "reactiv": 363, "echo": [363, 368], "cxx": 363, "cflag": 363, "cxxflag": 363, "ldflag": 363, "subfold": [363, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 1007], "fopenmp": 363, "export": [363, 366, 383, 882, 883, 968, 972, 975, 1003], "cppflag": 363, "xpreprocessor": 363, "wl": 363, "rpath": 363, "lomp": 363, "sudo": [363, 380], "apt": [363, 372, 380], "pip3": 363, "pythonx": 363, "precompil": 363, "arm": [363, 372, 941], "cython3": 363, "cento": 363, "yum": 363, "devel": 363, "gnu": 363, "port": [363, 380, 1004], "pkg": 363, "build_ext": [363, 370], "build_clib": 363, "ldshare": 363, "wget": [363, 372], "repo": [363, 365, 368, 973], "gpg": 363, "deb": 363, "dpcpp": 363, "cpp": [363, 370], "setvar": 363, "x86_64": [363, 367], "intelem": 363, "sklearn_build_parallel": 363, "tracker": [364, 367, 372, 375, 378, 970, 973], "prioriti": [364, 607, 799, 800, 973, 997], "guidelin": [364, 367, 369, 370, 372, 388, 389, 396], "reformul": 364, "briefli": [364, 376, 396, 941, 1004], "xyz": 364, "someestim": 364, "glanc": 364, "relabel": [364, 787, 788, 867], "stall": [364, 367], "sprint": [364, 365, 970, 994], "unfinish": [364, 365], "supersed": [364, 999], "overflow": [364, 372, 375, 997, 1001, 1002, 1003, 1004, 1005, 1007], "submitt": 364, "strive": [364, 378, 976], "expertis": [364, 365, 375], "unclear": [364, 365, 476], "pleasant": [364, 976], "chime": 364, "permiss": [364, 368, 378, 380, 976], "matthew": [364, 369, 511, 716, 994, 997, 1001, 1003, 1007, 1008], "rocklin": [364, 369], "acknowledg": [364, 584], "struggl": 364, "everyon": [365, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "underrepres": 365, "merit": [365, 368, 378], "teach": 365, "priceless": 365, "abid": 365, "codeofconduct": 365, "hesit": 365, "ticket": 365, "typo": [365, 378, 994], "send": [365, 389, 401, 508], "valuabl": [365, 942, 976], "burden": [365, 843, 973], "slep": [365, 377, 970], "templat": [365, 368, 369, 377, 378, 972], "ecosystem": [365, 942, 971, 976], "contrib": [365, 366, 372, 375, 377, 972, 973], "numpydoc": [365, 377, 380, 382], "arff": [365, 470, 1006, 1009], "compli": [365, 377, 901, 973], "fulfil": [365, 389, 770, 773, 774, 783, 831, 835, 948], "anyon": [365, 378, 976], "gist": [365, 372, 975], "feasibl": [365, 840, 841, 851], "traceback": [365, 369, 372, 375, 443, 952, 975], "doubt": [365, 948, 958, 972], "companion": [365, 962], "transcript": 365, "inclus": [365, 366, 372, 425, 431, 727, 759, 952, 953, 994, 1008], "yourlogin": 365, "flake8": [365, 380, 382, 553], "mypi": [365, 368, 380, 382, 1005], "synchron": [365, 397], "my_featur": 365, "commit": [365, 368, 372, 378, 975, 994, 995, 996, 997], "modified_fil": 365, "committ": [365, 994], "modif": [365, 392, 396, 397, 965], "approv": [365, 378, 396], "mrg": [365, 372], "incomplet": [365, 380, 389, 679, 766, 942, 949, 987, 998, 1000], "wip": [365, 372, 380], "matur": [365, 972, 973], "broad": [365, 377, 972], "collabor": 365, "eas": [365, 370, 948, 966, 972, 973, 976, 1005, 1006, 1008], "_logist": 365, "doctest": [365, 377, 474, 979, 994], "test_logist": [365, 372], "rst": [365, 368, 372, 987, 994, 999], "test_common": [365, 372], "caught": [365, 372], "editor": [365, 372, 375], "submodul": [365, 368, 370, 388, 944, 950, 994], "intricaci": 365, "narr": [365, 377, 633, 870, 875, 994, 995], "unittest": 365, "tests_for_packag": 365, "static": [365, 366, 370, 372, 621, 622, 627, 628, 635, 636, 637, 638], "workaround": [365, 770, 783], "compliant": 365, "astropi": 365, "linux": [365, 366, 367, 372, 972, 994], "circleci": 365, "lint": [365, 372], "aarch64": [365, 372, 380], "gh": 365, "nogil": 365, "cpython": [365, 1009], "icc": [365, 367], "intel": [365, 367, 952], "sklearn_run_float32_test": 365, "lengthi": [365, 375], "etiquett": 365, "she": [365, 860, 861, 1004], "he": [365, 699, 729, 828, 829, 860, 861, 952, 987, 1001, 1008], "failur": [365, 368, 372, 890, 891, 975, 976, 1007, 1008], "shorten": [365, 967, 1007], "leader": [365, 976], "grab": 365, "familiar": [365, 395, 1002], "acquaint": 365, "experienc": 365, "abandon": 365, "someon": [365, 377, 994], "glad": 365, "restructuredtext": 365, "_build": 365, "viewabl": 365, "pillow": [365, 380, 382], "sphinxext": [365, 380, 382], "opengraph": [365, 380, 382], "vast": 365, "examples_pattern": 365, "your_regex_goes_her": 365, "no_mathjax": 365, "latexpdf": 365, "elabor": [365, 953], "paragraph": [365, 397, 478, 987], "hood": [365, 948, 967], "colon": 365, "selectfpr": [365, 398, 567, 570, 573, 574, 575, 581], "some_param": 365, "hello": [365, 372, 914], "goodby": 365, "liter": [365, 368, 976], "array_paramet": 365, "list_param": 365, "typed_ndarrai": 365, "multioutput_arrai": 365, "bracket": [365, 948], "delimit": [365, 958], "unwritten": 365, "bibliograph": 365, "arxiv": [365, 437], "backtick": [365, 369], "nowadai": 365, "syntax": [365, 369, 370, 372, 390, 941, 978, 1005, 1007], "_my": 365, "currentmodul": 365, "succeed": 365, "stone": [365, 878, 879, 968], "subdirectori": 365, "subpackag": [365, 368, 970, 998, 1003], "cleanup": [365, 994], "charg": 365, "test_requiring_mpl_fixtur": 365, "hang": [365, 975, 1004, 1005], "fruit": [365, 953], "asv": 365, "asv_benchmark": 365, "airspe": 365, "veloc": 365, "publicli": [365, 1004], "zero_on": [365, 995], "example_funct": 365, "exampleestim": 365, "_n_cluster": 365, "accordingli": [365, 368, 369, 1001, 1002, 1009], "versionchang": [365, 859], "meet": [365, 375, 378, 398, 547, 578, 828, 829, 867, 952, 965, 976, 1002, 1003, 1004], "nit": 365, "retract": 365, "grammar": 365, "disambigu": [365, 799, 867, 965, 1009], "immedi": [365, 375, 770, 783, 792, 793, 794, 1002], "Will": [365, 471, 509, 602, 619, 620, 621, 627, 631, 632, 635, 636, 637, 638, 639, 640, 648, 650, 681, 688, 761, 836, 840, 844, 851, 997, 998, 1000, 1002], "clariti": [365, 372], "unhelp": 365, "extran": 365, "rewritten": [365, 624, 996, 998], "generos": 365, "reward": 365, "heard": 365, "ve": [365, 397, 975, 976, 987, 1001], "enemi": 365, "courtesi": 365, "justifi": [365, 370, 387, 540], "occas": 365, "deserv": [365, 370], "digest": 365, "overwhelm": 365, "sheer": [365, 976], "myself": 365, "trickiest": 365, "buri": 365, "inherit": [365, 366, 376, 377, 551, 651, 899, 901, 948, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006], "parent": [365, 368, 377, 389, 418, 438, 994], "mixin": [365, 377, 404, 405, 406, 407, 408, 409, 576, 901, 996, 1005], "classifiermixin": [365, 366, 377, 393, 1005], "grep": 365, "delai": [365, 470, 770, 783, 792, 793, 794, 920, 1008], "some_funct": [365, 897], "some_iter": 365, "flavor": [365, 955], "pointer": [365, 372, 418, 1003], "mandatori": [365, 397], "favorit": [365, 375, 976], "Being": [365, 378, 383, 948, 955], "killer": [365, 976], "blame": [365, 368], "migrat": [365, 994], "ignorerevsfil": 365, "rev": [365, 582, 583], "ruin": 365, "prolifer": 366, "adopt": [366, 377, 866, 952, 966, 1002], "predomin": [366, 995], "overrid": [366, 397, 425, 432, 517, 523, 563, 564, 566, 568, 569, 572, 631, 639, 660, 661, 813, 814, 815, 817, 819, 821, 822, 823, 994, 1002, 1004, 1008], "creation": [366, 474, 486, 487, 488, 490, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 631, 811, 812, 976, 1001, 1002, 1003, 1007], "optimis": [366, 389, 955, 972, 997, 1007, 1009], "rememb": [366, 369, 380, 397, 955, 959, 968], "param1": [366, 984], "param2": [366, 984], "param3": 366, "postpon": [366, 368], "requisit": 366, "liner": [366, 797], "ipython": [366, 369, 370, 372, 979, 987], "session": [366, 370, 375, 380, 971, 976, 987], "trainabl": 366, "trail": [366, 936], "overridden": [366, 377, 399, 517, 523, 591, 596, 599, 669, 1002, 1003], "n_features_in_": [366, 377, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 602, 603, 604, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 1005, 1007, 1009], "slep010": [366, 1005], "duck": [366, 377, 1004], "boilerpl": [366, 976, 987], "check_x_i": [366, 373, 998, 1002, 1003, 1008], "check_arrai": [366, 373, 509, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "templateclassifi": 366, "demo_param": 366, "myestim": 366, "subestim": 366, "my_extra_param": 366, "my_estim": [366, 390], "subestimator__c": 366, "subestimator__class_weight": 366, "subestimator__du": 366, "subestimator__fit_intercept": 366, "subestimator__intercept_sc": 366, "subestimator__l1_ratio": 366, "subestimator__max_it": 366, "subestimator__multi_class": 366, "subestimator__n_job": 366, "subestimator__penalti": 366, "subestimator__random_st": 366, "subestimator__solv": 366, "subestimator__tol": 366, "subestimator__verbos": 366, "subestimator__warm_start": 366, "__c": 366, "__class_weight": 366, "unpack": 366, "easiest": [366, 372, 390, 949], "__repr__": [366, 973, 1003], "setattr": 366, "accomplish": [366, 521, 949, 953, 955, 976], "deepcopi": 366, "_estimator_typ": [366, 377, 999], "regressormixin": [366, 377, 440, 1005], "clustermixin": 366, "is_classifi": [366, 377], "predict_log_proba": [366, 377, 524, 525, 526, 528, 530, 532, 534, 539, 568, 569, 633, 634, 651, 770, 773, 774, 783, 792, 806, 807, 808, 809, 810, 828, 831, 867, 872, 875, 878, 880, 967, 994, 1007], "_base": 366, "programmat": [366, 473, 1003], "_get_tag": [366, 1005], "allow_nan": [366, 889, 891], "binary_onli": [366, 1004, 1005], "multioutput_onli": 366, "no_valid": 366, "non_determinist": [366, 1008], "primari": [366, 377, 394, 490, 959, 976], "_safe_split": 366, "preserves_dtyp": 366, "poor_scor": 366, "requires_fit": 366, "requires_positive_x": [366, 1004], "requires_i": [366, 1005], "requires_positive_i": 366, "_skip_test": 366, "_xfail_check": 366, "check_nam": 366, "xfail": [366, 372], "skiptestwarn": 366, "x_type": 366, "2darrai": 366, "signifi": [366, 389, 556, 780, 957], "1dlabel": 366, "2dlabel": 366, "_more_tag": 366, "mymultioutputestim": 366, "_required_paramet": 366, "ridgeregress": 366, "idiosyncrat": 366, "ownership": 366, "pep8": [366, 368, 372], "indent": 366, "nsampl": [366, 768, 769], "statement": [366, 369, 372, 375, 377, 394, 970, 987], "flow": 366, "client": 366, "corollari": 366, "foo": [366, 556, 956], "baz": [366, 556], "pyflak": 366, "asanyarrai": 366, "hadamard": 366, "choose_random_sampl": 366, "freestand": 366, "unmodifi": [366, 377], "random_state_": [366, 511, 512, 602, 820, 1008], "gaussiannois": 366, "showcas": 366, "assert_allclos": 366, "rtol": [366, 811, 812, 816], "atol": [366, 811, 812, 816], "checklist": 367, "unclaim": 367, "workflow": [367, 368, 376, 393], "boil": [367, 391], "markdown": 367, "saniti": [367, 835, 952, 994, 995], "outdat": 367, "diff": [367, 952], "valgrind": 367, "platform": [367, 375, 377, 383, 976, 999, 1002, 1003, 1005, 1007], "yep": 367, "gperftool": 367, "gprof": 367, "callgrind": 367, "kcachegrind": 367, "warm": [367, 377, 506, 512, 518, 520, 521, 585, 634, 641, 643, 651, 652, 653, 948, 973, 1004, 1006, 1008], "restart": [367, 372, 422, 506, 512, 513, 518, 520, 521, 585, 586, 949, 1007], "maco": [367, 380, 1002, 1006, 1008], "homebrew": [367, 380], "freebsd": 367, "oneapi": 367, "cron": 367, "rrrcn": 368, "pep101": 368, "build_tool": 368, "blocker": 368, "mileston": 368, "maint_tool": 368, "sort_whats_new": 368, "whats_miss": 368, "fixm": [368, 377], "recip": [368, 949, 976], "yaml": 368, "feedstock": 368, "whats_new": [368, 372], "v0": [368, 446, 447, 453, 487, 563, 564, 566, 770, 783, 830, 833, 995, 1002, 1003, 1004], "alia": [368, 372, 377, 592, 926, 941, 958, 973, 994, 1008], "freez": [368, 380, 383, 973, 976, 1002], "afterward": [368, 510, 516, 795], "0rc1": 368, "__version__": 368, "changelog": [368, 377], "rebas": 368, "cherri": 368, "shortlog": 368, "f2": [368, 953], "sed": [368, 994], "front": [368, 1001], "rc1": 368, "suffix": [368, 794, 952, 1004], "brows": 368, "3a": 368, "22wheel": 368, "pyproject": 368, "toml": 368, "oldest": [368, 470], "abi": 368, "acronym": 368, "deliveri": 368, "whl": 368, "22publish": 368, "went": [368, 952], "bot": [368, 957, 1008], "sync": 368, "testpypi": 368, "tarbal": 368, "wheelhouse_upload": 368, "twine": 368, "rrr": 368, "symlink": 368, "latestst": 368, "tmp": 368, "ln": [368, 948, 956, 962], "versionwarn": 368, "secur": [368, 377, 973, 976, 989], "twitter": 368, "linkedin": 368, "squash": [368, 399, 506, 512, 517, 523], "significanli": 368, "authorship": 368, "weekli": 368, "yml": 368, "ui": 368, "enable_hist_gradient_boost": [368, 1003], "permalink": 368, "_hist_gradient_boost": 368, "_iter": 368, "pickl": [368, 377, 383, 397, 563, 564, 566, 811, 812, 973, 996, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008], "checker": [368, 791], "protect": [368, 370], "type_check": 368, "test_enable_hist_gradient_boost": 368, "enable_my_experimental_featur": 368, "indefinit": 368, "incentiv": 368, "workabl": 369, "stackoverflow": [369, 372, 375, 975], "blogpost": 369, "mcve": [369, 372, 375], "my_data": 369, "with_mean": [369, 851, 861, 962, 1002, 1007], "default_scor": 369, "other_scor": 369, "scrollbar": 369, "tripl": 369, "fenc": 369, "qualifi": 369, "a674e682c281": 369, "lda_featur": 369, "lda_model": 369, "n_topic": [369, 511, 1001], "minimalist": [369, 397, 975], "continuous_featur": 369, "positive_featur": 369, "invest": [370, 976], "idiom": 370, "wast": [370, 393, 394, 941], "crunch": 370, "performancetip": 370, "reimplement": [370, 377, 1000, 1004], "spottabl": 370, "amen": [370, 399, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 941], "engag": [370, 378], "tent": 370, "somewher": [370, 952, 987], "prun": 370, "magic": [370, 399, 591, 596, 599], "14496": [370, 1003], "682": 370, "ncall": 370, "tottim": 370, "percal": 370, "cumtim": 370, "lineno": 370, "042": 370, "_nls_subproblem": 370, "1263": 370, "157": 370, "_po": 370, "681": 370, "_initialize_nmf": 370, "_spars": 370, "_neg": 370, "337": 370, "461": 370, "spent": [370, 795], "hotspot": 370, "16159": [370, 1005], "840": 370, "2833": 370, "_dotbla": 370, "1397": 370, "2780": 370, "167": [370, 994], "064": [370, 960], "1542": 370, "043": 370, "2734": 370, "fromnumer": 370, "1185": 370, "lapack_lit": 370, "dgesdd": 370, "rewrit": [370, 968, 986, 994], "shallow": [370, 396, 536, 537, 885], "4x": [370, 1009], "line_profil": 370, "wire": [370, 509, 516], "profile_default": 370, "ipython_config": 370, "terminalipythonapp": 370, "interactiveshellapp": 370, "lprun": 370, "qtconsol": 370, "137": [370, 995], "73153": 370, "h_init": 370, "5863": 370, "nl": [370, 905], "175": [370, 962], "112141": 370, "2336": 370, "wtv": 370, "176": [370, 804, 953, 960], "16144": 370, "336": [370, 962], "wtw": 370, "177": 370, "1880": 370, "195133": 370, "grad": [370, 976], "495761": 370, "777": 370, "proj_gradi": 370, "2449": 370, "130": 370, "1474": 370, "4474": 370, "inner_it": 370, "83833": 370, "hn": 370, "194239": 370, "191": [370, 953], "48858": 370, "150407": 370, "gradd": 370, "515390": 370, "349": 370, "dqd": 370, "pin": 370, "memory_profil": [370, 380, 382], "memit": 370, "mprun": 370, "my_func": 370, "1e7": 370, "402344": 370, "adequ": [370, 474, 978, 1007], "standalon": [370, 633, 870, 975], "youtub": 370, "gmvkiq": 370, "gow8": 370, "scipy2009": 370, "paper_1": 370, "paper_2": 370, "IF": 370, "sklearn_openmp_parallelism_en": 370, "cimport": [370, 373, 1002], "omp_get_max_thread": 370, "prang": 370, "bianp": 370, "recompil": [370, 380], "dbg": 370, "fortun": [370, 396, 987, 1007, 1008], "my_fil": 370, "callgrin": 370, "prof": 370, "encapsul": [371, 390], "artist": [371, 414, 607, 673, 675, 676, 884], "classmethod": [371, 414, 606, 607, 672, 673, 675, 676], "line_": [371, 414, 673, 675, 676], "gridspecfromsubplotspec": 371, "subplot_spec": 371, "get_subplotspec": 371, "ax_top_left": 371, "ax_top_right": 371, "ax_bottom": 371, "bounding_ax_": [371, 607], "lines_": [371, 607], "contours_": [371, 607], "advic": [372, 399, 597, 598], "forth": 372, "userscript": 372, "tampermonkei": 372, "greasemonkei": 372, "shortcut": [372, 399], "pr_number": 372, "navig": [372, 996], "overlai": [372, 607], "codecov": 372, "test_sparsifi": 372, "pdb": 372, "debugg": 372, "ipdb": [372, 987], "shell": [372, 375, 978, 987], "pdbcl": 372, "terminalpdb": 372, "lf": 372, "ff": 372, "tb": [372, 546, 547, 548, 549, 550, 551, 552], "runxfail": 372, "werror": 372, "mailman": 372, "listinfo": 372, "crowd": [372, 378, 949, 973, 975], "imped": 372, "attent": [372, 582, 583, 966], "pytb": 372, "stdin": [372, 987], "perman": 372, "25163598": 372, "issuenumb": 372, "1506": 372, "volunt": 372, "establish": [372, 375, 378, 942], "clarifi": [372, 378, 764], "regression_test": 372, "0008": 372, "patienc": [372, 377], "manifest": [372, 949, 955], "glibc": 372, "uniniti": 372, "trace": [372, 389, 402, 448, 450, 451, 454, 455, 664, 668, 949, 1005], "supp": 372, "readm": [372, 397, 467], "my_test_script": 372, "mobil": 372, "deploy": [372, 972, 973, 976], "scalewai": 372, "aw": 372, "graviton": 372, "laptop": [372, 443, 868, 1008, 1009], "workstat": 372, "qemu": 372, "docker": [372, 383, 1007, 1008], "multiarch": 372, "ppc64le": 372, "filesystem": [372, 380, 1007], "pushd": 372, "arm64v8": 372, "mount": 372, "privileg": 372, "pwd": 372, "bash": 372, "reinit": 372, "bashrc": 372, "ephemer": 372, "backport": [373, 1001], "evolv": [373, 1009], "as_float_arrai": 373, "column_or_1d": [373, 1005], "multitarget": 373, "multi_output": [373, 890], "safe_index": [373, 1004], "check_memori": [373, 377, 1001], "5488135": 373, "71518937": 373, "60276338": 373, "54488318": 373, "has_fit_paramet": 373, "randomized_range_find": [373, 995, 1000], "arrayfunc": 373, "cholesky_delet": 373, "min_po": 373, "least_angl": 373, "fast_logdet": 373, "safe_sparse_dot": [373, 1004], "weighted_mod": 373, "sample_without_replac": [373, 1000], "n_popul": [373, 921], "sparsefunc": [373, 1007], "mean_variance_axi": [373, 1000, 1007], "sparsefuncs_fast": 373, "inplace_csr_row_normalize_l1": 373, "inplace_csr_row_normalize_l2": 373, "inplace_csr_column_scal": 373, "sort_graph_by_row_valu": [373, 1009], "single_source_shortest_path_length": 373, "dijkstra": [373, 663, 949], "graph_shortest_path": [373, 1007], "all_estim": [373, 1004, 1005, 1009], "all_displai": [373, 1009], "all_funct": [373, 1009], "is_multilabel": 373, "dict_learn": [373, 506, 512, 521, 995, 1002, 1004, 1007, 1008], "gen_batch": [373, 911], "safe_mask": 373, "safe_sqr": 373, "unifi": [373, 375, 376, 396, 612, 972, 994], "murmurhash3_32": 373, "murmurhash3_x86_32": [373, 919], "cryptograph": 373, "bloom": [373, 919], "384616559": 373, "3910350737": 373, "murmurhash": 373, "graphical_lasso": [373, 446, 447, 1002], "kit": 375, "toolbox": [375, 972, 976], "multilay": [375, 950], "kera": [375, 972], "forese": 375, "redesign": [375, 994], "pystruct": [375, 972], "ssvm": 375, "seqlearn": 375, "4143": 375, "meanwhil": [375, 967], "pipegraph": 375, "squared_loss": [375, 1007], "undertak": 375, "discourag": [375, 380, 474, 664], "slowli": [375, 377, 519, 907], "ordinarili": [375, 377], "corrobor": 375, "proof": [375, 396, 864, 964], "road": 375, "bridg": [375, 949, 972], "reproduct": [375, 948, 975], "guidanc": [375, 399], "gitter": [375, 970, 1001, 1002], "value_kei": [375, 885], "levenshtein": 375, "dna": [375, 603, 942], "rna": 375, "pain": 375, "suppli": [375, 389, 621, 890, 891, 955, 976, 998, 1000, 1002, 1007], "leven": 375, "acctcctagaag": 375, "acctactagaagtt": 375, "gaatattaggccga": 375, "lev_metr": 375, "algoritum": 375, "brute": [375, 384, 393, 400, 420, 425, 432, 607, 608, 663, 664, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 959, 989, 998, 1002, 1006], "multiprocess": [375, 377, 920, 955, 994, 1002, 1008], "exec": 375, "nvidia": 375, "cuda": [375, 385], "pool": [375, 421, 610, 921, 973, 1005], "reiniti": 375, "culprit": 375, "posix": 375, "refus": [375, 860, 861], "forkserv": 375, "joblib_start_method": 375, "set_start_method": 375, "dozen": [376, 399], "unsuperv": [376, 392], "newli": [376, 396, 438, 959, 1000, 1001], "leakag": [376, 377, 390, 989], "disclos": 376, "entail": [376, 849, 851, 966], "r_squar": 376, "searchcv": [376, 1009], "tacit": 377, "inconsist": [377, 397, 483, 484, 872, 875, 894, 958, 967, 989, 994, 999, 1000, 1001, 1002, 1004, 1007], "elsewher": [377, 437, 438, 446, 447, 453], "formal": [377, 378, 389, 396, 811, 812, 949, 952, 953, 956], "thereof": 377, "transduct": [377, 389, 865, 866, 973], "serial": [377, 972, 973, 989, 994, 1002, 1006], "unpickl": [377, 383, 811, 812, 1000, 1006], "inadvert": 377, "pep257": 377, "notat": [377, 390, 394, 397, 565, 686, 948, 952, 978, 1003], "nuanc": 377, "flaw": [377, 396], "terminologi": [377, 1002], "est1": [377, 607], "est2": [377, 607], "exemplifi": 377, "y_proba": [377, 831], "_score": [377, 447, 770, 783, 794, 952, 994, 1007], "_loss": [377, 952], "divers": [377, 396], "abstract": [377, 394, 399, 593, 742, 972, 994], "notfittederror": [377, 820, 936, 998, 1000, 1003, 1004], "descriptor": [377, 483, 484], "hoc": 377, "spectral_embed": [377, 949, 995, 998, 1000, 1002, 1004, 1007, 1008, 1009], "maxabs_scal": [377, 840, 1002], "astrai": 377, "readthedoc": 377, "entireti": 377, "shield": 377, "n_output": [377, 396, 405, 408, 409, 413, 418, 421, 440, 444, 456, 457, 458, 506, 507, 509, 511, 512, 514, 517, 518, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 603, 605, 608, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 695, 696, 701, 718, 719, 721, 723, 724, 726, 727, 758, 761, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 818, 820, 821, 822, 827, 828, 829, 830, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 862, 863, 865, 866, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 896, 923, 952, 953, 968, 1001, 1004], "synonym": [377, 813, 814, 815, 821, 822, 823], "themat": 377, "alphanumer": [377, 563, 564, 566], "statistician": [377, 851], "prescrib": 377, "baggingclassifi": [377, 396, 531, 880, 997, 1000, 1001, 1002, 1005, 1009], "estimator__max_depth": [377, 941], "improp": [377, 1001], "pairwise_kernel": [377, 399, 427, 618, 738, 837, 950, 994, 1001], "redundantli": 377, "distancemetr": [377, 395, 811, 812, 955, 1002, 1006, 1007, 1008], "vectori": [377, 1004], "noun": 377, "rout": [377, 1008], "fit_param": [377, 409, 413, 418, 421, 440, 506, 507, 509, 511, 512, 514, 517, 518, 524, 542, 543, 544, 545, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 603, 605, 610, 613, 614, 615, 616, 617, 770, 773, 774, 783, 792, 793, 794, 795, 796, 798, 803, 804, 805, 815, 820, 823, 827, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 862, 863, 1001, 1004, 1005, 1006, 1008], "venu": [377, 975], "broadli": [377, 389], "consolid": [377, 378, 994], "coo": [377, 528, 529, 667, 838, 886, 890, 891, 955, 995], "lil": [377, 528, 529, 838, 886, 912, 955], "csgraph": [377, 1007], "absent": [377, 397, 727, 792], "densifi": [377, 394, 633, 634, 641, 643, 651, 652, 653, 870, 942, 996], "lossili": 377, "unnorm": [377, 511, 949, 1000, 1001], "encompass": [377, 425, 431, 530, 531, 949], "is_regressor": 377, "get_n_split": [377, 771, 772, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 788, 789, 790], "elasticnetcv": [377, 621, 627, 635, 636, 637, 638, 656, 948, 994, 997, 1005, 1007, 1008], "logisticregressioncv": [377, 633, 948, 953, 998, 999, 1000, 1002, 1003, 1004, 1008], "estimatorcv": [377, 973], "loo": [377, 777, 1005], "type_of_target": [377, 838, 953, 1008, 1009], "hashabl": [377, 839, 842, 963], "labelencod": [377, 544, 845, 963, 994, 1002], "canonic": 377, "xxx": 377, "everywher": 377, "multilabelbinar": [377, 800, 835, 844, 953, 978, 997, 999, 1000, 1002, 1003], "nonetheless": [377, 952], "amber": 377, "return_cov": [377, 542, 543, 586, 831], "test_idx": 377, "_idx": 377, "label1": 377, "label2": 377, "class_label": [377, 532, 536, 539, 633, 634, 641, 643, 649, 650, 651, 878, 880, 896, 967], "bincount": [377, 393, 532, 536, 539, 633, 634, 641, 643, 649, 650, 651, 870, 872, 875, 878, 880, 895, 896, 1001], "rebalanc": 377, "compute_class_weight": [377, 997, 1008], "check_cv": [377, 999], "obei": [377, 950], "triangl": [377, 394, 419, 422, 434, 674, 950, 955], "concurr": [377, 397, 1006, 1008], "unset": [377, 1002], "get_scor": [377, 706, 1001], "check_scor": 377, "uppercas": [377, 1007], "unavail": [377, 633, 634, 914, 1001, 1007], "deadlock": 378, "meritocrat": 378, "earn": 378, "concret": [378, 398, 643, 649, 650, 651, 652, 862, 863, 948, 966], "consult": [378, 952], "unanim": 378, "outreach": 378, "brand": [378, 380], "social": [378, 389, 976], "ongo": 378, "emeritu": [378, 970], "recant": 378, "strateg": 378, "entiti": [378, 699, 729], "duti": 378, "resign": 378, "occasion": [378, 700, 1003], "escal": 378, "fallback": [378, 799, 800, 952], "hereaft": 378, "lazi": [378, 397, 966, 998], "opinion": 378, "veto": 378, "appeal": 378, "insuffici": [379, 951, 986], "greatest": [380, 838, 1002], "afraid": 380, "64bit": [380, 994], "miniconda": 380, "administr": 380, "venvpython": 380, "venvsourc": 380, "activatesourc": 380, "activatesklearn": 380, "activatepip": 380, "learnpip": 380, "learnpip3": 380, "learnconda": 380, "installedpython3": 380, "virtualenvpython3": 380, "installedpython": 380, "virtualenvpython": 380, "installedconda": 380, "environmentpython": 380, "virtual": [380, 393, 976], "dnf": 380, "pacman": 380, "raspberri": 380, "pooch": [380, 382], "lock": [380, 382, 920], "pypy3": [380, 1002], "v5": [380, 1002], "19137": 380, "py3": 380, "apk": 380, "bind": [380, 994, 1001, 1002], "buster": 380, "fedora30": 380, "pkgsrc": 380, "py39": 380, "daal": 380, "daal4pi": 380, "intelpython": 380, "plugin": 380, "appdata": 380, "usernam": 380, "windowsapp": 380, "environmenterror": 380, "errno": 380, "pythonsoftwarefound": 380, "7_qbz5n2kfra8p0": 380, "localcach": 380, "python37": 380, "data_nam": 380, "australian": 380, "data_vers": 380, "lift": 380, "registri": 380, "regedit": 380, "menu": 380, "hkey_local_machin": 380, "currentcontrolset": 380, "longpathsen": 380, "broken": [380, 393, 574, 575, 610, 694, 886, 952, 997, 1001, 1002, 1003, 1005, 1008], "retrain": [383, 973], "untrust": 383, "malici": 383, "unsupport": [383, 467, 1002, 1007], "inadvis": 383, "immut": 383, "snapshot": [383, 534, 535, 973], "portabl": 383, "alex": [383, 397, 967, 994, 997, 1002, 1004, 1005, 1006, 1008], "gaynor": 383, "exchang": [383, 975], "markup": 383, "pmml": [383, 972], "onnx": [383, 972, 973], "xml": 383, "sklearn2pmml": [383, 972], "affero": 383, "gplv3": 383, "datastructur": [385, 1002, 1006], "namespac": 385, "cupi": 385, "array_api": 385, "gpu": [385, 956, 973, 987], "xp": [385, 392, 846], "x_np": 385, "y_np": 385, "x_cu": 385, "y_cu": 385, "devic": [385, 393, 557], "array_api_dispatch": [385, 443, 868], "_estimator_with_converted_arrai": 385, "transfer": [385, 973], "_array_api": 385, "cupy_to_ndarrai": 385, "_arrai": 385, "lda_np": 385, "submatrix": [386, 404, 426, 428], "unusu": [386, 958, 962, 1002], "submatric": 386, "bipartit": [386, 428, 486, 957], "subgraph": 386, "eigenvalu": [386, 389, 391, 427, 437, 444, 445, 446, 447, 448, 449, 450, 451, 510, 516, 524, 648, 663, 664, 666, 668, 670, 837, 949, 962, 996, 1000, 1003, 1004, 1005, 1006], "a_n": 386, "lceil": [386, 958], "log_2": [386, 538, 958], "rceil": [386, 958], "bmatrix": 386, "u_2": 386, "u_": [386, 456, 457, 458], "n_column": [386, 426, 428], "inderjit": [386, 428], "cartesian": [386, 608, 955], "blockwis": [386, 948], "bistochast": [386, 426], "l_": [386, 586, 714, 952], "k_": [386, 399, 591, 594, 596, 599, 747, 962], "u_1": 386, "v_1": 386, "v_2": 386, "v_": [386, 397], "kluger": [386, 426, 488], "yuval": [386, 426], "microarrai": [386, 426, 488, 603, 942], "cap": [386, 389, 728, 952, 1003], "hochreit": [386, 693], "hungarian": [386, 693], "bodenhof": [386, 693], "fabia": [386, 693], "acquisit": [386, 693], "wilk": 387, "f_i": 387, "train_set": 387, "test_set": 387, "disjoint": [387, 389, 390, 413, 678, 704, 728, 730, 949], "platt": [387, 413, 872, 873, 875, 876, 967], "_i": [387, 396, 943, 948, 952, 956, 967], "_j": [387, 943, 952], "f_j": [387, 960], "precipit": 387, "wea": 387, "640": [387, 464, 481, 482, 558, 559, 941], "650": 387, "1990a": 387, "menon": 387, "ak": [387, 1008], "jiang": [387, 998, 1005], "xj": 387, "vembu": 387, "ohno": 387, "machado": [387, 696], "703": [387, 488], "710": 387, "kull": [387, 952], "silva": [387, 663, 949, 1005, 1007], "filho": 387, "flach": [387, 952], "refurbish": 388, "rough": [388, 958, 980], "uniti": 388, "lipschitz": [388, 964], "usecas": 389, "mu_j": 389, "coher": 389, "elong": 389, "lloyd": [389, 419, 422, 424, 434, 1008, 1009], "distant": [389, 667, 683, 955], "sergei": [389, 996, 1000, 1001, 1002, 1003, 1004], "vassilvitskii": [389, 422, 435], "eighteenth": 389, "siam": [389, 393, 427, 435, 437, 510, 516], "industri": [389, 972], "predetermin": [389, 949], "scullei": 389, "19th": 389, "exemplar": [389, 416, 429, 986], "sent": [389, 800], "leftarrow": [389, 956, 966], "foral": [389, 399, 588], "neq": [389, 952, 954, 962], "notin": 389, "x_j": [389, 399, 589, 590, 594, 597, 598, 600, 943, 944, 948, 955, 967, 968], "dictat": 389, "solvabl": 389, "stella": [389, 427, 437], "yu": [389, 427, 437, 633, 948, 956, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "jianbo": [389, 427, 437, 666], "shi": [389, 427, 437, 666], "anil": [389, 427, 437], "daml": [389, 427, 437], "victor": [389, 427, 437, 1001, 1004], "minden": [389, 427, 437], "lex": [389, 427, 437], "ying": [389, 427, 437, 1008], "adjac": [389, 394, 427, 437, 560, 561, 610, 666, 670, 912, 949, 955, 986], "adjacency_matrix": 389, "ulrik": [389, 427, 437, 666], "von": [389, 427, 437, 666, 972, 1001, 1002], "luxburg": [389, 427, 437, 666], "jitendra": [389, 427, 437, 666], "malik": [389, 427, 437, 666], "walk": [389, 395, 997], "marina": 389, "meila": 389, "ng": [389, 394, 666, 817, 956, 958, 1005], "jordan": [389, 394, 666, 768, 1004, 1005, 1008], "yair": [389, 666], "precondit": [389, 427, 437, 670, 968], "zhuzhunashvili": [389, 437], "forbid": 389, "macroscop": 389, "manhattan": [389, 417, 421, 425, 432, 674, 735, 744, 751, 752, 753, 818, 950, 955, 998, 1003], "bisecting_strategi": [389, 419], "largest_clust": [389, 419], "biggest_inertia": [389, 419], "biggest": [389, 392, 394, 419], "steinbach": 389, "karypi": 389, "vipin": 389, "egin": 389, "minnesota": 389, "june": [389, 949, 1000], "weblog": 389, "abirami": 389, "mayilvahanan": 389, "emerg": [389, 976], "ijet": 389, "jian": 389, "xinyu": 389, "gou": 389, "baod": 389, "hebei": 389, "knee": 389, "triangular": [389, 438, 586, 949], "whichev": [389, 396, 519, 536, 537, 608, 625, 629, 631, 639, 657, 658, 672], "conjunct": [389, 569, 770, 773, 774, 783, 792, 793, 794, 795, 798, 942, 948], "extract_dbscan": 389, "radius_neighbors_graph": [389, 400, 420, 813, 814, 815, 817, 819, 821, 822, 823, 824, 955, 998, 1003, 1006], "ester": [389, 400, 420], "kriegel": [389, 400, 420, 425, 432, 817, 958], "sander": [389, 400, 420, 425, 432, 817, 958, 1003, 1004], "xu": [389, 392, 400, 420, 966, 1007, 1008], "portland": [389, 400, 420], "aaai": [389, 400, 420, 806, 954], "revisit": [389, 400, 420], "schubert": [389, 400, 420, 425, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008], "tod": [389, 400, 420], "max_ep": [389, 425, 430, 432], "nearbi": [389, 955], "cluster_hierarchy_": [389, 425], "planar": 389, "peripheri": 389, "hdbscan": [389, 972], "wall": 389, "ankerst": [389, 425, 432], "mihael": [389, 425, 432], "marku": [389, 425, 432, 1002, 1004, 1005, 1006], "breunig": [389, 425, 432, 817, 958], "han": [389, 418, 425, 432, 994, 1002, 1003, 1007], "j\u00f6rg": [389, 425, 432, 1002], "sigmod": [389, 425, 432, 817, 958], "cft": 389, "lossi": 389, "cf": [389, 392, 418, 675, 948, 962, 973], "subclust": [389, 418], "enter": [389, 418, 959], "till": [389, 418, 761, 952], "temporarili": [389, 999], "farthest": 389, "brc": [389, 418], "tian": [389, 418, 999, 1000, 1001], "raghu": [389, 418], "ramakrishnan": [389, 418], "maron": [389, 418], "livni": [389, 418], "sfu": [389, 418], "coursecentr": [389, 418], "zhang96": [389, 418], "roberto": [389, 418], "perdisci": [389, 418], "jbirch": [389, 418], "java": [389, 418, 972], "satisfi": [389, 625, 629, 674, 691, 709, 710, 811, 812], "labels_pr": [389, 678, 679, 688, 689, 691, 704, 709, 710, 728, 730, 759, 766], "unadjust": [389, 952, 1006], "swap": [389, 394, 690, 709, 931, 932, 994], "ri": [389, 679, 759], "c_2": [389, 949], "unord": [389, 396], "esp": [389, 994], "hubert": [389, 679, 689, 759], "arabi": [389, 679, 689, 759], "steinlei": [389, 679], "psycholog": [389, 679, 690], "agreement": [389, 678, 690, 728, 730, 766, 952], "22504": 389, "10526": 389, "u_i": [389, 456, 457, 458, 728], "v_j": [389, 728, 957], "veb2009": 389, "a_i": 389, "b_j": 389, "yat2016": 389, "average_method": [389, 678, 730, 1002], "vinh": [389, 678], "veb2010": 389, "strehl": 389, "joydeep": 389, "1162": 389, "153244303321897735": 389, "epp": [389, 678], "bailei": [389, 678], "26th": [389, 699, 729, 952], "1553374": 389, "1553511": 389, "9781605585161": 389, "csail": [389, 641, 642, 651, 808], "volume11": 389, "vinh10a": 389, "algesheim": 389, "tesson": 389, "30750": 389, "1038": 389, "srep30750": 389, "rosenberg": [389, 691, 710, 766], "hirschberg": [389, 691, 710, 766], "b2011": 389, "homogeneity_completeness_v_measur": [389, 1003], "n_k": [389, 525], "n_c": [389, 634], "julia": [389, 691, 710, 766], "media": [389, 976], "hila": 389, "becker": [389, 976, 997, 1006], "fowlkes_mallows_scor": [389, 952, 1000, 1002], "fmi": [389, 704], "fp": [389, 686, 692, 704, 755, 756, 757, 760, 952], "fn": [389, 686, 692, 704, 755, 756, 757, 760, 952, 953], "47140": 389, "fowkl": [389, 704], "1983": [389, 704, 851], "tandfonlin": 389, "01621459": 389, "10478008": 389, "kmeans_model": 389, "1987": [389, 582, 583, 763, 764], "calinski_harabasz_scor": [389, 1002], "dispers": [389, 684, 698, 948], "561": 389, "n_e": 389, "mathrm": [389, 391, 394, 398, 948, 968], "b_k": 389, "w_k": [389, 948], "c_q": 389, "n_q": 389, "c_e": 389, "cali\u0144ski": 389, "1974": [389, 397, 684], "dendrit": [389, 684], "davies_bouldin_scor": [389, 1002], "6619": 389, "bould": 389, "c_i": [389, 955], "c_j": [389, 957], "s_i": 389, "diamet": 389, "nonneg": [389, 394, 428, 513, 515, 522, 848], "s_j": 389, "max_": [389, 952], "halkidi": 389, "batistaki": 389, "yanni": 389, "vazirgianni": 389, "michali": 389, "107": [389, 865, 953, 996], "145": 389, "contingency_matrix": [389, 728, 1002], "pair_confusion_matrix": [389, 1006], "permit": [390, 442, 563, 564, 566, 770, 773, 774, 783, 793, 832, 833, 952, 953, 954, 1000], "clf__c": 390, "pca1": 390, "svm1": 390, "77484909e": 390, "07058917e": 390, "pca2": 390, "svm2": 390, "raw_target_regr": 390, "bypass": [390, 574, 621, 627, 878, 879, 880, 881], "check_invers": [390, 440, 835, 962, 1002, 1008], "caller": [390, 621, 622, 627, 635, 636, 637, 656, 860, 861, 920, 928, 929, 930, 1003], "linear_pca": 390, "make_union": [390, 830, 997, 1001], "incorpor": [390, 396, 951, 972, 976], "unreli": 390, "citi": [390, 397, 441, 987], "london": [390, 397, 441], "sallisaw": [390, 441], "bow": 390, "watson": [390, 972], "moveabl": 390, "feast": 390, "grape": 390, "wrath": 390, "expert_r": 390, "user_r": 390, "city_categori": 390, "title_bow": 390, "city_london": 390, "city_pari": 390, "city_sallisaw": 390, "507": 390, "301": [390, 966], "ignored_new_col": 390, "estimator_html_repr": [390, 1005, 1006, 1007, 1008], "shrunk_covari": 391, "sigma_": [391, 619, 620, 1007], "365": [391, 448], "_k": [391, 946, 948], "glasso": [391, 453], "biostatist": [391, 453], "uncommon": [391, 633, 870, 967], "downweight": [391, 511], "driessen": [391, 444, 449, 958], "fastmcd": [391, 444, 449], "raw_location_": [391, 444, 449], "raw_covariance_": [391, 444, 449], "multidimension": [392, 663, 665, 667, 669, 949, 955], "plsw2a": 392, "u_k": [392, 394], "v_k": [392, 394, 506, 512, 520, 521], "x_k": [392, 394, 946, 955], "y_k": 392, "xi_k": 392, "omega_k": [392, 946], "gamma_k": 392, "delta_k": 392, "deflat": [392, 401, 508], "nipal": [392, 457, 458], "x_rotations_": [392, 456, 457, 458], "y_rotations_": [392, 456, 457, 458], "ty": 392, "x_weights_": [392, 456, 457, 458, 459], "y_weights_": [392, 456, 457, 458, 459], "yv": 392, "tx": 392, "pls1": [392, 458], "pls2": [392, 458], "tx_k": [392, 946], "ty_k": 392, "ja": [392, 1001], "wegelin": 392, "methodolog": [393, 975], "academ": [393, 976], "commerci": [393, 976], "flowchart": [393, 980], "simplest": [393, 949, 952, 985, 986], "f1_macro": [393, 952, 998], "custom_cv_2fold": 393, "custom_cv": 393, "9333": 393, "score_tim": [393, 794, 795], "test_": 393, "scorer1_nam": 393, "scorer2_nam": 393, "precision_macro": [393, 982], "recall_macro": [393, 952], "test_precision_macro": 393, "test_recall_macro": 393, "prec_macro": 393, "rec_macro": 393, "test_prec_macro": 393, "test_rec_macro": 393, "train_prec_macro": 393, "train_rec_macro": 393, "undistinguish": 393, "kf": [393, 775], "12883823": 393, "rkf": [393, 784], "weigh": [393, 1001], "caveat": [393, 399], "part3": 393, "spector": 393, "submodel": 393, "kohavi": 393, "jnt": 393, "bharat": [393, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "rao": [393, 1006], "fung": 393, "rosal": 393, "witten": 393, "leavepout": [393, 777, 982], "ss": 393, "gkf": 393, "sgkf": [393, 787], "suboptim": [393, 676, 762, 955, 1002], "leavepgroupsout": [393, 772, 982, 1000], "n_group": [393, 778, 982, 1000], "lpgo": [393, 778], "gss": [393, 772], "withheld": 393, "prohibit": [393, 396, 602, 957, 965, 1001], "predefinedsplit": [393, 982, 998], "test_fold": [393, 782], "train_indx": 393, "test_indx": 393, "autocorrel": 393, "superset": [393, 790, 952], "surplu": 393, "tscv": [393, 790], "inbuilt": 393, "some_integ": 393, "n_cv": [393, 413], "isotropi": 394, "alik": [394, 950], "halko": [394, 510, 516, 519, 906, 907], "szlam": [394, 906, 907], "disadvantag": [394, 399, 948, 949, 956, 966, 967, 968], "parsimoni": [394, 962], "jen09": 394, "mrl09": 394, "ell_1": [394, 948], "underset": [394, 948, 955, 968], "operatornam": [394, 714, 948, 952, 968], "fro": [394, 513, 515, 522, 668, 948], "gentli": 394, "spirit": 394, "mairal": [394, 506, 512], "bach": [394, 506, 511, 512, 513, 633, 948], "ponc": [394, 506, 512], "sapiro": [394, 506, 512], "jenatton": 394, "obozinski": 394, "scholkopf1997": 394, "bakir2003": 394, "smola": [394, 397, 510, 837, 962, 967], "klau": [394, 510, 837], "berlin": [394, 510, 671, 699, 729, 952], "heidelberg": [394, 510, 671, 699, 729, 952], "eigendecompos": 394, "eigensolv": [394, 427, 437, 510, 519, 670, 949], "eigsh": [394, 510, 1000, 1001], "lehoucq": 394, "sorensen": 394, "lsa": [394, 519, 996], "synonymi": 394, "polysemi": 394, "lsi": 394, "sigma_k": [394, 946], "columnwis": 394, "sublinear": [394, 565, 566], "use_idf": [394, 397, 565, 566, 987], "textual": [394, 968, 1003], "christoph": [394, 399, 507, 585, 586, 589, 594, 597, 768, 948, 953, 995, 999, 1002, 1005, 1006, 1007, 1008], "man": [394, 565, 742, 806, 810, 950, 952, 954], "prabhakar": 394, "raghavan": [394, 565, 806, 810, 950, 952, 954], "hinrich": 394, "sch\u00fctze": [394, 565, 950, 952, 954], "transform_method": 394, "split_cod": 394, "dictionarylearn": [394, 512, 514, 515, 517, 518, 519, 520, 521, 995, 999, 1001, 1004, 1007, 1008], "overcomplet": 394, "mammalian": 394, "cortex": 394, "inpaint": 394, "h_i": [394, 957], "unobserv": 394, "psi": 394, "sim": [394, 985], "wh_i": 394, "ww": 394, "superflu": 394, "psi_1": 394, "psi_2": 394, "psi_n": 394, "superimpos": 394, "plug": [394, 948, 976, 987], "wh": [394, 513, 515, 522], "hoyer": [394, 997], "nndsvd": [394, 513, 515, 522, 1003, 1006], "nndsvdar": [394, 513, 515, 522, 1003], "elementwis": [394, 513, 515, 522], "_featur": [394, 513, 515, 522], "kl": [394, 949, 1002], "itakura": [394, 513, 515, 522, 1001], "saito": [394, 513, 515, 522, 1001], "w_new": 394, "forget_factor": [394, 513], "lee": [394, 994, 995, 998, 1000, 1001, 1002, 1003, 1005, 1006], "seung": 394, "boutsidi": 394, "gallopoulo": 394, "cichocki": [394, 513, 515, 522], "phan": 394, "fevott": [394, 513, 515, 522], "idier": [394, 513, 515, 522], "lefevr": [394, 513], "corpora": 394, "hoffman": [394, 511, 999, 1006], "unshad": 394, "beta_k": 394, "eta": [394, 511, 651, 652, 653, 956, 966, 999], "topic_word_prior": [394, 511], "theta_d": 394, "doc_topic_prior": [394, 511], "z_": 394, "w_": [394, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 948, 954, 957], "beta_": 394, "elbo": 394, "overset": [394, 959], "e_": 394, "blei": [394, 511, 768], "wang": [394, 511, 654, 664, 668, 699, 729, 948, 949, 952, 997, 999, 1000, 1001, 1002, 1006], "paislei": [394, 511], "kaiser": [394, 507], "talli": 395, "disproportion": 395, "41075698": 395, "41076071": 395, "rho_k": 395, "unsmooth": 395, "scott": [395, 816, 994, 995, 1000, 1002, 1003, 1004, 1009], "silvermann": 395, "propto": [395, 954], "2h": 395, "angular": [395, 667, 737], "contin": [395, 688, 962], "generaliz": 396, "flavour": 396, "b1999": 396, "b1996": 396, "h1998": 396, "lg2012": 396, "bootstrap_featur": [396, 530, 531], "140": [396, 485, 491, 492, 493, 530, 531, 953], "844": [396, 530, 531], "geurt": [396, 530, 531, 532, 533, 540, 541, 880, 881], "b1998": 396, "decoupl": [396, 954], "cancel": [396, 397, 736], "b2001": 396, "bear": [396, 972], "ernst": [396, 532, 533, 540, 541, 880, 881], "wehenkel": [396, 532, 533, 540, 541, 880, 881], "l2014": 396, "lieg": 396, "freund": [396, 528, 529], "fs1995": 396, "w_1": [396, 948, 956], "w_2": [396, 948, 956], "w_n": 396, "w_i": [396, 943, 952], "reappli": 396, "htf": 396, "zzrh2009": 396, "d1997": 396, "semin": 396, "friedman2001": 396, "shelf": 396, "ecologi": 396, "lightgbm": [396, 536, 537, 1003], "nr": 396, "f_m": 396, "h_m": 396, "f_": [396, 610, 952], "l_m": 396, "taylor": [396, 1002, 1004, 1005, 1008], "g_i": [396, 624], "absolute_error": [396, 533, 535, 537, 540, 646, 879, 881, 1007], "sum_m": 396, "softmax": [396, 536, 633, 634, 955, 956], "superior": 396, "ineffici": [396, 419, 549, 799, 800, 955, 957], "r2007": 396, "friedman2002": 396, "1232": 396, "367": [396, 994], "tremend": 396, "8965": 396, "kown": 396, "grower": [396, 536, 537], "missing": [396, 602, 603, 605, 1003], "comfort": 396, "fisher1958": 396, "loan": [396, 509, 976], "nevertheless": 396, "tianqi": 396, "guestrin": 396, "ke": [396, 1005, 1006], "boostingdecis": 396, "w2": 396, "w3": 396, "lr__c": 396, "rf__n_estim": 396, "w1992": 396, "knr": 396, "stack_method": [396, 542], "225": 396, "164": 396, "stack_method_": [396, 542, 543], "final_layer_rfr": 396, "final_layer_gbr": 396, "final_lay": 396, "multi_layer_regressor": 396, "wolpert": [396, 542, 543], "temperatur": 397, "dubai": 397, "francisco": [397, 964], "movi": [397, 979], "movie_entri": 397, "thriller": [397, 842], "drama": 397, "000e": 397, "003e": 397, "011e": 397, "974e": 397, "unseen_featur": [397, 556], "speech": [397, 952], "chunker": 397, "pos_window": 397, "pos_vector": 397, "1x6": 397, "part_of_speech": 397, "token_featur": 397, "isupp": 397, "uppercase_initi": 397, "all_uppercas": 397, "raw_x": [397, 557], "pos_tagg": 397, "comprehens": [397, 731, 732, 950, 976, 1002], "murmurhash3": [397, 557, 564, 919], "weinberg": 397, "modulo": [397, 1005], "kilian": 397, "anirban": 397, "dasgupta": [397, 864, 964], "langford": [397, 663, 949], "josh": [397, 1001], "attenberg": 397, "multitask": [397, 953], "punctuat": [397, 563, 564, 566], "diminish": 397, "4x9": 397, "build_analyz": [397, 563, 564, 566, 1004], "interrog": 397, "bigram_vector": 397, "bi": 397, "cool": [397, 994], "feature_index": 397, "him": 397, "constru": 397, "nqy18": 397, "smooth_idf": [397, 565, 566], "_n": [397, 952], "textbook": [397, 565], "6x3": 397, "81940995": 397, "57320793": 397, "47330339": 397, "88089948": 397, "58149261": 397, "81355169": 397, "term1": 397, "term2": 397, "term3": 397, "0986": [397, 835], "819": 397, "8473": 397, "8515": [397, 1001], "5243": 397, "85151335": 397, "52433293": 397, "55422893": 397, "83236428": 397, "63035731": 397, "77630514": 397, "idf_": [397, 565, 566, 1002], "western": 397, "europ": [397, 962], "koi8": 397, "russian": 397, "modern": [397, 443, 478, 565, 665, 669, 703, 868, 949, 973], "unicodedecodeerror": [397, 563, 564, 566], "told": 397, "silent": [397, 556, 827, 962, 999, 1000, 1002, 1003, 1007, 1008], "chardet": 397, "chardetect": 397, "damag": 397, "sloppili": 397, "ftfy": 397, "mish": 397, "mash": 397, "text1": 397, "sei": 397, "mir": 397, "gegr": 397, "xc3": 397, "xbc": 397, "x9ft": 397, "mein": 397, "sauerkraut": 397, "text2": 397, "holdselig": 397, "sind": 397, "dein": 397, "ger": 397, "xfcche": 397, "text3": 397, "xff": 397, "xfea": 397, "x00u": 397, "x00f": 397, "x00": 397, "x00l": 397, "xfc": 397, "x00g": 397, "x00e": 397, "x00n": 397, "x00d": 397, "x00a": 397, "x00h": 397, "x00r": 397, "x00z": 397, "x00i": 397, "x00b": 397, "x00c": 397, "x00t": 397, "x00o": 397, "spolski": 397, "surprisingli": 397, "nnmf": [397, 988, 989, 994], "phrase": 397, "misspel": 397, "rescu": 397, "resili": 397, "wprd": 397, "ngram_vector": 397, "char_wb": [397, 563, 564, 566], "rd": 397, "wo": 397, "wp": [397, 632, 646], "char": [397, 563, 564, 566, 994], "jumpi": 397, "fox": 397, "1x4": 397, "umpi": 397, "1x5": 397, "mpy": 397, "fo": 397, "barrier": 397, "hv": 397, "4x10": 397, "discrep": [397, 987, 998], "4x1048576": 397, "collid": 397, "ingest": 397, "spend": 397, "my_token": 397, "lowercas": [397, 563, 564, 566, 832, 1007], "lucen": 397, "build_preprocessor": [397, 563, 564, 566, 1004], "fanci": 397, "lemmat": 397, "nltk": [397, 971, 972], "word_token": 397, "wordnetlemmat": 397, "lemmatoken": 397, "wnl": 397, "british": 397, "spell": 397, "to_british": 397, "1or": 397, "bt": 397, "1er": 397, "ing": 397, "ation": 397, "1z": 397, "ogu": 397, "og": 397, "customvector": 397, "asian": 397, "one_imag": [397, 559], "fake": 397, "assert_array_equ": 397, "patchextractor": 397, "five_imag": 397, "variancethreshold": [398, 836, 942, 997, 1004, 1007], "sel": 398, "selectfdr": [398, 567, 571, 573, 574, 575, 581, 998, 1000, 1001], "selectfw": [398, 567, 570, 571, 574, 575, 581], "genericunivariateselect": [398, 570, 571, 573, 574, 575, 577, 1008], "r_regress": [398, 581, 1007, 1008], "mutual_info_classif": [398, 567, 570, 571, 574, 575, 1000, 1006], "nonparametr": [398, 582, 583], "bewar": 398, "importance_gett": [398, 568, 569, 572, 1006], "unimport": 398, "lsvc": 398, "baraniuk": 398, "isr": 398, "ist": [398, 664, 666, 668, 864, 866], "utl": 398, "aguiar": 398, "cs_note": 398, "ferri": [398, 952], "versatil": [399, 967, 976], "optima": 399, "markov": [399, 586, 957, 972, 994], "maxima": 399, "ppmv": 399, "0336": 399, "4ppm": 399, "27ppm": 399, "197ppm": 399, "nuisanc": 399, "logit": [399, 633, 634, 948], "one_vs_on": [399, 585, 953], "ingredi": 399, "duv2014": 399, "theta_l": 399, "x_bound": [399, 592], "operand": 399, "k1__": 399, "k2__": 399, "constant_valu": [399, 588, 592], "constant_value_bound": [399, 586, 588, 592], "k1__k1__constant_valu": 399, "value_typ": [399, 592], "n_element": [399, 592], "k2__length_scal": 399, "k1": [399, 596, 599], "k1__k1": 399, "k1__k1__constant_value_bound": 399, "k1__k2": 399, "k1__k2__length_scale_bound": 399, "k2": [399, 596, 599], "k2__length_scale_bound": 399, "69314718": [399, 587, 962], "30258509": 399, "interoper": [399, 970, 973, 989], "subclass": [399, 549, 999, 1002, 1007], "pairwisekernel": 399, "_valu": [399, 588], "_level": [399, 600], "k_1": [399, 596, 599], "k_2": [399, 596, 599], "__add__": [399, 599], "__mul___": 399, "__pow__": [399, 591], "2l": [399, 597], "bigg": [399, 594], "bessel": [399, 594], "rightarrow": [399, 594, 956], "quad": [399, 955, 966], "tfrac": 399, "3l": 399, "pp84": 399, "x_d": [399, 589], "inhomogen": [399, 589], "expon": [399, 591, 651, 652, 653, 781, 828, 829, 846, 941], "carl": [399, 585, 586, 589, 594, 597], "rasmussen": [399, 585, 586, 589, 594, 597], "duvenaud": [399, 597, 598], "cookbook": [399, 597, 598], "minkowski": [400, 420, 425, 432, 663, 674, 751, 752, 753, 811, 812, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 955, 994, 997, 1008], "metric_param": [400, 420, 425, 432, 663, 667, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 998, 1001, 1008], "leaf_siz": [400, 420, 425, 432, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823], "kd_tree": [400, 420, 425, 432, 663, 664, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 955, 1007], "balltre": [400, 420, 425, 432, 663, 664, 674, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 949, 994, 996, 998, 1002, 1007], "ckdtree": [400, 420, 996], "inhibit": [400, 420], "core_sampl": 400, "n_core_sampl": [400, 420], "bulk": [400, 420], "attract": [400, 420, 946, 955, 972], "fun": [401, 508, 976], "logcosh": [401, 508], "fun_arg": [401, 508], "w_init": [401, 508], "whiten_solv": [401, 508, 1009], "return_x_mean": 401, "compute_sourc": 401, "return_n_it": [401, 429, 434, 453, 520, 521, 621, 622, 627, 628, 635, 636, 637, 638, 656, 657, 658, 659, 660, 661, 662, 669, 1008], "cube": [401, 508], "my_g": [401, 508], "x_mean": 401, "AS": 401, "fortran": [401, 516, 621, 622, 627, 628, 635, 636, 637, 638, 640, 656, 659, 660, 661, 890, 891, 994, 997, 998, 1002], "hyvarinen": [401, 508], "oja": [401, 508], "shrunk_cov": [402, 454, 455], "subobject": [403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 667, 768, 769, 770, 773, 774, 783, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881], "row_ind": [404, 426, 428], "intp": [404, 426, 428], "col_ind": [404, 426, 428], "get_submatrix": [404, 426, 428], "harsh": [405, 413, 444, 524, 525, 526, 528, 530, 532, 534, 536, 539, 542, 544, 585, 633, 641, 643, 649, 650, 651, 799, 800, 801, 802, 806, 807, 808, 809, 810, 813, 818, 821, 828, 865, 866, 870, 872, 875, 878, 880, 1004, 1006, 1009], "wrt": [405, 408, 413, 440, 456, 457, 458, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 585, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 813, 814, 818, 821, 822, 828, 829, 865, 866, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881], "n_samples_fit": [408, 440, 456, 457, 458, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 663, 804, 805, 813, 814, 815, 817, 819, 821, 822, 823, 829, 871, 873, 876, 879, 881], "uniform_averag": [408, 440, 456, 457, 458, 529, 531, 533, 535, 537, 540, 543, 545, 586, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 645, 647, 648, 653, 654, 695, 696, 701, 718, 719, 721, 723, 724, 726, 758, 804, 805, 814, 822, 829, 871, 873, 876, 879, 881, 952, 1003], "n_features_new": [409, 418, 421, 506, 507, 509, 511, 512, 514, 517, 518, 524, 542, 543, 544, 545, 557, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 603, 605, 610, 613, 614, 615, 616, 617, 820, 827, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 862, 863], "base_clf": 413, "calibrated_clf": 413, "072": [413, 623], "927": 413, "x_calib": 413, "y_calib": 413, "936": [413, 952], "prob_tru": [414, 415], "prob_pr": [414, 415], "ref_lin": 414, "alexandru": 415, "22nd": 415, "convergence_it": [416, 429], "hardcod": [416, 429, 1002], "affinity_matrix_": [416, 427, 666], "cluster_center_indic": [416, 429], "compute_full_tre": [417, 421, 998], "compute_dist": [417, 421, 1006], "inferior": [417, 421, 959, 1005], "n_leaves_": [417, 421], "n_connected_components_": [417, 421, 1003], "branching_factor": 418, "compute_label": [418, 424], "promot": [418, 682, 972, 1005, 1007], "redistribut": 418, "overwritten": [418, 507, 508, 509, 511, 516, 523, 582, 583, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 647, 649, 654, 656, 657, 658, 659, 661, 920, 922, 1007], "root_": 418, "_cfnode": 418, "cftree": 418, "dummy_leaf_": 418, "subcluster_labels_": 418, "feature_names_out": [418, 419, 421, 422, 424, 439, 456, 457, 458, 459, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 541, 542, 543, 544, 545, 556, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 602, 603, 604, 605, 610, 613, 614, 615, 616, 617, 663, 664, 815, 820, 823, 827, 830, 831, 834, 835, 836, 837, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 862, 863, 1008], "scratch": [418, 952, 996], "centroids_": [418, 818], "copy_x": [419, 422, 434, 510, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 647, 649, 654, 656, 657, 658, 659, 660, 996, 1002, 1003], "smart": [419, 434, 435, 565], "k_init": [419, 434], "sse": 419, "bisect_mean": 419, "pooling_func": [421, 1002], "xred": 421, "socg2006": 422, "min_bin_freq": [423, 436], "cluster_al": [423, 436], "get_bin_se": 423, "orphan": [423, 436, 994], "reassignment_ratio": 424, "eec": [424, 616], "tuft": 424, "dscullei": 424, "fastkmean": 424, "97727273": 424, "43181818": 424, "cluster_method": 425, "predecessor_correct": [425, 431], "unprocess": [425, 563, 564, 566], "heap": 425, "braycurti": [425, 432, 674, 751, 752, 753], "canberra": [425, 432, 674, 751, 752, 753], "chebyshev": [425, 432, 674, 751, 752, 753, 955], "dice": [425, 432, 674, 751, 752, 753], "kulsinski": [425, 432, 674, 751, 752, 753], "rogerstanimoto": [425, 432, 674, 751, 752, 753], "russellrao": [425, 432, 674, 751, 752, 753], "seuclidean": [425, 432, 674, 751, 752, 753, 818, 1002, 1005, 1006], "sokalmichen": [425, 432, 674, 751, 752, 753], "sokalsneath": [425, 432, 674, 751, 752, 753], "yule": [425, 432, 751, 752, 753], "manhattan_dist": [425, 432, 663, 735, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825, 994, 1004], "minkowski_dist": [425, 432, 663, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825], "l_p": [425, 432, 663, 813, 814, 815, 817, 819, 821, 822, 823, 824, 825], "upward": [425, 431], "successor": [425, 431, 968, 972], "predecessor": [425, 431, 432], "kdtree": [425, 432, 663, 664, 811, 813, 814, 815, 816, 817, 819, 821, 822, 823, 996, 998, 1002, 1006, 1007], "predecessor_": [425, 432], "erich": [425, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008], "gertz": 425, "lernen": 425, "wissen": 425, "daten": [425, 1002, 1003], "analysen": 425, "lwda": 425, "n_best": 426, "n_svd_vec": [426, 428], "mini_batch": [426, 428], "n_row_clust": [426, 428, 488], "n_column_clust": [426, 428, 488], "ncv": [426, 428], "n_oversampl": [426, 428, 516, 519, 907, 1008], "kernel_param": [427, 510, 614, 618], "precomputed_nearest_neighbor": [427, 666], "eigendecomposit": [427, 437, 648, 666, 670, 837], "dist_matrix": 427, "517": [427, 437, 985], "541": [427, 437], "csc_matrix": [427, 532, 533, 538, 539, 540, 541, 848, 878, 879, 880, 881, 942, 962, 968, 999], "best_n_it": 434, "n_local_tri": 435, "n_seed": 436, "multigrid": 437, "multiscal": 437, "preliminari": 437, "heapq": 438, "topolog": [438, 972], "n_connected_compon": 438, "n_leav": [438, 878, 879, 880, 881], "sparse_threshold": [439, 442, 1002], "untransform": [439, 442, 963], "transformers_": 439, "fitted_transform": 439, "remaining_column": 439, "named_transformers_": 439, "sparse_output_": [439, 526], "output_indices_": [439, 1007], "datatyp": [439, 441, 1001, 1004], "norm1": 439, "norm2": 439, "text_preprocess": 439, "num_preprocess": 439, "x_t": [439, 602, 830], "sum_n_compon": [439, 830], "transformer_": 440, "predict_param": [440, 542, 543, 831, 1007], "y_hat": 440, "90453403": 441, "50755672": 441, "30151134": 441, "print_changed_onli": [443, 868, 1003, 1005, 1006], "pairwise_dist_chunk_s": [443, 868], "enable_cython_pairwise_dist": [443, 868], "cache_s": [443, 868, 872, 873, 874, 875, 876, 967], "get_config": [443, 754, 868], "offset_": [444, 538, 652, 817, 874, 1002], "raw_support_": [444, 449], "dist_": [444, 449], "true_cov": [444, 446, 447], "7411": [444, 449, 1000], "2535": [444, 449], "3053": [444, 449], "0813": [444, 449], "0427": [444, 449], "correct_covari": [444, 449], "rvd": [444, 449], "covariance_correct": [444, 449], "comp_cov": [444, 445, 446, 447, 448, 449, 450, 451], "get_precis": [444, 445, 446, 447, 448, 449, 450, 451, 507, 509, 516], "is_inli": [444, 538, 817], "reweight_covari": [444, 449], "rvdriessen": [444, 449], "location_reweight": [444, 449], "covariance_reweight": [444, 449], "support_reweight": [444, 449], "negative_mahal_dist": 444, "7569": 445, "2818": 445, "3928": 445, "0622": [445, 451], "0193": [445, 451], "enet_tol": [446, 447, 453, 999], "graphlasso": [446, 999, 1002], "038": [446, 447, 828], "n_refin": 447, "graphlassocv": [447, 996, 1002], "dualiti": [447, 948], "094": 447, "block_siz": [448, 454, 998], "4406": 448, "1616": 448, "0595": 448, "0075": [448, 516], "rouseeuw1984": 449, "butlerdavi": 449, "butler": [449, 997, 1005, 1006], "davi": [449, 698, 952, 998], "jhun": 449, "1385": 449, "7533": [450, 1001], "2763": 450, "3964": 450, "7833": 450, "2431": 450, "3889": 450, "0195": 450, "7387": 451, "2536": 451, "4110": 451, "cov_init": 453, "return_cost": 453, "220446049250313e": [453, 625, 626, 629, 630, 631, 657, 658], "graph_lasso": [453, 1002], "flase": 453, "dual_gap": [453, 621, 622, 627, 628, 635, 636, 637, 638, 656, 659], "x_loadings_": [456, 457, 458], "y_loadings_": [456, 457, 458], "plssvd": [456, 457, 974, 989, 1006, 1008], "x_c": [456, 457, 459, 959], "y_c": [456, 457, 459], "y_reconstruct": [456, 457, 458], "x_scores_": [458, 1006], "y_scores_": [458, 1006], "y_transform": 459, "data_hom": [460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 1001], "sklearn_learn_data": [460, 473], "zero_bas": [461, 483, 484], "query_id": [461, 483, 484], "grok": 461, "qid": [461, 483, 484, 995, 1000], "download_if_miss": [462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 1001], "ioerror": [462, 463, 464, 465, 466, 467, 468, 469, 471, 472], "stopword": [463, 987], "target_column": [463, 464, 470], "versionad": [466, 542, 543, 544, 545], "percent": [466, 575, 965], "494021": 466, "slice_": [467, 468], "195": [467, 468], "unrestrict": 467, "2914": 468, "5748": 468, "n_retri": [470, 1008], "timeout": [470, 1008], "ith": [470, 747, 751, 807, 828, 829, 844, 845], "1592": 472, "1212": 472, "1624": 472, "620": 472, "ethic": 474, "data_url": 474, "cmu": [474, 865], "raw_df": 474, "skiprow": 474, "racial": 474, "segreg": 474, "led": [474, 994], "racist": 474, "destruct": 474, "carlisl": 474, "jr": [474, 948], "data_filenam": [476, 480], "target_filenam": [476, 480], "container_path": 478, "load_cont": 478, "allowed_extens": 478, "container_fold": 478, "category_1_fold": 478, "file_1": 478, "file_2": 478, "file_42": 478, "category_2_fold": 478, "file_43": 478, "file_44": 478, "versicolor": 479, "image_nam": 481, "first_img_data": 482, "backup": [483, 994], "instantan": 483, "mycach": 483, "get_data": 483, "mysvmlightfil": 483, "xn": 484, "yn": [484, 953, 954], "q1": 484, "qn": 484, "yi": [484, 954, 998, 1002, 1003, 1006], "qi": [484, 1006], "triplet": 484, "minval": [486, 488], "maxval": [486, 488], "seventh": [486, 964], "269": 486, "return_cent": [487, 1005], "intric": 487, "basri": 488, "gerstein": 488, "genom": 488, "flip_i": 490, "interdepend": 490, "polytop": 490, "guyon": [490, 568, 569, 952], "madelon": 490, "1991": [491, 492, 493], "12000": 495, "effective_rank": [496, 499], "tail_strength": [496, 499], "bell": [496, 1002, 1004, 1006, 1007], "fat": [496, 499], "crawl": [496, 899], "return_ind": 498, "make_low_rank_matrix": 499, "norm_diag": 502, "make_spd_matrix": 502, "celeux": 503, "el": [503, 1007], "anbari": 503, "marin": 503, "frequentist": 503, "n_dim": [504, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "marsland": 505, "vuw": 505, "nz": 505, "marslast": 505, "ch6": 505, "code_init": [506, 520], "dict_init": [506, 512, 520, 521], "split_sign": [506, 512, 517], "transform_max_it": [506, 512, 513, 517, 1004], "_fro": [506, 512, 520, 521, 621, 622, 627, 635, 636, 637, 656], "lasso_cd": [506, 512, 517, 523], "error_": [506, 518], "minibatchsparsepca": [506, 508, 512, 515, 517, 518, 520, 521, 994, 995, 1005, 1007, 1008, 1009], "sierra": [506, 512], "icml09": [506, 512], "x_hat": [506, 512], "noise_variance_init": 507, "quartimax": [507, 1006], "loglike_": 507, "barber": 507, "bishop": [507, 509, 516, 714, 768, 948, 953, 967], "get_covari": [507, 509, 516], "unmixing_matrix": 508, "whitening_": 508, "kpca": [508, 509, 510, 988, 989, 994], "unsaf": 509, "singular_values_": [509, 516, 519, 1001], "var_": [509, 809, 851, 1007], "574": [509, 516], "miketip": [509, 516], "mppca": [509, 516], "n_samples_seen_": [509, 840, 841, 851, 1002], "batch_size_": 509, "ross": [509, 582, 583, 968, 1008], "vision": [509, 731, 732, 944, 948, 950, 968, 972, 976, 995], "toronto": [509, 619, 827], "dross": 509, "ivt": 509, "rosslimlinyang_ijcv": 509, "karhunen": 509, "loev": 509, "levi": [509, 1001], "lindenbaum": 509, "1371": 509, "1374": 509, "abstain": 509, "holub": 509, "opportun": [509, 966], "golub": [509, 809, 851], "x_spars": [509, 923, 926], "sigma2": [509, 516], "x_origin": [509, 514, 516, 518, 519, 605, 862, 863], "check_input": [509, 523, 621, 622, 627, 635, 636, 637, 656, 662, 878, 879, 880, 881, 1002], "remove_zero_eig": [510, 996, 1003], "x_fit_": [510, 618], "eigenvalues_": [510, 1007], "eigenvectors_": [510, 1007], "dual_coef_": [510, 618, 872, 873, 874, 875, 876, 967, 998], "x_transformed_fit_": 510, "nathan": [510, 1002, 1006], "gunnar": [510, 907], "tropp": [510, 516], "217": [510, 516], "vladimir": [510, 907, 948, 1004, 1008], "rokhlin": [510, 516, 907], "tygert": [510, 516, 907], "learning_decai": 511, "evaluate_everi": 511, "perp_tol": 511, "mean_change_tol": 511, "max_doc_update_it": 511, "kappa": [511, 690], "tau_0": 511, "pseudocount": [511, 1002], "exp_dirichlet_component_": 511, "n_batch_iter_": 511, "bound_": 511, "doc_topic_prior_": 511, "topic_word_prior_": 511, "franci": [511, 633, 948, 1000], "onlineldavb": 511, "chong": 511, "00360392": 511, "25499205": 511, "0036211": 511, "64236448": 511, "09541846": 511, "15297572": 511, "00362644": 511, "44412786": 511, "39568399": 511, "003586": 511, "vb": 511, "sub_sampl": 511, "doc_topic_distr": [511, 1001], "callback": [512, 514, 520, 521, 820, 973], "invok": [512, 514, 520, 521, 542, 544, 545, 792, 867, 1006], "inner_stats_": [512, 1008], "iter_offset_": [512, 1008], "iter_offset": [512, 521, 1008], "fresh_restart": 513, "fresh_restarts_max_it": 513, "_w": [513, 515, 522], "_ratio": [513, 515, 522], "_h": [513, 515, 522], "fresh": [513, 973, 1004], "reconstruction_err_": [513, 515], "andrzej": [513, 515, 522], "anh": [513, 515, 522], "ieic": [513, 515, 522], "708": [513, 515, 522, 723], "waspa": 513, "ridge_alpha": [514, 518, 1001], "power_iteration_norm": [516, 519, 906, 907, 1008], "500x500": 516, "lu": [516, 519, 906, 907, 1000, 1001, 1002, 1003], "n_samples_": 516, "royal": [516, 602, 847, 858, 966], "methodologi": [516, 844, 942, 952, 976], "9924": 516, "30061": 516, "54980": 516, "00755": 516, "99244": 516, "ascontiguousarrai": 516, "sparse_encod": [517, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 657, 658, 659, 660, 661, 994, 1001, 1002, 1004, 1008], "u_init": 518, "v_init": 518, "9666": 518, "oversampl": [519, 994], "indeterminaci": 519, "x_dens": 519, "0157": 519, "0512": 519, "0499": 519, "0479": 519, "0453": 519, "2102": 519, "2410": 519, "5981": 519, "5420": 519, "4486": 519, "3288": 519, "method_max_it": [520, 521, 1004], "dict_learning_onlin": [520, 995, 1004, 1007, 1008], "return_cod": 521, "return_inner_stat": [521, 1008], "inner_stat": [521, 1008], "update_h": 522, "hal": [522, 633, 731, 732, 950], "copy_cov": 523, "orthogonal_mp": [523, 639, 640, 661, 948], "eigen": [524, 648, 666, 670, 946, 1000, 1003], "sum_k": [524, 968], "prior_k": 524, "c_k": 524, "priors_": [524, 525], "scalings_": [524, 525], "xbar_": 524, "reg_param": 525, "scaling_": 525, "colinear": 525, "rotations_": 525, "n_classes_": [526, 528, 530, 532, 534, 539, 585, 799, 800, 878, 880, 995, 1004, 1006], "class_prior_": [526, 809], "n_outputs_": [526, 527, 532, 533, 539, 540, 541, 828, 829, 878, 879, 880, 881], "dummy_clf": 526, "constant_": 527, "dummy_regr": 527, "base_estimator_": [528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 585, 867, 1009], "dok": [528, 529, 838, 1007], "brought": [528, 529, 532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "staged_predict_proba": [528, 534, 536, 994], "staged_scor": [528, 529], "7972": 529, "9771": 529, "estimators_samples_": [530, 531, 538, 1000, 1002, 1005], "estimators_features_": [530, 531, 538], "oob_decision_function_": [530, 532, 539], "oob_prediction_": [531, 533, 540], "8720": [531, 1002], "min_weight_fraction_leaf": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 968, 997, 1000, 1001], "min_impurity_decreas": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881, 968, 1001], "shannon": [532, 539, 878, 880, 949, 968], "unlimit": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "n_t": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "n_t_r": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "right_impur": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "n_t_l": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "left_impur": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "balanced_subsampl": [532, 539, 1002], "subtre": [532, 533, 534, 535, 539, 540, 878, 879, 880, 881, 968], "unprun": [532, 533, 539, 540, 878, 879, 880, 881], "x_leav": [532, 533, 534, 535, 539, 540, 541, 878, 879, 880, 881], "n_nodes_ptr": [532, 533, 539, 540, 541], "friedman_ms": [533, 534, 535, 540, 879, 881], "extratreeregressor": [533, 538, 541, 880, 958, 1003, 1004, 1005, 1007, 1008], "2727": 533, "dummyestim": [534, 535], "eras": [534, 535, 621, 627, 633, 635, 637, 641, 642, 643, 651, 652, 653, 828, 829], "lossfunct": [534, 535, 643, 651, 652, 1003], "init_": [534, 535], "init_estim": [534, 535], "max_features_": [534, 535, 572, 878, 879, 880, 881, 1008], "_fit_stag": [534, 535], "binary_crossentropi": [536, 1008], "categorical_crossentropi": [536, 1004, 1008], "crossentropi": 536, "deepest": [536, 537, 1005], "reserv": [536, 537, 976, 978], "do_early_stopping_": [536, 537], "n_trees_per_iteration_": [536, 537], "validation_score_": [536, 537], "is_categorical_": [536, 537], "n_trees_per_iter": 536, "longerr": 538, "max_samples_": 538, "fei": [538, 958], "ting": [538, 958, 1002, 1003], "ming": [538, 958, 998, 1002, 1003, 1004, 1008], "zhou": [538, 614, 866, 958, 1002], "zhi": [538, 958], "hua": [538, 958], "icdm": [538, 958], "eighth": [538, 958], "tkdd": 538, "n_left": 538, "32987858": 540, "n_out": 541, "one_hot_encoder_": 541, "extratreeclassifi": [541, 881, 953, 998, 1003, 1004, 1005, 1007, 1008], "moosmann": 541, "trigg": 541, "juri": 541, "random_tre": 541, "x_sparse_embed": 541, "randomtreesembedding_": 541, "final_estimator_": [542, 543], "named_estimators_": [542, 543, 544, 545, 1002, 1004], "named_estim": [542, 543, 544, 545], "parameter_nam": [542, 543, 544, 545], "new_valu": [542, 543, 544, 545], "linearsvr": [543, 876, 998, 1000, 1005], "flatten_transform": [544, 1001], "le_": 544, "eclf1": 544, "array_equ": [544, 1001], "eclf2": 544, "eclf3": 544, "maj": 544, "probabilities_or_label": 544, "n_regressor": 545, "r1": 545, "r3": 545, "er": 545, "with_traceback": [546, 547, 548, 549, 550, 551, 552], "__traceback__": [546, 547, 548, 549, 550, 551, 552], "repr": [551, 1005, 1006, 1008], "linter": 553, "spam": [556, 683, 714, 806, 952, 954, 976], "feature_names_": 556, "xa": 556, "dict_typ": 556, "1048576": [557, 564], "non_neg": [557, 1001], "eleph": 557, "patch_height": [558, 559, 562], "patch_width": [558, 559, 562], "pe": 558, "pe_fit": 558, "pe_tran": 558, "545706": 558, "image_height": [558, 559, 562], "image_width": [558, 559, 562], "n_channel": [558, 559, 562], "n_patch": [558, 559, 562], "272214": 559, "230": 559, "n_z": 560, "return_a": [560, 561, 997], "_coo": [560, 561], "image_s": 562, "strip_acc": [563, 564, 566], "nfkd": [563, 564, 566, 1004], "unicodedata": [563, 564, 566], "regexp": [563, 564, 566], "min_n": [563, 564, 566, 994], "max_n": [563, 564, 566, 994], "fixed_vocabulary_": [563, 566], "stop_words_": [563, 566], "delattr": [563, 566, 1006], "vectorizer2": 563, "raw_docu": [563, 566], "get_stop_word": [563, 564, 566], "x_inv": [563, 566], "con": 564, "yates2011": 565, "baeza": [565, 703, 997], "yate": [565, 703], "ribeiro": [565, 703, 1007], "neto": [565, 703], "addison": [565, 703], "weslei": [565, 703], "mrs2008": 565, "tfid": 565, "22314355": 565, "51082562": 565, "91629073": 565, "_check_stop_list": 566, "pvalu": [567, 570, 571, 573, 574, 575, 796], "k_best": [567, 867, 965], "fdr": 567, "fwe": 567, "iff": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 842], "retent": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578], "n_selected_featur": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578], "n_original_featur": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578], "attrgett": [568, 572], "barnhil": [568, 569], "vapnik": [568, 569], "389": [568, 569, 987], "n_subsets_of_featur": 569, "narrai": 569, "benjamini": [570, 1000, 1001], "hochberg": [570, 1000, 1001], "contnuou": 570, "false_discovery_r": 570, "norm_ord": [572, 1001], "threshold_": [572, 1001], "3252302": 572, "83462377": 572, "49750423": 572, "55245": 572, "half_cal": 572, "half_selector": 572, "unspecifi": [574, 575, 772, 949], "_get_support_mask": 576, "n_features_to_select_": 577, "variances_": 578, "weed": 579, "p_valu": [579, 580, 581], "f_statist": [580, 581], "force_finit": [581, 584, 701, 758, 952, 1008], "pearson": [581, 584, 1007], "discrete_featur": [582, 583], "essenc": [582, 583, 716, 949, 952], "hardli": [582, 583], "kraskov": [582, 583], "stogbauer": [582, 583], "grassberg": [582, 583], "phy": [582, 583], "kozachenko": [582, 583], "leonenko": [582, 583], "probl": [582, 583], "peredachi": [582, 583], "correlation_coeffici": 584, "fmin_l_bfgs_b": [585, 586], "max_iter_predict": 585, "copy_x_train": [585, 586], "one_vs_rest": [585, 953], "compoundkernel": [585, 1008], "obj_func": [585, 586], "initial_theta": [585, 586], "theta_opt": [585, 586], "func_min": [585, 586], "_posterior_mod": 585, "log_marginal_likelihood_value_": [585, 586], "9866": [585, 594, 597], "83548752": 585, "03228706": 585, "13222543": 585, "79064206": 585, "06525643": 585, "14410151": 585, "clone_kernel": [585, 586, 1004], "n_kernel_param": [585, 586], "log_likelihood_gradi": [585, 586], "x_train_": 586, "y_train_": 586, "3680": [586, 589, 600], "y_cov": 586, "n_samples_x": [586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 674, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 747, 748, 749, 750, 751, 752, 753, 754], "requires_vector_input": [587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "51292546": 587, "09861229": [587, 962], "n_samples_i": [587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 674, 731, 732, 733, 734, 736, 737, 739, 740, 741, 742, 747, 748, 749, 750, 751, 752, 753, 754], "n_kernel": 587, "k_gradient": [587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600], "k_diag": [587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600], "hyperparameter_constant_valu": 588, "3696": 588, "606": [588, 801, 953], "hyperparameter_sigma_0": 589, "edward": [589, 594, 597, 997, 1002, 1003, 1004, 1005], "hyperparameter_length_scal": [590, 594, 597, 598], "hyperparameter_period": 590, "0144": 590, "3894": 590, "3467": 590, "419": 591, "559": 591, "namedtupl": 592, "maxsiz": 592, "mat\u00e9rn": 594, "appr": 594, "8513": 594, "0368": 594, "1117": 594, "8086": [594, 1001], "0693": 594, "1220": 594, "gamma_bound": 595, "pairwise_kernels_kwarg": 595, "additive_chi2": [595, 613, 738, 747], "pairwise_kernel_funct": [595, 618, 747], "hyperparameter_gamma": 595, "9733": [595, 598], "8880": 595, "05663": 595, "05532": 595, "8676": [595, 1001], "07073": 595, "06165": 595, "__mul__": 596, "8354": [597, 1001], "03228": 597, "1322": 597, "7906": [597, 624], "0652": 597, "1441": 597, "hyperparameter_alpha": 598, "8881": 598, "0566": 598, "05518": 598, "8678": 598, "0707": 598, "0614": 598, "hyperparameter_noise_level": 600, "initial_strategi": 602, "imputation_ord": [602, 1004], "skip_complet": 602, "min_valu": [602, 1005, 1006], "max_valu": [602, 1005, 1006], "nullabl": [602, 603, 604, 605, 1005], "na": [602, 603, 604, 605, 742, 751, 888, 890, 891, 1004, 1005, 1008], "known_val": 602, "Nearness": 602, "arab": 602, "broadcast": 602, "missingind": [602, 603, 605, 942, 1002, 1003, 1004, 1008], "initial_imputer_": 602, "imputation_sequence_": 602, "feat_idx": 602, "neighbor_feat_idx": 602, "n_features_with_missing_": 602, "indicator_": [602, 603, 605], "knp": 602, "stef": [602, 942], "buuren": [602, 942], "karin": [602, 942], "groothui": [602, 942], "oudshoorn": [602, 942], "buck": 602, "1960": [602, 690], "306": 602, "imp_mean": [602, 605], "9584": [602, 1001], "nan_euclidean": [603, 735, 751], "_pairwise_cal": 603, "kwd": [603, 744, 747, 751, 754, 763, 764], "olga": [603, 942], "troyanskaya": [603, 942], "cantor": [603, 942], "gavin": [603, 942], "sherlock": [603, 942], "pat": [603, 942], "botstein": [603, 942], "russ": [603, 942], "altman": [603, 942], "bioinformat": [603, 942], "n_output_featur": 603, "error_on_new": 604, "features_": [604, 942], "n_missing_featur": 604, "x2_tr": 604, "n_features_with_miss": 604, "statistics_": 605, "n_features_missing_ind": 605, "x_imput": 605, "n_features_out": 605, "quadcontourset": 606, "quadmesh": 606, "feature_1": [606, 883], "feature_2": 606, "nicer": 606, "pcolomesh": 606, "overwrit": [606, 978, 994, 1005], "pd_result": 607, "target_idx": 607, "pdp_lim": 607, "nonexist": 607, "deciles_vlines_": 607, "vlines_": 607, "deciles_hlines_": 607, "ice_lines_kw": 607, "pd_line_kw": 607, "contour_kw": 607, "disp1": 607, "disp2": 607, "pdp_line_kw": 607, "seq": 608, "n_values_feature_j": 608, "bre": [609, 968], "4666": 609, "2211": 609, "x_min_": 610, "x_max_": 610, "n_threshold": [610, 700, 755, 762], "stepwis": [610, 629, 630, 631, 657, 658, 948], "increasing_": 610, "isotonic_regress": [610, 1007], "secondari": [610, 998], "leeuw": 610, "1977": 610, "nilotp": [610, 612], "chakravarti": [610, 612], "1989": [610, 761, 828, 829, 948, 955], "308": 610, "pava": 610, "hornik": 610, "mair": 610, "kruskal": [610, 665, 669, 949], "psychometrica": 610, "iso_reg": 610, "8628": 610, "7256": 610, "isotonicregression0": 610, "increasing_bool": 611, "fisher_transform": 611, "sample_step": 613, "sample_interv": 613, "sample_interval_": 613, "skewedchi2sampl": [613, 614, 615, 616, 944, 1001, 1008, 1009], "chi2_kernel": [613, 617, 731, 738, 950, 995], "additive_chi2_kernel": [613, 732, 738, 944], "vedaldi": [613, 944], "zisserman": [613, 944, 952], "chi2sampl": 613, "9499": 613, "component_indices_": [614, 1007], "normalization_": 614, "additivechi2sampl": [614, 615, 616, 617, 731, 732, 944, 1008], "kernel_metr": [614, 615, 616, 617], "seeger": 614, "mahdavi": 614, "jin": [614, 1005, 1006], "data_transform": 614, "9987": 614, "fft": 615, "indexhash": 615, "bithash": 615, "indexhash_": 615, "bithash_": 615, "kitchen": [616, 944], "sink": [616, 944], "random_offset_": [616, 617], "random_weights_": [616, 617], "rahimi": [616, 944], "benjamin": [616, 996, 997, 1005, 1006, 1007, 1008], "recht": [616, 944], "berkelei": [616, 878, 879], "brecht": 616, "rah": 616, "rbf_featur": [616, 944], "skewed": [617, 1001], "secant": 617, "hyperbol": [617, 828, 829, 950, 956], "fuxin": 617, "catalin": 617, "ionescu": [617, 944, 1004], "cristian": 617, "sminchisescu": [617, 944], "chi2_featur": 617, "2c": [618, 627, 647, 648, 649, 650, 662, 944], "murphi": [618, 945], "492": [618, 945, 985], "alpha_1": [619, 620, 948], "alpha_2": [619, 620, 948], "lambda_1": [619, 620, 948], "lambda_2": [619, 620, 948], "threshold_lambda": 619, "x_offset_": [619, 620, 1006], "x_scale_": [619, 620, 1006], "mackai": [619, 620, 948], "ashra": 619, "salakhutdinov": [619, 820, 955], "lectur": [619, 944, 971], "utstat": 619, "rsalakhu": 619, "sta4273": 619, "lecture2": 619, "computed_scor": 620, "appendix": [620, 651, 948, 962], "wipf": [620, 948], "nagarajan": [620, 948], "2_2": [621, 622, 627, 628, 629, 630, 631, 635, 636, 637, 638, 647, 656, 657, 658, 659], "glmnet": [621, 622, 994], "sparse_coef_": [621, 627, 635, 637, 994], "dual_gap_": [621, 622, 627, 628, 635, 636, 637, 638, 1007], "max_j": [621, 627], "w_j": [621, 627, 952, 966], "ext": [621, 627], "83816048": 621, "55968825": 621, "coef_init": [621, 622, 627, 628, 635, 636, 637, 638, 641, 643, 651, 652, 653, 656, 659], "mono": [621, 622, 627, 628, 635, 636, 637, 638, 656, 659], "_21": [621, 622, 627, 628, 635, 636, 637, 638, 656, 659], "sum_j": [621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 948, 952, 957], "alpha_min": [621, 622, 625, 627, 628, 629, 631, 635, 636, 637, 638, 656, 657, 658, 659], "alpha_max": [621, 622, 627, 628, 635, 636, 637, 638, 656, 659], "ndim": [621, 622, 627, 628, 635, 636, 637, 638, 656, 659, 890, 891], "multitaskelasticnet": [621, 622, 627, 636, 637, 638, 656, 948, 994, 1001, 1002, 1005, 1007], "multitaskelasticnetcv": [621, 622, 627, 635, 637, 638, 656, 948, 997, 1004, 1005, 1007], "l1_ratio_": [622, 634, 636], "n_l1_ratio": [622, 634, 636, 997], "199": [622, 724, 967], "398": [622, 987], "unpen": [623, 644, 655, 948], "g_j": [623, 644, 655], "896": 623, "795": 623, "pg_i": 624, "scale_": [624, 840, 841, 849, 851, 860, 962, 999], "outliers_": 624, "elvezio": [624, 948], "ronchetti": [624, 948], "concomit": [624, 948], "owen": [624, 1003, 1004], "hybrid": [624, 972], "statweb": [624, 657, 658], "hhu": [624, 1003], "284": 624, "806": 624, "7200": 624, "4923": 624, "1698": 624, "0106": 624, "9221": 624, "0226": 624, "fit_path": [625, 629, 630, 631, 657, 658], "jitter": [625, 629, 1005], "coef_path_": [625, 626, 629, 630, 948], "active_": [625, 626, 629, 630], "larscv": [625, 640, 657, 658, 1001, 1007], "1111": [625, 631], "max_n_alpha": [626, 630], "n_cv_alpha": [626, 630], "cv_alpha": [626, 630], "lassolar": [626, 627, 628, 630, 631, 638, 639, 640, 657, 658, 659, 948, 985, 994, 995, 997, 1001, 1004, 1005, 1007], "9996": 626, "2961": 626, "3996": 626, "usinglar": 627, "4951": 628, "2_fro": [628, 637, 638, 659], "coef_path": [628, 638, 659], "46874778": [628, 638, 659], "2159048": [628, 638, 659], "4425765": [628, 638, 659], "23689075": [628, 638, 659], "coef_path_lar": [628, 638, 659], "coef_path_continu": [628, 638, 659], "interp1d": [628, 638, 659], "46915237": [628, 638, 659], "23668876": [628, 638, 659], "congruenc": [629, 630, 631, 657, 658], "fragil": 630, "3972": 630, "2222": 631, "rank_": 632, "singular_": 632, "maxent": [633, 634, 948], "primal": [633, 634, 652, 870, 871, 966, 967], "synthetic_feature_weight": [633, 634], "ciyou": 633, "byrd": 633, "jorg": [633, 997, 1006, 1008], "noced": 633, "lui": [633, 995, 997, 998, 1002], "iem": 633, "lbfgsb": 633, "schmidt": [633, 948, 997], "le": [633, 839, 943, 948, 955, 963, 965, 1002, 1006, 1007], "roux": [633, 948, 965], "00860051": 633, "defazio": [633, 948], "lacost": [633, 948], "hsiang": [633, 998], "fu": [633, 998], "fang": [633, 1001, 1002], "lan": 633, "chih": [633, 999], "jen": [633, 1002], "maxent_du": 633, "cs_": 634, "l1_ratios_": 634, "coefs_paths_": [634, 1004], "coefs_path": 634, "n_l1_ratios_": 634, "w_ij": 635, "eps_": [635, 637], "45663524": 635, "45612256": 635, "0872422": 635, "fro_2": [636, 638], "multitasklassocv": [636, 997, 1004, 1005, 1007], "52875032": 636, "46958558": 636, "00166409": 636, "60809415": 637, "94592424": 637, "41888636": 637, "87382323": 637, "9994": 638, "5713": 638, "7971": 638, "9015": [638, 1002], "n_nonzero_coefs_": [639, 640], "orthogonal_mp_gram": [639, 640, 660, 1008], "mallat": [639, 660, 661, 948], "3397": [639, 660, 661], "3415": [639, 660, 661], "papier": [639, 660, 661], "mallatpursuit93": [639, 660, 661], "rubinstein": [639, 660, 661], "zibulevski": [639, 660, 661], "elad": [639, 660, 661], "technion": [639, 660, 661, 948], "ronrubin": [639, 660, 661, 948], "ksvd": [639, 660, 661, 948], "9991": [639, 640, 1002], "3854": [639, 640], "previous_loss": [641, 642, 643, 652], "pa": [641, 642, 867, 948, 952, 965], "preset": [641, 643, 651, 956], "t_": [641, 642, 643, 651, 652, 653, 828, 829, 966], "loss_function_": [641, 643, 651, 652], "volume7": [641, 642], "crammer06a": [641, 642], "crammer": [641, 642, 708, 948, 952, 967], "dekel": [641, 642, 948], "keshat": [641, 642, 948], "shalev": [641, 642, 948, 966], "shwartz": [641, 642, 948, 966], "singer": [641, 642, 708, 948, 952, 966, 967], "26642044": 641, "45070924": 641, "67251877": 641, "64185414": 641, "84127814": 641, "intercept_init": [641, 643, 651, 653], "y_all": [641, 643, 651, 799, 800, 828], "epsilon_insensit": [642, 651, 653, 871, 948, 966], "squared_epsilon_insensit": [642, 651, 653, 871, 948, 1000], "48736655": 642, "18818427": 642, "59122734": 642, "94731329": 642, "02306214": 642, "eta0": [643, 651, 652, 653, 966], "therein": 643, "939": [643, 982], "990": [644, 952], "088": [644, 960], "676": 644, "solver_opt": 645, "ipm": 645, "revis": 645, "linprog": [645, 948], "is_data_valid": [646, 948], "is_model_valid": [646, 948], "max_trial": [646, 948], "max_skip": 646, "stop_n_inli": [646, 948], "stop_scor": [646, 948], "stop_prob": 646, "mad": [646, 1000], "costlier": 646, "n_trials_": 646, "n_skips_no_inliers_": 646, "n_skips_invalid_data_": 646, "n_skips_invalid_model_": 646, "sri": [646, 948, 1001, 1002], "bmva": 646, "bmvc": [646, 948], "paper355": 646, "9885": 646, "9417": 646, "15000": [647, 662, 828, 829], "gcv_mode": [648, 996], "store_cv_valu": [648, 650, 1002, 1005], "alpha_per_target": [648, 1006], "cv_values_": [648, 650], "ridgeclassifiercv": [648, 649, 761, 952, 953, 1002, 1004, 1005, 1007, 1008], "5166": 648, "gcv": [648, 650], "9595": 649, "9630": 650, "power_t": [651, 652, 653, 828, 829, 966], "best_loss": [651, 653], "leon": [651, 652, 653, 994], "bottou": [651, 652, 653, 956, 966], "pow": [651, 652, 653, 828, 829], "dl": 651, "775047": 651, "775151": 651, "justif": 651, "volume2": 651, "zhang02c": 651, "offset_init": 652, "unshifft": 652, "n_subsampl": [654, 896], "breakdown_": 654, "n_subpopulation_": 654, "xin": [654, 948, 1002], "dang": [654, 948], "hanxiang": [654, 948], "peng": [654, 948, 1000, 1001, 1002, 1004, 1006], "xueqin": [654, 948], "hepe": [654, 948], "olemiss": 654, "xdang": 654, "mtse": 654, "9884": 654, "5871": 654, "coeff": 655, "839": 655, "copy_gram": [657, 658, 661], "return_path": [657, 658, 660, 661], "lars_path_gram": [657, 948, 1003], "tib": [657, 658], "xgamma": 660, "norms_squar": 661, "copy_xi": 661, "return_intercept": [662, 1003], "linearoper": 662, "_preprocess_data": 662, "path_method": [663, 949], "neighbors_algorithm": [663, 664], "arnoldi": [663, 664, 668], "fw": 663, "warshal": [663, 949], "kernel_pca_": 663, "nbrs_": [663, 664], "dist_matrix_": 663, "tenenbaum": [663, 949], "5500": [663, 949], "reconstruction_error": 663, "frobenius_norm": 663, "d_fit": 663, "x_fit": 663, "n_queri": [663, 813, 814, 815, 817, 819, 821, 822, 823], "hessian_tol": [664, 668], "modified_tol": [664, 668], "reconstruction_error_": 664, "rowei": [664, 668, 820, 949, 955], "saul": [664, 668, 949, 1001, 1002, 1004], "2323": [664, 668, 949], "donoho": [664, 668, 949], "grime": [664, 668, 949], "natl": [664, 668, 949], "acad": [664, 668, 949], "5591": [664, 668, 949], "mlle": [664, 668, 949], "citeseerx": [664, 666, 668], "psu": [664, 666, 668, 864, 866], "viewdoc": [664, 666, 668, 864, 866], "zha": [664, 668, 949], "shanghai": [664, 668, 949], "univ": [664, 668, 949], "406": [664, 668, 949], "normalized_stress": [665, 669, 949], "immers": [665, 669], "nonmetr": [665, 669], "smacof": 665, "stress": [665, 669, 949, 1009], "stress_": 665, "dispar": [665, 669, 949], "dissimilarity_matrix_": 665, "psychometrika": [665, 669, 949], "1964": [665, 669, 847, 858, 949], "borg": [665, 669, 949], "groenen": [665, 669, 949], "affinity_matrix": 666, "n_neighbors_": [666, 817], "8100": [666, 973], "early_exagger": 667, "min_grad_norm": [667, 1000], "square_dist": [667, 1006], "der": [667, 671, 949, 997, 998, 1002], "maaten": [667, 671, 949], "bhtsne": [667, 1001], "opentsn": 667, "abort": 667, "pdist": [667, 674, 751, 754], "pairwise_distance_funct": [667, 671, 751, 754, 955], "barn": [667, 999, 1001, 1004], "hut": [667, 999, 1001, 1004], "nlogn": 667, "kl_divergence_": [667, 1001], "learning_rate_": [667, 829], "hinton": [667, 820, 827, 828, 829, 949, 955, 956, 957], "2579": 667, "2605": 667, "lvdmaaten": [667, 1001], "oct": [667, 742, 949, 955], "3221": [667, 949], "3245": [667, 949], "jmlr_2014": 667, "belkina": [667, 949], "ciccolella": [667, 949], "anno": [667, 949], "halpert": [667, 949], "spidlen": [667, 949], "snyder": [667, 949], "cappion": [667, 949], "kobak": [667, 1007], "beren": 667, "transcriptom": 667, "guttman": 669, "norm_laplacian": 670, "drop_first": 670, "nk": 671, "2n": [671, 944, 956], "3k": 671, "cosine_dist": [671, 735, 955, 1000], "jarkko": 671, "venna": 671, "samuel": [671, 976, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "kaski": 671, "icann": 671, "verlag": 671, "485": 671, "491": 671, "twelth": 671, "pmlr": 671, "384": [671, 871], "391": 671, "im_": 672, "axesimag": 672, "text_": 672, "include_valu": 672, "values_format": [672, 1004], "im_kw": [672, 1008], "text_kw": [672, 1009], "fnr": [673, 700], "get_metr": 674, "19615242": 674, "euclideandist": 674, "manhattandist": 674, "chebyshevdist": 674, "minkowskidist": [674, 1007], "wminkowski": [674, 818, 1006, 1008], "wminkowskidist": 674, "seuclideandist": 674, "mahalanobisdist": 674, "haversinedist": 674, "arcsin": [674, 737], "hammingdist": 674, "n_unequ": 674, "n_tot": 674, "canberradist": 674, "braycurtisdist": 674, "abbrevi": 674, "ntt": 674, "ntf": 674, "nft": 674, "nff": 674, "nneq": 674, "jaccarddist": 674, "matchingdist": 674, "dicedist": 674, "kulsinskidist": 674, "rogerstanimotodist": 674, "russellraodist": 674, "sokalmichenerdist": 674, "sokalsneathdist": 674, "pyfunc": 674, "pyfuncdist": 674, "dist_to_rdist": 674, "surrog": [674, 976], "cdist": [674, 1007], "rdist_to_dist": 674, "rdist": 674, "predictionrecalldisplai": [675, 952], "drop_intermedi": [676, 762], "balanced_accuracy_scor": [677, 760, 952, 1002], "imperfectli": [677, 707, 952], "label_tru": [678, 691, 710, 728, 730, 766], "upperlimit": 678, "nat": [678, 728, 730, 1008], "expected_ri": 679, "discord": 679, "hubert1985": 679, "1007": 679, "2fbf01908075": 679, "steinley2004": 679, "wk": 679, "rand_index": 679, "adjusted_rand_index": 679, "chacon": 679, "chac\u00f3n": 679, "rastrojo": 679, "balanced_accuraci": [682, 952, 1002], "brodersen": 682, "ong": 682, "stephan": [682, 997, 1003, 1004, 1006], "buhmann": 682, "20th": 682, "3121": 682, "kelleh": [682, 952], "aoif": [682, 952], "arci": [682, 952], "y_true_categor": [683, 952], "calinski": [684, 1000], "harabasz": 684, "allow_non": 685, "thrown": [685, 1003, 1004], "tn": [686, 692, 952], "negative_class": 686, "zebra": 686, "output_dict": [687, 1002, 1006], "zero_divis": [687, 702, 703, 711, 756, 757, 760, 1004, 1006], "precision_recall_fscore_support": [687, 702, 703, 757, 760, 952, 998, 1002, 1004], "multilabel_confusion_matrix": [687, 702, 703, 711, 757, 760, 952, 1003], "conting": [688, 689, 704, 728, 1000], "n_classes_tru": [688, 728], "n_classes_pr": [688, 728], "cohen": [690, 1002], "p_o": 690, "p_e": 690, "artstein": 690, "poesio": 690, "linguist": [690, 867, 965], "555": 690, "label_pr": [691, 709, 710, 728, 730, 766], "ant": [692, 727, 952], "bird": [692, 727, 952], "a_row": 693, "a_column": 693, "b_row": 693, "b_column": 693, "tsoumaka": [694, 707, 713, 952], "kataki": [694, 707, 713, 952], "vlahava": [694, 713, 952], "handbook": [694, 713, 952], "raw_valu": [695, 696, 701, 718, 719, 721, 723, 724, 726, 758, 952, 1002, 1005], "eq": [695, 696, 697], "wainwright": [695, 696, 697], "su": [695, 696, 697], "statlearnspars": [695, 696, 697], "764": [695, 952], "8125": 695, "57142857": 695, "d2": 696, "d2_absolute_error_scor": [696, 952, 1008], "koenker": [696, 948], "roger": [696, 1001, 1002, 1006], "jos\u00e9": [696, 997, 1007], "772": 696, "045": 696, "487": 697, "630": 697, "bouldin": 698, "farther": 698, "log_bas": 699, "ignore_ti": [699, 729], "ndcg": [699, 729, 952, 1001], "ndcg_score": [699, 952, 1001, 1004, 1009], "sharper": 699, "discounted_cumulative_gain": 699, "dcg": [699, 729, 952, 1001], "jarvelin": [699, 729, 952], "kekalainen": [699, 729, 952], "colt": [699, 729, 952], "mcsherri": [699, 729, 952], "najork": [699, 729, 952], "european": [699, 729, 952], "groud": [699, 729], "true_relev": [699, 729], "propabl": 700, "imperfect": [701, 758, 952, 996], "variance_weight": [701, 758, 952], "n_unique_label": [702, 703, 711, 756, 757, 760, 918], "fbeta_scor": [702, 715, 756, 952, 996, 997, 998, 999, 1004], "undefinedmetricwarn": [702, 703, 756, 757, 760, 1003], "66666667": [702, 755, 821, 962], "lend": [703, 976], "fowlk": [704, 1000], "mallow": [704, 1000], "get_scorer_nam": [705, 952, 1008], "forgiv": 707, "upperbound": 707, "grigorio": 707, "ioanni": 707, "wareh": 707, "septemb": [707, 952, 994, 997, 1000, 1002, 1007], "pred_decis": [708, 952, 1007], "disagre": [708, 959], "kobi": 708, "yoram": 708, "265": [708, 806, 810, 954], "AND": 708, "denero": 708, "gluster": 709, "v_measur": [709, 766], "6666": [711, 952, 1000], "5833": [711, 952], "lrap": [712, 952], "416": [712, 952], "209": [714, 847], "21616": 714, "needs_proba": [715, 1003], "needs_threshold": [715, 952], "ftwo_scor": [715, 952], "mcc": [716, 952, 1008], "baldi": 716, "brunak": 716, "chauvin": 716, "andersen": [716, 1008], "nielsen": [716, 1002], "gorodkin": 716, "jurman": 716, "riccadonna": 716, "furlanello": 716, "cen": 716, "mape": [719, 952], "3273": 719, "5515": 719, "6198": 719, "112589990684262": 719, "0568": 720, "4260": [722, 725], "612": 723, "41666667": 723, "825": 723, "msle": [724, 952], "rmsle": 724, "00462428": 724, "08377444": 724, "samplewis": [727, 952], "mcm": [727, 952], "mcm_": 727, "multi_confus": 727, "normalized_discounted_cumulative_gain": 729, "dcg_score": [729, 952, 1001, 1004], "kernel_matrix": [731, 732, 739, 749], "marszalek": [731, 732, 950], "lazebnik": [731, 732, 950], "schmid": [731, 732, 950], "ouvert": [731, 732, 950], "00171412": [731, 732, 950], "cosine_similar": [733, 738, 950, 999], "dense_output": [734, 740, 863, 908, 1002], "linear_kernel": [734, 738, 950, 1002], "haversine_dist": [735, 1003], "y_norm_squar": 736, "x_norm_squar": [736, 999], "catastroph": [736, 973], "paired_dist": [736, 742, 751, 998], "41421356": [736, 742, 955], "ezeiza": 737, "airport": 737, "bueno": 737, "argentina": 737, "gaull": 737, "franc": 737, "bsa": 737, "83333": 737, "5166646": 737, "0083899664": 737, "53844117956": 737, "bsas_in_radian": 737, "paris_in_radian": 737, "6371000": 737, "kilomet": 737, "11099": 737, "54035582": 737, "polynomial_kernel": [738, 950], "rbf_kernel": [738, 950, 998], "laplacian_kernel": [738, 950, 999], "sigmoid_kernel": [738, 950], "kernal_metr": 738, "sum_over_featur": [741, 994], "componentwis": 741, "dixon": [742, 1004, 1005], "cybernet": 742, "621": 742, "ieeexplor": 742, "4310090": 742, "filter_param": 747, "jth": [747, 751], "tanh": [750, 828, 829, 950, 967], "force_all_finit": [751, 888, 890, 891, 1005, 1008], "distance_metr": [751, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825], "metric_kwarg": [752, 753], "reduce_func": [754, 1005], "d_chunk": 754, "sought": 754, "neigh": [754, 813, 814, 815, 817, 819, 821, 822, 823], "gen": 754, "probas_pr": 755, "warn_for": 756, "shantanu": 756, "godbol": 756, "sunita": 756, "sarawagi": 756, "pig": 756, "max_fpr": [761, 952, 1002], "mcclish": 761, "provost": [761, 952], "ceder": [761, 952], "stern": [761, 952], "fawcett": [761, 762, 952], "generalis": [761, 952, 973], "multioutputclassifi": [761, 800, 802, 804, 952, 1001, 1003, 1004, 1005, 1006], "n_samples_a": [763, 764], "mean_prior": 768, "degrees_of_freedom_prior": 768, "verbose_interv": [768, 769], "wishart": 768, "emipr": 768, "precisions_": [768, 769], "precisions_cholesky_": [768, 769, 1008], "converged_": [768, 769], "lower_bound_": [768, 769, 1002], "weight_concentration_prior_": 768, "weight_concentration_": 768, "mean_precision_prior_": 768, "mean_precision_": 768, "mean_prior_": 768, "degrees_of_freedom_prior_": 768, "degrees_of_freedom_": 768, "covariance_prior_": 768, "hagai": 768, "attia": 768, "bgm": 768, "n_dimens": [768, 769], "log_prob": [768, 769], "weights_init": 769, "precisions_init": [769, 1008], "gm": 769, "pre_dispatch": [770, 783, 792, 793, 794, 795, 798, 997], "error_scor": [770, 773, 774, 783, 793, 794, 795, 798, 941, 998, 1002, 1006], "explos": [770, 783, 792, 793, 794], "lightweight": [770, 783, 792, 793, 794, 972], "fitfailedwarn": [770, 773, 774, 783, 793, 794, 795, 798], "param_kernel": [770, 783], "param_degre": 770, "rank_t": 770, "split0_train_scor": [770, 783, 1000], "split1_train_scor": [770, 783], "mean_train_scor": [770, 783, 1000], "std_train_scor": [770, 783, 1000], "split0_test_precis": [770, 783], "mean_train_precis": [770, 783], "best_estim": [770, 773, 774, 783], "scorer_": [770, 773, 774, 783], "n_splits_": [770, 773, 774, 783], "refit_time_": [770, 773, 774, 783, 1002], "multimetric_": [770, 773, 774, 783], "parametergrid": [770, 996, 1002], "split2_test_scor": 770, "num_sampl": [770, 783, 1009], "stratif": [771, 772, 777, 778, 787, 788, 789, 923, 1003], "group_kfold": 771, "aggressive_elimin": [773, 774, 941], "r0": [773, 774], "replai": [773, 774], "n_remaining_candidates_": [773, 774], "n_candid": [773, 774, 941], "max_resources_": [773, 774], "min_resources_": [773, 774], "n_required_iterations_": [773, 774], "n_possible_iterations_": [773, 774], "exceed": [773, 774, 1000], "combinator": 779, "lpo": 779, "param_list": 781, "rounded_list": 781, "89856": 781, "923223": 781, "878964": 781, "038159": 781, "parametersampl": [783, 996, 1002, 1006], "2652124": 784, "rskf": 785, "36851234": 785, "sizeabl": [786, 789], "sad": [787, 788], "sss": 789, "kth": 790, "checked_cv": 791, "3315057": [793, 794], "08022103": [793, 794], "03531816": [793, 794], "test_auc": 794, "train_r2": 794, "train_auc": 794, "3635": 794, "3573": 794, "6114": 794, "28009951": 794, "3908844": 794, "22784907": 794, "exploit_incremental_learn": 795, "predispatch": [795, 798], "n_unique_tick": 795, "permutation_scor": 796, "n_valu": [798, 1002], "pairwise_indices_": 799, "label_binarizer_": 800, "multilabel_": [800, 999], "code_s": [801, 953], "code_book_": 801, "onevsoneclassifi": [801, 995, 997, 998, 1000, 1001, 1003, 1006, 1008], "bakiri": [801, 953], "pict": [801, 953], "order_": [802, 805], "regressorchain": [802, 804, 1002, 1005, 1009], "jess": [802, 953, 1007], "pfahring": [802, 953], "geoff": [802, 953], "holm": [802, 953], "eib": [802, 953], "8387": 802, "9431": 802, "4576": 802, "8878": 802, "3684": 802, "2640": 802, "0321": 802, "9935": 802, "0625": 802, "y_decis": 802, "load_linnerud": [804, 1000, 1005], "force_alpha": [806, 807, 808, 810, 1009], "lidston": [806, 807, 808, 810, 954], "class_count_": [806, 807, 808, 809, 810], "class_log_prior_": [806, 807, 808, 810], "feature_count_": [806, 808, 810], "feature_log_prob_": [806, 807, 808, 810], "categoricalnb": [806, 808, 809, 810, 954, 1004, 1005, 1006, 1007, 1009], "renni": [806, 808, 954, 1002], "schuetz": [806, 810], "234": [806, 810, 828, 829, 954], "htmledit": [806, 810, 950], "mccallum": [806, 954], "nigam": [806, 954], "metsi": [806, 954], "androutsopoulo": [806, 954], "palioura": [806, 954], "cea": [806, 954], "predict_joint_log_proba": [806, 807, 808, 809, 810, 1009], "min_categori": [807, 1006], "n_categori": [807, 845, 962], "category_count_": 807, "n_categories_": 807, "mirror": [808, 941], "mahout": 808, "weka": 808, "feature_all_": 808, "shih": [808, 954], "teevan": [808, 954], "karger": [808, 954], "616": [808, 954, 962], "623": [808, 954], "jrenni": 808, "icml03": 808, "var_smooth": [809, 1002], "stan": 809, "levequ": [809, 851], "cstr": 809, "epsilon_": 809, "theta_": [809, 954], "clf_pf": 809, "valid_metr": [811, 812, 955], "random_sampl": [811, 812, 816], "19662693": [811, 812], "29473397": [811, 812], "rebuilt": [811, 812], "tree_copi": [811, 812], "query_radiu": [811, 812], "count_onli": [811, 812], "kernel_dens": [811, 812], "94114649": [811, 812], "83281226": [811, 812], "2071716": [811, 812], "two_point_correl": [811, 812], "get_arrai": [811, 812], "get_n_cal": [811, 812], "n_call": [811, 812], "get_tree_stat": [811, 812], "tree_stat": [811, 812], "breadth_first": [811, 812, 816], "return_log": [811, 812], "k_true": [811, 812], "k_ret": [811, 812], "breadth": [811, 812, 816, 976, 996], "dualtre": [811, 812], "sort_result": [811, 812, 819, 821, 822, 823, 1006], "radii": [811, 812], "reset_n_cal": [811, 812], "effective_metric_": [813, 814, 815, 817, 819, 821, 822, 823, 955], "callbl": 813, "effective_metric_params_": [813, 814, 815, 817, 819, 821, 822, 823], "outputs_2d_": [813, 821, 1004], "nearest_neighbor_algorithm": [813, 821, 822], "333": 813, "n_index": [813, 814, 815, 817, 819, 821, 822], "neigh_dist": [813, 814, 815, 817, 819, 821, 822, 823], "neigh_ind": [813, 814, 815, 817, 819, 821, 822, 823], "nearest_neighbors_algorithm": [814, 819], "nearer": [815, 823, 955], "x_dist_graph": 815, "silverman": [816, 1009], "binarytre": [816, 998, 1002, 1006], "bandwidth_": 816, "log_dens": 816, "52955942": 816, "51462041": 816, "60244657": 816, "logprob": 816, "negative_outlier_factor": 817, "9821": 817, "0370": 817, "3697": 817, "shifted_opposite_lof_scor": 817, "opposite_lof_scor": 817, "narasimhan": 818, "chu": 818, "shrunken": [818, 994], "6567": 818, "6572": 818, "nbr": [819, 955], "neighborsclassifi": [819, 821, 822, 823, 994], "n_features_a": 820, "n_features_b": 820, "goldberg": [820, 955], "neighbourhood": [820, 955], "513": [820, 955], "ncanip": 820, "neighbourhood_components_analysi": 820, "961904": 820, "outlier_label": [821, 1004], "outlier_label_": 821, "33333333": [821, 962], "x_cluster": 823, "warn_when_not_sort": 826, "efficiencywarn": [826, 1009], "sml": [827, 957], "pcd": [827, 957], "sweep": 827, "gibb": [827, 957, 972], "intercept_hidden_": 827, "intercept_visible_": 827, "h_samples_": 827, "osindero": [827, 957], "teh": [827, 957], "1527": 827, "1554": 827, "absp": 827, "fastnc": 827, "tieleman": [827, 957], "v_new": 827, "pseudo_likelihood": 827, "relu": [828, 829], "beta_1": [828, 829], "beta_2": [828, 829], "max_fun": [828, 829, 1004], "n_layer": [828, 829], "neuron": [828, 829, 950, 956], "tan": [828, 829, 956, 1001], "rectifi": [828, 829], "kingma": [828, 829, 956], "diederik": [828, 829, 956, 1009], "jimmi": [828, 829, 956, 1000, 1002], "gradual": [828, 829, 966], "effective_learning_r": [828, 829], "best_loss_": [828, 829], "intercepts_": [828, 829, 956], "n_layers_": [828, 829], "out_activation_": [828, 829], "geoffrei": [828, 829, 956, 1005, 1006, 1007, 1008], "connectionist": [828, 829], "glorot": [828, 829], "xavier": [828, 829, 1002, 1003, 1004, 1006, 1007], "yoshua": [828, 829, 965], "feedforward": [828, 829], "kaim": [828, 829], "delv": [828, 829], "surpass": [828, 829], "imagenet": [828, 829], "log_y_prob": 828, "time_step": 829, "tranformer_list": 830, "transform_list": 830, "s__p": 831, "n_transformed_featur": 831, "predict_log_proba_param": 831, "y_log_proba": 831, "predict_proba_param": 831, "analyst": 834, "x_tr": [834, 840, 843, 844, 845, 849, 851, 853, 855, 856, 860, 861], "accept_spars": [835, 890, 891, 1001], "inv_kw_arg": 835, "pickleabl": [835, 1000], "6931": 835, "3862": 835, "x_out": [835, 844, 845], "n_bins_": 836, "int_": 836, "regener": 836, "xinv": 836, "tild": [837, 960, 962], "k_fit_rows_": 837, "k_fit_all_": 837, "1299": [837, 962], "1319": [837, 962], "n_samples1": 837, "n_samples2": 837, "k_new": 837, "neg_label": [838, 854], "y_type_": 838, "sparse_input_": 838, "tokyo": [839, 963], "amsterdam": [839, 963], "max_abs_": 840, "x_std": [841, 856, 962], "data_min_": [841, 999], "data_max_": [841, 999], "data_range_": [841, 999], "unwieldi": 842, "fi": 842, "comedi": 842, "y_indic": 842, "yt": 842, "ands": 842, "categories_": [844, 845, 962, 1002], "unregular": [844, 866, 985, 1003], "intact": [844, 987], "infrequ": [844, 952, 994, 1008], "infrequent_if_exist": [844, 962], "drop_idx_": [844, 1005], "drop_idx": 844, "gender_femal": 844, "gender_mal": 844, "group_1": 844, "group_2": 844, "group_3": 844, "drop_enc": [844, 962], "drop_binary_enc": 844, "oh": [844, 1004], "infrequent_sklearn": [844, 962], "n_encoded_featur": [844, 845], "lenient": [845, 973], "min_degre": [846, 1007], "max_degre": [846, 1007], "powers_": 846, "n_output_features_": 846, "nystrom": [846, 1003, 1004], "featurewis": 847, "power_transform": [847, 859, 1002], "biometrika": [847, 858], "959": [847, 858], "386": 847, "ignore_implicit_zero": [848, 859], "landmark": [848, 859, 962], "n_quantiles_": 848, "quantiles_": [848, 962, 1004], "references_": 848, "robustscal": [848, 860, 942, 962, 999, 1000, 1002, 1004, 1005, 1006], "with_cent": [849, 860], "with_scal": [849, 860], "unit_vari": [849, 860, 1006], "iqr": [849, 860], "interquartil": [849, 860], "quartil": 849, "75th": 849, "q_min": [849, 860], "q_max": [849, 860], "center_": 849, "robust_scal": [849, 859, 1002], "interquartile_rang": 849, "bspline": 850, "n_features_out_": 850, "with_std": [851, 861, 962, 1002], "n_samples_seen": 851, "5a": 851, "randal": [851, 998, 1008], "242": [851, 994], "247": 851, "ahead": 854, "return_norm": [857, 1001], "notimplementederror": [857, 1001], "332": 858, "compute_inverse_compon": [862, 863, 964], "inverse_components_": [862, 863, 964, 1008], "2759": [862, 863], "afor": [862, 863], "baserandomproject": [862, 863], "ping": [863, 964, 1000, 1001], "density_": 863, "gaussianrandomproject": [863, 964, 995, 1008], "church": [863, 964], "kdd06_rp": 863, "cgi": 863, "uoa": 863, "gr": 863, "opta": 863, "0182": 863, "e2": [864, 948], "93lindenstrauss_lemma": 864, "sanjoi": [864, 964], "anupam": [864, 964], "gupta": [864, 964, 1001, 1002, 1005, 1006, 1007, 1008], "elementari": [864, 964], "cites": [864, 866], "3654": 864, "663": [864, 960, 964], "11841": [864, 964], "1112658": [864, 964], "7894": [864, 964], "9868": [864, 964], "steadi": [865, 866], "baselabelpropag": [865, 1001], "xiaojin": 865, "zoubin": 865, "ghahramani": 865, "cald": 865, "jerryzhu": 865, "label_prop_model": [865, 866], "clamp": [866, 965], "dengyong": 866, "bousquet": 866, "navin": 866, "lal": 866, "schoelkopf": 866, "3219": 866, "termination_condition_": 867, "no_chang": 867, "all_label": 867, "33rd": [867, 965], "acl": [867, 965, 966], "stroudsburg": [867, 965], "196": [867, 965], "crammer_sing": [870, 953, 967, 994], "seldom": 870, "readonli": [870, 871, 1007, 1009], "raw_coef_": [870, 871], "smo": [870, 871], "526": 870, "1693": 870, "unsur": 871, "023": [871, 960], "522": 871, "class_weight_": [872, 873, 874, 875, 876, 1009], "n_sv": [872, 873, 874, 875, 876, 967, 1004], "fit_status_": [872, 873, 874, 875, 876], "n_support_": [872, 873, 874, 875, 876, 967, 1004], "proba_": [872, 875, 1005], "probb_": [872, 875, 1005], "shape_fit_": [872, 873, 874, 875, 876], "n_dimensions_of_x": [872, 873, 874, 875, 876], "regularizedlikelihood": [872, 873, 875, 876], "7798": 874, "0547": 874, "0556": 874, "0561": 874, "7332": 874, "unshift": 874, "impract": 875, "tube": [876, 967], "_tree": [878, 879, 880, 881, 995, 997], "decision_tree_learn": [878, 879, 968], "olshen": [878, 879, 968], "wadsworth": [878, 879, 968], "belmont": [878, 879, 968], "cutler": [878, 879], "cc_home": [878, 879], "htm": [878, 879], "ccp_path": [878, 879, 880, 881], "get_depth": [878, 879, 880, 881, 1003], "get_n_leav": [878, 879, 880, 881, 1003], "extra_tre": [880, 881], "8947": 880, "decision_tre": [882, 883, 884, 968], "out_fil": [882, 968], "leaves_parallel": 882, "special_charact": [882, 968], "fontnam": [882, 1007], "helvetica": [882, 884], "graphviz": [882, 968], "postscript": 882, "tpng": 882, "paint": [882, 884], "dot_data": [882, 968], "digraph": 882, "show_weight": 883, "feature_0": 883, "unrepresent": 885, "keyerror": [885, 1004], "popitem": 885, "lifo": 885, "input_nam": [889, 891, 917, 1008], "accept_large_spars": [890, 891, 1002], "ensure_2d": [890, 891], "allow_nd": [890, 891], "ensure_min_sampl": [890, 891], "ensure_min_featur": [890, 891], "y_numer": 890, "bsr": [890, 891, 1007], "x_convert": 890, "y_convert": 890, "array_convert": 891, "target_typ": [894, 917], "min_val": 894, "max_val": 894, "include_boundari": [894, 1008], "y_org": 895, "class_weight_vect": 895, "king": 895, "zen": 895, "sample_weight_vect": 896, "parenthes": 897, "type_filt": 899, "generate_onli": [901, 1004], "checks_gener": 901, "test_check_estim": 902, "check_estimators_fit_returns_self": 902, "flip_sign": 907, "svd_lapack_driv": 907, "gesdd": 907, "p5": 907, "transposit": 907, "gesvd": 907, "conquer": 907, "dot_product": 908, "deweight": 909, "min_batch_s": 910, "n_pack": [910, 911], "path_length": 912, "sliceabl": 913, "truthi": 914, "helloifeven": 914, "_x_is_even": 914, "say_hello": 914, "ducktyp": [915, 998], "inner_max_num_thread": 920, "backend_param": 920, "register_parallel_backend": [920, 1002], "pyiodin": 920, "dask": [920, 973, 1002], "workload": [920, 972], "register_rai": 920, "backend_nam": 920, "oversubscript": [920, 1008], "threadpool": 920, "effective_n_job": 920, "tracking_select": 921, "reservoir_sampl": 921, "reservoir": 921, "make_default": 922, "parallelbackendbas": 922, "resampled_arrai": 923, "3x2": [923, 926], "shuffled_arrai": 926, "last_mean": 927, "last_var": 927, "last_n": 927, "return_sum_weight": 933, "sum_weight": 933, "all_or_ani": [936, 1004], "is_fit": 936, "__sklearn_is_fitted__": [936, 1007, 1008], "eg": 936, "substitut": [936, 973, 1000], "raise_except": 938, "array_sym": 938, "is_paramet": 940, "counterpart": [941, 949, 967, 982], "enclos": 941, "set_stat": 941, "bergstra": [941, 994, 995], "tournament": 941, "dispos": [941, 987], "n_resources_i": 941, "n_resources_0": 941, "n_candidates_i": 941, "n_candidates_0": 941, "r_0": 941, "mutal": 941, "n_resourc": 941, "983667": 941, "951958": 941, "947958": 941, "961009": 941, "955989": 941, "jamieson": 941, "talwalkar": 941, "desalvo": 941, "rostamizadeh": 941, "hyperband": 941, "bandit": 941, "multimetr": [941, 1004], "calibrated_forest": 941, "select__k": 941, "model__estimator__max_depth": 941, "imp": 942, "sophist": [942, 954], "14338": 942, "13286": 942, "15611": 942, "amelia": 942, "scientist": [942, 976], "roderick": 942, "rubin": 942, "1986": [942, 968], "ol2001": 942, "mask_missing_values_onli": 942, "mask_al": 942, "rr2007": 944, "2x_iy_i": 944, "vz2010": 944, "vvz2010": 944, "prod_i": 944, "ls2010": 944, "c_0": [944, 950], "tensorsketch": 944, "pp2013": 944, "wikic": 944, "ccf2002": 944, "mercer": 944, "langl": [944, 952, 966, 967], "rangl": [944, 952, 966, 967], "y_j": [944, 952, 954, 967], "obviat": 944, "dagm": 944, "vempati": 944, "jawahar": 944, "charikar": 944, "farach": 944, "colton": 944, "m2012": 945, "mu_k": 946, "cst": 946, "omega_": 946, "k0": 946, "h_l": 946, "extrema": 946, "119": [946, 997], "honei": 946, "stork": 946, "dilemma": 947, "valid_scor": 947, "w_0": 948, "w_p": 948, "x_p": 948, "34545455": 948, "13636": [948, 1003], "rifkin": 948, "lippert": 948, "2n_": 948, "softw": 948, "kim": [948, 1002, 1003, 1004, 1008], "koh": [948, 976], "lustig": 948, "boyd": 948, "gorinevski": 948, "c_p": 948, "cherkasski": 948, "yunqian": 948, "1714": 948, "ell_2": 948, "equiangular": 948, "weisberg": 948, "ell_0": [948, 952], "_coef": 948, "mp": 948, "ell_": 948, "posteriori": [948, 954], "radford": 948, "neal": [948, 1007], "50000013": 948, "49999993": 948, "ellipt": 948, "lambda_i": 948, "srikantan": 948, "tristan": 948, "fletcher": [948, 994, 998], "deliber": 948, "overparameter": 948, "ldot": [948, 952, 954, 956, 966], "w_l": 948, "min_w": 948, "iverson": 948, "broyden": 948, "goldfarb": 948, "shanno": 948, "statsmodel": [948, 972], "aaron": [948, 997, 998, 999, 1004], "simon": [948, 976, 997, 998, 1007, 1008], "93fletcher": 948, "93goldfarb": 948, "93shanno_algorithm": 948, "noah": 948, "multirespons": 948, "edm": 948, "agricultur": 948, "rainfal": 948, "interrupt": 948, "mccullagh": 948, "nelder": 948, "boca": 948, "raton": 948, "chapman": 948, "hall": [948, 1001, 1005], "crc": 948, "31760": 948, "j\u00f8rgensen": 948, "monografia": 948, "matem\u00e1tica": 948, "2463": 948, "4337": 948, "7638": 948, "disappear": [948, 994], "photogrammetr": 948, "hypothes": 948, "paradigm": 948, "cartographi": 948, "fischler": 948, "boll": 948, "sunglok": 948, "choi": 948, "taemin": 948, "wonpil": 948, "93sen_estim": 948, "binom": 948, "infeas": [948, 955, 957], "k\u00e4rkk\u00e4inen": 948, "\u00e4yr\u00e4m\u00f6": 948, "h_": 948, "oarc": 948, "dae": 948, "bassett": 948, "econometrica": 948, "econometr": 948, "portnoi": 948, "hare": 948, "tortois": 948, "paraboloid": 948, "w_3": 948, "w_4": 948, "w_5": 948, "surpris": [948, 972, 996], "z_1": 948, "z_2": 948, "z_3": 948, "z_4": 948, "z_5": 948, "streamlin": 948, "gotten": [948, 962], "necess": [949, 955], "strife": 949, "mother": 949, "baloo": 949, "song": 949, "jungl": 949, "rubric": 949, "defici": [949, 966], "hlle": 949, "revolv": 949, "belkin": 949, "niyogi": 949, "1373": 949, "1396": 949, "molecul": 949, "countri": 949, "jk": 949, "delta_": 949, "c_1": 949, "disentangl": 949, "legitim": 949, "tricki": 949, "die": 949, "favour": [949, 951, 1003], "noisier": 949, "5415": 949, "circuit": 949, "brief": 950, "num_featur": [950, 1009], "quantum": 950, "nutshel": 950, "36787944": 950, "89483932": 950, "58364548": 950, "51341712": 950, "83822343": 950, "7768366": 950, "facil": 951, "equi": 951, "agnost": [951, 960], "cue": 951, "came": 951, "quicker": 951, "unpract": 951, "depict": 951, "analogi": [951, 952], "negat": 952, "top_k_accuraci": 952, "top_k_accuracy_scor": [952, 1006, 1008], "neg_brier_scor": [952, 1004], "f1_micro": [952, 998], "f1_weight": [952, 998], "f1_sampl": 952, "neg_log_loss": 952, "roc_auc_ovr": [952, 1004], "roc_auc_ovo": [952, 1004], "roc_auc_ovr_weight": [952, 1004], "roc_auc_ovo_weight": [952, 1004], "explained_variance_scor": [952, 997, 1001, 1008], "max_error": [952, 1003], "neg_mean_squared_log_error": 952, "mean_squared_log_error": [952, 1001, 1007], "neg_median_absolute_error": 952, "neg_mean_poisson_devi": 952, "neg_mean_gamma_devi": 952, "mean_gamma_devi": [952, 1004], "d2_pinball_scor": [952, 1008], "d2_tweedie_scor": [952, 1007], "wrong_choic": 952, "_error": 952, "my_custom_loss_func": 952, "693": 952, "protocol": [952, 997], "custom_scoring_funct": 952, "custom_scorer_modul": 952, "confusion_matrix_scor": 952, "test_tp": 952, "test_fn": 952, "untru": 952, "dividend": 952, "divisor": 952, "quotient": 952, "texttt": 952, "_class": 952, "youden": 952, "informed": 952, "mosley2013": 952, "kelleher2015": 952, "guyon2015": 952, "urbanowicz2015": 952, "escalant": 952, "escalera": 952, "maci\u00e0": [952, 1007], "saeed": 952, "statnikov": 952, "viega": 952, "chalearn": 952, "automl": [952, 972], "ijcnn": 952, "moslei": 952, "ijcv": 952, "urbanowicz": 952, "exstrac": 952, "evol": 952, "cohen_kappa_scor": [952, 999, 1001], "4285714285714286": 952, "manning2008": 952, "everingham2010": 952, "davis2006": 952, "flach2015": 952, "everingham": 952, "gool": 952, "winn": 952, "pascal": 952, "voc": 952, "goadrich": 952, "y_l": 952, "_l": 952, "emptyset": 952, "f_beta": 952, "hinge_loss": [952, 998, 1006, 1007], "wy": 952, "y_w": 952, "y_t": 952, "1738": 952, "matthews_corrcoef": [952, 994, 1000, 1001, 1008], "t_k": [952, 968], "ik": 952, "ki": 952, "kk": 952, "auroc": 952, "ht2001": 952, "fc2009": 952, "pd2000": 952, "f2006": 952, "f2001": 952, "inner_clf": 952, "c\u00e8sar": 952, "hernandez": 952, "orallo": 952, "modroiu": 952, "wikipediadet2017": 952, "martin1997": 952, "navratil2007": 952, "encyclopedia": 952, "utc": 952, "php": [952, 972], "detection_error_tradeoff": 952, "oldid": 952, "798982054": 952, "doddington": 952, "kamm": 952, "ordowski": 952, "przybocki": 952, "navractil": 952, "klusacek": 952, "acoust": 952, "icassp": 952, "honolulu": 952, "iv": 952, "232": 952, "brier1950": 952, "p_i": [952, 955], "bella2012": 952, "flach2008": 952, "bella": 952, "hern\u00e1ndez": 952, "ram\u00edrez": 952, "quintana": 952, "khosrow": 952, "pour": 952, "hershei": 952, "edson": [952, 999], "matsubara": 952, "dagstuhl": 952, "seminar": 952, "schloss": 952, "leibniz": 952, "zentrum": 952, "lr_": 952, "brenner": 952, "gefel": 952, "991": 952, "coverage_error": [952, 998, 1008], "label_ranking_average_precision_scor": [952, 998, 1002, 1003, 1009], "label_ranking_loss": [952, 999], "grade": 952, "unalt": 952, "epsilon_i": 952, "965": 952, "925": [952, 982], "7083": 952, "log_": 952, "growth": [952, 999, 1000], "commod": 952, "mapd": 952, "2e6": 952, "2666": 952, "meda": 952, "y_n": [952, 956, 966], "elicit": 952, "2500": 952, "mean_pinball_loss_95p": 952, "skill": 952, "mcfadden": 952, "d2_tweedie_score_15": 952, "d2_pinball_score_08": 952, "pear": 953, "y_dens": 953, "y_spars": 953, "advoc": 953, "unambigu": [953, 1000], "financ": 953, "f3": 953, "y3": 953, "documentat": 953, "multi_target_forest": 953, "wind": 953, "75474165": 953, "147": 953, "03498585": 953, "03812219": 953, "12165031": 953, "12914884": 953, "46081961": 953, "8948621": 953, "44373091": 953, "88978285": 953, "62745778": 953, "02891072": 953, "48204257": 953, "03260883": 953, "165": 953, "34867495": 953, "52003279": 953, "92529176": 953, "25719016": 953, "84253": 953, "25193977": 953, "16443186": 953, "12274212": 953, "170388": 953, "80956739": 953, "16979946": 953, "72667194": 953, "50941682": 953, "50447799": 953, "37967282": 953, "15699552": 953, "72850319": 953, "prod_": 954, "downarrow": 954, "spite": 954, "famous": 954, "serious": 954, "flair": 954, "2_y": 954, "mu_i": 954, "sigma_i": 954, "theta_i": 954, "cnb": 954, "mnb": 954, "inventor": 954, "alpha_i": [954, 967], "cj": [954, 997, 998, 999, 1000, 1001], "summat": [954, 956], "min_c": 954, "t_i": 954, "poorest": 954, "n_i": 954, "kdt": 955, "farawai": 955, "invent": 955, "orthotrop": 955, "bentlei": 955, "1975": 955, "omohundro": 955, "characteris": 955, "unaffect": 955, "amort": 955, "cache_path": 955, "gettempdir": 955, "unsort": [955, 995, 998, 1002], "5807": 955, "nca_pip": 955, "96190476": 955, "limits_": 955, "ne": 955, "lx": 955, "x_m": 956, "leftmost": 956, "w_1x_1": 956, "w_2x_2": 956, "w_mx_m": 956, "backpropag": 956, "b_1": 956, "b_2": 956, "z_l": 956, "dfrac": [956, 962], "nabla": 956, "rumelhart": 956, "jiquan": 956, "ngiam": 956, "chuan": 956, "yifan": 956, "carolin": 956, "suen": 956, "backprop": [956, 966], "lecun": [956, 966], "orr": [956, 966], "strai": 957, "v_ih_j": 957, "b_iv_i": 957, "c_jh_j": 957, "h_j": 957, "v_i": 957, "b_i": 957, "sum_h": 957, "fantasi": 957, "particl": 957, "thoroughli": 957, "hereund": 958, "1443": 958, "1471": 958, "outlying": 958, "h2009": 959, "g2015": 959, "absurd": 959, "m2019": 959, "mc_clf": 959, "466": 959, "624": 959, "overlaid": 959, "obscur": 959, "cice": [959, 1008], "pd_": 959, "dx_c": 959, "footnot": [959, 972], "molnar": 959, "opaqu": 960, "x_val": 960, "y_val": 960, "356": 960, "probe": 960, "048": 960, "r_multi": 960, "081": 960, "1013": 960, "726": 960, "i_j": 960, "min_max_scal": [962, 999], "x_train_minmax": 962, "x_test_minmax": 962, "max_abs_scal": 962, "x_train_maxab": 962, "x_test_maxab": 962, "excess": [962, 1001], "unintention": 962, "kernelcenter": [962, 1004, 1008], "semidefinit": [962, 967], "scholkopf1998": 962, "1_": 962, "x_train_tran": 962, "x_test_tran": 962, "8pt": 962, "x_normal": 962, "firefox": 962, "chrome": 962, "safari": 962, "africa": 962, "meth": 962, "dragon": 962, "lexicon": 962, "infant": 962, "kid": 962, "teen": 962, "adult": 962, "senior": [962, 976], "citizen": 962, "retbin": 962, "x_1x_2": 962, "x_1x_3": 962, "x_2x_3": 962, "x_1x_2x_3": 962, "rung": 962, "eiler": 962, "marx": 962, "perperogl": 962, "sauerbrei": 962, "abrahamowicz": 962, "bmc": 962, "methodol": 962, "38629436": 962, "sixteenth": 964, "uai": 964, "craig": [964, 997, 1002], "boutili": 964, "mois\u00e9": 964, "goldszmidt": 964, "ella": 964, "bingham": 964, "heikki": 964, "mannila": 964, "245": [964, 996], "explic": 964, "3947": 964, "671": 964, "687": 964, "kenneth": [964, 994, 995, 1000, 1001, 1008], "12th": 964, "287": 964, "x_new_invers": 964, "x_new_again": 964, "delalleau": 965, "aistat": 965, "gatsbi": 965, "ucl": 965, "uk": [965, 987], "fullpap": 965, "xi_i": 966, "slack": 966, "varepsilon": [966, 967], "t_0": 966, "l\u00e9on": [966, 1008], "_init_t": 966, "basesgd": 966, "eta_0": 966, "_t": 966, "svmsgd": 966, "pegaso": 966, "srebro": 966, "tsuruoka": 966, "tsujii": 966, "ananiad": 966, "afnlp": 966, "lin_clf": 967, "grasp": [967, 973], "sv": 967, "builtin": 967, "rapidli": [967, 976, 981], "qp": 967, "linear_svc": 967, "gram_train": 967, "gram_test": 967, "zeta": 967, "zeta_i": 967, "textrm": [967, 985], "q_": 967, "equiv": 967, "reparameter": 967, "wu": [967, 998, 1006], "weng": 967, "975": 967, "1005": 967, "rong": 967, "aug": 967, "1871": 967, "1874": 967, "ofmulticlass": 967, "fitter": 968, "pariti": 968, "multiplex": 968, "export_graphviz": [968, 999, 1001, 1007, 1009], "export_text": [968, 1003], "dumont": 968, "subwindow": 968, "beforehand": 968, "dichotomis": 968, "multiwai": 968, "proprietari": 968, "ruleset": 968, "q_m": 968, "n_m": 968, "t_m": 968, "setminu": 968, "mk": 968, "probalist": 968, "_m": 968, "ge0": 968, "widetild": 968, "tradition": 968, "t_t": 968, "eff": 968, "predictive_analyt": 968, "troubleshoot": 970, "artwork": 970, "fund": 970, "spotifi": 970, "betawork": 970, "evernot": 970, "aweb": 970, "yhat": 970, "rangespan": 970, "birchbox": 970, "bestofmedia": 970, "phimeca": 970, "howaboutw": 970, "peerindex": 970, "datarobot": 970, "okcupid": 970, "love": [970, 987], "publica": 970, "machinali": 970, "solido": 970, "infonea": 970, "dataiku": 970, "otto": 970, "zopa": 970, "bnp": 970, "pariba": 970, "cardif": 970, "post1": [970, 992], "foot": 971, "gear": 971, "neuroimag": [971, 976], "astronom": 971, "pycon": 971, "thirti": 971, "nyc": [971, 976], "sister": 972, "sklearn_panda": 972, "sklearn_xarrai": 972, "xarrai": 972, "autoviml": 972, "tpot": 972, "featuretool": 972, "tempor": [972, 973], "neuraxl": 972, "neat": [972, 994], "checkpoint": 972, "funki": 972, "saver": 972, "evalml": 972, "neptun": 972, "mlop": 972, "sacr": 972, "dtreeviz": 972, "eli5": 972, "mlxtend": 972, "yellowbrick": 972, "deap": 972, "evolutionari": 972, "interchang": 972, "jpmml": 972, "porter": 972, "transpil": 972, "javascript": 972, "m2cgen": 972, "dart": 972, "haskel": 972, "rust": 972, "treelit": 972, "tslearn": 972, "sktime": 972, "hmmlearn": 972, "pomegran": 972, "crfsuit": 972, "nolearn": 972, "lasagn": 972, "theano": 972, "skorch": 972, "scikera": 972, "scikit_learn": 972, "feder": 972, "lego": 972, "subsembl": 972, "lightn": 972, "sdca": 972, "adagrad": 972, "svrg": 972, "nadaraya": 972, "gplearn": 972, "genet": 972, "multilearn": 972, "seglearn": 972, "libopf": 972, "fastfm": 972, "kmode": 972, "sphereclust": 972, "mise": 972, "giotto": 972, "tda": 972, "pymc": 972, "censor": 972, "lightfm": 972, "openrec": 972, "spotlight": 972, "gensim": 972, "nilearn": 972, "neuro": 972, "astroml": 972, "astronomi": 972, "msmbuilder": 972, "dissemin": 972, "chines": 972, "persian": 972, "spanish": 972, "disclaim": 972, "promis": 973, "eleven": 973, "incept": 973, "scala": 973, "numba": 973, "reinforc": 973, "era": 973, "7242": 973, "12147": 973, "5523": 973, "10733": 973, "13902": [973, 1004], "12800": 973, "12866": 973, "15550": 973, "5853": 973, "11805": 973, "15319": 973, "11977": 973, "12852": [973, 1004], "13911": [973, 1004], "amput": 973, "6284": 973, "beginn": 973, "priorit": [973, 1001], "4497": 973, "7646": 973, "6425": 973, "6424": 973, "8480": 973, "6231": 973, "6599": 973, "6715": 973, "14582": 973, "3855": 973, "13227": 973, "6323": 973, "14180": [973, 1005], "9173": 973, "13146": [973, 1004], "8614": 973, "7608": 973, "5082": 973, "8243": 973, "searchgrid": 973, "6929": 973, "__array_function__": [973, 1004], "etl": [973, 976], "8370": 973, "6451": 973, "lifecycl": 973, "8157": 973, "7382": 973, "drift": 973, "11047": [973, 1004], "9326": 973, "slep011": 973, "1626": 973, "10463": 973, "id3": [974, 989], "cart": [974, 989], "touch": 975, "gdb": 975, "savetxt": 975, "cloneabl": 975, "datafil": 975, "printabl": 975, "indispens": 976, "stephen": [976, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007], "simmon": 976, "vp": 976, "athena": 976, "music": 976, "bernhardsson": 976, "pariet": [976, 994], "lear": 976, "visag": 976, "fantast": 976, "startup": 976, "bitli": 976, "chartbeat": 976, "digg": [976, 1001], "poncho": 976, "gilad": 976, "lotan": 976, "chief": 976, "chat": 976, "bread": 976, "butter": 976, "chaumond": [976, 1002], "offic": 976, "ayzenshtat": [976, 1002], "undergrad": 976, "professor": 976, "hotel": 976, "destin": 976, "fraudul": 976, "agent": 976, "melani": [976, 1001, 1002], "awesom": 976, "stuff": 976, "randomizedpca": [976, 994, 996, 997, 999, 1000, 1001], "mdbecker": 976, "pydata_2013": 976, "ninja": 976, "thorough": 976, "notch": 976, "production": 976, "greg": [976, 1000, 1001, 1003, 1004], "lamp": 976, "founder": 976, "prototyp": 976, "jurgen": 976, "director": 976, "commerc": 976, "inventori": 976, "bertin": 976, "mahieux": 976, "invalu": 976, "vijai": [976, 997], "traine": 976, "impress": 976, "traffic": 976, "tenur": 976, "matchmak": 976, "weitzenfeld": 976, "tweet": 976, "ferenc": 976, "huszar": 976, "shop": 976, "ourselv": 976, "jeremi": [976, 999, 1000, 1001, 1002, 1005, 1006], "achin": 976, "ceo": 976, "marketplac": 976, "fraud": 976, "frid": [976, 997], "radar": 976, "partnership": 976, "lebourgeoi": 976, "charron": [976, 997, 998, 1005, 1006, 1007], "cornerston": 976, "sheep": 976, "featureforg": 976, "rafael": [976, 995, 996, 998, 1001], "carrascosa": [976, 998], "law": 976, "semiconductor": 976, "fab": [976, 1004, 1005], "bleed": 976, "chip": 976, "smartphon": 976, "automobil": 976, "trent": [976, 1000], "mcconaghi": 976, "rapid": 976, "immens": 976, "thorsten": 976, "kranz": 976, "coma": 976, "dss": 976, "douetteau": 976, "b2c": 976, "palladium": 976, "rammig": [976, 1000], "peer": 976, "billion": 976, "gbp": 976, "grate": 976, "vlasio": [976, 1001], "vasilei": [976, 1001], "petfood": 976, "cocoa": 976, "worldwid": 976, "toolset": 976, "equip": 976, "fitzk": 976, "sr": 976, "fondat": 976, "s\u00e9bastien": [976, 1000, 1002], "conort": 976, "salmon": 978, "nine": 978, "sentiment": 979, "cli": 979, "doctest_mod": 979, "hardest": 980, "tightli": 981, "knit": 981, "x_fold": 982, "array_split": 982, "y_fold": 982, "934": 982, "train_indic": 982, "test_indic": 982, "963": 982, "922": 982, "96388889": 982, "92222222": 982, "9637883": 982, "93036212": 982, "96578289": 982, "92708922": 982, "96681476": 982, "96362897": 982, "93192644": 982, "0077": 982, "943": 982, "00375": 982, "lfw_": 983, "_lfw": 983, "gerhard_schroed": 983, "donald_rumsfeld": 983, "tony_blair": 983, "colin_powel": 983, "george_w_bush": 983, "282": [983, 994], "estimated_param_": 984, "iris_x": 985, "iris_i": 985, "iris_x_train": 985, "iris_y_train": 985, "iris_x_test": 985, "iris_y_test": 985, "pave": 985, "paltri": 985, "exabyt": 985, "30349955": 985, "63931533": 985, "510": 985, "53060544": 985, "73698041": 985, "13170937": 985, "81458798": 985, "84845219": 985, "60648906": 985, "51961675": 985, "09517222": 985, "585": 985, "5854": 985, "5855": 985, "occam": 985, "razor": 985, "best_alpha": [985, 994], "025118864315095794": 985, "313": 985, "knew": 986, "taxonomist": 986, "face_compress": 986, "x_approx": 986, "images_approx": 986, "18565811e": 986, "19346747e": 986, "43026679e": 986, "text_analyt": 987, "skeleton": [987, 997], "sklearn_tut_workspac": 987, "cp": 987, "work_directori": 987, "tutorial_hom": 987, "fetch_data": 987, "lang": 987, "newsweed": 987, "netnew": 987, "bydat": 987, "twenty_train": 987, "holder": 987, "2257": 987, "sd345": 987, "collier": 987, "laserjet": 987, "iii": [987, 1008], "hampton": 987, "4gb": 987, "count_vect": 987, "x_train_count": 987, "35788": 987, "4690": 987, "downscal": 987, "tf_transform": 987, "x_train_tf": 987, "tfidf_transform": 987, "x_train_tfidf": 987, "na\u00efv": 987, "docs_new": 987, "opengl": 987, "x_new_count": 987, "x_new_tfidf": 987, "text_clf": 987, "twenty_test": 987, "docs_test": 987, "8348": 987, "9101": [987, 1002], "1502": 987, "380": 987, "353": 987, "tfidf__use_idf": 987, "searcher": 987, "gs_clf": 987, "workspac": 987, "fear": 987, "fire": 987, "exercise_xx_script": 987, "arg1": 987, "arg2": 987, "arg3": 987, "mortem": 987, "charngramanalyz": 987, "exercise_01_language_train_model": 987, "exercise_02_senti": 987, "movie_review": 987, "txt_sentoken": 987, "cpickl": 987, "polar": 987, "subtleti": 989, "subscrib": 992, "gzip": 994, "bzip2": 994, "decompress": 994, "auc_scor": [994, 996], "kernc": [994, 1008], "probabilisticpca": [994, 997], "hmm": [994, 995, 996, 997, 999], "gaussianhmm": 994, "multinomialhmm": 994, "n_gram_rang": 994, "267": 994, "alexi": [994, 997, 998, 1001], "mignon": [994, 997, 998, 1001], "subhodeep": [994, 995, 996], "moitra": [994, 995, 996], "yannick": [994, 996], "schwartz": [994, 996, 1008], "duckworth": 994, "benediktsson": [994, 995, 996], "marko": [994, 1003, 1004], "burjek": 994, "pinto": 994, "abraham": [994, 995, 1000, 1004], "hoenig": 994, "flyingimmidev": 994, "francoi": [994, 1007], "savard": 994, "hann": 994, "schulz": 994, "welind": 994, "companioni": 994, "brandyn": 994, "bussonni": [994, 1006], "matthia": [994, 996, 997, 1000, 1001, 1002, 1006, 1009], "pierr": [994, 1002, 1003, 1005, 1007, 1009], "astolfi": 994, "huiginn": 994, "goodman": [994, 999], "ludwig": 994, "schwardt": 994, "hervieu": 994, "sergio": [994, 996, 997, 1006], "medina": [994, 996], "sheerman": 994, "buguen": 994, "seq_dataset": [994, 1004], "weight_vector": [994, 1004], "reuben": 994, "costin": 994, "_basehmm": 994, "neighborsregressor": 994, "gone": [994, 995], "vbgmm": [994, 998, 1000], "_pvalu": 994, "charset": [994, 996], "test_fract": 994, "train_fract": 994, "239": 994, "marek": 994, "fcostin": 994, "adrien": 994, "gaidon": 994, "joona": 994, "sillanp\u00e4\u00e4": 994, "mccarthi": [994, 1002], "roi": [994, 1008], "hyunjin": 994, "ibay": 994, "scheidegg": 994, "clair": 994, "revillet": 994, "conrad": [994, 995, 1009], "meng": [994, 995, 998, 1000, 1001], "xinfan": [994, 995, 998], "udi": 994, "weinsberg": 994, "janso": 994, "palafox": 994, "overwrite_": 994, "copy_": 994, "buffer_mb": 994, "sparse_encode_parallel": 994, "accident": [994, 998, 1003], "basedictionarylearn": 994, "sparsecodingmixin": 994, "fast_svd": 994, "arnold": [994, 995], "bala": [994, 997], "subrahmanyam": [994, 997], "varanasi": [994, 997], "draxu": 994, "eickenberg": [994, 996, 997, 998, 999], "bogdan": 994, "trach": 994, "f\u00e9lix": [994, 996, 997, 998, 1002], "antoin": [994, 996, 997, 998, 1001], "fortin": [994, 996, 997, 998], "manuel": [994, 998, 1002, 1003, 1006, 1007], "caicedo": 994, "carvaj": 994, "tiziano": 994, "zito": [994, 1007], "jean": [994, 997, 998, 999, 1000, 1001, 1007], "kossaifi": [994, 998, 999], "thumbnail": 994, "bugfix": 994, "univariate_select": 994, "mldata": [994, 1002], "pietro": [994, 997], "berk": 994, "macosx": 994, "xarg": 994, "bscikit": 994, "cross_val": 994, "bcross_val": 994, "lurk": 994, "l1_distanc": 994, "387": 994, "168": 994, "andi": [994, 1001], "amit": [994, 1008], "salvator": [994, 1008], "masecchia": 994, "schut": 994, "metaireau": [994, 997], "bryan": [994, 997, 1003, 1004, 1007], "silverthorn": 994, "minwoo": 994, "luca": [994, 1004, 1005, 1006, 1007], "wiman": 994, "schl\u00fcter": [994, 1002], "malet": 994, "miott": [994, 997], "feth": 994, "arezki": 994, "yamin": 994, "notes_neighbor": 994, "netbsd": 994, "kamel": 994, "ibn": 994, "hassen": 994, "derouich": 994, "virgilefritsch": 994, "example_gaussian_process_plot_gp_regress": 994, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 994, "tast": 994, "2x": 994, "10x": 994, "200x": 994, "laur": 994, "fouqu": 994, "ronan": [994, 997, 1002], "amicel": [994, 997], "osendorf": [994, 995], "gmmhmm": [994, 995], "latex": 994, "mlcomp": 994, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 994, "pybrain": 994, "262": 994, "116": 994, "rokem": [994, 1000], "100x": [994, 997], "obsolet": 994, "attrselect": 994, "unmaintain": 994, "lite": 994, "filo": [994, 997], "mailhot": 994, "huard": 994, "dave": [994, 1001, 1002, 1008], "morril": 994, "schofield": 994, "oliph": 994, "pearu": 994, "peterson": [994, 996], "0d": 995, "marchman": [995, 996], "hrishikesh": [995, 996], "huilgolkar": [995, 996], "bastiaan": [995, 996], "diego": [995, 996], "molla": [995, 996], "cunha": [995, 996], "almeida": [995, 996, 1007], "rolando": [995, 996], "espinoza": [995, 996], "fuent": [995, 996], "formerli": [995, 998, 1000, 1001], "beauchamp": [995, 998], "longstand": [995, 1001], "shaun": 995, "jackman": 995, "winterman": 995, "seberg": 995, "n_atom": 995, "label_propag": 995, "learn_rat": 995, "basegradientboost": 995, "mean_square_error": 995, "gmm_": 995, "eig_tol": 995, "chunk_siz": 995, "zero_one_scor": 995, "aymer": 995, "masurel": 995, "syhw": [995, 996], "corei": [995, 1002, 1003], "lynch": [995, 1001], "shu": [995, 998, 1002], "tadej": [995, 996], "jane\u017e": [995, 996], "caje": 995, "tiago": [995, 999], "nune": 995, "cow": 995, "anz": 995, "jauvin": 995, "jacqu": [995, 997], "kvam": [995, 997], "doug": [995, 996, 1006], "coleman": [995, 996], "dickerson": 995, "approximateident": 995, "veronda": 995, "matti": [995, 998, 999], "lyra": [995, 998, 999], "mikhail": [995, 996, 997, 1000, 1001], "korobov": [995, 996, 997, 1000, 1001], "alejandro": [995, 1000], "weinstein": 995, "deil": [995, 1005, 1006], "nizhibitski": 995, "coelho": [995, 997, 998, 1002], "miroslav": [995, 996, 999], "batchkarov": [995, 999], "pavel": [995, 1003], "bob": [995, 1001], "dengemann": 995, "emanuel": 995, "x006": 995, "justin": [996, 1002, 1006], "stochastic_gradi": [996, 997, 1003], "crombach": 996, "sheet": 996, "jaccard_similarity_scor": [996, 998, 1003], "jochen": 996, "wersd\u00f6rfer": 996, "sinayev": 996, "unpleas": 996, "novic": 996, "tini": [996, 1009], "hyperlink": 996, "luessi": 996, "philipp": [996, 997, 1000], "gervai": [996, 997], "cleverless": 996, "nosetest": 996, "compute_import": 996, "return_model": [996, 998], "itergrid": 996, "tacitli": 996, "charset_error": 996, "precompute_gram": 996, "2224": 996, "jim": 996, "holmstr\u00f6m": 996, "steven": [996, 997, 999, 1001, 1002, 1007], "gryze": [996, 999], "sergeyf": 996, "ben": [996, 997, 998, 1001, 1002, 1003, 1006], "speer": 996, "federico": [996, 997, 1002, 1003, 1008], "vaggi": [996, 997], "raul": [996, 997], "garreta": [996, 997], "gei": 996, "flaxman": [996, 998], "denton": 996, "cockburn": 996, "dougal": [996, 998, 999, 1001, 1002, 1003, 1004], "sutherland": [996, 998, 999, 1001, 1002, 1003, 1004], "ian": [996, 998, 1003, 1004, 1006], "ozsvald": 996, "johann": [996, 997, 1002, 1004, 1005, 1008], "sch\u00f6nberger": [996, 997], "szabo": [996, 997], "roland": [996, 997], "imran": [996, 997, 998], "haqu": [996, 997, 998], "karayev": 996, "jamestwebb": [996, 997], "abhijeet": 996, "kolh": 996, "velkov": 996, "fazlul": 996, "shahriar": 996, "felix": [996, 1001, 1002, 1004, 1006, 1007, 1008], "brockherd": 996, "harikrishnan": 996, "jack": [996, 999, 1007, 1008], "hale": [996, 1008], "jakemick": 996, "mcdermott": 996, "zwinck": 996, "vredevoogd": [996, 997], "pati": 996, "ekman": [996, 1000], "shubernetskii": 996, "naoki": [996, 1006], "orii": 996, "seamu": 996, "absher": 996, "feldman": [996, 1001, 1002, 1003, 1004], "stefano": 996, "lattarini": 996, "steve": [996, 998, 1002, 1007], "koch": [996, 1002, 1003, 1005, 1006], "sturla": 996, "molden": 996, "jarosch": 996, "nikolai": [997, 998, 999, 1000, 1002, 1003, 1008], "mayorov": [997, 998, 999, 1000], "msvc": 997, "mingw": 997, "resourcewarn": 997, "calvin": [997, 998], "gile": [997, 998], "billing": [997, 998, 999], "safe_realloc": 997, "bradshaw": [997, 998, 1001], "pico": [997, 998], "restor": [997, 1002, 1003, 1004, 1005], "raff": 997, "__array__": [997, 1004], "jeffrei": [997, 1000], "blackburn": [997, 1000], "danni": [997, 998, 999], "sullivan": [997, 998, 999], "wignal": [997, 998, 1004, 1005], "grid_tograph": 997, "gracefulli": [997, 998], "gaussianprocess": 997, "novak": 997, "tulloch": [997, 998], "wardagglomer": 997, "wardclust": 997, "mean_l1_ratio": 997, "phlypo": 997, "312": 997, "148": 997, "bommarito": [997, 998], "brook": [997, 998, 1006], "osborn": [997, 998], "eltermann": 997, "bwignal": 997, "ankit": [997, 1004, 1006, 1008], "agraw": [997, 1002, 1008, 1009], "carei": [997, 998, 999, 1000, 1001], "ugurthemast": [997, 998], "schumach": [997, 998, 999], "baptist": [997, 1005], "lagard": 997, "rajat": [997, 1004], "khanduja": 997, "pascual": 997, "ignacio": 997, "rossi": 997, "s\u00e4ger": [997, 1000], "ilambharathi": [997, 998], "kanniah": [997, 998], "sdenton4": 997, "alyssa": [997, 1001], "amo": 997, "waterland": 997, "murad": 997, "maud": 997, "karol": 997, "pysniak": 997, "cgohlk": [997, 998], "jacobsen": 997, "collin": 997, "kaushik94": 997, "erwin": 997, "marsi": 997, "csytraci": 997, "lk": 997, "laurent": [997, 998, 1001, 1002, 1009], "direr": [997, 998, 1001, 1002], "shilt": 997, "yoshiki": [997, 1000], "v\u00e1zquez": 997, "yung": [997, 1000], "siang": 997, "liau": 997, "abhishek": [997, 998, 1004, 1008], "thakur": [997, 998], "rohit": [997, 998, 1002, 1003], "sivaprasad": [997, 998], "amormachin": 997, "oscar": [997, 1001], "carlsson": 997, "nanta": 997, "nardelli": 997, "jess010": 997, "kowalski87": 997, "clegg": 997, "ralf": [997, 1000, 1001], "gommer": [997, 1000, 1001], "aft": 997, "rupesh": 997, "srivastava": 997, "ryan": [997, 1000, 1002, 1003], "skipper": [997, 999, 1000], "seabold": [997, 999, 1000], "stefan": [997, 998, 1002, 1004], "walt": [997, 998, 1002], "allen": [997, 999, 1001, 1004], "riddel": [997, 999, 1001], "valentin": [997, 999, 1009], "haenel": 997, "myer": [997, 1001], "yoni": 997, "meshulam": 997, "yuri": [997, 999], "zaytsev": 997, "adrinjalali": [997, 1006], "ai8rahim": 997, "alemagnani": 997, "chalmerlow": 997, "dziki": 997, "dro\u017cd\u017c": 997, "matrixorz": 997, "popo": 997, "samuela": 997, "fran\u00e7oi": 997, "boulogn": 997, "ethan": [997, 1000], "guilherm": 997, "trein": 997, "heuer": 997, "ivicajov": 997, "rouli": 997, "eduardo": [997, 999, 1007, 1008], "ari\u00f1o": 997, "rubia": 997, "jell": 997, "zijlstra": 997, "eddi": 997, "jansson": 997, "ca\u00f1ardo": 997, "alastuei": 997, "joseph": [997, 998, 999, 1000, 1006, 1008], "perla": 997, "ricardo": [997, 1007, 1008], "kenta": 997, "sato": 997, "medri": 997, "luce": 997, "pierron": 997, "danielweitzenfeld": 997, "thompson": 997, "brett": [997, 999, 1000, 1001, 1002], "feurer": [997, 1002], "earl": 997, "hank": 997, "orr\u00f9": 997, "lunt": 997, "kearn": 997, "pawe\u0142": [997, 1001, 1006, 1007], "mandera": 997, "zambelli": 997, "staubda": 997, "dedupl": 998, "heilman": [998, 999], "precompute_dist": [998, 1005], "lshforest": [998, 1001], "qiang": 998, "luo": 998, "clemen": 998, "brunner": 998, "matteo": [998, 1000, 1008], "visconti": 998, "oleggio": 998, "castello": 998, "linkage_tre": 998, "jatin": [998, 1000], "shah": [998, 999, 1000, 1006], "saurabh": [998, 999, 1000, 1001, 1002, 1006], "jha": [998, 1004, 1008], "blanchard": [998, 999], "michal": [998, 1001, 1007, 1008], "romaniuk": 998, "gilmor": 998, "stapl": 998, "hedyati": 998, "antoni": [998, 1000, 1006], "parel": 998, "herv\u00e9": 998, "bredin": 998, "hasil": 998, "sharma": [998, 1000, 1002, 1003, 1005, 1006, 1008], "download_20newsgroup": 998, "friend": 998, "cathi": [998, 1004], "deng": [998, 999, 1000], "dawson": 998, "garret": 998, "hanna": [998, 999, 1005], "wallach": [998, 999], "yan": [998, 1006], "artem": [998, 1001], "sobolev": 998, "fit_ovr": 998, "predict_ovr": 998, "predict_proba_ovr": 998, "fit_ovo": 998, "predict_ovo": 998, "fit_ecoc": 998, "predict_ecoc": 998, "lamond": 998, "outweigh": 998, "thresh": 998, "akshai": [998, 1001, 1006], "akshayah3": 998, "aldrian": 998, "obaja": 998, "ander": [998, 1004], "aagaard": 998, "cranenburgh": 998, "walker": 998, "banilo": [998, 999], "barmalei": [998, 999], "benedikt": 998, "koehler": 998, "bhsu": 998, "bori": [998, 1006], "feld": 998, "borja": 998, "ayerdi": 998, "boyuan": [998, 999, 1000], "brent": [998, 1002, 1003], "pedersen": 998, "celeo": 998, "chebee7i": 998, "stade": 998, "schuldt": 998, "christof": [998, 999], "angermuel": [998, 999], "daiki": 998, "aminaka": 998, "danfrankj": 998, "dmitrij": 998, "milajev": 998, "floydsoft": 998, "garrett": 998, "gpassino": 998, "gwulf": [998, 999], "hampu": 998, "bengtsson": 998, "harri": [998, 1000, 1006, 1007], "mavroforaki": [998, 1000], "helder": [998, 1007, 1008], "herv": 998, "hugu": 998, "salamin": 998, "ism": 998, "dlabal": 998, "javier": 998, "l\u00f3pez": [998, 1002, 1003, 1006], "pe\u00f1a": 998, "jdcaballero": 998, "jeff": [998, 1000, 1007, 1008], "hammerbach": 998, "helmu": 998, "kaicheng": 998, "markham": [998, 1005, 1006], "lagacheri": 998, "leepei": 998, "loic": [998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "estev": [998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "luka": [998, 1005], "michelbach": 998, "mario": [998, 1000, 1008], "krell": [998, 1000], "ku": [998, 999], "mateusz": [998, 1005, 1006], "susik": 998, "mehdi": [998, 1007], "cherti": 998, "mlg": 998, "montecchio": 998, "okal": 998, "billi": 998, "\u00f3scar": [998, 999, 1000, 1001], "n\u00e1jera": [998, 999, 1000, 1001], "puggioni": 998, "pratap": [998, 1001, 1008], "vardhan": 998, "pvnguyen": 998, "queqichao": 998, "rahiel": 998, "kasim": 998, "mason": 998, "saket": [998, 999, 1006], "choudhari": [998, 999, 1008], "sam": [998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "nichol": 998, "sethdandridg": 998, "sinhrk": [998, 999], "snuderl": 998, "ott": 998, "tjoa": 998, "swu": 998, "zimmer": [998, 1008], "tejesh95": 998, "terrycojon": 998, "delteil": 998, "toma": 998, "kazmar": 998, "trevorstephen": [998, 1000], "tttthomasssss": 998, "tzu": 998, "kuo": 998, "ugurcaliskan": 998, "vinayak": [998, 999, 1000, 1002, 1003], "mehta": [998, 999, 1000, 1002, 1003, 1004, 1005], "vjacheslav": 998, "murashkin": 998, "wadawson": 998, "x0l": 998, "vendor": [999, 1002, 1003], "6147": 999, "presort": [999, 1004], "5857": 999, "mcculloh": [999, 1000], "6258": 999, "giorgio": [999, 1000, 1001], "patrini": [999, 1000, 1001], "joe": 999, "jevnik": 999, "labelkfold": [999, 1000], "labelshufflesplit": [999, 1000], "mcfee": [999, 1000], "3659": 999, "4738": 999, "projectedgradientnmf": 999, "nls_max_it": 999, "erick": 999, "moodi": 999, "4025": 999, "mean_shift_": 999, "mean_shift": [999, 1002], "martino": 999, "sorbaro": 999, "cori": 999, "konstantin": [999, 1000, 1001], "shmelkov": 999, "backlink": 999, "jaidev": 999, "deshpand": [999, 1000], "dictlearn": 999, "kashif": 999, "rasul": [999, 1001, 1002], "galvez": 999, "sonni": 999, "hu": [999, 1002, 1004], "santi": [999, 1001, 1002], "villalba": [999, 1002, 1006], "5186": 999, "stolbunov": 999, "booster": 999, "graham": [999, 1000], "clenaghan": [999, 1000], "clyde": 999, "subproblem": 999, "forestclassifi": 999, "ankur": 999, "ankan": 999, "henri": [999, 1000, 1001, 1002, 1004, 1005, 1006, 1008], "5431": 999, "buddha": 999, "prakash": [999, 1001, 1007], "5182": 999, "lamb": [999, 1007], "5282": 999, "5355": 999, "5360": 999, "4478": 999, "5337": 999, "4362": 999, "5495": 999, "elvi": [999, 1000, 1001], "dohmatob": [999, 1000, 1001], "data_min": 999, "data_max": 999, "data_rang": 999, "_learntselectormixin": 999, "gradientboost": 999, "metatransfom": 999, "load_lfw_pair": 999, "wardagglom": 999, "residues_": 999, "indicator_matrix_": 999, "adithya": 999, "ganesh": 999, "akitti": 999, "alexei": 999, "grigorev": 999, "ali": [999, 1002, 1003, 1006, 1007], "baharev": 999, "ando": 999, "saaba": 999, "anish": [999, 1000], "anthoni": [999, 1001, 1002], "erling": 999, "rouvinen": 999, "rachez": [999, 1000], "benjaminirv": 999, "naul": [999, 1000], "gohlk": 999, "bourguignat": 999, "cindi": [999, 1007], "sridharan": 999, "kronovet": 999, "data1010": 999, "dotson": 999, "djipei": [999, 1000], "dmitri": [999, 1001, 1002, 1003, 1007], "spikhalskii": 999, "donn": 999, "duart": [999, 1007], "caro": 999, "larson": [999, 1003, 1004, 1006, 1008], "fernando": [999, 1006], "carrillo": 999, "eckert": 999, "zalkow": 999, "ganiev": [999, 1000, 1001], "ibraim": [999, 1000, 1001], "giorgiop": 999, "gryllo": [999, 1002], "prokopi": [999, 1002], "hsuan": 999, "tien": 999, "ishank": [999, 1000, 1001], "gulati": [999, 1000, 1001], "jeffrey04": [999, 1000], "jfraj": 999, "jiali": 999, "mei": [999, 1004], "kirkham": [999, 1000, 1002], "wittenau": 999, "loyal": 999, "jungkook": 999, "park": [999, 1004, 1006], "kamalakerdadi": [999, 1000], "kyler": 999, "lilian": [999, 1000], "besson": [999, 1000], "loui": [999, 1000, 1004, 1006, 1008], "tiao": [999, 1000], "marktab": 999, "spacek": 999, "martinbpr": [999, 1000], "martinosorb": 999, "maryanmorel": [999, 1000], "masafumi": 999, "oyamada": 999, "krump": 999, "kolganov": 999, "mbilling": 999, "mhg": 999, "patterson": 999, "omer": 999, "katz": [999, 1006, 1007], "pauli": 999, "virtanen": 999, "fischer": [999, 1000], "pianomania": 999, "preston": [999, 1000, 1001], "parri": [999, 1000, 1001], "rohan": [999, 1000, 1002, 1003, 1007], "ramanath": 999, "bansod": [999, 1000, 1001], "scls19fr": 999, "saeger": [999, 1000, 1001], "shivan": 999, "sornarajah": 999, "simonpl": 999, "sseg": 999, "hoover": [999, 1000, 1001, 1003], "seguin": 999, "theodor": 999, "vasiloudi": 999, "freita": [999, 1001, 1002], "pereira": [999, 1002, 1003], "timothi": [999, 1007], "hopper": 999, "tokoroten": 999, "vstolbunov": 999, "wangz10": 999, "yucheng": 999, "zhauniarovich": 999, "zac": 999, "stewart": [999, 1004, 1007], "zhai_pro": 999, "zichen": 999, "7946": 1000, "8355": 1000, "9010": 1000, "8040": 1000, "9149": 1000, "aman": [1000, 1001, 1002, 1008], "dalmia": [1000, 1001, 1002], "nate": [1000, 1001, 1007], "guerin": [1000, 1001], "lebedev": [1000, 1001], "utilis": 1000, "6497": 1000, "7724": 1000, "bing": [1000, 1001], "explained_variance_ratio": 1000, "7632": 1000, "jpfrancoia": [1000, 1001], "7676": 1000, "moham": [1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "affan": 1000, "7756": 1000, "7786": 1000, "srivatsan": [1000, 1001, 1004], "7799": 1000, "7490": [1000, 1001], "6282": 1000, "7301": 1000, "6178": 1000, "7680": 1000, "n_iters_": 1000, "7553": 1000, "ekaterina": [1000, 1001, 1002, 1003, 1005], "krivich": [1000, 1001, 1003], "5874": 1000, "7593": 1000, "7594": 1000, "7660": 1000, "7750": 1000, "7732": 1000, "artsion": 1000, "lieu": [1000, 1001], "grid_scores_": [1000, 1006, 1007], "leaveonelabelout": 1000, "leaveplabelout": 1000, "plural": 1000, "nomenclatur": 1000, "mean_tim": 1000, "std_time": 1000, "3204": 1000, "5291": 1000, "sounder": 1000, "7295": 1000, "5299": 1000, "bravi": 1000, "fouchet": 1000, "calinski_harabaz_scor": [1000, 1002], "harabaz": 1000, "6586": 1000, "4294": 1000, "6667": 1000, "6954": 1000, "unveil": 1000, "yelit": 1000, "basebag": [1000, 1002], "staub": 1000, "5805": 1000, "5251": 1000, "imacul": 1000, "1000x": 1000, "arfa": 1000, "6691": 1000, "6913": 1000, "5762": 1000, "utkarsh": [1000, 1001, 1002, 1003], "upadhyai": [1000, 1001, 1002, 1003], "6846": 1000, "5929": 1000, "podshumok": [1000, 1001], "6173": 1000, "ryad": 1000, "zenin": 1000, "devashish": 1000, "asish": [1000, 1001], "dowl": 1000, "6697": 1000, "ori": 1000, "ziv": 1000, "sear": 1000, "merritt": 1000, "7325": 1000, "7239": 1000, "hong": [1000, 1002, 1006, 1007, 1008], "guangguo": 1000, "jensen": [1000, 1006], "7419": 1000, "gregori": [1000, 1004, 1005, 1006, 1007], "stupp": [1000, 1001], "bernardo": 1000, "stein": 1000, "sparse_func": [1000, 1006], "incr_mean_variance_axi": [1000, 1006], "fuse": 1000, "7049": 1000, "7152": 1000, "load_boston": [1000, 1002, 1007], "7154": 1000, "manvendra": [1000, 1001], "singh": [1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "5540": 1000, "7248": 1000, "6764": 1000, "wenhua": 1000, "6817": 1000, "6902": 1000, "leonieborn": 1000, "5141": 1000, "4995": 1000, "5012": 1000, "_transform_select": 1000, "7194": 1000, "caio": [1000, 1002, 1004], "oliveira": [1000, 1002, 1004, 1008], "6182": 1000, "6121": 1000, "6472": 1000, "7350": 1000, "russel": [1000, 1001], "smith": [1000, 1001, 1002, 1003, 1004, 1006], "7159": 1000, "yichuan": [1000, 1001], "5460": 1000, "document_clust": 1000, "7353": 1000, "_search": 1000, "_check_param_grid": 1000, "xrang": 1000, "7323": 1000, "viacheslav": 1000, "kovalevskyi": 1000, "7101": 1000, "residual_metr": 1000, "6651": 1000, "reorgan": 1000, "7187": 1000, "7260": 1000, "sebasti\u00e1n": 1000, "vanrel": 1000, "leaveplabelsout": 1000, "6660": 1000, "neg_": 1000, "unprefix": 1000, "7261": 1000, "aditya": [1000, 1002, 1003, 1004, 1008], "joshi": [1000, 1002, 1008], "loginov": 1000, "minyushkin": 1000, "rudi": 1000, "abadi": [1000, 1001], "saint": 1000, "alexfield": 1000, "alvaro": [1000, 1002], "ulloa": 1000, "alyssaq": 1000, "amlan": 1000, "kar": 1000, "giessel": 1000, "jackson": [1000, 1001, 1003], "murrai": [1000, 1001], "arafat": 1000, "archit": 1000, "asnt": 1000, "b0noi": 1000, "behzad": 1000, "tabibian": 1000, "kratzwald": 1000, "bhargav": 1000, "mangipudi": 1000, "blakeflei": 1000, "brandon": [1000, 1001, 1008, 1009], "carter": [1000, 1001], "camilo": 1000, "lamu": 1000, "carol": [1000, 1001], "Willing": [1000, 1001], "cass": 1000, "ceshin": 1000, "truong": 1000, "codevig": 1000, "shiebler": 1000, "hnyk": [1000, 1001], "elli": [1000, 1003], "nicholson": [1000, 1001, 1002], "thaler": 1000, "warshaw": 1000, "lasagna": 1000, "deborah": [1000, 1001], "definitelyuncertain": 1000, "didi": [1000, 1001, 1002, 1003], "zev": [1000, 1001, 1002, 1003], "dsquareindia": 1000, "edwinensa": 1000, "elia": 1000, "kuth": 1000, "fabio": 1000, "ticconi": 1000, "fisach": 1000, "donovan": 1000, "ghg": 1000, "giovanni": [1000, 1002], "cherubin": 1000, "lanzani": 1000, "glenn": 1000, "qian": [1000, 1005], "mohr": 1000, "govin": 1000, "vatsan": 1000, "reda": 1000, "gustav": 1000, "m\u00f6rtberg": 1000, "halwai": 1000, "harizo": [1000, 1001], "rajaona": [1000, 1001], "hashcode55": 1000, "hdmetor": 1000, "hobson": 1000, "lane": 1000, "bown": 1000, "igor": [1000, 1001, 1007], "andriushchenko": [1000, 1001], "inki": 1000, "hwang": 1000, "isaac": [1000, 1001, 1003, 1004], "sijaranamu": 1000, "iver": 1000, "jordal": 1000, "jackmartin": 1000, "fiedler": 1000, "routlei": 1000, "zike": 1000, "janna": 1000, "brettingen": 1000, "jarfa": 1000, "laska": 1000, "jblackburn": 1000, "levesqu": 1000, "hintz": 1000, "jeremynixon": 1000, "jeroen": 1000, "jessica": 1000, "jill": 1000, "j\u00eann": 1000, "vie": 1000, "jia": 1000, "jiyuan": 1000, "johannah": 1000, "boersma": 1000, "moeller": 1000, "striebel": [1000, 1001], "joncral": 1000, "jordi": 1000, "munoz": [1000, 1006], "jrfiedler": 1000, "juliankahnert": 1000, "juliathebrav": 1000, "kaichogami": 1000, "lyon": [1000, 1001], "kingjr": 1000, "kjell": 1000, "krishna": [1000, 1001, 1002, 1003, 1004, 1005, 1008], "kalyan": 1000, "krishnakalyan3": 1000, "kvle": 1000, "putnam": 1000, "ldavid": 1000, "leig": 1000, "leightonzhang": 1000, "leland": [1000, 1001, 1002, 1004, 1005], "mcinn": [1000, 1001, 1002, 1004, 1005], "liang": [1000, 1005, 1006], "hsieh": 1000, "lizsz": 1000, "l\u00e9oni": 1000, "born": 1000, "maniteja": [1000, 1001, 1002], "nandana": [1000, 1001, 1002], "marco": [1000, 1002, 1003, 1007, 1008], "bao": [1000, 1008], "szepieniec": 1000, "madsen": [1000, 1002], "massil": 1000, "matheu": 1000, "duboi": [1000, 1002], "moroz": 1000, "scherer": 1000, "michiaki": 1000, "ariga": 1000, "moussa": 1000, "taifi": 1000, "mrandrewandrad": 1000, "mridul": 1000, "seth": 1000, "nadya": 1000, "naoya": [1000, 1001, 1002, 1003], "kanai": [1000, 1001, 1002], "nickledav": 1000, "nico": [1000, 1007], "ningchi": 1000, "nlathia": 1000, "okbalefthand": 1000, "okhlopkov": [1000, 1001], "pano": 1000, "lourida": 1000, "strickland": 1000, "perrin": 1000, "letelli": 1000, "pestrickland": 1000, "practicalswift": 1000, "qimu": 1000, "zheng": [1000, 1001, 1006], "rachit": [1000, 1006], "kansal": 1000, "ramana": [1000, 1001], "randi": 1000, "olson": 1000, "lutz": [1000, 1004, 1007], "schucker": 1000, "jain": [1000, 1001, 1002, 1006, 1008], "ruifeng": [1000, 1001, 1006], "r\u00e9my": 1000, "l\u00e9one": 1000, "saihttam": 1000, "saiw": 1000, "yeung": 1000, "shleifer": [1000, 1001], "sartaj": 1000, "sasank": 1000, "chilamkurthi": 1000, "seal": 1000, "shagun": 1000, "sodhani": 1000, "shanmuga": 1000, "shashank": [1000, 1006], "shekhar": 1000, "shawpan": 1000, "shengxiduan": 1000, "shota": 1000, "shuckle16": 1000, "smedbergm": 1000, "srvanrel": 1000, "leriqu": [1000, 1002], "taranjeet": 1000, "themrmax": [1000, 1001], "hallock": 1000, "moreau": [1000, 1001, 1002, 1003, 1004], "tkammi": 1000, "toastedcornflak": [1000, 1001], "tomdlt": 1000, "toshihiro": [1000, 1001, 1007], "kamishima": [1000, 1001], "tracer0tong": 1000, "hauck": 1000, "vo": [1000, 1008], "varun": [1000, 1001, 1002, 1008], "jewalikar": 1000, "vikram": 1000, "villu": 1000, "ruusmann": 1000, "walter": 1000, "waterponei": [1000, 1001], "wenjian": 1000, "welch": 1000, "wyseguy7": 1000, "xyguo": [1000, 1002], "yanlend": 1000, "yen": [1000, 1001], "yenchenlin": 1000, "yoav": 1000, "zivori": 1000, "10723": [1001, 1002], "9623": 1001, "undocu": 1001, "deleteri": 1001, "9677": 1001, "ashutosh": [1001, 1002, 1004, 1006], "correlation_model": 1001, "regression_model": 1001, "belatedli": 1001, "9717": 1001, "9693": 1001, "steingold": [1001, 1002], "9711": 1001, "goncalo": [1001, 1002], "rodrigu": [1001, 1002, 1007], "9641": 1001, "bourbeau": [1001, 1002, 1003], "9865": 1001, "sachin": [1001, 1002, 1008], "kelkar": [1001, 1002, 1004], "9922": 1001, "charli": [1001, 1002], "brummitt": [1001, 1002], "9945": 1001, "9830": 1001, "9600": 1001, "kerimov": [1001, 1002], "9593": 1001, "reiichiro": [1001, 1002], "nakano": [1001, 1002], "9604": 1001, "interim": 1001, "9558": 1001, "9847": 1001, "joan": [1001, 1002, 1003, 1004], "massich": [1001, 1002, 1003, 1004], "oli": 1001, "blum": 1001, "9697": 1001, "9750": 1001, "9788": 1001, "9815": 1001, "9802": 1001, "vrishank": [1001, 1002], "bhardwaj": [1001, 1002], "nagarjuna": [1001, 1002], "nathaniel": [1001, 1002, 1004], "diegodlh": [1001, 1002], "jkleint": [1001, 1002], "oliblum90": [1001, 1002], "pasbi": [1001, 1002], "lawson": [1001, 1002, 1003], "nielsenmarkus11": [1001, 1002], "excit": 1001, "cautiou": 1001, "min_impurity_split": 1001, "7823": [1001, 1002], "8446": 1001, "5279": 1001, "8363": 1001, "5295": 1001, "7388": 1001, "userguid": 1001, "7655": 1001, "karan": [1001, 1002, 1003], "desai": [1001, 1003, 1006, 1007, 1009], "7739": 1001, "gasquez": 1001, "8120": 1001, "neeraj": 1001, "gangwar": 1001, "7548": 1001, "9206": 1001, "7441": 1001, "6101": 1001, "7674": 1001, "8698": 1001, "7794": 1001, "herilalaina": [1001, 1002, 1004], "rakotoarison": [1001, 1002, 1004], "5036": 1001, "4939": 1001, "esuli": [1001, 1006], "n_skips_": 1001, "7914": 1001, "horrel": 1001, "8591": 1001, "hadrien": [1001, 1004], "7838": 1001, "8835": 1001, "8061": 1001, "cordier": 1001, "6288": 1001, "9145": 1001, "reddi": [1001, 1002, 1003, 1008], "chinthala": 1001, "7721": 1001, "crall": [1001, 1007], "7685": 1001, "tommi": [1001, 1002, 1003], "l\u00f6fstedt": 1001, "9277": 1001, "hongkahjun": 1001, "7089": 1001, "randomized_svd_low_rank": 1001, "9067": 1001, "6181": 1001, "wendling": 1001, "8065": 1001, "lejeun": 1001, "7567": 1001, "jay": 1001, "doepk": 1001, "7573": 1001, "romain": [1001, 1006], "brault": 1001, "5229": 1001, "7990": 1001, "8586": 1001, "7723": 1001, "8028": 1001, "booth": 1001, "8005": 1001, "7863": 1001, "7506": 1001, "5991": 1001, "8845": 1001, "8053": 1001, "8282": 1001, "8117": 1001, "9259": 1001, "8094": 1001, "8335": 1001, "poughon": 1001, "7880": 1001, "karnofski": 1001, "8931": 1001, "attractador": [1001, 1002], "8002": 1001, "8549": 1001, "zerodivisionerror": [1001, 1004], "7501": 1001, "dominik": 1001, "krzeminski": 1001, "7970": 1001, "8006": 1001, "p\u00f6lsterl": [1001, 1004, 1007], "8936": 1001, "8672": 1001, "mike": 1001, "benfield": 1001, "broke": 1001, "8068": 1001, "5732": 1001, "ytrue": 1001, "ypred": 1001, "8087": 1001, "7983": 1001, "features_nam": 1001, "8512": 1001, "8251": 1001, "aivision2020": 1001, "5814": 1001, "7849": 1001, "jair": 1001, "montoya": 1001, "martinez": 1001, "randomizedlasso": 1001, "5359": 1001, "9302": 1001, "8160": 1001, "8224": 1001, "gedeck": 1001, "vathsala": [1001, 1002, 1003, 1004], "achar": [1001, 1002, 1003, 1004], "9022": 1001, "mehmet": [1001, 1007], "basbug": 1001, "9024": 1001, "8973": 1001, "paulo": [1001, 1007], "haddad": 1001, "unmeaning": 1001, "6573": 1001, "quazi": [1001, 1002], "marufur": 1001, "rahman": [1001, 1002, 1006], "9239": 1001, "andr": [1001, 1008], "ambrosio": 1001, "boechat": 1001, "early_exager": 1001, "assertionerror": 1001, "8992": 1001, "7954": 1001, "foreman": 1001, "9105": 1001, "9108": 1001, "8306": 1001, "7872": 1001, "_c_step": 1001, "3367": 1001, "steward": 1001, "8768": 1001, "detomaso": 1001, "6507": 1001, "7819": 1001, "jayzed82": 1001, "6126": 1001, "7814": 1001, "7702": 1001, "9219": 1001, "7771": 1001, "ang": 1001, "randomizedlogisticregress": 1001, "8259": 1001, "mandatorili": 1001, "7565": 1001, "8181": 1001, "basesearchcv": [1001, 1002], "8344": 1001, "eriksson": 1001, "7661": 1001, "8295": 1001, "batula": 1001, "dylan": [1001, 1004], "werner": [1001, 1006], "meier": 1001, "7365": 1001, "aleksandr": 1001, "sandrovskii": 1001, "5697": 1001, "stijn": 1001, "tonk": 1001, "outputcodeclassifi": [1001, 1006], "6250": 1001, "8093": 1001, "bull": 1001, "9507": 1001, "7356": 1001, "dingwal": 1001, "_check_target": 1001, "8377": 1001, "5211": 1001, "rhinehart": 1001, "8159": 1001, "8198": 1001, "fetch_": 1001, "7944": 1001, "7825": 1001, "kathleen": 1001, "7376": 1001, "7331": 1001, "yangarbit": 1001, "__getstate__": 1001, "obstruct": 1001, "8316": 1001, "holger": 1001, "8010": 1001, "7986": 1001, "najera": 1001, "9289": 1001, "makedir": 1001, "9284": 1001, "sebastin": [1001, 1002], "alert": 1001, "lgtm": 1001, "9278": 1001, "heli": 1001, "8449": 1001, "9078": 1001, "purport": 1001, "sergul": [1001, 1002, 1005], "aydor": [1001, 1002, 1005], "8922": 1001, "8137": 1001, "8139": 1001, "8995": 1001, "2879": 1001, "7459": 1001, "7812": 1001, "9100": 1001, "8481": 1001, "8174": 1001, "tahar": 1001, "zanouda": 1001, "8854": 1001, "8874": 1001, "7998": 1001, "jiacheng": 1001, "argpartit": 1001, "frombuffer_empti": 1001, "rankdata": 1001, "safe_copi": 1001, "eig": 1001, "fast_dot": 1001, "pinvh": [1001, 1003], "graph_laplacian": 1001, "sparsetool": 1001, "connected_compon": 1001, "check_decision_proba_consist": 1001, "shubham": [1001, 1004], "9019": 1001, "baseensembl": [1001, 1004], "7464": 1001, "rishikesh": 1001, "taehoon": [1001, 1002], "aashil": 1001, "balakumaran": [1001, 1002], "manoharan": [1001, 1002], "petrov": [1001, 1002], "minghui": [1001, 1002], "jc": [1001, 1002], "alexandercbooth": 1001, "chkoar": 1001, "aarshai": [1001, 1002], "gilliam": 1001, "subramanyam": 1001, "clement": [1001, 1002, 1006], "joudet": [1001, 1002], "robl": 1001, "kati": 1001, "luangkot": 1001, "lacchia": 1001, "akshay0724": 1001, "omtcyfz": 1001, "rickiepark": 1001, "jbdelafoss": 1001, "vivek": [1001, 1002, 1003], "elliott": 1001, "ldirer": 1001, "sid": 1001, "kapur": 1001, "midina": 1001, "mikebenfield": 1001, "sourav": [1001, 1004], "aseem": 1001, "bansal": 1001, "aishwaryark": 1001, "howel": 1001, "dokato": 1001, "kathi": [1001, 1004], "ferria": 1001, "nikita": [1001, 1002, 1004, 1007, 1008], "basil": 1001, "beirouti": 1001, "possa": 1001, "bednar": 1001, "janin": 1001, "harper": 1001, "artsiom": 1001, "ligo": 1001, "rahn": [1001, 1004], "seanpwilliam": 1001, "julian": [1001, 1002], "kuhlmann": [1001, 1002], "aubert": 1001, "j\u00f6rn": 1001, "hee": [1001, 1004], "shivamgargsya": [1001, 1005, 1007], "kat": 1001, "hempstalk": 1001, "kaushik": [1001, 1008], "lakshmikanth": 1001, "kennedi": [1001, 1004], "yap": 1001, "kiril": [1001, 1002, 1004, 1006], "bobyrev": 1001, "imbert": [1001, 1003, 1006, 1008], "lera": 1001, "douillard": 1001, "mainak": 1001, "tobychees": [1001, 1002], "manraj": 1001, "marc": [1001, 1003, 1004], "meketon": 1001, "marcofalk": 1001, "gilch": 1001, "mehul": 1001, "ahuja": [1001, 1008], "goetz": [1001, 1002], "dezub": 1001, "baumgartn": 1001, "vibrantabhi19": 1001, "golubin": 1001, "milen": 1001, "paskov": 1001, "antonin": 1001, "carett": 1001, "morikko": 1001, "mrmjauh": 1001, "nalepa": 1001, "namiya": 1001, "narinek": [1001, 1002], "angu": [1001, 1002, 1008], "nicol": 1001, "vavrova": 1001, "nitish": 1001, "pandei": [1001, 1006], "daniil": 1001, "olegovich": 1001, "craze": 1001, "om": 1001, "parmind": 1001, "patrick": [1001, 1002, 1007, 1008], "carlson": 1001, "pei": 1001, "ganssl": 1001, "lorek": 1001, "pete": [1001, 1005, 1006], "bachant": 1001, "csizsek": 1001, "jong": 1001, "puneet": 1001, "mathur": [1001, 1003, 1004, 1009], "quentin": [1001, 1002, 1003], "hibon": 1001, "1kastner": 1001, "rameshwar": [1001, 1002], "bhaskaran": [1001, 1002], "rebecca": 1001, "bilbro": 1001, "remi": 1001, "rampin": 1001, "pratik": 1001, "agarw": [1001, 1002, 1004], "sailesh": [1001, 1002], "choyal": [1001, 1002], "samson": 1001, "samu\u00ebl": 1001, "weber": 1001, "sarah": [1001, 1003, 1006], "abhyudai": 1001, "sharan": [1001, 1002], "yalburgi": [1001, 1002], "willduan": 1001, "siddharth": [1001, 1005], "almer": 1001, "theofilo": 1001, "papapanagiot": 1001, "alison": 1001, "boucher": 1001, "folkman": 1001, "jung": [1001, 1005], "shenoi": 1001, "vilhelm": [1001, 1002], "ehrenheim": [1001, 1002], "alan": [1001, 1002, 1005, 1007, 1008], "yee": [1001, 1002], "warut": [1001, 1002], "vijitbenjaronk": [1001, 1002], "yuichi": 1001, "fujikawa": 1001, "affanv14": 1001, "andreh7": 1001, "bradi": 1001, "salz": 1001, "campustrampu": 1001, "agamemnon": [1001, 1002, 1003, 1004, 1006, 1007], "krasouli": [1001, 1002, 1003, 1004, 1006, 1007], "ditenberg": 1001, "elena": 1001, "sharova": 1001, "filipj8": [1001, 1002], "fukatani": 1001, "guiniol": 1001, "guoci": 1001, "hakaa1": [1001, 1002], "xhy": 1001, "jakirkham": [1001, 1002, 1003], "jaroslaw": 1001, "jeroko": 1001, "jmontoyam": 1001, "josephsalmon": [1001, 1002, 1003], "jschendel": [1001, 1002], "leereev": 1001, "hahn": [1001, 1002], "mathurinm": [1001, 1002, 1003, 1005, 1006, 1007, 1008], "mehak": 1001, "sachdeva": 1001, "mlewis1729": 1001, "mlliou112": 1001, "mthorrel": [1001, 1004], "ndingwal": 1001, "nuff": 1001, "plagre": 1001, "pldtc325": 1001, "breno": [1001, 1002], "olsen": 1001, "alfano": 1001, "burn": [1001, 1002], "polmauri": 1001, "charlton": 1001, "austin": 1001, "chayant": 1001, "t15h": 1001, "chinmaya": 1001, "pancholi": 1001, "danielsen": 1001, "chung": [1001, 1002], "pravarmahajan": [1001, 1002], "dariu": [1001, 1002], "morawiec": [1001, 1002], "haberth\u00fcr": 1001, "heryanto": 1001, "kirkbi": [1001, 1002], "rashchedrin": 1001, "gertrud": 1001, "devansh": [1001, 1002], "dickson": 1001, "baxlei": 1001, "don86": 1001, "klarup": 1001, "elizabeth": [1001, 1003, 1006], "ferriss": 1001, "ellen": 1001, "egli": 1001, "chieh": [1001, 1002], "chou": [1001, 1002], "grzegorz": [1001, 1004], "szpak": [1001, 1004], "zxcvbniu": 1001, "icyblad": 1001, "ilya": 1001, "laughlin": 1001, "iv\u00e1n": [1001, 1007], "vall\u00e9": 1001, "aur\u00e9lien": [1001, 1002, 1003, 1007, 1008], "bellet": [1001, 1002, 1003], "mahapatra": 1001, "bundl": [1002, 1003], "indexerror": [1002, 1003], "11756": [1002, 1003], "14237": [1002, 1003], "schuder": [1002, 1003, 1004], "13903": [1002, 1003], "13124": [1002, 1003], "13772": [1002, 1003], "vya": [1002, 1003, 1004], "12949": 1002, "prabakaran": [1002, 1003, 1006, 1008], "kumaresshan": [1002, 1003, 1006], "12946": 1002, "tallott": 1002, "13276": 1002, "13005": 1002, "13312": 1002, "11295": 1002, "vacaliuc": [1002, 1003], "13046": 1002, "12360": 1002, "aakanksha": 1002, "13134": 1002, "sandro": 1002, "casagrand": [1002, 1003], "12881": 1002, "13165": 1002, "13221": 1002, "bertrandhaut": [1002, 1003], "raghunathan": [1002, 1003, 1004, 1005, 1006, 1007, 1008], "dowon": [1002, 1003], "aria": [1002, 1003], "fibins": [1002, 1003], "finn": [1002, 1003], "shea": [1002, 1003], "joaak": [1002, 1003], "m\u00e9hault": [1002, 1003], "kms15": [1002, 1003], "kossori": [1002, 1003], "aruku": [1002, 1003], "lakshya": [1002, 1003, 1004], "ib\u00e1\u00f1ez": [1002, 1003, 1006], "gorelli": [1002, 1003, 1007], "marcogorelli": [1002, 1003], "mferrari3": [1002, 1003], "micka\u00ebl": [1002, 1003], "schoentgen": [1002, 1003], "pavlo": [1002, 1003], "kalli": [1002, 1003], "glaser": [1002, 1003], "pierretallott": [1002, 1003, 1004], "kapoor": [1002, 1003], "sandrocasagrand": [1002, 1003], "tashai": [1002, 1003], "vishaal": [1002, 1003], "zhuyi": [1002, 1003], "ziji": [1002, 1003], "zj": [1002, 1003], "poh": [1002, 1003], "12704": 1002, "12701": 1002, "12685": 1002, "12699": 1002, "adanhawth": [1002, 1003], "stine": [1002, 1003], "feda": [1002, 1003], "curic": [1002, 1003], "jeremiedbb": [1002, 1003, 1004], "katrin": [1002, 1003], "leinweb": [1002, 1003], "muhammad": [1002, 1003, 1007], "hassaan": [1002, 1003], "rafiqu": [1002, 1003], "paczuski": [1002, 1003], "waterburi": [1002, 1003], "shivam": [1002, 1003, 1004], "kotwalia": [1002, 1003], "12159": 1002, "12105": 1002, "11912": 1002, "12304": 1002, "12339": 1002, "12246": 1002, "10811": 1002, "feldbauer": [1002, 1003, 1004, 1005, 1008], "12441": 1002, "12517": 1002, "12234": 1002, "12165": 1002, "12388": 1002, "connor": [1002, 1007], "tann": [1002, 1007], "12393": 1002, "12122": 1002, "sharedmem": 1002, "12518": 1002, "12481": 1002, "12612": 1002, "12211": 1002, "lisa": [1002, 1003, 1005, 1006, 1008], "hannel": [1002, 1003], "melissa": 1002, "ferrari": 1002, "12451": 1002, "12171": 1002, "12365": 1002, "12514": 1002, "12522": 1002, "12471": 1002, "marzinotto": [1002, 1003], "12317": 1002, "12338": 1002, "bauk": [1002, 1003], "12625": 1002, "sklearn_site_joblib": 1002, "12350": 1002, "12467": 1002, "unvendor": 1002, "12345": 1002, "navarret": [1002, 1003, 1004], "benjastudio": [1002, 1003], "cheuk": [1002, 1003], "connossor": [1002, 1003], "levinson": [1002, 1003], "kieker": [1002, 1003], "kataev": [1002, 1003], "dillon": [1002, 1003, 1004], "gardner": [1002, 1003], "vukolov": [1002, 1003], "caselli": [1002, 1003], "gauravahlawat": [1002, 1003], "gustavo": [1002, 1003, 1008], "haroldfox": [1002, 1003], "jacklangerman": [1002, 1003], "jacopo": [1002, 1003], "notarstefano": [1002, 1003], "janvanrijn": [1002, 1003], "jdethuren": [1002, 1003], "koen": [1002, 1003], "kushal": [1002, 1003], "chauhan": [1002, 1003], "jie": [1002, 1003, 1006], "lili": [1002, 1003], "xiong": [1002, 1003, 1008], "liam": [1002, 1003], "melsyt": [1002, 1003], "nichola": [1002, 1003, 1005], "shebanov": [1002, 1003], "oleksandr": [1002, 1003, 1004, 1005, 1008], "pavlyk": [1002, 1003, 1004, 1005], "hausamann": [1002, 1003], "pulkit": [1002, 1003, 1005], "maloo": [1002, 1003], "batista": [1002, 1003, 1007], "radostin": [1002, 1003], "stoyanov": [1002, 1003], "ramil": [1002, 1003], "nugmanov": [1002, 1003], "rebekah": [1002, 1003, 1004], "roopam": [1002, 1003], "tiernei": [1002, 1003, 1004], "sylvainlan": [1002, 1003, 1004, 1005, 1006], "takingitcasu": [1002, 1003], "tulio": [1002, 1003], "xing": [1002, 1003], "zach": [1002, 1003, 1008], "mountain": 1002, "sorri": 1002, "basemultilayerperceptron": [1002, 1004], "11924": 1002, "macbook": 1002, "9354": 1002, "9372": 1002, "astel": 1002, "10933": 1002, "hansen": 1002, "10471": 1002, "gaurav": [1002, 1003, 1004, 1005, 1006, 1008], "dhingra": [1002, 1003, 1006], "8003": 1002, "jo\u00ebl": 1002, "billaud": 1002, "10059": 1002, "braun": 1002, "9612": 1002, "jonatan": 1002, "samoocha": 1002, "8129": 1002, "margeta": 1002, "k_means_elkan": 1002, "11353": 1002, "11901": 1002, "9875": 1002, "9012": 1002, "11315": 1002, "9041": 1002, "9858": 1002, "artiem": 1002, "krinitsyn": 1002, "9908": 1002, "8617": 1002, "maskani": [1002, 1004, 1005, 1006], "filali": 1002, "konstantino": 1002, "katriopla": 1002, "10774": 1002, "catalfo": 1002, "10795": 1002, "takeshi": [1002, 1007, 1008, 1009], "yoshizawa": 1002, "11082": 1002, "sadhana": 1002, "srinivasan": [1002, 1005], "9731": 1002, "10045": 1002, "fetch_mldata": 1002, "11466": 1002, "6374": 1002, "normalize_compon": [1002, 1004], "11585": 1002, "ivan": [1002, 1003, 1006], "panico": [1002, 1006], "11420": 1002, "6452": 1002, "walli": 1002, "gauz": 1002, "9492": 1002, "8484": 1002, "9886": 1002, "underflow": [1002, 1007], "10142": 1002, "5956": 1002, "_class_mean": 1002, "_class_cov": 1002, "10898": 1002, "nanxin": 1002, "9832": 1002, "11951": 1002, "r\u00fcdiger": [1002, 1003, 1005], "busch": [1002, 1003, 1005], "9707": 1002, "wan": 1002, "7071": 1002, "9157": 1002, "11176": 1002, "forsyth": 1002, "11542": 1002, "anna": 1002, "9723": 1002, "10908": 1002, "10899": 1002, "melderi": 1002, "10101": 1002, "10\u2079": 1002, "9147": 1002, "clae": 1002, "fredrik": 1002, "mannbi": 1002, "10441": 1002, "mayur": 1002, "kulkarni": 1002, "6689": 1002, "nihar": 1002, "sheth": 1002, "11293": 1002, "9656": 1002, "greenhal": 1002, "n_features_to_comput": 1002, "9222": 1002, "hoh": 1002, "9234": 1002, "andrewww": 1002, "8075": 1002, "11211": 1002, "9484": 1002, "dalla": 1002, "card": 1002, "9043": 1002, "10112": 1002, "logistic_regression_path": [1002, 1003], "11724": 1002, "9939": 1002, "westov": 1002, "10998": 1002, "vazelh": [1002, 1003, 1004], "10071": 1002, "10153": 1002, "d\u00f6pfert": 1002, "10095": 1002, "cv_valu": 1002, "10297": 1002, "mabel": [1002, 1006], "10581": 1002, "yacin": 1002, "mazari": 1002, "10687": 1002, "10836": 1002, "aishwarya": 1002, "10397": 1002, "10992": 1002, "11327": 1002, "11905": 1002, "9837": 1002, "10593": 1002, "10610": 1002, "8554": 1002, "9775": 1002, "10827": 1002, "osa": 1002, "8066": 1002, "10587": 1002, "3840": 1002, "niederb\u00fchl": 1002, "9521": 1002, "11124": 1002, "arya": 1002, "11160": 1002, "barkhorn": 1002, "11679": 1002, "pacha": 1002, "10845": 1002, "perez": 1002, "parra": 1002, "toledano": 1002, "10999": 1002, "memoryerror": [1002, 1006], "11135": 1002, "10377": 1002, "9786": 1002, "10093": 1002, "alexryndin": 1002, "9772": 1002, "9515": 1002, "liddel": 1002, "manh": 1002, "dao": 1002, "9851": 1002, "10280": 1002, "10336": 1002, "haoran": 1002, "basemixtur": [1002, 1003], "10740": 1002, "10869": 1002, "g\u00e9ron": 1002, "9686": 1002, "11310": 1002, "_fit_and_scor": 1002, "11576": 1002, "ronsin": [1002, 1003], "_run_search": 1002, "9599": 1002, "11006": 1002, "11557": 1002, "boucaud": 1002, "iid": 1002, "9085": 1002, "10677": 1002, "zhdanovich": 1002, "10982": 1002, "juliet": 1002, "lawton": 1002, "10928": 1002, "solutu": 1002, "immensu": 1002, "9257": 1002, "8190": 1002, "alcorn": 1002, "9681": 1002, "mottl": [1002, 1003], "10005": 1002, "10346": 1002, "tobia": [1002, 1007], "10887": 1002, "11136": 1002, "4394": 1002, "9579": 1002, "kober": 1002, "9655": 1002, "bjerr": 1002, "11556": 1002, "11774": 1002, "9456": 1002, "unexpectedli": 1002, "9304": 1002, "11144": [1002, 1003], "9151": 1002, "10521": 1002, "7668": 1002, "9647": 1002, "10195": 1002, "10192": 1002, "11272": 1002, "11467": 1002, "11505": 1002, "giusepp": [1002, 1003], "costa": [1002, 1007], "10210": 1002, "11520": 1002, "11011": 1002, "11005": 1002, "11308": 1002, "11206": 1002, "11306": 1002, "10437": 1002, "lucija": 1002, "gregov": 1002, "10452": 1002, "10181": 1002, "nirvan": [1002, 1006], "anjirbag": 1002, "9399": 1002, "10913": 1002, "rodrigo": 1002, "agundez": 1002, "10458": 1002, "9816": 1002, "newei": 1002, "11042": 1002, "11235": 1002, "active_features_": 1002, "feature_indices_": 1002, "n_values_": 1002, "9726": 1002, "10829": 1002, "gilberto": 1002, "olimpio": 1002, "10655": 1002, "python2": 1002, "10412": 1002, "jiongyan": 1002, "9497": 1002, "8361": 1002, "neo": 1002, "_criterion": 1002, "classificationcriterion": 1002, "regressioncriterion": 1002, "10325": 1002, "camil": 1002, "stap": 1002, "basedecisiontre": [1002, 1003, 1006], "10536": 1002, "ohayon": [1002, 1003], "11464": 1002, "stott": 1002, "10663": 1002, "10229": 1002, "11553": 1002, "10881": 1002, "sevin": 1002, "ridge_regress": [1002, 1003, 1009], "10306": 1002, "siebert": 1002, "11741": 1002, "11166": 1002, "11010": 1002, "lami": 1002, "11596": 1002, "marcu": 1002, "voss": 1002, "9569": 1002, "12462": 1002, "zachariah": 1002, "10474": 1002, "10500": 1002, "9701": 1002, "9378": 1002, "check_set_param": 1002, "7738": 1002, "alvin": 1002, "chiang": 1002, "8102": 1002, "ankita": 1002, "sinha": 1002, "check_methods_subset_invari": [1002, 1008], "10428": 1002, "check_sample_weights_pandas_seri": 1002, "11558": 1002, "211217613": 1002, "absolutelynowarranti": 1002, "richi": 1002, "halford": 1002, "adelr": 1002, "adityadaflapurkar": 1002, "aidan": 1002, "fitzgerald": 1002, "aishgrt1": 1002, "akash": 1002, "shivram": 1002, "lenail": [1002, 1006], "egg": 1002, "diaz": 1002, "amanda": [1002, 1005, 1006, 1007, 1008], "aniruddha": 1002, "annaayzenshtat": 1002, "antonio": [1002, 1004], "quinonez": 1002, "anubhav": 1002, "marwaha": 1002, "arik": 1002, "pamnani": 1002, "ozga": 1002, "arunava": 1002, "geron": [1002, 1007, 1008], "ayush": [1002, 1007], "bangda": 1002, "bastian": 1002, "venthur": 1002, "benn": 1002, "koonc": 1002, "cclauss": 1002, "chadi": 1002, "kamar": 1002, "holdgraf": 1002, "hirsch": 1002, "hogan": 1002, "cnx": 1002, "cwitt": 1002, "ferreira": [1002, 1007, 1008], "gomez": [1002, 1009], "klevebr": 1002, "shwed": 1002, "mohn": [1002, 1006], "danil": 1002, "baibak": [1002, 1003], "beach": 1002, "pickup": 1002, "derek": 1002, "niederhut": [1002, 1004], "dilutedsauc": 1002, "dlovel": 1002, "dor": 1002, "dougla": 1002, "duhaim": 1002, "tuzova": 1002, "eunji": 1002, "farahsae": 1002, "raimundo": 1002, "fenx": 1002, "frankhui": 1002, "franz": 1002, "wompner": 1002, "freija": 1002, "descamp": 1002, "frsi": 1002, "calvo": [1002, 1003], "georgi": [1002, 1005], "peev": [1002, 1005], "gkevinyen5418": 1002, "vermeil": 1002, "hongh": 1002, "hossein": [1002, 1003, 1004], "pourbozorg": [1002, 1003, 1004], "hristo": 1002, "hunan": 1002, "rostomyan": 1002, "iampat": 1002, "jaewon": 1002, "malcolm": 1002, "jami": 1002, "wolosonovich": 1002, "jeb": 1002, "bearer": 1002, "jinkun": 1002, "jjabl": 1002, "johnstott": 1002, "jotasi": 1002, "julietcl": 1002, "shenk": 1002, "karl": 1002, "kasper": 1002, "primdal": 1002, "lauritzen": 1002, "ksemb": 1002, "kuai": [1002, 1003], "kyeongpil": 1002, "kang": [1002, 1004], "kye": 1002, "kyledrogo": 1002, "l\u00e9o": 1002, "liutong": 1002, "lizao": 1002, "lkjcalc": 1002, "louib": [1002, 1003], "luciano": 1002, "luke": 1002, "persola": 1002, "markiwanchyshyn": 1002, "marsgui": 1002, "gubri": [1002, 1003], "koko": [1002, 1008], "copeland": [1002, 1003], "meghann": [1002, 1004], "minh": 1002, "jamaoui": [1002, 1003, 1006], "mohammad": [1002, 1003], "shahebaz": 1002, "muayyad": 1002, "alsadi": 1002, "nabarun": 1002, "pal": [1002, 1008], "narendran": 1002, "santhanam": 1002, "suh": 1002, "eng": 1002, "av": 1002, "nicolau": 1002, "werneck": 1002, "titov": [1002, 1004, 1007, 1008], "nilesh": 1002, "kevlani": 1002, "notmatthancock": [1002, 1004], "nzw": 1002, "oren": 1002, "milman": 1002, "osaid": 1002, "rehman": 1002, "nasir": 1002, "fernand": [1002, 1008], "olden": 1002, "pierreablin": 1002, "pietruh": 1002, "pinaki": 1002, "nath": 1002, "chowdhuri": [1002, 1008], "piotr": [1002, 1003], "szyma\u0144ski": [1002, 1003], "pradeep": [1002, 1003], "raamana": [1002, 1003], "pravar": 1002, "mahajan": [1002, 1004], "qingi": 1002, "rajendra": 1002, "arora": 1002, "rankylau": 1002, "kosobrodov": 1002, "rragundez": 1002, "sagnik": 1002, "bhattacharya": 1002, "radhakrishnan": 1002, "saqib": 1002, "nizam": 1002, "shamsi": 1002, "satish": 1002, "gigant": [1002, 1004], "flennerhag": 1002, "sebastien": 1002, "shalil": 1002, "awalei": 1002, "shangwu": [1002, 1003], "sharad": 1002, "vijalapuram": 1002, "shenhanc78": 1002, "rastogi": 1002, "siftikha": 1002, "sinclert": 1002, "p\u00e9rez": 1002, "solutusimmensu": 1002, "somya": 1002, "anand": [1002, 1006], "srajan": 1002, "paliw": 1002, "sriharsha": [1002, 1003], "hatwar": [1002, 1003], "mcdowel": 1002, "syonekura": 1002, "takanori": 1002, "hayashi": 1002, "tarcusx": 1002, "theriley106": 1002, "heavei": 1002, "augspurg": [1002, 1004], "trishnendu": 1002, "ghorai": 1002, "twosigmajab": 1002, "umar": [1002, 1003], "farouk": [1002, 1003], "urvang": [1002, 1004], "patel": [1002, 1004, 1005, 1006, 1008], "vadim": [1002, 1006, 1007], "markovtsev": 1002, "vinit": 1002, "vinod": 1002, "viraj": 1002, "mavani": 1002, "navkal": 1002, "vqean3": [1002, 1003], "vufg": 1002, "wallygauz": 1002, "wdevazelh": 1002, "barnett": 1002, "rosenfeld": 1002, "yime": 1002, "ymazari": 1002, "yufeng": 1002, "griffith": [1002, 1003], "z\u00e9": 1002, "vin\u00edciu": 1002, "zhenq": 1002, "zhiqe": 1002, "xiao": [1002, 1004, 1007, 1008], "couldn": [1003, 1004, 1005, 1006, 1007, 1008, 1009], "12955": 1003, "klopfer": 1003, "14197": 1003, "14024": 1003, "nicolashug": 1003, "13974": 1003, "hoang": [1003, 1004], "fhoang7": 1003, "14393": 1003, "guillem": [1003, 1004], "subi": [1003, 1004], "14087": 1003, "14067": 1003, "stalei": [1003, 1004], "14092": 1003, "14053": 1003, "13947": 1003, "instanci": 1003, "suffient": 1003, "13910": 1003, "13894": 1003, "myatt": [1003, 1004], "min_max_axi": 1003, "13741": 1003, "roddi": [1003, 1004], "macsween": [1003, 1004], "14309": 1003, "13864": 1003, "paresh": [1003, 1004], "13877": 1003, "_sag": 1003, "sag_solv": 1003, "3591": 1003, "13317": 1003, "13157": 1003, "13086": 1003, "cole": 1003, "13485": 1003, "assia": 1003, "benbihi": 1003, "13651": 1003, "reloc": 1003, "13486": 1003, "13427": 1003, "couvreur": [1003, 1004], "9069": 1003, "13835": 1003, "10727": 1003, "wood": 1003, "13250": 1003, "13241": 1003, "12143": 1003, "11650": 1003, "non_negative_factor": [1003, 1005, 1006, 1007], "12988": 1003, "8769": 1003, "11000": 1003, "thibault": 1003, "sejourn": 1003, "changedbehaviourwarn": 1003, "11526": 1003, "6848": 1003, "glemaitr": [1003, 1004, 1006], "11727": 1003, "13266": 1003, "13545": 1003, "sorro": 1003, "12807": 1003, "12513": 1003, "12543": 1003, "storch": 1003, "13260": 1003, "13283": 1003, "13524": 1003, "13174": 1003, "13496": 1003, "13620": 1003, "12436": 1003, "12983": 1003, "13251": 1003, "joshuakennethjon": 1003, "12715": 1003, "13164": 1003, "12834": 1003, "leastsquareserror": 1003, "update_terminal_region": 1003, "6463": 1003, "movelikeriv": 1003, "13193": 1003, "12599": 1003, "13779": 1003, "13780": 1003, "12916": 1003, "13641": 1003, "8478": 1003, "12177": 1003, "12583": 1003, "13601": 1003, "danylo": 1003, "densif": 1003, "13240": 1003, "bartosz": 1003, "13562": 1003, "11646": 1003, "11699": 1003, "make_dataset": 1003, "13336": 1003, "toleranbc": 1003, "11754": 1003, "13397": 1003, "fagan": 1003, "12174": 1003, "12972": 1003, "lucio": 1003, "fernandez": 1003, "arjona": 1003, "coeffeci": 1003, "13279": 1003, "13328": 1003, "13389": 1003, "basesgdclassifi": 1003, "13422": 1003, "cl\u00e9ment": [1003, 1007], "doumouro": 1003, "unhandl": 1003, "13363": 1003, "12821": 1003, "13350": 1003, "j\u00e9r\u00f4me": [1003, 1004, 1005], "dock\u00e8": [1003, 1004, 1005], "9907": 1003, "12232": 1003, "sangeeth": 1003, "11179": 1003, "13151": 1003, "12568": 1003, "8216": 1003, "romuald": 1003, "menuet": 1003, "12732": 1003, "12334": 1003, "13607": 1003, "12855": 1003, "pawel": 1003, "sendyk": 1003, "13628": 1003, "13447": 1003, "10580": 1003, "sandra": 1003, "mitrov": 1003, "13554": 1003, "celelibi": 1003, "13142": 1003, "11354": 1003, "12613": 1003, "12669": 1003, "torrella": [1003, 1004], "12861": 1003, "8773": 1003, "13366": 1003, "fournier": 1003, "10440": 1003, "12222": 1003, "10058": 1003, "chiotelli": 1003, "12279": 1003, "12582": 1003, "my_pipelin": 1003, "2568": 1003, "make_": 1003, "11364": 1003, "baze": 1003, "petrushev": 1003, "__len__": 1003, "13439": 1003, "12908": 1003, "drew": 1003, "13253": 1003, "12116": 1003, "12197": 1003, "12251": 1003, "float16": 1003, "13007": 1003, "raffaello": 1003, "baluyot": 1003, "13333": 1003, "13459": 1003, "hunter": 1003, "mcgushion": 1003, "8508": 1003, "6261": 1003, "vettigli": 1003, "justglow": 1003, "12300": 1003, "11458": 1003, "mitar": 1003, "milutinov": 1003, "12344": 1003, "13549": 1003, "warn_on_dtyp": 1003, "check_pairwise_arrai": 1003, "13382": 1003, "prathmesh": 1003, "saval": 1003, "11705": 1003, "11973": 1003, "our_rand_r": 1003, "madhura": [1003, 1005, 1006], "parikh": [1003, 1008, 1009], "13531": 1003, "check_fit_idempot": 1003, "alberto": [1003, 1007, 1008], "torr": 1003, "amourav": 1003, "assiaben": 1003, "micha\u0142owski": 1003, "brentfagan": 1003, "chenal": [1003, 1004, 1006], "choe": 1003, "drewmjohnston": 1003, "dror": 1003, "atariah": 1003, "esvhd": 1003, "falak": 1003, "gandenberg": 1003, "luqi": 1003, "jf": 1003, "kulbear": 1003, "leandro": [1003, 1007], "hermida": [1003, 1007], "luk": 1003, "manimaran": [1003, 1005, 1006, 1007, 1008], "gaido": 1003, "marinelm": 1003, "masstran": 1003, "roeschk": 1003, "aftab": 1003, "abdela": 1003, "ibraheem": 1003, "mwestt": 1003, "iijima": 1003, "oresti": 1003, "osman": 1003, "flanagan": [1003, 1004], "soriano": 1003, "peai": 1003, "pim": 1003, "haan": 1003, "raf": 1003, "rajdeep": 1003, "dua": 1003, "ra\u00fal": 1003, "garc\u00eda": [1003, 1004], "lekhwani": 1003, "varma": 1003, "shiyu": 1003, "duan": [1003, 1005], "smari": [1003, 1004, 1005], "st\u00e9phane": [1003, 1004, 1008], "surgan12": 1003, "thibsej": 1003, "xhan": 1003, "xinyuliu12": 1003, "zayd": 1003, "hammoudeh": 1003, "16397": [1004, 1005], "16500": 1004, "16505": 1004, "16076": 1004, "shack": [1004, 1005, 1006], "15930": 1004, "inder128": 1004, "15810": 1004, "15898": 1004, "gargsya": 1004, "15933": 1004, "15760": 1004, "15888": 1004, "15936": 1004, "dizietasahi": 1004, "15879": 1004, "bibhash": [1004, 1005], "chandra": [1004, 1005, 1008], "mitra": [1004, 1005], "15937": 1004, "blyston": [1004, 1005], "15863": 1004, "abstractmethod": 1004, "_check_x": 1004, "basenb": 1004, "15996": 1004, "brigitta": [1004, 1005, 1006], "sip\u0151cz": [1004, 1005, 1006], "15751": 1004, "tirth": [1004, 1005], "15868": 1004, "nikla": [1004, 1005], "smedemark": 1004, "marguli": 1004, "15797": 1004, "15947": 1004, "revamp": 1004, "14849": 1004, "_name_estim": 1004, "_gb": 1004, "facto": 1004, "_birch": 1004, "9250": 1004, "12927": 1004, "deprecationwarn": 1004, "interfer": 1004, "hinder": 1004, "15080": 1004, "14464": 1004, "13575": 1004, "10482": 1004, "13726": 1004, "shuzh": 1004, "9288": 1004, "15057": 1004, "korolev": 1004, "15120": 1004, "7943": 1004, "12303": 1004, "14510": 1004, "14890": 1004, "miguel": 1004, "cabrera": 1004, "14544": 1004, "15304": 1004, "jaim": 1004, "ferrando": 1004, "huerta": 1004, "12068": 1004, "12145": 1004, "13609": 1004, "camila": 1004, "williamson": 1004, "15661": 1004, "15160": 1004, "14259": 1004, "14764": 1004, "14740": 1004, "st\u00e9phan": 1004, "tulken": 1004, "14623": 1004, "sarra": 1004, "habchi": 1004, "15257": 1004, "willocx": 1004, "12650": 1004, "13960": 1004, "multiouput": 1004, "14908": 1004, "martina": [1004, 1006], "vila": [1004, 1006], "15382": 1004, "14933": 1004, "15138": 1004, "cusick": 1004, "14406": 1004, "14012": 1004, "faouzi": [1004, 1005], "13769": 1004, "14194": 1004, "least_absolute_devi": [1004, 1006, 1007], "13896": 1004, "13933": 1004, "14710": 1004, "14869": 1004, "14682": 1004, "hancock": 1004, "5963": 1004, "pablo": [1004, 1007, 1008], "dubou": 1004, "14287": 1004, "15375": 1004, "14305": 1004, "14114": 1004, "15084": 1004, "14294": 1004, "14907": 1004, "14602": 1004, "chawla": 1004, "vectorizermixin": 1004, "14430": 1004, "strip_accents_unicod": 1004, "15100": 1004, "gradi": 1004, "overflowerror": 1004, "15463": 1004, "norvan": 1004, "sahin": 1004, "14520": 1004, "11635": 1004, "alec": 1004, "13704": 1004, "15557": 1004, "14378": 1004, "masashi": [1004, 1006], "shibata": 1004, "ashim": 1004, "bhattarai": 1004, "15010": 1004, "skip_comput": 1004, "13773": 1004, "14356": 1004, "15393": 1004, "venkatachalam": [1004, 1005, 1006, 1007, 1008], "14646": 1004, "14028": 1004, "15429": 1004, "14706": 1004, "14108": 1004, "14170": 1004, "14296": 1004, "13618": 1004, "13995": 1004, "14458": 1004, "14591": 1004, "14864": 1004, "15044": 1004, "15086": 1004, "15038": 1004, "15082": 1004, "13213": 1004, "14647": 1004, "linalgerror": 1004, "13393": 1004, "13707": 1004, "training_data_": 1004, "14357": 1004, "14900": 1004, "socastro": 1004, "9951": 1004, "14936": 1004, "15083": 1004, "12789": 1004, "15274": 1004, "13938": 1004, "15049": 1004, "toccac": 1004, "ptocca": 1004, "13231": 1004, "dong": 1004, "13467": 1004, "14595": 1004, "14865": 1004, "l\u00e9onard": [1004, 1009], "binet": [1004, 1009], "14732": 1004, "14417": 1004, "15625": 1004, "12258": 1004, "14898": 1004, "matcovici": 1004, "14593": 1004, "reboul": 1004, "14549": 1004, "14704": 1004, "15096": 1004, "14629": 1004, "15488": 1004, "15490": 1004, "12569": 1004, "bicker": 1004, "9597": 1004, "wenbo": [1004, 1006], "zhao": [1004, 1006, 1007, 1008], "14336": 1004, "dexter": 1004, "9274": 1004, "perri": 1004, "13806": 1004, "ana\u00ebl": 1004, "beaugnon": 1004, "15119": 1004, "15053": 1004, "13290": 1004, "13987": 1004, "_pairwis": [1004, 1006], "13925": 1004, "robson": 1004, "15524": 1004, "xun": [1004, 1006], "12557": 1004, "border": 1004, "14286": 1004, "15099": 1004, "baselibsvm": 1004, "_sparse_fit": 1004, "14894": 1004, "danna": 1004, "naser": 1004, "12887": 1004, "15028": 1004, "guan": 1004, "14381": 1004, "11232": 1004, "sievert": 1004, "10815": 1004, "14035": 1004, "14475": 1004, "14538": 1004, "14872": 1004, "upcast": [1004, 1008], "15094": 1004, "choose_check_classifiers_label": 1004, "enforce_estimator_tags_i": 1004, "mock": 1004, "mockdatafram": 1004, "checkingclassifi": 1004, "newton_cg": 1004, "random_choice_csc": 1004, "fast_dict": 1004, "parallel_help": 1004, "14902": 1004, "14971": 1004, "nep": 1004, "14702": 1004, "13013": 1004, "13875": 1004, "14680": 1004, "check_classifier_multioutput": 1004, "check_regressor_multioutput": 1004, "13392": 1004, "rok": 1004, "mihevc": 1004, "check_transformer_data_not_an_arrai": 1004, "mro": [1004, 1005], "14884": 1004, "alphonsu": 1004, "abbi": [1004, 1005], "popa": [1004, 1005], "abdur": 1004, "rahmaan": 1004, "janhang": 1004, "abenbihi": 1004, "abhinav": [1004, 1007], "sagar": 1004, "jana": 1004, "lagat": 1004, "alessandro": [1004, 1006], "surac": 1004, "siqueira": 1004, "alexgoryainov": 1004, "itk": [1004, 1005, 1006], "alexshack": [1004, 1005, 1006], "akinkunl": 1004, "kaseorg": 1004, "maldonado": [1004, 1007], "angela": [1004, 1005], "ambroz": [1004, 1005], "anisha": 1004, "keshavan": 1004, "gutierrez": 1004, "anuja": 1004, "archana": [1004, 1006], "alva": 1004, "arnaudstiegl": 1004, "arpanchowdhri": 1004, "ashimb9": 1004, "ayomid": 1004, "bamidel": 1004, "baran": 1004, "buluttekin": 1004, "barrycg": 1004, "bill": [1004, 1005], "mill": 1004, "biswadip": 1004, "mandal": 1004, "blackd0t": 1004, "barklei": 1004, "c56poni": 1004, "camilaagw": 1004, "cartman_nabana": 1004, "catajara": 1004, "cgsavard": [1004, 1005], "vesteghem": 1004, "dakota": 1004, "grusak": 1004, "datenbergwerk": 1004, "dormagen": 1004, "deeplook": 1004, "drgfreeman": 1004, "cashman": 1004, "edvardlindelof": 1004, "ndirangu": [1004, 1008], "eunseop": 1004, "jeong": 1004, "fanni": 1004, "federicopisanu": 1004, "divo": 1004, "flaviomorelli": 1004, "francidona": 1004, "franco": 1004, "luqu": 1004, "freder": 1004, "haas": 1004, "g0g0gadget": 1004, "altai": 1004, "vale": 1004, "rio": [1004, 1006, 1007, 1008], "ganevgv": 1004, "gdex1": 1004, "getgaurav2": 1004, "gideon": 1004, "sonoiya": 1004, "gpapadok": [1004, 1008], "mogavero": 1004, "h4dr1en": 1004, "hadshirt": 1004, "hailei": [1004, 1005], "nguyen": [1004, 1005, 1008], "hannah": [1004, 1006, 1008], "bruce": [1004, 1005], "macdonald": [1004, 1005], "honglu": 1004, "ingrid": 1004, "spielman": 1004, "a16": [1004, 1005], "jaehong": 1004, "hill": 1004, "jai": [1004, 1008], "jeromedock": 1004, "jesper": 1004, "dramsch": 1004, "joanna": 1004, "ortiz": 1004, "kanika": 1004, "sabharw": 1004, "katarina": [1004, 1006], "slama": [1004, 1006], "kellycarmodi": 1004, "eth": 1004, "kensuk": 1004, "arai": 1004, "kesshi": [1004, 1005], "kevad": 1004, "lofti": [1004, 1005], "winata": [1004, 1006], "sheng": 1004, "dolmatov": 1004, "kirthi": 1004, "shankar": 1004, "sivamani": 1004, "katyal": 1004, "lakshmi": 1004, "krishnan": 1004, "lalliacqua": [1004, 1007], "lbfin": 1004, "loopym": 1004, "lostcoast": 1004, "huynh": [1004, 1006], "lrjball": [1004, 1005], "roeder": 1004, "maggiecheg": [1004, 1008], "maithreyi": 1004, "venkatesh": 1004, "maltimor": 1004, "maocx": 1004, "douriez": [1004, 1005], "oywa": 1004, "aladago": 1004, "mbillingr": 1004, "clare": 1004, "micah": 1004, "miguelbarao": 1004, "mina": [1004, 1005], "naghshhnejad": [1004, 1005], "motmoti": 1004, "mschaffenroth": 1004, "natasha": 1004, "nezar": 1004, "nidhin": 1004, "pattaniyil": 1004, "nishan": 1004, "mann": 1004, "nitya": 1004, "mandyam": 1004, "novaya": [1004, 1007], "nxorabl": 1004, "oleg": 1004, "stikhin": 1004, "omar": [1004, 1009], "saleem": 1004, "panpiort8": [1004, 1006], "paula": [1004, 1005], "poorna": [1004, 1006], "pspachtholz": [1004, 1005, 1006], "qdeffens": [1004, 1007], "garg": [1004, 1005], "rapha\u00ebl": 1004, "bournhonesqu": 1004, "reza": 1004, "gharibi": 1004, "payn": 1004, "rlm": 1004, "juergen": 1004, "sanjabi": 1004, "ruchitagard": 1004, "ruth": 1004, "waithera": 1004, "sackei": 1004, "samesh": [1004, 1005], "lakhotia": [1004, 1005], "sewook": 1004, "dare": 1004, "shreya": 1004, "simoncw": 1004, "smujjiga": 1004, "s\u00f6nke": 1004, "behrend": 1004, "soumirai": 1004, "steinfurt": [1004, 1006], "cowlei": 1004, "th0rwa": [1004, 1005], "theoptip": [1004, 1005], "theotheo": 1004, "thierno": 1004, "ibrahima": 1004, "diop": 1004, "schmitt": [1004, 1005], "tilen": 1004, "kusterl": 1004, "timsaur": 1004, "tola": 1004, "topisan": 1004, "ttang131": 1004, "veerlosar": 1004, "luzgin": 1004, "jeanselm": 1004, "lostanlen": 1004, "vnherdeiro": 1004, "wendi": 1004, "willdarnel": 1004, "wolframalpha": 1004, "xcjason": 1004, "martian": 1004, "xsat": 1004, "yinglr": 1004, "yokasr": 1004, "maxin": [1004, 1005], "yulia": 1004, "zamrii": 1004, "feng": [1004, 1006, 1007, 1008], "17959": 1005, "17848": 1005, "17742": 1005, "17995": 1005, "thomaz": 1005, "santana": [1005, 1008], "dsouza": [1005, 1006, 1007, 1008], "17433": 1005, "17985": 1005, "multinomialdevi": 1005, "logloss": 1005, "17694": 1005, "rempfler": 1005, "tsutomu": 1005, "kusanagi": [1005, 1007], "17357": 1005, "18016": 1005, "x_copi": 1005, "17914": 1005, "15730": 1005, "forrest": [1005, 1006], "17309": 1005, "swier": [1005, 1006], "heer": 1005, "17360": 1005, "17812": 1005, "bruno": [1005, 1006, 1007], "idl": 1005, "17210": 1005, "17235": 1005, "17204": 1005, "changed_onli": 1005, "17205": 1005, "15005": [1005, 1007], "slep009": [1005, 1007, 1008], "estimator_samples_": 1005, "16149": 1005, "11950": 1005, "11514": 1005, "16075": 1005, "16484": 1005, "agglomerativecluclust": 1005, "16257": 1005, "simona": [1005, 1006, 1007], "maggio": [1005, 1006, 1007], "16801": 1005, "rcwoolston": 1005, "16431": 1005, "14048": 1005, "15963": 1005, "16084": 1005, "15950": 1005, "stephani": 1005, "15980": 1005, "wconnel": 1005, "15709": 1005, "15707": 1005, "maciej": 1005, "mikulski": 1005, "16006": 1005, "rushabh": 1005, "vasani": 1005, "streamhandl": 1005, "logger": 1005, "handler": 1005, "16451": 1005, "16280": 1005, "16837": 1005, "wornbb": 1005, "15669": 1005, "chaitanya": 1005, "16224": 1005, "schwetlick": [1005, 1006], "gelavizh": 1005, "ahmadi": 1005, "marija": [1005, 1006], "vlajic": [1005, 1006], "wheeler": [1005, 1006], "16841": 1005, "16655": 1005, "16718": 1005, "miotto": 1005, "16981": 1005, "g\u00f3rski": [1005, 1006], "14696": 1005, "14516": 1005, "15582": 1005, "16069": 1005, "bail": 1005, "16183": 1005, "16182": 1005, "santhosh": 1005, "16437": 1005, "hwan": 1005, "cho": 1005, "16539": 1005, "deros": 1005, "16692": 1005, "16663": 1005, "15834": 1005, "santiago": 1005, "mola": 1005, "16103": 1005, "divyaprabha": 1005, "selectormixin": 1005, "16132": 1005, "trimeta": 1005, "15503": 1005, "15782": 1005, "plgreenliru": 1005, "16403": 1005, "narendra": 1005, "mukherje": 1005, "16508": 1005, "15864": 1005, "14300": 1005, "15436": 1005, "15652": 1005, "15179": 1005, "angelaambroz": 1005, "15773": 1005, "15655": 1005, "14848": 1005, "absgrad": 1005, "_newton_cg": 1005, "16266": 1005, "standard_coef_": 1005, "standard_intercept_": 1005, "average_coef_": 1005, "average_intercept_": 1005, "16261": 1005, "brandt": 1005, "16849": 1005, "14264": 1005, "17021": 1005, "16323": 1005, "16362": 1005, "16442": 1005, "parson": [1005, 1007], "rick": 1005, "mackenbach": 1005, "16993": 1005, "emit": 1005, "15622": 1005, "mors": 1005, "15918": 1005, "kubin": 1005, "fit_grid_point": 1005, "16401": 1005, "pratama": 1005, "sutiono": 1005, "15953": 1005, "15959": 1005, "16111": 1005, "16090": 1005, "jayaratn": [1005, 1006], "14075": 1005, "meyer89": 1005, "16117": 1005, "15785": 1005, "16245": 1005, "16585": 1005, "15762": 1005, "16466": 1005, "16632": 1005, "maura": 1005, "pintor": 1005, "battista": 1005, "biggio": 1005, "15946": 1005, "ngshya": 1005, "32767": 1005, "mersenn": 1005, "twister": 1005, "31bit": 1005, "63bit": 1005, "crude": 1005, "postprocessor": 1005, "lemir": 1005, "13511": 1005, "kennel": 1005, "11296": 1005, "15558": 1005, "15806": 1005, "16331": 1005, "batiss": 1005, "15926": 1005, "16021": 1005, "sparsearrai": 1005, "16728": 1005, "uint": 1005, "17032": 1005, "_safe_tag": 1005, "16950": 1005, "15380": 1005, "acitiv": 1005, "16726": 1005, "16112": 1005, "16622": 1005, "17061": 1005, "aleksandra": 1005, "kocot": 1005, "alonso": [1005, 1007], "allend": [1005, 1007], "ana": [1005, 1007], "casado": 1005, "ankit810": 1005, "arunav": 1005, "konwar": 1005, "maingret": 1005, "beier": 1005, "berni": 1005, "bharathi": 1005, "brigi": [1005, 1006], "castachick": 1005, "castor": 1005, "corri": 1005, "bartelheim": 1005, "dani\u00ebl": 1005, "gelder": 1005, "daphn": 1005, "breuer": 1005, "cort": [1005, 1006], "dbauer9": 1005, "borovikova": 1005, "eln": 1005, "emili": [1005, 1006], "leung": 1005, "evgeni": 1005, "chasnovski": 1005, "fabiana": 1005, "facundo": [1005, 1008], "ferr\u00edn": 1005, "franziska": 1005, "boenisch": 1005, "bolmier": [1005, 1006], "gholdman1": 1005, "gonthier": 1005, "hao": [1005, 1006, 1008], "chun": [1005, 1006, 1008], "haoyin": [1005, 1007, 1008], "h\u00e9lion": 1005, "bourboux": 1005, "himanshu": [1005, 1008], "hirofumi": [1005, 1006], "suzuki": [1005, 1006], "huangk10": 1005, "kemenad": 1005, "hye": 1005, "sung": 1005, "indecisiveus": [1005, 1006], "inderjeet": 1005, "jjmistri": 1005, "haitz": [1005, 1007, 1008], "legarreta": [1005, 1007, 1008], "gorro\u00f1o": [1005, 1007, 1008], "judithabk6": 1005, "jumon": 1005, "kathryn": 1005, "krishnachaitanya9": 1005, "gia": 1005, "thuan": 1005, "lkubin": 1005, "lopusz": 1005, "lucgiffon": 1005, "lucyleeow": 1005, "kemk": 1005, "magda": 1005, "zielinska": 1005, "mandi": [1005, 1008], "gu": [1005, 1006, 1008], "manish": 1005, "aradwad": 1005, "maren": [1005, 1006, 1007, 1008], "westermann": [1005, 1006, 1007, 1008], "mariana": 1005, "meirel": 1005, "mariel": 1005, "mc4229": 1005, "shoemak": 1005, "micha\u0142": 1005, "s\u0142apek": 1005, "mo": 1005, "mojca": 1005, "bertoncelj": 1005, "narendramukherje": 1005, "nicolasservel": 1005, "nkish": 1005, "noa": 1005, "tamir": [1005, 1008], "olicairn": 1005, "ur": 1005, "lenz": 1005, "delanou": 1005, "qizhi": 1005, "quang": 1005, "rachelcjordan": 1005, "raduspaimoc": 1005, "riccardo": 1005, "folloni": 1005, "ritchi": 1005, "rori": 1005, "hartong": 1005, "redden": 1005, "sambhav": 1005, "kothari": 1005, "santhoshbala18": 1005, "sarat": 1005, "addep": 1005, "scibol": 1005, "kie\u00dfl": 1005, "sergiodsr": 1005, "shiki": 1005, "shubh": 1005, "chatterje": 1005, "simonamaggio": [1005, 1006, 1007], "snowhit": 1005, "stareh": 1005, "marsh": 1005, "sunmi": 1005, "yoon": 1005, "talgatomarov": 1005, "tamirlan1": 1005, "nonner": 1005, "vink": [1005, 1007], "tiphain": 1005, "viard": 1005, "titu": 1005, "vachan": 1005, "vandana": 1005, "iyer": 1005, "waelbenamara": 1005, "wderos": 1005, "wenliwyan": 1005, "windber": 1005, "19579": 1006, "19646": 1006, "stopiter": 1006, "19922": 1006, "19732": 1006, "ishikawa": [1006, 1007], "19407": 1006, "ushtanit": [1006, 1007], "19982": 1006, "19939": 1006, "halvic": 1006, "19703": 1006, "sobkevich": 1006, "villaz\u00f3n": 1006, "terraza": 1006, "fonari": [1006, 1007], "19182": 1006, "yosuk": [1006, 1007], "kobayashi": [1006, 1007], "19721": 1006, "19659": 1006, "19211": 1006, "19847": 1006, "xiaoyu": 1006, "chai": 1006, "19308": 1006, "19234": 1006, "19727": 1006, "delong": [1006, 1007], "transfrom": 1006, "19888": 1006, "19924": 1006, "19271": 1006, "zhaowei": 1006, "19580": 1006, "brice": [1006, 1007], "adamson": 1006, "wil": 1006, "yegelwel": 1006, "css": 1006, "19417": 1006, "19179": 1006, "19126": 1006, "17448": 1006, "17107": 1006, "17546": 1006, "17856": 1006, "17984": 1006, "riedmann": 1006, "francesco": 1006, "casalegno": 1006, "18052": 1006, "sean": [1006, 1007, 1009], "stallei": 1006, "17937": 1006, "counts_": 1006, "init_size_": 1006, "17864": 1006, "17616": 1006, "18167": 1006, "18256": 1006, "jayratn": 1006, "16392": 1006, "17095": 1006, "18746": 1006, "18525": 1006, "norm_y_weight": 1006, "x_mean_": 1006, "y_mean_": 1006, "x_std_": 1006, "y_std_": 1006, "18768": 1006, "18302": 1006, "md5": 1006, "checksum": 1006, "14800": 1006, "17396": 1006, "jiaxiang": 1006, "17491": 1006, "18280": 1006, "17499": 1006, "17610": 1006, "11064": 1006, "17414": 1006, "18149": 1006, "17679": 1006, "18528": 1006, "villanova": [1006, 1007], "14446": 1006, "18394": 1006, "16985": 1006, "garbag": 1006, "18334": 1006, "multicor": [1006, 1007], "18341": 1006, "egor": 1006, "smirnov": 1006, "18410": 1006, "17702": 1006, "18326": 1006, "changedbehaviorwarn": 1006, "nonblasdotwarn": 1006, "17804": 1006, "17367": 1006, "15427": 1006, "gangesh": 1006, "gudmalwar": 1006, "erin": 1006, "6545": 1006, "17159": 1006, "15361": 1006, "17878": 1006, "17090": 1006, "_check_bounds_param": 1006, "12638": 1006, "lannuzel": 1006, "17526": 1006, "ayako": 1006, "yagi": 1006, "17612": 1006, "srimukh": 1006, "sripada": 1006, "16493": 1006, "darshan": 1006, "15636": 1006, "18987": 1006, "16619": 1006, "16906": 1006, "roei": 1006, "kahni": 1006, "18293": 1006, "16289": 1006, "kishimoto": 1006, "18639": 1006, "13003": 1006, "s\u00e1nchez": 1006, "18545": 1006, "laurenz": 1006, "reitsam": 1006, "17578": 1006, "knox": 1006, "6624": 1006, "marijn": 1006, "vliet": 1006, "18121": 1006, "18607": 1006, "fhaselbeck": 1006, "18622": 1006, "haesun": 1006, "10493": 1006, "17997": 1006, "maisonneuv": 1006, "17662": 1006, "18278": 1006, "17412": 1006, "mayer": [1006, 1008], "16625": 1006, "10591": 1006, "karnowski": 1006, "plot_det_curv": [1006, 1007], "18176": 1006, "10708": 1006, "15007": 1006, "hathidara": 1006, "10711": 1006, "17192": 1006, "avi": [1006, 1007], "17225": 1006, "17569": 1006, "17651": 1006, "mato": 1006, "17777": 1006, "shubhanshu": 1006, "mishra": [1006, 1007], "17826": 1006, "decal": 1006, "willard": 1006, "17935": 1006, "cari": 1006, "goltermann": 1006, "18114": 1006, "18405": 1006, "yakov": 1006, "pchelintsev": 1006, "13900": 1006, "17478": 1006, "teon": 1006, "13204": 1006, "kosic": 1006, "18527": 1006, "18343": 1006, "devi": 1006, "sandeep": 1006, "18595": 1006, "18222": 1006, "18266": 1006, "subrat": 1006, "sahu": 1006, "15126": 1006, "17987": 1006, "17233": 1006, "zolisa": 1006, "bleki": 1006, "histgradientboost": 1006, "18124": 1006, "brocchini": 1006, "armstrong": 1006, "17427": 1006, "17038": 1006, "neighborsbas": 1006, "17148": 1006, "18691": 1006, "18370": 1006, "18612": 1006, "17603": 1006, "17604": 1006, "17606": 1006, "17608": 1006, "17609": 1006, "17633": 1006, "17661": 1006, "17932": 1006, "16352": 1006, "17759": 1006, "18269": 1006, "17876": 1006, "18429": 1006, "biernat": 1006, "17317": 1006, "17406": 1006, "wick": 1006, "18406": 1006, "17833": 1006, "yashika": 1006, "18510": 1006, "18447": 1006, "16066": 1006, "18682": 1006, "16935": 1006, "17193": 1006, "16335": 1006, "14982": 1006, "11682": 1006, "patric": [1006, 1007], "15763": 1006, "16530": 1006, "shuhua": 1006, "17386": 1006, "17187": 1006, "x_idx_sort": 1006, "17614": 1006, "check_methods_sample_order_invari": [1006, 1008], "17598": 1006, "ngo": 1006, "17992": 1006, "endian": 1006, "17644": 1006, "18508": 1006, "abo7atm": 1006, "spannbauer": 1006, "deodhar": 1006, "alexandracraciun": 1006, "amy12xx": 1006, "tiwari": 1006, "choraria": 1006, "subramaniyan": 1006, "kushwaha": 1006, "atsushi": [1006, 1007], "nukariya": [1006, 1007], "aura": 1006, "autoviz": 1006, "auto_viml": 1006, "avinash": 1006, "anak": 1006, "barankaraku": 1006, "barberogaston": 1006, "beatrizsmg": 1006, "mainy": 1006, "bossan": [1006, 1008], "pedigo": [1006, 1007], "bhavika": 1006, "devnani": 1006, "biprateep": 1006, "dei": 1006, "bmaisonn": 1006, "byron": 1006, "ceethinwa": [1006, 1007], "chaitanyamog": 1006, "clmbst": 1006, "coelhudo": 1006, "crispinlogan": 1006, "cristina": 1006, "mula": 1006, "darioka": [1006, 1008], "declan": 1006, "neill": 1006, "deeksha": 1006, "madan": 1006, "fiegel": [1006, 1007, 1009], "khoo": 1006, "eschibli": 1006, "fran": [1006, 1007, 1008], "larsson": [1006, 1007, 1008], "sheni": 1006, "genvalen": [1006, 1007, 1008], "kiragu": 1006, "gesa": 1006, "stupperich": 1006, "ghislain": 1006, "vaillant": 1006, "gim": 1006, "seng": 1006, "chevali": 1006, "bohl": [1006, 1008], "schole": 1006, "hitesh": 1006, "somani": 1006, "hoda1394": 1006, "moin": 1006, "hugorichard": 1006, "isuru": 1006, "wiryadi": 1006, "j0rd1smit": 1006, "jaehyun": 1006, "ahn": 1006, "tae": 1006, "hoctor": 1006, "vese": 1006, "jeevan": 1006, "jeroenpeterbo": 1006, "jhay": 1006, "jigna": 1006, "panchal": 1006, "jim0421": 1006, "joaquin": 1006, "gorb": 1006, "moya": 1006, "kartik": 1006, "chugh": 1006, "kaylani2": 1006, "kendrick": 1006, "cetina": 1006, "kenni": 1006, "isakov": 1006, "koki": 1006, "nishihara": 1006, "krum": [1006, 1008], "arnaudov": [1006, 1008], "oldja": 1006, "guitton": 1006, "mariam": 1006, "l\u00f6ning": 1006, "scheubrein": 1006, "megasari": 1006, "mathschi": 1006, "giudic": 1006, "milan": 1006, "straka": 1006, "muoki": 1006, "caleb": 1006, "haiat": 1006, "nadia": 1006, "tahiri": 1006, "ph": 1006, "hamada": 1006, "neil": 1006, "botelho": 1006, "nil": 1006, "noelano": 1006, "oj_lappi": 1006, "oleh": [1006, 1008], "kozynet": [1006, 1008], "pankaj": 1006, "jindal": 1006, "pardeep": 1006, "parthiv": 1006, "chigurupati": 1006, "pgithub": 1006, "probinette4": 1006, "pwalchessen": 1006, "rachel": 1006, "fischoff": 1006, "toshniw": 1006, "rafei": 1006, "iqbal": 1006, "rahul": 1006, "jakhar": 1006, "rachum": 1006, "ramyanp": [1006, 1007], "rauwuckl": 1006, "ravi": 1006, "kiran": 1006, "boggavarapu": 1006, "rishi": 1006, "advani": 1006, "rithvik": 1006, "romijnd": 1006, "tavenard": 1006, "rubi": 1006, "werman": 1006, "ryotaro": 1006, "tsukada": 1006, "sadak": 1006, "khandelw": 1006, "ezebunandu": 1006, "kimbinyi": 1006, "shail": 1006, "keller": 1006, "shao": [1006, 1007, 1008], "shooter23": [1006, 1007], "soledad": 1006, "galli": 1006, "subrat93": 1006, "sunitha": 1006, "selvan": 1006, "kusanagi2": 1006, "terenc": [1006, 1007], "honl": [1006, 1007], "thij": 1006, "thomas9292": 1006, "thorben": 1006, "tijanajovanov": 1006, "timo": 1006, "tnwei": 1006, "ufmay": 1006, "umberto": 1006, "lupo": 1006, "vika": [1006, 1008], "viniciu": [1006, 1007], "fuck": [1006, 1007], "violeta": 1006, "watchtheblur": 1006, "willpeppo": 1006, "xethan": 1006, "qianm": 1006, "yue": 1006, "yutaro": 1006, "ikeda": 1006, "zacchari": 1006, "ramzi": 1006, "zoj613": 1006, "21271": 1007, "21833": 1007, "siavash": 1007, "rezazadeh": 1007, "19210": 1007, "21295": 1007, "22050": 1007, "21991": 1007, "19869": 1007, "21481": [1007, 1008], "andr\u00e9": [1007, 1008], "babino": [1007, 1008], "disconnect": 1007, "21915": 1007, "21694": 1007, "minknowski": 1007, "21741": 1007, "21871": 1007, "21845": 1007, "21517": 1007, "21917": 1007, "21552": 1007, "escap": 1007, "21493": 1007, "21199": 1007, "20638": 1007, "bohn\u00e9": 1007, "21179": 1007, "21195": 1007, "21130": 1007, "20761": 1007, "21251": 1007, "min_idf": 1007, "max_idf": 1007, "20752": 1007, "alek": [1007, 1008], "lefebvr": [1007, 1008], "21340": 1007, "21093": 1007, "21351": 1007, "cve": 1007, "28975": 1007, "21336": 1007, "_check_sample_weight": 1007, "only_non_neg": 1007, "20880": 1007, "andr\u00e1": [1007, 1008], "if_delegate_has_method": [1007, 1008], "21145": 1007, "zahlii": 1007, "21389": 1007, "20002": 1007, "19310": 1007, "least_squar": 1007, "19733": 1007, "lad": 1007, "absolute_loss": 1007, "20165": 1007, "18444": 1007, "18010": 1007, "threadsaf": 1007, "18736": 1007, "17443": 1007, "19641": 1007, "20087": 1007, "fauchereau": 1007, "19002": 1007, "19052": 1007, "yusuk": 1007, "nagasaka": 1007, "17622": 1007, "19024": 1007, "franki": 1007, "robertson": 1007, "20117": 1007, "natchiappan": [1007, 1008], "19883": 1007, "20597": 1007, "20899": 1007, "20200": 1007, "fit_": 1007, "partial_fit_": 1007, "19297": 1007, "20560": 1007, "18393": 1007, "bittarello": 1007, "19263": 1007, "19244": 1007, "18459": 1007, "nd": 1007, "18898": 1007, "ora": 1007, "phongpanagnam": 1007, "21080": 1007, "ledoit_wolf_shrinkag": 1007, "20416": 1007, "defoi": 1007, "20583": 1007, "19365": 1007, "ateif": 1007, "sara": 1007, "19669": 1007, "importlib": 1007, "pyoxid": 1007, "20297": 1007, "20209": 1007, "19011": 1007, "20729": 1007, "12069": 1007, "19046": 1007, "surya": [1007, 1008], "18433": 1007, "19198": 1007, "19159": 1007, "beno\u00eet": 1007, "mal\u00e9zieux": 1007, "19908": 1007, "20512": 1007, "20960": 1007, "cgroup": [1007, 1008], "quota": [1007, 1008], "20477": 1007, "19799": 1007, "19564": 1007, "19836": 1007, "19162": 1007, "10096": 1007, "fenil": 1007, "suchak": 1007, "20159": 1007, "murata": [1007, 1008], "20534": 1007, "19296": 1007, "19035": 1007, "19520": 1007, "18964": 1007, "19401": 1007, "relova": 1007, "17169": 1007, "dmytro": 1007, "lituiev": 1007, "20380": 1007, "pulido": 1007, "felip": [1007, 1008], "bidu": [1007, 1008], "rutter": 1007, "20515": 1007, "carsten": 1007, "allefeld": 1007, "19568": 1007, "shyam": 1007, "20207": 1007, "tomohiro": 1007, "endo": 1007, "20161": 1007, "shuhei": 1007, "kayawari": 1007, "arka204": [1007, 1009], "20431": 1007, "pfaffel": 1007, "19428": 1007, "hamoumi": 1007, "19411": 1007, "20959": 1007, "20554": 1007, "xiangyin": 1007, "kong": 1007, "9978": 1007, "10027": 1007, "16449": 1007, "20231": 1007, "naka": 1007, "19571": 1007, "20155": 1007, "oura": [1007, 1008, 1009], "19004": 1007, "midvidi": 1007, "19055": 1007, "19172": 1007, "19426": 1007, "19499": 1007, "strubel": 1007, "19616": 1007, "19391": 1007, "19390": 1007, "linearmodel": 1007, "17743": 1007, "17772": 1007, "17746": 1007, "17785": 1007, "17750": 1007, "17769": 1007, "20683": 1007, "19491": 1007, "19472": 1007, "shortest_path": 1007, "20531": 1007, "19415": 1007, "17036": 1007, "20326": 1007, "uttam": 1007, "9843": 1007, "19643": 1007, "attard": 1007, "19784": 1007, "18328": 1007, "20312": 1007, "divyanshu": 1007, "deoli": 1007, "18543": 1007, "20552": 1007, "19278": 1007, "20030": 1007, "tingshan": 1007, "18649": 1007, "rodion": 1007, "martynov": 1007, "20619": 1007, "baseshufflesplit": 1007, "20056": 1007, "pabloduque0": 1007, "prematur": 1007, "20904": 1007, "tomasz": 1007, "jakubek": [1007, 1008], "18925": 1007, "poznik": [1007, 1008], "18842": 1007, "19473": 1007, "jiefangxuanyan": 1007, "20072": 1007, "20842": 1007, "mart\u00edn": [1007, 1008], "19631": 1007, "19790": 1007, "flynn": 1007, "18368": 1007, "19483": 1007, "20526": 1007, "19069": 1007, "19041": 1007, "20250": 1007, "20652": 1007, "19934": 1007, "gleb": 1007, "levitskii": 1007, "19734": 1007, "robinson": 1007, "19752": 1007, "zhehao": [1007, 1008, 1009], "19527": 1007, "19788": 1007, "19356": 1007, "makoeppel": 1007, "19879": 1007, "19906": 1007, "20727": 1007, "20961": 1007, "n_input_features_": 1007, "20240": 1007, "20843": 1007, "18959": 1007, "wstate": 1007, "20023": 1007, "19336": 1007, "20272": 1007, "19459": 1007, "bezuidenhout": 1007, "clifford": 1007, "akai": 1007, "nettei": 1007, "19948": 1007, "20657": 1007, "19766": 1007, "propreti": 1007, "20385": 1007, "_weighted_percentil": 1007, "huberlossfunct": 1007, "20528": 1007, "_safe_index": 1007, "20673": 1007, "is_scalar_nan": 1007, "assert_warn": 1007, "assert_warns_messag": 1007, "20521": 1007, "abdulelah": 1007, "mesfer": 1007, "adrian": [1007, 1008, 1009], "garcia": 1007, "badaracco": 1007, "sad\u0142ocha": 1007, "rubial": 1007, "alessia": 1007, "marcolini": 1007, "alihan": 1007, "zihna": 1007, "alin": 1007, "amol": 1007, "deshmukh": 1007, "pessoa": 1007, "anavelyz": 1007, "ashish": 1007, "ashvith": 1007, "shetti": 1007, "baam": [1007, 1008], "baptbillard": 1007, "bmalezieux": 1007, "bumblebe": 1007, "caherrera": 1007, "meli": [1007, 1008], "chrissobel": 1007, "yeh": 1007, "chuliang": 1007, "cliffordemmanuel": 1007, "conner": 1007, "shen": 1007, "dimitri": [1007, 1008], "papadopoulo": [1007, 1008], "orfano": [1007, 1008], "dmallia17": 1007, "ds_ana": 1007, "jardim": 1007, "edwinwenink": 1007, "eleni": 1007, "markou": 1007, "ericellwang": [1007, 1008], "ezri": 1007, "mudd": 1007, "fato": 1007, "morina": 1007, "hafner": 1007, "flyingdutchman23": 1007, "uwha": [1007, 1008], "bereng": 1007, "frederick": 1007, "frellwan": 1007, "vicent": [1007, 1008], "geroldcsend": 1007, "glen": 1007, "gl\u00f2ria": 1007, "mu\u00f1oz": 1007, "gregorystrubel": 1007, "groceryheist": 1007, "guiweb": 1007, "haidar": [1007, 1008], "almubarak": [1007, 1008], "moritz": 1007, "g\u00fcnther": 1007, "mirza": 1007, "harutaka": 1007, "kawamura": 1007, "hassan": 1007, "alsawadi": 1007, "geovan": [1007, 1008], "gome": [1007, 1008], "lima": [1007, 1008], "ilic": 1007, "ikko": 1007, "ashimin": 1007, "isaack": 1007, "mungui": 1007, "ishaan": 1007, "bhat": 1007, "ishan": [1007, 1008], "iwhalv": 1007, "preiss": 1007, "budarz": 1007, "jannik": 1007, "jennif": 1007, "jianzhu": 1007, "guo": 1007, "jnboehm": 1007, "johanwork": 1007, "paton": 1007, "n\u00e1pole": 1007, "julio": 1007, "julyrashchenko": 1007, "jvm": 1007, "kadatatlu": 1007, "kishor": 1007, "karen": 1007, "palacio": 1007, "kmatt10": 1007, "kobaski": 1007, "kot271828": 1007, "kunj": 1007, "kurumeyuta": 1007, "kxytim": 1007, "lacrosse91": 1007, "laveen": 1007, "bagai": 1007, "leonardo": 1007, "rocco": [1007, 1008], "uieda": 1007, "leopoldo": 1007, "corona": 1007, "lsturtew": 1007, "lucca": 1007, "quadro": 1007, "ly648499246": 1007, "mabu": 1007, "manaileng": 1007, "mariangela": 1007, "marielaraj": 1007, "hirzel": 1007, "mateo": 1007, "nore\u00f1a": 1007, "mathi": 1007, "batoul": 1007, "calcot": 1007, "prieur": 1007, "\u00f6zer": 1007, "miao": 1007, "cai": 1007, "karbownik": 1007, "michalkrawczyk": [1007, 1008], "mitzi": [1007, 1008], "mlondschien": 1007, "haseeb": [1007, 1008], "khoual": 1007, "jarir": 1007, "kanji": 1007, "nadim": 1007, "kawwa": 1007, "nanshan": 1007, "naozin555": 1007, "fultz": 1007, "nic": 1007, "annau": 1007, "stefani": [1007, 1009], "nigel": 1007, "bosch": 1007, "nodar": 1007, "okroshiashvili": 1007, "ogbonna": 1007, "chibuik": 1007, "ogordon100": 1007, "phongpanangam": 1007, "duqu": 1007, "ibieta": 1007, "jimenez": [1007, 1008], "lacouth": 1007, "olszewski": 1007, "dye": 1007, "pierreattard": [1007, 1008], "yve": 1007, "borgn": 1007, "pranayanchuri": 1007, "princ": 1007, "canuma": 1007, "putschblo": 1007, "ranjanikrishnan": 1007, "rene": 1007, "corneil": 1007, "ricardojnf": 1007, "richardscottoz": 1007, "sandi": 1007, "khosasi": 1007, "benhur": 1007, "flore": 1007, "shinehid": 1007, "shinnar": 1007, "tootoonian": 1007, "solosil": 1007, "kolawol": 1007, "stagg": 1007, "swpeas": 1007, "tfifi": 1007, "caswel": 1007, "timotheemathieu": 1007, "wolodzko": 1007, "tliu68": 1007, "uhmann": 1007, "tom1092": 1007, "tom\u00e1": [1007, 1008], "moreyra": 1007, "tommaso": 1007, "noto": 1007, "tsuga": 1007, "vang": 1007, "gkiasta": 1007, "vil\u00e9m": 1007, "zouhar": 1007, "vlasovet": 1007, "waijean": 1007, "whidou": 1007, "xiaoyuchai": 1007, "yasmeen": 1007, "alsaedi": 1007, "yoch": 1007, "yusukenagasaka": 1007, "yzhenman": 1007, "zeyusun": 1007, "zhaoweiwang": 1007, "10805": 1008, "mathia": 1008, "23471": 1008, "24015": 1008, "23990": 1008, "23833": 1008, "24017": 1008, "sorski": 1008, "23395": 1008, "23636": 1008, "22063": 1008, "22059": 1008, "kurz": 1008, "23608": 1008, "23548": 1008, "24087": 1008, "23273": 1008, "23194": 1008, "23198": 1008, "lise": 1008, "kleiber": 1008, "23358": 1008, "23264": 1008, "feature_names_in": 1008, "23299": 1008, "23214": 1008, "collot": 1008, "baak": 1008, "23370": 1008, "23410": 1008, "compute_sample_weight": 1008, "23115": 1008, "22868": 1008, "multiindex": 1008, "22410": 1008, "23271": 1008, "21987": 1008, "22064": 1008, "22065": 1008, "22288": 1008, "22320": 1008, "21219": 1008, "21542": 1008, "23098": 1008, "22318": 1008, "23036": 1008, "23040": 1008, "23046": 1008, "22856": 1008, "21032": 1008, "18170": 1008, "21038": 1008, "14975": 1008, "22526": 1008, "23095": 1008, "silk": 1008, "20031": 1008, "krawczyk": 1008, "21148": 1008, "22255": 1008, "21881": 1008, "vassard": 1008, "22217": 1008, "21735": 1008, "22154": 1008, "22537": 1008, "iofal": 1008, "arisa": [1008, 1009], "22775": 1008, "22913": 1008, "randomgeek78": 1008, "22493": 1008, "19680": 1008, "thibaut": 1008, "22119": 1008, "22016": 1008, "22015": 1008, "19747": 1008, "attalla": 1008, "22498": 1008, "21482": 1008, "pujalt": 1008, "22412": 1008, "16605": 1008, "21901": 1008, "rileran": 1008, "23113": 1008, "ilion": 1008, "beyst": 1008, "21425": 1008, "stefanini": 1008, "16948": 1008, "patricio": 1008, "cerda": 1008, "22002": 1008, "21109": 1008, "18975": 1008, "22111": 1008, "22181": 1008, "21334": 1008, "21705": 1008, "stanlei": 1008, "21432": 1008, "22806": 1008, "jihan": 1008, "benni": 1008, "21713": 1008, "haya": 1008, "21567": 1008, "maggi": 1008, "chege": 1008, "22300": 1008, "15948": 1008, "sysuresh": 1008, "22553": 1008, "19490": 1008, "ferrin": 1008, "22120": 1008, "15984": 1008, "okon": 1008, "22696": 1008, "22486": 1008, "21800": 1008, "20567": 1008, "22159": 1008, "20811": 1008, "21814": 1008, "16748": 1008, "siqi": 1008, "22215": 1008, "23047": 1008, "22695": 1008, "22697": 1008, "21762": 1008, "22106": 1008, "gijsber": 1008, "21632": 1008, "genesi": 1008, "valencia": 1008, "22566": 1008, "22908": 1008, "23097": 1008, "23079": 1008, "20803": 1008, "23023": 1008, "21573": 1008, "21832": 1008, "20145": 1008, "22356": 1008, "18482": 1008, "gameiro": 1008, "kharsa": 1008, "22370": 1008, "17819": 1008, "22235": 1008, "21837": 1008, "wagner": 1008, "22199": 1008, "aidar": 1008, "shakerimoff": 1008, "tenavi": 1008, "nakamura": 1008, "22223": 1008, "marcom": 1008, "21617": 1008, "ritter": 1008, "21114": 1008, "21078": 1008, "21448": 1008, "16061": 1008, "19438": 1008, "18310": 1008, "elfner": 1008, "22249": 1008, "22137": 1008, "22694": 1008, "22808": 1008, "22950": 1008, "21086": 1008, "22206": 1008, "21808": 1008, "22548": 1008, "22062": 1008, "trujillo": [1008, 1009], "22148": 1008, "22240": 1008, "9087": 1008, "22525": 1008, "19689": 1008, "21606": 1008, "21341": 1008, "preservs": 1008, "21767": 1008, "21724": 1008, "yar": 1008, "khine": 1008, "phyo": 1008, "21998": 1008, "22891": 1008, "22899": 1008, "23256": 1008, "19794": 1008, "21534": 1008, "22254": 1008, "21805": 1008, "jeann": 1008, "dionisi": 1008, "22685": 1008, "n_neighbour": 1008, "18832": 1008, "23033": 1008, "21565": 1008, "17266": 1008, "interpet": 1008, "22118": 1008, "ohad": 1008, "22284": 1008, "19158": 1008, "nicki": 1008, "skaft": 1008, "20753": 1008, "22108": 1008, "22635": 1008, "19085": 1008, "22866": 1008, "21576": 1008, "emil": 1008, "dugnat": 1008, "21873": 1008, "21177": 1008, "20408": 1008, "ceballo": 1008, "22058": 1008, "23034": 1008, "22203": 1008, "21026": 1008, "21880": 1008, "mrinal": 1008, "tyagi": 1008, "22982": 1008, "22508": 1008, "comb": 1008, "22604": 1008, "22212": 1008, "21430": 1008, "desislava": 1008, "vasileva": 1008, "22687": 1008, "22150": 1008, "22248": 1008, "20860": 1008, "shubhraneel": 1008, "21888": 1008, "21954": 1008, "22953": 1008, "16018": 1008, "21445": 1008, "21988": 1008, "get_output_feature_nam": 1008, "21569": 1008, "21079": 1008, "20653": 1008, "21434": 1008, "19916": 1008, "22735": 1008, "compute_inverse_transform": 1008, "21701": 1008, "22114": 1008, "21330": 1008, "21408": 1008, "22149": 1008, "21436": 1008, "22191": 1008, "22476": 1008, "21278": 1008, "21316": 1008, "clickabl": 1008, "21298": 1008, "22237": 1008, "check_scalar": 1008, "22218": 1008, "validationerror": 1008, "check_requires_y_non": 1008, "22578": 1008, "arcidiacono": 1008, "22595": 1008, "21310": 1008, "22027": 1008, "lanterni": 1008, "23077": 1008, "22188": 1008, "22830": 1008, "2357juan": 1008, "adamgonzo": 1008, "adijohar": 1008, "kumawat": 1008, "raghuwanshi": 1008, "duron": 1008, "ahmadjubair33": 1008, "aj": 1008, "druck": 1008, "peixinho": 1008, "arroyo": 1008, "alexanmv": 1008, "almeidayoel": 1008, "amar": 1008, "amrcod": 1008, "griva": 1008, "andrii": 1008, "herrou": 1008, "ducout": 1008, "arth": 1008, "arthurmello": 1008, "arturoamor": 1008, "atharva": 1008, "patil": 1008, "aufarkari": 1008, "avm19": 1008, "ayan": 1008, "bardiya": 1008, "behrouz": 1008, "ben3940": 1008, "bijil": 1008, "subhash": 1008, "bmreinig": 1008, "brenden": 1008, "kadota": 1008, "cdrig": 1008, "chalmer": 1008, "chitteti": 1008, "srinath": [1008, 1009], "chloe": 1008, "agath": 1008, "azencott": 1008, "christopherlim98": 1008, "weidemann": 1008, "combsccod": 1008, "daniela": 1008, "darren": 1008, "eargl": 1008, "gilbertson": 1008, "dea": 1008, "mar\u00eda": 1008, "denni": 1008, "osei": 1008, "dessyvv": 1008, "dev514": 1008, "diwakar": 1008, "ries": 1008, "drskd": 1008, "emiko": 1008, "sano": 1008, "emmanouil": 1008, "gionanidi": 1008, "ermolaevpa": 1008, "estefania": 1008, "barreto": 1008, "ojeda": 1008, "eyast": 1008, "fatima": 1008, "gasmi": 1008, "luna": 1008, "glushchenkov": 1008, "fkaren27": 1008, "fpgawesom": 1008, "ftorres16": 1008, "gabor": 1008, "berei": 1008, "kertesz": 1008, "gauthier": 1008, "giancarlo": 1008, "glennfrutiz": 1008, "guillermo": 1008, "fern\u00e1ndez": 1008, "hansin": 1008, "henrymooresc": 1008, "hideaki": 1008, "imamura": 1008, "hind": 1008, "hmasdev": 1008, "hvassard": 1008, "aki": 1008, "iasoon": 1008, "ingela": 1008, "cowton": 1008, "jalexand3r": 1008, "jauhar": 1008, "jaya": 1008, "kommireddi": 1008, "je": 1008, "jelfner": 1008, "jenni": 1008, "jirka": 1008, "borovec": 1008, "cipri\u00e1n": 1008, "loayza": 1008, "chazalon": 1008, "mess": 1008, "jovan": [1008, 1009], "stojanov": [1008, 1009], "jschuerz": 1008, "katotten": 1008, "ken4git": 1008, "doucet": 1008, "kimayoung": 1008, "koushik": 1008, "kranthi": 1008, "sedamaki": 1008, "krumetoft": 1008, "lesne": 1008, "casino": 1008, "logan": 1008, "lucieclair": 1008, "luiz": 1008, "magali": 1008, "mandjev": 1008, "wurp": 1008, "boerner": 1008, "wimld": 1008, "martel": 1008, "corentin": 1008, "mat\u00eda": 1008, "matjansen": 1008, "francia": 1008, "megabyt": 1008, "mehrdad": 1008, "moradizadeh": 1008, "melemo2": 1008, "micky774": [1008, 1009], "milana2": 1008, "millawel": 1008, "miwojc": 1008, "mizuki": 1008, "mlant": 1008, "mohit": 1008, "moonkyung94": 1008, "mpoemsl": 1008, "mrinaltyagi": 1008, "leu": 1008, "msabati": 1008, "nadirhan": 1008, "\u015fahin": 1008, "naipawat": 1008, "poolsawat": 1008, "nartayxd": 1008, "nastegiano": 1008, "nathansquan": 1008, "detlefsen": 1008, "niket": 1008, "nikhil": 1008, "suresh": 1008, "kondratyev": 1008, "husak": 1008, "partev": 1008, "pelennor": 1008, "piet": 1008, "br\u00f6mmel": 1008, "pinki": 1008, "poloso": 1008, "pramod": 1008, "anantharam": 1008, "puhuk": 1008, "purna": 1008, "mansingh": 1008, "quadv": 1008, "rahil": [1008, 1009], "boy": 1008, "raz": 1008, "hoshia": 1008, "rishabh": 1008, "barnowski": 1008, "rsnegrin": 1008, "yadav": 1008, "sakinaouisrani": 1008, "sanjai": 1008, "marreddi": 1008, "seel": 1008, "sele": 1008, "seyedsaman": 1008, "emami": 1008, "shandeng123": 1008, "sharmadharmp": 1008, "shaymernaturalint": 1008, "shuangchi": 1008, "siavrez": 1008, "slishak": 1008, "spikebh": 1008, "sply88": 1008, "kailasa": [1008, 1009], "sultan": 1008, "orazbayev": 1008, "sumit": 1008, "saha": 1008, "sven": 1008, "eschlbeck": 1008, "stehl": 1008, "swapnil": 1008, "teunp": 1008, "ferr\u00e9": 1008, "hjortkj\u00e6r": 1008, "thiruvenkadam": 1008, "toastedyeast": 1008, "mctiernan": 1008, "udit": 1008, "ugo": 1008, "marchand": 1008, "vera": 1008, "komey": 1008, "victoireloui": 1008, "vishwakarma": 1008, "vikrant": 1008, "khedkar": 1008, "chernyi": 1008, "weijiadu": 1008, "yuan": 1008, "yiyangq": 1008, "yosshi999": 1008, "yuki": 1008, "koyama": 1008, "zeel": 1008, "zempleni": 1008, "zhenfish": 1008, "\u8d75\u4e30": 1008, "23619": 1009, "24465": 1009, "23935": 1009, "22527": 1009, "_sgd_fast": 1009, "_plain_sgd": 1009, "oversc": 1009, "23798": 1009, "simd": 1009, "primit": 1009, "23446": 1009, "23197": 1009, "23604": 1009, "23585": 1009, "22054": 1009, "roic": 1009, "23865": 1009, "14736": 1009, "hunt": 1009, "zhan": 1009, "20802": 1009, "pokorni": 1009, "22965": 1009, "22968": 1009, "23038": 1009, "propog": 1009, "23210": 1009, "23470": 1009, "24258": 1009, "24264": 1009, "maladier": 1009, "21938": 1009, "23127": 1009, "22268": 1009, "mohamedbsh": 1009, "23905": 1009, "23726": 1009, "11860": 1009, "ablin": 1009, "24528": 1009, "24421": 1009, "kshitij": 1009, "22554": 1009, "24218": 1009, "molin": 1009, "22014": 1009, "23252": 1009, "24146": 1009, "peretti": 1009, "nestor": 1009, "navarro": 1009, "nati": 1009, "tomatti": 1009, "20415": 1009, "24283": 1009, "23819": 1009, "edoardo": 1009, "abati": 1009, "24245": 1009, "24405": 1009, "salman": 1009, "24317": 1009, "24350": 1009, "23637": 1009, "23877": 1009, "24433": 1009, "yogendrasingh": 1009, "10168": 1009, "\u0142ukasz": 1009, "borchmann": 1009, "12285": 1009, "miltenberg": 1009, "13042": 1009, "parizi": 1009, "18094": 1009, "22562": 1009, "24051": 1009, "22518": 1009, "23442": 1009, "atukorala": 1009, "22710": 1009, "conroi": 1009, "trinh": 1009, "23461": 1009, "24365": 1009, "24338": 1009, "iinfo": 1009, "24141": 1009, "23977": 1009, "23683": 1009, "andrei": 1009, "melnik": 1009, "16747": 1009, "18805": 1009, "hongshaoyang": 1009, "22269": 1009, "10468": 1009, "ruben": 1009, "22993": 1009, "23139": 1009, "23874": 1009, "24075": 1009, "24058": 1009, "perdok": 1009, "23993": 1009, "24412": 1009, "rushil": 1009, "22898": 1009, "23480": 1009, "lapack_svd_driv": 1009, "20617": 1009, "14862": 1009, "24523": 1009, "mia": 1009, "bajic": 1009, "24512": 1009, "21469": 1009}, "objects": {"sklearn": [[388, 0, 0, "-", "base"], [388, 0, 0, "-", "calibration"], [388, 0, 0, "-", "cluster"], [388, 0, 0, "-", "compose"], [443, 4, 1, "", "config_context"], [388, 0, 0, "-", "covariance"], [388, 0, 0, "-", "cross_decomposition"], [388, 0, 0, "-", "datasets"], [388, 0, 0, "-", "decomposition"], [388, 0, 0, "-", "discriminant_analysis"], [388, 0, 0, "-", "dummy"], [388, 0, 0, "-", "ensemble"], [388, 0, 0, "-", "exceptions"], [388, 0, 0, "-", "experimental"], [388, 0, 0, "-", "feature_extraction"], [388, 0, 0, "-", "feature_selection"], [388, 0, 0, "-", "gaussian_process"], [601, 4, 1, "", "get_config"], [388, 0, 0, "-", "impute"], [388, 0, 0, "-", "inspection"], [388, 0, 0, "-", "isotonic"], [388, 0, 0, "-", "kernel_approximation"], [388, 0, 0, "-", "kernel_ridge"], [388, 0, 0, "-", "linear_model"], [388, 0, 0, "-", "manifold"], [388, 0, 0, "-", "metrics"], [388, 0, 0, "-", "mixture"], [388, 0, 0, "-", "model_selection"], [388, 0, 0, "-", "multiclass"], [388, 0, 0, "-", "multioutput"], [388, 0, 0, "-", "naive_bayes"], [388, 0, 0, "-", "neighbors"], [388, 0, 0, "-", "neural_network"], [388, 0, 0, "-", "pipeline"], [388, 0, 0, "-", "preprocessing"], [388, 0, 0, "-", "random_projection"], [388, 0, 0, "-", "semi_supervised"], [868, 4, 1, "", "set_config"], [869, 4, 1, "", "show_versions"], [388, 0, 0, "-", "svm"], [388, 0, 0, "-", "tree"], [388, 0, 0, "-", "utils"]], "sklearn.base": [[403, 1, 1, "", "BaseEstimator"], [404, 1, 1, "", "BiclusterMixin"], [405, 1, 1, "", "ClassifierMixin"], [406, 1, 1, "", "ClusterMixin"], [407, 1, 1, "", "DensityMixin"], [408, 1, 1, "", "RegressorMixin"], [409, 1, 1, "", "TransformerMixin"], [410, 4, 1, "", "clone"], [411, 4, 1, "", "is_classifier"], [412, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[403, 2, 1, "", "get_params"], [403, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[404, 3, 1, "", "biclusters_"], [404, 2, 1, "", "get_indices"], [404, 2, 1, "", "get_shape"], [404, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassifierMixin": [[405, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[406, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[407, 2, 1, "", "score"]], "sklearn.base.RegressorMixin": [[408, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[409, 2, 1, "", "fit_transform"]], "sklearn.calibration": [[413, 1, 1, "", "CalibratedClassifierCV"], [414, 1, 1, "", "CalibrationDisplay"], [415, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[413, 2, 1, "", "fit"], [413, 2, 1, "", "get_params"], [413, 2, 1, "", "predict"], [413, 2, 1, "", "predict_proba"], [413, 2, 1, "", "score"], [413, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[414, 2, 1, "", "from_estimator"], [414, 2, 1, "", "from_predictions"], [414, 2, 1, "", "plot"]], "sklearn.cluster": [[416, 1, 1, "", "AffinityPropagation"], [417, 1, 1, "", "AgglomerativeClustering"], [418, 1, 1, "", "Birch"], [419, 1, 1, "", "BisectingKMeans"], [420, 1, 1, "", "DBSCAN"], [421, 1, 1, "", "FeatureAgglomeration"], [422, 1, 1, "", "KMeans"], [423, 1, 1, "", "MeanShift"], [424, 1, 1, "", "MiniBatchKMeans"], [425, 1, 1, "", "OPTICS"], [426, 1, 1, "", "SpectralBiclustering"], [427, 1, 1, "", "SpectralClustering"], [428, 1, 1, "", "SpectralCoclustering"], [429, 4, 1, "", "affinity_propagation"], [430, 4, 1, "", "cluster_optics_dbscan"], [431, 4, 1, "", "cluster_optics_xi"], [432, 4, 1, "", "compute_optics_graph"], [400, 4, 1, "", "dbscan"], [433, 4, 1, "", "estimate_bandwidth"], [434, 4, 1, "", "k_means"], [435, 4, 1, "", "kmeans_plusplus"], [436, 4, 1, "", "mean_shift"], [437, 4, 1, "", "spectral_clustering"], [438, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[416, 2, 1, "", "fit"], [416, 2, 1, "", "fit_predict"], [416, 2, 1, "", "get_params"], [416, 2, 1, "", "predict"], [416, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[417, 2, 1, "", "fit"], [417, 2, 1, "", "fit_predict"], [417, 2, 1, "", "get_params"], [417, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[418, 2, 1, "", "fit"], [418, 2, 1, "", "fit_predict"], [418, 2, 1, "", "fit_transform"], [418, 2, 1, "", "get_feature_names_out"], [418, 2, 1, "", "get_params"], [418, 2, 1, "", "partial_fit"], [418, 2, 1, "", "predict"], [418, 2, 1, "", "set_params"], [418, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[419, 2, 1, "", "fit"], [419, 2, 1, "", "fit_predict"], [419, 2, 1, "", "fit_transform"], [419, 2, 1, "", "get_feature_names_out"], [419, 2, 1, "", "get_params"], [419, 2, 1, "", "predict"], [419, 2, 1, "", "score"], [419, 2, 1, "", "set_params"], [419, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[420, 2, 1, "", "fit"], [420, 2, 1, "", "fit_predict"], [420, 2, 1, "", "get_params"], [420, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[421, 2, 1, "", "fit"], [421, 3, 1, "", "fit_predict"], [421, 2, 1, "", "fit_transform"], [421, 2, 1, "", "get_feature_names_out"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "inverse_transform"], [421, 2, 1, "", "set_params"], [421, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[422, 2, 1, "", "fit"], [422, 2, 1, "", "fit_predict"], [422, 2, 1, "", "fit_transform"], [422, 2, 1, "", "get_feature_names_out"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "predict"], [422, 2, 1, "", "score"], [422, 2, 1, "", "set_params"], [422, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[423, 2, 1, "", "fit"], [423, 2, 1, "", "fit_predict"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "predict"], [423, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[424, 2, 1, "", "fit"], [424, 2, 1, "", "fit_predict"], [424, 2, 1, "", "fit_transform"], [424, 2, 1, "", "get_feature_names_out"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "partial_fit"], [424, 2, 1, "", "predict"], [424, 2, 1, "", "score"], [424, 2, 1, "", "set_params"], [424, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[425, 2, 1, "", "fit"], [425, 2, 1, "", "fit_predict"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[426, 3, 1, "", "biclusters_"], [426, 2, 1, "", "fit"], [426, 2, 1, "", "get_indices"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "get_shape"], [426, 2, 1, "", "get_submatrix"], [426, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[428, 3, 1, "", "biclusters_"], [428, 2, 1, "", "fit"], [428, 2, 1, "", "get_indices"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "get_shape"], [428, 2, 1, "", "get_submatrix"], [428, 2, 1, "", "set_params"]], "sklearn.compose": [[439, 1, 1, "", "ColumnTransformer"], [440, 1, 1, "", "TransformedTargetRegressor"], [441, 4, 1, "", "make_column_selector"], [442, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "get_feature_names_out"], [439, 2, 1, "", "get_params"], [439, 3, 1, "", "named_transformers_"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "get_params"], [440, 3, 1, "", "n_features_in_"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_params"]], "sklearn.covariance": [[444, 1, 1, "", "EllipticEnvelope"], [445, 1, 1, "", "EmpiricalCovariance"], [446, 1, 1, "", "GraphicalLasso"], [447, 1, 1, "", "GraphicalLassoCV"], [448, 1, 1, "", "LedoitWolf"], [449, 1, 1, "", "MinCovDet"], [450, 1, 1, "", "OAS"], [451, 1, 1, "", "ShrunkCovariance"], [452, 4, 1, "", "empirical_covariance"], [453, 4, 1, "", "graphical_lasso"], [454, 4, 1, "", "ledoit_wolf"], [402, 4, 1, "", "oas"], [455, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[444, 2, 1, "", "correct_covariance"], [444, 2, 1, "", "decision_function"], [444, 2, 1, "", "error_norm"], [444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "get_precision"], [444, 2, 1, "", "mahalanobis"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "reweight_covariance"], [444, 2, 1, "", "score"], [444, 2, 1, "", "score_samples"], [444, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[445, 2, 1, "", "error_norm"], [445, 2, 1, "", "fit"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "get_precision"], [445, 2, 1, "", "mahalanobis"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[446, 2, 1, "", "error_norm"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "get_precision"], [446, 2, 1, "", "mahalanobis"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[447, 2, 1, "", "error_norm"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "get_precision"], [447, 2, 1, "", "mahalanobis"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[448, 2, 1, "", "error_norm"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "get_precision"], [448, 2, 1, "", "mahalanobis"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[449, 2, 1, "", "correct_covariance"], [449, 2, 1, "", "error_norm"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_precision"], [449, 2, 1, "", "mahalanobis"], [449, 2, 1, "", "reweight_covariance"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[450, 2, 1, "", "error_norm"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_precision"], [450, 2, 1, "", "mahalanobis"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[451, 2, 1, "", "error_norm"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_precision"], [451, 2, 1, "", "mahalanobis"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[456, 1, 1, "", "CCA"], [457, 1, 1, "", "PLSCanonical"], [458, 1, 1, "", "PLSRegression"], [459, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[456, 3, 1, "", "coef_"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_transform"], [456, 2, 1, "", "get_feature_names_out"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "inverse_transform"], [456, 2, 1, "", "predict"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"], [456, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[457, 3, 1, "", "coef_"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "fit_transform"], [457, 2, 1, "", "get_feature_names_out"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "inverse_transform"], [457, 2, 1, "", "predict"], [457, 2, 1, "", "score"], [457, 2, 1, "", "set_params"], [457, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[458, 3, 1, "", "coef_"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_transform"], [458, 2, 1, "", "get_feature_names_out"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "inverse_transform"], [458, 2, 1, "", "predict"], [458, 2, 1, "", "score"], [458, 2, 1, "", "set_params"], [458, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[459, 2, 1, "", "fit"], [459, 2, 1, "", "fit_transform"], [459, 2, 1, "", "get_feature_names_out"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "set_params"], [459, 2, 1, "", "transform"]], "sklearn.datasets": [[460, 4, 1, "", "clear_data_home"], [461, 4, 1, "", "dump_svmlight_file"], [462, 4, 1, "", "fetch_20newsgroups"], [463, 4, 1, "", "fetch_20newsgroups_vectorized"], [464, 4, 1, "", "fetch_california_housing"], [465, 4, 1, "", "fetch_covtype"], [466, 4, 1, "", "fetch_kddcup99"], [467, 4, 1, "", "fetch_lfw_pairs"], [468, 4, 1, "", "fetch_lfw_people"], [469, 4, 1, "", "fetch_olivetti_faces"], [470, 4, 1, "", "fetch_openml"], [471, 4, 1, "", "fetch_rcv1"], [472, 4, 1, "", "fetch_species_distributions"], [473, 4, 1, "", "get_data_home"], [474, 4, 1, "", "load_boston"], [475, 4, 1, "", "load_breast_cancer"], [476, 4, 1, "", "load_diabetes"], [477, 4, 1, "", "load_digits"], [478, 4, 1, "", "load_files"], [479, 4, 1, "", "load_iris"], [480, 4, 1, "", "load_linnerud"], [481, 4, 1, "", "load_sample_image"], [482, 4, 1, "", "load_sample_images"], [483, 4, 1, "", "load_svmlight_file"], [484, 4, 1, "", "load_svmlight_files"], [485, 4, 1, "", "load_wine"], [486, 4, 1, "", "make_biclusters"], [487, 4, 1, "", "make_blobs"], [488, 4, 1, "", "make_checkerboard"], [489, 4, 1, "", "make_circles"], [490, 4, 1, "", "make_classification"], [491, 4, 1, "", "make_friedman1"], [492, 4, 1, "", "make_friedman2"], [493, 4, 1, "", "make_friedman3"], [494, 4, 1, "", "make_gaussian_quantiles"], [495, 4, 1, "", "make_hastie_10_2"], [496, 4, 1, "", "make_low_rank_matrix"], [497, 4, 1, "", "make_moons"], [498, 4, 1, "", "make_multilabel_classification"], [499, 4, 1, "", "make_regression"], [500, 4, 1, "", "make_s_curve"], [501, 4, 1, "", "make_sparse_coded_signal"], [502, 4, 1, "", "make_sparse_spd_matrix"], [503, 4, 1, "", "make_sparse_uncorrelated"], [504, 4, 1, "", "make_spd_matrix"], [505, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[506, 1, 1, "", "DictionaryLearning"], [507, 1, 1, "", "FactorAnalysis"], [508, 1, 1, "", "FastICA"], [509, 1, 1, "", "IncrementalPCA"], [510, 1, 1, "", "KernelPCA"], [511, 1, 1, "", "LatentDirichletAllocation"], [512, 1, 1, "", "MiniBatchDictionaryLearning"], [513, 1, 1, "", "MiniBatchNMF"], [514, 1, 1, "", "MiniBatchSparsePCA"], [515, 1, 1, "", "NMF"], [516, 1, 1, "", "PCA"], [517, 1, 1, "", "SparseCoder"], [518, 1, 1, "", "SparsePCA"], [519, 1, 1, "", "TruncatedSVD"], [520, 4, 1, "", "dict_learning"], [521, 4, 1, "", "dict_learning_online"], [401, 4, 1, "", "fastica"], [522, 4, 1, "", "non_negative_factorization"], [523, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[506, 2, 1, "", "fit"], [506, 2, 1, "", "fit_transform"], [506, 2, 1, "", "get_feature_names_out"], [506, 2, 1, "", "get_params"], [506, 2, 1, "", "set_params"], [506, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[507, 2, 1, "", "fit"], [507, 2, 1, "", "fit_transform"], [507, 2, 1, "", "get_covariance"], [507, 2, 1, "", "get_feature_names_out"], [507, 2, 1, "", "get_params"], [507, 2, 1, "", "get_precision"], [507, 2, 1, "", "score"], [507, 2, 1, "", "score_samples"], [507, 2, 1, "", "set_params"], [507, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[508, 2, 1, "", "fit"], [508, 2, 1, "", "fit_transform"], [508, 2, 1, "", "get_feature_names_out"], [508, 2, 1, "", "get_params"], [508, 2, 1, "", "inverse_transform"], [508, 2, 1, "", "set_params"], [508, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[509, 2, 1, "", "fit"], [509, 2, 1, "", "fit_transform"], [509, 2, 1, "", "get_covariance"], [509, 2, 1, "", "get_feature_names_out"], [509, 2, 1, "", "get_params"], [509, 2, 1, "", "get_precision"], [509, 2, 1, "", "inverse_transform"], [509, 2, 1, "", "partial_fit"], [509, 2, 1, "", "set_params"], [509, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[510, 2, 1, "", "fit"], [510, 2, 1, "", "fit_transform"], [510, 2, 1, "", "get_feature_names_out"], [510, 2, 1, "", "get_params"], [510, 2, 1, "", "inverse_transform"], [510, 2, 1, "", "set_params"], [510, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[511, 2, 1, "", "fit"], [511, 2, 1, "", "fit_transform"], [511, 2, 1, "", "get_feature_names_out"], [511, 2, 1, "", "get_params"], [511, 2, 1, "", "partial_fit"], [511, 2, 1, "", "perplexity"], [511, 2, 1, "", "score"], [511, 2, 1, "", "set_params"], [511, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[512, 2, 1, "", "fit"], [512, 2, 1, "", "fit_transform"], [512, 2, 1, "", "get_feature_names_out"], [512, 2, 1, "", "get_params"], [512, 3, 1, "", "inner_stats_"], [512, 3, 1, "", "iter_offset_"], [512, 2, 1, "", "partial_fit"], [512, 3, 1, "", "random_state_"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_transform"], [513, 2, 1, "", "get_feature_names_out"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "inverse_transform"], [513, 2, 1, "", "partial_fit"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "inverse_transform"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "fit_transform"], [515, 2, 1, "", "get_feature_names_out"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "inverse_transform"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_covariance"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "get_precision"], [516, 2, 1, "", "inverse_transform"], [516, 3, 1, "", "n_features_"], [516, 2, 1, "", "score"], [516, 2, 1, "", "score_samples"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 3, 1, "", "n_components_"], [517, 3, 1, "", "n_features_in_"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "inverse_transform"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "inverse_transform"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[524, 1, 1, "", "LinearDiscriminantAnalysis"], [525, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[524, 2, 1, "", "decision_function"], [524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "predict"], [524, 2, 1, "", "predict_log_proba"], [524, 2, 1, "", "predict_proba"], [524, 2, 1, "", "score"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[525, 2, 1, "", "decision_function"], [525, 2, 1, "", "fit"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "predict"], [525, 2, 1, "", "predict_log_proba"], [525, 2, 1, "", "predict_proba"], [525, 2, 1, "", "score"], [525, 2, 1, "", "set_params"]], "sklearn.dummy": [[526, 1, 1, "", "DummyClassifier"], [527, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "predict"], [526, 2, 1, "", "predict_log_proba"], [526, 2, 1, "", "predict_proba"], [526, 2, 1, "", "score"], [526, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "predict"], [527, 2, 1, "", "score"], [527, 2, 1, "", "set_params"]], "sklearn.ensemble": [[528, 1, 1, "", "AdaBoostClassifier"], [529, 1, 1, "", "AdaBoostRegressor"], [530, 1, 1, "", "BaggingClassifier"], [531, 1, 1, "", "BaggingRegressor"], [532, 1, 1, "", "ExtraTreesClassifier"], [533, 1, 1, "", "ExtraTreesRegressor"], [534, 1, 1, "", "GradientBoostingClassifier"], [535, 1, 1, "", "GradientBoostingRegressor"], [536, 1, 1, "", "HistGradientBoostingClassifier"], [537, 1, 1, "", "HistGradientBoostingRegressor"], [538, 1, 1, "", "IsolationForest"], [539, 1, 1, "", "RandomForestClassifier"], [540, 1, 1, "", "RandomForestRegressor"], [541, 1, 1, "", "RandomTreesEmbedding"], [542, 1, 1, "", "StackingClassifier"], [543, 1, 1, "", "StackingRegressor"], [544, 1, 1, "", "VotingClassifier"], [545, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[528, 3, 1, "", "base_estimator_"], [528, 2, 1, "", "decision_function"], [528, 3, 1, "", "estimator_"], [528, 3, 1, "", "feature_importances_"], [528, 2, 1, "", "fit"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "predict"], [528, 2, 1, "", "predict_log_proba"], [528, 2, 1, "", "predict_proba"], [528, 2, 1, "", "score"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "staged_decision_function"], [528, 2, 1, "", "staged_predict"], [528, 2, 1, "", "staged_predict_proba"], [528, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[529, 3, 1, "", "base_estimator_"], [529, 3, 1, "", "estimator_"], [529, 3, 1, "", "feature_importances_"], [529, 2, 1, "", "fit"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "predict"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "staged_predict"], [529, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[530, 3, 1, "", "base_estimator_"], [530, 2, 1, "", "decision_function"], [530, 3, 1, "", "estimator_"], [530, 3, 1, "", "estimators_samples_"], [530, 2, 1, "", "fit"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "predict"], [530, 2, 1, "", "predict_log_proba"], [530, 2, 1, "", "predict_proba"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[531, 3, 1, "", "base_estimator_"], [531, 3, 1, "", "estimator_"], [531, 3, 1, "", "estimators_samples_"], [531, 2, 1, "", "fit"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "predict"], [531, 2, 1, "", "score"], [531, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[532, 2, 1, "", "apply"], [532, 3, 1, "", "base_estimator_"], [532, 2, 1, "", "decision_path"], [532, 3, 1, "", "estimator_"], [532, 3, 1, "", "feature_importances_"], [532, 2, 1, "", "fit"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "predict_log_proba"], [532, 2, 1, "", "predict_proba"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[533, 2, 1, "", "apply"], [533, 3, 1, "", "base_estimator_"], [533, 2, 1, "", "decision_path"], [533, 3, 1, "", "estimator_"], [533, 3, 1, "", "feature_importances_"], [533, 2, 1, "", "fit"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[534, 2, 1, "", "apply"], [534, 3, 1, "", "base_estimator_"], [534, 2, 1, "", "decision_function"], [534, 3, 1, "", "estimator_"], [534, 3, 1, "", "feature_importances_"], [534, 2, 1, "", "fit"], [534, 2, 1, "", "get_params"], [534, 3, 1, "", "loss_"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "predict_log_proba"], [534, 2, 1, "", "predict_proba"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "staged_decision_function"], [534, 2, 1, "", "staged_predict"], [534, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[535, 2, 1, "", "apply"], [535, 3, 1, "", "base_estimator_"], [535, 3, 1, "", "estimator_"], [535, 3, 1, "", "feature_importances_"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 3, 1, "", "loss_"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[536, 2, 1, "", "decision_function"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 3, 1, "", "n_iter_"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "predict_proba"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "staged_decision_function"], [536, 2, 1, "", "staged_predict"], [536, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 3, 1, "", "n_iter_"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[538, 3, 1, "", "base_estimator_"], [538, 2, 1, "", "decision_function"], [538, 3, 1, "", "estimator_"], [538, 3, 1, "", "estimators_samples_"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_predict"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "score_samples"], [538, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[539, 2, 1, "", "apply"], [539, 3, 1, "", "base_estimator_"], [539, 2, 1, "", "decision_path"], [539, 3, 1, "", "estimator_"], [539, 3, 1, "", "feature_importances_"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "predict_log_proba"], [539, 2, 1, "", "predict_proba"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[540, 2, 1, "", "apply"], [540, 3, 1, "", "base_estimator_"], [540, 2, 1, "", "decision_path"], [540, 3, 1, "", "estimator_"], [540, 3, 1, "", "feature_importances_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[541, 2, 1, "", "apply"], [541, 3, 1, "", "base_estimator_"], [541, 2, 1, "", "decision_path"], [541, 3, 1, "", "estimator_"], [541, 3, 1, "", "feature_importances_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[542, 2, 1, "", "decision_function"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_params"], [542, 3, 1, "", "n_features_in_"], [542, 3, 1, "", "named_estimators"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_params"], [543, 3, 1, "", "n_features_in_"], [543, 3, 1, "", "named_estimators"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_params"], [544, 3, 1, "", "n_features_in_"], [544, 3, 1, "", "named_estimators"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_params"], [545, 3, 1, "", "n_features_in_"], [545, 3, 1, "", "named_estimators"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.exceptions": [[546, 1, 1, "", "ConvergenceWarning"], [547, 1, 1, "", "DataConversionWarning"], [548, 1, 1, "", "DataDimensionalityWarning"], [549, 1, 1, "", "EfficiencyWarning"], [550, 1, 1, "", "FitFailedWarning"], [551, 1, 1, "", "NotFittedError"], [552, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[546, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[547, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[548, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[549, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[550, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[551, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[552, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[553, 0, 0, "-", "enable_halving_search_cv"], [554, 0, 0, "-", "enable_hist_gradient_boosting"], [555, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[556, 1, 1, "", "DictVectorizer"], [557, 1, 1, "", "FeatureHasher"], [388, 0, 0, "-", "image"], [388, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_transform"], [556, 2, 1, "", "get_feature_names_out"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "inverse_transform"], [556, 2, 1, "", "restrict"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_transform"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[558, 1, 1, "", "PatchExtractor"], [559, 4, 1, "", "extract_patches_2d"], [560, 4, 1, "", "grid_to_graph"], [561, 4, 1, "", "img_to_graph"], [562, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[558, 2, 1, "", "fit"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[563, 1, 1, "", "CountVectorizer"], [564, 1, 1, "", "HashingVectorizer"], [565, 1, 1, "", "TfidfTransformer"], [566, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[563, 2, 1, "", "build_analyzer"], [563, 2, 1, "", "build_preprocessor"], [563, 2, 1, "", "build_tokenizer"], [563, 2, 1, "", "decode"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "get_stop_words"], [563, 2, 1, "", "inverse_transform"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[564, 2, 1, "", "build_analyzer"], [564, 2, 1, "", "build_preprocessor"], [564, 2, 1, "", "build_tokenizer"], [564, 2, 1, "", "decode"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "get_stop_words"], [564, 2, 1, "", "partial_fit"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "idf_"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[566, 2, 1, "", "build_analyzer"], [566, 2, 1, "", "build_preprocessor"], [566, 2, 1, "", "build_tokenizer"], [566, 2, 1, "", "decode"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "get_stop_words"], [566, 3, 1, "", "idf_"], [566, 2, 1, "", "inverse_transform"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.feature_selection": [[567, 1, 1, "", "GenericUnivariateSelect"], [568, 1, 1, "", "RFE"], [569, 1, 1, "", "RFECV"], [570, 1, 1, "", "SelectFdr"], [571, 1, 1, "", "SelectFpr"], [572, 1, 1, "", "SelectFromModel"], [573, 1, 1, "", "SelectFwe"], [574, 1, 1, "", "SelectKBest"], [575, 1, 1, "", "SelectPercentile"], [576, 1, 1, "", "SelectorMixin"], [577, 1, 1, "", "SequentialFeatureSelector"], [578, 1, 1, "", "VarianceThreshold"], [579, 4, 1, "", "chi2"], [580, 4, 1, "", "f_classif"], [581, 4, 1, "", "f_regression"], [582, 4, 1, "", "mutual_info_classif"], [583, 4, 1, "", "mutual_info_regression"], [584, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "get_support"], [567, 2, 1, "", "inverse_transform"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[568, 3, 1, "", "classes_"], [568, 2, 1, "", "decision_function"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "get_support"], [568, 2, 1, "", "inverse_transform"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_log_proba"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[569, 3, 1, "", "classes_"], [569, 2, 1, "", "decision_function"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "get_support"], [569, 2, 1, "", "inverse_transform"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_log_proba"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "get_support"], [570, 2, 1, "", "inverse_transform"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "get_support"], [571, 2, 1, "", "inverse_transform"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "get_support"], [572, 2, 1, "", "inverse_transform"], [572, 3, 1, "", "n_features_in_"], [572, 2, 1, "", "partial_fit"], [572, 2, 1, "", "set_params"], [572, 3, 1, "", "threshold_"], [572, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "get_support"], [573, 2, 1, "", "inverse_transform"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_support"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_support"], [575, 2, 1, "", "inverse_transform"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_support"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[585, 1, 1, "", "GaussianProcessClassifier"], [586, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "get_params"], [585, 3, 1, "", "kernel_"], [585, 2, 1, "", "log_marginal_likelihood"], [585, 2, 1, "", "predict"], [585, 2, 1, "", "predict_proba"], [585, 2, 1, "", "score"], [585, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "log_marginal_likelihood"], [586, 2, 1, "", "predict"], [586, 2, 1, "", "sample_y"], [586, 2, 1, "", "score"], [586, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[587, 1, 1, "", "CompoundKernel"], [588, 1, 1, "", "ConstantKernel"], [589, 1, 1, "", "DotProduct"], [590, 1, 1, "", "ExpSineSquared"], [591, 1, 1, "", "Exponentiation"], [592, 1, 1, "", "Hyperparameter"], [593, 1, 1, "", "Kernel"], [594, 1, 1, "", "Matern"], [595, 1, 1, "", "PairwiseKernel"], [596, 1, 1, "", "Product"], [597, 1, 1, "", "RBF"], [598, 1, 1, "", "RationalQuadratic"], [599, 1, 1, "", "Sum"], [600, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[587, 2, 1, "", "__call__"], [587, 3, 1, "", "bounds"], [587, 2, 1, "", "clone_with_theta"], [587, 2, 1, "", "diag"], [587, 2, 1, "", "get_params"], [587, 3, 1, "", "hyperparameters"], [587, 2, 1, "", "is_stationary"], [587, 3, 1, "", "n_dims"], [587, 3, 1, "", "requires_vector_input"], [587, 2, 1, "", "set_params"], [587, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[588, 2, 1, "", "__call__"], [588, 3, 1, "", "bounds"], [588, 2, 1, "", "clone_with_theta"], [588, 2, 1, "", "diag"], [588, 2, 1, "", "get_params"], [588, 3, 1, "", "hyperparameters"], [588, 2, 1, "", "is_stationary"], [588, 3, 1, "", "n_dims"], [588, 3, 1, "", "requires_vector_input"], [588, 2, 1, "", "set_params"], [588, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[589, 2, 1, "", "__call__"], [589, 3, 1, "", "bounds"], [589, 2, 1, "", "clone_with_theta"], [589, 2, 1, "", "diag"], [589, 2, 1, "", "get_params"], [589, 3, 1, "", "hyperparameters"], [589, 2, 1, "", "is_stationary"], [589, 3, 1, "", "n_dims"], [589, 3, 1, "", "requires_vector_input"], [589, 2, 1, "", "set_params"], [589, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[590, 2, 1, "", "__call__"], [590, 3, 1, "", "bounds"], [590, 2, 1, "", "clone_with_theta"], [590, 2, 1, "", "diag"], [590, 2, 1, "", "get_params"], [590, 3, 1, "", "hyperparameter_length_scale"], [590, 3, 1, "", "hyperparameters"], [590, 2, 1, "", "is_stationary"], [590, 3, 1, "", "n_dims"], [590, 3, 1, "", "requires_vector_input"], [590, 2, 1, "", "set_params"], [590, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[591, 2, 1, "", "__call__"], [591, 3, 1, "", "bounds"], [591, 2, 1, "", "clone_with_theta"], [591, 2, 1, "", "diag"], [591, 2, 1, "", "get_params"], [591, 3, 1, "", "hyperparameters"], [591, 2, 1, "", "is_stationary"], [591, 3, 1, "", "n_dims"], [591, 3, 1, "", "requires_vector_input"], [591, 2, 1, "", "set_params"], [591, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[592, 2, 1, "", "__call__"], [592, 5, 1, "", "bounds"], [592, 2, 1, "", "count"], [592, 5, 1, "", "fixed"], [592, 2, 1, "", "index"], [592, 5, 1, "", "n_elements"], [592, 5, 1, "", "name"], [592, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[593, 2, 1, "", "__call__"], [593, 3, 1, "", "bounds"], [593, 2, 1, "", "clone_with_theta"], [593, 2, 1, "", "diag"], [593, 2, 1, "", "get_params"], [593, 3, 1, "", "hyperparameters"], [593, 2, 1, "", "is_stationary"], [593, 3, 1, "", "n_dims"], [593, 3, 1, "", "requires_vector_input"], [593, 2, 1, "", "set_params"], [593, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[594, 2, 1, "", "__call__"], [594, 3, 1, "", "bounds"], [594, 2, 1, "", "clone_with_theta"], [594, 2, 1, "", "diag"], [594, 2, 1, "", "get_params"], [594, 3, 1, "", "hyperparameters"], [594, 2, 1, "", "is_stationary"], [594, 3, 1, "", "n_dims"], [594, 3, 1, "", "requires_vector_input"], [594, 2, 1, "", "set_params"], [594, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[595, 2, 1, "", "__call__"], [595, 3, 1, "", "bounds"], [595, 2, 1, "", "clone_with_theta"], [595, 2, 1, "", "diag"], [595, 2, 1, "", "get_params"], [595, 3, 1, "", "hyperparameters"], [595, 2, 1, "", "is_stationary"], [595, 3, 1, "", "n_dims"], [595, 3, 1, "", "requires_vector_input"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[596, 2, 1, "", "__call__"], [596, 3, 1, "", "bounds"], [596, 2, 1, "", "clone_with_theta"], [596, 2, 1, "", "diag"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "hyperparameters"], [596, 2, 1, "", "is_stationary"], [596, 3, 1, "", "n_dims"], [596, 3, 1, "", "requires_vector_input"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[598, 2, 1, "", "__call__"], [598, 3, 1, "", "bounds"], [598, 2, 1, "", "clone_with_theta"], [598, 2, 1, "", "diag"], [598, 2, 1, "", "get_params"], [598, 3, 1, "", "hyperparameters"], [598, 2, 1, "", "is_stationary"], [598, 3, 1, "", "n_dims"], [598, 3, 1, "", "requires_vector_input"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.impute": [[602, 1, 1, "", "IterativeImputer"], [603, 1, 1, "", "KNNImputer"], [604, 1, 1, "", "MissingIndicator"], [605, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.inspection": [[606, 1, 1, "", "DecisionBoundaryDisplay"], [607, 1, 1, "", "PartialDependenceDisplay"], [608, 4, 1, "", "partial_dependence"], [609, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[606, 2, 1, "", "from_estimator"], [606, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[607, 2, 1, "", "from_estimator"], [607, 2, 1, "", "plot"]], "sklearn.isotonic": [[610, 1, 1, "", "IsotonicRegression"], [611, 4, 1, "", "check_increasing"], [612, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[613, 1, 1, "", "AdditiveChi2Sampler"], [614, 1, 1, "", "Nystroem"], [615, 1, 1, "", "PolynomialCountSketch"], [616, 1, 1, "", "RBFSampler"], [617, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "fit_transform"], [613, 2, 1, "", "get_feature_names_out"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "fit_transform"], [614, 2, 1, "", "get_feature_names_out"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "fit_transform"], [615, 2, 1, "", "get_feature_names_out"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "fit_transform"], [617, 2, 1, "", "get_feature_names_out"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[618, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_params"]], "sklearn.linear_model": [[619, 1, 1, "", "ARDRegression"], [620, 1, 1, "", "BayesianRidge"], [621, 1, 1, "", "ElasticNet"], [622, 1, 1, "", "ElasticNetCV"], [623, 1, 1, "", "GammaRegressor"], [624, 1, 1, "", "HuberRegressor"], [625, 1, 1, "", "Lars"], [626, 1, 1, "", "LarsCV"], [627, 1, 1, "", "Lasso"], [628, 1, 1, "", "LassoCV"], [629, 1, 1, "", "LassoLars"], [630, 1, 1, "", "LassoLarsCV"], [631, 1, 1, "", "LassoLarsIC"], [632, 1, 1, "", "LinearRegression"], [633, 1, 1, "", "LogisticRegression"], [634, 1, 1, "", "LogisticRegressionCV"], [635, 1, 1, "", "MultiTaskElasticNet"], [636, 1, 1, "", "MultiTaskElasticNetCV"], [637, 1, 1, "", "MultiTaskLasso"], [638, 1, 1, "", "MultiTaskLassoCV"], [639, 1, 1, "", "OrthogonalMatchingPursuit"], [640, 1, 1, "", "OrthogonalMatchingPursuitCV"], [641, 1, 1, "", "PassiveAggressiveClassifier"], [642, 4, 1, "", "PassiveAggressiveRegressor"], [643, 1, 1, "", "Perceptron"], [644, 1, 1, "", "PoissonRegressor"], [645, 1, 1, "", "QuantileRegressor"], [646, 1, 1, "", "RANSACRegressor"], [647, 1, 1, "", "Ridge"], [648, 1, 1, "", "RidgeCV"], [649, 1, 1, "", "RidgeClassifier"], [650, 1, 1, "", "RidgeClassifierCV"], [651, 1, 1, "", "SGDClassifier"], [652, 1, 1, "", "SGDOneClassSVM"], [653, 1, 1, "", "SGDRegressor"], [654, 1, 1, "", "TheilSenRegressor"], [655, 1, 1, "", "TweedieRegressor"], [656, 4, 1, "", "enet_path"], [657, 4, 1, "", "lars_path"], [658, 4, 1, "", "lars_path_gram"], [659, 4, 1, "", "lasso_path"], [660, 4, 1, "", "orthogonal_mp"], [661, 4, 1, "", "orthogonal_mp_gram"], [662, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "path"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "path"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[623, 3, 1, "", "family"], [623, 2, 1, "", "fit"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "path"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "path"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[633, 2, 1, "", "decision_function"], [633, 2, 1, "", "densify"], [633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "predict_log_proba"], [633, 2, 1, "", "predict_proba"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[634, 2, 1, "", "decision_function"], [634, 2, 1, "", "densify"], [634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "predict_log_proba"], [634, 2, 1, "", "predict_proba"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "path"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"], [635, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "path"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "path"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"], [637, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "path"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[641, 2, 1, "", "decision_function"], [641, 2, 1, "", "densify"], [641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "partial_fit"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[643, 2, 1, "", "decision_function"], [643, 2, 1, "", "densify"], [643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "partial_fit"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[644, 3, 1, "", "family"], [644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[649, 3, 1, "", "classes_"], [649, 2, 1, "", "decision_function"], [649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[650, 3, 1, "", "classes_"], [650, 2, 1, "", "decision_function"], [650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[651, 2, 1, "", "decision_function"], [651, 2, 1, "", "densify"], [651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "partial_fit"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "predict_log_proba"], [651, 2, 1, "", "predict_proba"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[652, 2, 1, "", "decision_function"], [652, 2, 1, "", "densify"], [652, 2, 1, "", "fit"], [652, 2, 1, "", "fit_predict"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "partial_fit"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score_samples"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[653, 2, 1, "", "densify"], [653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "partial_fit"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[655, 3, 1, "", "family"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"]], "sklearn.manifold": [[663, 1, 1, "", "Isomap"], [664, 1, 1, "", "LocallyLinearEmbedding"], [665, 1, 1, "", "MDS"], [666, 1, 1, "", "SpectralEmbedding"], [667, 1, 1, "", "TSNE"], [668, 4, 1, "", "locally_linear_embedding"], [669, 4, 1, "", "smacof"], [670, 4, 1, "", "spectral_embedding"], [671, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "fit_transform"], [663, 2, 1, "", "get_feature_names_out"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "reconstruction_error"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "fit_transform"], [664, 2, 1, "", "get_feature_names_out"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "fit_transform"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "fit_transform"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "fit_transform"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "set_params"]], "sklearn.metrics": [[672, 1, 1, "", "ConfusionMatrixDisplay"], [673, 1, 1, "", "DetCurveDisplay"], [674, 1, 1, "", "DistanceMetric"], [675, 1, 1, "", "PrecisionRecallDisplay"], [676, 1, 1, "", "RocCurveDisplay"], [677, 4, 1, "", "accuracy_score"], [678, 4, 1, "", "adjusted_mutual_info_score"], [679, 4, 1, "", "adjusted_rand_score"], [680, 4, 1, "", "auc"], [681, 4, 1, "", "average_precision_score"], [682, 4, 1, "", "balanced_accuracy_score"], [683, 4, 1, "", "brier_score_loss"], [684, 4, 1, "", "calinski_harabasz_score"], [685, 4, 1, "", "check_scoring"], [686, 4, 1, "", "class_likelihood_ratios"], [687, 4, 1, "", "classification_report"], [388, 0, 0, "-", "cluster"], [690, 4, 1, "", "cohen_kappa_score"], [691, 4, 1, "", "completeness_score"], [692, 4, 1, "", "confusion_matrix"], [693, 4, 1, "", "consensus_score"], [694, 4, 1, "", "coverage_error"], [695, 4, 1, "", "d2_absolute_error_score"], [696, 4, 1, "", "d2_pinball_score"], [697, 4, 1, "", "d2_tweedie_score"], [698, 4, 1, "", "davies_bouldin_score"], [699, 4, 1, "", "dcg_score"], [700, 4, 1, "", "det_curve"], [701, 4, 1, "", "explained_variance_score"], [702, 4, 1, "", "f1_score"], [703, 4, 1, "", "fbeta_score"], [704, 4, 1, "", "fowlkes_mallows_score"], [705, 4, 1, "", "get_scorer"], [706, 4, 1, "", "get_scorer_names"], [707, 4, 1, "", "hamming_loss"], [708, 4, 1, "", "hinge_loss"], [709, 4, 1, "", "homogeneity_completeness_v_measure"], [710, 4, 1, "", "homogeneity_score"], [711, 4, 1, "", "jaccard_score"], [712, 4, 1, "", "label_ranking_average_precision_score"], [713, 4, 1, "", "label_ranking_loss"], [714, 4, 1, "", "log_loss"], [715, 4, 1, "", "make_scorer"], [716, 4, 1, "", "matthews_corrcoef"], [717, 4, 1, "", "max_error"], [718, 4, 1, "", "mean_absolute_error"], [719, 4, 1, "", "mean_absolute_percentage_error"], [720, 4, 1, "", "mean_gamma_deviance"], [721, 4, 1, "", "mean_pinball_loss"], [722, 4, 1, "", "mean_poisson_deviance"], [723, 4, 1, "", "mean_squared_error"], [724, 4, 1, "", "mean_squared_log_error"], [725, 4, 1, "", "mean_tweedie_deviance"], [726, 4, 1, "", "median_absolute_error"], [727, 4, 1, "", "multilabel_confusion_matrix"], [728, 4, 1, "", "mutual_info_score"], [729, 4, 1, "", "ndcg_score"], [730, 4, 1, "", "normalized_mutual_info_score"], [388, 0, 0, "-", "pairwise"], [751, 4, 1, "", "pairwise_distances"], [752, 4, 1, "", "pairwise_distances_argmin"], [753, 4, 1, "", "pairwise_distances_argmin_min"], [754, 4, 1, "", "pairwise_distances_chunked"], [755, 4, 1, "", "precision_recall_curve"], [756, 4, 1, "", "precision_recall_fscore_support"], [757, 4, 1, "", "precision_score"], [758, 4, 1, "", "r2_score"], [759, 4, 1, "", "rand_score"], [760, 4, 1, "", "recall_score"], [761, 4, 1, "", "roc_auc_score"], [762, 4, 1, "", "roc_curve"], [763, 4, 1, "", "silhouette_samples"], [764, 4, 1, "", "silhouette_score"], [765, 4, 1, "", "top_k_accuracy_score"], [766, 4, 1, "", "v_measure_score"], [767, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[672, 2, 1, "", "from_estimator"], [672, 2, 1, "", "from_predictions"], [672, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[673, 2, 1, "", "from_estimator"], [673, 2, 1, "", "from_predictions"], [673, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[674, 2, 1, "", "dist_to_rdist"], [674, 2, 1, "", "get_metric"], [674, 2, 1, "", "pairwise"], [674, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[675, 2, 1, "", "from_estimator"], [675, 2, 1, "", "from_predictions"], [675, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[676, 2, 1, "", "from_estimator"], [676, 2, 1, "", "from_predictions"], [676, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[688, 4, 1, "", "contingency_matrix"], [689, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[731, 4, 1, "", "additive_chi2_kernel"], [732, 4, 1, "", "chi2_kernel"], [733, 4, 1, "", "cosine_distances"], [734, 4, 1, "", "cosine_similarity"], [735, 4, 1, "", "distance_metrics"], [736, 4, 1, "", "euclidean_distances"], [737, 4, 1, "", "haversine_distances"], [738, 4, 1, "", "kernel_metrics"], [739, 4, 1, "", "laplacian_kernel"], [740, 4, 1, "", "linear_kernel"], [741, 4, 1, "", "manhattan_distances"], [742, 4, 1, "", "nan_euclidean_distances"], [743, 4, 1, "", "paired_cosine_distances"], [744, 4, 1, "", "paired_distances"], [745, 4, 1, "", "paired_euclidean_distances"], [746, 4, 1, "", "paired_manhattan_distances"], [747, 4, 1, "", "pairwise_kernels"], [748, 4, 1, "", "polynomial_kernel"], [749, 4, 1, "", "rbf_kernel"], [750, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[768, 1, 1, "", "BayesianGaussianMixture"], [769, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[768, 2, 1, "", "fit"], [768, 2, 1, "", "fit_predict"], [768, 2, 1, "", "get_params"], [768, 2, 1, "", "predict"], [768, 2, 1, "", "predict_proba"], [768, 2, 1, "", "sample"], [768, 2, 1, "", "score"], [768, 2, 1, "", "score_samples"], [768, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[769, 2, 1, "", "aic"], [769, 2, 1, "", "bic"], [769, 2, 1, "", "fit"], [769, 2, 1, "", "fit_predict"], [769, 2, 1, "", "get_params"], [769, 2, 1, "", "predict"], [769, 2, 1, "", "predict_proba"], [769, 2, 1, "", "sample"], [769, 2, 1, "", "score"], [769, 2, 1, "", "score_samples"], [769, 2, 1, "", "set_params"]], "sklearn.model_selection": [[770, 1, 1, "", "GridSearchCV"], [771, 1, 1, "", "GroupKFold"], [772, 1, 1, "", "GroupShuffleSplit"], [773, 1, 1, "", "HalvingGridSearchCV"], [774, 1, 1, "", "HalvingRandomSearchCV"], [775, 1, 1, "", "KFold"], [776, 1, 1, "", "LeaveOneGroupOut"], [777, 1, 1, "", "LeaveOneOut"], [778, 1, 1, "", "LeavePGroupsOut"], [779, 1, 1, "", "LeavePOut"], [780, 1, 1, "", "ParameterGrid"], [781, 1, 1, "", "ParameterSampler"], [782, 1, 1, "", "PredefinedSplit"], [783, 1, 1, "", "RandomizedSearchCV"], [784, 1, 1, "", "RepeatedKFold"], [785, 1, 1, "", "RepeatedStratifiedKFold"], [786, 1, 1, "", "ShuffleSplit"], [787, 1, 1, "", "StratifiedGroupKFold"], [788, 1, 1, "", "StratifiedKFold"], [789, 1, 1, "", "StratifiedShuffleSplit"], [790, 1, 1, "", "TimeSeriesSplit"], [791, 4, 1, "", "check_cv"], [792, 4, 1, "", "cross_val_predict"], [793, 4, 1, "", "cross_val_score"], [794, 4, 1, "", "cross_validate"], [795, 4, 1, "", "learning_curve"], [796, 4, 1, "", "permutation_test_score"], [797, 4, 1, "", "train_test_split"], [798, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[770, 3, 1, "", "classes_"], [770, 2, 1, "", "decision_function"], [770, 2, 1, "", "fit"], [770, 2, 1, "", "get_params"], [770, 2, 1, "", "inverse_transform"], [770, 3, 1, "", "n_features_in_"], [770, 2, 1, "", "predict"], [770, 2, 1, "", "predict_log_proba"], [770, 2, 1, "", "predict_proba"], [770, 2, 1, "", "score"], [770, 2, 1, "", "score_samples"], [770, 2, 1, "", "set_params"], [770, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[771, 2, 1, "", "get_n_splits"], [771, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[772, 2, 1, "", "get_n_splits"], [772, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[773, 3, 1, "", "classes_"], [773, 2, 1, "", "decision_function"], [773, 2, 1, "", "fit"], [773, 2, 1, "", "get_params"], [773, 2, 1, "", "inverse_transform"], [773, 3, 1, "", "n_features_in_"], [773, 2, 1, "", "predict"], [773, 2, 1, "", "predict_log_proba"], [773, 2, 1, "", "predict_proba"], [773, 2, 1, "", "score"], [773, 2, 1, "", "score_samples"], [773, 2, 1, "", "set_params"], [773, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[774, 3, 1, "", "classes_"], [774, 2, 1, "", "decision_function"], [774, 2, 1, "", "fit"], [774, 2, 1, "", "get_params"], [774, 2, 1, "", "inverse_transform"], [774, 3, 1, "", "n_features_in_"], [774, 2, 1, "", "predict"], [774, 2, 1, "", "predict_log_proba"], [774, 2, 1, "", "predict_proba"], [774, 2, 1, "", "score"], [774, 2, 1, "", "score_samples"], [774, 2, 1, "", "set_params"], [774, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[775, 2, 1, "", "get_n_splits"], [775, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneGroupOut": [[776, 2, 1, "", "get_n_splits"], [776, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[777, 2, 1, "", "get_n_splits"], [777, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[778, 2, 1, "", "get_n_splits"], [778, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[783, 3, 1, "", "classes_"], [783, 2, 1, "", "decision_function"], [783, 2, 1, "", "fit"], [783, 2, 1, "", "get_params"], [783, 2, 1, "", "inverse_transform"], [783, 3, 1, "", "n_features_in_"], [783, 2, 1, "", "predict"], [783, 2, 1, "", "predict_log_proba"], [783, 2, 1, "", "predict_proba"], [783, 2, 1, "", "score"], [783, 2, 1, "", "score_samples"], [783, 2, 1, "", "set_params"], [783, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[785, 2, 1, "", "get_n_splits"], [785, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[788, 2, 1, "", "get_n_splits"], [788, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.multiclass": [[799, 1, 1, "", "OneVsOneClassifier"], [800, 1, 1, "", "OneVsRestClassifier"], [801, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_params"], [799, 3, 1, "", "n_classes_"], [799, 2, 1, "", "partial_fit"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_params"], [800, 3, 1, "", "multilabel_"], [800, 3, 1, "", "n_classes_"], [800, 2, 1, "", "partial_fit"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "score"], [801, 2, 1, "", "set_params"]], "sklearn.multioutput": [[802, 1, 1, "", "ClassifierChain"], [803, 1, 1, "", "MultiOutputClassifier"], [804, 1, 1, "", "MultiOutputRegressor"], [805, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[802, 2, 1, "", "decision_function"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[803, 2, 1, "", "fit"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "partial_fit"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[804, 2, 1, "", "fit"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "partial_fit"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "score"], [804, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[805, 2, 1, "", "fit"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "score"], [805, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[806, 1, 1, "", "BernoulliNB"], [807, 1, 1, "", "CategoricalNB"], [808, 1, 1, "", "ComplementNB"], [809, 1, 1, "", "GaussianNB"], [810, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[806, 2, 1, "", "fit"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "partial_fit"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_joint_log_proba"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[807, 2, 1, "", "fit"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "partial_fit"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_joint_log_proba"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[808, 2, 1, "", "fit"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "partial_fit"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_joint_log_proba"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "partial_fit"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_joint_log_proba"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[810, 2, 1, "", "fit"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "partial_fit"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_joint_log_proba"], [810, 2, 1, "", "predict_log_proba"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "set_params"]], "sklearn.neighbors": [[811, 1, 1, "", "BallTree"], [812, 1, 1, "", "KDTree"], [813, 1, 1, "", "KNeighborsClassifier"], [814, 1, 1, "", "KNeighborsRegressor"], [815, 1, 1, "", "KNeighborsTransformer"], [816, 1, 1, "", "KernelDensity"], [817, 1, 1, "", "LocalOutlierFactor"], [818, 1, 1, "", "NearestCentroid"], [819, 1, 1, "", "NearestNeighbors"], [820, 1, 1, "", "NeighborhoodComponentsAnalysis"], [821, 1, 1, "", "RadiusNeighborsClassifier"], [822, 1, 1, "", "RadiusNeighborsRegressor"], [823, 1, 1, "", "RadiusNeighborsTransformer"], [824, 4, 1, "", "kneighbors_graph"], [825, 4, 1, "", "radius_neighbors_graph"], [826, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[811, 2, 1, "", "get_arrays"], [811, 2, 1, "", "get_n_calls"], [811, 2, 1, "", "get_tree_stats"], [811, 2, 1, "", "kernel_density"], [811, 2, 1, "", "query"], [811, 2, 1, "", "query_radius"], [811, 2, 1, "", "reset_n_calls"], [811, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[812, 2, 1, "", "get_arrays"], [812, 2, 1, "", "get_n_calls"], [812, 2, 1, "", "get_tree_stats"], [812, 2, 1, "", "kernel_density"], [812, 2, 1, "", "query"], [812, 2, 1, "", "query_radius"], [812, 2, 1, "", "reset_n_calls"], [812, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "kneighbors"], [813, 2, 1, "", "kneighbors_graph"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "predict_proba"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "kneighbors"], [814, 2, 1, "", "kneighbors_graph"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "fit_transform"], [815, 2, 1, "", "get_feature_names_out"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "kneighbors"], [815, 2, 1, "", "kneighbors_graph"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "sample"], [816, 2, 1, "", "score"], [816, 2, 1, "", "score_samples"], [816, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[817, 2, 1, "", "decision_function"], [817, 2, 1, "", "fit"], [817, 2, 1, "", "fit_predict"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "kneighbors"], [817, 2, 1, "", "kneighbors_graph"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "score_samples"], [817, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "kneighbors"], [819, 2, 1, "", "kneighbors_graph"], [819, 2, 1, "", "radius_neighbors"], [819, 2, 1, "", "radius_neighbors_graph"], [819, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "fit_transform"], [820, 2, 1, "", "get_feature_names_out"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "radius_neighbors"], [821, 2, 1, "", "radius_neighbors_graph"], [821, 2, 1, "", "score"], [821, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "radius_neighbors"], [822, 2, 1, "", "radius_neighbors_graph"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "fit_transform"], [823, 2, 1, "", "get_feature_names_out"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "radius_neighbors"], [823, 2, 1, "", "radius_neighbors_graph"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "transform"]], "sklearn.neural_network": [[827, 1, 1, "", "BernoulliRBM"], [828, 1, 1, "", "MLPClassifier"], [829, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "fit_transform"], [827, 2, 1, "", "get_feature_names_out"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "gibbs"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "score_samples"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_log_proba"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"]], "sklearn.pipeline": [[830, 1, 1, "", "FeatureUnion"], [831, 1, 1, "", "Pipeline"], [832, 4, 1, "", "make_pipeline"], [833, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "fit_transform"], [830, 2, 1, "", "get_feature_names_out"], [830, 2, 1, "", "get_params"], [830, 3, 1, "", "n_features_in_"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[831, 3, 1, "", "classes_"], [831, 2, 1, "", "decision_function"], [831, 3, 1, "", "feature_names_in_"], [831, 2, 1, "", "fit"], [831, 2, 1, "", "fit_predict"], [831, 2, 1, "", "fit_transform"], [831, 2, 1, "", "get_feature_names_out"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "inverse_transform"], [831, 3, 1, "", "n_features_in_"], [831, 3, 1, "", "named_steps"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_log_proba"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "score_samples"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "transform"]], "sklearn.preprocessing": [[834, 1, 1, "", "Binarizer"], [835, 1, 1, "", "FunctionTransformer"], [836, 1, 1, "", "KBinsDiscretizer"], [837, 1, 1, "", "KernelCenterer"], [838, 1, 1, "", "LabelBinarizer"], [839, 1, 1, "", "LabelEncoder"], [840, 1, 1, "", "MaxAbsScaler"], [841, 1, 1, "", "MinMaxScaler"], [842, 1, 1, "", "MultiLabelBinarizer"], [843, 1, 1, "", "Normalizer"], [844, 1, 1, "", "OneHotEncoder"], [845, 1, 1, "", "OrdinalEncoder"], [846, 1, 1, "", "PolynomialFeatures"], [847, 1, 1, "", "PowerTransformer"], [848, 1, 1, "", "QuantileTransformer"], [849, 1, 1, "", "RobustScaler"], [850, 1, 1, "", "SplineTransformer"], [851, 1, 1, "", "StandardScaler"], [852, 4, 1, "", "add_dummy_feature"], [853, 4, 1, "", "binarize"], [854, 4, 1, "", "label_binarize"], [855, 4, 1, "", "maxabs_scale"], [856, 4, 1, "", "minmax_scale"], [857, 4, 1, "", "normalize"], [858, 4, 1, "", "power_transform"], [859, 4, 1, "", "quantile_transform"], [860, 4, 1, "", "robust_scale"], [861, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "fit_transform"], [834, 2, 1, "", "get_feature_names_out"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "inverse_transform"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_feature_names_out"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "inverse_transform"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_feature_names_out"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_transform"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "inverse_transform"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "inverse_transform"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "inverse_transform"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "inverse_transform"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "inverse_transform"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_params"], [844, 3, 1, "", "infrequent_categories_"], [844, 2, 1, "", "inverse_transform"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "inverse_transform"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_params"], [846, 3, 1, "", "powers_"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "inverse_transform"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "inverse_transform"], [851, 2, 1, "", "partial_fit"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.random_projection": [[862, 1, 1, "", "GaussianRandomProjection"], [863, 1, 1, "", "SparseRandomProjection"], [864, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[865, 1, 1, "", "LabelPropagation"], [866, 1, 1, "", "LabelSpreading"], [867, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "predict_proba"], [865, 2, 1, "", "score"], [865, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "predict_proba"], [866, 2, 1, "", "score"], [866, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[867, 2, 1, "", "decision_function"], [867, 2, 1, "", "fit"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "predict_log_proba"], [867, 2, 1, "", "predict_proba"], [867, 2, 1, "", "score"], [867, 2, 1, "", "set_params"]], "sklearn.svm": [[870, 1, 1, "", "LinearSVC"], [871, 1, 1, "", "LinearSVR"], [872, 1, 1, "", "NuSVC"], [873, 1, 1, "", "NuSVR"], [874, 1, 1, "", "OneClassSVM"], [875, 1, 1, "", "SVC"], [876, 1, 1, "", "SVR"], [877, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[870, 2, 1, "", "decision_function"], [870, 2, 1, "", "densify"], [870, 2, 1, "", "fit"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "score"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "predict"], [871, 2, 1, "", "score"], [871, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[872, 3, 1, "", "coef_"], [872, 2, 1, "", "decision_function"], [872, 2, 1, "", "fit"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "n_support_"], [872, 2, 1, "", "predict"], [872, 2, 1, "", "predict_log_proba"], [872, 2, 1, "", "predict_proba"], [872, 3, 1, "", "probA_"], [872, 3, 1, "", "probB_"], [872, 2, 1, "", "score"], [872, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[873, 3, 1, "", "class_weight_"], [873, 3, 1, "", "coef_"], [873, 2, 1, "", "fit"], [873, 2, 1, "", "get_params"], [873, 3, 1, "", "n_support_"], [873, 2, 1, "", "predict"], [873, 2, 1, "", "score"], [873, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[874, 3, 1, "", "class_weight_"], [874, 3, 1, "", "coef_"], [874, 2, 1, "", "decision_function"], [874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_predict"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "n_support_"], [874, 2, 1, "", "predict"], [874, 2, 1, "", "score_samples"], [874, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[875, 3, 1, "", "coef_"], [875, 2, 1, "", "decision_function"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_params"], [875, 3, 1, "", "n_support_"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "predict_log_proba"], [875, 2, 1, "", "predict_proba"], [875, 3, 1, "", "probA_"], [875, 3, 1, "", "probB_"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[876, 3, 1, "", "class_weight_"], [876, 3, 1, "", "coef_"], [876, 2, 1, "", "fit"], [876, 2, 1, "", "get_params"], [876, 3, 1, "", "n_support_"], [876, 2, 1, "", "predict"], [876, 2, 1, "", "score"], [876, 2, 1, "", "set_params"]], "sklearn.tree": [[878, 1, 1, "", "DecisionTreeClassifier"], [879, 1, 1, "", "DecisionTreeRegressor"], [880, 1, 1, "", "ExtraTreeClassifier"], [881, 1, 1, "", "ExtraTreeRegressor"], [882, 4, 1, "", "export_graphviz"], [883, 4, 1, "", "export_text"], [884, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[878, 2, 1, "", "apply"], [878, 2, 1, "", "cost_complexity_pruning_path"], [878, 2, 1, "", "decision_path"], [878, 3, 1, "", "feature_importances_"], [878, 2, 1, "", "fit"], [878, 2, 1, "", "get_depth"], [878, 2, 1, "", "get_n_leaves"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "predict_log_proba"], [878, 2, 1, "", "predict_proba"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[879, 2, 1, "", "apply"], [879, 2, 1, "", "cost_complexity_pruning_path"], [879, 2, 1, "", "decision_path"], [879, 3, 1, "", "feature_importances_"], [879, 2, 1, "", "fit"], [879, 2, 1, "", "get_depth"], [879, 2, 1, "", "get_n_leaves"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "predict"], [879, 2, 1, "", "score"], [879, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[880, 2, 1, "", "apply"], [880, 2, 1, "", "cost_complexity_pruning_path"], [880, 2, 1, "", "decision_path"], [880, 3, 1, "", "feature_importances_"], [880, 2, 1, "", "fit"], [880, 2, 1, "", "get_depth"], [880, 2, 1, "", "get_n_leaves"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_log_proba"], [880, 2, 1, "", "predict_proba"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[881, 2, 1, "", "apply"], [881, 2, 1, "", "cost_complexity_pruning_path"], [881, 2, 1, "", "decision_path"], [881, 3, 1, "", "feature_importances_"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_depth"], [881, 2, 1, "", "get_n_leaves"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"]], "sklearn.utils": [[885, 1, 1, "", "Bunch"], [886, 4, 1, "", "_safe_indexing"], [888, 4, 1, "", "as_float_array"], [889, 4, 1, "", "assert_all_finite"], [890, 4, 1, "", "check_X_y"], [891, 4, 1, "", "check_array"], [892, 4, 1, "", "check_consistent_length"], [893, 4, 1, "", "check_random_state"], [894, 4, 1, "", "check_scalar"], [897, 4, 1, "", "deprecated"], [903, 4, 1, "", "estimator_html_repr"], [910, 4, 1, "", "gen_batches"], [911, 4, 1, "", "gen_even_slices"], [913, 4, 1, "", "indexable"], [919, 4, 1, "", "murmurhash3_32"], [920, 4, 1, "", "parallel_backend"], [922, 4, 1, "", "register_parallel_backend"], [923, 4, 1, "", "resample"], [924, 4, 1, "", "safe_mask"], [925, 4, 1, "", "safe_sqr"], [926, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[885, 2, 1, "", "clear"], [885, 2, 1, "", "copy"], [885, 2, 1, "", "fromkeys"], [885, 2, 1, "", "get"], [885, 2, 1, "", "items"], [885, 2, 1, "", "keys"], [885, 2, 1, "", "pop"], [885, 2, 1, "", "popitem"], [885, 2, 1, "", "setdefault"], [885, 2, 1, "", "update"], [885, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[887, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[895, 4, 1, "", "compute_class_weight"], [896, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[898, 4, 1, "", "all_displays"], [899, 4, 1, "", "all_estimators"], [900, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[901, 4, 1, "", "check_estimator"], [902, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[904, 4, 1, "", "density"], [905, 4, 1, "", "fast_logdet"], [906, 4, 1, "", "randomized_range_finder"], [907, 4, 1, "", "randomized_svd"], [908, 4, 1, "", "safe_sparse_dot"], [909, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[912, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[914, 4, 1, "", "available_if"], [915, 4, 1, "", "if_delegate_has_method"]], "sklearn.utils.multiclass": [[916, 4, 1, "", "is_multilabel"], [917, 4, 1, "", "type_of_target"], [918, 4, 1, "", "unique_labels"]], "sklearn.utils.random": [[921, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[927, 4, 1, "", "incr_mean_variance_axis"], [928, 4, 1, "", "inplace_column_scale"], [929, 4, 1, "", "inplace_csr_column_scale"], [930, 4, 1, "", "inplace_row_scale"], [931, 4, 1, "", "inplace_swap_column"], [932, 4, 1, "", "inplace_swap_row"], [933, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[934, 4, 1, "", "inplace_csr_row_normalize_l1"], [935, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[936, 4, 1, "", "check_is_fitted"], [937, 4, 1, "", "check_memory"], [938, 4, 1, "", "check_symmetric"], [939, 4, 1, "", "column_or_1d"], [940, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 375], "u": 0, "histori": [0, 992], "govern": [0, 378], "author": [0, 994], "contributor": [0, 364, 365, 378, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "experi": [0, 37, 364, 378], "team": [0, 364, 378], "commun": [0, 365, 378], "emeritu": 0, "core": [0, 8, 354, 364, 368, 370, 375, 378, 397, 954], "develop": [0, 363, 366, 367, 368, 370, 371, 372, 373, 378, 941], "cite": 0, "scikit": [0, 250, 305, 306, 307, 308, 309, 351, 352, 363, 366, 368, 369, 375, 378, 380, 970, 972, 973, 976, 978, 979, 984, 987, 990], "learn": [0, 5, 12, 50, 95, 98, 148, 164, 166, 172, 216, 217, 218, 219, 231, 250, 257, 285, 292, 305, 306, 307, 308, 309, 312, 313, 314, 351, 352, 354, 361, 363, 365, 366, 368, 369, 375, 378, 380, 388, 394, 396, 947, 949, 957, 965, 970, 972, 973, 974, 976, 978, 979, 981, 984, 985, 986, 987, 988, 990], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 85, 100, 104, 229, 365, 366, 375, 388, 964, 969, 972], "infrastructur": 0, "support": [0, 25, 119, 164, 190, 305, 306, 307, 308, 319, 322, 331, 375, 380, 385, 387, 388, 396, 967, 975, 985, 1000], "exampl": [3, 6, 9, 53, 58, 74, 87, 102, 125, 156, 164, 192, 193, 329, 333, 354, 359, 360, 369, 375, 379, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 409, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 437, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 475, 476, 477, 479, 481, 485, 486, 487, 488, 489, 490, 494, 495, 497, 498, 499, 500, 501, 502, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 556, 557, 559, 562, 563, 564, 565, 566, 568, 569, 572, 574, 575, 577, 579, 580, 581, 583, 585, 586, 588, 589, 590, 592, 593, 594, 597, 598, 600, 602, 603, 605, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 623, 624, 627, 628, 630, 631, 632, 633, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 663, 664, 665, 666, 667, 668, 672, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 691, 692, 693, 700, 702, 707, 710, 711, 714, 715, 718, 721, 722, 723, 725, 726, 728, 730, 751, 752, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 802, 804, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 820, 824, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 856, 859, 863, 864, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 884, 885, 893, 902, 904, 911, 914, 926, 936, 941, 944, 946, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 978, 984, 985, 986, 991, 994], "base": [3, 4, 84, 116, 117, 146, 164, 231, 305, 306, 308, 353, 365, 388, 389, 393, 396, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 948, 960, 1003, 1004, 1006, 1007, 1008], "real": [3, 9, 74, 109, 164, 360], "world": [3, 74, 164, 360], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 57, 61, 69, 84, 87, 88, 89, 90, 91, 95, 104, 118, 119, 129, 135, 136, 149, 151, 153, 154, 156, 158, 164, 166, 175, 178, 185, 196, 198, 205, 214, 217, 218, 225, 230, 235, 253, 261, 262, 316, 317, 321, 337, 343, 357, 358, 359, 360, 361, 362, 369, 375, 388, 399, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 978, 984, 985, 987, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "time": [4, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 120, 133, 139, 147, 159, 163, 170, 173, 190, 215, 223, 230, 231, 238, 247, 271, 274, 289, 295, 303, 310, 318, 335, 337, 340, 347, 393], "relat": [4, 8, 359, 365, 960, 972, 1001], "featur": [4, 51, 54, 73, 100, 115, 116, 117, 119, 123, 127, 140, 142, 144, 145, 146, 164, 168, 169, 172, 175, 190, 193, 214, 230, 235, 256, 294, 298, 299, 302, 305, 307, 308, 327, 337, 338, 352, 354, 365, 368, 388, 390, 396, 397, 398, 942, 960, 962, 969, 986, 987, 997, 998, 999, 1000, 1001], "engin": [4, 168, 972, 976], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 57, 62, 63, 65, 66, 69, 74, 77, 79, 81, 84, 85, 96, 97, 100, 101, 102, 103, 109, 111, 116, 117, 123, 129, 142, 146, 154, 155, 157, 162, 167, 168, 169, 172, 176, 180, 182, 189, 190, 226, 231, 234, 237, 250, 256, 261, 262, 265, 268, 287, 294, 297, 301, 312, 324, 327, 331, 338, 339, 348, 352, 354, 360, 369, 375, 377, 389, 390, 392, 393, 398, 399, 962, 966, 976, 978, 981, 984, 986, 987], "explor": 4, "bike": 4, "share": 4, "demand": 4, "cross": [4, 83, 84, 135, 136, 145, 164, 185, 250, 251, 253, 254, 258, 260, 265, 327, 348, 365, 388, 392, 393, 941, 948, 982], "valid": [4, 135, 136, 145, 185, 229, 250, 251, 253, 254, 258, 260, 265, 270, 327, 348, 352, 366, 373, 388, 393, 936, 937, 938, 939, 940, 941, 947, 948, 955, 982], "gradient": [4, 119, 120, 121, 122, 123, 124, 167, 196, 204, 210, 305, 306, 308, 396, 948, 966], "boost": [4, 119, 120, 121, 122, 123, 124, 167, 196, 305, 306, 308, 396], "naiv": [4, 24, 25, 388, 954], "linear": [4, 25, 33, 34, 122, 149, 164, 166, 174, 175, 192, 196, 199, 202, 217, 218, 230, 306, 323, 330, 331, 352, 373, 375, 388, 946, 948, 949, 950, 962, 985], "regress": [4, 72, 74, 84, 85, 111, 122, 123, 132, 149, 154, 155, 156, 175, 176, 179, 185, 187, 188, 189, 192, 194, 196, 198, 211, 213, 214, 228, 231, 287, 331, 344, 345, 361, 388, 390, 396, 399, 943, 945, 948, 952, 953, 955, 956, 966, 967, 968, 985], "step": [4, 236, 376, 390], "categori": [4, 309, 962], "trigonometr": 4, "period": [4, 197], "spline": [4, 197, 308, 962], "qualit": 4, "analysi": [4, 33, 34, 59, 95, 101, 103, 106, 122, 167, 240, 258, 265, 283, 284, 285, 337, 388, 392, 394, 946, 955, 969, 986, 987], "impact": [4, 60, 1009], "model": [4, 7, 11, 74, 84, 96, 103, 109, 116, 117, 119, 123, 146, 149, 154, 164, 166, 167, 168, 172, 174, 175, 184, 185, 190, 196, 199, 214, 226, 231, 235, 239, 241, 245, 246, 248, 254, 255, 262, 287, 294, 306, 308, 331, 337, 352, 366, 375, 376, 383, 384, 388, 393, 941, 947, 948, 951, 952, 954, 956, 957, 978, 982, 985, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "predict": [4, 10, 24, 85, 111, 122, 132, 150, 176, 196, 231, 234, 251, 262, 312, 352, 375, 376, 392, 393, 399, 952, 963, 978, 985], "pairwis": [4, 255, 388, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 950], "interact": [4, 167, 985], "polynomi": [4, 172, 175, 176, 197, 944, 948, 950, 962, 985], "non": [4, 14, 95, 122, 191, 196, 217, 260, 323, 330, 331, 394, 948, 962], "kernel": [4, 5, 100, 149, 154, 155, 158, 164, 171, 172, 230, 231, 279, 280, 288, 307, 320, 323, 328, 331, 388, 394, 395, 399, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 944, 945, 950, 962, 967, 985], "conclud": [4, 109, 221], "remark": [4, 109, 221, 229], "imag": [5, 47, 50, 65, 98, 359, 388, 397, 558, 559, 560, 561, 562], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 127, 129, 183, 199, 210, 212, 255, 259, 298, 331, 337, 338, 348, 354, 363, 369, 370, 372, 375, 393, 394, 396, 397, 398, 403, 409, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 435, 437, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 475, 476, 477, 479, 481, 485, 486, 487, 488, 489, 490, 494, 495, 497, 498, 499, 500, 501, 502, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 556, 557, 559, 562, 563, 564, 565, 566, 568, 569, 572, 574, 575, 577, 579, 580, 581, 583, 585, 586, 588, 589, 590, 592, 593, 594, 597, 598, 600, 602, 603, 605, 607, 608, 609, 610, 614, 615, 616, 618, 619, 620, 621, 623, 624, 627, 628, 630, 631, 632, 633, 637, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 663, 664, 665, 666, 667, 668, 672, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 691, 692, 693, 700, 702, 707, 710, 711, 714, 715, 718, 721, 722, 723, 725, 726, 728, 730, 751, 752, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 802, 804, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 820, 824, 827, 828, 829, 830, 831, 832, 835, 836, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 856, 859, 863, 864, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 884, 885, 893, 902, 904, 911, 914, 926, 936, 946, 948, 949, 952, 956, 966, 967, 968, 976, 985, 987, 1004], "pca": [5, 57, 72, 95, 96, 99, 100, 101, 102, 103, 104, 394, 516, 969, 986], "refer": [5, 11, 25, 27, 79, 80, 98, 113, 168, 172, 184, 255, 260, 261, 288, 359, 360, 362, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 941, 942, 944, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968], "load": [5, 7, 17, 50, 57, 117, 119, 123, 135, 146, 168, 189, 214, 218, 226, 230, 237, 256, 324, 327, 337, 338, 339, 358, 359, 369, 375, 397, 978, 986, 987], "via": [5, 184, 185, 214, 396, 944], "openml": [5, 305, 359], "basi": [5, 158, 399, 944, 948, 985], "reconstruct": [5, 13, 98], "test": [5, 77, 141, 258, 261, 268, 337, 342, 363, 365, 366, 372, 373, 393, 978, 985, 987], "face": [6, 50, 95, 233, 360, 976, 983], "recognit": [6, 360, 362, 983], "eigenfac": [6, 95, 983], "svm": [6, 138, 142, 143, 172, 210, 230, 308, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 388, 870, 871, 872, 873, 874, 875, 876, 877, 948, 958, 966, 985, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "complex": [7, 227, 236, 254, 314, 342, 352, 389, 948, 949, 955, 956, 966, 967, 968], "influenc": [7, 10, 352], "benchmark": [7, 10, 57, 337], "choos": [7, 941, 978, 980, 982], "paramet": [7, 77, 122, 253, 307, 324, 332, 365, 366, 376, 377, 388, 390, 396, 941, 948, 952, 967, 978, 982, 987], "run": [7, 57, 259], "code": [7, 95, 105, 365, 366, 369, 370, 372, 394, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 62, 63, 65, 66, 77, 81, 84, 90, 91, 96, 97, 101, 109, 111, 118, 123, 129, 130, 131, 132, 135, 162, 167, 175, 176, 180, 188, 189, 190, 200, 201, 205, 218, 226, 230, 234, 235, 237, 251, 257, 259, 262, 264, 268, 270, 294, 305, 307, 308, 312, 321, 322, 327, 337, 343, 371, 388, 947, 959, 991], "result": [7, 8, 38, 47, 49, 50, 57, 62, 63, 66, 77, 79, 81, 96, 97, 109, 111, 129, 132, 162, 172, 201, 231, 234, 259, 268, 331, 338, 348, 941], "conclus": [7, 149, 185], "out": [8, 121, 354, 372, 393, 397, 941, 948, 954], "classif": [8, 26, 29, 30, 32, 33, 69, 90, 137, 150, 151, 152, 153, 164, 212, 232, 258, 261, 262, 265, 278, 286, 294, 305, 311, 316, 337, 361, 388, 396, 399, 948, 952, 953, 955, 956, 966, 967, 968, 985, 987], "text": [8, 164, 227, 256, 316, 336, 337, 338, 339, 360, 388, 397, 563, 564, 565, 566, 987], "document": [8, 19, 164, 307, 308, 336, 337, 338, 365, 972, 973, 975, 990, 994, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "reuter": 8, "routin": [8, 353, 373], "main": [8, 196], "outlier": [9, 178, 213, 225, 234, 281, 282, 297, 388, 948, 958, 962], "detect": [9, 225, 234, 252, 281, 282, 952, 958, 967], "set": [9, 74, 77, 102, 129, 162, 262, 324, 342, 375, 393, 948, 978, 984, 985, 987], "first": [9, 37, 365], "second": [9, 37], "latenc": [10, 352], "helper": [10, 158, 218, 373], "function": [10, 34, 94, 158, 186, 200, 201, 206, 218, 234, 250, 268, 307, 327, 339, 373, 388, 393, 396, 399, 944, 948, 952, 967, 985], "bulk": [10, 352], "atom": [10, 352], "speed": [10, 370], "variou": [10, 52, 203, 222], "regressor": [10, 111, 122, 175, 305, 308, 388, 396], "n_featur": 10, "throughput": [10, 352], "speci": [11, 288], "distribut": [11, 214, 217, 288, 301, 380, 949, 962], "visual": [12, 57, 106, 226, 231, 237, 250, 293, 306, 324, 389, 390, 991], "stock": [12, 983], "market": [12, 983], "structur": [12, 39, 47, 66, 157, 314, 346, 983], "retriev": [12, 305], "from": [12, 98, 146, 168, 305, 353, 359, 363, 375, 388, 397, 948, 952, 978, 985, 986, 987, 1004], "internet": 12, "graph": [12, 305, 373, 375, 389, 397, 912], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 57, 59, 62, 63, 64, 65, 66, 95, 164, 309, 338, 361, 386, 388, 389, 394, 400, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 688, 689, 952, 986, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "affin": [12, 38, 389, 950], "propag": [12, 38, 312, 313, 314, 389, 965], "embed": [12, 52, 217, 218, 229, 285, 396, 949], "2d": [12, 52, 97, 104, 167], "space": [12, 100, 390, 941, 949], "compress": [13, 352, 398], "sens": [13, 398], "tomographi": 13, "l1": [13, 187, 189, 212, 332, 398], "prior": [13, 158, 240], "lasso": [13, 180, 181, 182, 183, 184, 185, 190, 306, 627, 948], "topic": 14, "extract": [14, 73, 98, 214, 256, 338, 352, 354, 388, 397, 987], "neg": [14, 95, 191, 394, 948], "matrix": [14, 17, 177, 249, 388, 389, 394, 952, 967], "factor": [14, 95, 103, 106, 281, 282, 394, 958], "latent": [14, 84, 394], "dirichlet": [14, 394, 951], "alloc": [14, 394], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 62, 63, 66, 67, 75, 77, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 189, 201, 215, 223, 238, 247, 268, 271, 274, 289, 295, 303, 310, 318, 335, 340, 347, 351, 352, 389, 390, 393, 959], "libsvm": [16, 359], "gui": 16, "wikipedia": 17, "princip": [17, 85, 101, 394, 969, 986], "eigenvector": 17, "download": [17, 129, 162, 359], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 380, 397, 987], "adjac": 17, "singular": [17, 394], "vector": [17, 25, 53, 164, 319, 322, 331, 337, 339, 360, 388, 397, 967, 985, 986], "random": [17, 95, 114, 127, 128, 168, 169, 229, 237, 261, 263, 348, 366, 373, 388, 393, 394, 396, 921, 941, 948, 964, 969], "svd": [17, 95, 394], "central": 17, "score": [17, 84, 120, 135, 162, 175, 254, 261, 262, 327, 389, 393, 947, 952, 967, 982], "biclust": [18, 19, 20, 164, 361, 386, 388], "spectral": [19, 20, 21, 65, 217, 386, 389, 949], "co": [19, 21, 386], "algorithm": [19, 20, 21, 38, 44, 49, 62, 63, 64, 217, 225, 370, 375, 946, 948, 951, 953, 955, 956, 960, 968, 985], "A": [20, 21, 47, 57, 62, 196, 308, 364, 370, 393, 981, 984], "demo": [20, 21, 38, 47, 49, 57, 62, 64], "calibr": [23, 24, 25, 26, 27, 122, 164, 196, 387, 388, 413, 414, 415, 1003, 1004, 1006, 1007, 1008, 1009], "probabl": [24, 25, 26, 30, 131, 152, 387, 388, 396, 967], "classifi": [24, 25, 27, 31, 132, 179, 236, 273, 305, 317, 321, 324, 337, 346, 387, 388, 396, 946, 955, 985, 987], "gener": [24, 34, 38, 47, 49, 62, 63, 65, 66, 77, 79, 81, 90, 91, 96, 97, 98, 116, 142, 149, 155, 156, 158, 164, 174, 175, 176, 180, 190, 196, 198, 231, 265, 268, 287, 294, 306, 312, 331, 348, 361, 365, 377, 388, 394, 396, 948, 962, 973, 982], "synthet": [24, 74, 175, 369], "gaussian": [24, 25, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 239, 240, 241, 244, 245, 246, 297, 388, 399, 951, 954, 962, 964], "bay": [24, 25, 388, 954], "curv": [25, 27, 176, 231, 237, 246, 252, 257, 262, 264, 270, 387, 947], "summari": [25, 185, 338, 339, 994, 995, 996, 997, 998, 999, 1000, 1001], "3": [26, 179, 388, 987, 1002, 1003], "class": [26, 37, 110, 112, 131, 179, 205, 210, 258, 262, 308, 323, 326, 377, 388, 393, 396, 397, 951, 952, 955, 958, 966, 967, 994, 995], "fit": [26, 96, 103, 116, 117, 120, 122, 123, 154, 175, 176, 177, 190, 193, 198, 202, 262, 287, 331, 348, 366, 376, 396, 954, 958, 978], "compar": [26, 42, 44, 61, 77, 84, 120, 128, 142, 172, 175, 182, 198, 203, 225, 231, 255, 263, 283, 292, 297, 375], "comparison": [27, 31, 43, 63, 79, 104, 119, 141, 149, 217, 218, 231, 255, 266, 339, 389, 399, 948], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 57, 88, 136, 137, 218, 294, 312, 313, 362, 984], "normal": [33, 172, 196, 297, 301, 388, 843, 857, 952, 962], "ledoit": [33, 78, 391], "wolf": [33, 78, 391], "oa": [33, 77, 78, 402, 450], "discrimin": [33, 34, 388, 946], "quadrat": [34, 399, 946], "covari": [34, 76, 77, 79, 80, 81, 164, 242, 388, 391, 402, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 946, 1002, 1006, 1007, 1008], "ellipsoid": [34, 241], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 258, 307, 309, 312, 338, 352, 365, 370, 389, 393, 397, 987], "evalu": [37, 57, 60, 80, 196, 234, 256, 259, 294, 338, 376, 384, 386, 389, 393, 396, 941, 947, 952, 987], "defin": [37, 47, 57, 66, 217, 234, 250, 253, 339, 952], "list": [37, 975], "metric": [37, 40, 122, 259, 388, 389, 393, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 941, 949, 950, 952, 955, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "fix": [37, 994, 997, 998, 999, 1000, 1001, 1007], "ground": [37, 175], "truth": [37, 175], "label": [37, 262, 312, 313, 314, 360, 361, 389, 393, 396, 952, 963, 965], "grow": 37, "number": [37, 59, 119, 267, 352, 366, 941, 951], "vari": [37, 291, 315, 389], "sampl": [38, 49, 62, 77, 96, 97, 142, 177, 209, 231, 256, 268, 287, 306, 331, 334, 359, 373, 377, 388, 389, 396, 948], "agglom": [39, 40, 52, 986], "without": [39, 120, 283, 337], "differ": [40, 44, 61, 77, 158, 167, 297, 300, 321, 366, 375, 389, 948, 985], "hierarch": [41, 47, 61, 66, 389, 986], "dendrogram": 41, "birch": [42, 389, 418], "minibatchkmean": [42, 63, 95, 424], "bisect": [43, 389], "k": [43, 45, 48, 56, 57, 58, 60, 63, 66, 84, 338, 389, 393, 952, 955, 962, 985, 986], "mean": [43, 45, 48, 56, 57, 58, 60, 62, 63, 116, 117, 162, 168, 338, 389, 952, 962, 986], "regular": [43, 77, 124, 166, 189, 200, 201, 291, 332, 948, 956], "toi": [44, 61, 225, 362], "segment": [46, 65], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 255], "ward": [47, 66, 389, 986], "an": [47, 58, 162, 177, 185, 234, 285, 305, 309, 375, 397, 941, 958, 978, 984, 985], "color": 48, "quantiz": [48, 53, 986], "dbscan": [49, 389, 400, 420], "onlin": [50, 203, 308, 309, 966], "dictionari": [50, 95, 98, 105, 394], "part": [50, 398], "agglomer": [51, 54, 969, 986], "v": [54, 66, 77, 78, 80, 85, 100, 168, 178, 188, 214, 258, 268, 269, 342, 389, 942, 962, 978], "univari": [54, 84, 142, 327, 398, 942], "select": [54, 59, 71, 103, 135, 140, 142, 146, 164, 184, 185, 190, 245, 248, 327, 375, 384, 388, 393, 398, 941, 948, 951, 982, 1000], "induct": 55, "demonstr": [56, 259, 300, 312], "assumpt": 56, "handwritten": [57, 218, 362], "our": [57, 250, 253, 365], "reduc": [57, 352], "initi": [58, 60, 243, 951], "silhouett": [59, 389], "kmean": [59, 63, 306, 422], "empir": [60, 80, 229, 391], "linkag": [61, 389], "method": [61, 73, 84, 108, 149, 164, 217, 219, 243, 272, 377, 388, 389, 396, 944, 951, 958, 959, 986], "shift": [62, 389], "meanshift": [62, 423], "establish": [63, 172], "pariti": 63, "between": [63, 266], "optic": [64, 362, 389, 425], "four": 65, "circl": 65, "two": [65, 112, 182, 235, 255], "unstructur": 66, "we": 66, "ar": [66, 308, 375], "nearest": [66, 164, 275, 276, 277, 278, 283, 286, 287, 305, 388, 942, 955, 985], "neighbor": [66, 164, 217, 275, 276, 277, 278, 283, 287, 305, 388, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 942, 949, 955, 985, 1002, 1003, 1004, 1006, 1007, 1008, 1009], "10": [66, 994], "pipelin": [68, 69, 71, 72, 129, 143, 164, 166, 227, 236, 256, 327, 366, 375, 376, 388, 390, 398, 830, 831, 832, 833, 969, 983, 987, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "composit": [68, 164, 388, 390, 941], "estim": [68, 76, 77, 78, 79, 80, 81, 113, 119, 121, 128, 155, 162, 164, 175, 199, 202, 227, 233, 234, 244, 263, 279, 280, 288, 305, 306, 307, 348, 366, 375, 376, 377, 385, 388, 390, 391, 393, 395, 396, 399, 941, 942, 946, 948, 951, 952, 967, 972, 980, 982, 984, 995, 1002, 1003, 1004], "column": [69, 70, 236], "transform": [69, 70, 71, 74, 84, 115, 127, 236, 307, 308, 309, 357, 375, 376, 390, 392, 393, 955, 962, 963, 964, 986], "heterogen": [69, 390], "sourc": [69, 96, 363], "20": [69, 337, 360, 987, 1002], "newsgroup": [69, 337, 360, 987], "creat": [69, 101, 103, 226, 262, 327, 375], "mix": 70, "type": [70, 240, 366, 377, 389, 978], "dimension": [71, 217, 220, 236, 284, 338, 946, 949, 955, 969, 985], "reduct": [71, 217, 221, 236, 284, 338, 946, 955, 969], "gridsearchcv": [71, 135, 259, 396, 770], "illustr": [71, 153, 158, 285, 399], "cach": [71, 277, 390], "within": 71, "chain": [72, 236, 273, 376, 390], "logist": [72, 179, 186, 187, 188, 189, 211, 212, 948, 985], "concaten": 73, "multipl": [73, 236, 259, 348, 371, 393, 941, 942, 952, 1002, 1003], "effect": [74, 222, 297, 315, 342, 955], "target": [74, 156, 214, 375, 377, 390, 392, 953, 963], "shrinkag": [77, 391, 396, 946, 985], "ledoitwolf": [77, 448], "max": [77, 952], "likelihood": [77, 175, 176, 258, 952, 957], "approach": [77, 185, 255], "robust": [79, 80, 175, 199, 202, 348, 388, 391, 941, 948], "mahalanobi": [79, 955], "distanc": [79, 388, 955], "relev": [79, 948], "minimum": [80, 391], "determin": [80, 391, 948, 952], "spars": [81, 95, 105, 166, 180, 182, 211, 305, 337, 338, 373, 391, 394, 398, 962, 964, 966], "invers": [81, 391, 964], "decomposit": [83, 84, 93, 95, 113, 164, 361, 388, 392, 394, 401, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 986, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "variabl": [84, 166, 353, 375, 388, 985], "canon": [84, 392], "symmetr": 84, "pl": 84, "scatter": 84, "multivari": [84, 942], "respons": [84, 378], "pls2": 84, "pls1": 84, "cca": [84, 456], "mode": [84, 352, 363], "b": 84, "deflat": 84, "compon": [85, 95, 101, 283, 284, 285, 394, 951, 955, 969, 986], "partial": [85, 167, 235, 959], "least": [85, 122, 185, 191, 194, 948], "squar": [85, 122, 158, 191, 194, 399, 944, 948, 950, 952], "The": [85, 88, 89, 166, 196, 222, 229, 253, 262, 360, 368, 393, 397, 951, 952, 964, 985, 986], "one": [85, 119, 235, 948, 952], "power": [85, 196], "iri": [89, 102, 104, 118, 151, 205, 317, 321, 343, 362, 399, 984], "randomli": [90, 91], "multilabel": [91, 232, 361, 373, 388, 952, 953, 978], "beta": [94, 394], "diverg": [94, 394], "loss": [94, 196, 206, 306, 309, 396, 952], "prepar": [95, 109, 111, 172, 217, 324, 368], "nmf": [95, 309, 394, 515], "independ": [95, 394, 986], "fastica": [95, 96, 97, 401, 508], "minibatchsparsepca": [95, 394, 514], "center": [95, 962], "fa": [95, 103], "posit": [95, 308], "blind": 96, "separ": [96, 208, 325, 326], "ica": [96, 394, 986], "point": [97, 285], "cloud": 97, "distort": 98, "displai": [98, 201, 226, 227, 236, 372, 991], "patch": [98, 397], "noisi": [98, 156], "them": [98, 364], "increment": [99, 354, 394], "kernelpca": [100, 510], "origin": [100, 261, 285, 297], "figur": 101, "probabilist": [103, 150, 394, 399], "lda": [104, 394, 946], "precomput": [105, 177, 305, 394], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 118, 164, 309, 388, 396, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "discret": [109, 157, 298, 299, 962], "versu": [109, 113, 210, 260, 317, 352], "adaboost": [109, 110, 111, 112, 396], "baselin": [109, 172, 196], "samm": 109, "r": 109, "multi": [110, 128, 167, 190, 205, 220, 233, 259, 262, 291, 345, 370, 388, 948, 949, 952, 956, 967, 968], "decis": [110, 111, 118, 130, 164, 230, 317, 341, 342, 343, 344, 345, 346, 375, 378, 388, 968], "tree": [110, 111, 115, 116, 117, 118, 127, 164, 168, 196, 305, 341, 342, 343, 344, 345, 346, 375, 388, 396, 398, 878, 879, 880, 881, 882, 883, 884, 955, 960, 968, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "train": [111, 123, 132, 226, 231, 235, 237, 268, 294, 307, 315, 324, 337, 342, 343, 346, 360, 393, 955, 965, 978, 985, 987], "decisiontre": 111, "singl": [113, 129, 214, 226, 361, 389, 942], "bag": [113, 121, 337, 396, 397, 941, 987], "bia": 113, "varianc": [113, 194, 398, 952, 962], "oob": 114, "error": [114, 122, 135, 175, 252, 268, 372, 380, 948, 952], "forest": [114, 116, 117, 128, 168, 169, 237, 360, 396, 958], "import": [116, 117, 123, 146, 168, 169, 230, 302, 305, 396, 960], "decreas": [116, 117, 168], "impur": [116, 117, 168, 342, 960], "permut": [116, 168, 169, 261, 305, 393, 960], "pixel": 117, "parallel": [117, 353, 363, 370, 389, 396, 941], "mdi": [117, 168], "surfac": [118, 230, 343], "categor": [119, 307, 375, 396, 954, 962], "am": 119, "hous": [119, 167, 360, 362], "drop": 119, "hot": 119, "encod": [119, 962, 963], "ordin": 119, "nativ": [119, 305, 307], "limit": [119, 149, 352, 380, 383, 397], "split": [119, 307, 348, 393], "earli": [120, 204], "stop": [120, 204, 397, 966], "interv": 122, "quantil": [122, 198, 308, 309, 948], "confid": 122, "tune": [122, 253, 256, 307, 941, 987], "hyper": [122, 253, 307, 388, 941], "preprocess": [123, 129, 164, 166, 167, 234, 236, 296, 339, 348, 375, 388, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 962, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "devianc": [123, 952], "isolationforest": [125, 538], "monoton": [126, 396], "constraint": [126, 389, 396], "hash": [127, 373, 397], "total": [127, 342, 396], "output": [128, 233, 297, 345, 968, 985], "meta": [128, 307, 396], "combin": [129, 226], "predictor": 129, "stack": [129, 305, 396], "make": [129, 132, 162, 365, 368, 378], "measur": [129, 258, 389, 952], "boundari": [130, 317], "votingclassifi": [130, 131, 396, 544], "calcul": 131, "individu": [132, 167, 307, 959], "vote": [132, 396], "tutori": [134, 164, 971, 979, 981, 987], "exercis": [134, 135, 136, 137, 138, 164, 982, 985, 987], "diabet": [135, 235, 362, 985], "appli": 135, "line": [135, 152], "show": 135, "std": [135, 175], "bonu": 135, "how": [135, 348, 365, 370, 375], "much": 135, "can": [135, 375], "you": [135, 375], "trust": 135, "alpha": [135, 342], "f": [141, 952], "mutual": [141, 389], "inform": [141, 162, 184, 185, 368, 389, 941, 948], "anova": [143, 327], "recurs": [144, 145, 398], "elimin": [144, 145, 398, 941], "sequenti": [146, 398], "coeffici": [146, 166, 175, 200, 201, 389, 952], "discuss": [146, 364], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 166, 348, 378, 388, 399, 951, 981], "machin": [148, 164, 166, 294, 319, 372, 388, 957, 967, 978, 985], "ridg": [149, 176, 178, 194, 200, 201, 231, 388, 399, 647, 945, 948], "simpl": [149, 280, 370, 984], "final": 149, "gpc": [150, 151, 152, 153, 399], "iso": [152, 262], "xor": [153, 399], "gpr": [154, 155, 399], "mauna": [154, 399], "loa": [154, 399], "co2": [154, 399], "build": [154, 162, 363, 365, 372, 987], "design": 154, "proper": 154, "extrapol": 154, "interpret": [154, 166, 234, 394, 396], "hyperparamet": [154, 155, 256, 263, 592], "nois": [155, 156, 176, 399], "level": [155, 389, 396, 399], "optimis": 155, "basic": [156, 214, 376, 391, 399], "introductori": 156, "free": 156, "posterior": 158, "cookbook": 158, "radial": [158, 399, 944, 985], "ration": [158, 399], "quadradt": 158, "exp": [158, 399], "sine": [158, 246, 399], "dot": [158, 399], "product": [158, 214, 372, 375, 399, 596], "mat\u00e9rn": [158, 399], "miss": [160, 161, 162, 164, 305, 396, 942, 962], "valu": [160, 161, 162, 164, 222, 305, 365, 394, 396, 942, 952, 960, 962], "imput": [160, 161, 162, 164, 305, 388, 602, 603, 604, 605, 942, 962, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "variant": 161, "iterativeimput": [161, 602, 942], "befor": [162, 368], "replac": 162, "0": [162, 305, 306, 307, 308, 968, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "knn": [162, 305], "iter": [162, 267, 393, 941], "releas": [164, 304, 305, 306, 307, 308, 309, 368, 380, 992, 1000], "highlight": [164, 304, 305, 306, 307, 308, 309, 994, 997, 998, 1001, 1002], "mixtur": [164, 239, 240, 241, 244, 245, 246, 388, 768, 769, 951, 1002, 1003, 1007, 1008], "inspect": [164, 165, 379, 388, 606, 607, 608, 609, 1003, 1004, 1005, 1006, 1007, 1008], "approxim": [164, 171, 172, 230, 275, 307, 388, 391, 944], "manifold": [164, 216, 217, 218, 219, 361, 388, 663, 664, 665, 666, 667, 668, 669, 670, 671, 949, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "miscellan": [164, 224, 388, 1002, 1003, 1004, 1005, 1006, 1007], "multioutput": [164, 272, 388, 802, 803, 804, 805, 953, 1002, 1003, 1004, 1005, 1006, 1009], "neural": [164, 290, 388, 956, 957], "network": [164, 290, 388, 956, 957], "semi": [164, 311, 312, 316, 317, 388, 965], "supervis": [164, 311, 312, 316, 317, 388, 956, 965, 974, 985], "work": [164, 336, 352, 364, 375, 987], "common": [166, 348, 377, 397, 952], "pitfal": [166, 348], "wage": 166, "scale": [166, 217, 220, 302, 332, 354, 397, 861, 949, 958, 962, 969], "matter": 166, "check": [166, 305, 372, 1002, 1003, 1004], "problem": [166, 264, 394, 967, 968, 978, 983, 985, 986], "correl": [166, 169, 392, 952, 960], "numer": [166, 353, 366], "lesson": 166, "depend": [167, 235, 363, 959, 994, 1007, 1008], "condit": [167, 307, 959], "expect": [167, 307, 951, 959], "california": [167, 360], "1": [167, 193, 308, 309, 375, 388, 987, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "wai": [167, 365, 375], "layer": [167, 291, 956], "perceptron": [167, 291, 643, 948, 956], "3d": 167, "accuraci": [168, 230, 337, 342, 952], "": [168, 367, 375, 396, 952], "multicollinear": 169, "breast": [169, 362], "cancer": [169, 362], "handl": [169, 942], "scalabl": [172, 306], "partit": 172, "bayesian": [175, 176, 240, 255, 388, 948, 951], "recov": 175, "weight": [175, 177, 209, 293, 306, 334, 396, 397], "true": [175, 176], "margin": [175, 176, 208, 325, 329], "log": [175, 176, 952], "expans": 175, "sinusoid": 176, "cubic": 176, "l": 176, "elast": [177, 180, 181, 948], "net": [177, 180, 181, 948], "gram": [177, 967], "huberregressor": [178, 624], "strong": 178, "signal": [180, 394, 986], "elasticnet": [180, 306, 621], "dens": 182, "implement": [182, 375, 389, 397, 952, 955, 966, 967], "path": [183, 189, 201, 346, 380], "lar": [183, 625, 948], "criteria": [184, 375, 948, 968], "aic": 185, "bic": 185, "criterion": [185, 307, 941, 966], "coordin": 185, "descent": [185, 204, 210, 948, 966], "angl": [185, 948], "penalti": [187, 207, 332], "sparsiti": [187, 193, 397, 985], "multinomi": [188, 212, 948, 954], "One": [188, 210, 308, 323, 393, 958, 966], "rest": 188, "joint": 190, "task": [190, 388, 948, 972], "seri": [190, 393], "onli": [193, 213, 1005, 1007], "2": [193, 987, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "ordinari": [194, 948], "orthogon": [195, 948], "match": [195, 948], "pursuit": [195, 948], "poisson": [196, 214, 306, 307, 952], "french": 196, "motor": 196, "third": [196, 380], "parti": [196, 380], "liabil": 196, "claim": [196, 214], "constant": 196, "rank": [196, 388, 952], "takeawai": 196, "interpol": 197, "quantileregressor": [198, 645], "linearregress": [198, 632], "ransac": [199, 948], "l2": [200, 332], "solver": [203, 394, 948], "stochast": [204, 210, 217, 292, 948, 949, 957, 966], "sgd": [205, 206, 207, 208, 209, 948, 966], "convex": 206, "maximum": [208, 325, 957], "hyperplan": [208, 325, 326], "multiclass": [211, 264, 305, 373, 387, 388, 799, 800, 801, 916, 917, 918, 952, 953, 978, 985, 1003, 1006, 1007, 1008], "20newgroup": 211, "mnist": [212, 293], "theil": [213, 948], "sen": [213, 948], "y": [213, 375, 392, 963, 965], "direct": 213, "x": 213, "tweedi": [214, 952], "insur": 214, "definit": [214, 294, 959, 1004], "frequenc": [214, 987], "sever": [214, 219], "gamma": [214, 952], "pure": 214, "premium": 214, "tweedieregressor": [214, 655], "local": [217, 218, 281, 282, 949, 958], "isomap": [217, 218, 663, 949], "multidimension": 217, "t": [217, 222, 949], "techniqu": 218, "sphere": 219, "swiss": 221, "roll": [221, 366], "And": [221, 378], "hole": 221, "sne": [222, 949], "perplex": 222, "shape": [222, 978], "anomali": 225, "object": [226, 250, 366, 375, 941, 952, 984, 991], "confusionmatrixdisplai": [226, 672], "roccurvedisplai": [226, 676], "precisionrecalldisplai": [226, 675], "compact": 227, "represent": [227, 306, 352, 397, 986], "rich": [227, 306], "html": 227, "isoton": [228, 387, 388, 610, 611, 612, 943, 1002, 1003, 1004, 1006, 1008], "johnson": [229, 964], "lindenstrauss": [229, 964], "bound": 229, "theoret": [229, 948], "explicit": 230, "map": [230, 301, 962], "rbf": [230, 323, 324, 399, 597, 950, 967, 985], "python": [230, 353, 370, 383, 967, 971, 972, 1000], "packag": [230, 972, 1006], "svr": [231, 331, 876, 967], "construct": [231, 390], "look": [231, 331], "complet": [233, 389], "advanc": 235, "With": [235, 987], "togeth": [235, 983, 986], "grid": [236, 253, 255, 263, 266, 941, 982, 987], "search": [236, 253, 255, 263, 266, 376, 941, 982, 987], "over": 236, "roc": [237, 264, 265, 305, 952], "api": [237, 305, 308, 366, 371, 377, 385, 388, 399, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004], "svc": [237, 332, 875, 967], "concentr": 240, "variat": [240, 951], "gmm": [242, 243], "densiti": [244, 279, 280, 288, 395, 904, 967], "confus": [249, 389, 952], "behavior": 250, "indic": 250, "mani": [250, 353, 375], "cv": [250, 348], "tradeoff": [252, 952], "det": [252, 952], "custom": [253, 320, 397, 962, 967], "refit": [253, 978], "strategi": [253, 292, 300, 354, 388, 389, 952], "balanc": [254, 952], "statist": [255, 972, 981, 984], "frequentist": 255, "practic": [255, 348, 369, 948, 949, 956, 966, 967, 968], "equival": 255, "all": [255, 309, 380, 983, 1009], "take": 255, "home": 255, "messag": 255, "ratio": [258, 952], "pre": [258, 348, 376], "post": [258, 342], "invari": 258, "respect": 258, "preval": 258, "cross_val_scor": [259, 793], "nest": [260, 390, 982], "see": [260, 390], "also": [260, 390], "signific": 261, "precis": [262, 952], "recal": [262, 952], "In": 262, "binari": [262, 948, 952], "averag": [262, 389, 396, 952], "micro": 262, "each": [262, 267, 337, 941], "f1": 262, "receiv": [264, 265, 952], "oper": [264, 265, 364, 373, 399, 952], "characterist": [264, 265, 952], "area": 264, "under": [264, 375], "io": 265, "success": [266, 267, 307, 941], "halv": [266, 267, 307, 941], "candid": [267, 941], "amount": [267, 941], "resourc": [267, 353, 365, 941, 971, 975], "underfit": 269, "overfit": 269, "tsne": [275, 667], "1d": 280, "novelti": [281, 958, 967], "lof": [281, 282], "neighborhood": [283, 284, 285, 955], "centroid": [286, 955], "mlpclassifi": [292, 828], "mlp": 293, "restrict": [294, 957], "boltzmann": [294, 957], "scaler": 297, "standardscal": [297, 851], "minmaxscal": [297, 841], "maxabsscal": [297, 840], "robustscal": [297, 849], "powertransform": [297, 847], "quantiletransform": [297, 848], "uniform": [297, 962], "kbinsdiscret": [298, 300, 836], "continu": [298, 365], "22": [305, 1004], "new": [305, 307, 308, 365, 375, 971, 994, 995, 997, 998, 999, 1000, 1001], "prune": [305, 342, 968], "datafram": [305, 375], "compat": [305, 365, 366, 385], "auc": [305, 680], "now": [305, 308, 1004], "23": [306, 1005], "stabil": 306, "improv": [306, 307, 308, 309, 364, 365, 997, 998], "histogram": [306, 308, 395, 396], "24": [307, 1006], "histgradientboost": 307, "self": [307, 315, 965], "sequentialfeatureselector": [307, 577], "polynomialcountsketch": [307, 615], "decisiontreeregressor": [307, 879], "keyword": [308, 1005, 1007], "argument": [308, 366, 1005, 1007], "name": [308, 375], "more": [308, 360, 375, 956], "flexibl": [308, 942], "stabl": 308, "histgradientboostingregressor": [309, 537], "get_feature_names_out": 309, "avail": [309, 941, 990, 991], "group": [309, 393, 976, 986], "infrequ": [309, 962], "onehotencod": [309, 844], "minibatchnmf": [309, 513], "version": [309, 359, 363, 368, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "bisectingkmean": [309, 419], "divid": 309, "most": 312, "uncertain": 312, "activ": 313, "threshold": 315, "linearsvc": [322, 870, 967], "unbalanc": [326, 967], "some": 327, "plai": 327, "percentil": 327, "case": [332, 948, 952], "simul": 332, "note": [332, 354, 390, 393, 948], "tie": 333, "break": 333, "word": [337, 397, 987], "metadata": 337, "strip": 337, "quantifi": [338, 952], "qualiti": [338, 952], "tfidfvector": [338, 339, 566], "lsa": 338, "top": [338, 952], "term": [338, 377, 397], "per": 338, "hashingvector": [338, 397, 564], "featurehash": [339, 557], "dictvector": [339, 556], "special": 339, "purpos": [339, 973], "cost": [342, 968], "leav": [342, 393, 948], "understand": 346, "recommend": [348, 360, 972], "inconsist": 348, "leakag": 348, "dure": 348, "avoid": [348, 390], "control": [348, 396, 956], "none": 348, "randomst": 348, "instanc": [348, 354], "repeat": [348, 390, 393], "call": [348, 364], "splitter": [348, 388], "subtleti": 348, "get": [348, 375, 376], "reproduc": [348, 369], "across": 348, "execut": [348, 375], "configur": [352, 353], "overhead": 352, "input": [352, 366, 385, 389, 962], "tip": [352, 370, 372, 941, 949, 956, 966, 967, 968], "trick": [352, 370, 372, 397], "algebra": [352, 373], "librari": [352, 353], "memori": [352, 370, 372, 389], "reshap": [352, 984], "link": [352, 359, 952], "manag": [353, 380], "joblib": [353, 370], "openmp": [353, 370], "numpi": [353, 369], "oversubscript": 353, "spawn": 353, "too": 353, "thread": 353, "switch": 353, "runtim": [353, 363], "assume_finit": 353, "working_memori": 353, "environ": 353, "sklearn_assume_finit": 353, "sklearn_working_memori": 353, "sklearn_se": 353, "sklearn_tests_global_random_se": 353, "sklearn_skip_network_test": 353, "sklearn_run_float32_test": 353, "sklearn_enable_debug_cython_direct": 353, "computation": 354, "bigger": 354, "stream": 354, "tabl": [355, 375], "Of": 355, "content": [355, 375, 978], "util": [358, 369, 373, 388, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 987, 991, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "other": [359, 375, 972, 994], "svmlight": 359, "format": [359, 369, 375, 383, 953], "org": [359, 368, 976], "repositori": 359, "arff": 359, "parser": 359, "extern": [359, 971, 978, 994, 1003], "olivetti": 360, "usag": [360, 370, 375, 385, 387, 390, 396, 397, 948], "convert": 360, "filter": 360, "realist": 360, "consider": [360, 948], "wild": 360, "covertyp": 360, "rcv1": 360, "kddcup": 360, "99": 360, "boston": 362, "price": 362, "plant": 362, "linnerrud": 362, "wine": 362, "wisconsin": 362, "diagnost": 362, "instal": [363, 380], "nightli": 363, "specif": [363, 366, 383, 941, 972, 973], "tag": [363, 365, 366], "edit": 363, "platform": [363, 372, 380], "instruct": 363, "window": [363, 380], "maco": 363, "compil": [363, 370], "conda": [363, 380], "forg": 363, "homebrew": 363, "linux": [363, 375, 380], "system": 363, "freebsd": 363, "altern": [363, 941], "intel": [363, 380], "c": [363, 370], "icc": 363, "oneapi": 363, "bug": [364, 365, 975, 997, 998, 999, 1000, 1001, 1002, 1003], "triag": 364, "issu": [364, 365], "curat": 364, "fruit": 364, "pr": [364, 368], "help": [364, 365, 375], "review": [364, 365, 372, 987], "member": 364, "close": 364, "tough": 364, "typic": 364, "workflow": [364, 365], "contribut": [365, 375], "submit": 365, "report": [365, 369, 952], "request": [365, 368, 372, 375], "good": [365, 369], "video": [365, 971], "git": 365, "pull": [365, 368, 372, 375], "checklist": [365, 368], "integr": 365, "ci": 365, "stall": 365, "unclaim": 365, "easi": 365, "want": 365, "guidelin": [365, 366], "write": 365, "referenc": 365, "github": 365, "action": 365, "coverag": [365, 372, 952], "matplotlib": 365, "monitor": 365, "tracker": [365, 975], "maintain": [365, 368, 383], "backward": 365, "deprec": [365, 388, 897, 1004], "chang": [365, 976, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "default": 365, "read": 365, "exist": 365, "instanti": 366, "attribut": [366, 377, 941], "option": 366, "univers": 366, "your": [366, 369, 952], "own": [366, 375, 952], "templat": 366, "baseestim": [366, 403], "mixin": 366, "get_param": 366, "set_param": 366, "init": 366, "clone": [366, 410], "assert": 366, "guid": [367, 989], "major": [368, 396, 1002, 1003], "minor": 368, "merg": 368, "web": 368, "site": 368, "travi": 368, "cron": 368, "job": [368, 375], "experiment": [368, 385, 388, 553, 554, 555], "craft": 369, "minim": [369, 968, 1007, 1008], "provid": 369, "fail": 369, "comment": 369, "boil": 369, "down": 369, "script": 369, "someth": 369, "small": 369, "possibl": 369, "do": [369, 375], "NOT": 369, "unless": 369, "i": [369, 375, 393, 976], "extrem": [369, 396], "necessari": 369, "markdown": 369, "panda": [369, 375], "make_regress": [369, 499], "make_classif": [369, 490], "make_blob": [369, 487], "optim": [370, 388, 941, 949], "cython": [370, 372], "profil": 370, "extens": 370, "yep": 370, "gperftool": 370, "gprof": 370, "valgrind": [370, 372], "callgrind": 370, "kcachegrind": 370, "warm": 370, "restart": 370, "overview": [371, 389, 958], "ax": 371, "saniti": 372, "preserv": 372, "fold": [372, 393], "unfold": 372, "outdat": 372, "diff": 372, "remot": 372, "track": 372, "branch": 372, "pytest": 372, "alias": 372, "flag": 372, "standard": [372, 962], "repli": 372, "debug": 372, "arm64": 372, "x86_64": 372, "tool": [373, 375], "effici": 373, "arrai": [373, 385, 978], "matric": [373, 962], "warn": [373, 388], "except": [373, 388, 546, 547, 548, 549, 550, 551, 552, 1006], "dispatch": 374, "frequent": 375, "ask": 375, "question": [375, 975], "what": 375, "lot": 375, "peopl": [375, 994, 995, 996, 997], "wrong": 375, "pronounc": 375, "why": [375, 396], "pypi": 375, "deep": 375, "reinforc": 375, "Will": 375, "add": 375, "graphic": [375, 957], "sequenc": 375, "did": 375, "remov": [375, 388, 398, 962, 994], "hmm": 375, "gpu": 375, "need": 375, "doe": 375, "directli": 375, "plan": 375, "so": 375, "my": 375, "ani": 375, "attent": 375, "inclus": 375, "includ": 375, "best": 375, "should": 375, "save": 375, "export": 375, "deploi": 375, "bunch": [375, 885], "usabl": 375, "deal": 375, "string": 375, "sometim": 375, "crash": 375, "freez": 375, "n_job": 375, "osx": [375, 380], "than": 375, "specifi": [375, 941], "random_st": 375, "entir": 375, "start": 376, "processor": 376, "automat": [376, 948], "next": 376, "glossari": 377, "element": 377, "concept": [377, 948], "properti": 377, "role": 378, "technic": 378, "committe": 378, "enhanc": [378, 972, 997, 998, 999, 1000, 1001], "propos": 378, "slep": 378, "latest": 380, "appl": 380, "silicon": 380, "m1": 380, "hardwar": 380, "alpin": 380, "arch": 380, "debian": 380, "ubuntu": 380, "fedora": 380, "netbsd": 380, "macport": 380, "mac": 380, "anaconda": 380, "enthought": 380, "deploy": 380, "channel": 380, "winpython": 380, "troubleshoot": 380, "caus": 380, "length": 380, "persist": 383, "serial": 383, "secur": 383, "interoper": [383, 972], "mathemat": [386, 389, 396, 944, 946, 948, 955, 956, 959, 966, 967, 968], "formul": [386, 389, 396, 946, 948, 955, 956, 966, 967, 968], "sigmoid": [387, 950], "sklearn": [388, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "compos": [388, 439, 440, 441, 442, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "cross_decomposit": [388, 456, 457, 458, 459, 1004, 1006, 1008], "loader": 388, "discriminant_analysi": [388, 524, 525, 1002, 1003, 1006, 1008, 1009], "dummi": [388, 526, 527, 952, 1002, 1003, 1004, 1007, 1008], "feature_extract": [388, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "feature_select": [388, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "gaussian_process": [388, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 1002, 1004, 1005, 1006, 1007, 1008, 1009], "kernel_approxim": [388, 613, 614, 615, 616, 617, 1004, 1006, 1007, 1008, 1009], "kernel_ridg": [388, 618], "linear_model": [388, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "classic": [388, 951], "glm": 388, "interfac": 388, "model_select": [388, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "naive_bay": [388, 806, 807, 808, 809, 810, 1002, 1004, 1005, 1006, 1007, 1009], "neural_network": [388, 827, 828, 829, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "random_project": [388, 862, 863, 864, 1008], "semi_supervis": [388, 865, 866, 867, 1004, 1005, 1006], "recent": 388, "To": 388, "low": [389, 396, 398], "mini": [389, 394], "batch": [389, 394], "assign": 389, "featureagglomer": [389, 421], "hierarchi": 389, "ad": 389, "connect": [389, 397, 986], "consumpt": 389, "larg": [389, 397], "size": [389, 396], "rand": 389, "index": [389, 913], "advantag": 389, "drawback": 389, "homogen": 389, "fowlk": 389, "mallow": 389, "calinski": 389, "harabasz": 389, "davi": 389, "bouldin": 389, "conting": 389, "pair": 389, "access": 390, "featureunion": [390, 830], "columntransform": [390, 439], "shrunk": 391, "oracl": 391, "plscanon": [392, 457], "plssvd": [392, 459], "plsregress": [392, 458], "held": 393, "cross_valid": [393, 794], "obtain": 393, "d": [393, 955], "loo": 393, "p": [393, 976], "lpo": 393, "shuffl": [393, 926], "stratif": 393, "stratifi": 393, "stratifiedgroupkfold": [393, 787], "predefin": [393, 952], "decompos": 394, "exact": 394, "sparsepca": [394, 518], "kpca": 394, "choic": [394, 951, 955], "truncat": 394, "semant": 394, "nnmf": 394, "frobeniu": 394, "norm": 394, "addit": [396, 944], "weak": 396, "learner": 396, "rate": 396, "subsampl": 396, "faster": 396, "hard": 396, "soft": 396, "dict": 397, "detail": [397, 944, 948, 966, 967], "tf": 397, "idf": 397, "decod": 397, "applic": [397, 986], "corpu": 397, "selectfrommodel": [398, 572], "recoveri": 398, "biclustermixin": 404, "classifiermixin": 405, "clustermixin": 406, "densitymixin": 407, "regressormixin": 408, "transformermixin": 409, "is_classifi": 411, "is_regressor": 412, "calibratedclassifiercv": 413, "calibrationdisplai": 414, "calibration_curv": 415, "affinitypropag": 416, "agglomerativeclust": 417, "spectralbiclust": 426, "spectralclust": 427, "spectralcoclust": 428, "affinity_propag": 429, "cluster_optics_dbscan": 430, "cluster_optics_xi": 431, "compute_optics_graph": 432, "estimate_bandwidth": 433, "k_mean": 434, "kmeans_plusplu": 435, "mean_shift": 436, "spectral_clust": 437, "ward_tre": 438, "transformedtargetregressor": 440, "make_column_selector": 441, "make_column_transform": 442, "config_context": 443, "ellipticenvelop": 444, "empiricalcovari": 445, "graphicallasso": 446, "graphicallassocv": 447, "mincovdet": 449, "shrunkcovari": 451, "empirical_covari": 452, "graphical_lasso": 453, "ledoit_wolf": 454, "shrunk_covari": 455, "clear_data_hom": 460, "dump_svmlight_fil": 461, "fetch_20newsgroup": 462, "fetch_20newsgroups_vector": 463, "fetch_california_h": 464, "fetch_covtyp": 465, "fetch_kddcup99": 466, "fetch_lfw_pair": 467, "fetch_lfw_peopl": 468, "fetch_olivetti_fac": 469, "fetch_openml": 470, "fetch_rcv1": 471, "fetch_species_distribut": 472, "get_data_hom": 473, "load_boston": 474, "load_breast_canc": 475, "load_diabet": 476, "load_digit": 477, "load_fil": 478, "load_iri": 479, "load_linnerud": 480, "load_sample_imag": [481, 482], "load_svmlight_fil": [483, 484], "load_win": 485, "make_biclust": 486, "make_checkerboard": 488, "make_circl": 489, "make_friedman1": 491, "make_friedman2": 492, "make_friedman3": 493, "make_gaussian_quantil": 494, "make_hastie_10_2": 495, "make_low_rank_matrix": 496, "make_moon": 497, "make_multilabel_classif": 498, "make_s_curv": 500, "make_sparse_coded_sign": 501, "make_sparse_spd_matrix": 502, "make_sparse_uncorrel": 503, "make_spd_matrix": 504, "make_swiss_rol": 505, "dictionarylearn": 506, "factoranalysi": 507, "incrementalpca": 509, "latentdirichletalloc": 511, "minibatchdictionarylearn": 512, "sparsecod": 517, "truncatedsvd": 519, "dict_learn": 520, "dict_learning_onlin": 521, "non_negative_factor": 522, "sparse_encod": 523, "lineardiscriminantanalysi": 524, "quadraticdiscriminantanalysi": 525, "dummyclassifi": 526, "dummyregressor": 527, "adaboostclassifi": 528, "adaboostregressor": 529, "baggingclassifi": 530, "baggingregressor": 531, "extratreesclassifi": 532, "extratreesregressor": 533, "gradientboostingclassifi": 534, "gradientboostingregressor": 535, "histgradientboostingclassifi": 536, "randomforestclassifi": 539, "randomforestregressor": 540, "randomtreesembed": 541, "stackingclassifi": 542, "stackingregressor": 543, "votingregressor": 545, "convergencewarn": 546, "dataconversionwarn": 547, "datadimensionalitywarn": 548, "efficiencywarn": 549, "fitfailedwarn": 550, "notfittederror": 551, "undefinedmetricwarn": 552, "enable_halving_search_cv": 553, "enable_hist_gradient_boost": 554, "enable_iterative_imput": 555, "patchextractor": 558, "extract_patches_2d": 559, "grid_to_graph": 560, "img_to_graph": 561, "reconstruct_from_patches_2d": 562, "countvector": 563, "tfidftransform": 565, "genericunivariateselect": 567, "rfe": 568, "rfecv": 569, "selectfdr": 570, "selectfpr": 571, "selectfw": 573, "selectkbest": 574, "selectpercentil": 575, "selectormixin": 576, "variancethreshold": 578, "chi2": 579, "f_classif": 580, "f_regress": 581, "mutual_info_classif": 582, "mutual_info_regress": 583, "r_regress": 584, "gaussianprocessclassifi": 585, "gaussianprocessregressor": 586, "compoundkernel": 587, "constantkernel": 588, "dotproduct": 589, "expsinesquar": 590, "exponenti": 591, "matern": 594, "pairwisekernel": 595, "rationalquadrat": 598, "sum": 599, "whitekernel": 600, "get_config": 601, "knnimput": 603, "missingind": 604, "simpleimput": 605, "decisionboundarydisplai": 606, "partialdependencedisplai": 607, "partial_depend": 608, "permutation_import": 609, "isotonicregress": 610, "check_increas": 611, "isotonic_regress": 612, "additivechi2sampl": 613, "nystroem": [614, 944], "rbfsampler": 616, "skewedchi2sampl": 617, "kernelridg": 618, "ardregress": 619, "bayesianridg": 620, "elasticnetcv": 622, "gammaregressor": 623, "larscv": 626, "lassocv": 628, "lassolar": 629, "lassolarscv": 630, "lassolars": 631, "logisticregress": 633, "logisticregressioncv": 634, "multitaskelasticnet": 635, "multitaskelasticnetcv": 636, "multitasklasso": 637, "multitasklassocv": 638, "orthogonalmatchingpursuit": 639, "orthogonalmatchingpursuitcv": 640, "passiveaggressiveclassifi": 641, "passiveaggressiveregressor": 642, "poissonregressor": 644, "ransacregressor": 646, "ridgecv": 648, "ridgeclassifi": 649, "ridgeclassifiercv": 650, "sgdclassifi": 651, "sgdoneclasssvm": 652, "sgdregressor": 653, "theilsenregressor": 654, "enet_path": 656, "lars_path": 657, "lars_path_gram": 658, "lasso_path": 659, "orthogonal_mp": 660, "orthogonal_mp_gram": 661, "ridge_regress": 662, "locallylinearembed": 664, "md": [665, 949], "spectralembed": 666, "locally_linear_embed": 668, "smacof": 669, "spectral_embed": 670, "trustworthi": 671, "detcurvedisplai": 673, "distancemetr": 674, "accuracy_scor": 677, "adjusted_mutual_info_scor": 678, "adjusted_rand_scor": 679, "average_precision_scor": 681, "balanced_accuracy_scor": 682, "brier_score_loss": 683, "calinski_harabasz_scor": 684, "check_scor": 685, "class_likelihood_ratio": 686, "classification_report": 687, "contingency_matrix": 688, "pair_confusion_matrix": 689, "cohen_kappa_scor": 690, "completeness_scor": 691, "confusion_matrix": 692, "consensus_scor": 693, "coverage_error": 694, "d2_absolute_error_scor": 695, "d2_pinball_scor": 696, "d2_tweedie_scor": 697, "davies_bouldin_scor": 698, "dcg_score": 699, "det_curv": 700, "explained_variance_scor": 701, "f1_score": 702, "fbeta_scor": 703, "fowlkes_mallows_scor": 704, "get_scor": 705, "get_scorer_nam": 706, "hamming_loss": 707, "hinge_loss": 708, "homogeneity_completeness_v_measur": 709, "homogeneity_scor": 710, "jaccard_scor": 711, "label_ranking_average_precision_scor": 712, "label_ranking_loss": 713, "log_loss": 714, "make_scor": 715, "matthews_corrcoef": 716, "max_error": 717, "mean_absolute_error": 718, "mean_absolute_percentage_error": 719, "mean_gamma_devi": 720, "mean_pinball_loss": 721, "mean_poisson_devi": 722, "mean_squared_error": 723, "mean_squared_log_error": 724, "mean_tweedie_devi": 725, "median_absolute_error": 726, "multilabel_confusion_matrix": 727, "mutual_info_scor": 728, "ndcg_score": 729, "normalized_mutual_info_scor": 730, "additive_chi2_kernel": 731, "chi2_kernel": 732, "cosine_dist": 733, "cosine_similar": 734, "distance_metr": 735, "euclidean_dist": 736, "haversine_dist": 737, "kernel_metr": 738, "laplacian_kernel": 739, "linear_kernel": 740, "manhattan_dist": 741, "nan_euclidean_dist": 742, "paired_cosine_dist": 743, "paired_dist": 744, "paired_euclidean_dist": 745, "paired_manhattan_dist": 746, "pairwise_kernel": 747, "polynomial_kernel": 748, "rbf_kernel": 749, "sigmoid_kernel": 750, "pairwise_dist": 751, "pairwise_distances_argmin": 752, "pairwise_distances_argmin_min": 753, "pairwise_distances_chunk": 754, "precision_recall_curv": 755, "precision_recall_fscore_support": 756, "precision_scor": 757, "r2_score": 758, "rand_scor": 759, "recall_scor": 760, "roc_auc_scor": 761, "roc_curv": 762, "silhouette_sampl": 763, "silhouette_scor": 764, "top_k_accuracy_scor": 765, "v_measure_scor": 766, "zero_one_loss": 767, "bayesiangaussianmixtur": [768, 951], "gaussianmixtur": [769, 951], "groupkfold": 771, "groupshufflesplit": 772, "halvinggridsearchcv": 773, "halvingrandomsearchcv": 774, "kfold": 775, "leaveonegroupout": 776, "leaveoneout": 777, "leavepgroupsout": 778, "leavepout": 779, "parametergrid": 780, "parametersampl": 781, "predefinedsplit": 782, "randomizedsearchcv": 783, "repeatedkfold": 784, "repeatedstratifiedkfold": 785, "shufflesplit": 786, "stratifiedkfold": 788, "stratifiedshufflesplit": 789, "timeseriessplit": 790, "check_cv": 791, "cross_val_predict": 792, "learning_curv": 795, "permutation_test_scor": 796, "train_test_split": 797, "validation_curv": 798, "onevsoneclassifi": [799, 953], "onevsrestclassifi": [800, 953], "outputcodeclassifi": [801, 953], "classifierchain": [802, 953], "multioutputclassifi": [803, 953], "multioutputregressor": [804, 953], "regressorchain": [805, 953], "bernoullinb": 806, "categoricalnb": 807, "complementnb": 808, "gaussiannb": 809, "multinomialnb": 810, "balltre": [811, 955], "kdtree": [812, 955], "kneighborsclassifi": 813, "kneighborsregressor": 814, "kneighborstransform": 815, "kerneldens": 816, "localoutlierfactor": 817, "nearestcentroid": 818, "nearestneighbor": 819, "neighborhoodcomponentsanalysi": 820, "radiusneighborsclassifi": 821, "radiusneighborsregressor": 822, "radiusneighborstransform": 823, "kneighbors_graph": 824, "radius_neighbors_graph": 825, "sort_graph_by_row_valu": 826, "bernoullirbm": 827, "mlpregressor": 829, "make_pipelin": 832, "make_union": 833, "binar": [834, 853, 962, 963], "functiontransform": 835, "kernelcenter": 837, "labelbinar": [838, 963], "labelencod": 839, "multilabelbinar": [842, 963], "ordinalencod": 845, "polynomialfeatur": 846, "splinetransform": 850, "add_dummy_featur": 852, "label_binar": 854, "maxabs_scal": 855, "minmax_scal": 856, "power_transform": 858, "quantile_transform": 859, "robust_scal": 860, "gaussianrandomproject": 862, "sparserandomproject": 863, "johnson_lindenstrauss_min_dim": 864, "labelpropag": 865, "labelspread": 866, "selftrainingclassifi": 867, "set_config": 868, "show_vers": 869, "linearsvr": [871, 967], "nusvc": [872, 967], "nusvr": 873, "oneclasssvm": 874, "l1_min_c": 877, "decisiontreeclassifi": 878, "extratreeclassifi": 880, "extratreeregressor": 881, "export_graphviz": 882, "export_text": 883, "plot_tre": 884, "_safe_index": 886, "arrayfunc": 887, "min_po": 887, "as_float_arrai": 888, "assert_all_finit": 889, "check_x_i": 890, "check_arrai": 891, "check_consistent_length": 892, "check_random_st": 893, "check_scalar": 894, "class_weight": [895, 896], "compute_class_weight": 895, "compute_sample_weight": 896, "discoveri": [898, 899, 900], "all_displai": 898, "all_estim": 899, "all_funct": 900, "estimator_check": [901, 902], "check_estim": 901, "parametrize_with_check": 902, "estimator_html_repr": 903, "extmath": [904, 905, 906, 907, 908, 909], "fast_logdet": 905, "randomized_range_find": 906, "randomized_svd": 907, "safe_sparse_dot": 908, "weighted_mod": 909, "gen_batch": 910, "gen_even_slic": 911, "single_source_shortest_path_length": 912, "metaestim": [914, 915], "available_if": 914, "if_delegate_has_method": 915, "is_multilabel": 916, "type_of_target": 917, "unique_label": 918, "murmurhash3_32": 919, "parallel_backend": 920, "sample_without_replac": 921, "register_parallel_backend": 922, "resampl": 923, "safe_mask": 924, "safe_sqr": 925, "sparsefunc": [927, 928, 929, 930, 931, 932, 933, 1003], "incr_mean_variance_axi": 927, "inplace_column_scal": 928, "inplace_csr_column_scal": 929, "inplace_row_scal": 930, "inplace_swap_column": 931, "inplace_swap_row": 932, "mean_variance_axi": 933, "sparsefuncs_fast": [934, 935], "inplace_csr_row_normalize_l1": 934, "inplace_csr_row_normalize_l2": 935, "check_is_fit": 936, "check_memori": 937, "check_symmetr": 938, "column_or_1d": 939, "has_fit_paramet": 940, "exhaust": 941, "min_resourc": 941, "aggress": [941, 948], "analyz": 941, "cv_results_": 941, "failur": 941, "brute": [941, 955], "forc": [941, 955], "mark": 942, "nan": 942, "chi": [944, 950], "skew": 944, "tensor": 944, "sketch": 944, "qda": 946, "omp": 948, "ard": 948, "liblinear": 948, "passiv": 948, "scenario": 948, "trade": 948, "off": 948, "which": 948, "consensu": 948, "median": [948, 952], "huber": 948, "extend": 948, "introduct": [949, 978], "modifi": 949, "hessian": 949, "eigenmap": 949, "tangent": 949, "align": 949, "nonmetr": 949, "barn": 949, "hut": 949, "cosin": 950, "similar": [950, 952], "laplacian": 950, "pro": 951, "con": 951, "maxim": 951, "infer": 951, "rule": 952, "cohen": 952, "kappa": 952, "ham": 952, "jaccard": 952, "hing": 952, "matthew": 952, "zero": 952, "brier": 952, "discount": 952, "cumul": 952, "gain": 952, "r\u00b2": 952, "absolut": 952, "logarithm": 952, "percentag": 952, "explain": 952, "pinbal": 952, "d\u00b2": 952, "complement": 954, "bernoulli": [954, 957], "unsupervis": [955, 957, 969, 986, 988], "find": 955, "ball": 955, "leaf_siz": 955, "shrunken": 955, "warm_start": 956, "parametr": 957, "up": 958, "ellipt": 958, "envelop": 958, "isol": 958, "ic": 959, "outlin": 960, "mislead": 960, "strongli": 960, "rang": 962, "whiten": 962, "bin": 962, "lemma": 964, "unlabel": 965, "entri": 965, "id3": 968, "c4": 968, "5": [968, 994], "c5": 968, "cart": 968, "welcom": 970, "talk": 971, "scientif": [971, 981], "framework": 972, "domain": 972, "translat": 972, "roadmap": 973, "thi": 973, "statement": 973, "2018": 973, "architectur": 973, "goal": 973, "subpackag": 973, "mail": 975, "user": [975, 989], "gitter": 975, "who": 976, "j": 976, "morgan": 976, "spotifi": 976, "inria": 976, "betawork": 976, "hug": 976, "evernot": 976, "t\u00e9l\u00e9com": 976, "paristech": 976, "book": 976, "com": 976, "aweb": 976, "yhat": 976, "rangespan": 976, "birchbox": 976, "bestofmedia": 976, "phimeca": 976, "howaboutw": 976, "peerindex": 976, "datarobot": 976, "okcupid": 976, "love": 976, "publica": 976, "machinali": 976, "solido": 976, "infonea": 976, "dataiku": 976, "otto": 976, "zopa": 976, "mar": 976, "bnp": 976, "pariba": 976, "cardif": 976, "section": 978, "convent": 978, "cast": 978, "updat": [978, 1004], "right": 980, "put": 983, "open": 983, "ship": 984, "would": 984, "high": 985, "observ": [985, 986], "solv": [985, 986], "vocabulari": 985, "curs": 985, "iris": 985, "same": 985, "seek": 986, "constrain": 986, "inverse_transform": 986, "setup": 987, "token": 987, "occurr": 987, "languag": 987, "identif": 987, "sentiment": 987, "movi": 987, "cli": 987, "where": 987, "here": 987, "12": 994, "changelog": [994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "11": 994, "9": 994, "8": 994, "7": 994, "6": [994, 1000], "modul": [994, 1002, 1003, 1009], "misc": 994, "4": [994, 1002], "earlier": 994, "13": 995, "14": 996, "15": 997, "16": 998, "17": 999, "18": 1000, "last": 1000, "19": 1001, "known": [1002, 1003], "21": 1003, "legend": [1003, 1004, 1005, 1006, 1007, 1008, 1009], "post1": 1004, "websit": 1004, "clear": 1004, "public": 1004, "futurewarn": 1004, "enforc": [1005, 1007]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Cross decomposition": [[83, "cross-decomposition"], [164, "cross-decomposition"], [392, "cross-decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [217, "dataset-preparation"]], "Decomposition": [[95, "decomposition"], [93, "decomposition"], [164, "decomposition"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "The Iris Dataset": [[89, "the-iris-dataset"]], "Combine predictors using stacking": [[129, "combine-predictors-using-stacking"]], "Download the dataset": [[129, "download-the-dataset"]], "Make pipeline to preprocess the data": [[129, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[129, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[129, "measure-and-plot-the-results"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[119, "model-comparison"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Principal Component Regression vs Partial Least Squares Regression": [[85, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[85, "the-data"]], "Projection on one component and predictive power": [[85, "projection-on-one-component-and-predictive-power"]], "Ensemble methods": [[108, "ensemble-methods"], [164, "ensemble-methods"], [396, "ensemble-methods"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Create the data": [[103, "create-the-data"], [101, "create-the-data"]], "Fit the models": [[103, "fit-the-models"]], "Plot class probabilities calculated by the VotingClassifier": [[131, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Comparing random forests and the multi-output meta estimator": [[128, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Ledoit-Wolf vs OAS estimation": [[78, "ledoit-wolf-vs-oas-estimation"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Sparse inverse covariance estimation": [[81, "sparse-inverse-covariance-estimation"]], "Generate the data": [[81, "generate-the-data"], [65, "generate-the-data"], [63, "generate-the-data"]], "Estimate the covariance": [[81, "estimate-the-covariance"]], "Plot the results": [[81, "plot-the-results"], [132, "plot-the-results"], [50, "plot-the-results"], [162, "plot-the-results"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[77, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Generate sample data": [[77, "generate-sample-data"], [97, "generate-sample-data"], [96, "generate-sample-data"], [49, "generate-sample-data"], [62, "generate-sample-data"], [38, "generate-sample-data"], [287, "generate-sample-data"], [331, "generate-sample-data"], [268, "generate-sample-data"], [231, "generate-sample-data"], [142, "generate-sample-data"]], "Compute the likelihood on test data": [[77, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[77, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Plot results": [[77, "plot-results"], [97, "plot-results"], [96, "plot-results"], [8, "plot-results"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[71, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[71, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[71, "caching-transformers-within-a-pipeline"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Computation times": [[75, "computation-times"], [92, "computation-times"], [82, "computation-times"], [86, "computation-times"], [139, "computation-times"], [133, "computation-times"], [107, "computation-times"], [22, "computation-times"], [15, "computation-times"], [28, "computation-times"], [67, "computation-times"], [35, "computation-times"], [303, "computation-times"], [318, "computation-times"], [295, "computation-times"], [310, "computation-times"], [335, "computation-times"], [289, "computation-times"], [340, "computation-times"], [347, "computation-times"], [215, "computation-times"], [238, "computation-times"], [274, "computation-times"], [271, "computation-times"], [223, "computation-times"], [247, "computation-times"], [163, "computation-times"], [147, "computation-times"], [159, "computation-times"], [170, "computation-times"], [173, "computation-times"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Plot individual and voting regression predictions": [[132, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[132, "training-classifiers"]], "Making predictions": [[132, "making-predictions"]], "Compare cross decomposition methods": [[84, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[84, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[84, "canonical-symmetric-pls"]], "Transform data": [[84, "transform-data"]], "Scatter plot of scores": [[84, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[84, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[84, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[84, "cca-pls-mode-b-with-symmetric-deflation"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Plot randomly generated classification dataset": [[90, "plot-randomly-generated-classification-dataset"]], "Covariance estimation": [[76, "covariance-estimation"], [164, "covariance-estimation"], [391, "covariance-estimation"]], "IsolationForest example": [[125, "isolationforest-example"]], "Hashing feature transformation using Totally Random Trees": [[127, "hashing-feature-transformation-using-totally-random-trees"]], "Tutorial exercises": [[134, "tutorial-exercises"], [164, "tutorial-exercises"]], "Incremental PCA": [[99, "incremental-pca"], [394, "incremental-pca"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Plot the figures": [[101, "plot-the-figures"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [172, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Plotting the results": [[111, "plotting-the-results"], [109, "plotting-the-results"], [63, "plotting-the-results"]], "Robust vs Empirical covariance estimate": [[80, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[80, "minimum-covariance-determinant-estimator"]], "Evaluation": [[80, "evaluation"], [294, "evaluation"]], "References": [[80, "references"], [113, "references"], [5, null], [11, "references"], [25, "references"], [27, "references"], [962, null], [959, null], [965, null], [965, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [942, "references"], [288, "references"], [255, null], [184, null], [172, "references"], [397, null], [399, "references"], [360, null], [360, null], [360, null], [362, null], [362, null], [362, null], [362, null], [362, null], [362, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null]], "Plot randomly generated multilabel dataset": [[91, "plot-randomly-generated-multilabel-dataset"]], "Beta-divergence loss functions": [[94, "beta-divergence-loss-functions"]], "Monotonic Constraints": [[126, "monotonic-constraints"], [396, "monotonic-constraints"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Load the data": [[123, "load-the-data"], [50, "load-the-data"], [7, "load-the-data"]], "Data preprocessing": [[123, "data-preprocessing"]], "Fit regression model": [[123, "fit-regression-model"], [287, "fit-regression-model"], [331, "fit-regression-model"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Robust covariance estimation and Mahalanobis distances relevance": [[79, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[79, null], [952, null], [952, null], [952, null], [952, null], [952, null], [952, null], [952, null], [952, null], [958, null], [958, null], [958, null], [958, null], [941, null], [941, null], [946, null], [956, null], [962, null], [962, null], [967, null], [964, null], [964, null], [964, null], [945, null], [944, null], [950, null], [950, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [953, null], [953, null], [953, null], [966, null], [966, null], [957, null], [954, null], [954, null], [954, null], [955, null], [955, null], [955, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [960, null], [968, null], [968, null], [260, null], [261, null], [168, null], [397, null], [398, null], [360, null], [386, null], [386, null], [386, null], [391, null], [391, null], [391, null], [391, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [387, null], [393, null], [393, null], [359, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null]], "Generate data": [[79, "generate-data"], [66, "generate-data"], [47, "generate-data"], [294, "generate-data"], [190, "generate-data"]], "Comparison of results": [[79, "comparison-of-results"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Concluding remarks": [[109, "concluding-remarks"], [4, "concluding-remarks"], [221, "concluding-remarks"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Early stopping of Gradient Boosting": [[120, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[120, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[120, "compare-fit-times-with-and-without-early-stopping"]], "SVM Exercise": [[138, "svm-exercise"]], "Cross-validation on diabetes Dataset Exercise": [[135, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[135, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[135, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[135, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Plot the decision boundaries of a VotingClassifier": [[130, "plot-the-decision-boundaries-of-a-votingclassifier"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Pipelining: chaining a PCA and a logistic regression": [[72, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "The Digit Dataset": [[88, "the-digit-dataset"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Cross-validation on Digits Dataset Exercise": [[136, "cross-validation-on-digits-dataset-exercise"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "Concatenating multiple feature extraction methods": [[73, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[74, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[74, "synthetic-example"]], "Real-world data set": [[74, "real-world-data-set"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Dataset examples": [[87, "dataset-examples"], [164, "dataset-examples"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [394, "sparse-coding-with-a-precomputed-dictionary"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot classification probability": [[30, "plot-classification-probability"]], "A demo of K-Means clustering on the handwritten digits data": [[57, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[57, "load-the-dataset"]], "Define our evaluation benchmark": [[57, "define-our-evaluation-benchmark"]], "Run the benchmark": [[57, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[57, "visualize-the-results-on-pca-reduced-data"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Classifier comparison": [[31, "classifier-comparison"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"], [180, "plot"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[59, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Pipelines and composite estimators": [[68, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"], [390, "pipelines-and-composite-estimators"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [324, "visualization"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Clustering": [[36, "clustering"], [164, "clustering"], [389, "clustering"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "An example of K-Means++ initialization": [[58, "an-example-of-k-means-initialization"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Classification": [[29, "classification"], [32, "classification"], [985, "classification"], [956, "classification"], [967, "classification"], [948, "classification"], [966, "classification"], [955, "id4"], [968, "classification"], [164, "classification"], [396, "classification"], [396, "id18"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Spectral clustering for image segmentation": [[65, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[65, "plotting-four-circles"]], "Plotting two circles": [[65, "plotting-two-circles"]], "Biclustering": [[18, "biclustering"], [164, "biclustering"], [386, "biclustering"], [361, "biclustering"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [175, "generate-synthetic-dataset"], [175, "id1"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [994, "authors"], [994, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [378, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Calibration": [[23, "calibration"], [164, "calibration"]], "Comparing different hierarchical linkage methods on toy datasets": [[61, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [261, "dataset"], [185, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [387, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [954, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [339, "summary"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Demo of OPTICS clustering algorithm": [[64, "demo-of-optics-clustering-algorithm"]], "Hierarchical clustering: structured vs unstructured ward": [[66, "hierarchical-clustering-structured-vs-unstructured-ward"]], "Compute clustering": [[66, "compute-clustering"], [66, "id1"], [47, "compute-clustering"]], "Plot result": [[66, "plot-result"], [66, "id2"], [49, "plot-result"], [62, "plot-result"], [38, "plot-result"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[66, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Column Transformer with Heterogeneous Data Sources": [[69, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[69, "newsgroups-dataset"]], "Creating transformers": [[69, "creating-transformers"]], "Classification pipeline": [[69, "classification-pipeline"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Feature agglomeration": [[51, "feature-agglomeration"], [969, "feature-agglomeration"], [986, "feature-agglomeration"]], "Inductive Clustering": [[55, "inductive-clustering"]], "A demo of the mean-shift clustering algorithm": [[62, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[62, "compute-clustering-with-meanshift"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Prediction Latency": [[10, "prediction-latency"], [352, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [185, "conclusion"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[63, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Compute clustering with KMeans": [[63, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[63, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[63, "establishing-parity-between-clusters"]], "Column Transformer with Mixed Types": [[70, "column-transformer-with-mixed-types"]], "Empirical evaluation of the impact of k-means initialization": [[60, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Demonstration of k-means assumptions": [[56, "demonstration-of-k-means-assumptions"]], "sklearn.utils.safe_sqr": [[925, "sklearn-utils-safe-sqr"]], "Metrics and scoring: quantifying the quality of predictions": [[952, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[952, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[952, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[952, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[952, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[952, "using-multiple-metric-evaluation"]], "Classification metrics": [[952, "classification-metrics"], [388, "classification-metrics"]], "From binary to multiclass and multilabel": [[952, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[952, "accuracy-score"]], "Example:": [[952, null], [952, null], [952, null], [952, null], [952, null], [952, null], [952, null], [985, null], [964, null]], "Top-k accuracy score": [[952, "top-k-accuracy-score"]], "Balanced accuracy score": [[952, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[952, "cohen-s-kappa"]], "Confusion matrix": [[952, "confusion-matrix"], [249, "confusion-matrix"]], "Classification report": [[952, "classification-report"]], "Hamming loss": [[952, "hamming-loss"]], "Precision, recall and F-measures": [[952, "precision-recall-and-f-measures"]], "Examples:": [[952, null], [952, null], [952, null], [952, null], [952, null], [958, null], [958, null], [958, null], [958, null], [958, null], [958, null], [941, null], [941, null], [941, null], [946, null], [946, null], [946, null], [951, null], [951, null], [951, null], [951, null], [956, null], [956, null], [962, null], [962, null], [959, null], [967, null], [967, null], [967, null], [967, null], [967, null], [967, null], [947, null], [944, null], [944, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [948, null], [953, null], [991, null], [966, null], [966, null], [957, null], [955, null], [955, null], [955, null], [955, null], [955, null], [949, null], [960, null], [968, null], [968, null], [968, null], [968, null], [398, null], [398, null], [398, null], [398, null], [386, null], [386, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [395, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [394, null], [392, null], [387, null], [390, null], [390, null], [390, null], [390, null], [390, null], [359, null], [379, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null], [389, null]], "Binary classification": [[952, "binary-classification"]], "Multiclass and multilabel classification": [[952, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[952, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[952, "hinge-loss"]], "Log loss": [[952, "log-loss"]], "Matthews correlation coefficient": [[952, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[952, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[952, "receiver-operating-characteristic-roc"]], "Binary case": [[952, "binary-case"]], "Multi-class case": [[952, "multi-class-case"]], "Multi-label case": [[952, "multi-label-case"]], "Detection error tradeoff (DET)": [[952, "detection-error-tradeoff-det"]], "Zero one loss": [[952, "zero-one-loss"]], "Brier score loss": [[952, "brier-score-loss"]], "Class likelihood ratios": [[952, "class-likelihood-ratios"]], "Multilabel ranking metrics": [[952, "multilabel-ranking-metrics"], [388, "multilabel-ranking-metrics"]], "Coverage error": [[952, "coverage-error"]], "Label ranking average precision": [[952, "label-ranking-average-precision"]], "Ranking loss": [[952, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[952, "normalized-discounted-cumulative-gain"]], "Regression metrics": [[952, "regression-metrics"], [388, "regression-metrics"]], "R\u00b2 score, the coefficient of determination": [[952, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[952, "mean-absolute-error"]], "Mean squared error": [[952, "mean-squared-error"]], "Mean squared logarithmic error": [[952, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[952, "mean-absolute-percentage-error"]], "Median absolute error": [[952, "median-absolute-error"]], "Max error": [[952, "max-error"]], "Explained variance score": [[952, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[952, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[952, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[952, "pinball-loss"]], "D\u00b2 score": [[952, "d2-score"]], "D\u00b2 Tweedie score": [[952, "d2-tweedie-score"]], "D\u00b2 pinball score": [[952, "d2-pinball-score"]], "D\u00b2 absolute error score": [[952, "d2-absolute-error-score"]], "Clustering metrics": [[952, "clustering-metrics"], [388, "clustering-metrics"]], "Dummy estimators": [[952, "dummy-estimators"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[930, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "Model selection: choosing estimators and their parameters": [[982, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[982, "score-and-cross-validated-scores"]], "Cross-validation generators": [[982, "cross-validation-generators"]], "Exercise": [[982, null], [982, null], [985, null], [985, null]], "Grid-search and cross-validated estimators": [[982, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[982, "grid-search"]], "Nested cross-validation": [[982, null]], "Cross-validated estimators": [[982, "cross-validated-estimators"]], "A tutorial on statistical-learning for scientific data processing": [[981, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[981, null]], "sklearn.utils.validation.check_is_fitted": [[936, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[936, "examples-using-sklearn-utils-validation-check-is-fitted"]], "External Resources, Videos and Talks": [[971, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[971, "new-to-scientific-python"]], "External Tutorials": [[971, "external-tutorials"]], "Videos": [[971, "videos"]], "Who is using scikit-learn?": [[976, "who-is-using-scikit-learn"]], "J.P.Morgan": [[976, "id1"]], "Spotify": [[976, "id2"]], "Inria": [[976, "id3"]], "betaworks": [[976, "id4"]], "Hugging Face": [[976, "id5"]], "Evernote": [[976, "id6"]], "T\u00e9l\u00e9com ParisTech": [[976, "id7"]], "Booking.com": [[976, "id8"]], "AWeber": [[976, "id9"]], "Yhat": [[976, "id10"]], "Rangespan": [[976, "id11"]], "Birchbox": [[976, "id12"]], "Bestofmedia Group": [[976, "id13"]], "Change.org": [[976, "id14"]], "PHIMECA Engineering": [[976, "id15"]], "HowAboutWe": [[976, "id16"]], "PeerIndex": [[976, "id17"]], "DataRobot": [[976, "id18"]], "OkCupid": [[976, "id19"]], "Lovely": [[976, "id20"]], "Data Publica": [[976, "id21"]], "Machinalis": [[976, "id22"]], "solido": [[976, "id23"]], "INFONEA": [[976, "id24"]], "Dataiku": [[976, "id25"]], "Otto Group": [[976, "id26"]], "Zopa": [[976, "id27"]], "MARS": [[976, "id28"]], "BNP Paribas Cardif": [[976, "id29"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[931, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "Novelty and Outlier Detection": [[958, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[958, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[958, "novelty-detection"]], "Scaling up the One-Class SVM": [[958, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[958, "id1"]], "Fitting an elliptic envelope": [[958, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[958, "isolation-forest"]], "Local Outlier Factor": [[958, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[958, "novelty-detection-with-local-outlier-factor"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[985, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[985, null]], "Vocabulary: classification and regression": [[985, null]], "Nearest neighbor and the curse of dimensionality": [[985, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[985, null]], "k-Nearest neighbors classifier": [[985, "k-nearest-neighbors-classifier"]], "Training set and testing set": [[985, null], [978, null]], "The curse of dimensionality": [[985, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[985, "linear-model-from-regression-to-sparsity"]], "Diabetes dataset": [[985, null], [362, "diabetes-dataset"]], "Linear regression": [[985, "linear-regression"]], "Shrinkage": [[985, "shrinkage"]], "Sparsity": [[985, "sparsity"], [397, "sparsity"]], "Different algorithms for the same problem": [[985, null]], "Multiclass classification": [[985, null], [953, "multiclass-classification"]], "Shrinkage and sparsity with logistic regression": [[985, null]], "Support vector machines (SVMs)": [[985, "support-vector-machines-svms"]], "Linear SVMs": [[985, "linear-svms"]], "Using kernels": [[985, "using-kernels"]], "Linear kernel": [[985, "linear-kernel"], [950, "linear-kernel"]], "Polynomial kernel": [[985, "polynomial-kernel"], [950, "polynomial-kernel"]], "RBF kernel (Radial Basis Function)": [[985, "rbf-kernel-radial-basis-function"]], "Interactive example": [[985, null]], "An introduction to machine learning with scikit-learn": [[978, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[978, null]], "Machine learning: the problem setting": [[978, "machine-learning-the-problem-setting"]], "Loading an example dataset": [[978, "loading-an-example-dataset"]], "Shape of the data arrays": [[978, null]], "Loading from external datasets": [[978, null], [359, "loading-from-external-datasets"]], "Learning and predicting": [[978, "learning-and-predicting"]], "Choosing the parameters of the model": [[978, null]], "Conventions": [[978, "conventions"]], "Type casting": [[978, "type-casting"]], "Refitting and updating parameters": [[978, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[978, "multiclass-vs-multilabel-fitting"]], "User Guide": [[989, "user-guide"]], "Unsupervised learning": [[988, "unsupervised-learning"]], "Tuning the hyper-parameters of an estimator": [[941, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[941, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[941, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[941, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[941, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[941, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[941, "choosing-a-resource"]], "Exhausting the available resources": [[941, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[941, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[941, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[941, "tips-for-parameter-search"]], "Specifying an objective metric": [[941, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[941, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[941, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[941, "model-selection-development-and-evaluation"]], "Parallelism": [[941, "parallelism"], [353, "parallelism"]], "Robustness to failure": [[941, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[941, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[941, "model-specific-cross-validation"]], "Information Criterion": [[941, "information-criterion"]], "Out of Bag Estimates": [[941, "out-of-bag-estimates"]], "Linear and Quadratic Discriminant Analysis": [[946, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[946, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[946, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[946, "qda"]], "LDA": [[946, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[946, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[946, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[946, "estimation-algorithms"]], "Gaussian mixture models": [[951, "gaussian-mixture-models"]], "Gaussian Mixture": [[951, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[951, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[951, "pros"], [951, "id2"]], "Cons": [[951, "cons"], [951, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[951, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[951, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[951, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[951, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[951, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[951, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[951, "the-dirichlet-process"]], "Neural network models (supervised)": [[956, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[956, "multi-layer-perceptron"]], "Regression": [[956, "regression"], [967, "regression"], [948, "regression"], [966, "regression"], [968, "regression"], [396, "regression"], [396, "id17"]], "Regularization": [[956, "regularization"]], "Algorithms": [[956, "algorithms"]], "Complexity": [[956, "complexity"], [967, "complexity"], [966, "complexity"], [955, "complexity"], [949, "complexity"], [949, "id3"], [949, "id4"], [949, "id5"], [949, "id7"], [949, "id8"], [968, "complexity"]], "Mathematical formulation": [[956, "mathematical-formulation"], [967, "mathematical-formulation"], [948, "mathematical-formulation"], [966, "mathematical-formulation"], [955, "mathematical-formulation"], [968, "mathematical-formulation"], [386, "mathematical-formulation"], [386, "id3"], [396, "mathematical-formulation"], [389, "mathematical-formulation"], [389, "id12"], [389, "id19"], [389, "id29"], [389, "id33"]], "Tips on Practical Use": [[956, "tips-on-practical-use"], [967, "tips-on-practical-use"], [966, "tips-on-practical-use"]], "More control with warm_start": [[956, "more-control-with-warm-start"]], "Preprocessing data": [[962, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[962, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[962, "scaling-features-to-a-range"]], "Scaling sparse data": [[962, "scaling-sparse-data"]], "Scaling data with outliers": [[962, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[962, null]], "Centering kernel matrices": [[962, "centering-kernel-matrices"]], "Non-linear transformation": [[962, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[962, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[962, "mapping-to-a-gaussian-distribution"]], "Normalization": [[962, "normalization"]], "Sparse input": [[962, null], [962, null]], "Encoding categorical features": [[962, "encoding-categorical-features"]], "Infrequent categories": [[962, "infrequent-categories"]], "Discretization": [[962, "discretization"]], "K-bins discretization": [[962, "k-bins-discretization"]], "Feature binarization": [[962, "feature-binarization"]], "Imputation of missing values": [[962, "imputation-of-missing-values"], [942, "imputation-of-missing-values"]], "Generating polynomial features": [[962, "generating-polynomial-features"]], "Polynomial features": [[962, "polynomial-features"]], "Spline transformer": [[962, "spline-transformer"]], "Custom transformers": [[962, "custom-transformers"]], "Related Projects": [[972, "related-projects"]], "Interoperability and framework enhancements": [[972, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[972, "other-estimators-and-tasks"]], "Statistical learning with Python": [[972, "statistical-learning-with-python"]], "Recommendation Engine packages": [[972, "recommendation-engine-packages"]], "Domain specific packages": [[972, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[972, "translations-of-scikit-learn-documentation"]], "Partial Dependence and Individual Conditional Expectation plots": [[959, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[959, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[959, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[959, "mathematical-definition"]], "Computation methods": [[959, "computation-methods"]], "sklearn.utils.resample": [[923, "sklearn-utils-resample"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[932, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[927, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[933, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.validation.check_symmetric": [[938, "sklearn-utils-validation-check-symmetric"]], "Support Vector Machines": [[967, "support-vector-machines"], [319, "support-vector-machines"], [164, "support-vector-machines"]], "Multi-class classification": [[967, "multi-class-classification"]], "Scores and probabilities": [[967, "scores-and-probabilities"]], "Unbalanced problems": [[967, "unbalanced-problems"]], "Density estimation, novelty detection": [[967, "density-estimation-novelty-detection"]], "Kernel functions": [[967, "kernel-functions"]], "Parameters of the RBF Kernel": [[967, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[967, "custom-kernels"]], "Using Python functions as kernels": [[967, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[967, "using-the-gram-matrix"]], "SVC": [[967, "svc"]], "LinearSVC": [[967, "linearsvc"]], "NuSVC": [[967, "nusvc"]], "SVR": [[967, "svr"]], "LinearSVR": [[967, "linearsvr"]], "Implementation details": [[967, "implementation-details"], [966, "implementation-details"], [397, "implementation-details"]], "Support": [[975, "support"]], "Mailing List": [[975, "mailing-list"]], "User questions": [[975, "user-questions"]], "Bug tracker": [[975, "bug-tracker"]], "Gitter": [[975, "gitter"]], "Documentation resources": [[975, "documentation-resources"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[984, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[984, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[984, null]], "An example of reshaping data would be the digits dataset": [[984, null]], "Estimators objects": [[984, "estimators-objects"]], "Validation curves: plotting scores to evaluate models": [[947, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[947, "validation-curve"]], "Learning curve": [[947, "learning-curve"]], "Random Projection": [[964, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[964, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[964, "gaussian-random-projection"]], "Sparse random projection": [[964, "sparse-random-projection"]], "Inverse Transform": [[964, "inverse-transform"]], "Semi-supervised learning": [[965, "semi-supervised-learning"], [312, "semi-supervised-learning"]], "Unlabeled entries in y": [[965, null]], "Self Training": [[965, "self-training"]], "Examples": [[965, null], [965, null], [969, null], [969, null], [969, null], [994, "examples"], [354, "examples"], [164, "examples"], [398, null], [398, null], [360, null], [360, "examples"], [393, null], [393, null]], "Label Propagation": [[965, "label-propagation"]], "Available documentation for Scikit-learn": [[990, "available-documentation-for-scikit-learn"]], "sklearn.utils.validation.check_memory": [[937, "sklearn-utils-validation-check-memory"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[928, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "Kernel ridge regression": [[945, "kernel-ridge-regression"]], "Welcome to scikit-learn": [[970, "welcome-to-scikit-learn"]], "Kernel Approximation": [[944, "kernel-approximation"], [171, "kernel-approximation"], [164, "kernel-approximation"]], "Nystroem Method for Kernel Approximation": [[944, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[944, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[944, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[944, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[944, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[944, "mathematical-details"]], "Unsupervised dimensionality reduction": [[969, "unsupervised-dimensionality-reduction"]], "Pipelining": [[969, null], [983, "pipelining"]], "PCA: principal component analysis": [[969, "pca-principal-component-analysis"]], "Random projections": [[969, "random-projections"]], "Feature scaling": [[969, null]], "Pairwise metrics, Affinities and Kernels": [[950, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[950, "cosine-similarity"]], "Sigmoid kernel": [[950, "sigmoid-kernel"]], "RBF kernel": [[950, "rbf-kernel"]], "Laplacian kernel": [[950, "laplacian-kernel"]], "Chi-squared kernel": [[950, "chi-squared-kernel"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[929, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "Linear Models": [[948, "linear-models"]], "Ordinary Least Squares": [[948, "ordinary-least-squares"]], "Non-Negative Least Squares": [[948, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[948, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[948, "ridge-regression-and-classification"]], "Ridge Complexity": [[948, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[948, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Lasso": [[948, "lasso"], [180, "lasso"]], "Setting regularization parameter": [[948, "setting-regularization-parameter"]], "Using cross-validation": [[948, "using-cross-validation"]], "Information-criteria based model selection": [[948, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[948, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[948, "multi-task-lasso"]], "Elastic-Net": [[948, "elastic-net"]], "Multi-task Elastic-Net": [[948, "multi-task-elastic-net"]], "Least Angle Regression": [[948, "least-angle-regression"]], "LARS Lasso": [[948, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[948, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[948, "bayesian-regression"]], "Bayesian Ridge Regression": [[948, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[948, "automatic-relevance-determination-ard"]], "Logistic regression": [[948, "logistic-regression"]], "Binary Case": [[948, "binary-case"]], "Multinomial Case": [[948, "multinomial-case"]], "Solvers": [[948, "solvers"]], "Differences from liblinear:": [[948, "liblinear-differences"]], "Generalized Linear Regression": [[948, "generalized-linear-regression"]], "Usage": [[948, "usage"], [360, "usage"], [360, "id2"], [387, "usage"], [390, "usage"], [390, "id1"], [396, "usage"], [396, "id26"], [396, "id30"], [396, "id31"], [396, "id33"]], "Practical considerations": [[948, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[948, "stochastic-gradient-descent-sgd"]], "Perceptron": [[948, "perceptron"]], "Passive Aggressive Algorithms": [[948, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[948, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[948, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[948, null]], "RANSAC: RANdom SAmple Consensus": [[948, "ransac-random-sample-consensus"]], "Details of the algorithm": [[948, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[948, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[948, "theoretical-considerations"]], "Huber Regression": [[948, "huber-regression"]], "Notes": [[948, "notes"], [354, "notes"], [390, "notes"]], "Quantile Regression": [[948, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[948, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Multiclass and multioutput algorithms": [[953, "multiclass-and-multioutput-algorithms"]], "Target format": [[953, "target-format"], [953, "id5"], [953, "id8"], [953, "id10"]], "OneVsRestClassifier": [[953, "onevsrestclassifier"]], "OneVsOneClassifier": [[953, "onevsoneclassifier"]], "OutputCodeClassifier": [[953, "outputcodeclassifier"]], "Multilabel classification": [[953, "multilabel-classification"], [232, "multilabel-classification"]], "MultiOutputClassifier": [[953, "multioutputclassifier"]], "ClassifierChain": [[953, "classifierchain"]], "Multiclass-multioutput classification": [[953, "multiclass-multioutput-classification"]], "Multioutput regression": [[953, "multioutput-regression"]], "MultiOutputRegressor": [[953, "multioutputregressor"]], "RegressorChain": [[953, "regressorchain"]], "Visualizations": [[991, "visualizations"]], "Available Plotting Utilities": [[991, "available-plotting-utilities"]], "Display Objects": [[991, "display-objects"]], "Release History": [[992, "release-history"]], "Putting it all together": [[983, "putting-it-all-together"]], "Face recognition with eigenfaces": [[983, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[983, "open-problem-stock-market-structure"]], "Stochastic Gradient Descent": [[966, "stochastic-gradient-descent"]], "Online One-Class SVM": [[966, "online-one-class-svm"], [308, "online-one-class-svm"]], "Stochastic Gradient Descent for sparse data": [[966, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[966, "stopping-criterion"]], "SGD": [[966, "id5"]], "sklearn.utils.safe_mask": [[924, "sklearn-utils-safe-mask"]], "Neural network models (unsupervised)": [[957, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[957, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[957, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[957, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[957, "stochastic-maximum-likelihood-learning"]], "Transforming the prediction target (y)": [[963, "transforming-the-prediction-target-y"]], "Label binarization": [[963, "label-binarization"]], "LabelBinarizer": [[963, "labelbinarizer"]], "MultiLabelBinarizer": [[963, "multilabelbinarizer"]], "Label encoding": [[963, "label-encoding"]], "Roadmap": [[973, "id1"]], "Purpose of this document": [[973, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[973, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[973, "architectural-general-goals"]], "Subpackage-specific goals": [[973, "subpackage-specific-goals"]], "Naive Bayes": [[954, "naive-bayes"]], "Multinomial Naive Bayes": [[954, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[954, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[954, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[954, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[954, "out-of-core-naive-bayes-model-fitting"]], "scikit-learn Tutorials": [[979, "scikit-learn-tutorials"]], "Nearest Neighbors": [[955, "nearest-neighbors"], [276, "nearest-neighbors"], [164, "nearest-neighbors"]], "Unsupervised Nearest Neighbors": [[955, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[955, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[955, "kdtree-and-balltree-classes"]], "Nearest Neighbors Classification": [[955, "nearest-neighbors-classification"], [278, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[955, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[955, "nearest-neighbor-algorithms"]], "Brute Force": [[955, "brute-force"]], "K-D Tree": [[955, "k-d-tree"]], "Ball Tree": [[955, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[955, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[955, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[955, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[955, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[955, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[955, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[955, "neighborhood-components-analysis"]], "Dimensionality reduction": [[955, "dimensionality-reduction"]], "Mahalanobis distance": [[955, "mahalanobis-distance"]], "Implementation": [[955, "implementation"], [389, null]], "Training": [[955, "training"], [294, "training"]], "Transform": [[955, "transform"]], "Supervised learning": [[974, "supervised-learning"]], "Unsupervised learning: seeking representations of the data": [[986, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[986, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[986, null]], "K-means clustering": [[986, "k-means-clustering"]], "Application example: vector quantization": [[986, null]], "Hierarchical agglomerative clustering: Ward": [[986, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[986, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[986, null]], "Decompositions: from a signal to components and loadings": [[986, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[986, null]], "Principal component analysis: PCA": [[986, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[986, "independent-component-analysis-ica"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[934, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "Manifold learning": [[949, "manifold-learning"], [216, "manifold-learning"], [164, "manifold-learning"]], "Introduction": [[949, "introduction"]], "Isomap": [[949, "isomap"]], "Locally Linear Embedding": [[949, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[949, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[949, "hessian-eigenmapping"]], "Spectral Embedding": [[949, "spectral-embedding"]], "Local Tangent Space Alignment": [[949, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[949, "multi-dimensional-scaling-mds"]], "Metric MDS": [[949, "metric-mds"]], "Nonmetric MDS": [[949, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[949, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[949, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[949, "barnes-hut-t-sne"]], "Tips on practical use": [[949, "tips-on-practical-use"], [968, "tips-on-practical-use"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[935, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.column_or_1d": [[939, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[940, "sklearn-utils-validation-has-fit-parameter"]], "Permutation feature importance": [[960, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[960, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[960, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[960, "misleading-values-on-strongly-correlated-features"]], "Decision Trees": [[968, "decision-trees"], [341, "decision-trees"], [164, "decision-trees"]], "Multi-output problems": [[968, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[968, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[968, "classification-criteria"]], "Regression criteria": [[968, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[968, "minimal-cost-complexity-pruning"]], "Choosing the right estimator": [[980, "choosing-the-right-estimator"]], "sklearn.utils.shuffle": [[926, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[926, "examples-using-sklearn-utils-shuffle"]], "Isotonic regression": [[943, "isotonic-regression"]], "Univariate vs. Multivariate Imputation": [[942, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[942, "univariate-feature-imputation"]], "Multivariate feature imputation": [[942, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[942, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[942, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[942, "nearest-neighbors-imputation"]], "Marking imputed values": [[942, "marking-imputed-values"]], "Estimators that handle NaN values": [[942, "estimators-that-handle-nan-values"]], "Working With Text Data": [[987, "working-with-text-data"]], "Tutorial setup": [[987, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[987, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[987, "extracting-features-from-text-files"]], "Bags of words": [[987, "bags-of-words"]], "Tokenizing text with scikit-learn": [[987, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[987, "from-occurrences-to-frequencies"]], "Training a classifier": [[987, "training-a-classifier"]], "Building a pipeline": [[987, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[987, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[987, "parameter-tuning-using-grid-search"]], "Exercises": [[987, "exercises"]], "Exercise 1: Language identification": [[987, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[987, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[987, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[987, "where-to-from-here"]], "Version 0.15.2": [[997, "version-0-15-2"]], "Bug fixes": [[997, "bug-fixes"], [997, "id1"], [997, "id2"], [999, "bug-fixes"], [999, "id2"], [1000, "bug-fixes"], [1000, "id4"], [1001, "bug-fixes"], [1001, "id3"], [998, "bug-fixes"], [998, "id2"]], "Version 0.15.1": [[997, "version-0-15-1"]], "Version 0.15": [[997, "version-0-15"]], "Highlights": [[997, "highlights"], [1002, "highlights"], [994, "highlights"], [1001, "highlights"], [998, "highlights"]], "Changelog": [[997, "changelog"], [1002, "changelog"], [1002, "id1"], [1002, "id5"], [1002, "id10"], [1002, "id23"], [995, "changelog"], [995, "id1"], [999, "changelog"], [999, "id1"], [1008, "changelog"], [1008, "id1"], [1008, "id7"], [1003, "changelog"], [1003, "id1"], [1003, "id2"], [1003, "id7"], [1005, "changelog"], [1005, "id1"], [1005, "id4"], [994, "changelog"], [994, "id1"], [994, "id3"], [994, "id6"], [994, "id9"], [994, "id12"], [994, "id14"], [994, "id16"], [994, "id18"], [994, "id19"], [1009, "changelog"], [996, "changelog"], [1007, "changelog"], [1007, "id1"], [1007, "id7"], [1000, "changelog"], [1000, "id1"], [1000, "id2"], [1001, "changelog"], [1001, "id1"], [1004, "changelog"], [1004, "id1"], [1004, "id4"], [1006, "changelog"], [1006, "id1"], [1006, "id4"], [998, "changelog"], [998, "id1"]], "New features": [[997, "new-features"], [999, "new-features"], [1000, "new-features"], [1001, "new-features"], [998, "new-features"]], "Enhancements": [[997, "enhancements"], [999, "enhancements"], [1000, "enhancements"], [1000, "id3"], [1001, "enhancements"], [1001, "id2"], [998, "enhancements"]], "Documentation improvements": [[997, "documentation-improvements"], [998, "documentation-improvements"]], "API changes summary": [[997, "api-changes-summary"], [995, "api-changes-summary"], [999, "api-changes-summary"], [994, "api-changes-summary"], [994, "id4"], [994, "id7"], [994, "id10"], [996, "api-changes-summary"], [1000, "api-changes-summary"], [1000, "id5"], [1001, "api-changes-summary"], [998, "api-changes-summary"]], "People": [[997, "people"], [995, "people"], [995, "id2"], [994, "people"], [994, "id2"], [994, "id5"], [994, "id8"], [994, "id11"], [994, "id13"], [994, "id15"], [994, "id17"], [996, "people"]], "Version 0.20.4": [[1002, "version-0-20-4"]], "sklearn.cluster": [[1002, "sklearn-cluster"], [1002, "id2"], [1002, "id11"], [1002, "id24"], [1008, "sklearn-cluster"], [1008, "id8"], [1003, "sklearn-cluster"], [1003, "id8"], [1005, "sklearn-cluster"], [1005, "id2"], [1005, "id5"], [1009, "sklearn-cluster"], [1007, "sklearn-cluster"], [1007, "id2"], [1007, "id9"], [1004, "sklearn-cluster"], [1004, "id5"], [1006, "sklearn-cluster"]], "sklearn.compose": [[1002, "sklearn-compose"], [1002, "id3"], [1002, "id6"], [1002, "id12"], [1002, "id25"], [1008, "sklearn-compose"], [1003, "sklearn-compose"], [1003, "id9"], [1005, "sklearn-compose"], [1007, "sklearn-compose"], [1004, "sklearn-compose"], [1006, "sklearn-compose"], [1006, "id5"]], "sklearn.decomposition": [[1002, "sklearn-decomposition"], [1002, "id4"], [1002, "id14"], [1002, "id28"], [1008, "sklearn-decomposition"], [1008, "id10"], [1003, "sklearn-decomposition"], [1003, "id11"], [1005, "sklearn-decomposition"], [1005, "id6"], [1009, "sklearn-decomposition"], [1007, "sklearn-decomposition"], [1007, "id11"], [1004, "sklearn-decomposition"], [1006, "sklearn-decomposition"], [1006, "id7"]], "sklearn.model_selection": [[1002, "sklearn-model-selection"], [1002, "id35"], [1008, "sklearn-model-selection"], [1003, "sklearn-model-selection"], [1005, "sklearn-model-selection"], [1009, "sklearn-model-selection"], [1007, "sklearn-model-selection"], [1004, "sklearn-model-selection"], [1004, "id9"], [1004, "id13"], [1006, "sklearn-model-selection"], [1006, "id12"]], "sklearn.neighbors": [[1002, "sklearn-neighbors"], [1002, "id7"], [1002, "id18"], [1002, "id36"], [1008, "sklearn-neighbors"], [1003, "sklearn-neighbors"], [1003, "id5"], [1003, "id17"], [1009, "sklearn-neighbors"], [1007, "sklearn-neighbors"], [1007, "id5"], [1007, "id18"], [1004, "sklearn-neighbors"], [1004, "id11"], [1006, "sklearn-neighbors"]], "Version 0.20.3": [[1002, "version-0-20-3"]], "sklearn.covariance": [[1002, "sklearn-covariance"], [1002, "id26"], [1008, "sklearn-covariance"], [1007, "sklearn-covariance"], [1006, "sklearn-covariance"]], "sklearn.datasets": [[1002, "sklearn-datasets"], [1002, "id13"], [1002, "id27"], [1008, "sklearn-datasets"], [1008, "id9"], [1003, "sklearn-datasets"], [1003, "id10"], [1005, "sklearn-datasets"], [1009, "sklearn-datasets"], [1007, "sklearn-datasets"], [1007, "id10"], [1004, "sklearn-datasets"], [1006, "sklearn-datasets"]], "sklearn.feature_extraction": [[1002, "sklearn-feature-extraction"], [1002, "id15"], [1002, "id30"], [1008, "sklearn-feature-extraction"], [1003, "sklearn-feature-extraction"], [1005, "sklearn-feature-extraction"], [1005, "id8"], [1007, "sklearn-feature-extraction"], [1007, "id13"], [1004, "sklearn-feature-extraction"], [1006, "sklearn-feature-extraction"]], "sklearn.impute": [[1002, "sklearn-impute"], [1002, "id31"], [1008, "sklearn-impute"], [1008, "id12"], [1003, "sklearn-impute"], [1003, "id13"], [1005, "sklearn-impute"], [1007, "sklearn-impute"], [1004, "sklearn-impute"], [1004, "id6"], [1006, "sklearn-impute"]], "sklearn.linear_model": [[1002, "sklearn-linear-model"], [1002, "id16"], [1002, "id32"], [1008, "sklearn-linear-model"], [1008, "id13"], [1003, "sklearn-linear-model"], [1003, "id15"], [1005, "sklearn-linear-model"], [1005, "id9"], [1009, "sklearn-linear-model"], [1007, "sklearn-linear-model"], [1007, "id4"], [1007, "id15"], [1004, "sklearn-linear-model"], [1006, "sklearn-linear-model"], [1006, "id10"]], "sklearn.preprocessing": [[1002, "sklearn-preprocessing"], [1002, "id19"], [1002, "id37"], [1008, "sklearn-preprocessing"], [1008, "id4"], [1008, "id16"], [1003, "sklearn-preprocessing"], [1003, "id18"], [1005, "sklearn-preprocessing"], [1009, "sklearn-preprocessing"], [1007, "sklearn-preprocessing"], [1007, "id20"], [1004, "sklearn-preprocessing"], [1004, "id12"], [1006, "sklearn-preprocessing"], [1006, "id14"]], "sklearn.svm": [[1002, "sklearn-svm"], [1002, "id38"], [1008, "sklearn-svm"], [1003, "sklearn-svm"], [1005, "sklearn-svm"], [1009, "sklearn-svm"], [1007, "sklearn-svm"], [1007, "id21"], [1004, "sklearn-svm"], [1006, "sklearn-svm"]], "Code and Documentation Contributors": [[1002, "code-and-documentation-contributors"], [1002, "id8"], [1002, "id21"], [1002, "id41"], [1008, "code-and-documentation-contributors"], [1003, "code-and-documentation-contributors"], [1005, "code-and-documentation-contributors"], [1009, "code-and-documentation-contributors"], [1007, "code-and-documentation-contributors"], [1001, "code-and-documentation-contributors"], [1001, "id9"], [1004, "code-and-documentation-contributors"], [1006, "code-and-documentation-contributors"]], "Version 0.20.2": [[1002, "version-0-20-2"]], "Changed models": [[1002, "changed-models"], [1002, "id9"], [1002, "id22"], [1008, "changed-models"], [1008, "id6"], [1003, "changed-models"], [1003, "id6"], [1005, "changed-models"], [1005, "id3"], [1009, "changed-models"], [1007, "changed-models"], [1001, "changed-models"], [1004, "changed-models"], [1006, "changed-models"]], "sklearn.metrics": [[1002, "sklearn-metrics"], [1002, "id17"], [1002, "id33"], [1008, "sklearn-metrics"], [1008, "id3"], [1008, "id15"], [1003, "sklearn-metrics"], [1003, "id4"], [1003, "id16"], [1005, "sklearn-metrics"], [1005, "id10"], [1009, "sklearn-metrics"], [1007, "sklearn-metrics"], [1007, "id17"], [1004, "sklearn-metrics"], [1004, "id2"], [1004, "id8"], [1006, "sklearn-metrics"], [1006, "id2"], [1006, "id11"]], "sklearn.utils": [[1002, "sklearn-utils"], [1002, "id20"], [1002, "id39"], [1008, "sklearn-utils"], [1008, "id18"], [1003, "sklearn-utils"], [1005, "sklearn-utils"], [1005, "id12"], [1009, "sklearn-utils"], [1007, "sklearn-utils"], [1007, "id6"], [1007, "id23"], [1004, "sklearn-utils"], [1004, "id14"], [1006, "sklearn-utils"], [1006, "id17"]], "Version 0.20.1": [[1002, "version-0-20-1"]], "sklearn.ensemble": [[1002, "sklearn-ensemble"], [1002, "id29"], [1008, "sklearn-ensemble"], [1003, "sklearn-ensemble"], [1003, "id12"], [1005, "sklearn-ensemble"], [1005, "id7"], [1009, "sklearn-ensemble"], [1007, "sklearn-ensemble"], [1007, "id3"], [1007, "id12"], [1004, "sklearn-ensemble"], [1006, "sklearn-ensemble"], [1006, "id8"]], "sklearn.mixture": [[1002, "sklearn-mixture"], [1002, "id34"], [1008, "sklearn-mixture"], [1003, "sklearn-mixture"], [1007, "sklearn-mixture"]], "Miscellaneous": [[1002, "miscellaneous"], [1002, "id40"], [1003, "miscellaneous"], [1005, "miscellaneous"], [1005, "id13"], [1007, "miscellaneous"], [1004, "miscellaneous"], [1006, "miscellaneous"], [224, "miscellaneous"], [164, "miscellaneous"], [388, "miscellaneous"]], "Version 0.20.0": [[1002, "version-0-20-0"]], "Known Major Bugs": [[1002, "known-major-bugs"], [1003, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1002, "sklearn-discriminant-analysis"], [1008, "sklearn-discriminant-analysis"], [1003, "sklearn-discriminant-analysis"], [1009, "sklearn-discriminant-analysis"], [1006, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1002, "sklearn-dummy"], [1008, "sklearn-dummy"], [1003, "sklearn-dummy"], [1007, "sklearn-dummy"], [1004, "sklearn-dummy"]], "sklearn.feature_selection": [[1002, "sklearn-feature-selection"], [1008, "sklearn-feature-selection"], [1008, "id2"], [1008, "id11"], [1005, "sklearn-feature-selection"], [1009, "sklearn-feature-selection"], [1007, "sklearn-feature-selection"], [1007, "id14"], [1004, "sklearn-feature-selection"], [1006, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1002, "sklearn-gaussian-process"], [1008, "sklearn-gaussian-process"], [1005, "sklearn-gaussian-process"], [1009, "sklearn-gaussian-process"], [1007, "sklearn-gaussian-process"], [1004, "sklearn-gaussian-process"], [1006, "sklearn-gaussian-process"], [1006, "id9"]], "sklearn.isotonic": [[1002, "sklearn-isotonic"], [1008, "sklearn-isotonic"], [1003, "sklearn-isotonic"], [1004, "sklearn-isotonic"], [1006, "sklearn-isotonic"]], "sklearn.manifold": [[1002, "sklearn-manifold"], [1008, "sklearn-manifold"], [1008, "id14"], [1003, "sklearn-manifold"], [1005, "sklearn-manifold"], [1009, "sklearn-manifold"], [1007, "sklearn-manifold"], [1007, "id16"], [1004, "sklearn-manifold"], [1006, "sklearn-manifold"]], "sklearn.multioutput": [[1002, "sklearn-multioutput"], [1003, "sklearn-multioutput"], [1005, "sklearn-multioutput"], [1009, "sklearn-multioutput"], [1004, "sklearn-multioutput"], [1006, "sklearn-multioutput"], [1006, "id13"]], "sklearn.naive_bayes": [[1002, "sklearn-naive-bayes"], [1005, "sklearn-naive-bayes"], [1009, "sklearn-naive-bayes"], [1007, "sklearn-naive-bayes"], [1004, "sklearn-naive-bayes"], [1004, "id10"], [1006, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1002, "sklearn-neural-network"], [1008, "sklearn-neural-network"], [1003, "sklearn-neural-network"], [1005, "sklearn-neural-network"], [1007, "sklearn-neural-network"], [1004, "sklearn-neural-network"], [1006, "sklearn-neural-network"]], "sklearn.pipeline": [[1002, "sklearn-pipeline"], [1008, "sklearn-pipeline"], [1003, "sklearn-pipeline"], [1005, "sklearn-pipeline"], [1009, "sklearn-pipeline"], [1007, "sklearn-pipeline"], [1007, "id19"], [1004, "sklearn-pipeline"], [1006, "sklearn-pipeline"]], "sklearn.tree": [[1002, "sklearn-tree"], [1008, "sklearn-tree"], [1008, "id5"], [1008, "id17"], [1003, "sklearn-tree"], [1003, "id19"], [1005, "sklearn-tree"], [1009, "sklearn-tree"], [1007, "sklearn-tree"], [1007, "id22"], [1004, "sklearn-tree"], [1006, "sklearn-tree"], [1006, "id16"]], "Multiple modules": [[1002, "multiple-modules"], [1003, "multiple-modules"]], "Changes to estimator checks": [[1002, "changes-to-estimator-checks"], [1003, "changes-to-estimator-checks"], [1004, "changes-to-estimator-checks"]], "Version 0.13.1": [[995, "version-0-13-1"]], "Version 0.13": [[995, "version-0-13"]], "New Estimator Classes": [[995, "new-estimator-classes"]], "Version 0.17.1": [[999, "version-0-17-1"]], "Version 0.17": [[999, "version-0-17"]], "Code Contributors": [[999, "code-contributors"], [1000, "code-contributors"], [1000, "id6"], [998, "code-contributors"]], "Version 1.1.2": [[1008, "version-1-1-2"]], "sklearn.base": [[1008, "sklearn-base"], [1003, "sklearn-base"], [1007, "sklearn-base"], [1004, "sklearn-base"], [1006, "sklearn-base"]], "Version 1.1.1": [[1008, "version-1-1-1"]], "Version 1.1.0": [[1008, "version-1-1-0"]], "Legend for changelogs": [[1008, "legend-for-changelogs"], [1003, "legend-for-changelogs"], [1005, "legend-for-changelogs"], [1009, "legend-for-changelogs"], [1007, "legend-for-changelogs"], [1004, "legend-for-changelogs"], [1006, "legend-for-changelogs"]], "Minimal dependencies": [[1008, "minimal-dependencies"], [1007, "minimal-dependencies"]], "sklearn.calibration": [[1008, "sklearn-calibration"], [1003, "sklearn-calibration"], [1009, "sklearn-calibration"], [1007, "sklearn-calibration"], [1007, "id8"], [1004, "sklearn-calibration"], [1006, "sklearn-calibration"]], "sklearn.cross_decomposition": [[1008, "sklearn-cross-decomposition"], [1004, "sklearn-cross-decomposition"], [1006, "sklearn-cross-decomposition"], [1006, "id6"]], "sklearn.inspection": [[1008, "sklearn-inspection"], [1003, "sklearn-inspection"], [1003, "id3"], [1003, "id14"], [1005, "sklearn-inspection"], [1005, "id11"], [1007, "sklearn-inspection"], [1004, "sklearn-inspection"], [1004, "id7"], [1006, "sklearn-inspection"]], "sklearn.kernel_approximation": [[1008, "sklearn-kernel-approximation"], [1009, "sklearn-kernel-approximation"], [1007, "sklearn-kernel-approximation"], [1004, "sklearn-kernel-approximation"], [1006, "sklearn-kernel-approximation"]], "sklearn.multiclass": [[1008, "sklearn-multiclass"], [1003, "sklearn-multiclass"], [1007, "sklearn-multiclass"], [1006, "sklearn-multiclass"]], "sklearn.random_projection": [[1008, "sklearn-random-projection"]], "Version 0.21.3": [[1003, "version-0-21-3"]], "Version 0.21.2": [[1003, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1003, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1003, "version-0-21-1"]], "Version 0.21.0": [[1003, "version-0-21-0"]], "sklearn.externals": [[1003, "sklearn-externals"]], "Version 0.23.2": [[1005, "version-0-23-2"]], "Version 0.23.1": [[1005, "version-0-23-1"]], "Version 0.23.0": [[1005, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1005, "enforcing-keyword-only-arguments"], [1007, "enforcing-keyword-only-arguments"]], "sklearn.semi_supervised": [[1005, "sklearn-semi-supervised"], [1004, "sklearn-semi-supervised"], [1006, "sklearn-semi-supervised"], [1006, "id3"], [1006, "id15"]], "Version 0.12.1": [[994, "version-0-12-1"]], "Version 0.12": [[994, "version-0-12"]], "Version 0.11": [[994, "version-0-11"]], "Other changes": [[994, "other-changes"]], "Version 0.10": [[994, "version-0-10"]], "Version 0.9": [[994, "version-0-9"]], "Version 0.8": [[994, "version-0-8"]], "Version 0.7": [[994, "version-0-7"]], "Version 0.6": [[994, "version-0-6"]], "Version 0.5": [[994, "version-0-5"]], "New classes": [[994, "new-classes"]], "Documentation": [[994, "documentation"], [365, "documentation"]], "Fixes": [[994, "fixes"]], "External dependencies": [[994, "external-dependencies"]], "Removed modules": [[994, "removed-modules"]], "Misc": [[994, "misc"]], "Version 0.4": [[994, "version-0-4"]], "Earlier versions": [[994, "earlier-versions"]], "Version 1.2.0": [[1009, "version-1-2-0"]], "Changes impacting all modules": [[1009, "changes-impacting-all-modules"]], "Version 0.14": [[996, "version-0-14"]], "Version 1.0.2": [[1007, "version-1-0-2"]], "Version 1.0.1": [[1007, "version-1-0-1"]], "Fixed models": [[1007, "fixed-models"]], "Version 1.0.0": [[1007, "version-1-0-0"]], "Version 0.18.2": [[1000, "version-0-18-2"]], "Last release with Python 2.6 support": [[1000, null], [1000, null]], "Version 0.18.1": [[1000, "version-0-18-1"]], "Version 0.18": [[1000, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1000, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1001, "version-0-19-2"]], "Related changes": [[1001, "related-changes"]], "Version 0.19.1": [[1001, "version-0-19-1"]], "API changes": [[1001, "api-changes"]], "Version 0.19": [[1001, "version-0-19"]], "Version 0.22.2.post1": [[1004, "version-0-22-2-post1"]], "Version 0.22.1": [[1004, "version-0-22-1"]], "Version 0.22.0": [[1004, "version-0-22-0"]], "Website update": [[1004, "website-update"]], "Clear definition of the public API": [[1004, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1004, "deprecations-using-futurewarning-from-now-on"]], "Version 0.24.2": [[1006, "version-0-24-2"]], "feature_extraction": [[1006, "feature-extraction"]], "Version 0.24.1": [[1006, "version-0-24-1"]], "Packaging": [[1006, "packaging"]], "Version 0.24.0": [[1006, "version-0-24-0"]], "sklearn.exceptions": [[1006, "sklearn-exceptions"]], "Version 0.16.1": [[998, "version-0-16-1"]], "Version 0.16": [[998, "version-0-16"]], "sklearn.tree.ExtraTreeRegressor": [[881, "sklearn-tree-extratreeregressor"]], "sklearn.preprocessing.quantile_transform": [[859, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[859, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.tree.DecisionTreeRegressor": [[879, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[879, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.utils.multiclass.unique_labels": [[918, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.metaestimators.available_if": [[914, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[914, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.svm.SVC": [[875, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[875, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[876, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[876, "examples-using-sklearn-svm-svr"]], "sklearn.utils.assert_all_finite": [[889, "sklearn-utils-assert-all-finite"]], "sklearn.utils.metaestimators.if_delegate_has_method": [[915, "sklearn-utils-metaestimators-if-delegate-has-method"]], "sklearn.utils.estimator_html_repr": [[903, "sklearn-utils-estimator-html-repr"]], "sklearn.svm.NuSVC": [[872, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[872, "examples-using-sklearn-svm-nusvc"]], "sklearn.random_projection.GaussianRandomProjection": [[862, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.utils.arrayfuncs.min_pos": [[887, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.gen_even_slices": [[911, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[911, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.extmath.weighted_mode": [[909, "sklearn-utils-extmath-weighted-mode"]], "sklearn.random_projection.SparseRandomProjection": [[863, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[863, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.preprocessing.label_binarize": [[854, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[854, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.tree.plot_tree": [[884, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[884, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.random.sample_without_replacement": [[921, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.Bunch": [[885, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[885, "examples-using-sklearn-utils-bunch"]], "sklearn.utils.graph.single_source_shortest_path_length": [[912, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.class_weight.compute_sample_weight": [[896, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.tree.export_graphviz": [[882, "sklearn-tree-export-graphviz"]], "sklearn.utils.check_array": [[891, "sklearn-utils-check-array"]], "sklearn.utils.register_parallel_backend": [[922, "sklearn-utils-register-parallel-backend"]], "sklearn.tree.export_text": [[883, "sklearn-tree-export-text"]], "sklearn.preprocessing.minmax_scale": [[856, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[856, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.semi_supervised.LabelSpreading": [[866, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[866, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.utils.deprecated": [[897, "sklearn-utils-deprecated"]], "sklearn.preprocessing.binarize": [[853, "sklearn-preprocessing-binarize"]], "sklearn.utils.check_consistent_length": [[892, "sklearn-utils-check-consistent-length"]], "sklearn.set_config": [[868, "sklearn-set-config"]], "Examples using sklearn.set_config": [[868, "examples-using-sklearn-set-config"]], "sklearn.svm.LinearSVR": [[871, "sklearn-svm-linearsvr"]], "sklearn.tree.ExtraTreeClassifier": [[880, "sklearn-tree-extratreeclassifier"]], "sklearn.utils.extmath.fast_logdet": [[905, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.check_scalar": [[894, "sklearn-utils-check-scalar"]], "sklearn.preprocessing.scale": [[861, "sklearn-preprocessing-scale"]], "sklearn.utils._safe_indexing": [[886, "sklearn-utils-safe-indexing"]], "sklearn.utils.check_random_state": [[893, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[893, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.multiclass.type_of_target": [[917, "sklearn-utils-multiclass-type-of-target"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[867, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[867, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.utils.parallel_backend": [[920, "sklearn-utils-parallel-backend"]], "sklearn.utils.murmurhash3_32": [[919, "sklearn-utils-murmurhash3-32"]], "sklearn.show_versions": [[869, "sklearn-show-versions"]], "sklearn.preprocessing.power_transform": [[858, "sklearn-preprocessing-power-transform"]], "sklearn.utils.class_weight.compute_class_weight": [[895, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.preprocessing.add_dummy_feature": [[852, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.robust_scale": [[860, "sklearn-preprocessing-robust-scale"]], "sklearn.utils.discovery.all_functions": [[900, "sklearn-utils-discovery-all-functions"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[864, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[864, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.utils.estimator_checks.check_estimator": [[901, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.svm.l1_min_c": [[877, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[877, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[878, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[878, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.utils.extmath.randomized_svd": [[907, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[908, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.as_float_array": [[888, "sklearn-utils-as-float-array"]], "sklearn.utils.extmath.randomized_range_finder": [[906, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.svm.LinearSVC": [[870, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[870, "examples-using-sklearn-svm-linearsvc"]], "sklearn.utils.discovery.all_estimators": [[899, "sklearn-utils-discovery-all-estimators"]], "sklearn.svm.NuSVR": [[873, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[873, "examples-using-sklearn-svm-nusvr"]], "sklearn.utils.extmath.density": [[904, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[904, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[902, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[902, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.svm.OneClassSVM": [[874, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[874, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.utils.check_X_y": [[890, "sklearn-utils-check-x-y"]], "sklearn.preprocessing.maxabs_scale": [[855, "sklearn-preprocessing-maxabs-scale"]], "sklearn.utils.discovery.all_displays": [[898, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.indexable": [[913, "sklearn-utils-indexable"]], "sklearn.utils.multiclass.is_multilabel": [[916, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.gen_batches": [[910, "sklearn-utils-gen-batches"]], "sklearn.semi_supervised.LabelPropagation": [[865, "sklearn-semi-supervised-labelpropagation"]], "sklearn.preprocessing.normalize": [[857, "sklearn-preprocessing-normalize"]], "sklearn.metrics.mean_absolute_percentage_error": [[719, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_tweedie_deviance": [[725, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[725, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.pairwise.pairwise_kernels": [[747, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[748, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.precision_recall_fscore_support": [[756, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.roc_auc_score": [[761, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[761, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.model_selection.GroupKFold": [[771, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[771, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.metrics.zero_one_loss": [[767, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[767, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[750, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.mixture.BayesianGaussianMixture": [[768, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[768, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.metrics.mean_squared_log_error": [[724, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.pairwise.manhattan_distances": [[741, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.matthews_corrcoef": [[716, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[731, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.label_ranking_average_precision_score": [[712, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.pairwise_distances_argmin": [[752, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[752, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise.rbf_kernel": [[749, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.model_selection.KFold": [[775, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[775, "examples-using-sklearn-model-selection-kfold"]], "sklearn.metrics.jaccard_score": [[711, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[711, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.model_selection.LeavePOut": [[779, "sklearn-model-selection-leavepout"]], "sklearn.metrics.max_error": [[717, "sklearn-metrics-max-error"]], "sklearn.metrics.pairwise.cosine_similarity": [[734, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.silhouette_samples": [[763, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[763, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[742, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_distances": [[744, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.precision_recall_curve": [[755, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[755, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.mean_squared_error": [[723, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[723, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.roc_curve": [[762, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[762, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.mean_pinball_loss": [[721, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[721, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.precision_score": [[757, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[757, "examples-using-sklearn-metrics-precision-score"]], "sklearn.model_selection.ParameterGrid": [[780, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.HalvingRandomSearchCV": [[774, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[774, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.mixture.GaussianMixture": [[769, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[769, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.metrics.pairwise.chi2_kernel": [[732, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.model_selection.LeaveOneOut": [[777, "sklearn-model-selection-leaveoneout"]], "sklearn.metrics.mean_gamma_deviance": [[720, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.model_selection.GridSearchCV": [[770, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[770, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.metrics.rand_score": [[759, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[759, "examples-using-sklearn-metrics-rand-score"]], "sklearn.model_selection.LeavePGroupsOut": [[778, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.HalvingGridSearchCV": [[773, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[773, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.metrics.label_ranking_loss": [[713, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.pairwise_distances": [[751, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[751, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.mean_poisson_deviance": [[722, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[722, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.median_absolute_error": [[726, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[726, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.r2_score": [[758, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[758, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.pairwise.euclidean_distances": [[736, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.silhouette_score": [[764, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[764, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.model_selection.LeaveOneGroupOut": [[776, "sklearn-model-selection-leaveonegroupout"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[745, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise_distances_argmin_min": [[753, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise.cosine_distances": [[733, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.multilabel_confusion_matrix": [[727, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.log_loss": [[714, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[714, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[715, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[715, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[746, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.model_selection.GroupShuffleSplit": [[772, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[772, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.metrics.mutual_info_score": [[728, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[728, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.pairwise.haversine_distances": [[737, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[743, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.distance_metrics": [[735, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.ndcg_score": [[729, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.pairwise.linear_kernel": [[740, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise_distances_chunked": [[754, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.homogeneity_score": [[710, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[710, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.normalized_mutual_info_score": [[730, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[730, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.laplacian_kernel": [[739, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.mean_absolute_error": [[718, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[718, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.v_measure_score": [[766, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[766, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.recall_score": [[760, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[760, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.top_k_accuracy_score": [[765, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.pairwise.kernel_metrics": [[738, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[820, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[820, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.radius_neighbors_graph": [[825, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.model_selection.StratifiedShuffleSplit": [[789, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[789, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.cross_val_predict": [[792, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[792, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.RandomizedSearchCV": [[783, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[783, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.multioutput.MultiOutputClassifier": [[803, "sklearn-multioutput-multioutputclassifier"]], "sklearn.neural_network.BernoulliRBM": [[827, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[827, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPRegressor": [[829, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[829, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[830, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[830, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.naive_bayes.BernoulliNB": [[806, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[806, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.preprocessing.LabelEncoder": [[839, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.OneHotEncoder": [[844, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[844, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[845, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[845, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.LabelBinarizer": [[838, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[838, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.neighbors.sort_graph_by_row_values": [[826, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neighbors.BallTree": [[811, "sklearn-neighbors-balltree"]], "sklearn.preprocessing.Normalizer": [[843, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[843, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.PowerTransformer": [[847, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[847, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.model_selection.TimeSeriesSplit": [[790, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[790, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.train_test_split": [[797, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[797, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[822, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[815, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[815, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.model_selection.cross_val_score": [[793, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[793, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.pipeline.make_union": [[833, "sklearn-pipeline-make-union"]], "sklearn.model_selection.RepeatedKFold": [[784, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[784, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[785, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[785, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.multiclass.OutputCodeClassifier": [[801, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[804, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[804, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multiclass.OneVsRestClassifier": [[800, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[800, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.neighbors.kneighbors_graph": [[824, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[824, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neural_network.MLPClassifier": [[828, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[828, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.preprocessing.RobustScaler": [[849, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[849, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.naive_bayes.GaussianNB": [[809, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[809, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.model_selection.PredefinedSplit": [[782, "sklearn-model-selection-predefinedsplit"]], "sklearn.neighbors.NearestCentroid": [[818, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[818, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.model_selection.permutation_test_score": [[796, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[796, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.preprocessing.QuantileTransformer": [[848, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[848, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.MinMaxScaler": [[841, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[841, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.neighbors.KernelDensity": [[816, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[816, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.preprocessing.MaxAbsScaler": [[840, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[840, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.StandardScaler": [[851, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[851, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.model_selection.learning_curve": [[795, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[795, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[821, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[823, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.NearestNeighbors": [[819, "sklearn-neighbors-nearestneighbors"]], "sklearn.model_selection.StratifiedKFold": [[788, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[788, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.ParameterSampler": [[781, "sklearn-model-selection-parametersampler"]], "sklearn.neighbors.KNeighborsClassifier": [[813, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[813, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.multioutput.ClassifierChain": [[802, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[802, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.preprocessing.MultiLabelBinarizer": [[842, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.neighbors.KDTree": [[812, "sklearn-neighbors-kdtree"]], "sklearn.model_selection.check_cv": [[791, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.ShuffleSplit": [[786, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[786, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.naive_bayes.MultinomialNB": [[810, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[810, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.pipeline.make_pipeline": [[832, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[832, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.neighbors.LocalOutlierFactor": [[817, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[817, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.preprocessing.PolynomialFeatures": [[846, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[846, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.model_selection.StratifiedGroupKFold": [[787, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[787, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.validation_curve": [[798, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[798, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.preprocessing.Binarizer": [[834, "sklearn-preprocessing-binarizer"]], "sklearn.naive_bayes.ComplementNB": [[808, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[808, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.preprocessing.FunctionTransformer": [[835, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[835, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[836, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[836, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.multioutput.RegressorChain": [[805, "sklearn-multioutput-regressorchain"]], "sklearn.neighbors.KNeighborsRegressor": [[814, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[814, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.naive_bayes.CategoricalNB": [[807, "sklearn-naive-bayes-categoricalnb"]], "sklearn.multiclass.OneVsOneClassifier": [[799, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.pipeline.Pipeline": [[831, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[831, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.preprocessing.SplineTransformer": [[850, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[850, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.model_selection.cross_validate": [[794, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[794, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.preprocessing.KernelCenterer": [[837, "sklearn-preprocessing-kernelcenterer"]], "sklearn.linear_model.lars_path": [[657, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[657, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[641, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[641, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.orthogonal_mp_gram": [[661, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.metrics.DetCurveDisplay": [[673, "sklearn-metrics-detcurvedisplay"]], "sklearn.metrics.auc": [[680, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[680, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[681, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[681, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.classification_report": [[687, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[687, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[688, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.adjusted_rand_score": [[679, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[679, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.d2_absolute_error_score": [[695, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.linear_model.QuantileRegressor": [[645, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[645, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.SGDRegressor": [[653, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[653, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.metrics.adjusted_mutual_info_score": [[678, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[678, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[689, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.completeness_score": [[691, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[691, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.get_scorer": [[705, "sklearn-metrics-get-scorer"]], "sklearn.metrics.cohen_kappa_score": [[690, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.RocCurveDisplay": [[676, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[676, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.linear_model.PoissonRegressor": [[644, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[644, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.manifold.smacof": [[669, "sklearn-manifold-smacof"]], "sklearn.linear_model.Perceptron": [[643, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[643, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.TweedieRegressor": [[655, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[655, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.SGDOneClassSVM": [[652, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[652, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.orthogonal_mp": [[660, "sklearn-linear-model-orthogonal-mp"]], "sklearn.manifold.trustworthiness": [[671, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.f1_score": [[702, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[702, "examples-using-sklearn-metrics-f1-score"]], "sklearn.linear_model.TheilSenRegressor": [[654, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[654, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[642, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.metrics.d2_pinball_score": [[696, "sklearn-metrics-d2-pinball-score"]], "sklearn.manifold.MDS": [[665, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[665, "examples-using-sklearn-manifold-mds"]], "sklearn.metrics.hinge_loss": [[708, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.d2_tweedie_score": [[697, "sklearn-metrics-d2-tweedie-score"]], "sklearn.manifold.locally_linear_embedding": [[668, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[668, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.linear_model.Ridge": [[647, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[647, "examples-using-sklearn-linear-model-ridge"]], "sklearn.metrics.class_likelihood_ratios": [[686, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[686, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.manifold.SpectralEmbedding": [[666, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[666, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.metrics.DistanceMetric": [[674, "sklearn-metrics-distancemetric"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[709, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.dcg_score": [[699, "sklearn-metrics-dcg-score"]], "sklearn.metrics.brier_score_loss": [[683, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[683, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[684, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.consensus_score": [[693, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[693, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.linear_model.ridge_regression": [[662, "sklearn-linear-model-ridge-regression"]], "sklearn.metrics.det_curve": [[700, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[700, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.confusion_matrix": [[692, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[692, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.coverage_error": [[694, "sklearn-metrics-coverage-error"]], "sklearn.metrics.PrecisionRecallDisplay": [[675, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[675, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.explained_variance_score": [[701, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.accuracy_score": [[677, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[677, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.ConfusionMatrixDisplay": [[672, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[672, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.fowlkes_mallows_score": [[704, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.linear_model.RidgeClassifierCV": [[650, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[651, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[651, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.metrics.balanced_accuracy_score": [[682, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.hamming_loss": [[707, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[707, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[639, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[639, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[640, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[640, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.RidgeClassifier": [[649, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[649, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.lasso_path": [[659, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[659, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.manifold.Isomap": [[663, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[663, "examples-using-sklearn-manifold-isomap"]], "sklearn.linear_model.enet_path": [[656, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[656, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.metrics.get_scorer_names": [[706, "sklearn-metrics-get-scorer-names"]], "sklearn.linear_model.RANSACRegressor": [[646, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[646, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.manifold.TSNE": [[667, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[667, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.spectral_embedding": [[670, "sklearn-manifold-spectral-embedding"]], "sklearn.metrics.davies_bouldin_score": [[698, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.check_scoring": [[685, "sklearn-metrics-check-scoring"]], "sklearn.manifold.LocallyLinearEmbedding": [[664, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[664, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.linear_model.lars_path_gram": [[658, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.RidgeCV": [[648, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[648, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.metrics.fbeta_score": [[703, "sklearn-metrics-fbeta-score"]], "sklearn.feature_selection.RFECV": [[569, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[569, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.linear_model.MultiTaskLassoCV": [[638, "sklearn-linear-model-multitasklassocv"]], "sklearn.inspection.permutation_importance": [[609, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[609, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.check_increasing": [[611, "sklearn-isotonic-check-increasing"]], "sklearn.feature_selection.SelectFwe": [[573, "sklearn-feature-selection-selectfwe"]], "sklearn.linear_model.LassoCV": [[628, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[628, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[587, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.linear_model.LinearRegression": [[632, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[632, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.ElasticNetCV": [[622, "sklearn-linear-model-elasticnetcv"]], "sklearn.impute.IterativeImputer": [[602, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[602, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.inspection.partial_dependence": [[608, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[608, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.feature_selection.chi2": [[579, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[579, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.SelectFdr": [[570, "sklearn-feature-selection-selectfdr"]], "sklearn.linear_model.ARDRegression": [[619, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[619, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.gaussian_process.kernels.Sum": [[599, "sklearn-gaussian-process-kernels-sum"]], "sklearn.feature_selection.f_classif": [[580, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[580, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.gaussian_process.kernels.RBF": [[597, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[597, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.kernel_ridge.KernelRidge": [[618, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[618, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.LarsCV": [[626, "sklearn-linear-model-larscv"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[592, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[592, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[586, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[586, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.feature_selection.f_regression": [[581, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[581, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.linear_model.Lasso": [[627, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[627, "examples-using-sklearn-linear-model-lasso"]], "sklearn.feature_selection.SelectKBest": [[574, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[574, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.VarianceThreshold": [[578, "sklearn-feature-selection-variancethreshold"]], "sklearn.linear_model.ElasticNet": [[621, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[621, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.LassoLarsIC": [[631, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[631, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.gaussian_process.kernels.Kernel": [[593, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[593, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[613, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[590, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[590, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.linear_model.MultiTaskElasticNet": [[635, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[595, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.linear_model.MultiTaskLasso": [[637, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[637, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.feature_selection.RFE": [[568, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[568, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.SequentialFeatureSelector": [[577, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[577, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.SelectorMixin": [[576, "sklearn-feature-selection-selectormixin"]], "sklearn.linear_model.Lars": [[625, "sklearn-linear-model-lars"]], "sklearn.feature_selection.SelectFromModel": [[572, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[572, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.gaussian_process.kernels.Product": [[596, "sklearn-gaussian-process-kernels-product"]], "sklearn.kernel_approximation.RBFSampler": [[616, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[616, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.impute.MissingIndicator": [[604, "sklearn-impute-missingindicator"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[615, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[615, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.Nystroem": [[614, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[614, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.feature_selection.r_regression": [[584, "sklearn-feature-selection-r-regression"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[617, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[636, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.feature_selection.SelectPercentile": [[575, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[575, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[598, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[598, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.isotonic.isotonic_regression": [[612, "sklearn-isotonic-isotonic-regression"]], "sklearn.linear_model.LassoLarsCV": [[630, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[630, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LogisticRegressionCV": [[634, "sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.LassoLars": [[629, "sklearn-linear-model-lassolars"]], "sklearn.gaussian_process.kernels.DotProduct": [[589, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[589, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.impute.KNNImputer": [[603, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[603, "examples-using-sklearn-impute-knnimputer"]], "sklearn.feature_selection.mutual_info_classif": [[582, "sklearn-feature-selection-mutual-info-classif"]], "sklearn.linear_model.GammaRegressor": [[623, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[623, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.feature_selection.SelectFpr": [[571, "sklearn-feature-selection-selectfpr"]], "sklearn.inspection.PartialDependenceDisplay": [[607, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[607, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.gaussian_process.kernels.Exponentiation": [[591, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.linear_model.BayesianRidge": [[620, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[620, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[585, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[585, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[600, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[600, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.impute.SimpleImputer": [[605, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[605, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.linear_model.HuberRegressor": [[624, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[624, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.gaussian_process.kernels.Matern": [[594, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[594, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.get_config": [[601, "sklearn-get-config"]], "sklearn.linear_model.LogisticRegression": [[633, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[633, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.isotonic.IsotonicRegression": [[610, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[610, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.inspection.DecisionBoundaryDisplay": [[606, "sklearn-inspection-decisionboundarydisplay"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[588, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[588, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.feature_selection.mutual_info_regression": [[583, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[583, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.ensemble.RandomForestClassifier": [[539, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[539, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.decomposition.MiniBatchSparsePCA": [[514, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[514, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.PCA": [[516, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[516, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.non_negative_factorization": [[522, "sklearn-decomposition-non-negative-factorization"]], "sklearn.feature_extraction.DictVectorizer": [[556, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[556, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.image.PatchExtractor": [[558, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.text.HashingVectorizer": [[564, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[564, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.decomposition.dict_learning_online": [[521, "sklearn-decomposition-dict-learning-online"]], "sklearn.ensemble.ExtraTreesClassifier": [[532, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[532, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[535, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[535, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[524, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[524, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[566, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[566, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.ensemble.StackingRegressor": [[543, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[543, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.datasets.make_regression": [[499, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[499, "examples-using-sklearn-datasets-make-regression"]], "sklearn.feature_extraction.text.CountVectorizer": [[563, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[563, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.experimental.enable_iterative_imputer": [[555, "sklearn-experimental-enable-iterative-imputer"]], "sklearn.datasets.make_moons": [[497, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[497, "examples-using-sklearn-datasets-make-moons"]], "sklearn.ensemble.ExtraTreesRegressor": [[533, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[533, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.decomposition.LatentDirichletAllocation": [[511, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[511, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.feature_extraction.text.TfidfTransformer": [[565, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[565, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.exceptions.UndefinedMetricWarning": [[552, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.decomposition.sparse_encode": [[523, "sklearn-decomposition-sparse-encode"]], "sklearn.ensemble.VotingClassifier": [[544, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[544, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.datasets.make_swiss_roll": [[505, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[505, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.MiniBatchNMF": [[513, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[513, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.ensemble.GradientBoostingClassifier": [[534, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[534, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.exceptions.NotFittedError": [[551, "sklearn-exceptions-notfittederror"]], "sklearn.feature_selection.GenericUnivariateSelect": [[567, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.decomposition.FastICA": [[508, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[508, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.dict_learning": [[520, "sklearn-decomposition-dict-learning"]], "sklearn.dummy.DummyRegressor": [[527, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[527, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.exceptions.FitFailedWarning": [[550, "sklearn-exceptions-fitfailedwarning"]], "sklearn.datasets.make_sparse_spd_matrix": [[502, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[502, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.decomposition.TruncatedSVD": [[519, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[519, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.ensemble.AdaBoostRegressor": [[529, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[529, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.RandomForestRegressor": [[540, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[540, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.datasets.make_sparse_coded_signal": [[501, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[501, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[525, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[525, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.feature_extraction.image.grid_to_graph": [[560, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[562, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[562, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.decomposition.KernelPCA": [[510, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[510, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[537, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[537, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[546, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[546, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.datasets.make_s_curve": [[500, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[500, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.ensemble.StackingClassifier": [[542, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[542, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.feature_extraction.FeatureHasher": [[557, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[557, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.extract_patches_2d": [[559, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[559, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.decomposition.NMF": [[515, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[515, "examples-using-sklearn-decomposition-nmf"]], "sklearn.dummy.DummyClassifier": [[526, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[526, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.datasets.make_sparse_uncorrelated": [[503, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.ensemble.VotingRegressor": [[545, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[545, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[528, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[528, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.RandomTreesEmbedding": [[541, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[541, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.experimental.enable_hist_gradient_boosting": [[554, "sklearn-experimental-enable-hist-gradient-boosting"]], "sklearn.decomposition.FactorAnalysis": [[507, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[507, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.IncrementalPCA": [[509, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[509, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.ensemble.IsolationForest": [[538, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[538, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.exceptions.EfficiencyWarning": [[549, "sklearn-exceptions-efficiencywarning"]], "sklearn.feature_extraction.image.img_to_graph": [[561, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.ensemble.BaggingClassifier": [[530, "sklearn-ensemble-baggingclassifier"]], "sklearn.experimental.enable_halving_search_cv": [[553, "sklearn-experimental-enable-halving-search-cv"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[536, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[536, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.datasets.make_multilabel_classification": [[498, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[498, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_spd_matrix": [[504, "sklearn-datasets-make-spd-matrix"]], "sklearn.exceptions.DataConversionWarning": [[547, "sklearn-exceptions-dataconversionwarning"]], "sklearn.ensemble.BaggingRegressor": [[531, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[531, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.decomposition.SparsePCA": [[518, "sklearn-decomposition-sparsepca"]], "sklearn.exceptions.DataDimensionalityWarning": [[548, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.decomposition.SparseCoder": [[517, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[517, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[512, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[512, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.DictionaryLearning": [[506, "sklearn-decomposition-dictionarylearning"]], "sklearn.cluster.SpectralCoclustering": [[428, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[428, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.cluster_optics_dbscan": [[430, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[430, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.datasets.load_linnerud": [[480, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_digits": [[477, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[477, "examples-using-sklearn-datasets-load-digits"]], "sklearn.cross_decomposition.PLSCanonical": [[457, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[457, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.datasets.load_svmlight_file": [[483, "sklearn-datasets-load-svmlight-file"]], "sklearn.covariance.MinCovDet": [[449, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[449, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.cluster.ward_tree": [[438, "sklearn-cluster-ward-tree"]], "sklearn.cross_decomposition.PLSRegression": [[458, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[458, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cluster.cluster_optics_xi": [[431, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.spectral_clustering": [[437, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[437, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cross_decomposition.CCA": [[456, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[456, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.covariance.EllipticEnvelope": [[444, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[444, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.datasets.load_files": [[478, "sklearn-datasets-load-files"]], "sklearn.datasets.load_sample_images": [[482, "sklearn-datasets-load-sample-images"]], "sklearn.covariance.shrunk_covariance": [[455, "sklearn-covariance-shrunk-covariance"]], "sklearn.datasets.make_biclusters": [[486, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[486, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.load_sample_image": [[481, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[481, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.fetch_olivetti_faces": [[469, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[469, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.cluster.kmeans_plusplus": [[435, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[435, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.datasets.fetch_20newsgroups": [[462, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[462, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.cluster.SpectralClustering": [[427, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[427, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.covariance.GraphicalLasso": [[446, "sklearn-covariance-graphicallasso"]], "sklearn.datasets.fetch_lfw_people": [[468, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[468, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.make_friedman2": [[492, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.load_diabetes": [[476, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[476, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.cluster.estimate_bandwidth": [[433, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[433, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.datasets.load_iris": [[479, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[479, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.make_circles": [[489, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[489, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.fetch_kddcup99": [[466, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[466, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.cluster.k_means": [[434, "sklearn-cluster-k-means"]], "sklearn.cross_decomposition.PLSSVD": [[459, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.load_boston": [[474, "sklearn-datasets-load-boston"]], "sklearn.datasets.fetch_rcv1": [[471, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.make_blobs": [[487, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[487, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.covariance.LedoitWolf": [[448, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[448, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.datasets.fetch_lfw_pairs": [[467, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.make_hastie_10_2": [[495, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[495, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.load_svmlight_files": [[484, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[485, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[485, "examples-using-sklearn-datasets-load-wine"]], "sklearn.compose.TransformedTargetRegressor": [[440, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[440, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.datasets.make_friedman3": [[493, "sklearn-datasets-make-friedman3"]], "sklearn.compose.ColumnTransformer": [[439, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[439, "examples-using-sklearn-compose-columntransformer"]], "sklearn.datasets.fetch_openml": [[470, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[470, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.covariance.ledoit_wolf": [[454, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[454, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.datasets.fetch_california_housing": [[464, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[464, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.config_context": [[443, "sklearn-config-context"]], "sklearn.datasets.make_checkerboard": [[488, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[488, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_friedman1": [[491, "sklearn-datasets-make-friedman1"]], "sklearn.covariance.OAS": [[450, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[450, "examples-using-sklearn-covariance-oas"]], "sklearn.datasets.make_classification": [[490, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[490, "examples-using-sklearn-datasets-make-classification"]], "sklearn.covariance.ShrunkCovariance": [[451, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[451, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.datasets.make_low_rank_matrix": [[496, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.fetch_covtype": [[465, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[465, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.clear_data_home": [[460, "sklearn-datasets-clear-data-home"]], "sklearn.cluster.mean_shift": [[436, "sklearn-cluster-mean-shift"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[463, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[463, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.dump_svmlight_file": [[461, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[461, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.cluster.compute_optics_graph": [[432, "sklearn-cluster-compute-optics-graph"]], "sklearn.covariance.empirical_covariance": [[452, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[452, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.datasets.fetch_species_distributions": [[472, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[472, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.make_gaussian_quantiles": [[494, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[494, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.covariance.graphical_lasso": [[453, "sklearn-covariance-graphical-lasso"]], "sklearn.datasets.get_data_home": [[473, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[473, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.covariance.GraphicalLassoCV": [[447, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[447, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.compose.make_column_transformer": [[442, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[442, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.datasets.load_breast_cancer": [[475, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[475, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.cluster.affinity_propagation": [[429, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[429, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.SpectralBiclustering": [[426, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[426, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.covariance.EmpiricalCovariance": [[445, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[445, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.compose.make_column_selector": [[441, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[441, "examples-using-sklearn-compose-make-column-selector"]], "Compare the effect of different scalers on data with outliers": [[297, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Original data": [[297, "original-data"], [261, "original-data"]], "StandardScaler": [[297, "standardscaler"]], "MinMaxScaler": [[297, "minmaxscaler"]], "MaxAbsScaler": [[297, "maxabsscaler"]], "RobustScaler": [[297, "robustscaler"]], "PowerTransformer": [[297, "powertransformer"]], "QuantileTransformer (uniform output)": [[297, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[297, "quantiletransformer-gaussian-output"]], "Normalizer": [[297, "normalizer"]], "SVM: Weighted samples": [[334, "svm-weighted-samples"]], "Nearest Neighbors regression": [[287, "nearest-neighbors-regression"]], "Release Highlights for scikit-learn 1.1": [[309, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[309, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[309, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[309, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[309, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[309, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[309, "bisectingkmeans-divide-and-cluster"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[317, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM: Separating hyperplane for unbalanced classes": [[326, "svm-separating-hyperplane-for-unbalanced-classes"]], "Semi Supervised Classification": [[311, "semi-supervised-classification"], [164, "semi-supervised-classification"]], "Compare Stochastic learning strategies for MLPClassifier": [[292, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "SVM Margins Example": [[329, "svm-margins-example"]], "FeatureHasher and DictVectorizer Comparison": [[339, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[339, "load-data"]], "Define preprocessing functions": [[339, "define-preprocessing-functions"]], "DictVectorizer": [[339, "dictvectorizer"]], "FeatureHasher": [[339, "featurehasher"]], "Comparison with special purpose text vectorizers": [[339, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[339, "tfidfvectorizer"]], "Release Highlights for scikit-learn 1.0": [[308, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[308, "keyword-and-positional-arguments"]], "Spline Transformers": [[308, "spline-transformers"]], "Quantile Regressor": [[308, "quantile-regressor"]], "Feature Names Support": [[308, "feature-names-support"]], "A more flexible plotting API": [[308, "a-more-flexible-plotting-api"]], "Histogram-based Gradient Boosting Models are now stable": [[308, "histogram-based-gradient-boosting-models-are-now-stable"]], "New documentation improvements": [[308, "new-documentation-improvements"], [307, "new-documentation-improvements"]], "Working with text documents": [[336, "working-with-text-documents"], [164, "working-with-text-documents"]], "Label Propagation digits active learning": [[313, "label-propagation-digits-active-learning"]], "Clustering text documents using k-means": [[338, "clustering-text-documents-using-k-means"]], "Loading text data": [[338, "loading-text-data"]], "Quantifying the quality of clustering results": [[338, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[338, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[338, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[338, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[338, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[338, "top-terms-per-cluster"]], "HashingVectorizer": [[338, "hashingvectorizer"]], "Clustering evaluation summary": [[338, "clustering-evaluation-summary"]], "Multi-output Decision Tree Regression": [[345, "multi-output-decision-tree-regression"]], "Parallelism, resource management, and configuration": [[353, "parallelism-resource-management-and-configuration"]], "Joblib-based parallelism": [[353, "joblib-based-parallelism"]], "OpenMP-based parallelism": [[353, "openmp-based-parallelism"]], "Parallel Numpy routines from numerical libraries": [[353, "parallel-numpy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[353, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[353, "configuration-switches"]], "Python runtime": [[353, "python-runtime"]], "assume_finite": [[353, "assume-finite"]], "working_memory": [[353, "working-memory"]], "Environment variables": [[353, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[353, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[353, "sklearn-working-memory"]], "SKLEARN_SEED": [[353, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[353, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[353, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[353, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[353, "sklearn-enable-debug-cython-directives"]], "SVM with custom kernel": [[320, "svm-with-custom-kernel"]], "Preprocessing": [[296, "preprocessing"], [164, "preprocessing"]], "Nearest Centroid Classification": [[286, "nearest-centroid-classification"]], "Computational Performance": [[352, "computational-performance"]], "Bulk versus Atomic mode": [[352, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[352, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[352, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[352, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[352, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[352, "feature-extraction-latency"]], "Prediction Throughput": [[352, "prediction-throughput"]], "Tips and Tricks": [[352, "tips-and-tricks"]], "Linear algebra libraries": [[352, "linear-algebra-libraries"]], "Limiting Working Memory": [[352, "limiting-working-memory"]], "Model Compression": [[352, "model-compression"]], "Model Reshaping": [[352, "model-reshaping"]], "Links": [[352, "links"]], "Map data to a normal distribution": [[301, "map-data-to-a-normal-distribution"]], "Label Propagation digits: Demonstrating performance": [[312, "label-propagation-digits-demonstrating-performance"]], "Data generation": [[312, "data-generation"], [155, "data-generation"]], "Plot the most uncertain predictions": [[312, "plot-the-most-uncertain-predictions"]], "Computing with scikit-learn": [[351, "computing-with-scikit-learn"]], "Release Highlights for scikit-learn 0.24": [[307, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[307, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[307, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[307, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[307, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[307, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[307, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[307, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[307, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "Decision Tree Regression": [[344, "decision-tree-regression"]], "Strategies to scale computationally: bigger data": [[354, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[354, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[354, "streaming-instances"]], "Extracting features": [[354, "extracting-features"]], "Incremental learning": [[354, "incremental-learning"]], "Neural Networks": [[290, "neural-networks"], [164, "neural-networks"]], "Effect of varying threshold for self-training": [[315, "effect-of-varying-threshold-for-self-training"]], "Label Propagation learning a complex structure": [[314, "label-propagation-learning-a-complex-structure"]], "Importance of Feature Scaling": [[302, "importance-of-feature-scaling"]], "SVM: Maximum margin separating hyperplane": [[325, "svm-maximum-margin-separating-hyperplane"]], "Non-linear SVM": [[330, "non-linear-svm"]], "SVM Tie Breaking Example": [[333, "svm-tie-breaking-example"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[331, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Look at the results": [[331, "look-at-the-results"], [231, "look-at-the-results"]], "Classification of text documents using sparse features": [[337, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[337, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[337, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[337, "model-without-metadata-stripping"]], "Model with metadata stripping": [[337, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[337, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[337, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Kernel Density Estimate of Species Distributions": [[288, "kernel-density-estimate-of-species-distributions"]], "Release Highlights": [[304, "release-highlights"], [164, "release-highlights"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[284, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Restricted Boltzmann Machine features for digit classification": [[294, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[294, "models-definition"]], "Plotting": [[294, "plotting"], [388, "plotting"], [388, "id5"], [388, "id7"]], "Release Highlights for scikit-learn 0.22": [[305, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[305, "new-plotting-api"]], "Stacking Classifier and Regressor": [[305, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[305, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[305, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[305, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[305, "knn-based-imputation"]], "Tree pruning": [[305, "tree-pruning"]], "Retrieve dataframes from OpenML": [[305, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[305, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[305, "roc-auc-now-supports-multiclass-classification"]], "Plot the support vectors in LinearSVC": [[322, "plot-the-support-vectors-in-linearsvc"]], "Plot the decision surface of decision trees trained on the iris dataset": [[343, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "SVM-Anova: SVM with univariate feature selection": [[327, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[327, "load-some-data-to-play-with"]], "Create the pipeline": [[327, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[327, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Demonstrating the different strategies of KBinsDiscretizer": [[300, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "SVM-Kernels": [[328, "svm-kernels"]], "Varying regularization in Multi-layer Perceptron": [[291, "varying-regularization-in-multi-layer-perceptron"]], "Understanding the decision tree structure": [[346, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[346, "train-tree-classifier"]], "Tree structure": [[346, "tree-structure"]], "Decision path": [[346, "decision-path"]], "Visualization of MLP weights on MNIST": [[293, "visualization-of-mlp-weights-on-mnist"]], "Plot different SVM classifiers in the iris dataset": [[321, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Scaling the regularization parameter for SVCs": [[332, "scaling-the-regularization-parameter-for-svcs"]], "l1-penalty case": [[332, "l1-penalty-case"]], "l2-penalty case": [[332, "l2-penalty-case"]], "Simulations": [[332, "simulations"]], "Note:": [[332, null]], "Feature discretization": [[299, "feature-discretization"]], "Semi-supervised Classification on a Text Dataset": [[316, "semi-supervised-classification-on-a-text-dataset"]], "RBF SVM parameters": [[324, "rbf-svm-parameters"]], "Load and prepare data set": [[324, "load-and-prepare-data-set"]], "Train classifiers": [[324, "train-classifiers"]], "Release Highlights for scikit-learn 0.23": [[306, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[306, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[306, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[306, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[306, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[306, "sample-weight-support-for-lasso-and-elasticnet"]], "One-class SVM with non-linear kernel (RBF)": [[323, "one-class-svm-with-non-linear-kernel-rbf"]], "Neighborhood Components Analysis Illustration": [[285, "neighborhood-components-analysis-illustration"]], "Original points": [[285, "original-points"]], "Learning an embedding": [[285, "learning-an-embedding"]], "Common pitfalls and recommended practices": [[348, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[348, "inconsistent-preprocessing"]], "Data leakage": [[348, "data-leakage"]], "Data leakage during pre-processing": [[348, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[348, "how-to-avoid-data-leakage"]], "Controlling randomness": [[348, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[348, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[348, "estimators"], [348, "id2"], [388, "estimators"], [366, "estimators"]], "CV splitters": [[348, "cv-splitters"], [348, "id3"]], "Common pitfalls and subtleties": [[348, "common-pitfalls-and-subtleties"]], "General recommendations": [[348, "general-recommendations"]], "Getting reproducible results across multiple executions": [[348, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[348, "robustness-of-cross-validation-results"]], "Using KBinsDiscretizer to discretize continuous features": [[298, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Post pruning decision trees with cost complexity pruning": [[342, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[342, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[342, "accuracy-vs-alpha-for-training-and-testing-sets"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[229, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[229, "theoretical-bounds"]], "Empirical validation": [[229, "empirical-validation"]], "Remarks": [[229, "remarks"]], "Balance model complexity and cross-validated score": [[254, "balance-model-complexity-and-cross-validated-score"]], "Precision-Recall": [[262, "precision-recall"]], "In binary classification settings": [[262, "in-binary-classification-settings"]], "Dataset and model": [[262, "dataset-and-model"]], "Plot the Precision-Recall curve": [[262, "plot-the-precision-recall-curve"]], "In multi-label settings": [[262, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[262, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[262, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[262, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[262, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Train error vs Test error": [[268, "train-error-vs-test-error"]], "Compute train and test errors": [[268, "compute-train-and-test-errors"]], "Plot results functions": [[268, "plot-results-functions"]], "Advanced Plotting With Partial Dependence": [[235, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[235, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[235, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[235, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[235, "plotting-partial-dependence-for-one-feature"]], "Gaussian Mixture Model Sine Curve": [[246, "gaussian-mixture-model-sine-curve"]], "Comparison of Manifold Learning methods": [[217, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[217, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[217, "locally-linear-embeddings"]], "Isomap Embedding": [[217, "isomap-embedding"]], "Multidimensional scaling": [[217, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[217, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[217, "t-distributed-stochastic-neighbor-embedding"]], "Comparison between grid search and successive halving": [[266, "comparison-between-grid-search-and-successive-halving"]], "Gaussian Mixture Models": [[239, "gaussian-mixture-models"], [164, "gaussian-mixture-models"]], "Custom refit strategy of a grid search with cross-validation": [[253, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[253, "the-dataset"]], "Define our grid-search strategy": [[253, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[253, "tuning-hyper-parameters"]], "Model Selection": [[248, "model-selection"], [164, "model-selection"]], "Multi-dimensional scaling": [[220, "multi-dimensional-scaling"]], "Gaussian Mixture Model Ellipsoids": [[241, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[242, "gmm-covariances"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[259, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[259, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[259, "plotting-the-result"]], "GMM Initialization Methods": [[243, "gmm-initialization-methods"]], "Novelty detection with Local Outlier Factor (LOF)": [[281, "novelty-detection-with-local-outlier-factor-lof"]], "Manifold Learning methods on a severed sphere": [[219, "manifold-learning-methods-on-a-severed-sphere"]], "Comparison of kernel ridge regression and SVR": [[231, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[231, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[231, "compare-times-of-svr-and-kernel-ridge-regression"]], "Visualize training and prediction times": [[231, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[231, "visualize-the-learning-curves"]], "Receiver Operating Characteristic (ROC)": [[264, "receiver-operating-characteristic-roc"]], "Plot ROC curves for the multiclass problem": [[264, "plot-roc-curves-for-the-multiclass-problem"]], "Area under ROC for the multiclass problem": [[264, "area-under-roc-for-the-multiclass-problem"]], "Classifier Chain": [[273, "classifier-chain"]], "Statistical comparison of models using grid search": [[255, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[255, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[255, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[255, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[255, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[255, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[255, "take-home-messages"]], "Underfitting vs. Overfitting": [[269, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[270, "plotting-validation-curves"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[218, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[218, "load-digits-dataset"]], "Helper function to plot embedding": [[218, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[218, "embedding-techniques-comparison"]], "Simple 1D Kernel Density Estimation": [[280, "simple-1d-kernel-density-estimation"]], "Visualizations with Display Objects": [[226, "visualizations-with-display-objects"]], "Load Data and train model": [[226, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[226, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[226, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[226, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[226, "combining-the-display-objects-into-a-single-plot"]], "Swiss Roll And Swiss-Hole Reduction": [[221, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[221, "swiss-roll"]], "Swiss-Hole": [[221, "swiss-hole"]], "Theil-Sen Regression": [[213, "theil-sen-regression"]], "Outliers only in the y direction": [[213, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[213, "outliers-in-the-x-direction"]], "Multioutput methods": [[272, "multioutput-methods"], [164, "multioutput-methods"]], "Density Estimation for a Gaussian mixture": [[244, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[245, "gaussian-mixture-model-selection"]], "Face completion with a multi-output estimators": [[233, "face-completion-with-a-multi-output-estimators"]], "Approximate nearest neighbors in TSNE": [[275, "approximate-nearest-neighbors-in-tsne"]], "t-SNE: The effect of various perplexity values on the shape": [[222, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Explicit feature map approximation for RBF kernels": [[230, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[230, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[230, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[230, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "ROC Curve with Visualization API": [[237, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[237, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[237, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[237, "training-a-random-forest-and-plotting-the-roc-curve"]], "Displaying Pipelines": [[236, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[236, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[236, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[236, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[236, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[236, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[225, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Plotting Cross-Validated Predictions": [[251, "plotting-cross-validated-predictions"]], "Caching nearest neighbors": [[277, "caching-nearest-neighbors"]], "Isotonic Regression": [[228, "isotonic-regression"]], "Nested versus non-nested cross-validation": [[260, "nested-versus-non-nested-cross-validation"]], "See Also:": [[260, null], [390, null]], "Kernel Density Estimation": [[279, "kernel-density-estimation"], [395, "kernel-density-estimation"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[283, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Visualizing cross-validation behavior in scikit-learn": [[250, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[250, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[250, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[250, "visualize-cross-validation-indices-for-many-cv-objects"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[240, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Detection error tradeoff (DET) curve": [[252, "detection-error-tradeoff-det-curve"]], "Class Likelihood Ratios to measure classification performance": [[258, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[258, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[258, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[258, "invariance-with-respect-to-prevalence"]], "Test with permutations the significance of a classification score": [[261, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[261, "permutation-test-score"], [393, "permutation-test-score"]], "Random data": [[261, "random-data"]], "Comparing randomized search and grid search for hyperparameter estimation": [[263, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Evaluation of outlier detection estimators": [[234, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[234, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[234, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[234, "plot-and-interpret-results"]], "Outlier detection with Local Outlier Factor (LOF)": [[282, "outlier-detection-with-local-outlier-factor-lof"]], "Tweedie regression on insurance claims": [[214, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[214, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[214, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[214, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[214, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Displaying estimators and complex pipelines": [[227, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[227, "compact-text-representation"]], "Rich HTML representation": [[227, "rich-html-representation"]], "Plotting Learning Curves": [[257, "plotting-learning-curves"]], "Successive Halving Iterations": [[267, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[267, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Sample pipeline for text feature extraction and evaluation": [[256, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[256, "data-loading"]], "Pipeline with hyperparameter tuning": [[256, "pipeline-with-hyperparameter-tuning"]], "Receiver Operating Characteristic (ROC) with cross validation": [[265, "receiver-operating-characteristic-roc-with-cross-validation"]], "Data IO and generation": [[265, "data-io-and-generation"]], "Classification and ROC analysis": [[265, "classification-and-roc-analysis"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Common pitfalls in the interpretation of coefficients of linear models": [[166, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[166, "the-dataset-wages"]], "The machine-learning pipeline": [[166, "the-machine-learning-pipeline"]], "Processing the dataset": [[166, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[166, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[166, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[166, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[166, "preprocessing-numerical-variables"]], "Linear models with regularization": [[166, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[166, "linear-models-with-sparse-coefficients"]], "Lessons learned": [[166, "lessons-learned"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Generalized Linear Models": [[174, "generalized-linear-models"], [164, "generalized-linear-models"]], "Curve Fitting with Bayesian Ridge Regression": [[176, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[176, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[176, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[176, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[178, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Lasso and Elastic Net for Sparse Signals": [[180, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[180, "data-generation"]], "ElasticNet": [[180, "elasticnet"]], "Logistic function": [[186, "logistic-function"]], "Sparsity Example: Fitting only features 1  and 2": [[193, "sparsity-example-fitting-only-features-1-and-2"]], "Lasso model selection via information criteria": [[184, "lasso-model-selection-via-information-criteria"]], "Ordinary Least Squares and Ridge Regression Variance": [[194, "ordinary-least-squares-and-ridge-regression-variance"]], "Regularization path of L1- Logistic Regression": [[189, "regularization-path-of-l1-logistic-regression"]], "Load data": [[189, "load-data"]], "Compute regularization path": [[189, "compute-regularization-path"]], "Plot regularization path": [[189, "plot-regularization-path"]], "Recursive feature elimination": [[144, "recursive-feature-elimination"], [398, "recursive-feature-elimination"]], "Orthogonal Matching Pursuit": [[195, "orthogonal-matching-pursuit"]], "SGD: Weighted samples": [[209, "sgd-weighted-samples"]], "Comparing Linear Bayesian Regressors": [[175, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[175, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[175, "fit-the-regressors"], [175, "id2"]], "Plot the true and estimated coefficients": [[175, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[175, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[175, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[175, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Gaussian Process for Machine Learning": [[148, "gaussian-process-for-machine-learning"], [164, "gaussian-process-for-machine-learning"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Missing information": [[162, "missing-information"]], "Estimate the score": [[162, "estimate-the-score"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "MNIST classification using multinomial logistic + L1": [[212, "mnist-classification-using-multinomial-logistic-l1"]], "Plot Ridge coefficients as a function of the regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[201, "compute-paths"]], "Display results": [[201, "display-results"]], "Quantile regression": [[198, "quantile-regression"]], "Dataset generation": [[198, "dataset-generation"], [156, "dataset-generation"]], "Fitting a QuantileRegressor": [[198, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[198, "comparing-quantileregressor-and-linearregression"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[177, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "SGD: Maximum margin separating hyperplane": [[208, "sgd-maximum-margin-separating-hyperplane"]], "Gaussian process regression (GPR) with noise-level estimation": [[155, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Loading the data": [[146, "loading-the-data"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[146, "discussion"]], "L1 Penalty and Sparsity in Logistic Regression": [[187, "l1-penalty-and-sparsity-in-logistic-regression"]], "Missing Value Imputation": [[160, "missing-value-imputation"], [164, "missing-value-imputation"]], "Robust linear estimator fitting": [[202, "robust-linear-estimator-fitting"]], "SGD: convex loss functions": [[206, "sgd-convex-loss-functions"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[154, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[154, "build-the-dataset"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Inspection": [[164, "inspection"], [165, "inspection"], [379, "inspection"]], "Lasso path using LARS": [[183, "lasso-path-using-lars"]], "Comparing various online solvers": [[203, "comparing-various-online-solvers"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Gaussian process classification (GPC) on iris dataset": [[151, "gaussian-process-classification-gpc-on-iris-dataset"], [399, "gaussian-process-classification-gpc-on-iris-dataset"]], "Joint feature selection with multi-task Lasso": [[190, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[190, "fit-models"]], "Plot support and time series": [[190, "plot-support-and-time-series"]], "Poisson regression and non-normal loss": [[196, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[196, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[196, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[196, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[196, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[196, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[196, "evaluation-of-the-ranking-power"]], "Main takeaways": [[196, "main-takeaways"]], "Permutation Importance with Multicollinear or Correlated Features": [[169, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[169, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[169, "handling-multicollinear-features"]], "Polynomial and Spline interpolation": [[197, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[197, "periodic-splines"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[149, "kernel-ridge"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Final conclusion": [[149, "final-conclusion"]], "Partial Dependence and Individual Conditional Expectation Plots": [[167, "partial-dependence-and-individual-conditional-expectation-plots"]], "California Housing data preprocessing": [[167, "california-housing-data-preprocessing"]], "1-way partial dependence with different models": [[167, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[167, "multi-layer-perceptron"]], "Gradient boosting": [[167, "gradient-boosting"]], "Analysis of the plots": [[167, "analysis-of-the-plots"]], "2D interaction plots": [[167, "d-interaction-plots"]], "3D interaction plots": [[167, "id7"]], "Early stopping of Stochastic Gradient Descent": [[204, "early-stopping-of-stochastic-gradient-descent"]], "Lasso and Elastic Net": [[181, "lasso-and-elastic-net"]], "Robust linear model estimation using RANSAC": [[199, "robust-linear-model-estimation-using-ransac"]], "Plot multi-class SGD on the iris dataset": [[205, "plot-multi-class-sgd-on-the-iris-dataset"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[188, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Univariate feature selection": [[142, "id1"], [398, "univariate-feature-selection"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Lasso model selection: AIC-BIC / cross-validation": [[185, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[185, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[185, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[185, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[185, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[185, "summary-of-cross-validation-approach"]], "Non-negative least squares": [[191, "non-negative-least-squares"]], "Multiclass sparse logistic regression on 20newgroups": [[211, "multiclass-sparse-logistic-regression-on-20newgroups"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[210, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Plot Ridge coefficients as a function of the L2 regularization": [[200, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Lasso on dense and sparse data": [[182, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[182, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[182, "comparing-the-two-lasso-implementations-on-sparse-data"]], "SGD: Penalties": [[207, "sgd-penalties"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[168, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[168, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[168, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[168, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Linear Regression Example": [[192, "linear-regression-example"]], "Logistic Regression 3-class Classifier": [[179, "logistic-regression-3-class-classifier"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[158, "helper-function"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[158, "exp-sine-squared-kernel"], [399, "exp-sine-squared-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[158, "matern-kernel"], [399, "matern-kernel"]], "Scalable learning with polynomial kernel approximation": [[172, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[172, "partitioning-the-data"]], "Feature normalization": [[172, "feature-normalization"]], "Establishing a baseline model": [[172, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[172, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[172, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[172, "comparing-the-results"]], "sklearn.cluster.AgglomerativeClustering": [[417, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[417, "examples-using-sklearn-cluster-agglomerativeclustering"]], "Scikit-learn governance and decision-making": [[378, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[378, "roles-and-responsibilities"]], "Contributors": [[378, "contributors"]], "Communication team": [[378, "communication-team"]], "Core developers": [[378, "core-developers"]], "Technical Committee": [[378, "technical-committee"]], "Decision Making Process": [[378, "decision-making-process"]], "Enhancement proposals (SLEPs)": [[378, "enhancement-proposals-sleps"]], "Array API support (experimental)": [[385, "array-api-support-experimental"]], "Example usage": [[385, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[385, "estimators-with-support-for-array-api-compatible-inputs"]], "Feature extraction": [[397, "feature-extraction"]], "Loading features from dicts": [[397, "loading-features-from-dicts"]], "Feature hashing": [[397, "feature-hashing"]], "Text feature extraction": [[397, "text-feature-extraction"]], "The Bag of Words representation": [[397, "the-bag-of-words-representation"]], "Common Vectorizer usage": [[397, "common-vectorizer-usage"]], "Using stop words": [[397, "using-stop-words"]], "Tf\u2013idf term weighting": [[397, "tfidf-term-weighting"]], "Decoding text files": [[397, "decoding-text-files"]], "Applications and examples": [[397, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[397, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[397, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[397, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[397, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[397, "image-feature-extraction"]], "Patch extraction": [[397, "patch-extraction"]], "Connectivity graph of an image": [[397, "connectivity-graph-of-an-image"]], "Feature selection": [[398, "feature-selection"]], "Removing features with low variance": [[398, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[398, null]], "Feature selection using SelectFromModel": [[398, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[398, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[398, "compressive-sensing"]], "Tree-based feature selection": [[398, "tree-based-feature-selection"]], "Sequential Feature Selection": [[398, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[398, "feature-selection-as-part-of-a-pipeline"]], "sklearn.calibration.CalibrationDisplay": [[414, "sklearn-calibration-calibrationdisplay"]], "sklearn.cluster.FeatureAgglomeration": [[421, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[421, "examples-using-sklearn-cluster-featureagglomeration"]], "Crafting a minimal reproducer for scikit-learn": [[369, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[369, "good-practices"]], "Provide a failing code example with minimal comments": [[369, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[369, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[369, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[369, "use-markdown-formatting"]], "Synthetic dataset": [[369, "synthetic-dataset"]], "NumPy": [[369, "numpy"]], "Pandas": [[369, "pandas"]], "make_regression": [[369, "make-regression"]], "make_classification": [[369, "make-classification"]], "make_blobs": [[369, "make-blobs"]], "Dataset loading utilities": [[369, "dataset-loading-utilities"], [358, "dataset-loading-utilities"]], "Model persistence": [[383, "model-persistence"]], "Python specific serialization": [[383, "python-specific-serialization"]], "Security & maintainability limitations": [[383, "security-maintainability-limitations"]], "Interoperable formats": [[383, "interoperable-formats"]], "Gaussian Processes": [[399, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[399, "gaussian-process-regression-gpr"]], "GPR examples": [[399, "gpr-examples"]], "GPR with noise-level estimation": [[399, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[399, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[399, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[399, "gaussian-process-classification-gpc"]], "GPC examples": [[399, "gpc-examples"]], "Probabilistic predictions with GPC": [[399, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[399, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[399, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[399, "gaussian-process-kernel-api"]], "Basic kernels": [[399, "basic-kernels"]], "Kernel operators": [[399, "kernel-operators"]], "Radial basis function (RBF) kernel": [[399, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[399, "rational-quadratic-kernel"]], "Dot-Product kernel": [[399, "dot-product-kernel"]], "Contributing": [[365, "contributing"], [375, "contributing"]], "Our community, our values": [[365, null]], "Ways to contribute": [[365, "ways-to-contribute"]], "Contributing to related projects": [[365, null]], "Submitting a bug report or a feature request": [[365, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[365, "how-to-make-a-good-bug-report"]], "Contributing code": [[365, "contributing-code"]], "Video resources": [[365, "video-resources"]], "How to contribute": [[365, "how-to-contribute"]], "Learning git:": [[365, null]], "Pull request checklist": [[365, "pull-request-checklist"]], "Continuous Integration (CI)": [[365, "continuous-integration-ci"]], "Stalled pull requests": [[365, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[365, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[365, "issues-for-new-contributors"]], "good first issue tag": [[365, null]], "Easy tag": [[365, null]], "help wanted tag": [[365, null]], "Building the documentation": [[365, "building-the-documentation"]], "Guidelines for writing documentation": [[365, "guidelines-for-writing-documentation"]], "Cross-referencing": [[365, "cross-referencing"]], "Generated documentation on GitHub Actions": [[365, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[365, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[365, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[365, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[365, "monitoring-performance"]], "Issue Tracker Tags": [[365, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[365, "maintaining-backwards-compatibility"]], "Deprecation": [[365, "deprecation"]], "Change the default value of a parameter": [[365, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[365, "code-review-guidelines"]], "Communication Guidelines": [[365, "communication-guidelines"]], "Reading the existing code base": [[365, "reading-the-existing-code-base"]], "Bug triaging and issue curation": [[364, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[364, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[364, null]], "Working on PRs to help review": [[364, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[364, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[364, null]], "A typical workflow for triaging issues": [[364, "a-typical-workflow-for-triaging-issues"]], "Real world datasets": [[360, "real-world-datasets"]], "The Olivetti faces dataset": [[360, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[360, "the-20-newsgroups-text-dataset"]], "Converting text to vectors": [[360, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[360, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[360, null]], "Recommendation": [[360, null]], "The Labeled Faces in the Wild face recognition dataset": [[360, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[360, "forest-covertypes"]], "RCV1 dataset": [[360, "rcv1-dataset"]], "Kddcup 99 dataset": [[360, "kddcup-99-dataset"]], "California Housing dataset": [[360, "california-housing-dataset"]], "Spectral Co-Clustering": [[386, "spectral-co-clustering"]], "Spectral Biclustering": [[386, "spectral-biclustering"]], "Biclustering evaluation": [[386, "biclustering-evaluation"]], "Empirical covariance": [[391, "empirical-covariance"]], "Shrunk Covariance": [[391, "shrunk-covariance"]], "Basic shrinkage": [[391, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[391, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[391, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[391, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[391, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[391, "minimum-covariance-determinant"]], "Density Estimation": [[395, "density-estimation"]], "Density Estimation: Histograms": [[395, "density-estimation-histograms"]], "sklearn.base.is_classifier": [[411, "sklearn-base-is-classifier"]], "Decomposing signals in components (matrix factorization problems)": [[394, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[394, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[394, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[394, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[394, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[394, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[394, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[394, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[394, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[394, "dictionary-learning"]], "Generic dictionary learning": [[394, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[394, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[394, null]], "Factor Analysis": [[394, "factor-analysis"]], "Independent component analysis (ICA)": [[394, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[394, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[394, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[394, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[394, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[394, "latent-dirichlet-allocation-lda"]], "sklearn.cluster.KMeans": [[422, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[422, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.DBSCAN": [[420, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[420, "examples-using-sklearn-cluster-dbscan"]], "PLSCanonical": [[392, "plscanonical"]], "Transforming data": [[392, "transforming-data"]], "Predicting the targets Y": [[392, "predicting-the-targets-y"]], "PLSSVD": [[392, "plssvd"]], "PLSRegression": [[392, "plsregression"]], "Canonical Correlation Analysis": [[392, "canonical-correlation-analysis"]], "Reference:": [[392, null]], "sklearn.base.clone": [[410, "sklearn-base-clone"]], "Probability calibration": [[387, "probability-calibration"]], "Calibrating a classifier": [[387, "calibrating-a-classifier"]], "Sigmoid": [[387, "sigmoid"]], "Isotonic": [[387, "isotonic"]], "Multiclass support": [[387, "multiclass-support"]], "Dispatching": [[374, "dispatching"]], "sklearn.base.is_regressor": [[412, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[413, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[413, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "Installing the development version of scikit-learn": [[363, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[363, "installing-nightly-builds"]], "Building from source": [[363, "building-from-source"]], "Dependencies": [[363, "dependencies"]], "Runtime dependencies": [[363, "runtime-dependencies"]], "Build dependencies": [[363, "build-dependencies"]], "Test dependencies": [[363, "test-dependencies"]], "Building a specific version from a tag": [[363, "building-a-specific-version-from-a-tag"]], "Editable mode": [[363, "editable-mode"]], "Platform-specific instructions": [[363, "platform-specific-instructions"]], "Windows": [[363, "windows"]], "macOS": [[363, "macos"]], "macOS compilers from conda-forge": [[363, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[363, "macos-compilers-from-homebrew"]], "Linux": [[363, "linux"]], "Linux compilers from the system": [[363, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[363, "linux-compilers-from-conda-forge"]], "FreeBSD": [[363, "freebsd"]], "Alternative compilers": [[363, "alternative-compilers"]], "Building with Intel C Compiler (ICC) using oneAPI on Linux": [[363, "building-with-intel-c-compiler-icc-using-oneapi-on-linux"]], "Parallel builds": [[363, "parallel-builds"]], "sklearn.base.BiclusterMixin": [[404, "sklearn-base-biclustermixin"]], "sklearn.base.TransformerMixin": [[409, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[409, "examples-using-sklearn-base-transformermixin"]], "Maintainer / core-developer information": [[368, "maintainer-core-developer-information"]], "Releasing": [[368, "releasing"]], "Before a release": [[368, "before-a-release"]], "Preparing a release PR": [[368, "preparing-a-release-pr"]], "Major version release": [[368, "major-version-release"]], "Minor version release": [[368, "minor-version-release"]], "Making a release": [[368, "making-a-release"]], "Release checklist": [[368, "release-checklist"]], "Merging Pull Requests": [[368, "merging-pull-requests"]], "The scikit-learn.org web site": [[368, "the-scikit-learn-org-web-site"]], "Travis Cron jobs": [[368, "travis-cron-jobs"]], "Experimental features": [[368, "experimental-features"]], "Generated datasets": [[361, "generated-datasets"]], "Generators for classification and clustering": [[361, "generators-for-classification-and-clustering"]], "Single label": [[361, "single-label"]], "Multilabel": [[361, "multilabel"]], "Generators for regression": [[361, "generators-for-regression"]], "Generators for manifold learning": [[361, "generators-for-manifold-learning"]], "Generators for decomposition": [[361, "generators-for-decomposition"]], "Developer\u2019s Guide": [[367, "developer-s-guide"]], "sklearn.cluster.Birch": [[418, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[418, "examples-using-sklearn-cluster-birch"]], "Model selection and evaluation": [[384, "model-selection-and-evaluation"]], "sklearn.cluster.MiniBatchKMeans": [[424, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[424, "examples-using-sklearn-cluster-minibatchkmeans"]], "Getting Started": [[376, "getting-started"]], "Fitting and predicting: estimator basics": [[376, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[376, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[376, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[376, "model-evaluation"]], "Automatic parameter searches": [[376, "automatic-parameter-searches"]], "Next steps": [[376, "next-steps"]], "Pipeline: chaining estimators": [[390, "pipeline-chaining-estimators"]], "Construction": [[390, "construction"]], "Accessing steps": [[390, "accessing-steps"]], "Nested parameters": [[390, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[390, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[390, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[390, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[390, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[390, "visualizing-composite-estimators"]], "sklearn.cluster.MeanShift": [[423, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[423, "examples-using-sklearn-cluster-meanshift"]], "Utilities for Developers": [[373, "utilities-for-developers"]], "Validation Tools": [[373, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[373, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[373, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[373, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[373, "graph-routines"]], "Testing Functions": [[373, "testing-functions"]], "Multiclass and multilabel utility function": [[373, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[373, "helper-functions"]], "Hash Functions": [[373, "hash-functions"]], "Warnings and Exceptions": [[373, "warnings-and-exceptions"]], "Frequently Asked Questions": [[375, "frequently-asked-questions"]], "Table of Contents": [[375, "table-of-contents"]], "About the project": [[375, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[375, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[375, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[375, "why-scikit"]], "Do you support PyPy?": [[375, "do-you-support-pypy"]], "Implementation decisions": [[375, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[375, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[375, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[375, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[375, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[375, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[375, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[375, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[375, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[375, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[375, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[375, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[375, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[375, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[375, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[375, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[375, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[375, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[375, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[375, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[375, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[375, "how-do-i-set-a-random-state-for-an-entire-execution"]], "sklearn.cluster.OPTICS": [[425, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[425, "examples-using-sklearn-cluster-optics"]], "API Reference": [[388, "api-reference"]], "sklearn.base: Base classes and utility functions": [[388, "sklearn-base-base-classes-and-utility-functions"]], "Base classes": [[388, "base-classes"]], "Functions": [[388, "functions"], [388, "id1"]], "sklearn.calibration: Probability Calibration": [[388, "sklearn-calibration-probability-calibration"]], "sklearn.cluster: Clustering": [[388, "sklearn-cluster-clustering"]], "Classes": [[388, "classes"]], "sklearn.compose: Composite Estimators": [[388, "sklearn-compose-composite-estimators"]], "sklearn.covariance: Covariance Estimators": [[388, "sklearn-covariance-covariance-estimators"]], "sklearn.cross_decomposition: Cross decomposition": [[388, "sklearn-cross-decomposition-cross-decomposition"]], "sklearn.datasets: Datasets": [[388, "sklearn-datasets-datasets"]], "Loaders": [[388, "loaders"]], "Samples generator": [[388, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[388, "sklearn-decomposition-matrix-decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[388, "sklearn-discriminant-analysis-discriminant-analysis"]], "sklearn.dummy: Dummy estimators": [[388, "sklearn-dummy-dummy-estimators"]], "sklearn.ensemble: Ensemble Methods": [[388, "sklearn-ensemble-ensemble-methods"]], "sklearn.exceptions: Exceptions and warnings": [[388, "sklearn-exceptions-exceptions-and-warnings"]], "sklearn.experimental: Experimental": [[388, "sklearn-experimental-experimental"]], "sklearn.feature_extraction: Feature Extraction": [[388, "sklearn-feature-extraction-feature-extraction"]], "From images": [[388, "from-images"]], "From text": [[388, "from-text"]], "sklearn.feature_selection: Feature Selection": [[388, "sklearn-feature-selection-feature-selection"]], "sklearn.gaussian_process: Gaussian Processes": [[388, "sklearn-gaussian-process-gaussian-processes"]], "sklearn.impute: Impute": [[388, "sklearn-impute-impute"]], "sklearn.inspection: Inspection": [[388, "sklearn-inspection-inspection"]], "sklearn.isotonic: Isotonic regression": [[388, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation: Kernel Approximation": [[388, "sklearn-kernel-approximation-kernel-approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[388, "sklearn-kernel-ridge-kernel-ridge-regression"]], "sklearn.linear_model: Linear Models": [[388, "sklearn-linear-model-linear-models"]], "Linear classifiers": [[388, "linear-classifiers"]], "Classical linear regressors": [[388, "classical-linear-regressors"]], "Regressors with variable selection": [[388, "regressors-with-variable-selection"]], "Bayesian regressors": [[388, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[388, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[388, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[388, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[388, "sklearn-manifold-manifold-learning"]], "sklearn.metrics: Metrics": [[388, "sklearn-metrics-metrics"]], "Model Selection Interface": [[388, "model-selection-interface"]], "Biclustering metrics": [[388, "biclustering-metrics"]], "Distance metrics": [[388, "distance-metrics"]], "Pairwise metrics": [[388, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[388, "sklearn-mixture-gaussian-mixture-models"]], "sklearn.model_selection: Model Selection": [[388, "sklearn-model-selection-model-selection"]], "Splitter Classes": [[388, "splitter-classes"]], "Splitter Functions": [[388, "splitter-functions"]], "Hyper-parameter optimizers": [[388, "hyper-parameter-optimizers"]], "Model validation": [[388, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[388, "sklearn-multiclass-multiclass-classification"]], "Multiclass classification strategies": [[388, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[388, "sklearn-multioutput-multioutput-regression-and-classification"]], "sklearn.naive_bayes: Naive Bayes": [[388, "sklearn-naive-bayes-naive-bayes"]], "sklearn.neighbors: Nearest Neighbors": [[388, "sklearn-neighbors-nearest-neighbors"]], "sklearn.neural_network: Neural network models": [[388, "sklearn-neural-network-neural-network-models"]], "sklearn.pipeline: Pipeline": [[388, "sklearn-pipeline-pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[388, "sklearn-preprocessing-preprocessing-and-normalization"]], "sklearn.random_projection: Random projection": [[388, "sklearn-random-projection-random-projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[388, "sklearn-semi-supervised-semi-supervised-learning"]], "sklearn.svm: Support Vector Machines": [[388, "sklearn-svm-support-vector-machines"]], "sklearn.tree: Decision Trees": [[388, "sklearn-tree-decision-trees"]], "sklearn.utils: Utilities": [[388, "sklearn-utils-utilities"]], "Recently deprecated": [[388, "recently-deprecated"]], "To be removed in 1.3": [[388, "to-be-removed-in-1-3"]], "Table Of Contents": [[355, "table-of-contents"]], "Toy datasets": [[362, "toy-datasets"]], "Boston house prices dataset": [[362, "boston-house-prices-dataset"]], "Iris plants dataset": [[362, "iris-plants-dataset"]], "Optical recognition of handwritten digits dataset": [[362, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[362, "linnerrud-dataset"]], "Wine recognition dataset": [[362, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[362, "breast-cancer-wisconsin-diagnostic-dataset"]], "How to optimize for speed": [[370, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[370, "python-cython-or-c-c"]], "Profiling Python code": [[370, "profiling-python-code"]], "Memory usage profiling": [[370, "memory-usage-profiling"]], "Performance tips for the Cython developer": [[370, "performance-tips-for-the-cython-developer"]], "Using OpenMP": [[370, "using-openmp"]], "Profiling compiled extensions": [[370, "profiling-compiled-extensions"]], "Using yep and gperftools": [[370, "using-yep-and-gperftools"]], "Using gprof": [[370, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[370, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[370, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[370, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[370, "a-simple-algorithmic-trick-warm-restarts"]], "sklearn.covariance.oas": [[402, "sklearn-covariance-oas"]], "sklearn.cluster.dbscan": [[400, "sklearn-cluster-dbscan"]], "sklearn.base.ClusterMixin": [[406, "sklearn-base-clustermixin"]], "sklearn.base.RegressorMixin": [[408, "sklearn-base-regressormixin"]], "Dataset transformations": [[357, "dataset-transformations"]], "Cross-validation: evaluating estimator performance": [[393, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[393, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[393, null]], "The cross_validate function and multiple metric evaluation": [[393, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[393, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[393, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[393, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[393, "k-fold"]], "Repeated K-Fold": [[393, "repeated-k-fold"]], "Leave One Out (LOO)": [[393, "leave-one-out-loo"]], "Leave P Out (LPO)": [[393, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[393, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[393, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[393, "stratified-k-fold"]], "Stratified Shuffle Split": [[393, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[393, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[393, "group-k-fold"]], "StratifiedGroupKFold": [[393, "stratifiedgroupkfold"]], "Leave One Group Out": [[393, "leave-one-group-out"]], "Leave P Groups Out": [[393, "leave-p-groups-out"]], "Group Shuffle Split": [[393, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[393, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[393, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[393, "cross-validation-of-time-series-data"]], "Time Series Split": [[393, "time-series-split"]], "A note on shuffling": [[393, "a-note-on-shuffling"]], "Cross validation and model selection": [[393, "cross-validation-and-model-selection"]], "Developing scikit-learn estimators": [[366, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[366, "apis-of-scikit-learn-objects"]], "Different objects": [[366, "different-objects"]], "Instantiation": [[366, "instantiation"]], "Fitting": [[366, "fitting"]], "Estimated Attributes": [[366, "estimated-attributes"]], "Optional Arguments": [[366, "optional-arguments"]], "Universal attributes": [[366, "universal-attributes"]], "Rolling your own estimator": [[366, "rolling-your-own-estimator"]], "Project template:": [[366, null]], "BaseEstimator and mixins:": [[366, null]], "get_params and set_params": [[366, "get-params-and-set-params"]], "Parameters and init": [[366, "parameters-and-init"]], "Cloning": [[366, "cloning"]], "Pipeline compatibility": [[366, "pipeline-compatibility"]], "Estimator types": [[366, "estimator-types"]], "Specific models": [[366, "specific-models"]], "Estimator Tags": [[366, "estimator-tags"]], "Coding guidelines": [[366, "coding-guidelines"]], "Input validation": [[366, "input-validation"]], "Random Numbers": [[366, "random-numbers"]], "Numerical assertions in tests": [[366, "numerical-assertions-in-tests"]], "Loading other datasets": [[359, "loading-other-datasets"]], "Sample images": [[359, "sample-images"]], "Datasets in svmlight / libsvm format": [[359, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[359, null]], "Downloading datasets from the openml.org repository": [[359, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[359, "dataset-versions"]], "ARFF parser": [[359, "arff-parser"]], "sklearn.calibration.calibration_curve": [[415, "sklearn-calibration-calibration-curve"]], "Bagging meta-estimator": [[396, "bagging-meta-estimator"]], "Forests of randomized trees": [[396, "forests-of-randomized-trees"]], "Random Forests": [[396, "random-forests"]], "Extremely Randomized Trees": [[396, "extremely-randomized-trees"]], "Parameters": [[396, "parameters"], [377, "parameters"]], "Parallelization": [[396, "parallelization"]], "Feature importance evaluation": [[396, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[396, "totally-random-trees-embedding"]], "AdaBoost": [[396, "adaboost"]], "Gradient Tree Boosting": [[396, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[396, "fitting-additional-weak-learners"]], "Controlling the tree size": [[396, "controlling-the-tree-size"]], "Loss Functions": [[396, "loss-functions"]], "Shrinkage via learning rate": [[396, "shrinkage-via-learning-rate"]], "Subsampling": [[396, "subsampling"]], "Interpretation with feature importance": [[396, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[396, "histogram-based-gradient-boosting"]], "Missing values support": [[396, "missing-values-support"]], "Sample weight support": [[396, "sample-weight-support"]], "Categorical Features Support": [[396, "categorical-features-support"]], "Low-level parallelism": [[396, "low-level-parallelism"], [389, "low-level-parallelism"]], "Why it\u2019s faster": [[396, "why-it-s-faster"]], "Voting Classifier": [[396, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[396, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[396, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[396, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[396, "voting-regressor"]], "Stacked generalization": [[396, "stacked-generalization"]], "Installing scikit-learn": [[380, "installing-scikit-learn"]], "Installing the latest release": [[380, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[380, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[380, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[380, "alpine-linux"]], "Arch Linux": [[380, "arch-linux"]], "Debian/Ubuntu": [[380, "debian-ubuntu"]], "Fedora": [[380, "fedora"]], "NetBSD": [[380, "netbsd"]], "MacPorts for Mac OSX": [[380, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[380, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[380, "intel-conda-channel"]], "WinPython for Windows": [[380, "winpython-for-windows"]], "Troubleshooting": [[380, "troubleshooting"]], "Error caused by file path length limit on Windows": [[380, "error-caused-by-file-path-length-limit-on-windows"]], "sklearn.cluster.AffinityPropagation": [[416, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[416, "examples-using-sklearn-cluster-affinitypropagation"]], "Glossary of Common Terms and API Elements": [[377, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[377, "general-concepts"]], "Class APIs and Estimator Types": [[377, "class-apis-and-estimator-types"]], "Target Types": [[377, "target-types"]], "Methods": [[377, "methods"]], "Attributes": [[377, "attributes"]], "Data and sample properties": [[377, "data-and-sample-properties"]], "Input data": [[389, null]], "Overview of clustering methods": [[389, "overview-of-clustering-methods"]], "K-means": [[389, "k-means"]], "Mini Batch K-Means": [[389, "mini-batch-k-means"]], "Affinity Propagation": [[389, "affinity-propagation"]], "Mean Shift": [[389, "mean-shift"]], "Spectral clustering": [[389, "spectral-clustering"]], "Different label assignment strategies": [[389, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[389, "spectral-clustering-graphs"]], "Hierarchical clustering": [[389, "hierarchical-clustering"]], "FeatureAgglomeration": [[389, null]], "Different linkage type: Ward, complete, average, and single linkage": [[389, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[389, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[389, "adding-connectivity-constraints"]], "Varying the metric": [[389, "varying-the-metric"]], "Bisecting K-Means": [[389, "bisecting-k-means"]], "DBSCAN": [[389, "dbscan"]], "Memory consumption for large sample sizes": [[389, null]], "OPTICS": [[389, "optics"]], "Comparison with DBSCAN": [[389, null]], "Computational Complexity": [[389, null]], "BIRCH": [[389, "birch"]], "Clustering performance evaluation": [[389, "clustering-performance-evaluation"]], "Rand index": [[389, "rand-index"]], "Advantages": [[389, "advantages"], [389, "id10"], [389, "id17"], [389, "id21"], [389, "id24"], [389, "id27"], [389, "id31"], [389, "id35"]], "Drawbacks": [[389, "drawbacks"], [389, "id11"], [389, "id18"], [389, "id22"], [389, "id25"], [389, "id28"], [389, "id32"], [389, "id36"]], "Mutual Information based scores": [[389, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[389, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[389, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[389, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[389, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[389, "davies-bouldin-index"]], "Contingency Matrix": [[389, "contingency-matrix"]], "Pair Confusion Matrix": [[389, "pair-confusion-matrix"]], "sklearn.base.BaseEstimator": [[403, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[403, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.ClassifierMixin": [[405, "sklearn-base-classifiermixin"]], "sklearn.base.DensityMixin": [[407, "sklearn-base-densitymixin"]], "sklearn.cluster.BisectingKMeans": [[419, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[419, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.decomposition.fastica": [[401, "sklearn-decomposition-fastica"]], "Developing with the Plotting API": [[371, "developing-with-the-plotting-api"]], "Plotting API Overview": [[371, "plotting-api-overview"]], "Plotting with Multiple Axes": [[371, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[372, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[372, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[372, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[372, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[372, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[372, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[372, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[372, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[372, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]]}, "indexentries": {"1d": [[377, "term-1d"]], "1d array": [[377, "term-1d-array"]], "2d": [[377, "term-2d"]], "2d array": [[377, "term-2d-array"]], "api": [[377, "term-API"]], "cv splitter": [[377, "term-CV-splitter"]], "slep": [[377, "term-SLEP"]], "sleps": [[377, "term-SLEPs"]], "x": [[377, "term-X"]], "xt": [[377, "term-Xt"]], "y": [[377, "term-Y"], [377, "term-y"]], "_estimator_type": [[377, "term-_estimator_type"]], "array-like": [[377, "term-array-like"]], "attribute": [[377, "term-attribute"]], "attributes": [[377, "term-attributes"]], "backwards compatibility": [[377, "term-backwards-compatibility"]], "binary": [[377, "term-binary"]], "callable": [[377, "term-callable"]], "categorical feature": [[377, "term-categorical-feature"]], "class_weight": [[377, "term-class_weight"]], "classes_": [[377, "term-classes_"]], "classifier": [[377, "term-classifier"]], "classifiers": [[377, "term-classifiers"]], "clone": [[377, "term-clone"]], "cloned": [[377, "term-cloned"]], "clusterer": [[377, "term-clusterer"]], "clusterers": [[377, "term-clusterers"]], "coef_": [[377, "term-coef_"]], "common tests": [[377, "term-common-tests"]], "components_": [[377, "term-components_"]], "continuous": [[377, "term-continuous"]], "continuous multi-output": [[377, "term-continuous-multi-output"]], "continuous multioutput": [[377, "term-continuous-multioutput"]], "cross-validation estimator": [[377, "term-cross-validation-estimator"]], "cross-validation generator": [[377, "term-cross-validation-generator"]], "cross-validation splitter": [[377, "term-cross-validation-splitter"]], "cv": [[377, "term-cv"]], "data leakage": [[377, "term-data-leakage"]], "data type": [[377, "term-data-type"]], "decision_function": [[377, "term-decision_function"]], "density estimator": [[377, "term-density-estimator"]], "deprecation": [[377, "term-deprecation"]], "dimensionality": [[377, "term-dimensionality"]], "docstring": [[377, "term-docstring"]], "double underscore": [[377, "term-double-underscore"]], "double underscore notation": [[377, "term-double-underscore-notation"]], "dtype": [[377, "term-dtype"]], "duck typing": [[377, "term-duck-typing"]], "early stopping": [[377, "term-early-stopping"]], "embedding_": [[377, "term-embedding_"]], "estimator": [[377, "term-estimator"]], "estimator instance": [[377, "term-estimator-instance"]], "estimator tags": [[377, "term-estimator-tags"]], "estimators": [[377, "term-estimators"]], "evaluation metric": [[377, "term-evaluation-metric"]], "evaluation metrics": [[377, "term-evaluation-metrics"]], "examples": [[377, "term-examples"]], "experimental": [[377, "term-experimental"]], "feature": [[377, "term-feature"]], "feature extractor": [[377, "term-feature-extractor"]], "feature extractors": [[377, "term-feature-extractors"]], "feature vector": [[377, "term-feature-vector"]], "feature_importances_": [[377, "term-feature_importances_"]], "features": [[377, "term-features"]], "fit": [[377, "term-fit"]], "fit_predict": [[377, "term-fit_predict"]], "fit_transform": [[377, "term-fit_transform"]], "fitted": [[377, "term-fitted"]], "fitting": [[377, "term-fitting"]], "function": [[377, "term-function"]], "gallery": [[377, "term-gallery"]], "get_feature_names_out": [[377, "term-get_feature_names_out"]], "get_n_splits": [[377, "term-get_n_splits"]], "get_params": [[377, "term-get_params"]], "groups": [[377, "term-groups"]], "hyper-parameter": [[377, "term-hyper-parameter"]], "hyperparameter": [[377, "term-hyperparameter"]], "imputation": [[377, "term-imputation"]], "impute": [[377, "term-impute"]], "indexable": [[377, "term-indexable"]], "induction": [[377, "term-induction"]], "inductive": [[377, "term-inductive"]], "joblib": [[377, "term-joblib"]], "kernel": [[377, "term-kernel"]], "label indicator matrix": [[377, "term-label-indicator-matrix"]], "labels_": [[377, "term-labels_"]], "leakage": [[377, "term-leakage"]], "max_iter": [[377, "term-max_iter"]], "memmapping": [[377, "term-memmapping"]], "memory": [[377, "term-memory"]], "memory map": [[377, "term-memory-map"]], "memory mapping": [[377, "term-memory-mapping"]], "meta-estimator": [[377, "term-meta-estimator"]], "meta-estimators": [[377, "term-meta-estimators"]], "metaestimator": [[377, "term-metaestimator"]], "metaestimators": [[377, "term-metaestimators"]], "metric": [[377, "term-metric"]], "missing values": [[377, "term-missing-values"]], "multi-class": [[377, "term-multi-class"]], "multi-class multi-output": [[377, "term-multi-class-multi-output"]], "multi-label": [[377, "term-multi-label"]], "multi-output": [[377, "term-multi-output"]], "multi-output continuous": [[377, "term-multi-output-continuous"]], "multi-output multi-class": [[377, "term-multi-output-multi-class"]], "multiclass": [[377, "term-multiclass"]], "multiclass multioutput": [[377, "term-multiclass-multioutput"]], "multilabel": [[377, "term-multilabel"]], "multilabel indicator matrices": [[377, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[377, "term-multilabel-indicator-matrix"]], "multioutput": [[377, "term-multioutput"]], "multioutput continuous": [[377, "term-multioutput-continuous"]], "multioutput multiclass": [[377, "term-multioutput-multiclass"]], "n_components": [[377, "term-n_components"]], "n_features": [[377, "term-n_features"]], "n_iter_": [[377, "term-n_iter_"]], "n_iter_no_change": [[377, "term-n_iter_no_change"]], "n_jobs": [[377, "term-n_jobs"]], "n_outputs": [[377, "term-n_outputs"]], "n_samples": [[377, "term-n_samples"]], "n_targets": [[377, "term-n_targets"]], "narrative docs": [[377, "term-narrative-docs"]], "narrative documentation": [[377, "term-narrative-documentation"]], "np": [[377, "term-np"]], "online learning": [[377, "term-online-learning"]], "out-of-core": [[377, "term-out-of-core"]], "outlier detector": [[377, "term-outlier-detector"]], "outlier detectors": [[377, "term-outlier-detectors"]], "outputs": [[377, "term-outputs"]], "pair": [[377, "term-pair"]], "pairwise metric": [[377, "term-pairwise-metric"]], "pairwise metrics": [[377, "term-pairwise-metrics"]], "param": [[377, "term-param"]], "parameter": [[377, "term-parameter"]], "parameters": [[377, "term-parameters"]], "params": [[377, "term-params"]], "partial_fit": [[377, "term-partial_fit"]], "pd": [[377, "term-pd"]], "pos_label": [[377, "term-pos_label"]], "precomputed": [[377, "term-precomputed"]], "predict": [[377, "term-predict"]], "predict_log_proba": [[377, "term-predict_log_proba"]], "predict_proba": [[377, "term-predict_proba"]], "predictor": [[377, "term-predictor"]], "predictors": [[377, "term-predictors"]], "random_state": [[377, "term-random_state"]], "rectangular": [[377, "term-rectangular"]], "regressor": [[377, "term-regressor"]], "regressors": [[377, "term-regressors"]], "sample": [[377, "term-sample"]], "sample properties": [[377, "term-sample-properties"]], "sample property": [[377, "term-sample-property"]], "sample_weight": [[377, "term-sample_weight"]], "samples": [[377, "term-samples"]], "scikit-learn enhancement proposals": [[377, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[377, "term-scikit-learn-contrib"]], "score": [[377, "term-score"]], "score_samples": [[377, "term-score_samples"]], "scorer": [[377, "term-scorer"]], "scoring": [[377, "term-scoring"]], "semi-supervised": [[377, "term-semi-supervised"]], "semi-supervised learning": [[377, "term-semi-supervised-learning"]], "semisupervised": [[377, "term-semisupervised"]], "set_params": [[377, "term-set_params"]], "sparse graph": [[377, "term-sparse-graph"]], "sparse matrix": [[377, "term-sparse-matrix"]], "split": [[377, "term-split"]], "supervised": [[377, "term-supervised"]], "supervised learning": [[377, "term-supervised-learning"]], "target": [[377, "term-target"]], "targets": [[377, "term-targets"]], "transduction": [[377, "term-transduction"]], "transductive": [[377, "term-transductive"]], "transform": [[377, "term-transform"]], "transformer": [[377, "term-transformer"]], "transformers": [[377, "term-transformers"]], "unlabeled": [[377, "term-unlabeled"]], "unlabeled data": [[377, "term-unlabeled-data"]], "unsupervised": [[377, "term-unsupervised"]], "unsupervised learning": [[377, "term-unsupervised-learning"]], "vectorizer": [[377, "term-vectorizer"]], "vectorizers": [[377, "term-vectorizers"]], "verbose": [[377, "term-verbose"]], "warm_start": [[377, "term-warm_start"]], "module": [[388, "module-sklearn.base"], [388, "module-sklearn.calibration"], [388, "module-sklearn.cluster"], [388, "module-sklearn.compose"], [388, "module-sklearn.covariance"], [388, "module-sklearn.cross_decomposition"], [388, "module-sklearn.datasets"], [388, "module-sklearn.decomposition"], [388, "module-sklearn.discriminant_analysis"], [388, "module-sklearn.dummy"], [388, "module-sklearn.ensemble"], [388, "module-sklearn.exceptions"], [388, "module-sklearn.experimental"], [388, "module-sklearn.feature_extraction"], [388, "module-sklearn.feature_extraction.image"], [388, "module-sklearn.feature_extraction.text"], [388, "module-sklearn.feature_selection"], [388, "module-sklearn.gaussian_process"], [388, "module-sklearn.impute"], [388, "module-sklearn.inspection"], [388, "module-sklearn.isotonic"], [388, "module-sklearn.kernel_approximation"], [388, "module-sklearn.kernel_ridge"], [388, "module-sklearn.linear_model"], [388, "module-sklearn.manifold"], [388, "module-sklearn.metrics"], [388, "module-sklearn.metrics.cluster"], [388, "module-sklearn.metrics.pairwise"], [388, "module-sklearn.mixture"], [388, "module-sklearn.model_selection"], [388, "module-sklearn.multiclass"], [388, "module-sklearn.multioutput"], [388, "module-sklearn.naive_bayes"], [388, "module-sklearn.neighbors"], [388, "module-sklearn.neural_network"], [388, "module-sklearn.pipeline"], [388, "module-sklearn.preprocessing"], [388, "module-sklearn.random_projection"], [388, "module-sklearn.semi_supervised"], [388, "module-sklearn.svm"], [388, "module-sklearn.tree"], [388, "module-sklearn.utils"], [553, "module-sklearn.experimental.enable_halving_search_cv"], [554, "module-sklearn.experimental.enable_hist_gradient_boosting"], [555, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[388, "module-sklearn.base"]], "sklearn.calibration": [[388, "module-sklearn.calibration"]], "sklearn.cluster": [[388, "module-sklearn.cluster"]], "sklearn.compose": [[388, "module-sklearn.compose"]], "sklearn.covariance": [[388, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[388, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[388, "module-sklearn.datasets"]], "sklearn.decomposition": [[388, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[388, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[388, "module-sklearn.dummy"]], "sklearn.ensemble": [[388, "module-sklearn.ensemble"]], "sklearn.exceptions": [[388, "module-sklearn.exceptions"]], "sklearn.experimental": [[388, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[388, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[388, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[388, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[388, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[388, "module-sklearn.gaussian_process"]], "sklearn.impute": [[388, "module-sklearn.impute"]], "sklearn.inspection": [[388, "module-sklearn.inspection"]], "sklearn.isotonic": [[388, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[388, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[388, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[388, "module-sklearn.linear_model"]], "sklearn.manifold": [[388, "module-sklearn.manifold"]], "sklearn.metrics": [[388, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[388, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[388, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[388, "module-sklearn.mixture"]], "sklearn.model_selection": [[388, "module-sklearn.model_selection"]], "sklearn.multiclass": [[388, "module-sklearn.multiclass"]], "sklearn.multioutput": [[388, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[388, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[388, "module-sklearn.neighbors"]], "sklearn.neural_network": [[388, "module-sklearn.neural_network"]], "sklearn.pipeline": [[388, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[388, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[388, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[388, "module-sklearn.semi_supervised"]], "sklearn.svm": [[388, "module-sklearn.svm"]], "sklearn.tree": [[388, "module-sklearn.tree"]], "sklearn.utils": [[388, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[400, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[401, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[402, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[403, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[403, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[403, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[404, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[404, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[404, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[404, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[404, "sklearn.base.BiclusterMixin.get_submatrix"]], "classifiermixin (class in sklearn.base)": [[405, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[405, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[406, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[406, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[407, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[407, "sklearn.base.DensityMixin.score"]], "regressormixin (class in sklearn.base)": [[408, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[408, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[409, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[409, "sklearn.base.TransformerMixin.fit_transform"]], "clone() (in module sklearn.base)": [[410, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[411, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[412, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[413, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[413, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[413, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[413, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[413, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[413, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[413, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[414, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[414, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[414, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[414, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[415, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[416, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[416, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[416, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[416, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[416, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[416, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[417, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[417, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[417, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[417, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[417, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[418, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.predict"]], "set_params() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[418, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[419, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.score"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[419, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[420, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[420, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[420, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[420, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[420, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[421, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[421, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[421, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[422, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.score"]], "set_params() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[422, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[423, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[423, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[423, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[423, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[423, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[423, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[424, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.score"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[424, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[425, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[425, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[425, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[425, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[425, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[426, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[426, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[426, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[426, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[426, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[426, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[426, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[426, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[427, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[427, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[427, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[427, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[427, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[428, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[428, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[428, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[428, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[428, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[428, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[428, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[428, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[429, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[430, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[431, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[432, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[433, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[434, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[435, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[436, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[437, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[438, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[439, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[439, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[439, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[439, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[439, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[439, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_params() (sklearn.compose.columntransformer method)": [[439, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[439, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[440, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[440, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[440, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[440, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[440, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[440, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[440, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[441, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[442, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[443, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[444, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[444, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[445, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[445, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[446, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[446, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[447, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[447, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[448, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[448, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[449, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[449, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[450, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[450, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[451, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[451, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[452, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[453, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[454, "sklearn.covariance.ledoit_wolf"]], "shrunk_covariance() (in module sklearn.covariance)": [[455, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[456, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[456, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.score"]], "set_params() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[456, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[457, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[457, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[457, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[458, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[458, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.score"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[458, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[459, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[459, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[459, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[459, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[459, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[459, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[459, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[460, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[461, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[462, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[463, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[464, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[465, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[466, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[467, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[468, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[469, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[470, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[471, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[472, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[473, "sklearn.datasets.get_data_home"]], "load_boston() (in module sklearn.datasets)": [[474, "sklearn.datasets.load_boston"]], "load_breast_cancer() (in module sklearn.datasets)": [[475, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[476, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[477, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[478, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[479, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[480, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[481, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[482, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[483, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[484, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[486, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[487, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[488, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[489, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[490, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[491, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[506, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[506, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[506, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[506, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[506, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[506, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[506, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[507, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[507, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[508, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.inverse_transform"]], "set_params() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[508, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[509, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[509, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[510, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_params() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[510, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[511, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[511, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "inner_stats_ (sklearn.decomposition.minibatchdictionarylearning property)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.inner_stats_"]], "iter_offset_ (sklearn.decomposition.minibatchdictionarylearning property)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.iter_offset_"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "random_state_ (sklearn.decomposition.minibatchdictionarylearning property)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.random_state_"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[512, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[513, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[513, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[514, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[514, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[515, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.inverse_transform"]], "set_params() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[515, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[516, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.inverse_transform"]], "n_features_ (sklearn.decomposition.pca property)": [[516, "sklearn.decomposition.PCA.n_features_"]], "score() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.score_samples"]], "set_params() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[516, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[517, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[517, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[517, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[517, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[517, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[517, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[517, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[517, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[517, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[518, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_params() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[518, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[519, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[519, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[520, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[521, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[522, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[523, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[524, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[525, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[526, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[526, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[527, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[527, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[527, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[527, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[527, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[527, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[528, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[528, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "estimator_ (sklearn.ensemble.adaboostclassifier property)": [[528, "sklearn.ensemble.AdaBoostClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[528, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[528, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[529, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[529, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.adaboostregressor property)": [[529, "sklearn.ensemble.AdaBoostRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[529, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[529, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[530, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[530, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.baggingclassifier property)": [[530, "sklearn.ensemble.BaggingClassifier.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[530, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[530, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[531, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[531, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.baggingregressor property)": [[531, "sklearn.ensemble.BaggingRegressor.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[531, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[531, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[531, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[531, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[531, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[531, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[532, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[532, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimator_ (sklearn.ensemble.extratreesclassifier property)": [[532, "sklearn.ensemble.ExtraTreesClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[532, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[532, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[533, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[533, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimator_ (sklearn.ensemble.extratreesregressor property)": [[533, "sklearn.ensemble.ExtraTreesRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[533, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[533, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[534, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[534, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[534, "sklearn.ensemble.GradientBoostingClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[534, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "loss_ (sklearn.ensemble.gradientboostingclassifier property)": [[534, "sklearn.ensemble.GradientBoostingClassifier.loss_"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[534, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[535, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[535, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[535, "sklearn.ensemble.GradientBoostingRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[535, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "loss_ (sklearn.ensemble.gradientboostingregressor property)": [[535, "sklearn.ensemble.GradientBoostingRegressor.loss_"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[535, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[536, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[537, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[538, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[538, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.decision_function"]], "estimator_ (sklearn.ensemble.isolationforest property)": [[538, "sklearn.ensemble.IsolationForest.estimator_"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[538, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[538, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[539, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[539, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimator_ (sklearn.ensemble.randomforestclassifier property)": [[539, "sklearn.ensemble.RandomForestClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[539, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[539, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[540, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[540, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimator_ (sklearn.ensemble.randomforestregressor property)": [[540, "sklearn.ensemble.RandomForestRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[540, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[540, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[541, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[541, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimator_ (sklearn.ensemble.randomtreesembedding property)": [[541, "sklearn.ensemble.RandomTreesEmbedding.estimator_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[541, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[541, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[542, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[542, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[542, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.score"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[542, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[543, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[543, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[543, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.score"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[543, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[544, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[544, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.score"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[544, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[545, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[545, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.score"]], "set_params() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[545, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[546, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[546, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[547, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[547, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[548, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[548, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[549, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[549, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[550, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[550, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[551, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[551, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[552, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[552, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[553, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_hist_gradient_boosting": [[554, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.experimental.enable_iterative_imputer": [[555, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[556, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[556, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[557, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[557, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[557, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[557, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[557, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[557, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[558, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[558, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[558, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[558, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[558, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[559, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[560, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[561, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[562, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[563, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[563, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[564, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[564, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[565, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[565, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[566, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[567, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[567, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[568, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[568, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.score"]], "set_params() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[568, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[569, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[569, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.score"]], "set_params() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[569, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[570, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[570, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[571, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[571, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[572, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[572, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[572, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[572, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[573, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[573, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[574, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[574, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[575, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[575, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[576, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[576, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[576, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[576, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[576, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "transform() (sklearn.feature_selection.selectormixin method)": [[576, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[577, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[578, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[579, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[580, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[581, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[582, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[583, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[584, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[585, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[586, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[587, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[588, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[589, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[589, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[589, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[589, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[589, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[589, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[589, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[589, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[589, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[589, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[589, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[589, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[590, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[591, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[591, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[592, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[593, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[593, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[593, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[593, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[593, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[593, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[593, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[593, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[593, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[593, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[593, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[593, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[594, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[594, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[594, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[594, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[594, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[594, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[594, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[594, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[594, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[594, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[594, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[594, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[595, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[596, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[596, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[596, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[596, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[596, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[596, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[596, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[596, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[596, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[596, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[596, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[596, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[597, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[597, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[597, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[597, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[597, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[597, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[597, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[597, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[597, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[597, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[597, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[598, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[599, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[599, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[599, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[599, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[599, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[599, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[599, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[599, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[599, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[599, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[599, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[600, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[601, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[602, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[602, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[602, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[602, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[602, "sklearn.impute.IterativeImputer.get_params"]], "set_params() (sklearn.impute.iterativeimputer method)": [[602, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[602, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[603, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[603, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[603, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[603, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[603, "sklearn.impute.KNNImputer.get_params"]], "set_params() (sklearn.impute.knnimputer method)": [[603, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[603, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[604, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[604, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[604, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[604, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[604, "sklearn.impute.MissingIndicator.get_params"]], "set_params() (sklearn.impute.missingindicator method)": [[604, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[604, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[605, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_params() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[605, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[606, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[606, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[606, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[607, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[607, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[607, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[608, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[609, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[610, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.score"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[610, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[611, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[612, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[613, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[614, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[614, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[614, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[614, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[614, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[614, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[614, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[615, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[616, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[616, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[616, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[616, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[616, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[616, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[616, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[617, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[618, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[618, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[618, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[618, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[618, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[618, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[619, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[619, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[619, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[619, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[619, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[619, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[620, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[620, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[620, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[620, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[620, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[620, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[621, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[621, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[621, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[621, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[621, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[621, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[621, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[621, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[622, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[622, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[622, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[622, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[622, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[622, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[622, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[623, "sklearn.linear_model.GammaRegressor"]], "family (sklearn.linear_model.gammaregressor property)": [[623, "sklearn.linear_model.GammaRegressor.family"]], "fit() (sklearn.linear_model.gammaregressor method)": [[623, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[623, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[623, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[623, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[623, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[624, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[624, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[624, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[624, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[624, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[624, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[625, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[625, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[625, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[625, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[625, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[625, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[626, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[626, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[626, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[626, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[626, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[626, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[627, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[627, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[627, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[627, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[627, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[627, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[627, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[627, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[628, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[628, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[628, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[628, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[628, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[628, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[628, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[629, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[629, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[629, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[629, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[629, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[629, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[630, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[630, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[630, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[630, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[630, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[630, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[631, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[631, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[631, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[631, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[631, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[631, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[632, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[632, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[632, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[632, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[632, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[632, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[633, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[633, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[634, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[634, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[635, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[635, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[635, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[635, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[635, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[635, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[635, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[635, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[636, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[637, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[637, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[637, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[637, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[637, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[637, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[637, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[637, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[638, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[638, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[638, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[638, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[638, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[638, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[638, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[639, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[639, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[639, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[639, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[639, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[639, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[640, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[640, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[640, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[640, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[640, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[641, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[642, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[643, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[643, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[644, "sklearn.linear_model.PoissonRegressor"]], "family (sklearn.linear_model.poissonregressor property)": [[644, "sklearn.linear_model.PoissonRegressor.family"]], "fit() (sklearn.linear_model.poissonregressor method)": [[644, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[644, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[644, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[644, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[644, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[645, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[645, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[645, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[645, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[645, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[645, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[646, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[646, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[646, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[646, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[646, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[646, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[647, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[647, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[647, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[647, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[647, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[647, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[648, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[648, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[648, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[648, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[648, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[649, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[649, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[649, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[649, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[649, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[649, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[649, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[649, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[650, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[650, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[650, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[650, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[650, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[650, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[650, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[651, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[651, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[652, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[652, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[653, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[653, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[654, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[654, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[654, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[654, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[654, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[654, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[655, "sklearn.linear_model.TweedieRegressor"]], "family (sklearn.linear_model.tweedieregressor property)": [[655, "sklearn.linear_model.TweedieRegressor.family"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[655, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[655, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[655, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[655, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[655, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[656, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[657, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[658, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[659, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[660, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[661, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[662, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[663, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.reconstruction_error"]], "set_params() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[663, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[664, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[664, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[664, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[664, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[664, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[664, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[664, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[665, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[665, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[665, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[665, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[665, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[666, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[666, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[666, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[666, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[666, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[667, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[667, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[667, "sklearn.manifold.TSNE.fit_transform"]], "get_params() (sklearn.manifold.tsne method)": [[667, "sklearn.manifold.TSNE.get_params"]], "set_params() (sklearn.manifold.tsne method)": [[667, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[668, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[669, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[670, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[671, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[672, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[672, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[672, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[672, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[673, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[673, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[673, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[673, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[674, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[674, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[674, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[674, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[674, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[675, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[675, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[675, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[675, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[676, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[676, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[676, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[676, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[677, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[678, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[679, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[680, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[681, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[682, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[683, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[684, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[685, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[686, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[687, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[688, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[689, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[690, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[691, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[692, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[694, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[695, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[696, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[700, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[705, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[706, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[707, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[708, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[709, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[713, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[714, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[715, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[716, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[717, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[718, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[719, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[720, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[721, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[722, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[723, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[724, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[725, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[726, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[727, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[731, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[732, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[733, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[734, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[735, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[736, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[737, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[751, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[752, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[753, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[754, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[755, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[756, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[762, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[763, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[765, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[766, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[767, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[768, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[768, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[769, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[769, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[770, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[770, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[770, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[770, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[771, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[771, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[771, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[772, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[772, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[772, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[773, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[773, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[773, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[773, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[774, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[774, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[775, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[775, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[775, "sklearn.model_selection.KFold.split"]], "leaveonegroupout (class in sklearn.model_selection)": [[776, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[776, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[776, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[777, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[777, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[777, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[778, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[778, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[778, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[779, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[779, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[779, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[780, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[781, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[782, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[782, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[782, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[783, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[783, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[783, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[783, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[784, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[784, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[784, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[785, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[785, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[785, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[786, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[786, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[786, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[787, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[787, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[787, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[788, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[788, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[788, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[789, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[789, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[789, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[790, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[790, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[790, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[791, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[792, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[793, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[794, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[795, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[796, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[797, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[798, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[799, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[799, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[799, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[800, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[800, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[800, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[800, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[801, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[801, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[801, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[801, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[801, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[801, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[802, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[802, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[803, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[803, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[804, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[804, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[804, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[804, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[804, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[804, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[804, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[805, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[805, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[805, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[805, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[805, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[805, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[806, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[806, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[807, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[807, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[808, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[808, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[809, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[809, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[810, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[810, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[811, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[811, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[812, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[812, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[813, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[813, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[814, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[814, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[815, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[815, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[816, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[816, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[816, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[816, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[816, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[816, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[816, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[817, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[817, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[818, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[818, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[818, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[818, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[818, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[818, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[819, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[819, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[820, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[821, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[822, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[823, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[824, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[825, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[826, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[827, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[827, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[828, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[828, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[829, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[829, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[829, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[829, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[829, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[829, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[829, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[830, "sklearn.pipeline.FeatureUnion"]], "fit() (sklearn.pipeline.featureunion method)": [[830, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[830, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[830, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[830, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[830, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_params() (sklearn.pipeline.featureunion method)": [[830, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[830, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[831, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[831, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[831, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[831, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[831, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.score_samples"]], "set_params() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[831, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[832, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[833, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[834, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[834, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[834, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[834, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[834, "sklearn.preprocessing.Binarizer.get_params"]], "set_params() (sklearn.preprocessing.binarizer method)": [[834, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[834, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[835, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[835, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[836, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[836, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[837, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[837, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[837, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[837, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[837, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[837, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[837, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[838, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[838, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[838, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[838, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[838, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[838, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[838, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[839, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[839, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[839, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[839, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[839, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[839, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[839, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[840, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[840, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[841, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[841, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[842, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[842, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[842, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[842, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[842, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[842, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[843, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[843, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[843, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[843, "sklearn.preprocessing.Normalizer.get_params"]], "set_params() (sklearn.preprocessing.normalizer method)": [[843, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[843, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[844, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[844, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[845, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[846, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[846, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[846, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[846, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[846, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[846, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[846, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[847, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[848, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[849, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[850, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[850, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[850, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[850, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[850, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[850, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[851, "sklearn.preprocessing.StandardScaler.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[852, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[853, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[854, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[855, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[856, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[857, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[858, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[859, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[860, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[861, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[862, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[862, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[863, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[863, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[864, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[865, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[865, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[865, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[865, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[865, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[865, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[865, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[866, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[866, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[866, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[866, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[866, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[866, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[866, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[867, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[868, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[869, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[870, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[870, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[871, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[871, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[871, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[871, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[871, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[871, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[872, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[872, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[872, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[872, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[872, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[872, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[873, "sklearn.svm.NuSVR"]], "class_weight_ (sklearn.svm.nusvr property)": [[873, "sklearn.svm.NuSVR.class_weight_"]], "coef_ (sklearn.svm.nusvr property)": [[873, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[873, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[873, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[873, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[873, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[873, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[873, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[874, "sklearn.svm.OneClassSVM"]], "class_weight_ (sklearn.svm.oneclasssvm property)": [[874, "sklearn.svm.OneClassSVM.class_weight_"]], "coef_ (sklearn.svm.oneclasssvm property)": [[874, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[874, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[874, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[875, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[875, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[875, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[875, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[875, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[875, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[876, "sklearn.svm.SVR"]], "class_weight_ (sklearn.svm.svr property)": [[876, "sklearn.svm.SVR.class_weight_"]], "coef_ (sklearn.svm.svr property)": [[876, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[876, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[876, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[876, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[876, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[876, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[876, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[877, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[878, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[878, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[878, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[879, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[879, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[879, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[880, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[880, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[880, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[881, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[881, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[881, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[882, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[883, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[884, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[885, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[885, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[886, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[887, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[888, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[889, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[890, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[891, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[892, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[893, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[894, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[895, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[896, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[897, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[898, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[899, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[900, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[901, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[902, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[903, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[904, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[905, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[906, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[907, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[908, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[909, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[910, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[911, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[912, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[913, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[914, "sklearn.utils.metaestimators.available_if"]], "if_delegate_has_method() (in module sklearn.utils.metaestimators)": [[915, "sklearn.utils.metaestimators.if_delegate_has_method"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[916, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[917, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[918, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[919, "sklearn.utils.murmurhash3_32"]], "parallel_backend() (in module sklearn.utils)": [[920, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[921, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[922, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[923, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[924, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[925, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[926, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[927, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[928, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[929, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[930, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[931, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[932, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[933, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[934, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[935, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[936, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[937, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[938, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[939, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[940, "sklearn.utils.validation.has_fit_parameter"]]}})