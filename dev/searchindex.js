Search.setIndex({"alltitles": {"(Generalized) linear models": [[217, "generalized-linear-models"]], "1-way partial dependence with different models": [[191, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[104, "newsgroups-dataset"]], "2D interaction plots": [[191, "d-interaction-plots"]], "3D representation": [[191, "d-representation"]], "A constant prediction baseline": [[217, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[93, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[82, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[98, null]], "A more flexible plotting API": [[327, "a-more-flexible-plotting-api"]], "A note on shuffling": [[418, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[388, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[381, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1004, "aic-and-bic-criteria"]], "API Interface": [[405, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1046, "api-changes"]], "API changes summary": [[1039, "api-changes-summary"], [1039, "id4"], [1039, "id7"], [1039, "id10"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1042, "api-changes-summary"], [1043, "api-changes-summary"], [1044, "api-changes-summary"], [1045, "api-changes-summary"], [1045, "id6"], [1046, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[384, "apis-of-scikit-learn-objects"]], "ARDRegression": [[651, null]], "ARFF parser": [[376, "arff-parser"]], "AWeber": [[1032, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[180, null]], "Ablation study": [[254, "ablation-study"]], "About the project": [[394, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[415, "access-pipeline-steps"]], "Access to nested parameters": [[415, "access-to-nested-parameters"]], "Accuracy of the Model": [[192, "accuracy-of-the-model"]], "Accuracy score": [[1008, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[360, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[421, "adaboost"]], "AdaBoostClassifier": [[560, null]], "AdaBoostRegressor": [[561, null]], "Add support for monotonic constraints in tree-based models": [[331, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[414, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[1000, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[645, null]], "Addressing the problem with a business metric": [[269, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[255, null]], "Advantages:": [[414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null]], "Affinity Propagation": [[414, "affinity-propagation"]], "AffinityPropagation": [[446, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[447, null]], "Aggressive elimination of candidates": [[997, "aggressive-elimination-of-candidates"]], "Algorithms": [[1012, "algorithms"]], "Alpine Linux": [[400, "alpine-linux"]], "Alternatives to brute force parameter search": [[997, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[254, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[135, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[94, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[400, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[137, "analysis"]], "Analysis of a bag-of-words document classifier": [[356, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[150, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[191, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[997, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[422, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[295, null]], "Arch Linux": [[400, "arch-linux"]], "Architectural / general goals": [[1028, "architectural-general-goals"]], "Array API support (experimental)": [[410, null]], "Artwork": [[0, "artwork"]], "Attributes": [[396, "attributes"]], "Authors": [[1039, "authors"], [1039, "id20"]], "Automated Contributions Policy": [[382, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[202, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1004, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[395, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1036, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1035, null]], "BIRCH": [[414, "birch"]], "BNP Paribas Cardif": [[1032, "id29"]], "Bagging meta-estimator": [[421, "bagging-meta-estimator"]], "BaggingClassifier": [[562, null]], "BaggingRegressor": [[563, null]], "Balance model complexity and cross-validated score": [[274, null]], "Balanced accuracy score": [[1008, "balanced-accuracy-score"]], "Ball Tree": [[1011, "ball-tree"]], "BallTree": [[851, null]], "BaseEstimator": [[428, null]], "BaseEstimator and mixins:": [[384, null]], "Basic kernels": [[424, "basic-kernels"]], "Basic shrinkage": [[416, "basic-shrinkage"]], "Bayesian Regression": [[1004, "bayesian-regression"]], "Bayesian Ridge Regression": [[1004, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[197, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[804, null]], "BayesianRidge": [[652, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[356, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1010, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1013, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[846, null]], "BernoulliRBM": [[867, null]], "Bestofmedia Group": [[1032, "id13"]], "BiclusterMixin": [[429, null]], "Biclustering": [[56, null], [187, "biclustering"], [378, "biclustering"], [411, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[411, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[191, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[874, null]], "Binary Case": [[1004, "binary-case"]], "Binary case": [[1008, "binary-case"]], "Binary classification": [[1008, "binary-classification"]], "Birch": [[448, null]], "Birchbox": [[1032, "id12"]], "Bisecting K-Means": [[414, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[449, null]], "BisectingKMeans: divide and cluster": [[328, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[124, null]], "Boil down your script to something as small as possible": [[387, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[163, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1032, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[379, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1008, "brier-score-loss"]], "Brute Force": [[1011, "brute-force"]], "Bug Tracker": [[1031, "bug-tracker"]], "Bug fixes": [[1042, "bug-fixes"], [1042, "id1"], [1042, "id3"], [1043, "bug-fixes"], [1043, "id3"], [1044, "bug-fixes"], [1044, "id3"], [1045, "bug-fixes"], [1045, "id5"], [1046, "bug-fixes"], [1046, "id4"]], "Bug triaging and issue curation": [[381, null]], "Build a pipeline": [[415, "build-a-pipeline"]], "Build dependencies": [[380, "build-dependencies"]], "Build the dataset": [[179, "build-the-dataset"]], "Building a specific version from a tag": [[380, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[390, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[380, "building-from-source"]], "Building the documentation": [[382, "building-the-documentation"]], "Bulk versus Atomic mode": [[369, "bulk-versus-atomic-mode"]], "Bunch": [[926, null]], "CCA": [[488, null]], "CCA (PLS mode B with symmetric deflation)": [[117, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[365, "cv-splitters"], [365, "id3"]], "Caching nearest neighbors": [[297, null]], "Caching transformers within a Pipeline": [[106, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[415, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[443, null]], "Calibrating a classifier": [[412, "calibrating-a-classifier"]], "Calibration": [[60, null], [187, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [412, "calibration-curves"]], "Calibration of the confidence interval": [[150, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[444, null]], "California Housing dataset": [[377, "california-housing-dataset"]], "Calinski-Harabasz Index": [[414, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[117, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[417, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[254, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[147, null]], "Categorical Features Support": [[421, "categorical-features-support"]], "Categorical Naive Bayes": [[1010, "categorical-naive-bayes"]], "CategoricalNB": [[847, null]], "Centering kernel matrices": [[1018, "centering-kernel-matrices"]], "Chain of binary classifiers": [[294, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[382, "change-the-default-value-of-a-parameter"]], "Change.org": [[1032, "id14"]], "Changed displays": [[1055, "changed-displays"]], "Changed models": [[1046, "changed-models"], [1047, "changed-models"], [1047, "id9"], [1047, "id22"], [1048, "changed-models"], [1048, "id6"], [1049, "changed-models"], [1050, "changed-models"], [1050, "id3"], [1051, "changed-models"], [1052, "changed-models"], [1053, "changed-models"], [1053, "id6"], [1054, "changed-models"], [1054, "id7"], [1055, "changed-models"], [1055, "id4"], [1056, "changed-models"], [1056, "id1"], [1057, "changed-models"]], "Changelog": [[1039, "changelog"], [1039, "id1"], [1039, "id3"], [1039, "id6"], [1039, "id9"], [1039, "id12"], [1039, "id14"], [1039, "id16"], [1039, "id18"], [1039, "id19"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1042, "changelog"], [1043, "changelog"], [1043, "id2"], [1044, "changelog"], [1044, "id2"], [1045, "changelog"], [1045, "id1"], [1045, "id3"], [1046, "changelog"], [1046, "id2"], [1047, "changelog"], [1047, "id1"], [1047, "id5"], [1047, "id10"], [1047, "id23"], [1048, "changelog"], [1048, "id1"], [1048, "id2"], [1048, "id7"], [1049, "changelog"], [1049, "id1"], [1049, "id4"], [1050, "changelog"], [1050, "id1"], [1050, "id4"], [1051, "changelog"], [1051, "id1"], [1051, "id4"], [1052, "changelog"], [1052, "id6"], [1053, "changelog"], [1053, "id1"], [1053, "id7"], [1054, "changelog"], [1054, "id1"], [1054, "id9"], [1055, "changelog"], [1055, "id1"], [1055, "id6"], [1056, "changelog"], [1056, "id3"], [1057, "changelog"], [1057, "id2"], [1057, "id6"], [1058, "changelog"]], "Changes impacting all modules": [[1054, "changes-impacting-all-modules"], [1054, "id8"], [1055, "changes-impacting-all-modules"], [1055, "id5"], [1056, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1056, "changes-impacting-many-modules"], [1057, "changes-impacting-many-modules"], [1057, "id1"], [1057, "id5"], [1058, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1047, "changes-to-estimator-checks"], [1048, "changes-to-estimator-checks"], [1049, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[390, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[324, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[190, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1006, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[419, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[402, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[396, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[278, null]], "Class likelihood ratios": [[1008, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[430, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [182, "classification"], [187, "classification"], [1004, "classification"], [1011, "id4"], [1012, "classification"], [1022, "classification"], [1023, "classification"], [1024, "classification"]], "Classification and ROC analysis": [[285, "classification-and-roc-analysis"]], "Classification criteria": [[1024, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1008, "classification-metrics"]], "Classification of text documents using sparse features": [[356, null]], "Classification pipeline": [[104, "classification-pipeline"]], "Classification report": [[1008, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[842, null], [1009, "classifierchain"]], "ClassifierMixin": [[431, null]], "ClassifierTags": [[927, null]], "Clear definition of the public API": [[1049, "clear-definition-of-the-public-api"]], "Cloning": [[384, "cloning"]], "Closing issues: a tough call": [[381, null]], "Cluster centers - MiniBatchKMeans": [[123, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[432, null]], "Clustering": [[71, null], [187, "clustering"], [414, null]], "Clustering evaluation summary": [[357, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[419, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1008, "clustering-metrics"]], "Clustering performance evaluation": [[414, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[357, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[357, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1043, "code-contributors"], [1044, "code-contributors"], [1045, "code-contributors"], [1045, "id7"]], "Code Review Guidelines": [[382, "code-review-guidelines"]], "Code and Documentation Contributors": [[1046, "code-and-documentation-contributors"], [1046, "id10"], [1047, "code-and-documentation-contributors"], [1047, "id8"], [1047, "id21"], [1047, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[384, "coding-guidelines"]], "Coefficients comparison": [[288, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1008, "cohen-s-kappa"]], "Color Quantization using K-Means": [[83, null]], "Column Transformer with Heterogeneous Data Sources": [[104, null]], "Column Transformer with Mixed Types": [[105, null]], "ColumnTransformer": [[470, null]], "ColumnTransformer for heterogeneous data": [[415, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[332, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[158, null]], "Combining the display objects into a single plot": [[245, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[382, "commit-message-markers"]], "Common Vectorizer usage": [[422, "common-vectorizer-usage"]], "Common cases: predefined values": [[1008, "common-cases-predefined-values"]], "Common estimator checks": [[410, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[365, null]], "Common pitfalls and subtleties": [[365, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[190, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[246, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[311, null]], "Compare cross decomposition methods": [[117, null]], "Compare different approaches to setting the regularization parameter": [[111, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[315, null]], "Compare times of SVR and Kernel Ridge Regression": [[250, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[168, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[197, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[303, null]], "Comparing QuantileRegressor and LinearRegression": [[219, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[143, null]], "Comparing Target Encoder with Other Encoders": [[321, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[244, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[97, null]], "Comparing random forests and the multi-output meta estimator": [[157, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[283, null]], "Comparing the results": [[195, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[203, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[203, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[275, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[275, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[224, null]], "Comparison between grid search and successive halving": [[286, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[167, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[131, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[237, null]], "Comparison of kernel ridge and Gaussian process regression": [[174, null]], "Comparison of kernel ridge regression and SVR": [[250, null]], "Comparison of results": [[113, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[99, null]], "Comparison with special purpose text vectorizers": [[358, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1004, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1010, "complement-naive-bayes"]], "ComplementNB": [[848, null]], "Complexity": [[1011, "complexity"], [1012, "complexity"], [1022, "complexity"], [1023, "complexity"], [1024, "complexity"]], "Complexity analysis": [[277, "complexity-analysis"]], "Composite estimators and parameter spaces": [[997, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[619, null]], "Compression via vector quantization": [[88, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1015, "computation-methods"]], "Computation times": [[1029, null]], "Computational Performance": [[369, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[84, "compute-dbscan"]], "Compute clustering": [[82, "compute-clustering"], [102, "compute-clustering"], [102, "id1"]], "Compute clustering with KMeans": [[99, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[98, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[99, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[222, "compute-paths"]], "Compute regularization path": [[210, "compute-regularization-path"]], "Compute score and computation times": [[143, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[111, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[418, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[368, null]], "Concatenating multiple feature extraction methods": [[108, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[260, null]], "Concluding remarks": [[43, "concluding-remarks"], [241, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [206, "conclusion"], [292, "conclusion"], [298, "conclusion"], [322, "conclusion"], [349, "conclusion"]], "Conclusions": [[202, "conclusions"]], "Configuration switches": [[370, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[369, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[268, null], [1008, "confusion-matrix"]], "ConfusionMatrixDisplay": [[704, null]], "Connectivity graph of an image": [[422, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[269, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[620, null]], "Construct the kernel-based regression models": [[250, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[251, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[251, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[414, "contingency-matrix"]], "Continuous Integration (CI)": [[382, "continuous-integration-ci"]], "Contributing": [[382, null], [394, "contributing"]], "Contributing code": [[382, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[397, "contributors"]], "Controlling randomness": [[365, "controlling-randomness"]], "Controlling the tree size": [[421, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[137, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[578, null]], "Core Contributors": [[397, "core-contributors"]], "Cosine similarity": [[1006, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[269, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[269, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[595, null]], "Covariance estimation": [[110, null], [187, "covariance-estimation"], [416, null]], "Coverage error": [[1008, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[387, null]], "Create ConfusionMatrixDisplay": [[245, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[245, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[245, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[322, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[282, "create-multi-label-data-fit-and-predict"]], "Create the data": [[130, "create-the-data"]], "Create the pipeline": [[348, "create-the-pipeline"]], "Creating a dataset": [[349, "creating-a-dataset"]], "Creating a non-noisy data set": [[221, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[137, "creating-the-dataset"]], "Creating transformers": [[104, "creating-transformers"]], "Cross decomposition": [[116, null], [187, "cross-decomposition"], [417, null]], "Cross validation and model selection": [[418, "cross-validation-and-model-selection"]], "Cross validation iterators": [[418, "cross-validation-iterators"]], "Cross validation of time series data": [[418, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[418, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[418, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[418, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[278, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[163, null]], "Cross-validation: evaluating estimator performance": [[418, null]], "Curve Fitting with Bayesian Ridge Regression": [[198, null]], "Custom Kernels": [[1023, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[332, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[273, null]], "Custom transformers": [[1018, "custom-transformers"]], "Customizing the vectorizer classes": [[422, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[383, null]], "DBSCAN": [[414, "dbscan"], [450, null]], "DO NOT report your data unless it is extremely necessary": [[387, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[192, "data-loading-and-feature-engineering"]], "Data Preparation": [[148, "data-preparation"]], "Data Publica": [[1032, "id21"]], "Data and sample properties": [[396, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [84, "data-generation"], [92, "data-generation"], [154, "data-generation"], [171, "data-generation"], [180, "data-generation"], [265, "data-generation"], [334, "data-generation"], [352, "data-generation"]], "Data generation and model fitting": [[144, "data-generation-and-model-fitting"]], "Data leakage": [[365, "data-leakage"]], "Data leakage during pre-processing": [[365, "data-leakage-during-pre-processing"]], "Data loading": [[276, "data-loading"]], "Data preprocessing": [[151, "data-preprocessing"]], "DataConversionWarning": [[579, null]], "DataDimensionalityWarning": [[580, null]], "DataFrame Support": [[1056, "dataframe-support"]], "DataRobot": [[1032, "id18"]], "Dataiku": [[1032, "id25"]], "Dataset": [[62, "dataset"], [206, "dataset"], [281, "dataset"]], "Dataset Versions": [[376, "dataset-versions"]], "Dataset and Gaussian process generation": [[183, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[282, "dataset-and-model"]], "Dataset based latent variables model": [[117, "dataset-based-latent-variables-model"]], "Dataset examples": [[119, null], [187, "dataset-examples"]], "Dataset generation": [[181, "dataset-generation"], [219, "dataset-generation"]], "Dataset loading utilities": [[375, null], [387, "dataset-loading-utilities"]], "Dataset preparation": [[123, "dataset-preparation"], [237, "dataset-preparation"]], "Dataset preprocessing and model training": [[254, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[374, null]], "Datasets in svmlight / libsvm format": [[376, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[414, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[400, "debian-ubuntu"]], "Debugging CI issues": [[390, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[390, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[397, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[249, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[362, null]], "Decision Tree Regression with AdaBoost": [[138, null]], "Decision Trees": [[187, "decision-trees"], [359, null], [1024, null]], "Decision boundary": [[298, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[339, null]], "Decision path": [[364, "decision-path"]], "DecisionBoundaryDisplay": [[638, null]], "DecisionTreeClassifier": [[919, null]], "DecisionTreeRegressor": [[920, null]], "Decoding text files": [[422, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[419, null]], "Decomposition": [[122, null], [123, "decomposition"], [187, "decomposition"]], "Decomposition: Dictionary learning": [[123, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[270, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[237, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[93, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[273, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[358, "define-preprocessing-functions"]], "Define structure of the data": [[82, "define-structure-of-the-data"]], "Define the classifiers": [[272, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1008, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[84, null]], "Demo of HDBSCAN clustering algorithm": [[90, null]], "Demo of OPTICS clustering algorithm": [[100, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[318, null]], "Demonstration of k-means assumptions": [[92, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[279, null]], "Density Estimation": [[420, null]], "Density Estimation for a Gaussian mixture": [[264, null]], "Density Estimation: Histograms": [[420, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1023, "density-estimation-novelty-detection"]], "DensityMixin": [[433, null]], "Dependencies": [[380, "dependencies"]], "Deprecation": [[382, "deprecation"]], "Deprecation / Default Value Change": [[251, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1049, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[189, "description-of-the-simulated-data"]], "Design the proper kernel": [[179, "design-the-proper-kernel"]], "DetCurveDisplay": [[705, null]], "Detection error tradeoff (DET)": [[1008, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[272, null]], "Developer API for HTML representation": [[384, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[384, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[384, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[390, null]], "Developer\u2019s Guide": [[385, null]], "Developing Estimators": [[134, null], [187, "developing-estimators"]], "Developing scikit-learn estimators": [[384, null]], "Developing with the Plotting API": [[389, null]], "Diabetes dataset": [[379, "diabetes-dataset"]], "DictVectorizer": [[358, "dictvectorizer"], [588, null]], "Dictionary Learning": [[419, "dictionary-learning"]], "Dictionary learning": [[123, "dictionary-learning"]], "Dictionary learning - positive code": [[123, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[123, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[123, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[538, null]], "Differences between solvers": [[1004, "differences-between-solvers"]], "Different label assignment strategies": [[414, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[414, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[384, "different-objects"]], "Different scenario and useful concepts": [[1004, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[405, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[164, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[304, null]], "Dimensionality reduction": [[1011, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[1002, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1018, "discretization"]], "Dispatching": [[392, null]], "Display Objects": [[1036, "display-objects"]], "Display code coverage in pull requests": [[390, "display-code-coverage-in-pull-requests"]], "Display results": [[222, "display-results"]], "Display the distorted image": [[126, "display-the-distorted-image"]], "Displaying Pipelines": [[256, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[256, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[256, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[256, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[256, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[256, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[246, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[706, null]], "Do you plan to implement transform for target y in a pipeline?": [[394, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[394, "do-you-support-pypy"]], "Documentation": [[382, "documentation"], [1039, "documentation"]], "Documentation Resources": [[1031, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1042, "documentation-improvements"], [1043, "documentation-improvements"]], "Domain specific packages": [[1027, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[424, "dot-product-kernel"]], "Dot-product kernel": [[183, "dot-product-kernel"]], "DotProduct": [[621, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[186, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[158, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[376, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null]], "Dropping official support for PyPy": [[1058, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1058, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[1008, "dummy-estimators"]], "DummyClassifier": [[558, null]], "DummyRegressor": [[559, null]], "D\u00b2 score": [[1008, "d2-score"]], "D\u00b2 score for classification": [[1008, "d2-score-for-classification"]], "Earlier versions": [[1039, "earlier-versions"]], "Early stopping in Gradient Boosting": [[148, null]], "Early stopping of Stochastic Gradient Descent": [[225, null]], "Effect of model regularization on training and test error": [[288, null]], "Effect of number of trees and early stopping": [[153, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[320, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[320, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[320, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[109, null]], "Effect of varying threshold for self-training": [[337, null]], "EfficiencyWarning": [[581, null]], "Efficient Linear Algebra & Array Operations": [[391, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[391, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[391, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[123, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1004, "elastic-net"]], "ElasticNet": [[202, "elasticnet"], [653, null]], "ElasticNetCV": [[654, null]], "EllipticEnvelope": [[475, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[238, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[416, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[96, null]], "Empirical validation": [[248, "empirical-validation"]], "EmpiricalCovariance": [[476, null]], "Encoding categorical features": [[1018, "encoding-categorical-features"]], "Encoding strategy": [[88, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1050, "enforcing-keyword-only-arguments"], [1052, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[397, "enhancement-proposals-sleps"]], "Enhancements": [[1042, "enhancements"], [1043, "enhancements"], [1044, "enhancements"], [1045, "enhancements"], [1045, "id4"], [1046, "enhancements"], [1046, "id3"]], "Enriched estimator displays": [[331, "enriched-estimator-displays"]], "Ensemble methods": [[136, null], [187, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[421, null]], "Environment variables": [[370, "environment-variables"]], "Error Calculation": [[148, "error-calculation"]], "Error caused by file path length limit on Windows": [[400, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[137, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[195, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[99, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[195, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[195, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[115, "estimate-the-covariance"]], "Estimate the score": [[186, "estimate-the-score"]], "Estimated Attributes": [[384, "estimated-attributes"]], "Estimation algorithms": [[1002, "estimation-algorithms"]], "Estimator Tags": [[384, "estimator-tags"]], "Estimator types": [[384, "estimator-types"]], "Estimators": [[365, "estimators"], [365, "id2"], [384, "estimators"], [410, "estimators"]], "Estimators that handle NaN values": [[998, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[288, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[114, "evaluation"], [313, "evaluation"]], "Evaluation metrics": [[269, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[254, null]], "Evaluation of the calibration of predictions": [[217, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[217, "evaluation-of-the-ranking-power"]], "Evernote": [[1032, "id6"]], "Exact Kernel PCA": [[419, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[419, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[410, "example-usage"]], "Example with noise-free target": [[181, "example-with-noise-free-target"]], "Example with noisy targets": [[181, "example-with-noisy-targets"]], "Examples": [[187, null], [371, "examples"], [413, "examples"], [1039, "examples"]], "Examples based on real world datasets": [[42, null], [187, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[997, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[183, "exp-sine-squared-kernel"], [424, "exp-sine-squared-kernel"]], "ExpSineSquared": [[622, null]], "Experimental / Under Development": [[1055, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[329, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[386, "experimental-features"]], "Explained variance score": [[1008, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[249, null]], "Exponentiation": [[623, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1026, null]], "External Tutorials": [[1026, "external-tutorials"]], "External dependencies": [[1039, "external-dependencies"]], "ExtraTreeClassifier": [[921, null]], "ExtraTreeRegressor": [[922, null]], "ExtraTreesClassifier": [[564, null]], "ExtraTreesRegressor": [[565, null]], "Extract noisy patches and reconstruct them using the dictionary": [[126, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[126, "extract-reference-patches"]], "Extracting features": [[371, "extracting-features"]], "Extremely Randomized Trees": [[421, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[253, null]], "Faces dataset decompositions": [[123, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[419, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[133, null]], "Factor Analysis components - FA": [[123, "factor-analysis-components-fa"]], "FactorAnalysis": [[539, null]], "Failure of Machine Learning to infer causal effects": [[189, null]], "FastICA": [[540, null]], "FastICA on 2D point clouds": [[125, null]], "Faster parser in fetch_openml": [[329, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[369, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[357, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[327, "feature-names-support"]], "Feature Selection": [[166, null], [187, "feature-selection"]], "Feature agglomeration": [[86, null], [1025, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[89, null]], "Feature binarization": [[1018, "feature-binarization"]], "Feature discretization": [[317, null]], "Feature extraction": [[422, null]], "Feature hashing": [[422, "feature-hashing"]], "Feature importance based on feature permutation": [[144, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[144, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[145, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[421, "feature-importance-evaluation"]], "Feature importance from coefficients": [[172, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[144, null]], "Feature normalization": [[195, "feature-normalization"]], "Feature scaling": [[1025, null]], "Feature selection": [[423, null]], "Feature selection as part of a pipeline": [[423, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[423, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[423, null]], "Feature transformations with ensembles of trees": [[142, null]], "FeatureAgglomeration": [[414, null], [451, null]], "FeatureHasher": [[358, "featurehasher"], [589, null]], "FeatureHasher and DictVectorizer Comparison": [[358, null]], "FeatureUnion": [[870, null]], "FeatureUnion: composite feature spaces": [[415, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[153, null]], "Fedora": [[400, "fedora"]], "Final conclusion": [[174, "final-conclusion"]], "Final remarks": [[92, "final-remarks"]], "Finding the Nearest Neighbors": [[1011, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[124, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[198, "fit-by-cubic-polynomial"]], "Fit models": [[211, "fit-models"], [294, "fit-models"]], "Fit models and plot results": [[92, "fit-models-and-plot-results"]], "Fit regression model": [[151, "fit-regression-model"], [307, "fit-regression-model"], [351, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[302, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[130, "fit-the-models"]], "Fit the regressors": [[197, "fit-the-regressors"], [197, "id2"]], "FitFailedWarning": [[582, null]], "Fitting": [[384, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[219, "fitting-a-quantileregressor"]], "Fitting additional trees": [[421, "fitting-additional-trees"]], "Fitting additional weak-learners": [[421, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[199, null]], "Fitting an elliptic envelope": [[1014, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[395, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[150, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1052, "fixed-models"]], "FixedThresholdClassifier": [[806, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[332, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1039, "fixes"]], "Flexibility of IterativeImputer": [[998, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[390, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[179, null]], "Forest covertypes": [[377, "forest-covertypes"]], "Forest covertypes dataset": [[254, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[414, "fowlkes-mallows-scores"]], "FreeBSD": [[380, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[235, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[394, null]], "From binary to multiclass and multilabel": [[1008, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[381, null]], "FunctionTransformer": [[875, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[263, null]], "GMM covariances": [[262, null]], "GPC examples": [[424, "gpc-examples"]], "Gallery examples": [[428, "gallery-examples"], [431, "gallery-examples"], [434, "gallery-examples"], [437, "gallery-examples"], [438, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [459, "gallery-examples"], [460, "gallery-examples"], [461, "gallery-examples"], [464, "gallery-examples"], [466, "gallery-examples"], [468, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [478, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [485, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [505, "gallery-examples"], [506, "gallery-examples"], [507, "gallery-examples"], [508, "gallery-examples"], [509, "gallery-examples"], [511, "gallery-examples"], [513, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [537, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [575, "gallery-examples"], [576, "gallery-examples"], [577, "gallery-examples"], [588, "gallery-examples"], [589, "gallery-examples"], [591, "gallery-examples"], [594, "gallery-examples"], [595, "gallery-examples"], [596, "gallery-examples"], [597, "gallery-examples"], [598, "gallery-examples"], [600, "gallery-examples"], [601, "gallery-examples"], [604, "gallery-examples"], [606, "gallery-examples"], [607, "gallery-examples"], [609, "gallery-examples"], [611, "gallery-examples"], [612, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [620, "gallery-examples"], [621, "gallery-examples"], [622, "gallery-examples"], [624, "gallery-examples"], [625, "gallery-examples"], [626, "gallery-examples"], [629, "gallery-examples"], [630, "gallery-examples"], [632, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [642, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [659, "gallery-examples"], [660, "gallery-examples"], [662, "gallery-examples"], [663, "gallery-examples"], [664, "gallery-examples"], [665, "gallery-examples"], [666, "gallery-examples"], [669, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [687, "gallery-examples"], [688, "gallery-examples"], [689, "gallery-examples"], [691, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [699, "gallery-examples"], [700, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [712, "gallery-examples"], [713, "gallery-examples"], [714, "gallery-examples"], [716, "gallery-examples"], [719, "gallery-examples"], [720, "gallery-examples"], [724, "gallery-examples"], [725, "gallery-examples"], [726, "gallery-examples"], [734, "gallery-examples"], [736, "gallery-examples"], [739, "gallery-examples"], [741, "gallery-examples"], [742, "gallery-examples"], [744, "gallery-examples"], [745, "gallery-examples"], [748, "gallery-examples"], [749, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [755, "gallery-examples"], [756, "gallery-examples"], [757, "gallery-examples"], [759, "gallery-examples"], [760, "gallery-examples"], [762, "gallery-examples"], [764, "gallery-examples"], [768, "gallery-examples"], [785, "gallery-examples"], [786, "gallery-examples"], [789, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [795, "gallery-examples"], [796, "gallery-examples"], [797, "gallery-examples"], [799, "gallery-examples"], [800, "gallery-examples"], [802, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [811, "gallery-examples"], [812, "gallery-examples"], [813, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [840, "gallery-examples"], [841, "gallery-examples"], [842, "gallery-examples"], [844, "gallery-examples"], [846, "gallery-examples"], [848, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [858, "gallery-examples"], [859, "gallery-examples"], [860, "gallery-examples"], [864, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [870, "gallery-examples"], [871, "gallery-examples"], [872, "gallery-examples"], [875, "gallery-examples"], [876, "gallery-examples"], [878, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [890, "gallery-examples"], [891, "gallery-examples"], [892, "gallery-examples"], [895, "gallery-examples"], [897, "gallery-examples"], [900, "gallery-examples"], [904, "gallery-examples"], [905, "gallery-examples"], [907, "gallery-examples"], [908, "gallery-examples"], [909, "gallery-examples"], [911, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [918, "gallery-examples"], [919, "gallery-examples"], [920, "gallery-examples"], [925, "gallery-examples"], [926, "gallery-examples"], [940, "gallery-examples"], [950, "gallery-examples"], [952, "gallery-examples"], [959, "gallery-examples"], [964, "gallery-examples"], [965, "gallery-examples"], [966, "gallery-examples"], [967, "gallery-examples"], [968, "gallery-examples"], [981, "gallery-examples"], [991, "gallery-examples"]], "Gamma loss for gradient boosting": [[330, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[655, null]], "Gaussian Mixture": [[1007, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[261, null]], "Gaussian Mixture Model Selection": [[265, null]], "Gaussian Mixture Model Sine Curve": [[266, null]], "Gaussian Mixture Models": [[187, "gaussian-mixture-models"], [259, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1010, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[424, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[424, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[173, null], [187, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[424, null]], "Gaussian Processes regression: basic introductory example": [[181, null]], "Gaussian mixture models": [[1007, null]], "Gaussian process classification (GPC) on iris dataset": [[176, null], [424, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[174, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[182, null]], "Gaussian random projection": [[1020, "gaussian-random-projection"]], "GaussianMixture": [[805, null]], "GaussianNB": [[849, null]], "GaussianProcessClassifier": [[617, null]], "GaussianProcessRegressor": [[618, null]], "GaussianRandomProjection": [[903, null]], "General Concepts": [[396, "general-concepts"]], "General recommendations": [[365, "general-recommendations"]], "Generalized Linear Models": [[187, "generalized-linear-models"], [196, null], [1004, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[325, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[82, "generate-data"], [102, "generate-data"], [113, "generate-data"], [211, "generate-data"], [313, "generate-data"]], "Generate data with outliers": [[302, "generate-data-with-outliers"]], "Generate distorted image": [[126, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [90, "generate-sample-data"], [98, "generate-sample-data"], [111, "generate-sample-data"], [124, "generate-sample-data"], [125, "generate-sample-data"], [168, "generate-sample-data"], [250, "generate-sample-data"], [288, "generate-sample-data"], [307, "generate-sample-data"], [351, "generate-sample-data"]], "Generate sinusoidal data with noise": [[198, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[272, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [197, "generate-synthetic-dataset"], [197, "id1"], [202, "generate-synthetic-dataset"]], "Generate the data": [[99, "generate-the-data"], [101, "generate-the-data"], [115, "generate-the-data"]], "Generated datasets": [[378, null]], "Generated documentation on GitHub Actions": [[382, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[174, "generating-a-dataset"]], "Generating polynomial features": [[1018, "generating-polynomial-features"]], "Generators for classification and clustering": [[378, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[378, "generators-for-decomposition"]], "Generators for manifold learning": [[378, "generators-for-manifold-learning"]], "Generators for regression": [[378, "generators-for-regression"]], "Generic dictionary learning": [[419, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[599, null]], "Getting Started": [[395, null]], "Getting reproducible results across multiple executions": [[365, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1031, "gitter"]], "Glossary of Common Terms and API Elements": [[396, null]], "Good practices": [[387, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[397, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[149, null]], "Gradient Boosting Regression Trees for Poisson regression": [[217, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[151, null]], "Gradient Boosting regularization": [[152, null]], "Gradient boosting": [[191, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[147, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[147, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[147, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[147, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[421, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[566, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[421, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[421, null]], "GradientBoostingRegressor": [[567, null]], "Graph Routines": [[391, "graph-routines"]], "Graphical model and parametrization": [[1013, "graphical-model-and-parametrization"]], "GraphicalLasso": [[477, null]], "GraphicalLassoCV": [[478, null]], "GridSearchCV": [[807, null]], "Group Shuffle Split": [[418, "group-shuffle-split"]], "Group k-fold": [[418, "group-k-fold"]], "GroupKFold": [[808, null]], "GroupShuffleSplit": [[809, null]], "Grouping infrequent categories in OneHotEncoder": [[328, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[330, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[414, "hdbscan"], [452, null]], "HDBSCAN: hierarchical density-based clustering": [[330, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[810, null]], "HalvingRandomSearchCV": [[811, null]], "Hamming loss": [[1008, "hamming-loss"]], "Handling Multicollinear Features": [[193, "handling-multicollinear-features"]], "Hash Functions": [[391, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[156, null]], "HashingVectorizer": [[357, "hashingvectorizer"], [596, null]], "Helper Functions": [[391, "helper-functions"]], "Helper function": [[183, "helper-function"]], "Helper function to plot embedding": [[238, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1005, "hessian-eigenmapping"]], "Hierarchical Clustering": [[414, "id11"]], "Hierarchical clustering": [[414, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[102, null]], "Higher-level parallelism with joblib": [[370, "higher-level-parallelism-with-joblib"]], "Highlights": [[1039, "highlights"], [1042, "highlights"], [1043, "highlights"], [1046, "highlights"], [1047, "highlights"]], "Hinge loss": [[1008, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[331, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[568, null]], "HistGradientBoostingRegressor": [[569, null]], "Histogram-Based Gradient Boosting": [[421, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[327, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[414, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[394, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[394, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[394, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[394, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[394, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[394, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[394, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[394, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[365, "how-to-avoid-data-leakage"]], "How to contribute": [[382, "how-to-contribute"]], "How to make a good bug report": [[382, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[388, null]], "HowAboutWe": [[1032, "id16"]], "Huber Regression": [[1004, "huber-regression"]], "HuberRegressor": [[656, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[200, null]], "Hugging Face": [[1032, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[624, null]], "Hyperparameter Robustness": [[90, "hyperparameter-robustness"]], "ICE vs. PDP": [[191, "ice-vs-pdp"]], "INFONEA": [[1032, "id24"]], "Illustration of GPC on the XOR dataset": [[424, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[178, null]], "Illustration of Pipeline and GridSearchCV": [[106, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[183, null]], "Image denoising using dictionary learning": [[126, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[422, "image-feature-extraction"]], "Implementation": [[1011, "implementation"]], "Implementation decisions": [[394, "implementation-decisions"]], "Implementation details": [[1022, "implementation-details"], [1023, "implementation-details"]], "Implementing your own scoring object": [[1008, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[320, null]], "Important notes regarding the internal cross-validation": [[413, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[329, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[331, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[326, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[325, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[998, null], [1018, "imputation-of-missing-values"]], "Impute missing values with mean": [[186, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[186, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[186, null]], "Imputing missing values with variants of IterativeImputer": [[185, null]], "In binary classification settings": [[282, "in-binary-classification-settings"]], "In multi-label settings": [[282, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[189, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[189, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[365, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[583, null]], "Incremental PCA": [[127, null], [419, "incremental-pca"]], "Incremental learning": [[371, "incremental-learning"]], "IncrementalPCA": [[541, null]], "Independent component analysis (ICA)": [[419, "independent-component-analysis-ica"]], "Independent components - FastICA": [[123, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[326, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1015, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[91, null]], "Influence of the Input Data Representation": [[369, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[369, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[369, "influence-of-the-number-of-features"]], "Information Criterion": [[997, "information-criterion"]], "Information-criteria based model selection": [[1004, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1018, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[414, null]], "Input validation": [[384, "input-validation"]], "InputTags": [[928, null]], "Inria": [[1032, "id3"]], "Inspection": [[187, "inspection"], [188, null], [399, null]], "Installing nightly builds": [[380, "installing-nightly-builds"]], "Installing scikit-learn": [[400, null]], "Installing the development version of scikit-learn": [[380, null]], "Installing the latest release": [[400, "installing-the-latest-release"]], "Instantiation": [[384, "instantiation"]], "Intel Extension for Scikit-learn": [[400, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[421, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[329, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1027, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[179, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[421, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[190, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[190, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[221, "interpreting-the-plots"]], "Introducing the set_output API": [[258, null]], "Introduction": [[1005, "introduction"]], "Invariance with respect to prevalence": [[278, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1020, "inverse-transform"]], "Iris plants dataset": [[379, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[177, null]], "Isolation Forest": [[1014, "isolation-forest"]], "IsolationForest": [[570, null]], "IsolationForest example": [[154, null]], "Isomap": [[695, null], [1005, "isomap"]], "Isomap Embedding": [[237, "isomap-embedding"]], "Isotonic": [[412, "isotonic"]], "Isotonic Regression": [[247, null]], "Isotonic regression": [[999, null]], "IsotonicRegression": [[642, null]], "Issue Tracker Tags": [[382, "issue-tracker-tags"]], "Issues for New Contributors": [[382, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[186, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[634, null]], "J.P.Morgan": [[1032, "id1"]], "Jaccard similarity coefficient score": [[1008, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[211, null]], "K-D Tree": [[1011, "k-d-tree"]], "K-bins discretization": [[1018, "k-bins-discretization"]], "K-fold": [[418, "k-fold"]], "K-means": [[414, "k-means"]], "K-means Clustering": [[80, null]], "K-means clustering on text features": [[357, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[298, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[876, null]], "KDDCup99 - SA dataset": [[254, "kddcup99-sa-dataset"]], "KDTree": [[852, null]], "KDTree and BallTree Classes": [[1011, "kdtree-and-balltree-classes"]], "KFold": [[812, null]], "KMeans": [[453, null]], "KNN Based Imputation": [[324, "knn-based-imputation"]], "KNNImputer": [[635, null]], "KNeighborsClassifier": [[853, null]], "KNeighborsRegressor": [[854, null]], "KNeighborsTransformer": [[855, null]], "Kddcup 99 dataset": [[377, "kddcup-99-dataset"]], "Keeping the number of features constant": [[998, "keeping-the-number-of-features-constant"]], "Kernel": [[625, null]], "Kernel Approximation": [[187, "kernel-approximation"], [194, null], [1000, null]], "Kernel Density Estimate of Species Distributions": [[308, null]], "Kernel Density Estimation": [[299, null], [420, "kernel-density-estimation"]], "Kernel PCA": [[128, null]], "Kernel Principal Component Analysis (kPCA)": [[419, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[183, "kernel-cookbook"]], "Kernel functions": [[1023, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[174, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[424, "kernel-operators"]], "Kernel ridge": [[174, "kernel-ridge"]], "Kernel ridge regression": [[1001, null]], "KernelCenterer": [[877, null]], "KernelDensity": [[856, null]], "KernelPCA": [[542, null]], "KernelRidge": [[650, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[424, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[327, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1047, "known-major-bugs"], [1048, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[208, null]], "L1-based feature selection": [[423, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[202, null]], "L1-penalty case": [[352, "l1-penalty-case"]], "L2-penalty case": [[352, "l2-penalty-case"]], "LARS Lasso": [[1004, "lars-lasso"]], "LDA": [[1002, "lda"]], "Label Propagation": [[1021, "label-propagation"]], "Label Propagation digits active learning": [[335, null]], "Label Propagation digits: Demonstrating performance": [[334, null]], "Label Propagation learning a complex structure": [[336, null]], "Label binarization": [[1019, "label-binarization"]], "Label encoding": [[1019, "label-encoding"]], "Label ranking average precision": [[1008, "label-ranking-average-precision"]], "LabelBinarizer": [[878, null], [1019, "labelbinarizer"]], "LabelEncoder": [[879, null]], "LabelPropagation": [[906, null]], "LabelSpreading": [[907, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1006, "laplacian-kernel"]], "Lars": [[657, null]], "LarsCV": [[658, null]], "Lasso": [[202, "lasso"], [659, null], [1004, "lasso"]], "Lasso model selection via information criteria": [[204, null]], "Lasso model selection: AIC-BIC / cross-validation": [[206, null]], "Lasso on dense and sparse data": [[203, null]], "Lasso via coordinate descent": [[206, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[206, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[205, null]], "LassoCV": [[660, null]], "LassoLars": [[661, null]], "LassoLarsCV": [[662, null]], "LassoLarsIC": [[663, null]], "Latent Dirichlet Allocation (LDA)": [[419, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[543, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[126, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[85, "learn-the-dictionary-of-images"]], "Learning Curve": [[277, "learning-curve"]], "Learning Git": [[382, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[305, "learning-an-embedding"]], "Learning curve": [[1003, "learning-curve"]], "LearningCurveDisplay": [[813, null]], "Least Angle Regression": [[1004, "least-angle-regression"]], "Leave One Group Out": [[418, "leave-one-group-out"]], "Leave One Out (LOO)": [[418, "leave-one-out-loo"]], "Leave P Groups Out": [[418, "leave-p-groups-out"]], "Leave P Out (LPO)": [[418, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[814, null]], "LeaveOneOut": [[815, null]], "LeavePGroupsOut": [[816, null]], "LeavePOut": [[817, null]], "Ledoit-Wolf shrinkage": [[416, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[112, null]], "LedoitWolf": [[479, null]], "Lessons learned": [[189, "lessons-learned"], [190, "lessons-learned"]], "Limitations of a simple linear model": [[174, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[422, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[369, "limiting-working-memory"]], "Limiting the number of splits": [[147, "limiting-the-number-of-splits"]], "Linear Models": [[1004, null]], "Linear Regression Example": [[213, null]], "Linear algebra libraries": [[369, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[1002, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[349, "linear-kernel"], [1006, "linear-kernel"]], "Linear models with regularization": [[190, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[190, "linear-models-with-sparse-coefficients"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[556, null]], "LinearRegression": [[664, null]], "LinearSVC": [[911, null]], "LinearSVR": [[912, null]], "Link to R\u00b2 score, the coefficient of determination": [[1008, null]], "Links": [[369, "links"]], "Linnerrud dataset": [[379, "linnerrud-dataset"]], "Linux": [[380, "linux"]], "Linux compilers from conda-forge": [[380, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[380, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[147, "load-ames-housing-dataset"]], "Load Data": [[358, "load-data"]], "Load Data and Train a SVC": [[257, "load-data-and-train-a-svc"]], "Load Data and train model": [[245, "load-data-and-train-model"]], "Load and prepare data": [[284, "load-and-prepare-data"], [285, "load-and-prepare-data"], [320, "load-and-prepare-data"]], "Load and prepare data set": [[345, "load-and-prepare-data-set"]], "Load data": [[210, "load-data"]], "Load dataset": [[143, "load-dataset"]], "Load dataset and apply GridSearchCV": [[163, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[238, "load-digits-dataset"]], "Load some data to play with": [[348, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [85, "load-the-data"], [151, "load-the-data"], [298, "load-the-data"]], "Load the dataset": [[93, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[321, "loading-data-from-openml"]], "Loading a dataset": [[294, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[356, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[235, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[422, "loading-features-from-dicts"]], "Loading from external datasets": [[376, "loading-from-external-datasets"]], "Loading other datasets": [[376, null]], "Loading text data": [[357, "loading-text-data"]], "Loading the data": [[172, "loading-the-data"]], "Loading the data and model fitting": [[145, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[120, "loading-the-iris-dataset"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1014, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1005, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[857, null]], "Locally Linear Embedding": [[1005, "locally-linear-embedding"]], "Locally Linear Embeddings": [[237, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[696, null]], "Lock files": [[382, "lock-files"]], "Log loss": [[1008, "log-loss"]], "Logistic Regression 3-class Classifier": [[201, null]], "Logistic function": [[207, null]], "Logistic regression": [[1004, "logistic-regression"]], "LogisticRegression": [[665, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[294, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[666, null]], "Look at the results": [[250, "look-at-the-results"], [351, "look-at-the-results"]], "Loss Functions": [[421, "loss-functions"]], "Lovely": [[1032, "id20"]], "Low-level parallelism": [[414, "low-level-parallelism"], [421, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[370, "lower-level-parallelism-with-openmp"]], "MARS": [[1032, "id28"]], "MDS": [[697, null]], "MLPClassifier": [[868, null]], "MLPRegressor": [[869, null]], "MNIST classification using multinomial logistic + L1": [[233, null]], "MacPorts for Mac OSX": [[400, "macports-for-mac-osx"]], "Machinalis": [[1032, "id22"]], "Mailing Lists": [[1031, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[217, "main-takeaways"]], "Maintainer Information": [[386, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[382, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[421, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[158, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[161, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[239, null]], "Manifold learning": [[187, "manifold-learning"], [236, null], [1005, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[238, null]], "Manually setting the decision threshold": [[413, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[269, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[319, null]], "Mapping to a Gaussian distribution": [[1018, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1018, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[998, "marking-imputed-values"]], "Matern": [[626, null]], "Mathematical Definition": [[1015, "mathematical-definition"]], "Mathematical Details": [[1000, "mathematical-details"]], "Mathematical formulation": [[411, "mathematical-formulation"], [411, "id3"], [421, "mathematical-formulation"], [1011, "mathematical-formulation"], [1022, "mathematical-formulation"], [1023, "mathematical-formulation"], [1024, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[1002, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[1002, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1008, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[183, "matern-kernel"], [424, "matern-kernel"]], "Max error": [[1008, "max-error"]], "MaxAbsScaler": [[315, "maxabsscaler"], [880, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1008, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[414, "mean-shift"]], "Mean absolute error": [[1008, "mean-absolute-error"]], "Mean absolute percentage error": [[1008, "mean-absolute-percentage-error"]], "Mean squared error": [[1008, "mean-squared-error"]], "Mean squared logarithmic error": [[1008, "mean-squared-logarithmic-error"]], "MeanShift": [[454, null]], "Measure and plot the results": [[158, "measure-and-plot-the-results"]], "Median absolute error": [[1008, "median-absolute-error"]], "Memory footprint": [[88, "memory-footprint"]], "Memory usage profiling": [[388, "memory-usage-profiling"]], "Merging Pull Requests": [[386, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [410, "meta-estimators"]], "MetaEstimatorMixin": [[434, null]], "Metadata Routing": [[251, null], [330, "metadata-routing"], [396, "metadata-routing"], [405, null], [1056, "metadata-routing"], [1056, "id2"], [1057, "metadata-routing"], [1058, "metadata-routing"]], "Metadata Routing Support": [[331, "metadata-routing-support"]], "Metadata Routing Support Status": [[405, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[963, null]], "MetadataRouter": [[964, null]], "MethodMapping": [[965, null]], "Methods": [[396, "methods"]], "Metrics": [[410, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1008, null]], "MinCovDet": [[480, null]], "MinMaxScaler": [[315, "minmaxscaler"], [881, null]], "Mini Batch K-Means": [[414, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[419, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[419, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[544, null]], "MiniBatchKMeans": [[455, null]], "MiniBatchNMF": [[545, null]], "MiniBatchNMF: an online version of NMF": [[328, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[546, null]], "Minimal Cost-Complexity Pruning": [[1024, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1052, "minimal-dependencies"], [1053, "minimal-dependencies"]], "Minimum Covariance Determinant": [[416, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[114, "minimum-covariance-determinant-estimator"]], "Misc": [[1039, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [187, "miscellaneous"], [243, null], [1047, "miscellaneous"], [1047, "id40"], [1048, "miscellaneous"], [1049, "miscellaneous"], [1050, "miscellaneous"], [1050, "id13"], [1051, "miscellaneous"], [1052, "miscellaneous"], [1055, "miscellaneous"]], "Misleading values on strongly correlated features": [[1016, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[184, null], [187, "missing-value-imputation"]], "Missing Values Support": [[1024, "missing-values-support"]], "Missing information": [[186, "missing-information"]], "Missing value support for Random Forest": [[331, "missing-value-support-for-random-forest"]], "Missing values support": [[421, "missing-values-support"]], "Missing values support in decision trees": [[330, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[636, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[369, "model-compression"]], "Model Reshaping": [[369, "model-reshaping"]], "Model Selection": [[187, "model-selection"], [267, null]], "Model Selection Enhancements and API Changes": [[1045, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[148, "model-training-and-comparison"]], "Model comparison": [[147, "model-comparison"]], "Model definition": [[288, "model-definition"]], "Model evaluation": [[395, "model-evaluation"]], "Model fitting and extrapolation": [[179, "model-fitting-and-extrapolation"]], "Model persistence": [[408, null]], "Model selection and evaluation": [[409, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[130, null]], "Model selection: development and evaluation": [[997, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[997, "model-specific-cross-validation"]], "Model training and selection": [[171, "model-training-and-selection"], [265, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[356, "model-with-metadata-stripping"]], "Model without metadata stripping": [[356, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[172, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[313, "models-definition"]], "Models robustness to recover the ground truth weights": [[197, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1005, "modified-locally-linear-embedding"]], "Monitoring performance": [[382, "monitoring-performance"]], "Monotonic Constraints": [[155, null], [421, "monotonic-constraints"]], "Monotonic constraints": [[153, "monotonic-constraints"]], "More control with warm_start": [[1012, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[90, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[137, null]], "Multi-class case": [[1008, "multi-class-case"]], "Multi-class classification": [[1023, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[388, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1005, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[240, null]], "Multi-label case": [[1008, "multi-label-case"]], "Multi-label confusion matrix": [[1008, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1012, "multi-layer-perceptron"]], "Multi-layer perceptron": [[191, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[363, null]], "Multi-output problems": [[1024, "multi-output-problems"]], "Multi-task Elastic-Net": [[1004, "multi-task-elastic-net"]], "Multi-task Lasso": [[1004, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[882, null], [1019, "multilabelbinarizer"]], "MultiOutputClassifier": [[843, null], [1009, "multioutputclassifier"]], "MultiOutputRegressor": [[844, null], [1009, "multioutputregressor"]], "MultiTaskElasticNet": [[667, null]], "MultiTaskElasticNetCV": [[668, null]], "MultiTaskLasso": [[669, null]], "MultiTaskLassoCV": [[670, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[284, null]], "Multiclass and multilabel classification": [[1008, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[391, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1009, null]], "Multiclass classification": [[1009, "multiclass-classification"]], "Multiclass methods": [[187, "multiclass-methods"], [291, null]], "Multiclass sparse logistic regression on 20newgroups": [[232, null]], "Multiclass support": [[412, "multiclass-support"]], "Multiclass-multioutput classification": [[1009, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[237, "multidimensional-scaling"]], "Multilabel": [[378, "multilabel"]], "Multilabel classification": [[252, null], [1009, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[294, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1008, "multilabel-ranking-metrics"]], "Multinomial Case": [[1004, "multinomial-case"]], "Multinomial Naive Bayes": [[1010, "multinomial-naive-bayes"]], "MultinomialNB": [[850, null]], "Multioutput methods": [[187, "multioutput-methods"], [293, null]], "Multioutput regression": [[1009, "multioutput-regression"]], "Multiple modules": [[1047, "multiple-modules"], [1048, "multiple-modules"]], "Multiple vs. Single Imputation": [[998, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[998, "multivariate-feature-imputation"]], "Mutual Information based scores": [[414, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[414, "mutual-reachability-graph"]], "NMF": [[547, null]], "NMF with a beta-divergence": [[419, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[419, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1010, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[321, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[326, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[324, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[306, null]], "Nearest Centroid Classifier": [[1011, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1011, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[187, "nearest-neighbors"], [296, null], [1011, null]], "Nearest Neighbors Classification": [[298, null], [1011, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1011, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1011, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[307, null]], "Nearest Shrunken Centroid": [[1011, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[998, "nearest-neighbors-imputation"]], "NearestCentroid": [[858, null]], "NearestNeighbors": [[859, null]], "Neighborhood Components Analysis": [[1011, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[305, null]], "NeighborhoodComponentsAnalysis": [[860, null]], "Nested versus non-nested cross-validation": [[280, null]], "NetBSD": [[400, "netbsd"]], "Neural Networks": [[187, "neural-networks"], [309, null]], "Neural network models (supervised)": [[1012, null]], "Neural network models (unsupervised)": [[1013, null]], "New Estimator Classes": [[1040, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[326, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[326, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[326, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[329, "new-and-enhanced-displays"]], "New classes": [[1039, "new-classes"]], "New display ValidationCurveDisplay": [[330, "new-display-validationcurvedisplay"]], "New documentation improvements": [[326, "new-documentation-improvements"], [327, "new-documentation-improvements"]], "New features": [[1042, "new-features"], [1043, "new-features"], [1044, "new-features"], [1045, "new-features"], [1046, "new-features"]], "New plotting API": [[324, "new-plotting-api"]], "New self-training meta-estimator": [[326, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1026, "new-to-scientific-python"]], "Next steps": [[395, "next-steps"]], "Non-Negative Least Squares": [[1004, "non-negative-least-squares"]], "Non-linear transformation": [[1018, "non-linear-transformation"]], "Non-negative components - NMF": [[123, "non-negative-components-nmf"]], "Non-negative least squares": [[212, null]], "Non-negative matrix factorization (NMF or NNMF)": [[419, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1018, "normalization"]], "Normalized Discounted Cumulative Gain": [[1008, "normalized-discounted-cumulative-gain"]], "Normalizer": [[315, "normalizer"], [883, null]], "NotFittedError": [[584, null]], "Note on MPS device support": [[410, "note-on-mps-device-support"]], "Note on device support for float64": [[410, "note-on-device-support-for-float64"]], "Notes": [[371, "notes"]], "Novelty Detection": [[1014, "novelty-detection"]], "Novelty and Outlier Detection": [[1014, null]], "Novelty detection with Local Outlier Factor": [[1014, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[301, null]], "NuSVC": [[913, null]], "NuSVR": [[914, null]], "NumPy": [[387, "numpy"]], "Number of candidates and amount of resource at each iteration": [[287, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[384, "numerical-assertions-in-tests"]], "Nystroem": [[646, null]], "Nystroem Method for Kernel Approximation": [[1000, "nystroem-method-for-kernel-approximation"]], "OAS": [[481, null]], "ONNX": [[408, "onnx"]], "OOB Errors for Random Forests": [[141, null]], "OPTICS": [[414, "optics"], [456, null]], "Obtaining predictions by cross-validation": [[418, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1032, "id19"]], "Older Versions": [[1039, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[231, null]], "One-class SVM with non-linear kernel (RBF)": [[344, null]], "One-vs-One multiclass ROC": [[284, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[284, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[915, null]], "OneHotEncoder": [[884, null]], "OneToOneFeatureMixin": [[435, null]], "OneVsOneClassifier": [[839, null], [1009, "onevsoneclassifier"]], "OneVsRestClassifier": [[840, null], [1009, "onevsrestclassifier"]], "Online One-Class SVM": [[327, "online-one-class-svm"], [1022, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[85, null]], "Optical recognition of handwritten digits dataset": [[379, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[180, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[384, "optional-arguments"]], "Options to tune the decision threshold": [[413, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[416, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[885, null]], "Ordinary Least Squares": [[1004, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1004, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[215, null]], "Original data": [[281, "original-data"], [315, "original-data"]], "Original image": [[88, "original-image"]], "Original points": [[305, "original-points"]], "Orthogonal Matching Pursuit": [[216, null]], "Orthogonal Matching Pursuit (OMP)": [[1004, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[671, null]], "OrthogonalMatchingPursuitCV": [[672, null]], "Other changes": [[1039, "other-changes"]], "Other estimators and tasks": [[1027, "other-estimators-and-tasks"]], "Otto Group": [[1032, "id26"]], "Our community, our values": [[382, null]], "Our vanilla classifier": [[289, "our-vanilla-classifier"]], "Out of Bag Estimates": [[997, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1010, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1014, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[302, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[436, null]], "Outliers in the X direction": [[234, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[234, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1016, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[841, null], [1009, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[370, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[414, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[292, null]], "Overview of outlier detection methods": [[1014, "overview-of-outlier-detection-methods"]], "PCA": [[548, null]], "PCA example with Iris Data-set": [[129, null]], "PCA using randomized SVD": [[419, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1025, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1032, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[117, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[117, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[417, "plscanonical"], [489, null]], "PLSRegression": [[417, "plsregression"], [490, null]], "PLSSVD": [[417, "plssvd"], [491, null]], "Packaging": [[1051, "packaging"]], "Pair Confusion Matrix": [[414, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[275, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[275, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[332, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1006, null]], "PairwiseKernel": [[627, null]], "Pandas": [[387, "pandas"]], "Pandas output with set_output API": [[329, "pandas-output-with-set-output-api"]], "Parallel": [[973, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[370, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[370, "parallelism"], [997, "parallelism"]], "Parallelism, resource management, and configuration": [[370, null]], "Parallelization": [[421, "parallelization"]], "ParameterGrid": [[818, null]], "ParameterSampler": [[819, null]], "Parameters": [[396, "parameters"], [421, "parameters"]], "Parameters and init": [[384, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1023, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[191, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1015, null]], "Partial dependence plots": [[1015, "partial-dependence-plots"]], "PartialDependenceDisplay": [[639, null]], "Partitioning the data": [[195, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1004, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[673, null]], "PassiveAggressiveRegressor": [[674, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[422, "patch-extraction"]], "PatchExtractor": [[590, null]], "PeerIndex": [[1032, "id17"]], "People": [[1039, "people"], [1039, "id2"], [1039, "id5"], [1039, "id8"], [1039, "id11"], [1039, "id13"], [1039, "id15"], [1039, "id17"], [1040, "people"], [1040, "id3"], [1041, "people"], [1042, "people"]], "Perceptron": [[675, null], [1004, "perceptron"]], "Performance improvements": [[328, "performance-improvements"]], "Performance improvements in PCA": [[332, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[357, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[218, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[192, null]], "Permutation Importance with Multicollinear or Correlated Features": [[193, null]], "Permutation feature importance": [[1016, null]], "Permutation test score": [[281, "permutation-test-score"], [418, "permutation-test-score"]], "Permutation-based feature importance": [[324, "permutation-based-feature-importance"]], "Pinball loss": [[1008, "pinball-loss"]], "Pipeline": [[871, null]], "Pipeline ANOVA SVM": [[169, null]], "Pipeline compatibility": [[384, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[276, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[415, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[103, null], [187, "pipelines-and-composite-estimators"], [415, null]], "Pipelines: chaining pre-processors and estimators": [[395, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1025, null]], "Pipelining: chaining a PCA and a logistic regression": [[107, null]], "Pixel importances with a parallel forest of trees": [[145, null]], "Platform-specific instructions": [[380, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[282, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[272, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[222, null]], "Plot a PCA representation": [[120, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[356, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[284, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[284, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[202, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[254, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[160, null]], "Plot classification boundaries with different SVM Kernels": [[349, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[342, null]], "Plot discrete decision boundary": [[154, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[163, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[151, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[161, null]], "Plot multi-class SGD on the iris dataset": [[226, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[209, null]], "Plot number of features VS. cross-validation scores": [[171, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[154, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[121, null]], "Plot regularization path": [[210, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [98, "plot-result"], [102, "plot-result"], [102, "id2"]], "Plot results": [[47, "plot-results"], [84, "plot-results"], [111, "plot-results"], [124, "plot-results"], [125, "plot-results"], [143, "plot-results"], [294, "plot-results"], [302, "plot-results"]], "Plot support and time series": [[211, "plot-support-and-time-series"]], "Plot the BIC scores": [[265, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[282, "plot-the-precision-recall-curve"]], "Plot the best model": [[265, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[348, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[159, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[361, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[146, null]], "Plot the marginal log-likelihood": [[197, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[282, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[334, "plot-the-most-uncertain-predictions"]], "Plot the results": [[85, "plot-the-results"], [115, "plot-the-results"], [161, "plot-the-results"], [186, "plot-the-results"]], "Plot the results on an image": [[82, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[343, null]], "Plot the true and estimated coefficients": [[197, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[198, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[151, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [313, "plotting"]], "Plotting API Overview": [[389, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[271, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[277, null]], "Plotting four circles": [[101, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[255, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[255, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[255, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[197, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[257, "plotting-the-roc-curve"]], "Plotting the Results": [[321, "plotting-the-results"]], "Plotting the result": [[279, "plotting-the-result"]], "Plotting the results": [[99, "plotting-the-results"], [138, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[221, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[101, "plotting-two-circles"]], "Plotting with Multiple Axes": [[389, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[217, null]], "PoissonRegressor": [[676, null]], "Polars output in set_output": [[331, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[1000, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[218, null]], "Polynomial features": [[1018, "polynomial-features"]], "Polynomial kernel": [[349, "polynomial-kernel"], [1006, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1004, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[647, null]], "PolynomialFeatures": [[886, null]], "Possible solutions": [[92, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[360, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[289, null]], "Post-tuning the decision threshold": [[413, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[269, null]], "PowerTransformer": [[315, "powertransformer"], [887, null]], "Pre-test vs. post-test analysis": [[278, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1008, "precision-recall-and-f-measures"]], "Precision-Recall": [[282, null]], "PrecisionRecallDisplay": [[707, null]], "Precomputed sparse nearest neighbors graph": [[324, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[418, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[820, null]], "Prediction Intervals for Gradient Boosting Regression": [[150, null]], "Prediction Latency": [[49, null], [369, "prediction-latency"]], "Prediction Throughput": [[369, "prediction-throughput"]], "PredictionErrorDisplay": [[708, null]], "Preparing the data": [[138, "preparing-the-data"], [153, "preparing-the-data"], [195, "preparing-the-data"]], "Preprocessing": [[187, "preprocessing"], [314, null]], "Preprocessing data": [[1018, null]], "Preprocessing numerical variables": [[190, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[191, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[191, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[191, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[118, null]], "Principal component analysis (PCA)": [[419, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1056, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[424, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[175, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[412, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[190, "processing-the-dataset"]], "Product": [[628, null]], "Productivity and sanity-preserving tips": [[390, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[388, "profiling-python-code"]], "Profiling compiled extensions": [[388, "profiling-compiled-extensions"]], "Project template:": [[384, null]], "Projecting data: PCA vs. KernelPCA": [[128, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[128, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[118, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[387, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[382, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[235, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1028, "purpose-of-this-document"]], "Purpose of this example": [[221, "purpose-of-this-example"]], "PyTorch Support": [[410, "pytorch-support"]], "Python API": [[370, "python-api"]], "Python package and dataset imports, load dataset": [[249, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[388, "python-cython-or-c-c"]], "QDA": [[1002, "qda"]], "QuadraticDiscriminantAnalysis": [[557, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[357, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1004, "quantile-regression"]], "Quantile Regressor": [[327, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[328, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[219, null]], "QuantileRegressor": [[677, null]], "QuantileTransformer": [[888, null]], "QuantileTransformer (Gaussian output)": [[315, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[315, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1004, "ransac-random-sample-consensus"]], "RANSACRegressor": [[678, null]], "RBF": [[629, null]], "RBF SVM parameters": [[345, null]], "RBF kernel": [[349, "rbf-kernel"], [1006, "rbf-kernel"]], "RBFSampler": [[648, null]], "RCV1 dataset": [[377, "rcv1-dataset"]], "RFE": [[600, null]], "RFECV": [[601, null]], "ROC AUC now supports multiclass classification": [[324, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[257, null]], "ROC curve showing a specific class": [[284, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[284, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[284, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[284, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[1000, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[183, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[424, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[861, null]], "RadiusNeighborsRegressor": [[862, null]], "RadiusNeighborsTransformer": [[863, null]], "Rand index": [[414, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[193, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[421, "random-forests"]], "Random Numbers": [[384, "random-numbers"]], "Random Projection": [[1020, null]], "Random data": [[281, "random-data"]], "Random forests and other randomized tree ensembles": [[421, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[418, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1025, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[571, null]], "RandomForestRegressor": [[572, null]], "RandomTreesEmbedding": [[573, null]], "Randomized Parameter Optimization": [[997, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[821, null]], "Rangespan": [[1032, "id11"]], "Ranking loss": [[1008, "ranking-loss"]], "Rational Quadratic kernel": [[183, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[424, "rational-quadratic-kernel"]], "RationalQuadratic": [[630, null]], "Reading the existing code base": [[382, "reading-the-existing-code-base"]], "Real world datasets": [[377, null]], "Real-world data set": [[109, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[285, null]], "Receiver operating characteristic (ROC)": [[1008, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1027, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[170, null], [423, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[171, null]], "Reference Steps": [[386, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [114, "references"], [140, "references"], [195, "references"], [202, "references"], [292, "references"], [308, "references"], [424, "references"], [998, "references"]], "Region of Practical Equivalence": [[275, "region-of-practical-equivalence"]], "Regression": [[182, "regression"], [1004, "regression"], [1012, "regression"], [1022, "regression"], [1023, "regression"], [1024, "regression"]], "Regression criteria": [[1024, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1008, "regression-metrics"]], "RegressorChain": [[845, null], [1009, "regressorchain"]], "RegressorMixin": [[437, null]], "RegressorTags": [[929, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1012, "regularization"]], "Regularization path of L1- Logistic Regression": [[210, null]], "Related Projects": [[1027, null]], "Related changes": [[1046, "related-changes"]], "Relation to impurity-based importance in trees": [[1016, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[187, "release-highlights"], [323, null]], "Release Highlights for scikit-learn 0.22": [[324, null]], "Release Highlights for scikit-learn 0.23": [[325, null]], "Release Highlights for scikit-learn 0.24": [[326, null]], "Release Highlights for scikit-learn 1.0": [[327, null]], "Release Highlights for scikit-learn 1.1": [[328, null]], "Release Highlights for scikit-learn 1.2": [[329, null]], "Release Highlights for scikit-learn 1.3": [[330, null]], "Release Highlights for scikit-learn 1.4": [[331, null]], "Release Highlights for scikit-learn 1.5": [[332, null]], "Release History": [[1037, null]], "Releasing": [[386, "releasing"]], "Remarks": [[248, "remarks"]], "Removed modules": [[1039, "removed-modules"]], "Removing features with low variance": [[423, "removing-features-with-low-variance"]], "Repeated K-Fold": [[418, "repeated-k-fold"]], "RepeatedKFold": [[822, null]], "RepeatedStratifiedKFold": [[823, null]], "Replace missing values by 0": [[186, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[408, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[313, null]], "Restricted Boltzmann machines": [[1013, "restricted-boltzmann-machines"]], "Results interpretation": [[294, "results-interpretation"]], "Retrieve dataframes from OpenML": [[324, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[246, "rich-html-representation"]], "Rich visual representation of estimators": [[325, "rich-visual-representation-of-estimators"]], "Ridge": [[679, null]], "Ridge Complexity": [[1004, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[221, null]], "Ridge regression and classification": [[1004, "ridge-regression-and-classification"]], "RidgeCV": [[680, null]], "RidgeClassifier": [[681, null]], "RidgeClassifierCV": [[682, null]], "Roadmap": [[1028, null]], "Robust Covariance Estimation": [[416, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[113, null]], "Robust linear estimator fitting": [[223, null]], "Robust linear model estimation using RANSAC": [[220, null]], "Robust vs Empirical covariance estimate": [[114, null]], "RobustScaler": [[315, "robustscaler"], [889, null]], "Robustness of cross-validation results": [[365, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1004, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[997, "robustness-to-failure"]], "RocCurveDisplay": [[709, null]], "Roles And Responsibilities": [[397, "roles-and-responsibilities"]], "Rolling your own estimator": [[384, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[251, "routing-meta-estimator"]], "Run the benchmark": [[93, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[279, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[380, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1008, "r2-score-the-coefficient-of-determination"]], "SGD": [[1022, "id5"]], "SGD: Maximum margin separating hyperplane": [[229, null]], "SGD: Penalties": [[228, null]], "SGD: Weighted samples": [[230, null]], "SGD: convex loss functions": [[227, null]], "SGDClassifier": [[683, null]], "SGDOneClassSVM": [[684, null]], "SGDRegressor": [[685, null]], "SKLEARN_ASSUME_FINITE": [[370, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[370, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[370, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[370, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[370, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[370, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[370, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[370, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[370, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[370, "sklearn-working-memory"]], "SVC": [[916, null], [1023, "svc"]], "SVM Exercise": [[165, null]], "SVM Margins Example": [[350, null]], "SVM Tie Breaking Example": [[353, null]], "SVM with custom kernel": [[341, null]], "SVM-Anova: SVM with univariate feature selection": [[348, null]], "SVM: Maximum margin separating hyperplane": [[346, null]], "SVM: Separating hyperplane for unbalanced classes": [[347, null]], "SVM: Weighted samples": [[354, null]], "SVR": [[917, null], [1023, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[376, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[276, null]], "Sample weight support": [[421, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[325, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[325, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[195, null]], "Scale Invariance": [[90, "scale-invariance"]], "Scaling data with outliers": [[1018, "scaling-data-with-outliers"]], "Scaling features to a range": [[1018, "scaling-features-to-a-range"]], "Scaling sparse data": [[1018, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[352, null]], "Scaling up the One-Class SVM": [[1014, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[371, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[120, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[117, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[397, null]], "Scores and probabilities": [[1023, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[997, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1057, "security"]], "Security & Maintainability Limitations": [[408, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[81, null]], "SelectFdr": [[602, null]], "SelectFpr": [[603, null]], "SelectFromModel": [[604, null]], "SelectFwe": [[605, null]], "SelectKBest": [[606, null]], "SelectPercentile": [[607, null]], "Selecting Lasso via an information criterion": [[206, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[206, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[106, null]], "Selecting features based on importance": [[172, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[172, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[95, null]], "SelectorMixin": [[608, null]], "Self Training": [[1021, "self-training"]], "SelfTrainingClassifier": [[908, null]], "Semi Supervised Classification": [[187, "semi-supervised-classification"], [333, null]], "Semi-supervised Classification on a Text Dataset": [[338, null]], "Semi-supervised learning": [[334, "semi-supervised-learning"], [1021, null]], "Sequence similarity matrix under the kernel": [[182, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[423, "sequential-feature-selection"]], "SequentialFeatureSelector": [[609, null]], "Serving the model artifact": [[408, "serving-the-model-artifact"]], "Setting regularization parameter": [[1004, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1004, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[235, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[1002, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[111, null]], "Shrinkage via learning rate": [[421, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[416, "shrunk-covariance"]], "ShrunkCovariance": [[482, null]], "ShuffleSplit": [[824, null]], "Sigmoid": [[412, "sigmoid"]], "Sigmoid kernel": [[349, "sigmoid-kernel"], [1006, "sigmoid-kernel"]], "Silhouette Coefficient": [[414, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[300, null]], "Simple Pipeline": [[251, "simple-pipeline"]], "SimpleImputer": [[637, null]], "Single estimator versus bagging: bias-variance decomposition": [[140, null]], "Single label": [[378, "single-label"]], "Skewed Chi Squared Kernel": [[1000, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[649, null]], "Social Media": [[1031, "social-media"]], "Solvers": [[1004, "solvers"]], "Sparse coding with a precomputed dictionary": [[132, null], [419, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[123, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1018, null]], "Sparse inverse covariance": [[416, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[115, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[419, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1020, "sparse-random-projection"]], "SparseCoder": [[549, null]], "SparsePCA": [[550, null]], "SparseRandomProjection": [[904, null]], "Sparsity": [[422, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[214, null]], "Species distribution dataset": [[377, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[384, "specific-models"]], "Specifying an objective metric": [[997, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[997, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[411, "spectral-biclustering"]], "Spectral Clustering Graphs": [[414, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[411, "spectral-co-clustering"]], "Spectral Embedding": [[1005, "spectral-embedding"]], "Spectral clustering": [[414, "spectral-clustering"]], "Spectral clustering for image segmentation": [[101, null]], "Spectral embedding for non-linear dimensionality reduction": [[237, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[457, null]], "SpectralClustering": [[458, null]], "SpectralCoclustering": [[459, null]], "SpectralEmbedding": [[698, null]], "Sphinx version": [[382, null]], "Spline Transformers": [[327, "spline-transformers"]], "Spline transformer": [[1018, "spline-transformer"]], "SplineTransformer": [[890, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1032, "id2"]], "Stack of predictors on a single data set": [[158, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[421, "stacked-generalization"]], "Stacking Classifier and Regressor": [[324, "stacking-classifier-and-regressor"]], "StackingClassifier": [[574, null]], "StackingRegressor": [[575, null]], "Stalled and Unclaimed Issues": [[382, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[382, "stalled-pull-requests"]], "Standard replies for reviewing": [[390, "standard-replies-for-reviewing"]], "StandardScaler": [[315, "standardscaler"], [891, null]], "Standardization, or mean removal and variance scaling": [[1018, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1028, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[275, null]], "Statistical learning with Python": [[1027, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1022, null]], "Stochastic Gradient Descent - SGD": [[1004, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1022, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1013, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1022, "stopping-criterion"]], "Strategies comparison": [[292, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[371, null]], "Stratified Shuffle Split": [[418, "stratified-shuffle-split"]], "Stratified k-fold": [[418, "stratified-k-fold"]], "StratifiedGroupKFold": [[418, "stratifiedgroupkfold"], [825, null]], "StratifiedKFold": [[826, null]], "StratifiedShuffleSplit": [[827, null]], "Streaming instances": [[371, "streaming-instances"]], "Submitting a bug report or a feature request": [[382, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1028, "subpackage-specific-goals"]], "Subsampling": [[421, "subsampling"]], "Successive Halving Iterations": [[287, null]], "Successive Halving estimators for tuning hyper-parameters": [[326, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[631, null]], "Summarizing the key points": [[408, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [148, "summary"], [358, "summary"]], "Summary of cross-validation approach": [[206, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[408, "id2"]], "Supervised learning": [[1030, null]], "Support": [[1031, null]], "Support Vector Machines": [[187, "support-vector-machines"], [340, null], [1023, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[351, null]], "Support for Array API": [[1056, "support-for-array-api"], [1057, "support-for-array-api"], [1058, "support-for-array-api"]], "Support for Array API-compatible inputs": [[410, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1056, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1057, "support-for-building-with-meson"]], "Support for missing values": [[153, "support-for-missing-values"]], "Support for quantile loss": [[153, "support-for-quantile-loss"]], "Swiss Roll": [[241, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[241, null]], "Swiss-Hole": [[241, "swiss-hole"]], "Synthetic dataset": [[387, "synthetic-dataset"]], "Synthetic example": [[109, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[237, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[699, null]], "Table of Contents": [[394, "table-of-contents"]], "Tags": [[930, null]], "Take-home messages": [[275, "take-home-messages"]], "Target Encoder": [[1018, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[322, null]], "Target Types": [[396, "target-types"]], "Target format": [[1009, "target-format"], [1009, "id5"], [1009, "id8"], [1009, "id10"]], "TargetEncoder": [[892, null]], "TargetEncoder: a new category encoding strategy": [[330, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[931, null]], "Technical Committee": [[397, "technical-committee"]], "Test dependencies": [[380, "test-dependencies"]], "Test with permutations the significance of a classification score": [[281, null]], "Testing Functions": [[391, "testing-functions"]], "Testing and improving test coverage": [[382, "testing-and-improving-test-coverage"]], "Text feature extraction": [[422, "text-feature-extraction"]], "TfidfTransformer": [[597, null]], "TfidfVectorizer": [[358, "tfidfvectorizer"], [598, null]], "Tf\u2013idf term weighting": [[422, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[377, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[422, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1007, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[217, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[120, null]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[248, null]], "The Johnson-Lindenstrauss lemma": [[1020, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[377, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[390, "the-meson-build-backend"]], "The Olivetti faces dataset": [[377, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[292, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[282, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[269, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[418, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[118, "the-data"]], "The dataset": [[273, "the-dataset"]], "The dataset: simulated hourly wages": [[189, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[190, "the-dataset-wages"]], "The diabetes dataset": [[289, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[292, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[190, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[190, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[386, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1008, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[234, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1004, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[686, null]], "Theoretical bounds": [[248, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[251, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[400, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[418, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[828, null]], "Timing and accuracy plots": [[249, "timing-and-accuracy-plots"]], "Tips and Tricks": [[369, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[383, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[997, "tips-for-parameter-search"]], "Tips for performance": [[383, "tips-for-performance"]], "Tips on Practical Use": [[1012, "tips-on-practical-use"], [1022, "tips-on-practical-use"], [1023, "tips-on-practical-use"]], "Tips on practical use": [[1005, "tips-on-practical-use"], [1024, "tips-on-practical-use"]], "Tips to ease development": [[383, "tips-to-ease-development"]], "Tools": [[410, "tools"]], "Top terms per cluster": [[357, "top-terms-per-cluster"]], "Top-k accuracy score": [[1008, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[360, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[421, "totally-random-trees-embedding"]], "Toy datasets": [[379, null]], "Tracking feature names in a pipeline": [[415, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1004, null]], "Train and Persist the Model": [[408, "train-and-persist-the-model"]], "Train classifiers": [[345, "train-classifiers"]], "Train models on the diabetes dataset": [[255, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[364, "train-tree-classifier"]], "Training": [[313, "training"], [1011, "training"]], "Training SVC model and plotting decision boundaries": [[349, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[257, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[322, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[321, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[138, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[161, "training-classifiers"]], "Training of the model": [[154, "training-of-the-model"]], "Training the AdaBoostClassifier": [[137, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[221, "training-the-ridge-regressor"]], "Transform": [[1011, "transform"]], "Transform data": [[117, "transform-data"]], "TransformedTargetRegressor": [[471, null]], "TransformerMixin": [[438, null]], "TransformerTags": [[932, null]], "Transformers and pre-processors": [[395, "transformers-and-pre-processors"]], "Transforming target in regression": [[415, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1019, null]], "Translations of scikit-learn documentation": [[1027, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1024, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[324, "tree-pruning"]], "Tree structure": [[364, "tree-structure"]], "Tree-based feature selection": [[423, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[192, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[381, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[400, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[419, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[551, null]], "TunedThresholdClassifierCV": [[829, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[332, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[273, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[269, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[269, "tuning-the-decision-threshold"], [289, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[413, null]], "Tuning the hyper-parameters of an estimator": [[997, null]], "Tuning the hyper-parameters of the quantile regressors": [[150, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[162, null], [187, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[235, null]], "TweedieRegressor": [[687, null]], "Two-class AdaBoost": [[139, null]], "Type of return values and fitted attributes": [[410, "type-of-return-values-and-fitted-attributes"]], "Types": [[383, "types"]], "T\u00e9l\u00e9com ParisTech": [[1032, "id7"]], "Unbalanced problems": [[1023, "unbalanced-problems"]], "UndefinedMetricWarning": [[585, null]], "Under Development": [[1034, "under-development"]], "Underfitting vs. Overfitting": [[290, null]], "Understanding the decision tree structure": [[364, null]], "Univariate Feature Selection": [[168, null]], "Univariate feature imputation": [[998, "univariate-feature-imputation"]], "Univariate feature selection": [[168, "id1"], [423, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[998, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[384, "universal-attributes"]], "Unlabeled entries in y": [[1021, null]], "Unsupervised Nearest Neighbors": [[1011, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1025, null]], "Unsupervised learning": [[1033, null]], "Unweighted feature selection": [[405, "unweighted-feature-selection"]], "Updating Authors List": [[386, "updating-authors-list"]], "Usage": [[412, "usage"], [415, "usage"], [415, "id1"], [421, "usage"], [421, "id24"], [421, "id25"], [421, "id27"], [421, "id35"], [1004, "usage"]], "Usage Examples": [[405, "usage-examples"]], "Use markdown formatting": [[387, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[390, "useful-pytest-aliases-and-flags"]], "User Guide": [[1034, null]], "User Questions": [[1031, "user-questions"]], "Using Cython": [[388, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[316, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[365, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[383, "using-openmp"]], "Using a debugger, gdb": [[388, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[390, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1004, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[418, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[155, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[388, "using-gprof"]], "Using multiple metric evaluation": [[1008, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[172, "using-negative-tolerance-values"]], "Using scikit-learn": [[394, "using-scikit-learn"]], "Using stop words": [[422, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[388, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[388, "using-yep-and-gperftools"]], "Utilities for Developers": [[391, null]], "Validation Tools": [[391, "validation-tools"]], "Validation curve": [[1003, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[1003, null]], "ValidationCurveDisplay": [[830, null]], "Vanilla predictive model": [[269, "vanilla-predictive-model"]], "VarianceThreshold": [[610, null]], "Variational Bayesian Gaussian Mixture": [[1007, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[87, null]], "Varying regularization in Multi-layer Perceptron": [[310, null]], "Varying the metric": [[414, "varying-the-metric"]], "Vector Quantization Example": [[88, null]], "Vectorizing a large text corpus with the hashing trick": [[422, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1039, "version-0-10"]], "Version 0.11": [[1039, "version-0-11"]], "Version 0.12": [[1039, "version-0-12"]], "Version 0.12.1": [[1039, "version-0-12-1"]], "Version 0.13": [[1040, null], [1040, "changes-0-13"]], "Version 0.13.1": [[1040, "version-0-13-1"]], "Version 0.14": [[1041, null], [1041, "changes-0-14"]], "Version 0.15": [[1042, null], [1042, "changes-0-15"]], "Version 0.15.1": [[1042, "version-0-15-1"]], "Version 0.15.2": [[1042, "version-0-15-2"]], "Version 0.16": [[1043, null], [1043, "changes-0-16"]], "Version 0.16.1": [[1043, "version-0-16-1"]], "Version 0.17": [[1044, null], [1044, "changes-0-17"]], "Version 0.17.1": [[1044, "version-0-17-1"]], "Version 0.18": [[1045, null], [1045, "changes-0-18"]], "Version 0.18.1": [[1045, "version-0-18-1"]], "Version 0.18.2": [[1045, "version-0-18-2"]], "Version 0.19": [[1046, null], [1046, "id1"]], "Version 0.19.1": [[1046, "version-0-19-1"]], "Version 0.19.2": [[1046, "version-0-19-2"]], "Version 0.20": [[1047, null]], "Version 0.20.0": [[1047, "version-0-20-0"]], "Version 0.20.1": [[1047, "version-0-20-1"]], "Version 0.20.2": [[1047, "version-0-20-2"]], "Version 0.20.3": [[1047, "version-0-20-3"]], "Version 0.20.4": [[1047, "version-0-20-4"]], "Version 0.21": [[1048, null]], "Version 0.21.0": [[1048, "version-0-21-0"]], "Version 0.21.1": [[1048, "version-0-21-1"]], "Version 0.21.2": [[1048, "version-0-21-2"]], "Version 0.21.3": [[1048, "version-0-21-3"]], "Version 0.22": [[1049, null]], "Version 0.22.0": [[1049, "version-0-22-0"]], "Version 0.22.1": [[1049, "version-0-22-1"]], "Version 0.22.2.post1": [[1049, "version-0-22-2-post1"]], "Version 0.23": [[1050, null]], "Version 0.23.0": [[1050, "version-0-23-0"]], "Version 0.23.1": [[1050, "version-0-23-1"]], "Version 0.23.2": [[1050, "version-0-23-2"]], "Version 0.24": [[1051, null]], "Version 0.24.0": [[1051, "version-0-24-0"]], "Version 0.24.1": [[1051, "version-0-24-1"]], "Version 0.24.2": [[1051, "version-0-24-2"]], "Version 0.4": [[1039, "version-0-4"]], "Version 0.5": [[1039, "version-0-5"]], "Version 0.6": [[1039, "version-0-6"]], "Version 0.7": [[1039, "version-0-7"]], "Version 0.8": [[1039, "version-0-8"]], "Version 0.9": [[1039, "version-0-9"]], "Version 1.0": [[1052, null]], "Version 1.0.0": [[1052, "version-1-0-0"]], "Version 1.0.1": [[1052, "version-1-0-1"]], "Version 1.0.2": [[1052, "version-1-0-2"]], "Version 1.1": [[1053, null]], "Version 1.1.0": [[1053, "version-1-1-0"]], "Version 1.1.1": [[1053, "version-1-1-1"]], "Version 1.1.2": [[1053, "version-1-1-2"]], "Version 1.1.3": [[1053, "version-1-1-3"]], "Version 1.2": [[1054, null]], "Version 1.2.0": [[1054, "version-1-2-0"]], "Version 1.2.1": [[1054, "version-1-2-1"]], "Version 1.2.2": [[1054, "version-1-2-2"]], "Version 1.3": [[1055, null]], "Version 1.3.0": [[1055, "version-1-3-0"]], "Version 1.3.1": [[1055, "version-1-3-1"]], "Version 1.3.2": [[1055, "version-1-3-2"]], "Version 1.4": [[1056, null]], "Version 1.4.0": [[1056, "version-1-4-0"]], "Version 1.4.1": [[1056, "version-1-4-1"]], "Version 1.4.2": [[1056, "version-1-4-2"]], "Version 1.5": [[1057, null]], "Version 1.5.0": [[1057, "version-1-5-0"]], "Version 1.5.1": [[1057, "version-1-5-1"]], "Version 1.5.2": [[1057, "version-1-5-2"]], "Version 1.6": [[1058, null]], "Version 1.6.0": [[1058, "version-1-6-0"]], "Video resources": [[382, "video-resources"]], "Videos": [[1026, "videos"]], "Visual evaluation of regression models": [[1008, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [345, "visualization"]], "Visualization of MLP weights on MNIST": [[312, null]], "Visualization of cluster hierarchy": [[414, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1036, null]], "Visualizations with Display Objects": [[245, null]], "Visualize Comparison": [[148, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[270, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[270, "visualize-our-data"]], "Visualize the learning curves": [[250, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[93, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[250, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[415, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[270, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[421, "voting-classifier"]], "Voting Regressor": [[421, "voting-regressor"]], "VotingClassifier": [[576, null]], "VotingRegressor": [[577, null]], "Warnings and Exceptions": [[391, "warnings-and-exceptions"]], "Ways to contribute": [[382, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[102, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1049, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[421, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[405, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[405, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[394, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[394, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[364, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[394, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[632, null]], "Who is using scikit-learn?": [[1032, null]], "Why are there so many different estimators for linear models?": [[394, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[394, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[394, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[394, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[394, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[394, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[394, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[394, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[394, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[421, "why-it-s-faster"]], "Why scikit?": [[394, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[394, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[394, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[400, "winpython-for-windows"]], "Windows": [[380, "windows"]], "Wine recognition dataset": [[379, "wine-recognition-dataset"]], "Workflow Overview": [[408, "workflow-overview"]], "Working on PRs to help review": [[381, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[381, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[187, "working-with-text-documents"], [355, null]], "Wrong causal interpretation": [[190, "wrong-causal-interpretation"]], "XOR dataset": [[349, "xor-dataset"]], "Yhat": [[1032, "id10"]], "Zero one loss": [[1008, "zero-one-loss"]], "Zopa": [[1032, "id27"]], "__sklearn_is_fitted__ as Developer API": [[135, null]], "_safe_indexing": [[933, null]], "accuracy_score": [[710, null]], "add_dummy_feature": [[893, null]], "additive_chi2_kernel": [[765, null]], "adjusted_mutual_info_score": [[711, null]], "adjusted_rand_score": [[712, null]], "affinity_propagation": [[460, null]], "all_displays": [[946, null]], "all_estimators": [[947, null]], "all_functions": [[948, null]], "as_float_array": [[935, null]], "assert_all_finite": [[936, null]], "auc": [[713, null]], "available_if": [[968, null]], "average_precision_score": [[714, null]], "balanced_accuracy_score": [[715, null]], "betaworks": [[1032, "id4"]], "binarize": [[894, null]], "brier_score_loss": [[716, null]], "calibration_curve": [[445, null]], "calinski_harabasz_score": [[717, null]], "check_X_y": [[937, null]], "check_array": [[938, null]], "check_consistent_length": [[939, null]], "check_cv": [[831, null]], "check_estimator": [[949, null]], "check_increasing": [[643, null]], "check_is_fitted": [[991, null]], "check_memory": [[992, null]], "check_random_state": [[940, null]], "check_scalar": [[941, null]], "check_scoring": [[718, null]], "check_symmetric": [[993, null]], "chi2": [[611, null]], "chi2_kernel": [[766, null]], "class_likelihood_ratios": [[719, null]], "classification_report": [[720, null]], "clear_data_home": [[492, null]], "clone": [[439, null]], "cluster_optics_dbscan": [[461, null]], "cluster_optics_xi": [[462, null]], "cohen_kappa_score": [[723, null]], "column_or_1d": [[994, null]], "completeness_score": [[724, null]], "compute_class_weight": [[942, null]], "compute_optics_graph": [[463, null]], "compute_sample_weight": [[943, null]], "config_context": [[474, null]], "confusion_matrix": [[725, null]], "consensus_score": [[726, null]], "contingency_matrix": [[721, null]], "cosine_distances": [[767, null]], "cosine_similarity": [[768, null]], "coverage_error": [[727, null]], "cross_val_predict": [[832, null]], "cross_val_score": [[833, null]], "cross_validate": [[834, null]], "d2_absolute_error_score": [[728, null]], "d2_log_loss_score": [[729, null]], "d2_pinball_score": [[730, null]], "d2_tweedie_score": [[731, null]], "davies_bouldin_score": [[732, null]], "dbscan": [[425, null]], "dbscan_clustering": [[90, "dbscan-clustering"]], "dcg_score": [[733, null]], "default_tags": [[944, null]], "delayed": [[974, null]], "density": [[952, null]], "deprecated": [[945, null]], "det_curve": [[734, null]], "dict_learning": [[552, null]], "dict_learning_online": [[553, null]], "distance_metrics": [[769, null]], "dump_svmlight_file": [[493, null]], "empirical_covariance": [[483, null]], "enable_halving_search_cv": [[586, null]], "enable_iterative_imputer": [[587, null]], "enet_path": [[688, null]], "estimate_bandwidth": [[464, null]], "estimator_html_repr": [[951, null]], "euclidean_distances": [[770, null]], "explained_variance_score": [[735, null]], "export_graphviz": [[923, null]], "export_text": [[924, null]], "extract_patches_2d": [[591, null]], "f1_score": [[736, null]], "f_classif": [[612, null]], "f_regression": [[613, null]], "fast_logdet": [[953, null]], "fastica": [[426, null]], "fbeta_score": [[737, null]], "fetch_20newsgroups": [[494, null]], "fetch_20newsgroups_vectorized": [[495, null]], "fetch_california_housing": [[496, null]], "fetch_covtype": [[497, null]], "fetch_file": [[498, null]], "fetch_kddcup99": [[499, null]], "fetch_lfw_pairs": [[500, null]], "fetch_lfw_people": [[501, null]], "fetch_olivetti_faces": [[502, null]], "fetch_openml": [[503, null]], "fetch_rcv1": [[504, null]], "fetch_species_distributions": [[505, null]], "fowlkes_mallows_score": [[738, null]], "gen_batches": [[958, null]], "gen_even_slices": [[959, null]], "get_config": [[633, null]], "get_data_home": [[506, null]], "get_feature_names_out Available in all Transformers": [[328, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[384, "get-params-and-set-params"]], "get_routing_for_object": [[966, null]], "get_scorer": [[739, null]], "get_scorer_names": [[740, null]], "get_tags": [[960, null]], "graphical_lasso": [[484, null]], "grid_to_graph": [[592, null]], "hamming_loss": [[741, null]], "has_fit_parameter": [[995, null]], "haversine_distances": [[771, null]], "hinge_loss": [[742, null]], "homogeneity_completeness_v_measure": [[743, null]], "homogeneity_score": [[744, null]], "img_to_graph": [[593, null]], "incr_mean_variance_axis": [[982, null]], "indexable": [[962, null]], "inplace_column_scale": [[983, null]], "inplace_csr_column_scale": [[984, null]], "inplace_csr_row_normalize_l1": [[989, null]], "inplace_csr_row_normalize_l2": [[990, null]], "inplace_row_scale": [[985, null]], "inplace_swap_column": [[986, null]], "inplace_swap_row": [[987, null]], "is_classifier": [[440, null]], "is_clusterer": [[441, null]], "is_multilabel": [[969, null]], "is_regressor": [[442, null]], "isotonic_regression": [[644, null]], "jaccard_score": [[745, null]], "johnson_lindenstrauss_min_dim": [[905, null]], "kNN-imputation of the missing values": [[186, "knn-imputation-of-the-missing-values"]], "k_means": [[465, null]], "kcachegrind": [[388, "kcachegrind"]], "kernel_metrics": [[772, null]], "kmeans_plusplus": [[466, null]], "kneighbors_graph": [[864, null]], "l1_min_c": [[918, null]], "label_binarize": [[895, null]], "label_ranking_average_precision_score": [[746, null]], "label_ranking_loss": [[747, null]], "laplacian_kernel": [[773, null]], "lars_path": [[689, null]], "lars_path_gram": [[690, null]], "lasso_path": [[691, null]], "learning_curve": [[835, null]], "ledoit_wolf": [[485, null]], "ledoit_wolf_shrinkage": [[486, null]], "linear_kernel": [[774, null]], "load_breast_cancer": [[507, null]], "load_diabetes": [[508, null]], "load_digits": [[509, null]], "load_files": [[510, null]], "load_iris": [[511, null]], "load_linnerud": [[512, null]], "load_sample_image": [[513, null]], "load_sample_images": [[514, null]], "load_svmlight_file": [[515, null]], "load_svmlight_files": [[516, null]], "load_wine": [[517, null]], "locally_linear_embedding": [[700, null]], "log_loss": [[748, null]], "macOS": [[380, "macos"]], "macOS compilers from Homebrew": [[380, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[380, "macos-compilers-from-conda-forge"]], "make_biclusters": [[518, null]], "make_blobs": [[387, "make-blobs"], [519, null]], "make_checkerboard": [[520, null]], "make_circles": [[521, null]], "make_classification": [[387, "make-classification"], [522, null]], "make_column_selector": [[472, null]], "make_column_transformer": [[473, null]], "make_friedman1": [[523, null]], "make_friedman2": [[524, null]], "make_friedman3": [[525, null]], "make_gaussian_quantiles": [[526, null]], "make_hastie_10_2": [[527, null]], "make_low_rank_matrix": [[528, null]], "make_moons": [[529, null]], "make_multilabel_classification": [[530, null]], "make_pipeline": [[872, null]], "make_regression": [[387, "make-regression"], [531, null]], "make_s_curve": [[532, null]], "make_scorer": [[749, null]], "make_sparse_coded_signal": [[533, null]], "make_sparse_spd_matrix": [[534, null]], "make_sparse_uncorrelated": [[535, null]], "make_spd_matrix": [[536, null]], "make_swiss_roll": [[537, null]], "make_union": [[873, null]], "manhattan_distances": [[775, null]], "matthews_corrcoef": [[750, null]], "max_error": [[751, null]], "maxabs_scale": [[896, null]], "mean_absolute_error": [[752, null]], "mean_absolute_percentage_error": [[753, null]], "mean_gamma_deviance": [[754, null]], "mean_pinball_loss": [[755, null]], "mean_poisson_deviance": [[756, null]], "mean_shift": [[467, null]], "mean_squared_error": [[757, null]], "mean_squared_log_error": [[758, null]], "mean_tweedie_deviance": [[759, null]], "mean_variance_axis": [[988, null]], "median_absolute_error": [[760, null]], "min_cluster_size": [[90, "min-cluster-size"]], "min_pos": [[934, null]], "min_samples": [[90, "min-samples"]], "minmax_scale": [[897, null]], "multilabel_confusion_matrix": [[761, null]], "murmurhash3_32": [[972, null]], "mutual_info_classif": [[614, null]], "mutual_info_regression": [[615, null]], "mutual_info_score": [[762, null]], "nan_euclidean_distances": [[776, null]], "ndcg_score": [[763, null]], "non_negative_factorization": [[554, null]], "normalize": [[898, null]], "normalized_mutual_info_score": [[764, null]], "oas": [[427, null]], "orthogonal_mp": [[692, null]], "orthogonal_mp_gram": [[693, null]], "pair_confusion_matrix": [[722, null]], "paired_cosine_distances": [[777, null]], "paired_distances": [[778, null]], "paired_euclidean_distances": [[779, null]], "paired_manhattan_distances": [[780, null]], "pairwise_distances": [[785, null]], "pairwise_distances_argmin": [[786, null]], "pairwise_distances_argmin_min": [[787, null]], "pairwise_distances_chunked": [[788, null]], "pairwise_kernels": [[781, null]], "parallel_backend": [[975, null]], "parametrize_with_checks": [[950, null]], "partial_dependence": [[640, null]], "permutation_importance": [[641, null]], "permutation_test_score": [[836, null]], "pickle, joblib, and cloudpickle": [[408, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[925, null]], "polynomial_kernel": [[782, null]], "power_transform": [[899, null]], "precision_recall_curve": [[789, null]], "precision_recall_fscore_support": [[790, null]], "precision_score": [[791, null]], "process_routing": [[967, null]], "quantile_transform": [[900, null]], "r2_score": [[792, null]], "r_regression": [[616, null]], "radius_neighbors_graph": [[865, null]], "rand_score": [[793, null]], "randomized_range_finder": [[954, null]], "randomized_svd": [[955, null]], "rbf_kernel": [[783, null]], "recall_score": [[794, null]], "reconstruct_from_patches_2d": [[594, null]], "register_parallel_backend": [[977, null]], "resample": [[978, null]], "ridge_regression": [[694, null]], "robust_scale": [[901, null]], "roc_auc_score": [[795, null]], "roc_curve": [[796, null]], "root_mean_squared_error": [[797, null]], "root_mean_squared_log_error": [[798, null]], "safe_mask": [[979, null]], "safe_sparse_dot": [[956, null]], "safe_sqr": [[980, null]], "sample_without_replacement": [[976, null]], "scale": [[902, null]], "set_config": [[909, null]], "show_versions": [[910, null]], "shrunk_covariance": [[487, null]], "shuffle": [[981, null]], "sigmoid_kernel": [[784, null]], "silhouette_samples": [[799, null]], "silhouette_score": [[800, null]], "single_source_shortest_path_length": [[961, null]], "sklearn": [[3, null], [1055, "sklearn"]], "sklearn.base": [[4, null], [1048, "sklearn-base"], [1049, "sklearn-base"], [1051, "sklearn-base"], [1052, "sklearn-base"], [1053, "sklearn-base"], [1054, "sklearn-base"], [1054, "id2"], [1054, "id10"], [1055, "sklearn-base"], [1056, "sklearn-base"], [1058, "sklearn-base"]], "sklearn.calibration": [[5, null], [1048, "sklearn-calibration"], [1049, "sklearn-calibration"], [1051, "sklearn-calibration"], [1052, "sklearn-calibration"], [1052, "id7"], [1053, "sklearn-calibration"], [1054, "sklearn-calibration"], [1054, "id11"], [1055, "sklearn-calibration"], [1055, "id7"], [1056, "sklearn-calibration"], [1056, "id4"], [1057, "sklearn-calibration"], [1057, "id7"]], "sklearn.cluster": [[6, null], [1047, "sklearn-cluster"], [1047, "id2"], [1047, "id11"], [1047, "id24"], [1048, "sklearn-cluster"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id5"], [1050, "sklearn-cluster"], [1050, "id2"], [1050, "id5"], [1051, "sklearn-cluster"], [1052, "sklearn-cluster"], [1052, "id1"], [1052, "id8"], [1053, "sklearn-cluster"], [1053, "id8"], [1054, "sklearn-cluster"], [1054, "id12"], [1055, "sklearn-cluster"], [1055, "id8"], [1056, "sklearn-cluster"], [1056, "id5"], [1057, "sklearn-cluster"], [1058, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1047, "sklearn-compose"], [1047, "id3"], [1047, "id6"], [1047, "id12"], [1047, "id25"], [1048, "sklearn-compose"], [1048, "id9"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1051, "id5"], [1052, "sklearn-compose"], [1053, "sklearn-compose"], [1054, "sklearn-compose"], [1055, "sklearn-compose"], [1056, "sklearn-compose"], [1056, "id6"], [1057, "sklearn-compose"], [1057, "id3"], [1057, "id8"], [1058, "sklearn-compose"]], "sklearn.covariance": [[8, null], [1047, "sklearn-covariance"], [1047, "id26"], [1051, "sklearn-covariance"], [1052, "sklearn-covariance"], [1053, "sklearn-covariance"], [1055, "sklearn-covariance"], [1056, "sklearn-covariance"], [1058, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"], [1051, "id6"], [1053, "sklearn-cross-decomposition"], [1055, "sklearn-cross-decomposition"], [1057, "sklearn-cross-decomposition"], [1058, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1047, "sklearn-datasets"], [1047, "id13"], [1047, "id27"], [1048, "sklearn-datasets"], [1048, "id10"], [1049, "sklearn-datasets"], [1050, "sklearn-datasets"], [1051, "sklearn-datasets"], [1052, "sklearn-datasets"], [1052, "id9"], [1053, "sklearn-datasets"], [1053, "id9"], [1054, "sklearn-datasets"], [1054, "id13"], [1055, "sklearn-datasets"], [1055, "id9"], [1056, "sklearn-datasets"], [1057, "sklearn-datasets"], [1058, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1047, "sklearn-decomposition"], [1047, "id4"], [1047, "id14"], [1047, "id28"], [1048, "sklearn-decomposition"], [1048, "id11"], [1049, "sklearn-decomposition"], [1050, "sklearn-decomposition"], [1050, "id6"], [1051, "sklearn-decomposition"], [1051, "id7"], [1052, "sklearn-decomposition"], [1052, "id10"], [1053, "sklearn-decomposition"], [1053, "id10"], [1054, "sklearn-decomposition"], [1054, "id14"], [1055, "sklearn-decomposition"], [1055, "id10"], [1056, "sklearn-decomposition"], [1057, "sklearn-decomposition"], [1057, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1047, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"], [1053, "sklearn-discriminant-analysis"], [1054, "sklearn-discriminant-analysis"], [1055, "sklearn-discriminant-analysis"], [1058, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1047, "sklearn-dummy"], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1052, "sklearn-dummy"], [1053, "sklearn-dummy"], [1057, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1047, "sklearn-ensemble"], [1047, "id29"], [1048, "sklearn-ensemble"], [1048, "id12"], [1049, "sklearn-ensemble"], [1050, "sklearn-ensemble"], [1050, "id7"], [1051, "sklearn-ensemble"], [1051, "id8"], [1052, "sklearn-ensemble"], [1052, "id2"], [1052, "id11"], [1053, "sklearn-ensemble"], [1054, "sklearn-ensemble"], [1054, "id3"], [1054, "id15"], [1055, "sklearn-ensemble"], [1055, "id11"], [1056, "sklearn-ensemble"], [1056, "id7"], [1057, "sklearn-ensemble"], [1058, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1051, "sklearn-exceptions"], [1055, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1048, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1047, "sklearn-feature-extraction"], [1047, "id15"], [1047, "id30"], [1048, "sklearn-feature-extraction"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1050, "id8"], [1051, "sklearn-feature-extraction"], [1051, "id9"], [1052, "sklearn-feature-extraction"], [1052, "id12"], [1053, "sklearn-feature-extraction"], [1054, "sklearn-feature-extraction"], [1055, "sklearn-feature-extraction"], [1056, "sklearn-feature-extraction"], [1057, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1047, "sklearn-feature-selection"], [1049, "sklearn-feature-selection"], [1050, "sklearn-feature-selection"], [1051, "sklearn-feature-selection"], [1052, "sklearn-feature-selection"], [1052, "id13"], [1053, "sklearn-feature-selection"], [1053, "id2"], [1053, "id11"], [1054, "sklearn-feature-selection"], [1054, "id16"], [1055, "sklearn-feature-selection"], [1055, "id12"], [1056, "sklearn-feature-selection"], [1057, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1047, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1051, "id10"], [1052, "sklearn-gaussian-process"], [1053, "sklearn-gaussian-process"], [1054, "sklearn-gaussian-process"], [1055, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1047, "sklearn-impute"], [1047, "id31"], [1048, "sklearn-impute"], [1048, "id13"], [1049, "sklearn-impute"], [1049, "id6"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1052, "sklearn-impute"], [1053, "sklearn-impute"], [1053, "id12"], [1054, "sklearn-impute"], [1055, "sklearn-impute"], [1055, "id13"], [1056, "sklearn-impute"], [1057, "sklearn-impute"], [1058, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1048, "sklearn-inspection"], [1048, "id3"], [1048, "id14"], [1049, "sklearn-inspection"], [1049, "id7"], [1050, "sklearn-inspection"], [1050, "id11"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1053, "sklearn-inspection"], [1054, "sklearn-inspection"], [1054, "id17"], [1055, "sklearn-inspection"], [1056, "sklearn-inspection"], [1056, "id8"], [1057, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1047, "sklearn-isotonic"], [1048, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1051, "sklearn-isotonic"], [1053, "sklearn-isotonic"], [1054, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1049, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"], [1052, "sklearn-kernel-approximation"], [1053, "sklearn-kernel-approximation"], [1054, "sklearn-kernel-approximation"], [1055, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1056, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1047, "sklearn-linear-model"], [1047, "id16"], [1047, "id32"], [1048, "sklearn-linear-model"], [1048, "id15"], [1049, "sklearn-linear-model"], [1050, "sklearn-linear-model"], [1050, "id9"], [1051, "sklearn-linear-model"], [1051, "id11"], [1052, "sklearn-linear-model"], [1052, "id3"], [1052, "id14"], [1053, "sklearn-linear-model"], [1053, "id13"], [1054, "sklearn-linear-model"], [1054, "id18"], [1055, "sklearn-linear-model"], [1056, "sklearn-linear-model"], [1056, "id9"], [1057, "sklearn-linear-model"], [1058, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"], [1050, "sklearn-manifold"], [1051, "sklearn-manifold"], [1052, "sklearn-manifold"], [1052, "id15"], [1053, "sklearn-manifold"], [1053, "id14"], [1054, "sklearn-manifold"], [1054, "id19"], [1055, "sklearn-manifold"], [1057, "sklearn-manifold"], [1058, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1047, "sklearn-metrics"], [1047, "id17"], [1047, "id33"], [1048, "sklearn-metrics"], [1048, "id4"], [1048, "id16"], [1049, "sklearn-metrics"], [1049, "id2"], [1049, "id8"], [1050, "sklearn-metrics"], [1050, "id10"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id12"], [1052, "sklearn-metrics"], [1052, "id16"], [1053, "sklearn-metrics"], [1053, "id3"], [1053, "id15"], [1054, "sklearn-metrics"], [1055, "sklearn-metrics"], [1055, "id2"], [1055, "id14"], [1056, "sklearn-metrics"], [1057, "sklearn-metrics"], [1057, "id4"], [1057, "id10"], [1058, "sklearn-metrics"]], "sklearn.mixture": [[28, null], [1047, "sklearn-mixture"], [1047, "id34"], [1048, "sklearn-mixture"], [1052, "sklearn-mixture"], [1053, "sklearn-mixture"], [1055, "sklearn-mixture"], [1055, "id15"], [1057, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1047, "sklearn-model-selection"], [1047, "id35"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1049, "id9"], [1049, "id13"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1051, "id13"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1054, "sklearn-model-selection"], [1054, "id20"], [1055, "sklearn-model-selection"], [1056, "sklearn-model-selection"], [1057, "sklearn-model-selection"], [1057, "id11"], [1058, "sklearn-model-selection"]], "sklearn.multiclass": [[30, null], [1048, "sklearn-multiclass"], [1051, "sklearn-multiclass"], [1052, "sklearn-multiclass"], [1053, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1051, "id14"], [1054, "sklearn-multioutput"], [1055, "sklearn-multioutput"], [1056, "sklearn-multioutput"], [1057, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1047, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"], [1049, "id10"], [1050, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"], [1052, "sklearn-naive-bayes"], [1054, "sklearn-naive-bayes"], [1055, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1047, "sklearn-neighbors"], [1047, "id7"], [1047, "id18"], [1047, "id36"], [1048, "sklearn-neighbors"], [1048, "id5"], [1048, "id17"], [1049, "sklearn-neighbors"], [1049, "id11"], [1051, "sklearn-neighbors"], [1052, "sklearn-neighbors"], [1052, "id4"], [1052, "id17"], [1053, "sklearn-neighbors"], [1054, "sklearn-neighbors"], [1055, "sklearn-neighbors"], [1055, "id16"], [1056, "sklearn-neighbors"], [1057, "sklearn-neighbors"], [1058, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1052, "sklearn-neural-network"], [1053, "sklearn-neural-network"], [1054, "sklearn-neural-network"], [1054, "id21"], [1055, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1052, "id18"], [1053, "sklearn-pipeline"], [1054, "sklearn-pipeline"], [1055, "sklearn-pipeline"], [1057, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1047, "sklearn-preprocessing"], [1047, "id19"], [1047, "id37"], [1048, "sklearn-preprocessing"], [1048, "id18"], [1049, "sklearn-preprocessing"], [1049, "id12"], [1050, "sklearn-preprocessing"], [1051, "sklearn-preprocessing"], [1051, "id15"], [1052, "sklearn-preprocessing"], [1052, "id19"], [1053, "sklearn-preprocessing"], [1053, "id4"], [1053, "id16"], [1054, "sklearn-preprocessing"], [1054, "id4"], [1054, "id22"], [1055, "sklearn-preprocessing"], [1055, "id17"], [1056, "sklearn-preprocessing"], [1056, "id10"], [1057, "sklearn-preprocessing"], [1058, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1053, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1049, "sklearn-semi-supervised"], [1050, "sklearn-semi-supervised"], [1051, "sklearn-semi-supervised"], [1051, "id3"], [1051, "id16"], [1055, "sklearn-semi-supervised"], [1058, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1047, "sklearn-svm"], [1047, "id38"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1052, "sklearn-svm"], [1052, "id20"], [1053, "sklearn-svm"], [1054, "sklearn-svm"], [1055, "sklearn-svm"], [1057, "sklearn-svm"]], "sklearn.tree": [[40, null], [1047, "sklearn-tree"], [1048, "sklearn-tree"], [1048, "id19"], [1049, "sklearn-tree"], [1050, "sklearn-tree"], [1051, "sklearn-tree"], [1051, "id17"], [1052, "sklearn-tree"], [1052, "id21"], [1053, "sklearn-tree"], [1053, "id5"], [1053, "id17"], [1054, "sklearn-tree"], [1054, "id5"], [1054, "id23"], [1055, "sklearn-tree"], [1055, "id3"], [1055, "id18"], [1056, "sklearn-tree"], [1056, "id11"], [1057, "sklearn-tree"], [1057, "id12"], [1058, "sklearn-tree"]], "sklearn.utils": [[41, null], [1047, "sklearn-utils"], [1047, "id20"], [1047, "id39"], [1048, "sklearn-utils"], [1049, "sklearn-utils"], [1049, "id14"], [1050, "sklearn-utils"], [1050, "id12"], [1051, "sklearn-utils"], [1051, "id18"], [1052, "sklearn-utils"], [1052, "id5"], [1052, "id22"], [1053, "sklearn-utils"], [1053, "id18"], [1054, "sklearn-utils"], [1054, "id6"], [1054, "id24"], [1055, "sklearn-utils"], [1056, "sklearn-utils"], [1056, "id12"], [1057, "sklearn-utils"], [1057, "id13"], [1058, "sklearn-utils"]], "sklearn.utils.check_estimators": [[1058, "sklearn-utils-check-estimators"]], "sklearn.utils.sparsefuncs": [[1048, "sklearn-utils-sparsefuncs"]], "skops.io": [[408, "skops-io"]], "smacof": [[701, null]], "solido": [[1032, "id23"]], "sort_graph_by_row_values": [[866, null]], "sparse_encode": [[555, null]], "spectral_clustering": [[468, null]], "spectral_embedding": [[702, null]], "t-SNE: The effect of various perplexity values on the shape": [[242, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1005, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[801, null]], "train_test_split": [[837, null]], "trustworthiness": [[703, null]], "type_of_target": [[970, null]], "unique_labels": [[971, null]], "v_measure_score": [[802, null]], "validate_data": [[996, null]], "validation_curve": [[838, null]], "ward_tree": [[469, null]], "weighted_mode": [[957, null]], "zero_one_loss": [[803, null]], "\u201cStatlog\u201d German credit dataset": [[269, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[396, "term-1d", true]], "1d array": [[396, "term-1d-array", true]], "2d": [[396, "term-2d", true]], "2d array": [[396, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[472, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[621, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[625, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[626, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[628, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[629, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[631, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[945, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[973, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[396, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[933, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[964, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[965, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[964, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[460, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[446, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[447, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[946, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[947, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[948, "sklearn.utils.discovery.all_functions", false]], "api": [[396, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[651, "sklearn.linear_model.ARDRegression", false]], "array-like": [[396, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[935, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[936, "sklearn.utils.assert_all_finite", false]], "attribute": [[396, "term-attribute", true]], "attributes": [[396, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[713, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[968, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[396, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[851, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[428, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[804, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[652, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[867, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[429, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[429, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[457, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[459, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.Binarizer", false]], "binary": [[396, "term-binary", true]], "birch (class in sklearn.cluster)": [[448, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[621, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[625, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[626, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[628, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[629, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[631, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[716, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[926, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[443, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[445, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[444, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[396, "term-callable", true]], "categorical feature": [[396, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[847, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[488, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[938, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[939, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[949, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[643, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[991, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[940, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[941, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[718, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[993, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[937, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[719, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[396, "term-class_weight", true]], "classes_": [[396, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[600, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[601, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[681, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[682, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[806, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[807, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[810, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[821, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[871, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[720, "sklearn.metrics.classification_report", false]], "classifier": [[396, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[842, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[431, "sklearn.base.ClassifierMixin", false]], "classifiers": [[396, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[927, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[430, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[492, "sklearn.datasets.clear_data_home", false]], "clone": [[396, "term-clone", true]], "clone() (in module sklearn.base)": [[439, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[621, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[625, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[626, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[628, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[629, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[631, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[396, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[461, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[462, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[396, "term-clusterer", true]], "clusterers": [[396, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[432, "sklearn.base.ClusterMixin", false]], "coef_": [[396, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[913, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[914, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[915, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[916, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[917, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[994, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[470, "sklearn.compose.ColumnTransformer", false]], "common tests": [[396, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[848, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.completeness_score", false]], "components_": [[396, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[942, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[463, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[943, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[474, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[725, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[704, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[396, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[963, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[964, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[721, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[396, "term-continuous", true]], "continuous multi-output": [[396, "term-continuous-multi-output", true]], "continuous multioutput": [[396, "term-continuous-multioutput", true]], "convergencewarning": [[578, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[595, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[727, "sklearn.metrics.coverage_error", false]], "cross fitting": [[396, "term-0", true]], "cross validation": [[396, "term-1", true]], "cross-fitting": [[396, "term-cross-fitting", true]], "cross-validation": [[396, "term-cross-validation", true]], "cross-validation estimator": [[396, "term-cross-validation-estimator", true]], "cross-validation generator": [[396, "term-cross-validation-generator", true]], "cross-validation splitter": [[396, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.cross_validate", false]], "cv": [[396, "term-cv", true]], "cv splitter": [[396, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[396, "term-data-leakage", true]], "data type": [[396, "term-data-type", true]], "dataconversionwarning": [[579, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[580, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[450, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[425, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.dcg_score", false]], "decision_function": [[396, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[638, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[919, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[920, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[944, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[974, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[396, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[952, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[433, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[945, "sklearn.utils.deprecated", false]], "deprecation": [[396, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[734, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[621, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[625, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[626, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[628, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[629, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[631, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[552, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[553, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[538, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[588, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[396, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[973, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[973, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[706, "sklearn.metrics.DistanceMetric", false]], "docstring": [[396, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[396, "term-double-underscore", true]], "double underscore notation": [[396, "term-double-underscore-notation", true]], "dtype": [[396, "term-dtype", true]], "duck typing": [[396, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[558, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[559, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[493, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[396, "term-early-stopping", true]], "efficiencywarning": [[581, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[653, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[475, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[396, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[483, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[476, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[464, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[396, "term-estimator", true]], "estimator instance": [[396, "term-estimator-instance", true]], "estimator tags": [[396, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[951, "sklearn.utils.estimator_html_repr", false]], "estimators": [[396, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[562, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[563, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[564, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[565, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[570, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[571, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[572, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[573, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[396, "term-evaluation-metric", true]], "evaluation metrics": [[396, "term-evaluation-metrics", true]], "examples": [[396, "term-examples", true]], "experimental": [[396, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[923, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[924, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[591, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[921, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[922, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[539, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[540, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[426, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.fbeta_score", false]], "feature": [[396, "term-feature", true]], "feature extractor": [[396, "term-feature-extractor", true]], "feature extractors": [[396, "term-feature-extractors", true]], "feature vector": [[396, "term-feature-vector", true]], "feature_importances_": [[396, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[560, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[561, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[564, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[565, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[566, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[567, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[571, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[572, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[573, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[919, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[920, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[921, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[922, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[870, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[871, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[451, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[589, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[396, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[870, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[503, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[504, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[505, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[396, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[697, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[698, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[396, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[451, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[432, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[436, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[396, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[438, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[608, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[697, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[698, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[582, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[396, "term-fitted", true]], "fitting": [[396, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[806, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[973, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[444, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[638, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[639, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[704, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[705, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[707, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[708, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[709, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[813, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[830, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[444, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[704, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[705, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[707, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[708, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[709, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.fromkeys", false]], "function": [[396, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[396, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[655, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[805, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[849, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[903, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[958, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[959, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[633, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[506, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[396, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[430, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[435, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[608, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[429, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[428, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[697, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[698, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[808, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[809, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[812, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[814, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[815, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[816, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[817, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[820, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[822, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[823, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[824, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[825, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[826, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[827, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[828, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[706, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[396, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[808, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[809, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[812, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[814, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[815, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[816, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[817, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[820, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[822, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[823, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[824, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[825, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[826, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[827, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[828, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[396, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[428, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[621, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[625, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[626, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[628, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[629, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[631, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[697, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[698, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[966, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[739, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[740, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[429, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[429, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[608, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[960, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[484, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[477, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[478, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[592, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[807, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[808, "sklearn.model_selection.GroupKFold", false]], "groups": [[396, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[809, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[810, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[811, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[995, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[596, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[452, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[742, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[743, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[744, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[656, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[396, "term-hyper-parameter", true]], "hyperparameter": [[396, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[621, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[625, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[626, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[628, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[629, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[631, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[593, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[396, "term-imputation", true]], "impute": [[396, "term-impute", true]], "inconsistentversionwarning": [[583, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[396, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[962, "sklearn.utils.indexable", false]], "induction": [[396, "term-induction", true]], "inductive": [[396, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[884, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[885, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[892, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[989, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[990, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[985, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[986, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[987, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[928, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[608, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[440, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[441, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[969, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[442, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[621, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[625, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[626, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[628, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[629, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[631, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[570, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[695, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[644, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[642, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[634, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[745, "sklearn.metrics.jaccard_score", false]], "joblib": [[396, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[905, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[465, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KDTree", false]], "kernel": [[396, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[856, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[650, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[812, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[453, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[466, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[864, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[853, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[854, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[855, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[635, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[918, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[396, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[746, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[747, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[906, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[396, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[907, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[657, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[659, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[543, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[396, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[814, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[815, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[816, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[817, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[485, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[486, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[479, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[664, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[911, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[912, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[515, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[516, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[517, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[700, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[696, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[857, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[748, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[665, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[472, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[473, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[872, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[749, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[535, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[536, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[537, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[873, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[750, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.max_error", false]], "max_iter": [[396, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[697, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[467, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[757, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[758, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[759, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[988, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[454, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[760, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[396, "term-memmapping", true]], "memory": [[396, "term-memory", true]], "memory map": [[396, "term-memory-map", true]], "memory mapping": [[396, "term-memory-mapping", true]], "meta-estimator": [[396, "term-meta-estimator", true]], "meta-estimators": [[396, "term-meta-estimators", true]], "metadata": [[396, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[963, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[964, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[396, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[434, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[396, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[965, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[396, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[934, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[480, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[455, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[545, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[546, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[396, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[636, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[868, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[869, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [586, "module-sklearn.experimental.enable_halving_search_cv", false], [587, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[396, "term-multi-class", true]], "multi-class multi-output": [[396, "term-multi-class-multi-output", true]], "multi-label": [[396, "term-multi-label", true]], "multi-output": [[396, "term-multi-output", true]], "multi-output continuous": [[396, "term-multi-output-continuous", true]], "multi-output multi-class": [[396, "term-multi-output-multi-class", true]], "multiclass": [[396, "term-multiclass", true]], "multiclass multioutput": [[396, "term-multiclass-multioutput", true]], "multilabel": [[396, "term-multilabel", true]], "multilabel indicator matrices": [[396, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[396, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[840, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[761, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[850, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[396, "term-multioutput", true]], "multioutput continuous": [[396, "term-multioutput-continuous", true]], "multioutput multiclass": [[396, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[843, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[844, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[667, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[669, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[670, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[972, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[614, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[615, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[762, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[839, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[840, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[396, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[549, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[621, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[625, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[626, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[628, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[629, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[631, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[396, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[471, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[549, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[574, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[575, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[576, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[577, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[604, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[807, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[810, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[821, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[870, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[871, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[396, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[396, "term-n_iter_no_change", true]], "n_jobs": [[396, "term-n_jobs", true]], "n_outputs": [[396, "term-n_outputs", true]], "n_samples": [[396, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[913, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[914, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[915, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[916, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[917, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[396, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[574, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[575, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[576, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[577, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[871, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[470, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[396, "term-narrative-docs", true]], "narrative documentation": [[396, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[763, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[858, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[859, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[547, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[554, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[584, "sklearn.exceptions.NotFittedError", false]], "np": [[396, "term-np", true]], "nusvc (class in sklearn.svm)": [[913, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[914, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[481, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[427, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[915, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[435, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[839, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[840, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[396, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[456, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[692, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[693, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[396, "term-out-of-core", true]], "outlier detector": [[396, "term-outlier-detector", true]], "outlier detectors": [[396, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[436, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[841, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[396, "term-outputs", true]], "pair": [[396, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[722, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[396, "term-pairwise-metric", true]], "pairwise metrics": [[396, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[785, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[786, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[787, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[788, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[973, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[975, "sklearn.utils.parallel_backend", false]], "param": [[396, "term-param", true]], "parameter": [[396, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[818, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[396, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[819, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[950, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[396, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[640, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[396, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[639, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[653, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[654, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[659, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[660, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[669, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[548, "sklearn.decomposition.PCA", false]], "pd": [[396, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[675, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[641, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[836, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[871, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[444, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[638, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[639, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[704, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[705, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[707, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[708, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[709, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[813, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[830, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[925, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[489, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[490, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[491, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[782, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[396, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[886, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[789, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[790, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[707, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[396, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[396, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[396, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[396, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[708, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[396, "term-predictor", true]], "predictors": [[396, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[973, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[913, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[916, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[913, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[916, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[967, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[900, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[616, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[865, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.rand_score", false]], "random_state": [[396, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[571, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[572, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[954, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[955, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[821, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[573, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[783, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[648, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[594, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[396, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[977, "sklearn.utils.register_parallel_backend", false]], "regressor": [[396, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[845, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[437, "sklearn.base.RegressorMixin", false]], "regressors": [[396, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[929, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[823, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[621, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[625, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[626, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[628, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[629, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[631, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[978, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[679, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[694, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[681, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[682, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[680, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[901, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[796, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[709, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[797, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[798, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[964, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[396, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[979, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[956, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[980, "sklearn.utils.safe_sqr", false]], "sample": [[396, "term-sample", true]], "sample properties": [[396, "term-sample-properties", true]], "sample property": [[396, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[396, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[976, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[396, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[902, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[396, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[396, "term-scikit-learn-contrib", true]], "score": [[396, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[431, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[433, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[437, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[396, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[396, "term-scorer", true]], "scoring": [[396, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[608, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[396, "term-semi-supervised", true]], "semi-supervised learning": [[396, "term-semi-supervised-learning", true]], "semisupervised": [[396, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[609, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[909, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[697, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[438, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[608, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[396, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[428, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[570, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[621, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[625, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[626, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[628, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[629, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[631, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[678, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[697, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[698, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[699, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[804, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[805, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[856, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[857, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[859, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[908, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[915, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[843, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[558, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[559, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[562, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[563, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[564, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[565, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[571, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[572, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[617, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[618, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[650, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[651, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[652, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[653, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[654, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[655, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[656, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[657, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[658, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[659, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[660, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[661, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[662, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[663, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[664, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[667, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[668, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[669, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[670, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[676, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[677, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[679, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[681, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[682, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[680, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[686, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[687, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[806, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[839, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[840, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[841, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[842, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[844, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[845, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[846, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[847, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[848, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[849, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[850, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[853, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[854, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[858, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[861, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[862, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[868, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[869, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[906, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[907, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[912, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[913, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[914, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[916, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[917, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[919, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[920, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[921, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[922, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[808, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[809, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[814, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[816, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[825, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[683, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[684, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[685, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[910, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[487, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[482, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[981, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[824, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[784, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[799, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[800, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[637, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[961, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[586, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[587, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[396, "term-SLEP", true]], "sleps": [[396, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[701, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[866, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[396, "term-sparse-graph", true]], "sparse matrix": [[396, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[653, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[659, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[667, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[669, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[555, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[549, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[550, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[904, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[665, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[666, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[673, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[674, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[675, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[683, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[684, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[685, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[911, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[468, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[702, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[457, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[458, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[459, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[698, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[890, "sklearn.preprocessing.SplineTransformer", false]], "split": [[396, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[808, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[809, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[812, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[814, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[815, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[816, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[817, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[820, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[822, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[823, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[824, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[825, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[826, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[827, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[828, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[574, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[575, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[567, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[569, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[566, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[568, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[560, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[561, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[891, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[396, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[825, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[826, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[827, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[631, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[396, "term-supervised", true]], "supervised learning": [[396, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[916, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[917, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[930, "sklearn.utils.Tags", false]], "target": [[396, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[892, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[396, "term-targets", true]], "targettags (class in sklearn.utils)": [[931, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[597, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[686, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[619, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[620, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[621, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[623, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[622, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[625, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[626, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[627, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[628, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[630, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[629, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[631, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[604, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[828, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[801, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[837, "sklearn.model_selection.train_test_split", false]], "transduction": [[396, "term-transduction", true]], "transductive": [[396, "term-transductive", true]], "transform": [[396, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[538, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[539, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[540, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[541, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[542, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[543, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[544, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[545, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[546, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[547, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[548, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[549, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[550, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[551, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[573, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[574, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[575, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[576, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[577, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[588, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[589, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[590, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[595, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[596, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[597, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[598, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[599, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[600, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[601, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[602, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[603, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[604, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[605, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[606, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[608, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[607, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[609, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[610, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[634, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[635, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[636, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[637, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[642, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[645, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[646, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[647, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[648, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[649, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[695, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[696, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[807, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[810, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[811, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[821, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[855, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[860, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[863, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[867, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[870, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[871, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[874, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[875, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[876, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[877, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[878, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[879, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[880, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[881, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[882, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[883, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[884, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[885, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[886, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[887, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[888, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[889, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[890, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[891, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[892, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[903, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[904, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[471, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[396, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[438, "sklearn.base.TransformerMixin", false]], "transformers": [[396, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[932, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[551, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[703, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[699, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[829, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[687, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[851, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[852, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[970, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[585, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[971, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[396, "term-unlabeled", true]], "unlabeled data": [[396, "term-unlabeled-data", true]], "unsupervised": [[396, "term-unsupervised", true]], "unsupervised learning": [[396, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[802, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[996, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[964, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[838, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[830, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[624, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[926, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[610, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[396, "term-vectorizer", true]], "vectorizers": [[396, "term-vectorizers", true]], "verbose": [[396, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[576, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[577, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[469, "sklearn.cluster.ward_tree", false]], "warm_start": [[396, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[957, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[632, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[396, "term-X", true]], "xt": [[396, "term-Xt", true]], "y": [[396, "term-Y", true], [396, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[803, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [474, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [633, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [909, 4, 1, "", "set_config"], [910, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[428, 1, 1, "", "BaseEstimator"], [429, 1, 1, "", "BiclusterMixin"], [430, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [431, 1, 1, "", "ClassifierMixin"], [432, 1, 1, "", "ClusterMixin"], [433, 1, 1, "", "DensityMixin"], [434, 1, 1, "", "MetaEstimatorMixin"], [435, 1, 1, "", "OneToOneFeatureMixin"], [436, 1, 1, "", "OutlierMixin"], [437, 1, 1, "", "RegressorMixin"], [438, 1, 1, "", "TransformerMixin"], [439, 4, 1, "", "clone"], [440, 4, 1, "", "is_classifier"], [441, 4, 1, "", "is_clusterer"], [442, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[428, 2, 1, "", "get_metadata_routing"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[429, 3, 1, "", "biclusters_"], [429, 2, 1, "", "get_indices"], [429, 2, 1, "", "get_shape"], [429, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[430, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[431, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[432, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[433, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[435, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[436, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[437, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[438, 2, 1, "", "fit_transform"], [438, 2, 1, "", "set_output"]], "sklearn.calibration": [[443, 1, 1, "", "CalibratedClassifierCV"], [444, 1, 1, "", "CalibrationDisplay"], [445, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "predict_proba"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[444, 2, 1, "", "from_estimator"], [444, 2, 1, "", "from_predictions"], [444, 2, 1, "", "plot"]], "sklearn.cluster": [[446, 1, 1, "", "AffinityPropagation"], [447, 1, 1, "", "AgglomerativeClustering"], [448, 1, 1, "", "Birch"], [449, 1, 1, "", "BisectingKMeans"], [450, 1, 1, "", "DBSCAN"], [451, 1, 1, "", "FeatureAgglomeration"], [452, 1, 1, "", "HDBSCAN"], [453, 1, 1, "", "KMeans"], [454, 1, 1, "", "MeanShift"], [455, 1, 1, "", "MiniBatchKMeans"], [456, 1, 1, "", "OPTICS"], [457, 1, 1, "", "SpectralBiclustering"], [458, 1, 1, "", "SpectralClustering"], [459, 1, 1, "", "SpectralCoclustering"], [460, 4, 1, "", "affinity_propagation"], [461, 4, 1, "", "cluster_optics_dbscan"], [462, 4, 1, "", "cluster_optics_xi"], [463, 4, 1, "", "compute_optics_graph"], [425, 4, 1, "", "dbscan"], [464, 4, 1, "", "estimate_bandwidth"], [465, 4, 1, "", "k_means"], [466, 4, 1, "", "kmeans_plusplus"], [467, 4, 1, "", "mean_shift"], [468, 4, 1, "", "spectral_clustering"], [469, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "partial_fit"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_fit_request"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[451, 2, 1, "", "fit"], [451, 3, 1, "", "fit_predict"], [451, 2, 1, "", "fit_transform"], [451, 2, 1, "", "get_feature_names_out"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "inverse_transform"], [451, 2, 1, "", "set_output"], [451, 2, 1, "", "set_params"], [451, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[452, 2, 1, "", "dbscan_clustering"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "fit_transform"], [453, 2, 1, "", "get_feature_names_out"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "predict"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_fit_request"], [453, 2, 1, "", "set_output"], [453, 2, 1, "", "set_params"], [453, 2, 1, "", "set_score_request"], [453, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "predict"], [454, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "fit_transform"], [455, 2, 1, "", "get_feature_names_out"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "partial_fit"], [455, 2, 1, "", "predict"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_fit_request"], [455, 2, 1, "", "set_output"], [455, 2, 1, "", "set_params"], [455, 2, 1, "", "set_partial_fit_request"], [455, 2, 1, "", "set_score_request"], [455, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_predict"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[457, 3, 1, "", "biclusters_"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_indices"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_shape"], [457, 2, 1, "", "get_submatrix"], [457, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_predict"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[459, 3, 1, "", "biclusters_"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_indices"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_shape"], [459, 2, 1, "", "get_submatrix"], [459, 2, 1, "", "set_params"]], "sklearn.compose": [[470, 1, 1, "", "ColumnTransformer"], [471, 1, 1, "", "TransformedTargetRegressor"], [472, 1, 1, "", "make_column_selector"], [473, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[470, 2, 1, "", "fit"], [470, 2, 1, "", "fit_transform"], [470, 2, 1, "", "get_feature_names_out"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 3, 1, "", "named_transformers_"], [470, 2, 1, "", "set_output"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 3, 1, "", "n_features_in_"], [471, 2, 1, "", "predict"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[472, 2, 1, "", "__call__"]], "sklearn.covariance": [[475, 1, 1, "", "EllipticEnvelope"], [476, 1, 1, "", "EmpiricalCovariance"], [477, 1, 1, "", "GraphicalLasso"], [478, 1, 1, "", "GraphicalLassoCV"], [479, 1, 1, "", "LedoitWolf"], [480, 1, 1, "", "MinCovDet"], [481, 1, 1, "", "OAS"], [482, 1, 1, "", "ShrunkCovariance"], [483, 4, 1, "", "empirical_covariance"], [484, 4, 1, "", "graphical_lasso"], [485, 4, 1, "", "ledoit_wolf"], [486, 4, 1, "", "ledoit_wolf_shrinkage"], [427, 4, 1, "", "oas"], [487, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[475, 2, 1, "", "correct_covariance"], [475, 2, 1, "", "decision_function"], [475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "fit_predict"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "predict"], [475, 2, 1, "", "reweight_covariance"], [475, 2, 1, "", "score"], [475, 2, 1, "", "score_samples"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[480, 2, 1, "", "correct_covariance"], [480, 2, 1, "", "error_norm"], [480, 2, 1, "", "fit"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "get_precision"], [480, 2, 1, "", "mahalanobis"], [480, 2, 1, "", "reweight_covariance"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[481, 2, 1, "", "error_norm"], [481, 2, 1, "", "fit"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "get_precision"], [481, 2, 1, "", "mahalanobis"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[482, 2, 1, "", "error_norm"], [482, 2, 1, "", "fit"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "get_precision"], [482, 2, 1, "", "mahalanobis"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[488, 1, 1, "", "CCA"], [489, 1, 1, "", "PLSCanonical"], [490, 1, 1, "", "PLSRegression"], [491, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_metadata_routing"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "inverse_transform"], [488, 2, 1, "", "predict"], [488, 2, 1, "", "score"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "set_predict_request"], [488, 2, 1, "", "set_score_request"], [488, 2, 1, "", "set_transform_request"], [488, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_metadata_routing"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "inverse_transform"], [489, 2, 1, "", "predict"], [489, 2, 1, "", "score"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "set_predict_request"], [489, 2, 1, "", "set_score_request"], [489, 2, 1, "", "set_transform_request"], [489, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_metadata_routing"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "inverse_transform"], [490, 2, 1, "", "predict"], [490, 2, 1, "", "score"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "set_predict_request"], [490, 2, 1, "", "set_score_request"], [490, 2, 1, "", "set_transform_request"], [490, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[491, 2, 1, "", "fit"], [491, 2, 1, "", "fit_transform"], [491, 2, 1, "", "get_feature_names_out"], [491, 2, 1, "", "get_metadata_routing"], [491, 2, 1, "", "get_params"], [491, 2, 1, "", "set_output"], [491, 2, 1, "", "set_params"], [491, 2, 1, "", "transform"]], "sklearn.datasets": [[492, 4, 1, "", "clear_data_home"], [493, 4, 1, "", "dump_svmlight_file"], [494, 4, 1, "", "fetch_20newsgroups"], [495, 4, 1, "", "fetch_20newsgroups_vectorized"], [496, 4, 1, "", "fetch_california_housing"], [497, 4, 1, "", "fetch_covtype"], [498, 4, 1, "", "fetch_file"], [499, 4, 1, "", "fetch_kddcup99"], [500, 4, 1, "", "fetch_lfw_pairs"], [501, 4, 1, "", "fetch_lfw_people"], [502, 4, 1, "", "fetch_olivetti_faces"], [503, 4, 1, "", "fetch_openml"], [504, 4, 1, "", "fetch_rcv1"], [505, 4, 1, "", "fetch_species_distributions"], [506, 4, 1, "", "get_data_home"], [507, 4, 1, "", "load_breast_cancer"], [508, 4, 1, "", "load_diabetes"], [509, 4, 1, "", "load_digits"], [510, 4, 1, "", "load_files"], [511, 4, 1, "", "load_iris"], [512, 4, 1, "", "load_linnerud"], [513, 4, 1, "", "load_sample_image"], [514, 4, 1, "", "load_sample_images"], [515, 4, 1, "", "load_svmlight_file"], [516, 4, 1, "", "load_svmlight_files"], [517, 4, 1, "", "load_wine"], [518, 4, 1, "", "make_biclusters"], [519, 4, 1, "", "make_blobs"], [520, 4, 1, "", "make_checkerboard"], [521, 4, 1, "", "make_circles"], [522, 4, 1, "", "make_classification"], [523, 4, 1, "", "make_friedman1"], [524, 4, 1, "", "make_friedman2"], [525, 4, 1, "", "make_friedman3"], [526, 4, 1, "", "make_gaussian_quantiles"], [527, 4, 1, "", "make_hastie_10_2"], [528, 4, 1, "", "make_low_rank_matrix"], [529, 4, 1, "", "make_moons"], [530, 4, 1, "", "make_multilabel_classification"], [531, 4, 1, "", "make_regression"], [532, 4, 1, "", "make_s_curve"], [533, 4, 1, "", "make_sparse_coded_signal"], [534, 4, 1, "", "make_sparse_spd_matrix"], [535, 4, 1, "", "make_sparse_uncorrelated"], [536, 4, 1, "", "make_spd_matrix"], [537, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[538, 1, 1, "", "DictionaryLearning"], [539, 1, 1, "", "FactorAnalysis"], [540, 1, 1, "", "FastICA"], [541, 1, 1, "", "IncrementalPCA"], [542, 1, 1, "", "KernelPCA"], [543, 1, 1, "", "LatentDirichletAllocation"], [544, 1, 1, "", "MiniBatchDictionaryLearning"], [545, 1, 1, "", "MiniBatchNMF"], [546, 1, 1, "", "MiniBatchSparsePCA"], [547, 1, 1, "", "NMF"], [548, 1, 1, "", "PCA"], [549, 1, 1, "", "SparseCoder"], [550, 1, 1, "", "SparsePCA"], [551, 1, 1, "", "TruncatedSVD"], [552, 4, 1, "", "dict_learning"], [553, 4, 1, "", "dict_learning_online"], [426, 4, 1, "", "fastica"], [554, 4, 1, "", "non_negative_factorization"], [555, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_covariance"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_precision"], [539, 2, 1, "", "score"], [539, 2, 1, "", "score_samples"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_inverse_transform_request"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "set_transform_request"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_covariance"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "get_precision"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "partial_fit"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "set_partial_fit_request"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "partial_fit"], [543, 2, 1, "", "perplexity"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "partial_fit"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "partial_fit"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_covariance"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "get_precision"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "score"], [548, 2, 1, "", "score_samples"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 3, 1, "", "n_components_"], [549, 3, 1, "", "n_features_in_"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "inverse_transform"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "inverse_transform"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[556, 1, 1, "", "LinearDiscriminantAnalysis"], [557, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[556, 2, 1, "", "decision_function"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_transform"], [556, 2, 1, "", "get_feature_names_out"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_output"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[557, 2, 1, "", "decision_function"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[558, 1, 1, "", "DummyClassifier"], [559, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_predict_request"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[560, 1, 1, "", "AdaBoostClassifier"], [561, 1, 1, "", "AdaBoostRegressor"], [562, 1, 1, "", "BaggingClassifier"], [563, 1, 1, "", "BaggingRegressor"], [564, 1, 1, "", "ExtraTreesClassifier"], [565, 1, 1, "", "ExtraTreesRegressor"], [566, 1, 1, "", "GradientBoostingClassifier"], [567, 1, 1, "", "GradientBoostingRegressor"], [568, 1, 1, "", "HistGradientBoostingClassifier"], [569, 1, 1, "", "HistGradientBoostingRegressor"], [570, 1, 1, "", "IsolationForest"], [571, 1, 1, "", "RandomForestClassifier"], [572, 1, 1, "", "RandomForestRegressor"], [573, 1, 1, "", "RandomTreesEmbedding"], [574, 1, 1, "", "StackingClassifier"], [575, 1, 1, "", "StackingRegressor"], [576, 1, 1, "", "VotingClassifier"], [577, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[560, 2, 1, "", "decision_function"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_decision_function"], [560, 2, 1, "", "staged_predict"], [560, 2, 1, "", "staged_predict_proba"], [560, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_predict"], [561, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[562, 2, 1, "", "decision_function"], [562, 3, 1, "", "estimators_samples_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[563, 3, 1, "", "estimators_samples_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_function"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_log_proba"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "staged_decision_function"], [566, 2, 1, "", "staged_predict"], [566, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[567, 2, 1, "", "apply"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[568, 2, 1, "", "decision_function"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_iter_"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "staged_decision_function"], [568, 2, 1, "", "staged_predict"], [568, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_iter_"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[570, 2, 1, "", "decision_function"], [570, 3, 1, "", "estimators_samples_"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_predict"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score_samples"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[571, 2, 1, "", "apply"], [571, 2, 1, "", "decision_path"], [571, 3, 1, "", "estimators_samples_"], [571, 3, 1, "", "feature_importances_"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "predict_log_proba"], [571, 2, 1, "", "predict_proba"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[572, 2, 1, "", "apply"], [572, 2, 1, "", "decision_path"], [572, 3, 1, "", "estimators_samples_"], [572, 3, 1, "", "feature_importances_"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[573, 2, 1, "", "apply"], [573, 2, 1, "", "decision_path"], [573, 3, 1, "", "estimators_samples_"], [573, 3, 1, "", "feature_importances_"], [573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[574, 2, 1, "", "decision_function"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "n_features_in_"], [574, 3, 1, "", "named_estimators"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "predict_proba"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"], [574, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "n_features_in_"], [575, 3, 1, "", "named_estimators"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_fit_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_score_request"], [575, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "n_features_in_"], [576, 3, 1, "", "named_estimators"], [576, 2, 1, "", "predict"], [576, 2, 1, "", "predict_proba"], [576, 2, 1, "", "score"], [576, 2, 1, "", "set_fit_request"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "set_score_request"], [576, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_metadata_routing"], [577, 2, 1, "", "get_params"], [577, 3, 1, "", "n_features_in_"], [577, 3, 1, "", "named_estimators"], [577, 2, 1, "", "predict"], [577, 2, 1, "", "score"], [577, 2, 1, "", "set_fit_request"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "set_score_request"], [577, 2, 1, "", "transform"]], "sklearn.exceptions": [[578, 5, 1, "", "ConvergenceWarning"], [579, 5, 1, "", "DataConversionWarning"], [580, 5, 1, "", "DataDimensionalityWarning"], [581, 5, 1, "", "EfficiencyWarning"], [582, 5, 1, "", "FitFailedWarning"], [583, 5, 1, "", "InconsistentVersionWarning"], [584, 5, 1, "", "NotFittedError"], [585, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[586, 0, 0, "-", "enable_halving_search_cv"], [587, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[588, 1, 1, "", "DictVectorizer"], [589, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "restrict"], [588, 2, 1, "", "set_inverse_transform_request"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[590, 1, 1, "", "PatchExtractor"], [591, 4, 1, "", "extract_patches_2d"], [592, 4, 1, "", "grid_to_graph"], [593, 4, 1, "", "img_to_graph"], [594, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[595, 1, 1, "", "CountVectorizer"], [596, 1, 1, "", "HashingVectorizer"], [597, 1, 1, "", "TfidfTransformer"], [598, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[595, 2, 1, "", "build_analyzer"], [595, 2, 1, "", "build_preprocessor"], [595, 2, 1, "", "build_tokenizer"], [595, 2, 1, "", "decode"], [595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_stop_words"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_fit_request"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "set_transform_request"], [595, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[596, 2, 1, "", "build_analyzer"], [596, 2, 1, "", "build_preprocessor"], [596, 2, 1, "", "build_tokenizer"], [596, 2, 1, "", "decode"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_stop_words"], [596, 2, 1, "", "partial_fit"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "set_transform_request"], [597, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[598, 2, 1, "", "build_analyzer"], [598, 2, 1, "", "build_preprocessor"], [598, 2, 1, "", "build_tokenizer"], [598, 2, 1, "", "decode"], [598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_stop_words"], [598, 3, 1, "", "idf_"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_fit_request"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "set_transform_request"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection": [[599, 1, 1, "", "GenericUnivariateSelect"], [600, 1, 1, "", "RFE"], [601, 1, 1, "", "RFECV"], [602, 1, 1, "", "SelectFdr"], [603, 1, 1, "", "SelectFpr"], [604, 1, 1, "", "SelectFromModel"], [605, 1, 1, "", "SelectFwe"], [606, 1, 1, "", "SelectKBest"], [607, 1, 1, "", "SelectPercentile"], [608, 1, 1, "", "SelectorMixin"], [609, 1, 1, "", "SequentialFeatureSelector"], [610, 1, 1, "", "VarianceThreshold"], [611, 4, 1, "", "chi2"], [612, 4, 1, "", "f_classif"], [613, 4, 1, "", "f_regression"], [614, 4, 1, "", "mutual_info_classif"], [615, 4, 1, "", "mutual_info_regression"], [616, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[600, 3, 1, "", "classes_"], [600, 2, 1, "", "decision_function"], [600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "predict"], [600, 2, 1, "", "predict_log_proba"], [600, 2, 1, "", "predict_proba"], [600, 2, 1, "", "score"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[601, 3, 1, "", "classes_"], [601, 2, 1, "", "decision_function"], [601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "predict"], [601, 2, 1, "", "predict_log_proba"], [601, 2, 1, "", "predict_proba"], [601, 2, 1, "", "score"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 3, 1, "", "n_features_in_"], [604, 2, 1, "", "partial_fit"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "threshold_"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_support"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "fit_transform"], [609, 2, 1, "", "get_feature_names_out"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "get_support"], [609, 2, 1, "", "inverse_transform"], [609, 2, 1, "", "set_output"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "get_support"], [610, 2, 1, "", "inverse_transform"], [610, 2, 1, "", "set_output"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[617, 1, 1, "", "GaussianProcessClassifier"], [618, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "get_metadata_routing"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "kernel_"], [617, 2, 1, "", "log_marginal_likelihood"], [617, 2, 1, "", "predict"], [617, 2, 1, "", "predict_proba"], [617, 2, 1, "", "score"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "get_metadata_routing"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "log_marginal_likelihood"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "sample_y"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "set_predict_request"], [618, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[619, 1, 1, "", "CompoundKernel"], [620, 1, 1, "", "ConstantKernel"], [621, 1, 1, "", "DotProduct"], [622, 1, 1, "", "ExpSineSquared"], [623, 1, 1, "", "Exponentiation"], [624, 1, 1, "", "Hyperparameter"], [625, 1, 1, "", "Kernel"], [626, 1, 1, "", "Matern"], [627, 1, 1, "", "PairwiseKernel"], [628, 1, 1, "", "Product"], [629, 1, 1, "", "RBF"], [630, 1, 1, "", "RationalQuadratic"], [631, 1, 1, "", "Sum"], [632, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameter_length_scale"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[624, 6, 1, "", "bounds"], [624, 2, 1, "", "count"], [624, 6, 1, "", "fixed"], [624, 2, 1, "", "index"], [624, 6, 1, "", "n_elements"], [624, 6, 1, "", "name"], [624, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[630, 2, 1, "", "__call__"], [630, 3, 1, "", "bounds"], [630, 2, 1, "", "clone_with_theta"], [630, 2, 1, "", "diag"], [630, 2, 1, "", "get_params"], [630, 3, 1, "", "hyperparameters"], [630, 2, 1, "", "is_stationary"], [630, 3, 1, "", "n_dims"], [630, 3, 1, "", "requires_vector_input"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[631, 2, 1, "", "__call__"], [631, 3, 1, "", "bounds"], [631, 2, 1, "", "clone_with_theta"], [631, 2, 1, "", "diag"], [631, 2, 1, "", "get_params"], [631, 3, 1, "", "hyperparameters"], [631, 2, 1, "", "is_stationary"], [631, 3, 1, "", "n_dims"], [631, 3, 1, "", "requires_vector_input"], [631, 2, 1, "", "set_params"], [631, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[632, 2, 1, "", "__call__"], [632, 3, 1, "", "bounds"], [632, 2, 1, "", "clone_with_theta"], [632, 2, 1, "", "diag"], [632, 2, 1, "", "get_params"], [632, 3, 1, "", "hyperparameters"], [632, 2, 1, "", "is_stationary"], [632, 3, 1, "", "n_dims"], [632, 3, 1, "", "requires_vector_input"], [632, 2, 1, "", "set_params"], [632, 3, 1, "", "theta"]], "sklearn.impute": [[634, 1, 1, "", "IterativeImputer"], [635, 1, 1, "", "KNNImputer"], [636, 1, 1, "", "MissingIndicator"], [637, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "inverse_transform"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.inspection": [[638, 1, 1, "", "DecisionBoundaryDisplay"], [639, 1, 1, "", "PartialDependenceDisplay"], [640, 4, 1, "", "partial_dependence"], [641, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[638, 2, 1, "", "from_estimator"], [638, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[639, 2, 1, "", "from_estimator"], [639, 2, 1, "", "plot"]], "sklearn.isotonic": [[642, 1, 1, "", "IsotonicRegression"], [643, 4, 1, "", "check_increasing"], [644, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_predict_request"], [642, 2, 1, "", "set_score_request"], [642, 2, 1, "", "set_transform_request"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[645, 1, 1, "", "AdditiveChi2Sampler"], [646, 1, 1, "", "Nystroem"], [647, 1, 1, "", "PolynomialCountSketch"], [648, 1, 1, "", "RBFSampler"], [649, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "fit_transform"], [647, 2, 1, "", "get_feature_names_out"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "set_output"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "fit_transform"], [648, 2, 1, "", "get_feature_names_out"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "set_output"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "fit_transform"], [649, 2, 1, "", "get_feature_names_out"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "set_output"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[650, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[651, 1, 1, "", "ARDRegression"], [652, 1, 1, "", "BayesianRidge"], [653, 1, 1, "", "ElasticNet"], [654, 1, 1, "", "ElasticNetCV"], [655, 1, 1, "", "GammaRegressor"], [656, 1, 1, "", "HuberRegressor"], [657, 1, 1, "", "Lars"], [658, 1, 1, "", "LarsCV"], [659, 1, 1, "", "Lasso"], [660, 1, 1, "", "LassoCV"], [661, 1, 1, "", "LassoLars"], [662, 1, 1, "", "LassoLarsCV"], [663, 1, 1, "", "LassoLarsIC"], [664, 1, 1, "", "LinearRegression"], [665, 1, 1, "", "LogisticRegression"], [666, 1, 1, "", "LogisticRegressionCV"], [667, 1, 1, "", "MultiTaskElasticNet"], [668, 1, 1, "", "MultiTaskElasticNetCV"], [669, 1, 1, "", "MultiTaskLasso"], [670, 1, 1, "", "MultiTaskLassoCV"], [671, 1, 1, "", "OrthogonalMatchingPursuit"], [672, 1, 1, "", "OrthogonalMatchingPursuitCV"], [673, 1, 1, "", "PassiveAggressiveClassifier"], [674, 1, 1, "", "PassiveAggressiveRegressor"], [675, 1, 1, "", "Perceptron"], [676, 1, 1, "", "PoissonRegressor"], [677, 1, 1, "", "QuantileRegressor"], [678, 1, 1, "", "RANSACRegressor"], [679, 1, 1, "", "Ridge"], [680, 1, 1, "", "RidgeCV"], [681, 1, 1, "", "RidgeClassifier"], [682, 1, 1, "", "RidgeClassifierCV"], [683, 1, 1, "", "SGDClassifier"], [684, 1, 1, "", "SGDOneClassSVM"], [685, 1, 1, "", "SGDRegressor"], [686, 1, 1, "", "TheilSenRegressor"], [687, 1, 1, "", "TweedieRegressor"], [688, 4, 1, "", "enet_path"], [689, 4, 1, "", "lars_path"], [690, 4, 1, "", "lars_path_gram"], [691, 4, 1, "", "lasso_path"], [692, 4, 1, "", "orthogonal_mp"], [693, 4, 1, "", "orthogonal_mp_gram"], [694, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_predict_request"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_predict_request"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"], [653, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[665, 2, 1, "", "decision_function"], [665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "predict_log_proba"], [665, 2, 1, "", "predict_proba"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "predict_log_proba"], [666, 2, 1, "", "predict_proba"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "path"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"], [667, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "path"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "path"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"], [669, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "path"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[673, 2, 1, "", "decision_function"], [673, 2, 1, "", "densify"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "partial_fit"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_partial_fit_request"], [673, 2, 1, "", "set_score_request"], [673, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "set_score_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[675, 2, 1, "", "decision_function"], [675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "set_score_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[681, 3, 1, "", "classes_"], [681, 2, 1, "", "decision_function"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[682, 3, 1, "", "classes_"], [682, 2, 1, "", "decision_function"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[683, 2, 1, "", "decision_function"], [683, 2, 1, "", "densify"], [683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "partial_fit"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "predict_log_proba"], [683, 2, 1, "", "predict_proba"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_partial_fit_request"], [683, 2, 1, "", "set_score_request"], [683, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[684, 2, 1, "", "decision_function"], [684, 2, 1, "", "densify"], [684, 2, 1, "", "fit"], [684, 2, 1, "", "fit_predict"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "partial_fit"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score_samples"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_partial_fit_request"], [684, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[685, 2, 1, "", "densify"], [685, 2, 1, "", "fit"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "partial_fit"], [685, 2, 1, "", "predict"], [685, 2, 1, "", "score"], [685, 2, 1, "", "set_fit_request"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "set_partial_fit_request"], [685, 2, 1, "", "set_score_request"], [685, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "predict"], [686, 2, 1, "", "score"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "predict"], [687, 2, 1, "", "score"], [687, 2, 1, "", "set_fit_request"], [687, 2, 1, "", "set_params"], [687, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[695, 1, 1, "", "Isomap"], [696, 1, 1, "", "LocallyLinearEmbedding"], [697, 1, 1, "", "MDS"], [698, 1, 1, "", "SpectralEmbedding"], [699, 1, 1, "", "TSNE"], [700, 4, 1, "", "locally_linear_embedding"], [701, 4, 1, "", "smacof"], [702, 4, 1, "", "spectral_embedding"], [703, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_feature_names_out"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "reconstruction_error"], [695, 2, 1, "", "set_output"], [695, 2, 1, "", "set_params"], [695, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_feature_names_out"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "set_output"], [696, 2, 1, "", "set_params"], [696, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[697, 2, 1, "", "fit"], [697, 2, 1, "", "fit_transform"], [697, 2, 1, "", "get_metadata_routing"], [697, 2, 1, "", "get_params"], [697, 2, 1, "", "set_fit_request"], [697, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[698, 2, 1, "", "fit"], [698, 2, 1, "", "fit_transform"], [698, 2, 1, "", "get_metadata_routing"], [698, 2, 1, "", "get_params"], [698, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[699, 2, 1, "", "fit"], [699, 2, 1, "", "fit_transform"], [699, 2, 1, "", "get_feature_names_out"], [699, 2, 1, "", "get_metadata_routing"], [699, 2, 1, "", "get_params"], [699, 2, 1, "", "set_output"], [699, 2, 1, "", "set_params"]], "sklearn.metrics": [[704, 1, 1, "", "ConfusionMatrixDisplay"], [705, 1, 1, "", "DetCurveDisplay"], [706, 1, 1, "", "DistanceMetric"], [707, 1, 1, "", "PrecisionRecallDisplay"], [708, 1, 1, "", "PredictionErrorDisplay"], [709, 1, 1, "", "RocCurveDisplay"], [710, 4, 1, "", "accuracy_score"], [711, 4, 1, "", "adjusted_mutual_info_score"], [712, 4, 1, "", "adjusted_rand_score"], [713, 4, 1, "", "auc"], [714, 4, 1, "", "average_precision_score"], [715, 4, 1, "", "balanced_accuracy_score"], [716, 4, 1, "", "brier_score_loss"], [717, 4, 1, "", "calinski_harabasz_score"], [718, 4, 1, "", "check_scoring"], [719, 4, 1, "", "class_likelihood_ratios"], [720, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [723, 4, 1, "", "cohen_kappa_score"], [724, 4, 1, "", "completeness_score"], [725, 4, 1, "", "confusion_matrix"], [726, 4, 1, "", "consensus_score"], [727, 4, 1, "", "coverage_error"], [728, 4, 1, "", "d2_absolute_error_score"], [729, 4, 1, "", "d2_log_loss_score"], [730, 4, 1, "", "d2_pinball_score"], [731, 4, 1, "", "d2_tweedie_score"], [732, 4, 1, "", "davies_bouldin_score"], [733, 4, 1, "", "dcg_score"], [734, 4, 1, "", "det_curve"], [735, 4, 1, "", "explained_variance_score"], [736, 4, 1, "", "f1_score"], [737, 4, 1, "", "fbeta_score"], [738, 4, 1, "", "fowlkes_mallows_score"], [739, 4, 1, "", "get_scorer"], [740, 4, 1, "", "get_scorer_names"], [741, 4, 1, "", "hamming_loss"], [742, 4, 1, "", "hinge_loss"], [743, 4, 1, "", "homogeneity_completeness_v_measure"], [744, 4, 1, "", "homogeneity_score"], [745, 4, 1, "", "jaccard_score"], [746, 4, 1, "", "label_ranking_average_precision_score"], [747, 4, 1, "", "label_ranking_loss"], [748, 4, 1, "", "log_loss"], [749, 4, 1, "", "make_scorer"], [750, 4, 1, "", "matthews_corrcoef"], [751, 4, 1, "", "max_error"], [752, 4, 1, "", "mean_absolute_error"], [753, 4, 1, "", "mean_absolute_percentage_error"], [754, 4, 1, "", "mean_gamma_deviance"], [755, 4, 1, "", "mean_pinball_loss"], [756, 4, 1, "", "mean_poisson_deviance"], [757, 4, 1, "", "mean_squared_error"], [758, 4, 1, "", "mean_squared_log_error"], [759, 4, 1, "", "mean_tweedie_deviance"], [760, 4, 1, "", "median_absolute_error"], [761, 4, 1, "", "multilabel_confusion_matrix"], [762, 4, 1, "", "mutual_info_score"], [763, 4, 1, "", "ndcg_score"], [764, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [785, 4, 1, "", "pairwise_distances"], [786, 4, 1, "", "pairwise_distances_argmin"], [787, 4, 1, "", "pairwise_distances_argmin_min"], [788, 4, 1, "", "pairwise_distances_chunked"], [789, 4, 1, "", "precision_recall_curve"], [790, 4, 1, "", "precision_recall_fscore_support"], [791, 4, 1, "", "precision_score"], [792, 4, 1, "", "r2_score"], [793, 4, 1, "", "rand_score"], [794, 4, 1, "", "recall_score"], [795, 4, 1, "", "roc_auc_score"], [796, 4, 1, "", "roc_curve"], [797, 4, 1, "", "root_mean_squared_error"], [798, 4, 1, "", "root_mean_squared_log_error"], [799, 4, 1, "", "silhouette_samples"], [800, 4, 1, "", "silhouette_score"], [801, 4, 1, "", "top_k_accuracy_score"], [802, 4, 1, "", "v_measure_score"], [803, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[704, 2, 1, "", "from_estimator"], [704, 2, 1, "", "from_predictions"], [704, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[706, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[707, 2, 1, "", "from_estimator"], [707, 2, 1, "", "from_predictions"], [707, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[708, 2, 1, "", "from_estimator"], [708, 2, 1, "", "from_predictions"], [708, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[709, 2, 1, "", "from_estimator"], [709, 2, 1, "", "from_predictions"], [709, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[721, 4, 1, "", "contingency_matrix"], [722, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[765, 4, 1, "", "additive_chi2_kernel"], [766, 4, 1, "", "chi2_kernel"], [767, 4, 1, "", "cosine_distances"], [768, 4, 1, "", "cosine_similarity"], [769, 4, 1, "", "distance_metrics"], [770, 4, 1, "", "euclidean_distances"], [771, 4, 1, "", "haversine_distances"], [772, 4, 1, "", "kernel_metrics"], [773, 4, 1, "", "laplacian_kernel"], [774, 4, 1, "", "linear_kernel"], [775, 4, 1, "", "manhattan_distances"], [776, 4, 1, "", "nan_euclidean_distances"], [777, 4, 1, "", "paired_cosine_distances"], [778, 4, 1, "", "paired_distances"], [779, 4, 1, "", "paired_euclidean_distances"], [780, 4, 1, "", "paired_manhattan_distances"], [781, 4, 1, "", "pairwise_kernels"], [782, 4, 1, "", "polynomial_kernel"], [783, 4, 1, "", "rbf_kernel"], [784, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[804, 1, 1, "", "BayesianGaussianMixture"], [805, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[804, 2, 1, "", "fit"], [804, 2, 1, "", "fit_predict"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "sample"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[805, 2, 1, "", "aic"], [805, 2, 1, "", "bic"], [805, 2, 1, "", "fit"], [805, 2, 1, "", "fit_predict"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "sample"], [805, 2, 1, "", "score"], [805, 2, 1, "", "score_samples"], [805, 2, 1, "", "set_params"]], "sklearn.model_selection": [[806, 1, 1, "", "FixedThresholdClassifier"], [807, 1, 1, "", "GridSearchCV"], [808, 1, 1, "", "GroupKFold"], [809, 1, 1, "", "GroupShuffleSplit"], [810, 1, 1, "", "HalvingGridSearchCV"], [811, 1, 1, "", "HalvingRandomSearchCV"], [812, 1, 1, "", "KFold"], [813, 1, 1, "", "LearningCurveDisplay"], [814, 1, 1, "", "LeaveOneGroupOut"], [815, 1, 1, "", "LeaveOneOut"], [816, 1, 1, "", "LeavePGroupsOut"], [817, 1, 1, "", "LeavePOut"], [818, 1, 1, "", "ParameterGrid"], [819, 1, 1, "", "ParameterSampler"], [820, 1, 1, "", "PredefinedSplit"], [821, 1, 1, "", "RandomizedSearchCV"], [822, 1, 1, "", "RepeatedKFold"], [823, 1, 1, "", "RepeatedStratifiedKFold"], [824, 1, 1, "", "ShuffleSplit"], [825, 1, 1, "", "StratifiedGroupKFold"], [826, 1, 1, "", "StratifiedKFold"], [827, 1, 1, "", "StratifiedShuffleSplit"], [828, 1, 1, "", "TimeSeriesSplit"], [829, 1, 1, "", "TunedThresholdClassifierCV"], [830, 1, 1, "", "ValidationCurveDisplay"], [831, 4, 1, "", "check_cv"], [832, 4, 1, "", "cross_val_predict"], [833, 4, 1, "", "cross_val_score"], [834, 4, 1, "", "cross_validate"], [835, 4, 1, "", "learning_curve"], [836, 4, 1, "", "permutation_test_score"], [837, 4, 1, "", "train_test_split"], [838, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[806, 3, 1, "", "classes_"], [806, 2, 1, "", "decision_function"], [806, 2, 1, "", "fit"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "set_params"], [806, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "inverse_transform"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "set_split_request"], [808, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "set_split_request"], [809, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[810, 3, 1, "", "classes_"], [810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "inverse_transform"], [810, 3, 1, "", "n_features_in_"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_log_proba"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "score_samples"], [810, 2, 1, "", "set_params"], [810, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[811, 3, 1, "", "classes_"], [811, 2, 1, "", "decision_function"], [811, 2, 1, "", "fit"], [811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "inverse_transform"], [811, 3, 1, "", "n_features_in_"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_log_proba"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "score_samples"], [811, 2, 1, "", "set_params"], [811, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[813, 2, 1, "", "from_estimator"], [813, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "set_split_request"], [814, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "set_split_request"], [816, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[821, 3, 1, "", "classes_"], [821, 2, 1, "", "decision_function"], [821, 2, 1, "", "fit"], [821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "inverse_transform"], [821, 3, 1, "", "n_features_in_"], [821, 2, 1, "", "predict"], [821, 2, 1, "", "predict_log_proba"], [821, 2, 1, "", "predict_proba"], [821, 2, 1, "", "score"], [821, 2, 1, "", "score_samples"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "set_split_request"], [825, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_n_splits"], [826, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_n_splits"], [827, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_n_splits"], [828, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[829, 3, 1, "", "classes_"], [829, 2, 1, "", "decision_function"], [829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_log_proba"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[830, 2, 1, "", "from_estimator"], [830, 2, 1, "", "plot"]], "sklearn.multiclass": [[839, 1, 1, "", "OneVsOneClassifier"], [840, 1, 1, "", "OneVsRestClassifier"], [841, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[839, 2, 1, "", "decision_function"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 3, 1, "", "n_classes_"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[840, 2, 1, "", "decision_function"], [840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 3, 1, "", "multilabel_"], [840, 3, 1, "", "n_classes_"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[842, 1, 1, "", "ClassifierChain"], [843, 1, 1, "", "MultiOutputClassifier"], [844, 1, 1, "", "MultiOutputRegressor"], [845, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[842, 2, 1, "", "decision_function"], [842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[846, 1, 1, "", "BernoulliNB"], [847, 1, 1, "", "CategoricalNB"], [848, 1, 1, "", "ComplementNB"], [849, 1, 1, "", "GaussianNB"], [850, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_joint_log_proba"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_fit_request"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_joint_log_proba"], [848, 2, 1, "", "predict_log_proba"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_fit_request"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_partial_fit_request"], [848, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_joint_log_proba"], [849, 2, 1, "", "predict_log_proba"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_partial_fit_request"], [849, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "partial_fit"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_joint_log_proba"], [850, 2, 1, "", "predict_log_proba"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_fit_request"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_partial_fit_request"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[851, 1, 1, "", "BallTree"], [852, 1, 1, "", "KDTree"], [853, 1, 1, "", "KNeighborsClassifier"], [854, 1, 1, "", "KNeighborsRegressor"], [855, 1, 1, "", "KNeighborsTransformer"], [856, 1, 1, "", "KernelDensity"], [857, 1, 1, "", "LocalOutlierFactor"], [858, 1, 1, "", "NearestCentroid"], [859, 1, 1, "", "NearestNeighbors"], [860, 1, 1, "", "NeighborhoodComponentsAnalysis"], [861, 1, 1, "", "RadiusNeighborsClassifier"], [862, 1, 1, "", "RadiusNeighborsRegressor"], [863, 1, 1, "", "RadiusNeighborsTransformer"], [864, 4, 1, "", "kneighbors_graph"], [865, 4, 1, "", "radius_neighbors_graph"], [866, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[851, 2, 1, "", "get_arrays"], [851, 2, 1, "", "get_n_calls"], [851, 2, 1, "", "get_tree_stats"], [851, 2, 1, "", "kernel_density"], [851, 2, 1, "", "query"], [851, 2, 1, "", "query_radius"], [851, 2, 1, "", "reset_n_calls"], [851, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[852, 2, 1, "", "get_arrays"], [852, 2, 1, "", "get_n_calls"], [852, 2, 1, "", "get_tree_stats"], [852, 2, 1, "", "kernel_density"], [852, 2, 1, "", "query"], [852, 2, 1, "", "query_radius"], [852, 2, 1, "", "reset_n_calls"], [852, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "predict_proba"], [853, 2, 1, "", "score"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "kneighbors"], [854, 2, 1, "", "kneighbors_graph"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "kneighbors"], [855, 2, 1, "", "kneighbors_graph"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "sample"], [856, 2, 1, "", "score"], [856, 2, 1, "", "score_samples"], [856, 2, 1, "", "set_fit_request"], [856, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[857, 2, 1, "", "decision_function"], [857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_predict"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "kneighbors"], [857, 2, 1, "", "kneighbors_graph"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "score_samples"], [857, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "kneighbors"], [859, 2, 1, "", "kneighbors_graph"], [859, 2, 1, "", "radius_neighbors"], [859, 2, 1, "", "radius_neighbors_graph"], [859, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "radius_neighbors"], [861, 2, 1, "", "radius_neighbors_graph"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "radius_neighbors"], [862, 2, 1, "", "radius_neighbors_graph"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "radius_neighbors"], [863, 2, 1, "", "radius_neighbors_graph"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.neural_network": [[867, 1, 1, "", "BernoulliRBM"], [868, 1, 1, "", "MLPClassifier"], [869, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "gibbs"], [867, 2, 1, "", "partial_fit"], [867, 2, 1, "", "score_samples"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "predict_log_proba"], [868, 2, 1, "", "predict_proba"], [868, 2, 1, "", "score"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_partial_fit_request"], [868, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "partial_fit"], [869, 2, 1, "", "predict"], [869, 2, 1, "", "score"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[870, 1, 1, "", "FeatureUnion"], [871, 1, 1, "", "Pipeline"], [872, 4, 1, "", "make_pipeline"], [873, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[870, 3, 1, "", "feature_names_in_"], [870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 3, 1, "", "n_features_in_"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[871, 3, 1, "", "classes_"], [871, 2, 1, "", "decision_function"], [871, 3, 1, "", "feature_names_in_"], [871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_predict"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 3, 1, "", "n_features_in_"], [871, 3, 1, "", "named_steps"], [871, 2, 1, "", "predict"], [871, 2, 1, "", "predict_log_proba"], [871, 2, 1, "", "predict_proba"], [871, 2, 1, "", "score"], [871, 2, 1, "", "score_samples"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_score_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing": [[874, 1, 1, "", "Binarizer"], [875, 1, 1, "", "FunctionTransformer"], [876, 1, 1, "", "KBinsDiscretizer"], [877, 1, 1, "", "KernelCenterer"], [878, 1, 1, "", "LabelBinarizer"], [879, 1, 1, "", "LabelEncoder"], [880, 1, 1, "", "MaxAbsScaler"], [881, 1, 1, "", "MinMaxScaler"], [882, 1, 1, "", "MultiLabelBinarizer"], [883, 1, 1, "", "Normalizer"], [884, 1, 1, "", "OneHotEncoder"], [885, 1, 1, "", "OrdinalEncoder"], [886, 1, 1, "", "PolynomialFeatures"], [887, 1, 1, "", "PowerTransformer"], [888, 1, 1, "", "QuantileTransformer"], [889, 1, 1, "", "RobustScaler"], [890, 1, 1, "", "SplineTransformer"], [891, 1, 1, "", "StandardScaler"], [892, 1, 1, "", "TargetEncoder"], [893, 4, 1, "", "add_dummy_feature"], [894, 4, 1, "", "binarize"], [895, 4, 1, "", "label_binarize"], [896, 4, 1, "", "maxabs_scale"], [897, 4, 1, "", "minmax_scale"], [898, 4, 1, "", "normalize"], [899, 4, 1, "", "power_transform"], [900, 4, 1, "", "quantile_transform"], [901, 4, 1, "", "robust_scale"], [902, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "set_transform_request"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_fit_request"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "set_fit_request"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "set_transform_request"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_inverse_transform_request"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "partial_fit"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "partial_fit"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "set_transform_request"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 3, 1, "", "infrequent_categories_"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "infrequent_categories_"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "powers_"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "inverse_transform"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "inverse_transform"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "inverse_transform"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "set_fit_request"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "inverse_transform"], [891, 2, 1, "", "partial_fit"], [891, 2, 1, "", "set_fit_request"], [891, 2, 1, "", "set_inverse_transform_request"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "set_partial_fit_request"], [891, 2, 1, "", "set_transform_request"], [891, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_transform"], [892, 2, 1, "", "get_feature_names_out"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 3, 1, "", "infrequent_categories_"], [892, 2, 1, "", "set_output"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "transform"]], "sklearn.random_projection": [[903, 1, 1, "", "GaussianRandomProjection"], [904, 1, 1, "", "SparseRandomProjection"], [905, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[903, 2, 1, "", "fit"], [903, 2, 1, "", "fit_transform"], [903, 2, 1, "", "get_feature_names_out"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "inverse_transform"], [903, 2, 1, "", "set_output"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[904, 2, 1, "", "fit"], [904, 2, 1, "", "fit_transform"], [904, 2, 1, "", "get_feature_names_out"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "inverse_transform"], [904, 2, 1, "", "set_output"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[906, 1, 1, "", "LabelPropagation"], [907, 1, 1, "", "LabelSpreading"], [908, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_proba"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_proba"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[908, 2, 1, "", "decision_function"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "predict_log_proba"], [908, 2, 1, "", "predict_proba"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_params"]], "sklearn.svm": [[911, 1, 1, "", "LinearSVC"], [912, 1, 1, "", "LinearSVR"], [913, 1, 1, "", "NuSVC"], [914, 1, 1, "", "NuSVR"], [915, 1, 1, "", "OneClassSVM"], [916, 1, 1, "", "SVC"], [917, 1, 1, "", "SVR"], [918, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[911, 2, 1, "", "decision_function"], [911, 2, 1, "", "densify"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"], [911, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "decision_function"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "predict_log_proba"], [913, 2, 1, "", "predict_proba"], [913, 3, 1, "", "probA_"], [913, 3, 1, "", "probB_"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[914, 3, 1, "", "coef_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 3, 1, "", "n_support_"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[915, 3, 1, "", "coef_"], [915, 2, 1, "", "decision_function"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "fit_predict"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_params"], [915, 3, 1, "", "n_support_"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score_samples"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[916, 3, 1, "", "coef_"], [916, 2, 1, "", "decision_function"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_params"], [916, 3, 1, "", "n_support_"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "predict_log_proba"], [916, 2, 1, "", "predict_proba"], [916, 3, 1, "", "probA_"], [916, 3, 1, "", "probB_"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[917, 3, 1, "", "coef_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_params"], [917, 3, 1, "", "n_support_"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_score_request"]], "sklearn.tree": [[919, 1, 1, "", "DecisionTreeClassifier"], [920, 1, 1, "", "DecisionTreeRegressor"], [921, 1, 1, "", "ExtraTreeClassifier"], [922, 1, 1, "", "ExtraTreeRegressor"], [923, 4, 1, "", "export_graphviz"], [924, 4, 1, "", "export_text"], [925, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[919, 2, 1, "", "apply"], [919, 2, 1, "", "cost_complexity_pruning_path"], [919, 2, 1, "", "decision_path"], [919, 3, 1, "", "feature_importances_"], [919, 2, 1, "", "fit"], [919, 2, 1, "", "get_depth"], [919, 2, 1, "", "get_metadata_routing"], [919, 2, 1, "", "get_n_leaves"], [919, 2, 1, "", "get_params"], [919, 2, 1, "", "predict"], [919, 2, 1, "", "predict_log_proba"], [919, 2, 1, "", "predict_proba"], [919, 2, 1, "", "score"], [919, 2, 1, "", "set_fit_request"], [919, 2, 1, "", "set_params"], [919, 2, 1, "", "set_predict_proba_request"], [919, 2, 1, "", "set_predict_request"], [919, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[920, 2, 1, "", "apply"], [920, 2, 1, "", "cost_complexity_pruning_path"], [920, 2, 1, "", "decision_path"], [920, 3, 1, "", "feature_importances_"], [920, 2, 1, "", "fit"], [920, 2, 1, "", "get_depth"], [920, 2, 1, "", "get_metadata_routing"], [920, 2, 1, "", "get_n_leaves"], [920, 2, 1, "", "get_params"], [920, 2, 1, "", "predict"], [920, 2, 1, "", "score"], [920, 2, 1, "", "set_fit_request"], [920, 2, 1, "", "set_params"], [920, 2, 1, "", "set_predict_request"], [920, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[921, 2, 1, "", "apply"], [921, 2, 1, "", "cost_complexity_pruning_path"], [921, 2, 1, "", "decision_path"], [921, 3, 1, "", "feature_importances_"], [921, 2, 1, "", "fit"], [921, 2, 1, "", "get_depth"], [921, 2, 1, "", "get_metadata_routing"], [921, 2, 1, "", "get_n_leaves"], [921, 2, 1, "", "get_params"], [921, 2, 1, "", "predict"], [921, 2, 1, "", "predict_log_proba"], [921, 2, 1, "", "predict_proba"], [921, 2, 1, "", "score"], [921, 2, 1, "", "set_fit_request"], [921, 2, 1, "", "set_params"], [921, 2, 1, "", "set_predict_proba_request"], [921, 2, 1, "", "set_predict_request"], [921, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[922, 2, 1, "", "apply"], [922, 2, 1, "", "cost_complexity_pruning_path"], [922, 2, 1, "", "decision_path"], [922, 3, 1, "", "feature_importances_"], [922, 2, 1, "", "fit"], [922, 2, 1, "", "get_depth"], [922, 2, 1, "", "get_metadata_routing"], [922, 2, 1, "", "get_n_leaves"], [922, 2, 1, "", "get_params"], [922, 2, 1, "", "predict"], [922, 2, 1, "", "score"], [922, 2, 1, "", "set_fit_request"], [922, 2, 1, "", "set_params"], [922, 2, 1, "", "set_predict_request"], [922, 2, 1, "", "set_score_request"]], "sklearn.utils": [[926, 1, 1, "", "Bunch"], [927, 1, 1, "", "ClassifierTags"], [928, 1, 1, "", "InputTags"], [929, 1, 1, "", "RegressorTags"], [930, 1, 1, "", "Tags"], [931, 1, 1, "", "TargetTags"], [932, 1, 1, "", "TransformerTags"], [933, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [935, 4, 1, "", "as_float_array"], [936, 4, 1, "", "assert_all_finite"], [937, 4, 1, "", "check_X_y"], [938, 4, 1, "", "check_array"], [939, 4, 1, "", "check_consistent_length"], [940, 4, 1, "", "check_random_state"], [941, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [944, 4, 1, "", "default_tags"], [945, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [951, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [958, 4, 1, "", "gen_batches"], [959, 4, 1, "", "gen_even_slices"], [960, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [962, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [972, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [975, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [977, 4, 1, "", "register_parallel_backend"], [978, 4, 1, "", "resample"], [979, 4, 1, "", "safe_mask"], [980, 4, 1, "", "safe_sqr"], [981, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[926, 2, 1, "", "clear"], [926, 2, 1, "", "copy"], [926, 2, 1, "", "fromkeys"], [926, 2, 1, "", "get"], [926, 2, 1, "", "items"], [926, 2, 1, "", "keys"], [926, 2, 1, "", "pop"], [926, 2, 1, "", "popitem"], [926, 2, 1, "", "setdefault"], [926, 2, 1, "", "update"], [926, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[934, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[942, 4, 1, "", "compute_class_weight"], [943, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[945, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[946, 4, 1, "", "all_displays"], [947, 4, 1, "", "all_estimators"], [948, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[949, 4, 1, "", "check_estimator"], [950, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[952, 4, 1, "", "density"], [953, 4, 1, "", "fast_logdet"], [954, 4, 1, "", "randomized_range_finder"], [955, 4, 1, "", "randomized_svd"], [956, 4, 1, "", "safe_sparse_dot"], [957, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[961, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[963, 1, 1, "", "MetadataRequest"], [964, 1, 1, "", "MetadataRouter"], [965, 1, 1, "", "MethodMapping"], [966, 4, 1, "", "get_routing_for_object"], [967, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[963, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[964, 2, 1, "", "add"], [964, 2, 1, "", "add_self_request"], [964, 2, 1, "", "consumes"], [964, 2, 1, "", "route_params"], [964, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[965, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[968, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[969, 4, 1, "", "is_multilabel"], [970, 4, 1, "", "type_of_target"], [971, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[973, 1, 1, "", "Parallel"], [974, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[973, 2, 1, "", "__call__"], [973, 2, 1, "", "dispatch_next"], [973, 2, 1, "", "dispatch_one_batch"], [973, 2, 1, "", "format"], [973, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[976, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[982, 4, 1, "", "incr_mean_variance_axis"], [983, 4, 1, "", "inplace_column_scale"], [984, 4, 1, "", "inplace_csr_column_scale"], [985, 4, 1, "", "inplace_row_scale"], [986, 4, 1, "", "inplace_swap_column"], [987, 4, 1, "", "inplace_swap_row"], [988, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[989, 4, 1, "", "inplace_csr_row_normalize_l1"], [990, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[991, 4, 1, "", "check_is_fitted"], [992, 4, 1, "", "check_memory"], [993, 4, 1, "", "check_symmetric"], [994, 4, 1, "", "column_or_1d"], [995, 4, 1, "", "has_fit_parameter"], [996, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 81, 82, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 111, 112, 115, 117, 120, 121, 123, 124, 125, 128, 131, 132, 133, 135, 137, 139, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 165, 167, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 190, 191, 193, 195, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 215, 217, 219, 221, 223, 224, 226, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 248, 250, 251, 252, 254, 260, 262, 263, 265, 269, 270, 275, 276, 277, 278, 279, 282, 286, 288, 290, 295, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 318, 321, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 342, 343, 344, 345, 346, 349, 350, 351, 354, 356, 357, 358, 361, 362, 363, 364, 365, 369, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 388, 389, 390, 391, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 426, 428, 435, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 466, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 495, 497, 503, 505, 507, 511, 517, 518, 526, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 694, 695, 696, 697, 698, 699, 700, 707, 708, 709, 715, 718, 723, 727, 729, 742, 748, 765, 766, 786, 787, 804, 805, 806, 807, 809, 810, 811, 816, 821, 825, 826, 829, 832, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 935, 937, 938, 941, 955, 957, 964, 965, 967, 991, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 400, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 933, 934, 935, 937, 938, 942, 943, 946, 947, 948, 949, 950, 952, 954, 955, 957, 958, 959, 961, 968, 969, 970, 972, 973, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1034, 1035, 1036, 1037], "00": [52, 68, 113, 126, 190, 191, 208, 235, 248, 269, 273, 276, 313, 331, 334, 335, 357, 376, 379, 388, 414, 421, 422, 612, 613, 720, 722, 795, 807, 821, 835, 920, 1004, 1008, 1018, 1020, 1022, 1029], "000": [43, 44, 59, 62, 64, 77, 108, 175, 192, 195, 248, 269, 273, 275, 277, 320, 327, 356, 357, 365, 377, 388, 421, 422, 496, 568, 569, 651, 684, 1022, 1029, 1050], "0000": [43, 329], "000000": [79, 190, 206, 235, 275, 319, 744], "00000000": 177, "000000e": 235, "000024": 369, "000045": 190, "00005": 54, "0000ff": [67, 303, 310], "0001": [49, 163, 172, 225, 273, 384, 426, 449, 453, 465, 477, 478, 484, 540, 545, 547, 554, 556, 557, 566, 567, 653, 654, 655, 656, 659, 660, 665, 666, 667, 668, 669, 670, 675, 676, 679, 681, 683, 685, 687, 694, 696, 700, 868, 869, 911, 912, 997], "000198": 190, "000210": 46, "000212": 46, "000239": 46, "000272": 46, "000297": 46, "0003": 140, "000314": 46, "000342": 46, "0004": [52, 140, 320, 611], "000437": 356, "000499": 356, "000534": 356, "000539": 356, "000542": 46, "000621": 356, "000651": 356, "000783": 46, "0008": 390, "000874": 46, "000977": 275, "00099547": 177, "000e": 422, "001": [46, 53, 68, 79, 97, 148, 172, 174, 190, 202, 226, 244, 254, 260, 273, 275, 277, 337, 357, 379, 388, 418, 543, 544, 546, 553, 634, 651, 652, 653, 654, 659, 660, 667, 668, 669, 670, 673, 674, 675, 683, 684, 685, 686, 688, 691, 696, 697, 700, 701, 804, 805, 868, 869, 906, 907, 913, 914, 915, 916, 917, 997], "0012": [43, 701], "0013": 43, "0014": 43, "00141": 356, "0015": 43, "001540": 52, "00165": 356, "00166409": 668, "00171412": [765, 766, 1006], "001727": 269, "001882": [204, 206], "002": [43, 51, 172, 174, 379], "00233": 356, "002592": [204, 206], "00274": 217, "0028": 43, "002861": [204, 206], "003": 43, "0032": 43, "0034189458230957995": 45, "003533": 206, "003586": 543, "00360392": 543, "0036211": 543, "00362644": 543, "00364": 328, "00393284e": 199, "003935": [204, 206], "003e": 422, "004": [43, 357], "0044": 918, "004577621581492997": 322, "00462428": 758, "004691": 273, "0049896314219659565": 322, "005": [43, 275, 279, 300, 315, 357, 388], "005027": 278, "005383": [204, 206], "005422": 275, "005670": [204, 206], "005840": 278, "005861": 278, "006": [43, 45, 144, 283, 388], "006360": 278, "007": [260, 283, 295, 357], "0072b2": 260, "0075": [479, 548], "00755": 548, "007581": 280, "00768662e": 199, "007822": 289, "007833": 280, "008": [75, 172, 379, 388, 1029], "008142": [204, 206], "0083899664": 771, "008449": [204, 206], "00860051": 665, "008915": 278, "009": [43, 357, 388], "009077": 190, "00911944e": 199, "0092": 140, "009362": [204, 206], "009747": 289, "009778": 278, "009788": 289, "0098": 140, "00ff00": 303, "01": [45, 47, 49, 52, 53, 75, 79, 86, 97, 123, 125, 126, 140, 149, 151, 153, 155, 156, 172, 179, 183, 190, 191, 199, 202, 208, 224, 229, 230, 235, 237, 238, 244, 248, 249, 250, 254, 255, 262, 266, 268, 269, 274, 275, 276, 280, 282, 283, 284, 300, 311, 313, 315, 325, 331, 347, 357, 362, 363, 377, 379, 387, 414, 423, 455, 477, 522, 528, 539, 546, 550, 552, 602, 603, 605, 612, 649, 653, 661, 665, 685, 703, 722, 807, 821, 905, 976, 1004, 1008, 1012, 1018, 1020, 1022, 1029], "010": [357, 388, 836, 1016], "0106": 656, "010877306503748912": 283, "011": [43, 283, 295, 357, 388], "011595": [204, 206], "0116": 611, "011e": 422, "012": [52, 93, 169, 193, 195, 1029], "012191": [204, 206], "012521": 206, "012831": 206, "0129126": 376, "013": [43, 52, 283, 357], "01327": 377, "013520": 190, "014": [43, 283, 388], "0144": 622, "015": [360, 1016], "0152": 140, "015347e": 235, "015414e": 235, "015579": 289, "015587e": 235, "015596": [204, 206], "0157": 551, "015716e": 235, "016": [327, 1029], "01621459": 414, "016445": 275, "017": [83, 357, 388, 477, 478], "017379": 52, "017646": [204, 206], "018": [52, 275, 478], "0182": 904, "018727": 190, "0188ff": 319, "018900": 206, "019": [88, 172, 202, 379, 388, 477, 1029], "019023": 275, "019069": 206, "01915283": 133, "019163": [204, 206], "0193": [476, 482], "0195": [427, 481], "0196": 140, "0198e1": 121, "019907": [204, 206], "01e": 203, "02": [43, 51, 52, 66, 79, 85, 87, 93, 97, 99, 115, 117, 123, 126, 139, 146, 172, 176, 181, 189, 190, 199, 235, 244, 252, 254, 269, 270, 276, 282, 300, 310, 313, 315, 317, 339, 341, 357, 361, 376, 379, 387, 413, 418, 447, 451, 604, 612, 665, 683, 807, 821, 890, 906, 920, 1004, 1029], "020": [43, 52, 1016], "02069427": 88, "021": 357, "021849": 329, "021872": [204, 206], "022": 1016, "022593": 190, "0226": 656, "022688": [204, 206], "023": [52, 283, 357, 912, 1016], "02306214": 674, "02449161": 133, "02456369": 202, "024991": [204, 206], "025": [67, 219, 254, 272, 697, 701], "025102": 190, "025422": 275, "0255": 140, "0256": 177, "025930": [204, 206], "026": [118, 246, 357, 364, 1029], "026328": [204, 206], "026711": 89, "0268": 356, "027": [52, 172, 379], "027400": 369, "028": [174, 273, 357], "02818216": 117, "02891072": 1009, "029": [83, 107, 357, 1016, 1029], "02d": 206, "03": [51, 87, 102, 113, 123, 153, 172, 179, 190, 199, 235, 248, 260, 266, 269, 276, 335, 379, 422, 755, 807, 1004, 1008, 1029], "030": [153, 357], "030462": 105, "030498": 105, "030585": 289, "030677e": 235, "030867": 190, "0309": 356, "031": [172, 379], "031020": 105, "031026": 190, "031255": 190, "031555": 206, "03162278": 51, "031988": [204, 206], "032": 93, "0321": 842, "032179": 206, "03228": 629, "03228706": 617, "032356": [204, 206], "03237920e": 199, "032405": 190, "03260883": 1009, "033": [203, 1016], "033764e": 235, "033823": 190, "034": [153, 477], "034077": 206, "034194": [204, 206], "034278": 278, "034309": [204, 206], "03433306457": 45, "034821": [204, 206], "03498585": 1009, "035": 93, "035005": 190, "03531816": [833, 834], "035445": 289, "035537": 46, "0358": 46, "035914": 289, "036": [388, 478], "036038": [204, 206], "036385": [204, 206], "036445": 275, "036592": 289, "036656": [204, 206], "0367": 179, "0368": 626, "037": [213, 716, 1029], "0370": 857, "037164": 46, "037600e": 235, "038": [239, 477, 478, 868], "038076": [204, 206], "03812219": 1009, "038159": 819, "03823144": 177, "038689": 265, "0387": 611, "039": [273, 758, 788, 1008], "039493": [204, 206], "039497": 258, "03f": 273, "04": [66, 75, 77, 87, 89, 117, 125, 132, 172, 179, 190, 199, 216, 232, 235, 252, 260, 266, 269, 275, 276, 308, 332, 351, 357, 379, 421, 423, 477, 478, 653, 654, 659, 667, 668, 669, 688, 795, 807, 821, 1004, 1008, 1012, 1022, 1029], "040": [251, 1029], "040530e": 235, "041": 52, "041297": 311, "0416": 413, "042": [54, 388], "0427": [235, 475, 480], "042898": 311, "043": [357, 388], "043401": [204, 206], "043825": 46, "044": [43, 45, 273, 758, 1008], "044223": [204, 206], "044451": [204, 206], "044642": [204, 206], "0448": 235, "045": 730, "04520": 163, "0453": 551, "045311": 311, "045390e": 235, "045599": [204, 206], "045934": 311, "046": [201, 357, 1029], "046010e": 235, "046636": 190, "046641": [204, 206], "047": [179, 326, 388, 1029], "0479": 551, "048": 1016, "048mb": 356, "049": [239, 477], "049530": 311, "049540": 311, "0499": 551, "04995982": 117, "05": [46, 47, 52, 54, 61, 63, 72, 79, 87, 95, 97, 99, 100, 102, 109, 117, 128, 140, 143, 150, 153, 156, 168, 172, 182, 183, 190, 198, 199, 216, 219, 231, 241, 242, 244, 254, 260, 262, 263, 266, 269, 275, 276, 284, 286, 300, 303, 308, 315, 317, 324, 328, 335, 337, 350, 379, 423, 456, 462, 484, 532, 537, 538, 553, 599, 602, 603, 605, 620, 621, 622, 626, 627, 629, 630, 632, 639, 640, 656, 697, 701, 763, 807, 860, 911, 912, 1004, 1012, 1018, 1029], "050": [52, 1016], "05063247886572012": 283, "050680": [204, 206], "051": 478, "0511": 356, "0512": 551, "051474": [204, 206], "0517578125e": 46, "052": 544, "05216586": 117, "052506": 329, "053": [43, 172, 379, 388], "05306648": 131, "05317": 179, "054045": 278, "054699": 190, "0547": 915, "055": [172, 379, 1008], "05518": 630, "05532": 627, "05534985": 312, "0556": 915, "056": [52, 762, 1016], "0561": 915, "0566": 630, "05663": 627, "0568": 754, "057": [388, 836], "057122": 206, "057288": 46, "05752333": 133, "057711": 206, "058": [172, 273, 379], "05840206": 133, "0595": 479, "05968": 163, "05994843": 51, "06": [52, 102, 190, 208, 216, 217, 269, 275, 276, 313, 317, 351, 388, 413, 488, 489, 490, 651, 652, 696, 700, 804, 805, 807, 821, 920, 1004, 1018, 1020, 1029], "060": [43, 52, 94, 758, 1029], "0602": 46, "061": 273, "0614": 630, "06165": 627, "061696": [204, 206], "0622": [476, 482], "0626": 842, "063": [273, 275, 443], "0631": 52, "064": [164, 388, 1016, 1029], "065": [273, 346, 350, 388, 1029], "06506307": 312, "0652": 629, "06525643": 617, "066": [212, 273, 331, 655, 1029], "0667": 356, "06686804": 232, "06694199": 133, "06695631e": 113, "067": 183, "067109": 206, "067528": 206, "068": [43, 52, 170, 275, 1029], "068332": [204, 206], "06880943": 117, "06896552": 455, "069": [54, 92, 273, 1029], "069196": 273, "0693": 626, "07": [47, 52, 117, 126, 132, 190, 213, 235, 269, 284, 365, 377, 414, 568, 569, 699, 701, 1008, 1022, 1029], "070": [244, 1029], "0707": 630, "07073": 627, "071": [83, 172, 332, 379, 443], "071964": 190, "072": [229, 443, 655, 1029], "073": [273, 477, 478], "074": [54, 273], "074412": [204, 206], "075": 126, "07582983e": 199, "075887": 206, "076": [43, 230, 235, 899, 1029], "077": [45, 295], "077846": 275, "0779": 46, "078": [43, 302, 364, 1029], "07846529": 312, "07880": 163, "079": [172, 379], "079297": 275, "07963978e": 199, "07993421": 232, "08": [43, 47, 57, 79, 85, 126, 183, 190, 191, 202, 313, 379, 484, 538, 550, 552, 570, 648, 665, 807, 868, 869, 890, 1014, 1029], "080": [129, 357, 1029], "08022103": [833, 834], "080295": 206, "081": [95, 1016, 1029], "0813": [475, 480], "082": [43, 362, 1029], "0825": 320, "083": [273, 364], "08377444": 758, "084": 61, "085": [105, 1029], "085299": [204, 206], "08533159": 220, "085711": 89, "08604995": 117, "086944": 258, "08699432": 221, "0872422": 667, "088": [676, 1016], "089": [341, 357, 1029], "089063": [204, 206], "08d": 55, "08t16": 376, "09": [125, 126, 132, 190, 248, 252, 414, 536, 614, 742, 849, 1008, 1018, 1022, 1029], "09000": 217, "090528": 190, "090808": 190, "091": 250, "091053": 190, "091621": 89, "092": [256, 1029], "092204": [204, 206], "093": 477, "094": [76, 192, 478, 1029], "09443967": 312, "09541846": 543, "096": [204, 1029], "09684337": 232, "096950": 311, "097": [43, 172, 379], "098": [203, 357], "098332": 62, "0986": [422, 875], "09861229": [619, 1018], "098758": 62, "098776": 275, "098932": 62, "099": 43, "099820": 62, "0d": 1040, "0e": [286, 556, 557], "0e4": 224, "0f": [57, 93], "0min": 89, "0rc1": 386, "0rcn": 386, "0x": 940, "0x7fb1f69f84f0": 105, "0x7fb1f69f86d0": 105, "0x7fb1fb0c7280": 273, "0x7fb1fb0f6d40": 287, "0x7fb1fb1e0610": 334, "0x7fb1fb759d30": 265, "0x7fb1fbc021f0": 217, "0x7fb1fca318b0": 142, "0x7fb1fcc54b20": 255, "0x7fb1fcda1e50": 142, "0x7fb2285787f0": 287, "0x7fb2288e1430": 287, "0x7fb228e71220": 158, "0x7fb228e71820": 158, "0x7fb230e0daf0": 105, "0x7fb230e8ed30": 106, "0x7fb247f36d40": [282, 287], "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 395, 396, 397, 400, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1035, 1037, 1041], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 105, 106, 108, 111, 112, 113, 114, 115, 117, 118, 121, 125, 126, 127, 128, 132, 133, 137, 139, 140, 142, 143, 144, 146, 147, 148, 150, 151, 153, 155, 156, 159, 161, 165, 169, 172, 175, 176, 178, 180, 181, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 202, 207, 208, 210, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 233, 234, 235, 238, 239, 244, 247, 248, 249, 250, 251, 253, 254, 255, 257, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 286, 288, 289, 290, 292, 294, 300, 310, 311, 312, 313, 315, 316, 318, 319, 320, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 338, 343, 344, 345, 347, 348, 350, 351, 352, 354, 356, 357, 358, 365, 369, 376, 377, 378, 379, 380, 382, 387, 388, 394, 395, 396, 400, 405, 406, 407, 411, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 427, 444, 449, 453, 455, 457, 458, 459, 465, 466, 468, 481, 494, 499, 500, 503, 507, 508, 509, 511, 517, 518, 519, 520, 523, 527, 528, 531, 533, 535, 538, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 555, 559, 562, 563, 564, 565, 568, 569, 571, 572, 573, 574, 575, 577, 589, 590, 594, 600, 601, 606, 607, 612, 614, 618, 624, 626, 634, 637, 639, 641, 642, 643, 644, 647, 649, 650, 651, 653, 654, 656, 659, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 679, 680, 682, 683, 684, 685, 688, 692, 693, 698, 699, 702, 703, 706, 712, 722, 733, 749, 763, 776, 804, 805, 807, 808, 809, 810, 811, 818, 821, 822, 823, 824, 825, 827, 828, 830, 835, 837, 838, 839, 840, 846, 847, 848, 850, 851, 852, 858, 867, 868, 869, 871, 877, 881, 884, 885, 888, 900, 908, 914, 917, 919, 920, 924, 929, 941, 952, 955, 959, 971, 976, 977, 983, 984, 993, 997, 998, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1029, 1036, 1037, 1040, 1041, 1042, 1047, 1049, 1050, 1051, 1053, 1054], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 77, 85, 88, 92, 96, 101, 105, 106, 109, 112, 113, 123, 125, 126, 132, 138, 143, 153, 154, 157, 160, 175, 179, 182, 183, 190, 191, 193, 195, 197, 198, 200, 202, 203, 207, 208, 209, 211, 216, 217, 218, 219, 220, 221, 226, 227, 228, 230, 232, 233, 235, 239, 240, 242, 247, 248, 249, 250, 251, 255, 260, 262, 266, 269, 270, 271, 273, 275, 278, 280, 285, 286, 290, 300, 301, 302, 313, 316, 317, 319, 321, 322, 327, 331, 332, 338, 339, 343, 344, 346, 347, 348, 351, 352, 354, 356, 357, 360, 363, 364, 369, 371, 377, 379, 382, 384, 387, 388, 405, 411, 414, 415, 418, 419, 420, 421, 422, 443, 447, 451, 455, 477, 478, 484, 496, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 537, 541, 543, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 612, 614, 617, 638, 639, 640, 646, 647, 648, 649, 653, 654, 655, 656, 659, 660, 665, 666, 667, 668, 669, 670, 672, 674, 676, 678, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 753, 804, 805, 809, 829, 835, 836, 841, 846, 847, 848, 850, 851, 852, 856, 868, 869, 887, 889, 892, 901, 918, 997, 998, 1001, 1005, 1008, 1009, 1015, 1018, 1020, 1029, 1047, 1048, 1049, 1052, 1053], "1000": [43, 46, 47, 54, 63, 67, 72, 85, 106, 109, 117, 132, 140, 142, 144, 148, 149, 150, 155, 160, 164, 167, 180, 195, 203, 209, 220, 239, 247, 248, 250, 260, 264, 269, 273, 275, 281, 284, 286, 300, 302, 316, 319, 325, 326, 328, 330, 331, 346, 347, 353, 356, 357, 387, 388, 395, 412, 422, 443, 479, 485, 486, 538, 539, 544, 546, 548, 549, 550, 552, 553, 555, 560, 570, 571, 639, 653, 654, 658, 659, 660, 662, 667, 668, 669, 670, 673, 674, 675, 679, 683, 684, 685, 694, 699, 705, 708, 771, 888, 900, 906, 911, 912, 997, 1001, 1023, 1046, 1048, 1057], "10000": [43, 50, 52, 66, 78, 98, 106, 107, 151, 163, 203, 210, 217, 225, 233, 248, 250, 326, 342, 344, 365, 371, 421, 422, 568, 569, 651, 686, 888, 917, 1020], "100000": [178, 250, 260, 382, 620, 621, 622, 626, 627, 629, 630, 632, 900, 1001], "1000000": [55, 543], "10005": 1047, "1000x": 1045, "1001": [228, 258], "10027": 1052, "10045": 1047, "1005": 1023, "10058": 1048, "10059": 1047, "10065": 254, "1007": 712, "10070308464041304": 217, "10071": 1047, "10093": 1047, "10095": 1047, "10096": 1052, "100_000": [62, 64, 190], "100k": [248, 402], "100ksampl": 402, "100x": [1039, 1042, 1056], "101": [64, 172, 227, 292, 379, 857, 1029, 1040], "10101": 1047, "10112": 1047, "1013": 1016, "10142": 1047, "10153": 1047, "10168": 1054, "10181": 1047, "10192": 1047, "10195": 1047, "101alexmartin": [1056, 1057], "102": [388, 1041], "10210": 1047, "10229": 1047, "1024": [88, 132, 455, 474, 545, 909, 1052], "10280": 1047, "10297": 1047, "103": [153, 294, 295, 377, 421, 504, 562, 563, 1039], "10306": 1047, "10325": 1047, "10336": 1047, "10346": 1047, "10377": 1047, "1038": 414, "10397": 1047, "104": [43, 61, 200, 1029], "10403": 235, "10412": 1047, "10428": 1047, "10437": 1047, "10440": 1048, "10441": 1047, "1045": 105, "10452": 1047, "10458": 1047, "1046": [105, 265], "10463": 1028, "10468": 1054, "10469096": 177, "1047": 105, "10471": 1047, "10474": 1047, "10478008": 414, "10482": 1049, "1048576": [422, 589, 596], "10493": 1051, "105": 319, "10500": 1047, "10521": 1047, "10526": 414, "10536": 1047, "10580": 1048, "10581": 1047, "10584743": 177, "10587": 1047, "10591": 1051, "10593": 1047, "106": [172, 258, 379, 887, 1002, 1040], "10606655": 232, "10610": 1047, "10655": 1047, "10663": 1047, "10677": 1047, "10687": 1047, "107": [153, 329, 414, 906, 1009, 1041], "10708": 1051, "10711": 1051, "10723": [1046, 1047], "10727": 1048, "1073": [377, 494], "10733": 1028, "10740": 1047, "1076": 338, "10774": 1047, "10795": 1047, "108": [0, 47, 210, 1029, 1040], "1080": [376, 414], "10805": 1053, "10811": 1047, "10815": 1049, "10827": 1047, "10829": 1047, "10834": 235, "10836": 1047, "1084": 265, "10845": 1047, "10869": 1047, "1088": 258, "10881": 1047, "108843": 278, "10887": 1047, "108880": 62, "10898": 1047, "10899": 1047, "109": [61, 67, 88, 1009, 1029, 1041], "10908": 1047, "10913": 1047, "10914094": 232, "10928": 1047, "10933": 1047, "10982": 1047, "10992": 1047, "10998": 1047, "10999": 1047, "10_000": [46, 62, 109, 142, 150, 189, 195, 248, 278, 288, 295, 332, 566, 567, 571, 572, 888], "10_fold": [377, 500], "10e": [197, 202], "10k": [325, 402, 453], "10ksampl": 402, "10x": 1039, "10x10": 222, "10\u2079": 1047, "11": [43, 57, 108, 114, 125, 172, 177, 190, 191, 202, 217, 218, 219, 222, 254, 269, 272, 280, 281, 287, 298, 299, 301, 319, 326, 329, 330, 344, 348, 352, 356, 358, 376, 379, 380, 388, 395, 414, 417, 418, 421, 456, 463, 488, 489, 490, 491, 503, 508, 524, 525, 619, 657, 663, 677, 722, 728, 730, 731, 785, 786, 787, 808, 811, 825, 828, 836, 863, 920, 956, 971, 1000, 1004, 1006, 1018, 1022, 1023, 1029, 1037, 1041, 1045, 1047, 1048, 1050, 1053, 1054], "110": [120, 197, 214, 224, 226, 247, 321, 331, 443, 1002, 1003, 1029], "1100": 85, "11000": 1048, "11005": 1047, "11006": 1047, "11010": 1047, "11011": 1047, "11021": 153, "11042": 1047, "11047": [1028, 1049], "11064": 1051, "11082": 1047, "110923": 206, "11099": 771, "111": [43, 46, 47, 102, 120, 129, 214, 232, 241, 275, 295, 863, 1042], "1111": [657, 663], "1111111111111111": 283, "11124": 1047, "1112658": [905, 1020], "11135": 1047, "11136": 1047, "1114": 265, "11144": [1047, 1048], "11144673": 232, "11160": 1047, "11166": 1047, "1117": 626, "11176": 1047, "11179": 1048, "1118": 105, "112": [89, 172, 377, 379, 1041], "11206": 1047, "11211": 1047, "112141": 388, "11232": 1049, "11235": 1047, "112589990684262": 753, "11272": 1047, "11293": 1047, "11295": 1047, "11296": 1050, "113": [145, 207, 250, 292, 388, 1029, 1042], "11306": 1047, "11308": 1047, "11310": 1047, "11314": 377, "11315": 1047, "11327": 1047, "113516": 278, "11353": 1047, "11354": 1048, "11364": 1048, "11364637": 51, "113781": 329, "11378556": 312, "114": [329, 717, 1039], "1140": 377, "11413": 43, "11420": 1047, "1145": [195, 414, 683], "11452112": 232, "11458": 1048, "11464": 1047, "11466": 1047, "11467": 1047, "1148": 265, "115": [191, 1016], "11505": 1047, "11514": 1050, "11520": 1047, "11526": 1048, "11528972": 232, "11542": 1047, "11553": 1047, "11556": 1047, "11557": 1047, "11558": 1047, "11576": 1047, "11585": 1047, "11596": 1047, "116": 1039, "1162": 414, "11635": 1049, "11646": 1048, "11650": 1048, "11679": 1047, "11680": 47, "11682": 1051, "11682692": 232, "11693539": 117, "11699": 1048, "117": [176, 191, 1029, 1040], "11705": 1048, "117154": 190, "11724": 1047, "11727": 1048, "11741": 1047, "11754": 1048, "11756": [1047, 1048], "117608": 62, "11774": 1047, "1179": 265, "118": [321, 597, 1029], "11805": 1028, "11841": [905, 1020], "1185": 388, "11860": 1054, "1189": 421, "119": [264, 1002, 1029, 1042], "11901": 1047, "11905": 1047, "11912": 1047, "11915045": 365, "11924": 1047, "11931": 217, "11932": 217, "11933": 217, "11935": 217, "11950": 1050, "11951": 1047, "11958": 179, "11973": 1048, "11977": 1028, "12": [0, 43, 45, 52, 58, 70, 75, 77, 78, 88, 90, 91, 92, 107, 108, 117, 146, 147, 148, 151, 153, 172, 177, 178, 179, 186, 190, 191, 193, 198, 202, 203, 217, 225, 235, 237, 240, 241, 242, 244, 245, 247, 255, 258, 262, 263, 269, 274, 275, 277, 278, 281, 287, 288, 289, 298, 313, 319, 320, 321, 326, 329, 332, 352, 358, 378, 379, 380, 387, 395, 397, 400, 406, 407, 408, 414, 418, 422, 449, 453, 455, 463, 488, 489, 490, 491, 503, 539, 541, 548, 577, 653, 654, 659, 667, 668, 669, 671, 676, 678, 688, 692, 693, 696, 699, 700, 732, 737, 804, 805, 808, 825, 828, 842, 863, 879, 988, 997, 998, 1000, 1004, 1006, 1008, 1009, 1018, 1022, 1023, 1029, 1037, 1040, 1042, 1046, 1047, 1049, 1050, 1055, 1056], "120": [154, 238, 331, 423, 597, 1039], "1200": [85, 149, 315, 421], "12000": 527, "12068": 1049, "12069": 1052, "121": [102, 139, 186, 249, 625, 676, 1018], "12105": 1047, "12116": 1048, "1212": 505, "12122": 1047, "121351": 206, "12143": 1048, "12145": 1049, "12147": 1028, "12159": 1047, "12165": 1047, "12165031": 1009, "1217": 217, "12171": 1047, "12174": 1048, "12177": 1048, "12190903": 117, "12196": 217, "12197": 1048, "122": [0, 139, 179, 186, 191, 249, 388, 1009], "1220": 626, "12211": 1047, "12222": 1048, "12232": 1048, "12234": 1047, "12246": 1047, "12251": 1048, "12258": 1049, "12274212": 1009, "12279": 1048, "12285": 1054, "1229": 524, "123": [62, 141, 160, 365, 421, 523, 524, 525, 562, 563, 844, 1009, 1016, 1029], "12300": 1048, "12303": 1049, "12304": 1047, "12317": [179, 1047], "1232": 421, "12326": 43, "12327": 43, "12328": [43, 1048], "12329": 43, "12330": [43, 1047], "12334": 1048, "12338": 1047, "12339": 1047, "1234": [198, 263, 278, 382], "12344": 1048, "12345": 1047, "12350": 1047, "1236": 321, "12360": 1047, "12365": 1047, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 278, "12383": 43, "12388": 1047, "12393": 1047, "124": [46, 421, 1041], "124225": 206, "12436": 1048, "12441": 1047, "12451": 1047, "12462": 1047, "12467": 1047, "12471": 1047, "12481": 1047, "125": [43, 88, 113, 121, 126, 327, 541, 997, 1008, 1018, 1029], "12513": 1048, "12514": 1047, "125140": 278, "12517": 1047, "12518": 1047, "12522": 1047, "125247168": 52, "12543": 1048, "12557": 1049, "12568": 1048, "12569": 1049, "12582": 1048, "12583": 1048, "1259": 57, "12599": 1048, "126": [145, 421, 1029], "12612": 1047, "12613": 1048, "12625": 1047, "1263": 388, "12638": 1051, "12650": 1049, "126502": 206, "12669": 1048, "1268187": 232, "12685": 1047, "12699": 1047, "127": [149, 1039], "12701": 1047, "12704": 1047, "127128": 150, "12715": 1048, "12732": 1048, "1276": 47, "12789": 1049, "128": [53, 54, 217, 369, 543], "12800": 1028, "12807": 1048, "12821": 1048, "12834": 1048, "12852": [1028, 1049], "12855": 1048, "12860": [235, 1048], "12861": 1048, "12866": 1028, "1288": [45, 377], "12881": 1047, "12883823": 418, "12887": 1049, "129": [219, 1039], "12908": 1048, "12914884": 1009, "12916": 1048, "12927": 1049, "12946": 1047, "12949": 1047, "12955": 1048, "12972": 1048, "12983": 1048, "12988": 1048, "1299": [877, 1018], "12th": 1020, "13": [43, 45, 49, 50, 52, 79, 90, 108, 128, 132, 146, 149, 151, 185, 190, 195, 203, 226, 254, 268, 269, 276, 279, 281, 313, 315, 319, 332, 345, 356, 377, 379, 382, 388, 395, 418, 426, 503, 517, 520, 539, 540, 558, 559, 589, 613, 642, 646, 741, 766, 825, 855, 870, 877, 903, 904, 1004, 1008, 1009, 1014, 1015, 1018, 1023, 1029, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1051], "130": 388, "1300": 85, "13003": 1051, "13005": 1047, "13007": 1048, "130107": [232, 248, 495], "13013": 1049, "13042": 1054, "13046": 1047, "13077794": 365, "13086": 1048, "131": [43, 53, 91, 357, 388, 1008, 1040], "13124": [1047, 1048], "13134": 1047, "13142": 1048, "13146": [1028, 1049], "13151": 1048, "13157": 1048, "13164": 1048, "13165": 1047, "13174": 1048, "1319": [877, 1018], "131900": 104, "13193": 1048, "132": [43, 47, 53, 86, 91, 344, 421, 1029], "13204": 1051, "13213": 1049, "1322": 629, "13221": 1047, "13222543": 617, "13227": 1028, "1323": 217, "13231": 1049, "13233": [377, 500, 501], "13240": 1048, "13241": 1048, "13250": 1048, "13251": 1048, "13253": 1048, "13260": 1048, "13266": 1048, "13276": 1047, "13279": 1048, "13283": 1048, "13286": 998, "13290": 1049, "133": [53, 91, 258, 1029], "13312": 1047, "13317": 1048, "13328": 1048, "13333": 1048, "13336": 1048, "13350": 1048, "13363": 1048, "13366": 1048, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 270, "13382": 1048, "13389": 1048, "13392": 1049, "13393": 1049, "13397": 1048, "134": [80, 88, 129, 149, 177, 269, 275, 1029, 1042], "13422": 1048, "13427": 1048, "13439": 1048, "13447": 1048, "13459": 1048, "13467": 1049, "13485": 1048, "13486": 1048, "13496": 1048, "135": [172, 329, 379], "13511": 1050, "13524": 1048, "1353": 356, "13531": 1048, "13545": 1048, "13549": 1048, "13554": 1048, "13562": 1048, "13575": 1049, "13601": 1048, "13607": 1048, "13609": 1049, "13618": 1049, "13620": 1048, "13628": 1048, "13636": [1004, 1048], "13641": 1048, "13649": 1056, "13651": 1048, "137": [254, 388, 1040], "13704": 1049, "13707": 1049, "1371": 541, "13726": 1049, "1373": 1005, "1374": 541, "13741": 1048, "13769": 1049, "13772": [1047, 1048], "13773": 1049, "13779": 1048, "1378": 235, "13780": 1048, "1379": 235, "138": [247, 388, 421, 1008, 1029], "13806": 1049, "1382": 531, "13822072286080167": 283, "13835": 1048, "1385": 480, "13864": 1048, "13875": 1049, "13877": 1048, "13894": 1048, "13896": 1049, "139": [235, 295, 388, 421, 458, 468, 698, 702, 1009], "13900": 1051, "13902": [1028, 1049], "13903": [1047, 1048], "13910": 1048, "13911": [1028, 1049], "13925": 1049, "13933": 1049, "13938": 1049, "13947": 1048, "1396": 1005, "13960": 1049, "1397": 388, "13974": 1048, "13983521": 312, "13987": 1049, "13988486": 232, "13995": 1049, "13th": 64, "14": [43, 50, 52, 73, 84, 95, 97, 98, 101, 108, 114, 126, 128, 167, 191, 202, 206, 208, 235, 239, 244, 249, 269, 274, 280, 281, 290, 294, 295, 318, 319, 329, 351, 354, 370, 377, 379, 380, 395, 400, 406, 407, 414, 418, 503, 505, 517, 560, 561, 642, 650, 699, 821, 825, 877, 1001, 1004, 1008, 1018, 1023, 1037, 1039, 1040, 1042, 1043, 1047, 1052], "140": [88, 331, 421, 517, 523, 524, 525, 562, 563, 1009], "1400": [85, 480], "14012": 1049, "14024": 1048, "14028": 1049, "14035": 1049, "14048": 1050, "14053": 1048, "14067": 1048, "14075": 1050, "14087": 1048, "14092": 1048, "141": [292, 508, 541, 911, 1009], "14108": 1049, "14114": 1049, "14156": 235, "14170": 1049, "14180": [1028, 1050], "1419": 43, "14194": 1049, "14197": 1048, "142": [43, 421], "1422": 43, "14228": 370, "14237": [1047, 1048], "14259": 1049, "14264": 1050, "142857": 235, "14286": 1049, "14287": 1049, "14294": 1049, "14296": 1049, "143": [172, 379, 477, 478, 1020, 1039, 1040], "14300": 1050, "14302": 254, "14305": 1049, "14309": 1048, "14336": 1049, "14338": 998, "14356": 1049, "14357": 1049, "14378": 1049, "14381": 1049, "14393": 1048, "144": [275, 324, 336, 388, 1029, 1039], "1440": 43, "14406": 1049, "1441": 629, "14410151": 617, "14417": 1049, "144204": 150, "1443": 1014, "14430": 1049, "14446": 1051, "14458": 1049, "14464": 1049, "14475": 1049, "144943": 62, "14496": [388, 1048], "145": [52, 305, 414, 1029], "14510": 1049, "14516": 1050, "14520": 1049, "14538": 1049, "14544": 1049, "14549": 1049, "1456": 235, "14582": 1028, "14591": 1049, "14593": 1049, "14595": 1049, "145957": 150, "146": [45, 421], "1460": [147, 158], "14602": 1049, "14603365": 232, "14623": 1049, "14625": 47, "14629": 1049, "1464": 245, "14646": 1049, "14647": 1049, "14680": 1049, "14682": 1049, "14696": 1050, "147": [257, 352, 1009, 1029], "1470": 47, "14702": 1049, "147022": 206, "14704": 1049, "14706": 1049, "1471": 1014, "14710": 1049, "14732": 1049, "14736": 1054, "1474": 388, "14740": 1049, "1476": 47, "14764": 1049, "148": 1042, "14800": 1051, "14810": 321, "14848": 1050, "14849": 1049, "14862": 1054, "14864": 1049, "14865": 1049, "14869": 1049, "14872": 1049, "14884": 1049, "14890": 1049, "14894": 1049, "14898": 1049, "149": [85, 1009, 1029, 1039], "14900": 1049, "14902": 1049, "14907": 1049, "14908": 1049, "14933": 1049, "14936": 1049, "1495": 47, "14971": 1049, "14975": 1053, "14982": 1051, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 88, 89, 96, 97, 101, 107, 108, 113, 115, 121, 132, 141, 143, 146, 147, 150, 153, 167, 169, 171, 174, 178, 185, 189, 190, 191, 206, 214, 219, 231, 235, 237, 239, 241, 242, 244, 262, 263, 269, 270, 278, 280, 283, 286, 287, 290, 299, 303, 310, 311, 315, 317, 319, 330, 335, 343, 345, 348, 351, 354, 361, 376, 377, 380, 382, 395, 400, 406, 407, 418, 421, 422, 446, 460, 496, 503, 504, 505, 538, 544, 552, 553, 562, 563, 605, 611, 616, 651, 659, 668, 670, 675, 683, 685, 699, 825, 840, 863, 892, 997, 1003, 1004, 1005, 1008, 1011, 1012, 1018, 1023, 1029, 1035, 1037, 1041, 1051, 1053, 1054], "150": [43, 45, 120, 121, 141, 150, 163, 238, 242, 244, 288, 331, 349, 352, 379, 418, 423, 511, 608, 609, 832, 833, 834, 1008], "1500": [74, 85, 92, 97, 102, 121, 237, 241, 260], "15000": [679, 694, 868, 869], "15005": [1050, 1052], "15007": 1051, "15010": 1049, "1502": 47, "15028": 1049, "15038": 1049, "150407": 388, "15044": 1049, "15049": 1049, "150527": 311, "15053": 1049, "15057": 1049, "1506": 390, "15080": 1049, "15082": 1049, "15083": 1049, "15084": 1049, "15086": 1049, "15094": 1049, "15096": 1049, "15099": 1049, "150x4": 120, "151": [329, 388, 421, 508, 1020], "15100": 1049, "1511007": 258, "151101": 258, "15119": 1049, "15120": 1049, "15126": 1051, "15138": 1049, "15160": 1049, "15179": 1050, "152": [82, 93, 299, 306, 388, 1029], "15257": 1049, "1527": 867, "15274": 1049, "15297572": 543, "153": [356, 670], "15304": 1049, "15319": 1028, "153244303321897735": 414, "15361": 1051, "15375": 1049, "15380": 1050, "15382": 1049, "15393": 1049, "154": [313, 658, 1009], "1542": 388, "15427": 1051, "15429": 1049, "15436": 1050, "154453": 311, "15463": 1049, "15488": 1049, "15490": 1049, "15503": 1050, "15521": 163, "15524": 1049, "1553374": 414, "1553511": 414, "1554": 867, "15550": 1028, "15557": 1049, "15558": 1050, "15582": 1050, "156": [172, 190, 379], "15611": 998, "15622": 1050, "15625": 1049, "156252": 206, "15636": 1051, "15652": 1050, "15655": 1050, "15661": 1049, "15669": 1050, "15699552": 1009, "157": [203, 388, 1029], "15707": 1050, "15709": 1050, "15730": 1050, "157334": 311, "15751": 1049, "15760": 1049, "15762": 1050, "15763": 1051, "15773": 1050, "15782": 1050, "15785": 1050, "15797": 1049, "158": [77, 172, 347, 421, 676, 1029], "15806": 1050, "15810": 1049, "15834": 1050, "15863": 1049, "15864": 1050, "15868": 1049, "15879": 1049, "15888": 1049, "15898": 1049, "159": [88, 270, 377, 1029, 1039], "1590": 313, "15918": 1050, "1592": 505, "15926": 1050, "15930": 1049, "15933": 1049, "15936": 1049, "15937": 1049, "159419": 258, "15946": 1050, "15947": 1049, "15948": 1053, "15950": 1050, "15953": 1050, "15959": 1050, "15963": 1050, "1597": 269, "15980": 1050, "15984": 1053, "15996": 1049, "15e": 123, "16": [43, 44, 49, 52, 57, 64, 78, 85, 86, 89, 101, 108, 113, 123, 126, 167, 191, 210, 216, 217, 218, 235, 237, 238, 249, 253, 269, 277, 278, 279, 299, 313, 315, 319, 324, 349, 352, 357, 362, 377, 379, 380, 388, 395, 400, 406, 407, 418, 419, 422, 448, 463, 465, 477, 478, 484, 485, 504, 505, 509, 523, 541, 542, 577, 596, 602, 603, 614, 615, 646, 657, 658, 661, 662, 663, 664, 689, 690, 820, 825, 837, 886, 912, 920, 983, 984, 985, 997, 1004, 1008, 1018, 1023, 1029, 1035, 1037, 1039, 1040, 1044, 1045, 1047, 1048], "160": [252, 997], "1600": 85, "160030": 206, "16006": 1050, "1600x1600": 89, "16018": 1053, "16021": 1050, "16052385": 133, "16061": 1053, "16066": 1051, "16069": 1050, "16075": 1050, "16076": 1049, "16084": 1050, "16090": 1050, "16103": 1050, "16111": 1050, "16112": 1050, "16117": 1050, "161245": 89, "16132": 1050, "16144": 388, "16147": 379, "16149": 1050, "16159": [388, 1050], "1616": 479, "16182": 1050, "16183": 1050, "162": [84, 93, 268, 379, 1029], "16224": 1050, "1623": 57, "1624": 505, "16245": 1050, "16257": 1050, "1626": 1028, "16261": 1050, "16266": 1050, "16280": 1050, "16289": 1051, "163": [172, 292, 379, 1016], "163224": 206, "16323": 1050, "16326": [43, 1051], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1050, "16335": 1051, "16352": 1051, "16362": 1050, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1051, "16397": [1049, 1050], "164": 421, "164009": 278, "16401": 1050, "16403": 1050, "16431": 1050, "16437": 1050, "16442": 1050, "16443186": 1009, "16449": 1052, "16451": 1050, "16466": 1050, "16484": 1050, "16493": 1051, "165": [225, 1009, 1029], "16500": 1049, "16505": 1049, "16508": 1050, "16530": 1051, "16531": 153, "16539": 1050, "16585": 1050, "166": [43, 191, 313, 388, 1008, 1039], "16605": 1053, "16619": 1051, "16622": 1050, "16625": 1051, "16632": 1050, "16655": 1050, "16663": 1050, "166667315173": 52, "16692": 1050, "16695": 1054, "167": [388, 1039], "16718": 1050, "16726": 1050, "16728": 1050, "16747": 1054, "16748": 1053, "168": 1039, "1680": 379, "16801": 1050, "16837": 1050, "16841": 1050, "16849": 1050, "1689": 357, "169": [93, 285, 313, 356, 1029], "16906": 1051, "1691": 1004, "169106": 275, "1693": 911, "16935": 1051, "16948": 1053, "16950": 1050, "169504": 235, "16979946": 1009, "1698": 656, "16981": 1050, "16985": 1051, "16993": 1050, "17": [52, 57, 74, 87, 108, 113, 153, 175, 190, 216, 248, 269, 278, 310, 319, 357, 377, 380, 387, 400, 406, 407, 414, 418, 450, 467, 493, 504, 505, 507, 530, 538, 543, 547, 554, 556, 557, 562, 566, 567, 576, 577, 604, 635, 656, 664, 665, 666, 673, 676, 679, 681, 694, 699, 736, 737, 747, 768, 773, 790, 791, 794, 796, 825, 849, 860, 875, 880, 881, 889, 891, 897, 913, 916, 919, 920, 921, 922, 956, 997, 998, 1009, 1011, 1018, 1035, 1037, 1039, 1040, 1041, 1042, 1045, 1048, 1053], "170": [79, 92, 93, 97, 99, 297, 388, 1029], "1700": 85, "170087": 311, "17021": 1050, "17032": 1050, "17036": 1052, "17038": 1051, "170388": 1009, "1706": 338, "17061": 1050, "17090": 1051, "17095": 1051, "171": [88, 172, 240, 379, 388, 795, 1008, 1029], "17107": 1051, "1714": 1004, "17148": 1051, "17159": 1051, "17169": 1052, "17187": 1051, "17192": 1051, "17193": 1051, "172": [388, 500, 501, 656, 1004], "17204": 1050, "17205": 1050, "17210": [52, 1050], "17225": 1051, "17226834": 88, "1723": 46, "17233": 1051, "17235": 1050, "17236387": 220, "17266": 1053, "17289014": 177, "1729": 191, "173": [272, 388, 591, 1029], "17309": 1050, "17317": 1051, "17357": 1050, "17360": [47, 1050], "17367": 1051, "17370318": 232, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1051], "1738": 1008, "17386": 1051, "17388": 1055, "17396": 1051, "174": [149, 214, 245, 313, 388, 591, 1029], "17406": 1051, "17412": 1051, "17414": 1051, "17427": 1051, "17433": 1050, "17443": 1052, "17448": 1051, "1747": 191, "17474": 235, "17478": 1051, "17491": 1051, "17499": 1051, "175": [252, 388, 1018, 1029], "17526": 1051, "175298": 278, "17546": 1051, "17569": 1051, "17578": 1051, "17598": 1051, "176": [120, 343, 388, 844, 1009, 1016, 1029], "17603": 1051, "17604": 1051, "17606": 1051, "17608": 1051, "17609": 1051, "17610": 1051, "17612": 1051, "17614": 1051, "17616": 1051, "17622": 1052, "17633": 1051, "17644": 1051, "17651": 1051, "17661": 1051, "17662": 1051, "17679": 1051, "17694": 1050, "177": [271, 388, 1029], "17702": 1051, "1771": 357, "17742": 1050, "17743": 1052, "17746": 1052, "17750": 1052, "17759": 1051, "17769": 1052, "17772": 1052, "17777": 1051, "17785": 1052, "178": [46, 379, 388, 517, 855], "178000": 317, "17804": 1051, "17812": 1050, "17819": 1053, "17826": 1051, "17833": 1051, "17848": 1050, "1785": 357, "17856": 1051, "17864": 1051, "17876": 1051, "17878": 1051, "179": [379, 388, 421, 1039], "17914": 1050, "17928620": 376, "17932": 1051, "17935": 1051, "17937": 1051, "17959": 1050, "1797": [93, 273, 313, 334, 379, 426, 451, 509, 539, 540, 541, 542, 606, 607, 695, 696, 697, 698, 700, 1011], "17984": 1051, "17985": 1050, "17985197": 232, "17987": 1051, "17992": 1051, "17995": 1050, "17997": 1051, "17_760": 153, "17t14": 376, "18": [43, 46, 47, 57, 75, 79, 84, 88, 95, 97, 108, 130, 150, 153, 183, 190, 195, 217, 228, 238, 242, 244, 249, 269, 275, 292, 313, 319, 321, 335, 356, 357, 358, 382, 388, 418, 419, 422, 453, 465, 499, 507, 508, 509, 511, 512, 517, 542, 543, 545, 547, 548, 564, 565, 566, 567, 570, 571, 572, 573, 576, 578, 579, 580, 581, 582, 584, 585, 596, 601, 606, 607, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 653, 656, 665, 666, 678, 721, 725, 738, 741, 742, 748, 750, 767, 777, 804, 805, 828, 844, 867, 868, 869, 875, 881, 889, 890, 901, 911, 912, 919, 920, 921, 922, 923, 954, 955, 997, 1006, 1008, 1018, 1029, 1035, 1037, 1039, 1040, 1043, 1044, 1046, 1047, 1049, 1050], "180": [70, 260, 261, 262, 265, 266, 304, 308, 388, 509], "1800": 85, "18000": [358, 377], "18010": 1052, "18016": 1050, "18020": 1054, "1804243": 376, "18052": 1051, "18094": 1054, "181": [292, 313, 388], "18108182014": 183, "18114": 1051, "18121": 1051, "18124": 1051, "18149": 1051, "18167": 1051, "18170": 1053, "18176": 1051, "18197458": 365, "182": [174, 313, 388, 421], "18222": 1051, "18256": 1051, "18266": 1051, "18269": 1051, "18278": 1051, "18280": 1051, "18293": 1051, "18298": 1054, "183": [248, 335, 388, 1009, 1029, 1039], "18302": 1051, "18310": 1053, "18326": 1051, "18328": 1052, "18334": 1051, "18341": 1051, "18343": 1051, "18368": 1052, "18370": 1051, "18393": 1052, "18394": 1051, "184": [43, 203, 217, 313, 388, 806], "18405": 1051, "18406": 1051, "18410": 1051, "18429": 1051, "18433": 1052, "18444": 1052, "18447": 1051, "18459": 1052, "1847": 46, "18482": 1053, "18488": 1055, "185": [88, 172, 183, 379, 388, 868, 869], "1850": [45, 377], "18508": 1051, "18510": 1051, "18525": 1051, "18527": 1051, "18528": 1051, "18543": 1052, "18545": 1051, "18555": 1057, "185654": 278, "185659": 206, "18595": 1051, "186": [209, 217, 313, 388, 795, 1008, 1029], "18607": 1051, "18612": 1051, "18622": 1051, "18639": 1051, "18649": 1052, "1865": 47, "18682": 1051, "18689": 1056, "18691": 1051, "187": [275, 342, 388, 591, 1009, 1029, 1041], "1871": 1023, "18723": 1055, "18736": 1052, "1874": 1023, "18746": 1051, "1875": 988, "18768": 1051, "188": [131, 172, 179, 250, 379, 388, 591, 1029], "1880": 388, "18805": 1054, "18815268": 258, "188153": 258, "18818427": 674, "18832": 1053, "18842": 1052, "18843": 1057, "18846": [377, 494, 495], "1887": 357, "18898": 1052, "189": [217, 388, 908, 1021], "18925": 1052, "189267": 278, "18959": 1052, "189631": 206, "18964": 1052, "18975": 1053, "189830": 329, "18987": 1051, "19": [43, 52, 77, 179, 190, 221, 239, 265, 269, 319, 320, 335, 379, 380, 396, 400, 406, 407, 414, 422, 425, 450, 499, 523, 524, 525, 543, 547, 548, 554, 556, 557, 564, 565, 566, 567, 571, 572, 573, 589, 596, 614, 655, 665, 666, 673, 674, 675, 678, 679, 681, 683, 685, 694, 714, 788, 792, 806, 807, 821, 834, 839, 840, 842, 843, 857, 858, 877, 888, 909, 913, 916, 919, 920, 921, 922, 997, 1008, 1018, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1047, 1056], "190": [50, 149, 172, 235, 284, 308, 377, 388, 505], "1900": 85, "19002": 1052, "19004": 1052, "19011": 1052, "19024": 1052, "19035": 1052, "1903908407869": 220, "19041": 1052, "19046": 1052, "19047631514961908949361222113": 52, "1905": [172, 379], "19052": 1052, "19055": 1052, "19069": 1052, "19075": 1054, "19085": 1053, "191": [239, 388, 1009, 1029], "19112072e": 199, "19126": 1051, "19145": 358, "19158": 1053, "19159": 1052, "19162": 1052, "19172": 1052, "19174891": 312, "19179": 1051, "19182": 1051, "19198": 1052, "192": [149, 168, 388, 1029, 1039], "19210": 1052, "19211": 1051, "19234": 1051, "19244": 1052, "19263": 1052, "19271": 1051, "19278": 1052, "192913": 278, "192938": 52, "19296": 1052, "19297": 1052, "193": [388, 421, 722, 793, 1021], "19308": 1051, "1931": 113, "19310": 1052, "19317": 179, "19336": 1052, "193548": 235, "19356": 1052, "1936": 379, "19365": 1052, "19390": 1052, "19391": 1052, "193949": 278, "194": [216, 313, 1029], "1940": 235, "19401": 1052, "19407": 1051, "19411": 1052, "19415": 1052, "19417": 1051, "194239": 388, "19426": 1052, "19428": 1052, "19438": 1053, "19459": 1052, "19472": 1052, "19473": 1052, "1948": 57, "19483": 1052, "19490": 1053, "19491": 1052, "19499": 1052, "195": [261, 290, 500, 501, 1029], "1950": [379, 1008], "1951": 235, "195133": 388, "19520": 1052, "19522393": 232, "19527": 1052, "19564": 1052, "19568": 1052, "19571": 1052, "19579": 1051, "1958": [179, 419, 421, 539], "19580": 1051, "196": [908, 1021], "1960": [634, 723], "19616": 1052, "19631": 1052, "1964": [697, 701, 887, 899, 1005], "19641": 1052, "19643": 1052, "19646": 1051, "19659": 1051, "19662693": [851, 852], "19664": 1055, "19669": 1052, "196795181": 52, "19680": 1053, "196861": 206, "19689": 1053, "197": [117, 1029], "19703": 1051, "1972": 379, "19721": 1051, "19727": 1051, "1973": [379, 412], "19731": 1058, "19732": 1051, "19733": 1052, "19734": 1052, "1974": [414, 422, 717], "19747": 1053, "1975": 1011, "19752": 1052, "19766": 1052, "197666": 278, "1977": 642, "1978": [235, 1004], "19784": 1052, "19788": 1052, "1979": [414, 732, 776], "19790": 1052, "19794": 1053, "19799": 1052, "198": [262, 1029, 1039], "1980": 379, "19803308": 117, "1981": [235, 1004], "19829832": 232, "1983": [414, 738, 891], "19836": 1052, "1984": [113, 114, 416, 480, 919, 920, 1024], "19847": 1051, "1985": [190, 414, 712, 722, 793], "1986": [998, 1024], "19869": 1052, "1987": [414, 614, 615, 799, 800], "198766": 278, "19879": 1052, "1988": 379, "19883": 1052, "19888": 1051, "1989": [284, 642, 795, 868, 869, 1004, 1011], "199": [654, 798, 1023], "1990": 377, "19906": 1052, "19908": 1052, "1990a": 412, "1991": [523, 524, 525], "19916": 1053, "1992": [172, 377, 379, 418, 421, 574, 575, 652, 1004], "19922": 1051, "19924": 1051, "1993": [172, 379, 480, 671, 692, 693, 1024], "19934": 1052, "19939": 1051, "1993apr6": 104, "1994": [172, 377, 379, 651], "19948": 1052, "1995": [172, 275, 379, 412, 421, 560, 561, 841, 908, 1009], "1996": [64, 153, 414, 421, 425, 450, 523, 524, 525, 562, 563, 1018], "1997": [138, 377, 419, 421, 542, 561, 697, 701, 1004, 1005, 1008], "1998": [153, 275, 377, 379, 419, 421, 562, 563, 841, 846, 877, 1009, 1010, 1012, 1018, 1022], "19982": 1051, "1999": [182, 377, 412, 414, 416, 419, 421, 443, 456, 463, 475, 480, 541, 548, 562, 563, 566, 567, 730, 905, 913, 914, 916, 917, 1014, 1020], "19th": 414, "1_": 1018, "1_000": [44, 64, 70, 83, 106, 128, 153, 174, 179, 181, 191, 248, 272, 352, 413, 544, 546, 708, 806, 829, 830, 838], "1d": [2, 138, 140, 187, 191, 218, 248, 296, 299, 308, 332, 351, 362, 382, 389, 391, 395, 396, 415, 420, 470, 473, 624, 637, 640, 660, 664, 667, 670, 691, 710, 719, 720, 726, 736, 737, 741, 745, 790, 791, 794, 803, 853, 854, 855, 856, 857, 859, 861, 862, 863, 876, 928, 931, 933, 937, 938, 970, 994, 1009, 1029, 1039, 1044, 1045, 1046, 1048, 1052, 1053, 1057, 1058], "1e": [44, 45, 46, 49, 55, 63, 81, 123, 172, 174, 177, 179, 180, 181, 182, 183, 185, 190, 198, 210, 217, 218, 224, 231, 235, 240, 244, 250, 255, 260, 263, 266, 273, 283, 286, 312, 322, 327, 330, 338, 343, 345, 352, 356, 388, 426, 449, 453, 458, 465, 468, 477, 478, 484, 488, 489, 490, 538, 539, 540, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 566, 567, 568, 569, 599, 604, 613, 615, 616, 618, 620, 621, 622, 626, 627, 629, 630, 632, 634, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 696, 697, 698, 699, 700, 701, 702, 735, 792, 804, 805, 821, 846, 847, 848, 849, 850, 851, 852, 860, 868, 869, 876, 906, 907, 911, 912, 913, 914, 915, 916, 917, 993, 997, 1008, 1012, 1016, 1018, 1022, 1047, 1052, 1053, 1054], "1e0": [174, 250, 266, 283, 997], "1e1": [174, 180, 217, 250, 345], "1e15": 183, "1e2": [49, 174, 181, 250, 266, 345], "1e3": [45, 46, 49, 174, 180, 185, 250, 286, 330, 997], "1e4": [286, 666, 686, 905, 1020], "1e5": [45, 179, 199, 201, 207, 286, 620, 621, 622, 626, 627, 629, 630, 632, 900, 905, 1020], "1e6": [47, 49, 210, 248, 332, 356, 358, 369, 543, 905, 1008, 1020], "1e7": 388, "1er": 422, "1f": [52, 58, 85, 88, 126, 198, 217, 248, 260, 262, 282, 324, 331, 357, 358], "1gb": 369, "1kastner": 1046, "1m": 973, "1mb": [370, 1044], "1mo": 179, "1nn": 379, "1or": 422, "1px": 313, "1qlettinn8oi": 356, "1st": [0, 43, 95, 120, 182, 218, 320, 889, 890], "1z": 422, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 376, 377, 378, 379, 380, 382, 384, 386, 387, 388, 389, 391, 394, 395, 396, 400, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 478, 479, 480, 481, 484, 485, 486, 488, 489, 490, 491, 500, 503, 507, 508, 511, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 588, 589, 591, 592, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 608, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 710, 711, 712, 713, 714, 715, 718, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 770, 771, 774, 775, 776, 778, 780, 781, 782, 783, 785, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 904, 905, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 926, 933, 934, 935, 937, 938, 939, 943, 947, 953, 954, 955, 956, 957, 958, 959, 961, 962, 968, 969, 970, 971, 972, 973, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1029, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1058], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 81, 82, 85, 89, 90, 96, 102, 111, 115, 121, 123, 130, 132, 139, 143, 146, 147, 150, 154, 158, 159, 161, 165, 167, 168, 169, 172, 180, 189, 191, 192, 200, 206, 207, 209, 213, 214, 216, 217, 218, 221, 226, 229, 230, 231, 232, 234, 240, 248, 254, 262, 264, 265, 269, 275, 276, 278, 279, 281, 286, 287, 290, 292, 295, 299, 300, 301, 302, 303, 306, 313, 319, 320, 321, 325, 326, 327, 328, 330, 334, 335, 338, 342, 344, 348, 350, 354, 357, 358, 362, 363, 375, 379, 380, 382, 387, 388, 400, 406, 407, 414, 421, 422, 447, 452, 453, 455, 470, 471, 475, 477, 478, 484, 494, 495, 496, 497, 499, 501, 503, 504, 507, 509, 511, 512, 518, 519, 522, 523, 530, 538, 543, 544, 549, 552, 553, 555, 559, 562, 563, 566, 567, 568, 569, 570, 576, 577, 589, 596, 597, 599, 601, 604, 606, 636, 637, 652, 656, 665, 673, 674, 675, 683, 685, 703, 711, 715, 720, 723, 732, 733, 746, 763, 764, 774, 799, 800, 804, 805, 806, 807, 821, 833, 834, 835, 838, 840, 843, 844, 845, 848, 849, 856, 857, 868, 869, 870, 871, 873, 875, 876, 884, 885, 886, 887, 892, 906, 907, 909, 910, 915, 918, 923, 929, 935, 937, 938, 941, 985, 997, 1004, 1008, 1011, 1014, 1015, 1018, 1021, 1029, 1031, 1032, 1034, 1035, 1037, 1039, 1045, 1048, 1051, 1053, 1054], "200": [69, 70, 79, 85, 89, 95, 109, 126, 139, 150, 157, 178, 203, 212, 218, 221, 222, 223, 229, 234, 238, 256, 260, 276, 282, 284, 285, 315, 318, 336, 344, 345, 363, 365, 377, 394, 419, 421, 426, 446, 460, 474, 477, 478, 529, 540, 541, 542, 545, 546, 547, 550, 554, 591, 656, 658, 678, 686, 699, 753, 821, 868, 869, 909, 913, 914, 915, 916, 917, 929, 1008, 1023], "2000": [54, 63, 75, 85, 109, 124, 130, 195, 263, 266, 275, 292, 310, 328, 357, 377, 379, 414, 415, 421, 426, 458, 468, 540, 541, 566, 696, 698, 700, 750, 795, 804, 857, 887, 899, 1005, 1008, 1014, 1020, 1058], "20000": [57, 125], "200000": [235, 876], "20002": 1052, "2001": [2, 64, 179, 192, 269, 274, 411, 414, 421, 443, 457, 458, 459, 468, 518, 566, 567, 571, 572, 635, 641, 646, 652, 698, 703, 742, 795, 892, 904, 942, 998, 1000, 1004, 1008, 1014, 1016, 1018, 1020, 1023], "2002": [98, 412, 414, 421, 443, 454, 600, 601, 733, 763, 858, 906, 1000, 1008], "20023": 1052, "2003": [2, 51, 179, 411, 414, 419, 422, 457, 458, 468, 520, 522, 696, 700, 846, 848, 1004, 1005, 1010, 1020, 1047], "20030": 1052, "20031": 1053, "2004": [44, 172, 275, 292, 377, 379, 414, 416, 419, 479, 542, 614, 615, 696, 700, 712, 750, 790, 907, 1002, 1004, 1005, 1010, 1023], "2005": [62, 64, 114, 379, 412, 443, 445, 860, 1004, 1011, 1021], "20056": 1052, "2006": [2, 50, 308, 377, 421, 424, 468, 505, 564, 565, 572, 573, 617, 618, 621, 626, 629, 656, 673, 674, 748, 795, 796, 804, 846, 904, 921, 922, 1004, 1008, 1010, 1013, 1020, 1021], "2007": [0, 73, 204, 377, 414, 423, 446, 458, 460, 466, 468, 573, 663, 698, 724, 741, 744, 765, 766, 802, 1000, 1004, 1006, 1008], "20072": 1052, "2008": [51, 416, 418, 419, 484, 541, 570, 597, 652, 671, 692, 693, 699, 723, 733, 763, 841, 846, 850, 867, 1002, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1023], "20087": 1052, "2009": [2, 137, 140, 141, 152, 202, 414, 418, 419, 421, 422, 526, 527, 535, 538, 544, 545, 547, 548, 551, 554, 560, 566, 567, 642, 678, 686, 703, 842, 919, 920, 954, 955, 1004, 1008, 1009, 1015, 1024], "200_000": [876, 1055], "200j": 165, "200m": 377, "200x": 1039, "201": [149, 172, 379, 591], "2010": [0, 112, 191, 280, 281, 411, 414, 416, 418, 419, 427, 481, 543, 711, 715, 726, 727, 747, 836, 868, 869, 1000, 1004, 1008, 1012, 1022, 1026, 1039], "2011": [0, 191, 388, 419, 422, 542, 545, 547, 548, 554, 597, 634, 645, 665, 737, 998, 1012, 1022, 1026, 1039], "20117": 1052, "2012": [0, 114, 412, 421, 562, 563, 570, 646, 750, 997, 1001, 1008, 1026, 1039], "2013": [0, 195, 379, 414, 418, 419, 543, 733, 763, 1000, 1008, 1026, 1040, 1041], "2014": [0, 376, 408, 419, 421, 424, 537, 614, 615, 629, 630, 665, 699, 868, 869, 954, 955, 1005, 1012, 1032, 1042], "20145": 1053, "2015": [0, 191, 376, 715, 728, 730, 731, 868, 869, 1008, 1015, 1032, 1043, 1044], "201520": 206, "20155": 1052, "20159": 1052, "2016": [0, 242, 376, 414, 997, 1044, 1045], "20161": 1052, "20165": 1052, "2017": [0, 275, 376, 412, 414, 425, 450, 1008, 1045, 1046], "2018": [0, 217, 235, 422, 456, 997, 1008, 1032, 1046, 1047], "2019": [0, 191, 380, 414, 458, 468, 699, 1005, 1008, 1015, 1018, 1047, 1048, 1049], "2020": [0, 377, 1049, 1050, 1051, 1052], "20200": 1052, "20207": 1052, "20209": 1052, "2021": [0, 380, 382, 678, 1008, 1051, 1052], "2022": [0, 370, 414, 421, 712, 1018, 1053, 1054], "2023": [0, 394, 408, 412, 1054, 1055], "20231": 1052, "2024": [1056, 1057], "20240": 1052, "20250": 1052, "20272": 1052, "20297": 1052, "203": [88, 307, 357, 1029], "20312": 1052, "203174": 206, "20326": 1052, "20331": 1054, "2034": [356, 377], "20380": 1052, "20385": 1052, "2039": 278, "204": [1016, 1021], "20408": 1053, "20415": 1054, "20416": 1052, "20431": 1052, "20477": 1052, "205": 54, "20512": 1052, "20515": 1052, "20521": 1052, "20524": 1055, "20526": 1052, "20528": 1052, "20531": 1052, "20534": 1052, "20552": 1052, "20554": 1052, "20560": 1052, "20567": 1053, "20583": 1052, "20597": 1052, "20617": 1054, "20619": 1052, "20638": 1052, "20640": [143, 186, 377, 496], "20652": 1052, "20653": 1053, "20657": 1052, "20673": 1052, "20683": 1052, "207": [313, 1039], "2071716": [851, 852], "20727": 1052, "20729": 1052, "20752": 1052, "2075215": 232, "20753": 1053, "20761": 1052, "207667": 278, "2079": 280, "208": [172, 295, 379], "20802": 1054, "20803": 1053, "20811": 1053, "20842": 1052, "20843": 1052, "20851432": 331, "20860": 1053, "20880": 1052, "208864": 206, "20899": 1052, "209": [748, 887], "20904": 1052, "20959": 1052, "20960": 1052, "20961": 1052, "20_000": 295, "20new": 377, "20newgroup": [66, 187, 196, 209, 233, 313, 495, 665, 837, 840, 1004, 1029], "20news_hom": 377, "20newsgroup": [232, 375, 1039], "20th": 715, "21": [43, 52, 107, 121, 158, 172, 190, 206, 218, 225, 235, 254, 265, 269, 295, 313, 317, 319, 330, 379, 380, 384, 386, 400, 411, 421, 422, 447, 451, 480, 484, 536, 539, 568, 569, 570, 576, 577, 595, 596, 598, 634, 676, 694, 761, 807, 821, 834, 877, 884, 886, 892, 909, 925, 954, 1000, 1004, 1008, 1009, 1018, 1029, 1035, 1037, 1039, 1040, 1042, 1046, 1047, 1049], "210": [126, 316, 1029], "2100": [85, 327], "2102": 551, "21020": 1054, "21026": 1053, "21032": 1053, "21038": 1053, "2107": 280, "21078": 1053, "21079": 1053, "2108": 47, "21080": 1052, "21086": 1053, "21093": 1052, "211": [167, 185, 280, 329, 337, 887, 899, 1029], "21109": 1053, "2111": 47, "21114": 1053, "211217613": 1047, "21130": 1052, "21145": 1052, "21148": 1053, "2117": 338, "21177": 1053, "21179": 1052, "2119": 47, "21194": [81, 1052], "21195": 1052, "21199": 1052, "212": [149, 172, 248, 280, 337, 379, 475, 507, 1014], "21219": 1053, "212197e": 235, "2123": 47, "21243": 81, "21251": 1052, "2126": 254, "21271": 1052, "21278": 1053, "21295": 1052, "21298": 1053, "213": [147, 363, 1029], "21301203": 177, "213056e": 235, "21310": 1053, "21316": 1053, "21330": 1053, "21334": 1053, "21336": 1052, "21340": 1052, "21341": 1053, "21351": 1052, "21389": 1052, "2139": [217, 235], "214": [175, 591], "21408": 1053, "21425": 1053, "21430": 1053, "21432": 1053, "21434": 1053, "21436": 1053, "21443888": 232, "21445": 1053, "21448": 1053, "21469": 1054, "21481": [1052, 1053], "21482": 1053, "21493": 1052, "215": 591, "21517": 1052, "21534": 1053, "21542": 1053, "21544347": 51, "21552": 1052, "21565": 1053, "2156660": 331, "21567": 1053, "21569": 1053, "21573": 1053, "21576": 1053, "21578": [47, 1052], "2159048": [660, 670, 691], "216": 1021, "21606": 1053, "21616": 748, "21617": 1053, "21632": 1053, "21694": 1052, "217": [542, 548, 806], "21701": 1053, "21705": 1053, "2171": 46, "21713": 1053, "21724": 1053, "2173": [204, 663, 1004], "21735": 1053, "21741": 1052, "21762": 1053, "21767": 1053, "2179": 47, "218": [379, 477, 722, 793], "2180": 57, "21800": 1053, "21805": 1053, "21807": 1056, "21808": 1053, "21809": 1055, "21814": 1053, "21832": 1053, "21833": 1052, "21837": 1053, "21845": 1052, "21871": 1052, "21873": 1053, "21880": 1053, "21881": 1053, "21888": 1053, "218997": 206, "219": 274, "21901": 1053, "21915": 1052, "21917": 1052, "2192": [204, 663, 1004], "21938": 1054, "21954": 1053, "21987": 1053, "21988": 1053, "21991": 1052, "21998": 1053, "22": [43, 52, 77, 141, 142, 185, 186, 187, 190, 191, 192, 234, 242, 257, 265, 269, 297, 313, 315, 319, 321, 323, 326, 329, 332, 335, 338, 358, 382, 387, 400, 411, 443, 454, 478, 484, 494, 495, 502, 503, 511, 522, 531, 538, 544, 549, 552, 553, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 601, 616, 634, 635, 639, 641, 652, 654, 658, 660, 662, 665, 666, 668, 670, 672, 676, 695, 699, 709, 711, 720, 764, 776, 785, 790, 791, 795, 807, 808, 812, 821, 826, 828, 831, 832, 833, 834, 835, 836, 837, 838, 855, 857, 859, 861, 862, 863, 868, 869, 870, 872, 875, 891, 902, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 949, 950, 1000, 1008, 1018, 1029, 1035, 1037, 1039, 1042, 1047, 1050, 1052], "220": [54, 79, 269, 356, 1039], "2200": [85, 377, 500], "22002": 1053, "22014": 1054, "22015": 1053, "22016": 1053, "22027": 1053, "220446049250313e": [477, 478, 484, 657, 658, 661, 662, 663, 689, 690], "22050": 1052, "22054": 1054, "22058": 1053, "22059": 1053, "22062": 1053, "22063": 1053, "22064": 1053, "22065": 1053, "221": [117, 156, 269, 1042], "2210": 47, "22106": 1053, "22108": 1053, "2211": [47, 641], "22111": 1053, "22114": 1053, "22118": 1053, "22119": 1053, "22120": 1053, "22137": 1053, "2214": 47, "22148": 1053, "22149": 1053, "2215": 47, "22150": 1053, "22154": 1053, "22159": 1053, "2217": 47, "22181": 1053, "22188": 1053, "22191": 1053, "22199": 1053, "222": [117, 156, 338, 1023], "22203": 1053, "22206": 1053, "22212": 1053, "22215": 1053, "22217": 1053, "22218": 1053, "2222": 663, "22223": 1053, "2223": 47, "22235": 1053, "22237": 1053, "2224": 1041, "22240": 1053, "22248": 1053, "22249": 1053, "2225": 47, "22254": 1053, "22255": 1053, "22268": 1054, "22269": 1054, "22284": 1053, "22288": 1053, "223": [54, 117, 156, 172, 182, 379, 1029], "22300": 1053, "22314355": 597, "22318": 1053, "22320": 1053, "22356": 1053, "22361": 379, "22370": 1053, "223745": 217, "224": [88, 117, 156, 414, 732, 829], "22409": 1055, "22410": 1053, "22412": 1053, "22438": 394, "2246": 235, "22476": 1053, "22486": 1053, "22493": 1053, "22498": 1053, "225": 421, "22504": 414, "22506": 1055, "22508": 1053, "22518": 1054, "22525": 1053, "22526": 1053, "22527": 1054, "22537": 1053, "22548": 1053, "22553": 1053, "22554": 1054, "22562": 1054, "22566": 1053, "22578": 1053, "225806": 235, "22595": 1053, "226": [127, 414, 425, 450, 1029], "22604": 1053, "22606": 1058, "22629": 1054, "22635": 1053, "22665": 1054, "2267": 47, "2268": 47, "22685": 1053, "22687": 1053, "22692": 126, "22694": 1053, "22695": 1053, "22696": 1053, "22697": 1053, "227": [146, 275, 414, 732, 1029], "2271": 47, "22710": 1054, "2272": 47, "22735": 1053, "22747343e": 113, "22775": 1053, "22784907": 834, "228": [96, 1029], "22806": 1053, "22808": 1053, "2282": 47, "22830": 1053, "2284": [47, 191], "22856": 1053, "2286": 377, "22866": 1053, "22868": 1053, "2287": 377, "2288": [47, 377], "22891": 1053, "22898": 1054, "22899": 1053, "229": [349, 1008, 1029], "2290": 47, "22908": 1053, "22913": 1053, "22950": 1053, "22953": 1053, "22965": 1054, "22968": 1054, "22982": 1053, "22993": 1054, "22nd": 445, "23": [43, 57, 63, 70, 85, 126, 155, 172, 187, 217, 242, 246, 256, 258, 265, 269, 277, 313, 319, 323, 326, 327, 328, 330, 331, 335, 379, 388, 400, 421, 427, 437, 446, 453, 458, 460, 468, 471, 473, 474, 481, 484, 485, 486, 488, 489, 490, 496, 499, 507, 508, 509, 511, 512, 517, 519, 521, 529, 531, 545, 546, 547, 550, 554, 561, 563, 565, 567, 568, 569, 572, 575, 576, 577, 614, 615, 618, 634, 637, 639, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 682, 685, 686, 687, 688, 724, 737, 785, 837, 843, 844, 845, 854, 862, 869, 872, 884, 891, 899, 900, 909, 912, 914, 917, 920, 922, 935, 937, 938, 949, 950, 955, 1008, 1029, 1035, 1037, 1039, 1040, 1046, 1047, 1048, 1051], "230": 591, "2300": [85, 206], "23023": 1053, "23033": 1053, "23034": 1053, "23036": 1053, "23038": 1054, "23040": 1053, "23046": 1053, "23047": 1053, "23077": 1053, "23079": 1053, "23095": 1053, "23097": 1053, "23098": 1053, "23099": 1055, "231": [50, 308, 377, 414, 425, 450, 505, 591], "23101": 1054, "23113": 1053, "23115": 1053, "23127": 1054, "23139": 1054, "23149": [377, 504, 1053], "2316": 47, "2317": 47, "2319": 47, "23194": 1053, "23197": 1054, "23198": 1053, "232": [269, 1008], "2320": 47, "23210": 1054, "23214": 1053, "2323": [696, 700, 1005], "23252": 1054, "23256": 1053, "23264": 1053, "23271": 1053, "23273": 1053, "23275": 1054, "23299": 1053, "233": 232, "2331": 43, "23317": 1056, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1053, "2336": 388, "23370": 1053, "23395": 1053, "233mb": 45, "234": [88, 846, 850, 868, 869, 1010], "2341": 531, "23410": 1053, "234137": 206, "23442": 1054, "23446": 1054, "23461": 1054, "23470": 1054, "23471": 1053, "23480": 1054, "235": 321, "235430": 278, "23548": 1053, "2357juan": [1053, 1054, 1055], "23585": 1054, "23595": 1055, "23604": 1054, "23608": 1053, "23619": 1054, "23636": 1053, "23637": 1054, "23668876": [660, 670, 691], "236720": 206, "23683": 1054, "23689075": [660, 670, 691], "23726": 1054, "23731": 1055, "23734": 1054, "237703": 206, "23773583": 113, "23786125": 213, "23798": 1054, "238": [292, 1029], "23819": [1054, 1055], "23833": 1053, "23834": 1054, "23865": 1054, "23874": 1054, "238744": 206, "23877": 1054, "238955": 278, "239": 1039, "23905": 1054, "23935": 1054, "23977": 1054, "23990": 1053, "23993": 1054, "24": [43, 44, 52, 101, 153, 172, 187, 191, 195, 202, 232, 269, 276, 287, 295, 323, 324, 325, 327, 330, 331, 334, 335, 380, 382, 386, 400, 406, 407, 414, 421, 422, 443, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 466, 468, 470, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 499, 503, 511, 522, 523, 524, 525, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 588, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 620, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 705, 706, 707, 709, 715, 721, 734, 753, 760, 804, 805, 807, 810, 811, 821, 828, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 872, 874, 875, 876, 877, 880, 881, 883, 885, 886, 887, 888, 889, 891, 901, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 949, 950, 954, 982, 988, 997, 1015, 1018, 1029, 1035, 1037, 1039, 1047, 1048, 1049, 1050, 1052], "240": [43, 52, 79, 1016, 1039], "2400": 85, "24000": 527, "24015": 1053, "24017": 1053, "24027": 1055, "24051": 1054, "24058": 1054, "24075": 1054, "24076": 1055, "24083": 1055, "24084": 1054, "24087": 1053, "241": [421, 574, 575], "2410": 551, "24140": 1055, "24141": 1054, "24145": 1055, "24146": 1054, "24160": 329, "242": [43, 891, 1029, 1039], "24218": 1054, "24230": 1055, "24245": 1054, "24258": 1054, "24264": 1054, "24283": 1054, "243": [54, 591], "2431": 481, "24317": 1054, "24338": 1054, "24350": 1054, "24354": 1054, "24365": 1054, "243802": 311, "244": [269, 292, 591], "24404831511191221642141021252626109": 52, "24405": 1054, "2441": 235, "24412": 1054, "24421": 1054, "24433": 1054, "24446": 1053, "244466": 258, "24465": 1054, "2449": 388, "245": [165, 211, 1020, 1029, 1041], "24512": 1054, "24523": 1054, "24528": 1054, "24538": 1054, "24539": 1054, "24543": 1054, "24556": 1054, "24568": 1055, "245961": 150, "245mb": 358, "246": [202, 280, 1016, 1029, 1039], "24617": 1054, "2463": 1004, "24630": 1054, "24631": 1053, "24637": 1054, "24640578": 113, "24645": 1054, "24667": 1054, "24668": 1055, "24677": 1055, "24683": 1054, "24688": 1054, "24699": 1054, "247": 891, "24714": 1054, "24747": 1054, "24750": 1054, "24755": 1054, "24767": 1054, "24769": 1055, "24838": 1056, "24849": 1054, "24855": 1054, "24856": 1054, "24871": 1055, "24873": 1054, "2487575": 195, "2487591": 195, "24882": 1055, "24889": 1054, "24894": 1054, "249": 269, "24935": 1055, "24951": 1054, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 77, 80, 89, 90, 113, 117, 126, 130, 132, 141, 150, 168, 169, 175, 185, 190, 198, 207, 221, 242, 244, 254, 262, 269, 275, 308, 310, 313, 315, 317, 329, 334, 335, 356, 363, 365, 369, 388, 418, 421, 422, 425, 450, 483, 487, 508, 511, 528, 577, 604, 625, 685, 741, 803, 824, 837, 863, 881, 886, 888, 889, 892, 900, 901, 903, 904, 952, 956, 988, 1004, 1008, 1009, 1011, 1018, 1029, 1039, 1041, 1047, 1050], "250": [49, 100, 150, 195, 237, 500, 699, 829, 997, 1020, 1046], "2500": 1008, "25000": 77, "2501": [172, 379], "25044": 1055, "250639": 206, "25067": 1054, "25077": 1054, "25080": 1054, "25089": 1054, "25093": 1055, "25094": 1054, "251": [172, 239, 379], "25102": 1055, "25120": 1055, "25129": 1054, "25147": 1054, "25163598": 390, "25172": 1054, "25174": 1054, "25177": 1055, "25183501383331797": 283, "25186": 1055, "25188": 1054, "25190": 1055, "25193977": 1009, "25196": 1055, "252": [172, 239, 379, 541, 887, 899], "25209": 1055, "25214": 1055, "25220": 1055, "25232": 1055, "25250": 1054, "25251": 1055, "25257": 1055, "25274": 1054, "25275": 1056, "25291": 1055, "25291366": 365, "25294": 1055, "25295": 1054, "25296": 1054, "25297": 1055, "25299": 1055, "253": [149, 541], "25308": 1055, "25312": 1054, "25334": 1055, "25341": 1054, "253445": 150, "25349312e": 199, "2535": [475, 480], "25354": 1054, "2536": 482, "25363": 1054, "25367": 1055, "25370": 1054, "25387": 1055, "25402": 1055, "25417": 1055, "25432": 1055, "25438": 1055, "25443": 1055, "25477": 1054, "2548": 213, "25490": 1055, "25499205": 543, "255": [83, 126, 295, 312, 321, 327, 377, 421, 500, 501, 568, 569], "25500": 1054, "25506": 1055, "25511": 1054, "25531": 1055, "25563": 1054, "25570": 1054, "25587": 1055, "25589": 1054, "256": [77, 83, 88, 149, 321, 370, 377, 414, 421, 455, 474, 544, 553, 570, 867, 899, 909, 1053], "25601": 1055, "25619": 1054, "25629": 1055, "25638": 1054, "25659": 1055, "25664": 1054, "25672": 1055, "25677": 1055, "2568": 1048, "25694": 1054, "25697": 1055, "257": [239, 273], "25704": 1054, "25713": 1055, "25719016": 1009, "25732": 1055, "25733": 1055, "25744": 1054, "25747": 1054, "25752": 1055, "25774": 1054, "25784": 1055, "2579": 699, "258": [132, 239, 1029], "25805": 1055, "25813": 1055, "25814": 1055, "25815": 1055, "259": [50, 239, 308, 377, 421, 505, 574, 575], "259031": 206, "259297": 206, "25931": 1055, "25956": 1055, "25973": 1055, "25987": 1055, "25991": 1057, "25th": [43, 254, 889], "26": [43, 47, 81, 89, 113, 121, 125, 179, 190, 242, 253, 269, 276, 335, 388, 577, 655, 736, 790, 829, 887, 899, 955, 1008, 1018, 1029, 1039, 1042, 1043, 1051, 1057], "260": [274, 1052], "26019": 1055, "26021": 1055, "26033": 1055, "2605": 699, "26082": 1055, "26093": 1055, "261": [254, 1029], "26106": 1055, "26108": 1055, "26113448": 169, "26120": 1057, "26121": 1055, "26163": 1056, "26194": 1055, "262": [113, 1029, 1039], "26207": 1055, "26242": 1055, "26243": 1056, "26253567e": 113, "26264": 1055, "26267": 1056, "26278": 1056, "26286": 1055, "26286057": 232, "26289": 1055, "26299": 1056, "263": [289, 1029], "26315": 1056, "26316": 179, "26318": 1055, "26323": 1055, "263234": 258, "26323428": 258, "26325": 1055, "26333": 1055, "26337": 1055, "26362917": 232, "26366": 1056, "263758": [590, 594], "26376": 1055, "26385": 1055, "26386": 1055, "26386883": 177, "26391": 1056, "2640": 842, "26400": 1055, "26410": 1056, "26411": 1056, "26416": 1055, "26424": 1055, "26433": 1055, "26454": 1055, "26459": 1056, "26464": 1056, "26466": 1055, "265": [742, 846, 850, 1010], "26503": 1055, "26506": 1056, "26521": 1055, "2652124": 822, "26525": 1056, "26551": 1055, "26566": 1055, "26579": 1055, "26593496": 232, "266": [198, 265, 1029], "26600": 1055, "26602": 1055, "26616": 1056, "26634": 1056, "26642044": 673, "26644": 1055, "26648": 1056, "26653": 1055, "26657": 1055, "2666": 1008, "2667": 505, "26674": 1056, "26683": 1056, "267": [215, 1029, 1039], "2671": 1018, "26721": 1056, "26734": 1056, "26736": 1056, "26744": 1056, "26748": 1055, "2675": 46, "26754": 1055, "26760": 1055, "26765": 1056, "267703": 89, "26772": 1055, "26786": 1056, "26789": 1056, "268": [248, 289], "26814": 1055, "268147": 278, "26828": 1056, "26830": 1056, "26831": 1056, "26837": 1057, "26840": 1056, "26855": 1056, "26862": 1056, "26893": 1055, "26896": 1056, "269": [261, 518], "26903": 1055, "26909": 1056, "26913": 1055, "2692": 1018, "26931": 1055, "26934744": 133, "26940": 1055, "26944": 1056, "26957": 1056, "26th": [414, 733, 763, 1008], "27": [43, 45, 47, 52, 57, 67, 82, 89, 269, 334, 335, 353, 379, 414, 422, 524, 531, 612, 720, 795, 796, 892, 912, 1008, 1018, 1039, 1041], "270": [202, 335], "27000": 235, "27002": 1055, "27005": 1056, "27006": 1056, "27017": 1056, "27018": 1056, "27044": 1055, "27054655": 232, "27058": 1056, "27096": 1058, "27098": 1056, "27100": 1056, "27104": 1056, "27110": 1056, "27137": 1056, "27139": 1056, "2714": 254, "271411": 258, "27161": 1056, "27161955": 169, "27166": 1056, "27167": 1055, "27179": 1056, "27185": 1056, "272": [228, 1029], "27204": 1056, "27219": 1056, "272214": 591, "27239": 1056, "27240": 1056, "27243": 1055, "27250": 1056, "27252": 1056, "2727": 565, "27274": 1056, "27277": 1056, "27291": 1056, "27292": 1055, "273": [45, 106, 1029], "27301": 1056, "27308": 1056, "27309": 1056, "27311": 1055, "27314": 1056, "27315": 1056, "27328": 1056, "27336": 1056, "2734": 388, "27344": 1057, "27372": 1056, "27381": 1058, "27389": 1056, "274": 518, "27412": 1058, "27417": 1056, "27431": 1056, "27438": 1056, "27456": 1057, "27468": 1055, "27478": 1056, "27490": 1056, "27491": 1057, "27499706": 51, "275": [43, 335, 1042], "27500": 1056, "27526": 1057, "27538": 1056, "27544": 1056, "27556": 1056, "27558": 1056, "27560": 1057, "27566": 1057, "275706": 89, "27573": 1055, "27576": 1057, "27577": 1056, "27580": 1055, "27583": 1055, "27584": 1057, "275851": 258, "2759": [903, 904], "27597342": 117, "276": 275, "27601": 1056, "27614": 1056, "27624": 1056, "2763": [427, 481], "27636": 1057, "27639": 1056, "27645": 1056, "27650": 1056, "27651": 1056, "27657": 1057, "27668": 1056, "27670": 1056, "27675": 1056, "27678": 1056, "277": [190, 322, 1016, 1029, 1041], "27700": 1057, "27702": 1056, "27710": 1056, "27718": 1056, "27720": 1056, "27721": 1056, "27734": 1056, "27736": 1058, "27757": 1056, "27760": 1056, "27772182": 52, "278": [379, 851, 852], "2780": 388, "27800": 1057, "27801": 1056, "27817": 1056, "27821": 1056, "27828": 1056, "27834": 1056, "27835": 1056, "27841": 1056, "27844": 1057, "27865": 1056, "27875": 1058, "27898": 1056, "27899": 1056, "279": [183, 1004], "27904": 1057, "27937": 1057, "27966": 1058, "27979": 1056, "27990": 1057, "28": [43, 47, 101, 150, 172, 190, 233, 269, 284, 289, 312, 334, 335, 379, 388, 414, 418, 456, 463, 1018, 1029, 1039, 1042, 1045], "280": 335, "28009951": 834, "2802": 57, "28040": 1057, "28048": 1056, "28051": 1057, "28053": 1057, "28064": 1058, "28074": 1056, "28085": 1057, "28090": 1056, "28092": 1057, "28095": 1056, "28096": 1058, "28102": 1057, "28106": 1058, "28111": 1056, "28121": 1056, "28136": 1057, "28160": 1057, "28165": 1056, "28167": 1056, "28179": 1058, "2818": 476, "28184": 1056, "28187": 1057, "28188": 1056, "28191": 1056, "28195": 1056, "28198": 1056, "282": [140, 1029, 1039], "28205": 1057, "28207552": 232, "28210": 1057, "28222": 1056, "28225276": 88, "2823": 338, "28233": 1056, "28235": 1056, "28240": 1056, "28241": 1056, "28247": 1056, "2825": 0, "28256": 1056, "28261": 1057, "28262": 1056, "28263": 1056, "28268": 1058, "28295": 1056, "2830": 0, "28306": 1057, "28327": 1056, "2833": 388, "28351": 1057, "28352": 1057, "28360": 1057, "28365": 1056, "28377": 1056, "28385": 1056, "28399": 1057, "284": [172, 338, 656, 1029], "28407": 1057, "28425": 1057, "284315": 269, "28432": 1057, "28435": 1057, "28471": 1057, "284806": 269, "284807": 269, "28483": 1057, "28491": 1057, "28494": 1058, "28498": 1057, "285": [258, 335, 731], "28521": 1057, "28552": 1057, "28557": 1057, "28582": 1057, "286": 421, "28604": 1057, "28612": 1057, "28622": 1058, "28637": 1058, "28651": 1057, "28664": 1057, "28670": 1057, "28692": 1057, "287": [50, 191, 1020, 1029], "28701": 1058, "28703": 1057, "28712": 1057, "28718": 1057, "28722": 1057, "28756": 1057, "28763": 1057, "28768": 1057, "28773": 1058, "2879": 1046, "288": [73, 542, 548, 1029], "28808734": 221, "28822": 1057, "28823": 1057, "28843": 1057, "28847": 1057, "289": [190, 1029], "28905738": 331, "28915": 1057, "28925": 1057, "28934": 1058, "28936": 1058, "28951": 1057, "28975": [1052, 1058], "28988": 1057, "28992": 1058, "28x28": 312, "29": [52, 114, 175, 179, 208, 217, 221, 234, 269, 329, 335, 379, 421, 566, 567, 697, 701, 788, 804, 863, 1004, 1005, 1022], "290": [335, 695, 696, 700, 1005], "290075": 206, "29013212": 331, "29014": 1058, "29018": 1057, "290584": 311, "29067": 1058, "29074172": 331, "29078": 1057, "291": [80, 172, 357, 377, 379, 1029], "29105": 1058, "29112": 1058, "29119": 1057, "29124": 1058, "29128": 1058, "29135": 1058, "29136": 1058, "2914": 501, "29141": 1058, "29142": 1058, "29143": 1058, "29144": 1058, "29158": 1058, "29179": 1057, "292": [400, 421, 742], "29207": 1058, "29210": 1058, "29212": 1058, "29227": 1058, "29235": 1057, "29239": 1058, "29260": 1058, "29265": 1058, "29266": 1058, "29267": 1058, "29269": 1057, "2928359": 232, "293": [109, 248, 1029], "29300": 1058, "29312": 1058, "29314": 1057, "29316": 179, "29327": 1057, "29329": 1058, "29330": 1057, "29336": 1057, "29354": 1058, "29389": 1058, "2939931": 331, "29400": 1058, "29401": 1057, "29402": 1058, "29404": 1058, "29419": 1058, "29433": 1058, "29442": 1058, "29462": 1058, "29473397": [851, 852], "29475": 1058, "295040e": 235, "29540": 1058, "29545": 1057, "295505e": 235, "296": 1020, "2961": 658, "29612": 1057, "29634": 1058, "29639": 1058, "296575": 206, "29677": 1058, "29694": 1057, "29696": 1058, "297": [112, 377, 1029], "29709": 1058, "29710": 1058, "29738": 1058, "29751": 1058, "29779": 1058, "29780": 1057, "298": 1016, "29818": 1058, "29835": 1058, "29842": 1058, "298688": 275, "29869": 1058, "29880": 1058, "29884": 1058, "29898468": 232, "299": [138, 193, 357, 687, 1029], "299546e": 235, "29997": 1058, "2_": 1000, "2_000": 137, "2_2": [653, 654, 659, 660, 661, 662, 663, 667, 668, 669, 670, 679, 688, 689, 690, 691], "2_f": 659, "2_fro": [660, 669, 670, 691], "2_poli": 275, "2_y": 1010, "2c": [650, 659, 679, 680, 681, 682, 694, 1000], "2d": [2, 43, 69, 71, 74, 79, 82, 83, 84, 88, 96, 97, 120, 122, 124, 127, 133, 156, 187, 211, 218, 223, 237, 238, 239, 242, 244, 247, 248, 304, 334, 335, 342, 345, 364, 376, 378, 382, 391, 396, 414, 415, 419, 422, 424, 447, 458, 468, 470, 473, 487, 494, 496, 497, 499, 500, 501, 507, 508, 509, 511, 517, 521, 540, 548, 556, 591, 593, 642, 650, 664, 679, 698, 745, 786, 832, 836, 840, 878, 928, 931, 933, 937, 938, 954, 970, 993, 994, 1002, 1004, 1005, 1008, 1015, 1019, 1024, 1029, 1039, 1043, 1046, 1047, 1048, 1051, 1053, 1057], "2e": [203, 288, 290], "2e6": 1008, "2ec5ac": 319, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 81, 85, 87, 97, 99, 102, 117, 121, 126, 132, 150, 153, 157, 158, 167, 190, 191, 195, 198, 206, 208, 213, 217, 232, 233, 234, 235, 244, 248, 254, 269, 274, 278, 279, 281, 283, 284, 285, 289, 303, 304, 310, 317, 320, 328, 332, 345, 356, 357, 365, 415, 418, 421, 703, 835, 838], "2fbf01908075": 712, "2fx": 263, "2g": [239, 242, 704, 1050], "2h": 420, "2k": 185, "2l": [424, 629], "2n": [703, 1000, 1012], "2n_": 1004, "2nd": [95, 120, 182, 320, 414, 425, 450, 537, 1018, 1054], "2x": 1039, "2x2": [342, 414, 761], "2x_iy_i": 1000, "3": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 371, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 388, 394, 395, 396, 400, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 443, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 511, 512, 513, 514, 517, 519, 522, 523, 524, 525, 526, 528, 530, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 588, 589, 590, 591, 594, 595, 597, 598, 600, 601, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 624, 625, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 699, 700, 701, 703, 706, 707, 709, 710, 711, 712, 714, 716, 717, 720, 723, 724, 728, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 742, 743, 744, 748, 750, 751, 752, 753, 755, 757, 758, 759, 760, 761, 763, 764, 775, 776, 782, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 899, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 933, 934, 937, 938, 939, 943, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 970, 971, 973, 974, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1021, 1023, 1024, 1026, 1027, 1029, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1049, 1051, 1052, 1054, 1056, 1057], "30": [43, 47, 49, 54, 57, 70, 74, 75, 79, 89, 95, 105, 107, 111, 130, 137, 146, 150, 153, 157, 163, 172, 174, 175, 178, 191, 195, 197, 211, 215, 217, 235, 237, 238, 242, 249, 253, 254, 264, 269, 275, 280, 290, 292, 295, 304, 305, 319, 320, 321, 329, 330, 334, 335, 339, 343, 346, 348, 349, 364, 369, 377, 379, 380, 387, 388, 400, 406, 407, 418, 422, 425, 450, 456, 461, 462, 463, 507, 538, 542, 544, 545, 546, 548, 550, 552, 553, 577, 599, 602, 603, 605, 655, 699, 742, 790, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 892, 907, 920, 985, 997, 1002, 1008, 1009, 1011, 1016, 1039, 1040, 1046, 1047, 1048], "300": [43, 58, 59, 70, 73, 85, 93, 126, 137, 138, 139, 143, 186, 207, 232, 242, 244, 248, 264, 269, 278, 288, 305, 318, 326, 334, 349, 352, 449, 453, 454, 465, 467, 520, 646, 651, 652, 686, 697, 699, 701, 868, 927, 1004, 1029, 1049], "3000": [52, 99, 240, 903, 904], "30000": 377, "30001": 1058, "300343": 206, "30061": 548, "301": [415, 1022], "3015": 57, "30151134": 472, "302": [275, 634], "30258509": 424, "303": [54, 235, 642, 1029], "304": [172, 319, 364, 379], "3040": 151, "305": 388, "30506066": 202, "3053": [475, 480], "305438": 150, "306": [334, 634, 1029], "306012": 206, "30750": 414, "308": [245, 642, 1029], "30897646": 232, "309": [348, 1029], "30m": 377, "31": [43, 104, 112, 172, 235, 269, 300, 327, 334, 335, 411, 422, 507, 568, 569, 604, 656, 678, 686, 972, 1009, 1029, 1039], "3109306": 177, "311": 357, "312": [153, 186, 1029, 1042], "3121": 715, "313276e": 235, "315": [295, 357, 379], "316": [160, 179, 183, 618, 621, 632, 887, 1029], "31622776601683794": 163, "3164764": [217, 235], "317": 179, "31760": 1004, "318": [82, 283, 456, 1029], "318387": 311, "319": 175, "31958": 179, "31973683": 232, "31bit": 1050, "31st": [218, 890], "32": [43, 44, 52, 86, 121, 189, 192, 253, 283, 289, 328, 335, 376, 380, 387, 396, 411, 421, 422, 451, 571, 572, 589, 596, 641, 683, 890, 892, 937, 938, 972, 1016, 1018, 1039, 1042, 1045, 1047, 1048, 1051, 1052, 1053, 1056], "320": [77, 377, 997, 1022, 1029, 1039], "3204": 1045, "321301": 62, "322": [45, 357, 477, 478], "3221": [699, 1005], "323": 248, "323200": 62, "324": [59, 61, 377, 1029], "324084": 206, "3245": [699, 1005], "325198e": 235, "3252": 604, "32634568": 221, "3264": 46, "327": [63, 737], "3272984419327777": 360, "3273": 753, "327407": 258, "327605": 258, "32767": 1050, "32782448": 177, "3279": 46, "328": [156, 357, 737, 1029], "3288": 551, "329": 456, "329616": 206, "32987858": 572, "32bit": [2, 369, 972, 1057], "32x32": 379, "33": [43, 113, 217, 329, 335, 364, 377, 379, 387, 388, 414, 422, 467, 539, 644, 655, 719, 720, 736, 737, 745, 750, 790, 791, 794, 813, 835, 837, 839, 898, 922, 989, 1004, 1008, 1018, 1039, 1047], "330": 335, "331": [148, 1029], "331263": 206, "3315057": [833, 834], "3317": 217, "332": [357, 899], "333": [222, 853, 1029], "3333": 505, "333333": 235, "33333333": [861, 1018], "334": 177, "334795": 278, "335": 43, "335919": 311, "336": [153, 388, 1018], "336188": 311, "3367": 1046, "337": 388, "3375": 329, "338": [102, 254, 255, 1029], "3383": 46, "3384": 357, "3387": 357, "339": 357, "3397": [671, 692, 693], "33rd": [908, 1021], "34": [43, 150, 172, 174, 300, 313, 334, 335, 364, 379, 418, 527, 536, 577, 604, 656, 674, 723, 771, 1039], "340": [124, 250, 334, 356, 1029], "34118": 377, "34125758": 232, "3415": [671, 692, 693], "341523": 311, "3419": 278, "341949": 206, "342": 829, "34279478": 232, "343": [90, 1029], "3433": 46, "34346583": 88, "344": [137, 1029], "3445": 46, "345": [172, 379], "34545455": 1004, "3456": 46, "34586917": 232, "346": [421, 508, 562, 563], "3467": 622, "347": [317, 1029], "347717": 150, "34867495": 1009, "349": [137, 357, 388, 560], "34990341": 117, "35": [43, 45, 46, 48, 50, 90, 105, 139, 160, 190, 191, 197, 204, 244, 292, 320, 334, 335, 551, 655, 656, 663, 709, 713, 714, 734, 748, 763, 789, 796, 844, 997, 1004, 1008, 1014, 1015, 1018, 1039, 1041], "350": [151, 190, 1029], "351": [330, 1029], "351390": 275, "352": [195, 275, 388, 1029], "352124": 206, "35278655": 232, "3534": 57, "3539": 104, "354394": 150, "355": [125, 1029], "3551": 46, "355440": 275, "355445": 150, "356": 1016, "356497": 150, "3565178": 972, "357": [172, 357, 379, 507, 912], "3573": 834, "35776189065725783": 325, "3582": 46, "358295": 206, "358990": 206, "359": [66, 1029], "3591": 1048, "36": [43, 45, 46, 52, 53, 125, 126, 172, 180, 190, 235, 254, 348, 364, 379, 388, 421, 422, 562, 563, 577, 742, 766, 1008, 1039], "360": [137, 282, 357, 560, 1029], "360000": 311, "36047253": 232, "361": [377, 421, 562, 563], "362176": 329, "363": 52, "3635": 834, "364": [477, 478, 1040], "365": [416, 479], "3659": 1044, "366": 364, "367": [357, 421, 1039], "36787944": 1006, "368": [51, 1029], "3680": [618, 621, 632], "3684": 842, "36851234": 823, "368896": 62, "3690483151908911912247722318110": 52, "3696": 620, "3697": 857, "3697178": 52, "37": [43, 202, 278, 289, 334, 364, 377, 421, 531, 723, 891, 902, 1018, 1039], "370": [273, 1029], "370000e": 235, "370039": 206, "370738": 62, "372": 357, "37257991": 117, "373333": 278, "375": [88, 455, 757, 1008], "376": 1016, "37647423": 52, "376999": 62, "37741762": 133, "377eb8": [75, 79, 97, 98, 244], "378": [48, 190, 357, 421, 1029, 1039], "37815029": 232, "37845099": 365, "37967282": 1009, "379710": 190, "379763": 150, "38": [191, 208, 216, 221, 268, 284, 300, 330, 421, 639, 892, 954, 1008, 1018, 1039, 1040, 1041], "3800": 206, "3803": 358, "381327": 377, "382005": 150, "382120e": 235, "38353048": 232, "383973": 278, "384": [357, 703, 912], "3840": 1047, "384338": 206, "384616559": 391, "385000e": 235, "3854": [671, 672], "3855": 1028, "386": 887, "3862": 875, "38629436": 1018, "38690531511642143152471231333333107": 52, "387": [357, 1039], "387580e": 235, "387599": 52, "387830e": 235, "3889": 481, "3889873516666431": 52, "389": [600, 601], "3894": 622, "39": [43, 52, 172, 258, 269, 377, 379, 380, 386, 414, 422, 502, 902, 920, 956], "390": [104, 308, 1029], "3908844": 834, "391": 703, "3910350737": 391, "3911": 47, "3928": 476, "393": [70, 1029], "393297": 258, "39329747": 258, "394": [104, 133, 183, 1029], "3947": 1020, "395": [43, 231, 351, 1029], "39568399": 543, "396": [98, 104, 172, 379, 1029], "3964": [427, 481], "397": 377, "3972": 662, "398": [357, 654], "3986": 235, "399": [108, 150, 1029], "3996": 658, "3_": 1000, "3_poli": 275, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 376, "3d": [80, 83, 102, 120, 129, 214, 237, 239, 241, 364, 422, 513, 593, 928, 970, 1046, 1047, 1049], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 82, 83, 84, 93, 105, 107, 109, 118, 137, 144, 145, 153, 168, 172, 174, 175, 176, 178, 183, 189, 191, 192, 198, 202, 203, 209, 217, 219, 223, 232, 233, 235, 238, 248, 250, 273, 275, 276, 278, 281, 283, 286, 288, 295, 310, 332, 338, 356, 357, 358, 829, 836, 1016], "3k": 703, "3l": 424, "3llobo": 1054, "3m": 51, "3rd": [120, 182, 846, 889, 1010, 1018], "3ssnporch": 147, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 97, 99, 100, 101, 104, 105, 106, 107, 108, 114, 115, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 137, 138, 140, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 168, 172, 174, 177, 179, 180, 182, 183, 185, 186, 187, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 221, 223, 224, 225, 227, 230, 231, 235, 237, 244, 248, 249, 250, 251, 252, 253, 254, 256, 258, 260, 261, 262, 263, 265, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289, 290, 294, 295, 297, 299, 300, 301, 302, 305, 310, 312, 313, 315, 316, 318, 319, 321, 323, 324, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 342, 344, 345, 348, 349, 350, 352, 353, 354, 356, 357, 358, 364, 365, 370, 376, 377, 378, 379, 380, 382, 386, 387, 388, 391, 394, 395, 396, 400, 405, 406, 407, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 497, 503, 511, 519, 520, 523, 524, 525, 531, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 588, 589, 590, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 624, 625, 626, 629, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 684, 686, 687, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 705, 706, 709, 713, 714, 722, 723, 732, 733, 734, 739, 741, 749, 750, 751, 753, 754, 755, 756, 758, 759, 763, 775, 776, 788, 789, 795, 796, 797, 798, 801, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 837, 839, 840, 841, 842, 845, 846, 847, 848, 850, 855, 859, 860, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 898, 899, 903, 904, 905, 909, 911, 912, 915, 919, 920, 921, 922, 933, 934, 936, 937, 938, 939, 943, 954, 955, 956, 957, 959, 961, 962, 963, 964, 971, 978, 979, 980, 982, 983, 984, 985, 988, 989, 990, 997, 998, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1018, 1019, 1022, 1023, 1029, 1035, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1052, 1053, 1054, 1057], "40": [43, 54, 89, 101, 111, 120, 123, 154, 160, 174, 202, 208, 209, 211, 234, 239, 241, 252, 254, 264, 276, 301, 307, 312, 317, 334, 335, 343, 344, 346, 348, 350, 351, 364, 370, 377, 418, 452, 502, 524, 525, 806, 851, 852, 856, 868, 869, 997, 1009, 1018, 1039, 1040], "400": [44, 63, 85, 123, 152, 157, 174, 186, 223, 242, 287, 311, 357, 377, 419, 502], "4000": [94, 152, 263], "400000e": 235, "4017": 531, "4018260": 331, "402": 279, "402344": 388, "4025": 1044, "403": 279, "404": 235, "405": [144, 191], "40597": 294, "406": [696, 700, 1005], "4066": 46, "407": [172, 357, 379], "40842387": 51, "40887718": 92, "40945": 105, "4096": [123, 377, 419, 502], "40966": 376, "409717": 278, "41": [52, 106, 172, 217, 254, 364, 377, 379, 463, 475, 487, 499, 628, 631, 642, 653, 654, 659, 665, 667, 668, 669, 671, 688, 692, 693, 706, 788, 846, 1010, 1014, 1029], "41075698": 420, "41076071": 420, "41082": 44, "411": [87, 111, 190, 338, 416, 426, 479, 540, 1029], "4110": 482, "41187": 179, "412": [503, 1004], "412021": 150, "41214": [217, 235], "41215": 235, "412304": 206, "414": [235, 415, 733, 763, 887, 899, 1008], "41421356": [770, 776, 1011], "4143": 394, "414810": 258, "414912": 153, "415": 357, "416": [57, 746, 1008, 1029], "416010": 329, "41666667": 757, "41691605": 133, "417": 294, "41726413": 133, "41888636": 669, "419": 623, "4194": 379, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 67, 79, 81, 91, 111, 117, 121, 125, 130, 137, 144, 145, 147, 148, 150, 151, 153, 154, 158, 168, 169, 186, 190, 192, 193, 195, 197, 206, 209, 211, 212, 219, 223, 224, 225, 231, 232, 234, 237, 238, 239, 244, 249, 250, 251, 254, 257, 269, 274, 276, 279, 288, 289, 295, 301, 302, 303, 310, 315, 316, 317, 318, 320, 322, 324, 326, 328, 337, 343, 345, 356, 357, 365, 370, 387, 388, 396, 405, 414, 418, 421, 422, 425, 443, 450, 484, 494, 499, 518, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 534, 536, 538, 544, 551, 552, 553, 564, 565, 572, 573, 574, 575, 577, 612, 613, 614, 615, 616, 684, 701, 702, 703, 767, 799, 800, 804, 806, 809, 829, 835, 837, 851, 852, 856, 860, 863, 903, 904, 906, 907, 908, 918, 921, 922, 929, 940, 954, 972, 976, 1011, 1018, 1035, 1036, 1039], "42074": 321, "421": [266, 733, 763, 1008, 1029], "421087": 278, "42165": 147, "422": [600, 601, 733, 763, 1008], "4226193151": 52, "4232": [43, 52], "423641": 206, "424": [202, 235, 1029], "4242": [43, 52], "42425183539869415": 325, "425": [238, 622], "4254": [172, 379], "4260": [756, 759], "427": [172, 379, 513, 514, 590, 591, 594], "427329": 258, "4285714285714286": 1008, "429": [45, 218, 292, 357, 1029], "4294": 1045, "43": [172, 181, 214, 248, 275, 295, 379, 387, 807, 821, 892], "430": [426, 540], "431": [357, 379], "4310090": 776, "432": [154, 275, 360, 416, 1029], "4325": 57, "433": [269, 379], "43348936": 232, "4337": 1004, "434": [288, 1029], "43475": 885, "436": 248, "4362": 1044, "437362": 206, "438": [190, 1016], "43847489": 133, "43873": 358, "4387766": 52, "439": [138, 1029], "4394": 1047, "44": [43, 47, 52, 179, 190, 191, 202, 292, 299, 485, 788, 892, 912, 915, 990, 1008, 1015, 1039], "440": 190, "440409": 206, "4406": 479, "44063": 52, "4409": [43, 52], "44139186": 312, "4415": 57, "442": [115, 172, 182, 186, 379, 508, 1029], "4425765": [660, 670, 691], "44300751539296973": 52, "44300752": 52, "443238": 278, "44373091": 1009, "44381023": 221, "44412786": 543, "445": [269, 1016], "445978": 206, "446": [68, 275, 357, 733, 763, 1008, 1029], "447268": 89, "4472869": 133, "4474": 388, "4478": 1044, "448": 295, "4486": 551, "449": [44, 89, 419, 542, 1029], "4496": [43, 52], "4497": 1028, "45": [47, 75, 99, 107, 117, 121, 153, 168, 179, 192, 206, 217, 235, 282, 286, 287, 335, 345, 418, 421, 422, 571, 572, 634, 641, 653, 654, 659, 667, 668, 669, 688, 689, 690, 795, 804, 915, 998, 1008, 1016, 1026, 1035, 1039, 1042], "4500": 232, "45070924": 673, "451": 653, "45192": 163, "451933": 89, "452": [178, 180, 260, 1029], "453": [83, 364, 1029], "454": 183, "4544": 43, "455": 321, "4550": 376, "456": [44, 419, 542], "45612256": 667, "45663524": 667, "457": 622, "4576": 842, "458333315172": 52, "459": [171, 414, 448, 1029], "459074": 258, "46": [43, 52, 88, 217, 254, 365, 388, 600, 601, 689, 690, 723, 829, 915, 920, 1018, 1035], "460": [63, 1029], "46033": 503, "46043": 503, "46081961": 1009, "461": 388, "462": [178, 1029], "462234": 258, "463": [235, 292], "463088": 52, "46428631511221642143151251232633109": 52, "465660": 62, "465730": 206, "466": 1015, "4666": 641, "467": [335, 1029], "46779927": 51, "468": 93, "46858513287221654": 330, "46874778": [660, 670, 691], "469": [93, 101, 1029], "46915237": [660, 670, 691], "4694": 531, "469474": 206, "46958558": 668, "4697": 82, "47": [43, 213, 377, 500, 501, 542, 548], "471": 379, "47140": 414, "47236": [377, 504], "47330339": 422, "4738": 1044, "475": 137, "476": [281, 1029], "47668": 358, "478": [354, 1029], "478522": 206, "47885": 358, "4792": 235, "47922861": 258, "479229": 258, "47928": 358, "4794": 206, "4795": 206, "4796": 206, "4798": 206, "47985": 503, "47987268e": 199, "4799": 206, "48": [43, 47, 52, 77, 80, 117, 129, 153, 179, 258, 321, 379, 388, 414, 517, 604, 706, 753, 835, 846, 997, 1010, 1018, 1035], "480": [202, 357], "4801": 206, "4802": 206, "4803": 206, "4804": 206, "4805": 206, "4806": 206, "4807": 206, "4809": [206, 278], "481": [181, 357, 1029], "4810": 206, "4812": 46, "4815": 206, "48204257": 1009, "4828": 206, "483": 655, "4830": 206, "4831": [206, 662], "4832": 206, "4836": 206, "484": [183, 191, 1029], "4841": 206, "484109": 206, "4846": 206, "485": 703, "4852": 206, "4855": 206, "4857596147013469": 95, "486": [189, 219, 1029], "4860": 206, "4866": 206, "4867": 206, "4869": 206, "487": [52, 731], "4872": 206, "48736655": 674, "4874": 206, "4876": 206, "4880": 206, "4881": [206, 1044], "48841": 503, "48842": 503, "4885": 206, "48858": 388, "4888": 206, "4891": 206, "48938813e": 199, "4894": 206, "48979592": 455, "4898431": [377, 499], "49": [43, 47, 121, 172, 221, 254, 376, 377, 379, 387, 414, 456, 463, 720, 733, 763, 771, 800, 804, 807, 892, 1008, 1018, 1042], "490": [191, 269], "491": 703, "492": [269, 650, 1001], "4923": 656, "4928": 206, "493": [650, 911, 1001], "4936": 206, "4939": 1046, "494021": 499, "4948": 46, "495": [100, 1029], "4951": 660, "495761": 388, "49665188": 221, "4967": 531, "497": [250, 358], "4976": 604, "499": [172, 379, 388], "4995": 1045, "49999993": 1004, "4daf4a": [79, 97], "4dbd33": 121, "4e": 238, "4e9a06": [94, 99], "4eacc5": [94, 99], "4f": [46, 47, 57, 140, 149, 151, 232, 233, 235, 320, 918], "4i": 85, "4th": [172, 182, 379], "4x": [388, 1054, 1058], "4x11": 299, "4x4": [379, 419, 422], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 104, 105, 107, 108, 109, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 129, 130, 132, 135, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 167, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 223, 225, 228, 229, 230, 231, 232, 233, 235, 238, 239, 240, 242, 244, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 307, 308, 310, 311, 312, 313, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 337, 338, 339, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 365, 377, 378, 379, 380, 382, 386, 387, 388, 390, 394, 395, 396, 400, 406, 407, 408, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 429, 443, 444, 445, 446, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 475, 478, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 511, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 535, 538, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 559, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 589, 599, 600, 601, 604, 609, 611, 612, 613, 614, 615, 617, 620, 621, 622, 623, 626, 627, 629, 630, 632, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 648, 650, 653, 654, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 695, 696, 698, 699, 700, 702, 703, 704, 706, 710, 712, 714, 716, 719, 720, 725, 727, 728, 729, 730, 731, 733, 734, 735, 737, 739, 742, 745, 746, 747, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 776, 777, 785, 788, 789, 791, 792, 794, 795, 796, 797, 798, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 869, 870, 871, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 905, 911, 912, 913, 914, 915, 916, 917, 919, 921, 929, 933, 934, 937, 938, 942, 943, 953, 954, 955, 956, 957, 959, 961, 962, 970, 971, 976, 978, 979, 982, 983, 984, 985, 986, 987, 988, 997, 998, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1029, 1030, 1034, 1035, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1049, 1053, 1054, 1055, 1058], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 85, 87, 94, 95, 100, 101, 104, 105, 117, 121, 123, 126, 132, 137, 140, 143, 150, 153, 156, 157, 172, 175, 177, 178, 179, 180, 189, 190, 191, 198, 202, 212, 217, 220, 224, 225, 229, 231, 233, 235, 237, 241, 242, 247, 248, 250, 258, 269, 270, 275, 277, 278, 288, 295, 313, 315, 319, 326, 328, 335, 337, 339, 343, 351, 357, 377, 379, 382, 387, 402, 418, 421, 422, 423, 426, 448, 479, 485, 486, 507, 511, 528, 530, 533, 540, 546, 551, 560, 561, 576, 600, 601, 613, 615, 616, 622, 624, 665, 666, 673, 674, 675, 677, 683, 684, 685, 699, 720, 799, 807, 821, 840, 860, 911, 920, 1003, 1004, 1008, 1009, 1011, 1014, 1018, 1031, 1039, 1056], "500": [49, 58, 79, 85, 92, 95, 96, 98, 117, 118, 130, 132, 141, 143, 151, 171, 174, 195, 230, 231, 238, 255, 256, 260, 261, 265, 269, 275, 278, 288, 289, 295, 301, 307, 319, 325, 330, 331, 349, 354, 369, 421, 427, 475, 476, 480, 481, 482, 487, 488, 489, 490, 618, 620, 621, 623, 628, 631, 632, 657, 658, 661, 662, 663, 687, 689, 690, 869, 997, 1023, 1029], "5000": [91, 203, 232, 233, 235, 326, 892], "50000": 61, "500000": 311, "5000000": 55, "50000000": 177, "50000013": 1004, "500526": 153, "500x500": 548, "5012": 1045, "5016": [416, 427, 481], "5029": [416, 427, 481], "503": [69, 1029], "503452": 311, "5036": 1046, "504": [157, 1029], "504185": 311, "50447799": 1009, "505": [287, 836, 1029], "507": 415, "50755672": 472, "507943": 278, "5082": 1028, "509": [155, 1029], "50941682": 1009, "50_000": [322, 357], "50sampl": 402, "51": [61, 121, 179, 235, 292, 295, 414, 415, 773, 783, 788, 1004, 1035], "510": [47, 298, 1029], "51082562": 597, "512": 216, "512281": 265, "512595": 311, "51292546": 619, "513": [860, 1011], "513034": 311, "5131": [46, 1044], "51341712": 1006, "5141": 1045, "51462041": 856, "5149": 46, "515": 43, "515390": 388, "5166": 680, "5166646": 771, "517": [47, 163, 458, 468, 1029], "517272": 265, "5182": 1044, "5186": 1044, "519": 191, "5193": 46, "51958": 179, "51963999": 113, "52": [43, 126, 143, 179, 217, 538, 640, 804, 954, 1029, 1039], "520": [635, 860, 998, 1011], "52003279": 1009, "5208": 206, "521": 121, "52106591": 133, "5211": 1046, "5212": 206, "522": 912, "5224167": 52, "5229": 1046, "523": [183, 312, 531, 1029], "524": 52, "5243": 422, "52433293": 422, "5244": 206, "525": [445, 635, 998], "5251": 1045, "526": 911, "526599": 206, "5279": 1046, "5282": 1044, "52875032": 668, "5289": 46, "5291": 1045, "5295": 1046, "52955942": 856, "5299": 1045, "53": [43, 88, 254, 414, 421, 542, 548, 553, 799, 800], "530": 358, "5315170": 52, "5316": 356, "53284267": 258, "532843": 258, "533": [190, 208, 219, 1029], "5337": 1044, "534": 190, "5355": 1044, "5359": 1046, "536": [172, 179, 295], "5360": 1044, "53777511": 52, "53844117956": 771, "5395559": 232, "53959628e": 199, "54": [52, 172, 195, 202, 217, 220, 254, 377, 379, 414, 497, 1040, 1041], "54035582": 771, "541": [325, 458, 468, 1029], "5415": 1005, "5417": 235, "542": [172, 379], "5420": 551, "542052": 206, "54209": 163, "5425": 531, "543": 202, "5431": 1044, "543841": 206, "544": [128, 1029], "54434690031882": 107, "54488318": 391, "5460": 1045, "546068": 258, "54606834": 258, "54675220": 52, "5469": 379, "547": [300, 364, 1029], "5488135": 391, "549": 63, "5495": 1044, "54980": 548, "55": [121, 190, 195, 212, 217, 235, 239, 335, 387, 414, 418, 497, 604, 807, 813, 821, 835, 1008, 1039], "550": [269, 1029], "5500": [329, 695, 1005], "550213": 206, "55102041": 455, "5515": 753, "552": [276, 358, 1008, 1029], "55212743": 365, "5523": 1028, "55249": 604, "553": [174, 358, 1029], "55390036": 133, "554": [225, 233, 312], "5540": 1045, "55422893": 422, "555": 723, "5555555555555556": 283, "5557": 278, "5558": 46, "558": [249, 1029], "55800226": 232, "559": [81, 623, 1029], "5591": [696, 700, 1005], "55968825": 653, "56": [43, 52, 235, 239, 248, 338, 388, 653, 654, 659, 667, 668, 669, 688, 720, 742, 1008, 1018, 1035, 1039], "560": [217, 524, 525], "561": 414, "561464362648773": 95, "564": 217, "56479934": 365, "56485654": 133, "565": 275, "566": 217, "568": [180, 263, 313, 1029], "569": [172, 337, 379, 507, 599, 602, 603, 605], "5697": 1046, "56b4e9": 260, "57": [52, 174, 190, 233, 284, 313, 356, 379, 380, 400, 406, 407, 415, 712, 768, 788, 844, 1008, 1018, 1039], "570": [172, 379], "570655": 206, "5713": 670, "57142857": 728, "573": 422, "5732": 1046, "57320793": 422, "573491": 206, "574": [93, 541, 548], "5748": 501, "5749": [377, 500, 501], "575": [104, 217], "576": [123, 1029], "5762": 1045, "576989": 258, "577": [172, 379], "579": 531, "58": [101, 112, 239, 379, 416, 427, 481, 614, 771, 1018], "580": [357, 851, 852], "5804131": 133, "5805": 1045, "5807": 1011, "581": [183, 195, 1029], "581012": [377, 497], "5814": 1046, "58149261": 422, "58195950e": 199, "582": 912, "5828": [377, 500, 501], "583": [172, 414], "5833": [745, 1008], "583333315172": 52, "58364548": 1006, "5853": 1028, "5857": 1044, "5863": 388, "58667835e": 199, "586798": 206, "5871": 686, "5874": 1045, "5882004012129721": 95, "589715": 206, "59": [43, 195, 202, 235, 379, 388, 414, 415, 517, 829, 1008, 1035, 1039], "590": [238, 1029], "59122734": 674, "592": [618, 621, 632, 1015], "592373": 329, "5925110": 52, "5929": 1045, "593": 141, "594": [183, 217], "594754": 206, "59489497": 232, "595": 217, "5956": 1047, "596": [357, 723], "5960": 232, "5963": 1049, "597": 217, "598": [93, 130, 175, 548], "5981": 551, "598533": 206, "599": 687, "5991": 1046, "5_000": 195, "5a": 891, "5d": 47, "5e": [44, 123, 205, 602, 603, 605], "5e5": 217, "5f": [163, 328], "5m": 55, "5n_": 114, "5th": [52, 150, 153, 182, 414], "5x": 1056, "6": [0, 43, 45, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 81, 84, 85, 87, 91, 92, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 111, 112, 113, 115, 117, 120, 123, 125, 132, 138, 146, 150, 151, 153, 155, 157, 163, 167, 172, 174, 177, 179, 181, 182, 183, 185, 186, 190, 191, 193, 195, 197, 198, 199, 202, 206, 210, 215, 217, 218, 219, 221, 231, 235, 237, 238, 241, 244, 247, 248, 252, 255, 256, 260, 261, 262, 263, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 284, 285, 286, 287, 288, 294, 297, 300, 308, 310, 312, 313, 315, 317, 319, 320, 322, 324, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 345, 346, 348, 350, 352, 354, 356, 357, 358, 363, 364, 365, 376, 377, 379, 380, 382, 384, 386, 387, 388, 395, 400, 406, 407, 412, 414, 415, 418, 419, 421, 422, 423, 429, 434, 441, 448, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 471, 488, 489, 490, 491, 496, 498, 503, 512, 524, 531, 534, 537, 545, 547, 548, 552, 554, 560, 569, 570, 574, 575, 576, 577, 600, 601, 609, 611, 612, 613, 615, 618, 621, 622, 632, 634, 635, 637, 643, 644, 651, 652, 686, 696, 700, 706, 718, 723, 728, 735, 745, 749, 752, 753, 757, 758, 760, 776, 785, 792, 795, 797, 804, 805, 806, 808, 809, 814, 816, 817, 819, 824, 825, 828, 835, 836, 837, 838, 846, 847, 848, 850, 851, 852, 859, 861, 862, 863, 878, 879, 881, 884, 886, 889, 890, 894, 895, 908, 926, 933, 935, 937, 938, 949, 950, 954, 955, 956, 958, 961, 962, 970, 982, 985, 993, 996, 997, 998, 1002, 1004, 1005, 1008, 1018, 1019, 1022, 1023, 1024, 1031, 1035, 1037, 1040, 1041, 1042, 1045, 1047, 1052, 1056, 1057], "60": [43, 45, 94, 107, 115, 217, 229, 235, 237, 238, 258, 263, 283, 288, 335, 348, 356, 376, 414, 418, 456, 463, 720, 807, 1008, 1018, 1039, 1042], "600": [63, 85, 93, 148, 157, 158, 377, 687], "6000": [313, 634], "601052": 311, "601707": 206, "602": 233, "60244657": 856, "60276338": 391, "603": [98, 454], "604": [130, 191, 548], "606": [620, 841, 1009], "6072758064261095": 174, "607752": 150, "608": [284, 1029], "60809415": 669, "60834549": 92, "60836363e": 199, "609": [183, 388], "61": [114, 191, 235, 254, 376, 379, 388, 415, 464, 548, 567, 653, 654, 659, 667, 668, 669, 688, 720, 829, 956], "6101": 1046, "611": [273, 275, 548], "6114": 834, "6114326": 217, "6114327": 217, "6114328": 217, "6114329": 217, "6114330": 217, "611676": 206, "612": 797, "6121": 1045, "6126": 1046, "6147": 1044, "615": 83, "615373": 190, "616": [329, 358, 848, 1010, 1018, 1029], "61611719": 177, "617": [93, 278, 414, 776], "617050e": 235, "6173": 1045, "617715": 150, "6178": 1045, "618": [93, 141, 273, 1029], "6181": 1046, "6182": 1045, "618263": 206, "619": [98, 454], "619052": 377, "61958": 179, "6196": [278, 1044], "6198": 753, "62": [52, 191, 195, 235, 268, 329, 335, 365, 377, 500, 501, 851, 852, 1035, 1042], "620": [358, 505], "621": [93, 776], "621645": 206, "622": [93, 548], "62241605": 202, "622811": 150, "623": [114, 848, 1010, 1029], "6231": 1028, "6237": 235, "624": [237, 253, 1015, 1029], "625": [88, 197, 217, 318, 625, 715, 1029], "6250": 1046, "6258": 1044, "626": [84, 159, 203, 1029], "6261": 1048, "626286": 206, "627": [234, 1029], "62717609": 232, "62722912": 52, "62745778": 1009, "628": 357, "6282": 1045, "6284": 1028, "6288": 1046, "6291456": 88, "63": [45, 269, 379, 421, 564, 565, 572, 573, 653, 654, 659, 667, 668, 669, 688, 706, 733, 807, 821, 829, 921, 922, 1008], "630": 731, "63035731": 422, "630382": 329, "6312": 52, "632": 321, "6323": 1028, "6331": 43, "6332": 43, "63327171": 202, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 322, "63394388": 202, "635": [43, 623], "636": [202, 388], "63667341": 92, "6371000": 771, "6374": 1047, "6375861597263857": 953, "638": [357, 388], "638768": 89, "638843": 311, "63bit": 1050, "64": [43, 47, 52, 68, 83, 88, 93, 123, 179, 190, 238, 248, 249, 253, 273, 284, 299, 304, 369, 370, 379, 380, 388, 396, 400, 415, 419, 426, 502, 505, 509, 606, 607, 653, 665, 695, 696, 697, 698, 700, 912, 1011, 1035, 1039, 1041, 1047, 1048, 1051, 1052, 1053, 1056], "640": [142, 412, 496, 513, 514, 590, 591, 594, 997, 1029], "640000e": 235, "640770e": 235, "640880e": 235, "64185414": 673, "642": [301, 1029], "64236448": 543, "6424": 1028, "6425": 1028, "643": [273, 304, 1029], "644": [315, 338, 1029], "6440": 232, "64447187": 88, "645": 93, "6451": 1028, "6452": 1047, "646": 182, "6463": 1048, "647": 93, "6472": 1045, "6476": 531, "647689": 206, "648026": 150, "6497": 1045, "64_conda": 390, "64bit": 1039, "64x64": [123, 377, 419], "65": [43, 47, 69, 191, 217, 284, 321, 414, 445, 509, 524, 604, 706, 748, 799, 800, 829, 1015, 1039, 1040, 1041], "650": 412, "6505186632729437": 95, "6507": 1046, "651": 388, "652": [320, 357, 1029], "652739": 206, "653": [388, 618, 621, 632], "6545": 1051, "656": [276, 377], "6567": 858, "657": [258, 275], "6572": 858, "6573": 1046, "65799352e": 199, "658": [118, 310, 1029], "6586": 1045, "659": [277, 1029], "6599": 1028, "65e": 203, "66": [43, 241, 321, 379, 414, 431, 467, 539, 639, 719, 790, 791, 802, 890, 898, 989, 1008, 1020], "660": [250, 258, 1029], "660797": 258, "661086": 278, "6624": 1051, "662409": 206, "663": [905, 1016, 1020], "664": [172, 379], "665": [43, 311, 1029], "6650": 52, "6651": 1045, "666": [177, 233, 414, 853, 998, 1029], "6660": 1045, "6666": [745, 1008, 1045], "66666667": [736, 789, 861, 1018], "666667315174": 52, "6667": 1045, "66670169e": 199, "667": [727, 747, 1008], "667219": 150, "6689": 1047, "6691": 1045, "6697": 1045, "669930e": 235, "67": [81, 101, 190, 235, 379, 505, 523, 524, 525, 634, 674, 720, 821, 998, 1008, 1022, 1035, 1039], "670": [219, 269], "67048778": 331, "671": 1020, "6715": 1028, "67251877": 673, "673": [118, 357, 388], "67443065": 133, "67451144e": 199, "675": [174, 221, 357, 1029], "675318": 89, "676": 676, "6764": 1045, "678008": 217, "678009": 217, "678010": 217, "678011": 217, "678012": 217, "678013": [217, 235], "678359": 206, "679": [219, 911], "68": [43, 208, 254, 313, 334, 414, 484, 542, 548, 597, 692, 693, 1039], "681": [93, 388], "6817": 1045, "682": [93, 388, 1029], "6821": 47, "682880e": 235, "683980e": 235, "684": [105, 113], "6846": 1045, "6848": 1048, "685": [727, 747, 1008], "6852": 275, "6860": 149, "687": 1020, "6875": 723, "688": 113, "689015": 311, "689143": 311, "689751": 311, "69": [45, 208, 269, 320, 335, 414, 477, 478, 614, 615, 763, 1008, 1018], "690": 219, "6902": 1045, "691": 728, "6913": 1045, "692": 137, "692270e": 235, "692470": 311, "6929": 1028, "692901": 150, "693": 1008, "6931": 875, "69314718": [424, 619, 1018], "694": [278, 1029], "695": 273, "69513": 93, "6954": 1045, "69545": 93, "695740e": 235, "697": 183, "69735": 93, "698": [93, 269], "6984743": 177, "69892343": 221, "699691": 377, "69e": 183, "6d": 47, "6f": [55, 127, 280, 744, 802], "6ppm": 179, "6th": 182, "6x": 331, "7": [1, 2, 43, 44, 45, 47, 51, 52, 53, 54, 63, 66, 68, 69, 70, 74, 77, 79, 81, 88, 89, 90, 91, 95, 99, 100, 102, 105, 106, 108, 113, 115, 123, 126, 137, 140, 150, 152, 153, 154, 158, 159, 172, 183, 189, 190, 191, 193, 195, 199, 200, 216, 217, 218, 219, 224, 233, 235, 237, 239, 244, 249, 250, 256, 258, 260, 261, 264, 265, 269, 270, 275, 279, 281, 282, 286, 292, 294, 295, 297, 300, 301, 303, 312, 313, 315, 319, 324, 327, 328, 329, 331, 334, 335, 337, 338, 342, 349, 352, 353, 357, 358, 365, 377, 379, 380, 387, 388, 400, 406, 407, 412, 418, 419, 421, 422, 423, 425, 426, 429, 445, 450, 451, 454, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 473, 477, 478, 488, 489, 490, 491, 497, 503, 505, 539, 540, 541, 542, 543, 545, 547, 551, 568, 569, 595, 598, 607, 612, 613, 634, 635, 637, 644, 653, 654, 656, 659, 665, 666, 667, 668, 669, 680, 682, 688, 689, 690, 699, 706, 714, 716, 728, 730, 731, 733, 735, 751, 752, 753, 757, 758, 760, 789, 792, 797, 798, 801, 804, 806, 807, 808, 809, 810, 811, 814, 817, 821, 824, 825, 828, 834, 837, 841, 851, 852, 860, 869, 870, 871, 876, 883, 884, 906, 907, 954, 955, 958, 959, 962, 971, 976, 997, 998, 1003, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1018, 1022, 1023, 1035, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1052, 1057], "70": [43, 45, 50, 81, 101, 105, 107, 137, 191, 254, 260, 275, 335, 377, 379, 418, 500, 501, 689, 690, 720, 733, 763, 807, 821, 898, 997, 1018], "700": [85, 248, 269, 326, 1029], "7000": 235, "701": 93, "702266": 206, "703": [412, 520], "70359377": 202, "704": 356, "70432034": 117, "7049": 1045, "7049787496083262": 95, "706026": 206, "707": [183, 887, 899], "7071": 1047, "70763101": 88, "708": [545, 547, 554, 757], "70814003": 365, "7083": 1008, "708333315174": 52, "7089": 1046, "708mb": 356, "709": 276, "70x": 1056, "71": [43, 172, 221, 235, 379, 517, 737, 743, 773, 783, 1008, 1035, 1041], "710": 412, "7101": 1045, "714": [64, 326, 1029], "715": [53, 1029], "71518937": 391, "7152": 1045, "7154": 1045, "715413": 150, "7159": 1045, "716": 520, "7183202019610891": 325, "7187": 1045, "718747": 206, "7194": 1045, "72": [43, 45, 46, 52, 143, 177, 387, 829, 835], "7200": 656, "721": [545, 547, 554], "722128e": 235, "72295655": 117, "723": [93, 250], "723665": 289, "7239": 1045, "7242": 1028, "724702": 278, "7248": 1045, "725": [79, 1029], "7256": 642, "726": 1016, "7260": 1045, "7261": 1045, "726573": 190, "72667194": 1009, "727": 172, "727148206404819": 283, "72850319": 1009, "7295": 1045, "7298221281347037": 43, "73": [279, 335, 395, 487, 743, 807, 821, 857, 920, 1018, 1039, 1041], "7301": 1045, "730119e": 235, "731249e": 235, "7313": 46, "73153": 388, "732": 219, "7321432711315247203224138160467097": 52, "7323": 1045, "7325": 1045, "732913": 289, "733": 295, "7331": 1046, "7332": 915, "7336": 326, "7350": 1045, "7353": 1045, "7356": 1046, "7365": 1046, "73654189": 52, "737": [250, 531], "7376": 1046, "7382": 1028, "7387": 482, "7388": 1046, "739": [303, 1029], "739865e": 235, "739950": 289, "74": [43, 233, 334, 335, 379, 597, 701, 807, 821, 890, 1035], "7411": [475, 480, 1045], "7419": 1045, "742": [97, 1029], "743": 273, "74310541": 177, "7436926291700353": 212, "744": [273, 295], "744029": 289, "744042e": 235, "7441": 1046, "744497e": 235, "74495357": 202, "7459": 1046, "746": 379, "7464": 1046, "746492": 275, "748": [356, 388], "7490": [1045, 1046], "75": [43, 45, 46, 49, 52, 69, 79, 90, 115, 140, 169, 181, 182, 186, 190, 195, 197, 200, 208, 224, 235, 239, 258, 262, 263, 269, 275, 284, 300, 315, 327, 354, 356, 365, 455, 508, 558, 644, 665, 701, 713, 719, 741, 746, 747, 752, 760, 763, 801, 807, 889, 897, 901, 908, 924, 942, 943, 988, 1008, 1010, 1018, 1024, 1026, 1041], "750": [84, 90, 145, 275], "75000": 217, "7501": 1046, "750348": 150, "750389": 206, "7506": 1046, "752": 356, "752470": 289, "752867": 206, "753": [73, 152, 1029], "7532": 495, "7533": [427, 481, 1046], "75474165": 1009, "7548": 1046, "7548291": 331, "7553": 1045, "756": [139, 1029], "7565": 1046, "756687e": 235, "7567": 1046, "756746e": 235, "7569": 476, "757": [172, 273, 295, 379], "7573": 1046, "75747153": 221, "7578": [278, 1046], "75788833": 169, "757915": 289, "758": 356, "759": 295, "7593": 1045, "7594": 1045, "75949622": 221, "75th": [254, 889], "76": [43, 195, 217, 335, 356, 365, 379, 388, 784, 788, 871], "760": [43, 153], "7608": 1028, "761": [74, 294, 1029], "76195467e": 199, "7621951219512195": 258, "7632": 1045, "7638": 1004, "764": [728, 1008], "7646": 1028, "764779": 206, "765012": 329, "7655": 1046, "765671": 206, "7660": 1045, "7661": 1046, "7668": 1047, "7674": [531, 1046], "767498": 150, "7676": 1045, "768": [88, 332, 1029], "7680": 1045, "76823": 45, "7685": 1046, "769": [44, 217, 295, 1029], "76995": 377, "77": [43, 45, 79, 172, 195, 284, 335, 376, 379, 541, 714, 743, 782, 829], "770": 191, "77000": 217, "7702": 1046, "770926": 289, "772": [356, 730], "7721": 1046, "7723": 1046, "7724": 1045, "773": [275, 338, 655, 849], "77310": 377, "7732": 1045, "77322639": 117, "7738": 1047, "7739": 1046, "77426368": 51, "775": 57, "7750": 1045, "775047": 683, "775151": 683, "7756": 1045, "776": 203, "77630514": 422, "7768366": 1006, "777": 388, "7771": 1046, "77764": 410, "77777215": 117, "7786": 1045, "779": 356, "7794": 1046, "779751": 289, "7798": 915, "7799": 1045, "78": [43, 88, 195, 235, 284, 317, 335, 500, 501, 653, 654, 659, 660, 662, 667, 668, 669, 671, 672, 688, 692, 693, 807, 813, 829, 835, 1008, 1028], "780": 273, "7812": 1046, "781265": [377, 504], "7814": 1046, "7816": 52, "7819": [414, 1046], "782": [224, 1029], "7823": [1046, 1047], "7825": 1046, "7825594": 51, "7826": 379, "782755": 62, "7831": 356, "783149": 105, "7833": 481, "783392": 275, "7838": 1046, "784": 312, "7840": 89, "7849": 1046, "785063": 105, "78571427112143152472031331383346104": 52, "786": [88, 105], "786015": 105, "7863": 1046, "786432": 88, "78681467": 88, "7872": 1046, "7880": 1046, "7887550": 52, "788808": 329, "789": [168, 361, 421, 1029], "7894": [905, 1020], "79": [43, 45, 66, 68, 113, 114, 121, 126, 172, 195, 313, 335, 379, 387, 416, 480, 531, 604, 701, 829, 849, 1039, 1041], "790": [43, 104], "7906": [629, 656], "79064206": 617, "79084103": 365, "791": 183, "7914": 1046, "791667315161908911936472223112": 52, "79269019073225": 299, "7927845601690917": 322, "7929": [357, 1046], "793": [345, 1029], "7943": 1049, "7944": 1046, "7946": 1045, "795": [358, 655, 1029], "7954": 1046, "796": 150, "7970": 1046, "7971": 670, "7972": 561, "79769376": 117, "798": [105, 421], "7983": 1046, "798301": 258, "7986": 1046, "7986499491396734": 174, "798982054": 1008, "799": [183, 205, 357, 1029], "7990": 1046, "7998": 1046, "7_qbz5n2kfra8p0": 400, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 70, 72, 78, 79, 80, 83, 85, 88, 90, 95, 97, 99, 100, 104, 106, 108, 109, 114, 117, 120, 121, 123, 124, 126, 127, 128, 131, 133, 137, 140, 142, 143, 147, 149, 150, 152, 156, 159, 160, 163, 171, 172, 175, 177, 179, 180, 182, 183, 186, 189, 190, 191, 193, 195, 197, 198, 203, 205, 208, 211, 217, 218, 221, 225, 227, 233, 235, 237, 238, 239, 241, 242, 245, 249, 250, 252, 256, 257, 258, 260, 261, 262, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 285, 286, 292, 294, 297, 299, 303, 307, 310, 312, 313, 315, 317, 318, 319, 320, 321, 324, 329, 334, 335, 336, 338, 339, 342, 345, 349, 350, 351, 352, 353, 356, 357, 358, 363, 365, 370, 376, 377, 378, 379, 380, 382, 387, 388, 400, 408, 412, 414, 418, 419, 421, 422, 423, 425, 427, 445, 448, 449, 450, 453, 455, 456, 458, 461, 462, 463, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 493, 496, 503, 505, 509, 510, 521, 523, 538, 541, 545, 547, 550, 552, 554, 556, 557, 560, 562, 563, 572, 577, 589, 595, 596, 597, 598, 611, 612, 635, 636, 643, 644, 655, 665, 677, 683, 686, 696, 699, 700, 701, 702, 706, 709, 713, 714, 716, 717, 722, 728, 734, 735, 736, 748, 749, 752, 753, 757, 758, 760, 785, 789, 790, 792, 795, 796, 797, 798, 802, 804, 806, 808, 809, 814, 817, 824, 825, 828, 829, 830, 835, 837, 838, 840, 849, 851, 852, 858, 868, 869, 870, 876, 883, 890, 892, 908, 913, 916, 935, 937, 938, 953, 954, 955, 959, 976, 982, 983, 984, 985, 986, 987, 988, 997, 998, 1004, 1005, 1006, 1008, 1011, 1016, 1018, 1022, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1046, 1047, 1052, 1053, 1055, 1058], "80": [43, 45, 50, 64, 102, 114, 158, 165, 169, 180, 191, 197, 252, 317, 321, 334, 348, 350, 356, 362, 365, 377, 379, 382, 412, 418, 423, 425, 450, 485, 517, 548, 720, 807, 821, 829, 892, 905, 924, 997, 1003, 1004, 1008, 1015, 1021, 1024], "800": [85, 327, 377, 591, 699], "8000": [235, 278, 279], "800000011920929": 364, "8000184677460305": 322, "8002": 1046, "8003": 1047, "8005": 1046, "8006": 1046, "8010": 1046, "801770e": 235, "802": [46, 172, 379], "8022": [46, 479, 1048], "802601": 206, "8028": 1046, "803483": 150, "803882e": 235, "804": [149, 1029], "8040": 1045, "804414": [377, 504], "805": [158, 219, 1029], "8053": 1046, "8059798": 202, "806": 656, "8061": 1046, "8065": 1046, "8066": 1047, "8068": 1046, "807": [273, 275], "8075": 1047, "8086": [626, 1046], "8087": 1046, "8093": 1046, "8094": 1046, "80956739": 1009, "80_000": 142, "81": [43, 85, 258, 334, 335, 414, 706, 768, 795, 807, 821, 838, 1008, 1009, 1011, 1018], "810": [192, 836], "8100": 1028, "8102": 1047, "810596": 377, "811": [199, 1029], "8117": 1046, "8120": 1046, "8125": 728, "812526": 206, "8129": 1047, "8133333333333334": 306, "81355169": 422, "8137": 1046, "8139": 1046, "814": 192, "815476315189119122164721021826110": 52, "8157": 1028, "8159": 1046, "816": [276, 477, 478], "8160": 1046, "8174": 1046, "817724": 206, "8181": 1046, "819": 422, "8190": 1047, "81940995": 422, "8198": 1046, "82": [43, 66, 88, 93, 146, 169, 220, 254, 306, 334, 795, 807, 821, 954, 1008, 1011, 1039], "820": [43, 52, 851, 852], "820705": 206, "8216": 1048, "822": 797, "822097": 190, "8224": 1046, "8225220806196525": 212, "823": 295, "8243": 1028, "825": [357, 757, 1029], "8251": 1046, "8253": 233, "8259": 1046, "827917": 150, "828": 295, "8282": 1046, "829429": 265, "8295": 1046, "83": [45, 66, 70, 74, 81, 334, 379, 701, 714, 793, 927, 1003, 1008, 1042], "830000": 311, "8306": 1046, "8316": 1046, "832": [192, 421, 562, 563], "83236428": 422, "83281226": [851, 852], "8333": 505, "83333": 771, "833333": 190, "8335": 1046, "834": [241, 338, 1029], "834310": 206, "8344": 1046, "8345": 604, "8353": 46, "8354": [629, 1046], "83548752": 617, "8355": 1045, "8361": 1047, "836224": 62, "8363": 1046, "8370": 1028, "8377": 1046, "83816048": 653, "83822343": 1006, "83833": 388, "8387": 842, "839": 687, "84": [43, 45, 47, 104, 169, 208, 235, 317, 334, 365, 379, 421, 422, 795, 821, 1008, 1018], "840": 388, "84000": 217, "840000": 311, "8407": 104, "84077985": 202, "841": 105, "84127814": 673, "84253": 1009, "844": [421, 562, 563], "8446": 1046, "8449": 1046, "847222222222214": 212, "8473": 422, "8478": 1048, "8480": 1028, "8481": 1046, "8484": 1047, "848743": 62, "849": [52, 153, 1029], "849835": 89, "85": [45, 47, 55, 68, 85, 90, 104, 126, 169, 232, 235, 286, 313, 335, 365, 421, 445, 505, 507, 562, 563, 604, 659, 665, 752, 760, 795, 807, 835, 1008, 1009, 1039], "850000": 311, "850031": 206, "8508": 1048, "851": 275, "8512": 1046, "8513": 626, "851348": 62, "8515": [422, 1046], "85151335": 422, "851792": 62, "85253229": 92, "852774": 150, "853174": 62, "853846": 206, "854": 273, "85418642": 365, "8549": 1046, "855": 47, "8554": 1047, "855465": 311, "857": [276, 357], "857400": 62, "858486250088675": 322, "85857475": 133, "8586": 1046, "859007": 62, "8591": 1046, "86": [47, 52, 68, 104, 169, 208, 317, 334, 335, 413, 795, 919, 1008], "860000": 311, "861": [172, 379, 795, 796, 1008], "861053": 62, "861106": 62, "8614": 1028, "861533": 62, "8617": 1047, "861868": 62, "8626621": 331, "8628": 642, "864": [339, 1029], "8640": 191, "865400": 62, "866": 1016, "866161": 62, "866571": 62, "867": 108, "8672": 1046, "8676": [627, 1046], "8678": 630, "868": [150, 168], "868443": 50, "8698": 1046, "87": [45, 68, 104, 183, 269, 273, 335, 604, 674, 784, 795, 807, 829, 887, 899, 1008], "870": [172, 379], "871": [73, 113, 114, 416, 480], "871277": 62, "871965": 62, "872": [73, 1016], "8720": [563, 1047], "872186": 62, "873": [172, 379], "873724": 62, "87382323": 669, "874": [107, 795, 796, 1008], "87421f": 121, "874771": 150, "875": [88, 175, 676], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 177, "8768": 1046, "8769": 1048, "877": [47, 273], "877206": 273, "8773": 1048, "877981": 62, "878": 47, "878051": 206, "878964": 819, "879": [242, 1029], "87mb": 356, "88": [43, 45, 68, 208, 221, 274, 313, 332, 334, 335, 360, 377, 379, 382, 413, 416, 479, 653, 654, 659, 667, 668, 669, 688, 871, 954, 1039], "880": [43, 91, 1029], "880191": 206, "880298": 206, "88089948": 422, "88096009": 133, "881": [130, 206, 1029], "882": [275, 319, 1029], "88213": 377, "882561": 275, "883": 84, "883065": 62, "8833": 505, "8835": 1046, "884": [288, 295], "8845": 1046, "885": [47, 172, 338, 379], "8854": 1046, "886": [144, 1029], "8874": 1046, "8878": 842, "8880": 627, "8881": 630, "889": [273, 443], "88978285": 1009, "89": [43, 68, 179, 208, 334, 335, 990, 1003, 1008, 1018, 1039, 1042, 1050], "890": 273, "891": 47, "8922": 1046, "893055": 206, "8931": 1046, "8936": 1046, "894264": 258, "8947": 921, "8948018": 52, "89483932": 1006, "8948621": 1009, "896": 655, "8963": 278, "8965": 421, "8973": 1046, "89856": 819, "899": [68, 273], "8992": 1046, "8995": 1046, "8pt": 1018, "8x8": [68, 208, 248, 304, 313, 379, 509], "9": [43, 46, 48, 51, 52, 53, 61, 63, 64, 67, 68, 70, 77, 79, 85, 90, 93, 97, 99, 108, 115, 117, 146, 147, 149, 150, 151, 156, 158, 164, 165, 172, 177, 181, 186, 189, 190, 191, 193, 199, 200, 208, 217, 230, 231, 234, 235, 237, 240, 248, 249, 258, 260, 261, 262, 263, 268, 269, 273, 278, 282, 284, 288, 294, 297, 299, 300, 303, 304, 305, 310, 311, 313, 315, 317, 318, 319, 321, 322, 324, 329, 330, 332, 334, 335, 337, 338, 339, 345, 349, 354, 365, 379, 380, 388, 395, 400, 406, 407, 412, 413, 415, 416, 418, 421, 422, 445, 449, 456, 463, 469, 488, 489, 490, 491, 496, 503, 505, 523, 525, 527, 534, 541, 545, 546, 547, 554, 567, 574, 577, 590, 598, 611, 612, 614, 615, 634, 637, 641, 644, 646, 653, 654, 659, 665, 667, 668, 669, 688, 689, 690, 694, 699, 706, 716, 730, 733, 748, 755, 776, 785, 786, 787, 804, 806, 808, 810, 811, 825, 828, 829, 835, 837, 840, 848, 849, 853, 854, 859, 862, 868, 869, 877, 883, 886, 954, 955, 959, 980, 997, 1003, 1004, 1008, 1012, 1018, 1022, 1023, 1035, 1037, 1040, 1041, 1042, 1044, 1053, 1055], "90": [45, 49, 52, 54, 68, 108, 132, 133, 149, 150, 151, 153, 169, 179, 193, 198, 208, 214, 216, 219, 224, 235, 260, 284, 286, 317, 321, 330, 334, 335, 365, 369, 382, 388, 418, 570, 788, 807, 835, 840, 892, 1003, 1008, 1035, 1054, 1055], "900": [47, 85, 108, 109], "9000": 235, "900000e": 235, "9010": 1045, "9012": 1047, "9015": [670, 1047], "9019": 1046, "9022": 1046, "9024": 1046, "9026666666666666": 150, "903": 47, "904": [191, 273, 415], "9041": 1047, "9043": 1047, "9044": [275, 1046], "90453403": 472, "904556e": 235, "904558e": 235, "904747e": 235, "904751e": 235, "905": 273, "905206": 89, "9067": 1046, "9069": 1048, "907": [353, 1029], "9078": 1046, "908": [174, 1008], "90809432": 133, "9085": 1047, "9087": 1053, "90885631": 88, "909": [47, 49, 1029], "909293": 311, "909909": 150, "91": [45, 68, 86, 179, 313, 334, 335, 421, 1003, 1035], "910": 43, "9100": 1046, "9101": 1047, "9105": 1046, "9108": 1046, "912": 73, "912632": 311, "913": [421, 566], "914370e": 235, "914387e": 235, "9144057": 52, "9145": 1046, "914538e": 235, "914573e": 235, "9147": 1047, "9149": 1045, "915": 47, "9151": 1047, "9157": 1047, "916": [46, 84, 1029], "91629073": 597, "916555e": 235, "9167": 329, "917": [84, 364], "917281": 150, "9173": 1028, "917618e": 235, "919": 269, "92": [52, 68, 85, 126, 169, 195, 273, 313, 334, 335, 345, 377, 379, 545, 547, 554, 569, 604, 703, 807, 821, 829, 1003], "9202": 151, "9206": 1046, "9219": 1046, "9221": 656, "9222": 1047, "9226260871125187": 283, "923223": 819, "92329566": 133, "9234": 1047, "9239": 1046, "924": 47, "92461872": 131, "925": 1008, "9250": 1049, "92529176": 1009, "9257": 1047, "9259": 1046, "9266666666666666": 146, "927": 443, "9274": 1049, "9277": 1046, "9278": 1046, "928": [78, 114, 143, 443, 1029], "9283876009146064": 331, "9284": 1046, "928571": 235, "9288": 1049, "9289": 1046, "93": [45, 57, 68, 172, 217, 258, 273, 335, 356, 379, 653, 654, 659, 667, 668, 669, 688, 784, 795, 807, 829, 835, 919, 1003, 1008], "9300": 275, "930000": 311, "9302": 1046, "9304": 1047, "932": 47, "9326": 1028, "93271427": 177, "933": [47, 108, 418], "933197": 258, "933253": 150, "9333": 418, "933333": [164, 860], "935": [175, 1029, 1046], "9354": 1047, "936": [47, 72, 443, 1008, 1029], "936480": 62, "9372": 1047, "937443": 62, "937532": 62, "937597": 62, "9378": 1047, "938": [47, 213, 792, 1008], "938613": 62, "939": 675, "9399": 1047, "93fletcher": 1004, "93goldfarb": 1004, "93lindenstrauss_lemma": 905, "93shanno_algorithm": 1004, "94": [43, 68, 70, 89, 125, 146, 216, 252, 317, 334, 335, 413, 421, 670, 795, 829, 1003, 1008, 1009, 1018, 1039], "940": 43, "9400": 275, "940000": 311, "940184": 150, "940201": 62, "940374": 62, "9403917": 117, "941": 47, "94114649": [851, 852], "9416": 52, "9417": 678, "9431": 842, "944": 47, "945": 54, "9456": 1047, "94592424": 669, "946": [114, 328, 1029], "94731329": 674, "9473684210526315": 324, "947958": 997, "948": [792, 1008], "9484": 1047, "949": 47, "9490": 379, "9492": 1047, "9497": 1047, "9499": 645, "95": [45, 52, 54, 68, 79, 87, 92, 102, 129, 146, 150, 153, 181, 190, 197, 217, 219, 224, 235, 262, 263, 266, 275, 276, 300, 308, 317, 321, 328, 335, 345, 365, 421, 534, 639, 640, 643, 654, 668, 755, 829, 908, 1004, 1008, 1009, 1021, 1042], "950": [47, 248], "950000047683716": 364, "9502547": 202, "9507": 1046, "9515": 1047, "951751e": 235, "951958": 997, "952": [47, 84], "9521": 1047, "952289": 206, "9524": 1047, "953": [47, 84, 161, 1029], "953061": 312, "9532628205128205": 324, "95373": 377, "954": [887, 899], "95433992": 117, "955": [295, 418, 661], "9558": 1046, "955989": 997, "956": 47, "956038": 311, "9565": 379, "9569": 1047, "957": [47, 320, 735, 1008], "9579": 1047, "958": 47, "9583": 413, "9584": [634, 1046], "959": [887, 899], "9593": 1046, "9595": 681, "9597": 1049, "9599": 1047, "95th": [52, 150, 153, 755], "96": [43, 52, 68, 83, 97, 181, 244, 254, 273, 313, 317, 320, 321, 334, 335, 379, 418, 560, 689, 690, 718, 829, 997, 1003, 1008, 1018, 1039], "9600": 1046, "9604": 1046, "961": 868, "961009": 997, "961111": 164, "9612": 1047, "961904": 860, "96190476": 1011, "962": 47, "96228895": 133, "9623": 1046, "9630": 682, "964": 191, "9641": 1046, "9647": 1047, "965": [47, 1008], "9655": 1047, "9656": 1047, "966": 45, "9666": 550, "966981": 206, "967": [108, 337, 1008, 1012, 1029], "9677": 1046, "968": [179, 189, 273], "9681": 1047, "9686": 1047, "969": 376, "9693": 1046, "9694898472080092": 330, "9697": 1046, "97": [68, 132, 172, 193, 252, 266, 335, 345, 379, 388, 395, 418, 653, 654, 659, 665, 667, 668, 669, 688, 689, 690, 1003, 1009, 1018, 1039], "970": [286, 1029], "9701": 1047, "9707": 1047, "9711": 1046, "9717": 1046, "9723": 1047, "9726": 1047, "973": [357, 418], "9731": 1047, "9733": [627, 630], "973554": 329, "973770": 206, "974": 364, "974e": 422, "975": [172, 189, 223, 1023, 1029], "9750": 1046, "97545464": 258, "975455": 258, "9759": 47, "976": [209, 283], "976158": 377, "977": [43, 418], "9771": 561, "9772": 1047, "9775": 1047, "977890": 265, "9781605585161": 414, "978444": 311, "9786": 1047, "9788": 1046, "98": [68, 77, 79, 89, 97, 99, 115, 126, 172, 244, 273, 310, 317, 335, 379, 418, 421, 666, 846, 902, 1003, 1008, 1010], "980000": 311, "9802": 1046, "981": [172, 379, 1008], "9815": 1046, "9816": 1047, "9821": 857, "983": 735, "9830": 1046, "9832": 1047, "9833": 505, "98350372e": 199, "983667": 997, "9837": 1047, "9843": 1052, "9847": 1046, "984ea3": [79, 97], "9850": 217, "9851": 1047, "9858": 1047, "98633022": 133, "986429": 312, "9865": 1046, "9866": [617, 626, 629], "9866666666666667": 146, "9868": [905, 1020], "986989": 278, "987": [283, 357], "9875": 1047, "98809919e": 199, "9884": 686, "9885": 678, "9886": 1047, "989341": 206, "98mb": 356, "99": [45, 52, 62, 68, 79, 86, 97, 123, 235, 244, 248, 254, 260, 262, 273, 276, 283, 315, 335, 370, 375, 379, 418, 421, 422, 499, 654, 668, 678, 689, 690, 795, 829, 858, 976, 1003, 1008, 1018, 1022, 1034, 1041], "990": [676, 1008], "9900": 235, "9907": 1048, "9908": 1047, "991": [283, 1008], "991584977345022": 174, "991653": 311, "9922": 1046, "9924": 548, "99244": 548, "992766": 311, "993": 283, "9933333333333333": 146, "9935": 842, "993879": 311, "9939": 1047, "993919": 50, "994": 295, "9945": 1046, "995": [209, 358], "9951": 1049, "996": [274, 1029], "9969977": 52, "997": [46, 75, 172], "9978": 1052, "9979": 43, "9979281": 52, "998": [172, 279, 1012, 1029], "9980": [43, 1047], "9981": 43, "998142": 52, "998273": 269, "9987": 646, "99891212e": 199, "999": [235, 269, 275, 421, 724, 868, 869], "9990": 235, "9991": [671, 672, 1047], "99918858": 133, "9993": [43, 660, 662, 1047], "9994": 670, "9995": 43, "9996": 658, "999791942438998": 325, "9998": [50, 308], "9999": [50, 235, 308, 337, 505, 634, 1047], "99999": 337, "999999": [79, 97], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 81, 83, 84, 88, 89, 94, 95, 96, 97, 99, 102, 109, 111, 114, 118, 121, 124, 125, 126, 138, 139, 144, 145, 147, 157, 161, 163, 164, 165, 169, 171, 174, 177, 179, 181, 182, 183, 187, 190, 191, 202, 204, 218, 221, 227, 231, 232, 235, 238, 251, 254, 263, 269, 275, 276, 278, 282, 290, 292, 310, 315, 317, 320, 324, 326, 329, 335, 336, 337, 339, 345, 349, 350, 356, 357, 358, 362, 364, 365, 369, 371, 376, 377, 379, 380, 382, 384, 385, 386, 387, 390, 394, 395, 396, 397, 399, 405, 409, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 496, 497, 499, 501, 504, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 527, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614, 615, 617, 618, 624, 627, 634, 635, 636, 637, 639, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 711, 712, 717, 718, 719, 723, 724, 726, 728, 729, 730, 731, 732, 733, 738, 743, 744, 747, 749, 750, 751, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 771, 773, 774, 781, 782, 783, 784, 785, 788, 795, 797, 798, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 953, 954, 955, 963, 964, 966, 967, 992, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1034, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "AND": 742, "AS": 426, "AT": [2, 377, 502], "And": [52, 187, 236, 237, 242, 251, 275, 356, 390, 408, 414, 418, 422, 537, 595, 596, 598, 699, 700, 1004, 1008, 1029, 1046], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 88, 90, 92, 93, 101, 115, 118, 128, 137, 138, 144, 147, 148, 149, 151, 153, 157, 167, 170, 174, 179, 180, 186, 190, 192, 193, 195, 197, 200, 202, 206, 208, 217, 221, 225, 235, 242, 251, 263, 269, 270, 272, 273, 275, 276, 278, 294, 300, 316, 327, 332, 337, 345, 349, 357, 358, 360, 362, 363, 365, 369, 370, 377, 381, 382, 384, 387, 394, 395, 396, 408, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 452, 500, 561, 569, 573, 626, 639, 662, 663, 679, 681, 694, 742, 765, 771, 853, 854, 855, 857, 859, 890, 997, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1018, 1022, 1023, 1024, 1027, 1028, 1032, 1039, 1045, 1050, 1055, 1057], "At": [52, 109, 137, 222, 251, 269, 287, 292, 294, 334, 337, 369, 370, 386, 397, 405, 410, 417, 421, 443, 446, 471, 595, 596, 598, 609, 839, 841, 878, 971, 997, 1004, 1007, 1009, 1013, 1022, 1032], "Be": [169, 183, 356, 382, 416, 574, 575, 655, 661, 662, 663, 665, 666, 676, 687, 711, 825, 826, 886, 1018, 1036, 1040], "Being": [382, 396, 397, 1004, 1011], "But": [43, 48, 88, 189, 218, 219, 275, 295, 315, 382, 394, 414, 417, 420, 421, 468, 753, 919, 920, 997, 1008, 1023, 1028], "By": [57, 80, 123, 153, 154, 155, 197, 221, 251, 269, 284, 292, 315, 324, 330, 331, 349, 356, 370, 382, 384, 388, 389, 396, 405, 413, 414, 415, 417, 418, 419, 420, 421, 423, 444, 447, 451, 452, 456, 470, 473, 474, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 531, 556, 557, 564, 565, 566, 567, 571, 572, 592, 593, 595, 596, 598, 613, 616, 639, 640, 678, 680, 682, 684, 697, 699, 701, 704, 706, 707, 709, 710, 725, 736, 737, 741, 745, 790, 791, 794, 801, 803, 810, 811, 857, 871, 872, 884, 885, 887, 889, 899, 901, 909, 914, 915, 919, 920, 921, 922, 937, 938, 997, 998, 1000, 1004, 1008, 1015, 1016, 1018, 1020, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1056, 1057], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 81, 83, 84, 88, 90, 92, 93, 95, 102, 107, 113, 118, 124, 140, 142, 145, 150, 151, 153, 154, 156, 168, 169, 172, 174, 176, 181, 185, 186, 190, 191, 202, 204, 206, 217, 218, 221, 222, 225, 234, 235, 237, 239, 242, 244, 245, 247, 248, 249, 251, 258, 265, 269, 272, 275, 276, 282, 289, 294, 295, 305, 310, 312, 313, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 339, 345, 347, 349, 352, 356, 357, 358, 360, 361, 364, 365, 369, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 405, 410, 411, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 430, 437, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 477, 478, 480, 488, 489, 490, 491, 495, 501, 503, 505, 510, 521, 522, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 588, 589, 590, 591, 595, 596, 598, 599, 600, 601, 604, 609, 614, 615, 616, 617, 618, 621, 626, 629, 630, 634, 635, 636, 637, 638, 639, 640, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 695, 696, 697, 699, 700, 702, 708, 711, 713, 714, 736, 737, 745, 748, 770, 776, 785, 790, 791, 794, 795, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 937, 943, 960, 970, 991, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1026, 1031, 1032, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "If": [0, 43, 50, 52, 64, 68, 77, 84, 90, 105, 115, 126, 135, 145, 150, 153, 158, 183, 186, 190, 199, 217, 232, 234, 235, 251, 254, 258, 269, 275, 282, 289, 300, 308, 315, 320, 321, 345, 349, 352, 353, 356, 357, 358, 364, 365, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 396, 397, 400, 405, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 435, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 521, 522, 526, 529, 530, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 718, 719, 720, 721, 723, 724, 725, 729, 733, 734, 735, 736, 737, 738, 739, 743, 745, 748, 752, 753, 755, 760, 761, 762, 763, 764, 765, 766, 768, 770, 771, 773, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 819, 821, 824, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 932, 933, 935, 936, 937, 938, 940, 941, 942, 943, 944, 947, 953, 955, 957, 959, 964, 966, 970, 973, 976, 978, 981, 982, 988, 991, 992, 993, 994, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1039, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1055, 1057], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 83, 84, 88, 90, 92, 93, 95, 101, 102, 105, 106, 108, 109, 111, 113, 114, 115, 118, 120, 123, 125, 128, 130, 131, 135, 137, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 158, 161, 168, 169, 171, 172, 174, 178, 179, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 205, 206, 208, 212, 217, 218, 219, 220, 221, 222, 225, 234, 235, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 263, 265, 268, 269, 272, 273, 275, 276, 277, 278, 280, 281, 284, 285, 287, 288, 289, 290, 292, 295, 298, 301, 302, 304, 313, 315, 316, 317, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 336, 338, 345, 349, 352, 356, 357, 358, 360, 364, 365, 369, 370, 371, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 394, 395, 396, 397, 399, 400, 401, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 443, 446, 447, 448, 449, 450, 453, 454, 455, 458, 468, 469, 470, 475, 478, 481, 500, 503, 510, 515, 516, 518, 530, 541, 543, 545, 547, 548, 549, 551, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 598, 609, 613, 616, 617, 618, 637, 639, 640, 641, 643, 650, 651, 652, 654, 655, 656, 658, 660, 662, 665, 666, 668, 670, 672, 673, 675, 676, 681, 682, 683, 686, 687, 691, 692, 693, 703, 706, 710, 719, 725, 727, 733, 735, 736, 741, 742, 745, 747, 749, 761, 763, 764, 788, 790, 792, 795, 801, 803, 804, 805, 806, 807, 810, 811, 813, 821, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 854, 855, 857, 858, 859, 861, 862, 863, 868, 876, 878, 884, 885, 889, 890, 892, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 916, 919, 921, 926, 936, 938, 955, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1032, 1036, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "Ines": 1056, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 88, 90, 93, 106, 111, 113, 115, 123, 126, 127, 132, 137, 140, 142, 143, 146, 148, 150, 158, 172, 179, 180, 181, 185, 186, 190, 191, 192, 198, 202, 204, 206, 214, 217, 221, 231, 234, 235, 237, 238, 244, 249, 251, 254, 269, 270, 271, 273, 275, 276, 278, 281, 282, 289, 292, 295, 301, 302, 303, 305, 306, 308, 315, 319, 320, 322, 324, 330, 332, 341, 345, 349, 352, 356, 357, 358, 365, 369, 370, 371, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 390, 391, 394, 395, 396, 397, 400, 405, 408, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 443, 444, 447, 448, 449, 450, 451, 453, 454, 455, 458, 465, 468, 470, 473, 474, 475, 480, 484, 491, 493, 503, 515, 522, 531, 540, 542, 543, 545, 547, 548, 556, 557, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 596, 603, 609, 613, 614, 615, 618, 621, 622, 626, 627, 629, 630, 634, 637, 638, 639, 640, 648, 649, 650, 653, 654, 657, 659, 660, 661, 662, 665, 667, 668, 669, 670, 673, 674, 675, 677, 678, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 694, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 711, 715, 716, 717, 723, 730, 741, 749, 750, 754, 765, 766, 769, 772, 788, 790, 795, 806, 807, 810, 811, 813, 819, 820, 821, 829, 830, 832, 835, 838, 847, 848, 853, 854, 855, 857, 860, 861, 862, 863, 867, 868, 869, 873, 874, 875, 879, 880, 881, 885, 888, 890, 900, 903, 904, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 928, 932, 941, 955, 964, 978, 981, 983, 984, 985, 986, 987, 988, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1027, 1032, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "Its": [111, 273, 277, 378, 396, 419, 424, 545, 928, 1003, 1004, 1013, 1016, 1022, 1027, 1032, 1042, 1056], "NOT": [251, 301, 379, 385, 570, 817, 851, 852], "Nearness": 634, "No": [61, 152, 202, 223, 225, 245, 251, 269, 335, 352, 379, 390, 400, 408, 414, 480, 566, 567, 597, 598, 642, 652, 671, 683, 685, 692, 693, 804, 1004, 1056], "Not": [90, 163, 191, 369, 394, 408, 414, 432, 433, 436, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 475, 476, 477, 478, 479, 480, 481, 482, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 570, 573, 576, 577, 588, 589, 590, 595, 596, 598, 634, 635, 636, 637, 684, 695, 696, 697, 698, 700, 801, 804, 805, 807, 810, 811, 821, 848, 851, 852, 855, 856, 857, 859, 863, 875, 883, 886, 887, 889, 892, 903, 904, 915, 1008, 1014, 1027, 1048], "OF": 379, "ON": 329, "ONE": [376, 614, 615], "OR": [315, 414, 425, 450, 1050], "Of": [48, 62, 64, 185, 289, 369, 384, 414, 422, 998], "On": [43, 51, 52, 55, 63, 102, 105, 106, 117, 118, 128, 137, 140, 142, 144, 145, 150, 154, 155, 158, 161, 167, 169, 178, 179, 190, 191, 192, 199, 204, 206, 219, 221, 245, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 260, 262, 265, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 287, 289, 313, 315, 317, 319, 320, 321, 325, 326, 328, 329, 331, 336, 345, 352, 364, 369, 380, 382, 383, 384, 386, 394, 396, 410, 412, 414, 418, 419, 421, 423, 424, 650, 663, 698, 742, 768, 876, 892, 997, 1001, 1004, 1007, 1008, 1010, 1014, 1016, 1021, 1023], "One": [2, 43, 48, 51, 61, 66, 84, 90, 128, 130, 145, 147, 150, 153, 154, 187, 190, 193, 196, 221, 226, 232, 244, 255, 265, 269, 275, 282, 285, 292, 301, 304, 316, 331, 340, 342, 353, 357, 364, 369, 379, 382, 395, 396, 408, 413, 414, 417, 419, 420, 421, 422, 423, 425, 450, 455, 478, 480, 484, 519, 573, 638, 646, 665, 673, 675, 680, 682, 683, 684, 795, 814, 815, 839, 840, 841, 872, 873, 884, 915, 970, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1018, 1023, 1029, 1030, 1034, 1043, 1045, 1052, 1054], "Or": [356, 364, 418, 419, 884, 1008, 1014, 1022], "Such": [53, 154, 174, 179, 189, 197, 202, 206, 218, 269, 278, 356, 396, 397, 408, 418, 419, 421, 562, 563, 663, 998, 1008, 1011, 1018, 1024, 1049, 1054, 1056], "THE": 379, "That": [52, 64, 123, 137, 153, 172, 190, 206, 244, 275, 279, 357, 358, 370, 376, 390, 396, 413, 418, 423, 424, 449, 452, 453, 564, 571, 600, 825, 919, 920, 997, 1005, 1006, 1014, 1024, 1048, 1049], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 394, 395, 396, 397, 399, 400, 402, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 434, 436, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 759, 760, 761, 762, 763, 764, 765, 766, 769, 771, 772, 773, 774, 777, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 955, 957, 958, 960, 963, 964, 967, 970, 972, 973, 974, 976, 977, 978, 981, 989, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "Their": [190, 377, 379, 397, 414, 651, 1039], "Then": [105, 138, 142, 145, 153, 158, 161, 169, 190, 195, 202, 204, 217, 221, 241, 245, 251, 257, 269, 277, 278, 292, 356, 364, 376, 386, 388, 390, 400, 401, 411, 414, 417, 419, 422, 423, 577, 600, 726, 763, 807, 821, 911, 912, 998, 1007, 1008, 1014, 1023, 1024, 1048], "There": [0, 74, 81, 143, 174, 235, 241, 251, 266, 270, 272, 275, 294, 356, 375, 377, 379, 382, 383, 384, 387, 394, 396, 397, 400, 411, 414, 419, 421, 422, 423, 452, 458, 468, 541, 560, 561, 566, 567, 595, 596, 598, 613, 652, 998, 1004, 1005, 1006, 1007, 1008, 1011, 1015, 1018, 1022, 1023, 1024, 1026, 1031, 1039, 1047], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 86, 123, 125, 142, 146, 187, 191, 206, 217, 218, 219, 245, 269, 292, 295, 299, 313, 315, 322, 323, 328, 335, 337, 365, 369, 370, 375, 378, 379, 382, 384, 386, 389, 391, 394, 396, 400, 405, 408, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 448, 452, 454, 505, 515, 516, 522, 545, 574, 575, 609, 610, 675, 683, 684, 706, 713, 740, 785, 801, 807, 810, 811, 813, 821, 830, 832, 833, 834, 835, 836, 838, 856, 857, 876, 930, 997, 999, 1002, 1004, 1005, 1008, 1009, 1019, 1021, 1023, 1027, 1039, 1045, 1047, 1048, 1049, 1052, 1056, 1058], "To": [1, 43, 47, 63, 64, 68, 81, 90, 92, 111, 113, 115, 118, 128, 137, 147, 150, 151, 160, 163, 172, 179, 180, 183, 185, 186, 189, 190, 195, 199, 202, 204, 217, 218, 219, 221, 225, 235, 248, 249, 251, 254, 256, 258, 265, 269, 270, 272, 273, 275, 277, 278, 280, 282, 288, 289, 292, 294, 312, 315, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 354, 357, 360, 365, 369, 370, 375, 376, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 400, 408, 410, 411, 414, 415, 416, 417, 418, 419, 421, 422, 452, 454, 455, 456, 467, 470, 473, 499, 503, 509, 510, 514, 515, 516, 538, 544, 545, 546, 548, 550, 551, 552, 553, 564, 565, 566, 567, 571, 572, 576, 604, 618, 634, 639, 653, 654, 659, 660, 663, 665, 666, 667, 668, 669, 670, 691, 707, 719, 735, 770, 792, 800, 810, 811, 833, 840, 871, 882, 887, 901, 902, 911, 912, 916, 919, 920, 921, 922, 945, 955, 994, 997, 998, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1022, 1023, 1024, 1032, 1039, 1042, 1044, 1045, 1046, 1048, 1050], "Will": [382, 504, 541, 634, 651, 652, 653, 659, 663, 664, 667, 668, 669, 670, 671, 672, 680, 682, 714, 721, 795, 876, 880, 890, 891, 1042, 1043, 1045, 1047, 1057], "Willing": [1045, 1046], "With": [61, 70, 79, 102, 109, 120, 128, 153, 155, 168, 187, 191, 217, 219, 243, 245, 250, 252, 258, 275, 299, 369, 377, 380, 382, 384, 396, 405, 414, 415, 418, 421, 423, 443, 445, 508, 548, 589, 639, 640, 665, 869, 872, 874, 885, 891, 892, 918, 920, 1001, 1004, 1005, 1008, 1009, 1011, 1012, 1015, 1022, 1024, 1029, 1036, 1042, 1046, 1047, 1049, 1051, 1053], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 85, 88, 90, 93, 98, 102, 104, 115, 120, 121, 123, 128, 130, 132, 140, 141, 142, 153, 167, 174, 179, 180, 181, 189, 190, 191, 193, 195, 197, 201, 202, 204, 205, 206, 209, 214, 215, 217, 219, 221, 230, 231, 234, 238, 241, 245, 250, 254, 258, 269, 270, 275, 277, 278, 279, 281, 282, 284, 288, 289, 292, 298, 303, 306, 313, 317, 320, 321, 322, 325, 328, 329, 330, 332, 335, 336, 344, 349, 352, 356, 358, 361, 384, 388, 396, 419, 421, 422, 426, 452, 484, 539, 540, 541, 542, 543, 545, 546, 547, 550, 552, 553, 554, 573, 604, 653, 654, 659, 660, 667, 668, 669, 670, 688, 689, 690, 691, 695, 696, 697, 698, 700, 702, 703, 705, 707, 717, 771, 807, 813, 821, 830, 855, 863, 884, 885, 892, 998, 1004, 1005, 1008, 1010, 1011, 1012, 1015, 1016, 1018, 1023, 1024, 1046], "_0": [216, 692, 1004, 1008, 1023], "_1": [327, 349, 416, 419, 422, 538, 544, 545, 547, 552, 553, 554, 653, 654, 659, 660, 661, 662, 663, 667, 668, 669, 670, 688, 689, 690, 691, 773, 1004, 1006, 1008, 1023], "_11": 659, "_2": [114, 179, 349, 419, 422, 538, 544, 552, 553, 653, 659, 1004, 1012, 1022, 1023], "_21": [653, 654, 659, 660, 667, 668, 669, 670, 688, 691], "__": [107, 276, 396, 415, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1047, 1048], "______________________________________________________________________": 335, "________________________________________________________________________________": [50, 89, 356], "__________________________________________________________________________________": 93, "________________________________________________________ward_tre": 89, "_____________________________________________________f_regress": 89, "__add__": [424, 631], "__array__": [1042, 1049], "__array_function__": [1028, 1049], "__c": 384, "__call__": [182, 345, 396, 422, 424, 472, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 945, 973, 1046], "__class__": [185, 217, 219, 251, 254, 277, 317, 356, 357, 358, 389], "__class_weight": 384, "__dataframe__": [568, 569], "__doc__": [78, 109, 179, 263, 396], "__file__": [47, 49, 1052], "__getattr__": 384, "__getitem__": 1057, "__getstate__": [1046, 1054], "__init__": [47, 91, 135, 182, 251, 295, 345, 382, 384, 386, 387, 388, 389, 396, 422, 428, 431, 434, 437, 438, 625, 968, 1040, 1045, 1047, 1052, 1053, 1054, 1055], "__init_subclass__": 384, "__len__": 1048, "__main__": [338, 394], "__metadata_request__fit": 251, "__mul__": 628, "__mul___": 424, "__name__": [46, 62, 96, 185, 217, 219, 251, 254, 258, 270, 277, 317, 338, 356, 357, 358, 389, 394, 884], "__pow__": [424, 623], "__repr__": [384, 1028, 1048], "__sklearn_clone__": [384, 439, 1055], "__sklearn_is_fitted__": [47, 91, 134, 182, 187, 251, 295, 384, 428, 431, 991, 1029, 1052, 1053], "__sklearn_tags__": [384, 944, 960, 1058], "__version__": [151, 193, 324, 386], "_agglom": 89, "_array_api": 410, "_bag": 947, "_base": [261, 384], "_basehmm": 1039, "_bay": 947, "_birch": 1049, "_breast_cancer_dataset": 172, "_build": 382, "_c_step": 1046, "_cfnode": 448, "_check_bounds_param": 1051, "_check_i": 996, "_check_param_grid": 1045, "_check_sample_weight": 1052, "_check_stop_list": 598, "_check_target": 1046, "_check_x": 1049, "_class": 1008, "_class_cov": 1047, "_class_mean": 1047, "_classif": 313, "_classifier_ha": 91, "_column_transform": [105, 158], "_compon": [248, 543], "_coo": [592, 593], "_count_nonzero_coeffici": 46, "_criterion": 1047, "_csr": 884, "_cython_bla": 383, "_devianc": 1008, "_diabetes_dataset": 172, "_distn_infrastructur": 287, "_doc_link_modul": 384, "_doc_link_templ": 384, "_doc_link_url_param_gener": 384, "_dotbla": 388, "_encod": 1047, "_error": 1008, "_estim": 996, "_estimator_html_repr": 951, "_estimator_typ": [384, 396, 431, 432, 433, 436, 437, 1044], "_estimator_with_converted_arrai": 410, "_f": [182, 1004], "_featur": [419, 545, 547, 554], "_fit_and_scor": 1047, "_fit_stag": [566, 567], "_fro": [538, 544, 552, 553, 653, 654, 659, 667, 668, 669, 688], "_g": 182, "_gb": 1049, "_generate_center_coordin": 53, "_get_support_mask": 608, "_get_tag": 1050, "_get_warnings_filters_info_list": 370, "_gpr": 183, "_h": [545, 547, 554], "_hist_gradient_boost": 386, "_i": [412, 421, 999, 1004, 1008, 1012, 1023], "_idx": 396, "_init": 198, "_init_t": 1022, "_initialize_nmf": 388, "_is_fit": 135, "_iter": 386, "_j": [412, 999], "_k": [416, 1002, 1004], "_l": 1008, "_learntselectormixin": 1044, "_level": [424, 632], "_logist": 382, "_loss": [396, 1008, 1057], "_m": 1024, "_mean": 321, "_mean_frequency_by_risk_group": 217, "_method": 967, "_my": 382, "_n": [422, 1008], "_n_cluster": 382, "_n_compon": 554, "_n_features_out": 430, "_name_estim": 1049, "_neg": 388, "_newton_cg": 1050, "_nls_subproblem": 388, "_nmf": 388, "_not_in_sphinx": [47, 49], "_num_thread": 370, "_obj": 967, "_openmp_help": 383, "_pairwis": [1049, 1051], "_plain_sgd": 1054, "_plot": [245, 334], "_po": 388, "_posterior_mod": 617, "_preprocess_data": 694, "_pvalu": 1039, "_rand": 365, "_ratio": [545, 547, 554], "_request": [251, 405, 1057], "_required_paramet": 434, "_reset": 47, "_run_search": 1047, "_safe_index": [2, 1052, 1056, 1057], "_safe_split": 928, "_safe_tag": 1050, "_sag": 1048, "_sampl": [248, 419, 545, 547, 554], "_samples_gener": 263, "_score": [396, 807, 821, 834, 1008, 1039, 1052], "_search": 1045, "_serial": 251, "_sgd_fast": 1054, "_skip_test": 930, "_spars": 388, "_sparse_fit": 1049, "_std": 321, "_t": 1022, "_test": [225, 317, 370, 384, 1052], "_test_scor": [275, 478, 601, 1052], "_transform_select": 1045, "_tree": [919, 920, 921, 922, 1040, 1042], "_typedef": 383, "_univariate_select": 89, "_validate_data": 1058, "_valu": [424, 620], "_w": [545, 547, 554], "_weight": [53, 235], "_weight_boost": 947, "_weighted_percentil": 1052, "_x_is_even": 968, "_xfail_check": 930, "a16": [1049, 1050], "a65628": [79, 97], "a674e682c281": 387, "a_": [124, 411, 414, 545, 547, 554, 1004], "a_column": 726, "a_i": 414, "a_mask": 284, "a_n": 411, "a_row": 726, "a_tru": 284, "aaa": 182, "aaaaff": [300, 303], "aaai": [414, 425, 450, 846, 1010], "aact": 182, "aaffaa": 303, "aagaard": 1043, "aakanksha": 1047, "aapl": 51, "aarch64": 390, "aaron": [501, 1004, 1042, 1043, 1044, 1049], "aarshai": [1046, 1047], "aashil": 1046, "ab": [51, 55, 75, 109, 127, 133, 139, 147, 158, 168, 172, 193, 208, 228, 230, 233, 235, 240, 275, 315, 332, 343, 354, 414, 545, 547, 554, 634, 851, 852, 886, 1008], "ab_mask": 284, "abadi": [1045, 1046], "abandon": 382, "abati": [1054, 1056, 1057, 1058], "abbi": [1049, 1050], "abbrevi": 706, "abdela": 1048, "abdulaziz": 1057, "abdulelah": 1052, "abdur": 1049, "abenbihi": 1049, "abhijeet": 1041, "abhinav": [1049, 1052], "abhishek": [1042, 1043, 1049, 1053, 1055, 1056], "abhyudai": 1046, "abid": 382, "abil": [48, 52, 96, 113, 150, 173, 174, 175, 179, 181, 183, 185, 187, 189, 190, 192, 217, 221, 235, 244, 356, 371, 400, 421, 422, 424, 618, 629, 632, 789, 790, 791, 794, 795, 1005, 1008, 1011, 1014, 1024, 1028, 1029, 1039, 1041, 1046, 1048, 1052, 1053], "abirami": 414, "abl": [43, 44, 48, 61, 82, 90, 96, 115, 118, 127, 128, 153, 155, 180, 190, 193, 202, 206, 217, 233, 235, 241, 281, 286, 288, 331, 332, 345, 365, 369, 370, 371, 376, 380, 382, 384, 386, 387, 390, 394, 408, 414, 416, 418, 422, 491, 510, 541, 836, 883, 997, 998, 1004, 1007, 1008, 1009, 1014, 1018, 1021, 1024, 1025, 1028, 1045, 1046, 1050, 1057], "ablin": 1054, "abnorm": [231, 244, 301, 344, 377, 499, 570, 857, 1014, 1047], "abo7atm": 1051, "abort": 699, "about": [3, 46, 50, 65, 79, 88, 92, 97, 104, 118, 146, 169, 183, 187, 189, 193, 221, 234, 244, 251, 269, 272, 273, 275, 277, 282, 294, 300, 320, 324, 326, 327, 328, 329, 330, 335, 356, 358, 364, 365, 369, 370, 375, 377, 381, 382, 384, 386, 387, 388, 390, 395, 396, 397, 408, 413, 418, 419, 422, 424, 444, 499, 501, 502, 503, 504, 507, 508, 509, 511, 512, 517, 522, 568, 569, 600, 601, 614, 615, 621, 647, 683, 685, 750, 807, 813, 821, 830, 840, 890, 938, 998, 1004, 1005, 1007, 1009, 1011, 1014, 1015, 1018, 1019, 1021, 1023, 1024, 1027, 1031, 1032, 1044, 1045, 1055, 1057], "abov": [43, 62, 63, 64, 72, 79, 101, 104, 139, 142, 143, 150, 153, 161, 171, 172, 190, 191, 203, 217, 219, 223, 228, 248, 251, 252, 269, 275, 281, 292, 300, 317, 320, 321, 325, 327, 331, 349, 357, 358, 364, 365, 369, 370, 371, 376, 377, 379, 380, 381, 382, 384, 386, 388, 394, 396, 397, 412, 414, 415, 416, 418, 419, 420, 421, 422, 424, 447, 451, 470, 473, 495, 502, 503, 504, 530, 597, 641, 711, 762, 807, 811, 819, 821, 832, 874, 875, 888, 894, 900, 908, 970, 997, 998, 1000, 1002, 1004, 1005, 1008, 1011, 1013, 1015, 1018, 1022, 1023, 1024, 1028, 1045, 1057], "abraham": [1039, 1040, 1045, 1049], "abrahamowicz": 1018, "absenc": [244, 278, 396, 719, 874, 1007, 1008], "absent": [396, 412, 422, 736, 761, 832], "absgrad": 1050, "absher": 1041, "absolut": [2, 43, 52, 109, 127, 147, 172, 190, 217, 219, 223, 235, 332, 364, 384, 408, 414, 416, 418, 419, 421, 422, 423, 424, 425, 450, 456, 462, 463, 538, 544, 549, 552, 553, 555, 556, 557, 565, 567, 568, 569, 572, 595, 597, 598, 600, 604, 609, 626, 634, 639, 653, 656, 657, 659, 661, 663, 678, 679, 681, 683, 685, 689, 690, 711, 724, 728, 743, 744, 752, 753, 755, 760, 762, 764, 802, 809, 813, 824, 827, 835, 837, 849, 851, 852, 856, 875, 880, 883, 896, 920, 922, 993, 1004, 1005, 1018, 1022, 1024, 1040, 1045, 1050, 1051, 1052, 1053, 1056], "absolute_error": [52, 421, 565, 567, 569, 572, 678, 920, 922, 1052], "absolute_loss": 1052, "absolutelynowarranti": 1047, "absp": 867, "abstain": 541, "abstract": [396, 419, 424, 625, 776, 1039], "abstractmethod": 1049, "absurd": 1015, "abund": 377, "ac": [537, 671, 692, 693, 1004, 1021], "acad": [696, 700, 1005], "academ": [418, 1032], "academi": [113, 858], "acategorypredict": 402, "acc": 149, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 304, "acceler": [249, 329, 369, 394, 410, 414, 474, 699, 909, 1005, 1027, 1032, 1048, 1052, 1054, 1056], "accent": [353, 595, 596, 598, 1049], "accept": [172, 174, 251, 269, 272, 324, 332, 345, 356, 358, 365, 369, 370, 376, 382, 384, 391, 394, 395, 396, 397, 405, 410, 414, 422, 443, 447, 450, 451, 454, 467, 470, 473, 515, 516, 562, 563, 568, 569, 576, 577, 588, 589, 600, 601, 604, 635, 642, 646, 650, 653, 654, 659, 660, 686, 734, 749, 785, 804, 805, 806, 810, 811, 829, 853, 854, 861, 862, 871, 875, 935, 937, 938, 941, 996, 1004, 1006, 1008, 1011, 1016, 1018, 1023, 1027, 1028, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "accept_large_spars": [937, 938, 1047], "accept_spars": [875, 937, 938, 1046, 1056], "access": [43, 84, 111, 148, 254, 261, 266, 331, 332, 356, 364, 369, 370, 382, 383, 384, 390, 394, 396, 397, 410, 414, 416, 417, 421, 422, 424, 456, 463, 470, 473, 543, 574, 575, 576, 577, 624, 869, 870, 871, 926, 997, 1004, 1007, 1008, 1014, 1015, 1016, 1022, 1023, 1028, 1032, 1039, 1041, 1045, 1046, 1047, 1048, 1051, 1053, 1054, 1055], "accid": [217, 235], "accident": [1039, 1043, 1048], "accommod": [179, 1047], "accompani": [275, 1047], "accomplish": [251, 384, 412, 553, 1005, 1009, 1011, 1032, 1056], "accord": [2, 55, 61, 63, 72, 84, 111, 143, 149, 172, 175, 201, 217, 235, 248, 324, 349, 357, 365, 382, 384, 394, 395, 396, 397, 408, 411, 412, 414, 416, 418, 419, 421, 422, 424, 443, 456, 458, 462, 466, 468, 471, 475, 511, 523, 524, 525, 532, 537, 539, 542, 543, 545, 547, 557, 560, 561, 568, 569, 570, 573, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 648, 649, 651, 652, 656, 665, 666, 677, 687, 698, 702, 742, 786, 787, 807, 808, 809, 810, 811, 814, 815, 816, 821, 832, 846, 847, 848, 849, 850, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 874, 881, 889, 901, 903, 904, 911, 912, 913, 914, 916, 917, 1002, 1004, 1008, 1010, 1011, 1018, 1021, 1022, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "accordingli": [153, 191, 254, 349, 382, 386, 387, 1046, 1047, 1054], "account": [52, 53, 90, 125, 131, 137, 153, 179, 185, 190, 235, 251, 269, 275, 298, 304, 352, 354, 357, 369, 378, 382, 396, 397, 405, 414, 417, 418, 419, 421, 422, 469, 568, 569, 574, 575, 634, 635, 637, 639, 640, 656, 680, 686, 711, 714, 735, 736, 737, 745, 750, 763, 790, 791, 794, 795, 808, 812, 825, 885, 997, 1000, 1002, 1006, 1008, 1009, 1010, 1011, 1018, 1022, 1024, 1044, 1046, 1047, 1048, 1051, 1052, 1054, 1056, 1057, 1058], "acctactagaagtt": 394, "acctcctagaag": 394, "accumul": [47, 85, 144, 145, 206, 386, 388, 414, 422, 1008, 1040, 1047], "accur": [43, 48, 52, 59, 62, 63, 113, 123, 152, 174, 181, 190, 191, 221, 232, 235, 269, 275, 282, 286, 292, 328, 356, 357, 365, 381, 396, 412, 414, 416, 419, 421, 422, 423, 443, 449, 453, 457, 459, 465, 538, 545, 547, 549, 550, 552, 553, 554, 614, 615, 641, 810, 811, 851, 852, 954, 955, 1000, 1005, 1008, 1024, 1053], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 104, 105, 106, 107, 137, 143, 144, 148, 149, 156, 168, 169, 171, 175, 193, 195, 217, 221, 225, 232, 233, 262, 273, 274, 275, 276, 277, 279, 281, 289, 292, 297, 303, 304, 305, 313, 317, 320, 330, 334, 335, 337, 345, 348, 349, 352, 365, 369, 395, 396, 413, 414, 418, 421, 422, 423, 431, 443, 455, 475, 477, 478, 484, 539, 541, 548, 556, 557, 558, 560, 562, 564, 565, 566, 568, 571, 572, 574, 576, 617, 641, 665, 666, 673, 675, 678, 681, 682, 683, 699, 704, 710, 715, 718, 720, 725, 739, 740, 741, 745, 750, 761, 770, 794, 801, 803, 806, 829, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 853, 858, 860, 861, 868, 906, 907, 911, 913, 916, 919, 921, 927, 954, 955, 997, 1002, 1003, 1004, 1005, 1009, 1011, 1012, 1016, 1020, 1022, 1024, 1047, 1048, 1057], "accuracy_histori": 47, "accuracy_scor": [2, 66, 137, 175, 279, 320, 337, 356, 365, 395, 405, 410, 431, 564, 571, 715, 718, 736, 737, 741, 745, 790, 791, 794, 801, 803, 948, 997, 1008, 1040, 1041, 1042, 1051, 1056, 1057], "acf": 147, "achar": [1046, 1047, 1048, 1049], "achiev": [43, 51, 55, 57, 64, 67, 126, 137, 146, 148, 153, 156, 182, 195, 217, 225, 272, 275, 282, 320, 332, 337, 345, 348, 349, 352, 356, 365, 369, 371, 376, 377, 379, 384, 388, 394, 396, 402, 411, 412, 413, 414, 418, 419, 421, 422, 565, 572, 647, 656, 683, 685, 714, 736, 737, 745, 747, 770, 790, 791, 794, 810, 811, 847, 891, 997, 998, 1000, 1004, 1008, 1018, 1021, 1023, 1052], "achin": 1032, "achliopta": [248, 904, 905, 1020], "acid": [320, 379], "acknowledg": [381, 616, 1056], "acl": [908, 1021, 1022], "acm": [376, 377, 414, 425, 450, 456, 463, 466, 518, 570, 683, 733, 763, 857, 1008, 1011, 1014, 1020], "acoust": 1008, "acq": 47, "acquaint": 382, "acquir": [53, 145, 277, 1051], "acquisit": [411, 726], "acronym": 386, "across": [0, 2, 15, 43, 52, 90, 96, 102, 117, 120, 143, 163, 190, 206, 211, 238, 270, 272, 275, 288, 289, 295, 315, 320, 349, 383, 384, 391, 396, 408, 412, 414, 418, 421, 422, 423, 426, 443, 446, 456, 458, 460, 463, 466, 468, 475, 478, 480, 494, 497, 499, 502, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 574, 575, 595, 598, 601, 609, 614, 615, 617, 618, 639, 640, 641, 646, 647, 648, 649, 653, 654, 657, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 683, 685, 686, 692, 693, 696, 697, 698, 699, 700, 701, 702, 711, 712, 724, 738, 764, 795, 800, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 856, 860, 867, 868, 869, 876, 880, 881, 888, 889, 891, 892, 900, 903, 904, 906, 907, 911, 912, 913, 916, 919, 920, 954, 955, 978, 981, 997, 1004, 1006, 1008, 1018, 1022, 1024, 1028, 1032, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1057], "act": [345, 356, 382, 395, 420, 421, 720, 736, 737, 745, 790, 791, 794, 886, 890, 1005, 1008, 1011, 1023, 1047], "action": [327, 356, 381, 385, 386, 400, 413, 1018, 1049], "activ": [52, 68, 187, 225, 260, 266, 276, 333, 334, 358, 376, 377, 380, 382, 383, 388, 390, 394, 396, 397, 400, 401, 405, 415, 503, 509, 533, 639, 642, 644, 657, 658, 660, 661, 662, 670, 671, 672, 689, 690, 691, 692, 693, 720, 725, 804, 867, 868, 869, 907, 973, 1004, 1005, 1006, 1007, 1011, 1012, 1013, 1021, 1029, 1031, 1050], "active_": [657, 658, 661, 662], "active_features_": 1047, "actual": [43, 52, 64, 81, 95, 109, 118, 143, 153, 172, 190, 195, 206, 217, 221, 225, 262, 271, 278, 282, 358, 364, 365, 369, 371, 379, 382, 384, 387, 388, 394, 395, 396, 412, 414, 419, 421, 422, 423, 439, 516, 522, 523, 534, 542, 545, 547, 554, 569, 570, 651, 652, 655, 665, 666, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 687, 694, 698, 702, 708, 711, 716, 722, 728, 729, 730, 731, 792, 804, 810, 811, 823, 826, 827, 857, 888, 911, 917, 946, 947, 948, 982, 1000, 1007, 1008, 1011, 1015, 1016, 1024, 1031, 1046, 1047, 1053, 1054, 1055], "actual_vs_predict": [43, 109, 158, 190, 271, 329, 708], "actuari": 412, "ad": [43, 53, 58, 109, 130, 132, 137, 143, 153, 168, 174, 180, 181, 197, 202, 219, 221, 241, 250, 251, 275, 276, 277, 315, 325, 326, 327, 328, 329, 330, 331, 332, 338, 349, 357, 381, 382, 384, 386, 394, 396, 397, 419, 421, 422, 423, 424, 425, 426, 432, 436, 438, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 517, 519, 521, 529, 530, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 711, 715, 718, 720, 721, 723, 725, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 741, 746, 747, 748, 749, 750, 753, 760, 761, 764, 768, 773, 774, 776, 782, 784, 785, 789, 790, 791, 792, 794, 796, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 820, 821, 825, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 900, 901, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 935, 937, 938, 945, 949, 950, 954, 955, 963, 964, 965, 966, 967, 970, 973, 977, 982, 988, 994, 996, 997, 1001, 1003, 1004, 1005, 1009, 1011, 1012, 1014, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "adaboost": [2, 67, 136, 140, 146, 154, 157, 158, 161, 177, 187, 349, 361, 362, 363, 526, 558, 560, 561, 566, 638, 710, 837, 919, 920, 1029, 1030, 1034, 1041], "adaboost_clf": 137, "adaboostclassifi": [2, 67, 139, 146, 405, 421, 561, 566, 568, 947, 1041, 1042, 1045, 1046, 1048, 1049, 1052, 1054, 1055, 1056, 1058], "adaboostregressor": [2, 138, 405, 421, 560, 569, 947, 1041, 1042, 1045, 1048, 1049, 1052, 1054, 1055], "adam": [0, 311, 403, 868, 869, 1012, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "adamgonzo": 1053, "adamson": 1051, "adanhawth": [1047, 1048], "adapt": [88, 90, 137, 149, 150, 260, 261, 269, 349, 370, 381, 382, 391, 414, 421, 424, 522, 523, 524, 525, 683, 684, 685, 868, 869, 1004, 1010, 1012, 1018, 1022, 1027, 1028, 1047, 1048, 1055, 1056], "adarsh": [1056, 1057], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 89, 109, 113, 114, 118, 124, 146, 149, 168, 170, 172, 174, 179, 180, 181, 185, 186, 200, 205, 206, 212, 218, 220, 221, 232, 240, 244, 248, 250, 251, 282, 284, 285, 295, 307, 317, 319, 324, 326, 327, 348, 349, 351, 352, 357, 369, 380, 381, 382, 383, 384, 386, 388, 390, 396, 400, 410, 412, 418, 421, 422, 423, 522, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 609, 634, 635, 637, 639, 665, 666, 701, 704, 828, 851, 852, 908, 945, 964, 965, 997, 998, 1007, 1014, 1018, 1021, 1022, 1028, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "add_2d_scatt": 237, "add_artist": [70, 238, 260, 261, 262, 265, 266], "add_ax": [191, 241, 286], "add_categori": 254, "add_collect": [51, 240, 247], "add_dummy_featur": 2, "add_ind": [158, 186, 634, 635, 637, 998, 1048, 1051, 1055], "add_missing_valu": 186, "add_nois": 180, "add_self_request": [251, 964], "add_subplot": [46, 62, 64, 77, 80, 99, 102, 120, 129, 191, 214, 232, 239, 241, 334, 335, 389], "add_trac": 143, "adddatapointbatch": 295, "addep": 1050, "addison": [597, 737], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 101, 105, 115, 120, 123, 126, 137, 141, 143, 144, 147, 148, 171, 179, 180, 181, 186, 190, 191, 197, 202, 206, 218, 219, 221, 241, 255, 269, 277, 284, 288, 290, 294, 315, 325, 326, 331, 336, 349, 358, 362, 365, 369, 370, 374, 375, 376, 377, 378, 381, 382, 384, 386, 387, 388, 390, 394, 396, 397, 400, 408, 413, 414, 416, 418, 419, 422, 423, 424, 425, 438, 447, 448, 450, 451, 452, 456, 463, 475, 480, 503, 510, 539, 541, 543, 544, 546, 548, 549, 550, 556, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 619, 626, 635, 637, 638, 642, 645, 646, 647, 648, 649, 650, 651, 652, 677, 694, 695, 699, 705, 706, 709, 749, 765, 766, 795, 799, 804, 805, 813, 830, 840, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 893, 903, 904, 911, 912, 949, 955, 997, 1002, 1004, 1008, 1009, 1011, 1012, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1034, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "addition": [88, 106, 139, 153, 190, 217, 235, 251, 325, 327, 357, 382, 394, 412, 422, 617, 618, 653, 659, 678, 888, 997, 998, 1008, 1016, 1027, 1045, 1056], "additional_nois": 75, "additive_chi2": [627, 645, 772, 781], "additive_chi2_kernel": [2, 410, 645, 766, 772, 1000, 1058], "additivechi2sampl": [2, 646, 647, 648, 649, 765, 766, 1000, 1053, 1055], "address": [43, 83, 221, 251, 356, 377, 382, 413, 414, 422, 453, 664, 1004, 1005, 1010, 1011, 1012, 1013, 1014, 1018, 1032, 1047], "adelr": 1047, "adequ": [370, 388, 574, 1052], "adeyemi": 1057, "adher": [2, 369, 384, 396, 949, 950, 1039, 1040], "adien": 1055, "adijohar": 1053, "adil": 1054, "adimension": 190, "adithya": 1044, "aditi": 1057, "aditya": [1045, 1047, 1048, 1049, 1053, 1054], "adityadaflapurkar": 1047, "adjac": [414, 419, 458, 468, 592, 593, 642, 698, 702, 961, 1005, 1011], "adjacency_matrix": 414, "adjust": [2, 43, 48, 71, 73, 84, 93, 111, 137, 150, 167, 187, 221, 244, 249, 257, 276, 292, 324, 338, 352, 357, 389, 414, 415, 419, 421, 422, 531, 560, 561, 564, 566, 568, 569, 571, 665, 666, 673, 675, 681, 682, 683, 711, 712, 715, 721, 722, 762, 764, 793, 802, 846, 847, 849, 850, 881, 903, 904, 911, 912, 913, 916, 919, 921, 943, 1007, 1008, 1012, 1018, 1029, 1036, 1039, 1045, 1055], "adjusted_mutual_info_scor": [2, 72, 73, 84, 93, 414, 712, 722, 740, 762, 764, 793, 1008, 1039, 1047, 1051, 1055], "adjusted_rand_index": 712, "adjusted_rand_scor": [2, 72, 73, 84, 93, 357, 414, 711, 722, 740, 764, 793, 1008, 1052], "administr": [400, 401], "admir": [1054, 1055], "admiss": [248, 370], "adopt": [384, 386, 394, 396, 907, 1008, 1022, 1047, 1054, 1056], "adoublet": [1054, 1055], "adpot": 330, "adrian": [1052, 1053, 1054], "adrien": 1039, "adrin": [0, 397, 403, 408, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "adrinjalali": [1042, 1051], "adult": [331, 503, 1018], "advanc": [44, 155, 187, 191, 243, 245, 275, 294, 371, 382, 414, 419, 495, 508, 542, 639, 646, 790, 804, 860, 869, 872, 891, 920, 997, 1000, 1008, 1011, 1018, 1029, 1032, 1036, 1041], "advani": 1051, "advantag": [43, 44, 74, 90, 92, 123, 128, 151, 217, 218, 244, 261, 276, 294, 328, 332, 365, 396, 412, 418, 419, 422, 424, 447, 451, 466, 541, 596, 656, 681, 682, 770, 839, 840, 841, 871, 872, 911, 912, 913, 914, 915, 916, 917, 997, 1000, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1016, 1018, 1022, 1023, 1024, 1042], "advic": [390, 424, 629, 630], "advik": [1056, 1057], "advis": [52, 218, 251, 365, 382, 414, 422, 443, 653, 659, 661, 667, 669, 679, 694, 1000, 1004, 1010, 1012, 1023, 1053], "advoc": 1009, "aeberhard": 379, "aesthet": [315, 1024, 1044], "af": 73, "affan": 1045, "affanv14": 1046, "affect": [46, 62, 113, 153, 181, 189, 190, 221, 241, 254, 255, 278, 285, 320, 330, 365, 369, 370, 371, 378, 396, 399, 412, 414, 417, 418, 420, 422, 425, 427, 450, 456, 463, 479, 481, 485, 556, 557, 576, 706, 719, 795, 807, 810, 811, 812, 821, 825, 826, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 891, 892, 902, 916, 1007, 1011, 1023, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "affili": 377, "affin": [2, 27, 71, 72, 79, 84, 98, 99, 187, 315, 336, 374, 384, 396, 419, 446, 447, 458, 460, 468, 519, 542, 698, 702, 711, 712, 724, 744, 800, 802, 907, 928, 1002, 1005, 1008, 1029, 1033, 1034, 1039, 1040, 1043, 1049, 1050, 1052, 1054], "affinity_matrix": [698, 702], "affinity_matrix_": [446, 458, 698], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 328, 414, 1039, 1042, 1043, 1047, 1050, 1052, 1053, 1054, 1055, 1056], "affirm": 43, "afnlp": 1022, "afor": [903, 904], "aforement": [370, 1009], "afraid": 400, "africa": 1018, "afroj": 1056, "aft": [321, 1042], "aftab": 1048, "after": [43, 55, 58, 59, 63, 81, 88, 90, 104, 105, 109, 114, 125, 137, 148, 153, 156, 158, 161, 168, 172, 179, 181, 183, 185, 190, 195, 210, 217, 254, 255, 258, 263, 275, 284, 294, 295, 303, 305, 315, 316, 319, 320, 356, 357, 371, 377, 379, 381, 382, 384, 386, 388, 389, 390, 394, 396, 408, 410, 411, 412, 414, 415, 418, 419, 422, 423, 426, 448, 453, 456, 457, 458, 459, 462, 468, 522, 539, 543, 557, 560, 561, 566, 567, 568, 569, 604, 634, 637, 665, 666, 673, 674, 675, 680, 682, 683, 684, 685, 699, 719, 733, 763, 801, 804, 805, 810, 811, 860, 867, 871, 884, 890, 911, 916, 917, 932, 997, 998, 1002, 1004, 1008, 1012, 1013, 1018, 1020, 1022, 1023, 1024, 1028, 1039, 1042, 1046, 1047, 1050, 1051, 1054, 1057], "afterward": [58, 386, 542, 548, 835], "ag": [105, 172, 190, 192, 204, 206, 217, 235, 255, 256, 258, 269, 315, 327, 328, 329, 331, 377, 379, 503, 1032], "again": [43, 58, 102, 106, 150, 178, 180, 182, 190, 241, 276, 356, 365, 386, 391, 396, 397, 414, 415, 416, 421, 422, 478, 574, 575, 641, 654, 658, 660, 662, 668, 670, 672, 699, 997, 1004, 1008, 1022, 1036, 1039, 1047, 1056], "against": [64, 72, 118, 132, 140, 151, 167, 195, 208, 209, 226, 234, 251, 284, 321, 324, 345, 377, 382, 397, 408, 412, 414, 418, 422, 444, 516, 549, 555, 558, 683, 685, 762, 764, 795, 809, 814, 816, 836, 840, 973, 1000, 1004, 1008, 1009, 1011, 1023, 1026], "agamemnon": [1046, 1047, 1048, 1049, 1051, 1052], "agarw": [1046, 1047, 1049], "agath": 1053, "agc": 182, "agct": 182, "agent": 1032, "agg": 179, "aggfunc": 286, "agglo": [86, 451], "agglom": [2, 51, 55, 71, 72, 77, 79, 82, 95, 97, 102, 187, 238, 240, 334, 335, 414, 447, 451, 509, 698, 785, 864, 1029, 1042], "agglomer": [2, 44, 68, 71, 85, 168, 170, 187, 200, 216, 253, 299, 334, 335, 374, 414, 422, 451, 509, 607, 613, 652, 807, 812, 871, 1029, 1034], "agglomerativeclust": [2, 74, 75, 76, 79, 82, 87, 91, 97, 102, 396, 414, 446, 448, 451, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056], "aggreg": [95, 141, 235, 278, 284, 289, 328, 330, 414, 421, 423, 541, 562, 563, 601, 728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 797, 798, 1009, 1011, 1018, 1055], "aggress": [2, 47, 224, 673, 674, 810, 811, 1030, 1034, 1040], "aggressive_elimin": [810, 811, 997], "agnost": [1007, 1016, 1057], "ago": [51, 386, 1028], "agraw": [1042, 1047, 1053, 1054], "agre": [25, 167, 390, 397, 414, 793], "agreement": [0, 2, 414, 711, 723, 762, 764, 802, 1008], "agricultur": 1004, "aguiar": 423, "agundez": 1047, "ahead": 895, "ahmadi": 1050, "ahmadjubair33": 1053, "ahmedbgh": [1054, 1055], "ahn": 1051, "ahuja": [1046, 1053, 1054], "ai": 418, "ai8rahim": 1042, "aic": [2, 163, 187, 196, 203, 204, 205, 211, 225, 265, 508, 658, 660, 661, 662, 663, 805, 872, 891, 997, 1029, 1039, 1046, 1052, 1053], "aic_criterion": 204, "aid": [272, 414, 799, 800, 1005, 1032, 1039, 1051], "aidan": 1047, "aidar": 1053, "aig": 51, "aiko": 1054, "aim": [52, 58, 114, 153, 186, 221, 269, 303, 336, 349, 371, 377, 380, 382, 396, 408, 414, 416, 422, 454, 1004, 1008, 1011, 1018, 1023, 1027, 1053], "air": [179, 771], "airport": 771, "airspe": 382, "aisha": 1057, "aishgrt1": 1047, "aishwarya": 1047, "aishwaryark": 1046, "aistat": 1021, "aivision2020": 1046, "aj": [501, 1053], "ak": [412, 1053, 1054], "aka": [2, 45, 310, 356, 394, 422, 458, 543, 545, 547, 551, 554, 588, 589, 622, 629, 658, 659, 661, 662, 663, 665, 666, 669, 673, 674, 675, 677, 683, 684, 685, 748, 878, 882, 884, 1004, 1012, 1022, 1041, 1053], "akai": 1052, "akaik": [204, 206, 265, 663, 805, 997, 1004], "akash": [1047, 1057], "aki": [1053, 1054, 1055], "akihiro": 1057, "akin": [43, 218, 396], "akinkunl": 1049, "akitti": 1044, "akshai": [1043, 1046, 1051], "akshay0724": 1046, "akshayah3": 1043, "akshita": 1054, "al": [0, 2, 50, 111, 112, 137, 152, 204, 308, 377, 379, 411, 414, 416, 419, 421, 422, 423, 457, 505, 526, 527, 535, 542, 548, 551, 570, 689, 690, 726, 727, 846, 848, 868, 869, 904, 954, 955, 1004, 1005, 1008, 1014, 1018, 1020, 1023, 1024, 1047, 1052, 1055, 1056], "ala": [1054, 1055], "aladago": 1049, "alam": [1054, 1055], "alan": [1046, 1047, 1050, 1052, 1053, 1057], "alastuei": 1042, "albeit": 62, "albert": [0, 372, 1046, 1047, 1048, 1051, 1052], "alberto": [1048, 1052, 1053, 1057], "alcalin": 379, "alcohol": [320, 379], "alcorn": 1047, "aldrian": 1043, "aleator": 52, "alec": 1049, "alejandro": [1040, 1045, 1056], "alek": [1052, 1053], "aleksandr": 1046, "aleksandra": 1050, "alemagnani": 1042, "alert": 1046, "alessandro": [1049, 1051, 1054], "alessia": 1052, "alex": [408, 422, 1023, 1039, 1042, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "alexand": [0, 404, 414, 419, 542, 877, 1041, 1042, 1043, 1045, 1046, 1047, 1051, 1052, 1053, 1056], "alexandercbooth": 1046, "alexandr": [0, 123, 397, 403, 404, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "alexandracraciun": 1051, "alexandru": 445, "alexanmv": 1053, "alexei": 1044, "alexfield": 1045, "alexgoryainov": 1049, "alexi": [1039, 1042, 1043, 1046, 1056, 1057], "alexl": [1055, 1056], "alexqiao": 1057, "alexryndin": 1047, "alexshack": [1049, 1050, 1051], "alfalfa": 57, "alfano": 1046, "alfaro": [0, 372, 1050, 1051, 1052, 1053, 1054], "alfr": 0, "algebra": [370, 380, 385, 394, 419, 422, 468, 877, 1018], "algesheim": 414, "algo": [78, 132], "algo_param": [79, 97], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 81, 85, 91, 92, 93, 94, 95, 96, 97, 101, 102, 104, 112, 113, 117, 123, 125, 137, 138, 143, 154, 187, 195, 205, 206, 220, 231, 233, 239, 241, 243, 247, 248, 254, 261, 262, 263, 266, 272, 275, 284, 295, 301, 302, 304, 308, 315, 317, 320, 324, 325, 326, 329, 331, 336, 337, 338, 344, 356, 357, 358, 365, 369, 371, 375, 376, 377, 378, 379, 382, 383, 384, 385, 390, 391, 395, 396, 399, 410, 411, 414, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 480, 481, 484, 488, 489, 490, 494, 510, 518, 519, 520, 521, 522, 529, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 560, 561, 562, 563, 566, 567, 570, 598, 610, 611, 617, 618, 642, 644, 646, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 711, 712, 715, 724, 726, 742, 744, 750, 781, 785, 786, 800, 802, 804, 805, 839, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 867, 872, 876, 878, 891, 895, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 937, 954, 955, 957, 972, 976, 982, 998, 1000, 1003, 1005, 1006, 1007, 1008, 1010, 1013, 1014, 1018, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "algorithm_nam": 78, "ali": [1044, 1047, 1048, 1051, 1052, 1054, 1055, 1056], "alia": [52, 251, 383, 390, 396, 405, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 617, 618, 624, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 981, 1014, 1028, 1039, 1053], "alias": [81, 82, 251, 380, 382, 385, 405, 604, 1039, 1043, 1053], "aliased_sample_weight": 251, "align": [70, 151, 153, 186, 237, 260, 286, 358, 396, 696, 700, 1000, 1011, 1022, 1033, 1034, 1055, 1056], "alihan": [1052, 1058], "alik": [419, 1006], "alin": 1052, "alison": 1046, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 83, 87, 88, 89, 90, 95, 99, 109, 115, 123, 125, 126, 135, 142, 143, 145, 146, 150, 153, 160, 161, 172, 179, 180, 182, 187, 189, 190, 191, 193, 197, 202, 203, 209, 210, 211, 217, 218, 219, 220, 221, 226, 228, 232, 234, 235, 237, 238, 244, 250, 251, 254, 255, 258, 261, 263, 265, 269, 273, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 292, 295, 298, 300, 312, 315, 316, 320, 324, 325, 326, 327, 329, 330, 331, 332, 334, 336, 337, 338, 342, 345, 349, 350, 352, 353, 356, 357, 358, 361, 364, 365, 369, 370, 371, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 390, 391, 394, 395, 396, 397, 401, 405, 408, 410, 411, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 510, 515, 516, 522, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 712, 716, 720, 721, 722, 723, 724, 725, 727, 728, 730, 733, 735, 736, 737, 739, 740, 742, 743, 744, 745, 749, 752, 753, 755, 757, 758, 760, 763, 768, 776, 781, 785, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 800, 801, 802, 804, 805, 807, 808, 809, 810, 811, 813, 814, 816, 817, 819, 821, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 933, 935, 937, 938, 939, 943, 946, 947, 948, 949, 961, 964, 970, 982, 991, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057, 1058], "all_class": 47, "all_displai": [2, 391, 1054], "all_estim": [2, 391, 1049, 1050, 1054], "all_funct": [2, 391, 1054], "all_label": 908, "all_model": 150, "all_or_ani": [991, 1049], "all_scor": 740, "all_split": [43, 52], "all_uppercas": 422, "allan": [356, 412, 1051], "allclos": [124, 155, 1020], "allefeld": 1052, "allen": [329, 1042, 1044, 1046, 1049], "allend": [1050, 1052], "allevi": [92, 153, 197, 202, 414, 1010], "allison": 329, "alloc": [2, 42, 45, 62, 96, 187, 287, 326, 378, 382, 383, 414, 422, 449, 453, 465, 494, 543, 545, 547, 591, 595, 598, 653, 659, 667, 669, 810, 811, 813, 830, 835, 838, 997, 1018, 1027, 1029, 1033, 1034, 1043, 1044, 1049, 1050, 1056, 1058], "allow": [25, 43, 58, 91, 93, 108, 109, 120, 127, 128, 140, 141, 148, 156, 174, 179, 180, 181, 183, 205, 211, 217, 221, 235, 238, 245, 248, 255, 257, 258, 260, 269, 275, 288, 289, 294, 324, 325, 326, 327, 329, 332, 349, 350, 356, 364, 365, 369, 376, 377, 382, 383, 384, 386, 389, 390, 391, 394, 396, 397, 405, 408, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 443, 449, 450, 452, 453, 455, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 503, 530, 531, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 600, 601, 604, 610, 617, 618, 622, 634, 635, 637, 641, 642, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 697, 699, 706, 749, 769, 772, 781, 785, 788, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 818, 821, 825, 828, 829, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 861, 862, 866, 868, 869, 871, 873, 874, 876, 877, 878, 883, 890, 891, 895, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 935, 937, 938, 949, 950, 971, 997, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "allow_nan": [928, 936, 938, 1055], "allow_nd": [937, 938], "allow_non": 718, "allow_single_clust": [79, 452], "allow_unlabel": [121, 252, 530], "allowed_extens": 510, "allwein": 292, "almeida": [1040, 1041, 1052], "almeidayoel": 1053, "almer": 1046, "almost": [43, 70, 143, 149, 219, 225, 251, 254, 269, 290, 320, 332, 337, 365, 375, 377, 386, 388, 394, 395, 396, 405, 414, 418, 419, 476, 477, 478, 479, 481, 482, 483, 804, 997, 1003, 1004, 1007, 1008, 1023, 1047, 1052], "almubarak": [1052, 1053], "alon": [190, 221, 281, 345, 396, 412, 655, 676, 687, 1046, 1048], "along": [2, 51, 53, 91, 94, 101, 118, 144, 150, 153, 179, 205, 217, 249, 251, 279, 324, 357, 358, 365, 377, 382, 386, 390, 391, 396, 400, 405, 408, 411, 419, 421, 422, 423, 426, 540, 557, 594, 618, 619, 637, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 683, 685, 688, 689, 690, 691, 692, 693, 786, 787, 799, 807, 821, 880, 881, 884, 885, 888, 889, 890, 891, 896, 897, 898, 900, 901, 902, 933, 957, 982, 988, 997, 1004, 1011, 1018, 1021, 1032, 1039, 1044, 1045, 1047, 1051, 1052], "alongsid": [83, 382, 388, 396, 400, 423, 832, 833, 834, 835, 836, 838, 1008, 1015, 1027, 1028], "alonso": [1050, 1052], "aloqe": 1057, "alpaydin": 379, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 80, 87, 91, 95, 100, 109, 115, 118, 123, 125, 126, 128, 129, 131, 132, 137, 139, 140, 146, 150, 153, 154, 155, 157, 158, 159, 172, 174, 177, 179, 180, 181, 182, 183, 185, 186, 190, 197, 198, 199, 200, 202, 203, 204, 205, 206, 211, 212, 214, 215, 217, 218, 219, 221, 222, 226, 229, 230, 235, 237, 238, 241, 249, 250, 257, 260, 275, 276, 277, 278, 279, 282, 283, 285, 287, 288, 294, 295, 298, 300, 303, 305, 310, 312, 315, 316, 317, 318, 320, 322, 325, 327, 328, 331, 336, 338, 342, 343, 346, 347, 349, 350, 352, 353, 354, 356, 369, 377, 384, 388, 394, 416, 417, 419, 421, 423, 424, 426, 452, 477, 478, 484, 534, 538, 540, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 567, 602, 603, 605, 618, 620, 622, 623, 630, 638, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 694, 730, 755, 846, 847, 848, 850, 868, 869, 907, 919, 920, 921, 922, 997, 1004, 1008, 1010, 1012, 1016, 1021, 1022, 1023, 1024, 1036, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "alpha_": [43, 115, 163, 190, 198, 204, 206, 478, 618, 651, 652, 654, 658, 660, 662, 663, 668, 670, 680, 682, 1004, 1024, 1039, 1046], "alpha_1": [651, 652, 1004], "alpha_2": [651, 652, 1004], "alpha_a": 206, "alpha_b": 206, "alpha_bound": [183, 630], "alpha_h": [54, 419, 545, 547, 554, 1052], "alpha_i": [1010, 1023], "alpha_init": [198, 652, 1004, 1049], "alpha_max": [653, 654, 659, 660, 667, 668, 669, 670, 688, 691], "alpha_min": [653, 654, 657, 659, 660, 661, 663, 667, 668, 669, 670, 688, 689, 690, 691], "alpha_per_target": [680, 1051], "alpha_w": [54, 419, 545, 547, 554, 1052], "alphabet": [106, 396, 729, 748], "alphalpha": 57, "alphanumer": [396, 595, 596, 598], "alphas_": [204, 206, 654, 657, 658, 660, 661, 662, 663, 668, 670, 689, 690, 1039, 1042, 1052], "alphas_enet": 205, "alphas_lar": 205, "alphas_lasso": 205, "alphas_positive_enet": 205, "alphas_positive_lar": 205, "alphas_positive_lasso": 205, "alphavantag": 51, "alphonsu": 1049, "alreadi": [2, 43, 45, 49, 90, 93, 120, 128, 137, 153, 158, 172, 190, 245, 252, 254, 257, 269, 276, 282, 295, 327, 330, 382, 383, 387, 394, 396, 412, 413, 416, 418, 420, 421, 426, 443, 498, 506, 530, 540, 574, 575, 641, 653, 656, 671, 672, 673, 674, 675, 681, 683, 684, 685, 692, 693, 775, 785, 846, 866, 874, 880, 881, 883, 888, 908, 911, 912, 940, 966, 997, 1000, 1014, 1018, 1019, 1028, 1036, 1040, 1044, 1047, 1051, 1052, 1053, 1054], "alsadi": 1047, "alsaedi": 1052, "alsalhi": [0, 1042, 1043], "alsawadi": 1052, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 81, 83, 88, 92, 93, 95, 99, 104, 105, 111, 113, 117, 118, 123, 130, 132, 137, 140, 143, 145, 147, 148, 149, 150, 151, 153, 156, 158, 168, 169, 170, 172, 174, 176, 179, 186, 187, 190, 191, 192, 193, 195, 198, 199, 201, 206, 209, 210, 213, 217, 218, 219, 221, 222, 226, 234, 235, 237, 247, 249, 251, 254, 255, 266, 269, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 288, 289, 292, 294, 295, 303, 306, 307, 308, 310, 315, 316, 317, 319, 320, 324, 325, 326, 327, 331, 332, 339, 341, 342, 343, 345, 347, 349, 356, 357, 358, 360, 361, 364, 365, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 388, 390, 391, 394, 395, 396, 397, 400, 402, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 443, 444, 445, 447, 448, 451, 452, 453, 454, 456, 458, 468, 469, 471, 473, 488, 490, 499, 503, 505, 510, 515, 539, 540, 542, 543, 548, 553, 556, 558, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 614, 615, 616, 617, 618, 629, 639, 640, 642, 650, 651, 652, 653, 654, 657, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 679, 683, 685, 688, 691, 694, 698, 701, 702, 706, 717, 720, 723, 730, 736, 737, 745, 750, 770, 786, 787, 790, 791, 794, 804, 805, 807, 809, 810, 811, 821, 824, 827, 833, 834, 835, 836, 837, 838, 840, 850, 853, 854, 855, 857, 858, 859, 861, 862, 863, 867, 868, 869, 871, 873, 874, 879, 880, 884, 888, 891, 896, 900, 913, 916, 919, 920, 921, 922, 930, 937, 955, 957, 964, 971, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "alt": [57, 276, 338, 356, 357, 358, 377, 390, 494], "altai": 1049, "alter": [62, 186, 384, 396, 736, 737, 745, 790, 791, 794, 1044, 1048, 1051], "altern": [43, 63, 105, 118, 144, 145, 151, 153, 158, 192, 202, 217, 235, 245, 263, 266, 269, 284, 324, 349, 356, 357, 358, 365, 377, 380, 382, 386, 388, 394, 396, 397, 400, 408, 409, 411, 412, 414, 415, 416, 418, 419, 421, 422, 424, 447, 448, 451, 452, 453, 458, 464, 469, 506, 545, 547, 548, 554, 560, 561, 564, 565, 566, 567, 571, 572, 573, 589, 595, 596, 598, 624, 627, 650, 699, 713, 715, 778, 781, 785, 788, 809, 840, 875, 881, 884, 897, 904, 906, 919, 920, 921, 922, 974, 1002, 1004, 1005, 1007, 1008, 1011, 1012, 1016, 1018, 1020, 1021, 1023, 1024, 1028, 1034, 1044, 1046, 1052, 1053, 1057], "alternate_sign": [47, 422, 589, 596, 1046], "although": [43, 48, 62, 144, 158, 189, 214, 235, 244, 262, 294, 349, 365, 371, 384, 386, 390, 396, 414, 415, 419, 422, 503, 882, 1007, 1009, 1010, 1011, 1014, 1024, 1039, 1047, 1054], "altman": [635, 998], "altogeth": [147, 388, 1047], "alva": 1049, "alvaro": [1045, 1047], "alvin": 1047, "alwai": [143, 147, 150, 190, 197, 217, 235, 242, 248, 269, 278, 281, 285, 322, 342, 349, 352, 357, 365, 369, 370, 376, 380, 382, 383, 384, 388, 390, 395, 396, 400, 408, 412, 414, 415, 418, 421, 422, 423, 424, 431, 437, 449, 455, 470, 471, 473, 475, 488, 489, 490, 494, 503, 515, 516, 551, 556, 558, 559, 561, 563, 565, 566, 567, 568, 569, 571, 572, 575, 577, 588, 595, 596, 598, 601, 618, 634, 635, 637, 639, 640, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 680, 683, 685, 686, 702, 712, 716, 722, 728, 729, 730, 731, 739, 741, 742, 746, 789, 792, 793, 804, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 844, 845, 854, 855, 862, 863, 869, 876, 884, 889, 891, 894, 896, 897, 898, 899, 900, 901, 902, 904, 912, 913, 914, 916, 917, 919, 920, 922, 956, 966, 967, 997, 998, 1000, 1002, 1004, 1007, 1008, 1011, 1014, 1016, 1020, 1021, 1023, 1024, 1032, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "always_accept_polici": 269, "always_reject_polici": 269, "alyssa": [1042, 1046], "alyssaq": 1045, "am": [104, 109, 113, 158, 191, 356, 387, 416, 480, 500, 1046], "amai": 1055, "aman": [1045, 1046, 1047, 1053, 1054], "amanda": [1047, 1050, 1051, 1052, 1053], "amar": [1053, 1054, 1055, 1057], "amax": 111, "amazon": 51, "amber": 396, "ambient": 241, "ambigu": [276, 387, 422, 579, 719, 955, 1011, 1048, 1050, 1052], "ambival": 95, "ambrosio": 1046, "ambroz": [1049, 1050], "amelia": 998, "amen": [388, 394, 424, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 997], "america": [50, 51, 113, 308, 377, 858, 1018], "american": [50, 51, 104, 114, 377, 414, 416, 420, 421, 422, 475, 480, 738, 891], "amerr": 1057, "ames_h": 254, "amg": [81, 101, 414, 458, 468, 698, 702, 1049, 1053, 1054], "amherst": 377, "ami": [72, 84, 93, 414, 711], "amicel": [1039, 1042], "amin": 111, "aminaka": 1043, "amit": [1039, 1053, 1054], "amlan": 1045, "amo": 1042, "amol": 1052, "among": [2, 64, 182, 191, 193, 195, 217, 265, 282, 294, 364, 371, 377, 384, 396, 397, 412, 417, 453, 455, 519, 526, 801, 836, 854, 859, 861, 913, 916, 919, 920, 921, 922, 997, 1000, 1008, 1009, 1015, 1018, 1023, 1024, 1039, 1045, 1046, 1049, 1056], "amongst": [51, 1024], "amor": [0, 393, 1053, 1054, 1055, 1056, 1057], "amormachin": 1042, "amort": 1011, "amount": [37, 38, 47, 51, 80, 88, 101, 111, 114, 123, 127, 138, 140, 180, 190, 202, 221, 235, 249, 269, 288, 326, 332, 334, 337, 339, 345, 352, 358, 369, 370, 371, 394, 414, 416, 419, 421, 422, 423, 449, 460, 475, 545, 546, 548, 550, 570, 603, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 672, 688, 691, 699, 810, 811, 851, 852, 857, 892, 907, 908, 921, 922, 997, 1003, 1004, 1007, 1010, 1012, 1018, 1020, 1021, 1022, 1023, 1052, 1056], "amount_fraud": 269, "amount_iter": 337, "amount_label": 337, "amount_test": 269, "amount_train": 269, "amourav": 1048, "amplitud": [150, 179, 181, 211, 1004], "amplitude_nois": 75, "amput": 1028, "amrcod": 1053, "amsterdam": [408, 879, 1019], "amy12xx": 1051, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 161, 168, 172, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 189, 190, 191, 192, 195, 196, 197, 198, 201, 202, 204, 205, 212, 217, 218, 219, 221, 222, 224, 225, 231, 233, 234, 235, 237, 238, 239, 240, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 258, 260, 261, 263, 265, 266, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 288, 294, 295, 298, 301, 302, 303, 306, 308, 315, 320, 321, 322, 325, 326, 327, 329, 330, 331, 332, 335, 339, 341, 342, 344, 345, 347, 348, 349, 356, 357, 358, 360, 363, 364, 365, 369, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 395, 396, 397, 399, 400, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 435, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 582, 583, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 617, 618, 619, 626, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 716, 718, 719, 725, 727, 728, 734, 736, 737, 741, 742, 744, 749, 750, 752, 753, 755, 757, 758, 760, 763, 765, 766, 770, 771, 773, 774, 775, 776, 777, 780, 782, 783, 784, 785, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 934, 935, 937, 938, 940, 941, 944, 945, 949, 950, 951, 953, 954, 955, 957, 959, 960, 963, 964, 965, 966, 967, 968, 970, 971, 972, 977, 978, 981, 982, 988, 991, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "ana": [1050, 1052, 1057], "anaconda": [0, 370, 380, 386], "anak": 1051, "analog": [43, 57, 152, 388, 421, 1008, 1009, 1023, 1048], "analogi": [1007, 1008], "analys": [237, 364, 419, 810, 811, 1005, 1027, 1032], "analysen": 456, "analysi": [2, 12, 27, 44, 46, 48, 49, 58, 62, 65, 71, 92, 98, 100, 111, 112, 113, 114, 115, 120, 121, 122, 124, 125, 127, 128, 129, 131, 132, 147, 164, 186, 187, 190, 206, 238, 259, 261, 265, 266, 269, 272, 275, 276, 280, 286, 296, 297, 298, 306, 307, 315, 320, 352, 357, 374, 377, 379, 382, 384, 397, 411, 414, 416, 421, 422, 426, 445, 453, 454, 479, 481, 482, 488, 489, 491, 509, 511, 519, 522, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 562, 563, 638, 645, 695, 697, 698, 699, 700, 717, 726, 732, 733, 763, 795, 796, 799, 800, 804, 807, 833, 837, 853, 860, 871, 872, 877, 887, 891, 899, 954, 955, 998, 1004, 1005, 1007, 1008, 1018, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1039, 1040, 1041, 1043, 1048], "analyst": 874, "analyt": [128, 419, 424, 539, 627, 715, 998, 1002, 1008, 1026, 1032], "analyz": [43, 46, 55, 202, 277, 284, 329, 356, 358, 387, 388, 414, 422, 510, 595, 596, 598, 795, 1005, 1008, 1015, 1016, 1024, 1039, 1048], "anam": 1056, "anand": [1047, 1051], "ananiad": 1022, "anantharam": 1053, "anavelyz": 1052, "ana\u00ebl": 1049, "anbari": 535, "anchor": 286, "ander": [1043, 1049], "andersen": [750, 1053], "anderson": [50, 308, 377, 505, 1045, 1051, 1057], "andi": [1039, 1046], "ando": 1044, "andr": [1046, 1053], "andrea": [0, 397, 403, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "andreh7": 1046, "andrei": [1054, 1056, 1057], "andrew": [414, 468, 698, 702, 724, 744, 802, 886, 1012, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "andrewww": 1047, "andrii": 1053, "andriushchenko": [1045, 1046], "androutsopoulo": [846, 1010], "andrzej": [545, 547, 554], "andr\u00e1": [1052, 1053, 1054, 1055], "andr\u00e9": [1052, 1053, 1055], "ands": 882, "andyscanzio": 1056, "ang": 1046, "angel": [0, 404], "angela": [1049, 1050, 1054], "angelaambroz": 1050, "angelotti": 1058, "angermuel": [1043, 1044], "angl": [2, 53, 70, 126, 172, 260, 261, 262, 265, 266, 379, 419, 538, 544, 546, 549, 550, 552, 553, 555, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 685, 689, 690, 691, 692, 693, 699, 1005, 1006, 1030, 1034, 1039], "angmar": 57, "angu": [1046, 1047, 1053], "angular": [420, 699, 771], "anh": [545, 547, 554], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 81, 90, 92, 102, 155, 167, 172, 180, 181, 189, 190, 191, 192, 193, 206, 217, 221, 235, 244, 247, 248, 251, 261, 265, 266, 269, 275, 276, 278, 281, 284, 292, 308, 315, 316, 319, 324, 326, 327, 329, 332, 345, 349, 358, 365, 369, 370, 371, 376, 377, 379, 380, 382, 384, 386, 387, 388, 390, 395, 396, 397, 400, 402, 405, 408, 410, 411, 412, 414, 415, 418, 419, 420, 421, 422, 423, 439, 446, 452, 454, 455, 456, 458, 460, 462, 463, 467, 470, 473, 494, 495, 515, 516, 530, 541, 544, 546, 553, 558, 564, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 586, 587, 589, 595, 596, 598, 600, 610, 617, 618, 627, 634, 639, 640, 652, 655, 665, 666, 673, 674, 675, 676, 683, 684, 685, 686, 687, 699, 703, 706, 707, 711, 723, 724, 726, 731, 743, 744, 759, 762, 764, 781, 785, 786, 787, 788, 799, 800, 802, 807, 810, 811, 819, 820, 840, 843, 851, 852, 857, 861, 870, 871, 875, 876, 880, 882, 884, 885, 892, 901, 902, 905, 908, 911, 912, 919, 920, 921, 922, 923, 925, 933, 937, 938, 944, 977, 991, 997, 998, 1000, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1031, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "aniket": [1054, 1056], "anil": [414, 458, 468], "anim": [356, 422], "anirban": 422, "aniruddha": 1047, "anish": [1044, 1045], "anisha": 1049, "aniso": [79, 97], "anisotrop": [92, 176, 424, 624, 626, 629], "anisotropicli": [79, 97], "anjirbag": 1047, "ankan": 1044, "ankerst": [414, 456, 463], "ankit": [1042, 1049, 1051, 1053], "ankit810": 1050, "ankita": 1047, "ankur": [1044, 1055], "ann": [1039, 1051, 1053], "anna": 1047, "annaayzenshtat": 1047, "annal": [172, 202, 204, 379, 421, 480, 523, 524, 525, 566, 567, 663, 1004], "annau": 1052, "annegnx": 1055, "anno": [699, 1005], "annoi": 370, "annot": [2, 43, 48, 63, 160, 170, 195, 238, 279, 282, 356, 382, 383, 384, 414, 723, 925, 1008, 1024, 1048], "annotationbbox": 238, "announc": [0, 324, 325, 326, 327, 328, 329, 330, 331, 332, 386], "annual": [379, 414, 733, 763, 908, 1008, 1021], "anomali": [14, 48, 113, 154, 187, 231, 243, 254, 301, 302, 377, 475, 519, 529, 570, 646, 684, 857, 872, 915, 1014, 1027, 1029, 1045, 1046], "anomaly_algorithm": 244, "anomaly_frac": 254, "anoth": [43, 72, 123, 128, 137, 148, 152, 172, 174, 182, 186, 190, 206, 221, 225, 242, 244, 251, 255, 261, 269, 275, 277, 278, 281, 285, 289, 305, 356, 358, 360, 365, 369, 371, 376, 377, 380, 382, 384, 388, 394, 396, 408, 411, 414, 418, 419, 421, 422, 423, 425, 448, 450, 458, 461, 468, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 515, 545, 547, 554, 680, 683, 699, 716, 726, 813, 829, 830, 870, 871, 892, 997, 998, 1003, 1004, 1005, 1008, 1009, 1011, 1014, 1018, 1022, 1023, 1048, 1049, 1056], "anova": [2, 49, 89, 108, 166, 168, 171, 172, 187, 340, 415, 451, 511, 522, 599, 602, 603, 605, 606, 607, 611, 612, 613, 616, 720, 833, 837, 871, 872, 891, 911, 916, 1023, 1029], "anova__percentil": [89, 348], "anova_filt": 169, "anova_svm": 169, "ansam": 1055, "answer": [163, 189, 275, 382, 394, 408, 413, 733, 763, 1008, 1032], "ant": [725, 761, 1008], "anthoni": [1044, 1046, 1047], "anthony22": [1054, 1055], "anti": [202, 365, 613, 846, 1010], "anti_alias": [81, 82], "anticip": 52, "antoin": [1039, 1041, 1042, 1043, 1046, 1058], "antoni": [1043, 1045, 1051, 1054, 1058], "antonin": 1046, "antonio": [1047, 1049], "anubhav": 1047, "anuja": 1049, "anulekh": 1054, "anupam": [905, 1020, 1054], "anurag": 1058, "any_method": 967, "anymor": [153, 192, 217, 277, 324, 325, 345, 365, 386, 415, 434, 677, 1045, 1048, 1051, 1052, 1053, 1055, 1056, 1058], "anyon": [382, 397, 413, 1031, 1032], "anyth": [358, 388, 396, 405, 415, 418, 967, 971, 1053], "anywai": [48, 356, 384, 672, 692, 693], "anywher": 316, "anz": 1040, "aoif": [715, 1008], "ap": [2, 282, 714, 715, 1008], "apart": [190, 327, 345, 394, 396, 405, 415, 417, 423, 732, 1023, 1032, 1047], "api": [0, 47, 51, 85, 91, 134, 142, 182, 187, 243, 245, 251, 255, 256, 272, 277, 284, 285, 295, 331, 332, 357, 358, 371, 375, 376, 382, 385, 386, 391, 392, 394, 395, 397, 400, 408, 413, 419, 421, 422, 424, 428, 431, 432, 433, 436, 438, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 503, 511, 515, 517, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 570, 571, 573, 574, 575, 576, 577, 586, 587, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 665, 678, 684, 695, 696, 697, 698, 699, 709, 804, 805, 810, 811, 813, 830, 837, 855, 857, 859, 860, 863, 867, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 915, 916, 930, 949, 950, 973, 991, 997, 1006, 1007, 1008, 1011, 1018, 1022, 1027, 1028, 1029, 1032, 1034, 1036, 1037, 1038, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "api_refer": 382, "apk": 400, "apostolo": 1054, "appar": [117, 1010, 1032], "appdata": 400, "appeal": 397, "appear": [0, 47, 81, 83, 140, 190, 193, 270, 272, 273, 301, 302, 310, 312, 316, 335, 349, 356, 357, 358, 377, 380, 382, 387, 396, 416, 419, 494, 495, 562, 574, 575, 586, 617, 634, 635, 637, 704, 707, 709, 719, 723, 725, 789, 796, 808, 825, 846, 847, 848, 849, 850, 913, 916, 957, 1004, 1010, 1014, 1039, 1047, 1051, 1052], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 85, 96, 105, 130, 140, 141, 143, 148, 150, 153, 186, 193, 210, 221, 222, 224, 225, 232, 235, 249, 250, 275, 278, 284, 285, 310, 311, 321, 337, 345, 348, 356, 357, 358, 360, 364, 388, 396, 415, 422, 665, 666, 911, 912, 918, 945, 1018], "appendix": [652, 683, 1004, 1018], "appl": [51, 369, 380, 394, 1009], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 81, 82, 90, 91, 93, 97, 105, 109, 118, 120, 123, 124, 129, 131, 133, 142, 143, 148, 150, 168, 174, 190, 192, 202, 206, 221, 222, 231, 237, 238, 239, 244, 249, 251, 275, 276, 278, 287, 288, 289, 294, 304, 315, 319, 320, 325, 345, 349, 358, 364, 365, 369, 374, 382, 384, 386, 390, 394, 395, 396, 405, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 446, 452, 458, 468, 470, 471, 473, 475, 480, 488, 489, 490, 491, 515, 516, 523, 524, 525, 531, 538, 539, 540, 541, 542, 544, 546, 548, 549, 550, 555, 556, 557, 560, 561, 564, 565, 566, 567, 571, 572, 573, 595, 596, 597, 598, 634, 639, 640, 645, 646, 648, 649, 665, 666, 675, 683, 684, 685, 698, 706, 708, 714, 718, 733, 763, 765, 766, 788, 795, 799, 800, 807, 821, 837, 840, 846, 847, 848, 849, 850, 860, 870, 871, 880, 887, 888, 891, 896, 897, 899, 900, 901, 902, 907, 918, 919, 920, 921, 922, 932, 937, 943, 947, 954, 955, 979, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1032, 1040, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053], "applic": [42, 44, 57, 84, 90, 113, 187, 195, 217, 234, 239, 268, 269, 278, 315, 332, 369, 371, 377, 379, 382, 388, 390, 391, 394, 396, 412, 413, 414, 418, 419, 420, 421, 424, 426, 450, 452, 458, 503, 539, 540, 541, 560, 561, 636, 695, 696, 697, 701, 719, 736, 737, 745, 790, 791, 794, 837, 931, 997, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1020, 1024, 1027, 1028, 1029, 1031, 1032, 1039, 1040, 1045, 1047, 1050], "apply_along_axi": 313, "appr": 626, "appreci": [0, 382, 394], "approach": [44, 47, 93, 98, 101, 127, 172, 174, 185, 190, 193, 200, 204, 217, 219, 225, 235, 237, 269, 292, 321, 349, 356, 357, 358, 371, 381, 382, 388, 391, 396, 400, 402, 408, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 443, 449, 452, 454, 458, 468, 527, 539, 589, 596, 618, 642, 665, 666, 681, 682, 840, 856, 955, 997, 998, 1004, 1005, 1008, 1009, 1011, 1012, 1018, 1022, 1023, 1026, 1027, 1032, 1043, 1055], "appropri": [25, 90, 92, 130, 179, 190, 221, 251, 284, 289, 332, 360, 365, 382, 384, 390, 396, 408, 412, 414, 418, 420, 421, 425, 450, 456, 463, 495, 496, 497, 503, 507, 508, 509, 511, 512, 517, 584, 589, 598, 599, 602, 603, 605, 606, 607, 679, 681, 694, 716, 853, 854, 855, 857, 859, 861, 862, 863, 991, 1004, 1007, 1008, 1018, 1043, 1046, 1052, 1055, 1057], "approv": [382, 397, 421], "approx": [64, 123, 249, 419, 421, 422, 1008, 1015, 1022], "approxim": [0, 2, 23, 43, 44, 64, 69, 81, 88, 113, 127, 128, 132, 141, 149, 150, 172, 175, 190, 198, 213, 217, 218, 231, 235, 239, 242, 243, 244, 247, 250, 266, 275, 280, 290, 296, 297, 304, 315, 317, 318, 320, 324, 327, 356, 358, 362, 363, 365, 374, 379, 391, 394, 396, 411, 412, 415, 417, 418, 419, 421, 424, 426, 427, 428, 438, 455, 475, 476, 479, 480, 481, 482, 488, 489, 490, 497, 503, 509, 528, 531, 540, 541, 542, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 566, 567, 589, 596, 617, 618, 626, 645, 646, 647, 648, 649, 652, 664, 665, 666, 679, 681, 683, 684, 686, 694, 699, 765, 766, 771, 804, 808, 825, 832, 836, 837, 851, 852, 855, 859, 861, 862, 863, 867, 871, 872, 877, 881, 883, 884, 888, 900, 911, 916, 917, 954, 955, 981, 1001, 1002, 1003, 1004, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1027, 1028, 1029, 1034, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "approximate_nearest_neighbor": [295, 1029], "approximateident": 1040, "april": [377, 671, 692, 693, 1008, 1043, 1051, 1056], "apriori": 235, "apt": [380, 390, 400], "aptitud": 190, "aqua": 284, "aquantitypredict": 402, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 101, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 125, 128, 130, 133, 135, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 168, 169, 171, 172, 174, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 226, 228, 235, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 261, 262, 263, 265, 268, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 300, 301, 305, 308, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 343, 345, 347, 349, 352, 353, 356, 357, 358, 360, 364, 365, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 396, 397, 400, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 434, 435, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 516, 517, 519, 522, 523, 524, 525, 526, 527, 530, 531, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 716, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 747, 748, 749, 750, 752, 753, 755, 757, 758, 760, 761, 763, 764, 768, 769, 770, 772, 774, 775, 776, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 819, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 933, 934, 935, 937, 938, 941, 942, 943, 947, 949, 950, 954, 955, 956, 959, 960, 961, 963, 964, 967, 970, 971, 973, 978, 981, 982, 986, 987, 988, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "arab": 634, "arabi": [414, 712, 722, 793], "aradwad": 1050, "arafat": 1045, "arai": 1049, "arang": [43, 50, 52, 53, 75, 93, 95, 100, 107, 112, 113, 130, 133, 146, 147, 149, 151, 152, 156, 160, 168, 174, 176, 181, 182, 185, 186, 193, 202, 217, 220, 222, 226, 240, 247, 249, 270, 275, 278, 283, 286, 294, 295, 308, 310, 317, 327, 334, 335, 337, 339, 345, 351, 356, 358, 362, 363, 364, 365, 394, 411, 418, 422, 471, 551, 837, 886, 890, 1003, 1004, 1012, 1018, 1022], "aravindh": 1054, "arbitarili": 356, "arbitrari": [2, 43, 52, 90, 118, 123, 124, 125, 142, 181, 197, 217, 234, 235, 273, 315, 319, 321, 326, 332, 356, 364, 382, 394, 396, 408, 415, 418, 419, 421, 422, 426, 452, 456, 461, 463, 471, 539, 540, 566, 567, 588, 646, 655, 676, 687, 695, 749, 796, 808, 809, 814, 816, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 875, 877, 890, 997, 999, 1000, 1004, 1005, 1008, 1011, 1018, 1028, 1039, 1040, 1043, 1045, 1046, 1047, 1049, 1053, 1055, 1058], "arbitrarili": [175, 261, 266, 356, 396, 424, 437, 471, 488, 489, 490, 559, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 685, 686, 687, 728, 729, 730, 731, 753, 792, 796, 844, 845, 854, 862, 869, 892, 912, 914, 917, 920, 922, 1008, 1011, 1018, 1024], "arc": [379, 421], "archana": [1049, 1051], "archit": 1045, "architectur": [380, 384, 390, 394, 400, 408, 474, 909, 1012, 1032, 1039, 1056], "archiv": [47, 292, 376, 377, 379, 380, 414, 448, 507, 509, 517, 765, 766, 1006, 1023], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [715, 1008], "arcidiacono": [1053, 1054, 1056, 1057], "arcsin": [706, 771], "arctan": [70, 261, 266, 378, 525], "arctan2": [260, 262, 265], "ard": [2, 197, 651, 652], "ard_poli": 197, "ard_scor": 197, "ardregress": [2, 197, 202, 652, 947, 1004, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056], "area": [2, 50, 52, 154, 172, 217, 235, 254, 272, 275, 282, 284, 285, 345, 349, 350, 353, 379, 382, 386, 394, 414, 422, 709, 713, 714, 715, 795, 796, 1005, 1008, 1011, 1026, 1041], "aren": [16, 251, 356, 377, 386, 400, 733, 763, 1013, 1049, 1051], "arezki": 1039, "arfa": 1045, "arff": [329, 382, 503, 1051, 1054, 1055], "arg": [251, 311, 349, 383, 396, 419, 421, 428, 706, 875, 973, 975, 1004, 1010, 1011], "arg_sort_bi": 52, "argentina": 771, "argmax": [63, 130, 274, 288, 384, 421, 576, 839, 919, 1023, 1052], "argmin": [51, 149, 274, 384, 416, 538, 544, 552, 553, 692, 786, 787, 1024], "argpartit": 1046, "argsort": [54, 55, 57, 58, 59, 149, 151, 192, 193, 217, 235, 324, 334, 335, 356, 357, 377, 1016], "argument": [2, 106, 151, 193, 218, 245, 248, 251, 324, 370, 376, 377, 382, 383, 385, 387, 388, 390, 391, 394, 396, 414, 415, 418, 419, 421, 423, 425, 426, 428, 432, 436, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 463, 465, 467, 469, 470, 474, 475, 500, 503, 510, 515, 540, 542, 543, 545, 547, 558, 566, 567, 570, 574, 575, 576, 577, 584, 588, 589, 595, 596, 598, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 638, 646, 650, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 673, 675, 683, 684, 688, 691, 695, 699, 703, 705, 706, 707, 708, 709, 721, 726, 742, 749, 770, 786, 787, 813, 830, 832, 833, 834, 835, 836, 838, 839, 840, 843, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 868, 871, 875, 909, 915, 925, 935, 945, 950, 974, 976, 977, 991, 997, 1000, 1004, 1005, 1006, 1008, 1011, 1015, 1016, 1023, 1024, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "argv": 248, "ari": [72, 93, 357, 414, 712, 1044, 1050], "aria": [1047, 1048, 1054], "aric": 55, "arida": [1048, 1049, 1051, 1053, 1056], "ariel": [45, 377, 1039, 1045], "arif": [1057, 1058], "ariga": 1045, "arik": 1047, "arima": 1027, "aris": [2, 190, 278, 352, 370, 387, 390, 414, 722, 1004, 1005, 1051], "arisa": [1053, 1054], "arithmet": [250, 388, 390, 414, 558, 655, 676, 687, 711, 724, 743, 744, 764, 802, 858, 1008, 1047], "ari\u00f1o": 1042, "arjona": 1048, "arka204": [1052, 1054], "arm": [380, 382, 390, 997], "arm64": [380, 385], "arm64v8": 390, "armstrong": 1051, "arnaud": [0, 404, 1040, 1041, 1042, 1043, 1044, 1045, 1057], "arnaudov": [1051, 1053], "arnaudstiegl": 1049, "arnold": [1039, 1040], "arnoldi": [695, 696, 700], "aroma": 321, "arora": [1047, 1054], "around": [0, 43, 63, 72, 87, 117, 137, 140, 150, 180, 191, 195, 251, 254, 269, 278, 289, 313, 334, 336, 337, 345, 348, 349, 356, 357, 358, 364, 365, 377, 379, 382, 388, 394, 402, 413, 414, 418, 419, 422, 477, 478, 522, 551, 627, 647, 656, 675, 711, 749, 804, 813, 830, 857, 859, 861, 862, 863, 891, 1004, 1005, 1007, 1008, 1014, 1018, 1022, 1027, 1028, 1031, 1032, 1043, 1044], "arpack": [51, 57, 79, 81, 101, 104, 238, 331, 419, 457, 458, 459, 468, 542, 548, 551, 695, 696, 698, 700, 702, 1005, 1045, 1046, 1051, 1055, 1056, 1057], "arpanchowdhri": 1049, "arr": 332, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 81, 83, 88, 89, 96, 97, 99, 104, 106, 114, 117, 121, 124, 125, 149, 151, 153, 154, 157, 160, 169, 172, 175, 176, 177, 182, 190, 197, 199, 202, 210, 211, 214, 217, 218, 224, 234, 238, 239, 244, 248, 251, 254, 255, 258, 260, 261, 262, 264, 265, 269, 270, 271, 273, 275, 276, 279, 280, 284, 294, 308, 318, 324, 327, 328, 330, 331, 335, 341, 348, 349, 356, 363, 365, 369, 370, 375, 376, 377, 382, 383, 384, 385, 387, 388, 390, 392, 394, 395, 396, 408, 411, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 522, 526, 530, 531, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 588, 589, 590, 591, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 930, 933, 934, 935, 936, 937, 938, 939, 942, 943, 953, 954, 955, 956, 957, 959, 961, 962, 969, 970, 971, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 996, 998, 1003, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1032, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "arrang": [2, 58, 294, 639, 842, 843, 844, 845, 1008], "array_api": [410, 1058], "array_api_compat": [410, 1058], "array_api_dispatch": [410, 474, 909], "array_api_support": [410, 930], "array_convert": 938, "array_equ": [576, 1046], "array_lik": 953, "array_paramet": 382, "array_sym": 993, "arrayfunc": [2, 391, 934], "arrow": [63, 402, 1053], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1053, "art": [326, 388, 656, 699, 1032], "artem": [1043, 1046, 1056], "arth": 1053, "arthur": [414, 453, 466, 1044, 1045, 1046, 1047, 1048, 1051, 1053], "arthurmello": 1053, "articl": [0, 55, 104, 356, 377, 381, 382, 390, 418, 427, 481, 712, 1004, 1008, 1052], "artiem": 1047, "artifact": [43, 53, 81, 82, 315, 371, 386, 1034], "artifici": [10, 144, 147, 155, 172, 186, 221, 237, 250, 269, 313, 356, 377, 378, 379, 387, 411, 414, 418, 419, 542, 703, 841, 868, 869, 1001, 1005, 1007, 1009, 1015, 1020, 1024, 1028, 1032, 1039], "artist": [245, 389, 444, 639, 705, 707, 708, 709, 813, 830, 925], "artsiom": 1046, "artsion": 1045, "artstein": 723, "artur": [1054, 1055], "arturo": [0, 393, 1053, 1054, 1055, 1056, 1057], "arturoamor": 1053, "aruku": [1047, 1048], "arunav": 1050, "arunava": 1047, "arxiv": [382, 468], "arya": 1047, "as_float_arrai": [2, 391, 1058], "as_fram": [43, 44, 105, 109, 143, 147, 153, 158, 179, 190, 191, 192, 193, 204, 206, 217, 225, 233, 235, 254, 258, 269, 289, 292, 295, 298, 312, 320, 321, 324, 326, 328, 329, 376, 377, 495, 496, 497, 499, 503, 507, 508, 509, 511, 512, 517, 1049, 1050, 1051, 1052, 1055], "asanyarrai": 384, "asarrai": [47, 55, 217, 235, 313, 336, 356, 357, 384, 396, 410, 733, 763, 859, 861, 862, 863, 1018, 1023, 1056], "ascend": [58, 105, 192, 321, 421, 456, 462, 601, 634, 642, 923, 924, 925, 1022, 1049, 1055], "ascent": [179, 424], "ascii": [50, 308, 422, 493, 595, 596, 598], "ascontiguousarrai": 548, "asctim": 123, "aseem": 1046, "asgd": [224, 1022], "ash": [48, 379, 1042, 1045], "ashah002": [1054, 1055, 1056], "ashim": 1049, "ashimb9": 1049, "ashimin": 1052, "ashish": [1052, 1055], "ashra": 651, "ashutosh": [1046, 1047, 1049, 1051], "ashvith": 1052, "ashwin": [1054, 1055], "asia": [275, 1018], "asian": 422, "asid": [148, 225, 408, 566, 567, 568, 569, 673, 674, 675, 683, 685, 868, 869], "asish": [1045, 1046], "ask": [0, 185, 186, 275, 381, 382, 386, 387, 390, 396, 397, 408, 423, 853, 854, 855, 857, 859, 861, 862, 863, 1031, 1055], "asnt": 1045, "aspect": [46, 93, 118, 123, 178, 191, 237, 244, 284, 289, 304, 369, 370, 371, 382, 396, 397, 414, 497, 665, 666, 997, 1024, 1032, 1056], "aspir": [172, 379, 382], "ass": [113, 114, 416, 480], "assembl": [294, 322, 358, 871], "assert": [47, 55, 83, 124, 248, 275, 284, 370, 385, 1028], "assert_all_finit": [2, 369, 391, 474, 1058], "assert_allclos": 384, "assert_array_equ": 422, "assert_warn": 1052, "assert_warns_messag": 1052, "assertionerror": 1046, "assess": [44, 52, 72, 95, 137, 148, 150, 190, 217, 235, 254, 271, 272, 274, 278, 412, 421, 708, 750, 1007, 1008, 1014, 1028, 1054], "assia": 1048, "assiaben": 1048, "assign": [47, 55, 58, 70, 72, 81, 84, 92, 93, 95, 137, 142, 154, 156, 168, 170, 176, 230, 235, 244, 249, 252, 269, 310, 317, 322, 332, 339, 352, 357, 377, 382, 384, 396, 411, 418, 419, 421, 422, 423, 424, 446, 447, 448, 449, 451, 452, 453, 454, 455, 458, 460, 462, 465, 466, 467, 468, 522, 543, 568, 569, 600, 601, 614, 615, 617, 665, 666, 673, 674, 675, 683, 684, 685, 711, 712, 722, 723, 724, 726, 727, 736, 737, 738, 745, 746, 750, 762, 764, 790, 791, 793, 794, 800, 801, 802, 807, 810, 811, 813, 816, 821, 830, 832, 833, 834, 835, 838, 855, 861, 863, 864, 865, 878, 906, 907, 911, 912, 913, 914, 915, 916, 917, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1018, 1021, 1032, 1039, 1044, 1046, 1047, 1056, 1057], "assign_label": [81, 414, 458, 468], "assist": [0, 382, 394, 413, 1018, 1031, 1032], "associ": [50, 61, 62, 113, 137, 174, 189, 190, 221, 263, 269, 321, 334, 336, 356, 390, 414, 416, 418, 419, 421, 422, 432, 452, 455, 475, 476, 477, 478, 479, 480, 481, 482, 500, 501, 502, 531, 564, 568, 571, 612, 613, 637, 652, 665, 666, 673, 675, 681, 682, 683, 696, 702, 706, 738, 746, 829, 834, 854, 862, 876, 888, 900, 908, 917, 919, 921, 943, 1007, 1008, 1011, 1018, 1021, 1032, 1039, 1051, 1055], "assum": [48, 70, 90, 92, 181, 186, 189, 190, 206, 217, 235, 244, 247, 254, 266, 275, 284, 315, 352, 358, 370, 381, 382, 384, 388, 394, 395, 396, 399, 408, 411, 412, 414, 416, 418, 419, 421, 422, 424, 425, 430, 435, 443, 445, 450, 452, 456, 463, 469, 475, 476, 477, 478, 479, 480, 481, 482, 510, 515, 516, 539, 549, 555, 556, 568, 569, 574, 575, 594, 595, 596, 598, 627, 639, 650, 651, 653, 654, 659, 665, 666, 667, 668, 669, 673, 674, 675, 678, 679, 683, 684, 685, 688, 692, 694, 695, 699, 716, 729, 733, 742, 748, 763, 771, 776, 781, 785, 788, 807, 810, 811, 821, 847, 853, 854, 857, 859, 861, 862, 867, 878, 891, 967, 983, 984, 985, 998, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1018, 1022, 1024, 1045, 1051], "assume_cent": [69, 112, 416, 427, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "assume_finit": [369, 370, 474, 909], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 111, 112, 126, 179, 183, 187, 189, 217, 244, 271, 294, 315, 388, 394, 395, 399, 412, 414, 416, 418, 419, 422, 424, 453, 457, 459, 494, 510, 519, 539, 541, 548, 657, 661, 805, 807, 810, 811, 821, 848, 903, 904, 1002, 1004, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1021, 1024, 1029, 1046, 1052], "assur": [0, 396, 804, 805, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "astel": 1047, "astolfi": 1039, "astrai": 396, "astroml": 1027, "astronom": 1026, "astronomi": 1027, "astropi": 382, "astyp": [43, 53, 72, 76, 79, 80, 88, 95, 97, 101, 114, 129, 147, 149, 165, 189, 191, 207, 208, 235, 240, 250, 254, 269, 286, 295, 322, 408, 422, 998, 1004, 1046], "asv": 382, "asv_benchmark": 382, "aswathavicki": 1057, "asymmetr": [150, 219, 396, 1044], "asymmetri": [219, 356], "asymptot": [111, 112, 206, 369, 416, 480, 543, 737, 1004, 1007, 1049], "atag": 182, "atanasoska": 1058, "atariah": 1048, "ateif": 1052, "atharva": 1053, "atheism": [57, 276, 338, 356, 357, 358, 377, 494], "atheist": 356, "athena": 1032, "ation": 422, "atla": [369, 380], "atleast_2d": [150, 384], "atmospher": 179, "atol": [384, 679, 681, 851, 852, 856], "atom": [126, 132, 419, 538, 544, 546, 549, 550, 552, 553, 660, 670, 691, 1004, 1039, 1052], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1051, 1052], "attach": [47, 356, 439, 856, 1040, 1050], "attack": [254, 377], "attalla": 1053, "attard": 1052, "attempt": [43, 89, 191, 213, 223, 270, 356, 369, 381, 396, 414, 426, 452, 456, 463, 470, 474, 638, 695, 696, 700, 825, 853, 854, 855, 857, 859, 861, 862, 863, 889, 891, 909, 937, 938, 1004, 1005, 1011, 1024, 1046, 1051, 1056], "attenberg": 422, "attent": [390, 614, 615, 1022], "attenu": 174, "attia": 804, "attr": [47, 91], "attract": [425, 450, 1002, 1011, 1027], "attractador": [1046, 1047], "attrgett": [600, 604], "attribut": [2, 47, 62, 68, 84, 105, 131, 135, 137, 144, 145, 148, 168, 172, 217, 225, 251, 265, 273, 274, 279, 287, 304, 308, 327, 349, 358, 364, 371, 375, 376, 377, 379, 382, 385, 389, 394, 408, 411, 412, 414, 415, 416, 417, 419, 421, 422, 423, 424, 429, 430, 431, 432, 433, 436, 437, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 517, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 586, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 624, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 743, 802, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 926, 928, 968, 991, 996, 1000, 1002, 1004, 1009, 1011, 1012, 1014, 1018, 1021, 1022, 1023, 1024, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "attributeerror": [415, 566, 584, 968, 1048, 1049, 1051, 1055, 1056], "attrselect": 1039, "atukorala": 1054, "atuo": [1055, 1056], "aubert": 1046, "auc": [2, 50, 62, 172, 217, 235, 254, 272, 275, 279, 282, 284, 285, 331, 412, 709, 715, 795, 1008, 1044, 1047, 1051], "auc_scor": [1039, 1041], "audio": [376, 510], "audrei": 1057, "aufarkari": 1053, "aug": 1023, "augment": [2, 337, 637, 893, 1016, 1032], "augspurg": [1047, 1049], "august": [172, 379, 414, 518, 541, 1023, 1039, 1041, 1042, 1046, 1053], "aura": 1051, "auroc": 1008, "aur\u00e9lien": [1046, 1047, 1048, 1052, 1053], "austin": 1046, "australian": [153, 400], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 376, 382, 385, 390, 394, 396, 397, 418, 457, 541, 878, 1000, 1027, 1042], "authorit": 397, "authorship": 386, "auto": [57, 69, 92, 93, 121, 172, 178, 201, 237, 242, 256, 295, 298, 303, 324, 325, 326, 327, 328, 329, 332, 341, 342, 348, 351, 358, 376, 377, 384, 421, 424, 425, 447, 450, 451, 452, 453, 455, 456, 458, 461, 462, 463, 465, 468, 503, 515, 516, 542, 545, 547, 548, 551, 554, 556, 564, 565, 568, 569, 570, 571, 572, 574, 600, 601, 604, 609, 614, 615, 636, 638, 639, 640, 642, 653, 654, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 679, 680, 681, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 707, 709, 806, 810, 811, 829, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 868, 869, 884, 885, 892, 903, 904, 908, 911, 912, 913, 914, 915, 916, 917, 921, 922, 954, 955, 973, 976, 999, 1002, 1004, 1005, 1011, 1018, 1027, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "auto_examples_jupyt": 187, "auto_examples_python": 187, "auto_viml": 1051, "auto_wrap_output_kei": 384, "autoclass": 379, "autocorrel": 418, "autolabel": 47, "autom": [276, 385, 386, 400, 699, 997, 1004, 1005, 1008, 1027, 1032], "automat": [2, 43, 47, 51, 52, 64, 81, 98, 100, 105, 130, 153, 163, 171, 197, 220, 260, 261, 269, 273, 276, 315, 322, 325, 329, 338, 347, 349, 370, 377, 380, 382, 384, 386, 390, 396, 400, 408, 410, 414, 415, 416, 419, 421, 422, 423, 438, 456, 458, 462, 468, 470, 471, 473, 503, 506, 522, 545, 547, 548, 554, 556, 558, 564, 568, 571, 590, 595, 598, 601, 609, 650, 652, 653, 654, 659, 660, 665, 666, 667, 668, 669, 670, 673, 674, 675, 679, 681, 682, 683, 685, 688, 691, 694, 695, 698, 702, 809, 824, 827, 837, 847, 868, 869, 872, 873, 875, 884, 885, 892, 903, 904, 911, 912, 913, 916, 919, 921, 925, 943, 978, 981, 996, 997, 999, 1002, 1007, 1012, 1018, 1022, 1024, 1027, 1028, 1039, 1042, 1043, 1044, 1050, 1053, 1054, 1055, 1056, 1057, 1058], "automl": [1008, 1027], "automobil": 1032, "autoregress": 377, "autoviml": 1027, "autoviz": 1051, "auxiliari": [186, 332, 380, 1032, 1054], "av": 1047, "avail": [0, 2, 44, 50, 51, 53, 76, 91, 92, 126, 145, 149, 153, 172, 174, 179, 183, 189, 190, 191, 206, 217, 225, 235, 238, 251, 254, 269, 272, 273, 278, 279, 282, 289, 300, 301, 302, 308, 320, 324, 325, 326, 327, 329, 330, 337, 339, 365, 369, 376, 377, 379, 380, 381, 382, 383, 386, 387, 391, 395, 396, 400, 408, 411, 414, 415, 418, 419, 420, 421, 422, 423, 425, 453, 456, 457, 458, 459, 475, 476, 477, 478, 479, 480, 481, 482, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 515, 542, 556, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 576, 577, 600, 601, 609, 617, 618, 634, 639, 640, 654, 658, 660, 662, 664, 668, 670, 672, 675, 677, 678, 679, 680, 681, 682, 683, 696, 703, 706, 739, 740, 807, 810, 811, 821, 833, 834, 839, 840, 841, 842, 843, 844, 845, 857, 868, 869, 871, 878, 887, 890, 895, 899, 904, 908, 963, 968, 997, 998, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1021, 1022, 1023, 1026, 1027, 1028, 1031, 1032, 1034, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1058], "available_if": [2, 91, 396, 1052, 1053, 1056], "avebedrm": [315, 377, 496], "aventi": 51, "aveoccup": [315, 326, 377, 496], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 87, 95, 97, 140, 141, 146, 150, 153, 154, 159, 160, 161, 172, 179, 191, 199, 206, 217, 224, 235, 254, 269, 278, 280, 283, 285, 289, 294, 315, 324, 330, 332, 338, 356, 365, 369, 377, 379, 384, 394, 411, 412, 416, 418, 422, 423, 425, 426, 443, 444, 447, 450, 451, 452, 453, 455, 496, 500, 501, 530, 538, 539, 540, 544, 545, 547, 548, 552, 553, 554, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 577, 594, 601, 639, 640, 655, 665, 666, 673, 674, 676, 679, 681, 683, 684, 685, 687, 694, 707, 710, 711, 713, 714, 715, 720, 727, 728, 730, 732, 733, 735, 736, 737, 741, 742, 743, 745, 746, 747, 750, 752, 753, 755, 757, 758, 760, 763, 771, 788, 789, 790, 791, 792, 794, 795, 797, 798, 802, 803, 804, 805, 835, 838, 857, 877, 892, 993, 998, 1003, 1004, 1009, 1012, 1014, 1015, 1022, 1023, 1024, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058], "average_bike_rent": 191, "average_coef_": 1050, "average_feature_effect": 356, "average_intercept_": 1050, "average_linkag": 79, "average_method": [414, 711, 764, 1047], "average_pr": 153, "average_precis": [282, 707, 714, 1008], "average_precision_scor": [2, 282, 707, 713, 715, 789, 795, 1008, 1039, 1042, 1046, 1047, 1053, 1055], "average_week_demand": [43, 153], "averoom": [315, 326, 377, 496], "avg": [45, 68, 104, 169, 273, 313, 334, 335, 576, 711, 720, 829, 1008, 1055], "avg_dist": [75, 788], "avgclaim": 235, "avgclaimamount": 235, "avi": [1051, 1052], "avidar": 1055, "avinash": 1051, "avm19": [1053, 1054, 1056], "avoid": [43, 46, 51, 52, 79, 92, 97, 106, 142, 143, 148, 153, 190, 191, 221, 226, 235, 240, 251, 254, 269, 270, 276, 280, 288, 303, 305, 306, 319, 320, 331, 341, 342, 357, 370, 380, 382, 383, 384, 386, 387, 388, 394, 396, 397, 400, 408, 412, 414, 416, 418, 421, 422, 425, 446, 448, 450, 458, 468, 474, 500, 501, 502, 506, 515, 516, 541, 546, 550, 641, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 696, 698, 700, 702, 719, 799, 807, 808, 812, 818, 821, 832, 833, 834, 871, 874, 880, 881, 883, 888, 889, 890, 891, 894, 896, 897, 898, 899, 900, 901, 902, 904, 909, 955, 1002, 1005, 1007, 1008, 1011, 1012, 1014, 1016, 1018, 1023, 1024, 1028, 1031, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "aw": 390, "awai": [62, 63, 64, 95, 111, 146, 174, 175, 179, 220, 269, 349, 350, 377, 412, 424, 635, 853, 854, 861, 862, 1007, 1008, 1023], "await": 325, "awalei": 1047, "awar": [48, 54, 169, 183, 269, 342, 356, 380, 382, 384, 394, 397, 413, 418, 422, 574, 575, 655, 661, 662, 663, 665, 666, 676, 687, 857, 886, 1014, 1018, 1024, 1036, 1039, 1040, 1053], "awesom": 1032, "awwwyan": 1057, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 80, 88, 90, 91, 92, 99, 101, 106, 109, 113, 115, 118, 120, 121, 123, 129, 133, 137, 139, 142, 144, 147, 148, 153, 155, 156, 158, 159, 160, 177, 178, 183, 185, 189, 190, 191, 192, 193, 195, 197, 198, 201, 202, 206, 208, 209, 212, 214, 215, 217, 218, 219, 221, 222, 225, 226, 228, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 245, 250, 254, 255, 257, 260, 262, 265, 269, 270, 271, 272, 275, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 303, 305, 306, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 331, 341, 342, 343, 344, 346, 347, 349, 351, 352, 353, 354, 356, 357, 358, 360, 361, 378, 385, 419, 424, 444, 541, 548, 557, 638, 639, 704, 705, 707, 708, 709, 725, 813, 830, 925, 928, 1008, 1011, 1015, 1036, 1049, 1055], "ax0": [107, 109, 217, 247, 357], "ax1": [46, 49, 92, 95, 100, 102, 107, 109, 113, 121, 147, 186, 193, 217, 245, 247, 255, 260, 278, 286, 316, 320, 321, 337, 356, 357, 378], "ax2": [46, 92, 95, 100, 102, 113, 121, 147, 186, 193, 217, 245, 255, 260, 278, 286, 305, 316, 320, 321, 337, 356, 378], "ax3": [100, 337], "ax4": 100, "ax_": [154, 268, 278, 282, 284, 288, 298, 320, 324, 389, 444, 638, 704, 705, 707, 708, 709, 813, 830], "ax_bc": 319, "ax_bottom": 389, "ax_calibration_curv": [62, 64], "ax_colorbar": 315, "ax_det": 272, "ax_histi": 315, "ax_histx": 315, "ax_histx_zoom": 315, "ax_histy_zoom": 315, "ax_idx": 277, "ax_origin": 319, "ax_qt": 319, "ax_roc": 272, "ax_row": 70, "ax_scatt": 315, "ax_scatter_zoom": 315, "ax_top_left": 389, "ax_top_right": 389, "ax_yj": 319, "ax_zoom_in": 315, "ax_zoom_out": 315, "axarr": [159, 315], "axes_": [153, 155, 255, 325, 331, 389, 639], "axes_idx": 319, "axes_list": 319, "axes_row": 208, "axesimag": 704, "axhlin": [130, 163, 207, 274, 278], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 82, 83, 85, 87, 88, 89, 90, 96, 105, 106, 109, 115, 118, 121, 123, 124, 125, 126, 127, 132, 139, 140, 144, 146, 154, 157, 161, 165, 168, 178, 183, 185, 189, 190, 199, 205, 206, 209, 210, 211, 217, 222, 226, 229, 231, 232, 234, 235, 238, 239, 242, 244, 248, 249, 253, 260, 262, 264, 265, 271, 272, 276, 277, 282, 284, 285, 288, 294, 295, 300, 301, 302, 305, 306, 307, 313, 315, 319, 322, 331, 335, 337, 339, 341, 344, 345, 348, 350, 351, 352, 354, 356, 357, 361, 362, 363, 364, 377, 384, 391, 396, 412, 414, 422, 426, 444, 451, 470, 473, 538, 540, 543, 544, 546, 548, 550, 552, 553, 557, 592, 619, 638, 639, 692, 693, 708, 770, 786, 787, 788, 789, 813, 830, 839, 880, 881, 888, 889, 891, 896, 897, 898, 900, 901, 902, 925, 933, 937, 938, 957, 982, 988, 998, 1008, 1015, 1018, 1023, 1047, 1049, 1051, 1056, 1057], "axis_idx": 43, "axis_list": 125, "axp": 51, "axvlin": [88, 95, 107, 115, 130, 149, 160, 190, 192, 193, 206, 281, 289, 352], "ayako": 1051, "ayan": 1053, "ayc\u0131": 1057, "aydor": [1046, 1047, 1050], "ayerdi": 1043, "aymer": 1040, "aymericbasset": 1055, "ayomid": 1049, "ayush": [1047, 1052], "ayzenshtat": [1032, 1047], "azaria": [1054, 1055], "azencott": 1053, "azim": [80, 102, 120, 129, 191, 214, 237, 241], "azur": [0, 382], "b": [0, 2, 47, 49, 61, 63, 94, 100, 113, 130, 139, 140, 146, 150, 151, 161, 163, 175, 176, 177, 182, 186, 200, 202, 205, 217, 218, 223, 235, 252, 254, 269, 274, 278, 280, 285, 290, 294, 327, 337, 365, 377, 379, 382, 386, 387, 388, 411, 412, 414, 417, 418, 419, 422, 443, 488, 505, 507, 548, 573, 595, 596, 597, 598, 614, 615, 617, 618, 635, 653, 654, 655, 656, 665, 676, 679, 681, 683, 687, 694, 695, 712, 726, 737, 738, 799, 800, 818, 819, 858, 884, 885, 886, 887, 890, 891, 899, 926, 939, 955, 956, 970, 972, 998, 1000, 1004, 1005, 1006, 1008, 1011, 1013, 1018, 1022, 1023, 1039, 1047, 1050, 1052, 1053, 1054], "b0noi": 1045, "b0rxington": 1054, "b1": [231, 301, 344], "b12": [217, 235], "b1996": 421, "b1998": 421, "b1999": 421, "b2": [231, 301, 344], "b2001": 421, "b2011": 414, "b2c": 1032, "b30065": 317, "b5": 329, "b7a2ff": 319, "b_1": 1012, "b_2": 1012, "b_column": 726, "b_i": 1013, "b_iv_i": 1013, "b_j": 414, "b_k": 414, "b_mask": 284, "b_row": 726, "b_true": 284, "ba": [51, 868, 869, 1012], "baak": 1053, "baam": [1052, 1053], "babino": [1052, 1053], "bac": 51, "bach": [419, 538, 543, 544, 545, 665, 1004], "bachant": 1046, "back": [43, 128, 256, 370, 380, 382, 396, 397, 408, 415, 422, 439, 449, 452, 453, 465, 488, 489, 490, 515, 516, 540, 541, 542, 545, 547, 548, 551, 588, 637, 665, 666, 673, 674, 675, 683, 684, 685, 735, 876, 878, 879, 880, 884, 885, 886, 888, 889, 891, 903, 904, 911, 960, 1004, 1008, 1012, 1028, 1042, 1047, 1049, 1050, 1053, 1057, 1058], "backend": [2, 370, 385, 396, 474, 909, 973, 977, 1008, 1042, 1047, 1048, 1049, 1050], "background": [44, 50, 82, 101, 154, 313, 317, 377, 382, 390, 414, 500, 501, 1005, 1013, 1022, 1049], "background_point": 50, "backlink": 1044, "backport": [386, 391, 1046], "backprop": [1012, 1022], "backpropag": 1012, "backslash": 1054, "backtick": [382, 387], "backup": [515, 1039], "backward": [172, 251, 326, 385, 396, 423, 503, 584, 609, 621, 622, 625, 626, 627, 629, 630, 924, 933, 1012, 1028, 1039, 1042, 1047, 1048, 1049, 1051, 1053, 1055], "bad": [80, 95, 96, 175, 180, 190, 269, 332, 356, 365, 382, 414, 424, 699, 753, 997, 1004, 1005, 1010, 1016, 1039], "badaracco": 1052, "badli": [206, 217, 356, 371, 891, 1004, 1018], "badr": 1054, "baeza": [597, 737, 1042], "bag": [2, 14, 64, 104, 125, 136, 141, 143, 151, 152, 187, 192, 292, 357, 358, 378, 412, 523, 524, 525, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 748, 812, 837, 920, 1006, 1009, 1029, 1030, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1052, 1053, 1055], "bagai": 1052, "baggingclassifi": [2, 396, 405, 421, 563, 921, 947, 998, 1042, 1045, 1046, 1047, 1050, 1054, 1055, 1057], "baggingregressor": [2, 140, 405, 421, 562, 922, 998, 1042, 1045, 1047, 1050, 1054, 1055, 1057], "baggipont": 1057, "baharev": 1044, "bahavior": 356, "bahaviour": 356, "baibak": [1047, 1048], "bail": 1050, "bailei": [414, 711], "bajic": 1054, "baji\u0107": 1054, "baker": 1058, "bakir2003": 419, "bakiri": [841, 1009], "bak\u0131r": [44, 419, 542], "bala": [1039, 1042], "balakumaran": [1046, 1047], "balanc": [2, 43, 45, 52, 64, 88, 101, 106, 137, 143, 148, 171, 187, 221, 222, 267, 273, 276, 278, 279, 289, 315, 371, 394, 396, 412, 413, 418, 419, 421, 509, 522, 541, 547, 548, 554, 564, 568, 571, 647, 665, 666, 673, 675, 681, 682, 683, 710, 715, 736, 750, 789, 794, 807, 808, 825, 871, 911, 913, 916, 919, 921, 942, 943, 997, 1023, 1024, 1029, 1039, 1041, 1044, 1045, 1048, 1049, 1053], "balanced_accuraci": [289, 715, 829, 1008, 1047], "balanced_accuracy_scor": [2, 710, 794, 1008, 1047], "balanced_subsampl": [564, 571, 1047], "balaz": 1043, "baldi": 750, "ball": [104, 300, 308, 414, 420, 454, 699, 851, 852, 856, 859, 861, 862, 863, 1039, 1041, 1044, 1050], "ball_tre": [308, 425, 450, 452, 456, 463, 695, 696, 853, 854, 855, 856, 857, 859, 861, 862, 863, 1011, 1039, 1056], "balltre": [2, 425, 450, 452, 456, 463, 695, 696, 706, 853, 854, 855, 856, 857, 859, 861, 862, 863, 1005, 1039, 1041, 1043, 1047, 1052, 1055, 1056], "baloo": 1005, "baluyot": 1048, "bamidel": 1049, "banana": [48, 1008], "band": [52, 278, 317, 1018], "bandit": 997, "bandol": 321, "bandwidth": [2, 48, 79, 98, 250, 299, 300, 308, 394, 396, 414, 420, 454, 464, 467, 851, 852, 856, 1001, 1014, 1050, 1054], "bandwidth_": 856, "bangda": 1047, "banik": 1057, "banilo": [1043, 1044], "bank": [51, 57, 1032], "bannerje": [1055, 1056], "bansal": 1046, "bansod": [1044, 1045, 1046], "bao": [1045, 1053], "baod": 414, "baptbillard": 1052, "baptist": [1042, 1050], "bar": [47, 49, 54, 106, 143, 144, 147, 148, 151, 160, 168, 172, 182, 185, 191, 197, 260, 265, 274, 276, 280, 294, 320, 321, 328, 329, 357, 384, 417, 588, 639, 655, 676, 687, 1008, 1015, 1022, 1024, 1045, 1046, 1047, 1048], "bar_color": 47, "bar_kw": 639, "bar_siz": 356, "baran": 1049, "barang": 1055, "baraniuk": 423, "barankaraku": 1051, "barata": 1055, "barber": 539, "barberogaston": 1051, "bardiya": [1053, 1054], "bare": [377, 1005], "barh": [54, 151, 185, 186, 189, 190, 192, 193, 258, 322, 356, 357, 358], "barikbin": 1055, "barkhorn": 1047, "barklei": 1049, "barmalei": [1043, 1044], "barn": [699, 1005, 1044, 1046, 1049, 1057], "barnes_hut": [295, 699, 1046, 1047], "barnett": 1047, "barnhil": [600, 601], "barnowski": [1053, 1054], "barreca": [892, 1018], "barreto": 1053, "barri": [377, 1047], "barrier": 422, "barrycg": 1049, "bars_": 639, "bartelheim": 1050, "barth\u00e9lemi": [1055, 1056], "bartosz": 1048, "bart\u0142omiej": 1054, "barycent": [307, 1039], "basbug": 1046, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 84, 91, 92, 93, 102, 104, 105, 109, 113, 120, 123, 124, 135, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 161, 166, 169, 170, 174, 179, 180, 182, 191, 192, 193, 196, 197, 203, 204, 205, 206, 211, 217, 218, 225, 234, 235, 237, 244, 251, 252, 254, 272, 273, 278, 288, 292, 294, 295, 308, 313, 315, 316, 318, 320, 326, 328, 332, 339, 343, 349, 357, 360, 369, 376, 377, 378, 379, 380, 383, 384, 385, 386, 390, 394, 396, 397, 399, 408, 410, 412, 413, 415, 419, 420, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 467, 469, 470, 471, 472, 473, 493, 507, 508, 515, 516, 539, 540, 542, 543, 544, 545, 546, 548, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 585, 595, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 617, 618, 623, 624, 625, 628, 631, 639, 640, 642, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 671, 676, 678, 679, 680, 681, 682, 687, 689, 690, 692, 693, 694, 697, 699, 711, 724, 733, 742, 743, 744, 746, 748, 762, 763, 764, 792, 795, 802, 806, 807, 809, 810, 811, 813, 814, 816, 821, 823, 825, 826, 827, 828, 835, 837, 841, 842, 845, 853, 854, 855, 857, 859, 861, 862, 863, 868, 869, 872, 873, 876, 883, 884, 886, 890, 891, 892, 900, 903, 904, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 927, 929, 931, 940, 949, 960, 976, 997, 999, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1032, 1034, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1057], "base_classifi": [337, 339, 1021], "base_clf": 443, "base_estim": [412, 560, 561, 562, 563, 842, 845, 908, 997, 1050, 1052, 1053, 1054, 1055, 1058], "base_estimator_": [560, 561, 562, 563, 564, 565, 570, 571, 572, 573, 617, 1054], "base_estimator__": 1054, "base_lr": [294, 842], "base_model": 413, "base_x_test": 111, "base_x_train": 111, "basebag": [1045, 1047], "basebal": [57, 377], "basedecisiontre": [1047, 1048, 1051], "basedictionarylearn": 1039, "baseensembl": [1046, 1049], "baseestim": [2, 91, 135, 251, 295, 382, 395, 396, 424, 429, 431, 432, 436, 437, 438, 608, 639, 640, 947, 960, 1039, 1046, 1049, 1051, 1053, 1054, 1058], "basegradientboost": 1040, "baselabelpropag": 1046, "baselibsvm": 1049, "baselin": [62, 137, 147, 150, 161, 172, 193, 197, 235, 269, 285, 294, 326, 357, 379, 414, 423, 558, 559, 641, 1008, 1011, 1055], "baseline_similar": 182, "baseline_similarity_bound": 182, "basemap": [50, 308], "basemixtur": [1047, 1048], "basemultilayerperceptron": [1047, 1049], "basenb": 1049, "baserandomproject": [903, 904], "basesearchcv": [1046, 1047], "basesgd": 1022, "basesgdclassifi": 1048, "baseshufflesplit": 1052, "bash": [370, 390], "bashrc": 390, "basi": [2, 43, 45, 53, 128, 174, 179, 181, 218, 269, 312, 327, 345, 349, 374, 380, 383, 414, 419, 421, 458, 541, 629, 639, 646, 698, 890, 1006, 1018, 1023, 1030, 1034, 1047, 1049, 1052], "basic": [150, 173, 174, 179, 180, 183, 186, 187, 215, 289, 322, 350, 369, 371, 382, 384, 386, 394, 396, 414, 418, 419, 421, 618, 629, 907, 919, 920, 921, 922, 997, 998, 1011, 1022, 1026, 1027, 1028, 1029, 1032], "basicconfig": 123, "basil": 1046, "basilisk": 1027, "basis_1": 218, "basis_2": 218, "basri": 520, "bassett": 1004, "bastiaan": [1040, 1041], "bastian": 1047, "bat": 380, "batch": [2, 47, 50, 99, 123, 127, 308, 328, 371, 391, 396, 422, 446, 448, 453, 455, 457, 459, 538, 540, 541, 543, 544, 545, 546, 547, 549, 550, 552, 553, 671, 692, 693, 812, 825, 826, 846, 847, 848, 849, 850, 868, 869, 880, 881, 891, 904, 958, 973, 1012, 1013, 1022, 1039, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1054, 1055], "batch_dict_estim": 123, "batch_pca_estim": 123, "batch_siz": [2, 54, 57, 77, 99, 123, 126, 127, 357, 419, 455, 541, 543, 544, 545, 546, 553, 867, 868, 869, 958, 959, 973, 1040, 1047, 1050, 1052, 1053], "batch_size_": 541, "batchkarov": [1040, 1044], "batiss": 1050, "batista": [1047, 1048, 1052], "batistaki": 414, "batoul": 1052, "battista": 1050, "batula": 1046, "bauk": [1047, 1048], "baum": 452, "baumgartn": 1046, "baxlei": 1046, "bay": [2, 32, 64, 67, 140, 156, 174, 206, 265, 277, 356, 377, 412, 419, 421, 422, 543, 556, 557, 663, 846, 847, 848, 849, 850, 892, 1002, 1003, 1004, 1018, 1030, 1034, 1039, 1040, 1041, 1042, 1047, 1049, 1052, 1054], "bayer": [0, 1039, 1040, 1044, 1057], "bayesian": [2, 46, 64, 89, 100, 121, 186, 187, 196, 202, 204, 218, 223, 259, 261, 265, 266, 278, 286, 290, 300, 305, 316, 319, 320, 419, 443, 531, 535, 539, 618, 651, 652, 663, 664, 804, 805, 872, 874, 886, 891, 997, 1027, 1029, 1030, 1033, 1034, 1045, 1052], "bayesiangaussianmixtur": [2, 260, 261, 266, 805, 1007, 1045, 1047, 1048, 1052, 1053, 1057], "bayesianridg": [2, 89, 185, 197, 198, 202, 326, 634, 651, 1004, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056], "baz": [384, 588], "baze": 1048, "bbbbbb": 99, "bbox": [48, 51, 70, 80, 129, 260, 261, 262, 265, 266, 317], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 183, 280, 351], "bc": 319, "bcde": 147, "bcross_val": 1039, "bde": 147, "bdegraaff": 1054, "bdt": 139, "beach": 1047, "beam": [140, 1039], "bear": [421, 1027], "bearer": 1047, "beatrizsmg": 1051, "beauchamp": [1040, 1043], "beaugnon": 1049, "becam": [158, 397, 1047], "becaus": [43, 44, 52, 57, 62, 64, 75, 82, 85, 105, 115, 118, 137, 142, 145, 150, 153, 172, 175, 178, 181, 190, 191, 193, 198, 203, 210, 217, 221, 223, 225, 235, 250, 251, 261, 269, 272, 275, 276, 281, 294, 295, 311, 312, 313, 315, 319, 320, 321, 322, 336, 345, 349, 356, 357, 358, 360, 364, 365, 369, 370, 377, 386, 387, 390, 394, 395, 396, 405, 408, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 424, 427, 437, 453, 454, 467, 471, 481, 488, 489, 490, 541, 543, 559, 561, 563, 565, 567, 569, 570, 572, 575, 577, 614, 615, 618, 639, 640, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 683, 684, 685, 686, 687, 696, 706, 716, 719, 720, 728, 729, 730, 731, 753, 770, 792, 795, 801, 807, 821, 835, 839, 844, 845, 854, 857, 859, 861, 862, 863, 869, 880, 881, 889, 891, 892, 896, 897, 899, 900, 901, 902, 912, 914, 917, 920, 922, 930, 971, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1018, 1023, 1024, 1032, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1055], "becker": [414, 1032, 1042, 1051], "becom": [85, 90, 92, 106, 113, 148, 190, 219, 221, 251, 254, 277, 295, 316, 320, 345, 349, 356, 365, 376, 382, 384, 386, 390, 396, 397, 414, 416, 421, 422, 424, 446, 456, 460, 461, 463, 588, 595, 596, 598, 626, 634, 665, 666, 683, 685, 885, 911, 912, 918, 1003, 1004, 1005, 1007, 1011, 1018, 1023, 1040, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1058], "bednar": 1046, "bedroom": [315, 377], "been": [0, 43, 48, 63, 79, 88, 95, 114, 128, 135, 137, 151, 172, 174, 179, 181, 190, 193, 241, 244, 246, 251, 252, 273, 275, 281, 282, 324, 325, 326, 327, 328, 330, 331, 332, 336, 356, 365, 370, 376, 377, 379, 380, 381, 382, 384, 386, 388, 390, 391, 394, 395, 396, 397, 405, 408, 411, 412, 413, 414, 416, 418, 419, 421, 424, 439, 443, 475, 477, 478, 480, 484, 493, 530, 541, 543, 556, 557, 574, 575, 588, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 640, 641, 665, 666, 673, 674, 675, 680, 682, 683, 684, 685, 727, 785, 786, 787, 800, 807, 810, 811, 813, 821, 829, 830, 835, 836, 860, 908, 911, 998, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1011, 1014, 1018, 1020, 1022, 1023, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "befor": [2, 47, 51, 62, 77, 104, 106, 109, 118, 148, 153, 158, 168, 181, 183, 184, 185, 187, 190, 191, 193, 199, 202, 204, 206, 210, 251, 269, 275, 282, 297, 298, 316, 319, 320, 322, 327, 348, 365, 369, 370, 377, 380, 382, 384, 386, 387, 388, 390, 391, 394, 396, 397, 399, 400, 408, 410, 412, 414, 415, 416, 418, 419, 421, 423, 426, 427, 449, 453, 454, 455, 465, 467, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 496, 508, 541, 544, 545, 546, 547, 548, 551, 553, 554, 568, 569, 572, 574, 576, 577, 584, 595, 596, 598, 618, 634, 635, 637, 652, 673, 674, 675, 678, 683, 685, 694, 699, 701, 804, 805, 812, 813, 825, 826, 828, 833, 835, 837, 851, 852, 859, 860, 861, 862, 863, 866, 871, 872, 875, 878, 885, 889, 890, 891, 892, 896, 897, 899, 900, 901, 902, 908, 919, 920, 930, 955, 991, 998, 1004, 1005, 1008, 1014, 1018, 1022, 1023, 1024, 1028, 1029, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "beforehand": [258, 298, 1024], "begin": [57, 135, 172, 174, 270, 277, 294, 327, 356, 365, 382, 387, 388, 396, 411, 414, 421, 560, 561, 566, 568, 569, 673, 674, 683, 684, 685, 997, 1000, 1004, 1008, 1018, 1020, 1022, 1047, 1053, 1054], "beginn": 1028, "behav": [43, 51, 87, 92, 221, 269, 270, 315, 326, 345, 365, 382, 388, 395, 414, 415, 418, 891, 1004, 1018, 1023, 1025, 1028, 1039, 1046, 1048, 1052, 1053], "behavior": [62, 72, 74, 87, 185, 187, 190, 191, 205, 217, 235, 251, 258, 266, 267, 269, 278, 280, 312, 313, 315, 317, 322, 345, 365, 370, 376, 379, 382, 384, 386, 390, 391, 396, 410, 412, 413, 414, 418, 421, 422, 543, 558, 573, 673, 674, 675, 683, 684, 685, 706, 708, 736, 737, 790, 791, 794, 807, 808, 809, 812, 821, 824, 825, 826, 827, 828, 848, 884, 911, 912, 997, 1004, 1008, 1009, 1014, 1018, 1023, 1029, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "behaviour": [74, 128, 153, 218, 219, 235, 347, 382, 396, 408, 414, 421, 566, 567, 571, 572, 609, 808, 809, 812, 824, 825, 826, 827, 828, 909, 919, 920, 980, 997, 998, 1008, 1018, 1047, 1050, 1051, 1054, 1055], "behind": [37, 88, 113, 137, 292, 384, 386, 390, 416, 421, 1007, 1011, 1020, 1055], "behrend": 1049, "behrouz": 1053, "behzad": 1045, "beier": 1050, "beimportantfew": 402, "being": [61, 64, 70, 80, 87, 90, 115, 118, 120, 128, 137, 141, 153, 155, 174, 179, 192, 195, 211, 251, 254, 268, 275, 313, 319, 320, 345, 349, 356, 358, 380, 381, 382, 384, 387, 394, 396, 397, 413, 414, 416, 418, 421, 422, 423, 424, 425, 427, 447, 448, 450, 451, 456, 462, 475, 481, 500, 530, 576, 647, 656, 663, 679, 681, 694, 697, 701, 719, 725, 741, 743, 790, 796, 804, 851, 852, 857, 859, 861, 862, 863, 886, 904, 956, 997, 998, 1004, 1007, 1008, 1011, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1039, 1040, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "beings": 356, "beirouti": 1046, "belatedli": 1046, "belief": [57, 275, 867, 1013], "believ": [356, 357, 390, 394, 1032], "belkin": 1005, "belkina": [699, 1005], "bell": [2, 528, 1047, 1049, 1051, 1052], "bella": 1008, "bella2012": 1008, "bellet": [1046, 1047, 1048], "belmont": [919, 920, 1024], "belong": [61, 64, 66, 90, 95, 254, 275, 324, 330, 336, 376, 377, 411, 412, 414, 415, 417, 418, 421, 429, 446, 449, 453, 454, 455, 457, 459, 530, 719, 738, 814, 820, 832, 878, 892, 963, 964, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1023, 1027], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 90, 95, 104, 109, 113, 120, 123, 135, 141, 144, 145, 150, 167, 189, 191, 201, 213, 214, 217, 219, 233, 234, 238, 242, 246, 251, 254, 256, 258, 270, 273, 278, 280, 281, 282, 315, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 350, 356, 364, 365, 370, 375, 376, 380, 382, 384, 386, 387, 391, 396, 397, 400, 402, 414, 416, 417, 418, 419, 421, 422, 423, 424, 450, 452, 454, 477, 478, 484, 497, 499, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 517, 538, 544, 549, 555, 589, 602, 603, 604, 605, 606, 607, 640, 653, 659, 665, 666, 674, 675, 680, 682, 699, 706, 712, 750, 770, 804, 805, 807, 818, 821, 840, 871, 874, 884, 885, 888, 894, 900, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1027, 1035, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "beltran": 1057, "ben": [1041, 1042, 1043, 1046, 1047, 1048, 1051, 1056], "ben3940": 1053, "benavoli": 275, "benbihi": 1048, "bench_k_mean": 93, "benchmark": [295, 326, 357, 358, 369, 375, 377, 382, 394, 400, 407, 412, 474, 522, 909], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 349, "benedek": 1055, "benedikt": 1043, "benediktsson": [1039, 1040, 1041], "benefici": [106, 108, 111, 123, 156, 269, 315, 316, 332, 408, 413, 1005], "benefit": [43, 81, 91, 108, 109, 137, 138, 148, 153, 190, 231, 241, 247, 249, 269, 297, 328, 369, 382, 391, 396, 412, 414, 454, 467, 474, 515, 574, 575, 665, 666, 673, 674, 675, 683, 684, 685, 842, 909, 911, 997, 1003, 1011, 1018, 1028, 1032, 1039, 1042, 1043, 1044, 1051, 1052, 1053, 1054], "benfield": 1046, "bengio": [275, 868, 869, 997, 1021], "bengtsson": 1043, "benhel": 383, "benhur": 1052, "benign": [172, 379, 507], "benjamin": [648, 1041, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "benjamini": [602, 1045, 1046], "benjaminirv": 1044, "benjastudio": [1047, 1048], "benn": 1047, "bennett": [172, 379, 1008], "benni": 1053, "benoit": 1056, "beno\u00eet": 1052, "benson": 57, "bentlei": 1011, "bera": 1054, "berei": 1053, "beren": 699, "berenbaum": 1055, "bereng": 1052, "berg": [377, 1040, 1041, 1051, 1056], "bergman": [1056, 1057], "bergstra": [997, 1039, 1040], "berk": 1039, "berkecanrizai": 1054, "berkelei": [648, 919, 920], "berlin": [179, 414, 419, 542, 703, 733, 763, 1008], "bernardo": 1045, "bernd": 1054, "bernhard": [44, 419, 542, 842, 877, 907, 1009, 1014, 1023, 1045], "bernhardsson": 1032, "berni": 1050, "bernoulli": [2, 313, 422, 423, 846, 847, 848, 849, 850, 867, 868, 869, 874, 1004, 1018, 1030, 1034, 1039], "bernoullinb": [2, 156, 371, 847, 848, 849, 850, 1009, 1010, 1040, 1041, 1043, 1046, 1051, 1052, 1054], "bernoullirbm": [2, 313, 868, 869, 1013, 1018, 1041, 1042, 1051, 1053, 1056], "bertin": 1032, "bertoncelj": 1050, "bertrand": [0, 403, 1039, 1045, 1046, 1051, 1052], "bertrandhaut": [1047, 1048], "besid": [158, 247, 289, 382, 387, 596, 997, 1047], "bessel": [424, 626], "bessi": 329, "besson": [1044, 1045], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 81, 89, 90, 96, 104, 105, 106, 107, 111, 117, 123, 127, 130, 131, 132, 140, 143, 147, 149, 150, 151, 153, 158, 161, 172, 174, 175, 180, 185, 190, 197, 202, 204, 206, 213, 231, 232, 233, 237, 240, 244, 249, 250, 254, 261, 262, 266, 268, 269, 273, 274, 275, 276, 279, 282, 283, 286, 287, 290, 294, 299, 304, 316, 321, 326, 327, 332, 345, 348, 349, 356, 357, 358, 363, 369, 370, 376, 379, 381, 382, 385, 388, 395, 396, 400, 405, 408, 411, 412, 413, 414, 418, 419, 421, 422, 423, 424, 437, 449, 452, 453, 455, 457, 458, 459, 465, 468, 471, 478, 488, 489, 490, 545, 552, 553, 559, 561, 563, 564, 565, 566, 567, 569, 571, 572, 573, 575, 577, 600, 601, 604, 609, 617, 618, 642, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 695, 696, 697, 700, 701, 710, 715, 726, 727, 728, 729, 730, 731, 735, 736, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 763, 790, 791, 792, 794, 797, 798, 799, 800, 801, 803, 804, 805, 807, 810, 811, 821, 834, 836, 839, 844, 845, 854, 862, 868, 869, 912, 914, 917, 919, 920, 921, 922, 997, 1002, 1003, 1004, 1005, 1008, 1011, 1012, 1014, 1022, 1024, 1027, 1028, 1032, 1039, 1042, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1057], "best_alpha": 1039, "best_c": 352, "best_c_scal": 352, "best_clf": 107, "best_estim": [807, 810, 811, 821], "best_estimator_": [45, 89, 106, 107, 108, 111, 130, 250, 265, 269, 273, 275, 276, 279, 287, 299, 807, 810, 811, 821, 997, 1046], "best_idx": [57, 274], "best_index": [273, 279], "best_index_": [274, 279, 807, 810, 811, 821], "best_loss": [683, 685], "best_loss_": [868, 869, 1054], "best_low_complex": 274, "best_n_it": 465, "best_paramet": 276, "best_parameters_": 265, "best_params_": [105, 107, 150, 174, 250, 265, 273, 279, 326, 345, 395, 807, 810, 811, 821, 997], "best_recal": 273, "best_recall_std": 273, "best_recall_threshold": 273, "best_scor": 279, "best_score_": [105, 107, 250, 269, 276, 279, 280, 345, 413, 680, 682, 807, 810, 811, 821, 829, 1050], "best_score_idx": 274, "best_threshold_": [269, 289, 332, 829], "best_validation_score_": [868, 869, 1054], "beta": [2, 81, 117, 189, 221, 388, 412, 414, 417, 543, 545, 547, 554, 651, 736, 737, 743, 749, 790, 802, 804, 1008, 1041, 1044, 1046, 1048, 1049], "beta_": [221, 419], "beta_1": [868, 869], "beta_2": [868, 869], "beta_k": 419, "beta_loss": [54, 545, 547, 554, 1046], "betatim": 1054, "better": [43, 44, 48, 52, 57, 58, 61, 67, 85, 90, 108, 109, 111, 112, 113, 114, 118, 120, 123, 126, 140, 143, 148, 149, 150, 153, 158, 167, 178, 179, 180, 182, 185, 190, 192, 198, 202, 203, 206, 217, 218, 219, 225, 232, 234, 235, 241, 249, 250, 251, 254, 265, 268, 269, 275, 277, 278, 281, 284, 285, 288, 292, 294, 313, 319, 320, 328, 329, 345, 352, 356, 357, 358, 360, 365, 369, 377, 381, 382, 383, 384, 387, 388, 390, 396, 399, 402, 410, 412, 414, 416, 418, 419, 420, 421, 422, 424, 455, 456, 545, 547, 554, 566, 567, 568, 569, 614, 615, 637, 678, 684, 699, 716, 732, 741, 746, 749, 770, 805, 836, 846, 847, 848, 849, 850, 851, 852, 857, 868, 869, 888, 889, 892, 900, 903, 904, 911, 912, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1016, 1018, 1021, 1022, 1024, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "better_prob": 275, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 88, 95, 96, 101, 117, 120, 126, 128, 131, 137, 140, 143, 147, 148, 150, 153, 167, 174, 179, 180, 182, 187, 189, 190, 191, 192, 197, 202, 203, 205, 208, 212, 213, 217, 218, 219, 221, 222, 225, 235, 237, 244, 249, 251, 254, 267, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 287, 288, 289, 292, 294, 297, 301, 302, 304, 305, 315, 320, 322, 327, 332, 337, 345, 349, 351, 352, 356, 357, 358, 364, 365, 369, 370, 377, 382, 384, 386, 390, 391, 394, 395, 396, 397, 405, 408, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 435, 446, 447, 450, 451, 452, 453, 456, 458, 459, 460, 462, 463, 464, 469, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 521, 522, 528, 531, 534, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 556, 557, 560, 561, 566, 567, 569, 570, 571, 572, 591, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 618, 627, 634, 639, 640, 641, 646, 649, 652, 653, 654, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 683, 685, 686, 688, 691, 695, 697, 699, 701, 702, 703, 706, 708, 710, 711, 712, 714, 716, 717, 721, 722, 723, 724, 726, 731, 732, 733, 736, 737, 738, 741, 743, 744, 750, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 812, 816, 824, 825, 826, 827, 828, 836, 837, 839, 841, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 868, 869, 875, 878, 879, 881, 882, 884, 885, 888, 889, 890, 892, 897, 900, 901, 905, 911, 912, 916, 919, 920, 921, 922, 924, 952, 964, 965, 976, 997, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1029, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "bewar": 423, "beyond": [43, 64, 218, 219, 269, 369, 371, 381, 382, 394, 412, 421, 736, 737, 745, 790, 791, 794, 916, 1005, 1009, 1018, 1023, 1028, 1047], "beyst": 1053, "bezuidenhout": 1052, "bf5fff": 121, "bfg": [311, 617, 618, 655, 656, 665, 676, 679, 681, 687, 694, 1011, 1012, 1054], "bgm": 804, "bharat": [418, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "bharathi": 1050, "bhardwaj": [1046, 1047], "bhargav": 1045, "bhaskaran": [1046, 1047], "bhat": [1052, 1054, 1055, 1056], "bhattacharya": 1047, "bhattarai": 1049, "bhavika": 1051, "bhoomika": 1054, "bhsu": 1043, "bhtsne": [699, 1046], "bi": [90, 422], "bia": [43, 64, 111, 125, 136, 144, 145, 150, 153, 187, 190, 192, 197, 198, 200, 280, 310, 349, 352, 365, 377, 396, 412, 416, 420, 421, 424, 531, 563, 566, 567, 614, 615, 621, 649, 655, 656, 665, 666, 676, 677, 687, 868, 869, 884, 886, 890, 896, 897, 899, 900, 901, 902, 920, 929, 1003, 1004, 1007, 1008, 1012, 1013, 1016, 1022, 1029], "bianca": 64, "bianp": 388, "bias": [48, 115, 126, 150, 157, 189, 190, 192, 280, 377, 399, 412, 421, 531, 556, 867, 891, 902, 1003, 1007, 1016, 1022, 1024], "bibhash": [1049, 1050], "bibl": 357, "bibliograph": 382, "bibtex": 0, "bic": [2, 163, 187, 196, 203, 204, 205, 211, 225, 423, 508, 658, 660, 661, 662, 663, 805, 872, 891, 997, 1007, 1029, 1039, 1046, 1052, 1053], "bic_criterion": 204, "bicker": 1049, "biclust": [2, 6, 59, 104, 336, 338, 356, 357, 358, 422, 429, 455, 457, 459, 494, 518, 520, 598, 726, 802, 1008, 1029, 1033, 1034, 1041, 1045], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 429, 457, 459], "bidu": [1052, 1053], "biernat": 1051, "big": [43, 79, 95, 97, 222, 238, 254, 266, 370, 382, 388, 397, 416, 422, 426, 545, 568, 569, 571, 572, 813, 835, 846, 847, 848, 849, 850, 1028, 1032, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "bigg": [424, 626], "bigger": [47, 75, 95, 230, 275, 313, 349, 354, 357, 368, 370, 422, 444, 445, 515, 545, 857, 1034], "biggest": [414, 417, 419, 449], "biggest_inertia": [414, 449], "biggio": 1050, "bigram": [276, 422, 595, 596, 598], "bigram_vector": 422, "bijil": 1053, "bike": 1015, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 191], "bilbro": 1046, "bill": [1049, 1050], "billaud": 1047, "billi": 1043, "billing": [1042, 1043, 1044], "billion": 1032, "bimod": [319, 420], "bin": [2, 43, 61, 62, 64, 88, 109, 139, 143, 217, 248, 254, 269, 281, 300, 315, 316, 317, 318, 319, 321, 322, 380, 390, 400, 412, 420, 421, 444, 445, 454, 467, 568, 569, 874, 876, 890, 957, 1047, 1048, 1049, 1053, 1057, 1058], "bin_cent": [88, 217], "bin_edg": 88, "bin_edges_": [88, 316, 876], "bin_seed": [79, 98, 454, 467, 1050], "binar": [2, 36, 282, 284, 285, 374, 376, 761, 846, 875, 876, 878, 882, 884, 892, 895, 1008, 1010, 1034, 1053, 1055], "binari": [2, 30, 47, 53, 62, 64, 141, 143, 154, 156, 169, 182, 190, 195, 208, 210, 217, 225, 238, 245, 254, 257, 269, 272, 273, 278, 284, 289, 292, 299, 345, 349, 364, 365, 376, 377, 378, 386, 387, 396, 400, 408, 411, 412, 413, 414, 421, 422, 424, 443, 444, 445, 458, 493, 507, 515, 516, 527, 530, 556, 557, 560, 562, 566, 568, 573, 574, 575, 588, 595, 596, 598, 600, 601, 609, 617, 634, 635, 636, 637, 638, 639, 640, 665, 666, 673, 675, 680, 681, 682, 683, 707, 710, 714, 715, 716, 719, 720, 722, 725, 727, 729, 734, 736, 737, 741, 742, 745, 746, 747, 748, 750, 789, 790, 791, 794, 795, 796, 801, 803, 806, 807, 808, 810, 811, 812, 813, 821, 825, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 846, 857, 867, 878, 882, 884, 892, 895, 911, 913, 916, 927, 970, 998, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1036, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1053, 1054, 1056, 1057], "binary_crossentropi": 1053, "binary_eros": 53, "binary_onli": [1049, 1050], "binarytre": [856, 1043, 1047, 1051], "bincount": [396, 418, 564, 568, 571, 665, 666, 673, 675, 681, 682, 683, 911, 913, 916, 919, 921, 942, 943, 1046], "bind": [400, 1027, 1039, 1046, 1047], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364], "binesh": [1055, 1056], "binet": [1049, 1054], "bing": [1045, 1046], "bingham": 1020, "binned_numer": [217, 235], "binom": 1004, "binomi": [149, 152, 421, 560, 566, 568, 1004, 1053, 1056], "bio": 278, "biocsklearn": 1027, "bioinformat": [635, 998], "biola": 1057, "biologi": 50, "biometrika": [887, 899], "biostatist": [416, 484], "bipartit": [411, 459, 518, 1013], "biprateep": 1051, "birch": [2, 71, 79, 99, 187, 328, 371, 396, 452, 455, 519, 1029, 1033, 1034, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1058], "birch_model": 77, "bird": [589, 725, 761, 1008], "birodkar": [1044, 1045, 1047], "bischl": 376, "bisect": [2, 71, 75, 92, 94, 95, 96, 183, 187, 271, 449, 453, 519, 1029, 1053], "bisect_km": 328, "bisect_mean": 449, "bisecting_strategi": [414, 449], "bisectingkmean": [2, 78, 414, 1053, 1054, 1055], "bisector": 70, "bishop": [539, 541, 548, 748, 804, 1004, 1009, 1023], "bistochast": [411, 457], "biswadip": 1049, "biswaroop": 1054, "bit": [43, 52, 64, 83, 88, 111, 126, 215, 219, 292, 315, 345, 357, 365, 369, 377, 380, 396, 400, 402, 421, 422, 589, 596, 665, 841, 937, 938, 1005, 1009, 1026, 1039, 1042, 1045, 1047, 1048, 1051, 1052, 1053, 1056, 1057], "bithash": 647, "bithash_": 647, "bitli": 1032, "bitmap": 379, "bittarello": 1052, "bjerr": 1047, "bla": [369, 370, 380, 383, 388, 390, 785, 1039, 1047, 1048, 1050, 1051, 1057], "black": [43, 48, 49, 50, 52, 63, 70, 79, 84, 90, 91, 113, 114, 121, 123, 125, 146, 167, 170, 174, 175, 179, 180, 183, 186, 190, 191, 197, 204, 206, 207, 209, 213, 217, 218, 219, 223, 226, 229, 230, 235, 244, 254, 260, 263, 300, 310, 311, 313, 339, 354, 361, 362, 363, 382, 400, 407, 414, 421, 424, 562, 563, 638, 1014, 1015, 1024], "blackberri": 321, "blackburn": [1042, 1045], "blackd0t": 1049, "blair": [45, 377], "blakeflei": 1045, "blame": 382, "blanc": 321, "blanchard": [1043, 1044], "blank": [95, 387, 998, 1024], "bldgtype": 147, "bleed": 1032, "blei": [419, 543, 804], "bleich": [191, 1015], "bleki": 1051, "blend": [146, 158, 321, 396, 418], "bli": [370, 380, 394], "blind": [122, 125, 187, 216, 356, 419, 540, 548, 1029], "blink": 345, "blis_num_thread": 370, "blob": [2, 61, 69, 70, 77, 79, 92, 97, 99, 414, 454, 519], "blobs_param": 244, "block": [2, 300, 315, 328, 377, 379, 382, 387, 390, 396, 411, 414, 417, 420, 458, 459, 468, 479, 485, 486, 494, 495, 518, 520, 702, 955, 1011, 1013], "block_siz": [479, 485, 486, 1043], "blocker": [386, 1057], "blocknum": 47, "blockwis": [411, 1004], "blog": [328, 369, 382, 388, 390, 397, 1050], "blogpost": 387, "blondel": [0, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1052], "blood": [172, 245, 379], "bloom": [391, 972], "blown": 348, "blue": [46, 48, 52, 58, 59, 63, 70, 113, 121, 123, 137, 140, 144, 152, 153, 155, 158, 160, 170, 179, 181, 195, 198, 204, 206, 213, 215, 240, 248, 268, 269, 270, 275, 311, 320, 325, 331, 336, 379, 414, 419, 1056], "blueviolet": [231, 301, 344], "blum": 1046, "blyston": [1049, 1050], "bmaisonn": 1051, "bmalezieux": 1052, "bmatrix": [411, 1000], "bmc": 1018, "bme": 1057, "bmi": [172, 204, 206, 255, 379, 1016], "bmreinig": 1053, "bmug": 57, "bmva": 678, "bmvc": [678, 1004], "bo": [63, 1051], "board": 0, "boat": 329, "bob": [1040, 1046], "bobyrev": 1046, "boca": 1004, "bodega": 321, "bodenhof": [411, 726], "bodi": [47, 104, 172, 255, 329, 379], "body_bow": 104, "body_stat": 104, "boe": 51, "boechat": 1046, "boenisch": 1050, "boerner": 1053, "boersma": 1045, "bogazici": 379, "bogdan": 1039, "boggavarapu": 1051, "bohl": [1051, 1053], "bohn\u00e9": 1052, "boil": [137, 385, 396, 416], "boilerpl": [251, 384, 1032], "boisberrang": [0, 403, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "bold": [95, 150, 206, 212, 382], "boll": 1004, "bolleddula": 1057, "bolmier": [1050, 1051, 1055], "boltzmann": [2, 107, 117, 187, 207, 309, 509, 665, 720, 837, 867, 868, 869, 871, 897, 1029, 1033, 1034, 1041], "bommarito": [1042, 1043], "bonald": 1054, "bone": [230, 354], "bonferroni": 275, "bonu": [235, 380, 382], "bonusmalu": [217, 235], "boo": [172, 379], "book": [83, 104, 449, 453, 455, 841, 846, 850, 1004, 1005, 1006, 1009, 1051], "booktitl": 0, "bool": [84, 101, 114, 186, 235, 364, 382, 426, 427, 428, 429, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 526, 529, 530, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 707, 709, 710, 714, 715, 716, 718, 719, 720, 721, 733, 734, 735, 736, 737, 738, 745, 748, 749, 761, 763, 768, 770, 774, 776, 781, 785, 789, 790, 791, 792, 794, 796, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 821, 825, 826, 829, 830, 831, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 933, 935, 936, 937, 938, 949, 950, 955, 956, 969, 972, 978, 980, 988, 993, 994, 995, 996, 998, 1048, 1051, 1052], "bool_": 219, "boolean": [2, 135, 251, 364, 377, 382, 384, 391, 415, 421, 422, 423, 470, 568, 569, 588, 589, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 636, 639, 640, 643, 656, 678, 706, 785, 840, 846, 867, 874, 894, 928, 933, 991, 998, 1004, 1010, 1015, 1018, 1024, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1057], "boom": 1057, "boost": [2, 14, 46, 52, 105, 136, 137, 138, 141, 142, 144, 145, 155, 158, 161, 181, 187, 193, 198, 219, 225, 240, 274, 276, 311, 319, 321, 328, 331, 383, 388, 396, 413, 423, 454, 472, 473, 496, 503, 508, 527, 560, 561, 566, 567, 568, 569, 571, 572, 639, 640, 641, 642, 748, 749, 755, 757, 797, 807, 810, 811, 812, 828, 834, 837, 872, 884, 885, 1004, 1008, 1027, 1029, 1030, 1034, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1052], "booster": 1044, "boosting_error": 137, "boostingcolumntransform": 158, "boostingdecis": 421, "booth": 1046, "bootstrap": [140, 141, 149, 185, 278, 287, 326, 418, 421, 561, 562, 563, 564, 565, 570, 571, 572, 943, 978, 1004, 1039, 1040, 1042, 1044, 1047, 1049, 1052], "bootstrap_featur": [421, 562, 563], "bootstrap_indic": 278, "borchmann": 1054, "border": [452, 1049], "borderaxespad": 113, "borderpad": 361, "borderwidth": 143, "borg": [697, 701, 1005], "borgn": 1052, "bori": [1043, 1051, 1055], "borja": 1043, "born": 1045, "borovec": 1053, "borovikova": 1050, "bosch": 1052, "bossan": [1051, 1053, 1054, 1055, 1057], "bossch": [0, 403, 1046, 1047, 1048, 1052], "boston": 1032, "bot": [382, 386, 1013, 1053, 1056, 1057], "botelho": 1051, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 89, 90, 99, 105, 111, 113, 117, 118, 128, 130, 135, 140, 143, 144, 147, 148, 153, 157, 158, 161, 167, 168, 170, 172, 174, 181, 183, 189, 190, 191, 192, 197, 202, 203, 204, 206, 217, 218, 219, 221, 222, 223, 225, 235, 241, 250, 251, 252, 260, 261, 262, 263, 264, 265, 269, 275, 276, 277, 278, 282, 284, 286, 288, 295, 307, 315, 319, 320, 324, 326, 330, 336, 337, 342, 347, 349, 356, 357, 358, 364, 365, 369, 370, 371, 375, 376, 377, 380, 382, 384, 386, 388, 389, 391, 394, 395, 396, 397, 400, 405, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 427, 443, 452, 458, 468, 474, 481, 488, 489, 490, 491, 494, 495, 503, 504, 507, 509, 512, 514, 515, 516, 541, 545, 547, 554, 558, 562, 563, 564, 570, 571, 572, 573, 574, 584, 595, 596, 598, 604, 614, 615, 634, 639, 640, 650, 664, 665, 666, 679, 681, 683, 685, 694, 706, 711, 719, 723, 736, 737, 738, 743, 745, 764, 768, 774, 781, 785, 790, 791, 794, 795, 796, 802, 810, 811, 813, 830, 840, 868, 869, 883, 885, 887, 899, 904, 909, 911, 912, 919, 921, 928, 941, 947, 956, 970, 982, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "botstein": [635, 998], "bottleneck": [369, 388, 421, 454, 868, 869], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 80, 86, 88, 97, 99, 121, 148, 156, 161, 217, 228, 244, 260, 262, 263, 266, 272, 275, 286, 300, 315, 335, 337, 345, 382, 412, 414, 420, 594, 923, 1002, 1004, 1008, 1016, 1028], "bottom_h": 315, "bottou": [683, 684, 685, 1012, 1022], "bou": [1054, 1055], "boucaud": 1047, "boucher": 1046, "bouckaert": 275, "boukhobza": 1057, "boulard": 1056, "bould": 414, "bouldin": [2, 732], "boulogn": 1042, "boun": 379, "bound": [2, 64, 90, 178, 180, 182, 187, 219, 235, 243, 274, 389, 414, 419, 422, 424, 425, 450, 495, 509, 519, 530, 543, 570, 602, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 639, 642, 644, 657, 661, 665, 684, 712, 742, 795, 804, 805, 851, 852, 888, 900, 903, 904, 905, 913, 914, 915, 918, 941, 1004, 1007, 1008, 1011, 1020, 1022, 1023, 1025, 1029, 1047, 1050, 1051, 1053], "bound_": 543, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 93, 95, 136, 139, 146, 156, 160, 165, 175, 176, 178, 187, 191, 201, 218, 226, 244, 249, 252, 278, 290, 303, 305, 306, 308, 310, 315, 317, 320, 333, 338, 340, 342, 343, 344, 345, 347, 353, 354, 361, 378, 412, 421, 422, 424, 456, 462, 511, 543, 556, 557, 576, 595, 596, 598, 638, 742, 768, 807, 840, 853, 859, 861, 862, 863, 886, 890, 907, 908, 913, 915, 916, 919, 941, 1002, 1011, 1014, 1018, 1021, 1022, 1023, 1029, 1039, 1041, 1043, 1052, 1053, 1054, 1056], "bounding_ax_": [389, 639], "boundscheck": [370, 383], "bourassa": 421, "bourbeau": [1046, 1047, 1048], "bourboux": 1050, "bourguignat": 1044, "bournhonesqu": 1049, "bousquet": 907, "boutili": 1020, "boutsidi": 419, "bow": 415, "bown": 1045, "bowyer": 1057, "box": [43, 49, 66, 90, 191, 192, 238, 292, 315, 319, 389, 419, 421, 519, 562, 563, 887, 899, 923, 925, 1008, 1009, 1015, 1018, 1024, 1047, 1055], "boxcox": 1058, "boxplot": [49, 113, 151, 190, 193, 289, 324], "boxplot_runtim": 49, "boxstyl": [48, 317], "boy": 1053, "boyd": 1004, "boyl": [1056, 1057], "boyuan": [1043, 1044, 1045], "bp": [49, 151, 172, 204, 206, 379, 1016], "bpo": 885, "br": 139, "br_estim": 185, "bracket": [382, 1004], "bradi": 1046, "bradlei": [172, 379, 1004], "bradshaw": [1042, 1043, 1046], "bradypu": [50, 308, 377, 505], "bradypus_variegatus_0": 50, "brain": 376, "branch": [369, 380, 382, 385, 386, 414, 421, 448, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 919, 920, 921, 922, 924, 1011, 1015, 1024], "branching_factor": 448, "brand": [397, 400], "brandon": [1045, 1046, 1053, 1054], "brandt": 1050, "brandyn": 1039, "brault": 1046, "braun": 1047, "bravi": 1045, "braycurti": [456, 463, 706, 785, 786, 787, 1011], "braycurtisdist": 706, "brc": [414, 448], "brdav": 1057, "bre": [2, 641, 1024], "bread": 1032, "breadth": [851, 852, 856, 1032, 1041], "breadth_first": [851, 852, 856], "break": [2, 55, 74, 81, 104, 114, 187, 206, 209, 223, 251, 262, 292, 327, 335, 340, 356, 358, 382, 386, 388, 395, 414, 475, 519, 646, 781, 785, 788, 804, 884, 891, 896, 913, 916, 930, 1004, 1007, 1016, 1018, 1023, 1028, 1029, 1039, 1040, 1046, 1047, 1049, 1051, 1055], "break_ti": [353, 913, 916, 1023, 1049], "breakdown": [113, 114, 234, 686, 1004], "breakdown_": 686, "breast": [2, 172, 375, 507, 1016, 1034, 1044], "breast_canc": 337, "breast_cancer_data": 172, "brecht": 648, "bredin": 1043, "breiman": [192, 418, 421, 523, 524, 525, 562, 563, 571, 572, 641, 919, 920, 1016, 1024], "brekk": 1054, "brendan": [73, 446, 460, 1055, 1056, 1057], "brenden": 1053, "brenner": 1008, "breno": [1046, 1047], "brent": [1043, 1047, 1048], "brentfagan": 1048, "bresson": 1058, "brett": [1042, 1044, 1045, 1046, 1047, 1054], "brettingen": 1045, "breuer": 1050, "breunig": [414, 456, 463, 857, 1014], "breve": 1055, "brevin": [1055, 1056], "brew": [149, 380, 400], "brian": [0, 404, 715, 1008, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053], "brice": [1051, 1052], "bridg": [394, 1005], "brief": [382, 1006], "briefli": [284, 381, 395, 421, 997, 1049], "brier": [2, 61, 62, 64, 412, 716], "brier1950": 1008, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 412, 1008, 1047, 1048, 1049, 1057], "brigata": 379, "bright": 345, "brighter": 182, "brigi": [1050, 1051], "brigitta": [1049, 1050, 1051, 1055, 1057], "bring": [190, 315, 419, 683, 685, 1005, 1032], "british": 422, "brittl": [74, 414], "broad": [382, 396, 1027], "broadcast": 634, "broader": [317, 1004, 1031], "broadli": [396, 414], "brocchini": 1051, "brochart": 1056, "brockherd": 1041, "brodersen": 715, "broke": 1046, "broken": [400, 418, 606, 607, 642, 727, 933, 1008, 1024, 1042, 1046, 1047, 1048, 1050, 1053], "brook": [1042, 1043, 1051], "brought": [189, 560, 561, 564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "brown": [50, 121, 308, 377, 505, 635, 998, 1044, 1046, 1047, 1048, 1051], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 382, 390, 1018, 1056], "broyden": 1004, "brr": 197, "brr_poli": 197, "brr_score": 197, "bruce": [1049, 1050], "brucher": [0, 404, 1039], "brummitt": [1046, 1047], "brunak": 750, "brunner": 1043, "bruno": [1050, 1051, 1052, 1057], "brutal": 345, "brute": [295, 394, 409, 418, 425, 450, 452, 456, 463, 639, 640, 695, 696, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 1015, 1034, 1043, 1047, 1051, 1054, 1055, 1056, 1057], "bry": [209, 226], "bryan": [1039, 1042, 1048, 1049, 1052], "br\u00f6mmel": [1053, 1054], "br\u00fblade": 321, "bsa": 771, "bsas_in_radian": 771, "bscikit": 1039, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 388, 394], "bsh": 1054, "bsmtfinsf1": [147, 158], "bsmtfinsf2": 147, "bsmthalfbath": 147, "bsmtunfsf": 158, "bspline": 890, "bsplines_": [218, 890], "bsr": [937, 938, 1052], "bt": 422, "btol": [679, 681], "buck": 634, "budarz": 1052, "buddha": 1044, "budget": [0, 147, 846, 847, 848, 849, 850, 997], "bueno": 771, "buffer": [85, 1052, 1057], "buffer_mb": 1039, "bug": [251, 324, 325, 326, 327, 328, 329, 330, 331, 332, 380, 384, 385, 386, 387, 390, 394, 396, 1028, 1039, 1040, 1041, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "bugfix": [1039, 1053], "buguen": 1039, "buhmann": 715, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 90, 102, 108, 127, 137, 146, 148, 155, 161, 169, 171, 184, 185, 187, 190, 225, 280, 283, 292, 294, 295, 312, 313, 316, 321, 322, 358, 365, 369, 370, 371, 378, 384, 385, 386, 387, 388, 396, 400, 407, 414, 418, 421, 422, 448, 496, 508, 510, 531, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 592, 593, 595, 596, 598, 634, 635, 637, 698, 720, 721, 808, 812, 816, 825, 831, 833, 872, 889, 891, 919, 920, 921, 922, 924, 951, 955, 997, 998, 1005, 1008, 1012, 1014, 1018, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1039, 1042, 1044, 1045, 1046, 1048, 1051], "build_analyz": [422, 595, 596, 598, 1049], "build_preprocessor": [422, 595, 596, 598, 1049], "build_projection_oper": 53, "build_token": [57, 422, 595, 596, 598], "build_tool": [382, 386, 390], "builder": [47, 49, 352, 386], "buildtool": 380, "built": [2, 25, 66, 118, 135, 137, 138, 146, 148, 192, 225, 278, 292, 308, 324, 361, 364, 369, 377, 380, 382, 383, 384, 386, 388, 390, 391, 394, 395, 396, 400, 408, 414, 415, 418, 421, 423, 451, 510, 560, 561, 562, 563, 566, 567, 568, 569, 595, 596, 600, 604, 646, 647, 648, 649, 650, 653, 654, 659, 665, 667, 668, 669, 670, 679, 680, 681, 682, 688, 810, 811, 818, 842, 845, 851, 852, 921, 922, 960, 991, 1004, 1008, 1009, 1021, 1022, 1024, 1027, 1032, 1039, 1042, 1043, 1045, 1051, 1057], "builtin": 1023, "buitinck": [0, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "bulk": [284, 425, 450], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1046, "buluttekin": 1049, "bumblebe": 1052, "bunch": [2, 50, 251, 375, 376, 377, 470, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 517, 574, 575, 576, 577, 639, 640, 641, 870, 871, 919, 920, 921, 922, 964, 967, 1032, 1044, 1046, 1049, 1051, 1055], "bundl": [1047, 1048], "bupu": 191, "burden": [382, 883, 1028], "bureau": 377, "buri": 382, "burjek": 1039, "burk": [0, 366, 1054], "burn": [1046, 1047], "burst": 1008, "busch": [1047, 1048, 1050], "bush": [45, 377], "busi": [43, 217, 275, 332, 390, 394, 413, 795, 1004, 1008, 1032], "business_metr": 269, "business_scor": 269, "bussonni": [1039, 1051], "butler": [480, 1042, 1050, 1051], "butlerdavi": 480, "butter": 1032, "button": [382, 390], "butyugina": 1055, "buuren": [634, 998], "buzenet": [1054, 1055], "bv_bunch": 50, "bwignal": 1042, "bypass": [413, 415, 606, 653, 659, 829, 919, 920, 921, 922, 1055], "byproduct": 241, "byrd": 665, "byron": 1051, "byte": [83, 88, 422, 493, 510, 515, 516, 589, 595, 596, 598, 972, 1039, 1046, 1047, 1054, 1057], "bz2": [55, 515, 516], "bz2file": 55, "bzip2": 1039, "b\u00e9gude": 321, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 80, 87, 91, 92, 94, 95, 96, 100, 105, 106, 108, 118, 120, 121, 128, 129, 137, 139, 140, 146, 147, 154, 156, 157, 159, 160, 165, 172, 175, 176, 177, 178, 182, 195, 201, 205, 207, 208, 209, 210, 212, 214, 215, 224, 226, 228, 229, 230, 231, 233, 234, 237, 239, 241, 242, 249, 250, 252, 256, 261, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 278, 280, 284, 286, 295, 298, 301, 303, 304, 305, 306, 308, 310, 311, 313, 315, 316, 317, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 361, 362, 363, 369, 370, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 394, 400, 401, 405, 411, 412, 414, 415, 416, 417, 418, 419, 421, 423, 427, 443, 448, 449, 452, 453, 455, 465, 474, 481, 530, 535, 541, 545, 547, 548, 554, 556, 557, 597, 614, 615, 617, 638, 646, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 679, 680, 686, 692, 693, 695, 696, 699, 700, 715, 721, 722, 725, 738, 742, 748, 749, 765, 766, 807, 821, 830, 836, 838, 846, 847, 848, 849, 850, 851, 852, 858, 860, 867, 882, 884, 885, 886, 890, 892, 906, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 937, 938, 970, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1013, 1015, 1018, 1020, 1022, 1023, 1024, 1027, 1032, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1055, 1057], "c0": [147, 247, 321], "c1": [100, 147, 182, 247, 321], "c2": [100, 147, 182, 247, 321], "c22": 329, "c26": 329, "c3": [100, 147, 321], "c4": [100, 321, 1030, 1034], "c5": [100, 1030, 1034], "c56poni": 1049, "c6": 100, "c99": 1027, "c_": [50, 62, 63, 64, 93, 113, 124, 146, 149, 155, 156, 165, 176, 215, 230, 233, 244, 301, 318, 320, 339, 345, 353, 354, 414, 666, 721, 722, 725, 1008], "c_0": [1000, 1006], "c_1": 1005, "c_2": [414, 1005], "c_2d_rang": 345, "c_e": 414, "c_i": [414, 1011], "c_j": [414, 1013], "c_jh_j": 1013, "c_k": 556, "c_option": 106, "c_p": 1004, "c_q": 414, "c_rang": 345, "c_scale": 352, "ca": [172, 379, 414, 448, 919, 920, 1020, 1024], "cabernet": 321, "cabin": 329, "cablevis": 51, "cabrera": 1049, "cach": [2, 52, 89, 101, 187, 276, 295, 296, 298, 303, 307, 369, 370, 377, 396, 447, 451, 456, 474, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 509, 515, 516, 807, 853, 855, 871, 872, 909, 913, 914, 915, 916, 917, 992, 1011, 1023, 1029, 1042, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1057, 1058], "cache_path": 1011, "cache_s": [474, 909, 913, 914, 915, 916, 917, 1023], "cached_pip": [106, 415], "cachedir": [89, 106, 391, 415], "caching_dir": 992, "caherrera": 1052, "cai": 1052, "caicedo": 1039, "cailean": 1057, "cainei": 1057, "caio": [1045, 1047, 1049], "caj": 51, "caje": 1040, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 377, "cal_scor": 63, "calcot": 1052, "calcsiz": 380, "calcul": [2, 46, 61, 63, 69, 81, 94, 113, 135, 136, 137, 141, 159, 186, 187, 193, 213, 221, 222, 234, 249, 251, 274, 275, 281, 285, 290, 294, 343, 349, 350, 365, 369, 389, 396, 405, 411, 412, 414, 418, 419, 421, 425, 444, 449, 450, 452, 454, 456, 457, 459, 461, 462, 477, 478, 484, 487, 543, 554, 570, 571, 576, 604, 618, 627, 639, 640, 641, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 679, 680, 681, 682, 686, 688, 691, 695, 697, 699, 701, 714, 723, 736, 737, 742, 743, 745, 751, 761, 771, 776, 778, 779, 780, 781, 785, 788, 790, 791, 794, 795, 796, 799, 800, 802, 814, 816, 832, 836, 849, 851, 852, 889, 890, 891, 897, 901, 911, 912, 943, 957, 1000, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1016, 1018, 1021, 1023, 1029, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "cald": 906, "caleb": 1051, "calibr": [2, 52, 66, 140, 153, 160, 235, 247, 269, 275, 277, 396, 405, 443, 444, 445, 519, 522, 571, 576, 665, 666, 683, 716, 736, 748, 791, 794, 795, 806, 829, 837, 849, 908, 911, 946, 997, 1004, 1008, 1021, 1023, 1029, 1030, 1034, 1036, 1043, 1045], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 412, 443], "calibrated_clf": 443, "calibrated_df": [62, 64], "calibrated_forest": 997, "calibratedclassifiercv": [2, 61, 62, 63, 365, 396, 405, 412, 683, 806, 829, 997, 1023, 1028, 1043, 1045, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 412, 443, 444, 1048, 1053, 1057], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 412, 946, 1052, 1053, 1057], "california": [2, 148, 182, 185, 186, 315, 321, 326, 375, 379, 496, 1034], "calinski": [2, 717, 1045], "calinski_harabasz_scor": [2, 414, 1047], "calinski_harabaz_scor": [1045, 1047], "cali\u0144ski": 414, "call": [52, 53, 55, 81, 83, 85, 89, 105, 121, 135, 142, 149, 169, 174, 178, 180, 182, 189, 191, 204, 217, 218, 221, 235, 245, 251, 255, 257, 258, 269, 275, 276, 284, 288, 290, 292, 295, 297, 320, 322, 326, 327, 356, 357, 358, 364, 369, 370, 371, 377, 382, 383, 384, 387, 388, 389, 390, 391, 394, 395, 396, 397, 400, 405, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 426, 437, 446, 449, 452, 453, 455, 456, 457, 458, 459, 460, 463, 466, 468, 470, 471, 474, 475, 480, 488, 489, 490, 494, 497, 499, 502, 504, 510, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 584, 589, 590, 595, 596, 598, 604, 609, 614, 615, 617, 618, 621, 627, 634, 635, 636, 637, 638, 639, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 711, 739, 749, 762, 778, 781, 785, 786, 787, 788, 800, 804, 805, 806, 807, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 860, 862, 867, 868, 869, 870, 871, 874, 875, 876, 878, 880, 881, 883, 888, 891, 892, 895, 900, 901, 902, 903, 904, 908, 911, 912, 913, 914, 916, 917, 920, 922, 930, 932, 945, 949, 954, 955, 964, 965, 967, 973, 974, 978, 981, 991, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1020, 1021, 1023, 1024, 1027, 1032, 1034, 1036, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "callabl": [2, 265, 279, 332, 396, 418, 421, 422, 423, 425, 426, 447, 449, 450, 451, 452, 453, 455, 456, 458, 463, 465, 466, 470, 471, 472, 473, 538, 540, 542, 544, 546, 552, 553, 564, 565, 566, 567, 568, 569, 571, 572, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 617, 618, 627, 635, 637, 641, 646, 650, 666, 678, 680, 682, 695, 698, 699, 703, 718, 726, 739, 749, 778, 781, 785, 786, 787, 788, 799, 800, 807, 810, 811, 813, 821, 829, 830, 833, 834, 835, 836, 838, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 875, 884, 906, 907, 913, 914, 915, 916, 917, 968, 974, 977, 991, 997, 1008, 1018, 1039, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1055, 1058], "callback": [538, 544, 546, 552, 553, 860, 973, 1028, 1055], "callbl": 853, "calle": [2, 251, 965], "caller": [2, 251, 415, 653, 654, 659, 667, 668, 669, 688, 901, 902, 964, 965, 983, 984, 985, 1048], "callgrin": 388, "callgrind": 385, "calm": 51, "caltech": 356, "calvin": [1042, 1043], "calvo": [1047, 1048], "cambridg": [377, 419, 597, 846, 850, 1004, 1006, 1010], "came": 1007, "camera_ind": 53, "camil": [1047, 1055, 1056], "camila": 1049, "camilaagw": 1049, "camilo": 1045, "campello": [414, 452], "campustrampu": 1046, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 81, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 120, 124, 126, 127, 128, 130, 132, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 167, 168, 169, 170, 171, 172, 174, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 206, 208, 210, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 225, 233, 234, 235, 237, 238, 239, 244, 245, 246, 247, 248, 250, 251, 254, 255, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 282, 284, 286, 287, 288, 289, 290, 292, 294, 295, 297, 299, 300, 301, 302, 304, 311, 312, 313, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 338, 339, 342, 343, 345, 348, 349, 352, 356, 357, 358, 362, 363, 364, 365, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 395, 396, 397, 399, 400, 401, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 437, 439, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 478, 488, 489, 490, 493, 503, 506, 510, 515, 516, 519, 528, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 586, 587, 588, 589, 590, 591, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 639, 641, 642, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 696, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 711, 714, 716, 718, 719, 725, 727, 728, 729, 730, 731, 733, 734, 736, 737, 739, 740, 744, 745, 746, 747, 750, 753, 759, 762, 763, 764, 765, 766, 770, 786, 787, 789, 790, 791, 792, 794, 795, 796, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 868, 869, 870, 871, 874, 875, 876, 878, 879, 880, 884, 885, 886, 889, 890, 891, 896, 903, 904, 908, 909, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 923, 924, 927, 928, 931, 933, 935, 937, 941, 943, 949, 952, 954, 955, 962, 964, 967, 970, 973, 977, 978, 981, 988, 991, 992, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "canberra": [456, 463, 706, 785, 786, 787, 1011], "canberradist": 706, "cancel": [421, 422, 770], "cancer": [2, 172, 375, 413, 507, 600, 601, 858, 1016, 1034, 1044], "candela": 379, "candid": [108, 265, 273, 276, 283, 326, 371, 382, 386, 414, 421, 454, 456, 807, 810, 811, 819, 821, 1004, 1011, 1024, 1045], "candidate_idx": 274, "cannon": 1054, "cannot": [43, 52, 75, 91, 109, 115, 123, 128, 145, 190, 191, 202, 217, 235, 251, 288, 315, 345, 352, 371, 381, 383, 388, 394, 396, 397, 402, 408, 414, 415, 416, 418, 419, 421, 422, 424, 471, 528, 545, 546, 547, 550, 554, 617, 620, 621, 622, 624, 626, 627, 629, 630, 632, 658, 662, 689, 699, 718, 724, 785, 810, 811, 858, 859, 861, 862, 863, 871, 872, 876, 881, 882, 893, 935, 937, 938, 997, 998, 1002, 1004, 1005, 1008, 1009, 1014, 1018, 1023, 1024, 1028, 1032, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "canon": [2, 51, 396, 412, 421, 488, 489, 491, 775, 1028, 1030, 1034], "canonic": 396, "cant": [1056, 1057], "cantor": [635, 998], "canuma": 1052, "canva": 51, "cao": 414, "cap": [411, 414, 762, 1008, 1048], "capabl": [90, 91, 118, 153, 179, 221, 241, 384, 396, 400, 1009, 1012, 1023, 1024, 1032, 1039, 1048, 1056], "capac": [153, 174, 192], "capit": [49, 62, 331, 503, 813, 830], "capitain": 1057, "cappion": [699, 1005], "cappuzzo": 1056, "capsiz": 337, "caption": 104, "captur": [2, 43, 48, 51, 52, 72, 74, 118, 150, 155, 167, 179, 190, 197, 202, 217, 221, 266, 288, 294, 325, 345, 349, 390, 414, 421, 422, 423, 578, 595, 596, 598, 857, 974, 1008, 1013, 1021, 1025, 1051], "car": 217, "carbal": 1056, "card": 1047, "cardin": [72, 144, 145, 151, 192, 193, 321, 322, 330, 414, 421, 469, 560, 561, 564, 565, 566, 567, 571, 572, 573, 686, 884, 885, 892, 919, 920, 921, 922, 1008, 1009, 1016, 1018, 1053, 1054], "cardiotocogram": 254, "care": [47, 90, 151, 190, 269, 292, 349, 369, 371, 386, 388, 394, 396, 397, 408, 413, 414, 416, 422, 443, 466, 475, 647, 665, 666, 673, 674, 675, 683, 684, 685, 702, 911, 1005, 1023, 1032, 1055], "carefulli": [289, 369, 412, 419, 1023], "carei": [1042, 1043, 1044, 1045, 1046], "carett": 1046, "cari": 1051, "carl": [179, 424, 617, 618, 621, 626, 629], "carla": 1055, "carlo": [0, 249, 372, 421, 424, 618, 648, 649, 1000, 1013, 1039, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "carlson": 1046, "carlsson": 1042, "carmen": 321, "carnegi": 906, "caro": 1044, "carodorum": 321, "carol": [1045, 1046], "carolin": 1012, "caro\u00e7o": 1058, "carrascosa": [1032, 1043], "carre\u00f1o": 1054, "carri": [51, 67, 137, 186, 269, 275, 278, 283, 288, 311, 317, 358, 397, 422, 564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 1032], "carrillo": 1044, "carsten": 1052, "cart": [1030, 1034], "carter": [1045, 1046, 1054, 1057], "cartesian": [105, 411, 640, 1011, 1054], "cartman_nabana": 1049, "cartograph": 195, "cartographi": 1004, "caruana": [62, 64, 412, 443, 445], "carvaj": 1039, "casado": 1050, "casagrand": [1047, 1048], "casalegno": 1051, "cascad": 379, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 84, 87, 90, 92, 96, 101, 105, 106, 114, 118, 128, 130, 140, 142, 143, 150, 151, 158, 169, 171, 172, 174, 181, 190, 191, 193, 202, 203, 206, 208, 217, 218, 219, 221, 222, 225, 231, 233, 234, 235, 244, 248, 249, 250, 251, 254, 255, 265, 268, 269, 272, 274, 275, 276, 278, 281, 282, 284, 292, 295, 298, 302, 312, 315, 317, 320, 322, 324, 327, 332, 349, 356, 357, 358, 364, 365, 369, 370, 371, 376, 377, 382, 383, 384, 386, 387, 388, 389, 391, 394, 395, 396, 397, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 443, 446, 449, 450, 452, 453, 457, 459, 469, 470, 471, 473, 480, 503, 515, 516, 522, 546, 548, 549, 550, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 595, 598, 600, 601, 604, 609, 613, 616, 617, 618, 632, 634, 635, 637, 639, 654, 655, 660, 663, 664, 665, 666, 668, 670, 673, 675, 676, 679, 681, 682, 683, 687, 689, 690, 691, 692, 693, 694, 706, 710, 715, 716, 719, 723, 725, 727, 728, 730, 733, 735, 736, 737, 741, 742, 745, 749, 750, 752, 753, 755, 757, 760, 761, 763, 770, 785, 788, 790, 791, 792, 794, 795, 796, 797, 801, 803, 805, 807, 810, 811, 813, 821, 825, 830, 831, 832, 833, 834, 835, 836, 838, 840, 848, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 871, 878, 880, 881, 884, 885, 886, 889, 890, 891, 892, 895, 901, 902, 903, 904, 911, 913, 916, 919, 920, 926, 931, 933, 943, 955, 956, 996, 997, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1024, 1027, 1028, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "caselli": [1047, 1048], "cash": 1004, "cashman": 1049, "casino": [1053, 1054], "cass": 1045, "cassi": 321, "cast": [50, 52, 88, 217, 238, 376, 397, 422, 503, 651, 652, 653, 659, 663, 664, 667, 668, 669, 670, 671, 672, 680, 682, 972, 1046, 1047, 1048, 1049, 1052, 1054, 1056], "castachick": 1050, "castello": 1043, "castor": 1050, "caswel": [1052, 1055], "cat": [51, 105, 191, 192, 254, 327, 328, 329, 330, 331, 332, 377, 422, 494, 589, 719, 725, 761, 790, 892, 1008, 1018, 1048, 1049, 1051], "cat_column": 254, "cat_linear_processor": 158, "cat_proc": [246, 325], "cat_selector": 158, "cat_str": 57, "cat_tree_processor": 158, "catajara": 1049, "catalfo": 1047, "catalin": 649, "catastroph": [269, 322, 770, 1028], "catch": [79, 97, 312, 370, 390, 391], "catch_warn": [79, 97, 251, 311, 312], "categor": [2, 43, 105, 136, 142, 153, 158, 187, 190, 191, 192, 217, 235, 254, 256, 258, 269, 322, 327, 329, 330, 371, 374, 376, 377, 387, 396, 415, 422, 472, 473, 495, 496, 503, 512, 568, 569, 588, 589, 614, 615, 639, 640, 655, 665, 666, 676, 687, 716, 834, 846, 847, 848, 849, 850, 872, 874, 878, 879, 882, 884, 885, 892, 906, 907, 928, 998, 1004, 1015, 1016, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1043, 1044, 1047, 1049, 1051, 1054, 1055, 1056, 1057], "categori": [2, 25, 57, 79, 97, 104, 105, 147, 158, 190, 191, 217, 225, 232, 254, 269, 276, 311, 312, 317, 321, 322, 326, 329, 331, 338, 356, 357, 358, 376, 377, 391, 414, 415, 421, 422, 424, 494, 503, 504, 510, 568, 569, 655, 665, 666, 676, 687, 750, 765, 766, 847, 884, 885, 892, 949, 950, 998, 1004, 1005, 1006, 1010, 1016, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "categorical_column": [43, 147, 190, 192, 254, 473], "categorical_columns_selector": 254, "categorical_columns_subset": 147, "categorical_crossentropi": [1049, 1053], "categorical_encod": 192, "categorical_featur": [43, 105, 147, 153, 191, 269, 321, 326, 327, 328, 329, 331, 387, 421, 568, 569, 639, 640, 1015, 1047, 1051, 1054, 1056], "categorical_preprocessor": [256, 321], "categorical_transform": 105, "categoricalnb": [2, 846, 848, 849, 850, 1010, 1049, 1050, 1051, 1052, 1054], "categories_": [884, 885, 892, 1018, 1047, 1054], "categoris": [949, 950], "category_1_fold": 510, "category_2_fold": 510, "category_count_": 847, "category_s": 357, "categr": 1016, "caterpillar": 51, "cathi": [1043, 1049], "catindex": 191, "catplot": 265, "caught": [382, 390, 408], "caus": [43, 62, 64, 150, 175, 190, 215, 217, 221, 222, 235, 294, 322, 349, 358, 365, 380, 387, 412, 414, 419, 420, 422, 424, 449, 453, 455, 465, 516, 539, 589, 596, 617, 618, 785, 846, 847, 848, 850, 875, 884, 886, 889, 890, 937, 938, 998, 1004, 1008, 1016, 1018, 1021, 1028, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058], "causal": [187, 188, 212, 664, 792, 837, 1029], "causat": 190, "caution": [190, 269, 386, 446, 460, 1047], "cautiou": 1046, "caveat": [418, 424], "cawlei": [280, 1008], "cax": [66, 177, 286], "ca\u00f1ardo": 1042, "cb": [177, 248, 264], "cbar_ax": 286, "cbar_kw": [197, 202], "cc": 380, "cc18": 376, "cc_home": [919, 920], "cca": [2, 252, 417, 489, 491, 1009, 1043, 1047, 1048, 1049, 1051, 1053, 1057], "ccat": 377, "ccf2002": 1000, "cclauss": 1047, "cco": 356, "ccp_alpha": [324, 360, 564, 565, 566, 567, 571, 572, 919, 920, 921, 922, 1024, 1049], "ccp_path": [919, 920, 921, 922], "cd": [123, 172, 379, 380, 382, 386, 388, 419, 477, 478, 484, 538, 544, 546, 547, 550, 552, 553, 554, 1004, 1044, 1054], "cdef": 383, "cdf": 275, "cdist": 1052, "cdivis": 383, "cdot": [275, 349, 411, 414, 419, 420, 424, 621, 622, 626, 629, 630, 877, 1000, 1002, 1008, 1012, 1018], "cdrig": 1053, "cdt": 57, "cea": [846, 1010], "ceballo": 1053, "ceder": [795, 1008], "ceethinwa": [1051, 1052], "ceh": 1054, "ceil": [153, 254, 564, 565, 566, 567, 570, 571, 572, 573, 601, 678, 810, 811, 919, 920, 921, 922, 1022], "celelibi": 1048, "celeo": 1043, "celeux": 535, "cell": [50, 51, 58, 63, 68, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 172, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 308, 313, 321, 325, 326, 328, 329, 331, 336, 364, 379, 387, 699, 1008, 1009, 1045, 1053], "cellular": 53, "celsiu": [191, 1015], "cemlyn": 1057, "cen": 750, "censor": 1027, "censu": 377, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 80, 83, 84, 85, 88, 90, 91, 94, 95, 96, 98, 99, 114, 128, 129, 132, 148, 149, 150, 151, 170, 172, 186, 191, 199, 209, 211, 217, 218, 228, 229, 240, 241, 244, 245, 254, 260, 263, 264, 270, 276, 286, 300, 303, 305, 311, 315, 317, 318, 328, 336, 343, 345, 346, 347, 351, 357, 358, 377, 378, 379, 387, 414, 416, 417, 419, 420, 421, 427, 446, 448, 449, 452, 453, 454, 455, 458, 460, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 508, 519, 531, 541, 542, 548, 551, 557, 613, 616, 617, 618, 639, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 697, 701, 703, 804, 876, 877, 880, 889, 891, 901, 902, 911, 912, 1002, 1004, 1005, 1007, 1015, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1056], "center1": 101, "center2": 101, "center3": 101, "center4": 101, "center_": 889, "center_box": [95, 519], "centers_0": 318, "centers_1": 318, "centers_init": 94, "cento": 380, "centr": 157, "central": [0, 53, 219, 377, 383, 414, 1014, 1027], "centrality_scor": 55, "centroid": [2, 77, 80, 92, 93, 111, 187, 296, 303, 318, 328, 341, 357, 378, 405, 414, 448, 449, 452, 453, 454, 455, 458, 465, 466, 468, 511, 556, 638, 858, 1029, 1030, 1034, 1039, 1043, 1046, 1051, 1055], "centroids_": [448, 452, 858], "ceo": 1032, "cerda": 1053, "certain": [52, 90, 148, 153, 190, 222, 234, 251, 275, 295, 319, 349, 365, 377, 378, 382, 386, 396, 399, 408, 410, 414, 419, 423, 645, 656, 660, 665, 670, 691, 871, 876, 911, 997, 1000, 1004, 1005, 1008, 1009, 1012, 1018, 1023, 1027, 1044, 1048, 1051, 1054], "certainli": [88, 104, 190, 357, 413], "certainti": [275, 384, 1008], "ceshin": 1045, "cest": 1008, "cetina": 1051, "cf": [322, 413, 414, 417, 448, 707, 1004, 1018, 1028], "cflag": 380, "cft": 414, "cftree": 448, "cg": [313, 665, 666, 679, 681, 694, 1004, 1043, 1044, 1046, 1050, 1052, 1053, 1056, 1057], "cga": 182, "cgi": 904, "cgohlk": [1042, 1043], "cgroup": [1052, 1053], "cgsavard": [1049, 1050], "ch6": 537, "chacon": 712, "chac\u00f3n": [414, 712], "chad": 1056, "chadi": 1047, "chai": [1051, 1054, 1055], "chain": [2, 35, 103, 109, 137, 164, 187, 247, 283, 286, 292, 293, 295, 298, 313, 365, 374, 394, 396, 424, 503, 509, 548, 618, 634, 665, 745, 807, 837, 840, 842, 843, 844, 845, 871, 872, 891, 997, 998, 1009, 1013, 1025, 1029, 1032, 1034], "chain_jaccard_scor": 294, "chain_method": [842, 1057], "chain_method_": 842, "chaitanya": 1050, "chaitanyamog": 1051, "chakhchoukh": 114, "chakravarti": [642, 644], "chalearn": 1008, "challeng": [51, 158, 174, 191, 197, 235, 244, 371, 377, 378, 408, 414, 416, 468, 478, 1008, 1014, 1032], "chalmer": 1053, "chalmerlow": 1042, "chalulu": 1054, "chan": [0, 849, 891, 1057, 1058], "chanc": [2, 71, 73, 84, 137, 167, 187, 193, 217, 225, 232, 235, 275, 281, 284, 285, 321, 352, 357, 365, 381, 413, 414, 418, 707, 709, 711, 712, 715, 723, 762, 764, 793, 802, 836, 1008, 1016, 1024, 1029, 1055], "chance_level_": [707, 709, 1055], "chance_level_kw": [254, 707, 709, 1055], "chandra": [1049, 1050, 1053], "chang": [2, 46, 62, 63, 64, 123, 127, 128, 140, 143, 151, 175, 185, 189, 190, 193, 205, 218, 219, 221, 222, 255, 256, 269, 270, 275, 282, 285, 289, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 345, 349, 358, 364, 365, 369, 370, 371, 377, 384, 385, 386, 387, 390, 394, 396, 405, 414, 418, 421, 422, 424, 426, 434, 439, 443, 446, 449, 450, 453, 455, 458, 460, 465, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 500, 501, 503, 511, 515, 516, 519, 520, 521, 529, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 595, 596, 597, 598, 600, 601, 604, 609, 617, 618, 620, 621, 622, 624, 626, 627, 629, 630, 632, 634, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 697, 699, 701, 707, 711, 714, 719, 723, 724, 736, 737, 743, 744, 762, 764, 785, 790, 791, 792, 794, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 821, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 861, 862, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 883, 884, 890, 891, 892, 899, 900, 905, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 930, 935, 937, 938, 950, 955, 966, 973, 974, 977, 997, 998, 999, 1007, 1008, 1009, 1011, 1018, 1021, 1022, 1023, 1024, 1028, 1037, 1038], "changed_onli": 1050, "changedbehaviorwarn": 1051, "changedbehaviourwarn": 1048, "changelog": [329, 386, 396, 1037], "changing_param": 46, "changing_param_valu": 46, "changyao": [1054, 1055], "channel": [370, 377, 380, 400, 422, 500, 501, 590, 591, 593, 594, 1031], "channel_prior": 380, "chapman": 1004, "chapter": [123, 365, 384, 414, 419, 421, 424, 537, 539, 541, 621, 626, 629, 650, 998, 1001, 1004, 1023, 1024], "char": [422, 595, 596, 598, 1039], "char_wb": [422, 595, 596, 598], "charact": [358, 382, 387, 396, 422, 510, 515, 516, 595, 596, 598, 923, 1013, 1039, 1052, 1054], "character": [75, 235, 360, 414, 418, 1005], "characteris": 1011, "characterist": [2, 79, 97, 172, 179, 187, 244, 245, 257, 267, 269, 270, 272, 277, 315, 365, 377, 379, 387, 412, 413, 418, 421, 424, 510, 511, 630, 645, 665, 709, 713, 715, 734, 789, 795, 796, 826, 837, 840, 878, 916, 1004, 1029], "chardet": 422, "chardetect": 422, "charg": [0, 269, 382], "charikar": 1000, "charl": [64, 269, 771, 1039, 1042, 1045, 1049, 1051, 1054], "charli": [1046, 1047, 1055], "charlton": 1046, "charra": [1054, 1056, 1057], "charron": [1032, 1042, 1043, 1050, 1051, 1052], "charset": [1039, 1041], "charset_error": 1041, "chart": [72, 148, 280, 402, 1009, 1042], "chartbeat": 1032, "chase": [51, 1039], "chasnovski": 1050, "chat": 1032, "chatterje": 1050, "chaudhuri": 452, "chauhan": [1047, 1048, 1054, 1055], "chaumond": [1032, 1047], "chauvin": 750, "chavez": [45, 377], "chawla": 1049, "chayant": 1046, "chazalon": 1053, "cheaper": [191, 414, 424, 680, 1000, 1004], "cheat": [52, 345, 402, 1012, 1022, 1041], "chebee7i": 1043, "chebyshev": [456, 463, 706, 785, 786, 787, 1011], "chebyshevdist": 706, "check": [2, 41, 43, 44, 47, 55, 81, 88, 91, 127, 135, 143, 158, 174, 187, 189, 191, 192, 203, 204, 206, 217, 238, 251, 261, 267, 269, 284, 292, 327, 336, 364, 369, 370, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 394, 395, 396, 400, 401, 405, 408, 415, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 497, 509, 515, 516, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 694, 695, 696, 697, 698, 699, 700, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 937, 938, 939, 949, 950, 960, 962, 963, 964, 968, 969, 991, 992, 993, 995, 996, 1003, 1004, 1005, 1008, 1023, 1024, 1028, 1029, 1032, 1034, 1039, 1040, 1042, 1046, 1050, 1051, 1052, 1053, 1054, 1056, 1058], "check_arrai": [2, 384, 391, 474, 541, 909, 996, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "check_classifier_multioutput": 1049, "check_consistent_length": 2, "check_cv": [2, 396, 1044], "check_decision_proba_consist": 1046, "check_estim": [2, 324, 384, 396, 930, 950, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "check_estimator_sparse_arrai": 1057, "check_estimator_sparse_data": 1057, "check_estimator_sparse_matrix": 1057, "check_estimators_fit_returns_self": 950, "check_estimators_pickl": 1056, "check_fit_idempot": 1048, "check_increas": 2, "check_input": [541, 555, 653, 654, 659, 667, 668, 669, 688, 694, 919, 920, 921, 922, 1047], "check_invers": [415, 471, 875, 1018, 1047, 1053, 1054], "check_is_fit": [2, 91, 135, 251, 385, 391, 396, 1049, 1052, 1053, 1058], "check_memori": [2, 391, 396, 1046], "check_metadata": 251, "check_methods_sample_order_invari": [1051, 1053], "check_methods_subset_invari": [1047, 1053], "check_nam": 930, "check_non_neg": 1058, "check_pairwise_arrai": [1048, 1058], "check_param": 996, "check_random_st": [2, 96, 233, 239, 247, 253, 384, 391, 396], "check_regressor_multioutput": 1049, "check_requires_y_non": 1053, "check_sample_weight_equival": 1058, "check_sample_weights_invari": 1058, "check_sample_weights_pandas_seri": 1047, "check_scalar": [2, 1053], "check_scor": [2, 396, 1057, 1058], "check_set_param": 1047, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1049, "check_transformers_unfitted_stateless": 1055, "check_x_i": [2, 384, 391, 996, 1043, 1047, 1048, 1053, 1058], "checkbox": 382, "checked_cv": 831, "checker": [2, 386, 831], "checkerboard": [2, 58, 411, 457, 459, 518, 520], "checking_statu": 269, "checkingclassifi": 1049, "checklist": [385, 386], "checkout": [380, 382, 386, 390], "checks_gener": 949, "checksum": [498, 1051], "cheeseman": 379, "chege": 1053, "chemic": 379, "chemometr": 379, "chen": [111, 112, 416, 421, 427, 481, 733, 763, 1000, 1008, 1042, 1045, 1046, 1047, 1049, 1052, 1053, 1054, 1055, 1058], "chenal": [1048, 1049, 1051], "cherkasski": 1004, "chernei": 1057, "chernyi": 1053, "cherri": 386, "cherti": 1043, "cherubin": 1045, "chestervil": 329, "cheuk": [1047, 1048], "cheung": 1040, "chevali": 1051, "chevalli": 1056, "chevron": 51, "chi": [2, 105, 113, 137, 319, 374, 423, 526, 599, 602, 603, 605, 606, 607, 611, 612, 613, 616, 645, 646, 647, 648, 649, 765, 766, 1034, 1039, 1044, 1045], "chi2": [2, 105, 422, 423, 458, 588, 599, 602, 603, 605, 606, 607, 612, 613, 616, 627, 645, 646, 647, 648, 649, 650, 766, 772, 781, 1039, 1046, 1053], "chi2_featur": 649, "chi2_kernel": [2, 410, 645, 649, 765, 772, 1006, 1040, 1058], "chi2_stat": 611, "chi2sampl": 645, "chiang": 1047, "chiara": [0, 373, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "chibuik": 1052, "chicco": 1057, "chief": 1032, "chieh": [1046, 1047], "chigurupati": 1051, "chih": [665, 1044], "chilamkurthi": 1045, "child": [153, 251, 356, 364, 370, 394, 396, 405, 414, 421, 448, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 919, 920, 921, 922, 964, 965, 967, 1024, 1046, 1058], "child_idx": 76, "children": [364, 414, 421, 447, 451, 469, 573, 1043, 1056], "children_": [76, 447, 451, 469], "children_left": 364, "children_right": 364, "chime": 381, "chin": [379, 1043], "china": [83, 414, 513, 514, 591, 594], "chines": 1027, "chinmaya": 1046, "chinthala": 1046, "chiotelli": 1048, "chip": [410, 1032], "chisquar": 319, "chitteti": 1053, "chkoar": 1046, "chloe": 1053, "cho": 1050, "choe": 1048, "choi": [1004, 1057], "choic": [2, 43, 46, 64, 75, 81, 90, 100, 104, 111, 130, 153, 174, 175, 181, 185, 206, 218, 254, 268, 269, 273, 275, 278, 289, 300, 322, 326, 356, 357, 365, 369, 380, 387, 396, 400, 414, 416, 418, 420, 421, 423, 424, 458, 468, 477, 478, 479, 480, 481, 482, 484, 545, 547, 548, 554, 566, 645, 654, 655, 663, 665, 666, 668, 676, 687, 699, 712, 749, 840, 853, 854, 859, 861, 862, 888, 891, 900, 902, 911, 912, 941, 997, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1016, 1021, 1022, 1023, 1024, 1046, 1049, 1050, 1054, 1055], "choleski": [112, 217, 235, 391, 477, 478, 484, 534, 618, 655, 657, 658, 661, 662, 663, 665, 666, 676, 679, 681, 687, 689, 690, 694, 804, 805, 1004, 1042, 1046, 1048, 1051, 1054, 1055, 1058], "cholesky_delet": 391, "cholesterol": [172, 379], "chong": 543, "choo": [1054, 1055], "choos": [43, 50, 51, 79, 81, 85, 88, 95, 97, 101, 111, 129, 146, 158, 172, 190, 193, 210, 252, 269, 270, 280, 287, 360, 365, 369, 370, 371, 384, 387, 390, 395, 396, 408, 412, 413, 414, 416, 418, 421, 422, 425, 449, 450, 453, 455, 465, 530, 539, 545, 566, 567, 589, 609, 665, 666, 679, 681, 686, 694, 695, 696, 700, 733, 763, 807, 810, 811, 821, 878, 911, 912, 919, 920, 921, 922, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1011, 1018, 1021, 1022, 1023, 1034, 1041, 1042, 1046, 1048, 1050], "choose_check_classifiers_label": 1049, "choose_random_sampl": 384, "choraria": 1051, "chose": [77, 190], "chosen": [47, 58, 81, 107, 158, 175, 190, 191, 206, 218, 234, 252, 268, 269, 270, 272, 278, 289, 357, 365, 369, 394, 413, 414, 416, 417, 421, 424, 446, 452, 455, 457, 459, 460, 466, 503, 530, 542, 564, 565, 566, 567, 568, 569, 571, 572, 654, 660, 663, 665, 666, 668, 670, 678, 683, 684, 685, 686, 687, 697, 701, 801, 804, 805, 807, 810, 811, 821, 841, 860, 911, 912, 919, 920, 921, 922, 955, 997, 1000, 1002, 1004, 1005, 1007, 1009, 1014, 1015, 1022, 1024, 1047, 1055, 1056], "chou": [1046, 1047], "choudhari": [1043, 1044, 1053, 1055], "choudhri": 1057, "chowdhuri": [1047, 1053], "choyal": [1046, 1047], "chri": [0, 404, 1039, 1042, 1047, 1048, 1049, 1050, 1053], "chrissobel": 1052, "christ": 57, "christian": [0, 57, 356, 357, 377, 403, 1032, 1039, 1040, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "christianwaldmann": 1054, "christin": [1054, 1055], "christo": [1048, 1049, 1051, 1053, 1056], "christof": [1043, 1044], "christoph": [191, 419, 424, 539, 617, 618, 621, 626, 629, 804, 1004, 1009, 1040, 1044, 1047, 1050, 1051, 1052, 1053, 1054], "christopherlim98": 1053, "chrome": 1018, "chronolog": [377, 504], "chu": [858, 1055], "chuan": 1012, "chugh": 1051, "chuliang": 1052, "chun": [1050, 1051, 1053, 1054, 1055], "chung": [1046, 1047], "chunk": [2, 47, 85, 369, 370, 414, 419, 425, 450, 455, 474, 545, 785, 788, 839, 840, 846, 847, 848, 849, 850, 909, 1010, 1046, 1047, 1048, 1049, 1050], "chunk_siz": 1040, "chunker": 422, "church": [904, 1020], "chyi": [1042, 1043, 1044, 1045, 1046], "ci": [90, 370, 385, 386, 1010, 1045, 1047], "ciccolella": [699, 1005], "cice": [1015, 1053], "cichocki": [419, 545, 547, 554], "cimport": [383, 391, 1047], "cindi": [1044, 1052, 1056, 1057], "cio": 376, "cipri\u00e1n": 1053, "circl": [2, 70, 95, 128, 156, 157, 165, 242, 252, 302, 305, 311, 315, 317, 336, 349, 363, 378, 386, 390, 414, 458, 468, 521, 529, 771, 1023], "circle1": 101, "circle2": 101, "circle3": 101, "circle4": 101, "circleci": [52, 178, 180, 182, 183, 245, 261, 313, 382], "circlecl": 0, "circuit": [57, 1005], "circular": 53, "circumst": [130, 235, 1011, 1027], "circumstanti": 217, "cirru": [0, 382], "cisco": 51, "citat": [0, 376, 379, 394], "cite": [376, 394, 414], "citi": [415, 422, 472], "citizen": 1018, "city_categori": 415, "city_london": 415, "city_pari": 415, "city_sallisaw": 415, "cityblock": [75, 79, 414, 456, 463, 769, 785, 786, 787, 1011], "cividi": 75, "ciyou": 665, "cj": [1010, 1042, 1043, 1044, 1045, 1046], "cjlin": [195, 376, 493, 515, 516, 665, 1042], "ckdtree": [425, 450, 1041], "cl": [0, 47, 51, 389, 396, 921], "cla": 129, "clabel": [177, 228], "clae": 1047, "clai": 1039, "claim": [187, 196, 382, 470, 503, 559, 655, 676, 687, 713, 752, 757, 759, 837, 872, 875, 876, 884, 891, 1004, 1029], "claimamount": 235, "claimnb": [217, 235], "clair": 1039, "clamp": [907, 1021], "clang": [380, 383], "clara": [376, 1051], "clare": 1049, "clarifi": [390, 397, 800], "clariti": [170, 382, 390], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 89, 90, 91, 93, 105, 106, 120, 121, 128, 131, 133, 135, 136, 143, 145, 153, 154, 159, 172, 174, 175, 177, 178, 180, 182, 183, 185, 187, 190, 191, 195, 196, 207, 208, 209, 225, 229, 232, 233, 238, 244, 251, 252, 254, 260, 261, 262, 267, 268, 269, 270, 275, 277, 281, 285, 286, 289, 292, 294, 295, 298, 300, 301, 303, 304, 305, 306, 320, 324, 328, 330, 331, 332, 334, 336, 337, 340, 341, 342, 343, 345, 346, 349, 353, 356, 357, 358, 361, 364, 371, 374, 376, 377, 378, 379, 382, 383, 384, 386, 387, 388, 389, 391, 394, 395, 400, 405, 408, 409, 410, 412, 414, 415, 417, 419, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 515, 516, 517, 519, 521, 522, 526, 529, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582, 584, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 727, 729, 734, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 750, 761, 762, 764, 789, 790, 791, 793, 794, 795, 796, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 942, 943, 945, 946, 947, 949, 950, 960, 963, 964, 965, 968, 973, 975, 977, 978, 991, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1012, 1015, 1016, 1018, 1019, 1021, 1024, 1028, 1029, 1030, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "class1_1": 160, "class2_1": 160, "class_0": [225, 379, 517], "class_1": [225, 379, 517], "class_2": [379, 517], "class_count_": [846, 847, 848, 849, 850], "class_id": [284, 285], "class_index": 90, "class_label": [396, 564, 568, 571, 665, 666, 673, 675, 681, 682, 683, 806, 829, 919, 921, 943, 1023], "class_likelihood_ratio": [2, 278, 1008, 1054], "class_log_prior_": [846, 847, 848, 850], "class_memb": 73, "class_member_mask": 84, "class_nam": [139, 268, 892, 923, 924, 925, 1024, 1055], "class_name0": [430, 448, 449, 451, 453, 455, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 877, 903, 904], "class_name1": [430, 448, 449, 451, 453, 455, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 877, 903, 904], "class_name2": [430, 448, 449, 451, 453, 455, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 877, 903, 904], "class_of_interest": [66, 284, 638, 1056], "class_prior": [377, 846, 847, 848, 850, 1040, 1043], "class_prior_": [558, 849], "class_protein_loc": 292, "class_sep": [171, 305, 522, 806, 829], "class_weight": [2, 45, 347, 396, 564, 568, 571, 665, 666, 673, 675, 681, 682, 683, 684, 911, 913, 916, 918, 919, 921, 942, 943, 997, 1022, 1023, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1053, 1054], "class_weight_": [913, 916, 1054], "class_weight_vect": 942, "classes_": [135, 209, 226, 245, 251, 284, 334, 335, 382, 384, 396, 439, 443, 444, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 600, 601, 617, 638, 665, 666, 673, 675, 681, 682, 683, 704, 707, 709, 795, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 853, 858, 861, 868, 871, 878, 879, 882, 892, 906, 907, 908, 911, 913, 916, 919, 921, 924, 1008, 1019, 1022, 1040, 1043, 1044, 1046, 1049, 1051], "classic": [55, 212, 241, 260, 266, 349, 379, 386, 416, 418, 419, 449, 453, 455, 465, 499, 507, 511, 517, 548, 639, 640, 921, 922, 1002, 1004, 1007, 1010, 1018, 1027, 1039, 1040, 1044, 1053], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 80, 91, 105, 106, 107, 111, 112, 117, 121, 126, 135, 137, 139, 141, 143, 144, 145, 146, 151, 153, 154, 156, 160, 162, 165, 167, 168, 169, 171, 172, 173, 179, 180, 190, 191, 195, 196, 207, 208, 209, 210, 217, 225, 227, 228, 229, 230, 232, 243, 245, 249, 250, 251, 254, 257, 263, 264, 267, 268, 272, 273, 274, 275, 276, 284, 289, 290, 292, 293, 296, 297, 303, 304, 305, 307, 308, 309, 310, 311, 312, 317, 318, 319, 320, 334, 339, 340, 341, 345, 348, 350, 351, 352, 353, 354, 355, 357, 358, 365, 369, 371, 375, 376, 377, 379, 384, 387, 391, 395, 396, 409, 412, 413, 414, 415, 418, 419, 421, 422, 423, 431, 443, 475, 481, 488, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 517, 519, 521, 522, 526, 527, 529, 530, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 576, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 616, 617, 618, 620, 621, 629, 638, 639, 640, 650, 665, 666, 673, 675, 681, 682, 683, 704, 710, 712, 715, 719, 720, 722, 723, 725, 733, 734, 736, 737, 741, 742, 745, 748, 750, 761, 763, 765, 766, 768, 789, 790, 791, 793, 794, 795, 796, 801, 803, 806, 807, 808, 810, 811, 812, 813, 821, 825, 826, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 853, 858, 860, 861, 867, 868, 869, 871, 875, 878, 883, 884, 885, 886, 891, 892, 895, 897, 906, 907, 908, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 927, 940, 943, 952, 997, 998, 1000, 1001, 1002, 1005, 1006, 1010, 1013, 1015, 1016, 1018, 1019, 1021, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 91, 104, 105, 106, 107, 108, 120, 128, 133, 137, 138, 139, 140, 141, 144, 145, 146, 149, 156, 159, 160, 165, 168, 169, 170, 171, 176, 187, 192, 193, 195, 196, 207, 208, 209, 215, 217, 224, 226, 229, 232, 235, 244, 247, 249, 251, 257, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 292, 293, 297, 303, 304, 306, 310, 313, 317, 326, 327, 331, 333, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 348, 349, 353, 354, 358, 377, 379, 382, 384, 387, 394, 396, 405, 413, 414, 415, 418, 422, 423, 424, 431, 439, 440, 441, 442, 443, 444, 445, 494, 495, 503, 511, 519, 521, 522, 529, 538, 543, 544, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 574, 575, 576, 577, 600, 601, 609, 613, 617, 629, 636, 638, 639, 640, 656, 665, 666, 673, 675, 678, 679, 680, 681, 682, 683, 704, 705, 707, 709, 710, 714, 715, 716, 718, 719, 720, 725, 727, 729, 733, 734, 736, 737, 739, 741, 742, 745, 746, 747, 748, 750, 761, 763, 789, 790, 791, 794, 795, 796, 801, 803, 806, 807, 810, 811, 813, 821, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 858, 859, 861, 862, 867, 868, 869, 871, 872, 878, 891, 892, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 930, 931, 944, 947, 949, 997, 998, 1000, 1003, 1004, 1005, 1008, 1009, 1010, 1013, 1016, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "classification_data": 46, "classification_report": [2, 45, 68, 104, 169, 273, 313, 334, 335, 829, 1008, 1041, 1043, 1047, 1048, 1049, 1051, 1055, 1057, 1058], "classificationcriterion": 1047, "classifier_": [91, 251], "classifier_01": 332, "classifier_05": 332, "classifier__c": 105, "classifier__criterion": 256, "classifier__max_depth": 256, "classifier__max_featur": 256, "classifier__min_samples_leaf": 192, "classifier__n_estim": 256, "classifier__n_neighbor": 297, "classifier_idx": 66, "classifier_model": 297, "classifier_other_threshold": 806, "classifier_tag": [930, 944], "classifier_tun": 829, "classifierchain": [2, 294, 396, 405, 843, 845, 1046, 1051, 1054, 1056, 1057], "classifiermixin": [2, 135, 251, 382, 384, 396, 418, 931, 1050], "classifiertag": [2, 930, 944], "classify__c": 106, "classmethod": [389, 444, 638, 639, 704, 705, 706, 707, 708, 709, 813, 830], "classnameprefixfeaturesoutmixin": [2, 384, 438, 1054], "claudio": [379, 1053, 1054, 1056, 1057], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 394], "clauss": 1056, "clb": 191, "clean": [87, 105, 216, 365, 374, 380, 420, 1014, 1018, 1049], "cleaner": 101, "cleanli": [97, 1039], "cleanup": [382, 1039], "clear": [43, 90, 95, 106, 190, 191, 320, 377, 381, 382, 384, 394, 395, 396, 412, 415, 420, 925, 926, 997, 1002, 1050, 1051, 1052, 1057], "clear_data_hom": 2, "clearer": [242, 1023], "clearli": [43, 95, 126, 191, 249, 349, 381, 382, 394, 396, 419, 421, 1009, 1015], "clegg": 1042, "clemen": 1043, "clement": [1046, 1047, 1051], "clenaghan": [1044, 1045], "cleveland": 377, "cleverless": 1041, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 83, 86, 89, 93, 98, 105, 129, 141, 149, 152, 154, 159, 163, 165, 168, 169, 171, 176, 178, 193, 207, 209, 210, 214, 215, 221, 224, 226, 229, 230, 231, 232, 233, 240, 245, 246, 249, 252, 258, 264, 272, 276, 280, 281, 283, 286, 287, 298, 301, 302, 303, 306, 310, 317, 320, 324, 325, 326, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 360, 361, 364, 369, 377, 395, 396, 408, 415, 418, 421, 423, 444, 556, 557, 560, 562, 564, 566, 568, 570, 571, 574, 600, 601, 604, 639, 641, 645, 646, 647, 648, 649, 651, 652, 655, 659, 665, 666, 667, 668, 669, 673, 675, 676, 679, 680, 681, 682, 683, 684, 687, 704, 705, 707, 709, 718, 795, 807, 810, 811, 821, 839, 840, 841, 843, 846, 847, 848, 849, 850, 857, 858, 868, 911, 913, 915, 916, 919, 923, 925, 998, 1000, 1004, 1008, 1009, 1011, 1012, 1014, 1015, 1022, 1023, 1024], "clf1": [69, 159, 160, 421, 576], "clf2": [69, 159, 160, 384, 421, 576], "clf3": [69, 159, 160, 384, 421, 576], "clf__": 276, "clf__alpha": 276, "clf__c": 415, "clf_descr": 356, "clf_en_lr": 208, "clf_err": 141, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 208, "clf_l2_lr": 208, "clf_list": [62, 64], "clf_name": [49, 356], "clf_no_weight": 354, "clf_pf": 849, "clf_prob": 63, "clf_sample_weight": 251, "clf_score": 61, "clf_sel": 193, "clf_select": 168, "clf_sgd": 231, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 164, "clf_weight": 354, "click": [246, 256, 276, 325, 331, 382, 384, 390, 402, 1032], "clickabl": 1053, "client": 384, "clifford": 1052, "cliffordemmanuel": 1052, "clim": 177, "climatologi": 412, "climb": [414, 454, 467], "clinton": 57, "clip": [62, 64, 235, 247, 315, 345, 642, 683, 748, 881, 1018, 1043, 1050, 1051, 1058], "clmbst": 1051, "clock": 43, "clone": [2, 91, 150, 182, 191, 251, 313, 331, 365, 380, 382, 385, 386, 388, 390, 396, 412, 415, 424, 443, 471, 576, 577, 604, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 813, 830, 835, 838, 842, 845, 871, 872, 908, 1028, 1039, 1045, 1047, 1051, 1055, 1056], "clone_kernel": [617, 618, 1049], "clone_with_theta": [182, 424, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "cloned_classifi": 439, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 81, 89, 95, 101, 111, 112, 115, 128, 140, 147, 150, 154, 158, 174, 175, 178, 179, 180, 181, 182, 190, 192, 202, 221, 223, 238, 244, 250, 254, 260, 266, 275, 276, 288, 289, 301, 302, 315, 324, 345, 349, 350, 357, 365, 377, 382, 384, 385, 386, 394, 396, 397, 412, 414, 417, 418, 421, 424, 456, 461, 478, 515, 516, 539, 570, 635, 650, 654, 668, 679, 681, 694, 712, 753, 804, 825, 826, 846, 847, 848, 850, 857, 938, 997, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1018, 1023, 1027, 1032, 1042, 1046, 1047, 1048], "close_pric": 51, "closer": [43, 72, 126, 128, 157, 172, 174, 191, 197, 221, 349, 358, 412, 414, 419, 455, 560, 635, 719, 853, 854, 859, 861, 862, 863, 1023, 1046], "closest": [64, 81, 99, 221, 384, 414, 446, 448, 449, 453, 454, 455, 465, 660, 786, 787, 841, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 999, 1002, 1009, 1011], "closur": 55, "cloud": [78, 117, 122, 124, 187, 390, 419, 540, 548, 699, 1008, 1026, 1027, 1029], "cloudpickl": 1034, "clouldpickl": 408, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 379, "clue": [377, 390, 1005], "clump": 241, "clust": [100, 456, 463], "cluster": [2, 47, 48, 53, 54, 55, 56, 58, 61, 64, 77, 78, 81, 83, 85, 86, 88, 89, 92, 94, 96, 97, 104, 113, 120, 129, 135, 139, 146, 154, 167, 182, 193, 214, 238, 240, 241, 242, 248, 251, 254, 260, 261, 262, 263, 276, 301, 302, 304, 318, 325, 329, 334, 335, 336, 337, 338, 347, 355, 356, 358, 364, 371, 375, 377, 379, 382, 384, 387, 394, 396, 409, 410, 415, 420, 422, 425, 428, 429, 432, 440, 441, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 494, 509, 510, 511, 518, 519, 520, 521, 522, 529, 537, 548, 551, 560, 571, 573, 596, 597, 598, 638, 698, 699, 702, 711, 712, 717, 721, 722, 724, 726, 732, 738, 743, 744, 762, 764, 785, 786, 793, 799, 800, 802, 804, 805, 863, 864, 872, 876, 883, 891, 947, 949, 968, 991, 998, 1005, 1007, 1011, 1014, 1016, 1018, 1021, 1025, 1027, 1028, 1029, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "cluster_1": 154, "cluster_2": 154, "cluster_al": [454, 467], "cluster_cent": [73, 96, 98, 99, 467], "cluster_center_indic": [446, 460], "cluster_centers_": [77, 78, 83, 85, 93, 95, 96, 98, 99, 123, 328, 357, 446, 449, 453, 454, 455], "cluster_centers_indic": [73, 460], "cluster_centers_indices_": [73, 446], "cluster_data": 94, "cluster_doc": 57, "cluster_hierarchy_": [414, 456], "cluster_id": [193, 357], "cluster_id_to_feature_id": 193, "cluster_label": [91, 95], "cluster_method": 456, "cluster_optics_dbscan": [2, 100, 414], "cluster_optics_xi": 2, "cluster_qr": [81, 414, 458, 468, 1053], "cluster_s": 357, "cluster_selection_epsilon": 452, "cluster_selection_method": 452, "cluster_std": [63, 73, 79, 84, 90, 91, 92, 94, 95, 97, 98, 99, 229, 244, 263, 318, 347, 378, 519], "cluster_word": 57, "clusterer_": 91, "clustering_algorithm": [78, 79, 97], "clustering_metr": 93, "clustermixin": [2, 384, 1056], "clusters_std": 347, "clyde": 1044, "cl\u00e9ment": [1048, 1052, 1054], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 102, 113, 115, 123, 126, 129, 139, 145, 146, 165, 170, 177, 178, 191, 201, 209, 226, 229, 230, 233, 238, 239, 240, 245, 248, 249, 253, 258, 268, 269, 270, 295, 298, 299, 301, 305, 308, 310, 312, 313, 315, 317, 326, 329, 334, 335, 339, 341, 342, 343, 345, 346, 347, 353, 354, 361, 379, 415, 704, 924, 1008, 1018, 1024], "cm2013": 414, "cm_bright": [67, 310, 317], "cm_displai": 245, "cm_piyg": 317, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 81, 82, 85, 86, 88, 89, 93, 113, 115, 123, 126, 129, 133, 139, 145, 146, 165, 170, 177, 178, 191, 197, 201, 202, 208, 209, 226, 229, 230, 231, 233, 238, 239, 240, 248, 249, 253, 268, 270, 295, 299, 301, 303, 304, 306, 308, 310, 312, 313, 315, 317, 334, 335, 339, 341, 342, 343, 344, 345, 346, 347, 350, 353, 354, 361, 704], "cmap_bold": [303, 306], "cmap_cv": 270, "cmap_data": 270, "cmap_light": [303, 306], "cmcsa": 51, "cmd": 380, "cmu": 906, "cname": 77, "cnb": 1010, "cnp": 383, "cnx": 1047, "co": [2, 43, 51, 53, 56, 58, 74, 75, 104, 155, 157, 179, 187, 190, 218, 239, 275, 290, 328, 338, 356, 357, 358, 363, 386, 420, 422, 455, 457, 459, 494, 518, 598, 706, 726, 771, 802, 1003, 1018, 1029, 1032, 1033, 1034], "co2": [173, 181, 187, 424, 503, 618, 622, 629, 630, 632, 1029, 1046], "co2_data": 179, "co2_kernel": 179, "coars": [43, 146, 388, 454, 467], "coarser": [146, 150], "coast": [50, 308], "coastlin": [50, 172, 308, 379], "coca": 51, "cock": [158, 1048], "cockburn": 1041, "coclust": [57, 411, 457, 520], "cocoa": 1032, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 376, 380, 381, 383, 385, 386, 391, 394, 396, 397, 400, 405, 408, 410, 413, 414, 421, 422, 448, 449, 453, 455, 465, 503, 533, 537, 538, 544, 545, 549, 550, 552, 553, 555, 573, 579, 588, 589, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 689, 690, 692, 693, 718, 839, 840, 841, 878, 885, 997, 1005, 1009, 1018, 1020, 1022, 1023, 1027, 1028, 1029, 1031, 1032, 1039, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "code_book_": 841, "code_init": [538, 552], "code_s": [292, 841, 1009], "codebas": [330, 365, 382, 383, 384, 422, 1039, 1045], "codebook": [83, 292, 573, 841], "codebook_random": 83, "codecov": 390, "codeofconduct": 382, "coder": [132, 549, 723], "codevig": 1045, "coef": [49, 89, 132, 189, 190, 197, 202, 208, 209, 211, 216, 220, 221, 222, 226, 232, 233, 258, 288, 312, 330, 353, 531, 653, 654, 656, 659, 660, 666, 667, 668, 669, 670, 676, 679, 681, 687, 688, 689, 690, 691, 692, 693, 694, 1012], "coef0": [195, 349, 351, 458, 542, 646, 647, 650, 782, 784, 913, 914, 915, 916, 917, 1006, 1023], "coef_": [46, 49, 53, 89, 117, 168, 169, 172, 189, 190, 197, 200, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 216, 220, 221, 222, 226, 232, 233, 252, 258, 288, 289, 322, 328, 343, 350, 353, 356, 365, 377, 384, 396, 417, 423, 471, 488, 489, 490, 556, 600, 601, 604, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 911, 912, 913, 914, 915, 916, 917, 991, 1002, 1004, 1022, 1023, 1039, 1041, 1044, 1046, 1051, 1053, 1056, 1057], "coef_agglomeration_": 89, "coef_en_lr": 208, "coef_i": 190, "coef_init": [653, 654, 659, 660, 667, 668, 669, 670, 673, 674, 675, 683, 684, 685, 688, 691], "coef_l": 205, "coef_l1_lr": 208, "coef_l2_lr": 208, "coef_lar": 205, "coef_lasso": 205, "coef_lasso_": 211, "coef_multi_task_lasso_": 211, "coef_p": 205, "coef_path": [660, 670, 691], "coef_path_": [657, 658, 661, 662, 1004], "coef_path_continu": [660, 670, 691], "coef_path_lar": [660, 670, 691], "coef_pl": 205, "coef_positive_lar": 205, "coef_ridg": 200, "coef_selection_": 89, "coeff": 687, "coeff_diff": 203, "coeffeci": 1048, "coeffici": [2, 25, 46, 49, 73, 84, 93, 95, 111, 112, 115, 123, 126, 163, 169, 174, 187, 188, 189, 196, 200, 202, 203, 205, 208, 210, 211, 212, 213, 214, 215, 219, 220, 232, 235, 258, 275, 289, 312, 322, 326, 327, 328, 349, 352, 356, 357, 358, 369, 378, 384, 396, 399, 416, 417, 419, 423, 424, 427, 437, 458, 471, 473, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 503, 531, 533, 534, 538, 542, 544, 546, 549, 550, 555, 559, 561, 563, 565, 567, 569, 572, 575, 577, 589, 596, 600, 604, 616, 618, 621, 634, 642, 643, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 708, 710, 723, 726, 736, 741, 745, 750, 757, 760, 782, 784, 792, 793, 795, 799, 800, 803, 822, 834, 837, 844, 845, 854, 862, 869, 872, 884, 891, 911, 912, 913, 914, 915, 916, 917, 920, 922, 999, 1002, 1004, 1022, 1023, 1029, 1039, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1056], "coefs_": [210, 312, 868, 869, 1012, 1044], "coefs_cf": 322, "coefs_enet": 205, "coefs_lar": 205, "coefs_lasso": 205, "coefs_no_cf": 322, "coefs_path": 666, "coefs_paths_": [666, 1049], "coefs_positive_enet": 205, "coefs_positive_lar": 205, "coefs_positive_lasso": 205, "coelho": [1040, 1042, 1043, 1047], "coelhudo": 1051, "cognit": [172, 379], "cohen": [2, 723, 1047], "cohen_kappa_scor": [2, 1008, 1044, 1046, 1058], "coher": 414, "cohort": 161, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 83, 88, 89, 97, 101, 102, 187, 414, 422, 447, 468, 1020, 1029], "coincid": [178, 219, 424], "col": [52, 57, 62, 64, 73, 77, 84, 90, 94, 98, 99, 104, 107, 143, 159, 179, 237, 254, 353, 518, 520], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [429, 457, 459], "col_indic": 153, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 295, "cole": 1048, "coleman": [1040, 1041], "colgat": [51, 55], "colin": [45, 377, 1045], "collabor": 382, "collaps": [43, 191, 254, 315, 345, 394], "colleagu": 275, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 107, 141, 153, 154, 161, 172, 179, 186, 193, 204, 210, 240, 247, 278, 282, 357, 358, 369, 377, 379, 386, 400, 418, 419, 421, 422, 452, 470, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 576, 577, 588, 590, 591, 595, 596, 597, 598, 639, 736, 737, 745, 785, 790, 791, 794, 809, 813, 814, 816, 830, 978, 981, 997, 1003, 1004, 1008, 1014, 1019, 1028, 1032, 1041, 1051], "colleg": [0, 189], "college_degre": 189, "collid": 422, "collin": 1042, "collinear": [190, 193, 222, 235, 421, 574, 655, 676, 687, 884, 1004, 1039, 1058], "collis": [357, 358, 422, 589, 596], "collot": [1053, 1054], "colombia": [50, 308, 377, 505], "colon": 382, "coloni": 377, "color": [43, 45, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 71, 73, 75, 77, 79, 81, 82, 84, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 111, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 137, 138, 143, 146, 147, 149, 152, 153, 154, 155, 156, 158, 160, 163, 165, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 190, 192, 193, 197, 198, 200, 201, 202, 204, 205, 206, 207, 209, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 234, 235, 238, 239, 240, 242, 244, 248, 249, 250, 252, 255, 260, 261, 262, 263, 264, 265, 266, 269, 270, 274, 276, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 294, 297, 300, 301, 302, 303, 306, 307, 308, 310, 315, 316, 317, 319, 320, 321, 325, 331, 336, 337, 339, 343, 344, 345, 346, 347, 349, 351, 352, 353, 361, 362, 376, 377, 379, 390, 414, 421, 422, 453, 500, 501, 513, 590, 591, 786, 981, 1022, 1024, 1029, 1044, 1049, 1051, 1056], "color_continuous_scal": 276, "color_intens": 48, "color_it": [261, 265, 266], "color_map": 339, "color_palett": [72, 138, 153, 265], "colorbar": [43, 50, 66, 75, 123, 133, 145, 154, 170, 175, 177, 178, 180, 191, 237, 248, 264, 286, 315, 345, 704, 1051], "colorbarbas": 315, "colorblind": [72, 138, 153], "coloring_matrix": [111, 112], "colormap": [123, 182, 345, 704, 1052], "colors_": 77, "colors_list": 143, "colour": [263, 379, 422, 594, 1009], "colt": [733, 763, 1008], "colton": 1000, "columbia": 0, "column": [2, 43, 52, 58, 59, 95, 103, 106, 109, 120, 144, 146, 147, 150, 153, 155, 158, 172, 179, 185, 187, 189, 190, 191, 192, 193, 206, 217, 218, 221, 225, 235, 246, 253, 254, 255, 258, 265, 269, 275, 276, 286, 287, 289, 294, 312, 320, 321, 322, 326, 327, 328, 329, 331, 332, 356, 357, 358, 369, 376, 377, 379, 382, 384, 388, 391, 394, 395, 396, 411, 414, 415, 417, 419, 421, 422, 423, 426, 429, 457, 459, 470, 472, 473, 477, 478, 484, 493, 494, 495, 496, 497, 499, 501, 503, 507, 508, 509, 511, 512, 515, 516, 517, 518, 520, 522, 533, 538, 541, 544, 548, 549, 555, 562, 564, 565, 568, 569, 571, 572, 573, 574, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 617, 634, 637, 639, 640, 641, 653, 655, 659, 665, 667, 669, 671, 672, 676, 687, 692, 693, 704, 720, 725, 726, 736, 737, 745, 761, 770, 775, 776, 777, 780, 790, 791, 794, 795, 807, 810, 811, 821, 832, 837, 842, 845, 846, 847, 848, 849, 850, 851, 852, 871, 875, 876, 877, 878, 884, 885, 886, 890, 891, 892, 893, 895, 896, 897, 901, 902, 911, 913, 916, 919, 921, 928, 933, 937, 938, 943, 955, 970, 983, 984, 986, 994, 997, 998, 1000, 1004, 1006, 1008, 1009, 1016, 1018, 1023, 1028, 1029, 1039, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "column_labels_": [58, 59, 411, 457, 459], "column_nam": 235, "column_or_1d": [2, 391, 1050, 1054], "column_result": 276, "column_stack": [76, 310, 317], "column_to_drop": 190, "column_tran": [235, 415], "column_transform": 332, "columnar": [376, 470, 1027], "columns_": [57, 411, 429, 457, 459], "columns_to_drop": 269, "columntransform": [2, 43, 104, 105, 158, 190, 191, 192, 217, 235, 246, 254, 256, 258, 321, 325, 327, 328, 329, 331, 374, 376, 394, 395, 405, 472, 473, 636, 876, 997, 998, 1028, 1034, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "columntransformercolumntransform": [105, 158, 190, 192, 246, 256, 321, 325, 328], "columntransformerinot": [158, 191], "columnwis": 419, "com": [51, 104, 295, 356, 377, 380, 382, 386, 387, 388, 390, 394, 414, 448, 541, 548, 678, 712, 1046, 1049], "coma": 1032, "comaniciu": [98, 414, 454], "comapar": 414, "comb": 1053, "combat": [310, 419], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 96, 104, 105, 107, 108, 109, 120, 123, 131, 132, 136, 147, 148, 152, 153, 161, 174, 180, 185, 186, 187, 190, 202, 217, 221, 234, 235, 241, 244, 246, 249, 271, 275, 276, 284, 286, 287, 304, 311, 321, 326, 327, 329, 348, 349, 358, 361, 369, 374, 378, 379, 382, 387, 395, 396, 410, 411, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 426, 427, 451, 470, 472, 473, 479, 481, 482, 485, 486, 487, 495, 503, 515, 516, 522, 528, 531, 533, 538, 544, 545, 547, 549, 554, 556, 567, 569, 572, 574, 575, 617, 621, 623, 628, 631, 637, 641, 650, 653, 654, 659, 660, 665, 666, 667, 668, 669, 670, 673, 675, 679, 680, 681, 682, 683, 685, 686, 688, 691, 699, 708, 737, 795, 807, 810, 811, 818, 819, 832, 834, 838, 855, 870, 871, 872, 876, 884, 885, 886, 891, 911, 981, 997, 1000, 1001, 1004, 1008, 1009, 1011, 1014, 1018, 1021, 1022, 1024, 1025, 1029, 1032, 1039, 1044, 1047, 1050, 1051, 1052, 1054, 1055], "combinator": 817, "combined_featur": 108, "combsccod": 1053, "comcast": 51, "come": [84, 102, 104, 113, 118, 128, 172, 174, 249, 289, 324, 356, 357, 369, 371, 375, 379, 382, 383, 386, 390, 394, 396, 400, 408, 413, 414, 418, 421, 422, 445, 456, 462, 478, 557, 712, 802, 828, 913, 916, 960, 997, 998, 1002, 1005, 1007, 1011, 1014, 1023, 1039, 1050, 1053, 1055], "comedi": 882, "comfort": [90, 421], "command": [248, 369, 370, 380, 382, 386, 388, 390, 400, 422, 515, 1027, 1041], "comment": [81, 356, 380, 381, 382, 383, 385, 386, 390, 493, 586, 1008], "commerc": 1032, "commerci": [418, 1032], "commit": [385, 386, 390, 1031, 1039, 1040, 1041, 1042], "committ": [382, 1039], "commod": 1008, "common": [2, 52, 54, 55, 57, 126, 169, 172, 187, 188, 189, 213, 221, 222, 270, 275, 282, 292, 326, 349, 356, 358, 364, 369, 376, 382, 384, 390, 392, 394, 395, 399, 400, 405, 411, 412, 414, 415, 418, 420, 423, 424, 453, 471, 473, 503, 597, 639, 660, 679, 680, 708, 753, 760, 776, 808, 809, 812, 822, 824, 825, 826, 827, 828, 834, 837, 872, 874, 882, 883, 884, 889, 891, 896, 897, 899, 900, 901, 902, 928, 930, 957, 960, 997, 998, 1004, 1011, 1014, 1018, 1023, 1024, 1027, 1028, 1029, 1032, 1034, 1039, 1047, 1049, 1050, 1054], "common_nod": 364, "common_node_id": 364, "common_param": [92, 150, 153, 191, 250, 277, 278, 349], "commonli": [217, 272, 288, 349, 375, 396, 414, 415, 424, 621, 765, 766, 804, 840, 883, 1005, 1006, 1008, 1009, 1011, 1055], "commun": [251, 375, 381, 387, 390, 396, 397, 414, 421, 545, 547, 554, 699, 717, 883, 998, 1005, 1011, 1018, 1022, 1027, 1031, 1032, 1047, 1048], "commut": [43, 52], "comp": [57, 117, 118, 126, 133, 313, 338, 356, 357, 358, 377], "comp_cov": [475, 476, 477, 478, 479, 480, 481, 482], "compact": [172, 195, 315, 369, 379, 851, 852, 1024, 1041], "compani": [217, 235, 413, 414, 1032], "companion": [382, 1018], "companioni": 1039, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 82, 84, 87, 89, 90, 92, 93, 99, 102, 105, 106, 107, 108, 113, 114, 116, 118, 121, 126, 130, 132, 136, 137, 138, 140, 142, 146, 147, 148, 150, 152, 153, 154, 156, 158, 161, 164, 172, 178, 185, 186, 187, 190, 192, 193, 196, 198, 200, 202, 204, 205, 206, 212, 214, 217, 218, 220, 221, 223, 225, 227, 231, 234, 235, 237, 238, 241, 243, 246, 249, 252, 254, 255, 257, 262, 263, 267, 270, 272, 273, 274, 276, 278, 280, 282, 284, 286, 287, 288, 290, 292, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 309, 312, 314, 316, 319, 320, 322, 326, 349, 356, 357, 358, 363, 364, 365, 371, 377, 379, 382, 384, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 423, 424, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 464, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 496, 503, 509, 511, 519, 521, 529, 531, 535, 538, 544, 546, 548, 552, 553, 558, 559, 568, 569, 570, 571, 572, 638, 646, 651, 652, 660, 662, 664, 665, 670, 673, 675, 683, 684, 691, 702, 712, 719, 722, 738, 745, 750, 793, 805, 807, 812, 821, 834, 837, 844, 853, 857, 860, 864, 868, 869, 871, 872, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 896, 897, 898, 899, 900, 901, 902, 911, 912, 913, 915, 916, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1029, 1039, 1041, 1046, 1047, 1052], "comparison": [51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 85, 92, 93, 94, 95, 96, 98, 104, 112, 120, 122, 124, 125, 127, 133, 137, 140, 143, 150, 153, 156, 160, 161, 166, 173, 179, 180, 181, 183, 187, 192, 200, 202, 203, 204, 205, 208, 215, 217, 221, 232, 235, 236, 239, 240, 241, 242, 243, 247, 248, 262, 267, 269, 270, 271, 272, 279, 287, 289, 294, 304, 310, 317, 319, 320, 324, 326, 339, 342, 351, 355, 356, 357, 365, 377, 379, 396, 412, 414, 416, 417, 419, 423, 424, 443, 444, 449, 451, 452, 453, 455, 488, 489, 490, 494, 511, 519, 521, 522, 529, 532, 542, 548, 556, 557, 560, 571, 572, 588, 589, 595, 596, 597, 598, 613, 615, 617, 618, 622, 629, 632, 638, 646, 650, 666, 679, 695, 696, 697, 698, 699, 711, 745, 750, 786, 795, 807, 808, 809, 810, 812, 813, 821, 823, 824, 825, 826, 827, 828, 837, 846, 849, 853, 868, 869, 872, 884, 885, 889, 891, 892, 896, 897, 898, 899, 900, 901, 902, 911, 913, 914, 916, 917, 919, 997, 1001, 1002, 1005, 1008, 1010, 1011, 1014, 1023, 1029, 1036], "compat": [251, 278, 295, 325, 376, 385, 391, 392, 394, 396, 400, 405, 408, 422, 469, 475, 515, 573, 584, 596, 610, 621, 622, 625, 626, 627, 629, 630, 639, 640, 641, 665, 666, 680, 682, 781, 785, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 855, 856, 871, 876, 884, 885, 923, 924, 930, 933, 949, 950, 970, 1005, 1011, 1013, 1027, 1028, 1032, 1034, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "compens": [114, 189, 191, 195, 217, 235, 276, 416, 419], "compet": [43, 190], "competit": [43, 150, 356, 421, 651, 1011], "compil": [158, 295, 358, 369, 370, 383, 384, 385, 390, 391, 394, 1027, 1039], "compl": 93, "complain": 1057, "complement": [2, 191, 285, 356, 639, 640, 809, 824, 827, 837, 846, 847, 848, 849, 850, 1015, 1030, 1034, 1047], "complementari": [43, 422], "complementnb": [2, 276, 356, 846, 847, 849, 850, 1010, 1047, 1051, 1052, 1054], "complementnbcomplementnb": 276, "complet": [0, 2, 43, 72, 73, 74, 79, 84, 87, 93, 97, 118, 153, 156, 167, 169, 172, 187, 192, 193, 223, 243, 244, 251, 254, 269, 273, 320, 322, 324, 357, 365, 377, 382, 386, 387, 390, 394, 415, 418, 419, 421, 422, 447, 451, 455, 458, 468, 469, 470, 473, 502, 543, 544, 545, 546, 551, 553, 565, 576, 577, 588, 594, 595, 596, 598, 634, 635, 636, 637, 652, 656, 664, 678, 680, 711, 712, 722, 723, 724, 736, 738, 743, 744, 764, 793, 802, 839, 842, 845, 854, 870, 871, 872, 873, 940, 992, 1002, 1004, 1008, 1009, 1011, 1023, 1024, 1027, 1029, 1039, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "completed_fac": 253, "completeness_scor": [2, 73, 84, 93, 325, 357, 414, 743, 744, 802, 1008], "complex": [42, 48, 49, 54, 58, 106, 143, 158, 171, 174, 179, 185, 187, 221, 231, 234, 243, 250, 251, 254, 267, 273, 276, 279, 284, 316, 324, 327, 328, 332, 333, 345, 349, 358, 359, 364, 378, 382, 387, 394, 414, 415, 419, 421, 425, 446, 450, 453, 454, 456, 473, 495, 507, 508, 509, 521, 541, 548, 558, 564, 565, 566, 567, 569, 571, 572, 611, 637, 645, 663, 665, 683, 684, 741, 757, 807, 837, 839, 867, 871, 872, 876, 884, 891, 907, 911, 914, 917, 919, 920, 921, 922, 997, 998, 1000, 1001, 1003, 1005, 1007, 1009, 1014, 1018, 1021, 1028, 1029, 1030, 1032, 1034, 1040, 1042, 1048, 1049, 1052], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [382, 396, 949, 1028], "complianc": [0, 153], "compliant": [329, 382, 1057, 1058], "complic": [64, 251, 310, 388, 424, 701, 1011], "compon": [2, 11, 43, 44, 55, 79, 93, 97, 104, 107, 116, 117, 120, 124, 125, 127, 128, 129, 130, 131, 133, 156, 164, 179, 187, 189, 202, 237, 248, 249, 252, 260, 261, 264, 265, 266, 274, 276, 296, 297, 298, 306, 307, 313, 320, 326, 369, 374, 377, 382, 384, 388, 391, 408, 410, 414, 415, 417, 422, 424, 426, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 509, 511, 522, 528, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 702, 804, 805, 806, 807, 810, 811, 821, 829, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 954, 955, 1000, 1005, 1007, 1018, 1020, 1023, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1039, 1041, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "component_1": 265, "component_2": 265, "component_indices_": [646, 1052], "components_": [45, 54, 93, 118, 123, 125, 126, 133, 248, 249, 313, 320, 328, 396, 415, 419, 450, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 646, 860, 867, 903, 904, 1000, 1020, 1043, 1045, 1051, 1054, 1057], "components_col": 107, "compos": [2, 43, 44, 62, 103, 104, 105, 109, 118, 139, 147, 158, 187, 190, 191, 192, 217, 219, 235, 246, 254, 256, 258, 289, 292, 321, 325, 327, 328, 329, 331, 332, 395, 405, 414, 415, 418, 470, 471, 472, 473, 522, 560, 619, 1007, 1009, 1029, 1039], "composit": [7, 35, 246, 325, 374, 418, 665, 795, 998, 1004, 1017, 1034, 1040], "compound": [43, 235, 422, 617, 619, 687, 731, 759, 1004], "compoundkernel": [2, 617, 1053], "comprehens": [349, 390, 422, 765, 766, 1006, 1032, 1047], "compress": [42, 50, 55, 83, 101, 187, 292, 315, 377, 408, 414, 419, 422, 423, 659, 679, 699, 841, 884, 978, 981, 993, 1004, 1009, 1018, 1029, 1039, 1048], "compressed_raccoon_kmean": 88, "compressed_raccoon_uniform": 88, "compris": [104, 150, 273, 356, 357, 358, 377, 394, 419, 421, 522, 814, 1005], "compromis": [48, 64, 191, 369, 382, 654, 686, 1011, 1042], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 81, 87, 89, 92, 93, 95, 96, 104, 106, 112, 113, 114, 115, 124, 132, 140, 144, 145, 148, 149, 150, 151, 152, 153, 171, 172, 174, 179, 181, 182, 185, 190, 191, 192, 193, 195, 198, 199, 202, 203, 204, 205, 206, 217, 219, 221, 225, 231, 234, 235, 238, 241, 245, 247, 248, 250, 254, 255, 257, 269, 271, 273, 275, 276, 277, 278, 282, 284, 286, 295, 297, 299, 301, 302, 304, 305, 308, 315, 324, 328, 329, 332, 335, 337, 345, 349, 352, 356, 357, 358, 364, 370, 371, 376, 377, 379, 382, 387, 388, 389, 391, 394, 395, 396, 399, 400, 408, 409, 410, 411, 412, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 463, 465, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 523, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 589, 592, 593, 596, 597, 598, 600, 601, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 732, 733, 734, 736, 737, 738, 741, 743, 745, 746, 747, 750, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 799, 800, 801, 803, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 876, 877, 880, 881, 886, 887, 888, 889, 890, 891, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 916, 918, 919, 920, 921, 922, 952, 953, 954, 955, 972, 973, 980, 982, 988, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "computation": [37, 53, 111, 123, 143, 149, 158, 174, 295, 349, 356, 368, 383, 394, 414, 415, 418, 419, 421, 424, 545, 639, 640, 678, 770, 807, 809, 810, 811, 821, 834, 1004, 1005, 1007, 1015, 1016, 1020, 1034, 1043], "compute_class_weight": [2, 396, 1042, 1053], "compute_corrected_ttest": 275, "compute_dist": [447, 451, 1051], "compute_full_tre": [447, 451, 1043], "compute_import": 1041, "compute_inverse_compon": [903, 904, 1020], "compute_inverse_transform": 1053, "compute_label": [448, 455], "compute_node_depth": 364, "compute_optics_graph": [2, 461, 462, 1056], "compute_sample_weight": [2, 1053], "compute_scor": [109, 130, 197, 198, 651, 652, 1048], "compute_sourc": 426, "computed_scor": 652, "con": [408, 596, 1007], "concat": [43, 185, 189, 206, 235, 884], "concaten": [2, 63, 70, 74, 85, 96, 103, 106, 114, 139, 154, 168, 182, 187, 197, 200, 209, 231, 232, 238, 244, 260, 264, 265, 271, 280, 282, 283, 284, 285, 300, 313, 319, 322, 335, 344, 348, 356, 415, 470, 473, 511, 516, 538, 544, 548, 549, 606, 788, 807, 870, 871, 873, 876, 884, 916, 1009, 1029, 1040], "concav": [172, 332, 379], "concentr": [46, 48, 100, 121, 128, 137, 156, 179, 186, 187, 242, 259, 261, 266, 286, 305, 317, 336, 378, 382, 421, 449, 526, 804, 1007, 1014, 1029], "concentrations_prior": 260, "concept": [2, 114, 143, 148, 251, 284, 394, 414, 420, 422, 1000, 1008, 1011, 1024, 1032], "conceptu": [379, 421, 1006], "concern": [37, 56, 71, 110, 116, 119, 122, 134, 136, 166, 173, 184, 187, 194, 196, 236, 259, 265, 269, 291, 293, 296, 309, 314, 333, 340, 355, 359, 369, 384, 408, 1005, 1020], "concis": [64, 217, 382, 387, 1050, 1052], "conclud": [137, 190, 198, 235, 275, 358, 365, 397, 871], "conclus": [43, 128, 190, 192, 217, 219, 275, 277, 365, 421], "concomit": [656, 1004], "concret": [221, 383, 397, 413, 423, 681, 682, 903, 904, 1004, 1022, 1027], "concurr": [396, 422, 973, 1051, 1053], "conda": [324, 325, 326, 327, 328, 329, 330, 331, 332, 370, 382, 383, 385, 386, 388, 390, 400, 401, 407, 408, 1024], "conda_prefix": 388, "condarc": 380, "condens": [195, 452], "condit": [2, 43, 51, 52, 62, 64, 115, 145, 150, 187, 188, 190, 206, 219, 222, 235, 251, 255, 278, 327, 364, 388, 394, 399, 410, 411, 412, 413, 414, 416, 419, 421, 423, 457, 470, 477, 478, 479, 484, 503, 520, 530, 531, 543, 546, 547, 548, 550, 552, 554, 556, 557, 569, 634, 639, 640, 650, 657, 658, 659, 661, 662, 663, 677, 679, 680, 681, 682, 689, 690, 694, 704, 719, 724, 725, 743, 744, 802, 846, 847, 848, 849, 850, 869, 872, 875, 884, 885, 888, 892, 955, 979, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1013, 1018, 1024, 1029, 1034, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1051, 1053, 1054, 1055, 1057], "condition": [51, 64, 217, 412, 416, 765, 1002], "condition2": 158, "conduct": [189, 275, 424, 1031, 1053], "conf": [46, 64, 386, 412, 418, 846, 1010, 1053], "confer": [269, 275, 377, 414, 419, 425, 445, 450, 456, 518, 542, 570, 703, 715, 733, 763, 867, 868, 869, 1008, 1014, 1020, 1024], "confid": [52, 61, 62, 63, 64, 153, 179, 181, 261, 275, 278, 337, 397, 412, 424, 643, 665, 666, 673, 675, 678, 681, 682, 683, 705, 709, 714, 727, 733, 734, 746, 747, 763, 796, 839, 878, 911, 913, 916, 1004, 1007, 1008, 1009, 1014, 1021, 1022, 1023, 1032, 1049], "config": [52, 370, 380, 382, 383, 390, 633, 1047], "config_context": [2, 258, 369, 370, 410, 633, 909, 1046, 1052, 1055], "configur": [2, 3, 46, 49, 64, 105, 106, 191, 251, 256, 258, 289, 322, 356, 368, 380, 382, 384, 388, 390, 394, 396, 400, 405, 410, 415, 422, 423, 438, 448, 449, 451, 453, 455, 458, 468, 470, 474, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 633, 634, 635, 636, 637, 639, 642, 645, 646, 647, 648, 649, 695, 696, 697, 698, 699, 701, 702, 795, 807, 821, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 909, 973, 974, 1005, 1008, 1018, 1023, 1027, 1034, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056], "confirm": [43, 52, 118, 140, 147, 150, 153, 192, 217, 219, 269, 278, 281, 284, 320, 358, 386, 997, 1018, 1047], "conflict": [380, 382, 386, 390, 400, 1046, 1047], "conform": [52, 382, 588, 635, 839, 840, 1008, 1027, 1028, 1046, 1052], "confound": [189, 190], "confus": [2, 68, 187, 245, 267, 269, 284, 334, 335, 356, 396, 474, 511, 638, 659, 704, 720, 722, 725, 736, 737, 745, 761, 791, 794, 837, 909, 916, 1029, 1039, 1040, 1044, 1048, 1049, 1051, 1052, 1053, 1054], "confusingli": 380, "confusion_matrix": [2, 68, 245, 268, 269, 332, 334, 335, 704, 720, 761, 806, 834, 1008, 1040, 1045, 1046, 1049, 1050, 1052, 1056], "confusion_matrix_scor": 1008, "confusionmatrixdisplai": [2, 45, 68, 268, 327, 332, 334, 356, 638, 725, 1008, 1049, 1050, 1052, 1053, 1054], "congruenc": [661, 662, 663, 689, 690], "conjug": [275, 458, 468, 679, 681, 694, 702, 1004], "conjunct": [405, 414, 601, 813, 829, 830, 832, 833, 834, 835, 838, 974, 998, 1004, 1054], "connect": [2, 51, 74, 79, 82, 86, 89, 97, 101, 102, 380, 382, 391, 396, 416, 447, 451, 458, 468, 469, 592, 593, 702, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 1006, 1011, 1013, 1021, 1031, 1043, 1052, 1056], "connected_compon": 1046, "connectionist": [868, 869], "conner": 1052, "connor": [1047, 1052, 1056, 1057], "connossor": [1047, 1048], "conocophillip": 51, "conort": 1032, "conquer": 955, "conrad": [1039, 1040, 1054, 1057], "conroi": 1054, "consecut": [137, 148, 218, 394, 412, 418, 422, 449, 453, 455, 456, 458, 462, 465, 468, 544, 545, 546, 553, 609, 652, 673, 674, 675, 683, 684, 685, 804, 805, 812, 846, 847, 848, 849, 850, 868, 869, 997, 1018, 1047], "consensu": [2, 58, 59, 72, 381, 382, 397, 411, 414, 656, 678, 685, 686, 726, 1008], "consensus_scor": [2, 58, 59, 411, 1041], "consequ": [92, 130, 235, 275, 276, 315, 342, 365, 412, 413, 419, 421, 568, 569, 573, 662, 663, 998, 1004, 1008, 1016, 1024, 1048, 1050, 1055, 1057], "conserv": [50, 396, 589, 596, 903, 904, 1007, 1020], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 90, 101, 105, 114, 120, 123, 127, 147, 150, 167, 171, 172, 186, 191, 217, 219, 251, 269, 275, 278, 282, 286, 289, 295, 298, 301, 302, 315, 326, 332, 342, 349, 350, 352, 356, 365, 369, 370, 371, 374, 381, 382, 384, 388, 390, 394, 396, 397, 405, 408, 410, 413, 414, 419, 420, 421, 422, 423, 424, 425, 426, 444, 450, 452, 456, 463, 480, 515, 516, 528, 540, 548, 556, 557, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 592, 593, 595, 596, 598, 600, 614, 615, 627, 638, 639, 640, 653, 659, 665, 666, 667, 669, 678, 686, 695, 696, 697, 699, 700, 701, 703, 707, 709, 712, 714, 716, 722, 733, 737, 741, 763, 793, 795, 801, 853, 854, 855, 857, 859, 861, 862, 863, 866, 868, 869, 874, 884, 885, 892, 906, 907, 916, 917, 919, 920, 921, 922, 932, 991, 997, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1028, 1042, 1043, 1047, 1051, 1052, 1054, 1055, 1056], "consider": [152, 153, 175, 178, 254, 270, 276, 282, 377, 382, 413, 424, 626, 807, 821, 829, 997, 1004, 1010, 1014, 1022, 1032, 1056], "consist": [2, 43, 46, 63, 68, 72, 91, 92, 104, 113, 120, 121, 123, 143, 147, 153, 154, 161, 172, 177, 179, 182, 186, 193, 217, 235, 250, 254, 281, 284, 312, 320, 324, 327, 352, 357, 365, 369, 375, 377, 379, 382, 388, 389, 390, 391, 395, 396, 397, 412, 414, 416, 420, 421, 422, 432, 433, 436, 437, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 496, 504, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 598, 618, 634, 635, 636, 637, 642, 645, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 681, 684, 685, 686, 694, 695, 696, 697, 698, 707, 742, 804, 805, 814, 839, 840, 841, 843, 844, 845, 846, 854, 855, 857, 859, 862, 863, 869, 874, 875, 876, 878, 882, 883, 886, 887, 889, 890, 892, 903, 904, 907, 911, 912, 914, 915, 917, 920, 922, 928, 937, 939, 962, 978, 981, 996, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1018, 1021, 1023, 1024, 1026, 1028, 1032, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "consol": [146, 380], "consolid": [0, 396, 397, 1039], "consolidate_scor": 52, "consortium": [0, 1032], "constant": [2, 43, 132, 140, 153, 177, 180, 181, 186, 190, 204, 218, 219, 221, 235, 246, 251, 256, 278, 307, 311, 313, 316, 318, 325, 352, 354, 365, 374, 384, 391, 396, 411, 421, 424, 437, 452, 471, 488, 489, 490, 518, 520, 541, 545, 547, 554, 556, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 597, 613, 616, 618, 620, 634, 637, 639, 640, 642, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 694, 696, 700, 702, 728, 730, 731, 735, 739, 782, 784, 792, 806, 829, 844, 845, 854, 862, 868, 869, 876, 887, 890, 899, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 1000, 1002, 1004, 1005, 1008, 1010, 1011, 1018, 1022, 1024, 1034, 1042, 1047, 1049, 1051, 1052, 1053, 1055, 1057], "constant_": 559, "constant_valu": [424, 620, 624], "constant_value_bound": [424, 618, 620, 624], "constantini": 1055, "constantkernel": [2, 177, 183, 424, 618, 624, 628, 631], "constantli": [72, 217, 1032], "constitu": 379, "constitut": [85, 396, 418, 421, 456, 462, 595, 596, 598, 1012], "constrain": [25, 82, 123, 147, 153, 155, 191, 208, 288, 310, 325, 331, 343, 345, 375, 396, 414, 419, 421, 516, 568, 569, 642, 665, 666, 697, 701, 829, 836, 1004, 1007, 1043], "constrained_layout": [123, 191, 237, 321, 322, 329], "constraint": [90, 92, 102, 123, 136, 187, 205, 212, 221, 254, 255, 270, 311, 312, 313, 325, 382, 394, 419, 422, 493, 515, 516, 564, 565, 566, 567, 568, 569, 571, 572, 639, 642, 825, 826, 919, 920, 921, 922, 976, 997, 999, 1004, 1005, 1022, 1029, 1043, 1046, 1047, 1050, 1052, 1054, 1056], "constru": 422, "construct": [2, 43, 50, 104, 106, 137, 139, 141, 145, 158, 172, 235, 245, 251, 256, 258, 308, 316, 318, 325, 328, 376, 379, 384, 391, 396, 414, 415, 418, 419, 421, 422, 425, 439, 447, 448, 450, 451, 456, 458, 463, 469, 471, 473, 526, 542, 548, 551, 562, 563, 588, 594, 646, 695, 697, 698, 821, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 870, 871, 872, 873, 875, 916, 936, 938, 954, 955, 966, 970, 997, 998, 1000, 1004, 1005, 1008, 1009, 1011, 1018, 1021, 1023, 1024, 1028, 1044, 1046, 1047, 1050, 1053], "construct_grid": [50, 308], "constructor": [30, 31, 106, 247, 370, 384, 396, 415, 422, 470, 473, 556, 557, 562, 574, 575, 576, 577, 588, 589, 595, 596, 604, 675, 683, 684, 806, 807, 821, 853, 854, 855, 857, 859, 861, 862, 863, 870, 871, 872, 873, 997, 1009, 1018, 1023, 1028, 1039, 1040, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "consult": 1008, "consum": [2, 123, 365, 376, 384, 396, 405, 414, 418, 421, 455, 810, 811, 871, 872, 963, 964, 973, 1004, 1032, 1044, 1056], "consumpt": [47, 369, 396, 414, 541, 564, 565, 571, 572, 807, 821, 832, 833, 834, 919, 920, 921, 922, 973, 1039, 1041, 1045, 1047, 1048, 1053], "contact": [394, 1027], "contain": [2, 49, 57, 61, 64, 69, 75, 84, 91, 93, 104, 105, 139, 141, 145, 153, 154, 180, 190, 191, 193, 195, 208, 221, 235, 244, 251, 254, 255, 258, 265, 269, 273, 275, 281, 284, 285, 288, 294, 301, 302, 304, 315, 327, 335, 338, 356, 357, 375, 376, 377, 379, 382, 384, 386, 387, 388, 389, 390, 391, 394, 396, 408, 410, 412, 414, 415, 417, 418, 419, 421, 422, 423, 424, 426, 428, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 503, 507, 509, 510, 511, 515, 516, 517, 521, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 693, 695, 696, 697, 698, 699, 703, 704, 705, 707, 708, 709, 716, 719, 723, 742, 743, 744, 779, 786, 787, 795, 801, 804, 805, 806, 807, 810, 811, 813, 821, 825, 826, 829, 830, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 933, 936, 937, 938, 958, 959, 962, 963, 970, 973, 974, 976, 997, 998, 1000, 1006, 1009, 1012, 1014, 1016, 1018, 1019, 1021, 1024, 1027, 1031, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "container": 408, "container_fold": 510, "container_path": 510, "contamin": [48, 113, 114, 244, 254, 301, 302, 475, 570, 857, 1014, 1047, 1055, 1056], "content": [2, 7, 55, 320, 356, 358, 377, 382, 386, 388, 408, 422, 492, 510, 515, 516, 595, 596, 598, 678, 925, 1017, 1032, 1040, 1049], "context": [2, 93, 258, 269, 288, 295, 332, 369, 370, 376, 381, 383, 395, 396, 414, 415, 420, 421, 422, 424, 425, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 474, 478, 538, 542, 543, 544, 546, 549, 550, 551, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 601, 609, 614, 615, 617, 633, 634, 637, 639, 641, 646, 654, 658, 660, 662, 664, 665, 666, 668, 670, 672, 673, 675, 683, 686, 695, 696, 697, 698, 699, 700, 701, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 857, 859, 861, 862, 864, 865, 870, 873, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 998, 1004, 1008, 1014, 1018, 1022, 1028, 1031, 1032, 1039, 1046, 1047, 1052, 1055], "contigu": [43, 59, 384, 394, 411, 418, 422, 449, 453, 455, 465, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 788, 826, 851, 852, 911, 913, 914, 915, 916, 917, 1023, 1042, 1049, 1053, 1057], "contin": [420, 721, 1018], "conting": [2, 721, 722, 738, 762, 1045], "contingency_matrix": [2, 414, 762, 1047], "continu": [0, 2, 52, 55, 57, 77, 121, 147, 174, 187, 191, 198, 218, 225, 235, 238, 241, 254, 255, 257, 261, 265, 266, 312, 314, 320, 321, 326, 327, 364, 370, 377, 380, 384, 385, 386, 387, 390, 394, 396, 397, 400, 414, 419, 421, 474, 499, 599, 602, 603, 606, 607, 614, 615, 616, 639, 653, 654, 659, 660, 664, 667, 668, 669, 670, 733, 763, 819, 821, 874, 876, 878, 880, 881, 890, 891, 892, 908, 909, 920, 970, 997, 1004, 1005, 1008, 1009, 1011, 1012, 1018, 1024, 1028, 1029, 1032, 1036, 1039, 1041, 1042, 1047, 1052, 1053, 1054, 1056, 1058], "continuous_featur": 387, "contour": [48, 50, 70, 81, 82, 113, 146, 165, 172, 177, 178, 180, 228, 229, 230, 231, 244, 249, 264, 301, 308, 343, 344, 346, 347, 349, 350, 379, 389, 638, 639, 1014, 1022], "contour_kw": 639, "contourf": [50, 146, 231, 249, 301, 308, 310, 317, 318, 339, 344, 350, 354, 638, 639], "contours_": [389, 639], "contract": [217, 235, 349, 370, 396, 1028], "contradict": [193, 1028], "contrari": [43, 53, 190, 238, 242, 254, 260, 278, 315, 356, 376, 414, 503, 551, 613, 809, 824, 892, 1004, 1010, 1014], "contrast": [131, 191, 219, 250, 254, 275, 277, 304, 320, 357, 396, 412, 414, 417, 421, 424, 455, 458, 468, 626, 650, 821, 867, 998, 1001, 1003, 1004, 1008, 1011, 1013, 1016, 1018, 1021, 1022, 1024, 1049], "contrib": [330, 382, 384, 390, 394, 396, 414, 452, 1027, 1028, 1055], "contribut": [0, 53, 58, 151, 179, 202, 221, 284, 320, 379, 380, 384, 385, 386, 390, 396, 397, 400, 419, 420, 421, 453, 455, 560, 561, 566, 567, 733, 736, 763, 1002, 1008, 1011, 1016, 1023, 1027, 1028, 1031, 1032, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "contributor": [370, 385, 386, 387, 390, 394, 396, 1008, 1028, 1040, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "control": [37, 51, 70, 96, 127, 128, 143, 163, 179, 181, 202, 218, 221, 225, 247, 248, 276, 278, 292, 297, 313, 325, 327, 349, 360, 362, 363, 369, 370, 375, 378, 382, 384, 387, 390, 394, 396, 400, 413, 414, 417, 418, 419, 420, 423, 424, 439, 446, 455, 460, 477, 478, 484, 538, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 600, 601, 603, 621, 626, 632, 634, 639, 641, 646, 648, 649, 653, 654, 656, 657, 658, 659, 661, 662, 663, 679, 681, 683, 684, 689, 690, 694, 699, 708, 716, 804, 805, 807, 809, 810, 811, 812, 813, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 837, 838, 841, 842, 845, 868, 869, 890, 892, 903, 904, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 925, 973, 994, 997, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1027, 1028, 1030, 1034, 1039, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057, 1058], "convei": [67, 242, 317], "conveni": [52, 90, 221, 254, 374, 390, 394, 415, 418, 422, 424, 429, 449, 453, 455, 457, 459, 470, 495, 618, 683, 685, 706, 735, 792, 870, 871, 981, 998, 1000, 1004, 1005, 1015, 1032, 1039], "convent": [2, 135, 153, 269, 275, 382, 384, 385, 386, 388, 396, 410, 432, 433, 436, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 475, 476, 477, 478, 479, 480, 481, 482, 515, 516, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 554, 570, 573, 576, 577, 588, 589, 590, 595, 596, 598, 634, 635, 636, 637, 684, 695, 696, 697, 698, 725, 804, 805, 839, 840, 855, 857, 859, 863, 875, 883, 886, 887, 889, 892, 903, 904, 915, 949, 950, 1008, 1039, 1046, 1047, 1050, 1052, 1053, 1055, 1056], "convention": [343, 396, 907], "converg": [2, 55, 92, 96, 111, 112, 148, 150, 153, 174, 180, 210, 219, 225, 233, 261, 263, 311, 312, 315, 320, 335, 371, 391, 396, 411, 414, 419, 422, 424, 426, 446, 449, 452, 453, 454, 455, 458, 460, 465, 466, 467, 468, 477, 478, 484, 488, 489, 490, 540, 542, 543, 544, 545, 546, 553, 578, 617, 651, 652, 653, 654, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 675, 679, 681, 683, 685, 689, 690, 694, 695, 697, 698, 701, 702, 804, 805, 860, 868, 869, 906, 907, 913, 998, 1003, 1004, 1005, 1007, 1012, 1022, 1039, 1042, 1043, 1044, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "converged_": [804, 805, 1057], "convergence_it": [446, 460], "convergencewarn": [2, 178, 180, 182, 225, 232, 261, 311, 312, 317, 391, 396, 804, 805, 1047, 1048, 1051], "convers": [2, 55, 150, 208, 356, 365, 371, 376, 382, 384, 390, 394, 396, 408, 422, 579, 866, 875, 883, 937, 938, 993, 1005, 1028, 1032, 1047, 1048, 1049, 1052, 1055], "convert": [2, 55, 70, 81, 83, 101, 105, 126, 179, 193, 217, 237, 254, 257, 261, 262, 265, 266, 289, 308, 332, 364, 369, 376, 377, 391, 394, 396, 408, 422, 446, 449, 450, 453, 455, 456, 457, 458, 465, 470, 471, 503, 541, 548, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 588, 589, 595, 596, 597, 598, 600, 601, 613, 634, 635, 636, 637, 653, 659, 665, 666, 667, 669, 673, 674, 675, 677, 681, 683, 684, 685, 699, 753, 785, 806, 829, 866, 875, 876, 878, 882, 884, 885, 886, 888, 911, 919, 920, 921, 922, 935, 937, 938, 962, 992, 993, 997, 1004, 1005, 1006, 1008, 1018, 1019, 1023, 1024, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057], "convex": [132, 149, 150, 187, 196, 224, 237, 353, 357, 414, 416, 419, 427, 452, 458, 468, 479, 481, 482, 485, 486, 487, 665, 683, 699, 1004, 1005, 1011, 1012, 1022, 1029, 1052], "convinc": 190, "convolut": [45, 182], "convolv": 313, "coo": [396, 560, 561, 699, 878, 933, 937, 938, 1011, 1040, 1056], "coo_matrix": [53, 203, 458, 592, 593, 978, 981], "cook": [379, 501, 1039, 1045], "cookbook": [424, 629, 630], "cool": [422, 1039], "coolwarm": [270, 342], "cooman": 379, "coord": [592, 1009], "coordin": [2, 50, 51, 53, 89, 128, 157, 178, 205, 237, 276, 308, 369, 377, 419, 424, 449, 453, 454, 455, 467, 477, 478, 484, 538, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 557, 592, 621, 653, 654, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 688, 689, 690, 691, 695, 696, 697, 700, 701, 713, 771, 776, 911, 1004, 1005, 1023, 1039, 1042, 1043, 1044, 1048, 1050, 1052, 1053, 1054], "cop": 51, "cope": [244, 371, 377, 1004], "copeland": [1047, 1048], "copi": [44, 51, 55, 79, 97, 109, 126, 140, 153, 172, 185, 186, 190, 191, 192, 203, 210, 223, 233, 235, 238, 251, 295, 334, 335, 337, 339, 357, 361, 370, 379, 382, 384, 386, 387, 388, 394, 396, 439, 443, 446, 448, 449, 450, 452, 453, 455, 460, 465, 488, 489, 490, 491, 507, 509, 517, 539, 540, 541, 542, 548, 555, 560, 561, 566, 568, 569, 579, 597, 604, 614, 615, 617, 618, 635, 637, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 678, 679, 681, 686, 688, 691, 692, 693, 739, 776, 799, 807, 821, 851, 852, 866, 874, 877, 880, 881, 882, 883, 887, 888, 889, 891, 894, 896, 897, 898, 899, 900, 901, 902, 906, 907, 911, 913, 914, 915, 916, 917, 926, 935, 937, 938, 966, 978, 980, 981, 1018, 1023, 1024, 1028, 1039, 1042, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "copy_": 1039, "copy_cov": 555, "copy_gram": [689, 690, 693], "copy_x": [449, 453, 465, 542, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 679, 681, 686, 688, 689, 690, 691, 692, 1041, 1047, 1048, 1058], "copy_x_train": [617, 618], "copy_xi": 693, "copybutton": [382, 400, 407], "copyright": [0, 55], "corani": 275, "cordier": 1046, "core": [42, 49, 84, 90, 91, 100, 105, 135, 137, 143, 145, 146, 182, 187, 190, 191, 251, 269, 329, 368, 370, 382, 385, 390, 396, 400, 408, 414, 419, 421, 422, 425, 450, 452, 455, 456, 461, 463, 503, 506, 545, 596, 601, 665, 666, 673, 675, 683, 846, 847, 848, 849, 850, 855, 863, 1004, 1011, 1014, 1023, 1028, 1029, 1030, 1032, 1034, 1041, 1043, 1044, 1046, 1049, 1053, 1054, 1055], "core_dist": [100, 461, 462, 463], "core_distances_": [100, 456, 461, 463], "core_sampl": 425, "core_sample_indices_": [84, 450], "core_samples_mask": 84, "corei": [1040, 1047, 1048], "corentin": 1053, "cori": 1044, "corneil": 1052, "corner": [50, 53, 63, 88, 189, 272, 276, 284, 285, 308, 331, 377, 382, 505, 923, 925, 1008, 1053], "cornerston": 1032, "cornflowerblu": [157, 211, 220, 227, 261, 263, 266, 282, 284, 300, 306, 362, 363], "corollari": 384, "corona": 1052, "corpora": 419, "corpu": [54, 357, 358, 377, 419, 595, 596, 597, 598, 1040], "corr": [117, 193, 275], "corrcoef": [117, 133], "correct": [2, 30, 52, 63, 64, 92, 114, 137, 148, 182, 190, 202, 206, 217, 235, 260, 268, 269, 275, 282, 284, 292, 294, 345, 347, 356, 365, 379, 382, 384, 386, 397, 410, 412, 414, 418, 419, 421, 422, 431, 437, 456, 462, 475, 480, 494, 508, 510, 642, 674, 683, 685, 710, 711, 715, 719, 720, 725, 728, 730, 731, 735, 736, 737, 741, 745, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 790, 791, 792, 794, 797, 798, 801, 803, 839, 840, 841, 848, 856, 882, 992, 1004, 1008, 1009, 1023, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "correct_covari": [475, 480], "corrected_std": 275, "corrected_var": 275, "correctli": [2, 167, 171, 217, 235, 251, 282, 284, 290, 305, 322, 336, 345, 382, 391, 419, 421, 431, 443, 475, 500, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 617, 665, 673, 675, 681, 682, 683, 710, 801, 803, 806, 829, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 858, 861, 868, 891, 906, 907, 911, 913, 914, 915, 916, 917, 919, 921, 956, 1005, 1008, 1011, 1012, 1018, 1023, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "correl": [2, 51, 64, 115, 117, 118, 133, 144, 145, 151, 153, 155, 168, 171, 179, 187, 188, 189, 191, 192, 202, 206, 212, 235, 275, 281, 294, 321, 325, 326, 337, 375, 378, 379, 387, 396, 399, 411, 416, 418, 423, 456, 463, 488, 489, 491, 500, 501, 507, 531, 571, 613, 616, 634, 641, 642, 643, 689, 690, 750, 764, 785, 786, 787, 837, 851, 852, 888, 889, 891, 900, 999, 1004, 1009, 1015, 1018, 1022, 1024, 1028, 1029, 1030, 1034, 1039, 1040, 1041, 1052, 1053], "correlation_coeffici": 616, "correlation_model": 1046, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 88, 100, 111, 115, 125, 137, 140, 143, 144, 146, 154, 168, 171, 172, 175, 180, 183, 190, 206, 209, 217, 218, 221, 226, 235, 245, 250, 251, 258, 265, 269, 274, 276, 278, 279, 284, 285, 289, 308, 320, 326, 327, 328, 357, 360, 361, 364, 365, 370, 376, 377, 378, 381, 382, 384, 386, 389, 390, 395, 396, 397, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 429, 435, 443, 445, 447, 451, 454, 457, 459, 465, 467, 469, 470, 473, 478, 488, 489, 490, 496, 497, 499, 500, 501, 502, 503, 541, 548, 551, 552, 553, 556, 557, 559, 562, 564, 566, 567, 568, 571, 589, 591, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 624, 635, 637, 639, 640, 642, 650, 653, 654, 655, 659, 665, 666, 667, 668, 669, 675, 676, 678, 679, 680, 681, 682, 683, 685, 687, 688, 689, 690, 694, 697, 698, 699, 701, 710, 717, 720, 731, 732, 741, 745, 749, 753, 759, 761, 781, 785, 789, 795, 796, 801, 803, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 832, 840, 842, 843, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 868, 869, 878, 881, 882, 884, 885, 888, 892, 900, 911, 912, 913, 916, 919, 920, 921, 922, 932, 942, 949, 964, 967, 982, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1022, 1023, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "correspondingli": 1056, "corri": 1050, "corrobor": 394, "corrupt": [44, 130, 202, 223, 234, 394, 867, 1004, 1016], "cort": [1050, 1051, 1054, 1055], "cortex": 419, "cos_transform": 43, "cosin": [2, 43, 75, 290, 295, 300, 374, 377, 396, 414, 419, 420, 447, 451, 456, 463, 542, 597, 598, 627, 703, 767, 768, 769, 772, 777, 778, 781, 785, 786, 787, 851, 852, 856, 883, 1011, 1024, 1034, 1049], "cosine_dist": [2, 410, 703, 769, 1011, 1045, 1058], "cosine_similar": [2, 349, 410, 767, 772, 1006, 1044, 1058], "cosinesimil": 295, "cosmo": 57, "cost": [0, 43, 74, 126, 143, 153, 174, 187, 195, 237, 245, 249, 267, 277, 279, 282, 284, 289, 324, 332, 345, 357, 358, 359, 364, 382, 388, 390, 394, 413, 414, 421, 484, 503, 507, 544, 545, 546, 553, 558, 564, 565, 566, 567, 568, 571, 572, 609, 617, 626, 634, 653, 654, 659, 660, 665, 667, 668, 669, 670, 675, 679, 681, 683, 685, 694, 695, 699, 707, 709, 725, 749, 791, 794, 806, 807, 829, 837, 872, 891, 909, 911, 912, 913, 916, 919, 920, 921, 922, 955, 1000, 1004, 1005, 1008, 1011, 1021, 1022, 1023, 1029, 1030, 1034, 1045, 1048, 1049], "cost_complexity_pruning_path": [360, 919, 920, 921, 922], "costa": [1047, 1052], "costin": 1039, "costli": [106, 111, 144, 185, 269, 276, 353, 370, 383, 388, 414, 449, 634, 815, 817, 903, 904, 955, 1008, 1011, 1020, 1028], "costlier": 678, "costs_": [477, 478, 1055], "could": [43, 48, 52, 53, 64, 72, 77, 88, 105, 106, 123, 126, 138, 139, 147, 150, 153, 169, 174, 179, 186, 189, 190, 191, 217, 218, 221, 226, 235, 241, 249, 250, 251, 268, 269, 275, 288, 294, 303, 306, 327, 341, 342, 356, 360, 364, 371, 382, 388, 390, 396, 400, 408, 412, 418, 421, 422, 426, 480, 540, 545, 614, 615, 636, 678, 809, 814, 816, 998, 1004, 1005, 1015, 1016, 1018, 1023, 1028, 1036, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "couldn": [1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "count": [2, 23, 43, 52, 54, 62, 64, 76, 84, 88, 104, 105, 121, 159, 160, 190, 191, 217, 219, 235, 248, 258, 269, 284, 289, 292, 295, 325, 326, 357, 358, 377, 379, 386, 391, 396, 397, 412, 414, 419, 421, 422, 452, 455, 495, 503, 543, 551, 588, 595, 596, 597, 598, 601, 611, 624, 647, 704, 712, 722, 725, 736, 737, 745, 761, 790, 791, 793, 794, 846, 850, 851, 852, 860, 863, 874, 923, 925, 957, 972, 996, 997, 1000, 1004, 1008, 1010, 1011, 1018, 1024, 1032, 1039, 1042, 1044, 1047, 1048, 1050, 1051, 1056], "count_nonzero": [46, 49, 369], "count_onli": [851, 852], "counter": [57, 137, 282, 414, 683, 684, 685, 1052], "counterpart": [997, 1005, 1023], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [321, 331, 503, 1005], "counts_": 1051, "countvector": [2, 54, 338, 358, 377, 387, 415, 419, 422, 470, 495, 543, 589, 596, 597, 598, 1039, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "coupl": [54, 87, 88, 90, 238, 376, 377, 411, 412, 414, 423, 596, 917, 997, 1023], "cournapeau": [0, 404, 1039, 1042], "cours": [47, 48, 195, 289, 369, 382, 384, 413, 419, 422, 423, 998, 1003, 1004, 1032], "coursecentr": [414, 448], "courtesi": 382, "couvreur": [1048, 1049], "cov": [70, 115, 118, 139, 265, 382, 396, 400, 407, 417, 427, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 526, 539, 541, 548, 555], "cov_": [50, 115], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1055, "cov_test": 50, "cov_train": 50, "cov_typ": [262, 497], "covar": [260, 261, 266], "covari": [2, 48, 51, 65, 69, 112, 117, 130, 133, 152, 154, 174, 181, 183, 220, 244, 259, 261, 263, 264, 265, 266, 282, 306, 331, 391, 396, 405, 414, 417, 419, 424, 427, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 511, 522, 526, 534, 539, 541, 548, 555, 556, 557, 570, 617, 618, 620, 629, 630, 638, 651, 652, 657, 661, 663, 689, 690, 693, 696, 700, 804, 805, 807, 826, 1007, 1014, 1018, 1029, 1030, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1046, 1048], "covariance_": [51, 70, 113, 115, 475, 476, 477, 478, 479, 480, 481, 482, 556, 557, 1002, 1046], "covariance_correct": [475, 480], "covariance_eigh": [332, 548, 1057], "covariance_estim": [69, 556, 1002, 1051], "covariance_prior": [266, 804], "covariance_prior_": 804, "covariance_reweight": [475, 480], "covariance_typ": [79, 261, 262, 264, 265, 266, 804, 805, 1055], "covariances_": [260, 261, 262, 265, 266, 804, 805, 1046], "cover": [0, 87, 195, 217, 235, 365, 374, 377, 382, 395, 642, 727, 801, 1008, 1009, 1026], "coverag": [2, 50, 52, 150, 153, 217, 235, 308, 377, 385, 410, 505, 634, 727], "coverage_error": [2, 1008, 1043, 1053], "coverage_fract": 150, "coverages_land": 50, "covertyp": [2, 375, 497, 1034], "covtyp": 195, "cow": 1040, "cowlei": 1049, "cowton": 1053, "cox": [315, 319, 887, 899, 1018, 1047, 1055], "cpo": [172, 379], "cppflag": 380, "cpu": [0, 96, 276, 295, 329, 369, 370, 388, 390, 396, 400, 410, 422, 503, 570, 639, 654, 658, 660, 662, 665, 666, 668, 670, 672, 673, 675, 683, 686, 807, 821, 832, 833, 834, 855, 863, 904, 1008, 1044, 1053, 1054, 1056, 1057], "cpu_count": [77, 143, 295], "cpuexecutionprovid": 408, "cpython": [382, 383, 388, 1054], "craeton": 1057, "craft": 385, "craig": [1020, 1042, 1047], "crall": [1046, 1052], "crammer": [673, 674, 742, 1004, 1008, 1023], "crammer06a": [673, 674], "crammer_sing": [911, 1009, 1023, 1039], "cranenburgh": 1043, "crash": [51, 382, 408, 474, 901, 902, 909, 1018, 1043, 1047, 1055, 1056], "crawl": [528, 947], "craze": 1046, "crc": 1004, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 81, 84, 87, 93, 95, 97, 105, 106, 113, 118, 120, 125, 128, 139, 142, 146, 147, 148, 150, 154, 157, 171, 174, 176, 179, 180, 181, 183, 186, 189, 191, 197, 199, 201, 203, 213, 218, 219, 229, 230, 239, 249, 251, 254, 255, 257, 265, 269, 270, 271, 273, 275, 285, 289, 303, 305, 306, 317, 319, 320, 324, 327, 328, 339, 341, 342, 346, 347, 350, 352, 353, 354, 358, 360, 362, 363, 365, 370, 377, 378, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 395, 396, 400, 401, 408, 412, 414, 415, 418, 420, 421, 422, 424, 444, 457, 459, 471, 472, 506, 522, 523, 524, 525, 553, 560, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 595, 596, 598, 604, 635, 637, 638, 639, 640, 704, 705, 707, 708, 709, 789, 796, 807, 809, 813, 817, 821, 825, 829, 830, 832, 833, 841, 872, 884, 913, 916, 919, 920, 921, 922, 926, 935, 958, 959, 966, 980, 992, 998, 1004, 1007, 1008, 1009, 1011, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1028, 1032, 1036, 1039, 1040, 1042, 1045, 1049, 1052, 1053, 1054, 1055, 1056, 1057], "create_ax": 315, "create_species_bunch": 50, "createindex": 295, "creation": [384, 518, 519, 520, 522, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 663, 851, 852, 1032, 1046, 1047, 1048, 1052], "creativ": 376, "creator": [172, 376, 379], "cred_int_df": 275, "cred_interv": 275, "credibl": 275, "credit": [377, 390, 421, 1004, 1032], "credit_amount": 269, "credit_card": 269, "credit_gain": 269, "credit_gain_scor": 269, "credit_histori": 269, "creighton": 329, "crispinlogan": [1051, 1054, 1055, 1057], "cristian": 649, "cristina": 1051, "criteria": [92, 143, 187, 196, 206, 225, 265, 275, 390, 414, 423, 447, 472, 488, 489, 490, 508, 564, 565, 566, 567, 571, 572, 653, 659, 663, 665, 666, 678, 699, 872, 891, 911, 912, 919, 920, 921, 922, 998, 1007, 1012, 1022, 1029, 1042, 1047, 1050], "criterion": [64, 111, 112, 193, 204, 225, 265, 287, 325, 384, 391, 396, 414, 419, 447, 451, 455, 458, 465, 468, 539, 544, 546, 553, 560, 561, 564, 565, 566, 567, 571, 572, 573, 613, 634, 651, 652, 655, 663, 673, 674, 675, 676, 678, 679, 681, 683, 684, 685, 687, 698, 702, 717, 805, 908, 913, 914, 915, 916, 917, 919, 920, 921, 922, 1004, 1007, 1008, 1016, 1021, 1024, 1030, 1034, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "criterion_": [204, 206, 663], "critic": [376, 382, 395, 421, 699, 1005, 1008, 1016, 1023, 1032, 1050], "crockett": 1054, "crombach": 1041, "crop": [390, 1054], "cross": [2, 9, 29, 52, 53, 64, 70, 89, 92, 93, 105, 106, 108, 109, 111, 115, 118, 121, 130, 143, 146, 147, 149, 150, 153, 162, 166, 169, 170, 172, 190, 191, 196, 202, 203, 204, 205, 211, 217, 219, 225, 235, 252, 257, 262, 263, 265, 267, 272, 275, 276, 277, 279, 281, 282, 283, 284, 287, 289, 290, 292, 299, 313, 314, 316, 321, 324, 326, 331, 337, 345, 352, 377, 382, 384, 391, 394, 395, 396, 408, 409, 412, 415, 416, 419, 421, 422, 423, 424, 443, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 500, 508, 509, 511, 522, 548, 574, 575, 582, 600, 601, 604, 609, 613, 616, 649, 650, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 708, 709, 713, 720, 735, 748, 792, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 845, 871, 872, 876, 891, 892, 909, 911, 913, 916, 928, 962, 1007, 1008, 1011, 1012, 1016, 1018, 1023, 1024, 1028, 1029, 1030, 1032, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "cross_decomposit": [2, 116, 117, 118, 187, 252, 488, 489, 490, 491, 1009, 1029, 1043, 1044, 1046, 1047, 1048], "cross_val": 1039, "cross_val_predict": [2, 158, 271, 324, 405, 412, 418, 421, 443, 574, 575, 833, 834, 1043, 1044, 1045, 1046, 1048, 1050, 1052, 1056], "cross_val_scor": [2, 52, 130, 185, 186, 187, 267, 271, 280, 290, 330, 348, 365, 382, 384, 394, 405, 418, 421, 478, 527, 582, 710, 749, 807, 832, 834, 919, 920, 997, 1008, 1029, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1051, 1052, 1055, 1056, 1058], "cross_valid": [2, 43, 52, 147, 153, 158, 190, 219, 251, 271, 278, 289, 292, 321, 331, 382, 395, 405, 582, 832, 833, 1008, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056], "crossentropi": 568, "crossvalid": [275, 290], "crowd": [390, 397, 1005, 1028], "crucial": [51, 153, 189, 221, 270, 369, 381, 382, 396, 397, 414, 424, 1023], "crude": 1050, "crunch": 388, "cruz": 182, "crypt": [57, 377], "cryptograph": 391, "cs_": 666, "cs_note": 423, "cs_point": 146, "csail": [414, 673, 674, 683, 848], "csc": [2, 369, 394, 396, 422, 534, 558, 560, 561, 677, 699, 878, 880, 886, 891, 894, 896, 902, 933, 937, 938, 970, 982, 983, 985, 986, 987, 988, 1011, 1018, 1047, 1048, 1050, 1053], "csc_matrix": [458, 564, 565, 570, 571, 572, 573, 888, 919, 920, 921, 922, 998, 1018, 1024, 1044], "csco": 51, "csgraph": [396, 1052], "csie": [195, 376, 493, 515, 516, 665], "csizsek": 1046, "csr": [2, 55, 332, 358, 369, 376, 377, 391, 394, 396, 422, 425, 449, 452, 453, 455, 456, 465, 504, 515, 530, 534, 560, 561, 564, 565, 571, 572, 573, 597, 637, 665, 699, 721, 775, 799, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 866, 874, 878, 880, 882, 883, 884, 886, 889, 890, 891, 894, 895, 896, 898, 901, 904, 919, 920, 921, 922, 933, 937, 938, 962, 970, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1011, 1018, 1022, 1039, 1040, 1045, 1047, 1048, 1054, 1055, 1056], "csr_arrai": 989, "csr_matrix": [295, 325, 446, 450, 458, 503, 541, 551, 564, 565, 566, 567, 570, 571, 572, 573, 595, 600, 601, 721, 837, 866, 884, 886, 913, 914, 916, 917, 919, 920, 921, 922, 956, 962, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 1009, 1018, 1022, 1023, 1024, 1054], "css": 1051, "cst": 1002, "cstride": 191, "csv": [51, 376, 379, 387, 1047, 1052], "csytraci": 1042, "ct": [53, 182, 258, 415, 470, 472, 473], "ctc": 182, "cttt": 182, "cube": [426, 540], "cubic": [113, 424], "cuda": [394, 410], "cue": 1007, "culprit": 394, "cultiv": 379, "cultur": 377, "cum_claim": [217, 235], "cum_exposur": 217, "cumsum": [149, 217, 235, 1046], "cumtim": 388, "cumul": [2, 149, 217, 235, 414, 733, 742, 763, 888, 900, 1018, 1022, 1046, 1048, 1049], "cumulated_claim": 217, "cumulated_claim_amount": 235, "cumulated_exposur": 217, "cumulated_sampl": 235, "cunha": [1040, 1041], "cup": [377, 1008], "cupi": [329, 332, 394, 410, 1056, 1057, 1058], "cupy_to_ndarrai": 410, "curat": [382, 385, 386], "cure": 1004, "curic": [1047, 1048], "current": [0, 2, 7, 47, 81, 137, 179, 190, 235, 315, 324, 370, 371, 377, 380, 382, 383, 387, 391, 394, 396, 397, 410, 411, 414, 418, 421, 422, 423, 424, 446, 452, 456, 474, 475, 476, 477, 478, 479, 480, 481, 482, 539, 542, 548, 560, 561, 564, 565, 566, 567, 569, 571, 572, 573, 583, 598, 600, 617, 624, 633, 634, 653, 674, 678, 682, 683, 684, 685, 795, 804, 805, 856, 860, 868, 869, 887, 899, 909, 919, 920, 921, 922, 925, 927, 928, 929, 974, 982, 997, 1002, 1004, 1008, 1011, 1012, 1018, 1028, 1031, 1047, 1051, 1053, 1054, 1055], "current_count": 76, "current_month": 179, "current_sklearn_vers": 583, "current_sz_mb": 47, "currentcontrolset": 400, "currentmodul": 382, "curs": [356, 357, 414, 420, 1010, 1011], "cursor": [143, 276], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 109, 111, 140, 142, 143, 149, 187, 196, 197, 207, 217, 235, 237, 239, 242, 243, 245, 247, 254, 255, 259, 260, 261, 262, 264, 265, 267, 269, 275, 285, 288, 311, 316, 319, 324, 332, 349, 362, 389, 409, 413, 418, 420, 443, 444, 445, 509, 517, 522, 528, 532, 571, 639, 652, 665, 705, 707, 709, 713, 714, 715, 716, 734, 736, 748, 789, 791, 794, 795, 796, 804, 805, 813, 824, 830, 835, 837, 838, 849, 872, 891, 911, 916, 1004, 1005, 1007, 1008, 1014, 1024, 1029, 1030, 1032, 1034, 1036, 1041, 1042, 1045, 1049, 1051, 1052, 1053, 1054, 1055], "curvatur": 310, "cusick": 1049, "custom": [2, 15, 30, 41, 134, 169, 171, 187, 201, 255, 267, 269, 274, 276, 279, 282, 283, 287, 297, 302, 306, 324, 340, 342, 343, 345, 346, 348, 356, 358, 374, 377, 380, 384, 389, 390, 391, 394, 395, 396, 405, 408, 414, 415, 418, 424, 474, 495, 500, 501, 509, 511, 545, 547, 554, 556, 564, 565, 571, 572, 578, 580, 609, 637, 638, 697, 706, 720, 785, 807, 837, 875, 909, 916, 991, 1002, 1008, 1011, 1027, 1028, 1029, 1032, 1034, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058], "custom_combin": 884, "custom_cv": 418, "custom_cv_2fold": 418, "custom_fnames_enc": 884, "custom_nam": 356, "custom_scor": 332, "custom_scorer_modul": 1008, "custom_scoring_funct": 1008, "customestim": 135, "customkernel": 625, "customvector": 422, "cut": [57, 78, 81, 100, 101, 171, 172, 187, 239, 267, 278, 292, 332, 337, 386, 394, 411, 413, 414, 452, 458, 459, 468, 503, 595, 598, 665, 698, 702, 823, 829, 834, 872, 891, 1018, 1029], "cut_dist": [90, 452], "cutler": [919, 920], "cutoff": [197, 961, 1018, 1048], "cutoffs_x0": 315, "cutoffs_x1": 315, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 89, 105, 106, 107, 108, 111, 130, 143, 147, 149, 153, 163, 171, 185, 186, 190, 206, 216, 219, 251, 269, 271, 273, 274, 275, 276, 277, 278, 280, 281, 285, 289, 290, 292, 321, 329, 331, 332, 345, 352, 395, 396, 405, 412, 413, 418, 421, 423, 443, 478, 574, 575, 601, 609, 654, 658, 660, 662, 666, 668, 670, 672, 680, 682, 807, 809, 810, 811, 812, 813, 821, 822, 823, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 842, 845, 892, 919, 920, 997, 1000, 1003, 1004, 1008, 1018, 1028, 1041, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1055, 1056, 1057, 1058], "cv_alpha": [658, 662], "cv_alphas_": [206, 658, 662, 1051], "cv_best_it": 149, "cv_clf": 149, "cv_color": 149, "cv_estim": 149, "cv_estimators_tut": 163, "cv_line": 149, "cv_mape_scor": 52, "cv_model": 190, "cv_result": [43, 52, 105, 143, 153, 171, 273, 274, 276, 278, 405, 821, 834, 1008], "cv_results_": [105, 106, 107, 115, 143, 163, 171, 265, 269, 273, 274, 275, 276, 279, 283, 286, 287, 297, 345, 478, 601, 680, 682, 807, 810, 811, 821, 829, 1045, 1049, 1051, 1052, 1057, 1058], "cv_results_ecoc": 292, "cv_results_lr": 219, "cv_results_ovo": 292, "cv_results_ovr": 292, "cv_results_qr": 219, "cv_results_tre": 292, "cv_results_tuned_model": 289, "cv_results_vanilla_model": 289, "cv_score": [149, 289], "cv_test_scor": 835, "cv_train_scor": 835, "cv_valu": 1047, "cv_values_": [680, 682, 1057], "cvc": 51, "cve": 1052, "cvx": 51, "cwitt": 1047, "cxx": 380, "cxxflag": 380, "cyan": [111, 140, 190, 306], "cybernet": 776, "cycl": [0, 16, 43, 77, 79, 85, 97, 123, 205, 261, 266, 282, 284, 327, 328, 382, 386, 405, 419, 586, 587, 634, 810, 811, 933, 997, 998, 1047, 1048, 1049, 1051, 1052, 1053, 1054], "cycler": 73, "cyclic": [43, 653, 654, 659, 660, 667, 668, 669, 670, 1051], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 308], "cynthias13w": 1056, "cyt": 292, "cython": [41, 328, 369, 370, 380, 382, 385, 391, 394, 400, 407, 410, 414, 421, 515, 1018, 1019, 1022, 1023, 1027, 1028, 1039, 1042, 1043, 1045, 1051, 1054, 1055, 1056, 1057], "cython3": 380, "cythonx": 383, "c\u00e8sar": 1008, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 83, 84, 85, 95, 96, 98, 104, 105, 115, 121, 123, 126, 130, 132, 174, 182, 190, 217, 225, 233, 235, 242, 247, 248, 249, 250, 263, 274, 275, 283, 289, 294, 301, 302, 308, 312, 334, 335, 338, 345, 349, 350, 358, 376, 377, 379, 382, 384, 388, 394, 412, 414, 416, 417, 419, 421, 422, 424, 425, 450, 452, 453, 458, 466, 469, 494, 500, 510, 533, 541, 543, 564, 565, 572, 573, 588, 589, 597, 621, 622, 626, 629, 630, 635, 651, 652, 655, 676, 677, 678, 687, 695, 696, 699, 700, 704, 706, 712, 715, 728, 729, 730, 731, 733, 763, 771, 785, 788, 795, 819, 846, 848, 850, 851, 852, 867, 878, 882, 884, 885, 887, 899, 904, 921, 922, 926, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1016, 1018, 1020, 1023, 1024, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1057], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 421, "d2": [729, 730, 1008], "d2_absolute_error_scor": [2, 730, 1008, 1053], "d2_log_loss_scor": [2, 1008, 1057], "d2_pinball_scor": [2, 1008, 1053], "d2_pinball_score_08": 1008, "d2_tweedie_scor": [2, 410, 1008, 1052, 1058], "d2_tweedie_score_15": 1008, "d55e00": 260, "d81b60": 319, "d83": 379, "d_": [113, 414, 419, 655, 676, 687, 785, 1005, 1010], "d_c": 414, "d_chunk": 788, "d_fit": 695, "d_fix": 132, "d_m": 414, "d_multi": 132, "da": [377, 1054, 1055, 1057], "dae": 1004, "dagm": 1000, "dagstuhl": 1008, "dai": [0, 43, 51, 52, 153, 179, 191, 218, 379, 382, 890, 1032, 1045, 1046, 1053, 1054], "daiki": 1043, "daili": [51, 153, 1032], "dakota": 1049, "dale": 1052, "dalla": 1047, "dalmia": [1045, 1046, 1047], "damag": 422, "damicelli": 1054, "damink": 1056, "daml": [414, 458, 468], "damp": [79, 414, 446, 460], "dan": [55, 1039, 1043, 1044, 1045, 1047, 1048], "danfrankj": 1043, "dang": [686, 1004, 1057], "danger": [218, 418], "dangi": 1056, "dangl": 55, "dangonite57": [1054, 1055], "daniel": [329, 369, 892, 1018, 1032, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1056], "daniela": [1053, 1054], "danielgaerb": 1054, "danielsen": 1046, "danielweitzenfeld": 1042, "daniil": 1046, "danil": 1047, "dani\u00ebl": 1050, "danna": 1049, "danni": [1042, 1043, 1044], "dantzig": 352, "danylo": 1048, "dao": 1047, "daphn": 1050, "dare": 1049, "darioka": [1051, 1053, 1054], "dariu": [1046, 1047], "dark": [140, 190, 345, 377, 1056], "dark2": [62, 64, 238], "darkblu": 306, "darkorang": [112, 127, 131, 132, 218, 228, 240, 261, 262, 263, 266, 282, 284, 300, 306, 307, 336, 362], "darkorchid": 227, "darkr": [231, 301, 344], "darpa": 377, "darren": [1053, 1054], "darshan": 1051, "dart": 1027, "dartmouth": 0, "dasarathi": 379, "dasgupta": [422, 452, 905, 1020], "dash": [69, 113, 137, 149, 160, 174, 177, 179, 190, 209, 212, 218, 219, 226, 229, 230, 254, 269, 275, 285, 347, 1022], "dashdot": [149, 174, 177, 254], "dask": [1028, 1047], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 91, 94, 95, 96, 97, 100, 103, 105, 106, 108, 112, 114, 120, 121, 122, 123, 126, 127, 131, 133, 135, 137, 140, 142, 143, 146, 147, 149, 150, 155, 156, 157, 159, 161, 163, 165, 169, 173, 174, 175, 176, 178, 179, 181, 183, 185, 187, 190, 191, 196, 197, 200, 201, 202, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 244, 247, 248, 249, 251, 253, 254, 255, 258, 260, 261, 262, 263, 264, 266, 268, 269, 273, 275, 277, 278, 279, 280, 283, 289, 290, 292, 294, 295, 299, 301, 303, 304, 305, 306, 308, 311, 312, 314, 316, 317, 318, 322, 324, 326, 328, 329, 330, 332, 335, 336, 338, 339, 341, 342, 344, 349, 350, 356, 361, 362, 363, 364, 368, 370, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 389, 390, 391, 395, 400, 402, 405, 408, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 521, 522, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 624, 625, 629, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 717, 718, 720, 724, 725, 727, 732, 734, 735, 736, 737, 738, 741, 743, 744, 745, 747, 748, 761, 762, 764, 768, 770, 771, 776, 785, 790, 791, 792, 794, 795, 796, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 928, 930, 931, 932, 933, 935, 936, 937, 938, 941, 942, 943, 952, 954, 955, 970, 973, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "data1010": 1044, "data_filenam": [508, 512], "data_hom": [492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 1046, 1055], "data_home_path": 506, "data_id": [44, 147, 179, 190, 217, 235, 245, 269, 289, 292, 321, 376, 503], "data_ind": 53, "data_max": 1044, "data_max_": [881, 1044], "data_min": 1044, "data_min_": [881, 1044], "data_nam": 400, "data_path": 47, "data_rang": 1044, "data_range_": [881, 1044], "data_sampl": 54, "data_set": 311, "data_size_mb": 358, "data_stream": 47, "data_test": [249, 269, 276, 356, 516], "data_test_size_mb": 356, "data_train": [249, 269, 276, 356, 516], "data_train_size_mb": 356, "data_transform": 646, "data_transpos": [1053, 1055], "data_unravel_indic": 53, "data_vers": 400, "databas": [47, 172, 320, 369, 371, 377, 379, 414, 419, 421, 422, 425, 448, 450, 517, 562, 563, 904, 1020], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 104, 105, 106, 137, 143, 147, 150, 155, 171, 179, 185, 189, 190, 191, 192, 197, 202, 206, 221, 225, 235, 255, 258, 265, 269, 273, 275, 276, 278, 286, 287, 289, 292, 320, 321, 322, 327, 328, 329, 352, 356, 357, 376, 377, 382, 384, 387, 396, 415, 421, 438, 448, 449, 451, 453, 455, 470, 472, 473, 474, 488, 489, 490, 491, 495, 496, 497, 499, 503, 507, 508, 509, 511, 512, 517, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 568, 569, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 695, 696, 699, 807, 810, 811, 821, 837, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 909, 933, 962, 978, 981, 996, 997, 998, 1028, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "datalim": 262, "datapoint": [43, 77, 87, 91, 178, 181, 201, 249, 250, 254, 270, 275, 294, 424, 452, 509, 564, 565, 566, 567, 571, 572, 573, 618, 919, 920, 921, 922, 1001], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 105, 106, 107, 108, 109, 113, 114, 115, 118, 122, 125, 126, 127, 128, 129, 130, 132, 133, 136, 138, 139, 140, 141, 142, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 168, 169, 170, 171, 172, 173, 175, 177, 182, 185, 186, 192, 193, 195, 196, 199, 201, 203, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 239, 241, 242, 243, 245, 248, 250, 252, 253, 257, 258, 260, 262, 263, 264, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 345, 346, 347, 348, 350, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 365, 370, 371, 385, 386, 388, 395, 396, 399, 400, 408, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 426, 429, 434, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 475, 476, 479, 480, 481, 482, 484, 487, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 590, 591, 594, 595, 596, 597, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 635, 638, 639, 640, 641, 642, 645, 646, 647, 650, 652, 653, 654, 656, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 715, 717, 718, 736, 762, 764, 794, 795, 799, 800, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 867, 868, 869, 871, 872, 875, 876, 884, 885, 889, 891, 893, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 937, 938, 942, 943, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "dataset_44063": 52, "dataset_nam": [254, 295], "datasets_0004_44063": 52, "datasets_nam": 254, "datastructur": [410, 1047, 1051], "datastuctur": 1056, "datatyp": [470, 472, 1046, 1049], "date": [43, 104, 153, 172, 179, 191, 377, 379, 382, 386, 397, 415, 1028], "dateco2datef641958": 179, "daten": [456, 1047, 1048], "datenbergwerk": 1049, "datetim": [43, 55, 179, 191], "dauphin": 1041, "dave": [1039, 1046, 1047, 1053, 1055], "davi": [2, 480, 732, 1008, 1043], "david": [0, 114, 377, 404, 414, 421, 424, 468, 539, 543, 574, 575, 629, 630, 635, 732, 804, 908, 998, 1004, 1012, 1021, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "davidblnc": [1054, 1055], "davidleon123": 1057, "davies_bouldin_scor": [2, 414, 1047], "davis2006": 1008, "daw": [0, 404, 1039, 1040, 1041, 1042, 1043], "dawson": [1043, 1057], "dayn": [1054, 1055], "db": [84, 90, 414], "dbauer9": 1050, "dberenbaum": 1055, "dbg": 388, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 90, 95, 98, 100, 187, 330, 336, 394, 396, 452, 456, 458, 461, 519, 711, 712, 724, 744, 800, 802, 863, 891, 1011, 1029, 1033, 1034, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1055, 1056], "dbscan_clust": 452, "dcc": 377, "dcg": [733, 763, 1008, 1046], "dcg_score": [2, 763, 1008, 1046, 1049], "dd": [50, 51, 156, 308, 505], "ddof": [275, 891, 902], "de": [51, 158, 321, 379, 642, 695, 771, 1004, 1005, 1028, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "dea": [1053, 1054, 1055], "deactiv": [256, 376, 383, 388, 400, 415, 810, 811, 1053], "dead": 1057, "deadlock": 397, "deal": [62, 92, 105, 153, 185, 190, 202, 241, 289, 292, 349, 358, 382, 387, 415, 422, 423, 424, 480, 503, 710, 715, 770, 794, 877, 955, 1004, 1032, 1042, 1054, 1055], "dealloc": 1056, "dean": [158, 1047, 1053, 1055, 1057], "death": 377, "debian": [0, 369, 380, 388], "debias": 132, "deborah": [1045, 1046, 1056], "debug": [2, 365, 370, 383, 385, 388, 396, 399, 634, 910, 1047, 1051], "debugg": [385, 390], "dec": [218, 292, 684, 890, 915, 1023], "decad": [190, 1028], "decai": [179, 551, 868, 869, 955, 1008, 1022, 1043], "decal": 1051, "decemb": [114, 153, 179, 377, 671, 692, 693, 1039, 1047, 1049, 1051, 1052, 1054], "decent": [244, 274, 377, 1010], "deci": 284, "decid": [43, 50, 92, 95, 105, 148, 153, 266, 272, 275, 282, 377, 382, 397, 408, 413, 422, 424, 456, 463, 566, 567, 618, 642, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 678, 688, 691, 804, 853, 854, 855, 857, 859, 861, 862, 863, 874, 1007, 1014, 1032, 1052, 1055, 1058], "decil": [639, 1050], "deciles_hlines_": 639, "deciles_vlines_": 639, "decim": [62, 180, 477, 478, 924, 1046, 1047], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 91, 93, 95, 127, 136, 139, 140, 141, 142, 148, 156, 157, 158, 160, 161, 165, 171, 172, 176, 178, 190, 200, 201, 209, 226, 227, 230, 244, 245, 247, 255, 267, 278, 279, 281, 282, 292, 303, 306, 310, 315, 316, 317, 320, 333, 337, 338, 341, 342, 343, 344, 345, 346, 347, 353, 354, 356, 369, 378, 379, 382, 396, 408, 409, 412, 414, 421, 443, 475, 503, 507, 511, 526, 543, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 600, 601, 638, 639, 640, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 705, 707, 709, 710, 714, 725, 727, 733, 734, 742, 746, 747, 749, 763, 789, 791, 794, 795, 796, 801, 806, 807, 810, 811, 821, 823, 829, 834, 837, 839, 840, 842, 853, 872, 891, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 1002, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "decision_funct": [48, 50, 62, 64, 91, 139, 154, 165, 229, 230, 231, 245, 254, 269, 282, 289, 301, 302, 310, 317, 331, 343, 344, 345, 349, 350, 354, 384, 396, 412, 413, 421, 443, 475, 556, 557, 560, 562, 566, 568, 570, 574, 600, 601, 638, 639, 640, 665, 666, 673, 675, 681, 682, 683, 684, 705, 707, 709, 714, 727, 733, 734, 742, 746, 747, 749, 763, 789, 795, 796, 801, 806, 807, 810, 811, 821, 829, 832, 839, 840, 841, 842, 857, 871, 878, 908, 911, 913, 915, 916, 930, 1004, 1008, 1014, 1015, 1022, 1023, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1056, 1058], "decision_function_shap": [324, 353, 913, 916, 1023, 1044, 1045, 1048, 1049], "decision_path": [364, 564, 565, 571, 572, 573, 919, 920, 921, 922, 1045, 1050], "decision_threshold": [269, 289], "decision_tre": [923, 924, 925, 1024], "decision_tree_learn": [919, 920, 1024], "decisionboundarydisplai": [2, 48, 66, 67, 70, 91, 139, 154, 159, 201, 209, 226, 231, 278, 298, 303, 306, 320, 341, 342, 343, 344, 346, 347, 349, 361, 1053, 1054, 1056, 1057], "decisiontre": [146, 560, 1044], "decisiontreeclassifi": [2, 67, 137, 139, 146, 159, 279, 292, 330, 360, 361, 364, 396, 413, 421, 560, 562, 564, 566, 568, 571, 638, 718, 813, 835, 920, 921, 923, 924, 925, 998, 1009, 1024, 1040, 1041, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "decisiontreeclassifierifitteddecisiontreeclassifi": 364, "decisiontreeregressor": [2, 138, 140, 255, 316, 324, 330, 362, 363, 387, 561, 563, 565, 566, 567, 569, 572, 639, 640, 919, 922, 924, 950, 998, 1009, 1024, 1040, 1041, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "decisiontreeregressorifitteddecisiontreeregressor": 326, "declan": 1051, "declar": [91, 238, 251, 365, 382, 383, 388, 396, 449, 452, 453, 465, 477, 478, 484, 697, 701, 1046, 1050], "decod": [47, 308, 377, 396, 510, 576, 595, 596, 598, 1039, 1040], "decode_error": [47, 422, 510, 595, 596, 598, 1041], "decompos": [11, 123, 127, 140, 317, 541, 545, 716, 832, 955, 1003, 1004, 1008, 1025, 1033, 1034], "decomposit": [2, 9, 44, 45, 54, 55, 85, 93, 104, 106, 107, 108, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 156, 195, 237, 238, 240, 248, 249, 252, 253, 256, 274, 299, 304, 320, 328, 331, 332, 357, 371, 375, 388, 391, 396, 410, 411, 412, 415, 421, 426, 455, 457, 458, 459, 468, 488, 489, 490, 502, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 563, 618, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 679, 680, 681, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 804, 805, 860, 867, 870, 873, 889, 920, 954, 955, 1004, 1005, 1008, 1025, 1027, 1029, 1030, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "decompress": [408, 1039], "decor": [2, 191, 324, 382, 383, 384, 391, 813, 830, 945, 949, 950, 968, 974, 1049, 1052, 1055, 1057], "decoupl": [421, 1010], "decreas": [63, 74, 81, 90, 93, 101, 109, 153, 155, 171, 172, 182, 190, 191, 193, 225, 247, 248, 277, 282, 310, 317, 320, 324, 360, 369, 371, 382, 412, 414, 421, 447, 451, 469, 528, 541, 542, 548, 564, 565, 566, 567, 568, 569, 571, 572, 573, 609, 642, 643, 644, 683, 684, 685, 713, 719, 734, 789, 796, 868, 869, 919, 920, 921, 922, 997, 999, 1000, 1004, 1005, 1008, 1011, 1012, 1015, 1016, 1022, 1023, 1032, 1041, 1046, 1049, 1052], "dede00": [79, 97, 98], "dedic": [43, 273, 354, 380, 386, 388, 394, 397, 410, 414, 591, 679, 681, 694, 997, 1004, 1027, 1047, 1056], "deduc": 46, "deduct": 1012, "dedupl": 1043, "deeksha": 1051, "deem": [283, 284, 541, 1016, 1052], "deep": [217, 384, 396, 408, 421, 428, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 776, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 1012, 1013, 1027, 1028, 1032, 1044, 1050, 1051, 1053], "deepcopi": 384, "deeper": [356, 1024], "deepest": [568, 569, 1050], "deeplook": 1049, "deeppink": 284, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 83, 87, 90, 91, 93, 96, 104, 109, 121, 123, 125, 126, 130, 132, 135, 137, 140, 142, 147, 149, 150, 153, 158, 177, 180, 182, 183, 186, 193, 198, 204, 206, 209, 214, 217, 218, 225, 226, 227, 235, 237, 238, 251, 252, 254, 260, 261, 262, 263, 265, 266, 269, 270, 273, 274, 275, 276, 278, 283, 286, 290, 295, 300, 302, 305, 308, 311, 313, 315, 317, 320, 321, 324, 332, 338, 341, 345, 349, 354, 356, 357, 358, 369, 377, 382, 384, 388, 389, 394, 415, 418, 422, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 515, 516, 540, 604, 608, 617, 618, 625, 788, 884, 945, 950, 968, 1008, 1015, 1023], "default": [2, 43, 52, 54, 62, 66, 77, 80, 81, 83, 90, 94, 123, 143, 168, 174, 185, 191, 197, 198, 206, 217, 218, 235, 246, 248, 254, 256, 258, 263, 269, 270, 278, 284, 289, 294, 295, 315, 319, 322, 324, 325, 329, 331, 332, 349, 352, 353, 356, 357, 358, 360, 364, 365, 369, 370, 376, 377, 380, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 400, 405, 408, 412, 413, 414, 415, 418, 419, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 741, 742, 743, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 941, 943, 944, 945, 947, 949, 950, 954, 955, 956, 957, 958, 959, 960, 961, 970, 972, 973, 976, 977, 978, 980, 981, 982, 988, 991, 993, 994, 996, 997, 998, 1000, 1002, 1004, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "default_bas": [79, 97], "default_rng": 278, "default_scor": 387, "default_tag": 2, "default_target_attribut": 376, "default_tim": [232, 263], "defaultdict": [49, 52, 62, 193, 278, 357, 358], "defazio": [665, 1004], "defens": 292, "defer": 382, "deffici": 1057, "defici": [557, 1005, 1022], "defin": [8, 27, 46, 51, 64, 70, 88, 90, 92, 101, 104, 105, 107, 118, 123, 128, 135, 137, 138, 158, 172, 174, 181, 182, 183, 191, 192, 193, 197, 218, 225, 234, 235, 244, 248, 251, 255, 257, 260, 265, 269, 275, 276, 278, 282, 284, 285, 286, 287, 289, 292, 295, 313, 315, 325, 331, 332, 345, 349, 352, 356, 357, 369, 378, 381, 382, 383, 384, 388, 389, 391, 394, 395, 396, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 424, 429, 430, 431, 433, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 495, 526, 527, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 634, 635, 636, 637, 639, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 703, 704, 706, 715, 717, 718, 723, 728, 729, 730, 731, 732, 735, 738, 745, 748, 752, 753, 755, 757, 758, 760, 761, 764, 767, 773, 788, 792, 797, 798, 799, 800, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 941, 943, 947, 953, 965, 967, 991, 997, 998, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1028, 1034, 1036, 1041, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058], "definit": [2, 93, 114, 204, 217, 282, 295, 357, 382, 383, 384, 396, 399, 414, 416, 417, 419, 534, 536, 542, 618, 635, 699, 715, 725, 735, 753, 765, 804, 805, 997, 1000, 1002, 1004, 1006, 1008, 1011, 1022, 1026, 1034, 1043, 1047, 1054], "definitelyuncertain": 1045, "deflat": [190, 417, 426, 540], "defoi": 1052, "deform": [154, 265, 354], "degener": [121, 261, 426, 446, 460, 540, 727, 1004, 1008, 1048, 1052, 1053], "degrad": [153, 191, 244, 315, 352, 357, 420, 785, 1016], "degre": [43, 70, 125, 139, 179, 185, 189, 190, 191, 195, 197, 202, 204, 206, 218, 221, 250, 256, 260, 261, 262, 265, 266, 275, 290, 313, 326, 327, 342, 349, 351, 419, 423, 452, 458, 505, 542, 548, 646, 647, 650, 663, 782, 804, 807, 857, 886, 890, 913, 914, 915, 916, 917, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1014, 1015, 1018, 1021, 1023, 1042, 1048, 1052, 1053, 1056], "degrees_of_freedom_": 804, "degrees_of_freedom_prior": 804, "degrees_of_freedom_prior_": 804, "dei": 1051, "deil": [1040, 1050, 1051], "dein": 422, "dekel": [673, 674, 1004], "del": [55, 388, 1051, 1052], "delai": [2, 382, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 807, 821, 832, 833, 1053, 1054, 1057], "delalleau": 1021, "delanou": 1050, "delattr": 1051, "delayed_funct": 973, "delbert": [73, 446, 460], "deleg": [91, 388, 438, 439, 924, 996, 1043, 1045, 1051], "delet": [2, 106, 335, 337, 386, 387, 475, 480, 492], "delete_index": 335, "delete_indic": 335, "deleteri": 1046, "deli": 408, "deliber": 1004, "delimit": [382, 1014, 1054], "deliv": [80, 369, 1032], "deliveri": 386, "dell": 51, "delong": [1051, 1052], "delta": [417, 458], "delta_": 1005, "delta_k": 417, "delteil": 1043, "delv": [868, 869], "demand": [149, 153, 396, 422, 807, 821, 832, 833], "demarc": 95, "demiraj": [1054, 1055], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 81, 83, 88, 89, 94, 95, 96, 97, 99, 102, 154, 187, 193, 202, 223, 248, 263, 265, 276, 284, 320, 336, 337, 356, 357, 384, 411, 414, 422, 446, 447, 450, 452, 453, 454, 456, 457, 459, 461, 464, 467, 509, 518, 519, 520, 548, 711, 712, 724, 726, 744, 800, 802, 872, 891, 892, 1029], "demo_param": 384, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 90, 96, 104, 106, 137, 141, 148, 151, 169, 170, 182, 183, 187, 193, 218, 251, 257, 258, 262, 266, 267, 271, 278, 281, 284, 290, 297, 300, 307, 314, 316, 317, 319, 322, 326, 333, 335, 336, 339, 343, 349, 356, 357, 358, 365, 371, 377, 378, 382, 387, 394, 405, 410, 414, 418, 421, 453, 509, 519, 527, 704, 710, 720, 749, 805, 807, 854, 876, 907, 919, 997, 998, 1002, 1008, 1009, 1010, 1011, 1018, 1021, 1024, 1026, 1029], "dem\u0161ar": 275, "den": [0, 403, 1040, 1041, 1046, 1047, 1048, 1051, 1052], "dendrit": [414, 717], "dendro": 193, "dendro_idx": 193, "dendrogram": [71, 102, 187, 193, 364, 414, 447, 451, 511, 1029, 1051], "denero": 742, "deng": [1043, 1044, 1045], "dengemann": 1040, "dengyong": 907, "deni": [1041, 1042, 1046, 1047, 1048, 1054, 1055], "denni": 1053, "denois": [42, 68, 83, 85, 86, 88, 101, 122, 128, 187, 419, 503, 542, 544, 548, 591, 594, 837, 881, 1029], "denomin": [282, 421, 422, 427, 481, 597, 711, 764, 1002], "denot": [170, 391, 396, 400, 412, 414, 418, 421, 595, 596, 598, 807, 813, 821, 830, 884, 885, 992, 997, 1000, 1004, 1006, 1008, 1009, 1018, 1021, 1056], "dens": [51, 90, 187, 196, 202, 205, 211, 328, 329, 338, 369, 391, 396, 414, 419, 421, 423, 449, 452, 453, 455, 470, 473, 503, 530, 531, 534, 541, 542, 551, 573, 614, 615, 636, 637, 659, 664, 665, 666, 673, 674, 675, 679, 680, 683, 684, 685, 694, 695, 696, 699, 700, 767, 768, 774, 786, 799, 868, 869, 876, 883, 884, 886, 888, 889, 890, 891, 900, 901, 902, 903, 904, 911, 912, 913, 914, 916, 917, 956, 978, 981, 998, 1001, 1004, 1005, 1008, 1009, 1011, 1014, 1018, 1020, 1021, 1022, 1023, 1024, 1029, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "dense_lasso": 203, "dense_output": [768, 774, 904, 956, 1047], "denser": 450, "densif": 1048, "densifi": [396, 665, 666, 673, 674, 675, 683, 684, 685, 911, 998, 1041], "densiti": [2, 50, 84, 90, 95, 100, 109, 132, 170, 172, 177, 187, 203, 217, 232, 235, 241, 244, 248, 259, 260, 266, 275, 281, 292, 296, 301, 302, 315, 345, 356, 377, 379, 391, 396, 414, 421, 425, 433, 450, 452, 454, 456, 458, 470, 473, 505, 509, 543, 548, 556, 557, 804, 805, 807, 851, 852, 856, 857, 904, 1002, 1004, 1007, 1011, 1013, 1014, 1020, 1027, 1029, 1030, 1033, 1034, 1041, 1043, 1047, 1048, 1054, 1055], "density_": 904, "densityestim": 433, "densitymixin": 2, "denton": 1041, "deodhar": 1051, "deoli": 1052, "depart": [182, 414], "depedend": 1056, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 88, 109, 127, 143, 147, 150, 151, 153, 155, 158, 167, 171, 180, 185, 187, 188, 190, 193, 195, 198, 202, 235, 238, 243, 244, 250, 254, 265, 269, 275, 276, 280, 281, 282, 289, 295, 311, 315, 320, 326, 329, 332, 342, 349, 352, 357, 358, 365, 369, 370, 371, 375, 382, 384, 385, 390, 391, 394, 395, 396, 397, 399, 400, 407, 408, 410, 414, 416, 418, 419, 421, 422, 423, 424, 425, 444, 445, 446, 450, 452, 453, 455, 456, 458, 460, 463, 465, 466, 468, 470, 475, 490, 495, 496, 497, 500, 503, 507, 508, 509, 511, 512, 517, 541, 542, 548, 551, 558, 566, 567, 569, 595, 596, 597, 598, 609, 611, 614, 615, 618, 634, 639, 640, 645, 647, 655, 665, 666, 676, 678, 680, 683, 684, 685, 687, 694, 697, 698, 701, 702, 718, 736, 737, 745, 785, 788, 790, 791, 794, 799, 800, 804, 805, 826, 836, 853, 854, 855, 857, 859, 860, 861, 862, 863, 869, 870, 872, 884, 885, 888, 891, 905, 912, 913, 916, 920, 935, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1016, 1020, 1022, 1023, 1024, 1029, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1054, 1055, 1056], "dependabot": 1057, "dependen": 352, "depict": [137, 277, 421, 1007], "deploi": [269, 332, 369, 399, 408, 413, 1028, 1032], "deploy": [390, 408, 1027, 1028, 1032], "depot": 51, "deprec": [2, 16, 151, 193, 324, 327, 370, 384, 385, 386, 391, 396, 405, 448, 451, 453, 456, 463, 465, 488, 489, 490, 491, 534, 543, 545, 547, 560, 576, 577, 586, 587, 589, 634, 665, 666, 680, 682, 686, 699, 716, 749, 785, 786, 787, 789, 807, 810, 811, 821, 835, 836, 838, 858, 870, 871, 876, 908, 913, 916, 933, 935, 937, 938, 949, 950, 997, 998, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "deprecated_api_refer": 382, "deprecationwarn": 1049, "dept": 379, "depth": [43, 142, 147, 151, 154, 159, 292, 360, 362, 363, 364, 369, 380, 382, 386, 395, 421, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 851, 852, 856, 919, 920, 921, 922, 923, 925, 961, 1013, 1014, 1024, 1041, 1042, 1050], "der": [699, 703, 1005, 1042, 1043, 1047], "derek": 1047, "deriv": [43, 57, 132, 133, 149, 179, 182, 192, 204, 206, 210, 218, 370, 377, 384, 416, 418, 420, 421, 422, 424, 426, 447, 451, 452, 471, 498, 540, 613, 624, 629, 655, 676, 683, 687, 868, 869, 884, 890, 911, 912, 1002, 1004, 1005, 1008, 1012, 1014, 1023, 1039, 1040, 1041, 1046, 1047, 1048, 1054], "deros": 1050, "derouich": 1039, "derweh": 1057, "desai": [1046, 1048, 1051, 1052, 1054, 1055], "desalvo": 997, "descamp": 1047, "descend": [146, 634, 1049], "descent": [2, 46, 53, 148, 187, 196, 204, 205, 244, 249, 301, 327, 344, 419, 421, 477, 478, 484, 494, 503, 510, 538, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 638, 646, 653, 654, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 675, 679, 681, 683, 684, 685, 688, 689, 690, 691, 694, 701, 837, 868, 869, 872, 911, 915, 981, 1005, 1012, 1014, 1023, 1029, 1030, 1034, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1052, 1053, 1054], "descr": [172, 375, 376, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 514, 517, 1047], "describ": [2, 43, 52, 91, 158, 172, 190, 235, 249, 275, 284, 365, 369, 370, 375, 377, 379, 381, 382, 384, 387, 390, 396, 397, 411, 414, 416, 417, 418, 419, 421, 422, 468, 475, 479, 480, 497, 500, 502, 503, 504, 507, 508, 509, 510, 511, 512, 517, 523, 524, 525, 535, 614, 615, 652, 666, 675, 721, 804, 805, 846, 848, 884, 886, 955, 997, 1000, 1003, 1004, 1007, 1008, 1010, 1014, 1022, 1023, 1024, 1031, 1047, 1049], "descript": [2, 52, 172, 190, 321, 375, 376, 381, 382, 386, 387, 390, 396, 414, 422, 458, 468, 470, 473, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 514, 517, 551, 637, 683, 769, 772, 785, 1008, 1022, 1023, 1028, 1031, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "descriptor": [396, 515, 516], "deseri": 408, "deserv": [382, 388], "deshmukh": 1052, "deshpand": [1044, 1045], "design": [0, 2, 53, 58, 113, 137, 158, 177, 189, 190, 199, 251, 265, 269, 315, 321, 364, 371, 376, 382, 387, 394, 395, 396, 397, 399, 400, 402, 407, 408, 414, 421, 423, 522, 535, 639, 640, 655, 672, 676, 683, 687, 692, 807, 825, 826, 846, 848, 998, 1004, 1005, 1008, 1009, 1018, 1027, 1028, 1032, 1041, 1048, 1057], "desir": [50, 61, 139, 172, 186, 217, 219, 315, 319, 332, 375, 382, 390, 402, 408, 411, 414, 417, 418, 419, 423, 510, 545, 547, 551, 554, 574, 600, 609, 610, 671, 677, 692, 693, 706, 715, 743, 851, 852, 856, 871, 876, 878, 881, 882, 884, 885, 887, 888, 892, 895, 897, 899, 900, 941, 976, 1000, 1002, 1005, 1011, 1018, 1022, 1023, 1024, 1039, 1047, 1048, 1049, 1052], "desislava": 1053, "desktop": 380, "despit": [64, 118, 180, 215, 217, 235, 250, 304, 396, 405, 416, 634, 635, 637, 1004, 1011, 1032, 1047, 1048], "dessyvv": 1053, "dest": 329, "destin": 1032, "destroi": [281, 422, 802, 880, 1018], "det": [2, 187, 257, 267, 284, 285, 382, 416, 522, 571, 705, 709, 734, 796, 837, 872, 891, 911, 953, 1029, 1051], "det_curv": [2, 272, 705, 789, 796, 1008, 1051, 1052, 1057], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 92, 137, 138, 140, 144, 146, 151, 158, 187, 191, 204, 206, 221, 242, 246, 249, 250, 254, 256, 258, 266, 269, 273, 282, 289, 298, 301, 302, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 360, 362, 363, 365, 369, 370, 371, 374, 375, 376, 377, 380, 382, 384, 386, 387, 388, 390, 394, 395, 396, 397, 400, 408, 410, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 438, 439, 443, 449, 450, 452, 453, 454, 456, 457, 458, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 478, 503, 511, 531, 538, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 600, 601, 604, 609, 614, 615, 617, 621, 626, 629, 634, 635, 637, 638, 639, 641, 646, 647, 652, 653, 654, 658, 660, 662, 663, 664, 665, 666, 668, 670, 672, 673, 675, 678, 679, 680, 681, 682, 683, 685, 686, 694, 695, 696, 697, 698, 699, 700, 701, 702, 708, 718, 720, 781, 785, 786, 787, 788, 805, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 849, 853, 854, 856, 857, 858, 859, 861, 862, 864, 865, 867, 870, 871, 873, 875, 876, 888, 892, 900, 906, 907, 908, 909, 913, 916, 919, 920, 921, 922, 949, 973, 997, 998, 1002, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1021, 1024, 1030, 1031, 1032, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "detcurvedisplai": [2, 272, 327, 734, 1051, 1052, 1056, 1057], "detect": [2, 14, 42, 47, 49, 58, 70, 98, 100, 113, 114, 115, 144, 147, 154, 187, 199, 221, 231, 243, 257, 267, 269, 275, 278, 284, 285, 296, 315, 321, 332, 344, 377, 380, 382, 386, 394, 396, 412, 413, 414, 416, 418, 422, 436, 452, 455, 470, 472, 475, 476, 479, 480, 481, 482, 494, 495, 497, 499, 503, 517, 519, 522, 529, 544, 545, 546, 553, 570, 571, 595, 598, 603, 638, 646, 684, 705, 709, 734, 796, 837, 857, 861, 872, 881, 884, 885, 889, 890, 891, 911, 915, 1000, 1004, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1039, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1054, 1055, 1058], "detection_error_tradeoff": 1008, "detector": [377, 396, 857], "determin": [2, 48, 50, 53, 57, 81, 90, 113, 137, 139, 143, 153, 170, 179, 190, 197, 198, 213, 220, 275, 288, 315, 320, 349, 358, 364, 365, 381, 382, 384, 391, 395, 396, 411, 412, 414, 418, 419, 421, 422, 423, 424, 437, 443, 447, 448, 449, 451, 453, 455, 456, 462, 465, 466, 467, 471, 475, 476, 478, 479, 480, 481, 482, 488, 489, 490, 494, 497, 499, 502, 504, 510, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 544, 546, 549, 550, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 572, 574, 575, 577, 589, 590, 591, 595, 598, 601, 609, 614, 615, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 642, 643, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 694, 696, 697, 699, 700, 701, 714, 718, 730, 736, 737, 745, 790, 791, 792, 794, 795, 800, 807, 809, 810, 811, 813, 821, 829, 830, 831, 832, 833, 834, 835, 836, 838, 842, 844, 845, 847, 854, 856, 857, 862, 867, 868, 869, 875, 876, 884, 885, 886, 888, 892, 900, 911, 912, 914, 917, 920, 922, 925, 953, 970, 976, 978, 981, 997, 1000, 1002, 1007, 1011, 1013, 1014, 1016, 1018, 1021, 1022, 1024, 1039, 1044, 1047, 1048, 1050, 1051, 1052, 1058], "determinist": [93, 150, 370, 378, 396, 414, 449, 453, 455, 457, 458, 459, 464, 465, 468, 558, 566, 567, 571, 572, 590, 591, 698, 702, 818, 819, 867, 919, 920, 930, 1000, 1004, 1040, 1043, 1045, 1047, 1048, 1051, 1054, 1055], "detlefsen": 1053, "detomaso": 1046, "detriment": [46, 171, 289, 370, 423, 1004], "dev": [183, 190, 235, 280, 285, 380, 382, 386, 388, 390, 949, 950, 1008, 1032, 1035, 1046, 1051, 1054, 1055], "dev0": [380, 386, 1031, 1035], "dev514": 1053, "devansh": [1046, 1047], "devanshkyada27": 1056, "devashish": 1045, "devel": 380, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 330, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 369, 377, 381, 382, 386, 388, 394, 396, 397, 399, 405, 408, 411, 416, 417, 421, 422, 428, 431, 438, 500, 807, 949, 950, 991, 1004, 1008, 1011, 1024, 1027, 1028, 1029, 1031, 1032, 1039, 1047, 1048, 1049, 1054, 1057, 1058], "developing_estim": 1029, "devi": 1051, "devianc": [2, 149, 152, 217, 235, 330, 421, 560, 565, 566, 568, 569, 572, 655, 676, 687, 728, 730, 731, 754, 756, 759, 920, 922, 1004, 1024, 1040, 1049, 1050, 1052, 1053, 1055], "deviant": [223, 1014], "deviat": [52, 58, 70, 96, 113, 140, 143, 144, 145, 146, 148, 172, 174, 179, 181, 183, 190, 197, 223, 254, 272, 273, 274, 275, 276, 278, 301, 302, 315, 320, 374, 378, 379, 387, 391, 396, 418, 421, 424, 456, 478, 508, 518, 519, 520, 521, 523, 524, 525, 529, 531, 532, 537, 559, 601, 618, 641, 651, 652, 678, 731, 759, 813, 830, 857, 880, 881, 891, 900, 901, 902, 1004, 1008, 1014, 1018, 1045, 1046, 1047, 1050, 1051, 1052], "devic": [418, 589, 1027, 1057], "devnani": 1051, "deweight": 957, "dexter": 1049, "dezub": 1046, "df": [43, 52, 62, 64, 153, 158, 189, 191, 197, 202, 217, 235, 265, 275, 319, 321, 331, 357, 387, 422, 472, 597, 598, 997, 998, 1056], "df_": 235, "df_freq": 235, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 331, "df_sev": 235, "df_std": 357, "df_test": [217, 235], "df_train": [217, 235], "dfrac": [1012, 1018], "dgemm": 369, "dgesdd": 388, "dhanshre": 1054, "dhillon": [2, 57, 411, 457, 459, 518], "dhingra": [1047, 1048, 1051, 1056], "di": [396, 414, 419, 538, 544, 671, 692, 693, 904, 1043, 1052], "dia": 1056, "diabet": [2, 46, 151, 161, 162, 172, 186, 187, 204, 206, 213, 214, 271, 375, 421, 508, 659, 660, 807, 812, 832, 833, 834, 1016, 1029, 1034], "diabetes_i": 213, "diabetes_x": 213, "diabetes_x_test": 213, "diabetes_x_train": 213, "diabetes_y_pr": 213, "diabetes_y_test": 213, "diabetes_y_train": 213, "diadochokinet": 1054, "diag": [51, 115, 182, 262, 265, 419, 424, 539, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 804, 805, 1004, 1054], "diag_kind": [189, 190], "diagnos": [172, 278, 379, 390, 399, 415], "diagnosi": [172, 278, 379, 858], "diagnost": [172, 193, 278, 375, 396, 413, 507, 719, 833, 834, 1008, 1016, 1027, 1028, 1034], "diagon": [2, 43, 62, 64, 75, 115, 117, 235, 254, 262, 265, 266, 268, 345, 411, 414, 416, 424, 459, 477, 478, 484, 487, 518, 520, 534, 539, 557, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 657, 658, 661, 662, 663, 689, 690, 708, 722, 799, 804, 805, 855, 863, 1000, 1002, 1004, 1007, 1008, 1011, 1018, 1045, 1047, 1048, 1049], "diagram": [2, 62, 64, 105, 256, 325, 331, 384, 412, 414, 444, 445, 474, 909, 1018, 1050, 1051, 1056, 1057], "diamet": 414, "diamond": 263, "diaz": 1047, "dice": [456, 463, 706, 785, 786, 787, 1011], "dicedist": 706, "dichotomis": 1024, "dickerson": 1040, "dickson": 1046, "dico": 126, "dict": [48, 49, 50, 51, 55, 63, 74, 80, 104, 107, 108, 129, 143, 148, 150, 152, 215, 223, 244, 253, 262, 273, 274, 276, 279, 282, 284, 295, 299, 317, 321, 328, 338, 345, 349, 357, 358, 371, 374, 376, 384, 394, 396, 415, 418, 425, 426, 428, 432, 436, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 503, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 718, 720, 769, 772, 778, 786, 787, 804, 805, 806, 807, 810, 811, 813, 818, 819, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 928, 930, 942, 943, 961, 964, 967, 996, 997, 1008, 1018, 1034, 1039, 1045, 1046, 1055, 1056, 1057], "dict_count_vector": 358, "dict_init": [538, 544, 552, 553], "dict_kei": 633, "dict_learn": [2, 391, 538, 544, 553, 1040, 1047, 1049, 1052, 1053, 1055], "dict_learning_onlin": [2, 552, 1040, 1049, 1052, 1053, 1056], "dict_pos_code_estim": 123, "dict_pos_dict_estim": 123, "dict_pos_estim": 123, "dict_typ": 588, "dictat": 414, "dictionari": [2, 44, 46, 47, 71, 83, 86, 88, 122, 124, 153, 155, 187, 216, 251, 253, 269, 357, 358, 375, 376, 377, 384, 394, 396, 414, 422, 455, 470, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 517, 533, 538, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 574, 575, 576, 577, 588, 589, 591, 594, 595, 596, 601, 639, 640, 641, 671, 692, 693, 708, 718, 720, 807, 810, 811, 818, 819, 821, 829, 834, 870, 875, 884, 919, 920, 921, 922, 926, 928, 930, 942, 964, 967, 997, 1004, 1008, 1023, 1029, 1033, 1034, 1039, 1047, 1050, 1051, 1052, 1053, 1054], "dictionarylearn": [2, 419, 544, 546, 547, 549, 550, 551, 552, 553, 1040, 1044, 1046, 1049, 1052, 1053, 1054, 1055], "dictlearn": 1044, "dictvector": [2, 57, 104, 187, 355, 356, 357, 377, 422, 494, 589, 595, 596, 597, 598, 884, 1029, 1039, 1040, 1043, 1049, 1051, 1052, 1055, 1056], "did": [150, 174, 190, 193, 217, 225, 235, 261, 269, 322, 377, 408, 634, 719, 826, 913, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "didact": [382, 1028], "didi": [1045, 1046, 1047, 1048], "didn": [251, 365, 396, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "die": 1005, "diebold": 275, "diederik": [868, 869, 1012, 1054], "diederikwp": 1054, "diego": [1040, 1041], "diegodlh": [1046, 1047], "diemert": [1032, 1041, 1042], "diesel": [217, 235], "dietterich": [275, 841, 1009], "diff": [385, 1008], "diff_embed": 305, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 55, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 84, 87, 88, 90, 92, 93, 95, 99, 100, 101, 102, 104, 105, 106, 108, 113, 117, 118, 120, 121, 123, 125, 126, 128, 130, 131, 132, 137, 140, 142, 143, 146, 147, 148, 150, 152, 153, 154, 158, 159, 160, 161, 163, 165, 167, 172, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 189, 190, 192, 195, 197, 198, 201, 203, 204, 205, 206, 208, 214, 217, 218, 219, 221, 222, 223, 224, 225, 234, 235, 237, 238, 239, 240, 242, 244, 246, 249, 250, 251, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 288, 289, 290, 292, 294, 295, 298, 301, 302, 304, 310, 311, 314, 316, 317, 319, 320, 324, 332, 339, 340, 341, 343, 344, 345, 347, 348, 352, 353, 356, 357, 358, 365, 369, 370, 371, 376, 377, 379, 380, 381, 382, 385, 386, 387, 389, 390, 391, 395, 396, 400, 402, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 439, 443, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 468, 470, 481, 484, 496, 500, 501, 503, 510, 511, 515, 516, 519, 521, 529, 544, 545, 546, 547, 553, 554, 556, 557, 562, 563, 570, 588, 589, 595, 596, 597, 598, 601, 618, 620, 621, 622, 626, 629, 630, 634, 638, 639, 640, 641, 645, 650, 651, 652, 654, 656, 658, 660, 662, 665, 668, 673, 674, 679, 681, 683, 684, 685, 687, 697, 699, 701, 705, 707, 708, 711, 712, 713, 714, 716, 722, 724, 725, 734, 735, 736, 737, 738, 741, 742, 744, 750, 764, 765, 766, 768, 785, 789, 790, 791, 793, 794, 796, 799, 800, 802, 805, 807, 809, 810, 811, 812, 813, 816, 821, 822, 823, 825, 826, 827, 829, 830, 832, 834, 835, 838, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 861, 864, 867, 871, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 896, 897, 898, 899, 900, 901, 902, 911, 912, 913, 916, 919, 920, 921, 922, 964, 971, 997, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "difference_plot": 280, "differenti": [120, 282, 421, 424, 566, 567, 626, 629], "difficult": [90, 137, 190, 225, 254, 382, 390, 412, 419, 421, 560, 561, 566, 568, 569, 1003, 1005, 1007, 1011, 1013, 1015, 1024, 1032, 1039, 1053], "difficulti": [48, 64, 235, 315, 371, 382, 412, 868, 869, 1007, 1011], "diffus": 179, "digest": [382, 1054, 1058], "digg": [1032, 1046], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 83, 86, 88, 94, 96, 97, 106, 107, 117, 126, 142, 162, 170, 172, 187, 207, 208, 224, 233, 236, 237, 239, 241, 248, 249, 263, 268, 273, 274, 277, 299, 304, 305, 309, 311, 312, 330, 333, 336, 357, 375, 382, 388, 414, 420, 421, 423, 447, 451, 453, 509, 548, 551, 556, 573, 665, 695, 696, 697, 698, 699, 704, 711, 712, 720, 724, 725, 744, 800, 802, 837, 853, 860, 867, 871, 872, 881, 891, 897, 904, 907, 916, 923, 924, 925, 1005, 1008, 1011, 1013, 1021, 1029, 1034, 1043], "digraph": 923, "dijkstra": [391, 695, 1005], "dilemma": 1003, "dillon": [1047, 1048, 1049], "dilut": [193, 379], "dilutedsauc": 1047, "dim": [226, 248, 303, 304, 306, 341, 342, 534, 706, 1056], "dim_reduction_method": 304, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 88, 115, 117, 120, 123, 172, 176, 178, 180, 182, 191, 201, 202, 215, 239, 241, 244, 248, 249, 255, 261, 262, 299, 300, 304, 318, 349, 356, 357, 358, 377, 379, 383, 396, 414, 419, 420, 424, 426, 448, 449, 451, 453, 454, 455, 458, 470, 471, 488, 489, 490, 500, 501, 522, 531, 532, 536, 537, 540, 548, 556, 589, 590, 591, 592, 594, 596, 604, 618, 626, 629, 648, 651, 666, 697, 698, 699, 701, 702, 706, 771, 832, 851, 852, 856, 870, 903, 904, 905, 913, 914, 915, 916, 917, 937, 938, 939, 970, 978, 981, 998, 1000, 1002, 1004, 1005, 1006, 1009, 1011, 1012, 1014, 1020, 1023, 1027, 1046, 1048, 1049, 1051], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 89, 90, 92, 93, 97, 103, 105, 107, 108, 117, 118, 121, 123, 130, 131, 137, 142, 156, 172, 174, 176, 177, 181, 187, 202, 213, 218, 234, 236, 238, 239, 241, 244, 248, 249, 252, 261, 262, 296, 299, 303, 305, 317, 342, 349, 356, 365, 369, 374, 377, 378, 379, 382, 391, 396, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 451, 453, 455, 471, 475, 479, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 504, 507, 508, 509, 511, 512, 517, 522, 526, 539, 541, 542, 545, 546, 547, 548, 551, 554, 556, 570, 573, 580, 606, 614, 638, 647, 648, 649, 659, 695, 696, 697, 698, 699, 700, 701, 703, 706, 717, 732, 804, 805, 807, 837, 851, 852, 853, 856, 859, 860, 867, 871, 872, 875, 881, 886, 891, 903, 904, 905, 911, 915, 955, 993, 999, 1000, 1003, 1004, 1009, 1010, 1014, 1020, 1021, 1022, 1023, 1024, 1029, 1030, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1051, 1054, 1055], "dimensionalityreduct": 379, "dimensionalityreductiondimension": 402, "diminish": 422, "dimitri": [1052, 1053, 1054, 1055, 1056], "dimmick": 379, "dinga92": 1057, "dingwal": 1046, "dionisi": 1053, "diop": 1049, "dipan": 1057, "direct": [51, 117, 118, 123, 125, 131, 172, 223, 260, 266, 272, 304, 313, 320, 345, 350, 380, 382, 383, 386, 390, 397, 400, 414, 417, 419, 422, 423, 458, 468, 477, 478, 484, 541, 548, 556, 595, 596, 598, 609, 648, 695, 860, 1002, 1003, 1004, 1009, 1011, 1013, 1028, 1039, 1042], "direction": 1057, "direction_vector": 313, "directli": [0, 45, 57, 64, 80, 81, 91, 105, 142, 147, 172, 182, 202, 204, 217, 223, 235, 245, 280, 313, 315, 328, 331, 332, 358, 365, 369, 380, 382, 383, 384, 386, 388, 395, 396, 397, 410, 411, 412, 414, 415, 416, 417, 418, 422, 424, 448, 458, 468, 470, 471, 475, 480, 534, 574, 575, 576, 577, 600, 604, 618, 627, 639, 650, 653, 654, 659, 660, 667, 668, 669, 670, 671, 684, 688, 691, 697, 781, 785, 788, 799, 800, 806, 807, 810, 811, 821, 835, 836, 838, 854, 856, 870, 871, 872, 878, 888, 890, 893, 900, 997, 1004, 1006, 1011, 1013, 1015, 1018, 1023, 1024, 1028, 1039, 1047, 1048, 1050, 1051, 1052, 1055, 1056, 1058], "director": 1032, "directori": [0, 2, 47, 297, 376, 380, 382, 384, 386, 388, 390, 396, 400, 415, 447, 451, 456, 492, 498, 506, 871, 872, 1053], "direr": [1042, 1043, 1046, 1047], "dirichlet": [2, 42, 45, 187, 260, 261, 266, 270, 422, 494, 543, 545, 547, 595, 598, 804, 1027, 1029, 1033, 1034, 1039, 1044, 1045], "dirichlet_distribut": [260, 804, 1007, 1045], "dirichlet_process": [260, 266, 804, 1007, 1045], "disabl": [141, 251, 269, 322, 331, 356, 380, 382, 405, 422, 455, 466, 474, 544, 545, 546, 553, 566, 567, 568, 569, 870, 888, 900, 909, 937, 938, 1018, 1045, 1048, 1052, 1054, 1057], "disadvantag": [419, 424, 1004, 1005, 1012, 1022, 1023, 1024], "disagre": [742, 1015], "disambigu": [382, 839, 908, 1021, 1054], "disappear": [1004, 1039], "disappoint": 43, "discard": [47, 90, 199, 278, 369, 411, 416, 423, 515, 516, 556, 604, 634, 637, 651, 884, 888, 900, 998, 1004, 1047, 1051, 1057], "disclaim": 1027, "disclos": 395, "disconnect": 1052, "discontinu": [43, 394], "discord": [712, 1031], "discount": [2, 377, 414, 733, 763, 1046, 1049], "discounted_cumulative_gain": 733, "discourag": [221, 394, 400, 696], "discov": [357, 414, 419, 422, 425, 450, 454, 1054, 1057], "discoveri": [2, 275, 377, 388, 391, 414, 421, 423, 425, 450, 518, 562, 563, 570, 599, 602, 603, 605, 606, 607, 613, 727, 747, 790, 946, 947, 948, 1008, 1020, 1032, 1053, 1054], "discrep": [422, 1043], "discret": [2, 43, 47, 67, 81, 91, 121, 132, 135, 137, 156, 173, 187, 191, 198, 217, 235, 251, 255, 292, 310, 314, 318, 371, 374, 377, 378, 382, 386, 395, 396, 414, 419, 422, 424, 444, 445, 454, 458, 466, 467, 468, 499, 521, 522, 529, 560, 566, 595, 596, 599, 602, 603, 606, 607, 614, 615, 617, 618, 619, 623, 624, 625, 664, 665, 807, 818, 829, 837, 846, 847, 850, 872, 876, 884, 885, 888, 891, 900, 911, 916, 920, 970, 997, 1004, 1005, 1006, 1008, 1009, 1011, 1024, 1027, 1029, 1034, 1041, 1044, 1052, 1053, 1054], "discrete_featur": [614, 615], "discrim": 217, "discrimin": [2, 12, 48, 49, 65, 111, 112, 113, 114, 115, 131, 167, 169, 172, 187, 195, 232, 238, 252, 265, 304, 379, 412, 421, 481, 519, 556, 557, 573, 638, 790, 860, 997, 1005, 1008, 1011, 1022, 1024, 1029, 1030, 1034, 1042], "discriminant_analysi": [2, 67, 69, 70, 131, 238, 304, 365, 410, 543, 556, 557, 860, 1002, 1009, 1039, 1042, 1043, 1044, 1045, 1046], "discriminatori": 412, "discuss": [43, 88, 93, 172, 190, 206, 237, 242, 269, 278, 292, 356, 365, 371, 377, 379, 382, 387, 388, 390, 394, 396, 397, 413, 414, 416, 420, 421, 424, 505, 689, 690, 853, 854, 859, 861, 862, 998, 1002, 1004, 1005, 1008, 1011, 1018, 1025, 1028, 1031, 1042], "diseas": [46, 161, 172, 186, 278, 379, 719, 1008], "disentangl": 1005, "disjoint": [412, 414, 415, 443, 711, 738, 762, 764, 1005], "disk": [45, 53, 377, 382, 387, 396, 408], "disp": [43, 66, 68, 139, 153, 154, 155, 268, 278, 288, 298, 320, 325, 331, 342, 347, 444, 638, 704, 707, 708, 860], "disp1": 639, "disp2": 639, "dispar": [697, 701, 1005], "dispatch": [105, 269, 396, 410, 474, 807, 821, 832, 833, 834, 909, 973, 974, 1034, 1054, 1057], "dispatch_next": 973, "dispatch_one_batch": 973, "dispers": [70, 289, 414, 717, 732, 1004], "displai": [2, 51, 62, 64, 70, 72, 81, 83, 95, 105, 114, 115, 117, 118, 123, 143, 154, 155, 158, 185, 187, 190, 191, 205, 235, 243, 244, 254, 258, 264, 272, 276, 277, 282, 284, 285, 288, 290, 305, 321, 325, 326, 344, 361, 369, 382, 384, 385, 389, 391, 400, 402, 415, 419, 422, 423, 428, 444, 470, 473, 474, 503, 548, 571, 637, 638, 639, 665, 694, 704, 705, 707, 708, 709, 720, 725, 789, 796, 807, 813, 821, 830, 837, 871, 872, 884, 886, 891, 909, 916, 923, 924, 925, 946, 973, 994, 1008, 1012, 1027, 1029, 1034, 1048, 1050, 1051, 1053, 1054], "display_label": [45, 268, 704, 1051], "dispos": 997, "disproportion": 420, "disput": 143, "disregard": [356, 396, 422, 437, 471, 488, 489, 490, 559, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 728, 729, 730, 731, 792, 844, 845, 854, 862, 869, 880, 881, 887, 888, 891, 896, 899, 900, 902, 912, 914, 917, 920, 922, 1008, 1047], "disrupt": [370, 380], "dissemin": 1027, "dissimilar": [240, 349, 396, 411, 458, 697, 701, 1005, 1045, 1055], "dissimilarity_matrix_": 697, "dist": [113, 238, 248, 386, 475, 476, 477, 478, 479, 480, 481, 482, 706, 770, 776, 851, 852], "dist_": [475, 480], "dist_embed": 305, "dist_linkag": 193, "dist_matrix": 458, "dist_matrix_": 695, "distanc": [2, 37, 74, 75, 90, 92, 95, 96, 100, 102, 110, 114, 128, 172, 185, 187, 193, 203, 218, 220, 237, 239, 242, 248, 254, 295, 297, 298, 303, 305, 307, 308, 315, 320, 324, 328, 329, 349, 356, 357, 369, 379, 391, 394, 396, 411, 414, 416, 419, 420, 424, 425, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 461, 462, 463, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 545, 547, 554, 614, 615, 622, 626, 627, 629, 630, 635, 665, 666, 673, 675, 681, 682, 683, 684, 685, 695, 696, 697, 699, 700, 701, 702, 703, 706, 710, 732, 741, 765, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 785, 786, 787, 788, 799, 800, 803, 807, 821, 840, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 890, 905, 909, 911, 913, 915, 916, 917, 919, 920, 921, 922, 998, 1002, 1005, 1006, 1008, 1011, 1014, 1018, 1020, 1022, 1023, 1028, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "distance_matrix": 193, "distance_metr": [2, 785, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865], "distance_threshold": [76, 447, 451, 1048, 1051], "distancemetr": [2, 396, 420, 854, 1011, 1047, 1051, 1052, 1053, 1056], "distancemetric64": [851, 852], "distances_": [76, 447, 451, 1051], "distant": [414, 699, 716, 1011], "distil": 242, "distinct": [95, 275, 336, 356, 358, 377, 384, 387, 396, 397, 418, 421, 422, 596, 808, 817, 825, 885, 886, 906, 907, 997, 1004, 1011, 1014, 1047], "distinguish": [43, 58, 75, 113, 121, 128, 219, 272, 292, 377, 384, 396, 397, 424, 997, 1008, 1011, 1014], "distort": [37, 216, 248, 379, 412, 888, 900, 905, 1005, 1018, 1020], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 87, 88, 90, 92, 97, 109, 112, 113, 114, 118, 121, 137, 139, 150, 154, 167, 172, 174, 183, 187, 189, 190, 193, 195, 197, 217, 219, 221, 239, 241, 244, 248, 254, 260, 265, 266, 269, 271, 275, 281, 283, 289, 292, 296, 300, 314, 315, 317, 320, 330, 334, 335, 350, 352, 356, 369, 370, 375, 378, 379, 380, 382, 383, 387, 396, 412, 414, 416, 418, 419, 420, 426, 453, 455, 475, 476, 477, 478, 479, 480, 481, 482, 494, 505, 510, 522, 523, 524, 525, 526, 530, 539, 540, 543, 557, 558, 559, 570, 618, 632, 647, 649, 651, 652, 655, 665, 666, 676, 686, 687, 695, 696, 697, 699, 713, 715, 731, 759, 796, 804, 805, 811, 812, 819, 821, 825, 826, 837, 847, 850, 856, 860, 867, 874, 887, 888, 889, 890, 891, 899, 900, 901, 906, 907, 915, 926, 957, 997, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1013, 1014, 1020, 1021, 1027, 1028, 1029, 1033, 1034, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "district": [186, 377], "distutils_use_sdk": 380, "ditenberg": 1046, "div": [254, 951], "dive": [118, 382, 388, 997], "diverg": [54, 149, 237, 242, 300, 545, 547, 554, 699, 867, 1005, 1007, 1008, 1013, 1015, 1046, 1047, 1052], "divers": [0, 396, 421], "divid": [72, 78, 83, 123, 169, 179, 217, 254, 260, 357, 365, 378, 379, 411, 413, 414, 418, 419, 421, 475, 476, 477, 478, 479, 480, 481, 482, 519, 526, 541, 548, 683, 684, 685, 726, 733, 741, 745, 753, 763, 801, 803, 868, 869, 913, 916, 955, 958, 959, 997, 1005, 1007, 1008, 1011, 1018, 1022, 1024, 1039, 1046, 1047, 1050], "dividend": 1008, "divis": [328, 414, 422, 597, 598, 601, 719, 720, 723, 736, 737, 745, 753, 790, 791, 794, 1008, 1043, 1047, 1048, 1051, 1055, 1056, 1058], "divisor": 1008, "divo": 1049, "divyanshu": 1052, "divyaprabha": 1050, "diwakar": 1053, "dixon": [776, 1049, 1050], "dizietasahi": 1049, "di\u1ec5n": 1054, "djipei": [1044, 1045], "dl": 683, "dlabal": 1043, "dll": 1053, "dlovel": 1047, "dmallia17": 1052, "dmitri": [1044, 1046, 1047, 1048, 1052, 1055, 1056], "dmitrij": 1043, "dmytro": 1052, "dn": [0, 1011], "dna": [394, 635, 998], "dnf": 400, "do": [0, 30, 43, 49, 52, 62, 64, 77, 90, 96, 102, 108, 120, 127, 129, 132, 141, 144, 146, 150, 151, 153, 158, 169, 179, 185, 190, 191, 192, 214, 217, 221, 235, 237, 239, 251, 252, 254, 266, 269, 270, 273, 276, 278, 288, 294, 295, 297, 301, 327, 331, 339, 342, 345, 349, 350, 352, 356, 357, 358, 364, 365, 369, 370, 371, 377, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 396, 397, 408, 410, 412, 414, 415, 416, 417, 418, 421, 422, 423, 433, 456, 467, 470, 473, 510, 543, 545, 549, 551, 559, 562, 588, 589, 595, 596, 598, 609, 639, 640, 652, 653, 659, 662, 663, 665, 666, 673, 675, 683, 744, 770, 785, 789, 809, 824, 827, 843, 844, 848, 875, 876, 878, 885, 889, 891, 896, 897, 899, 900, 901, 902, 919, 920, 921, 922, 936, 981, 997, 1000, 1002, 1004, 1005, 1008, 1009, 1011, 1012, 1016, 1018, 1023, 1024, 1027, 1028, 1031, 1032, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "do_early_stopping_": [568, 569], "doc": [0, 43, 47, 52, 57, 356, 358, 370, 382, 386, 387, 390, 396, 400, 407, 422, 595, 596, 598, 785, 788, 799, 800, 834, 1039, 1043, 1053], "doc_environ": 390, "doc_it": 47, "doc_linux": 390, "doc_topic_distr": [543, 1046], "doc_topic_prior": [419, 543], "doc_topic_prior_": 543, "dock": 1058, "docker": [390, 408, 1052, 1053], "dock\u00e8": [1048, 1049, 1050, 1056, 1057], "docstr": [382, 384, 388, 396, 454, 467, 478, 706, 708, 945, 997, 1011, 1012, 1022, 1039, 1046, 1047, 1052, 1053, 1056], "doctest": [382, 396, 1039], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 91, 92, 93, 95, 96, 104, 105, 106, 121, 123, 135, 142, 144, 145, 154, 155, 158, 161, 169, 179, 182, 190, 191, 192, 199, 232, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 312, 313, 321, 325, 328, 329, 331, 336, 338, 352, 358, 364, 369, 370, 371, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 390, 394, 396, 397, 400, 402, 405, 408, 411, 414, 419, 422, 425, 450, 453, 454, 455, 456, 459, 463, 470, 494, 495, 506, 508, 518, 528, 530, 543, 551, 571, 595, 596, 597, 598, 611, 638, 646, 650, 665, 673, 675, 681, 683, 703, 704, 706, 710, 712, 724, 744, 765, 766, 776, 785, 786, 787, 800, 802, 807, 810, 811, 813, 821, 830, 841, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 872, 883, 911, 916, 933, 936, 938, 952, 973, 997, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1016, 1022, 1025, 1029, 1032, 1040, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "document_clust": 1045, "document_nam": 57, "doddington": 1008, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 81, 88, 90, 92, 104, 106, 107, 118, 133, 137, 142, 143, 146, 147, 148, 152, 153, 158, 172, 180, 190, 191, 202, 214, 217, 223, 235, 237, 238, 239, 242, 244, 247, 248, 249, 251, 252, 254, 262, 263, 269, 270, 275, 277, 278, 282, 284, 285, 294, 295, 308, 315, 317, 319, 321, 322, 327, 328, 337, 338, 343, 345, 352, 354, 356, 357, 358, 369, 370, 376, 380, 382, 383, 384, 386, 390, 395, 396, 402, 405, 408, 410, 412, 414, 415, 418, 419, 421, 422, 423, 424, 439, 446, 448, 452, 453, 455, 456, 460, 462, 473, 479, 485, 493, 506, 510, 515, 534, 542, 544, 545, 546, 551, 553, 556, 557, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 588, 589, 590, 595, 596, 598, 600, 601, 604, 609, 613, 617, 639, 645, 656, 657, 658, 661, 662, 663, 666, 678, 689, 690, 705, 707, 709, 714, 735, 736, 737, 741, 743, 745, 750, 785, 790, 791, 794, 795, 801, 807, 810, 811, 821, 868, 872, 873, 874, 876, 878, 880, 883, 884, 885, 888, 891, 892, 900, 903, 904, 908, 911, 912, 919, 920, 921, 922, 926, 937, 941, 955, 958, 959, 960, 973, 991, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058], "doepk": 1046, "doesn": [47, 190, 217, 251, 261, 294, 312, 345, 390, 396, 400, 408, 414, 422, 423, 427, 439, 481, 639, 640, 673, 675, 683, 723, 835, 838, 843, 853, 854, 868, 880, 881, 1007, 1008, 1024, 1043, 1056], "dog": [327, 328, 330, 331, 332, 589, 790, 892, 1018], "dohmatob": [1044, 1045, 1046], "dohri": [1056, 1057], "doi": [195, 217, 235, 382, 414, 683], "dok": [560, 561, 878, 1052], "dokato": 1046, "dolan": 377, "dollar": [190, 377], "dolmatov": 1049, "dolphin": 356, "domain": [153, 217, 289, 321, 396, 399, 418, 642, 728, 730, 731, 808, 809, 814, 815, 816, 1004, 1028, 1058], "domin": [143, 186, 193, 217, 222, 254, 284, 320, 377, 388, 412, 891, 1010, 1018, 1024, 1055], "domingo": [64, 795, 1008], "dominik": [1046, 1055], "don": [51, 64, 89, 104, 153, 190, 238, 251, 252, 269, 275, 288, 295, 337, 342, 346, 356, 357, 369, 376, 382, 384, 386, 388, 390, 395, 400, 405, 413, 415, 422, 434, 653, 659, 839, 919, 920, 921, 922, 930, 971, 997, 1004, 1007, 1009, 1012, 1014, 1022, 1043, 1048, 1055, 1056, 1057], "don86": 1046, "donald": [45, 377, 414, 732, 998], "donat": 245, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 87, 88, 126, 153, 169, 172, 179, 180, 190, 191, 195, 197, 202, 203, 221, 234, 250, 251, 265, 273, 276, 279, 284, 295, 318, 326, 356, 357, 358, 365, 370, 376, 380, 382, 384, 386, 389, 390, 391, 394, 396, 405, 414, 416, 418, 419, 421, 447, 448, 451, 456, 458, 478, 488, 489, 490, 491, 495, 542, 568, 569, 589, 613, 614, 615, 635, 637, 639, 641, 650, 651, 652, 666, 729, 748, 804, 805, 807, 821, 823, 826, 827, 829, 875, 889, 992, 997, 998, 1001, 1004, 1005, 1008, 1010, 1011, 1012, 1018, 1021, 1022, 1023, 1024, 1028, 1039, 1041, 1046, 1049, 1051, 1055], "dong": 1049, "donn": 1044, "donoho": [696, 700, 1005], "donor": [172, 379], "donovan": 1045, "dor": 1047, "dorin": [98, 454], "dormagen": 1049, "dot": [2, 55, 69, 79, 84, 89, 92, 97, 111, 112, 113, 115, 117, 118, 124, 125, 126, 130, 132, 137, 140, 174, 175, 181, 182, 190, 199, 202, 209, 211, 212, 249, 261, 262, 264, 265, 269, 279, 341, 343, 349, 369, 384, 388, 391, 396, 411, 419, 422, 540, 545, 547, 554, 597, 598, 621, 653, 654, 657, 659, 660, 661, 664, 667, 668, 669, 670, 688, 691, 694, 768, 770, 883, 923, 956, 1006, 1010, 1018, 1022, 1023, 1048], "dot_data": [923, 1024], "dot_product": 956, "dotproduct": [2, 177, 178, 183, 424, 618, 632], "dotson": 1044, "doubl": [70, 143, 287, 382, 396, 419, 545, 547, 548, 554, 851, 852, 862, 991, 998, 1023, 1024, 1039, 1049, 1050], "doubt": [382, 383, 386, 1004, 1014, 1027], "doucet": 1053, "douetteau": 1032, "doug": [1040, 1041, 1051], "dougal": [1041, 1043, 1044, 1046, 1047, 1048, 1049], "dougla": 1047, "douillard": 1046, "doumouro": 1048, "douriez": [1049, 1050], "dowl": 1045, "down": [81, 82, 114, 137, 232, 233, 239, 248, 249, 251, 278, 292, 313, 315, 349, 365, 376, 385, 390, 396, 416, 419, 449, 456, 462, 597, 600, 601, 646, 656, 781, 785, 788, 880, 881, 886, 889, 890, 901, 913, 916, 923, 1004, 1047], "downarrow": 1010, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 375, 377, 379, 380, 386, 387, 390, 402, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 517, 1024, 1034, 1043, 1044, 1047, 1051, 1052, 1053, 1058], "download_20newsgroup": 1043, "download_if_miss": [494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 1046], "download_url": 47, "downsampl": 126, "downsid": 358, "downstream": [43, 113, 322, 358, 422, 538, 541, 544, 548, 549, 613, 884, 1018, 1049], "downweight": [416, 543], "dowon": [1047, 1048], "dozen": [395, 424], "do\u0161ilovi\u0107": [1056, 1057], "dp": [261, 266], "dpgmm": [261, 266, 1039, 1043, 1045], "dpi": [228, 925, 1052], "dpy_debug": 388, "dqd": 388, "dr": [0, 172, 379, 414, 1053], "draft": [382, 397], "drag": 402, "dragon": 1018, "drama": 422, "dramat": 371, "dramsch": 1049, "drastic": [174, 248, 283, 414, 418, 1011, 1021], "draw": [43, 46, 95, 183, 190, 213, 255, 277, 282, 345, 389, 417, 419, 420, 421, 562, 563, 564, 565, 570, 571, 572, 573, 618, 641, 708, 813, 830, 923, 925, 1007, 1027, 1052, 1053], "drawback": [145, 234, 1000, 1003], "drawcoastlin": [50, 308], "drawcountri": [50, 308], "drawn": [46, 87, 113, 140, 171, 174, 183, 189, 255, 282, 299, 356, 370, 378, 414, 420, 421, 424, 426, 475, 476, 477, 478, 479, 480, 481, 482, 522, 530, 540, 562, 563, 564, 565, 570, 571, 572, 573, 618, 634, 639, 648, 847, 903, 904, 921, 922, 1004, 1018, 1020, 1042], "drawstyl": [360, 707], "draxu": 1039, "drew": [1048, 1057], "drewhogg": 1054, "drewmjohnston": 1048, "drgfreeman": 1049, "driessen": [416, 475, 480, 1014], "drift": 1028, "drivag": [217, 235], "drive": [371, 419, 420, 556, 1022, 1032], "driven": [0, 193, 1032], "driver": [217, 235, 1054], "drop": [43, 44, 52, 105, 109, 118, 153, 179, 189, 190, 191, 193, 217, 221, 235, 254, 258, 269, 285, 321, 326, 329, 331, 357, 386, 390, 415, 419, 421, 470, 473, 574, 575, 576, 577, 702, 707, 709, 789, 796, 870, 884, 890, 998, 1004, 1008, 1018, 1027, 1039, 1040, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "drop_binary_enc": 884, "drop_dupl": 287, "drop_enc": [884, 1018], "drop_first": 702, "drop_idx": 884, "drop_idx_": [884, 1050, 1054], "drop_intermedi": [707, 709, 789, 796, 1055], "drop_nul": [52, 179], "dropdown": [172, 382, 997], "dropped_result": 147, "dropper": 147, "dror": 1048, "dross": 541, "dro\u017cd\u017c": 1042, "drskd": 1053, "druck": 1053, "drucker": [138, 421, 561], "drug": 1004, "dry": 191, "dryden": 104, "ds_ana": 1052, "ds_cnt": [67, 317, 318], "dschult": 55, "dscullei": 455, "dseg": 104, "dsouza": [1050, 1051, 1052, 1053], "dsquareindia": 1045, "dss": 1032, "dt": [85, 126, 159, 179, 421, 422, 1024], "dtreeviz": 1027, "dtype": [43, 47, 49, 50, 55, 83, 84, 88, 100, 104, 105, 147, 149, 151, 152, 154, 175, 176, 177, 186, 190, 191, 219, 235, 258, 260, 269, 273, 279, 283, 289, 292, 302, 308, 321, 327, 328, 330, 335, 364, 376, 377, 382, 384, 394, 396, 410, 415, 418, 421, 422, 429, 430, 432, 435, 448, 449, 453, 454, 455, 456, 457, 459, 465, 470, 472, 473, 475, 478, 480, 494, 495, 496, 497, 503, 504, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 521, 529, 549, 555, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 592, 593, 595, 596, 598, 600, 601, 608, 609, 613, 634, 635, 636, 637, 639, 640, 647, 648, 651, 652, 653, 659, 663, 664, 667, 668, 669, 670, 671, 672, 678, 680, 682, 704, 706, 712, 721, 722, 738, 745, 748, 762, 793, 813, 832, 834, 835, 847, 851, 852, 854, 862, 876, 882, 884, 885, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 905, 913, 914, 915, 916, 917, 919, 920, 921, 922, 932, 934, 935, 937, 938, 962, 972, 978, 981, 982, 983, 984, 985, 988, 993, 994, 998, 1009, 1018, 1021, 1023, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "dtype_exclud": [105, 472], "dtype_includ": [105, 147, 158, 254, 415, 472], "du": [0, 403, 404, 1039, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "dua": 1048, "dual": [104, 106, 324, 352, 356, 422, 423, 477, 478, 484, 618, 653, 654, 659, 660, 665, 666, 667, 668, 669, 670, 688, 691, 851, 852, 911, 912, 913, 916, 1023, 1041, 1050, 1053, 1055], "dual_coef_": [542, 650, 913, 914, 915, 916, 917, 1023, 1043], "dual_gap": [477, 478, 484, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691], "dual_gap_": [653, 654, 659, 660, 667, 668, 669, 670, 1052], "dualiti": [478, 1004], "dualtre": [851, 852], "duan": [1048, 1050], "duart": [1044, 1052, 1054, 1057], "dubai": 422, "duboi": [1045, 1047], "dubou": 1049, "dubourg": [0, 404, 1032, 1039, 1043], "duchesnai": [0, 404, 1039], "duck": [384, 396, 1049], "ducktyp": [1043, 1056], "duckworth": 1039, "ducout": 1053, "duda": [379, 1002], "due": [48, 52, 63, 64, 88, 90, 95, 109, 137, 140, 174, 190, 191, 197, 202, 208, 215, 217, 219, 234, 235, 248, 254, 261, 283, 284, 289, 294, 295, 320, 321, 349, 352, 356, 357, 358, 382, 388, 394, 396, 400, 412, 413, 414, 418, 419, 421, 424, 449, 452, 453, 465, 542, 546, 550, 551, 581, 678, 807, 810, 811, 815, 817, 821, 832, 833, 836, 839, 843, 844, 876, 880, 881, 891, 998, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1022, 1023, 1028, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "dueck": [73, 446, 460], "dugnat": 1053, "duhaim": 1047, "dummi": [2, 137, 138, 217, 235, 251, 269, 278, 387, 409, 558, 559, 739, 884, 893, 930, 1009, 1018, 1024, 1034, 1040, 1042, 1043, 1044, 1046], "dummy_classifiers_misclassification_error": 137, "dummy_clf": [137, 558], "dummy_leaf_": 448, "dummy_regr": 559, "dummy_sev": 235, "dummybiclust": 429, "dummyclassifi": [2, 137, 269, 278, 559, 739, 1008, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1057], "dummyestim": [566, 567], "dummyregressor": [2, 217, 235, 558, 1008, 1009, 1040, 1042, 1043, 1046, 1047, 1049, 1052, 1053, 1057], "dumont": 1024, "dump": [2, 55, 408, 493, 851, 852], "dump_svmlight_fil": [2, 1039, 1040, 1044, 1054, 1056], "duong": [1056, 1057], "duplic": [370, 381, 382, 383, 396, 414, 425, 450, 454, 455, 522, 642, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 835, 882, 993, 1011, 1039, 1042, 1051, 1053, 1055, 1056, 1058], "dupont": 51, "dupr": [1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "dupr\u00e9": [0, 403, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "duqu": 1052, "durat": [43, 47, 217, 235, 254, 269, 297, 358, 370, 973, 974, 1004], "duration_sec": 49, "duration_test": 356, "duration_train": 356, "dure": [0, 43, 44, 51, 52, 85, 90, 93, 106, 109, 118, 128, 141, 147, 148, 153, 155, 169, 174, 179, 190, 191, 193, 206, 218, 225, 269, 273, 277, 289, 295, 326, 327, 349, 369, 371, 380, 382, 384, 387, 396, 397, 414, 415, 419, 421, 422, 424, 425, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 620, 621, 622, 624, 626, 627, 629, 630, 632, 634, 635, 636, 637, 639, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 707, 796, 804, 805, 806, 807, 810, 811, 821, 829, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 998, 1000, 1004, 1005, 1011, 1018, 1020, 1024, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058], "duron": 1053, "duti": 397, "dutt": 1055, "dutta": [1056, 1057], "duv2014": 424, "duvenaud": [424, 629, 630], "dwight": 1054, "dx": [51, 53, 706], "dx_c": 1015, "dy": [51, 706], "dye": 1052, "dylan": [1046, 1049], "dynam": [51, 52, 191, 562, 563, 564, 565, 570, 571, 572, 573, 586, 587, 683, 684, 685, 1024, 1032, 1045, 1051, 1056], "dzi": 1057, "dziki": 1042, "d\u00b2": 235, "d\u00f6pfert": 1047, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 88, 90, 92, 96, 104, 111, 113, 114, 115, 117, 118, 120, 126, 128, 137, 140, 147, 149, 150, 153, 154, 163, 168, 171, 172, 182, 189, 190, 191, 195, 198, 202, 206, 207, 217, 218, 219, 221, 235, 237, 238, 250, 251, 269, 271, 275, 276, 278, 280, 281, 282, 290, 292, 294, 301, 308, 317, 320, 324, 326, 332, 352, 358, 362, 363, 364, 365, 369, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 394, 395, 396, 400, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 443, 445, 447, 449, 450, 451, 453, 455, 456, 460, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 503, 505, 507, 508, 509, 510, 531, 540, 541, 542, 543, 545, 547, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 588, 589, 595, 596, 597, 598, 600, 601, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 624, 629, 630, 635, 637, 640, 641, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 697, 699, 701, 704, 706, 708, 711, 712, 715, 716, 723, 735, 736, 737, 738, 745, 748, 749, 762, 770, 774, 785, 792, 795, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 820, 821, 825, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 867, 868, 869, 871, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 906, 907, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 949, 954, 955, 957, 961, 962, 964, 967, 982, 993, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1028, 1031, 1032, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "e0129126": 376, "e11": 377, "e2": [905, 1004], "e41a1c": [79, 97], "e501": [172, 356], "e_": 419, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 82, 84, 88, 90, 93, 95, 96, 104, 105, 107, 108, 109, 117, 118, 120, 121, 123, 124, 128, 130, 131, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 168, 172, 176, 178, 183, 185, 186, 189, 190, 191, 193, 195, 197, 203, 205, 206, 211, 215, 217, 218, 219, 221, 222, 225, 232, 235, 238, 244, 245, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 263, 265, 268, 269, 270, 271, 273, 275, 276, 278, 280, 281, 284, 285, 289, 292, 294, 295, 298, 300, 304, 306, 308, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 339, 345, 349, 352, 357, 358, 360, 361, 364, 365, 369, 370, 371, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 390, 391, 394, 395, 396, 405, 408, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 432, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 526, 529, 530, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 714, 715, 717, 720, 726, 732, 735, 736, 737, 745, 746, 752, 753, 755, 757, 758, 760, 761, 765, 766, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 783, 785, 786, 787, 788, 790, 791, 792, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 928, 943, 949, 950, 955, 957, 958, 963, 964, 983, 984, 985, 988, 997, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "eager": 269, "eargl": 1053, "earl": 1042, "earli": [43, 46, 54, 79, 97, 136, 137, 143, 146, 187, 196, 204, 319, 325, 396, 421, 447, 451, 455, 469, 496, 503, 543, 544, 545, 546, 553, 560, 561, 566, 567, 568, 569, 634, 652, 663, 673, 674, 675, 683, 685, 699, 757, 837, 868, 869, 981, 1005, 1011, 1018, 1026, 1028, 1029, 1032, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1056], "earlier": [143, 191, 221, 376, 382, 417, 842, 845, 1018, 1037, 1040, 1052, 1054], "earliest": [376, 1005], "early_exager": 1046, "early_exagger": 699, "early_stop": [143, 153, 191, 225, 310, 327, 356, 396, 421, 568, 569, 673, 674, 675, 683, 684, 685, 868, 869, 1022, 1047, 1050, 1053, 1054], "earn": [189, 190, 397], "earth": [239, 357, 771, 1027], "eas": [106, 193, 265, 320, 382, 385, 388, 1004, 1022, 1027, 1028, 1032, 1050, 1051, 1053], "easi": [191, 225, 235, 263, 273, 275, 345, 356, 365, 377, 382, 388, 390, 394, 395, 408, 414, 421, 507, 511, 517, 878, 997, 1003, 1007, 1015, 1018, 1027, 1028, 1032, 1049, 1054, 1055], "easier": [79, 97, 101, 115, 147, 197, 205, 246, 254, 272, 273, 315, 345, 356, 365, 377, 382, 384, 387, 390, 394, 400, 416, 418, 474, 522, 909, 949, 1003, 1008, 1015, 1024, 1028, 1032, 1048, 1053], "easiest": [384, 390, 415, 1005], "easili": [43, 48, 67, 120, 169, 193, 220, 233, 249, 251, 255, 258, 275, 277, 284, 300, 317, 382, 384, 396, 397, 408, 415, 421, 422, 424, 455, 1002, 1004, 1005, 1018, 1022, 1023, 1024, 1031, 1045], "easlii": 245, "ec": [315, 537], "ecat": 377, "echo": [380, 386], "eckert": 1044, "eckhart": 501, "eclf": [159, 160, 421], "eclf1": 576, "eclf2": 576, "eclf3": 576, "ecml": 0, "ecoc": 292, "ecolog": [50, 308, 377, 505], "econom": [189, 190, 275], "econometr": 1004, "econometrica": 1004, "ecosystem": [382, 390, 998, 1026, 1032], "ecuador": [50, 308, 377, 505], "ed": [141, 152, 414, 421, 527, 566, 567, 1020, 1039, 1046], "eddi": [1042, 1056, 1057], "eden": 1054, "edern": [1054, 1055], "edg": [51, 63, 81, 101, 126, 147, 170, 240, 282, 390, 396, 411, 414, 416, 459, 568, 569, 592, 593, 595, 596, 598, 804, 848, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 876, 924, 1018, 1021, 1032, 1045, 1047, 1050, 1053], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 80, 91, 95, 102, 121, 129, 139, 146, 154, 156, 157, 159, 160, 165, 167, 175, 176, 178, 182, 191, 201, 209, 219, 226, 229, 230, 231, 248, 249, 250, 252, 254, 260, 263, 275, 278, 290, 298, 301, 302, 303, 306, 310, 317, 318, 320, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 354, 361, 362, 363, 638], "edit": [77, 379, 380, 381, 382, 386, 390, 394, 400, 537, 541, 841, 1002, 1004, 1009, 1015], "editor": [382, 390, 394], "edm": 1004, "edoardo": [1054, 1056, 1057, 1058], "edouard": [0, 404, 1039], "edson": [1008, 1044], "edu": [45, 47, 55, 172, 195, 292, 356, 376, 377, 379, 414, 455, 493, 507, 509, 515, 516, 517, 541, 648, 651, 656, 665, 673, 674, 683, 686, 689, 690, 846, 848, 850, 860, 867, 904, 906, 919, 920, 1004, 1006], "eduardo": [1042, 1044, 1052, 1053], "educ": [189, 190, 331, 382, 503, 723, 1009], "edvardlindelof": 1049, "edward": [179, 621, 626, 629, 1042, 1047, 1048, 1049, 1050, 1054, 1057], "edwinensa": 1045, "edwinwenink": 1052, "eec": [455, 648], "ef": 1054, "eff": 1024, "effect": [43, 45, 64, 72, 74, 75, 80, 81, 88, 92, 97, 100, 103, 107, 118, 126, 128, 137, 148, 150, 152, 154, 155, 163, 171, 174, 175, 179, 181, 187, 188, 190, 191, 193, 202, 210, 212, 217, 218, 219, 221, 222, 223, 234, 236, 239, 241, 247, 254, 258, 261, 265, 267, 269, 271, 275, 276, 277, 280, 283, 284, 289, 295, 307, 313, 314, 316, 319, 325, 333, 345, 349, 350, 352, 353, 354, 356, 357, 358, 365, 370, 382, 384, 387, 394, 396, 412, 414, 415, 419, 420, 421, 422, 424, 425, 443, 448, 449, 450, 452, 453, 455, 456, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 496, 503, 507, 521, 531, 532, 540, 541, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 613, 616, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 697, 698, 699, 708, 710, 760, 792, 804, 806, 808, 809, 812, 814, 816, 818, 825, 826, 829, 830, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 861, 862, 868, 869, 871, 874, 875, 876, 877, 878, 880, 881, 883, 887, 888, 889, 890, 891, 892, 896, 897, 898, 899, 900, 901, 902, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 937, 938, 955, 973, 981, 997, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1015, 1016, 1018, 1021, 1023, 1024, 1029, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "effective_learning_r": [868, 869], "effective_metric_": [853, 854, 855, 857, 859, 861, 862, 863, 1011], "effective_metric_params_": [853, 854, 855, 857, 859, 861, 862, 863], "effective_rank": [528, 531], "efficaci": 206, "effici": [37, 43, 44, 51, 53, 77, 81, 88, 90, 123, 138, 143, 148, 156, 195, 206, 210, 219, 225, 300, 332, 356, 369, 374, 376, 382, 384, 385, 386, 387, 388, 394, 396, 408, 411, 414, 419, 420, 421, 424, 426, 448, 449, 452, 453, 455, 456, 458, 460, 463, 465, 467, 468, 503, 540, 541, 542, 545, 547, 548, 551, 570, 573, 581, 588, 589, 595, 596, 598, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 639, 640, 641, 645, 647, 662, 665, 666, 671, 673, 674, 675, 680, 682, 683, 684, 685, 686, 692, 693, 695, 733, 763, 770, 786, 787, 804, 805, 807, 821, 840, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 876, 888, 900, 904, 911, 920, 922, 955, 997, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "efficiencywarn": [2, 866, 1054], "effort": [326, 382, 388, 1027, 1032, 1050, 1052], "efron": [172, 379, 689, 690, 1004], "eg": 991, "egashira": 1054, "egehan": 1057, "egg": 1047, "egger": 1057, "egin": 414, "egli": [1046, 1056], "egor": 1051, "ehrenheim": [1046, 1047], "eib": [842, 1009], "eickenberg": [1039, 1041, 1042, 1043, 1044], "eig": 1046, "eig_tol": 1040, "eig_val": 260, "eig_vec": 260, "eigen": [458, 556, 680, 698, 702, 1002, 1045, 1048], "eigen_solv": [51, 79, 81, 101, 237, 238, 419, 458, 468, 542, 695, 696, 698, 700, 702, 1005, 1040, 1049, 1052, 1053, 1054], "eigen_tol": [81, 458, 468, 698, 702, 1040, 1053, 1054], "eigendecompos": 419, "eigendecomposit": [468, 680, 698, 702, 877, 1000], "eigenfac": [42, 54, 187, 250, 253, 377, 419, 501, 548, 704, 720, 821, 837, 891, 916, 1025, 1029, 1039], "eigenface_titl": 45, "eigenmap": [237, 696, 698, 700, 702, 1033, 1034, 1040], "eigensolv": [419, 458, 468, 542, 551, 702, 1005], "eigenvalu": [120, 265, 331, 411, 414, 416, 458, 468, 475, 476, 477, 478, 479, 480, 481, 482, 542, 548, 556, 680, 695, 696, 698, 700, 702, 877, 1000, 1005, 1018, 1041, 1045, 1048, 1049, 1050, 1051], "eigenvalues_": [542, 1052], "eigenvector": [2, 42, 81, 118, 120, 187, 260, 414, 458, 468, 541, 542, 548, 557, 695, 696, 698, 702, 955, 1005, 1029, 1039, 1043, 1053], "eigenvector_centr": 55, "eigenvectors_": [542, 1052], "eigh": [70, 260, 261, 262, 265, 266, 419, 426, 540, 542, 1054, 1057], "eighteenth": 414, "eighth": [570, 1014], "eigsh": [419, 542, 1045, 1046], "eiler": 1018, "einsum": 305, "eitan": 1056, "either": [43, 49, 64, 105, 143, 146, 147, 190, 204, 207, 245, 254, 269, 270, 279, 284, 289, 300, 352, 356, 364, 369, 370, 374, 377, 380, 382, 383, 384, 396, 405, 408, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 448, 453, 458, 493, 503, 519, 531, 540, 541, 543, 551, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 589, 590, 591, 595, 596, 597, 598, 600, 601, 604, 609, 614, 615, 617, 618, 629, 634, 637, 639, 640, 657, 661, 663, 671, 683, 685, 689, 690, 697, 704, 705, 709, 713, 714, 719, 727, 731, 733, 734, 735, 736, 737, 742, 745, 746, 747, 759, 763, 776, 781, 785, 789, 790, 791, 792, 794, 795, 796, 801, 807, 810, 811, 813, 821, 830, 831, 832, 833, 834, 835, 836, 838, 841, 871, 901, 902, 908, 911, 912, 919, 920, 921, 922, 926, 964, 968, 996, 997, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1022, 1023, 1039, 1042, 1048, 1049, 1050, 1053, 1057], "ekaterina": [1045, 1046, 1047, 1048, 1050, 1055], "ekman": [1041, 1045], "el": [535, 1052, 1054, 1055], "elabonga": [1055, 1056], "elabor": 1009, "elad": [671, 692, 693], "elaps": [50, 82, 102, 143, 144, 145, 369, 470, 473, 576, 577, 870, 871, 872, 873], "elapsed_tim": [46, 74, 102, 144, 145, 158, 234], "elast": [2, 25, 187, 196, 202, 203, 206, 208, 211, 228, 288, 477, 478, 484, 508, 531, 653, 654, 659, 664, 665, 666, 667, 668, 669, 670, 675, 683, 685, 688, 689, 691, 997, 1008, 1022, 1029, 1030, 1034, 1039, 1044, 1048, 1049], "elastic_net": 228, "elastic_net_color": 228, "elastic_net_contour": 228, "elasticnet": [2, 46, 49, 199, 208, 283, 288, 369, 388, 394, 419, 654, 659, 664, 665, 666, 667, 668, 669, 670, 675, 683, 685, 688, 1004, 1009, 1022, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1057], "elasticnetcv": [2, 202, 396, 405, 653, 659, 667, 668, 669, 670, 688, 1004, 1039, 1042, 1050, 1052, 1053, 1056, 1057, 1058], "elasticnetifittedelasticnet": 199, "elbo": 419, "eldar": [416, 427, 481], "eleanor": 1054, "elec2": 153, "electr": [51, 153, 379, 414], "electron": [57, 172, 377, 379, 545, 547, 554, 634], "element": [2, 89, 123, 140, 141, 152, 246, 268, 274, 282, 284, 325, 357, 360, 364, 379, 381, 382, 384, 391, 397, 411, 414, 418, 419, 421, 422, 425, 450, 452, 458, 470, 493, 515, 519, 521, 527, 529, 533, 534, 538, 544, 545, 547, 557, 564, 565, 566, 567, 571, 572, 573, 574, 575, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 624, 639, 665, 666, 673, 674, 675, 683, 684, 685, 714, 724, 734, 741, 743, 753, 770, 776, 785, 789, 795, 796, 841, 851, 852, 853, 854, 855, 857, 859, 861, 862, 866, 868, 869, 874, 890, 891, 894, 898, 911, 916, 919, 920, 921, 922, 957, 958, 959, 978, 980, 981, 993, 1002, 1004, 1008, 1009, 1012, 1015, 1018, 1019, 1020, 1024, 1032, 1044, 1045, 1047, 1049, 1050, 1051, 1053, 1055], "elementari": [905, 1020], "elementwis": [419, 545, 547, 554], "elena": 1046, "eleni": 1052, "eleph": 589, "elev": [80, 102, 120, 129, 191, 214, 237, 241, 497], "eleven": 1028, "elfner": 1053, "elia": 1045, "eliaschiavon": 1054, "eliasi": [1054, 1055, 1056], "elicit": 1008, "elif": [46, 47, 198, 219, 252, 262, 300, 887], "elimin": [2, 18, 86, 163, 166, 169, 172, 187, 270, 273, 274, 280, 289, 299, 414, 418, 454, 509, 522, 600, 601, 604, 609, 665, 810, 811, 826, 871, 881, 993, 1008, 1029, 1030, 1032, 1034, 1039], "elisabeth": [329, 1056], "elizabeth": [1046, 1048, 1051], "elkan": [64, 269, 325, 412, 443, 449, 453, 465, 683, 1045, 1049, 1050, 1052, 1053], "ell": [70, 260, 261, 262, 266, 411], "ell_": 1004, "ell_0": [1004, 1008], "ell_1": [419, 1004], "ell_2": 1004, "ella": 1020, "ellen": 1046, "elli": [1045, 1048], "elliot": [1056, 1057], "elliott": 1046, "ellips": [70, 244, 260, 261, 262, 265, 266, 1014], "ellipsoid": [48, 65, 69, 113, 114, 115, 187, 259, 260, 262, 263, 264, 265, 266, 556, 557, 638, 804, 805, 1002, 1007, 1029], "ellipt": [92, 1004], "ellipticenvelop": [2, 48, 244, 476, 479, 480, 481, 482, 570, 1014, 1039, 1042, 1046, 1047, 1052], "eln": 1050, "elong": 414, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 84, 90, 91, 97, 115, 127, 140, 146, 147, 150, 151, 182, 190, 191, 193, 206, 209, 232, 235, 238, 244, 248, 250, 251, 252, 253, 254, 270, 275, 276, 279, 286, 295, 300, 308, 310, 311, 317, 324, 349, 356, 357, 364, 382, 386, 388, 421, 422, 424, 426, 434, 443, 455, 515, 527, 540, 576, 625, 632, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 679, 680, 681, 683, 686, 688, 689, 690, 691, 710, 716, 795, 801, 803, 810, 811, 837, 875, 887, 890, 898, 911, 912, 926, 969, 971, 973, 994, 996, 1024], "elsewher": [396, 468, 469, 477, 478, 484], "eltermann": 1042, "elucid": 1000, "elvezio": [656, 1004], "elvi": [1044, 1045, 1046], "em": [261, 262, 266, 449, 453, 465, 543, 804, 805, 1007, 1053], "emad": 1057, "email": [0, 356, 382, 394, 397, 422, 846, 1010, 1032], "emami": 1053, "emanuel": 1040, "emb": [174, 238, 248, 304, 375, 376, 468, 702, 1005], "embark": [105, 192, 258, 324, 328, 329], "embed": [2, 26, 37, 71, 74, 79, 81, 90, 97, 142, 174, 187, 236, 239, 241, 243, 295, 304, 334, 335, 396, 414, 447, 458, 468, 495, 509, 551, 556, 573, 589, 646, 695, 696, 697, 698, 699, 700, 701, 702, 703, 860, 872, 881, 903, 904, 905, 1000, 1011, 1014, 1020, 1025, 1027, 1029, 1033, 1034, 1039, 1040, 1050, 1051, 1053], "embedding_": [240, 396, 695, 696, 697, 698, 699], "emerg": [414, 1032], "emeritu": 397, "emiko": 1053, "emil": 1053, "emili": [1050, 1051, 1058], "emilyxinyi": 1057, "emipr": 804, "emir": [1054, 1055], "emit": [1050, 1057], "emlearn": 1027, "emma": 1056, "emmanouil": 1053, "emmanuel": [1039, 1046, 1047, 1048, 1056], "emoji": 402, "emp_cov": [111, 113, 115, 484, 487], "emp_cov_contour": 113, "emp_mah": 113, "emphas": [190, 354, 388, 419, 1008], "emphasi": [354, 413, 417, 913, 914, 915, 916, 917, 1015, 1027], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 99, 110, 112, 113, 115, 153, 187, 198, 235, 281, 315, 412, 418, 421, 424, 453, 455, 466, 475, 476, 477, 480, 483, 484, 539, 541, 546, 548, 550, 556, 558, 572, 597, 610, 646, 656, 674, 678, 685, 686, 723, 728, 730, 731, 836, 846, 847, 848, 850, 869, 892, 940, 981, 1000, 1002, 1008, 1010, 1012, 1018, 1020, 1022, 1029, 1033, 1034], "empirical_covari": [2, 111, 416, 484, 485, 487, 1055], "empiricalcovari": [2, 111, 113, 114, 416, 475, 479, 480, 481, 482, 1014], "emploi": [0, 51, 174, 250, 396, 416, 422, 456, 484, 589, 596, 1032, 1045], "employ": [190, 269], "empti": [96, 104, 132, 229, 337, 369, 377, 386, 414, 426, 434, 489, 540, 568, 569, 638, 723, 818, 876, 916, 918, 926, 932, 937, 938, 945, 966, 967, 998, 1023, 1041, 1043, 1047, 1048, 1050, 1051, 1053, 1054, 1055], "emptyset": 1008, "emul": [190, 390], "en": [55, 61, 390, 538, 544, 602, 643, 671, 675, 678, 692, 693, 702, 712, 853, 854, 859, 860, 861, 862, 889, 905, 919, 920, 1004, 1008, 1023, 1024], "enabl": [2, 16, 52, 66, 85, 106, 153, 191, 225, 239, 251, 317, 325, 327, 328, 330, 331, 332, 353, 380, 382, 387, 390, 394, 396, 400, 405, 410, 414, 415, 419, 421, 422, 455, 470, 474, 541, 542, 548, 566, 567, 568, 569, 570, 586, 587, 597, 598, 609, 617, 804, 805, 807, 810, 832, 833, 834, 835, 836, 838, 871, 872, 884, 885, 908, 909, 911, 912, 913, 914, 915, 916, 917, 926, 967, 974, 998, 1000, 1005, 1007, 1008, 1011, 1018, 1019, 1022, 1023, 1028, 1032, 1039, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "enable_cython_pairwise_dist": [474, 909], "enable_halving_search_cv": [2, 150, 286, 287, 326, 386, 810, 811, 997], "enable_hist_gradient_boost": [386, 1048], "enable_iterative_imput": [2, 185, 186, 386, 634, 998, 1048], "enable_metadata_rout": [251, 269, 331, 405, 443, 449, 450, 453, 455, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 600, 601, 604, 609, 617, 618, 634, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 807, 808, 809, 810, 811, 814, 816, 821, 825, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 870, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 1055], "enable_my_experimental_featur": 386, "enblom": 1057, "enc": [316, 318, 328, 330, 884, 885, 1018], "enc_auto": 892, "enc_high_smooth": 892, "enc_low_smooth": 892, "encapsul": [389, 415, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922], "enclos": 997, "encod": [2, 43, 47, 50, 83, 90, 105, 123, 142, 153, 158, 187, 190, 191, 192, 216, 217, 254, 269, 284, 289, 314, 316, 317, 318, 326, 328, 329, 345, 356, 358, 374, 376, 378, 387, 394, 396, 415, 418, 419, 421, 422, 424, 470, 493, 503, 510, 533, 538, 544, 546, 547, 549, 551, 552, 553, 555, 558, 568, 569, 573, 574, 576, 588, 595, 596, 598, 637, 655, 665, 666, 676, 679, 687, 742, 809, 814, 816, 834, 837, 871, 872, 874, 876, 878, 879, 882, 884, 885, 892, 895, 909, 928, 997, 998, 1004, 1005, 1008, 1010, 1011, 1013, 1022, 1027, 1028, 1029, 1034, 1040, 1041, 1047, 1051, 1053, 1054, 1055, 1056, 1057], "encoded_missing_valu": [158, 192, 885, 1018, 1053, 1054], "encodings_": [330, 892, 1018], "encompass": [396, 456, 462, 562, 563, 1005], "encount": [370, 380, 400, 408, 414, 421, 422, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 568, 569, 588, 846, 847, 848, 850, 884, 982, 1018, 1022, 1027, 1031, 1032, 1047, 1050], "encourag": [190, 205, 221, 310, 345, 381, 382, 394, 1023, 1027, 1057], "encrypt": 1027, "encyclopedia": 1008, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 380, 382, 384, 394, 396, 397, 400, 405, 411, 414, 415, 417, 421, 456, 462, 474, 494, 495, 515, 516, 544, 553, 564, 565, 566, 567, 571, 572, 573, 652, 653, 654, 657, 658, 659, 660, 661, 662, 667, 668, 669, 670, 688, 689, 690, 691, 807, 810, 811, 821, 828, 832, 869, 871, 909, 919, 920, 921, 922, 959, 961, 991, 997, 1000, 1004, 1005, 1007, 1008, 1018, 1020, 1022, 1027, 1032, 1044, 1046, 1049, 1052, 1053], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 240], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1051, "endo": 1052, "endpoint": [53, 316, 348, 642], "enemi": 382, "energi": [51, 153, 390, 867, 1013], "enet": [202, 288], "enet_path": [2, 205, 396, 653, 654, 659, 667, 668, 669, 1041, 1043, 1052], "enet_tol": [477, 478, 484, 1044], "enforc": [43, 51, 70, 88, 123, 153, 179, 211, 304, 369, 382, 416, 419, 421, 431, 437, 515, 534, 538, 544, 546, 549, 550, 552, 553, 555, 564, 565, 568, 569, 571, 572, 875, 890, 919, 920, 921, 922, 937, 938, 998, 1005, 1041, 1047, 1049, 1051, 1055], "enforce_estimator_tags_i": 1049, "eng": 1047, "engag": [388, 397], "engemann": [1041, 1042, 1046], "engin": [42, 75, 142, 147, 153, 179, 187, 191, 218, 369, 376, 379, 414, 420, 422, 470, 503, 569, 646, 680, 708, 828, 834, 869, 870, 872, 875, 876, 881, 884, 886, 890, 998, 1000, 1008, 1018, 1029, 1045], "english": [54, 57, 104, 356, 357, 358, 387, 422, 595, 596, 598, 1027, 1028, 1052], "enh": 386, "enhanc": [123, 221, 381, 382, 386, 394, 396, 414, 1008, 1037, 1038, 1039, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "enjoi": [77, 269], "enough": [2, 43, 52, 64, 72, 79, 97, 143, 146, 153, 174, 185, 191, 192, 206, 217, 249, 252, 254, 269, 288, 319, 356, 358, 365, 380, 382, 386, 397, 412, 414, 416, 418, 421, 574, 575, 596, 807, 810, 811, 813, 821, 835, 955, 997, 1002, 1005, 1007, 1014, 1018, 1023, 1027, 1032, 1045, 1055, 1056], "enrich": 349, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 91, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 185, 186, 191, 192, 193, 217, 238, 244, 253, 254, 256, 257, 269, 272, 287, 292, 294, 317, 321, 324, 325, 326, 327, 328, 329, 330, 331, 356, 361, 362, 365, 369, 386, 387, 395, 396, 405, 408, 412, 414, 418, 423, 443, 511, 522, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 639, 640, 642, 665, 709, 810, 811, 829, 837, 841, 842, 872, 875, 884, 915, 919, 921, 922, 947, 997, 1008, 1009, 1014, 1015, 1024, 1027, 1028, 1029, 1030, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "ensemble_clf": 141, "ensemble_jaccard_scor": 294, "ensembleregressorsensembl": 402, "ensur": [0, 52, 58, 76, 92, 115, 121, 137, 143, 144, 153, 193, 217, 238, 269, 270, 278, 312, 364, 365, 369, 370, 382, 384, 386, 387, 388, 397, 400, 405, 410, 412, 414, 415, 418, 426, 475, 540, 541, 548, 618, 634, 703, 712, 789, 795, 796, 832, 904, 937, 938, 949, 950, 955, 962, 973, 1004, 1005, 1008, 1018, 1024, 1041, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "ensure_2d": [937, 938], "ensure_all_finit": [785, 935, 937, 938, 1058], "ensure_min_featur": [937, 938], "ensure_min_sampl": [937, 938], "ensure_non_neg": [938, 1058], "entail": [269, 395, 889, 891, 1022], "enter": [383, 386, 414, 448, 1015], "entertain": 1004, "entic": 190, "entir": [68, 185, 217, 225, 269, 313, 315, 325, 349, 364, 365, 376, 383, 396, 408, 414, 418, 420, 422, 478, 499, 541, 595, 596, 597, 598, 654, 658, 660, 662, 665, 666, 668, 670, 672, 673, 675, 683, 689, 690, 741, 803, 829, 839, 840, 843, 868, 870, 871, 884, 896, 897, 899, 900, 901, 902, 930, 976, 998, 1008, 1018, 1022, 1024, 1048, 1049], "entireti": 396, "entiti": [397, 733, 763], "entitl": [289, 298, 413, 453, 618, 853, 1000], "entri": [0, 105, 109, 153, 158, 186, 190, 191, 269, 271, 324, 357, 365, 386, 388, 390, 395, 396, 411, 412, 414, 419, 421, 424, 469, 470, 473, 478, 503, 538, 539, 544, 552, 553, 568, 569, 595, 598, 601, 618, 627, 639, 645, 647, 654, 658, 660, 662, 663, 666, 668, 670, 671, 672, 680, 682, 689, 690, 692, 693, 706, 711, 714, 716, 719, 722, 723, 725, 733, 736, 737, 738, 741, 742, 745, 750, 763, 765, 766, 790, 792, 795, 796, 799, 800, 820, 835, 851, 852, 859, 860, 861, 862, 863, 882, 888, 900, 993, 997, 998, 1004, 1008, 1011, 1018, 1023, 1028, 1046, 1049, 1050, 1052, 1056], "entropi": [2, 50, 64, 256, 287, 308, 326, 334, 335, 365, 377, 410, 414, 421, 426, 505, 540, 564, 571, 614, 615, 665, 724, 743, 744, 748, 802, 919, 921, 1004, 1005, 1008, 1012, 1024, 1041, 1043, 1047, 1048, 1053, 1055, 1056, 1058], "entrypoint_to_bug_reproduc": 383, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 85, 90, 94, 95, 96, 97, 100, 104, 112, 114, 115, 118, 124, 126, 132, 140, 143, 148, 149, 151, 152, 153, 163, 176, 178, 183, 193, 198, 200, 208, 217, 238, 239, 242, 244, 249, 253, 254, 260, 261, 262, 263, 265, 266, 269, 270, 277, 278, 284, 285, 300, 304, 305, 307, 313, 317, 318, 334, 335, 337, 339, 343, 345, 351, 352, 356, 361, 377, 378, 566, 567, 571, 572, 788, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828], "env": [380, 390, 400, 401], "environ": [0, 3, 51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 369, 377, 379, 380, 382, 384, 385, 388, 394, 400, 401, 410, 415, 506, 1028, 1032, 1034, 1046, 1047, 1056], "environment": [50, 202, 235], "environmenterror": 1055, "eom": 452, "eoss": 0, "ep": [67, 79, 81, 84, 90, 100, 201, 205, 240, 248, 394, 414, 425, 450, 456, 461, 477, 478, 484, 638, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 688, 689, 690, 691, 697, 701, 721, 748, 863, 903, 904, 905, 1020, 1054, 1055], "epanechnikov": [300, 420, 851, 852, 856], "ephemer": 390, "ephrem": 1054, "epimorph": 1056, "epistem": 52, "epoch": [232, 396, 543, 673, 674, 675, 683, 684, 685, 868, 869, 1022, 1046, 1047, 1052], "epp": [414, 711], "eps_": [667, 669], "eps_rang": 248, "epsilon": [2, 90, 100, 200, 240, 250, 330, 351, 419, 452, 461, 650, 656, 674, 683, 685, 753, 868, 869, 912, 914, 917, 1001, 1004, 1008, 1012, 1022, 1023, 1039], "epsilon_": 849, "epsilon_i": 1008, "epsilon_insensit": [674, 683, 685, 912, 1004, 1022], "epsilon_valu": 200, "eq": [269, 427, 481, 728, 730, 731], "equal": [43, 50, 51, 63, 70, 72, 74, 88, 95, 113, 118, 125, 137, 150, 177, 190, 218, 219, 228, 234, 255, 262, 265, 268, 273, 275, 284, 305, 317, 321, 345, 347, 353, 357, 377, 378, 382, 384, 396, 411, 412, 414, 418, 419, 421, 422, 427, 443, 446, 447, 448, 449, 451, 453, 455, 460, 465, 466, 469, 475, 480, 485, 486, 510, 519, 522, 526, 539, 540, 541, 546, 548, 550, 551, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 595, 600, 601, 604, 606, 607, 614, 615, 632, 635, 636, 639, 640, 641, 642, 644, 648, 649, 656, 665, 666, 678, 706, 725, 727, 736, 790, 794, 795, 801, 803, 807, 808, 810, 811, 820, 821, 825, 832, 839, 843, 844, 851, 852, 853, 854, 859, 860, 861, 862, 863, 868, 869, 874, 875, 876, 883, 886, 889, 890, 891, 892, 894, 901, 908, 911, 912, 918, 919, 920, 921, 922, 943, 955, 982, 988, 1002, 1004, 1008, 1009, 1011, 1012, 1014, 1018, 1022, 1023, 1024, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "equat": [2, 64, 352, 382, 414, 419, 421, 564, 565, 566, 567, 571, 572, 573, 597, 634, 665, 666, 689, 690, 694, 770, 891, 919, 920, 921, 922, 998, 1005, 1008, 1013, 1047], "equi": 1007, "equiangular": 1004, "equidist": [147, 699], "equip": 1032, "equiv": [1000, 1023], "equival": [43, 54, 70, 90, 92, 147, 154, 171, 174, 179, 190, 202, 235, 265, 284, 295, 320, 349, 358, 365, 369, 388, 391, 395, 396, 408, 414, 415, 416, 417, 418, 419, 421, 423, 424, 447, 449, 450, 451, 452, 453, 455, 456, 463, 470, 475, 480, 516, 541, 548, 565, 568, 569, 570, 571, 572, 595, 598, 620, 623, 626, 628, 631, 653, 654, 655, 659, 661, 665, 666, 673, 674, 675, 676, 679, 683, 684, 687, 690, 694, 695, 700, 715, 716, 730, 741, 749, 754, 755, 756, 768, 777, 786, 787, 804, 805, 810, 811, 815, 817, 842, 845, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 868, 874, 880, 881, 883, 886, 887, 888, 889, 891, 899, 901, 902, 941, 953, 993, 997, 1002, 1004, 1005, 1006, 1008, 1014, 1018, 1022, 1023, 1024, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1058], "er": 577, "era": 1028, "eras": [566, 567, 653, 659, 665, 667, 669, 673, 674, 675, 683, 684, 685, 868, 869], "ereg": [161, 421], "eren": [0, 1041, 1042], "eric": [1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "ericellwang": [1052, 1053], "erich": [456, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1057], "erick": 1044, "erik": [377, 1032, 1042], "eriksson": 1046, "erin": [292, 1051], "erl": 292, "erlbaum": 269, "erling": 1044, "ermolaevpa": [1053, 1054], "ernst": [421, 564, 565, 572, 573, 921, 922], "err": [55, 117, 127, 137], "err_cov_emp_ful": 114, "err_cov_emp_pur": 114, "err_cov_mcd": 114, "err_loc_emp_ful": 114, "err_loc_emp_pur": 114, "err_loc_mcd": 114, "errno": 400, "erron": [113, 114, 419, 1004, 1040, 1047, 1051], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 109, 111, 112, 114, 127, 132, 136, 140, 143, 144, 147, 149, 151, 153, 172, 174, 185, 187, 189, 190, 202, 206, 210, 212, 213, 217, 219, 222, 223, 224, 231, 235, 247, 250, 251, 257, 266, 267, 269, 271, 275, 276, 280, 284, 285, 290, 292, 301, 302, 328, 331, 344, 352, 356, 357, 370, 379, 380, 382, 384, 385, 386, 387, 391, 394, 396, 405, 408, 412, 414, 415, 416, 418, 419, 421, 422, 423, 443, 449, 450, 453, 455, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 522, 531, 538, 540, 541, 544, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 588, 589, 595, 597, 598, 599, 602, 603, 605, 606, 607, 613, 617, 618, 636, 639, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 695, 696, 697, 699, 700, 703, 705, 708, 709, 716, 718, 719, 727, 728, 730, 734, 747, 750, 751, 752, 753, 754, 755, 757, 758, 760, 771, 785, 789, 795, 796, 797, 798, 806, 807, 808, 809, 810, 811, 813, 814, 816, 821, 825, 829, 830, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 861, 862, 863, 866, 868, 869, 870, 871, 872, 874, 876, 877, 878, 883, 884, 885, 890, 891, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 935, 936, 937, 938, 941, 970, 991, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1009, 1012, 1016, 1018, 1022, 1023, 1024, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "error_": [538, 550], "error_i": [143, 276], "error_norm": [112, 114, 475, 476, 477, 478, 479, 480, 481, 482], "error_on_new": 636, "error_r": 141, "error_scor": [807, 810, 811, 813, 821, 830, 833, 834, 835, 838, 997, 1043, 1047, 1051, 1054], "error_x": [143, 276], "errorbar": [72, 96, 107, 112, 114, 171, 180, 181, 297, 337, 348, 813, 830], "errorbar_": [813, 830], "errorbar_kw": [813, 830], "errorbarcontain": [813, 830], "errors_coef": 221, "errors_lines_": 708, "erwan": 1056, "erwin": 1042, "escal": 397, "escalant": 1008, "escalera": 1008, "escap": [1052, 1054], "eschibli": 1051, "eschlbeck": 1053, "esdi": 57, "esp": [414, 1039], "especi": [43, 47, 52, 90, 91, 147, 150, 153, 190, 217, 251, 321, 329, 357, 365, 370, 376, 382, 390, 394, 396, 412, 414, 422, 449, 455, 508, 545, 564, 565, 566, 567, 571, 572, 573, 653, 654, 655, 657, 659, 660, 661, 665, 666, 667, 668, 669, 670, 676, 687, 702, 712, 753, 846, 847, 848, 849, 850, 919, 920, 921, 922, 1004, 1010, 1011, 1018, 1032, 1042, 1047, 1051, 1052, 1053], "espinoza": [1040, 1041], "essenc": [614, 615, 750, 1005, 1008], "essenti": [0, 275, 329, 380, 384, 414, 418, 419, 516, 1008, 1011, 1028, 1032, 1047], "est": [80, 158, 190, 209, 232, 251, 253, 269, 289, 317, 326, 365, 408, 421, 569, 742, 876, 960, 997, 1008, 1018, 1022, 1050, 1051], "est1": [396, 639], "est2": [396, 639], "est_freq": 235, "est_idx": 317, "est_sev": 235, "establish": [390, 394, 397, 998], "estefania": 1053, "ester": [414, 425, 450], "estev": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 80, 84, 89, 90, 91, 92, 93, 96, 98, 105, 106, 107, 108, 117, 118, 123, 124, 125, 130, 132, 136, 137, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 155, 158, 159, 160, 161, 170, 171, 172, 173, 174, 175, 177, 179, 181, 183, 184, 185, 189, 190, 196, 199, 202, 204, 206, 207, 212, 217, 219, 221, 222, 224, 225, 234, 235, 243, 244, 245, 250, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 302, 306, 315, 317, 327, 328, 330, 332, 348, 349, 352, 357, 358, 361, 363, 369, 370, 371, 374, 380, 382, 385, 386, 389, 390, 391, 392, 400, 405, 408, 409, 412, 413, 414, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 497, 499, 502, 503, 505, 508, 509, 531, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 583, 584, 586, 587, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 694, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 714, 715, 718, 719, 720, 723, 725, 727, 728, 730, 731, 733, 734, 735, 736, 737, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 789, 790, 791, 792, 794, 795, 796, 797, 798, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 821, 823, 825, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 899, 900, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 927, 928, 929, 930, 931, 936, 937, 938, 940, 942, 943, 944, 947, 949, 950, 951, 960, 963, 964, 965, 967, 991, 995, 996, 1003, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "estimate_bandwidth": [2, 79, 98, 414, 454, 467], "estimated_coef": [653, 654, 659, 667, 668, 669, 688, 689, 690], "estimator_": [220, 251, 289, 434, 560, 561, 562, 563, 564, 565, 570, 571, 572, 573, 600, 601, 604, 678, 806, 829, 908, 991, 1054], "estimator__alpha": 150, "estimator__max_depth": [396, 997], "estimator_alpha": 146, "estimator_check": [2, 324, 384, 396, 949, 950, 1046, 1047, 1049, 1050, 1053, 1054, 1055, 1057, 1058], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 225, "estimator_errors_": [137, 560, 561], "estimator_html_repr": [2, 384, 415, 1050, 1051, 1052, 1053, 1056], "estimator_modul": 384, "estimator_nam": [49, 225, 384, 389, 444, 583, 705, 707, 709, 936], "estimator_samples_": 1050, "estimator_weights_": [137, 560, 561], "estimatorcv": [396, 1028], "estimators_": [144, 146, 209, 232, 252, 324, 396, 421, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 839, 840, 841, 842, 843, 844, 845, 1040, 1046, 1053], "estimators_early_stop": 148, "estimators_features_": [562, 563, 570], "estimators_samples_": [562, 563, 564, 565, 570, 571, 572, 573, 1045, 1047, 1050, 1056], "est\u00e8v": [0, 403, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "est\u00e8vc": 1057, "esuli": [1046, 1051], "esvhd": 1048, "et": [0, 2, 50, 111, 112, 137, 152, 204, 308, 377, 379, 411, 414, 416, 419, 421, 422, 423, 457, 505, 526, 527, 535, 542, 548, 551, 570, 689, 690, 726, 727, 846, 848, 868, 869, 904, 954, 955, 1004, 1005, 1008, 1014, 1018, 1020, 1023, 1024, 1047, 1055], "eta": [419, 543, 683, 684, 685, 1012, 1022, 1044], "eta0": [675, 683, 684, 685, 1022], "eta_0": 1022, "etc": [2, 147, 217, 235, 270, 279, 280, 332, 365, 369, 371, 382, 384, 387, 394, 395, 396, 405, 408, 411, 415, 418, 422, 495, 510, 534, 564, 565, 571, 572, 675, 683, 699, 725, 778, 807, 821, 842, 845, 875, 886, 919, 920, 921, 922, 923, 925, 937, 938, 949, 997, 998, 1002, 1008, 1011, 1027, 1028, 1032, 1039, 1046, 1048, 1049], "eth": 1049, "ethan": [1042, 1045], "ethic": 153, "etiquett": 382, "etl": [1028, 1032], "euclidean": [2, 37, 75, 92, 93, 203, 248, 254, 295, 298, 303, 324, 329, 349, 357, 411, 414, 419, 420, 421, 422, 424, 446, 447, 450, 451, 452, 456, 458, 463, 466, 469, 538, 544, 552, 553, 596, 622, 626, 629, 630, 683, 685, 697, 699, 702, 703, 706, 769, 770, 776, 777, 778, 779, 785, 786, 787, 788, 799, 800, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 905, 998, 1002, 1006, 1009, 1011, 1020, 1028, 1043, 1046, 1047, 1048, 1049, 1055, 1056], "euclidean_dist": [2, 240, 248, 384, 410, 456, 460, 463, 695, 701, 769, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 1039, 1044, 1047, 1048, 1056, 1058], "euclideandist": 706, "eugen": [379, 1040, 1045], "eunji": 1047, "eunseop": 1049, "euro": 332, "europ": [422, 1018], "european": [733, 763, 1008], "eustach": [1032, 1041, 1042], "eval_and_print_metr": 338, "eval_gradi": [182, 424, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "evalml": 1027, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 84, 90, 99, 105, 106, 126, 137, 143, 144, 145, 147, 148, 150, 153, 167, 168, 177, 187, 193, 195, 198, 206, 219, 224, 235, 243, 267, 268, 272, 273, 274, 275, 278, 280, 281, 282, 284, 286, 287, 289, 290, 294, 302, 304, 308, 315, 320, 322, 326, 330, 331, 338, 345, 349, 356, 365, 375, 377, 384, 388, 396, 399, 415, 422, 423, 424, 453, 455, 470, 472, 494, 497, 499, 500, 503, 516, 527, 543, 558, 568, 569, 570, 574, 575, 598, 601, 609, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 638, 639, 640, 641, 654, 660, 666, 680, 682, 704, 706, 708, 709, 710, 711, 712, 718, 720, 721, 722, 724, 725, 733, 734, 743, 744, 749, 761, 762, 763, 764, 793, 802, 804, 805, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 837, 838, 842, 848, 851, 852, 857, 869, 871, 872, 878, 881, 884, 885, 889, 890, 891, 896, 897, 899, 900, 901, 902, 913, 916, 919, 940, 949, 981, 1000, 1004, 1006, 1010, 1011, 1014, 1015, 1016, 1019, 1022, 1024, 1027, 1029, 1032, 1033, 1034, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "evaluate_everi": 543, "evaluate_model_and_stor": 321, "evaluation_std": 357, "evaluations_std": 357, "evelyn": 1057, "even": [37, 43, 52, 53, 64, 75, 77, 87, 109, 118, 126, 143, 150, 180, 190, 191, 192, 206, 217, 218, 225, 235, 241, 242, 250, 251, 261, 281, 292, 315, 317, 319, 320, 339, 352, 356, 357, 358, 365, 371, 377, 381, 382, 383, 384, 386, 387, 390, 394, 396, 408, 412, 414, 415, 416, 418, 419, 421, 422, 424, 447, 449, 451, 452, 453, 454, 455, 465, 467, 539, 542, 564, 565, 566, 567, 571, 572, 589, 596, 601, 634, 635, 637, 646, 665, 666, 702, 707, 712, 719, 750, 768, 774, 781, 785, 788, 793, 795, 834, 871, 872, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 919, 920, 921, 922, 955, 976, 997, 998, 1000, 1002, 1004, 1007, 1008, 1011, 1013, 1014, 1016, 1018, 1020, 1022, 1023, 1024, 1032, 1046, 1047, 1048, 1051, 1053, 1056], "evenli": [2, 47, 74, 87, 150, 193, 221, 270, 422, 959], "event": [0, 43, 217, 235, 278, 412, 414, 595, 596, 643, 846, 942, 1004, 1009, 1010, 1027, 1032, 1045], "eventu": [7, 263, 414, 423, 600, 1032], "ever": [143, 157, 391, 421, 1032], "everi": [43, 123, 153, 179, 185, 215, 218, 238, 250, 261, 266, 284, 327, 331, 365, 377, 382, 384, 386, 390, 396, 412, 414, 416, 418, 419, 422, 446, 460, 515, 538, 543, 546, 552, 564, 566, 567, 568, 569, 571, 597, 598, 610, 653, 654, 656, 659, 660, 666, 667, 668, 669, 670, 671, 672, 673, 675, 679, 680, 681, 682, 683, 692, 693, 694, 699, 703, 761, 778, 786, 787, 820, 860, 919, 921, 923, 925, 943, 1001, 1003, 1008, 1009, 1010, 1018, 1024, 1032, 1039, 1043, 1045, 1048, 1052, 1056], "everingham": 1008, "everingham2010": 1008, "everybodi": [376, 382], "everyon": [382, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "everyth": [334, 365, 386, 388, 394, 408, 470, 962, 1027, 1028, 1039], "everywher": 396, "evgeni": 1050, "evid": [281, 356, 390, 414, 418, 419, 421, 651, 804, 1007], "evol": 1008, "evolut": [47, 49, 287, 369, 371], "evolv": [391, 1054], "ex": [104, 380, 383, 400, 1043, 1044], "exact": [44, 46, 115, 128, 143, 179, 221, 249, 269, 295, 331, 365, 369, 370, 376, 382, 384, 390, 391, 394, 395, 396, 414, 421, 423, 439, 488, 489, 490, 494, 503, 541, 542, 548, 568, 569, 645, 649, 653, 699, 807, 821, 832, 833, 834, 913, 916, 997, 1000, 1004, 1005, 1014, 1018, 1022, 1023, 1046, 1047, 1049], "exactli": [105, 137, 189, 197, 202, 210, 217, 221, 266, 269, 283, 316, 352, 356, 382, 384, 390, 411, 414, 418, 419, 422, 427, 452, 459, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 522, 533, 597, 598, 622, 683, 685, 710, 712, 770, 808, 825, 832, 1000, 1004, 1005, 1006, 1008, 1009, 1024, 1039, 1045, 1046, 1052], "exagger": [74, 190, 699, 1005], "examin": [168, 388, 390, 414, 860], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 396, 399, 400, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 429, 430, 432, 433, 435, 436, 439, 440, 441, 442, 445, 462, 463, 465, 467, 469, 477, 484, 486, 487, 491, 492, 493, 500, 504, 510, 512, 514, 515, 516, 523, 524, 525, 535, 536, 538, 552, 553, 554, 555, 562, 579, 580, 584, 590, 592, 593, 599, 602, 603, 605, 608, 610, 616, 619, 623, 627, 628, 631, 633, 636, 643, 644, 645, 649, 657, 658, 661, 667, 668, 670, 674, 682, 690, 692, 693, 694, 701, 702, 703, 706, 715, 717, 718, 721, 722, 723, 727, 728, 730, 731, 732, 733, 735, 737, 738, 740, 743, 746, 747, 750, 751, 754, 758, 761, 763, 765, 766, 767, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 790, 798, 801, 803, 814, 815, 816, 817, 818, 819, 820, 831, 843, 845, 847, 851, 852, 861, 862, 863, 865, 866, 873, 874, 877, 879, 882, 893, 894, 896, 898, 899, 901, 902, 903, 906, 910, 912, 913, 921, 922, 923, 924, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 945, 946, 947, 948, 949, 951, 953, 954, 955, 956, 957, 958, 961, 962, 969, 970, 971, 972, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1032, 1034, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1052, 1054, 1055, 1056], "example_funct": 382, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1039, "example_gaussian_process_plot_gp_regress": 1039, "exampleclassifi": 251, "exampleclassifierexampleclassifi": 251, "exampleestim": 382, "exampleregressor": 251, "examples_pattern": 382, "exampletransform": 251, "exc": [292, 991], "exce": [117, 294, 325, 424, 448, 522, 609, 656, 665, 1048, 1051, 1053], "exceed": [810, 811, 1045], "excel": [156, 376, 382, 421, 697, 701, 1004, 1032], "except": [2, 50, 79, 88, 126, 135, 143, 153, 225, 232, 244, 251, 283, 295, 308, 311, 312, 315, 317, 329, 375, 382, 384, 385, 387, 394, 396, 405, 408, 411, 415, 418, 419, 421, 422, 424, 437, 466, 471, 474, 488, 489, 490, 516, 561, 563, 564, 565, 567, 569, 571, 572, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 618, 634, 637, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 694, 718, 785, 814, 844, 845, 851, 852, 854, 857, 862, 868, 869, 875, 889, 891, 909, 912, 914, 917, 920, 922, 936, 959, 991, 993, 997, 1004, 1008, 1023, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1056, 1057, 1058], "exception": 235, "excerpt": [45, 1020], "excess": [221, 452, 1018, 1046], "exchang": [408, 1031], "excit": 1046, "exclud": [47, 57, 189, 315, 382, 386, 396, 452, 470, 472, 736, 737, 745, 790, 791, 794, 820, 828, 886, 982, 1008, 1011, 1048, 1055, 1058], "exclus": [370, 394, 396, 419, 421, 634, 635, 637, 723, 809, 824, 827, 997, 1004, 1008, 1009, 1032, 1046, 1050], "exec": 394, "execut": [64, 185, 202, 206, 250, 280, 370, 380, 382, 388, 408, 410, 414, 419, 425, 449, 467, 807, 813, 821, 830, 832, 833, 834, 835, 838, 856, 973, 974, 1018, 1021, 1029, 1041, 1044, 1047], "exemplar": [414, 446, 460], "exemplari": [159, 160], "exemplifi": 396, "exercis": [2, 107, 146, 156, 176, 178, 227, 230, 310, 311, 339, 350, 353, 354, 371, 379, 382, 508, 509, 511, 512, 659, 660, 665, 807, 812, 853, 916, 1029, 1042], "exhaust": [2, 172, 276, 324, 325, 326, 327, 328, 329, 330, 331, 332, 369, 379, 387, 395, 409, 414, 421, 807, 810, 811, 821, 901, 902, 904, 1004, 1034], "exhibit": [175, 222, 349, 356, 399, 418, 419, 421, 424, 1016], "exist": [47, 48, 52, 55, 57, 88, 235, 275, 312, 315, 349, 376, 381, 384, 385, 388, 394, 396, 397, 400, 408, 414, 418, 419, 421, 422, 429, 434, 439, 443, 449, 450, 453, 455, 457, 459, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 498, 506, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 592, 595, 596, 597, 598, 604, 610, 617, 618, 639, 640, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 705, 707, 709, 769, 772, 776, 806, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 884, 885, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 991, 1000, 1005, 1007, 1008, 1012, 1014, 1015, 1018, 1032, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "exist_ok": 47, "existing_credit": 269, "exit": [106, 295, 386, 390, 474], "exp": [2, 81, 89, 101, 132, 140, 150, 175, 202, 227, 300, 305, 308, 325, 326, 330, 349, 412, 414, 415, 420, 426, 458, 471, 528, 540, 543, 622, 623, 629, 648, 766, 773, 783, 868, 869, 887, 1002, 1004, 1006, 1010, 1011, 1012, 1021, 1022, 1023], "exp10": 190, "exp_dirichlet_component_": 543, "exp_dist_embed": 305, "expand": [43, 84, 100, 246, 321, 325, 365, 374, 384, 421, 450, 456, 506, 564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 1008, 1040, 1047, 1048, 1055], "expand_frame_repr": 235, "expans": [43, 185, 326, 456, 886, 1048], "expect": [43, 44, 49, 52, 61, 72, 79, 88, 118, 121, 128, 137, 140, 142, 144, 147, 150, 153, 169, 170, 174, 180, 187, 188, 192, 203, 208, 217, 218, 219, 221, 225, 235, 248, 251, 254, 255, 261, 262, 265, 266, 269, 282, 295, 320, 352, 356, 357, 365, 369, 370, 382, 384, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 405, 410, 412, 414, 415, 416, 418, 421, 422, 423, 437, 470, 471, 473, 474, 475, 488, 489, 490, 503, 530, 539, 543, 545, 548, 559, 561, 562, 563, 564, 565, 567, 569, 570, 571, 572, 573, 574, 575, 577, 579, 595, 596, 598, 602, 604, 613, 618, 634, 639, 640, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 681, 682, 685, 686, 702, 711, 712, 723, 742, 795, 801, 806, 807, 821, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 857, 861, 862, 863, 864, 869, 872, 877, 884, 885, 888, 891, 892, 901, 902, 909, 911, 912, 913, 914, 915, 916, 917, 920, 922, 932, 970, 997, 1004, 1007, 1008, 1010, 1014, 1018, 1022, 1023, 1024, 1029, 1031, 1034, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "expected_anomaly_fract": 254, "expected_i": 150, "expected_n_anomali": 254, "expected_ri": 712, "expectedli": 356, "expens": [0, 91, 143, 158, 174, 189, 191, 245, 272, 284, 345, 349, 356, 357, 358, 371, 388, 396, 414, 415, 418, 421, 422, 455, 474, 515, 807, 810, 811, 821, 834, 909, 911, 1005, 1007, 1018, 1023, 1032, 1043], "experi": [30, 137, 177, 181, 189, 190, 191, 192, 195, 219, 269, 292, 320, 352, 357, 358, 370, 376, 382, 385, 397, 418, 522, 735, 792, 1004, 1009, 1020, 1026, 1027, 1032], "experienc": 382, "experiment": [2, 150, 185, 186, 217, 286, 287, 326, 327, 332, 384, 385, 392, 394, 396, 405, 418, 503, 556, 586, 587, 634, 703, 810, 811, 977, 997, 998, 1004, 1007, 1008, 1027, 1028, 1034, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "expert_r": 415, "expertis": [381, 382, 394], "expit": [149, 207, 421, 568, 1004, 1046], "explain": [2, 43, 44, 51, 64, 91, 107, 117, 118, 131, 150, 174, 179, 180, 191, 192, 217, 235, 244, 251, 266, 285, 321, 332, 356, 357, 370, 382, 394, 408, 410, 417, 419, 424, 500, 528, 531, 541, 548, 551, 556, 632, 655, 663, 676, 687, 728, 729, 730, 731, 735, 792, 1004, 1011, 1024, 1026, 1050, 1052, 1053], "explained_vari": [357, 1008], "explained_variance_": [118, 541, 548, 551, 1046], "explained_variance_ratio": 1045, "explained_variance_ratio_": [107, 131, 332, 357, 419, 541, 548, 551, 556, 1042, 1045], "explained_variance_scor": [2, 1008, 1042, 1046, 1053], "explan": [64, 118, 251, 369, 381, 382, 412, 422, 997, 1007, 1009, 1024, 1027, 1032, 1042], "explic": 1020, "explicit": [43, 153, 187, 191, 195, 243, 251, 289, 349, 369, 370, 371, 381, 383, 394, 396, 397, 405, 415, 422, 428, 478, 506, 508, 509, 548, 558, 559, 638, 645, 646, 648, 683, 807, 808, 815, 855, 863, 871, 911, 916, 971, 1000, 1002, 1004, 1008, 1018, 1024, 1027, 1029, 1039, 1043, 1048, 1049, 1052, 1056], "explicitli": [43, 81, 144, 174, 181, 185, 186, 218, 247, 251, 331, 349, 358, 365, 370, 376, 378, 382, 383, 384, 386, 394, 396, 405, 408, 410, 418, 422, 424, 542, 556, 557, 586, 587, 604, 634, 655, 665, 666, 676, 687, 716, 734, 789, 795, 796, 810, 811, 842, 845, 851, 852, 877, 901, 902, 996, 997, 998, 1000, 1002, 1004, 1005, 1008, 1010, 1011, 1018, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1057, 1058], "explod": 321, "exploit": [62, 294, 408, 1009, 1028, 1042], "exploit_incremental_learn": [813, 835], "explor": [52, 72, 140, 141, 153, 193, 241, 242, 254, 269, 276, 277, 283, 284, 292, 322, 326, 345, 357, 365, 376, 379, 381, 388, 414, 421, 478, 807, 810, 818, 892, 997, 1004, 1005, 1007, 1013, 1015, 1018, 1032, 1045], "exploratori": [190, 1032], "explos": [807, 821, 832, 833, 834], "expm1": 109, "expon": [424, 623, 683, 684, 685, 819, 868, 869, 886, 997], "exponenti": [2, 81, 109, 174, 179, 300, 305, 420, 421, 424, 455, 543, 561, 566, 621, 626, 629, 646, 650, 765, 766, 851, 852, 856, 868, 869, 886, 1000, 1004, 1008, 1023, 1046, 1052], "export": [2, 380, 383, 384, 400, 923, 924, 1024, 1027, 1048], "export_graphviz": [2, 1024, 1044, 1046, 1052, 1054, 1055, 1057], "export_text": [2, 1024, 1048, 1055], "expos": [2, 172, 251, 288, 292, 327, 329, 370, 375, 379, 384, 396, 405, 412, 415, 421, 423, 424, 443, 470, 560, 561, 568, 569, 574, 575, 576, 577, 600, 601, 609, 618, 806, 807, 810, 811, 821, 829, 840, 841, 842, 843, 844, 845, 926, 1004, 1008, 1010, 1027, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "exposur": [217, 235, 1004], "express": [43, 46, 51, 52, 137, 143, 174, 179, 190, 275, 276, 321, 326, 342, 349, 358, 376, 377, 382, 383, 388, 394, 408, 414, 419, 420, 421, 422, 456, 462, 463, 595, 596, 598, 723, 795, 807, 813, 821, 830, 832, 833, 834, 835, 838, 858, 1000, 1004, 1008, 1012, 1018, 1019, 1024, 1047], "expsinesquar": [2, 174, 179, 183, 424], "exstrac": 1008, "ext": 653, "extend": [31, 52, 90, 91, 102, 135, 218, 264, 269, 282, 345, 379, 380, 394, 396, 412, 414, 419, 421, 638, 665, 727, 828, 840, 843, 844, 876, 878, 895, 911, 912, 926, 1000, 1008, 1009, 1023, 1028, 1030, 1034, 1044, 1045, 1046, 1047, 1049, 1054], "extens": [282, 284, 300, 369, 370, 376, 377, 380, 383, 385, 386, 390, 391, 394, 408, 414, 419, 503, 510, 541, 748, 949, 957, 1005, 1007, 1008, 1026, 1027, 1032, 1039, 1045, 1052, 1053, 1055, 1056], "extent": [2, 48, 93, 176, 177, 178, 248, 353, 446, 542, 703, 804, 1008], "extercond": 147, "extern": [163, 174, 269, 371, 375, 379, 382, 384, 387, 394, 396, 411, 414, 422, 423, 424, 600, 617, 618, 724, 744, 802, 1004, 1007, 1008, 1011, 1024, 1028, 1034, 1047, 1051], "exterqu": [147, 158], "extmath": [2, 263, 356, 391, 459, 952, 953, 954, 955, 956, 957, 1039, 1040, 1045, 1046, 1049, 1053, 1054, 1056], "extr": 47, "extra": [2, 81, 146, 153, 253, 295, 331, 358, 380, 381, 383, 396, 408, 421, 422, 444, 449, 453, 465, 470, 539, 564, 565, 573, 597, 598, 707, 708, 709, 832, 855, 921, 922, 945, 1007, 1008, 1011, 1039, 1042, 1044, 1045, 1047, 1052, 1054], "extra_cflag": 388, "extra_tre": [921, 922], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 85, 90, 103, 104, 105, 106, 117, 123, 143, 168, 172, 187, 232, 267, 274, 275, 280, 283, 313, 338, 348, 356, 358, 365, 374, 377, 379, 388, 391, 394, 414, 415, 418, 419, 456, 458, 461, 462, 468, 470, 494, 495, 500, 501, 510, 511, 538, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 590, 591, 595, 596, 598, 600, 601, 604, 606, 638, 725, 795, 807, 821, 848, 870, 871, 916, 928, 955, 964, 971, 997, 1005, 1009, 1013, 1018, 1022, 1027, 1029, 1032, 1034, 1039, 1040, 1048, 1051], "extract_dbscan": 414, "extract_patches_2d": [2, 85, 126, 422, 594, 1047], "extract_scor": 278, "extractal": 47, "extractor": [217, 313, 371, 377, 396, 422, 510, 588, 589, 595, 596, 598, 997, 1039], "extran": 382, "extrapol": [43, 174, 197, 218, 247, 278, 890, 1008, 1018, 1024, 1052, 1054], "extratre": [146, 156, 369, 1042], "extratreeclassifi": [2, 564, 573, 922, 998, 1009, 1024, 1043, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1058], "extratreeregressor": [2, 565, 570, 573, 921, 998, 1009, 1014, 1024, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1058], "extratreesclassifi": [2, 146, 156, 421, 423, 565, 571, 573, 921, 922, 998, 1009, 1042, 1043, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1058], "extratreesregressor": [2, 253, 421, 564, 572, 573, 921, 922, 998, 1009, 1042, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1058], "extrem": [2, 150, 217, 219, 253, 254, 288, 315, 322, 337, 357, 382, 385, 413, 414, 419, 564, 565, 571, 572, 573, 639, 640, 686, 731, 759, 921, 922, 923, 925, 1008, 1010], "extrema": 1002, "exxon": 51, "ey": [113, 114, 262, 266, 345, 377, 541, 548, 557], "eyast": 1053, "ezebunandu": 1051, "ezeiza": 771, "ezri": 1052, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 82, 83, 84, 87, 88, 90, 93, 99, 102, 105, 109, 118, 126, 137, 140, 143, 144, 145, 147, 148, 150, 153, 158, 159, 164, 166, 168, 171, 172, 174, 180, 181, 183, 187, 189, 190, 191, 192, 193, 195, 202, 203, 206, 208, 217, 218, 219, 221, 227, 231, 235, 238, 248, 250, 251, 254, 258, 265, 269, 273, 275, 276, 277, 278, 281, 282, 284, 285, 287, 288, 289, 295, 298, 310, 311, 312, 317, 320, 321, 324, 326, 328, 330, 331, 332, 334, 335, 344, 349, 352, 356, 357, 358, 365, 377, 382, 383, 384, 388, 390, 394, 408, 412, 415, 419, 421, 422, 423, 424, 493, 515, 516, 538, 539, 544, 545, 573, 588, 589, 590, 594, 599, 602, 603, 605, 606, 607, 611, 612, 613, 614, 615, 616, 624, 634, 639, 642, 665, 703, 720, 730, 733, 736, 737, 763, 790, 791, 794, 795, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 835, 836, 838, 868, 869, 873, 882, 885, 886, 890, 891, 892, 918, 926, 937, 938, 991, 1000, 1003, 1012, 1015, 1016, 1018, 1022, 1029, 1041, 1047, 1048, 1049, 1051, 1053], "f0_c0": 892, "f0_c1": 892, "f0_c2": 892, "f0e442": 260, "f1": [2, 45, 62, 68, 104, 169, 273, 313, 334, 335, 338, 418, 720, 736, 737, 745, 790, 829, 1008, 1009, 1043, 1055], "f1_c0": 892, "f1_c1": 892, "f1_c2": 892, "f1_macro": [418, 1008, 1043], "f1_micro": [1008, 1043], "f1_sampl": 1008, "f1_score": [2, 62, 282, 338, 377, 413, 745, 1008, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1055, 1056], "f1_weight": [1008, 1043], "f2": [386, 1009], "f2001": 1008, "f2006": 1008, "f3": 1009, "f4": 505, "f401": [80, 102, 120, 129, 191, 214, 237, 239], "f781bf": [75, 79, 97, 98], "f7bd01": 75, "f_": [421, 642, 737, 1008], "f_0": 155, "f_1": [155, 1008], "f_beta": 1008, "f_classif": [2, 168, 169, 348, 423, 599, 602, 603, 605, 606, 607, 611, 613, 616], "f_i": 412, "f_idx": 155, "f_j": [412, 1016], "f_m": 421, "f_n": 282, "f_p": 282, "f_regress": [2, 89, 167, 423, 599, 602, 603, 605, 606, 607, 611, 612, 616, 1042, 1046, 1053, 1056], "f_score": 282, "f_statist": [612, 613], "f_test": 167, "fa": [2, 122, 132, 133, 187, 388, 419, 479, 482, 539, 548, 807, 833, 1029], "fa_estim": 123, "fa_scor": 130, "fab": [1032, 1049, 1050], "fabia": [411, 726], "fabian": [0, 404, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1056], "fabiana": 1050, "fabio": 1045, "fabisch": [0, 404, 1041, 1042, 1043, 1045], "fabrizio": 1054, "face": [2, 42, 44, 54, 71, 86, 88, 122, 126, 130, 132, 145, 187, 195, 243, 248, 250, 375, 382, 386, 414, 419, 421, 423, 455, 478, 500, 501, 502, 528, 539, 540, 544, 546, 547, 548, 550, 565, 591, 664, 680, 704, 720, 821, 837, 854, 891, 916, 940, 1011, 1024, 1025, 1029, 1034, 1039, 1047], "face_id": 253, "facecolor": [51, 63, 70, 80, 95, 123, 129, 139, 165, 182, 237, 252, 275, 302, 317, 343, 346, 349, 350, 351], "faces_cent": 123, "facial": 377, "facil": [1007, 1027], "facilit": [369, 396, 408, 1027, 1028, 1045, 1048], "fact": [43, 50, 57, 62, 114, 118, 137, 148, 150, 192, 248, 258, 292, 294, 356, 376, 389, 394, 396, 410, 417, 419, 420, 421, 422, 656, 675, 677, 711, 1002, 1004, 1011, 1018, 1022, 1023, 1028, 1032, 1053], "facto": 1049, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 81, 88, 90, 97, 122, 128, 132, 156, 187, 190, 231, 242, 244, 254, 269, 286, 287, 295, 296, 310, 311, 315, 317, 326, 328, 344, 369, 370, 378, 382, 388, 391, 396, 411, 414, 421, 422, 424, 446, 448, 460, 475, 477, 478, 479, 480, 482, 484, 494, 511, 521, 522, 534, 539, 542, 543, 545, 547, 548, 551, 552, 553, 554, 556, 557, 568, 569, 570, 595, 598, 604, 620, 656, 657, 658, 661, 662, 663, 689, 690, 699, 726, 790, 807, 810, 811, 833, 857, 891, 905, 907, 915, 954, 955, 997, 1004, 1005, 1011, 1018, 1021, 1025, 1029, 1033, 1034, 1039, 1040, 1042, 1043, 1045, 1053, 1055], "factoranalysi": [2, 123, 130, 133, 419, 551, 1040, 1042, 1051, 1053], "factori": [2, 96, 269, 275, 422, 930, 932, 977, 1008], "facundo": [1050, 1053], "fagan": 1048, "fail": [43, 89, 101, 124, 130, 182, 197, 202, 221, 251, 275, 324, 370, 380, 382, 385, 390, 397, 400, 417, 418, 446, 478, 480, 683, 684, 685, 718, 868, 869, 927, 929, 936, 949, 997, 1005, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058], "failur": [187, 188, 190, 212, 382, 390, 400, 664, 792, 837, 937, 938, 1029, 1031, 1032, 1052, 1053, 1057], "fair": [51, 64, 421, 697, 701, 840, 1009, 1032], "fairer": 365, "fairli": [115, 149, 239, 311, 390, 414, 566, 567, 706, 1009], "faith": [57, 350], "fake": 422, "falak": 1048, "fall": [25, 30, 43, 52, 150, 153, 181, 274, 275, 382, 414, 422, 439, 452, 453, 515, 516, 734, 735, 801, 888, 900, 960, 1007, 1008, 1018, 1048, 1058], "fallback": [397, 400, 839, 840, 1008], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 81, 82, 89, 90, 99, 102, 104, 105, 106, 112, 114, 121, 127, 131, 132, 137, 143, 144, 147, 150, 151, 153, 161, 163, 174, 179, 180, 181, 182, 190, 191, 192, 193, 197, 198, 202, 203, 217, 218, 222, 223, 225, 233, 235, 237, 240, 251, 252, 254, 258, 260, 269, 272, 273, 275, 278, 279, 282, 283, 284, 285, 286, 287, 288, 290, 295, 299, 305, 308, 311, 312, 315, 316, 321, 322, 324, 326, 327, 328, 329, 331, 332, 336, 345, 347, 349, 352, 353, 356, 357, 376, 382, 383, 384, 387, 396, 405, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 427, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 520, 522, 530, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 642, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 701, 702, 704, 705, 706, 707, 708, 709, 710, 715, 716, 718, 719, 720, 721, 722, 725, 726, 733, 734, 735, 736, 737, 738, 745, 750, 761, 763, 768, 770, 774, 776, 781, 785, 789, 790, 791, 792, 794, 796, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 821, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 935, 936, 937, 938, 944, 949, 956, 968, 969, 972, 973, 977, 978, 979, 981, 988, 993, 994, 996, 997, 998, 1004, 1008, 1011, 1018, 1022, 1023, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "false_": 643, "false_discovery_r": 602, "famili": [2, 45, 269, 369, 371, 396, 414, 417, 419, 422, 423, 599, 602, 603, 605, 606, 607, 613, 868, 869, 887, 899, 1004, 1018, 1022, 1043, 1053], "familiar": [382, 420, 1047], "famou": [377, 379, 421, 1023], "famous": 1010, "fan": [0, 370, 397, 403, 1023, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "fanci": 422, "fancybox": 351, "fanelli": [1054, 1055], "fang": [665, 1046, 1047], "fanni": 1049, "fantasi": 1013, "fantast": 1032, "faouzi": [1049, 1050], "faq": [0, 390, 418, 699, 1005, 1018], "far": [62, 95, 115, 147, 175, 181, 190, 217, 235, 269, 345, 349, 356, 358, 382, 391, 424, 727, 891, 982, 1013, 1014, 1023, 1032], "farach": 1000, "farahsae": 1047, "farawai": 1011, "fare": [105, 192, 258, 328, 329, 1043, 1044], "fargo": 51, "farhan": 1055, "farid": 1058, "farlei": [0, 404, 1039], "farouk": [1047, 1048], "farther": 732, "farthest": 414, "fashion": [2, 46, 142, 148, 225, 284, 370, 396, 411, 412, 414, 419, 421, 560, 564, 565, 566, 567, 571, 572, 573, 609, 634, 837, 860, 875, 878, 884, 895, 919, 920, 921, 922, 978, 998, 1004, 1008, 1018, 1024, 1048], "fast": [2, 52, 64, 97, 195, 202, 206, 232, 233, 249, 250, 316, 358, 369, 377, 382, 391, 408, 414, 416, 418, 419, 421, 422, 426, 452, 453, 475, 480, 515, 539, 540, 542, 545, 547, 551, 554, 571, 572, 573, 595, 596, 598, 639, 640, 647, 665, 666, 679, 681, 694, 706, 807, 821, 832, 833, 843, 844, 851, 852, 856, 867, 955, 976, 1000, 1004, 1007, 1010, 1011, 1013, 1014, 1024, 1027, 1032, 1039, 1040, 1045, 1046, 1049, 1050], "fast_dict": 1049, "fast_dot": 1046, "fast_logdet": [2, 391], "fast_svd": 1039, "faster": [37, 46, 57, 74, 99, 107, 123, 142, 143, 147, 148, 150, 153, 172, 191, 195, 203, 217, 219, 232, 233, 235, 250, 254, 269, 295, 297, 312, 325, 327, 328, 332, 356, 357, 358, 369, 376, 382, 390, 391, 396, 408, 414, 419, 423, 424, 426, 449, 453, 455, 457, 458, 459, 468, 515, 538, 539, 540, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 566, 567, 568, 569, 570, 650, 653, 654, 659, 660, 665, 666, 667, 668, 669, 670, 679, 681, 691, 694, 698, 702, 733, 763, 785, 786, 787, 851, 852, 856, 868, 869, 886, 888, 890, 900, 904, 955, 976, 997, 1001, 1004, 1009, 1011, 1012, 1015, 1020, 1022, 1023, 1024, 1027, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "fastest": [92, 273, 358, 453, 677, 679, 681, 694, 954, 955, 1007], "fastest_top_recall_high_precision_index": 273, "fastica": [2, 122, 187, 216, 419, 539, 542, 548, 1029, 1039, 1041, 1047, 1053, 1054, 1057], "fastkmean": 455, "fastmcd": [416, 475, 480], "fastnc": 867, "fat": [528, 531], "fatima": [1053, 1056], "fato": 1052, "fauchereau": 1052, "fault": [390, 1047, 1049, 1051], "faulti": [220, 1039], "faust": 1057, "favor": [44, 115, 143, 260, 266, 394, 416, 421, 680, 682, 737, 815, 817, 870, 997, 1016, 1041, 1043, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "favorit": [382, 394, 1032], "favour": [799, 1005, 1007, 1048], "fawcett": [795, 796, 1008], "fazlul": 1041, "fbeta_scor": [2, 736, 749, 790, 1008, 1041, 1042, 1043, 1044, 1049, 1055], "fc": [48, 300, 377], "fc2009": 1008, "fcd116": 121, "fcharra": 1054, "fcluster": 193, "fcostin": 1039, "fd": 47, "fdr": 599, "feasibl": [382, 880, 881, 891], "feast": 415, "feat": [47, 49, 386, 422], "feat0": [246, 325], "feat1": [246, 325, 422], "feat2": [246, 325, 422], "feat3": [246, 325, 422], "feat_idx": 634, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 80, 85, 93, 95, 98, 103, 104, 105, 106, 107, 113, 114, 117, 118, 120, 121, 123, 125, 127, 129, 130, 131, 133, 136, 138, 141, 143, 146, 150, 152, 157, 158, 159, 161, 163, 167, 169, 174, 175, 176, 179, 180, 182, 185, 186, 188, 189, 190, 191, 196, 198, 200, 201, 202, 203, 206, 207, 213, 216, 217, 218, 219, 221, 222, 225, 226, 232, 233, 234, 238, 243, 246, 248, 252, 253, 254, 257, 258, 267, 269, 270, 272, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 288, 289, 290, 294, 298, 299, 300, 303, 304, 306, 309, 310, 312, 314, 315, 318, 322, 323, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342, 345, 349, 352, 355, 358, 361, 363, 364, 365, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 389, 390, 391, 394, 395, 396, 397, 399, 400, 402, 408, 412, 414, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 430, 435, 437, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 586, 587, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 625, 626, 627, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 693, 694, 695, 696, 697, 698, 699, 704, 708, 709, 710, 720, 728, 729, 730, 731, 748, 749, 752, 753, 755, 765, 766, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 788, 792, 795, 797, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 937, 938, 952, 972, 982, 983, 984, 988, 996, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "feature_0": 924, "feature_1": [638, 924], "feature_2": 638, "feature_all_": 848, "feature_count_": [846, 848, 850], "feature_extract": [2, 47, 54, 57, 81, 82, 85, 86, 89, 101, 104, 126, 187, 276, 338, 355, 356, 357, 358, 371, 377, 414, 415, 422, 470, 551, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 884, 1006, 1039, 1040, 1041, 1042, 1045, 1046], "feature_import": 151, "feature_importances_": [144, 145, 151, 172, 192, 193, 396, 421, 423, 560, 561, 564, 565, 566, 567, 571, 572, 573, 600, 601, 604, 919, 920, 921, 922, 1041, 1044, 1048], "feature_index": 422, "feature_indices_": 1047, "feature_log_prob_": [846, 847, 848, 850], "feature_map": [249, 315], "feature_map__n_compon": 249, "feature_map_fouri": 249, "feature_map_nystroem": [249, 646], "feature_nam": [54, 57, 120, 133, 144, 151, 155, 172, 190, 192, 226, 255, 289, 298, 315, 324, 325, 326, 331, 342, 356, 361, 375, 377, 387, 415, 470, 496, 497, 499, 503, 507, 508, 509, 511, 512, 517, 589, 638, 639, 640, 892, 923, 924, 925, 1016, 1024, 1055], "feature_name_combin": [884, 1055], "feature_names_": 588, "feature_names_in": 1053, "feature_names_in_": [258, 322, 327, 396, 435, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 634, 635, 636, 637, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 996, 1052, 1053, 1054, 1055, 1057], "feature_names_out": [430, 435, 448, 449, 451, 453, 455, 470, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 573, 574, 575, 576, 577, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 1053, 1056], "feature_rang": [313, 881, 897, 1018, 1041, 1051], "feature_select": [2, 89, 105, 106, 108, 166, 167, 168, 169, 170, 171, 172, 187, 258, 326, 328, 348, 365, 396, 405, 415, 423, 588, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 997, 1029, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1058], "feature_selector": 172, "feature_to_plot": 211, "feature_union": 1055, "featureagglomer": [2, 86, 89, 446, 447, 1025, 1042, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "featureforg": 1032, "featurehash": [2, 57, 104, 187, 355, 356, 357, 371, 377, 422, 494, 588, 595, 596, 597, 598, 884, 1029, 1040, 1045, 1046, 1047, 1053, 1054], "featureheash": 358, "features_": [636, 998], "features__pca__n_compon": 108, "features__univ_select__k": 108, "features_idx": 315, "features_info": 191, "features_nam": [189, 1046], "features_samples_ratio": 69, "featureselector": 608, "featuresshould": 402, "featuretool": 1027, "featureunion": [2, 7, 43, 108, 374, 396, 405, 470, 636, 873, 998, 1028, 1032, 1034, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057], "featurewis": [2, 887], "feb": [73, 446, 460], "februari": [0, 416, 479, 1008, 1040, 1044, 1056], "fed": [47, 158, 365, 377, 422, 997, 1013, 1018, 1050], "feda": [1047, 1048], "feder": 1027, "federico": [1041, 1042, 1047, 1048, 1053], "federicopisanu": 1049, "feed": [47, 118, 218, 251, 358, 377, 380, 387, 394, 414, 422, 749, 884, 1009], "feedback": [272, 381, 382, 383, 397, 1027, 1031, 1047], "feedforward": [868, 869], "feedstock": 386, "feel": [64, 186, 315, 381, 382, 390, 414, 452, 1024], "feel_temp": [43, 191], "feghali": 1056, "fei": [570, 1014], "feld": [1043, 1055], "feldbauer": [1047, 1048, 1049, 1050, 1053], "feldman": [1041, 1046, 1047, 1048, 1049], "felip": [1052, 1053, 1054, 1055], "felix": [1041, 1046, 1047, 1049, 1051, 1052, 1053], "femal": [105, 190, 329, 387, 884, 885, 1018], "fenc": 387, "feng": [1049, 1051, 1052, 1053], "fenil": 1052, "fenx": 1047, "ferdman": 1056, "ferenc": 1032, "fernand": [1047, 1053, 1054], "fernandez": 1048, "fernando": [1044, 1051], "fern\u00e1ndez": 1053, "ferrando": 1049, "ferrari": 1047, "ferreira": [1047, 1052, 1053], "ferri": [423, 1008], "ferria": 1046, "ferrin": 1053, "ferriss": 1046, "ferr\u00e9": 1053, "ferr\u00edn": 1050, "fetal": 254, "fetch": [2, 51, 55, 158, 190, 235, 269, 289, 375, 376, 377, 382, 386, 387, 390, 419, 498, 503, 562, 563, 564, 565, 570, 571, 572, 573, 595, 596, 598, 1047, 1055], "fetch_": 1046, "fetch_20newsgroup": [2, 54, 57, 104, 276, 338, 356, 357, 358, 377, 495, 1044, 1049, 1057], "fetch_20newsgroups_vector": [2, 46, 232, 248, 377, 1039, 1049, 1051, 1056, 1057], "fetch_california_h": [2, 143, 148, 185, 186, 315, 326, 377, 395, 415, 1048, 1050, 1057], "fetch_covtyp": [2, 195, 254, 326, 377, 1048, 1051, 1053, 1057], "fetch_fil": [2, 52, 1058], "fetch_kddcup99": [2, 254, 377, 1046, 1047, 1048, 1051, 1052, 1057], "fetch_lfw_pair": [2, 377, 1044, 1054, 1057], "fetch_lfw_peopl": [2, 45, 377, 1054, 1057], "fetch_mldata": 1047, "fetch_olivetti_fac": [2, 85, 123, 145, 253, 377, 1047, 1048, 1049, 1057], "fetch_openml": [2, 43, 44, 52, 105, 109, 147, 153, 158, 179, 190, 191, 192, 217, 225, 233, 235, 245, 254, 258, 269, 289, 292, 294, 295, 312, 321, 324, 328, 331, 376, 386, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "fetch_rcv1": [2, 377, 1044, 1048, 1057], "fetch_species_distribut": [2, 50, 308, 1048, 1057], "fetcher": [375, 1044, 1046, 1055], "feth": 1039, "feurer": [1042, 1047], "fevott": [419, 545, 547, 554], "few": [0, 46, 54, 57, 74, 81, 87, 127, 147, 153, 177, 180, 181, 206, 215, 217, 219, 235, 250, 251, 260, 277, 278, 282, 307, 312, 315, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 352, 358, 369, 377, 378, 379, 382, 384, 395, 397, 405, 408, 411, 412, 414, 418, 419, 421, 423, 424, 443, 455, 568, 569, 662, 699, 702, 904, 955, 1004, 1005, 1007, 1008, 1011, 1012, 1021, 1023, 1024, 1032, 1045, 1055, 1057], "fewer": [43, 53, 63, 90, 137, 146, 148, 217, 369, 383, 414, 423, 424, 454, 467, 548, 601, 703, 841, 959, 1004, 1009, 1011, 1044, 1045, 1046], "fewest": [274, 634], "ff": 390, "ff0000": [67, 303, 310], "ff3333": 121, "ff7216": 121, "ff7f00": [79, 97, 244], "ff9c34": [94, 99], "ffaaaa": 303, "ffc107": 319, "fft": 647, "fhaselbeck": 1051, "fhoang7": 1048, "fhr": 254, "fi": 882, "fibins": [1047, 1048], "fidel": 53, "fidor": 1055, "fiedler": 1045, "fiegel": [1051, 1052, 1054], "field": [172, 235, 379, 411, 414, 415, 422, 470, 505, 508, 624, 1004, 1006, 1015, 1023, 1031, 1040], "fifth": [250, 1001], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 80, 88, 90, 92, 95, 99, 101, 107, 111, 113, 118, 120, 123, 128, 129, 133, 137, 143, 144, 147, 148, 150, 151, 153, 155, 156, 158, 160, 177, 183, 185, 191, 193, 195, 198, 204, 208, 211, 212, 214, 215, 217, 218, 221, 225, 230, 232, 235, 237, 238, 239, 240, 241, 242, 245, 247, 254, 255, 265, 269, 270, 271, 272, 275, 276, 277, 278, 281, 284, 285, 286, 288, 289, 294, 295, 297, 299, 300, 308, 311, 312, 315, 316, 317, 319, 320, 321, 324, 328, 329, 342, 349, 351, 352, 353, 354, 356, 357, 358, 360, 378, 389], "fig1": 102, "fig2": 102, "fig_num": 214, "figaspect": 319, "fight": [74, 221, 1032], "fighter": 104, "fignum": 350, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 101, 107, 109, 113, 115, 117, 118, 120, 121, 123, 126, 127, 128, 129, 132, 133, 137, 139, 140, 147, 148, 149, 150, 151, 153, 156, 158, 159, 167, 176, 178, 182, 183, 185, 186, 190, 191, 193, 195, 197, 198, 201, 202, 207, 211, 214, 215, 216, 217, 218, 219, 221, 223, 225, 228, 231, 233, 235, 237, 238, 239, 241, 242, 244, 245, 247, 249, 252, 253, 254, 255, 260, 262, 263, 266, 269, 270, 271, 272, 277, 278, 279, 282, 284, 285, 288, 289, 290, 294, 295, 297, 298, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 328, 329, 334, 336, 343, 345, 349, 350, 351, 352, 353, 354, 356, 357, 358, 378, 925], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 111, 115, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 139, 140, 149, 150, 151, 152, 153, 156, 157, 161, 163, 165, 167, 168, 171, 175, 176, 177, 178, 181, 182, 186, 190, 191, 192, 193, 197, 202, 205, 207, 210, 211, 214, 216, 218, 219, 223, 228, 232, 233, 234, 239, 240, 241, 244, 248, 249, 250, 252, 253, 255, 260, 262, 263, 266, 268, 274, 279, 280, 290, 300, 304, 305, 308, 310, 313, 315, 317, 318, 322, 324, 326, 334, 335, 336, 343, 345, 350, 361, 362, 363, 382, 414, 420, 421, 422, 424, 444, 638, 639, 704, 705, 707, 708, 709, 813, 830, 925, 997, 1001, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1022, 1023, 1024, 1052], "figure_": [68, 191, 255, 324, 326, 389, 444, 638, 639, 704, 705, 707, 708, 709, 813, 830], "figure_titl": 147, "filali": 1047, "file": [2, 47, 51, 52, 68, 83, 356, 357, 369, 370, 371, 376, 377, 379, 380, 385, 386, 387, 388, 394, 408, 415, 419, 493, 498, 500, 501, 503, 510, 515, 516, 541, 586, 587, 595, 596, 598, 923, 1011, 1024, 1029, 1031, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1058], "file_1": 510, "file_2": 510, "file_42": 510, "file_43": 510, "file_44": 510, "file_id": 376, "file_path": 498, "filenam": [2, 47, 55, 338, 377, 382, 388, 408, 494, 498, 507, 510, 511, 514, 595, 596, 598, 1039, 1044, 1047, 1048], "filesystem": [390, 400, 1052], "filho": 412, "filip": [1056, 1057], "filipj8": [1046, 1047], "fill": [70, 146, 163, 192, 270, 300, 361, 396, 415, 419, 522, 534, 545, 547, 554, 594, 637, 923, 925, 998, 1011, 1024], "fill_between": [52, 150, 153, 163, 174, 179, 181, 183, 197, 198, 235, 275, 277, 278, 279, 285, 813, 830], "fill_between_": [813, 830], "fill_between_kw": [813, 830], "fill_betweenx": 95, "fill_diagon": [193, 240], "fill_legend": 235, "fill_valu": [186, 246, 256, 325, 428, 431, 437, 438, 634, 637, 1018, 1047, 1055, 1056], "fillna": [235, 254], "filo": [1039, 1042], "filter": [2, 18, 47, 54, 81, 82, 107, 223, 235, 273, 275, 297, 356, 370, 377, 388, 391, 414, 422, 454, 494, 495, 510, 595, 598, 602, 603, 604, 605, 606, 607, 781, 846, 947, 972, 1010, 1011, 1049], "filter_param": 781, "filtered_cv_result": 273, "filterwarn": [79, 97, 232, 311, 312, 382, 1018], "final": [2, 43, 52, 63, 64, 70, 75, 77, 90, 104, 105, 113, 115, 118, 128, 137, 138, 140, 142, 147, 148, 151, 158, 161, 169, 179, 186, 189, 191, 193, 195, 197, 202, 204, 206, 214, 217, 219, 234, 235, 238, 244, 258, 264, 269, 273, 281, 292, 295, 321, 322, 324, 325, 345, 349, 369, 371, 377, 380, 382, 383, 384, 386, 395, 396, 411, 412, 414, 415, 418, 421, 422, 423, 443, 448, 453, 454, 458, 465, 468, 470, 543, 562, 563, 574, 575, 577, 601, 634, 654, 660, 666, 686, 697, 701, 726, 807, 839, 840, 871, 872, 908, 911, 997, 998, 1000, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1021, 1032, 1044, 1047, 1048, 1049, 1050, 1052], "final_estim": [158, 324, 421, 574, 575], "final_estimator_": [574, 575], "final_estimatorridgecv": 158, "final_lay": 421, "final_layer_gbr": 421, "final_layer_rfr": 421, "final_step": 77, "financ": [269, 1009], "financi": [0, 51, 414, 421, 1004], "find": [2, 43, 44, 45, 51, 55, 64, 75, 81, 82, 83, 84, 87, 88, 90, 92, 100, 107, 113, 114, 123, 125, 127, 128, 133, 148, 158, 174, 178, 180, 182, 191, 202, 204, 206, 219, 225, 237, 239, 241, 242, 247, 254, 265, 269, 274, 275, 276, 286, 288, 298, 303, 304, 305, 320, 324, 330, 332, 347, 348, 349, 352, 356, 357, 360, 370, 379, 380, 382, 383, 384, 387, 388, 391, 394, 395, 396, 397, 402, 411, 413, 414, 416, 417, 419, 421, 422, 423, 425, 447, 450, 451, 452, 456, 457, 458, 459, 468, 538, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 565, 572, 589, 596, 617, 618, 654, 657, 660, 661, 662, 663, 665, 666, 678, 695, 714, 736, 737, 745, 789, 790, 791, 794, 795, 801, 806, 807, 821, 829, 853, 854, 855, 857, 859, 861, 862, 863, 884, 885, 890, 903, 904, 905, 919, 920, 922, 934, 954, 955, 957, 997, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1014, 1018, 1022, 1023, 1024, 1026, 1028, 1031, 1032, 1039, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1057], "findal": 358, "fine": [43, 72, 146, 172, 221, 233, 266, 273, 349, 362, 363, 379, 386, 396, 422, 452, 955, 1011, 1014, 1023, 1028, 1049], "finer": [43, 52, 72, 297, 345, 370, 414, 418, 997, 1011, 1049], "finfo": [240, 477, 478, 484, 613, 657, 658, 661, 662, 663, 689, 690, 1054], "finish": [172, 263, 1005], "finit": [64, 260, 266, 369, 377, 396, 474, 545, 558, 589, 613, 616, 617, 618, 665, 735, 785, 792, 804, 832, 909, 935, 936, 937, 938, 1004, 1007, 1008, 1032, 1046, 1047, 1051, 1053, 1054], "finn": [1047, 1048], "firefox": 1018, "fireplac": 147, "fireplacequ": 147, "firm": [51, 414], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 90, 91, 93, 96, 99, 100, 101, 102, 104, 105, 106, 109, 113, 117, 118, 120, 128, 131, 137, 138, 142, 144, 145, 146, 147, 148, 149, 151, 153, 155, 158, 159, 160, 161, 168, 169, 172, 174, 175, 176, 179, 180, 181, 182, 186, 189, 190, 191, 193, 195, 197, 199, 201, 206, 213, 214, 215, 218, 219, 225, 226, 231, 238, 241, 248, 249, 251, 252, 253, 255, 257, 258, 262, 266, 269, 270, 275, 277, 278, 282, 284, 286, 287, 288, 292, 294, 295, 297, 300, 304, 305, 306, 310, 312, 315, 317, 320, 321, 322, 325, 326, 335, 338, 341, 342, 345, 347, 356, 357, 358, 360, 361, 364, 365, 370, 371, 376, 377, 379, 380, 381, 382, 384, 386, 387, 388, 390, 394, 396, 408, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 426, 449, 452, 453, 456, 465, 466, 470, 478, 489, 493, 494, 496, 497, 499, 501, 504, 507, 509, 511, 515, 516, 517, 535, 540, 541, 545, 548, 560, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 589, 591, 595, 596, 597, 598, 600, 601, 608, 617, 618, 624, 628, 631, 638, 639, 640, 641, 653, 659, 666, 673, 675, 681, 683, 695, 702, 705, 706, 707, 709, 719, 723, 743, 749, 770, 771, 789, 801, 804, 805, 810, 811, 812, 813, 814, 819, 821, 828, 830, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 856, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 876, 884, 888, 889, 890, 892, 893, 900, 901, 913, 916, 919, 920, 921, 922, 924, 926, 932, 933, 937, 938, 939, 957, 959, 974, 978, 981, 993, 996, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1015, 1018, 1019, 1022, 1023, 1024, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "first_img_data": 514, "first_pca_compon": 320, "first_quart": 132, "first_week": 153, "firstli": [126, 369, 394, 664], "fisach": 1045, "fiscal": 0, "fischer": [1044, 1045], "fischler": 1004, "fischoff": 1051, "fish": 327, "fisher": [379, 421, 511, 643], "fisher1958": 421, "fisher_transform": 643, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 195, 196, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 240, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 292, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 369, 371, 374, 377, 379, 382, 385, 387, 388, 391, 394, 396, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 508, 516, 517, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 584, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 701, 704, 705, 707, 708, 709, 717, 718, 730, 739, 742, 757, 795, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 930, 931, 947, 964, 967, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "fit_": 1052, "fit_algorithm": [123, 538, 544, 1054, 1055], "fit_and_evalu": 357, "fit_and_plot_model": 320, "fit_and_scor": 225, "fit_data": 59, "fit_dur": 295, "fit_ecoc": 1043, "fit_grid_point": 1050, "fit_intercept": [46, 197, 198, 203, 222, 231, 244, 283, 322, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 911, 912, 918, 1004, 1022, 1043, 1047, 1048, 1049, 1051, 1052, 1053], "fit_inverse_transform": [44, 128, 542, 1048], "fit_ovo": 1043, "fit_ovr": 1043, "fit_param": [251, 396, 438, 443, 448, 451, 471, 539, 541, 543, 544, 546, 549, 550, 556, 562, 563, 574, 575, 576, 577, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 637, 642, 645, 646, 647, 648, 649, 672, 678, 813, 830, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 855, 860, 863, 867, 870, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 903, 904, 967, 1046, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058], "fit_path": [657, 661, 662, 663, 689, 690], "fit_predict": [57, 91, 92, 95, 244, 254, 302, 384, 396, 414, 432, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 475, 570, 684, 799, 800, 804, 805, 857, 863, 871, 915, 931, 1014, 1044, 1047, 1048, 1052, 1054, 1056], "fit_prior": [377, 846, 847, 848, 850], "fit_status_": [913, 914, 915, 916, 917], "fit_tim": [52, 93, 147, 206, 225, 277, 418, 834, 835], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 277, "fit_times_svm": 277, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 84, 87, 88, 93, 97, 120, 124, 127, 133, 156, 195, 208, 233, 235, 237, 238, 239, 240, 241, 242, 247, 248, 251, 252, 258, 295, 299, 311, 315, 316, 320, 321, 322, 324, 327, 329, 330, 331, 332, 345, 356, 357, 358, 365, 374, 377, 384, 387, 388, 396, 410, 415, 419, 422, 423, 430, 438, 448, 449, 451, 453, 455, 470, 472, 474, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 695, 696, 697, 698, 699, 703, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 909, 931, 944, 998, 1000, 1004, 1009, 1011, 1018, 1019, 1020, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1053, 1055, 1056, 1057], "fitfailedwarn": [2, 807, 810, 811, 813, 821, 830, 833, 834, 835, 838], "fitted_transform": [384, 470], "fittedcolumntransform": [158, 191], "fittedgridsearchcv": 256, "fittedpipelin": [158, 246, 256, 276, 289, 321, 325], "fittedrandomforestclassifi": 331, "fittedrandomizedsearchcv": 105, "fittedstackingregressor": 158, "fitter": 1024, "fitting_weight": 405, "fitzgerald": 1047, "fitzk": 1032, "five": [145, 153, 261, 269, 335, 338, 377, 538, 546, 552, 1005, 1011, 1023, 1032, 1039], "five_imag": 422, "fix": [2, 43, 47, 58, 62, 70, 81, 105, 132, 142, 143, 146, 151, 153, 174, 175, 179, 182, 190, 193, 202, 219, 235, 254, 266, 278, 288, 310, 324, 325, 326, 327, 328, 329, 330, 331, 332, 357, 369, 370, 376, 378, 380, 381, 382, 386, 390, 394, 396, 397, 405, 414, 415, 418, 419, 421, 422, 424, 458, 468, 478, 511, 519, 538, 544, 547, 549, 555, 556, 566, 567, 571, 572, 595, 598, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 660, 670, 675, 677, 691, 694, 698, 702, 714, 792, 804, 821, 828, 853, 854, 856, 859, 861, 862, 878, 881, 895, 919, 920, 930, 955, 974, 997, 1004, 1007, 1008, 1011, 1018, 1028, 1037, 1038, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [595, 598], "fixedthresholdclassifi": [2, 269, 413, 829, 1057, 1058], "fixm": [386, 396], "fixtur": [370, 382], "fkaren27": 1053, "flach": [412, 1008], "flach2008": 1008, "flach2015": 1008, "flag": [179, 251, 254, 331, 380, 382, 383, 385, 405, 410, 470, 617, 618, 634, 680, 682, 735, 792, 927, 928, 1023, 1045, 1049, 1050, 1052, 1053, 1054, 1055], "flair": 1010, "flak": 1054, "flake8": 586, "flanagan": [1048, 1049], "flander": 1057, "flat": [2, 78, 123, 191, 237, 238, 239, 273, 414, 421, 422, 446, 452, 454, 467, 516, 1015, 1039, 1040, 1055], "flat_grid": 249, "flatnonzero": [132, 204, 274, 283, 284, 788], "flatten": [54, 68, 240, 249, 273, 319, 342, 353, 388, 509, 576, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 860], "flatten_transform": [576, 1046], "flatter": [43, 62], "flavanoid": [48, 379], "flaviomorelli": 1049, "flavor": [382, 1011], "flavour": 421, "flaw": [396, 421], "flaxman": [1041, 1043], "fledg": [371, 422], "fleet": 43, "fleme": 1054, "flennerhag": 1047, "fletcher": [1004, 1039, 1043], "flexibl": [43, 62, 147, 185, 217, 288, 316, 342, 358, 389, 394, 408, 418, 424, 681, 911, 912, 930, 997, 1002, 1004, 1008, 1012, 1018, 1027, 1028, 1032, 1048, 1052], "flier": 49, "flink": 104, "flip": [127, 589, 749, 955, 1010, 1043, 1052], "flip_i": 522, "flip_sign": 955, "float": [2, 46, 49, 51, 76, 80, 81, 82, 83, 88, 95, 96, 100, 101, 102, 105, 126, 129, 165, 182, 190, 203, 207, 240, 269, 274, 275, 279, 283, 352, 358, 369, 376, 377, 382, 391, 396, 410, 413, 414, 415, 422, 423, 425, 426, 427, 431, 433, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 590, 591, 595, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 617, 618, 620, 621, 622, 623, 624, 626, 627, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 773, 776, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 821, 824, 827, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 871, 874, 877, 878, 884, 885, 887, 889, 891, 892, 893, 894, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 934, 935, 937, 938, 941, 952, 953, 970, 982, 988, 993, 998, 1008, 1009, 1011, 1012, 1018, 1023, 1024, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "float16": 1048, "float32": [55, 149, 240, 313, 329, 370, 377, 382, 383, 384, 396, 408, 410, 564, 565, 566, 567, 570, 571, 572, 573, 600, 601, 647, 648, 665, 706, 770, 876, 919, 920, 921, 922, 935, 983, 984, 985, 1024, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "float64": [45, 50, 52, 53, 83, 88, 105, 107, 149, 150, 151, 152, 163, 174, 190, 191, 250, 269, 283, 286, 328, 329, 330, 345, 370, 376, 382, 383, 384, 396, 422, 427, 464, 477, 478, 481, 484, 485, 486, 503, 504, 515, 516, 523, 524, 525, 527, 538, 544, 546, 549, 550, 552, 553, 555, 588, 589, 596, 598, 604, 648, 655, 657, 658, 661, 662, 663, 664, 665, 670, 676, 677, 680, 682, 687, 689, 690, 694, 701, 706, 713, 714, 715, 716, 717, 719, 723, 724, 726, 727, 728, 730, 732, 733, 736, 737, 738, 742, 743, 744, 745, 746, 747, 750, 755, 760, 762, 763, 790, 791, 793, 794, 795, 800, 801, 802, 821, 876, 884, 885, 892, 904, 913, 914, 916, 917, 920, 922, 932, 935, 937, 953, 978, 981, 983, 984, 985, 1023, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "float_info": 57, "floch": 1056, "floor": 53, "floor_x": 53, "flore": 1052, "florian": [1032, 1039, 1043, 1045, 1049, 1056], "florin": 1057, "flow": 384, "flowchart": [402, 418], "flower": [120, 131, 284, 513, 514, 1008, 1027], "floyd": [377, 695, 1005], "floydsoft": 1043, "fluctuat": [51, 95, 153, 217, 282, 1047], "flush": 225, "fly": [149, 387, 390, 515, 516, 589, 1039, 1041, 1048], "flyingdutchman23": 1052, "flyingimmidev": 1039, "flynn": [1052, 1054], "fmax": 235, "fmi": [414, 738], "fmin_l_bfgs_b": [617, 618], "fmt": [96, 228], "fn": [332, 414, 719, 725, 736, 737, 738, 789, 790, 791, 794, 1008, 1009], "fn_c": 284, "fna": [172, 379], "fnlwgt": [331, 503], "fnr": [272, 705, 734], "fo": 422, "focu": [43, 48, 123, 137, 174, 266, 305, 369, 387, 412, 421, 560, 561, 566, 568, 569, 685, 1005, 1011, 1018, 1027, 1028, 1031], "focus": [62, 111, 206, 292, 377, 382, 394, 1005, 1018, 1027], "fokow": 1056, "fold": [2, 43, 102, 108, 111, 143, 146, 149, 163, 171, 190, 206, 262, 269, 270, 271, 273, 275, 276, 278, 285, 289, 322, 337, 352, 365, 377, 382, 385, 386, 395, 396, 405, 413, 414, 423, 443, 478, 500, 543, 574, 575, 601, 609, 654, 658, 660, 662, 666, 668, 670, 672, 680, 682, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 842, 845, 892, 913, 916, 997, 1004, 1008, 1018, 1023, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1056], "folder": [2, 106, 377, 380, 382, 386, 390, 400, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 1011], "folkman": 1046, "folloni": 1050, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 80, 89, 90, 92, 98, 102, 105, 106, 121, 123, 132, 137, 140, 150, 151, 155, 167, 179, 180, 185, 189, 190, 191, 192, 193, 197, 199, 202, 204, 206, 215, 217, 218, 232, 235, 245, 251, 252, 254, 266, 269, 275, 284, 285, 289, 292, 315, 321, 322, 324, 325, 327, 328, 329, 332, 342, 352, 356, 357, 358, 360, 364, 365, 369, 370, 376, 377, 379, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 400, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 431, 433, 435, 436, 437, 438, 443, 447, 449, 451, 452, 453, 454, 455, 459, 467, 469, 470, 471, 474, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 522, 541, 545, 547, 548, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 638, 640, 641, 653, 659, 665, 666, 677, 678, 687, 699, 701, 706, 712, 716, 720, 725, 795, 826, 848, 853, 854, 855, 857, 859, 861, 862, 863, 870, 874, 875, 876, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 909, 911, 912, 916, 919, 920, 921, 922, 926, 933, 949, 950, 954, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1031, 1036, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "folwarczn\u00fd": 1056, "fonari": [1051, 1052], "fond": 1032, "fondat": 1032, "font": [150, 206, 231, 249, 923, 925], "font_manag": [114, 301, 344], "font_prop": 114, "font_siz": 319, "fontdict": [54, 74], "fontnam": [923, 1052], "fontproperti": [114, 301, 344], "fontsiz": [44, 47, 49, 54, 70, 85, 95, 126, 146, 167, 177, 178, 180, 183, 191, 198, 207, 216, 228, 238, 239, 263, 270, 279, 280, 281, 286, 287, 313, 319, 351, 925], "fontweight": [95, 212], "foo": [384, 588, 1012], "food": [0, 379], "foot": 1026, "footer": [54, 104, 276, 356, 357, 377, 494, 495], "footnot": [1015, 1027], "footprint": [326, 329, 369, 371, 414, 419, 548, 562, 563, 564, 565, 570, 571, 572, 573, 1041, 1044, 1045, 1050, 1051, 1054], "fopenmp": [380, 383], "foral": [414, 424, 620], "forbid": [414, 421], "forbidden": [191, 421], "forc": [137, 174, 221, 288, 295, 319, 356, 376, 380, 409, 418, 421, 456, 463, 470, 473, 503, 613, 616, 653, 654, 659, 660, 664, 667, 668, 669, 670, 679, 680, 681, 688, 691, 694, 761, 785, 788, 829, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 913, 914, 915, 916, 917, 935, 937, 938, 1018, 1034, 1044, 1047, 1048, 1049, 1051, 1052, 1053, 1055], "force_all_finit": [785, 935, 937, 938, 1050, 1053, 1058], "force_alpha": [846, 847, 848, 850, 1054], "force_finit": [613, 616, 735, 792, 1008, 1053], "force_int_remainder_col": [470, 473], "force_writ": [937, 938, 1057], "ford": 51, "forecast": [42, 43, 150, 153, 173, 181, 187, 219, 275, 412, 413, 424, 498, 503, 569, 618, 622, 629, 630, 632, 708, 749, 752, 753, 755, 797, 828, 833, 834, 837, 1008, 1027, 1029], "foreground": [75, 101], "foreign_work": 269, "foreman": 1046, "forese": 394, "forest": [2, 14, 50, 64, 67, 136, 142, 146, 148, 149, 151, 152, 153, 154, 156, 158, 161, 185, 187, 188, 195, 244, 272, 274, 276, 308, 326, 356, 363, 365, 375, 395, 396, 412, 423, 469, 470, 496, 497, 502, 503, 505, 522, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 637, 641, 807, 812, 837, 844, 871, 885, 915, 919, 920, 921, 997, 998, 1009, 1016, 1024, 1028, 1029, 1030, 1034, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1056], "forest_import": 144, "forestclassifi": 1044, "forestcolumntransform": 158, "forestcov": 254, "forg": [324, 325, 326, 327, 328, 329, 330, 331, 332, 370, 383, 385, 386, 390, 400, 401], "forget": [191, 365, 370, 376, 386, 394, 419, 1005], "forget_factor": [419, 545], "forgiv": 741, "forina": 379, "fork": [380, 382, 390, 394], "forkserv": 394, "form": [2, 43, 48, 57, 68, 77, 95, 102, 123, 161, 181, 182, 187, 190, 250, 251, 266, 275, 334, 365, 376, 379, 382, 384, 386, 396, 397, 411, 414, 417, 418, 419, 420, 421, 422, 424, 426, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 706, 804, 805, 806, 807, 810, 811, 812, 815, 817, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 943, 964, 967, 997, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1018, 1023, 1027, 1045, 1049, 1051], "formal": [396, 397, 414, 421, 851, 852, 1005, 1008, 1009, 1012], "format": [2, 47, 50, 51, 52, 59, 83, 89, 93, 96, 104, 113, 123, 132, 140, 146, 149, 151, 163, 167, 168, 195, 198, 203, 217, 235, 258, 270, 280, 282, 283, 286, 290, 299, 300, 303, 304, 319, 324, 332, 351, 360, 364, 369, 375, 381, 382, 384, 385, 390, 391, 395, 396, 408, 415, 418, 421, 422, 438, 448, 449, 451, 453, 455, 456, 458, 465, 470, 474, 488, 489, 490, 491, 493, 495, 503, 504, 505, 515, 516, 517, 530, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 558, 564, 565, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 594, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 653, 659, 665, 666, 667, 669, 673, 674, 675, 683, 684, 685, 695, 696, 699, 704, 718, 720, 727, 746, 747, 758, 775, 798, 799, 840, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 898, 903, 904, 909, 911, 923, 937, 938, 961, 969, 973, 983, 984, 985, 986, 987, 988, 998, 1008, 1011, 1016, 1018, 1019, 1022, 1024, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1054, 1056, 1057, 1058], "format_func": 300, "formatter_result": 93, "former": [51, 358, 413, 421, 422, 572, 809, 816, 825, 1010, 1039, 1045, 1048], "formerli": [221, 1040, 1043, 1045, 1046], "formul": [137, 174, 183, 221, 284, 382, 414, 416, 419, 422, 424, 427, 481, 556, 557, 564, 571, 657, 658, 661, 662, 663, 665, 666, 672, 677, 770, 776, 805, 913, 916, 919, 921, 1004, 1008, 1009, 1012, 1018, 1030, 1034, 1056], "formula": [111, 112, 411, 414, 416, 427, 479, 481, 523, 524, 525, 597, 650, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 683, 685, 711, 736, 737, 762, 771, 828, 997, 1002, 1004, 1008, 1013, 1014, 1018, 1022, 1044, 1046, 1048], "forrest": [1050, 1051], "forsal": [57, 358, 377], "forsyth": 1047, "forth": 390, "fortin": [1039, 1041, 1042, 1043], "fortran": [426, 548, 653, 654, 659, 660, 667, 668, 669, 670, 672, 688, 691, 692, 693, 937, 938, 1039, 1042, 1043, 1047], "fortun": [388, 421, 1052, 1053], "forward": [46, 137, 172, 251, 326, 369, 382, 405, 408, 423, 515, 516, 546, 550, 560, 566, 567, 609, 675, 692, 693, 871, 875, 1004, 1028, 1051], "foster": [0, 1047], "fouchet": 1045, "found": [0, 45, 52, 57, 58, 59, 133, 144, 171, 174, 178, 180, 182, 221, 245, 252, 269, 273, 276, 277, 278, 288, 320, 324, 327, 329, 330, 345, 358, 369, 371, 376, 379, 381, 382, 384, 394, 396, 397, 408, 411, 413, 414, 417, 418, 419, 421, 422, 424, 439, 447, 450, 451, 465, 478, 564, 565, 566, 567, 571, 572, 595, 597, 617, 618, 635, 643, 654, 658, 660, 662, 668, 670, 672, 678, 679, 681, 683, 685, 694, 695, 719, 726, 807, 810, 811, 821, 829, 848, 853, 854, 860, 882, 884, 885, 919, 920, 921, 922, 926, 934, 991, 995, 997, 1000, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1018, 1022, 1023, 1024, 1028, 1039, 1042, 1043, 1046, 1047, 1049, 1053, 1056], "foundat": [0, 158, 269, 382, 412, 1011], "founder": 1032, "fouqu": 1039, "fouquet": [1055, 1056], "four": [64, 168, 182, 195, 200, 218, 262, 263, 269, 335, 342, 378, 382, 396, 564, 571, 726, 919, 921, 943, 1004, 1006, 1007, 1008, 1018, 1026], "fourier": [2, 23, 249, 645, 646, 647, 648, 649, 765, 766, 1000], "fourier_approx_svm": 249, "fourier_scor": 249, "fourier_tim": 249, "fournier": 1048, "fourth": 146, "fowkl": [414, 738], "fowlk": [738, 1045], "fowlkes_mallows_scor": [2, 414, 1008, 1045, 1047], "fox": [332, 422, 1055], "fp": [47, 269, 332, 414, 719, 725, 736, 737, 738, 789, 790, 791, 794, 1008], "fp_c": 284, "fpgawesom": 1053, "fpr": [2, 50, 245, 254, 269, 272, 284, 285, 389, 599, 603, 705, 709, 713, 734, 796, 1008, 1036, 1039, 1055], "fpr_a": 284, "fpr_b": 284, "fpr_grid": 284, "fpr_score": 269, "fr": [538, 544, 665, 671, 692, 693, 765, 766, 1006, 1008], "fraa\u00df": 1056, "frac": [63, 113, 114, 137, 275, 282, 284, 327, 411, 412, 414, 416, 419, 420, 421, 422, 424, 437, 469, 471, 488, 489, 490, 561, 563, 565, 567, 569, 572, 575, 577, 618, 622, 626, 629, 630, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 685, 686, 687, 703, 736, 737, 762, 776, 844, 845, 854, 862, 869, 912, 914, 917, 920, 922, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1020, 1022, 1023, 1024], "frac12": [421, 1000], "fractal": [172, 379], "fraction": [2, 43, 62, 64, 150, 153, 217, 225, 235, 269, 282, 352, 357, 412, 418, 421, 444, 445, 455, 456, 462, 463, 522, 534, 564, 565, 566, 567, 571, 572, 573, 597, 600, 609, 673, 674, 675, 678, 683, 684, 685, 710, 728, 729, 730, 731, 741, 801, 803, 809, 813, 835, 836, 850, 878, 913, 914, 915, 919, 920, 921, 922, 973, 1004, 1008, 1011, 1015, 1016, 1018, 1023, 1024, 1028, 1040, 1041, 1042, 1053, 1056], "fragil": 662, "fragment": [90, 126], "frame": [43, 105, 153, 179, 190, 191, 217, 269, 321, 331, 377, 382, 394, 397, 495, 496, 497, 499, 503, 507, 508, 509, 511, 512, 517, 1051], "frameon": [46, 223], "framework": [275, 369, 384, 394, 396, 408, 414, 644, 695, 804, 1004, 1005, 1012, 1028, 1032, 1039, 1045], "fran": [1051, 1052, 1053], "franc": [321, 771], "francesco": [1051, 1054], "franci": [543, 665, 1004, 1045], "francia": 1053, "francidona": 1049, "francisco": [422, 1020], "franck": [1054, 1056, 1057], "franco": 1049, "francoi": [1039, 1052], "francoisgoupil": 1053, "frank": [275, 842, 1009, 1044, 1048, 1049], "frankhui": 1047, "franki": 1052, "franz": 1047, "franziska": 1050, "fran\u00e7oi": [0, 366, 1042], "fraud": [269, 332, 1004, 1032], "fraudul": [269, 1004, 1032], "fraudulent_accept": 269, "fraudulent_refus": 269, "fred": [104, 1039, 1052], "freddi": 1058, "freder": 1049, "frederick": 1052, "fredrik": 1047, "free": [0, 44, 64, 90, 179, 180, 186, 216, 265, 315, 376, 381, 382, 383, 390, 394, 400, 422, 458, 616, 678, 867, 917, 997, 1000, 1004, 1008, 1028, 1047], "freebsd": 385, "freedom": [43, 125, 179, 204, 206, 208, 275, 548, 663, 804, 1004, 1042], "freeland": 1054, "freestand": 384, "freez": [386, 400, 408, 1028, 1032, 1047], "frei": [73, 446, 460, 1049], "freija": 1047, "freita": [1044, 1046, 1047], "frellwan": 1052, "fremtpl2": 235, "fremtpl2freq": 235, "fremtpl2sev": 235, "french": [235, 321], "freq": [190, 202, 358], "frequenc": [57, 64, 174, 191, 202, 211, 217, 248, 325, 326, 356, 357, 358, 377, 394, 412, 418, 419, 421, 422, 423, 558, 564, 566, 567, 568, 571, 595, 596, 597, 598, 611, 665, 666, 671, 673, 675, 681, 682, 683, 692, 693, 840, 875, 884, 885, 911, 913, 916, 919, 921, 943, 1004, 1005, 1010, 1018, 1022, 1024, 1041, 1043, 1044, 1050, 1057], "frequent": [72, 137, 186, 278, 284, 285, 289, 357, 379, 382, 422, 558, 597, 637, 861, 884, 885, 888, 900, 998, 1000, 1008, 1022, 1028, 1057], "frequentist": 535, "fresh": [545, 1028, 1049], "fresh_restart": 545, "fresh_restarts_max_it": 545, "freund": [421, 560, 561], "fri": [43, 153, 191, 377], "frid": [1032, 1042], "friedman": [2, 140, 141, 152, 274, 416, 418, 421, 484, 523, 524, 525, 527, 565, 566, 567, 572, 600, 601, 841, 919, 920, 922, 1002, 1004, 1009, 1015, 1024], "friedman2001": 421, "friedman2002": 421, "friedman_ms": [565, 566, 567, 572, 920, 922, 1024, 1055, 1056], "friend": [428, 1043], "friendli": [123, 370, 382, 390, 419, 904, 1020, 1021, 1027, 1028], "fring": [87, 414], "fritsch": [0, 404, 1039, 1040, 1042], "fritzk": 1054, "fro": [419, 545, 547, 554, 700, 1004], "fro_2": [668, 670], "frobeniu": [54, 126, 449, 453, 465, 475, 476, 477, 478, 479, 480, 481, 482, 538, 544, 545, 547, 552, 553, 554, 1004, 1046], "frobenius_norm": 695, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 371, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 968, 969, 970, 971, 972, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "from_dtyp": [43, 147, 269, 331, 421, 568, 569, 1056], "from_estim": [45, 48, 62, 64, 66, 67, 70, 91, 139, 142, 153, 154, 155, 159, 191, 201, 209, 226, 231, 250, 255, 257, 268, 269, 272, 277, 278, 282, 285, 288, 298, 303, 306, 320, 324, 325, 326, 327, 329, 330, 331, 332, 341, 342, 343, 344, 346, 347, 349, 361, 389, 412, 444, 638, 639, 640, 704, 705, 707, 708, 709, 725, 734, 789, 791, 794, 795, 796, 813, 830, 1003, 1008, 1015, 1036, 1052, 1053, 1054, 1055, 1056, 1057], "from_predict": [43, 52, 68, 109, 158, 190, 254, 271, 282, 284, 327, 334, 356, 389, 444, 638, 704, 705, 707, 708, 709, 725, 734, 789, 791, 794, 795, 796, 1008, 1036, 1052, 1053, 1054, 1055, 1056, 1057], "frombuffer_empti": 1046, "fromkei": [276, 926], "fromnumer": 388, "front": 1046, "frontal": 377, "frontend": 388, "frontier": [48, 231, 301, 344, 1014], "frozen": 384, "frozentransform": 384, "frsi": 1047, "fruit": [382, 1009], "fr\u00e9minvil": [1056, 1057], "fs1995": 421, "ftfy": 422, "ftorres16": [1053, 1054], "ftp": [172, 379, 689, 690], "ftwo_scor": [749, 1008], "fu": [665, 1043], "fuck": [1051, 1052], "fuction": 991, "fuent": [1040, 1041], "fugled": 1056, "fujikawa": 1046, "fukatani": 1046, "fulfil": [382, 414, 421, 807, 810, 811, 821, 871, 875, 1004], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 369, 370, 371, 375, 377, 380, 382, 384, 387, 390, 394, 396, 397, 400, 410, 414, 416, 418, 419, 422, 428, 431, 437, 438, 447, 451, 453, 455, 465, 494, 495, 498, 499, 503, 504, 507, 508, 509, 510, 511, 512, 514, 517, 542, 544, 548, 557, 566, 567, 574, 575, 639, 655, 657, 661, 676, 687, 728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 797, 798, 804, 805, 818, 848, 943, 997, 1004, 1007, 1010, 1011, 1015, 1018, 1021, 1028, 1039, 1043, 1045, 1047, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058], "full_data": 197, "full_lik": 100, "full_model": 297, "full_scor": 186, "fulli": [52, 79, 90, 144, 150, 369, 376, 377, 382, 396, 414, 420, 421, 423, 449, 453, 564, 565, 571, 572, 919, 920, 921, 922, 923, 925, 998, 1004, 1013, 1021, 1027, 1052, 1053], "fullpap": 1021, "fultz": 1052, "fun": [426, 540, 1032], "fun_arg": [426, 540], "func": [50, 109, 142, 190, 198, 235, 308, 382, 415, 471, 706, 875, 1018, 1043, 1045, 1047, 1048, 1056, 1057], "func_metr": 635, "func_min": [617, 618], "funcformatt": 300, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 81, 88, 89, 90, 92, 94, 101, 104, 105, 106, 109, 123, 126, 128, 132, 135, 142, 143, 147, 148, 149, 150, 151, 152, 153, 163, 168, 171, 172, 174, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 193, 196, 197, 200, 202, 210, 212, 213, 214, 215, 217, 218, 223, 224, 225, 230, 233, 234, 235, 237, 245, 247, 250, 251, 254, 255, 257, 258, 265, 267, 269, 273, 275, 276, 277, 278, 283, 284, 288, 290, 292, 295, 310, 313, 315, 322, 324, 325, 327, 328, 330, 332, 337, 339, 342, 343, 344, 345, 346, 347, 349, 352, 354, 356, 357, 361, 365, 369, 370, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 394, 395, 396, 400, 405, 408, 410, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 429, 431, 433, 436, 437, 438, 443, 446, 449, 450, 451, 453, 454, 456, 458, 460, 463, 464, 465, 466, 467, 470, 471, 474, 475, 477, 478, 480, 484, 494, 495, 497, 499, 502, 503, 504, 510, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 579, 582, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 622, 626, 627, 629, 630, 634, 635, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 713, 718, 719, 723, 726, 728, 729, 730, 731, 735, 739, 741, 742, 745, 747, 748, 749, 757, 762, 764, 768, 769, 770, 772, 775, 778, 781, 785, 786, 787, 788, 789, 790, 792, 796, 799, 800, 801, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 883, 887, 888, 889, 890, 891, 892, 895, 897, 900, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 935, 945, 947, 948, 949, 954, 955, 966, 967, 973, 974, 977, 978, 981, 982, 991, 996, 997, 998, 999, 1001, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1024, 1027, 1028, 1029, 1030, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "functiontransform": [2, 43, 104, 142, 217, 235, 338, 408, 470, 471, 1018, 1044, 1045, 1047, 1052, 1053, 1054, 1056, 1058], "functiontransformerfunctiontransform": 142, "functool": 235, "fundament": [72, 84, 114, 357, 386, 394, 395, 417, 503, 545, 547, 554, 715, 1004, 1008], "funder": 0, "fung": 418, "funnel": [45, 500, 501], "funni": 104, "furlanello": 750, "furrer": 1056, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 105, 111, 118, 123, 140, 146, 148, 171, 174, 179, 190, 192, 197, 202, 237, 242, 251, 269, 272, 275, 276, 282, 329, 345, 357, 364, 369, 382, 394, 396, 408, 413, 414, 416, 419, 421, 422, 424, 450, 458, 468, 522, 539, 542, 589, 621, 629, 635, 665, 666, 673, 674, 675, 683, 684, 685, 698, 702, 744, 781, 785, 788, 799, 800, 847, 853, 854, 861, 862, 889, 891, 911, 913, 916, 955, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1022, 1023, 1048, 1052], "furthermor": [43, 52, 72, 143, 191, 192, 254, 255, 257, 295, 356, 357, 369, 371, 389, 414, 419, 421, 422, 569, 597, 613, 626, 711, 743, 762, 764, 802, 911, 1004, 1016, 1042, 1046], "fuse": [383, 1045, 1055], "fusion": 394, "futur": [0, 52, 179, 218, 257, 327, 330, 382, 386, 396, 397, 408, 418, 422, 503, 541, 642, 930, 977, 1009, 1023, 1024, 1032, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "futurewarn": [382, 390, 1046, 1047, 1048, 1050, 1052, 1055, 1056], "fuxin": 649, "fw": 695, "fwe": 599, "f\u00e9lix": [1039, 1041, 1042, 1043, 1047], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 88, 90, 100, 104, 115, 118, 130, 137, 140, 149, 150, 175, 176, 177, 182, 186, 189, 190, 200, 205, 217, 218, 219, 221, 235, 242, 250, 251, 260, 269, 275, 279, 280, 286, 294, 301, 320, 332, 337, 351, 352, 358, 365, 369, 374, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 394, 396, 405, 408, 410, 412, 414, 416, 418, 419, 421, 422, 423, 424, 426, 443, 449, 450, 453, 455, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 510, 535, 538, 540, 541, 544, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 600, 601, 604, 611, 617, 618, 624, 629, 630, 637, 640, 641, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 693, 697, 699, 704, 723, 727, 735, 745, 747, 770, 785, 792, 795, 806, 808, 809, 810, 811, 813, 814, 816, 825, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 858, 860, 861, 862, 863, 867, 868, 869, 871, 874, 876, 877, 878, 881, 883, 884, 887, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 954, 955, 967, 997, 998, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1022, 1023, 1024, 1028, 1031, 1032, 1039, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "g0g0gadget": 1049, "g2015": 1015, "g_": 414, "g_i": [421, 656], "g_j": [655, 676, 687], "ga": 0, "gaaca": 182, "gaatattaggccga": 394, "gabor": 1053, "gabriel": [1047, 1048, 1049, 1052, 1053], "gael": [0, 403, 1026, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "gaido": 1048, "gaidon": 1039, "gain": [2, 88, 153, 239, 282, 295, 297, 331, 332, 335, 356, 357, 364, 381, 388, 390, 421, 503, 539, 564, 568, 569, 571, 733, 763, 804, 805, 840, 919, 921, 1009, 1013, 1021, 1024, 1042, 1046, 1049], "gain_matrix": 269, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 377, 382, 384, 396, 400, 407, 1029, 1039, 1043, 1046], "galli": 1051, "gallopoulo": 419, "galvez": 1044, "gambl": 51, "gameiro": 1053, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 128, 159, 165, 195, 231, 244, 249, 250, 273, 275, 277, 280, 286, 326, 334, 335, 337, 339, 342, 344, 345, 348, 349, 351, 354, 417, 419, 421, 424, 458, 542, 569, 626, 627, 646, 647, 648, 650, 651, 652, 655, 687, 692, 698, 731, 754, 759, 766, 773, 782, 783, 784, 804, 818, 821, 906, 907, 908, 913, 914, 915, 916, 917, 997, 1000, 1004, 1006, 1021, 1023, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1053, 1054, 1055], "gamma_": [542, 1055], "gamma_0": [260, 266], "gamma_2d_rang": 345, "gamma_bound": 627, "gamma_k": 417, "gamma_rang": 345, "gammaregressor": [2, 235, 325, 328, 687, 1004, 1050, 1053, 1054, 1058], "gandenberg": 1048, "ganesh": [1044, 1056], "ganevgv": 1049, "gangesh": 1051, "gangwar": 1046, "ganiev": [1044, 1045, 1046], "ganssl": 1046, "gap": [43, 52, 153, 356, 377, 418, 477, 478, 484, 595, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 828, 919, 920, 921, 922, 1004, 1005, 1047, 1051, 1053], "garagecar": [147, 158], "garagefinish": 147, "garagetyp": 158, "garageyrblt": 109, "garbag": 1051, "garcia": 1052, "garc\u00eda": [1048, 1049, 1054], "gardin": 376, "gardner": [1047, 1048], "garg": [1049, 1050], "gargsya": 1049, "gari": [377, 1046], "garret": 1043, "garreta": [1041, 1042], "garrett": 1043, "garri": 379, "garriga": [281, 418, 836], "gasmi": 1053, "gasquez": 1046, "gate": [379, 1052], "gather": [328, 330, 390, 397, 414, 1018, 1032], "gatsbi": 1021, "gaug": 190, "gaull": 771, "gaurav": [1047, 1048, 1049, 1050, 1051, 1053], "gauravahlawat": [1047, 1048], "gaussian": [2, 8, 19, 28, 43, 44, 46, 47, 48, 64, 66, 67, 70, 79, 81, 82, 90, 91, 92, 96, 100, 111, 112, 113, 114, 115, 121, 124, 125, 126, 132, 135, 138, 139, 146, 150, 154, 156, 165, 186, 197, 200, 202, 204, 207, 227, 228, 229, 230, 244, 248, 250, 251, 262, 263, 286, 300, 305, 308, 310, 317, 318, 319, 339, 342, 349, 350, 354, 374, 378, 384, 387, 396, 414, 416, 419, 420, 426, 458, 475, 476, 477, 478, 479, 480, 481, 482, 503, 511, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 537, 539, 551, 556, 557, 560, 570, 617, 618, 620, 621, 622, 624, 625, 626, 629, 630, 632, 634, 650, 651, 679, 684, 687, 710, 731, 748, 759, 783, 804, 805, 807, 821, 846, 847, 848, 849, 850, 851, 852, 856, 887, 891, 899, 903, 904, 905, 1002, 1004, 1005, 1006, 1014, 1029, 1030, 1032, 1033, 1034, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1051, 1053], "gaussian_filt": [53, 81, 82, 89], "gaussian_process": [2, 66, 67, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 396, 424, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 650, 1009, 1029, 1042, 1045, 1046], "gaussianhmm": 1039, "gaussianmixtur": [2, 79, 92, 261, 262, 263, 264, 265, 266, 420, 804, 1007, 1045, 1047, 1048, 1052, 1053, 1055, 1057], "gaussianmixturegaussianmixtur": 265, "gaussiannb": [2, 61, 62, 64, 67, 160, 277, 365, 412, 421, 443, 576, 846, 847, 848, 850, 872, 1002, 1009, 1010, 1043, 1044, 1045, 1047, 1052, 1055], "gaussiannois": 384, "gaussianprocessclassifi": [2, 66, 67, 175, 176, 177, 178, 182, 396, 424, 618, 626, 627, 629, 630, 1009, 1045, 1047, 1049, 1053], "gaussianprocessregressor": [2, 174, 179, 180, 181, 182, 183, 424, 617, 620, 621, 622, 623, 624, 628, 631, 632, 650, 1009, 1042, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "gaussianprocessregressorifittedgaussianprocessregressor": 179, "gaussianrandomproject": [2, 904, 1020, 1040, 1053, 1055, 1056], "gauthier": 1053, "gauz": 1047, "gave": [64, 412, 807, 810, 811, 821, 878], "gavin": [635, 998], "gaynor": 408, "ga\u00ebl": [397, 1032], "gb": [161, 421, 560, 640], "gbc": 365, "gbdt": [142, 191, 269, 324, 325, 330, 387, 421], "gbdt_appli": 142, "gbdt_applyfunctiontransform": 142, "gbdt_cst": 325, "gbdt_leaves_yield": 142, "gbdt_model": 142, "gbdt_no_cst": [155, 325], "gbdt_pipelin": 158, "gbdt_with_monotonic_cst": 155, "gbdt_with_monotonic_cst_df": 155, "gbgradientboostingregressor": 161, "gbm": [149, 421, 1042], "gbm_early_stop": 148, "gbm_full": 148, "gbp": 1032, "gbr": 150, "gbr_l": 150, "gbrt": [43, 52, 217, 421], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 369, "gc": 49, "gca": [47, 79, 97, 118, 125, 177, 222, 226, 228, 244, 257, 279, 303, 305, 316, 341, 343, 346, 347, 1015, 1036], "gcc": [380, 383, 388, 394], "gcf": [47, 1015], "gcv": [680, 682], "gcv_mode": [680, 1041], "gd": [51, 161], "gdb": [383, 385, 1031], "gdex1": 1049, "ge": [51, 999, 1010, 1051], "ge0": 1024, "gear": 1026, "geb": 57, "gebremichael": [1054, 1055], "gedeck": 1046, "geevarghes": 1054, "gefel": 1008, "gegr": 422, "gei": 1041, "geiger": [1056, 1057], "geist": 379, "gelavizh": 1050, "gelder": 1050, "gemm": 1057, "gen": 788, "gen_batch": [2, 391, 959], "gen_cov": 113, "gen_even_slic": [2, 217, 391, 958], "gender": [256, 884, 1018], "gender_femal": 884, "gender_mal": 884, "gene": [182, 376, 411, 457, 520, 600, 601, 858, 891], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 112, 114, 117, 118, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 172, 175, 176, 177, 178, 179, 182, 185, 186, 189, 190, 191, 192, 193, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 369, 370, 374, 375, 377, 379, 383, 384, 385, 386, 387, 388, 390, 391, 394, 395, 408, 411, 412, 414, 418, 420, 422, 423, 424, 426, 430, 435, 437, 443, 446, 449, 452, 453, 455, 458, 460, 464, 465, 466, 468, 470, 471, 473, 475, 478, 480, 488, 489, 490, 494, 497, 499, 502, 503, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 545, 547, 548, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 618, 621, 622, 625, 626, 627, 629, 630, 634, 635, 636, 637, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 692, 693, 696, 697, 698, 699, 700, 701, 702, 708, 711, 713, 724, 728, 730, 731, 744, 750, 764, 785, 788, 792, 800, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 843, 844, 845, 851, 852, 854, 856, 857, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 899, 900, 901, 902, 903, 904, 911, 912, 913, 914, 916, 917, 920, 922, 923, 924, 925, 949, 950, 954, 955, 958, 959, 972, 976, 978, 981, 996, 997, 998, 1000, 1002, 1003, 1005, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1020, 1021, 1023, 1024, 1029, 1030, 1031, 1032, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "generalis": [795, 1008, 1028], "generaliz": [349, 421], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 153, "generate_onli": [949, 1049], "generate_synthetic_data": 53, "generickernelmixin": [182, 1049], "genericunivariateselect": [2, 423, 602, 603, 605, 606, 607, 609, 1053, 1055, 1056], "generos": 382, "genesi": [1053, 1055], "genet": 1027, "genoa": 379, "genom": [58, 520, 1027], "genotyp": 376, "gensim": 1027, "gentil": [379, 1051], "gentli": 419, "genvalen": [1051, 1052, 1053, 1054, 1055], "geodes": [237, 695, 1005], "geoff": [842, 1009], "geoffrei": [868, 869, 1012, 1050, 1051, 1052, 1053, 1055], "geograph": [43, 50, 308, 377, 505], "geometr": [125, 414, 695, 711, 738, 764, 1005, 1047], "geometri": [74, 414, 1005, 1011], "geomspac": 330, "georg": [45, 377, 414, 1045, 1051, 1052, 1053, 1054], "georgi": [1047, 1050], "georgiamaydai": 1054, "geospati": [308, 420], "geovan": [1052, 1053], "geq": [248, 412, 419, 421, 1004, 1008, 1018, 1022, 1023], "ger": 422, "gerhard": [45, 377], "german_credit": 269, "germer": [1054, 1055], "geroldcsend": 1052, "geron": [1047, 1052, 1053], "gerstein": 520, "gertrud": 1046, "gertz": 456, "gervai": [1041, 1042], "gesa": 1051, "gesdd": 955, "gesvd": 955, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 83, 87, 91, 124, 128, 150, 153, 160, 169, 172, 174, 179, 180, 185, 190, 191, 192, 193, 210, 219, 232, 235, 237, 251, 252, 273, 276, 277, 279, 283, 286, 288, 292, 295, 300, 308, 316, 324, 331, 335, 338, 342, 345, 347, 350, 354, 356, 358, 360, 370, 375, 376, 377, 380, 382, 383, 384, 385, 387, 388, 389, 396, 400, 408, 410, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 428, 429, 430, 435, 437, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 702, 706, 728, 729, 730, 731, 733, 739, 740, 749, 763, 770, 771, 776, 792, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 944, 946, 947, 948, 954, 955, 960, 966, 997, 1003, 1004, 1005, 1007, 1008, 1018, 1021, 1022, 1023, 1024, 1028, 1036, 1039, 1042, 1045, 1047, 1050, 1052, 1053, 1056], "get_adjacency_matrix": 55, "get_arrai": [851, 852], "get_bin_se": 454, "get_cmap": [62, 64, 350], "get_color": 46, "get_config": [2, 474, 788, 909, 974, 1054], "get_covari": [539, 541, 548], "get_data": [515, 516], "get_data_hom": [2, 47], "get_depth": [919, 920, 921, 922, 1048], "get_feature_nam": [327, 1047, 1048, 1050, 1051, 1052], "get_feature_names_out": [2, 54, 57, 190, 192, 327, 356, 357, 358, 377, 384, 396, 415, 422, 430, 435, 438, 448, 449, 451, 453, 455, 470, 473, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 573, 574, 575, 576, 577, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 1018, 1052, 1053, 1054, 1055, 1056, 1057], "get_figur": 137, "get_full_scor": 186, "get_height": [47, 148], "get_impute_it": 186, "get_impute_knn_scor": 186, "get_impute_mean": 186, "get_impute_zero_scor": 186, "get_indic": [57, 429, 457, 459], "get_initial_mean": 263, "get_legend_handles_label": [153, 250, 277, 282], "get_lin": 311, "get_metadata_rout": [251, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 963, 964, 965, 966, 967, 1008, 1056], "get_metr": 706, "get_minibatch": 47, "get_n_cal": [851, 852], "get_n_leav": [919, 920, 921, 922, 1048], "get_n_split": [396, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828], "get_nam": 317, "get_output_feature_nam": 1053, "get_param": [276, 385, 396, 424, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1049, 1050, 1051, 1053, 1054], "get_precis": [475, 476, 477, 478, 479, 480, 481, 482, 539, 541, 548], "get_redirect": 55, "get_routing_for_object": [2, 251, 964], "get_scor": [2, 331, 396, 740, 1046, 1055], "get_scorer_nam": [2, 413, 739, 1008, 1053, 1056], "get_scores_for_imput": 186, "get_shap": [57, 429, 457, 459], "get_stop_word": [595, 596, 598], "get_submatrix": [429, 457, 459], "get_subplotspec": 389, "get_support": [168, 172, 326, 588, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 1041], "get_tag": 2, "get_tree_stat": [851, 852], "get_untrusted_typ": 408, "get_width": [47, 148], "get_x": [47, 148], "get_xaxi": [260, 305, 315], "get_xlim": [113, 212, 222, 315], "get_xticklabel": 286, "get_yaxi": [305, 315], "get_ybound": 88, "get_ylim": [212, 288, 315, 316], "getattr": [43, 47, 269, 315, 384, 396, 1055], "getgaurav2": 1049, "getmoredataget": 402, "gettempdir": 1011, "getter": [475, 476, 477, 478, 479, 480, 481, 482, 600, 601, 604], "geurt": [421, 562, 563, 564, 565, 572, 573, 921, 922], "gewili": [1054, 1055], "gh": 382, "ghahramani": 906, "gharibi": 1049, "ghg": 1045, "ghislain": 1051, "gholdman1": 1050, "ghorai": 1047, "ghosh": [0, 404, 414, 1039, 1040, 1056, 1057], "gia": 1050, "giancarlo": 1053, "gianr": 1054, "gibb": [867, 1013, 1027], "gideon": 1049, "giessel": 1045, "gif": 83, "gigant": [1047, 1049, 1054, 1055], "gijsber": 1053, "gil": [369, 370, 383, 1042, 1047, 1048, 1051, 1052, 1056], "gilad": 1032, "gilberto": 1047, "gilbertson": [1053, 1054], "gilch": 1046, "gile": [1042, 1043], "gill": [0, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "gilliam": 1046, "gilmor": 1043, "gim": 1051, "gini": [64, 193, 217, 235, 256, 287, 326, 560, 561, 564, 565, 566, 567, 571, 572, 573, 795, 919, 920, 921, 922, 997, 1016, 1024, 1047, 1048, 1055, 1056], "gionanidi": 1053, "giorgio": [1044, 1045, 1046, 1058], "giorgiop": 1044, "giotto": 1027, "giovanni": [1045, 1047], "gist": [382, 390, 1031], "git": [380, 384, 386, 388, 390, 1031, 1035, 1039, 1055, 1057], "github": [0, 51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 295, 313, 321, 325, 326, 328, 329, 331, 336, 364, 380, 381, 385, 386, 387, 388, 390, 394, 396, 397, 408, 410, 699, 1026, 1027, 1031, 1049], "githubusercont": 51, "gitter": [1046, 1047], "giudic": 1051, "giusepp": [1047, 1048], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 84, 95, 97, 99, 104, 105, 109, 125, 149, 174, 179, 183, 185, 190, 191, 206, 208, 214, 217, 218, 219, 244, 266, 269, 272, 277, 284, 297, 301, 304, 313, 327, 328, 332, 338, 369, 371, 377, 379, 381, 382, 384, 388, 390, 394, 395, 396, 397, 402, 408, 411, 412, 414, 415, 416, 419, 421, 422, 424, 426, 439, 452, 453, 455, 457, 465, 478, 503, 506, 510, 540, 545, 556, 557, 558, 559, 564, 565, 571, 572, 573, 600, 601, 604, 614, 615, 645, 654, 668, 672, 683, 727, 737, 743, 746, 801, 807, 810, 811, 821, 832, 833, 834, 836, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 888, 889, 891, 892, 900, 1004, 1008, 1011, 1012, 1013, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1032, 1039, 1043, 1046, 1047, 1049, 1050, 1051, 1053, 1055], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 84, 93, 95, 111, 117, 124, 128, 143, 153, 154, 156, 158, 174, 181, 190, 191, 202, 217, 218, 221, 235, 238, 244, 248, 249, 251, 253, 254, 255, 269, 271, 275, 276, 277, 278, 284, 289, 298, 301, 302, 303, 317, 321, 327, 332, 356, 357, 358, 363, 364, 369, 371, 377, 381, 382, 388, 390, 391, 394, 396, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 431, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 464, 465, 466, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 493, 503, 508, 510, 512, 530, 540, 541, 543, 545, 546, 547, 550, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 600, 601, 608, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 638, 639, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 694, 695, 697, 698, 704, 705, 706, 707, 708, 709, 711, 712, 713, 719, 721, 724, 725, 727, 731, 733, 734, 741, 743, 744, 747, 759, 762, 763, 765, 766, 771, 781, 785, 788, 789, 791, 794, 795, 796, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 819, 821, 825, 829, 830, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 897, 898, 900, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 930, 941, 942, 943, 963, 964, 966, 991, 995, 997, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "gkevinyen5418": 1047, "gkf": 418, "gkiasta": 1052, "gl": [172, 379], "glad": 382, "glanc": [292, 381], "glaser": [1047, 1048], "glass": 377, "glasso": [416, 484], "glaxosmithklin": 51, "gleb": [1052, 1054, 1055, 1056, 1058], "glemaitr": [1048, 1049, 1051], "glen": 1052, "glenn": 1045, "glennfrutiz": 1053, "glibc": 390, "glm": [217, 235, 325, 655, 676, 687, 1004, 1039, 1050], "glm_freq": 235, "glm_pure_premium": 235, "glm_sev": 235, "glmnet": [653, 654, 1039], "glob": 47, "global": [2, 3, 47, 49, 77, 92, 123, 217, 237, 238, 258, 284, 312, 325, 365, 369, 370, 388, 394, 396, 414, 424, 448, 458, 468, 474, 597, 633, 639, 695, 698, 699, 702, 714, 736, 737, 745, 790, 791, 794, 795, 825, 892, 907, 909, 977, 997, 1005, 1008, 1014, 1018, 1024, 1032, 1047, 1054], "global_dtyp": 370, "global_random_se": 370, "globular": [97, 414], "glorot": [868, 869], "glossari": [2, 365, 382, 384, 388, 425, 426, 443, 446, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 470, 473, 475, 478, 480, 494, 497, 499, 502, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 601, 609, 614, 615, 617, 618, 634, 639, 641, 646, 647, 648, 649, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 699, 700, 701, 702, 708, 781, 785, 788, 800, 804, 805, 807, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 853, 854, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 873, 876, 888, 892, 900, 903, 904, 906, 907, 911, 912, 913, 916, 919, 920, 921, 922, 954, 955, 978, 981, 997, 998, 1004, 1047], "glu": [172, 379], "glushchenkov": 1053, "gl\u00f2ria": [1052, 1054], "gm": 805, "gmil": 377, "gmm": [79, 94, 187, 259, 261, 264, 265, 266, 511, 519, 805, 826, 1007, 1029, 1039, 1040, 1043, 1044, 1045], "gmm_": 1040, "gmm_bic_scor": 265, "gmmgmm": 402, "gmmhmm": [1039, 1040], "gnb": [61, 62, 64, 160, 421, 576, 1010], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 380, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 377, 382, 386, 387, 391, 397, 400, 415, 419, 421, 423, 449, 568, 569, 727, 890, 932, 958, 959, 1018, 1024, 1028, 1050], "goadrich": 1008, "goal": [49, 55, 58, 64, 87, 92, 118, 153, 185, 191, 195, 217, 232, 235, 253, 254, 269, 272, 273, 356, 370, 371, 377, 387, 388, 396, 397, 399, 405, 419, 423, 549, 555, 597, 600, 746, 1008, 1011, 1013, 1014, 1022, 1023, 1024, 1032, 1047], "god": [57, 356, 357], "godbol": 790, "goe": [43, 72, 142, 190, 364, 382, 421, 477, 478, 484, 564, 565, 571, 572, 573, 919, 920, 921, 922, 1018, 1022], "goetz": [1046, 1047], "goh": 1056, "gohlk": 1044, "goix": [0, 1043, 1045, 1046, 1047, 1048], "gold": [69, 211, 218, 220, 223, 227, 231, 234, 261, 266, 282, 301, 344, 388], "goldbaum": 1057, "goldberg": [860, 1011], "goldfarb": 1004, "goldman": 51, "goldstein": [191, 1015], "goldszmidt": 1020, "gollonet": [0, 404], "goltermann": 1051, "golub": [541, 849, 891], "golubin": 1046, "gome": [1052, 1053, 1057], "gomez": [1047, 1054, 1056], "gommer": [1042, 1045, 1046, 1054, 1055, 1057], "goncalo": [1046, 1047], "gone": [1039, 1040], "gonthier": 1050, "goo": [172, 379], "good": [43, 48, 58, 62, 64, 75, 79, 81, 84, 87, 88, 90, 93, 108, 114, 118, 132, 143, 146, 149, 150, 153, 175, 179, 185, 190, 202, 206, 217, 218, 223, 232, 242, 244, 248, 251, 254, 261, 263, 268, 269, 275, 281, 288, 313, 320, 321, 326, 332, 334, 339, 345, 356, 357, 365, 369, 370, 371, 381, 383, 384, 385, 388, 390, 394, 396, 411, 412, 414, 416, 418, 419, 421, 422, 423, 424, 443, 445, 450, 541, 566, 568, 569, 597, 637, 647, 654, 655, 663, 665, 666, 668, 676, 687, 697, 701, 730, 738, 749, 771, 836, 905, 930, 955, 997, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1022, 1023, 1024, 1028, 1032, 1045], "goodby": 382, "goodman": [1039, 1044], "googl": [0, 55, 394, 414, 448, 955, 1026, 1039], "gool": 1008, "gorb": 1051, "gordon": [57, 1045, 1049, 1051, 1053], "gorelli": [1047, 1048, 1052, 1054, 1057], "gorgolewski": [0, 404, 1039, 1042], "gorilla": 356, "gorinevski": 1004, "gorodkin": 750, "gorro\u00f1o": [1050, 1052, 1053], "got": [180, 251, 282, 365, 387, 558, 656, 672, 1052, 1054, 1056, 1058], "gotten": [1004, 1018], "gou": 414, "gouillart": 1039, "goupil": [0, 366], "gov": [55, 379], "govern": [190, 365, 369, 382, 396, 1032], "govin": 1045, "go\u0144da": 1054, "gp": [177, 182, 424, 617, 618, 629, 1045], "gp_fix": 175, "gp_opt": 175, "gpapadok": [1049, 1053], "gpassino": 1043, "gpc": [2, 66, 146, 156, 165, 173, 179, 180, 187, 227, 228, 229, 230, 250, 264, 310, 317, 318, 339, 350, 354, 511, 617, 618, 620, 621, 626, 627, 629, 630, 710, 748, 1029, 1030, 1034, 1049], "gpc_rbf_anisotrop": 176, "gpc_rbf_isotrop": 176, "gperftool": 385, "gplearn": 1027, "gpr": [2, 173, 174, 175, 181, 183, 187, 503, 617, 618, 620, 621, 622, 623, 628, 629, 630, 631, 632, 1029, 1030, 1034, 1049], "gpr_model": 183, "gprof": 385, "gpu": [329, 332, 410, 1012, 1028, 1056], "gr": 904, "grab": 382, "gracefulli": [1042, 1043], "grad": [388, 1032], "gradd": 388, "grade": 1008, "gradi": 1049, "gradient": [2, 14, 46, 52, 81, 101, 105, 136, 137, 138, 141, 142, 144, 145, 155, 158, 161, 179, 180, 181, 187, 193, 196, 198, 204, 219, 240, 244, 249, 274, 276, 301, 311, 315, 319, 321, 328, 331, 344, 396, 413, 414, 424, 458, 468, 472, 473, 494, 496, 503, 508, 510, 527, 560, 561, 566, 567, 568, 569, 571, 572, 593, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 638, 639, 641, 642, 646, 655, 656, 665, 666, 675, 676, 679, 681, 683, 684, 685, 687, 694, 699, 701, 702, 748, 749, 755, 757, 797, 807, 810, 811, 812, 828, 834, 837, 867, 868, 869, 872, 884, 885, 915, 981, 1005, 1008, 1011, 1012, 1013, 1014, 1027, 1029, 1030, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1054, 1056], "gradient_boost": [142, 1041, 1042, 1048], "gradientboost": 1044, "gradientboostingclassifi": [2, 142, 149, 152, 317, 365, 394, 560, 568, 639, 640, 1009, 1015, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "gradientboostingclassifier__learning_r": 317, "gradientboostingregressor": [2, 46, 148, 150, 151, 158, 161, 369, 387, 394, 561, 569, 639, 640, 1004, 1008, 1009, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "gradientboostingregressorgradientboostingregressor": 161, "gradual": [221, 868, 869, 949, 950, 1022], "graduat": 379, "graham": [1044, 1045], "grai": [45, 53, 81, 82, 85, 86, 88, 123, 126, 152, 172, 215, 217, 235, 248, 252, 253, 282, 312, 379, 419, 500, 501, 509, 528, 1050], "grain": [43, 67, 72, 249, 266, 317, 388, 422, 452, 1028], "gram": [2, 187, 196, 384, 419, 422, 495, 531, 555, 595, 596, 597, 598, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 688, 689, 690, 691, 692, 693, 774, 997, 1004, 1018, 1023, 1029, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1052, 1053], "gram_test": 1023, "gram_train": 1023, "gramfort": [0, 123, 397, 403, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "grammar": 382, "grant": [0, 254, 269, 382], "granular": 1058, "grape": 415, "graph": [2, 55, 62, 74, 79, 81, 101, 102, 182, 237, 272, 295, 297, 337, 369, 382, 385, 396, 411, 416, 425, 447, 450, 451, 458, 459, 463, 468, 469, 477, 478, 484, 518, 592, 593, 695, 698, 699, 702, 789, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 866, 907, 961, 1005, 1008, 1011, 1013, 1021, 1024, 1027, 1032, 1039, 1046, 1047, 1049, 1052, 1054], "graph_laplacian": 1046, "graph_lasso": [484, 1047], "graph_model": 297, "graph_shortest_path": [391, 1052], "graphic": [8, 57, 114, 191, 338, 356, 357, 358, 377, 388, 414, 416, 419, 799, 800, 804, 841, 923, 1008, 1009, 1015, 1027], "graphical_lasso": [2, 391, 477, 478, 1047, 1055], "graphicallasso": [2, 115, 416, 475, 476, 478, 479, 480, 481, 482, 484, 1047, 1055], "graphicallassocv": [2, 51, 115, 405, 416, 477, 479, 480, 481, 482, 484, 1047, 1051, 1053, 1055, 1057], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [477, 1044, 1047], "graphlassocv": [478, 1041, 1047], "graphviz": [923, 1024], "grasp": [289, 1023, 1028], "grassberg": [614, 615], "grate": 1032, "graviton": 390, "gray_r": [68, 126, 177, 238, 313, 334, 335], "grayscal": 68, "greasemonkei": 390, "great": [90, 189, 190, 215, 365, 382, 394, 419, 771, 1028, 1032, 1039, 1046], "greater": [62, 121, 137, 139, 190, 234, 249, 254, 263, 269, 281, 294, 301, 302, 360, 369, 387, 396, 412, 413, 414, 417, 421, 447, 451, 452, 455, 458, 469, 478, 543, 548, 564, 565, 566, 567, 568, 569, 571, 572, 573, 600, 601, 604, 617, 618, 635, 647, 649, 671, 673, 674, 678, 683, 684, 685, 699, 716, 719, 727, 742, 743, 746, 749, 795, 802, 804, 805, 841, 853, 854, 861, 862, 868, 869, 874, 889, 901, 905, 908, 911, 912, 919, 920, 921, 922, 955, 976, 997, 1003, 1004, 1005, 1008, 1009, 1014, 1018, 1023, 1024, 1042, 1047, 1050, 1052, 1053, 1054, 1056], "greater_is_bett": [150, 332, 749, 1008], "greatest": [90, 400, 414, 878, 1047], "greatli": [215, 249, 329, 382, 390, 458, 1011, 1024, 1045, 1053], "greedi": [172, 421, 423, 453, 455, 466, 566, 567, 609, 1004, 1024], "greedili": [118, 172, 414, 418, 423, 466], "greek": [51, 55, 59, 71, 83, 101, 187, 414, 468, 1029], "green": [63, 114, 121, 140, 155, 160, 174, 195, 242, 311, 316, 320, 325, 331, 396, 1009, 1047, 1048, 1050, 1051], "greenhal": 1047, "greg": [1032, 1045, 1046, 1048, 1049], "gregori": [1045, 1049, 1050, 1051, 1052], "gregorystrubel": 1052, "gregov": 1047, "grei": [44, 285, 315, 352, 377], "grep": 382, "greyscal": 313, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 89, 96, 105, 106, 107, 108, 111, 115, 146, 156, 167, 169, 171, 178, 187, 189, 190, 191, 206, 235, 242, 249, 250, 251, 255, 260, 265, 267, 269, 272, 274, 276, 279, 280, 282, 287, 294, 297, 299, 300, 308, 313, 317, 318, 320, 342, 344, 345, 351, 356, 377, 384, 389, 394, 396, 409, 415, 418, 420, 421, 422, 454, 467, 470, 478, 505, 509, 522, 529, 638, 639, 640, 654, 657, 660, 661, 663, 666, 668, 670, 683, 720, 735, 749, 792, 795, 807, 810, 811, 818, 821, 823, 837, 838, 871, 916, 1001, 1003, 1008, 1011, 1015, 1028, 1029, 1034, 1039, 1042, 1043, 1044, 1046, 1047, 1053, 1055, 1056, 1057, 1058], "grid_encod": 318, "grid_model": 297, "grid_posit": [62, 64], "grid_resolut": [191, 326, 343, 638, 639, 640], "grid_scores_": [1045, 1051, 1052], "grid_search": [108, 143, 256, 265, 273, 283, 331, 415, 1041, 1042, 1043, 1044, 1045, 1046], "grid_siz": [50, 96, 308, 377, 505], "grid_to_graph": [2, 82, 86, 89, 414, 422, 1052], "grid_tograph": 1042, "grid_valu": [191, 640, 1015, 1055], "gridsearch": [89, 111, 286], "gridsearchcv": [2, 43, 89, 103, 105, 107, 108, 111, 130, 143, 187, 250, 256, 265, 267, 269, 273, 274, 275, 276, 280, 283, 286, 292, 297, 299, 313, 317, 326, 330, 331, 345, 349, 365, 370, 384, 394, 396, 405, 410, 415, 418, 421, 424, 428, 509, 527, 547, 548, 582, 606, 614, 660, 710, 749, 818, 821, 871, 881, 911, 919, 997, 1004, 1008, 1012, 1022, 1023, 1028, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057, 1058], "gridsearchcvifittedgridsearchcv": [106, 265, 269, 273, 275], "gridsearchcvinot": 256, "gridsiz": 248, "gridspec": [62, 64, 100, 260, 389], "gridspecfromsubplotspec": 389, "griffith": [1047, 1048], "grigorev": 1044, "grigorio": 741, "grime": [696, 700, 1005], "grinsztajn": 1056, "grisel": [0, 397, 403, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "griva": [1053, 1054], "grlivarea": 147, "grobler": [0, 404, 1039, 1040, 1041, 1042], "groceryheist": 1052, "groenen": [697, 701, 1005], "grok": 493, "groothui": [634, 998], "grother": 379, "ground": [2, 27, 58, 68, 75, 80, 84, 92, 93, 96, 111, 115, 118, 126, 154, 182, 202, 211, 217, 218, 254, 266, 278, 357, 396, 414, 710, 711, 712, 715, 719, 720, 721, 722, 724, 725, 728, 730, 731, 733, 735, 736, 737, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 790, 791, 792, 793, 794, 797, 798, 802, 803, 1008, 1021, 1047], "ground_truth": [90, 302], "group": [0, 2, 51, 72, 75, 90, 93, 95, 160, 191, 193, 217, 238, 251, 266, 270, 321, 331, 336, 357, 364, 377, 387, 396, 397, 405, 414, 420, 421, 422, 439, 452, 502, 595, 596, 598, 601, 725, 795, 807, 808, 809, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 836, 838, 884, 885, 921, 922, 949, 950, 1004, 1005, 1007, 1008, 1009, 1018, 1024, 1025, 1027, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "group_1": 884, "group_2": 884, "group_3": 884, "group_by_dynam": 179, "group_df": 225, "group_kfold": 808, "group_prior": 270, "groupbi": [43, 153, 191, 225, 235], "groupkfold": [2, 270, 280, 331, 405, 418, 601, 812, 813, 814, 815, 816, 825, 830, 832, 833, 834, 835, 838, 1045, 1052], "groupshufflesplit": [2, 270, 418, 1045], "grow": [43, 52, 74, 195, 202, 297, 352, 358, 369, 394, 410, 416, 421, 422, 564, 565, 566, 567, 571, 572, 573, 817, 851, 852, 919, 920, 921, 922, 997, 1008, 1011, 1024, 1032, 1042, 1043], "grower": [153, 421, 568, 569], "grown": [379, 421, 560, 561, 562, 563, 564, 565, 571, 572, 919, 920, 921, 922, 1024], "growth": [1008, 1044, 1045], "grumman": 51, "grusak": 1049, "gryllo": [1044, 1047], "gryze": [1041, 1044], "grzegorz": [1046, 1049], "gs_time": 286, "gsh": 286, "gsh_time": 286, "gsiisg": 1054, "gsk": 51, "gss": [418, 809], "gt": [68, 105, 106, 142, 158, 190, 265, 273, 287, 382, 386, 402], "gu": [1050, 1051, 1053], "guan": 1049, "guangguo": 1045, "guarante": [46, 47, 64, 113, 114, 153, 190, 225, 248, 294, 295, 315, 357, 365, 371, 376, 390, 391, 408, 414, 418, 419, 422, 452, 543, 652, 665, 666, 675, 679, 681, 683, 685, 694, 701, 809, 824, 827, 851, 852, 889, 891, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 918, 937, 938, 1000, 1004, 1005, 1007, 1011, 1016, 1020, 1024, 1049, 1057], "gubri": [1047, 1048], "gudmalwar": 1051, "gued": 1057, "guerin": [1045, 1046], "guess": [55, 137, 146, 418, 421, 422, 539, 545, 547, 548, 554, 795, 1008, 1022], "guestrin": 421, "guha": 1054, "gui": [1040, 1050], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 90, 103, 123, 143, 183, 187, 190, 191, 204, 237, 282, 301, 302, 305, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 380, 381, 382, 387, 388, 389, 390, 395, 396, 397, 402, 405, 415, 421, 425, 426, 427, 428, 431, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 951, 1008, 1009, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1056, 1057, 1058], "guidanc": [394, 424], "guidelin": [2, 25, 381, 385, 387, 388, 390, 414, 421], "guiel": 501, "guilherm": 1042, "guillaum": [0, 403, 1032, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "guillem": [1048, 1049, 1054], "guillemot": [0, 1045, 1046], "guillermo": 1053, "guiniol": 1046, "guitar": 1054, "guitton": 1051, "guiweb": 1052, "gulati": [1044, 1045, 1046], "gun": [57, 377], "gunduz": 1057, "gunesbayir": [1054, 1055], "gunnar": [542, 955], "guo": 1052, "guoci": 1046, "gupta": [905, 1020, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "gustafson": [1054, 1055], "gustav": 1045, "gustavo": [1047, 1048, 1053], "gutierrez": 1049, "guttman": 701, "guyon": [522, 600, 601, 1008], "guyon2015": 1008, "gwulf": [1043, 1044], "gyeongja": 1057, "gz": [47, 386, 400, 515, 516], "gzip": 1039, "g\u00e9ron": 1047, "g\u00f3rski": [1050, 1051], "g\u00f6khan": [44, 419, 542], "g\u00f6n\u00fcl": 1057, "g\u00fcnther": [1052, 1056], "h": [44, 45, 52, 83, 93, 123, 124, 137, 138, 156, 172, 176, 190, 262, 300, 303, 310, 317, 328, 339, 341, 358, 379, 388, 412, 414, 416, 419, 420, 421, 422, 425, 450, 526, 539, 542, 545, 547, 554, 560, 574, 575, 589, 597, 614, 615, 696, 700, 711, 715, 764, 846, 850, 851, 852, 857, 867, 882, 891, 1000, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1022, 1024, 1045, 1050, 1054, 1055, 1056], "h1998": 421, "h2009": 1015, "h4dr1en": 1049, "h5py": 376, "h_": 1004, "h_i": [419, 1013], "h_init": 388, "h_j": 1013, "h_l": 1002, "h_m": 421, "h_pad": [123, 146, 361], "h_samples_": 867, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 85, 90, 91, 92, 95, 108, 113, 114, 118, 123, 135, 142, 146, 148, 150, 151, 153, 155, 160, 170, 171, 174, 179, 180, 181, 186, 190, 191, 192, 193, 195, 210, 214, 217, 218, 219, 223, 234, 235, 237, 244, 248, 250, 251, 254, 255, 258, 260, 261, 263, 265, 266, 269, 270, 273, 274, 275, 278, 279, 281, 286, 287, 294, 298, 301, 302, 303, 305, 312, 315, 316, 318, 320, 324, 325, 326, 327, 328, 330, 332, 334, 337, 345, 349, 350, 351, 356, 364, 365, 369, 370, 371, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 390, 391, 394, 395, 396, 397, 400, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 500, 501, 504, 505, 515, 516, 523, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 626, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 694, 695, 696, 697, 698, 699, 702, 718, 720, 727, 729, 748, 770, 781, 785, 786, 787, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 821, 825, 828, 829, 830, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 928, 936, 937, 938, 944, 957, 976, 992, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1028, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "haan": 1048, "haar": [53, 1056], "haas": 1049, "habchi": 1049, "haberland": [1054, 1055], "haberth\u00fcr": 1046, "hack": [47, 49], "had": [43, 48, 82, 150, 153, 179, 251, 315, 321, 327, 365, 382, 383, 390, 405, 422, 425, 450, 998, 1008, 1032, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1054], "hadamard": 384, "haddad": 1046, "hadrien": [1046, 1049], "hadshirt": 1049, "haenel": 1042, "haesun": [1051, 1054, 1055], "hafner": 1052, "hagai": 804, "hagberg": 55, "hahn": [1046, 1047], "haiat": 1051, "haidar": [1052, 1053], "hail": 321, "hailei": [1049, 1050], "hain": 377, "haitz": [1050, 1052, 1053], "hakaa1": [1046, 1047], "hal": [554, 665, 765, 766, 1006], "halchenko": [0, 403, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1055], "hale": [1041, 1053], "half": [2, 43, 61, 126, 153, 249, 253, 273, 275, 287, 377, 378, 419, 421, 469, 529, 569, 600, 604, 609, 777, 870, 878, 920, 1008, 1011, 1024], "half_cal": 604, "half_selector": 604, "halfbath": 147, "halford": [1047, 1054, 1055], "halkidi": 414, "halko": [419, 542, 548, 551, 954, 955], "hall": [1004, 1046, 1050], "hallock": 1045, "halpert": [699, 1005], "halv": [2, 167, 187, 267, 279, 283, 351, 409, 522, 571, 586, 807, 810, 811, 916, 1029, 1034, 1051], "halvic": 1051, "halvinggridsearchcv": [2, 286, 287, 326, 405, 410, 586, 811, 997, 1051, 1053, 1054, 1056, 1057, 1058], "halvingrandomsearchcv": [2, 150, 287, 326, 405, 410, 586, 810, 997, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 287, "halwai": 1045, "ham": [2, 46, 456, 463, 588, 706, 710, 716, 741, 748, 785, 786, 787, 803, 1011], "hamada": 1051, "hamdi": [1056, 1057], "hammerbach": 1043, "hamming_loss": [2, 46, 710, 803, 1008, 1041, 1045, 1048], "hammingdist": 706, "hammoudeh": 1048, "hamoumi": 1052, "hampu": 1043, "hamzeh": [0, 1042, 1043], "han": [414, 448, 456, 463, 1039, 1047, 1048, 1052], "hancock": 1049, "hand": [44, 65, 86, 88, 118, 125, 126, 128, 143, 150, 167, 170, 179, 187, 190, 191, 210, 221, 224, 241, 247, 248, 250, 251, 254, 268, 269, 272, 277, 284, 289, 299, 334, 335, 345, 369, 376, 377, 379, 382, 384, 388, 390, 395, 419, 420, 421, 423, 431, 437, 509, 650, 704, 720, 795, 837, 892, 916, 997, 1001, 1004, 1008, 1010, 1012, 1016, 1021, 1023, 1029, 1032], "handbook": [727, 747, 1008], "handi": [84, 105, 357, 358, 383, 1055], "handk": 1055, "handl": [0, 2, 43, 48, 105, 143, 147, 151, 153, 154, 158, 195, 202, 250, 251, 269, 277, 282, 284, 292, 294, 295, 302, 321, 324, 331, 356, 358, 364, 369, 374, 376, 382, 383, 384, 391, 394, 396, 421, 422, 424, 503, 551, 584, 588, 589, 595, 596, 598, 617, 642, 653, 654, 659, 665, 666, 667, 668, 669, 675, 682, 683, 685, 688, 727, 795, 875, 884, 885, 911, 912, 916, 923, 927, 956, 964, 967, 1005, 1008, 1009, 1010, 1011, 1014, 1016, 1023, 1024, 1027, 1028, 1032, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 105, 142, 147, 158, 191, 192, 246, 254, 256, 258, 321, 325, 328, 884, 885, 1018, 1043, 1047, 1051, 1052, 1058], "handler": 1050, "handler_map": 302, "handlerpathcollect": 302, "handletextpad": 361, "handpick": 244, "handprint": 379, "handwritten": [51, 71, 80, 83, 87, 94, 96, 142, 170, 187, 236, 237, 239, 241, 248, 263, 273, 305, 312, 313, 334, 335, 357, 375, 414, 421, 453, 509, 548, 551, 556, 573, 695, 696, 697, 698, 699, 711, 712, 724, 744, 800, 802, 860, 872, 881, 891, 904, 1005, 1011, 1029, 1034], "hang": [382, 1049, 1050], "hank": 1042, "hanmin": [0, 403, 1046, 1047, 1048, 1049, 1050, 1058], "hann": 1039, "hanna": [1043, 1044, 1050], "hannah": [1049, 1051, 1053], "hannel": [1047, 1048], "hansen": 1047, "hansin": [1053, 1054], "hanu\u0161": 1056, "hanxiang": [686, 1004], "hao": [1050, 1051, 1053, 1054], "haoi": 1056, "haoran": 1047, "haoyin": [1050, 1052, 1053], "happen": [2, 44, 64, 142, 204, 269, 315, 321, 357, 365, 369, 370, 380, 381, 382, 386, 387, 388, 394, 396, 397, 400, 408, 414, 416, 418, 421, 443, 522, 579, 665, 792, 889, 891, 911, 1004, 1008, 1009, 1023, 1028, 1047, 1051, 1052, 1054, 1055, 1056, 1057], "happi": [190, 269, 356, 394, 397, 825, 826], "haqu": [1041, 1042, 1043], "harabasz": [2, 717], "harabaz": 1045, "hard": [48, 217, 244, 248, 275, 277, 371, 381, 394, 396, 413, 414, 419, 422, 541, 548, 576, 683, 913, 914, 915, 916, 917, 1004, 1021, 1023, 1024, 1028, 1048, 1049], "hardcod": [446, 460, 1047], "harder": [284, 285, 319, 377, 381, 384, 390, 394, 414, 522, 568, 569], "hardest": 402, "hardin": 114, "hardli": [90, 614, 615], "hardwar": [57, 338, 358, 369, 370, 377, 380, 394, 400, 408, 410, 1027, 1053, 1054], "hare": 1004, "harfouch": 1055, "harikrishnan": 1041, "harizo": [1045, 1046], "harm": [356, 384, 422, 802], "harmanan": [1056, 1057], "harmon": [43, 72, 357, 414, 542, 548, 736, 737, 743, 790, 802, 1008], "haroldfox": [1047, 1048], "harper": 1046, "harri": [1043, 1045, 1051, 1052], "harsanyi": 1055, "harsh": [431, 443, 475, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 617, 665, 673, 675, 681, 682, 683, 806, 829, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 858, 861, 868, 906, 907, 911, 913, 916, 919, 921, 1049, 1051, 1054], "harshit5674": 1054, "hart": [379, 1002, 1047], "hartong": 1050, "harutaka": 1052, "harvest": 321, "harwar": 394, "has_fit_paramet": [2, 391], "hasan": 1054, "hasattr": [79, 91, 97, 115, 135, 146, 235, 248, 310, 317, 356, 396, 429, 433, 439, 968, 1049], "haseeb": [1052, 1053], "hash": [2, 47, 52, 136, 187, 252, 357, 358, 369, 371, 374, 382, 385, 394, 421, 521, 551, 564, 573, 588, 589, 596, 647, 846, 972, 1000, 1029, 1034, 1040, 1043, 1046], "hashabl": [396, 879, 882, 1019], "hashcode55": 1045, "hasher": [156, 358, 422], "hashingvector": [2, 47, 358, 371, 422, 495, 595, 597, 598, 1040, 1046, 1047, 1048, 1049, 1052], "hashlib": 47, "hasil": 1043, "hasn": 405, "hassaan": [1047, 1048], "hassan": 1052, "hassen": 1039, "hassoun": 1054, "hasti": [2, 137, 140, 141, 152, 172, 204, 274, 379, 418, 421, 526, 527, 560, 566, 567, 635, 663, 728, 730, 731, 841, 858, 904, 919, 920, 998, 1002, 1004, 1009, 1015, 1020, 1022, 1024], "hat": [114, 132, 271, 275, 300, 327, 380, 412, 416, 420, 421, 999, 1004, 1005, 1008, 1010, 1012], "hathidara": 1051, "hatwar": [1047, 1048], "hauck": 1045, "hausamann": [1047, 1048], "haussler": 182, "hav": 402, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 81, 82, 85, 88, 90, 92, 95, 97, 99, 100, 104, 105, 111, 113, 118, 121, 128, 129, 137, 144, 146, 147, 148, 150, 153, 168, 169, 172, 174, 175, 179, 180, 181, 186, 189, 190, 191, 192, 193, 195, 197, 202, 217, 218, 219, 221, 235, 241, 244, 246, 251, 252, 254, 255, 261, 262, 263, 265, 268, 269, 275, 276, 278, 281, 282, 288, 289, 290, 292, 295, 297, 298, 301, 302, 315, 320, 321, 322, 324, 326, 327, 331, 335, 336, 337, 342, 348, 349, 350, 352, 356, 357, 364, 365, 369, 370, 371, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 499, 501, 502, 503, 515, 516, 521, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 694, 695, 696, 697, 698, 699, 706, 711, 712, 718, 719, 722, 727, 733, 738, 743, 763, 764, 765, 766, 789, 792, 793, 799, 802, 804, 805, 806, 807, 810, 811, 812, 813, 818, 821, 825, 829, 830, 832, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 937, 939, 941, 943, 944, 955, 982, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "havelabeleddatado": 402, "haversin": [2, 308, 420, 706, 769, 771, 1011, 1048, 1051], "haversine_dist": [2, 769, 1048], "haversinedist": 706, "hawaii": 179, "haxbi": 0, "haya": 1053, "hayashi": 1047, "hbgt": 153, "hd": 51, "hdb": [90, 452], "hdbscan": [2, 71, 79, 84, 100, 187, 248, 450, 519, 891, 998, 1027, 1029, 1033, 1034, 1055, 1056, 1057], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 376, "hdl": [172, 379], "hdmetor": 1045, "he": [382, 733, 763, 868, 869, 901, 902, 1008, 1046, 1053, 1054], "head": [0, 52, 63, 105, 179, 190, 204, 206, 235, 258, 265, 321, 324, 329, 382, 390, 403, 419, 1032, 1044, 1045, 1054, 1055, 1056, 1057, 1058], "head_width": 63, "header": [54, 104, 276, 356, 357, 377, 380, 422, 494, 495, 807, 810, 811, 821], "heali": 414, "health": 332, "heap": 456, "heapq": 469, "heard": 382, "heart": 254, "heat": [158, 345, 414, 458, 468, 702], "heatingqc": 158, "heatmap": [191, 193, 197, 202, 286, 329, 345, 639, 1015], "heatmap_kw": 639, "heatmaps_": 639, "heavei": 1047, "heavi": [219, 394, 411, 1028], "heavier": [132, 416, 1004], "heavili": [206, 369, 370, 382, 390, 656, 662, 785, 1025], "heavy_rain": [43, 191], "hebei": 414, "hedlund": 1055, "hedyati": 1043, "hee": [1046, 1049], "heer": 1050, "hegd": 1056, "heidelberg": [179, 414, 419, 542, 703, 733, 763, 1008], "height": [47, 54, 88, 126, 147, 148, 172, 315, 321, 331, 356, 420, 452, 500, 501, 513, 593], "heightpet_catpet_dogf64f64f64": 331, "heikki": 1020, "heilman": [1043, 1044], "heitz": 321, "held": [43, 47, 105, 130, 151, 192, 225, 262, 278, 283, 294, 418, 421, 566, 567, 568, 569, 708, 807, 810, 811, 821, 868, 869, 881, 997, 998, 1007, 1016], "helder": [1043, 1052, 1053], "heldout": 224, "heldout_scor": 149, "helen": 329, "heli": 1046, "hello": [382, 390, 968, 972], "helloifeven": 968, "helm": 1057, "helmu": 1043, "help": [0, 41, 43, 48, 50, 90, 104, 108, 128, 133, 191, 202, 235, 237, 269, 276, 278, 288, 292, 313, 342, 345, 357, 358, 365, 369, 370, 382, 383, 384, 385, 386, 387, 388, 390, 391, 396, 397, 399, 408, 414, 415, 418, 422, 424, 438, 543, 584, 634, 657, 661, 672, 692, 693, 699, 721, 847, 919, 920, 921, 922, 998, 1002, 1003, 1005, 1007, 1008, 1010, 1012, 1018, 1019, 1024, 1026, 1027, 1028, 1031, 1032, 1045, 1046, 1047, 1050, 1053, 1057], "helper": [44, 45, 126, 235, 286, 375, 384, 385, 395, 396, 418, 474, 582, 909, 996, 1039, 1046, 1047, 1048, 1052], "helvetica": [923, 925], "heme": 1056, "hempstalk": 1046, "henc": [72, 95, 106, 190, 221, 248, 269, 284, 345, 356, 357, 369, 377, 384, 386, 388, 396, 400, 414, 418, 421, 422, 493, 515, 546, 548, 549, 550, 570, 597, 650, 653, 659, 667, 669, 679, 694, 711, 712, 716, 722, 738, 764, 793, 802, 823, 826, 827, 846, 847, 848, 849, 850, 886, 964, 1005, 1007, 1008, 1009, 1014, 1015, 1018, 1028, 1046, 1047, 1050, 1051, 1053], "hendrik": [0, 403, 1039, 1042, 1043, 1044, 1045], "henri": [1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "henriqu": 1058, "henrymooresc": [1053, 1054], "hepe": [686, 1004], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 92, 93, 101, 111, 115, 120, 121, 125, 126, 128, 129, 130, 131, 133, 137, 140, 143, 147, 151, 153, 158, 169, 172, 174, 182, 183, 190, 191, 192, 195, 197, 202, 206, 210, 217, 221, 223, 232, 233, 235, 237, 239, 244, 249, 251, 254, 255, 261, 262, 263, 268, 269, 272, 273, 275, 277, 278, 280, 282, 284, 285, 287, 288, 289, 292, 295, 297, 304, 307, 311, 312, 313, 317, 320, 326, 328, 331, 334, 336, 345, 349, 352, 354, 358, 360, 365, 369, 370, 371, 376, 377, 380, 381, 382, 383, 384, 387, 388, 390, 394, 395, 405, 408, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425, 427, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 470, 478, 481, 543, 545, 546, 550, 551, 570, 574, 575, 576, 577, 588, 589, 591, 595, 598, 601, 609, 635, 637, 654, 658, 660, 662, 668, 670, 672, 680, 682, 696, 698, 702, 706, 719, 733, 763, 801, 806, 807, 810, 811, 813, 821, 829, 830, 831, 832, 833, 834, 835, 836, 838, 847, 851, 852, 875, 883, 886, 889, 892, 903, 904, 914, 973, 997, 1000, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1018, 1020, 1021, 1022, 1023, 1027, 1028, 1031, 1032, 1039, 1047, 1052], "hereaft": 397, "hereund": 1014, "herilalaina": [1046, 1047, 1049], "hermano": [1054, 1055], "hermida": [1048, 1052], "hernandez": 1008, "hern\u00e1ndez": 1008, "hero": [416, 427, 481], "herrou": 1053, "hershei": 1008, "hertel": 1056, "herv": 1043, "hervieu": 1039, "herv\u00e9": 1043, "heryanto": 1046, "hesit": 382, "hessian": [237, 238, 239, 421, 568, 569, 655, 665, 666, 676, 687, 696, 700, 1004, 1012, 1033, 1034, 1054, 1058], "hessian_tol": [696, 700], "heterogen": [43, 48, 61, 90, 103, 105, 187, 191, 217, 258, 320, 324, 374, 376, 394, 470, 494, 548, 588, 598, 720, 871, 875, 911, 1005, 1015, 1018, 1027, 1029, 1034, 1043, 1047, 1049, 1050, 1057], "heteroscedast": [123, 130, 150, 219, 419, 887, 899], "heteroschedast": 1008, "heuer": 1042, "heurist": [51, 54, 149, 254, 356, 370, 414, 423, 455, 458, 467, 468, 515, 516, 544, 546, 553, 683, 684, 685, 698, 702, 810, 811, 913, 914, 915, 916, 917, 942, 1005, 1006, 1011, 1022, 1024, 1032, 1039, 1040, 1044, 1048, 1051, 1052], "hexbin": 248, "hexdigest": 47, "hgbdt": 143, "hgbdt_model": 191, "hgbdt_model_without_interact": 191, "hgbdt_preprocessor": 191, "hgbt": [143, 153, 421], "hgbt_cst": 153, "hgbt_no_cst": 153, "hgbt_quantil": 153, "hhu": [656, 1048], "hi": [0, 415, 1008], "hibon": 1046, "hida": [1054, 1055], "hidden": [43, 191, 312, 313, 382, 390, 411, 419, 867, 868, 869, 1012, 1013, 1027, 1039, 1050], "hidden_layer_s": [191, 255, 310, 312, 868, 869, 1012], "hide": [52, 78, 382, 390, 846, 847, 848, 849, 850, 1042, 1047, 1055], "hideaki": 1053, "hierarch": [2, 53, 59, 71, 74, 75, 79, 81, 87, 88, 89, 92, 187, 193, 241, 328, 364, 396, 422, 447, 449, 451, 452, 511, 519, 521, 529, 537, 554, 738, 864, 891, 1025, 1028, 1029, 1033, 1034, 1039, 1042, 1043, 1055], "hierarchi": [76, 193, 382, 456, 462, 469, 1013], "higgin": [1056, 1057], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 84, 90, 92, 97, 100, 104, 108, 113, 114, 125, 126, 140, 142, 143, 144, 145, 150, 151, 153, 154, 156, 172, 174, 180, 186, 189, 191, 192, 193, 202, 212, 218, 219, 221, 231, 237, 238, 239, 244, 248, 260, 266, 273, 277, 281, 282, 301, 302, 310, 312, 317, 319, 320, 321, 322, 330, 337, 342, 344, 345, 356, 357, 362, 363, 369, 377, 379, 382, 387, 390, 391, 394, 395, 411, 412, 413, 414, 418, 420, 421, 422, 423, 424, 450, 453, 455, 456, 458, 475, 488, 489, 490, 560, 561, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 651, 677, 678, 686, 696, 699, 700, 733, 738, 749, 753, 763, 796, 799, 815, 817, 851, 852, 856, 885, 886, 890, 892, 913, 915, 916, 919, 920, 921, 922, 976, 997, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1014, 1016, 1018, 1020, 1023, 1024, 1025, 1027, 1028, 1039, 1040, 1042, 1043, 1047, 1050, 1051, 1052, 1053, 1054], "high_cardin": 321, "high_cardinality_featur": 321, "high_cardinalityindex": 321, "high_i": 212, "high_precision_cv_result": 273, "high_recall_cv_result": 273, "high_x": 212, "higher": [43, 52, 92, 113, 126, 130, 137, 140, 142, 143, 150, 154, 170, 174, 176, 181, 182, 190, 191, 192, 195, 217, 218, 221, 235, 241, 242, 266, 268, 269, 273, 275, 278, 290, 300, 320, 345, 349, 356, 357, 358, 365, 369, 377, 380, 384, 411, 413, 414, 416, 421, 423, 424, 425, 450, 454, 455, 477, 484, 516, 539, 546, 550, 555, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 573, 580, 595, 598, 614, 615, 626, 634, 638, 642, 644, 653, 654, 659, 660, 667, 668, 669, 670, 683, 685, 686, 711, 731, 735, 759, 792, 804, 807, 810, 811, 813, 821, 828, 830, 835, 838, 857, 860, 886, 903, 904, 905, 911, 912, 913, 914, 915, 916, 917, 924, 1000, 1004, 1005, 1007, 1008, 1011, 1015, 1018, 1022, 1023, 1040, 1045, 1047, 1054, 1056], "highest": [2, 55, 63, 115, 168, 172, 221, 273, 275, 286, 326, 356, 382, 394, 412, 414, 418, 421, 423, 443, 562, 564, 571, 599, 602, 603, 605, 606, 607, 610, 611, 613, 642, 644, 733, 763, 801, 804, 807, 810, 811, 821, 908, 919, 957, 997, 1004, 1008, 1009, 1012, 1022, 1024, 1051], "highest_protocol": 408, "highli": [43, 48, 64, 106, 113, 114, 125, 133, 154, 202, 212, 222, 269, 275, 278, 284, 311, 349, 357, 369, 370, 382, 388, 394, 412, 414, 418, 421, 422, 458, 468, 503, 570, 678, 699, 819, 821, 867, 930, 1004, 1008, 1011, 1012, 1014, 1022, 1023, 1026, 1027], "highlight": [43, 54, 90, 105, 113, 121, 141, 142, 155, 172, 174, 175, 180, 185, 186, 191, 192, 195, 217, 218, 219, 235, 246, 256, 257, 258, 269, 270, 287, 289, 297, 319, 321, 337, 356, 358, 364, 382, 386, 387, 390, 394, 424, 449, 452, 453, 470, 473, 496, 497, 503, 508, 509, 511, 519, 522, 528, 531, 545, 548, 568, 569, 571, 572, 574, 606, 609, 635, 637, 639, 641, 647, 653, 655, 659, 665, 676, 687, 695, 704, 708, 709, 724, 725, 739, 749, 755, 785, 795, 802, 806, 807, 808, 810, 811, 813, 821, 829, 830, 833, 834, 837, 853, 855, 872, 876, 881, 884, 885, 886, 890, 891, 892, 908, 909, 911, 916, 919, 920, 950, 1005, 1008, 1016, 1018, 1023, 1029, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "highlight_min": [150, 206], "higuera": 376, "hila": 414, "hilbert": [222, 877, 1000, 1018], "hilferti": 113, "hill": [414, 454, 467, 1049], "him": 422, "himanshu": [1050, 1053], "hind": 1053, "hinder": 1049, "hing": [2, 62, 224, 227, 229, 283, 342, 343, 347, 349, 396, 673, 683, 742, 911, 918, 1004, 1022, 1023], "hinge_loss": [2, 349, 1008, 1043, 1051, 1052], "hinrich": 419, "hint": [190, 369, 383, 387, 405, 454, 1008], "hinton": [699, 860, 867, 868, 869, 1005, 1011, 1012, 1013], "hintz": 1045, "hiramatsu": 1056, "hirofumi": [1050, 1051], "hirsch": 1047, "hirschberg": [414, 724, 744, 802], "hirzel": 1052, "hispan": 190, "hist": [43, 62, 64, 88, 109, 139, 143, 217, 219, 248, 254, 269, 281, 300, 315, 319, 321, 328, 331, 421], "hist_drop": 147, "hist_n": 147, "hist_nbin": 315, "hist_no_interact": 329, "hist_one_hot": 147, "hist_ordin": 147, "hist_quantil": 328, "hist_x0": 315, "hist_x1": 315, "histgradientboost": 1051, "histgradientboostingclassifi": [2, 142, 143, 269, 324, 325, 326, 327, 329, 331, 370, 408, 566, 571, 639, 640, 998, 1027, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "histgradientboostingclassifierhistgradientboostingclassifi": 269, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 269, "histgradientboostingregressor": [2, 43, 46, 52, 138, 143, 147, 150, 151, 153, 155, 158, 185, 191, 217, 321, 324, 325, 326, 327, 329, 330, 331, 421, 567, 572, 639, 640, 642, 998, 1015, 1027, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "histgradientboostingregressor__interaction_cst": 191, "histgradientboostingregressor__max_depth": 147, "histgradientboostingregressor__max_it": 147, "histgradientboostingregressorhistgradientboostingregressor": [158, 321], "histgradientboostingregressorifittedhistgradientboostingregressor": [155, 329], "histogram": [2, 52, 62, 64, 88, 136, 138, 142, 147, 148, 150, 151, 155, 187, 217, 225, 248, 274, 276, 281, 300, 315, 326, 328, 330, 331, 412, 496, 503, 566, 567, 568, 569, 571, 572, 639, 649, 749, 755, 765, 766, 797, 807, 812, 828, 834, 837, 1000, 1006, 1018, 1029, 1033, 1034, 1051, 1054, 1056], "histor": [51, 217, 269, 1005, 1028], "histori": [51, 386, 566, 567, 1039], "hit": [219, 388], "hitesh": 1051, "hjortkj\u00e6r": 1053, "hkey_local_machin": 400, "hline": 125, "hlle": 1005, "hmasdev": 1053, "hmc": 51, "hmm": [1039, 1040, 1041, 1042, 1044], "hmmlearn": 1027, "hn": 388, "hnyk": [1045, 1046], "ho": [421, 562, 563, 1008, 1044, 1047, 1048, 1053], "hoang": [1048, 1049], "hobson": 1045, "hoc": [171, 172, 187, 267, 269, 278, 292, 332, 337, 396, 413, 503, 665, 823, 829, 834, 872, 891, 1029], "hochberg": [602, 1045, 1046], "hochreit": [411, 726], "hockei": [57, 377], "hoctor": 1051, "hoda1394": 1051, "hoenig": 1039, "hoesli": 421, "hoffman": [419, 543, 1044, 1051], "hogan": 1047, "hoh": 1047, "hold": [0, 47, 52, 63, 64, 217, 221, 251, 269, 276, 364, 375, 382, 383, 384, 396, 412, 414, 418, 421, 422, 424, 510, 564, 568, 571, 596, 639, 640, 641, 743, 807, 810, 811, 821, 847, 878, 879, 884, 885, 892, 895, 919, 921, 998, 1002, 1008, 1012, 1022, 1023, 1024, 1047, 1051, 1057], "holdgraf": 1047, "holdselig": 422, "hole": [187, 236, 237, 242, 537, 699, 700, 1029, 1053], "holger": 1046, "holidai": [43, 191], "holm": [842, 1009, 1056], "holman": 1054, "holmstr\u00f6m": 1041, "holohan": [1054, 1056], "holt": [0, 404, 1039], "holub": 541, "home": [0, 2, 7, 51, 52, 158, 178, 180, 182, 183, 245, 261, 313, 329, 377, 380, 390, 400, 492, 498, 506, 686, 1032], "homebrew": [385, 400], "homepag": [377, 537, 1024], "homm": 1054, "homo": 93, "homogen": [2, 72, 73, 74, 79, 81, 84, 90, 93, 357, 377, 394, 396, 416, 421, 424, 452, 621, 711, 724, 738, 743, 744, 764, 802, 1005, 1006, 1008, 1048], "homogeneity_completeness_v_measur": [2, 414, 1048], "homogeneity_scor": [2, 73, 84, 93, 357, 414, 724, 743, 802, 1008], "homomorph": 1027, "homoscedast": [130, 247, 319, 1008, 1047], "homoschedast": 1008, "honda": 51, "honei": 1002, "hong": [1045, 1047, 1051, 1052, 1053, 1055, 1057], "hongh": 1047, "hongkahjun": 1046, "honglu": 1049, "hongshaoyang": 1054, "honl": [1051, 1052], "honolulu": 1008, "honor": 321, "hood": [408, 1004, 1023], "hoover": [1044, 1045, 1046, 1048], "hope": [30, 44, 180, 235, 396, 1048], "hopefulli": [278, 390, 1039], "hopfensperg": [1056, 1057, 1058], "hopper": 1044, "horizont": [66, 123, 237, 249, 315, 318, 387, 396, 470, 522, 704, 708], "horizontal_distance_to_hydrologi": 497, "horizontalalign": [51, 63, 67, 75, 79, 80, 97, 129, 244, 260, 310, 317], "hornik": 642, "hornstein": 1054, "horrel": 1046, "hoshia": 1053, "hossein": [1047, 1048, 1049], "host": [0, 143, 330, 356, 377, 382, 386, 390, 391, 498, 904, 1055], "hot": [2, 43, 105, 142, 145, 158, 190, 217, 284, 316, 317, 321, 326, 345, 396, 421, 422, 558, 573, 588, 655, 665, 666, 676, 687, 874, 876, 878, 879, 882, 884, 885, 892, 1004, 1018, 1047, 1053, 1054], "hot_r": [51, 315], "hotel": 1032, "hotspot": 388, "hotter": 145, "hour": [43, 153, 190, 191, 331, 382, 388, 503, 1005, 1026], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 153, 190], "hourly_wag": 189, "hous": [2, 109, 148, 158, 185, 186, 269, 315, 326, 375, 496, 1034], "house_pric": [109, 158], "houseag": [315, 326, 377, 496], "household": 377, "housestyl": [147, 158], "hover": 331, "hover_data": [143, 276], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 85, 86, 87, 88, 92, 95, 103, 104, 105, 108, 111, 113, 118, 132, 137, 138, 141, 145, 146, 147, 148, 150, 151, 153, 156, 158, 169, 170, 181, 187, 190, 191, 192, 193, 195, 199, 205, 206, 207, 213, 218, 219, 220, 221, 224, 225, 231, 235, 241, 242, 246, 249, 251, 253, 254, 255, 257, 266, 269, 270, 271, 273, 275, 276, 277, 282, 284, 285, 287, 289, 290, 294, 295, 297, 298, 299, 301, 302, 307, 312, 320, 322, 325, 326, 327, 330, 331, 342, 343, 345, 348, 349, 352, 356, 357, 360, 364, 369, 370, 371, 377, 380, 381, 383, 384, 385, 387, 390, 395, 396, 397, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 428, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 511, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 629, 630, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 711, 727, 764, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 991, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1014, 1015, 1016, 1018, 1020, 1021, 1023, 1024, 1026, 1028, 1032, 1034, 1039, 1041, 1044, 1050, 1053, 1054, 1055], "howel": 1046, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 82, 84, 88, 90, 95, 106, 109, 111, 115, 117, 128, 130, 140, 142, 143, 147, 150, 151, 158, 169, 172, 174, 179, 180, 191, 192, 199, 206, 217, 221, 238, 241, 242, 244, 250, 251, 254, 269, 275, 282, 288, 289, 290, 292, 294, 295, 300, 311, 315, 326, 332, 349, 352, 356, 357, 365, 369, 370, 371, 376, 377, 379, 381, 382, 384, 388, 390, 394, 396, 405, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 446, 449, 453, 455, 457, 460, 465, 503, 515, 539, 548, 558, 574, 588, 589, 590, 596, 613, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 639, 640, 645, 650, 662, 663, 679, 694, 699, 702, 707, 770, 772, 807, 809, 810, 811, 821, 824, 827, 834, 838, 839, 850, 868, 869, 874, 883, 884, 889, 913, 914, 916, 933, 960, 976, 997, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1022, 1023, 1024, 1048, 1049, 1051, 1052, 1055], "hoyer": [419, 1042], "hp": 51, "hpq": 51, "hrishikesh": [1040, 1041], "hristo": [1047, 1054], "hsiang": [665, 1043], "hsieh": 1045, "hspace": [45, 53, 54, 79, 80, 97, 123, 235, 244, 260, 262, 263, 266, 300, 326, 335, 342], "hstack": [53, 69, 77, 160, 168, 242, 253, 270, 348, 418, 870], "hsuan": 1044, "ht2001": 1008, "htf": 421, "htm": [919, 920], "html": [2, 43, 47, 51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 172, 179, 190, 191, 192, 195, 199, 245, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 377, 379, 382, 383, 385, 386, 390, 415, 418, 422, 428, 493, 515, 516, 665, 846, 850, 949, 950, 951, 1006, 1027, 1028, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "htmledit": [846, 850, 1006], "htmlparser": 47, "htsedebenham": 1054, "http": [43, 45, 47, 51, 52, 55, 61, 105, 172, 195, 217, 225, 233, 235, 242, 289, 292, 294, 295, 312, 376, 377, 379, 380, 382, 386, 387, 388, 390, 394, 396, 400, 414, 418, 423, 448, 455, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 515, 516, 517, 537, 538, 541, 544, 548, 602, 643, 648, 651, 656, 665, 671, 673, 674, 675, 678, 683, 686, 689, 690, 692, 693, 699, 702, 712, 728, 730, 731, 765, 766, 776, 846, 848, 850, 853, 854, 859, 860, 861, 862, 867, 889, 904, 905, 906, 919, 920, 949, 950, 1004, 1006, 1008, 1021, 1024, 1049, 1058], "hu": [1044, 1047, 1049], "hua": [570, 1014], "huang": [377, 665, 1045, 1050], "huangk10": 1050, "huard": 1039, "huber": [25, 200, 227, 421, 567, 656, 683, 685, 1022, 1039, 1041, 1042, 1051], "huberlossfunct": 1052, "huberregressor": [2, 89, 174, 187, 196, 215, 221, 222, 223, 322, 531, 677, 678, 679, 685, 686, 1004, 1029, 1045, 1046, 1047, 1048], "hubert": [414, 712, 722, 793], "hubert1985": 712, "hudson": 329, "hue": [153, 265, 275, 320, 379], "huerta": 1049, "hug": [0, 172, 403, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "huge": [219, 222, 369, 388, 634, 1042], "hugh": [886, 1041, 1052], "hugo": [45, 377, 1045, 1050, 1051, 1052, 1053], "hugorichard": 1051, "hugu": 1043, "hui": [204, 545, 547, 554, 663, 1004], "huiginn": 1039, "huilgolkar": [1040, 1041], "hujiahong726": 1055, "hull": 1056, "humahn": 1054, "human": [123, 191, 356, 382, 414, 419, 868, 869, 1008, 1015, 1048], "humid": [43, 191, 1015], "hunan": 1047, "hundr": [77, 149, 238, 319, 377, 418, 421, 568, 569, 1005, 1050], "hunt": 1054, "hunter": 1048, "hurt": [369, 541, 1047], "husak": 1053, "huszar": 1032, "hut": [699, 1005, 1044, 1046, 1049], "huynh": [1049, 1051], "hv": 422, "hvassard": 1053, "hwan": 1050, "hwang": 1045, "hybrid": [452, 656, 1027], "hye": 1050, "hyper": [2, 43, 64, 105, 143, 268, 269, 275, 280, 313, 345, 365, 384, 394, 395, 396, 409, 418, 421, 423, 474, 651, 652, 811, 819, 821, 867, 909, 1003, 1004, 1008, 1011, 1022, 1023, 1027, 1034, 1039, 1053, 1058], "hyperband": 997, "hyperbol": [349, 649, 868, 869, 1006, 1012], "hypercub": [244, 522], "hyperlink": 1041, "hyperparamet": [2, 105, 107, 108, 153, 174, 175, 181, 182, 185, 187, 191, 197, 202, 206, 231, 235, 244, 254, 267, 269, 273, 278, 280, 286, 287, 297, 313, 356, 384, 396, 414, 418, 419, 421, 424, 509, 542, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 650, 660, 666, 672, 680, 683, 735, 792, 807, 821, 916, 997, 1002, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1022, 1028, 1029, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055], "hyperparameter_baseline_similar": 182, "hyperparameter_grid": 331, "hyperparameter_length_scal": 622, "hyperplan": [139, 177, 187, 196, 209, 226, 252, 278, 340, 341, 342, 343, 344, 345, 349, 350, 519, 638, 665, 666, 673, 675, 681, 682, 683, 684, 911, 913, 915, 916, 1022, 1023, 1029], "hyperspher": 378, "hypothes": 1004, "hypothesi": [150, 275, 281, 418, 697, 701, 836, 1005], "hypothet": 64, "hyunjin": 1039, "hyvarinen": [426, 540], "h\u00e9lion": 1050, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 343, 344, 345, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 365, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 395, 396, 397, 399, 400, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 955, 957, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 976, 977, 978, 979, 981, 982, 988, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "i_ax": 295, "i_dataset": [79, 97, 244], "i_j": 1016, "iain": [172, 379, 1004], "iampat": 1047, "ian": [1041, 1043, 1048, 1049, 1051, 1054, 1055, 1057], "iasoon": 1053, "ibay": 1039, "ibieta": 1052, "ibm": [51, 57, 338, 358, 377], "ibn": 1039, "ibnukhsein": 1056, "ibraheem": 1048, "ibrahima": 1049, "ibraim": [1044, 1045, 1046], "ib\u00e1\u00f1ez": [1047, 1048, 1051], "ic": [47, 292, 326, 376, 379, 399, 507, 509, 517, 639, 640, 1034, 1051, 1052], "ica": [11, 125, 426, 1024, 1033, 1034], "ica_estim": 123, "icann": 703, "icassp": 1008, "icdm": [570, 1014], "icdmw": 414, "ice_lines_kw": 639, "icml": [62, 64, 412, 414, 422, 443, 445, 846, 848, 867, 1008, 1010, 1022, 1026], "icml03": 848, "icml09": [538, 544], "icon": [331, 384], "icyblad": 1046, "id": [2, 45, 52, 57, 235, 308, 364, 376, 377, 382, 390, 416, 418, 422, 428, 501, 502, 503, 923, 925, 950, 1047, 1048, 1051], "id3": [1030, 1034], "idea": [44, 88, 113, 114, 143, 172, 179, 190, 218, 237, 269, 300, 345, 360, 369, 370, 382, 387, 388, 416, 417, 418, 419, 420, 421, 423, 614, 615, 1004, 1005, 1008, 1011, 1014, 1026, 1032], "ideal": [217, 219, 235, 269, 272, 275, 282, 284, 285, 365, 381, 382, 383, 386, 387, 390, 394, 396, 412, 413, 733, 763, 997, 1007, 1022, 1023, 1028, 1031], "idelberg": 1056, "ident": [52, 57, 99, 149, 212, 217, 235, 244, 248, 339, 356, 377, 384, 396, 411, 414, 415, 416, 418, 424, 427, 444, 445, 458, 470, 471, 479, 481, 482, 485, 486, 487, 494, 510, 558, 566, 567, 571, 572, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 650, 686, 687, 706, 711, 712, 743, 792, 802, 809, 812, 822, 823, 826, 827, 853, 854, 860, 868, 869, 875, 876, 888, 900, 919, 920, 1001, 1002, 1005, 1008, 1011, 1012, 1023, 1043, 1047, 1048, 1049, 1053, 1057], "identif": [377, 382, 414, 504, 997], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 376, 377, 381, 382, 387, 396, 413, 414, 415, 418, 421, 422, 452, 456, 463, 493, 503, 515, 516, 562, 563, 564, 565, 570, 571, 572, 573, 613, 650, 656, 706, 719, 781, 836, 857, 876, 906, 907, 997, 1004, 1008, 1014, 1021, 1032, 1046, 1048, 1053, 1054], "idf": [2, 54, 57, 248, 356, 357, 358, 377, 419, 528, 551, 595, 596, 597, 598, 850, 858, 883, 997, 1006, 1010, 1018, 1039], "idf_": [422, 597, 598, 1047], "idier": [419, 545, 547, 554], "idiom": 388, "idl": 1050, "ido": [1054, 1055], "idpol": [217, 235], "idx": [50, 57, 80, 90, 132, 139, 143, 146, 153, 159, 183, 191, 193, 202, 209, 216, 217, 226, 238, 269, 361, 415, 418], "idx_a": 284, "idx_avg_max_test_scor": 288, "idx_b": 284, "idx_r": 216, "idx_sort": 217, "idxmax": 352, "idxmin": 273, "ie": [75, 101, 124, 446, 711, 1004, 1018], "ieee": [98, 112, 114, 379, 414, 416, 423, 427, 454, 481, 541, 570, 671, 692, 693, 732, 776, 1004, 1008, 1014], "ieeexplor": 776, "ieic": [545, 547, 554], "iem": 665, "if_binari": [190, 258, 884, 1018, 1050], "if_delegate_has_method": [1052, 1053], "iff": [599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 882], "iforest": 254, "iforest_kw": 254, "iglesi": 1054, "ignacio": 1042, "ignor": [2, 43, 45, 47, 55, 79, 84, 90, 97, 105, 137, 142, 147, 155, 158, 191, 204, 217, 232, 245, 246, 251, 256, 258, 266, 311, 312, 320, 321, 325, 328, 349, 357, 370, 382, 384, 386, 388, 396, 400, 405, 414, 415, 421, 422, 432, 433, 436, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 466, 467, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 510, 515, 516, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 586, 588, 589, 590, 595, 596, 597, 598, 604, 609, 610, 617, 618, 634, 635, 636, 637, 639, 640, 642, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 714, 718, 720, 721, 733, 736, 737, 745, 762, 763, 770, 776, 781, 785, 790, 791, 794, 795, 804, 805, 806, 808, 809, 810, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 868, 869, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 903, 904, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 930, 944, 982, 991, 996, 1004, 1005, 1008, 1010, 1014, 1018, 1023, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "ignore_attribut": 376, "ignore_error": 89, "ignore_implicit_zero": [888, 900], "ignore_ti": [733, 763], "ignore_warn": [225, 317, 1045], "ignored_new_col": 415, "ignorerevsfil": 382, "igor": [1045, 1046, 1052], "ih": 300, "ii": [50, 124, 191, 224, 270, 379, 422, 589, 590, 596, 645, 673, 674, 874, 883, 1004, 1018, 1026, 1056], "iid": 1047, "iii": [1053, 1056], "iijima": 1048, "iinfo": 1054, "ij": [275, 305, 411, 414, 419, 545, 547, 554, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 1004, 1005, 1008, 1010, 1013, 1018, 1023], "ijcnn": 1008, "ijcv": 1008, "ijet": 414, "ik": [1004, 1008], "ikeda": 1051, "ikko": 1052, "il": [49, 671, 692, 693, 1004, 1008], "ilambharathi": [1042, 1043], "ili": [1055, 1056], "ilic": 1052, "ilion": 1053, "iliya": 1054, "iljin": [1054, 1055], "ill": [75, 115, 222, 313, 477, 478, 484, 657, 658, 661, 662, 663, 689, 690, 1004, 1007, 1049], "illustr": [48, 52, 60, 61, 63, 67, 69, 87, 91, 92, 104, 105, 108, 109, 111, 113, 118, 121, 125, 137, 140, 145, 152, 153, 155, 157, 158, 167, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 187, 189, 191, 192, 195, 206, 213, 214, 217, 219, 221, 225, 227, 228, 230, 231, 234, 235, 237, 238, 240, 242, 244, 246, 247, 249, 250, 251, 253, 264, 269, 275, 282, 287, 289, 296, 304, 318, 320, 323, 324, 326, 332, 337, 345, 346, 350, 352, 353, 354, 357, 358, 363, 365, 369, 379, 382, 387, 390, 395, 413, 417, 419, 421, 422, 522, 617, 618, 620, 621, 622, 626, 629, 630, 860, 997, 1004, 1008, 1011, 1014, 1020, 1021, 1022, 1023, 1027, 1029, 1032], "iloc": [43, 153, 158, 190, 191, 235, 275, 298], "ilya": [1046, 1057], "im": [123, 133, 286, 299], "im_": 704, "im_kw": [704, 1053], "imacul": 1045, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 81, 83, 86, 89, 93, 97, 102, 104, 122, 123, 128, 145, 170, 172, 178, 187, 208, 238, 246, 249, 253, 273, 304, 312, 313, 325, 334, 335, 356, 357, 374, 375, 377, 379, 382, 387, 390, 396, 400, 407, 413, 414, 419, 447, 451, 458, 468, 500, 501, 502, 503, 509, 510, 513, 514, 541, 542, 544, 548, 590, 591, 592, 593, 594, 614, 615, 698, 704, 745, 837, 881, 1004, 1008, 1009, 1011, 1013, 1020, 1024, 1027, 1029, 1032, 1034, 1039, 1042, 1047, 1048, 1052, 1054, 1055], "image_arrai": 83, "image_array_sampl": 83, "image_height": [590, 591, 594], "image_index": [334, 335], "image_nam": 513, "image_patch": 594, "image_reconstruct": 594, "image_s": 594, "image_shap": [123, 253], "image_width": [590, 591, 594], "imagebox": 238, "imageio": 376, "imagenet": [868, 869], "images_restor": 86, "imagin": [124, 174, 251, 349, 418, 419, 422, 1004], "imamura": 1053, "imbal": [268, 278, 289, 418, 714, 736, 737, 745, 790, 791, 794, 795, 1008], "imbalanc": [217, 269, 278, 282, 284, 289, 357, 394, 412, 418, 710, 715, 794, 808, 812, 848, 1008, 1010, 1016, 1027], "imbert": [1046, 1048, 1051, 1053, 1056, 1057], "img": [44, 85, 101, 513, 593], "img_height": 590, "img_shap": 145, "img_to_graph": [2, 81, 101, 422, 1042, 1052], "img_width": 590, "imit": 356, "immanuel": [0, 1039, 1040, 1044], "immedi": [90, 382, 394, 807, 821, 832, 833, 1047], "immens": 1032, "immensu": 1047, "immers": [697, 701], "immobil": 43, "immut": 408, "imp": 998, "imp_mean": [634, 637], "imp_reshap": 145, "impact": [51, 52, 62, 71, 72, 77, 78, 99, 109, 137, 168, 187, 189, 190, 191, 198, 219, 221, 235, 254, 268, 269, 292, 298, 320, 329, 352, 357, 365, 369, 370, 375, 394, 397, 412, 414, 419, 453, 455, 543, 547, 554, 597, 673, 674, 675, 679, 681, 683, 684, 685, 699, 801, 807, 810, 811, 821, 834, 851, 852, 853, 854, 888, 900, 911, 912, 940, 955, 978, 981, 997, 1007, 1015, 1023, 1029, 1046, 1049, 1052], "imped": 390, "imperfect": [735, 792, 1008, 1041], "imperfectli": [710, 741, 1008], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 81, 91, 114, 123, 143, 153, 186, 193, 195, 202, 206, 231, 235, 237, 244, 250, 251, 269, 273, 275, 284, 292, 294, 295, 297, 300, 318, 324, 325, 326, 327, 328, 330, 356, 358, 369, 370, 371, 376, 377, 379, 380, 382, 383, 384, 387, 388, 390, 391, 396, 400, 405, 410, 411, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 443, 448, 449, 450, 452, 453, 454, 455, 456, 481, 500, 503, 515, 539, 540, 541, 542, 543, 545, 548, 549, 550, 560, 561, 562, 564, 565, 568, 569, 570, 574, 579, 589, 595, 596, 598, 600, 604, 608, 617, 618, 639, 640, 647, 648, 652, 653, 660, 664, 665, 666, 670, 671, 675, 678, 679, 681, 682, 683, 684, 685, 691, 692, 693, 694, 695, 698, 699, 702, 714, 718, 727, 742, 745, 749, 785, 789, 795, 796, 804, 806, 807, 810, 811, 813, 821, 825, 826, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 856, 859, 861, 862, 867, 868, 869, 871, 893, 901, 902, 908, 911, 912, 913, 914, 915, 916, 917, 954, 955, 964, 967, 972, 976, 978, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "impli": [43, 174, 190, 356, 357, 358, 419, 421, 424, 480, 580, 589, 617, 618, 629, 742, 941, 1004, 1005, 1050], "implic": [365, 382], "implicit": [2, 217, 396, 421, 422, 579, 689, 690, 1002, 1007, 1027, 1048], "implicitli": [358, 391, 421, 604, 639, 640, 890, 998, 1000, 1015, 1018, 1023, 1057], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 376, 377, 378, 380, 381, 382, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 399, 400, 401, 405, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 968, 969, 970, 971, 972, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1032, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1057], "importance_gett": [423, 600, 601, 604, 1051], "importances_mean": [144, 151, 192, 193, 324, 641, 1016], "importances_std": [144, 641, 1016], "important_word": 57, "importantli": [43, 53, 124, 180, 191, 195, 315, 382, 414, 1057], "importerror": [50, 88, 126, 295, 308, 390], "importlib": 1052, "impos": [74, 92, 155, 205, 211, 221, 321, 394, 414, 419, 421, 422, 534, 664, 1004], "imposs": [150, 358, 1028], "impract": 916, "impress": 1032, "improp": [396, 1046], "improv": [0, 30, 43, 61, 62, 69, 111, 112, 115, 128, 133, 137, 138, 143, 146, 148, 149, 150, 152, 153, 158, 168, 186, 190, 195, 203, 217, 225, 235, 269, 276, 278, 292, 295, 298, 313, 320, 330, 348, 349, 357, 365, 370, 380, 385, 387, 388, 390, 391, 394, 396, 397, 408, 419, 421, 423, 455, 456, 538, 539, 541, 544, 545, 546, 548, 549, 550, 553, 561, 564, 565, 566, 567, 568, 569, 571, 572, 617, 618, 650, 659, 671, 673, 674, 675, 679, 680, 681, 682, 683, 685, 692, 694, 699, 736, 737, 790, 791, 794, 795, 860, 868, 869, 885, 887, 899, 919, 920, 922, 955, 997, 1002, 1004, 1005, 1008, 1011, 1012, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "improvis": [50, 308], "impur": [151, 193, 364, 399, 421, 423, 560, 561, 564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 923, 925, 1024, 1034, 1044, 1045, 1046, 1047], "imput": [2, 105, 153, 158, 192, 246, 256, 258, 325, 328, 374, 386, 395, 396, 405, 415, 421, 496, 508, 572, 587, 634, 635, 636, 637, 646, 652, 679, 833, 854, 872, 936, 938, 1027, 1028, 1029, 1034, 1041, 1042], "imputation_const": 256, "imputation_mean": 256, "imputation_ord": [634, 1049], "imputation_sequence_": 634, "impute_estim": 185, "impute_scor": 186, "imran": [1041, 1042, 1043], "imread": 68, "imshow": [44, 45, 53, 68, 75, 81, 82, 83, 85, 86, 88, 89, 93, 115, 123, 126, 133, 176, 177, 178, 182, 193, 208, 233, 238, 253, 286, 299, 313, 334, 335, 345, 353, 376, 639, 704, 1053], "in1d": 1046, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 90, "inaccur": 1058, "inact": [358, 376, 382], "inadvert": [189, 396], "inadvis": 408, "inappropri": [377, 418, 424, 716, 828], "inbuilt": 418, "inc": [0, 104, 274, 998, 1020, 1032], "incap": 90, "incentiv": 386, "incept": 1028, "includ": [0, 11, 18, 43, 68, 70, 90, 113, 143, 147, 148, 149, 189, 190, 192, 202, 217, 221, 235, 251, 276, 292, 295, 311, 315, 327, 328, 330, 345, 350, 356, 358, 365, 369, 370, 376, 378, 380, 382, 383, 384, 386, 387, 388, 390, 391, 396, 397, 400, 408, 411, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 450, 452, 456, 462, 472, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 503, 507, 508, 509, 511, 512, 517, 541, 548, 564, 571, 581, 639, 645, 653, 654, 659, 667, 668, 669, 672, 688, 695, 696, 704, 720, 736, 737, 742, 744, 745, 778, 790, 791, 794, 802, 807, 809, 810, 811, 820, 821, 824, 827, 834, 837, 859, 861, 862, 863, 884, 885, 886, 890, 908, 911, 912, 919, 921, 923, 925, 937, 938, 941, 943, 947, 949, 950, 964, 997, 1004, 1007, 1008, 1009, 1011, 1012, 1018, 1022, 1023, 1024, 1027, 1028, 1031, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "include_bia": [43, 197, 290, 886, 890, 1053], "include_boundari": [941, 1053], "include_self": [74, 79, 102, 702, 864, 865, 1043], "include_valu": 704, "inclus": [0, 382, 384, 390, 456, 462, 761, 793, 1008, 1009, 1039, 1053], "incom": [315, 377, 446], "incoming_count": 55, "incompat": [503, 998, 1047, 1048], "incomplet": [382, 400, 410, 414, 712, 802, 998, 1005, 1043, 1045], "inconsist": [2, 396, 408, 422, 515, 516, 583, 913, 916, 941, 1014, 1023, 1034, 1039, 1044, 1045, 1046, 1047, 1049, 1052, 1054, 1055, 1056], "inconsistentversionwarn": [2, 408, 1055], "incorpor": [330, 382, 415, 421, 1007, 1027, 1032], "incorrect": [137, 189, 337, 365, 382, 414, 614, 615, 639, 640, 741, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1058], "incorrectli": [199, 282, 421, 422, 560, 566, 568, 741, 747, 1008, 1040, 1045, 1047, 1048, 1050, 1055], "incr_mean_variance_axi": [2, 1045, 1051], "increas": [2, 43, 46, 54, 63, 72, 78, 90, 92, 93, 96, 109, 126, 137, 138, 140, 143, 146, 148, 153, 155, 168, 172, 174, 178, 179, 180, 190, 191, 195, 198, 200, 208, 217, 218, 219, 221, 235, 242, 248, 261, 262, 269, 275, 276, 277, 282, 288, 289, 310, 316, 317, 320, 326, 332, 335, 345, 352, 357, 358, 360, 369, 370, 371, 381, 390, 391, 396, 412, 414, 416, 419, 421, 422, 425, 446, 450, 452, 458, 469, 477, 478, 484, 539, 543, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 634, 642, 643, 644, 652, 657, 658, 661, 662, 663, 665, 666, 673, 674, 675, 683, 684, 685, 689, 690, 692, 693, 699, 713, 714, 719, 785, 789, 796, 810, 811, 840, 859, 861, 862, 863, 866, 868, 869, 885, 911, 919, 920, 921, 922, 955, 997, 999, 1003, 1004, 1005, 1007, 1008, 1011, 1018, 1022, 1023, 1024, 1032, 1039, 1041, 1044, 1048, 1050, 1051, 1054, 1057], "increasing_": 642, "increasing_bool": 643, "increment": [2, 106, 122, 128, 129, 130, 131, 187, 278, 386, 388, 448, 453, 469, 511, 540, 541, 542, 543, 546, 548, 551, 609, 653, 665, 673, 813, 835, 843, 844, 846, 847, 848, 849, 850, 880, 881, 891, 911, 912, 982, 1004, 1010, 1029, 1042, 1043], "incrementalpca": [2, 127, 371, 419, 540, 542, 546, 548, 551, 1043, 1046, 1047, 1049, 1050, 1053], "incur": [63, 626, 911, 1023, 1047], "ind": [53, 77, 149, 160, 357, 851, 852], "inde": [44, 46, 62, 64, 70, 74, 75, 88, 90, 93, 115, 118, 128, 137, 140, 171, 172, 174, 190, 192, 197, 202, 204, 206, 217, 219, 277, 278, 282, 284, 292, 295, 315, 320, 352, 357, 365, 369, 381, 387, 395, 396, 397, 414, 416, 421, 574, 575, 1004, 1018, 1022, 1053], "indecisiveus": [1050, 1051], "indefinit": 386, "indent": [384, 973], "independ": [2, 32, 52, 62, 64, 72, 81, 124, 125, 127, 142, 146, 181, 191, 253, 254, 275, 278, 280, 284, 294, 315, 322, 324, 357, 365, 369, 370, 378, 384, 395, 396, 400, 408, 411, 412, 414, 415, 416, 417, 418, 422, 426, 455, 470, 494, 510, 522, 523, 524, 525, 527, 539, 540, 542, 544, 546, 547, 553, 554, 558, 559, 611, 614, 615, 632, 647, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 679, 680, 681, 682, 711, 712, 724, 743, 744, 762, 764, 802, 809, 836, 840, 842, 844, 845, 883, 887, 888, 889, 891, 895, 896, 897, 898, 900, 901, 902, 905, 913, 914, 915, 916, 917, 949, 997, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1023, 1024, 1033, 1034, 1039, 1040, 1045, 1047, 1049, 1054], "inder128": 1049, "inderjeet": 1050, "inderjit": [411, 459], "indeterminaci": 551, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 84, 85, 93, 105, 106, 137, 142, 144, 153, 169, 172, 185, 189, 190, 191, 192, 193, 217, 221, 235, 255, 258, 261, 262, 266, 270, 273, 274, 275, 276, 278, 286, 287, 288, 289, 295, 315, 320, 321, 322, 328, 332, 334, 335, 357, 358, 377, 379, 380, 382, 384, 386, 391, 394, 396, 411, 415, 418, 419, 421, 422, 429, 449, 453, 454, 455, 456, 457, 459, 460, 463, 465, 466, 470, 473, 510, 516, 564, 565, 566, 567, 571, 572, 573, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 624, 639, 640, 647, 704, 711, 712, 719, 723, 725, 738, 745, 764, 786, 787, 793, 795, 801, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 837, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 884, 919, 920, 921, 922, 928, 959, 978, 981, 986, 987, 1008, 1010, 1011, 1012, 1022, 1024, 1027, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "index_alpha_path_a": 204, "index_alpha_path_b": 204, "index_map": 55, "indexerror": [1047, 1048], "indexhash": 647, "indexhash_": 647, "indian": 377, "indic": [2, 51, 57, 58, 62, 63, 83, 94, 95, 101, 109, 118, 120, 123, 137, 142, 148, 179, 182, 186, 189, 191, 214, 239, 248, 251, 268, 269, 277, 278, 281, 282, 295, 308, 334, 335, 338, 356, 357, 358, 364, 370, 377, 382, 383, 384, 386, 390, 391, 394, 396, 410, 411, 412, 414, 416, 418, 419, 421, 422, 425, 429, 434, 443, 446, 450, 456, 457, 458, 459, 461, 462, 463, 466, 470, 473, 478, 493, 515, 516, 518, 519, 520, 530, 539, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 588, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 627, 634, 635, 636, 637, 639, 640, 646, 653, 654, 657, 658, 659, 660, 661, 662, 668, 670, 672, 680, 682, 689, 690, 697, 699, 701, 703, 710, 714, 719, 720, 725, 726, 727, 729, 732, 735, 736, 737, 738, 741, 745, 746, 747, 748, 761, 778, 785, 786, 787, 788, 790, 791, 792, 794, 795, 799, 800, 801, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 844, 845, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 875, 878, 882, 884, 892, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 927, 928, 933, 937, 938, 943, 959, 970, 971, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 998, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1018, 1019, 1022, 1023, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058], "indicator_": [634, 635, 637], "indicator_matrix_": 1044, "indigo": 234, "indirect": [278, 383, 396], "indirectli": [235, 349], "indispens": 1032, "indistinguish": 315, "individu": [2, 43, 81, 95, 113, 136, 138, 140, 158, 167, 170, 183, 187, 188, 190, 193, 217, 235, 245, 254, 255, 269, 278, 280, 294, 324, 331, 332, 349, 352, 370, 383, 384, 386, 389, 391, 396, 399, 405, 411, 415, 418, 421, 422, 443, 458, 468, 470, 503, 508, 510, 516, 562, 563, 566, 567, 569, 570, 572, 574, 575, 576, 577, 610, 616, 617, 639, 640, 650, 652, 664, 665, 666, 675, 678, 679, 680, 681, 682, 683, 684, 685, 694, 719, 726, 735, 741, 757, 758, 792, 797, 798, 807, 821, 839, 843, 844, 846, 847, 848, 849, 850, 869, 872, 880, 881, 883, 884, 885, 888, 890, 891, 896, 897, 898, 911, 912, 1008, 1009, 1018, 1023, 1029, 1034, 1040, 1043, 1045, 1051, 1053, 1055], "indptr": [55, 295, 364, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1047, 1055], "induc": [25, 63, 91, 190, 202, 208, 210, 215, 218, 232, 250, 254, 352, 358, 411, 419, 421, 452, 455, 546, 550, 560, 564, 565, 566, 567, 571, 572, 573, 650, 733, 763, 884, 919, 920, 921, 922, 1001, 1008, 1022], "induct": [43, 47, 64, 71, 135, 150, 182, 187, 251, 396, 414, 421, 428, 447, 519, 571, 634, 638, 906, 907, 968, 991, 1004, 1021, 1029, 1041], "inductive_learn": 91, "inductivecluster": 91, "industri": [414, 1027], "ineffect": [319, 412, 1018, 1047, 1048], "ineffici": [2, 421, 449, 581, 839, 840, 1011, 1013], "inequ": [364, 396, 414, 449, 453, 465, 706, 1005, 1006, 1011], "inertia": [92, 93, 96, 357, 414, 449, 453, 455, 458, 465, 466, 468, 469, 1050], "inertia_": [93, 96, 99, 449, 453, 455, 1050], "inf": [109, 177, 305, 391, 414, 424, 452, 456, 461, 462, 463, 467, 477, 478, 484, 560, 561, 566, 567, 600, 601, 604, 613, 614, 615, 626, 634, 642, 644, 655, 656, 657, 659, 676, 678, 679, 683, 684, 685, 687, 694, 735, 737, 753, 785, 792, 796, 867, 876, 883, 935, 936, 937, 938, 953, 1008, 1018, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057], "infant": 1018, "infeas": [1004, 1011, 1013], "infer": [25, 187, 188, 190, 212, 261, 265, 266, 275, 361, 376, 384, 394, 408, 418, 419, 498, 503, 515, 516, 522, 541, 543, 545, 547, 554, 556, 557, 560, 566, 567, 639, 642, 664, 716, 729, 730, 748, 792, 804, 805, 813, 830, 837, 847, 885, 892, 906, 907, 919, 920, 921, 922, 970, 998, 1004, 1007, 1008, 1013, 1018, 1021, 1024, 1027, 1028, 1029, 1040, 1044, 1045, 1050, 1053, 1056], "inferencesess": 408, "inferenti": 91, "inferior": [447, 451, 1050], "infin": [2, 275, 352, 548, 689, 690, 719, 832, 918, 936, 1011], "infinit": [64, 218, 260, 278, 349, 369, 424, 452, 629, 630, 785, 804, 935, 937, 938, 1000, 1007, 1018, 1023, 1047, 1049, 1052, 1053, 1054, 1056, 1057], "inflammatori": 377, "inflat": [92, 189, 190, 192, 414, 418, 1008, 1018], "inflect": 277, "influenc": [42, 48, 52, 113, 114, 137, 187, 190, 200, 260, 283, 315, 322, 345, 349, 352, 365, 371, 416, 419, 421, 437, 446, 460, 471, 488, 489, 490, 495, 508, 561, 563, 565, 567, 569, 572, 575, 577, 618, 635, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 683, 685, 686, 741, 757, 837, 844, 845, 853, 854, 861, 862, 869, 888, 889, 900, 912, 914, 917, 920, 922, 937, 997, 1002, 1003, 1004, 1011, 1014, 1018, 1022, 1023, 1029, 1032, 1042, 1047, 1048], "influenti": [221, 357, 1032], "info": [2, 45, 77, 105, 123, 190, 191, 251, 269, 273, 379, 381, 386, 396, 422, 470, 503, 568, 569, 963], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 84, 88, 93, 101, 102, 104, 105, 118, 120, 129, 143, 144, 145, 166, 168, 169, 171, 172, 174, 179, 187, 190, 191, 193, 195, 196, 197, 198, 202, 218, 221, 232, 234, 235, 251, 255, 262, 263, 265, 269, 270, 272, 275, 276, 277, 280, 282, 284, 288, 298, 301, 302, 305, 322, 327, 331, 348, 352, 356, 357, 358, 361, 364, 365, 369, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 390, 394, 395, 396, 397, 405, 408, 411, 413, 418, 419, 421, 422, 423, 424, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 499, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 517, 522, 531, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 613, 614, 615, 616, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 697, 698, 699, 702, 704, 708, 711, 712, 722, 733, 737, 750, 762, 763, 764, 793, 795, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 930, 964, 991, 996, 998, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1022, 1024, 1028, 1029, 1031, 1032, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "informatik": 1008, "informed": 1008, "infrastructur": [312, 330, 1027, 1028], "infrequ": [884, 885, 892, 1008, 1039, 1053, 1054, 1055], "infrequent_categories_": [328, 330, 884, 885, 892, 1018], "infrequent_if_exist": [884, 1018], "infrequent_sklearn": [884, 1018], "infti": [235, 424, 626, 1004, 1018, 1046], "ing": 422, "ingela": 1053, "ingest": 422, "ingredi": 424, "ingrid": 1049, "inher": [133, 212, 365, 414, 419, 570, 998, 1000, 1002, 1003, 1005, 1009], "inherit": [251, 382, 384, 395, 396, 428, 584, 683, 931, 947, 949, 960, 1004, 1039, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1054, 1055, 1056], "inhibit": [425, 450], "inhomogen": [424, 621], "ini": 263, "init": [2, 54, 77, 80, 93, 94, 96, 99, 191, 198, 237, 238, 240, 241, 242, 261, 263, 295, 357, 385, 390, 414, 419, 421, 449, 453, 455, 457, 459, 465, 466, 545, 547, 554, 555, 566, 567, 639, 640, 697, 699, 701, 860, 1005, 1039, 1048, 1051, 1053, 1054, 1055], "init_": [566, 567], "init_param": [260, 263, 266, 804, 805], "init_s": [96, 357, 455], "init_size_": 1051, "init_tim": 263, "initi": [0, 46, 51, 55, 71, 77, 78, 80, 92, 93, 95, 98, 99, 114, 151, 159, 160, 161, 175, 180, 187, 190, 198, 210, 232, 237, 238, 242, 259, 261, 262, 275, 295, 326, 336, 345, 357, 365, 370, 377, 382, 384, 390, 391, 394, 396, 414, 419, 421, 423, 424, 426, 448, 449, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 519, 522, 538, 539, 540, 544, 545, 547, 550, 552, 553, 554, 555, 560, 561, 566, 567, 570, 600, 614, 615, 617, 618, 626, 627, 634, 647, 652, 653, 654, 655, 659, 660, 665, 667, 668, 669, 670, 673, 674, 675, 676, 678, 683, 684, 685, 687, 688, 691, 697, 698, 699, 701, 702, 804, 805, 841, 860, 867, 868, 869, 907, 940, 954, 955, 976, 981, 982, 1000, 1004, 1005, 1007, 1012, 1013, 1014, 1022, 1024, 1027, 1029, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "initial_imputer_": 634, "initial_strategi": 634, "initial_theta": [617, 618], "initialis": [123, 545, 547, 554, 1039, 1047, 1048], "initializedcheck": 383, "inject": [254, 377, 421], "inki": 1045, "inli": [244, 1004, 1014], "inlier": [113, 154, 220, 244, 254, 315, 396, 416, 436, 475, 570, 678, 684, 857, 888, 900, 914, 915, 917, 1004, 1014, 1046, 1047, 1052], "inlier_mask": 220, "inlier_mask_": [220, 678], "inlier_plot": 113, "inliers_mask": 114, "inlin": [228, 382, 383, 1024], "inner": [64, 128, 150, 153, 276, 280, 294, 336, 369, 422, 449, 521, 589, 596, 625, 655, 676, 687, 782, 784, 1000, 1008, 1018, 1023, 1040, 1043, 1053, 1056], "inner_clf": 1008, "inner_cv": [280, 331], "inner_it": 388, "inner_numb": 336, "inner_stat": 1053, "inner_stats_": 1053, "inpaint": 419, "inplac": [2, 235, 254, 287, 460, 488, 489, 490, 491, 866, 874, 877, 880, 881, 883, 887, 888, 889, 891, 980, 983, 984, 985, 989, 990, 1048], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 391], "inplace_csr_row_normalize_l1": [2, 391], "inplace_csr_row_normalize_l2": [2, 391], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 107, 123, 127, 146, 150, 151, 180, 181, 182, 190, 195, 197, 217, 220, 221, 225, 232, 235, 247, 248, 250, 251, 258, 270, 288, 292, 299, 300, 312, 316, 317, 318, 319, 324, 327, 329, 332, 345, 349, 353, 358, 376, 379, 382, 385, 387, 391, 392, 394, 395, 396, 408, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 426, 432, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 451, 454, 455, 456, 460, 463, 464, 467, 470, 471, 473, 474, 475, 477, 478, 488, 489, 490, 495, 510, 516, 523, 524, 525, 527, 531, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 627, 629, 634, 635, 636, 637, 638, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 692, 693, 694, 695, 696, 697, 699, 700, 703, 704, 705, 706, 707, 708, 709, 728, 729, 730, 731, 735, 752, 753, 755, 757, 758, 760, 761, 768, 774, 778, 779, 781, 785, 786, 787, 788, 792, 797, 798, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898, 899, 903, 904, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 943, 949, 952, 954, 964, 966, 967, 971, 980, 982, 988, 989, 990, 993, 994, 996, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "input_featur": [197, 384, 396, 430, 435, 448, 449, 451, 453, 455, 470, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 573, 574, 575, 576, 577, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 1055], "input_nam": [936, 938, 970, 1053], "input_tag": 930, "input_typ": [358, 422, 589], "inputtag": [2, 930], "inria": [0, 665, 1039], "insensit": [250, 650, 683, 685, 795, 912, 1001, 1022, 1023, 1039], "insepar": [172, 379], "insert": [95, 190, 217, 394, 414, 493, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 926], "insid": [2, 55, 57, 63, 191, 219, 251, 275, 336, 345, 371, 376, 377, 384, 388, 405, 414, 422, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 964, 967, 1015, 1032, 1056], "insight": [43, 46, 190, 191, 205, 218, 219, 235, 269, 312, 315, 356, 364, 412, 413, 807, 810, 811, 821, 834, 1015, 1024, 1032], "insist": 104, "inspect": [2, 43, 48, 66, 67, 70, 91, 96, 139, 144, 151, 153, 154, 155, 159, 169, 174, 179, 180, 190, 191, 192, 193, 201, 209, 226, 231, 255, 269, 275, 278, 287, 298, 303, 306, 320, 324, 325, 326, 327, 329, 331, 341, 342, 343, 344, 346, 347, 349, 356, 361, 370, 384, 396, 414, 415, 421, 422, 470, 560, 561, 564, 565, 566, 567, 571, 572, 573, 638, 639, 640, 641, 840, 871, 872, 919, 920, 921, 922, 995, 1008, 1009, 1012, 1015, 1016, 1023, 1027, 1029, 1034, 1042], "inspir": [112, 155, 191, 235, 382, 394, 421, 568, 569, 942, 998, 1048], "instabl": [74, 190, 305, 424, 458, 542, 546, 550, 702, 1046, 1049, 1052], "instal": [88, 258, 295, 324, 325, 326, 327, 328, 329, 330, 331, 332, 369, 370, 382, 383, 385, 386, 388, 390, 394, 395, 401, 407, 408, 410, 414, 422, 458, 468, 503, 698, 702, 1024, 1046, 1047, 1048, 1052, 1053], "installment_commit": 269, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 88, 91, 93, 140, 153, 169, 172, 186, 191, 192, 201, 202, 246, 251, 254, 269, 271, 273, 284, 286, 287, 306, 324, 331, 339, 341, 342, 348, 349, 356, 357, 358, 368, 369, 370, 376, 377, 379, 380, 381, 382, 384, 387, 388, 390, 391, 394, 396, 400, 405, 408, 410, 411, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 428, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 468, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 497, 499, 502, 503, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 588, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 618, 627, 634, 635, 636, 637, 639, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 714, 727, 736, 737, 745, 778, 781, 785, 786, 787, 788, 790, 791, 794, 795, 796, 799, 800, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 816, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 937, 938, 940, 949, 950, 954, 955, 963, 964, 965, 966, 976, 977, 978, 981, 991, 992, 996, 997, 998, 1004, 1005, 1008, 1010, 1011, 1014, 1016, 1018, 1022, 1023, 1024, 1028, 1034, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "instanci": 1048, "instant": 211, "instantan": 515, "instanti": [106, 177, 327, 385, 405, 421, 456, 574, 575, 609, 637, 807, 810, 811, 813, 821, 830, 832, 833, 834, 835, 836, 838, 945, 1014, 1039, 1047, 1051, 1055], "instead": [0, 43, 44, 45, 52, 58, 83, 88, 90, 91, 92, 105, 128, 140, 145, 155, 169, 172, 174, 217, 219, 232, 235, 241, 254, 266, 271, 272, 276, 277, 288, 294, 300, 315, 324, 325, 326, 327, 328, 345, 347, 349, 356, 358, 364, 365, 369, 370, 376, 377, 380, 381, 382, 383, 384, 386, 387, 390, 391, 394, 395, 396, 405, 408, 410, 414, 415, 417, 418, 419, 420, 421, 422, 423, 425, 437, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 462, 465, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 516, 517, 540, 541, 542, 545, 547, 548, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 614, 615, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 637, 639, 642, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 697, 699, 701, 714, 716, 753, 781, 785, 786, 787, 789, 790, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 819, 821, 823, 825, 826, 827, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 872, 873, 874, 876, 877, 878, 883, 884, 889, 890, 891, 901, 902, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 925, 943, 950, 955, 964, 982, 997, 998, 1000, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1018, 1022, 1023, 1024, 1027, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "instinct": 356, "institut": [0, 269, 379, 1011], "instruct": [369, 382, 383, 384, 385, 386, 387, 390, 394, 395, 396, 510, 595, 596, 598, 1031, 1039], "instrument": [51, 104, 124, 189], "insuffici": [399, 1007], "insur": [187, 196, 217, 413, 470, 503, 559, 655, 676, 687, 713, 752, 757, 759, 837, 872, 875, 876, 884, 891, 1004, 1029], "int": [47, 49, 52, 53, 55, 72, 79, 97, 114, 140, 149, 153, 154, 164, 165, 175, 176, 177, 183, 186, 189, 199, 208, 210, 217, 235, 242, 244, 250, 254, 260, 269, 270, 273, 274, 275, 295, 300, 302, 308, 322, 335, 358, 377, 382, 384, 394, 396, 412, 415, 418, 422, 425, 426, 429, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614, 615, 617, 618, 624, 634, 635, 636, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 714, 716, 720, 733, 734, 736, 737, 738, 741, 745, 763, 764, 776, 781, 785, 786, 787, 788, 789, 790, 791, 794, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 933, 937, 938, 940, 941, 954, 955, 957, 958, 959, 961, 972, 976, 978, 981, 986, 987, 1004, 1015, 1039, 1045, 1049, 1050], "int32": [254, 295, 322, 382, 396, 449, 453, 455, 457, 459, 465, 913, 914, 915, 916, 917, 972, 1023, 1048, 1054, 1055, 1056], "int64": [43, 53, 89, 105, 190, 191, 269, 284, 289, 292, 321, 331, 364, 396, 422, 432, 448, 454, 456, 503, 521, 522, 526, 592, 595, 647, 653, 654, 659, 660, 672, 721, 722, 725, 751, 801, 847, 876, 905, 935, 962, 993, 1009, 1047, 1050, 1052, 1054, 1055, 1056], "int64dtyp": 1056, "intact": 884, "integ": [2, 43, 55, 83, 88, 105, 190, 217, 235, 325, 326, 365, 369, 376, 377, 379, 384, 387, 391, 395, 396, 414, 415, 418, 419, 421, 422, 439, 443, 468, 470, 473, 478, 493, 503, 505, 508, 509, 510, 512, 515, 516, 519, 521, 522, 526, 529, 557, 566, 567, 568, 569, 570, 574, 575, 579, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 639, 640, 651, 658, 662, 666, 672, 680, 682, 683, 685, 706, 721, 742, 807, 809, 810, 811, 812, 814, 816, 821, 822, 823, 826, 827, 829, 831, 834, 842, 845, 847, 850, 851, 852, 876, 884, 885, 890, 891, 892, 895, 905, 907, 919, 920, 921, 922, 933, 970, 971, 972, 976, 998, 1004, 1009, 1011, 1018, 1021, 1023, 1024, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1058], "integr": [0, 52, 77, 105, 169, 182, 206, 312, 326, 370, 380, 384, 385, 386, 388, 390, 396, 400, 419, 424, 452, 722, 762, 793, 982, 1007, 1015, 1032, 1040, 1042, 1043, 1051, 1052, 1056, 1058], "intel": [1008, 1027], "intelex": [400, 1027], "intellectu": 189, "intellig": [98, 172, 269, 356, 379, 414, 421, 454, 562, 563, 645, 703, 732, 841, 868, 869, 1009, 1020, 1028, 1032], "intend": [92, 93, 127, 218, 258, 349, 356, 382, 383, 389, 394, 396, 414, 418, 474, 589, 680, 706, 880, 881, 891, 909, 928, 1003, 1004, 1008, 1012, 1019, 1027, 1058], "intens": [101, 126, 295, 379, 383, 394, 396, 419, 449, 453, 465, 614, 615, 639, 640, 809, 997, 1015, 1032, 1047], "intention": 64, "inter": [2, 75, 144, 365, 421, 723], "interact": [2, 42, 151, 153, 187, 217, 242, 246, 276, 325, 381, 383, 384, 386, 388, 394, 396, 397, 408, 415, 566, 567, 568, 569, 639, 640, 886, 890, 997, 1000, 1004, 1005, 1006, 1013, 1015, 1018, 1026, 1028, 1041, 1046, 1053, 1054], "interaction_cst": [191, 329, 421, 568, 569, 1054], "interaction_onli": [43, 886, 1004, 1018], "interactiveshellapp": 388, "intercept": [126, 209, 226, 234, 353, 396, 488, 489, 490, 556, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 886, 890, 893, 911, 912, 918, 1004, 1006, 1008, 1013, 1022, 1023, 1042, 1044, 1048, 1049], "intercept_": [200, 207, 209, 226, 252, 343, 350, 353, 384, 396, 488, 489, 490, 556, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 911, 912, 913, 914, 915, 916, 917, 1002, 1004, 1022, 1023, 1039, 1046, 1051, 1053, 1056], "intercept_hidden_": 867, "intercept_init": [673, 674, 675, 683, 685], "intercept_sc": [210, 665, 666, 911, 912, 918, 1004, 1023], "intercept_visible_": 867, "intercepts_": [868, 869, 1012], "interchang": [1027, 1056], "interclass": 75, "interdepend": 522, "interest": [0, 43, 45, 52, 77, 79, 85, 90, 97, 101, 106, 137, 145, 150, 158, 169, 172, 179, 185, 190, 191, 192, 206, 217, 218, 219, 235, 238, 249, 268, 269, 272, 275, 276, 278, 284, 289, 292, 332, 345, 352, 357, 364, 369, 377, 379, 382, 387, 388, 390, 394, 397, 413, 414, 416, 419, 422, 424, 500, 501, 507, 511, 517, 653, 654, 911, 998, 1004, 1005, 1008, 1013, 1014, 1015, 1028, 1032, 1039, 1056], "interestingli": [111, 172, 1018], "interfac": [2, 42, 137, 187, 375, 376, 383, 384, 386, 391, 394, 396, 418, 424, 425, 447, 451, 456, 503, 560, 706, 807, 810, 811, 821, 871, 872, 897, 992, 997, 1011, 1023, 1027, 1028, 1032, 1039, 1041, 1044, 1045, 1047, 1048, 1053, 1055], "interfer": [331, 1049], "interim": 1046, "interior": [677, 1004, 1054], "interleav": [2, 378, 394, 529], "intermedi": [43, 46, 87, 90, 142, 150, 254, 345, 394, 422, 566, 567, 626, 871, 1008, 1051, 1057], "intern": [0, 43, 63, 105, 115, 128, 143, 148, 151, 153, 163, 172, 175, 185, 187, 217, 251, 269, 289, 295, 297, 314, 321, 336, 358, 365, 370, 377, 379, 384, 388, 391, 394, 396, 405, 410, 411, 414, 418, 419, 421, 422, 423, 424, 425, 443, 445, 450, 471, 474, 518, 541, 542, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 600, 601, 617, 618, 647, 650, 653, 659, 675, 679, 683, 685, 703, 715, 738, 741, 765, 766, 790, 837, 851, 852, 867, 868, 869, 871, 872, 876, 890, 892, 906, 907, 909, 911, 912, 913, 916, 919, 920, 921, 922, 1004, 1005, 1006, 1008, 1011, 1014, 1018, 1020, 1023, 1024, 1029, 1032, 1039, 1042, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "internet": [377, 387, 1018], "interop": 1027, "interoper": [408, 424, 1028], "interp": [284, 285, 345], "interp1d": [660, 670, 691], "interp_tpr": 285, "interpol": [43, 53, 68, 75, 85, 86, 89, 93, 115, 123, 126, 178, 181, 187, 196, 197, 208, 233, 247, 253, 284, 290, 299, 300, 307, 313, 335, 345, 424, 642, 652, 660, 670, 679, 691, 707, 714, 854, 862, 872, 886, 890, 999, 1004, 1008, 1018, 1029, 1046, 1051], "interpret": [43, 64, 153, 172, 181, 187, 188, 189, 191, 213, 217, 218, 222, 233, 235, 268, 275, 277, 278, 289, 313, 316, 319, 326, 356, 358, 369, 380, 382, 383, 388, 390, 391, 396, 399, 412, 414, 415, 420, 422, 458, 470, 471, 473, 503, 548, 579, 618, 646, 650, 660, 679, 680, 698, 699, 702, 708, 736, 760, 765, 766, 790, 799, 800, 813, 822, 834, 835, 837, 840, 872, 884, 891, 1002, 1004, 1008, 1009, 1015, 1016, 1018, 1024, 1027, 1029, 1039, 1040, 1044, 1047, 1052, 1053, 1054], "interquartil": [254, 889, 901], "interquartile_rang": 889, "interrog": 422, "interrupt": 1004, "intersect": [276, 342, 411, 414, 745], "interv": [2, 52, 64, 136, 153, 181, 187, 202, 217, 218, 219, 235, 275, 377, 396, 412, 418, 421, 424, 444, 445, 523, 524, 525, 564, 565, 567, 569, 571, 572, 642, 643, 645, 684, 749, 755, 757, 811, 828, 837, 874, 876, 890, 913, 914, 915, 941, 1000, 1004, 1008, 1018, 1024, 1029, 1046, 1050], "intervent": [90, 190], "intl": [64, 418], "intp": [429, 457, 459], "intra": [43, 595, 598, 799, 800], "intract": [91, 419, 1005, 1013], "intric": [221, 519], "intricaci": 382, "intrins": [197, 396, 419, 421, 1011, 1016, 1022, 1051], "introduc": [43, 111, 113, 114, 128, 153, 171, 187, 192, 197, 202, 221, 243, 248, 251, 254, 256, 282, 329, 330, 358, 378, 380, 382, 384, 386, 387, 390, 394, 396, 405, 412, 414, 416, 418, 419, 421, 422, 438, 447, 448, 449, 451, 453, 455, 465, 470, 474, 488, 489, 490, 491, 503, 511, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 562, 563, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 665, 671, 692, 693, 695, 696, 699, 837, 855, 860, 863, 867, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 905, 909, 1002, 1004, 1007, 1010, 1011, 1014, 1018, 1020, 1022, 1023, 1029, 1039, 1040, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "introduct": [171, 235, 273, 382, 413, 418, 419, 422, 597, 795, 796, 846, 850, 1004, 1006, 1008, 1010, 1026, 1033, 1034], "introductori": [150, 173, 174, 179, 180, 183, 187, 243, 424, 618, 629, 1029, 1032], "introspect": [43, 45, 105, 388, 566, 567, 596, 1018], "intrus": 377, "intuit": [43, 52, 67, 79, 87, 97, 128, 137, 140, 147, 167, 174, 190, 191, 218, 219, 239, 244, 276, 292, 300, 317, 320, 342, 345, 349, 357, 382, 396, 412, 414, 416, 418, 420, 652, 789, 790, 791, 794, 882, 911, 913, 914, 916, 917, 1000, 1004, 1005, 1008, 1009, 1015, 1018, 1019, 1023, 1032, 1039], "inv": [111, 115, 311], "inv_boxcox": 1058, "inv_kw_arg": 875, "invalid": [2, 47, 217, 396, 452, 585, 678, 719, 781, 996, 1004, 1008, 1045, 1047, 1049, 1050, 1052, 1053, 1055, 1058], "invalidparametererror": 1008, "invalu": 1032, "invari": [75, 379, 396, 414, 424, 621, 696, 754, 825, 826, 1004, 1005, 1008, 1023, 1028, 1047, 1050, 1051, 1052], "invent": 1011, "inventor": 1010, "inventori": 1032, "invers": [2, 8, 51, 89, 110, 111, 112, 137, 187, 265, 282, 284, 298, 345, 357, 358, 374, 396, 415, 417, 418, 419, 421, 422, 426, 451, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 534, 540, 541, 542, 546, 548, 550, 564, 568, 571, 596, 597, 598, 635, 651, 652, 665, 666, 673, 675, 681, 682, 683, 684, 685, 687, 731, 750, 759, 804, 805, 853, 854, 861, 862, 868, 869, 871, 875, 878, 884, 885, 887, 903, 904, 911, 912, 913, 916, 917, 919, 921, 943, 1002, 1004, 1008, 1011, 1012, 1018, 1022, 1023, 1029, 1033, 1034, 1039, 1042, 1047, 1050, 1051, 1053, 1057, 1058], "inverse_components_": [903, 904, 1020, 1053], "inverse_func": [109, 190, 415, 471, 875, 1018, 1047, 1057], "inverse_transform": [44, 86, 89, 128, 169, 299, 357, 405, 419, 422, 451, 471, 488, 489, 490, 540, 541, 542, 545, 546, 547, 548, 550, 551, 588, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 637, 807, 810, 811, 821, 871, 875, 876, 878, 879, 880, 881, 882, 884, 885, 887, 888, 889, 891, 903, 904, 1018, 1019, 1020, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "invert": [115, 128, 169, 238, 357, 358, 394, 416, 422, 637, 696, 700, 1018, 1048], "invert_yaxi": [186, 358], "invest": [388, 1032], "investig": [128, 133, 137, 186, 352, 382, 408, 1004], "invok": [384, 538, 544, 546, 552, 553, 574, 576, 577, 806, 829, 832, 908, 1051, 1056], "involv": [320, 322, 324, 332, 345, 349, 369, 371, 377, 382, 396, 397, 408, 417, 424, 706, 839, 840, 1005, 1009, 1011, 1015, 1016, 1023, 1027, 1032, 1047], "invscal": [311, 683, 684, 685, 868, 869, 1022], "io": [376, 379, 382, 386, 388, 390, 396, 699, 1027, 1034, 1037], "ioangatop": 1056, "ioanni": 741, "ioerror": 1055, "iofal": 1053, "ion": 1054, "ionescu": [649, 1000, 1049], "iowa": [147, 158, 254], "ipca": [2, 127, 540, 541], "ipdb": 390, "ipm": 677, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364], "ipython": [384, 387, 388, 390], "ipython_config": 388, "iq": 189, "iqbal": 1051, "iqr": [254, 889, 901], "ir": [247, 419, 597, 733, 763, 846, 850, 1006, 1008], "iren": [1054, 1055], "iri": [2, 50, 55, 66, 67, 69, 76, 80, 108, 119, 122, 125, 127, 128, 133, 136, 137, 138, 139, 141, 156, 159, 165, 168, 173, 175, 178, 179, 187, 195, 196, 201, 209, 210, 214, 249, 258, 262, 268, 280, 281, 284, 285, 298, 304, 306, 310, 311, 317, 326, 333, 338, 340, 341, 343, 345, 347, 348, 349, 359, 360, 362, 363, 364, 375, 376, 395, 408, 414, 415, 418, 419, 421, 453, 503, 511, 548, 556, 560, 564, 571, 617, 629, 638, 683, 807, 821, 906, 907, 908, 911, 916, 919, 923, 924, 925, 997, 998, 1002, 1007, 1008, 1011, 1015, 1018, 1021, 1022, 1023, 1024, 1029, 1034, 1052], "iris": [120, 281, 282], "iris_61": 376, "iris_969": 376, "iris_version_3": 376, "irreduc": [140, 1008], "irregular": [179, 349, 414, 1011], "irregularities_kernel": 179, "irrelev": [167, 202, 365, 388, 416, 421, 423, 611, 747, 1008], "irrespect": [217, 248, 269, 284, 295, 613], "irvin": 379, "is_categor": 639, "is_categorical_": [568, 569], "is_classifi": [2, 384, 396], "is_cluster": [2, 1058], "is_data_valid": [678, 1004], "is_fit": [2, 991], "is_fitted_": [428, 431, 433, 436, 437], "is_inli": [475, 570, 857], "is_leav": 364, "is_max_test_scor": 107, "is_model_valid": [678, 1004], "is_multilabel": [2, 391, 1056], "is_paramet": 995, "is_pypi": 1057, "is_regressor": [2, 396], "is_scalar_nan": 1052, "is_sh": 286, "is_split_nod": 364, "is_stationari": [182, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "isa": 57, "isaac": [1045, 1046, 1048, 1049, 1056], "isaack": 1052, "isaactrost": 1056, "isakov": 1051, "isbn": [379, 414, 1004], "isclos": 55, "isdigit": [57, 422], "ish": 69, "ishaan": 1052, "ishan": [1052, 1053], "ishank": [1044, 1045, 1046], "ishikawa": [1051, 1052], "isin": 335, "isinst": [70, 146, 235, 396], "islic": [47, 79, 97], "ism": 1043, "isn": [172, 324, 356, 358, 365, 370, 382, 386, 390, 522, 568, 569, 601, 801, 810, 811, 884, 1011, 1023, 1049, 1057], "iso": [173, 187, 229, 239, 617, 620, 621, 1029], "iso_reg": 642, "isoformat": 55, "isol": [2, 147, 154, 244, 254, 357, 380, 388, 400, 570, 857, 915, 1048, 1049], "isolationforest": [2, 136, 139, 187, 220, 244, 254, 315, 638, 837, 915, 1014, 1029, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1058], "isolationforestifittedisolationforest": 154, "isomap": [2, 51, 87, 142, 187, 236, 239, 241, 248, 305, 324, 328, 421, 509, 551, 556, 573, 696, 697, 698, 699, 860, 872, 881, 904, 1011, 1029, 1033, 1034, 1047, 1049, 1052, 1053, 1054, 1055, 1056], "isomap__n_neighbor": 324, "isometr": [237, 695, 697, 698, 699, 1005], "isoton": [2, 61, 62, 109, 187, 243, 443, 642, 643, 644, 664, 940, 1029, 1030, 1034, 1040, 1041, 1042, 1043, 1045, 1052, 1055], "isotonic_regress": [2, 642, 1052], "isotonicregress": [2, 247, 999, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1053, 1054, 1055], "isotonicregression0": 642, "isotrop": [2, 70, 90, 92, 96, 128, 176, 178, 237, 239, 414, 416, 424, 519, 526, 539, 622, 626, 627, 629, 630], "isotropi": 419, "isr": 423, "issam": [0, 1045], "issu": [0, 2, 43, 62, 112, 118, 217, 235, 280, 322, 370, 376, 385, 386, 387, 391, 394, 396, 397, 399, 400, 405, 408, 410, 414, 416, 417, 422, 455, 458, 468, 479, 488, 489, 490, 541, 546, 550, 580, 595, 596, 598, 618, 634, 698, 702, 776, 882, 884, 887, 899, 945, 998, 1005, 1016, 1018, 1023, 1027, 1028, 1031, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1056, 1057], "issuenumb": 390, "ist": 423, "isupp": 422, "isuru": 1051, "itakura": [419, 545, 547, 554, 1046], "itali": 379, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 90, 109, 141, 143, 147, 150, 158, 190, 215, 219, 225, 238, 250, 251, 253, 262, 272, 278, 282, 328, 335, 357, 375, 382, 383, 384, 391, 415, 470, 533, 568, 569, 595, 596, 598, 639, 819, 884, 906, 907, 926, 933, 961, 1000, 1021, 1028], "item_idx": 315, "iter": [2, 47, 54, 55, 67, 81, 106, 115, 123, 126, 137, 140, 143, 146, 148, 149, 151, 152, 153, 172, 185, 187, 197, 198, 225, 232, 262, 263, 267, 270, 283, 286, 310, 312, 313, 317, 326, 335, 337, 338, 345, 382, 384, 388, 390, 391, 395, 396, 409, 414, 417, 419, 421, 423, 426, 443, 446, 447, 449, 451, 453, 454, 455, 458, 460, 465, 467, 468, 469, 477, 478, 484, 488, 489, 490, 522, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 560, 561, 566, 567, 568, 569, 571, 574, 575, 588, 589, 595, 596, 598, 600, 601, 609, 617, 634, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 845, 860, 867, 868, 869, 870, 871, 875, 882, 884, 886, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 926, 954, 955, 962, 963, 964, 965, 973, 997, 998, 1004, 1005, 1007, 1008, 1011, 1012, 1013, 1021, 1022, 1023, 1024, 1028, 1029, 1032, 1034, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058], "iter_minibatch": 47, "iter_offset": 1053, "iter_offset_": 1053, "iterated_pow": [106, 539, 542, 548, 1045], "iterative_impute_scor": 186, "iterativeimput": [2, 184, 186, 187, 386, 405, 496, 572, 587, 635, 636, 637, 646, 652, 679, 833, 854, 872, 1029, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "itergrid": 1041, "itertool": [47, 77, 79, 97, 159, 191, 205, 261, 266, 275, 282, 284, 421], "ith": [503, 781, 785, 847, 868, 869, 884, 885], "ith_cluster_silhouette_valu": 95, "itk": [1049, 1050, 1051], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 90, 100, 101, 111, 113, 115, 118, 120, 121, 128, 135, 137, 143, 146, 148, 150, 153, 163, 172, 174, 179, 181, 190, 191, 193, 195, 197, 206, 230, 234, 235, 239, 244, 251, 253, 254, 256, 258, 260, 265, 266, 269, 274, 278, 280, 282, 284, 289, 295, 297, 301, 302, 317, 327, 337, 342, 349, 354, 356, 357, 360, 364, 365, 370, 371, 375, 376, 377, 378, 382, 383, 384, 386, 387, 390, 394, 395, 396, 397, 400, 402, 405, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 430, 446, 448, 450, 452, 456, 460, 462, 466, 469, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 504, 510, 530, 538, 540, 541, 542, 544, 545, 547, 548, 549, 551, 557, 560, 562, 563, 564, 565, 566, 567, 571, 572, 573, 590, 594, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 651, 652, 678, 679, 681, 692, 693, 694, 695, 699, 703, 706, 715, 732, 736, 737, 743, 744, 748, 785, 788, 790, 804, 805, 807, 832, 839, 840, 842, 853, 854, 855, 857, 858, 859, 861, 862, 863, 870, 871, 875, 880, 883, 884, 886, 903, 904, 907, 911, 912, 919, 921, 937, 938, 943, 950, 977, 997, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1021, 1022, 1023, 1024, 1027, 1032, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "itsaphel": 1057, "itself": [27, 61, 64, 84, 90, 137, 150, 154, 191, 202, 215, 251, 257, 269, 284, 295, 322, 345, 357, 369, 371, 381, 382, 384, 396, 405, 408, 412, 414, 425, 446, 447, 450, 451, 452, 475, 476, 477, 478, 479, 480, 481, 482, 534, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 558, 573, 576, 590, 599, 602, 603, 605, 606, 607, 609, 610, 646, 647, 648, 649, 650, 652, 662, 696, 698, 799, 800, 846, 847, 848, 849, 850, 851, 852, 856, 864, 865, 876, 877, 878, 906, 907, 964, 1000, 1004, 1005, 1007, 1011, 1012, 1016, 1027, 1043, 1054], "iv": [189, 1008], "ivan": [1047, 1048, 1051, 1054, 1057], "ivanllt": 1054, "iver": 1045, "iverson": 1004, "ivicajov": 1042, "ivl": 193, "ivt": 541, "iv\u00e1n": [1046, 1052], "iwhalv": 1052, "iwona": 1056, "ix": [50, 284, 351], "iy_j": 1018, "iyer": 1050, "izadifar": 1057, "j": [0, 50, 55, 72, 73, 75, 78, 96, 104, 112, 113, 114, 137, 140, 141, 152, 170, 175, 186, 191, 229, 240, 253, 260, 274, 275, 280, 286, 299, 305, 308, 319, 329, 364, 370, 376, 377, 379, 386, 388, 394, 403, 411, 412, 414, 416, 418, 419, 421, 422, 424, 425, 443, 446, 450, 452, 459, 460, 475, 480, 505, 520, 523, 524, 525, 527, 535, 538, 541, 543, 544, 545, 547, 548, 554, 560, 566, 567, 600, 601, 639, 640, 644, 651, 652, 655, 656, 673, 674, 676, 687, 695, 696, 697, 699, 700, 701, 703, 712, 715, 717, 721, 723, 725, 728, 730, 731, 733, 762, 763, 765, 766, 781, 785, 795, 796, 799, 800, 840, 841, 848, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 882, 891, 892, 919, 920, 997, 998, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "j0rd1smit": 1051, "ja": [417, 1046], "jaccard": [2, 294, 411, 456, 463, 706, 710, 726, 736, 741, 745, 785, 786, 787, 803, 1011, 1047, 1048], "jaccard_scor": [2, 294, 710, 736, 741, 803, 1008, 1048, 1051], "jaccard_similarity_scor": [1041, 1043, 1048], "jaccarddist": 706, "jack": [1041, 1044, 1052, 1053, 1054, 1055, 1057], "jacklangerman": [1047, 1048], "jackman": 1040, "jackmartin": 1045, "jackson": [1045, 1046, 1048], "jacob": [0, 404, 1044, 1045, 1046], "jacobi": 1054, "jacobsen": 1042, "jacopo": [1047, 1048], "jacqu": [1040, 1042], "jaehong": 1049, "jaehyun": 1051, "jaewon": 1047, "jai": [1049, 1053], "jaidev": 1044, "jaim": 1049, "jain": [1045, 1046, 1047, 1051, 1053, 1054], "jair": 1046, "jake": [0, 404, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1053], "jakemick": 1041, "jakhar": 1051, "jakirkham": [1046, 1047, 1048, 1054, 1055], "jakub": 1056, "jakubek": [1052, 1053], "jalali": [0, 397, 403, 408, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "jalexand3r": 1053, "jamaoui": [1047, 1048, 1051], "jame": [0, 379, 418, 841, 1009, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1055, 1056], "jamestwebb": [1041, 1042], "jami": 1047, "jamieson": 997, "jan": [0, 218, 292, 403, 890, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1055], "jana": 1049, "janet": 379, "jane\u017e": [1040, 1041], "janfidor": [1054, 1055], "janhang": 1049, "janin": 1046, "janna": 1045, "jannik": 1052, "janso": 1039, "jansson": [1042, 1054], "januari": [380, 382, 1039, 1040, 1049, 1051, 1054, 1056], "janvanrijn": [1047, 1048], "jaqu": [0, 404, 1039, 1040, 1041, 1042], "jardim": 1052, "jare": 1054, "jarfa": 1045, "jarir": 1052, "jarkko": 703, "jarosch": 1041, "jaroslaw": 1046, "jarrod": [0, 404, 1048, 1055, 1056], "jarvelin": [733, 763, 1008], "jaskowiak": 452, "jason": [44, 419, 542, 907, 1045, 1047, 1051, 1054], "jatin": [1043, 1045], "jauhar": 1053, "jauvin": 1040, "java": [414, 448], "javier": [1043, 1057], "jawahar": 1000, "jax": 1056, "jay": 1046, "jaya": 1053, "jayaratn": [1050, 1051, 1054, 1055], "jayratn": 1051, "jayzed82": 1046, "jb": [1055, 1056], "jbdelafoss": 1046, "jbirch": [414, 448], "jblackburn": 1045, "jc": [1046, 1047], "jdcaballero": 1043, "jdethuren": [1047, 1048], "je": 1053, "jean": [1039, 1042, 1043, 1044, 1045, 1046, 1052], "jeann": 1053, "jeanselm": 1049, "jeb": 1047, "jeevan": 1051, "jeff": [1043, 1045, 1052, 1053], "jeffrei": [1042, 1045], "jeffrey04": [1044, 1045], "jelfner": 1053, "jell": 1042, "jen": [665, 1047], "jen09": 419, "jenatton": 419, "jenni": 1053, "jennif": 1052, "jensen": [1045, 1051], "jeong": 1049, "jeremi": [1032, 1044, 1045, 1046, 1047, 1050, 1051], "jeremiedbb": [1047, 1048, 1049], "jeremynixon": 1045, "jeroen": 1045, "jeroenpeterbo": 1051, "jeroko": 1046, "jeromedock": 1049, "jerphanion": [0, 403, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "jerryzhu": 906, "jesper": 1049, "jess": [842, 1009, 1052], "jess010": 1042, "jessica": 1045, "jessicakk0711": 1055, "jesu": [57, 356, 357], "jet": 102, "jevnik": 1044, "jewalikar": 1045, "jf": 1048, "jfraj": 1044, "jha": [1043, 1049, 1053], "jhay": 1051, "jhun": 480, "jia": 1045, "jiacheng": 1046, "jiali": 1044, "jian": 414, "jianbo": [414, 458, 468, 698], "jiang": [412, 1043, 1050], "jianzhu": 1052, "jiawei": [1055, 1056, 1057], "jiaxiang": 1051, "jie": [1047, 1048, 1051], "jiefangxuanyan": 1052, "jigna": 1051, "jihan": 1053, "jill": 1045, "jim": 1041, "jim0421": 1051, "jimenez": [1052, 1053], "jimmi": [868, 869, 1012, 1045, 1047], "jim\u00e9nez": [0, 372, 1047, 1050, 1051, 1052, 1053, 1054], "jin": [646, 1050, 1051], "jindal": 1051, "jinkun": 1047, "jiongyan": 1047, "jiquan": 1012, "jirka": 1053, "jiten": 1054, "jitendra": [414, 458, 468, 698], "jitter": [137, 657, 661, 1050], "jiyuan": 1045, "jjabl": 1047, "jjmistri": 1050, "jk": 1005, "jkarolczak": 1054, "jkleint": [1046, 1047], "jl": [248, 904], "jmlr": [0, 414, 673, 674, 683, 711, 1004, 1023], "jmlr_2014": 699, "jmontoyam": 1046, "jnboehm": 1052, "jnt": 418, "joaak": [1047, 1048], "joan": [1046, 1047, 1048, 1049], "joanna": 1049, "joaquin": 1051, "job": [145, 153, 190, 263, 269, 382, 386, 390, 402, 421, 425, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 474, 478, 538, 542, 543, 544, 546, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 609, 614, 615, 617, 641, 646, 664, 695, 696, 697, 698, 699, 700, 701, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 870, 873, 906, 907, 909, 973, 1032, 1058], "joblib": [2, 41, 77, 89, 106, 143, 295, 325, 377, 380, 382, 385, 391, 394, 396, 400, 407, 415, 425, 443, 447, 450, 451, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 515, 516, 538, 542, 543, 544, 546, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 601, 609, 614, 615, 617, 639, 641, 646, 654, 658, 660, 662, 664, 665, 666, 668, 670, 672, 673, 675, 683, 686, 695, 696, 697, 698, 699, 700, 701, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 857, 859, 861, 862, 864, 865, 870, 871, 872, 873, 906, 907, 973, 974, 977, 992, 1008, 1028, 1034, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1054, 1056, 1057, 1058], "joblib_start_method": 394, "jochen": 1041, "jock": 104, "joe": [1044, 1057], "joei": 1055, "joel": [0, 397, 403, 422, 542, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "johann": [1041, 1042, 1047, 1049, 1050, 1053], "johanna": [114, 1057], "johannah": 1045, "johanwork": 1052, "john": [379, 422, 543, 715, 742, 776, 886, 913, 914, 916, 917, 998, 1004, 1008, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1052, 1054, 1055, 1056, 1057, 1058], "johnathanpi": [1054, 1055], "johnson": [37, 90, 187, 243, 315, 319, 374, 495, 509, 887, 899, 903, 904, 905, 1018, 1025, 1029, 1034, 1047, 1053, 1055], "johnson_lindenstrauss_min_dim": [2, 248, 1020, 1040], "johnston": [172, 379, 1004, 1048], "johnstott": 1047, "johnthagen": 1054, "johnwon": 319, "join": [50, 51, 57, 90, 185, 235, 275, 317, 377, 397, 469, 1031, 1039, 1047], "joint": [150, 187, 191, 196, 202, 203, 206, 216, 237, 269, 415, 618, 659, 669, 699, 846, 847, 848, 849, 850, 911, 1004, 1005, 1009, 1013, 1015, 1019, 1029, 1039], "jointli": [25, 211, 282, 414, 419, 1004], "joli": [0, 404, 1040, 1041, 1042, 1043, 1044, 1045], "jon": [356, 1046, 1049, 1050, 1052, 1053, 1056], "jona": [1051, 1056], "jonatan": 1047, "jonathan": [377, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1055], "joncral": 1045, "jone": [0, 377, 404, 1039], "jong": 1046, "jonker": [411, 726], "joona": 1039, "jordal": 1045, "jordan": [414, 419, 698, 804, 1049, 1050, 1053, 1054], "jordi": 1045, "jorg": [665, 1042, 1051, 1053], "jori": [0, 403, 1046, 1047, 1048, 1051, 1052], "jose": [172, 379, 665, 1008, 1047, 1049], "joseph": [1042, 1043, 1044, 1045, 1051, 1053, 1054], "josephsalmon": [1046, 1047, 1048], "josh": [422, 1046], "joshi": [1045, 1047, 1053, 1056, 1057], "joshua": [329, 377, 1041, 1042, 1044, 1045, 1051, 1054, 1055], "joshuakennethjon": 1048, "jos\u00e9": [730, 1042, 1052, 1057], "jotasi": 1047, "joudet": [1046, 1047], "journal": [0, 114, 191, 275, 281, 292, 376, 377, 379, 412, 414, 416, 421, 458, 468, 479, 541, 548, 634, 642, 652, 696, 699, 700, 712, 722, 738, 741, 742, 765, 766, 793, 836, 841, 887, 899, 997, 998, 1002, 1004, 1005, 1006, 1009, 1015, 1020, 1022, 1023], "jovan": [1053, 1054], "joydeep": 414, "jo\u00e3o": [1054, 1057], "jo\u00ebl": 1047, "jpcar": 1057, "jpeg": [376, 377, 500, 501], "jpfrancoia": [1045, 1046], "jpg": [83, 513, 591, 594], "jpienaar": 1057, "jpm": 51, "jpmml": 1027, "jpmorgan": [51, 1032], "jr": 1004, "jrenni": 848, "jrfiedler": 1045, "jschendel": [1046, 1047], "jschuerz": 1053, "json": [52, 376, 382, 400], "jth": [781, 785], "juan": [0, 372, 1039, 1050, 1051, 1052, 1053, 1054], "juanfe88": 1054, "judg": [93, 223, 414], "judgment": [266, 1008], "judithabk6": 1050, "juergen": [1049, 1054], "jul": 284, "juli": [172, 379, 423, 741, 892, 1018, 1042, 1046, 1047, 1048, 1057], "julia": [414, 724, 744, 802], "julian": [1046, 1047, 1057], "juliankahnert": 1045, "juliaschoepp": [1054, 1055], "juliathebrav": 1045, "julien": [0, 403, 665, 1004, 1032, 1039, 1042, 1046, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "juliet": 1047, "julietcl": 1047, "julio": 1052, "julyrashchenko": 1052, "jumon": 1050, "jump": [43, 218, 315, 379, 382, 422, 890], "jumpi": 422, "june": [414, 1005, 1045, 1055], "juneja": 1057, "jung": [1046, 1050, 1054], "jungkook": 1044, "jungl": 1005, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 383, 384, 415, 474, 909, 1024, 1027, 1028, 1050, 1053], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364], "jurgen": 1032, "juri": 573, "jurman": 750, "just": [43, 52, 67, 104, 118, 123, 143, 147, 153, 172, 207, 214, 238, 249, 269, 275, 282, 286, 295, 310, 345, 356, 357, 364, 365, 377, 381, 382, 383, 384, 386, 387, 390, 394, 395, 396, 411, 413, 414, 415, 418, 421, 423, 426, 474, 540, 542, 549, 553, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 586, 591, 617, 618, 653, 659, 664, 665, 667, 669, 673, 674, 675, 683, 684, 685, 813, 830, 860, 868, 869, 997, 1004, 1007, 1008, 1009, 1012, 1016, 1018, 1022, 1028, 1039, 1043, 1045, 1047, 1051, 1055], "justglow": 1048, "justif": 683, "justifi": [382, 388, 412, 572], "justin": [1041, 1047, 1051], "jvm": 1052, "jygerardi": [1054, 1055], "j\u00e9r\u00e9mie": [0, 403, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "j\u00e9r\u00f4me": [1048, 1049, 1050, 1056, 1057, 1058], "j\u00eann": 1045, "j\u00f6rg": [414, 456, 463, 1047], "j\u00f6rn": 1046, "j\u00f8rgensen": [1004, 1056], "k": [2, 33, 45, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 81, 84, 85, 88, 90, 91, 95, 98, 100, 108, 109, 113, 120, 121, 123, 126, 129, 130, 137, 139, 146, 150, 154, 156, 157, 159, 160, 163, 165, 168, 169, 172, 175, 177, 178, 182, 183, 186, 187, 190, 191, 192, 193, 198, 200, 201, 205, 211, 214, 229, 231, 248, 250, 252, 253, 254, 260, 263, 271, 275, 278, 279, 284, 285, 288, 289, 295, 297, 300, 301, 302, 303, 304, 306, 307, 308, 316, 317, 318, 319, 322, 324, 328, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 355, 356, 358, 364, 365, 370, 376, 377, 379, 382, 390, 391, 394, 396, 405, 410, 411, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 446, 449, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 468, 475, 478, 494, 509, 511, 513, 519, 530, 538, 544, 548, 551, 552, 553, 556, 557, 560, 562, 564, 565, 566, 588, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 638, 646, 647, 655, 657, 658, 660, 661, 662, 663, 665, 666, 670, 671, 672, 673, 674, 676, 686, 687, 689, 690, 691, 692, 693, 695, 698, 702, 703, 711, 712, 715, 724, 733, 744, 750, 763, 765, 766, 768, 773, 776, 781, 782, 783, 784, 786, 800, 801, 802, 804, 805, 808, 812, 814, 815, 816, 819, 822, 823, 825, 826, 828, 829, 835, 846, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 872, 876, 877, 878, 882, 883, 884, 886, 887, 891, 899, 904, 918, 926, 940, 950, 955, 981, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1016, 1021, 1022, 1023, 1024, 1027, 1029, 1033, 1034, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "k0": 1002, "k1": [424, 628, 631], "k1__": 424, "k1__constant_valu": 178, "k1__k1": 424, "k1__k1__constant_valu": 424, "k1__k1__constant_value_bound": 424, "k1__k2": 424, "k1__k2__length_scal": [180, 424], "k1__k2__length_scale_bound": 424, "k2": [424, 628, 631], "k2__": 424, "k2__length_scal": 424, "k2__length_scale_bound": 424, "k_": [411, 424, 623, 626, 628, 631, 781, 1000, 1018], "k_1": [2, 424, 628, 631], "k_2": [2, 424, 628, 631], "k_best": [599, 908, 1021, 1056], "k_diag": [619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "k_fit_all_": 877, "k_fit_rows_": 877, "k_fold": 163, "k_gradient": [619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632], "k_init": [449, 465], "k_mean": [2, 99, 391, 396, 1047, 1055], "k_means_cluster_cent": 99, "k_means_elkan": 1047, "k_means_iris_3": 80, "k_means_iris_8": 80, "k_means_iris_bad_init": 80, "k_means_label": 99, "k_new": 877, "k_ret": [851, 852], "k_true": [851, 852], "ka00ri": [1054, 1055], "kachaiev": 1056, "kaczmarzyk": 1056, "kadatatlu": 1052, "kadota": 1053, "kaggl": [158, 395], "kahni": 1051, "kai": [379, 570, 1014, 1046], "kaicheng": 1043, "kaichogami": 1045, "kailasa": [1053, 1054], "kaim": [868, 869], "kaiser": [419, 539], "kakati": 1054, "kalli": [1047, 1048], "kalyan": 1045, "kamalakerdadi": [1044, 1045], "kamar": 1047, "kamchyev": 1056, "kamel": 1039, "kamishima": [1045, 1046], "kamm": 1008, "kanai": [1045, 1046, 1047], "kanazu": [1054, 1055], "kanchimo": 1057, "kang": [1047, 1049], "kania": [1054, 1055], "kanika": 1049, "kanishk": 1054, "kanissh": 1054, "kanji": 1052, "kanniah": [1042, 1043], "kansal": 1045, "kapadni": 1054, "kapeln": [191, 1015], "kapoor": [1047, 1048], "kappa": [2, 543, 723], "kapur": 1046, "kar": 1045, "karan": [1046, 1047, 1048], "karayev": 1041, "karbownik": 1052, "karen": 1052, "karger": [848, 1010], "karhunen": 541, "karin": [634, 998], "karl": 1047, "karlo": [1056, 1057], "karnofski": 1046, "karnowski": 1051, "karol": 1042, "kartik": 1051, "karypi": 414, "kaseorg": 1049, "kashif": 1044, "kasim": 1043, "kaski": 703, "kasper": 1047, "kassa": [1054, 1055], "kastner": [0, 404, 1041, 1042, 1043, 1050, 1051], "kat": 1046, "kataev": [1047, 1048], "kataki": [727, 741, 747, 1008], "katarina": [1049, 1051], "katheleen": 376, "kathi": [1046, 1049], "kathleen": 1046, "kathryn": 1050, "kati": 1046, "katotten": 1053, "katrin": [1047, 1048], "katrina": 1050, "katriopla": 1047, "katyal": 1049, "katz": [1044, 1051, 1052], "kaufmann": [1020, 1024, 1051], "kaushik": [1046, 1053, 1054, 1055, 1057], "kaushik94": 1042, "kawamura": 1052, "kawwa": 1052, "kayawari": 1052, "kaylani2": 1051, "kaynak": 379, "kazmar": 1043, "kb": [105, 190, 191, 269], "kbest": [106, 599], "kbin": [322, 329], "kbinsdiscret": [2, 43, 88, 121, 187, 198, 217, 235, 255, 314, 317, 322, 329, 519, 664, 874, 890, 920, 1018, 1029, 1047, 1051, 1052, 1053, 1055, 1057], "kbinsdiscretizer__n_bin": 317, "kcachegrind": 385, "kd": [300, 414, 420, 1011, 1047, 1048, 1049], "kd_tree": [425, 450, 452, 456, 463, 695, 696, 853, 854, 855, 856, 857, 859, 861, 862, 863, 1011, 1052, 1056], "kdd": [195, 377, 412, 443, 1020], "kdd06_rp": 904, "kddcup": [254, 375, 499, 1034], "kddcup99": [2, 377, 499], "kde": [189, 190, 289, 292, 299, 300, 308, 420, 856], "kdt": 1011, "kdtree": [2, 452, 456, 463, 695, 696, 851, 853, 854, 855, 856, 857, 859, 861, 862, 863, 1041, 1043, 1047, 1051, 1052, 1055, 1056], "ke": [421, 1050, 1051], "kearn": 1042, "keat": [1054, 1055], "keep": [0, 45, 52, 64, 77, 109, 126, 128, 143, 153, 171, 180, 185, 189, 190, 191, 192, 193, 202, 217, 218, 219, 225, 235, 258, 265, 270, 273, 319, 320, 327, 335, 345, 356, 357, 360, 365, 369, 370, 374, 382, 386, 395, 396, 412, 414, 415, 416, 417, 418, 419, 437, 456, 471, 488, 489, 490, 491, 500, 501, 541, 547, 548, 551, 554, 561, 563, 565, 567, 569, 572, 575, 577, 602, 605, 607, 610, 618, 641, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 683, 684, 685, 686, 715, 825, 844, 845, 854, 862, 868, 869, 907, 912, 914, 917, 920, 922, 1004, 1009, 1013, 1016, 1018, 1028, 1031, 1032, 1034, 1039, 1044, 1047, 1048, 1052, 1053, 1055, 1057], "keep_empty_featur": [634, 635, 637, 998, 1054, 1058], "keerti": 1054, "kegl": 1043, "kei": [2, 47, 49, 52, 55, 77, 143, 147, 158, 185, 189, 235, 251, 254, 257, 276, 278, 279, 325, 326, 327, 328, 329, 330, 331, 332, 371, 375, 384, 387, 388, 389, 394, 396, 397, 400, 405, 414, 415, 418, 424, 470, 478, 568, 569, 574, 575, 576, 577, 595, 598, 601, 624, 633, 639, 641, 666, 718, 807, 810, 811, 819, 821, 829, 834, 870, 871, 926, 942, 972, 1016, 1028, 1034, 1036, 1045, 1051, 1052, 1054, 1055, 1057], "keith": [356, 1039, 1044], "kekalainen": [733, 763, 1008], "kelkar": [1046, 1047, 1049], "kelleh": [715, 1008], "kelleher2015": 1008, "kellei": [377, 1041, 1042], "keller": 1051, "kellogg": 51, "kellycarmodi": 1049, "kemal": [0, 1041, 1042], "kemenad": 1050, "kemk": 1050, "ken": [379, 1041, 1048], "ken4git": 1053, "kendal": 1054, "kendrick": 1051, "kennedi": [1046, 1049, 1056], "kennel": 1050, "kenneth": [1020, 1039, 1040, 1045, 1046, 1053, 1054], "kenni": 1051, "kensuk": 1049, "kent": 57, "kenta": 1042, "kento": [1054, 1055], "kept": [64, 265, 295, 352, 376, 408, 424, 503, 542, 545, 547, 548, 554, 604, 617, 618, 626, 627, 651, 702, 804, 805, 938, 1018, 1047, 1048], "kera": [394, 1027], "kerimov": [1046, 1047], "kernal": 128, "kernc": [1039, 1053, 1054], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 86, 92, 101, 108, 118, 122, 124, 132, 159, 165, 170, 173, 175, 176, 177, 178, 181, 185, 200, 201, 218, 231, 243, 244, 252, 256, 268, 273, 275, 277, 280, 281, 285, 290, 296, 301, 306, 320, 327, 336, 339, 340, 342, 343, 345, 346, 347, 348, 350, 353, 365, 369, 374, 384, 394, 396, 402, 412, 414, 415, 418, 421, 422, 437, 446, 454, 458, 467, 468, 471, 488, 489, 490, 497, 503, 505, 509, 511, 521, 540, 541, 542, 548, 551, 561, 563, 565, 567, 569, 572, 575, 577, 600, 601, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 638, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 683, 684, 685, 686, 695, 697, 698, 699, 702, 742, 765, 766, 768, 773, 774, 781, 782, 783, 784, 807, 813, 818, 821, 837, 839, 844, 845, 851, 852, 854, 856, 862, 869, 871, 872, 877, 881, 883, 884, 886, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 920, 922, 928, 997, 1003, 1004, 1005, 1008, 1009, 1011, 1014, 1021, 1022, 1029, 1030, 1033, 1034, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "kernel_": [174, 175, 176, 177, 178, 179, 180, 181, 183, 617, 618], "kernel__length_scal": 174, "kernel__period": 174, "kernel_approxim": [2, 43, 185, 187, 194, 195, 231, 244, 249, 326, 645, 646, 647, 648, 649, 684, 765, 766, 877, 1000, 1029, 1040, 1046, 1056], "kernel_dens": [851, 852], "kernel_label": 351, "kernel_metr": [2, 646, 647, 648, 649], "kernel_param": [458, 542, 646, 650], "kernel_pca": [44, 128, 415], "kernel_pca_": 695, "kernel_pca_back_proj_ax": 128, "kernel_pca_proj_ax": 128, "kernel_ridg": [2, 174, 250, 650, 1009, 1043], "kernel_ridge_tun": 174, "kernel_svm": 249, "kernel_svm_scor": 249, "kernel_svm_tim": 249, "kernelapproximationkernel": 402, "kernelcenter": [2, 410, 1018, 1049, 1053, 1055, 1056], "kerneldens": [2, 299, 300, 308, 420, 1041, 1047, 1048, 1052, 1053, 1054], "kernelpca": [2, 44, 415, 419, 540, 541, 548, 551, 695, 697, 699, 877, 1018, 1040, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "kernelridg": [2, 128, 174, 250, 679, 1001, 1009, 1043, 1056], "kertesz": 1053, "keshat": [673, 674, 1004], "keshavan": 1049, "kesshi": [1049, 1050], "kevad": 1049, "kevin": [650, 1041, 1043, 1045, 1046, 1049, 1050, 1051, 1053, 1054, 1056], "kevlani": 1047, "keyber": 1057, "keyerror": [926, 1049], "keyword": [356, 376, 382, 384, 387, 389, 396, 414, 425, 428, 444, 450, 451, 456, 458, 463, 470, 473, 503, 510, 542, 545, 547, 566, 567, 574, 575, 576, 577, 627, 638, 639, 646, 650, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 695, 699, 704, 705, 706, 707, 708, 709, 781, 785, 786, 787, 788, 799, 800, 813, 830, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 871, 875, 950, 974, 997, 1005, 1008, 1011, 1021, 1039, 1043, 1045, 1046, 1047, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "kf": [418, 812], "kfold": [2, 89, 143, 149, 163, 270, 280, 365, 418, 443, 478, 574, 575, 601, 609, 654, 658, 660, 662, 668, 670, 672, 680, 807, 810, 811, 813, 815, 817, 821, 826, 828, 830, 831, 832, 833, 834, 835, 836, 838, 842, 845, 892, 1040, 1041, 1042, 1044, 1045, 1047, 1049, 1057], "khaja": 1054, "khan": [1054, 1055], "khandelw": 1051, "khanduja": 1042, "khant": 1054, "kharsa": 1053, "khedkar": 1053, "khine": 1053, "kho": 1054, "khoo": 1051, "khosasi": 1052, "khosrow": 1008, "khoual": 1052, "khwaja": 1054, "ki": 1008, "kian": [1044, 1054, 1055, 1056], "kid": 1018, "kieker": [1047, 1048], "kielczewski": 1045, "kie\u00dfl": 1050, "kilian": [422, 1054, 1055], "kill": [356, 394], "killer": [382, 1032], "kilobyt": 88, "kilomet": 771, "kim": [1004, 1047, 1048, 1049, 1053], "kimayoung": 1053, "kimberli": 51, "kimbinyi": 1051, "kind": [43, 48, 51, 52, 61, 62, 109, 131, 143, 158, 167, 190, 191, 265, 268, 269, 271, 284, 322, 326, 329, 342, 345, 356, 370, 371, 375, 377, 382, 384, 388, 394, 395, 412, 414, 417, 418, 419, 421, 422, 423, 494, 495, 510, 515, 516, 528, 531, 595, 639, 640, 708, 947, 1004, 1010, 1015, 1024, 1042, 1051, 1053, 1054, 1055], "king": 942, "kingjr": 1045, "kingma": [868, 869, 1012], "kink": 206, "kiragu": 1051, "kiran": 1051, "kirandevraj": 1054, "kiril": [1046, 1047, 1049, 1051], "kirkbi": [1046, 1047], "kirkham": [1044, 1045, 1047], "kirthi": 1049, "kishan": 1056, "kishimoto": 1051, "kishor": 1052, "kislovskii": 1056, "kit": 394, "kitchen": [648, 1000], "kj": [376, 1010], "kjell": 1045, "kk": 1008, "kl": [419, 1005, 1047], "kl_divergence_": [699, 1046], "klarup": 1046, "klass": 100, "klau": [419, 542, 877], "kleczewski": [1046, 1047], "kleiber": 1053, "klevebr": 1047, "klima": 1054, "klopfer": 1048, "kluge": [1054, 1055], "kluger": [2, 411, 457, 520], "klusacek": 1008, "km": [96, 328, 357], "kmatt10": 1052, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 81, 83, 85, 88, 92, 93, 96, 187, 263, 266, 318, 328, 357, 391, 405, 414, 440, 441, 442, 446, 449, 454, 455, 458, 468, 519, 717, 799, 800, 804, 805, 876, 1011, 1018, 1028, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "kmeans_estim": 123, "kmeans_model": 414, "kmeans_plusplu": [2, 94, 414, 1051, 1056], "kmode": 1027, "kms15": [1047, 1048], "knee": 414, "kneighbor": [320, 328, 853, 854, 855, 857, 859, 1011, 1043, 1048, 1052, 1053, 1054, 1055], "kneighbors_graph": [2, 74, 79, 97, 102, 295, 396, 414, 447, 451, 702, 853, 854, 855, 857, 859, 861, 862, 863, 865, 1011, 1039, 1043, 1048], "kneighborsclassifi": [2, 67, 159, 164, 297, 298, 303, 304, 320, 326, 328, 356, 421, 609, 854, 858, 859, 860, 861, 862, 1009, 1011, 1039, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "kneighborsclassifierkneighbor": 402, "kneighborsregressor": [2, 185, 253, 307, 328, 421, 577, 853, 859, 861, 862, 1009, 1011, 1039, 1041, 1043, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "kneighborstransform": [2, 295, 297, 324, 699, 863, 1011, 1049, 1053, 1054], "knight": 321, "knn": [140, 159, 164, 185, 298, 303, 304, 307, 320, 326, 336, 356, 421, 609, 860, 906, 907, 1011, 1021, 1045], "knn__weight": 298, "knn_graph": 74, "knn_impute_scor": 186, "knnimput": [2, 186, 324, 634, 637, 998, 1049, 1050, 1053, 1054, 1055, 1056, 1058], "knnquerybatch": 295, "knot": [43, 218, 327, 890, 1018, 1052], "know": [88, 101, 169, 172, 174, 183, 190, 235, 251, 252, 269, 275, 288, 292, 294, 328, 334, 352, 357, 369, 382, 394, 405, 408, 414, 417, 418, 419, 422, 507, 511, 517, 653, 659, 665, 666, 733, 763, 807, 821, 896, 897, 899, 900, 901, 902, 919, 920, 921, 922, 997, 1007, 1008, 1009, 1011, 1020, 1045, 1046, 1049, 1051], "knowledg": [92, 145, 153, 190, 234, 254, 269, 275, 288, 289, 377, 382, 385, 388, 395, 396, 414, 418, 421, 425, 450, 518, 562, 563, 570, 727, 743, 747, 790, 840, 1008, 1009, 1020, 1057], "known": [2, 50, 55, 62, 64, 74, 84, 92, 93, 114, 131, 132, 158, 179, 181, 186, 202, 217, 218, 235, 244, 269, 275, 277, 284, 304, 308, 316, 327, 332, 334, 342, 349, 357, 371, 377, 379, 380, 382, 390, 394, 396, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 444, 469, 488, 490, 505, 515, 516, 551, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 595, 596, 598, 601, 616, 629, 640, 665, 666, 679, 689, 690, 701, 711, 717, 720, 725, 736, 750, 762, 764, 802, 840, 846, 847, 848, 849, 850, 853, 858, 861, 867, 895, 919, 920, 921, 922, 955, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1023, 1024], "known_val": 634, "knox": 1051, "knp": 634, "knr": 421, "knyazev": [414, 458, 468, 702, 1049, 1052, 1053], "ko": [51, 63, 175], "kobak": [699, 1052], "kobaski": 1052, "kobayashi": [1051, 1052], "kober": 1047, "kobi": 742, "koch": [1041, 1047, 1048, 1050, 1051], "kocot": 1050, "koehler": 1043, "koen": [1047, 1048], "koenker": [730, 1004], "koh": [1004, 1032], "kohavi": 418, "kohli": [1056, 1057], "koi8": 422, "koivunen": 114, "kokhlikyan": [1046, 1047], "koki": 1051, "koko": [1047, 1053, 1054], "kolawol": 1052, "kolganov": 1044, "kolh": 1041, "kolstad": 57, "komarov": 1057, "komey": [1053, 1054], "kommireddi": 1053, "kondratyev": 1053, "kong": 1052, "konstantin": [1044, 1045, 1046], "konstantino": [1047, 1056], "konwar": 1050, "koonc": 1047, "korba": 377, "korean": 1027, "kornel": 1045, "kornev": 1054, "korobko": [1056, 1057, 1058], "korobov": [1040, 1041, 1042, 1045, 1046], "korolev": 1049, "kosic": 1051, "kosobrodov": 1047, "kossaifi": [1039, 1043, 1044], "kossen": [1054, 1055], "kossori": [1047, 1048], "kostelac": [1054, 1055], "kot271828": 1052, "kothari": 1050, "kotwalia": [1047, 1048], "koumenti": 1054, "koushik": 1053, "koustav": [1056, 1057], "kovalevskyi": 1045, "kowalski87": 1042, "koyama": 1053, "kozachenko": [614, 615], "kozynet": [1051, 1053], "kpca": [2, 540, 541, 542, 1033, 1034, 1039], "kr": [250, 275, 1053], "kr_fit": 250, "kr_predict": 250, "kraig": 1054, "kraktu": 1057, "kranthi": 1053, "kranz": 1032, "kraskov": [614, 615], "krasouli": [1046, 1047, 1048, 1049, 1051, 1052], "kratzwald": 1045, "krawczyk": 1053, "krawutschk": [1054, 1055], "krell": [1043, 1045], "kriegel": [414, 425, 450, 456, 463, 857, 1014], "krinitsyn": 1047, "krishna": [1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "krishnachaitanya9": 1050, "krishnakalyan3": 1045, "krishnan": 1049, "krivich": [1045, 1046, 1048], "kronovet": 1044, "krr": [250, 650, 1001], "krsto": 1057, "krum": [1051, 1053], "krumetoft": 1053, "krump": 1044, "kruskal": [642, 697, 701, 1005], "krzeminski": 1046, "krzysztof": 376, "ksemb": 1047, "kshitij": [1054, 1055, 1057], "ksvd": [671, 692, 693, 1004], "ksvm": 195, "ksvm_score": 195, "ksvm_time": 195, "kth": [57, 828], "ku": [1043, 1044], "kuai": [1047, 1048], "kubin": 1050, "kuhlmann": [1046, 1047], "kulbear": 1048, "kulkarni": 1047, "kull": [412, 1008], "kullback": [54, 237, 419, 545, 547, 554, 699, 1005, 1046], "kulsinski": [456, 463, 706, 785, 786, 787], "kulsinskidist": [706, 1055], "kumar": [0, 172, 377, 404, 414, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "kumaresshan": [1047, 1048, 1051], "kumawat": 1053, "kund": [1055, 1056], "kunj": 1052, "kuno": 1057, "kuo": 1043, "kurumeyuta": 1052, "kurz": [1053, 1054], "kusanagi": [1050, 1052], "kusanagi2": 1051, "kushal": [1047, 1048], "kushan": 1056, "kushwah": [1055, 1056], "kushwaha": 1051, "kusterl": 1049, "kuth": 1045, "kvam": [1040, 1042], "kvle": 1045, "kw_arg": [142, 875, 1018, 1045], "kwarg": [76, 126, 251, 384, 389, 428, 432, 436, 444, 448, 454, 456, 470, 475, 542, 545, 547, 570, 638, 653, 654, 659, 660, 667, 668, 669, 670, 684, 688, 691, 705, 706, 707, 709, 749, 870, 871, 875, 915, 926, 967, 973, 975, 996, 1046, 1050, 1052, 1056], "kwd": [778, 781, 785, 788, 799, 800], "kwei": [1042, 1043, 1044, 1045, 1046], "kxytim": 1052, "kybernetika": 379, "kye": 1047, "kyeongpil": 1047, "kyle": [0, 404, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "kyledrogo": 1047, "kyler": 1044, "k\u00e4rkk\u00e4inen": 1004, "l": [0, 46, 53, 55, 75, 81, 82, 101, 102, 114, 140, 172, 192, 209, 212, 221, 226, 227, 280, 281, 282, 292, 311, 319, 352, 379, 380, 388, 390, 411, 412, 414, 418, 419, 421, 424, 480, 523, 524, 525, 545, 547, 554, 562, 563, 564, 565, 572, 573, 597, 614, 615, 617, 618, 622, 626, 629, 630, 641, 655, 656, 665, 676, 679, 681, 687, 694, 696, 699, 700, 712, 722, 732, 733, 738, 763, 793, 848, 882, 919, 920, 921, 922, 997, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1016, 1020, 1022, 1024, 1042, 1047, 1051, 1052, 1053, 1054, 1056], "l1": [2, 25, 42, 46, 55, 66, 75, 101, 115, 117, 187, 196, 197, 203, 204, 205, 206, 211, 221, 228, 232, 246, 276, 288, 295, 312, 327, 391, 394, 414, 416, 419, 447, 451, 456, 463, 470, 475, 476, 477, 478, 479, 480, 481, 482, 484, 503, 509, 511, 538, 544, 545, 546, 547, 549, 550, 554, 555, 565, 572, 596, 597, 598, 604, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 679, 683, 684, 685, 686, 688, 695, 742, 769, 775, 780, 785, 786, 787, 792, 821, 828, 837, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 883, 891, 898, 911, 912, 918, 920, 922, 940, 989, 1004, 1006, 1008, 1011, 1018, 1022, 1023, 1024, 1029, 1044, 1046, 1052, 1055], "l1_color": 228, "l1_contour": 228, "l1_distanc": 1039, "l1_min_c": [2, 210, 1004, 1023, 1039], "l1_plot": 233, "l1_ratio": [46, 49, 54, 202, 205, 208, 283, 288, 369, 394, 419, 545, 547, 554, 653, 654, 659, 665, 666, 667, 668, 669, 670, 675, 683, 685, 688, 1004, 1022, 1040, 1042, 1044, 1051, 1053], "l1_ratio_": [654, 666, 668], "l1_ratios_": 666, "l2": [2, 53, 66, 75, 115, 117, 187, 189, 190, 196, 197, 202, 205, 208, 210, 213, 217, 222, 228, 232, 233, 235, 276, 288, 295, 315, 322, 338, 356, 357, 384, 391, 394, 414, 416, 419, 421, 422, 447, 451, 456, 463, 531, 545, 547, 554, 565, 568, 569, 572, 596, 597, 598, 650, 653, 654, 655, 656, 659, 664, 665, 666, 667, 668, 669, 670, 675, 676, 679, 683, 685, 687, 688, 693, 694, 695, 742, 757, 768, 769, 785, 786, 787, 821, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 868, 869, 883, 891, 898, 911, 912, 916, 917, 918, 920, 922, 990, 997, 1001, 1004, 1006, 1011, 1012, 1018, 1022, 1024, 1029, 1041, 1043, 1044, 1046, 1048], "l2014": 421, "l2_color": 228, "l2_contour": 228, "l2_regular": [327, 421, 568, 569], "l_": [411, 618, 659, 748, 1008], "l_i": 1018, "l_inf": 55, "l_m": 421, "l_p": [456, 463, 695, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865], "l_x": 53, "la": [0, 321, 379, 403, 1032, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "lab": [0, 377, 474, 543, 909, 1032, 1050], "labb\u00e9": 1057, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 90, 91, 93, 95, 98, 99, 100, 101, 102, 107, 109, 111, 112, 113, 114, 117, 118, 121, 125, 127, 129, 130, 131, 132, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 168, 170, 174, 175, 179, 180, 181, 182, 183, 185, 187, 190, 193, 195, 197, 198, 200, 201, 202, 204, 206, 207, 211, 217, 218, 219, 220, 223, 224, 225, 226, 227, 231, 232, 234, 235, 238, 239, 240, 244, 245, 249, 250, 252, 254, 255, 262, 268, 269, 270, 273, 274, 276, 277, 278, 279, 281, 284, 285, 286, 287, 288, 289, 290, 294, 300, 302, 304, 307, 311, 313, 315, 316, 320, 324, 325, 328, 331, 333, 337, 338, 339, 347, 349, 351, 352, 356, 357, 360, 361, 362, 363, 371, 374, 375, 376, 381, 382, 384, 386, 387, 391, 396, 397, 411, 412, 413, 424, 425, 431, 432, 436, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 471, 475, 493, 494, 495, 500, 501, 502, 503, 509, 510, 515, 516, 519, 521, 522, 526, 529, 530, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 576, 577, 599, 600, 601, 602, 603, 605, 606, 607, 611, 612, 613, 616, 617, 638, 665, 666, 673, 674, 675, 680, 681, 682, 683, 684, 685, 704, 705, 707, 709, 710, 711, 712, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 729, 732, 733, 734, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 761, 762, 763, 764, 789, 790, 791, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 821, 822, 823, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 857, 858, 860, 861, 868, 869, 871, 875, 878, 879, 882, 884, 885, 892, 895, 906, 907, 908, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 927, 931, 937, 942, 943, 970, 971, 978, 997, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1024, 1027, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "label1": 396, "label2": 396, "label_a": 284, "label_b": 284, "label_binar": [2, 282, 284, 878, 1043], "label_binarizer_": 840, "label_distributions_": [334, 335, 906, 907, 1050], "label_im": 101, "label_out": 78, "label_pr": [724, 743, 744, 762, 764, 802], "label_prop_model": [906, 907], "label_propag": 1040, "label_ranking_average_precision_scor": [2, 1008, 1043, 1047, 1048, 1054], "label_ranking_loss": [2, 1008, 1044], "label_spread": 336, "label_tru": [711, 724, 744, 762, 764, 802], "labelbinar": [2, 284, 396, 729, 748, 840, 875, 884, 892, 895, 1009, 1042, 1043, 1044, 1048, 1053], "labelbottom": [161, 275], "labeled_iter_": [337, 908], "labelencod": [2, 396, 576, 885, 1019, 1039, 1047, 1054, 1055, 1058], "labeling1": 1008, "labeling2": 1008, "labelkfold": [1044, 1045], "labelleft": 260, "labelpad": 275, "labelpropag": [2, 328, 336, 907, 908, 1009, 1021, 1040, 1045, 1046, 1049, 1050, 1051, 1053, 1054, 1055], "labels": [54, 319], "labels_": [73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 87, 90, 93, 96, 97, 98, 100, 102, 328, 330, 357, 382, 396, 414, 432, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 717, 1044], "labels_050": 100, "labels_200": 100, "labels_a": 72, "labels_b": 72, "labels_pr": [414, 711, 712, 721, 722, 724, 738, 743, 744, 762, 764, 793, 802], "labels_random": 83, "labels_tru": [73, 84, 90, 99, 414, 711, 712, 721, 722, 724, 738, 743, 744, 762, 764, 793, 802], "labels_uniqu": 98, "labelshufflesplit": [1044, 1045], "labelspread": [2, 328, 334, 335, 336, 338, 339, 906, 908, 1009, 1021, 1040, 1045, 1046, 1049, 1050, 1053, 1054, 1055], "labelspreadingifittedlabelspread": 336, "labex": 0, "labl": 153, "laboratori": [377, 1027], "lacchia": 1046, "lack": [43, 64, 349, 382, 394, 418, 836, 926, 1023, 1053], "lacost": [665, 1004], "lacouth": 1052, "lacrosse91": 1052, "lad": 1052, "lag": [42, 43, 150, 153, 187, 219, 498, 569, 708, 749, 752, 753, 755, 797, 828, 833, 834, 837, 1029], "lagacheri": 1043, "lagard": 1042, "lagat": 1049, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 320, 349, 1014], "laid": [0, 189, 382], "lakhotia": [1049, 1050], "lakshmi": 1049, "lakshmikanth": 1046, "lakshya": [1047, 1048, 1049], "lal": 907, "lalliacqua": [1049, 1052], "lam": [325, 326, 1050, 1057], "lama": 501, "lamb": [1044, 1052], "lambda": [43, 46, 47, 49, 57, 91, 149, 198, 235, 275, 276, 319, 338, 408, 410, 414, 419, 421, 422, 651, 652, 653, 654, 875, 887, 1000, 1004, 1018, 1047, 1053], "lambda_": [198, 651, 652, 887, 1004, 1046], "lambda_1": [651, 652, 1004], "lambda_2": [651, 652, 1004], "lambda_i": [1004, 1018], "lambda_init": [197, 198, 652, 1004, 1049], "lambdas_": [319, 887, 1052, 1055], "lami": 1047, "lamond": 1043, "lamp": 1032, "lamu": 1045, "lan": [665, 1054, 1055], "land": [50, 308, 386, 397, 421], "land_mask": 308, "land_refer": [50, 308], "landeau": 1056, "landmark": [888, 900, 1018], "landscap": 175, "lane": 1045, "langford": [422, 695, 1005], "langl": [1000, 1008, 1022, 1023], "languag": [0, 358, 387, 419, 422, 1022, 1027, 1028, 1032], "language_level": 383, "lanigan": 1046, "lanl": 55, "lannuzel": 1051, "lanterni": 1053, "lanzani": 1045, "lapack": [369, 370, 380, 539, 542, 548, 695, 1054], "lapack_lit": 388, "lapack_svd_driv": 1054, "laplac": [2, 175, 424, 617, 618, 846, 847, 848, 850, 1010], "laplacian": [2, 237, 374, 411, 446, 458, 468, 627, 646, 650, 698, 702, 772, 773, 781, 907, 1004, 1005, 1021, 1034, 1040, 1045], "laplacian_kernel": [2, 772, 1006, 1044], "laptop": [52, 390, 474, 909, 1053, 1054, 1055], "lar": [0, 2, 126, 172, 187, 196, 202, 203, 206, 208, 211, 379, 404, 477, 478, 484, 508, 538, 544, 546, 549, 550, 552, 553, 555, 658, 659, 660, 661, 662, 663, 670, 671, 672, 685, 688, 689, 690, 691, 692, 693, 1009, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1057], "laradji": [0, 1045], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 82, 84, 85, 87, 88, 90, 107, 109, 123, 127, 140, 142, 143, 150, 153, 154, 156, 168, 179, 180, 192, 193, 197, 198, 206, 208, 217, 219, 221, 222, 223, 235, 249, 254, 269, 272, 278, 281, 284, 297, 304, 312, 315, 317, 327, 328, 331, 345, 350, 352, 357, 358, 369, 377, 382, 388, 391, 394, 395, 396, 400, 408, 414, 416, 418, 419, 420, 421, 423, 425, 427, 448, 450, 452, 453, 456, 457, 458, 459, 464, 468, 479, 481, 506, 521, 541, 543, 545, 547, 548, 551, 554, 556, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 589, 596, 641, 648, 650, 653, 654, 657, 659, 660, 661, 664, 665, 666, 671, 678, 679, 681, 684, 686, 692, 694, 696, 698, 699, 700, 702, 753, 786, 787, 807, 815, 817, 821, 825, 836, 846, 847, 848, 849, 850, 851, 852, 857, 868, 869, 876, 880, 881, 889, 891, 903, 904, 911, 912, 916, 917, 919, 920, 921, 922, 954, 955, 997, 1000, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1016, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "larger": [43, 46, 64, 72, 74, 77, 82, 90, 113, 115, 121, 132, 140, 151, 153, 175, 180, 181, 186, 190, 191, 195, 198, 202, 232, 233, 234, 242, 248, 250, 260, 266, 269, 276, 278, 284, 285, 292, 295, 297, 310, 311, 313, 315, 345, 349, 357, 358, 375, 377, 382, 388, 396, 411, 412, 414, 415, 416, 418, 419, 421, 422, 424, 446, 449, 455, 456, 458, 460, 462, 522, 534, 548, 551, 568, 569, 570, 574, 575, 589, 596, 650, 659, 679, 680, 681, 682, 686, 694, 699, 711, 726, 743, 804, 856, 857, 888, 890, 891, 892, 900, 905, 954, 955, 978, 981, 1000, 1001, 1004, 1005, 1007, 1008, 1011, 1012, 1016, 1018, 1022, 1023, 1043, 1044, 1047, 1048, 1049, 1052, 1053, 1056, 1057, 1058], "largest": [115, 125, 143, 172, 219, 379, 414, 416, 419, 449, 534, 548, 564, 565, 566, 567, 571, 572, 595, 716, 804, 805, 826, 849, 881, 919, 920, 921, 922, 955, 1005, 1008, 1018, 1023, 1024], "largest_clust": [414, 449], "largest_coef": [115, 534], "larrald": 1056, "lars_path": [2, 205, 391, 538, 544, 546, 549, 550, 552, 553, 555, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 690, 691, 692, 693, 1004, 1039, 1041, 1044, 1048, 1050], "lars_path_gram": [2, 689, 1004, 1048], "larscv": [2, 405, 657, 672, 689, 690, 1046, 1052, 1056], "larson": [1044, 1048, 1049, 1051, 1053], "larsson": [1051, 1052, 1053], "lasagna": 1045, "laska": 1045, "lasso": [2, 42, 55, 101, 132, 158, 163, 187, 190, 196, 208, 216, 225, 265, 327, 331, 352, 369, 394, 416, 417, 419, 421, 422, 423, 477, 478, 484, 508, 531, 538, 544, 546, 549, 550, 552, 553, 555, 604, 653, 654, 656, 657, 658, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 677, 679, 685, 688, 689, 690, 691, 692, 693, 728, 730, 731, 832, 833, 834, 872, 891, 997, 1008, 1009, 1022, 1029, 1030, 1034, 1039, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1053, 1057], "lasso_cd": [538, 544, 549, 555], "lasso_cv": 163, "lasso_lar": [132, 538, 544, 549, 555, 1049], "lasso_lars_": [204, 206], "lasso_path": [2, 205, 658, 659, 660, 661, 662, 663, 670, 689, 690, 1004, 1039, 1041, 1043, 1052], "lasso_pipelin": 158, "lassocolumntransform": 158, "lassocv": [2, 53, 158, 163, 190, 202, 206, 405, 421, 423, 658, 659, 661, 662, 663, 670, 691, 1004, 1039, 1042, 1046, 1049, 1050, 1052, 1053, 1056, 1057, 1058], "lassocvlassocv": 158, "lassolar": [2, 658, 659, 660, 662, 663, 670, 671, 672, 689, 690, 691, 1004, 1009, 1039, 1040, 1042, 1046, 1049, 1050, 1052], "lassolars": [2, 204, 206, 423, 658, 661, 662, 1004, 1039, 1046, 1048, 1052, 1053], "lassolarscv": [2, 206, 405, 423, 659, 660, 661, 663, 670, 672, 689, 690, 691, 1004, 1039, 1046, 1052, 1056], "lassolarsic__criterion": [204, 206], "last": [43, 58, 79, 93, 150, 190, 197, 217, 218, 225, 230, 244, 266, 278, 286, 287, 320, 326, 328, 337, 360, 369, 377, 380, 384, 386, 387, 390, 396, 400, 408, 414, 415, 422, 426, 444, 448, 453, 465, 470, 473, 474, 522, 540, 566, 567, 568, 569, 590, 591, 594, 600, 601, 604, 617, 689, 690, 692, 693, 704, 705, 707, 708, 709, 714, 789, 804, 805, 810, 811, 826, 851, 852, 856, 871, 872, 876, 884, 890, 926, 958, 982, 996, 997, 1003, 1004, 1005, 1007, 1009, 1012, 1022, 1028, 1039, 1045, 1046, 1047, 1048, 1053, 1055, 1056], "last_hour": [43, 52], "last_mean": 982, "last_n": 982, "last_var": 982, "lat": [50, 308, 505, 771], "late": [321, 371], "latenc": [42, 46, 187, 368, 531, 572, 679, 685, 837, 891, 917, 972, 981, 1027, 1029, 1034, 1042], "latent": [2, 42, 45, 55, 133, 187, 313, 357, 417, 422, 424, 494, 539, 543, 545, 546, 547, 550, 551, 595, 598, 867, 1007, 1027, 1029, 1033, 1034, 1041, 1044], "latentdirichletalloc": [2, 54, 371, 387, 419, 1027, 1044, 1046, 1053, 1054], "later": [0, 50, 88, 137, 142, 151, 174, 191, 195, 197, 254, 269, 292, 308, 358, 365, 380, 388, 394, 395, 408, 421, 857, 880, 881, 889, 891, 1000, 1018, 1042, 1045, 1047, 1051], "latest": [324, 325, 326, 327, 328, 329, 330, 331, 332, 380, 382, 386, 388, 390, 1024, 1053], "latestst": 386, "latex": 1039, "latexpdf": 382, "latin": [47, 422], "latitud": [308, 315, 377, 505, 706, 771], "lattarini": 1041, "latter": [43, 54, 265, 275, 284, 285, 303, 320, 352, 371, 379, 396, 413, 418, 421, 422, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 749, 804, 805, 806, 807, 810, 811, 816, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 974, 1011, 1016, 1048], "laughlin": 1046, "launch": [356, 357, 400, 1032], "laur": 1039, "lauren": [0, 366, 699, 703, 1005, 1051, 1054], "laurent": [1042, 1043, 1046, 1047, 1054, 1055], "laurenz": 1051, "lauritzen": 1047, "laveen": 1052, "law": 1032, "lawrenc": 269, "lawson": [1046, 1047, 1048], "lawton": 1047, "layer": [2, 43, 67, 146, 156, 165, 176, 178, 187, 224, 233, 255, 309, 312, 313, 317, 318, 339, 350, 369, 390, 421, 521, 522, 529, 574, 837, 867, 868, 869, 872, 891, 1013, 1029, 1030, 1034, 1045], "layout": [137, 315, 394, 911, 912, 913, 916, 938, 1023, 1042, 1044, 1056], "layton": [0, 404, 1039, 1040, 1041, 1042, 1044], "lazaru": 1057, "lazebnik": [765, 766, 1006], "lazi": [52, 397, 422, 1022, 1043], "lazyfram": 107, "lazz": 1054, "lb": [878, 1019], "lbfg": [310, 384, 655, 656, 665, 666, 676, 679, 681, 687, 694, 842, 845, 868, 869, 1004, 1012, 1043, 1044, 1046, 1047, 1052, 1053, 1054, 1056, 1058], "lbfgsb": 665, "lbfin": 1049, "lc": [51, 240, 247], "lceil": [411, 1014], "lda": [54, 69, 120, 122, 125, 127, 133, 187, 304, 365, 379, 410, 511, 543, 548, 556, 557, 860, 1027, 1029, 1030, 1033, 1034, 1044], "lda_featur": 387, "lda_model": 387, "lda_np": 410, "ldavid": 1045, "ldflag": 380, "ldirer": 1046, "ldl": [172, 379], "ldot": [1004, 1008, 1010, 1012, 1022], "ldwy4": [1056, 1057], "le": [665, 879, 999, 1004, 1011, 1019, 1021, 1047, 1051, 1052, 1056], "le_": 576, "lead": [0, 46, 62, 64, 67, 72, 87, 90, 96, 106, 143, 147, 148, 150, 171, 172, 190, 191, 192, 197, 202, 206, 208, 217, 221, 249, 251, 254, 269, 275, 276, 278, 282, 288, 300, 301, 312, 315, 317, 320, 321, 326, 345, 352, 357, 360, 365, 369, 370, 376, 381, 390, 391, 395, 396, 411, 412, 413, 414, 416, 418, 419, 420, 421, 423, 458, 468, 471, 474, 503, 522, 534, 542, 545, 546, 547, 550, 554, 558, 564, 565, 566, 567, 570, 571, 572, 573, 613, 637, 653, 654, 657, 659, 660, 661, 667, 668, 669, 670, 686, 698, 702, 753, 804, 810, 811, 839, 851, 852, 856, 875, 882, 892, 903, 904, 909, 911, 919, 920, 921, 922, 997, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1018, 1021, 1022, 1024, 1032, 1042, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "leader": [382, 1032], "leadership": 0, "leaf": [76, 142, 154, 156, 360, 364, 414, 421, 425, 447, 448, 449, 450, 451, 452, 456, 463, 469, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 919, 920, 921, 922, 923, 924, 1011, 1024, 1042, 1044, 1046, 1050, 1053], "leaf_id": 364, "leaf_rot": 193, "leaf_siz": [425, 450, 452, 456, 461, 462, 463, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 1011], "leagu": 377, "leak": [142, 280, 356, 365, 415, 418, 871, 896, 897, 899, 900, 901, 902, 1018, 1039, 1046, 1049, 1055, 1056, 1057], "leakag": [395, 396, 415, 1034], "lean": 408, "leandro": [1048, 1052], "lear": 1032, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 333, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 374, 375, 376, 377, 379, 381, 385, 388, 389, 390, 391, 395, 396, 399, 401, 402, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 423, 424, 428, 429, 431, 432, 433, 434, 436, 437, 438, 443, 444, 445, 448, 449, 452, 453, 455, 456, 463, 470, 471, 473, 474, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 515, 516, 517, 519, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 583, 588, 589, 590, 591, 594, 595, 596, 597, 598, 600, 601, 606, 609, 610, 617, 618, 621, 626, 629, 633, 635, 637, 639, 641, 645, 647, 648, 650, 651, 652, 653, 655, 659, 664, 665, 675, 676, 683, 684, 685, 687, 695, 696, 697, 698, 699, 703, 704, 707, 708, 709, 715, 720, 724, 725, 728, 730, 731, 733, 739, 742, 748, 749, 750, 755, 763, 785, 786, 787, 791, 792, 794, 795, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847, 848, 849, 850, 853, 855, 860, 867, 868, 869, 870, 871, 872, 874, 876, 878, 881, 883, 884, 885, 886, 889, 890, 891, 892, 895, 903, 904, 906, 907, 908, 909, 911, 912, 913, 916, 919, 920, 921, 922, 927, 929, 940, 949, 950, 960, 973, 974, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1029, 1031, 1034, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "learn_rat": 1040, "learnalgorithm": 402, "learner": [2, 47, 138, 148, 158, 371, 561, 566, 567, 568, 569, 589, 596, 637, 853, 854, 859, 861, 862, 1010, 1013, 1024, 1027, 1028, 1055], "learning_curv": [2, 277, 329, 405, 813, 1003, 1042, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1056, 1058], "learning_decai": 543, "learning_method": [54, 387, 543], "learning_offset": [54, 543], "learning_r": [46, 137, 148, 149, 150, 151, 152, 153, 242, 295, 311, 313, 325, 327, 421, 560, 561, 566, 567, 568, 569, 675, 683, 684, 685, 699, 867, 868, 869, 1005, 1015, 1022, 1040, 1048, 1052], "learning_rate_": [699, 869], "learning_rate_init": [191, 311, 312, 868, 869], "learningcurvedisplai": [2, 250, 277, 329, 1003, 1054, 1055], "learnt": [153, 190, 322, 365, 396, 418, 892, 997, 1018], "least": [2, 37, 44, 52, 54, 113, 114, 116, 117, 125, 126, 140, 151, 170, 172, 182, 187, 189, 196, 197, 200, 202, 207, 210, 213, 217, 219, 221, 222, 225, 234, 235, 248, 254, 275, 288, 292, 294, 320, 326, 327, 345, 357, 358, 369, 375, 377, 379, 381, 382, 386, 388, 390, 394, 396, 397, 405, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 450, 454, 456, 462, 463, 464, 467, 480, 487, 488, 489, 490, 491, 501, 523, 538, 544, 546, 548, 549, 550, 552, 553, 554, 555, 556, 564, 565, 566, 567, 569, 571, 572, 573, 600, 601, 609, 642, 650, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 699, 704, 719, 723, 725, 792, 808, 812, 813, 819, 821, 822, 823, 825, 826, 828, 832, 835, 836, 837, 868, 869, 872, 883, 891, 916, 919, 920, 921, 922, 947, 970, 998, 1001, 1005, 1008, 1011, 1020, 1022, 1023, 1024, 1028, 1029, 1030, 1032, 1034, 1039, 1041, 1042, 1045, 1046, 1050], "least_absolute_devi": [1049, 1051, 1052], "least_angl": 391, "least_squar": 1052, "leastangle_2002": [172, 379], "leastsquareserror": 1048, "leav": [2, 88, 137, 142, 151, 191, 193, 235, 282, 320, 364, 365, 369, 379, 381, 387, 396, 414, 421, 447, 448, 451, 452, 469, 510, 564, 565, 566, 567, 568, 569, 571, 572, 573, 680, 682, 809, 814, 815, 816, 817, 825, 826, 851, 852, 919, 920, 921, 922, 997, 1005, 1011, 1015, 1024, 1039, 1046, 1048, 1050, 1051, 1055], "leaveonegroupout": [2, 280, 418, 808, 815, 816, 1045], "leaveonelabelout": 1045, "leaveoneout": [2, 280, 418, 1057], "leavepgroupsout": [2, 418, 809, 1045], "leaveplabelout": 1045, "leaveplabelsout": 1045, "leavepout": [2, 418, 815], "leaves_parallel": 923, "lebedev": [1045, 1046], "lebel": 1054, "lebourgeoi": 1032, "lectur": [414, 651, 1000, 1026], "lecture2": 651, "lecun": [1012, 1022], "led": 1039, "ledoit": [2, 49, 65, 70, 110, 111, 114, 115, 187, 304, 479, 481, 485, 486, 519, 556, 1002, 1029], "ledoit_wolf": [2, 115, 416, 1052], "ledoit_wolf_shrinkag": [2, 1052], "ledoitwolf": [2, 69, 110, 112, 115, 130, 152, 187, 306, 416, 475, 476, 480, 481, 482, 483, 807, 1029, 1043], "lee": [419, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1054, 1058], "leepei": 1043, "leereev": 1046, "leeuw": 642, "lefebvr": [1052, 1053], "lefevr": [419, 545], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 80, 86, 90, 97, 99, 106, 109, 114, 115, 121, 125, 126, 137, 140, 142, 143, 144, 147, 150, 153, 158, 160, 177, 183, 186, 190, 193, 210, 217, 218, 219, 221, 228, 230, 231, 234, 235, 244, 248, 252, 254, 255, 260, 262, 263, 266, 271, 272, 273, 274, 276, 284, 285, 287, 298, 300, 301, 308, 310, 313, 315, 328, 330, 331, 335, 344, 345, 349, 364, 377, 382, 384, 386, 411, 414, 417, 418, 420, 421, 422, 424, 431, 437, 452, 478, 488, 489, 490, 491, 500, 505, 556, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 594, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 642, 646, 650, 658, 662, 804, 805, 807, 810, 811, 814, 821, 828, 884, 891, 919, 920, 921, 922, 923, 941, 955, 978, 981, 997, 1000, 1002, 1004, 1006, 1008, 1010, 1015, 1020, 1022, 1024, 1046, 1048, 1053, 1058], "left_h": 315, "left_impur": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "leftarrow": [414, 1012, 1022], "leftmost": 1012, "legaci": [376, 386, 396, 949, 950, 1039, 1046, 1051], "legarreta": [1050, 1052, 1053], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 96, 106, 107, 109, 111, 112, 113, 114, 117, 118, 120, 125, 127, 130, 131, 132, 137, 138, 139, 140, 141, 143, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 168, 174, 175, 179, 180, 181, 182, 183, 190, 191, 195, 197, 198, 200, 204, 205, 206, 207, 211, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 234, 235, 240, 245, 247, 248, 249, 250, 252, 255, 262, 269, 270, 272, 274, 275, 277, 278, 279, 280, 282, 285, 287, 288, 289, 290, 292, 298, 300, 301, 302, 307, 311, 316, 320, 325, 328, 331, 336, 344, 347, 349, 351, 356, 360, 361, 362, 363, 707, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "legend_el": [120, 154, 230, 278, 298, 349], "legend_handl": 302, "legend_lin": 48, "legend_titl": 223, "legitim": [269, 1005], "legitimate_accept": 269, "legitimate_refus": 269, "lego": 1027, "lehoucq": 419, "leibler": [54, 237, 419, 545, 547, 554, 699, 1005, 1046], "leibniz": 1008, "leig": 1045, "leightonzhang": 1045, "leinweb": [1047, 1048], "leisur": 43, "lejeun": 1046, "lekhwani": 1048, "leland": [1045, 1046, 1047, 1049, 1050, 1055], "lemaitr": [0, 403, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "lemir": 1050, "lemma": [37, 248, 374, 541, 548, 556, 903, 904, 905, 1002, 1034, 1042], "lemmat": 422, "lemmatoken": 422, "lemo": [1055, 1056], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 84, 85, 86, 90, 95, 96, 97, 98, 99, 100, 104, 106, 126, 132, 133, 135, 140, 143, 146, 147, 153, 164, 165, 170, 174, 182, 186, 191, 193, 216, 217, 235, 240, 244, 247, 248, 249, 251, 253, 254, 260, 262, 263, 270, 273, 275, 276, 283, 284, 286, 290, 294, 295, 302, 304, 305, 310, 316, 317, 318, 321, 330, 332, 334, 335, 338, 345, 351, 354, 356, 357, 358, 364, 394, 396, 421, 424, 432, 436, 438, 443, 451, 456, 462, 470, 514, 522, 557, 576, 577, 589, 604, 639, 640, 789, 807, 821, 833, 837, 839, 841, 842, 892, 906, 907, 1048, 1051], "lenail": [1047, 1051], "lend": 1032, "lene": 1055, "length": [2, 80, 104, 120, 121, 131, 133, 146, 172, 174, 175, 176, 179, 180, 182, 195, 201, 251, 252, 255, 258, 298, 326, 329, 342, 358, 375, 379, 382, 390, 391, 396, 415, 419, 421, 422, 424, 451, 496, 515, 516, 519, 522, 530, 558, 570, 588, 589, 596, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 639, 653, 654, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 688, 691, 788, 807, 810, 811, 821, 837, 839, 842, 843, 845, 853, 854, 855, 857, 859, 898, 924, 937, 939, 943, 961, 962, 978, 981, 1007, 1014, 1018, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1055], "length_scal": [174, 175, 178, 179, 180, 181, 183, 424, 619, 622, 625, 626, 628, 629, 630, 631], "length_scale_bound": [174, 180, 181, 183, 424, 618, 622, 626, 629, 630], "length_scale_grid": 180, "lengthi": [382, 394], "lenient": [885, 1028, 1056], "lenz": [1050, 1054], "leo": 1056, "leogrin": 1057, "leon": [683, 684, 685, 1039, 1057], "leonardo": 1052, "leonenko": [614, 615], "leonieborn": 1045, "leopoldo": 1052, "leq": [177, 419, 421, 1004, 1008, 1011, 1022, 1023, 1024], "lera": 1046, "leriqu": [1045, 1047], "lernen": 456, "lesne": 1053, "less": [43, 44, 47, 64, 87, 88, 95, 121, 123, 126, 133, 137, 144, 150, 151, 153, 174, 181, 190, 200, 202, 217, 219, 221, 250, 254, 261, 263, 269, 275, 276, 284, 286, 289, 290, 316, 319, 320, 321, 326, 328, 332, 349, 356, 357, 365, 369, 371, 377, 382, 384, 394, 396, 408, 414, 418, 419, 421, 422, 426, 445, 447, 449, 451, 454, 456, 458, 463, 466, 468, 469, 488, 489, 490, 503, 522, 538, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 597, 603, 626, 634, 641, 654, 668, 683, 685, 699, 708, 728, 729, 730, 731, 732, 743, 759, 771, 786, 787, 792, 802, 804, 805, 809, 810, 811, 817, 835, 846, 847, 848, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 874, 886, 888, 889, 891, 894, 900, 901, 911, 912, 919, 920, 921, 922, 943, 958, 997, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1011, 1013, 1018, 1022, 1023, 1024, 1027, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1053, 1054, 1056], "lessen": [223, 665, 666], "lesser": [310, 396, 448, 548, 1004], "let": [43, 44, 52, 88, 90, 99, 105, 109, 120, 123, 128, 144, 147, 150, 151, 153, 155, 174, 180, 181, 186, 190, 191, 192, 199, 206, 217, 219, 235, 237, 241, 251, 258, 269, 270, 275, 278, 282, 288, 289, 332, 356, 358, 364, 365, 377, 382, 384, 388, 394, 408, 411, 413, 414, 418, 421, 422, 451, 497, 507, 511, 517, 541, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 688, 691, 877, 884, 885, 1004, 1005, 1006, 1007, 1008, 1015, 1016, 1018, 1023, 1024, 1032, 1049, 1058], "letelli": 1045, "letter": [172, 182, 377, 379, 386, 422, 795, 796, 813, 830, 1008], "leu": 1053, "leung": 1050, "lev_metr": 394, "levarag": 331, "level": [43, 48, 50, 51, 64, 70, 76, 88, 123, 142, 146, 165, 172, 173, 174, 175, 178, 181, 183, 187, 190, 191, 228, 229, 230, 231, 232, 235, 244, 248, 249, 264, 269, 275, 278, 284, 285, 301, 308, 343, 344, 346, 347, 349, 352, 357, 364, 369, 377, 379, 382, 384, 388, 394, 396, 399, 400, 405, 412, 419, 422, 424, 428, 460, 474, 500, 501, 503, 510, 528, 538, 543, 544, 552, 553, 554, 568, 569, 574, 575, 618, 622, 629, 630, 632, 673, 674, 675, 683, 684, 685, 694, 697, 699, 701, 707, 709, 723, 730, 735, 792, 832, 833, 834, 836, 839, 840, 867, 868, 869, 909, 924, 997, 1004, 1008, 1009, 1011, 1016, 1022, 1024, 1027, 1028, 1029, 1042, 1050, 1053, 1054, 1055, 1058], "levelnam": 123, "leven": 394, "levenshtein": [332, 394], "levenshtein_dist": 332, "levequ": [849, 891], "leverag": [43, 47, 72, 84, 118, 235, 332, 356, 357, 369, 370, 380, 396, 418, 421, 886, 997, 1004, 1042, 1054, 1057], "levesqu": 1045, "levi": [541, 1046], "levinson": [1047, 1048], "levitski": [1054, 1055, 1056, 1058], "levitskii": 1052, "lewi": [377, 1046, 1050], "lex": [414, 458, 468], "lexicograph": [396, 574, 795, 801, 853, 861], "lexicon": 1018, "lexsort": 61, "lf": 390, "lfw": [2, 45, 377, 500, 501, 1039], "lfw_home": 377, "lfw_pairs_train": [377, 500], "lfw_peopl": [45, 377, 501], "lg2012": 421, "lgtm": 1046, "li": [0, 337, 377, 403, 404, 646, 649, 703, 733, 763, 904, 997, 1000, 1008, 1011, 1018, 1020, 1023, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "liabil": 235, "liac": [329, 376, 382, 503, 1054, 1055], "liam": [1047, 1048], "liang": [1045, 1050, 1051, 1056, 1057], "liau": 1042, "lib": [370, 380, 400, 1027], "liberti": 266, "libisel": 1057, "liblinear": [210, 343, 388, 665, 666, 795, 911, 912, 913, 916, 917, 1004, 1008, 1023, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1055], "libomp": [380, 1051], "librari": [45, 269, 275, 327, 329, 362, 365, 374, 376, 377, 380, 381, 382, 383, 388, 390, 394, 395, 396, 400, 408, 410, 470, 665, 911, 912, 913, 914, 916, 917, 1004, 1008, 1023, 1024, 1027, 1028, 1032, 1037, 1042, 1046, 1047, 1048, 1049, 1050, 1052, 1056], "libsvm": [2, 195, 343, 375, 388, 493, 515, 570, 911, 912, 913, 914, 915, 916, 917, 1023, 1034, 1039, 1041, 1047, 1050, 1053], "libsvmtool": [195, 376, 493, 515, 516], "licenc": 376, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 376, 394, 396, 1024, 1032], "lichman": 379, "liddel": 1047, "lidston": [846, 847, 848, 850, 1010], "lie": [52, 95, 117, 171, 190, 249, 315, 336, 343, 345, 419, 421, 613, 859, 861, 862, 863, 911, 912, 1002, 1005, 1008, 1018, 1023], "lieg": 421, "lieret": 1054, "lieu": [1045, 1046], "life": [52, 153, 268, 332, 390, 1005], "lifecycl": [1027, 1028], "lifo": 926, "lift": 400, "light": [140, 377], "lighter": [369, 707, 709, 789, 796, 1055], "lightfm": 1027, "lightgbm": [153, 421, 568, 569, 1027, 1048, 1055], "lightgreen": [160, 223, 234], "lightgrei": 49, "lightweight": [383, 807, 821, 832, 833], "ligo": 1046, "lihaitao": 1057, "lik_max": 111, "lik_min": 111, "like": [0, 2, 43, 51, 52, 87, 90, 93, 95, 104, 121, 126, 130, 132, 135, 137, 139, 144, 150, 153, 154, 174, 180, 190, 198, 217, 251, 266, 269, 275, 278, 279, 282, 283, 290, 304, 313, 315, 320, 321, 324, 337, 345, 349, 356, 357, 365, 369, 371, 374, 376, 377, 381, 382, 384, 386, 389, 390, 391, 394, 395, 396, 405, 408, 410, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 522, 526, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 586, 588, 589, 590, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 933, 935, 942, 943, 957, 961, 970, 971, 978, 979, 980, 992, 994, 996, 997, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1023, 1024, 1028, 1032, 1036, 1039, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "likelihood": [2, 69, 92, 110, 112, 113, 114, 115, 130, 152, 174, 175, 176, 178, 179, 180, 181, 183, 187, 204, 235, 264, 267, 275, 281, 306, 313, 315, 384, 396, 412, 416, 419, 421, 424, 443, 475, 476, 477, 478, 479, 480, 481, 482, 483, 522, 539, 543, 548, 556, 557, 558, 617, 618, 638, 652, 665, 719, 748, 804, 805, 807, 834, 837, 856, 867, 887, 899, 913, 914, 916, 917, 1004, 1007, 1010, 1018, 1023, 1029, 1042, 1043, 1048, 1054], "likewis": [252, 414, 530], "lil": [396, 560, 561, 878, 933, 961, 1011], "lil_matrix": 55, "lili": [1047, 1048], "lilian": [1044, 1045, 1056], "lim": [177, 541], "lima": [1052, 1053], "limit": [43, 47, 55, 64, 72, 77, 92, 101, 115, 137, 144, 145, 151, 158, 185, 190, 191, 192, 197, 217, 218, 234, 248, 282, 317, 321, 327, 352, 358, 365, 370, 383, 384, 387, 394, 396, 397, 412, 413, 414, 417, 419, 423, 452, 469, 474, 566, 567, 568, 569, 639, 657, 686, 689, 690, 695, 785, 828, 859, 861, 862, 863, 884, 885, 909, 913, 914, 915, 916, 917, 997, 1004, 1005, 1007, 1008, 1015, 1016, 1018, 1028, 1034, 1047, 1049, 1052, 1053, 1056, 1058], "limits_": 1011, "lin": [0, 541, 665, 1023, 1044, 1045, 1046, 1047], "lin_clf": 1023, "linalg": [70, 89, 111, 112, 115, 130, 132, 203, 260, 261, 262, 265, 266, 331, 382, 388, 419, 457, 458, 459, 468, 528, 539, 542, 548, 551, 664, 679, 681, 694, 698, 702, 953], "linalgerror": 1049, "linalgwarn": 1058, "lincoln": 377, "lindenbaum": 541, "lindenstrauss": [37, 90, 187, 243, 374, 495, 509, 903, 904, 905, 1025, 1029, 1034], "lindgren": 1057, "lindquist": 1054, "line": [48, 50, 52, 55, 75, 78, 95, 104, 113, 123, 128, 137, 143, 149, 173, 185, 186, 187, 190, 191, 204, 206, 207, 209, 212, 213, 215, 218, 220, 225, 226, 228, 229, 231, 244, 248, 249, 252, 254, 272, 279, 281, 282, 288, 301, 305, 308, 316, 326, 344, 347, 349, 350, 353, 354, 356, 376, 377, 380, 382, 383, 384, 386, 387, 388, 389, 390, 394, 419, 420, 421, 444, 493, 494, 495, 515, 516, 549, 560, 561, 562, 563, 617, 620, 621, 639, 677, 693, 707, 708, 709, 813, 830, 1002, 1008, 1012, 1015, 1022, 1027, 1029, 1031, 1041, 1050, 1052, 1055, 1056], "line0": [51, 240], "line1": [46, 51, 240], "line2": [46, 51, 240, 353], "line2d": [48, 113, 231, 301, 344, 347, 813, 830], "line_": [389, 444, 705, 707, 708, 709, 813, 830], "line_bin": 316, "line_fig": 143, "line_i": 220, "line_kw": [153, 155, 255, 277, 325, 331, 639, 813, 830], "line_kwarg": [158, 708], "line_profil": 388, "line_trac": 143, "line_x": [220, 234], "line_y_ransac": 220, "linea": 402, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 87, 92, 108, 109, 111, 112, 113, 114, 115, 118, 120, 123, 128, 131, 140, 142, 156, 158, 161, 163, 165, 167, 172, 178, 180, 185, 186, 188, 189, 191, 195, 198, 200, 202, 203, 204, 206, 207, 212, 214, 215, 218, 219, 221, 222, 225, 229, 231, 233, 234, 235, 236, 239, 241, 247, 248, 250, 252, 253, 256, 265, 268, 271, 272, 273, 275, 278, 280, 281, 282, 283, 284, 285, 288, 290, 300, 301, 303, 304, 305, 313, 315, 316, 317, 320, 322, 326, 327, 340, 342, 345, 346, 347, 350, 352, 353, 356, 362, 363, 370, 374, 378, 379, 380, 384, 385, 387, 396, 399, 402, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 448, 450, 461, 471, 473, 481, 488, 489, 490, 503, 508, 509, 519, 522, 528, 531, 539, 540, 541, 542, 543, 546, 548, 550, 551, 555, 556, 557, 561, 573, 589, 596, 600, 601, 613, 616, 621, 627, 638, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 695, 696, 697, 698, 699, 700, 708, 714, 723, 726, 757, 760, 772, 774, 781, 792, 807, 818, 822, 834, 837, 851, 852, 856, 860, 867, 868, 869, 872, 876, 877, 878, 881, 884, 886, 888, 889, 890, 891, 900, 904, 911, 912, 913, 914, 915, 916, 917, 997, 999, 1000, 1001, 1003, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1022, 1023, 1029, 1030, 1032, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "linear_baselin": 326, "linear_kernel": [2, 410, 768, 772, 1006, 1047, 1058], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 89, 105, 107, 109, 118, 142, 158, 160, 161, 163, 164, 170, 171, 172, 174, 185, 187, 189, 190, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 244, 245, 246, 247, 251, 253, 256, 258, 269, 271, 278, 283, 284, 288, 289, 290, 294, 313, 316, 317, 320, 322, 324, 325, 326, 327, 328, 330, 331, 332, 338, 356, 365, 369, 371, 381, 382, 384, 388, 390, 391, 395, 396, 405, 410, 413, 415, 421, 434, 439, 444, 471, 544, 546, 549, 550, 552, 553, 555, 574, 575, 576, 577, 604, 638, 639, 641, 642, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 707, 708, 795, 806, 821, 830, 832, 833, 834, 836, 838, 842, 843, 844, 845, 869, 886, 890, 911, 912, 915, 918, 947, 949, 950, 951, 991, 1000, 1004, 1008, 1009, 1014, 1016, 1018, 1022, 1029, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "linear_model_preprocessor": 217, "linear_pca": 415, "linear_preprocessor": 158, "linear_regress": [219, 290], "linear_sum_assign": [411, 726], "linear_svc": 1023, "linear_svm": 249, "linear_svm_scor": 249, "linear_svm_tim": 249, "lineardiscriminantanalysi": [2, 69, 70, 131, 238, 304, 365, 410, 543, 557, 860, 1002, 1009, 1011, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1053, 1054, 1055], "linearli": [67, 128, 139, 172, 190, 197, 231, 238, 244, 284, 285, 317, 320, 349, 356, 369, 379, 394, 419, 421, 522, 560, 649, 714, 880, 881, 1008, 1011, 1014, 1023, 1046, 1055], "linearly_separ": [67, 310], "linearmodel": 1052, "linearoper": [331, 694], "linearregress": [2, 118, 161, 189, 197, 207, 212, 213, 214, 215, 220, 223, 234, 247, 251, 253, 271, 290, 316, 365, 382, 394, 395, 415, 421, 471, 577, 639, 642, 653, 656, 659, 661, 678, 679, 694, 1004, 1008, 1009, 1018, 1043, 1044, 1048, 1051, 1052, 1053, 1055], "linearregressionifittedlinearregress": 247, "linearregressionlinearregress": 161, "linearsvc": [2, 62, 64, 104, 106, 168, 169, 187, 195, 249, 272, 274, 282, 317, 324, 340, 342, 346, 347, 352, 356, 369, 384, 388, 412, 422, 423, 443, 519, 574, 584, 638, 646, 650, 659, 679, 680, 681, 682, 683, 694, 742, 749, 834, 839, 912, 913, 916, 918, 1004, 1008, 1009, 1023, 1029, 1039, 1040, 1041, 1045, 1047, 1050, 1055], "linearsvc__c": 317, "linearsvclinearsvc": [106, 169, 282], "linearsvr": [2, 575, 917, 1023, 1043, 1045, 1050, 1055], "linecollect": [51, 240, 247, 639], "linen": [51, 240], "lineno": 388, "lineplot": [153, 275], "liner": [384, 837], "lines_": [389, 639, 813, 830], "linestyl": [49, 50, 69, 95, 107, 113, 130, 132, 137, 149, 160, 163, 165, 174, 177, 179, 181, 183, 192, 193, 204, 205, 206, 217, 218, 219, 223, 227, 229, 230, 235, 252, 254, 269, 272, 274, 278, 279, 284, 288, 289, 300, 308, 311, 316, 343, 346, 347, 349, 350, 352], "linewidth": [61, 69, 70, 72, 75, 93, 107, 111, 118, 121, 125, 138, 150, 153, 155, 174, 178, 182, 206, 207, 211, 212, 213, 215, 218, 220, 223, 231, 234, 244, 252, 254, 284, 288, 301, 305, 316, 325, 331, 343, 344, 346, 362], "linger": 219, "linguist": [723, 908, 1021], "lingyi1110": 1054, "link": [51, 55, 137, 190, 191, 197, 217, 221, 235, 260, 269, 278, 305, 360, 370, 376, 381, 382, 383, 384, 386, 390, 396, 412, 414, 416, 419, 421, 424, 568, 569, 617, 655, 676, 687, 695, 712, 936, 938, 1004, 1011, 1024, 1025, 1027, 1031, 1037, 1039, 1042, 1043, 1046, 1047, 1050, 1056], "link_thickness_i": 305, "linkag": [71, 74, 75, 76, 79, 82, 87, 90, 91, 92, 102, 187, 193, 446, 447, 451, 452, 469, 519, 521, 529, 891, 1027, 1029, 1042, 1047, 1050], "linkage_matrix": 76, "linkage_tre": 1043, "linkedin": 386, "linker": 383, "linnerrud": [375, 1034], "linnerud": [2, 379, 512], "linprog": [677, 1004], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 84, 90, 113, 114, 124, 132, 138, 150, 174, 175, 177, 178, 179, 180, 181, 183, 191, 197, 198, 200, 202, 207, 211, 217, 218, 219, 223, 227, 228, 229, 230, 231, 235, 242, 244, 247, 248, 250, 252, 264, 275, 277, 278, 282, 283, 284, 285, 290, 300, 301, 307, 308, 316, 318, 328, 329, 344, 345, 348, 349, 350, 352, 353, 354, 638, 639, 813, 835, 851, 852], "lint": [382, 390], "linter": 586, "linthresh": [197, 202], "linu": [1055, 1056, 1057], "linux": [382, 384, 385, 390, 1027, 1039], "lipoprotein": [172, 379], "lippert": 1004, "lippmann": 377, "lipschitz": [37, 1020], "lisa": [1047, 1048, 1050, 1051, 1053, 1054], "lise": 1053, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 84, 97, 104, 132, 133, 141, 143, 149, 158, 193, 221, 254, 255, 270, 273, 275, 276, 278, 279, 284, 304, 317, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 348, 357, 358, 371, 376, 377, 380, 381, 382, 384, 385, 387, 388, 389, 390, 391, 394, 395, 396, 397, 400, 401, 405, 412, 414, 415, 418, 420, 421, 422, 437, 439, 443, 456, 462, 463, 470, 471, 472, 473, 477, 478, 484, 488, 489, 490, 494, 495, 496, 497, 499, 500, 503, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 521, 522, 523, 524, 525, 526, 527, 530, 539, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 598, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 639, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 688, 691, 693, 694, 699, 703, 704, 706, 717, 718, 719, 720, 723, 725, 732, 740, 749, 753, 761, 785, 788, 790, 795, 801, 804, 805, 807, 810, 811, 813, 818, 819, 821, 830, 832, 833, 834, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 875, 879, 882, 884, 885, 890, 892, 908, 912, 914, 917, 919, 920, 921, 922, 925, 932, 933, 937, 938, 939, 943, 946, 947, 948, 950, 958, 959, 962, 973, 978, 981, 991, 997, 998, 1004, 1008, 1010, 1011, 1012, 1015, 1016, 1019, 1024, 1027, 1028, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "list_param": 382, "listedcolormap": [67, 70, 146, 303, 306, 310, 317], "listen": 356, "listinfo": 390, "lite": 1039, "liter": [382, 1032], "literatur": [83, 179, 275, 292, 357, 379, 382, 388, 390, 394, 395, 414, 417, 419, 421, 449, 453, 455, 508, 543, 545, 547, 554, 562, 563, 595, 598, 715, 804, 997, 1000, 1004, 1008, 1049], "litsidi": [1054, 1055], "littl": [190, 191, 192, 193, 244, 377, 422, 468, 651, 807, 821, 955, 998, 1005, 1007, 1023, 1024, 1040, 1051, 1056], "lituiev": 1052, "liu": [0, 372, 393, 403, 570, 733, 763, 1008, 1014, 1042, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "liutong": 1047, "live": [50, 104, 190, 269, 308, 377, 382, 414, 505, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 1031], "livesei": 356, "livni": [414, 448], "lizao": 1047, "lizsz": 1045, "lj2017": 414, "lk": 1042, "lkjcalc": 1047, "lkubin": 1050, "ll": [50, 90, 145, 270, 288, 308, 382, 394, 539, 548, 1000, 1011, 1024], "llcrnrlat": [50, 308], "llcrnrlon": [50, 308], "lle": [237, 238, 239, 241, 537, 696, 700, 1005, 1051], "lle_hessian": 237, "lle_ltsa": 237, "lle_method": 237, "lle_mod": 237, "lle_standard": 237, "lloyd": [414, 449, 453, 455, 465, 1053, 1054], "llvm": 380, "lm": 199, "lmbda": 319, "lmbda_bc": 319, "lmbda_yj": 319, "lml": [175, 176, 180, 424], "ln": [386, 1004, 1012, 1018], "loa": [173, 181, 187, 424, 503, 618, 622, 629, 630, 632, 1029], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 81, 83, 88, 105, 106, 123, 133, 142, 144, 146, 148, 154, 155, 158, 159, 161, 169, 170, 179, 190, 191, 195, 199, 213, 214, 217, 225, 233, 246, 247, 251, 253, 254, 255, 256, 258, 265, 269, 271, 273, 275, 280, 282, 287, 289, 292, 295, 299, 304, 311, 312, 313, 325, 326, 328, 329, 331, 336, 337, 338, 361, 364, 369, 374, 377, 379, 385, 388, 395, 408, 417, 418, 419, 421, 488, 489, 490, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 539, 541, 550, 851, 852, 955, 1018, 1028, 1034, 1039, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "load_ames_h": 158, "load_boston": [1045, 1047, 1052], "load_breast_canc": [2, 172, 193, 337, 360, 387, 599, 602, 603, 605, 681, 682, 795, 1008, 1044, 1045, 1050], "load_cont": 510, "load_dataset": 356, "load_diabet": [2, 46, 151, 161, 163, 172, 186, 204, 205, 206, 213, 214, 255, 271, 329, 421, 565, 569, 575, 680, 708, 832, 833, 834, 920, 922, 1016, 1045, 1050, 1053], "load_digit": [2, 68, 86, 87, 93, 106, 107, 164, 170, 208, 224, 238, 248, 249, 273, 274, 277, 283, 297, 299, 304, 311, 313, 330, 334, 335, 388, 415, 426, 451, 452, 539, 540, 541, 542, 606, 607, 645, 646, 675, 695, 696, 697, 698, 700, 702, 1045, 1050], "load_fil": [2, 376, 377, 1041, 1053], "load_iri": [2, 66, 76, 80, 108, 120, 127, 129, 131, 133, 146, 159, 165, 168, 176, 201, 210, 226, 258, 262, 268, 280, 281, 282, 284, 285, 298, 303, 306, 311, 324, 326, 329, 339, 341, 342, 345, 348, 361, 364, 395, 408, 414, 415, 418, 421, 423, 434, 568, 574, 608, 609, 617, 626, 627, 629, 630, 638, 665, 666, 718, 795, 807, 810, 811, 813, 821, 839, 860, 906, 907, 908, 919, 921, 923, 924, 925, 998, 1003, 1008, 1009, 1010, 1011, 1015, 1018, 1024, 1045, 1047, 1050], "load_lfw_pair": 1044, "load_linnerud": [2, 844, 1045, 1050], "load_mnist": [225, 295], "load_mtpl2": 235, "load_sample_imag": [2, 83, 590, 591, 594, 1048], "load_svmlight_fil": [2, 376, 1039, 1040, 1045, 1046, 1047, 1054], "load_win": [2, 48, 257, 320, 855, 863, 1036, 1050], "loader": [2, 276, 338, 356, 375, 376, 377, 505, 506, 515, 1028, 1039, 1044, 1046, 1047, 1050], "loan": [421, 541, 1004, 1032], "loayza": 1053, "lobpcg": [81, 458, 468, 695, 698, 702, 1049, 1052, 1053, 1054], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 106, 109, 112, 113, 114, 117, 120, 125, 127, 130, 131, 132, 137, 139, 140, 141, 149, 150, 151, 152, 153, 155, 158, 160, 161, 168, 174, 175, 181, 183, 190, 191, 200, 205, 207, 211, 217, 218, 219, 220, 223, 224, 227, 230, 231, 234, 235, 240, 247, 248, 249, 250, 252, 254, 262, 263, 270, 273, 274, 275, 278, 279, 282, 285, 288, 289, 290, 298, 300, 301, 311, 316, 319, 320, 325, 328, 331, 336, 344, 347, 349, 351, 352, 356, 361, 363, 821, 888, 900], "loc_a": 319, "loc_b": 319, "local": [2, 43, 48, 51, 58, 74, 87, 92, 96, 123, 126, 142, 143, 155, 172, 179, 180, 187, 191, 218, 231, 236, 239, 241, 244, 248, 254, 296, 305, 344, 362, 363, 370, 379, 380, 382, 386, 388, 390, 400, 414, 419, 421, 422, 424, 453, 458, 468, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 509, 545, 547, 551, 554, 556, 566, 567, 570, 573, 617, 618, 695, 696, 697, 698, 699, 700, 702, 703, 765, 766, 854, 857, 860, 862, 872, 881, 904, 907, 915, 973, 1006, 1007, 1011, 1012, 1024, 1029, 1031, 1033, 1034, 1043, 1047, 1051, 1054, 1057, 1058], "local_filenam": 498, "localcach": 400, "locally_linear_embed": [2, 241, 1005, 1058], "locallylinearembed": [2, 51, 237, 238, 239, 328, 695, 697, 699, 1005, 1011, 1044, 1045, 1053, 1054, 1055, 1058], "localoutlierfactor": [2, 244, 254, 301, 302, 328, 396, 570, 915, 1014, 1046, 1047, 1049, 1053, 1054, 1055, 1056, 1058], "localoutlierfactor__n_neighbor": 254, "locat": [48, 62, 88, 89, 106, 113, 114, 211, 308, 326, 345, 375, 377, 380, 382, 386, 387, 390, 391, 400, 401, 414, 416, 420, 454, 466, 467, 475, 476, 477, 478, 479, 480, 481, 482, 494, 507, 508, 511, 512, 519, 522, 992, 998, 1004, 1009, 1014, 1018, 1024, 1047], "location_": [113, 114, 475, 476, 477, 478, 479, 480, 481, 482], "location_reweight": [475, 480], "lock": [385, 400, 407, 408, 973, 1057], "loev": 541, "lof": [2, 48, 187, 231, 244, 254, 296, 344, 570, 857, 915, 1014, 1029], "lof_kw": 254, "lofti": [1049, 1050], "log": [2, 43, 58, 62, 63, 64, 111, 123, 137, 148, 150, 158, 168, 172, 175, 176, 178, 179, 180, 183, 204, 206, 210, 217, 222, 227, 235, 248, 250, 264, 269, 305, 320, 356, 377, 379, 380, 382, 390, 391, 396, 411, 412, 414, 415, 416, 419, 421, 422, 424, 454, 457, 466, 471, 476, 477, 478, 479, 480, 481, 482, 539, 543, 548, 556, 557, 558, 560, 562, 564, 566, 569, 571, 597, 598, 600, 601, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 649, 652, 655, 665, 666, 676, 678, 683, 687, 729, 748, 762, 804, 805, 807, 810, 811, 821, 846, 847, 848, 849, 850, 851, 852, 856, 867, 868, 875, 876, 905, 908, 913, 916, 918, 919, 921, 953, 997, 1000, 1002, 1004, 1005, 1010, 1011, 1013, 1016, 1018, 1022, 1024, 1027, 1028, 1041, 1042, 1043, 1048, 1049, 1050, 1053, 1056, 1057, 1058], "log10": [168, 180, 190, 210, 276, 345], "log1p": [109, 247, 875, 1008, 1018], "log2": [141, 227, 256, 564, 565, 566, 567, 571, 572, 919, 920, 921, 922, 1009], "log_": 1008, "log_2": [411, 570, 1014], "log_bas": 733, "log_den": 300, "log_dens": 856, "log_likelihood": [111, 617, 618, 804, 805], "log_likelihood_gradi": [617, 618], "log_logist": 1056, "log_loss": [2, 62, 63, 149, 152, 175, 320, 338, 356, 396, 412, 421, 564, 566, 568, 571, 653, 665, 683, 919, 921, 997, 1004, 1008, 1022, 1024, 1041, 1043, 1045, 1053, 1054, 1055, 1056], "log_marginal_likelihood": [175, 176, 178, 180, 183, 424, 617, 618, 1049], "log_marginal_likelihood_value_": [617, 618], "log_prob": [804, 805, 806, 829], "log_reg": [258, 328], "log_reg_input_featur": 328, "log_scal": 1055, "log_scale_transform": [217, 235], "log_scaled_numer": [217, 235], "log_y_prob": 868, "logaddexp": 1056, "logan": [1053, 1054, 1055], "logarithm": [2, 109, 158, 190, 221, 248, 276, 345, 396, 423, 466, 597, 665, 666, 683, 711, 733, 748, 758, 762, 763, 764, 798, 806, 829, 842, 851, 852, 953, 1024, 1046], "logcosh": [426, 540], "logdet": 953, "logged_in": 377, "logger": 1050, "logic": [135, 370, 383, 384, 389, 410, 421, 1024, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "logical_and": [53, 150], "logical_not": [57, 99, 132, 220], "logical_or": [219, 225, 284, 388], "logical_xor": [53, 178, 349], "loginov": 1045, "logist": [2, 62, 64, 66, 103, 105, 109, 120, 133, 142, 164, 170, 187, 196, 205, 212, 214, 215, 221, 223, 226, 228, 234, 245, 247, 258, 269, 283, 286, 288, 289, 294, 306, 312, 313, 320, 328, 341, 342, 352, 353, 356, 396, 397, 412, 415, 421, 423, 424, 443, 495, 503, 509, 511, 519, 548, 566, 568, 617, 638, 653, 664, 665, 666, 673, 675, 683, 748, 807, 821, 837, 840, 867, 868, 869, 871, 891, 918, 940, 942, 1008, 1012, 1013, 1022, 1023, 1029, 1030, 1032, 1034, 1043, 1046, 1047, 1049, 1050], "logistic__c": 107, "logistic_regress": [269, 830, 838], "logistic_regression_path": [1047, 1048], "logisticregress": [2, 62, 66, 105, 107, 142, 160, 164, 170, 171, 172, 201, 207, 208, 209, 210, 224, 232, 233, 245, 246, 256, 258, 269, 278, 284, 289, 313, 317, 324, 325, 326, 327, 328, 330, 332, 356, 369, 382, 384, 388, 390, 395, 405, 412, 413, 415, 421, 423, 434, 439, 444, 574, 576, 604, 638, 641, 650, 659, 666, 679, 680, 681, 682, 683, 694, 707, 795, 806, 821, 830, 836, 838, 842, 843, 845, 896, 897, 899, 900, 901, 902, 918, 949, 950, 951, 991, 1004, 1008, 1009, 1018, 1022, 1023, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "logisticregression__c": [269, 317], "logisticregressioncv": [2, 64, 320, 396, 405, 665, 1004, 1009, 1043, 1044, 1045, 1047, 1048, 1049, 1053, 1054, 1056, 1057, 1058], "logisticregressionifittedlogisticregress": 313, "logisticregressionlogisticregress": [105, 142, 245, 246, 256, 258, 269, 289, 325, 328], "logit": [2, 412, 424, 665, 666, 1004], "loglik_lw": 111, "loglik_oa": 111, "loglik_r": 111, "loglike_": 539, "loglog": [111, 248], "logloss": 1050, "lognorm": [150, 180, 199, 264, 319, 1018], "logo": [0, 418, 814], "logprob": 856, "logreg": [201, 845], "logspac": [43, 51, 64, 107, 111, 130, 163, 172, 175, 180, 190, 210, 221, 222, 248, 250, 264, 269, 276, 288, 299, 310, 317, 320, 345, 352, 830, 838, 1003, 1004], "logsumexp": [305, 1046], "loguniform": [45, 174, 283, 997, 1049], "logx": [221, 352], "lohit": 1056, "loic": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "loki": [370, 1008, 1047, 1050], "lomp": 380, "lon": 771, "london": [415, 422, 472], "londschien": [1052, 1056], "lone": [1054, 1055], "long": [0, 30, 43, 50, 51, 79, 97, 150, 179, 186, 190, 192, 217, 251, 252, 254, 278, 308, 315, 325, 356, 357, 365, 370, 380, 382, 390, 394, 396, 397, 408, 414, 459, 505, 545, 683, 684, 685, 810, 811, 846, 847, 848, 849, 850, 868, 869, 879, 1008, 1014, 1018, 1019, 1021, 1022, 1026, 1041, 1045, 1051, 1053], "long_term_trend_kernel": 179, "long_titl": 349, "longer": [0, 43, 70, 88, 140, 190, 191, 205, 312, 327, 382, 384, 414, 418, 421, 422, 455, 543, 570, 1003, 1007, 1008, 1010, 1013, 1023, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "longest": 295, "longitud": [308, 315, 377, 505, 706, 771], "longpathsen": 400, "longstand": [1040, 1046], "loo": [396, 815, 1050], "look": [43, 44, 64, 88, 90, 123, 126, 128, 150, 151, 174, 179, 180, 186, 190, 191, 219, 237, 241, 244, 251, 266, 269, 270, 275, 277, 289, 312, 331, 356, 357, 365, 370, 371, 376, 377, 382, 383, 384, 386, 388, 390, 394, 395, 414, 417, 419, 420, 421, 422, 454, 494, 495, 564, 565, 566, 567, 571, 572, 609, 610, 638, 666, 699, 891, 919, 920, 921, 922, 1004, 1005, 1018, 1022, 1023, 1025, 1039, 1047, 1049], "lookup": [391, 972, 1048], "loop": [46, 47, 140, 150, 190, 270, 280, 356, 364, 369, 382, 383, 388, 414, 418, 423, 653, 654, 659, 660, 666, 667, 668, 669, 670, 997, 1021, 1022, 1042, 1043, 1046, 1051, 1052, 1055, 1056], "loopym": 1049, "loos": [266, 272, 1023, 1047], "looser": 210, "lopusz": 1050, "lorain": 329, "lorek": 1046, "lorentzen": [0, 403, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "lorenz": [217, 235, 1044, 1056], "lorenz_curv": [217, 235], "lose": [221, 234, 358, 377, 396, 417, 422, 424, 954, 955, 998, 1004], "losi": [0, 404, 1039], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 132, 143, 149, 150, 151, 152, 174, 175, 187, 196, 200, 207, 210, 219, 221, 222, 224, 225, 229, 235, 250, 269, 283, 311, 312, 320, 327, 331, 332, 338, 342, 343, 347, 349, 352, 356, 394, 396, 412, 419, 424, 470, 471, 503, 515, 516, 539, 545, 546, 547, 550, 554, 559, 560, 561, 565, 566, 567, 568, 569, 572, 650, 653, 656, 665, 666, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 710, 713, 716, 729, 730, 741, 742, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 797, 798, 803, 807, 810, 811, 821, 833, 834, 837, 868, 869, 871, 872, 875, 876, 884, 885, 886, 891, 911, 912, 917, 918, 920, 922, 955, 959, 1001, 1004, 1012, 1016, 1021, 1022, 1023, 1024, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "loss_": [311, 868, 869, 1012, 1053], "loss_curve_": [311, 868, 869], "loss_func": 52, "loss_funct": 52, "loss_function_": 1056, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1048, "lossi": 414, "lossili": 396, "lost": [58, 92, 115, 377, 383, 394, 408, 1005, 1008], "lostanlen": 1049, "lostcoast": 1049, "lot": [43, 115, 153, 190, 221, 377, 382, 383, 384, 390, 419, 421, 810, 811, 903, 904, 997, 1020, 1022, 1023, 1027, 1028, 1032, 1039, 1044, 1046, 1047, 1048, 1049, 1051], "lot_area": 254, "lotan": 1032, "lotconfig": 147, "lotfrontag": 109, "loui": [329, 1044, 1045, 1049, 1051, 1053, 1055, 1056], "louib": [1047, 1048], "loupp": [0, 404, 421, 562, 563, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lourida": 1045, "low": [2, 37, 43, 50, 51, 72, 85, 114, 118, 125, 127, 130, 137, 140, 154, 172, 192, 210, 212, 217, 219, 221, 231, 237, 239, 244, 248, 254, 260, 261, 263, 266, 268, 269, 275, 277, 281, 282, 301, 302, 312, 319, 321, 322, 330, 337, 344, 345, 356, 364, 378, 379, 382, 387, 390, 394, 396, 400, 411, 412, 413, 418, 419, 422, 448, 450, 455, 474, 528, 531, 542, 589, 596, 610, 686, 699, 703, 712, 733, 749, 796, 856, 885, 892, 909, 955, 972, 997, 1003, 1004, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1018, 1020, 1023, 1024, 1030, 1034, 1040, 1043, 1044, 1045, 1047, 1048, 1053, 1054], "low_cardin": 321, "low_cardinality_featur": 321, "low_cardinalityindex": 321, "low_i": 212, "low_x": 212, "lower": [37, 44, 52, 63, 64, 67, 69, 93, 112, 118, 120, 123, 125, 130, 137, 140, 143, 146, 150, 153, 154, 170, 174, 176, 178, 180, 182, 190, 191, 192, 202, 203, 205, 207, 217, 218, 219, 220, 230, 237, 241, 247, 248, 253, 262, 266, 269, 274, 275, 277, 278, 282, 283, 285, 288, 289, 298, 299, 301, 302, 317, 320, 328, 332, 337, 345, 356, 357, 358, 361, 377, 382, 396, 412, 413, 414, 417, 418, 419, 420, 421, 422, 425, 450, 454, 470, 473, 505, 516, 539, 541, 548, 551, 566, 567, 568, 569, 570, 595, 596, 598, 610, 618, 620, 621, 622, 624, 626, 627, 629, 630, 632, 639, 640, 642, 644, 684, 686, 719, 723, 732, 735, 741, 746, 804, 805, 857, 859, 861, 862, 863, 865, 892, 911, 912, 913, 914, 915, 918, 941, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1041, 1042, 1047, 1054, 1056], "lower_bound": 274, "lower_bound_": [804, 805, 1047], "lowercas": [422, 430, 448, 449, 451, 453, 455, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 595, 596, 598, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 872, 877, 903, 904, 1052], "lowest": [2, 109, 118, 191, 202, 265, 376, 414, 418, 642, 644, 810, 811, 814, 918, 919, 1005, 1008, 1024, 1054], "loyal": 1044, "loyola": [0, 372, 1052, 1053], "lo\u00efc": [0, 403, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "lp_model": [334, 335], "lpgo": [418, 816], "lpo": 817, "lprun": 388, "lr": [62, 64, 142, 160, 161, 220, 246, 247, 271, 278, 395, 405, 421, 575, 576, 577, 719, 991], "lr_": 1008, "lr__c": 421, "lr_base": 278, "lrap": [746, 1008], "lrjball": [1049, 1050], "lrlinearregress": 161, "ls100": 339, "ls2010": 1000, "ls30": 339, "ls50": 339, "ls_pipelin": 338, "lsa": [2, 419, 551, 1041], "lsa_vector": 357, "lshforest": [1043, 1046], "lsi": 419, "lsqr": [69, 322, 556, 679, 681, 694, 1002, 1040, 1046, 1053], "lstrip": [67, 79, 97, 244, 310, 317], "lstsq": [132, 382, 664, 677], "lsturtew": 1052, "lsvc": 423, "lsvm": 195, "lsvm_score": 195, "lsvm_time": 195, "lt": [105, 106, 142, 158, 190, 265, 273, 287, 382, 402], "ltd": [269, 377], "ltg": [172, 379, 508], "ltorgo": 377, "ltsa": [237, 238, 239, 696, 700, 1005, 1058], "lu": [548, 551, 954, 955, 1045, 1046, 1047, 1048, 1055, 1056, 1057], "luangkot": 1046, "luca": [1039, 1049, 1050, 1051, 1052], "lucca": 1052, "luce": 1042, "lucen": 422, "lucgiffon": 1050, "luci": [0, 372, 393, 403, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "luciano": [1047, 1054], "lucieclair": 1053, "lucija": 1047, "lucio": 1048, "lucki": 365, "lucyleeow": 1050, "ludwig": 1039, "luessi": 1041, "lui": [665, 1040, 1042, 1043, 1047, 1056], "luiz": 1053, "luk": 1048, "luka": [1043, 1050, 1056, 1057], "luke": 1047, "lukowski": 1054, "luk\u00e1\u0161": 1056, "luna": 1053, "lunt": 1042, "luo": 1043, "lupo": 1051, "luqi": 1048, "luqu": 1049, "lurk": 1039, "lustig": 1004, "lutz": [1045, 1049, 1052, 1056], "luxburg": [414, 458, 468, 698], "luzgin": 1049, "lv_ep": 249, "lvdmaaten": [699, 1046], "lw": [95, 111, 112, 114, 127, 131, 132, 211, 218, 220, 223, 227, 234, 240, 263, 270, 285, 300, 315, 336, 351], "lw_cov_": 115, "lw_mse": 112, "lw_prec_": 115, "lw_score": 130, "lw_shrinkag": 112, "lwda": 456, "lx": 1011, "ly": [249, 859, 861, 862, 863, 1043], "ly648499246": 1052, "lynch": [1040, 1046], "lyon": [1045, 1046], "lyra": [1040, 1043, 1044], "lyrl2004": [377, 504], "l\u00e9o": 1047, "l\u00e9on": [1022, 1053, 1054, 1055], "l\u00e9onard": [1049, 1054], "l\u00e9one": 1045, "l\u00e9oni": 1045, "l\u00f3pez": [1043, 1047, 1048, 1051], "l\u00f6fstedt": 1046, "l\u00f6ning": 1051, "m": [0, 43, 47, 50, 57, 63, 64, 79, 93, 94, 98, 99, 100, 113, 114, 123, 137, 161, 200, 217, 235, 275, 279, 308, 331, 338, 341, 351, 356, 369, 370, 376, 377, 379, 380, 382, 386, 388, 396, 400, 411, 412, 414, 416, 419, 421, 423, 425, 450, 451, 452, 456, 463, 479, 480, 507, 520, 535, 539, 541, 543, 548, 646, 652, 656, 671, 678, 692, 693, 696, 700, 715, 723, 733, 748, 763, 765, 766, 804, 805, 857, 882, 955, 986, 987, 998, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1022, 1024, 1032, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057], "m1": [380, 410], "m11": 377, "m2": 410, "m2012": 1001, "m2019": 1015, "m_max": 176, "ma": [115, 321, 345, 1004, 1045, 1050], "maascha": 1054, "maaten": [699, 703, 1005], "mabel": [1047, 1051], "mabu": 1052, "mac": [57, 321, 338, 377, 382, 715, 1008], "macaulei": 321, "macbook": 1047, "macdonald": [1049, 1050], "mach": [280, 412, 418, 600, 601], "machado": [412, 730], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 98, 107, 117, 143, 168, 169, 172, 174, 179, 188, 192, 207, 212, 229, 257, 269, 275, 278, 281, 292, 309, 315, 320, 322, 326, 329, 332, 341, 346, 349, 352, 356, 358, 369, 370, 375, 376, 377, 379, 382, 385, 389, 394, 395, 396, 399, 402, 408, 412, 414, 418, 419, 421, 422, 424, 443, 445, 454, 477, 478, 484, 509, 511, 517, 523, 524, 525, 537, 539, 541, 548, 551, 562, 563, 564, 565, 566, 567, 571, 572, 573, 600, 601, 617, 618, 621, 626, 629, 641, 645, 646, 648, 650, 651, 652, 657, 658, 661, 662, 663, 664, 665, 666, 683, 689, 690, 699, 715, 720, 732, 742, 748, 750, 792, 795, 804, 836, 837, 851, 852, 857, 860, 867, 868, 869, 871, 889, 891, 897, 911, 912, 913, 914, 916, 917, 921, 922, 997, 998, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1014, 1015, 1016, 1018, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1041, 1051, 1052, 1053, 1054, 1056], "machineri": 960, "maciej": 1050, "maci\u00e0": [1008, 1052, 1054], "mackai": [651, 652, 1004], "mackenbach": 1050, "maco": [383, 385, 400, 410, 1047, 1051, 1053], "macosx": 1039, "macro": [45, 68, 104, 169, 273, 313, 324, 334, 335, 377, 418, 714, 720, 736, 737, 745, 790, 791, 794, 795, 829, 1008, 1039, 1047, 1055], "macro_roc_auc_ovo": 284, "macro_roc_auc_ovr": 284, "macroscop": 414, "macsween": [1048, 1049], "mad": [678, 1045], "madan": 1051, "made": [0, 52, 64, 104, 114, 128, 137, 143, 161, 181, 190, 191, 217, 235, 254, 266, 279, 321, 325, 345, 361, 369, 377, 379, 382, 386, 396, 397, 405, 414, 421, 422, 426, 449, 452, 453, 455, 465, 503, 510, 595, 596, 598, 637, 638, 663, 672, 686, 692, 693, 742, 790, 807, 810, 811, 821, 825, 826, 827, 848, 851, 852, 1009, 1014, 1024, 1027, 1032, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1052, 1053, 1057], "madelon": 522, "madhura": [1048, 1050, 1051, 1054, 1055], "madinak": 1054, "madsen": [1045, 1047], "mae": [43, 52, 158, 217, 219, 565, 572, 752, 920, 922, 1008, 1024, 1046, 1047, 1051, 1052], "mae_test": 190, "mae_train": 190, "maennel": 1054, "magali": 1053, "magazin": [114, 423], "magda": 1050, "magenta": [111, 152], "maggi": [1053, 1057], "maggiecheg": [1049, 1053], "maggio": [1050, 1051, 1052], "magic": [251, 383, 388, 424, 623, 628, 631], "magnesium": 379, "magnitud": [43, 132, 139, 175, 186, 190, 234, 254, 280, 315, 320, 327, 332, 369, 377, 388, 414, 421, 424, 620, 659, 711, 891, 1004, 1008, 1012, 1018, 1022, 1024, 1041, 1048, 1057], "mahajan": [1047, 1049, 1056], "mahal": 113, "mahal_emp_cov": 113, "mahal_robust_cov": 113, "mahalanobi": [110, 114, 187, 220, 414, 416, 456, 463, 475, 476, 477, 478, 479, 480, 481, 482, 706, 785, 786, 787, 1002, 1011, 1014, 1029, 1047, 1050, 1051], "mahalanobisdist": 706, "mahapatra": 1046, "mahdavi": 646, "maheshakya": [0, 1042, 1043, 1044], "mahieux": 1032, "mahimkar": 1057, "mahmood": 1057, "mahout": 848, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 81, 91, 105, 118, 123, 147, 148, 153, 172, 178, 180, 182, 190, 193, 195, 198, 202, 206, 221, 223, 242, 251, 254, 278, 280, 282, 283, 289, 310, 320, 335, 345, 349, 352, 356, 357, 358, 365, 369, 370, 371, 374, 376, 377, 378, 379, 381, 382, 384, 386, 387, 390, 394, 396, 397, 400, 405, 408, 411, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 437, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 465, 468, 471, 475, 478, 488, 489, 490, 493, 494, 495, 503, 515, 516, 522, 541, 542, 545, 547, 548, 551, 554, 555, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 581, 588, 601, 604, 609, 617, 618, 624, 627, 641, 642, 644, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 683, 684, 685, 686, 688, 691, 693, 695, 696, 698, 699, 700, 702, 704, 712, 718, 719, 722, 723, 725, 726, 728, 729, 730, 731, 733, 745, 763, 770, 792, 793, 807, 809, 810, 811, 812, 821, 822, 823, 826, 827, 832, 836, 839, 844, 845, 846, 847, 848, 850, 853, 854, 855, 857, 859, 861, 862, 863, 869, 870, 871, 874, 876, 886, 888, 889, 890, 891, 892, 894, 900, 903, 904, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 935, 937, 938, 944, 958, 959, 997, 998, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "maikia": [1047, 1048, 1050, 1051], "mail": [377, 382, 386, 390, 394, 397, 1047, 1048], "mailhot": 1039, "mailman": 390, "main": [2, 37, 48, 68, 97, 118, 127, 147, 187, 244, 284, 294, 323, 352, 356, 369, 370, 371, 375, 380, 382, 384, 386, 388, 390, 394, 395, 396, 399, 400, 412, 414, 419, 421, 422, 424, 510, 532, 537, 556, 557, 632, 720, 841, 911, 912, 997, 1005, 1007, 1008, 1015, 1020, 1028, 1031, 1039, 1042, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "mainak": 1046, "maingret": 1050, "mainli": [64, 88, 137, 140, 174, 284, 292, 369, 384, 412, 618, 1010, 1015], "maint": 386, "maintain": [90, 222, 235, 237, 251, 275, 370, 381, 385, 388, 389, 390, 394, 396, 397, 400, 414, 421, 446, 448, 880, 881, 887, 888, 891, 896, 899, 900, 902, 1004, 1005, 1018, 1027, 1028, 1034, 1054, 1058], "mainten": [0, 382, 390, 394, 400, 407, 1004, 1028, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "mainy": 1051, "mair": 642, "mairal": [419, 538, 544], "maisonneuv": 1051, "maithreyi": 1049, "maj": 576, "major": [2, 49, 54, 70, 143, 269, 282, 315, 319, 324, 325, 326, 327, 328, 329, 330, 331, 349, 358, 369, 377, 381, 382, 386, 388, 394, 397, 408, 414, 418, 420, 422, 558, 576, 577, 701, 923, 925, 1008, 1011, 1022, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "majorfeatur": 386, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 91, 96, 97, 102, 107, 128, 137, 143, 147, 150, 153, 156, 169, 172, 174, 179, 182, 189, 190, 191, 192, 197, 202, 203, 206, 209, 210, 211, 213, 217, 218, 219, 221, 223, 235, 238, 246, 248, 250, 251, 252, 254, 260, 262, 265, 266, 269, 270, 275, 277, 278, 284, 285, 286, 289, 294, 304, 312, 315, 316, 321, 328, 330, 332, 345, 354, 356, 357, 358, 365, 369, 370, 371, 376, 377, 380, 381, 383, 384, 385, 386, 387, 388, 390, 394, 396, 400, 405, 408, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 426, 446, 447, 448, 449, 451, 453, 455, 457, 458, 459, 464, 465, 466, 468, 494, 510, 521, 522, 529, 530, 534, 539, 541, 548, 558, 559, 562, 563, 568, 569, 590, 591, 614, 615, 638, 656, 662, 663, 678, 698, 702, 737, 744, 749, 775, 776, 788, 804, 805, 807, 809, 812, 818, 822, 823, 826, 827, 833, 834, 841, 842, 845, 878, 887, 890, 891, 895, 899, 901, 902, 903, 904, 917, 925, 930, 937, 938, 949, 955, 962, 968, 993, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "make_": 1048, "make_biclust": [2, 59, 520, 1041], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 84, 90, 91, 92, 94, 95, 97, 98, 99, 209, 229, 244, 263, 318, 325, 328, 343, 346, 347, 353, 378, 385, 421, 522, 703, 717, 799, 800, 927, 1047, 1050, 1053], "make_cbar": 286, "make_checkerboard": [2, 58, 518, 1041], "make_circl": [2, 67, 79, 97, 128, 156, 242, 310, 311, 317, 336, 378, 1040, 1047, 1050], "make_classif": [2, 62, 64, 67, 141, 142, 144, 169, 171, 272, 278, 286, 287, 305, 310, 317, 324, 326, 330, 332, 352, 365, 378, 385, 410, 413, 421, 443, 444, 493, 519, 560, 562, 564, 571, 612, 614, 673, 704, 705, 707, 709, 806, 829, 830, 835, 836, 838, 841, 868, 871, 911, 918, 997, 1008, 1009, 1018, 1023, 1045, 1046, 1047, 1049], "make_column_selector": [2, 105, 147, 158, 254, 415, 470, 473, 1049], "make_column_transform": [2, 147, 158, 190, 246, 325, 415, 470, 472, 1047], "make_data": [70, 96], "make_dataset": 1048, "make_default": 977, "make_ellips": 262, "make_estim": 254, "make_friedman1": [2, 378, 421, 546, 550, 600, 601, 639], "make_friedman2": [2, 378, 618, 620, 621, 622, 623, 624, 628, 631, 632], "make_friedman3": [2, 378], "make_gaussian_quantil": [2, 137, 139, 378, 476, 480, 481, 482, 487, 527], "make_hastie_10_2": [2, 152, 279, 378, 421, 566, 1015], "make_heatmap": 286, "make_low_rank_matrix": [2, 330, 332, 531], "make_ml_clf": 121, "make_moon": [2, 67, 79, 97, 244, 275, 310, 311, 317, 378, 997, 1046, 1050], "make_multilabel_classif": [2, 121, 252, 378, 522, 543, 795, 842, 843, 1008, 1041, 1042, 1044, 1050], "make_pipelin": [2, 43, 67, 93, 118, 142, 147, 158, 168, 169, 172, 185, 186, 190, 191, 195, 197, 204, 206, 217, 218, 223, 231, 235, 238, 244, 245, 246, 254, 255, 256, 258, 269, 272, 282, 289, 295, 304, 310, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 357, 365, 395, 405, 415, 418, 574, 683, 685, 863, 871, 896, 897, 899, 900, 901, 902, 911, 912, 913, 914, 916, 917, 998, 1011, 1018, 1022, 1023, 1042, 1049, 1052], "make_plot": 315, "make_regress": [2, 49, 109, 197, 199, 200, 203, 220, 221, 288, 325, 331, 365, 378, 385, 395, 561, 563, 567, 572, 613, 615, 616, 642, 653, 654, 656, 658, 659, 660, 662, 667, 668, 669, 670, 671, 672, 674, 678, 686, 688, 689, 690, 692, 693, 694, 869, 912, 929, 1008, 1009, 1011], "make_s_curv": [2, 237, 242], "make_scor": [2, 52, 150, 153, 269, 279, 332, 405, 413, 418, 718, 807, 829, 833, 834, 1008, 1048, 1056, 1058], "make_sparse_coded_sign": [2, 216, 538, 544, 552, 553, 1053, 1055], "make_sparse_spd_matrix": [2, 115, 484, 536, 1056], "make_sparse_uncorrel": [2, 378], "make_spd_matrix": [2, 534], "make_subplot": 143, "make_swiss_rol": [2, 102, 241, 1053], "make_union": [2, 415, 870, 1042, 1046], "makedir": 1046, "maker": [189, 190], "makhija": 1054, "makoeppel": 1052, "maksym": 1054, "maladier": 1054, "maladi\u00e8r": [1054, 1055], "malcolm": 1047, "maldonado": [1049, 1052], "male": [105, 190, 329, 387, 884, 885, 1018], "malem": 1056, "malet": 1039, "malform": [55, 1043], "malic": [320, 379], "malic_acid": 48, "malici": 408, "malign": [172, 379, 507], "malik": [414, 458, 468, 698], "mallat": [671, 692, 693, 1004], "mallatpursuit93": [671, 692, 693], "mallow": [738, 1045], "maloo": [1047, 1048], "malt": [1052, 1053, 1054, 1056], "maltimor": 1049, "malu": 235, "malzer": 452, "mal\u00e9zieux": 1052, "mamba": 408, "mame": 1056, "mammal": 50, "mammalian": 419, "man": [419, 597, 776, 846, 850, 1006, 1008, 1010], "manag": [0, 2, 118, 258, 368, 376, 380, 383, 384, 386, 390, 394, 396, 397, 408, 421, 456, 474, 633, 909, 1002, 1024, 1027, 1028, 1032, 1034, 1052, 1055, 1058], "manaileng": 1052, "manasimj": 1057, "mandal": 1049, "mandatori": [382, 422], "mandatorili": 1046, "mandera": 1042, "mandi": [1050, 1053], "mandjev": 1053, "mandyam": 1049, "mangasarian": [172, 379], "mangipudi": 1045, "manh": 1047, "manhattan": [414, 447, 451, 456, 463, 706, 769, 778, 785, 786, 787, 858, 1006, 1011, 1043, 1048, 1055], "manhattan_dist": [2, 456, 463, 695, 769, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 1039, 1049, 1054, 1055], "manhattandist": 706, "mani": [43, 46, 49, 57, 90, 91, 108, 111, 115, 137, 143, 144, 145, 146, 151, 168, 172, 192, 217, 237, 248, 261, 268, 269, 275, 283, 287, 288, 295, 315, 320, 321, 324, 325, 326, 327, 328, 330, 331, 332, 356, 365, 369, 371, 377, 379, 381, 382, 384, 395, 396, 397, 400, 408, 411, 412, 414, 415, 416, 419, 421, 422, 423, 424, 426, 510, 548, 560, 561, 564, 565, 566, 567, 571, 572, 573, 613, 616, 634, 646, 657, 661, 665, 666, 673, 674, 675, 683, 684, 685, 699, 702, 781, 785, 807, 811, 821, 868, 869, 884, 889, 891, 911, 919, 920, 921, 922, 997, 998, 1000, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1021, 1023, 1025, 1026, 1027, 1028, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1054, 1055], "manideep": 1057, "manifest": [390, 1005, 1011], "manifold": [2, 51, 74, 87, 102, 142, 240, 241, 242, 248, 295, 305, 324, 328, 329, 336, 375, 396, 414, 419, 421, 509, 532, 537, 551, 556, 573, 695, 696, 697, 698, 699, 700, 701, 702, 703, 860, 872, 881, 904, 940, 1011, 1029, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1056], "manimaran": [1048, 1050, 1051, 1052, 1053], "manipul": [2, 376, 410, 514, 1027, 1045], "manish": 1050, "maniteja": [1045, 1046, 1047], "mankoo": 1054, "mann": 1049, "mannbi": 1047, "manner": [43, 109, 123, 169, 191, 195, 262, 328, 329, 370, 382, 388, 414, 419, 421, 422, 716, 851, 852, 997, 1008, 1024, 1042, 1049], "mannila": 1020, "manning2008": 1008, "manoharan": [1046, 1047], "manoj": [0, 172, 404, 1042, 1043, 1044, 1045, 1046], "manraj": 1046, "mansi": 1054, "mansingh": 1053, "mansouri": 1055, "mantovani": 1054, "manu": 377, "manual": [2, 43, 81, 90, 190, 191, 193, 218, 228, 277, 295, 337, 343, 356, 358, 369, 370, 377, 382, 386, 387, 394, 395, 400, 408, 414, 418, 419, 420, 443, 455, 574, 806, 829, 861, 884, 890, 997, 1002, 1003, 1004, 1007, 1008, 1011, 1018, 1028, 1047, 1049, 1055, 1057], "manuel": [1039, 1043, 1047, 1048, 1051, 1052, 1057], "manufactur": [190, 421], "manvendra": [1045, 1046], "maocx": 1049, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 88, 118, 128, 141, 149, 152, 156, 174, 187, 195, 217, 235, 237, 239, 243, 251, 254, 276, 279, 284, 303, 306, 308, 314, 315, 338, 345, 349, 357, 358, 376, 377, 383, 394, 396, 405, 408, 412, 414, 415, 418, 419, 421, 422, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 503, 505, 509, 516, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 769, 772, 804, 805, 806, 807, 810, 811, 818, 819, 821, 829, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 899, 900, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 961, 964, 965, 997, 1000, 1005, 1008, 1010, 1020, 1023, 1024, 1029, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056], "mapd": 1008, "mape": [2, 52, 753, 1008], "mape_cv_mean": 147, "mape_cv_std": 147, "mapi": 52, "mar": 51, "marc": [1046, 1048, 1049, 1055, 1058], "march": [179, 733, 763, 1008, 1039, 1043, 1047, 1049, 1054], "marchand": 1053, "marchman": [1040, 1041], "marco": [1045, 1047, 1048, 1052, 1053, 1054, 1057], "marcofalk": 1046, "marcogorelli": [1047, 1048], "marcolini": 1052, "marcom": 1053, "marcu": [1047, 1056], "mare": 1056, "marek": [1039, 1056], "maren": [0, 372, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "margeta": 1047, "margin": [30, 43, 51, 62, 64, 139, 165, 175, 176, 177, 178, 179, 180, 187, 190, 191, 196, 227, 228, 230, 252, 254, 275, 292, 315, 318, 321, 340, 341, 343, 344, 345, 347, 349, 353, 354, 379, 412, 419, 421, 424, 519, 617, 618, 638, 652, 683, 742, 840, 888, 900, 913, 916, 1004, 1008, 1010, 1014, 1015, 1018, 1022, 1023, 1029, 1046, 1048], "marguli": 1049, "mari": [104, 1047, 1048, 1049, 1050, 1053], "maria": [172, 414, 1050, 1051, 1052, 1053, 1054], "mariam": 1051, "mariana": 1050, "mariangela": 1052, "mariano": 275, "mariel": 1050, "marielaraj": 1052, "marija": [1050, 1051, 1057], "marijn": 1051, "marin": [535, 1057], "marina": 414, "marinelm": 1048, "mario": [412, 1043, 1045, 1053, 1054, 1055], "marit": [331, 503], "mari\u00e9": [0, 372, 1048, 1049, 1050, 1051, 1052, 1053], "mark": [2, 70, 93, 121, 167, 186, 279, 286, 374, 382, 386, 390, 391, 396, 414, 542, 614, 615, 618, 639, 665, 864, 865, 906, 907, 924, 930, 945, 950, 955, 1004, 1032, 1034, 1039, 1040, 1045, 1047, 1048, 1055, 1056, 1057], "markdown": 385, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 87, 90, 93, 94, 95, 98, 99, 117, 121, 125, 143, 157, 181, 182, 195, 204, 210, 212, 214, 215, 217, 219, 220, 232, 234, 238, 260, 262, 263, 269, 270, 275, 277, 278, 279, 302, 315, 320, 336, 360, 385, 386, 422, 1047, 1049, 1050, 1055], "markeredgecolor": [84, 90, 96, 98, 99], "markeredgewidth": [113, 279], "markerfacecolor": [84, 90, 96, 98, 99], "markers": [84, 90, 93, 96, 98, 99, 150, 177, 181, 247, 269, 328], "markerstyl": 269, "market": [42, 81, 87, 153, 187, 237, 238, 414, 416, 460, 477, 478, 696, 1005, 1029, 1032], "marketplac": 1032, "markham": [1043, 1050, 1051], "markiwanchyshyn": 1047, "marko": [1039, 1048, 1049, 1055], "markou": 1052, "markov": [424, 618, 1013, 1027, 1039], "markovtsev": 1047, "marktab": 1044, "marku": [414, 456, 463, 1047, 1049, 1050, 1051], "marmo": [0, 373, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "maron": [414, 448], "marr": 190, "marr_unmarri": 190, "marreddi": 1053, "marri": 190, "marriott": 51, "marsgui": 1047, "marsh": 1050, "marshal": 379, "marsi": 1042, "marsland": 537, "marslast": 537, "marszalek": [765, 766, 1006], "mart": [51, 1049], "martel": 1053, "martha": 321, "martian": 1049, "martin": [0, 372, 728, 730, 731, 1004, 1008, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "martin1997": 1008, "martina": [1049, 1051], "martinbpr": [1044, 1045], "martinez": 1046, "martino": 1044, "martinosorb": 1044, "martinsson": [55, 542, 548, 955], "martynov": 1052, "mart\u00edn": [1052, 1053], "marufo": 1054, "marufur": 1046, "marvin": [1054, 1055], "marwaha": 1047, "marx": 1018, "maryanmorel": [1044, 1045], "marzinotto": [1047, 1048], "mar\u00eda": [1053, 1054, 1055], "mas_vnr_typ": 254, "masafumi": 1044, "masanori": [1054, 1055], "masashi": [1049, 1051], "masecchia": 1039, "mash": 422, "mask": [2, 53, 77, 101, 145, 217, 225, 254, 273, 274, 338, 391, 396, 415, 421, 470, 475, 480, 568, 569, 588, 592, 593, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 636, 637, 639, 640, 656, 678, 807, 810, 811, 821, 979, 998, 1015, 1039, 1042, 1044, 1045, 1047, 1049, 1057], "mask_al": 998, "mask_false_neg": 269, "mask_false_posit": 269, "mask_missing_values_onli": 998, "mask_out": 53, "mask_test": 235, "mask_train": [191, 235], "mask_true_neg": 269, "mask_true_posit": 269, "mask_y_pr": 66, "maskani": [1047, 1049, 1050, 1051], "masked_arrai": [345, 807, 821], "masked_equ": 115, "maskedarrai": [279, 1045], "mason": 1043, "mass": [172, 255, 379, 452, 804, 1004, 1015], "massachusett": 377, "massia": [0, 1050, 1052, 1053], "massich": [1046, 1047, 1048, 1049], "massil": 1045, "masstran": 1048, "master": [51, 295, 329, 382, 1032], "masurel": 1040, "masvnrarea": [109, 158], "masvnrtyp": [147, 158], "mat": [376, 422], "match": [2, 43, 58, 72, 89, 123, 124, 126, 129, 132, 143, 187, 195, 196, 217, 239, 247, 254, 349, 358, 377, 380, 384, 414, 419, 421, 422, 435, 455, 470, 472, 498, 515, 516, 522, 533, 538, 544, 549, 555, 558, 574, 575, 579, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 665, 671, 672, 692, 693, 706, 710, 711, 712, 720, 722, 726, 741, 785, 786, 787, 793, 851, 852, 856, 860, 874, 875, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 911, 918, 924, 941, 1005, 1007, 1008, 1010, 1011, 1029, 1030, 1034, 1039, 1045, 1046, 1047, 1049, 1051, 1052, 1055, 1057], "matchingdist": 706, "matchmak": 1032, "matcovici": 1049, "mate": 356, "matem\u00e1tica": 1004, "mateo": 1052, "materi": [53, 190, 331, 397, 548, 588, 901, 902], "matern": [2, 183, 424, 1050, 1054], "mateusz": [1043, 1050, 1051, 1056, 1057], "math": [84, 104, 153, 172, 254, 275, 276, 379, 400, 771], "mathbb": [123, 140, 177, 417, 1008, 1015, 1023], "mathbf": [177, 349, 419, 1004, 1008, 1012, 1013, 1022], "mathcal": [221, 352, 419, 421, 634, 703, 1000, 1002, 1004, 1008, 1022, 1052], "mathemat": [37, 137, 190, 204, 234, 278, 374, 379, 382, 396, 399, 414, 416, 419, 420, 424, 556, 557, 564, 571, 642, 653, 663, 799, 800, 805, 869, 913, 916, 919, 921, 1004, 1008, 1012, 1018, 1020, 1030, 1032, 1034, 1053], "matheu": 1045, "mathew": 1054, "mathi": 1052, "mathia": 1053, "mathieu": [0, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1052], "mathrm": [414, 416, 419, 423, 1004, 1024], "mathschi": 1051, "mathur": [1046, 1048, 1049, 1054, 1055, 1057], "mathurin": [0, 1050, 1052, 1053], "mathurinm": [1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "matjansen": 1053, "mato": 1051, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 331, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 376, 378, 382, 389, 400, 407, 444, 509, 638, 639, 704, 705, 707, 708, 709, 813, 830, 925, 1003, 1027, 1036, 1048, 1051, 1052, 1053, 1054, 1057], "matric": [2, 37, 70, 74, 75, 113, 115, 123, 222, 261, 262, 264, 265, 266, 295, 308, 325, 331, 338, 356, 357, 374, 376, 384, 385, 394, 395, 396, 414, 415, 416, 417, 419, 422, 423, 429, 456, 457, 459, 470, 479, 487, 488, 489, 490, 533, 541, 542, 545, 547, 548, 551, 554, 556, 557, 562, 563, 570, 573, 588, 589, 596, 650, 653, 654, 659, 660, 665, 671, 679, 681, 694, 761, 767, 775, 781, 785, 786, 787, 788, 799, 804, 805, 837, 855, 858, 863, 874, 878, 880, 883, 886, 888, 889, 891, 894, 896, 898, 900, 901, 902, 903, 904, 913, 914, 916, 917, 933, 955, 962, 971, 978, 980, 981, 998, 1000, 1002, 1005, 1006, 1007, 1009, 1011, 1012, 1020, 1022, 1023, 1027, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 89, 97, 104, 112, 113, 114, 115, 117, 123, 124, 125, 133, 181, 187, 193, 196, 203, 218, 222, 245, 248, 249, 265, 267, 269, 282, 312, 328, 331, 334, 335, 349, 356, 357, 358, 364, 369, 377, 378, 379, 382, 384, 388, 391, 394, 395, 396, 411, 415, 416, 417, 422, 423, 424, 425, 426, 436, 437, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 460, 463, 465, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 499, 503, 504, 507, 508, 509, 510, 511, 512, 515, 516, 517, 526, 528, 530, 531, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 593, 595, 596, 597, 598, 600, 601, 610, 611, 612, 613, 614, 615, 616, 618, 627, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 719, 720, 721, 722, 723, 725, 729, 736, 737, 738, 741, 745, 746, 747, 748, 761, 762, 765, 766, 767, 768, 770, 771, 773, 774, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 794, 795, 799, 800, 803, 804, 805, 806, 807, 810, 811, 821, 829, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 874, 875, 876, 877, 878, 880, 882, 883, 884, 886, 888, 889, 890, 891, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 933, 935, 936, 937, 938, 943, 952, 953, 954, 955, 956, 959, 961, 962, 970, 971, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 996, 998, 1000, 1002, 1004, 1005, 1009, 1010, 1011, 1012, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "matrixorz": 1042, "matshow": [58, 59, 101, 145, 170, 312, 509], "matsubara": 1008, "matt": [1042, 1043, 1044, 1049, 1050, 1054, 1055], "matteo": [1043, 1045, 1053], "matter": [132, 266, 349, 365, 414, 415, 421, 574, 675, 683, 685, 1004, 1043], "matthew": [2, 381, 387, 543, 750, 1039, 1042, 1046, 1048, 1052, 1053, 1057], "matthews_corrcoef": [2, 1008, 1039, 1045, 1046, 1053], "matthia": [1039, 1041, 1042, 1045, 1046, 1047, 1051, 1054], "matthieu": [0, 404, 1039, 1043, 1054], "matti": [1040, 1043, 1044], "matur": [382, 1027, 1028], "mat\u00e9rn": 626, "mat\u00eda": 1053, "maud": 1042, "mauna": 179, "maura": 1050, "mauroantonioserrano": 1054, "mav": 1057, "mavani": 1047, "mavroforaki": [1043, 1045], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 87, 93, 97, 102, 106, 107, 110, 112, 115, 123, 126, 130, 133, 137, 139, 146, 152, 156, 163, 164, 165, 167, 168, 172, 176, 178, 179, 186, 187, 190, 200, 204, 206, 210, 212, 219, 220, 223, 231, 233, 235, 240, 248, 252, 273, 274, 275, 286, 294, 295, 297, 301, 302, 306, 308, 310, 312, 315, 317, 318, 320, 327, 332, 337, 339, 353, 369, 414, 416, 419, 475, 476, 477, 478, 479, 480, 481, 482, 483, 519, 543, 562, 563, 564, 565, 566, 567, 570, 571, 572, 613, 634, 638, 639, 655, 656, 676, 679, 681, 687, 698, 699, 703, 706, 711, 712, 764, 799, 800, 807, 868, 869, 880, 881, 883, 890, 897, 898, 919, 920, 921, 922, 1004, 1006, 1011, 1018, 1022, 1023, 1029, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "max_": [414, 1008], "max_abs_": 880, "max_abs_scal": 1018, "max_bin": [327, 328, 421, 568, 569, 1056], "max_categori": [321, 328, 330, 884, 885, 1018, 1053, 1055], "max_cluster_s": 452, "max_column": 235, "max_degre": [886, 1052], "max_depth": [46, 67, 138, 139, 142, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 185, 238, 272, 287, 292, 326, 327, 360, 362, 363, 364, 395, 396, 413, 421, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 573, 718, 810, 811, 835, 919, 920, 921, 922, 923, 924, 925, 997, 1015, 1024, 1048, 1050], "max_df": [54, 276, 338, 356, 357, 595, 598, 1050, 1057], "max_dist": 248, "max_doc_update_it": 543, "max_ep": [414, 456, 461, 462, 463], "max_error": [2, 410, 1008, 1048, 1058], "max_estim": 141, "max_featur": [54, 67, 141, 152, 253, 272, 287, 326, 421, 423, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 595, 598, 604, 919, 920, 921, 922, 997, 1004, 1039, 1041, 1042, 1046, 1047, 1050, 1053, 1056], "max_features_": [566, 567, 604, 919, 920, 921, 922, 1053], "max_fpr": [795, 1008, 1047], "max_fun": [868, 869, 1049], "max_i": [252, 1010], "max_idf": 1052, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 106, 107, 123, 126, 142, 143, 147, 153, 160, 163, 164, 185, 186, 190, 191, 197, 203, 209, 210, 224, 225, 226, 229, 230, 232, 237, 238, 239, 240, 242, 255, 256, 260, 261, 262, 263, 266, 288, 305, 310, 311, 312, 321, 326, 327, 328, 334, 335, 342, 356, 357, 388, 396, 421, 426, 446, 449, 453, 454, 455, 460, 465, 467, 477, 478, 484, 488, 489, 490, 538, 539, 540, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 568, 569, 634, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 679, 681, 683, 684, 685, 686, 687, 689, 690, 694, 695, 696, 697, 699, 700, 701, 804, 805, 821, 860, 868, 869, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 998, 1000, 1004, 1011, 1012, 1021, 1022, 1040, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "max_iter": 335, "max_iter_list": 153, "max_iter_predict": 617, "max_j": [653, 659], "max_leaf_nod": [137, 143, 152, 217, 327, 364, 421, 564, 565, 566, 567, 568, 569, 571, 572, 573, 919, 920, 921, 922, 1042, 1048, 1050], "max_n": [595, 596, 598, 1039], "max_n_alpha": [658, 662], "max_nbyt": 973, "max_no_improv": [77, 96, 99, 455, 544, 545, 546, 553, 1053, 1054], "max_patch": [85, 422, 590, 591, 1047], "max_resourc": [150, 810, 811, 997], "max_resources_": [810, 811], "max_sampl": [154, 185, 421, 562, 563, 564, 565, 570, 571, 572, 641, 1049, 1052, 1055], "max_samples_": 570, "max_skip": 678, "max_subpopul": [234, 686, 1053], "max_thread": [370, 383], "max_train_s": [43, 52, 418, 828, 1046], "max_trial": [678, 1004], "max_val": 941, "max_valu": [634, 1050, 1051], "max_x": 252, "maxabs_scal": [2, 396, 880, 1047], "maxabsscal": [2, 371, 410, 875, 896, 998, 1018, 1044, 1047, 1048, 1049, 1050, 1055, 1056], "maxent": [2, 665, 666, 1004], "maxent_du": 665, "maxi": 1054, "maxim": [117, 118, 120, 123, 133, 150, 197, 265, 266, 269, 276, 280, 284, 285, 288, 289, 305, 320, 326, 345, 349, 360, 364, 379, 396, 411, 413, 414, 417, 419, 421, 423, 424, 556, 601, 617, 618, 651, 652, 655, 676, 686, 687, 727, 807, 810, 811, 821, 880, 886, 896, 1002, 1004, 1007, 1008, 1011, 1013, 1023, 1042, 1044, 1049, 1052, 1054, 1057], "maxima": 414, "maximesaur": [1054, 1055], "maximis": [163, 261, 303, 1002, 1011], "maximum": [2, 43, 47, 50, 64, 69, 72, 92, 111, 112, 113, 114, 115, 125, 137, 139, 142, 143, 146, 153, 175, 177, 180, 181, 187, 196, 204, 254, 269, 285, 297, 301, 302, 308, 315, 340, 341, 343, 344, 347, 357, 360, 362, 363, 369, 377, 387, 388, 395, 396, 411, 412, 414, 416, 417, 419, 421, 422, 424, 425, 426, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 460, 463, 465, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 489, 490, 505, 516, 518, 519, 520, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 590, 591, 604, 617, 634, 638, 639, 642, 644, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 681, 683, 684, 685, 686, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 723, 751, 788, 804, 807, 810, 811, 813, 821, 828, 835, 860, 867, 868, 869, 875, 876, 880, 881, 883, 886, 887, 888, 890, 899, 900, 905, 906, 907, 908, 911, 912, 916, 919, 920, 921, 922, 923, 925, 934, 941, 997, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1022, 1023, 1024, 1029, 1046, 1047, 1049, 1050, 1053, 1054, 1056], "maxin": [1049, 1050], "maxsiz": 624, "maxval": [518, 520], "maxwel": [0, 372, 1049, 1052, 1053, 1054, 1055], "maxwelllzh": 1054, "may_share_memori": 1056, "mayb": [108, 312, 396, 422, 1023, 1028], "mayer": [421, 1051, 1053, 1056, 1057], "mayer2022": 421, "mayilvahanan": 414, "mayorov": [1042, 1043, 1044, 1045], "mayur": 1047, "mazari": 1047, "mb": [47, 248, 269, 356, 358, 377, 388, 503, 913, 914, 915, 916, 917, 1023, 1029, 1035], "mbilling": 1044, "mbillingr": 1049, "mbk": [77, 99], "mbk_means_cluster_cent": 99, "mbk_means_label": 99, "mbk_means_labels_uniqu": 77, "mblondel": [376, 515], "mbnmf": 54, "mc4229": 1050, "mc_clf": 1015, "mcar": 153, "mcc": [2, 750, 1008, 1053], "mccall": 104, "mccallum": [846, 1010], "mccarthi": [0, 366, 1039, 1047], "mcclish": [284, 795], "mcconaghi": 1032, "mccullagh": 1004, "mcculloh": [1044, 1045], "mcd": [2, 51, 113, 114, 416, 475, 480], "mcdermott": [1041, 1056], "mcdonald": 51, "mcdowel": 1047, "mcfadden": 1008, "mcfee": [1044, 1045], "mcgibbon": [1041, 1042, 1045], "mcgushion": 1048, "mcinn": [414, 1045, 1046, 1047, 1049, 1050, 1055], "mcivor": [1054, 1055], "mcm": [761, 1008], "mcm_": 761, "mcmahon": 1056, "mcsherri": [733, 763, 1008], "mctiernan": [1053, 1054], "mcve": [387, 394], "md": [2, 237, 238, 239, 240, 386, 695, 699, 701, 1033, 1034, 1039, 1051, 1054], "md5": 1051, "md5_checksum": 376, "md_scale": 237, "mdarii": 1055, "mdbecker": 1032, "mdi": [144, 151, 187, 188, 193, 421, 470, 503, 571, 637, 641, 837, 871, 885, 1016, 1029], "mdi_import": [192, 193], "mds_result": 701, "me": 356, "me1": 292, "me2": 292, "me3": 292, "mea": 93, "mean": [2, 43, 44, 45, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 81, 84, 85, 88, 89, 90, 95, 105, 112, 113, 114, 115, 118, 120, 121, 123, 126, 127, 128, 129, 130, 137, 139, 140, 143, 146, 147, 150, 151, 153, 158, 159, 160, 171, 172, 174, 179, 180, 181, 183, 185, 187, 190, 191, 198, 200, 206, 208, 210, 213, 214, 217, 219, 223, 224, 226, 232, 233, 234, 235, 240, 242, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 262, 263, 265, 266, 269, 271, 272, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 306, 315, 318, 320, 321, 322, 324, 327, 330, 332, 337, 345, 348, 349, 352, 354, 355, 356, 358, 365, 369, 374, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 394, 395, 396, 405, 411, 412, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 437, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 508, 509, 511, 513, 519, 526, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 595, 596, 597, 598, 601, 604, 609, 613, 614, 615, 616, 617, 618, 620, 629, 634, 635, 637, 639, 640, 641, 642, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 691, 695, 696, 697, 698, 699, 700, 701, 702, 711, 712, 714, 716, 719, 720, 723, 724, 731, 733, 736, 737, 738, 743, 744, 745, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 781, 785, 786, 788, 790, 791, 792, 794, 795, 797, 798, 799, 800, 802, 804, 805, 806, 807, 810, 811, 813, 821, 825, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 857, 858, 859, 861, 862, 864, 865, 867, 868, 869, 870, 872, 873, 875, 876, 880, 881, 883, 887, 889, 891, 892, 897, 899, 900, 902, 904, 906, 907, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 933, 937, 938, 940, 981, 982, 988, 992, 997, 998, 999, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1015, 1016, 1021, 1022, 1023, 1024, 1029, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "mean_": [124, 279, 539, 540, 541, 546, 548, 550, 891, 1018, 1047], "mean_absolute_error": [2, 52, 217, 219, 235, 410, 1008, 1040, 1042, 1058], "mean_absolute_percentage_error": [2, 52, 147, 410, 1008, 1051, 1053, 1058], "mean_auc": 285, "mean_change_tol": 543, "mean_fit_tim": [143, 297, 807, 821], "mean_fpr": 285, "mean_gamma_devi": [2, 410, 1008, 1049, 1058], "mean_impute_scor": 186, "mean_l1_ratio": 1042, "mean_pinball_loss": [2, 52, 150, 153, 327, 1004, 1008, 1052], "mean_pinball_loss_95p": 1008, "mean_poisson_devi": [2, 217, 410, 1008, 1049, 1058], "mean_precis": 273, "mean_precision_": 804, "mean_precision_prior": [260, 266, 804], "mean_precision_prior_": 804, "mean_predict": [52, 181], "mean_predictions_gpr": 174, "mean_prior": 804, "mean_prior_": 804, "mean_recal": 273, "mean_scor": [106, 284, 287, 357, 1052], "mean_score_tim": [143, 273, 276, 807, 821], "mean_shift": [2, 1044, 1047], "mean_square_error": 1040, "mean_squared_error": [2, 46, 148, 150, 151, 213, 217, 219, 221, 223, 235, 365, 410, 421, 759, 1008, 1040, 1042, 1049, 1050, 1056, 1058], "mean_squared_log_error": [2, 410, 718, 1008, 1046, 1052, 1056, 1058], "mean_test_": 279, "mean_test_precis": [273, 279], "mean_test_recal": 273, "mean_test_scor": [105, 106, 107, 115, 143, 163, 171, 265, 274, 275, 276, 283, 286, 287, 297, 345, 478, 601, 807, 821, 997, 1045, 1052], "mean_tim": 1045, "mean_tpr": [284, 285], "mean_train_precis": [807, 821], "mean_train_scor": [807, 821, 1045], "mean_tweedie_devi": [2, 235, 410, 1008, 1049, 1058], "mean_variance_axi": [2, 391, 1045, 1052], "mean_y_pr": 179, "meaning": [72, 193, 242, 304, 332, 358, 411, 413, 418, 422, 423, 555, 736, 737, 745, 790, 791, 794, 860, 1012, 1022, 1023, 1039, 1055], "meaningfulli": [217, 1008], "meaningless": [191, 422, 913, 916, 1042], "means_": [70, 260, 261, 262, 263, 265, 266, 556, 557, 804, 805], "means_init": [262, 263, 805], "meanshift": [2, 79, 328, 414, 446, 1042, 1043, 1044, 1047, 1049, 1050, 1053, 1054, 1055, 1057], "meant": [92, 153, 172, 254, 332, 377, 391, 480, 500, 684, 857, 930, 973, 974, 996, 998, 1012, 1014, 1018, 1040], "meanwhil": [394, 1023], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 84, 93, 95, 96, 124, 140, 141, 150, 154, 161, 172, 174, 179, 187, 189, 190, 191, 195, 206, 211, 216, 217, 221, 223, 235, 267, 273, 275, 281, 282, 320, 349, 356, 357, 369, 377, 379, 384, 388, 396, 411, 416, 418, 419, 420, 421, 422, 455, 458, 468, 505, 522, 545, 547, 554, 558, 564, 565, 566, 567, 570, 571, 572, 611, 614, 615, 618, 634, 638, 665, 697, 699, 705, 709, 711, 712, 714, 716, 719, 720, 723, 724, 727, 732, 733, 734, 736, 738, 743, 744, 746, 747, 750, 754, 762, 763, 764, 789, 790, 791, 793, 794, 795, 796, 799, 802, 832, 834, 837, 857, 888, 900, 919, 920, 921, 922, 928, 998, 1004, 1006, 1011, 1013, 1014, 1016, 1022, 1024, 1029, 1039, 1042, 1044, 1045, 1047, 1049], "mechan": [74, 251, 353, 356, 370, 382, 384, 408, 412, 414, 422, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 1006, 1024, 1032], "mecopur": 1056, "med": [57, 104, 284, 377, 1018], "meda": [109, 190, 1008], "media": [414, 1032], "median": [2, 43, 52, 72, 105, 109, 113, 114, 150, 185, 186, 190, 219, 223, 234, 246, 254, 315, 325, 327, 328, 377, 416, 421, 423, 446, 460, 464, 467, 480, 559, 561, 565, 572, 604, 634, 637, 642, 677, 678, 686, 728, 760, 858, 889, 901, 920, 922, 998, 1018, 1024, 1042, 1043], "median_absolute_error": [2, 109, 190, 1008, 1043, 1049, 1051], "median_predict": 52, "medic": [278, 418, 719, 1004, 1032], "medicin": [278, 719, 1008], "medina": [1039, 1041], "medinc": [315, 326, 377, 496], "medium": [42, 187, 250, 322, 345, 414, 650, 885, 1001, 1004], "medoid": 452, "medoids_": 452, "medri": 1042, "meekail": [0, 403, 1053, 1054, 1055, 1056], "meer": [98, 414, 454], "meet": [382, 394, 397, 423, 579, 610, 868, 869, 908, 1008, 1021, 1032, 1047, 1048, 1049], "megabyt": 1053, "megasari": 1051, "meghann": [1047, 1049], "mehak": 1046, "mehdi": [1043, 1052], "mehgarg": 1054, "mehmet": [1046, 1052], "mehmetcanakbai": 1054, "mehrdad": 1053, "mehta": [1043, 1044, 1045, 1047, 1048, 1049, 1050, 1054, 1055], "mehul": 1046, "mei": [1044, 1049], "meier": 1046, "meila": 414, "mein": 422, "meinshausen": 202, "meirel": 1050, "meketon": 1046, "melani": [1032, 1046, 1047], "melderi": 1047, "melemo2": 1053, "meli": [1052, 1053, 1054], "melissa": 1047, "mellon": 906, "melnik": 1054, "melsyt": [1047, 1048], "mem": [89, 388, 515, 516, 1029], "member": [0, 356, 357, 377, 382, 385, 397, 414, 429, 448, 452, 454, 457, 459, 499, 562, 563, 564, 565, 570, 571, 572, 573, 588, 665, 666, 673, 674, 675, 683, 684, 685, 711, 712, 722, 724, 738, 743, 744, 764, 793, 802, 807, 911, 1004, 1011, 1039, 1051, 1054], "membership": [30, 91, 397, 411, 414, 518, 519, 520, 521, 522, 526, 529, 1023], "memit": 388, "memmap": [370, 377, 396, 419, 515, 541, 1047, 1056], "memoiz": [106, 377, 396], "memor": 192, "memori": [2, 47, 89, 105, 106, 127, 190, 191, 269, 297, 321, 324, 326, 328, 329, 332, 356, 357, 358, 370, 371, 376, 382, 385, 391, 394, 396, 408, 414, 415, 418, 419, 422, 425, 426, 447, 448, 449, 450, 451, 452, 453, 455, 456, 460, 463, 465, 474, 479, 485, 503, 510, 515, 516, 540, 541, 542, 545, 548, 562, 563, 564, 565, 570, 571, 572, 573, 588, 589, 595, 596, 598, 653, 654, 655, 659, 660, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 691, 785, 786, 787, 788, 807, 813, 821, 830, 832, 833, 834, 835, 838, 839, 840, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 871, 872, 889, 891, 901, 902, 904, 909, 911, 912, 919, 920, 921, 922, 938, 976, 992, 1004, 1010, 1011, 1018, 1020, 1021, 1023, 1024, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "memory_profil": [388, 400, 407], "memoryerror": [1047, 1051], "memoryview": 383, "memorywis": 408, "men": 379, "menes": 1054, "meng": [1039, 1040, 1043, 1045, 1046], "menoci": 1057, "menon": 412, "mensch": [1044, 1045, 1046, 1047], "mention": [90, 118, 137, 235, 289, 325, 365, 369, 382, 386, 387, 394, 414, 703, 903, 904, 997, 1002, 1004, 1028, 1031, 1032, 1046, 1047, 1048], "menu": 400, "menuet": 1048, "mercer": 1000, "mere": [43, 275, 396, 838, 1022], "merg": [74, 76, 81, 86, 327, 380, 382, 385, 390, 394, 397, 414, 446, 447, 448, 451, 452, 469, 827, 1039, 1046], "merit": [382, 386, 397], "meritocrat": 397, "merritt": 1045, "mersenn": 1050, "merz": 412, "mesfer": 1052, "mesh": [93, 146, 156, 176, 249, 303, 310, 317, 339, 341], "meshgrid": [50, 63, 77, 93, 113, 146, 156, 175, 176, 177, 178, 180, 191, 228, 229, 230, 231, 242, 244, 264, 301, 308, 310, 317, 318, 339, 344, 345, 349, 350, 353, 354, 638], "meshulam": 1042, "meson": [380, 385, 400, 407, 1058], "mess": 1053, "messag": [73, 79, 97, 104, 123, 251, 356, 357, 377, 380, 381, 385, 386, 387, 390, 391, 414, 446, 460, 474, 546, 550, 555, 581, 634, 719, 807, 810, 811, 813, 821, 830, 835, 838, 840, 860, 868, 869, 909, 936, 937, 938, 941, 945, 970, 991, 996, 1008, 1018, 1039, 1043, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "met": [145, 251, 384, 423, 541, 548, 634, 678, 1004, 1008, 1047], "meta": [2, 7, 30, 31, 91, 104, 136, 161, 187, 217, 280, 284, 289, 291, 294, 330, 331, 363, 365, 376, 380, 384, 386, 394, 396, 405, 412, 423, 424, 434, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 503, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 588, 589, 595, 597, 598, 604, 610, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 807, 808, 809, 814, 816, 823, 825, 829, 834, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 928, 960, 967, 996, 997, 1009, 1028, 1029, 1030, 1034, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1056], "meta_clf_sample_weight": 251, "meta_est": 251, "meta_meta_est": 251, "metaclassifi": [251, 252], "metaclassifierifittedmetaclassifi": 251, "metadata": [2, 47, 91, 135, 182, 187, 199, 243, 269, 332, 357, 376, 377, 408, 428, 431, 434, 437, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 503, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 963, 964, 965, 966, 967, 991, 1008, 1027, 1028, 1029, 1034, 1055], "metadata_rout": [2, 251, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 963, 964, 965, 966, 967], "metadatarequest": [2, 251, 428, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 475, 476, 477, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 599, 602, 603, 605, 606, 607, 610, 617, 618, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 661, 663, 664, 665, 667, 669, 671, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 964, 966, 1056], "metadatarout": [2, 251, 443, 470, 471, 478, 562, 563, 570, 574, 575, 576, 577, 600, 601, 604, 609, 634, 654, 658, 660, 662, 666, 668, 670, 672, 678, 680, 682, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 870, 871, 908, 966, 1056], "metaestim": [2, 91, 396, 908, 928, 968, 1043, 1052, 1053, 1056], "metaestimatormixin": [2, 251], "metaireau": [1039, 1042], "metal": 410, "metaregressor": 251, "metatransfom": 1044, "meteorologi": 412, "meth_nam": 319, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 100, 103, 106, 112, 113, 116, 118, 121, 123, 126, 128, 131, 132, 133, 135, 137, 142, 144, 145, 151, 158, 167, 168, 172, 185, 195, 205, 206, 218, 225, 234, 236, 238, 240, 241, 242, 244, 248, 250, 251, 252, 254, 258, 259, 262, 269, 277, 280, 282, 283, 284, 289, 292, 295, 301, 302, 304, 315, 319, 322, 324, 326, 327, 348, 356, 357, 358, 364, 365, 369, 370, 371, 374, 379, 380, 382, 383, 384, 388, 389, 391, 394, 395, 399, 405, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 431, 432, 433, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 465, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 511, 519, 521, 529, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 712, 717, 718, 729, 738, 739, 742, 743, 748, 749, 770, 775, 776, 781, 785, 790, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 899, 900, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 928, 931, 940, 944, 945, 955, 963, 964, 965, 966, 967, 968, 973, 976, 991, 992, 995, 996, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1029, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "method_map": [251, 964], "method_max_it": [552, 553, 1049], "method_nam": [251, 964, 967], "methodmap": [2, 251, 964], "methodmetadatarequest": 963, "methodol": 1018, "methodolog": [418, 1031], "methodologi": [548, 884, 998, 1008, 1032], "methodpair": 965, "metric": [2, 13, 43, 45, 46, 50, 52, 55, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 82, 83, 84, 87, 93, 95, 99, 104, 109, 115, 137, 142, 148, 149, 151, 152, 153, 158, 169, 172, 175, 185, 187, 189, 190, 192, 202, 206, 212, 213, 217, 219, 221, 223, 235, 240, 245, 248, 249, 254, 257, 267, 268, 271, 272, 273, 275, 276, 278, 282, 284, 285, 289, 294, 295, 297, 305, 308, 313, 315, 320, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 356, 357, 365, 369, 374, 377, 382, 384, 394, 395, 396, 399, 405, 409, 412, 413, 419, 420, 421, 424, 425, 431, 443, 447, 450, 451, 452, 456, 460, 461, 462, 463, 468, 475, 527, 542, 556, 557, 558, 560, 562, 564, 565, 566, 568, 569, 571, 572, 574, 576, 585, 609, 617, 627, 635, 638, 641, 645, 646, 647, 648, 649, 650, 665, 666, 670, 673, 675, 681, 682, 683, 695, 697, 699, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 836, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 877, 883, 906, 907, 911, 913, 916, 919, 921, 928, 998, 1000, 1003, 1005, 1009, 1011, 1014, 1016, 1027, 1028, 1029, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "metric_kwarg": [786, 787], "metric_obj": 706, "metric_param": [425, 450, 452, 456, 461, 462, 463, 695, 699, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 1043, 1046, 1053], "metsi": [846, 1010], "metzen": [0, 403, 1039, 1042, 1043, 1044, 1045], "mexican": 132, "meyer89": 1050, "mferrari3": [1047, 1048], "mgrid": [53, 165], "mhg": 1044, "mi": [64, 72, 167, 414, 614, 615, 711, 762, 764, 998, 1008, 1022], "mia": 1054, "miao": 1052, "mib": [369, 474, 909], "mic": [892, 1018], "micah": 1049, "micci": [892, 1018], "mice": [376, 634, 998], "miceprotein": 376, "michael": [379, 412, 414, 456, 635, 644, 698, 804, 998, 1004, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1056, 1057], "michal": [1043, 1046, 1052, 1053], "michali": 414, "michalkrawczyk": [1052, 1053], "micha\u0142": 1050, "micha\u0142owski": 1048, "michel": [0, 404, 1039, 1041, 1042, 1044, 1046, 1053, 1054], "michelbach": 1043, "michiaki": 1045, "micka\u00ebl": [1047, 1048], "micky774": [1053, 1054], "micro": [49, 308, 338, 369, 386, 714, 720, 736, 737, 745, 790, 791, 794, 795, 1008, 1039, 1047, 1048, 1054, 1057], "micro_roc_auc_ovr": 284, "microarrai": [411, 457, 520, 635, 998], "microcontrol": 1027, "microphon": 124, "microryzomi": [50, 308, 377, 505], "microryzomys_minutu": 505, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 380, 383, 400], "mid": [63, 345, 1008, 1010], "middl": [43, 61, 70, 95, 128, 202, 353, 379, 1015, 1018], "mideast": [57, 377], "midina": 1046, "midnight": 43, "midpoint": 345, "midpointnorm": 345, "midvidi": 1052, "midwest": [172, 379], "might": [0, 43, 44, 52, 67, 77, 79, 95, 97, 104, 146, 153, 156, 169, 180, 186, 190, 191, 192, 195, 217, 235, 244, 269, 275, 277, 289, 298, 311, 326, 332, 349, 354, 365, 369, 370, 376, 380, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 400, 408, 412, 413, 415, 418, 419, 420, 421, 422, 424, 439, 449, 494, 503, 508, 510, 515, 522, 530, 543, 562, 563, 564, 568, 569, 571, 586, 587, 589, 617, 618, 634, 657, 661, 662, 663, 665, 666, 683, 685, 699, 764, 801, 809, 810, 811, 824, 827, 835, 860, 876, 891, 904, 923, 925, 927, 929, 933, 937, 938, 955, 976, 997, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1015, 1016, 1018, 1023, 1024, 1040, 1042, 1047, 1048, 1050, 1053, 1054, 1055, 1056], "mignon": [1039, 1042, 1043, 1046], "migrat": [382, 1039], "miguel": [1049, 1057], "miguelbarao": 1049, "miguelcsilva": 1057, "mihael": [414, 456, 463], "mihevc": 1049, "mike": 1046, "mikebenfield": 1046, "miketip": [541, 548], "mikhail": [1040, 1041, 1042, 1045, 1046, 1054, 1055], "miki": [1056, 1057], "mikulski": 1050, "milajev": 1043, "milan": 1051, "milana2": 1053, "mileag": 369, "milen": 1046, "mileston": 386, "militari": 104, "mill": 1049, "millawel": 1053, "miller": [377, 1047, 1048, 1052], "million": [77, 91, 179, 195, 422, 699, 1005, 1023, 1032, 1053, 1054], "millman": [0, 404, 1048, 1055, 1056], "milman": 1047, "miln": 377, "miltenberg": 1054, "milton": 1056, "milutinov": 1048, "mimic": [185, 217, 356, 825], "mimicri": 356, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 87, 93, 109, 123, 126, 137, 139, 146, 149, 150, 156, 165, 172, 176, 178, 179, 180, 186, 190, 200, 204, 206, 212, 219, 220, 223, 238, 248, 249, 252, 294, 301, 302, 308, 310, 312, 315, 317, 318, 320, 332, 339, 353, 391, 414, 417, 419, 488, 489, 491, 519, 541, 542, 545, 547, 548, 556, 557, 570, 634, 638, 639, 661, 662, 663, 664, 689, 690, 711, 764, 787, 810, 811, 860, 868, 869, 881, 890, 897, 955, 972, 999, 1004, 1008, 1011, 1018, 1045, 1048, 1050, 1051, 1054], "min_": [327, 414, 421, 881, 1004, 1018, 1022, 1023, 1024], "min_arg": 52, "min_batch_s": 958, "min_bin_freq": [454, 467], "min_c": 1010, "min_categori": [847, 1051], "min_cluster_s": [79, 100, 330, 414, 452, 456, 462, 1048], "min_degre": [886, 1052], "min_df": [54, 57, 104, 276, 338, 356, 357, 422, 595, 598, 1039, 1041, 1050, 1057], "min_dist": 248, "min_estim": 141, "min_faces_per_person": [45, 377, 501], "min_features_to_select": [171, 601, 1047], "min_frequ": [328, 330, 884, 885, 1018, 1053, 1055], "min_grad_norm": [699, 1045], "min_i": 252, "min_idf": 1052, "min_impurity_decreas": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 1024, 1046], "min_impurity_split": 1046, "min_max_axi": 1048, "min_max_scal": 1018, "min_n": [595, 596, 598, 1039], "min_n_compon": 248, "min_po": [2, 391], "min_resourc": [150, 810, 811, 997], "min_resources_": [810, 811], "min_sampl": [79, 84, 100, 394, 396, 414, 425, 450, 452, 456, 461, 462, 463, 678, 1004, 1048, 1052], "min_sample_split": 1054, "min_samples_leaf": [143, 149, 150, 192, 324, 327, 360, 421, 564, 565, 566, 567, 568, 569, 571, 572, 573, 919, 920, 921, 922, 1024, 1045], "min_samples_split": [150, 151, 152, 279, 287, 316, 326, 421, 564, 565, 566, 567, 571, 572, 573, 810, 811, 919, 920, 921, 922, 997, 1024, 1045], "min_val": [934, 941], "min_valu": [634, 1050, 1051], "min_w": 1004, "min_weight_fraction_leaf": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 1024, 1042, 1045, 1046], "min_x": 252, "mina": [1049, 1050], "mincovdet": [2, 113, 114, 416, 475, 476, 479, 481, 482, 1014, 1039, 1046, 1058], "mind": [128, 153, 189, 190, 191, 235, 319, 320, 356, 357, 365, 382, 408, 416, 418, 421, 653, 654, 711, 1004, 1023, 1027], "minden": [414, 458, 468], "mine": [0, 275, 357, 377, 414, 425, 450, 518, 570, 727, 741, 747, 790, 1004, 1008, 1014, 1020], "ming": [570, 1014, 1043, 1047, 1048, 1049, 1053], "minghui": [1046, 1047], "mingw": 1042, "minh": 1047, "mini": [2, 47, 99, 123, 328, 371, 396, 422, 446, 448, 453, 455, 457, 459, 538, 540, 543, 544, 545, 546, 547, 549, 550, 552, 553, 1012, 1013, 1039, 1050, 1052], "mini_batch": [457, 459], "minibatch": [47, 79, 414, 419, 455, 541, 683, 867, 868, 869, 1039], "minibatch_iter": 47, "minibatch_kmean": 357, "minibatch_s": [47, 371], "minibatchdictionarylearn": [2, 123, 126, 371, 419, 538, 545, 549, 552, 553, 1040, 1042, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "minibatchkmean": [2, 57, 71, 73, 78, 79, 85, 93, 94, 96, 98, 187, 357, 371, 414, 419, 446, 448, 453, 519, 786, 1029, 1040, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "minibatchnmf": [2, 54, 371, 419, 1053, 1055, 1056, 1057], "minibatchsparsepca": [2, 538, 540, 544, 547, 549, 550, 552, 553, 1039, 1040, 1050, 1052, 1053, 1054, 1055, 1056], "miniforg": [380, 390, 400, 401], "miniforge3": [380, 390], "minim": [2, 43, 51, 52, 64, 92, 101, 111, 112, 150, 174, 182, 197, 213, 215, 217, 219, 221, 225, 235, 237, 247, 248, 260, 265, 269, 276, 284, 285, 315, 324, 327, 342, 349, 352, 360, 381, 382, 385, 390, 394, 396, 408, 412, 414, 416, 419, 421, 446, 447, 451, 452, 456, 469, 545, 547, 554, 564, 565, 566, 567, 571, 572, 616, 617, 618, 648, 653, 656, 664, 665, 674, 678, 679, 681, 685, 686, 694, 699, 701, 702, 755, 787, 858, 860, 869, 887, 899, 905, 919, 920, 921, 922, 1004, 1005, 1008, 1011, 1012, 1018, 1020, 1021, 1022, 1023, 1027, 1030, 1034, 1043, 1048, 1049], "minima": [180, 204, 419, 453, 699, 1005, 1047], "minimal_reproduc": 390, "minimalist": [387, 422, 1031], "minimis": [52, 274, 414, 418, 665, 666, 1024], "minimum": [2, 48, 90, 92, 113, 150, 151, 153, 171, 206, 227, 248, 254, 285, 301, 302, 384, 391, 400, 407, 411, 414, 421, 422, 447, 451, 452, 456, 460, 462, 475, 476, 479, 480, 481, 482, 518, 520, 548, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 601, 634, 638, 639, 642, 644, 675, 678, 683, 685, 686, 689, 690, 699, 712, 732, 786, 787, 810, 811, 832, 847, 868, 869, 880, 881, 884, 885, 886, 890, 904, 905, 918, 919, 920, 921, 922, 934, 937, 938, 941, 958, 1005, 1008, 1012, 1014, 1018, 1020, 1024, 1039, 1042, 1046, 1047, 1051, 1052, 1056], "minimum_cluster_s": 414, "minka": [130, 548, 1004], "minknowski": 1052, "minkowski": [425, 450, 456, 461, 462, 463, 695, 706, 785, 786, 787, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 1011, 1039, 1042, 1053, 1054, 1055], "minkowski_dist": [456, 463, 695, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865], "minkowskidist": [706, 1052], "minmax_scal": [2, 313, 315, 881, 1044, 1047], "minmaxscal": [2, 43, 44, 106, 168, 170, 195, 238, 254, 311, 326, 371, 410, 415, 470, 897, 998, 1018, 1041, 1044, 1047, 1049, 1050, 1051, 1055, 1056, 1058], "minmaxscalerminmaxscal": 106, "minnesota": 414, "minor": [254, 269, 278, 282, 377, 386, 397, 503, 1008, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "minu": [275, 767, 1008], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 377, 382, 1005, 1026], "minutu": [50, 308, 377, 505], "minval": [518, 520], "minwoo": 1039, "minyushkin": 1045, "miola": 1054, "miott": [1039, 1042], "miotto": 1050, "mir": 422, "miroslav": [1040, 1041, 1044], "mirror": [848, 997], "mirza": 1052, "misa": 1054, "misc": [57, 88, 126, 276, 338, 356, 357, 358, 377], "misc_featur": 254, "miscalibr": 64, "miscellan": [375, 376, 1029, 1045, 1046, 1053, 1054, 1056, 1057, 1058], "miscfeatur": 158, "misclassif": [46, 137, 269, 349, 803, 1022, 1023, 1024, 1040], "misclassifi": [70, 137, 268, 269, 349, 356, 1023], "misclassification_error": 137, "misdetect": 1056, "mish": 422, "mishra": [1051, 1052], "mislabel": [268, 421, 1010], "mislead": [72, 144, 145, 151, 190, 383, 399, 421, 560, 561, 564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 1034, 1052], "mismatch": [79, 1007, 1048], "misread": 242, "miss": [2, 20, 105, 158, 172, 192, 246, 256, 269, 275, 295, 325, 329, 332, 365, 369, 374, 377, 379, 381, 382, 387, 396, 410, 413, 414, 415, 416, 452, 478, 496, 503, 505, 508, 564, 565, 568, 569, 571, 572, 573, 634, 635, 636, 637, 646, 652, 679, 697, 701, 734, 776, 833, 854, 872, 880, 881, 885, 887, 888, 891, 892, 896, 899, 900, 902, 919, 920, 921, 922, 928, 1004, 1005, 1008, 1027, 1028, 1029, 1030, 1032, 1034, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "missclassif": 137, "missforest": [185, 998], "missing": [153, 421, 634, 635, 637, 1048], "missing_featur": [185, 186], "missing_fract": 153, "missing_fraction_list": 153, "missing_r": 186, "missing_sampl": [185, 186], "missing_valu": [185, 186, 256, 396, 634, 635, 636, 637, 776, 998, 1047, 1048], "missingind": [2, 634, 635, 637, 998, 1047, 1048, 1049, 1053, 1055], "mission": [0, 357, 1032], "misspecifi": 64, "misspel": 422, "mistak": [137, 169, 289, 335, 365, 414, 418, 742, 882, 896, 897, 899, 900, 901, 902, 1004, 1009], "misti": [43, 191], "mit": [292, 377, 388, 414, 424, 617, 618, 621, 626, 629, 650, 673, 674, 683, 848, 1001], "mitar": 1048, "mitig": [64, 90, 153, 192, 322, 370, 371, 1005, 1024, 1051], "mitra": [1049, 1050, 1054], "mitrov": 1048, "mitzi": [1052, 1053], "miwojc": 1053, "mix": [2, 43, 97, 103, 104, 124, 125, 147, 187, 190, 217, 246, 256, 258, 276, 315, 321, 376, 384, 394, 396, 415, 419, 426, 470, 472, 473, 503, 540, 545, 547, 554, 607, 611, 637, 653, 654, 659, 665, 666, 667, 668, 669, 670, 675, 683, 685, 688, 807, 821, 837, 871, 884, 885, 891, 892, 971, 978, 981, 1004, 1013, 1029, 1051, 1053, 1054], "mixed_encoded_preprocessor": 321, "mixed_pip": 321, "mixed_target": 321, "mixin": [2, 382, 396, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 608, 949, 1041, 1050, 1054], "mixing_": [124, 125, 540], "mixtur": [2, 46, 48, 70, 79, 90, 92, 100, 121, 177, 186, 204, 262, 263, 286, 305, 331, 377, 378, 396, 414, 419, 420, 424, 630, 804, 805, 807, 1028, 1029, 1033, 1034, 1039, 1043, 1044, 1045, 1046], "mizil": [62, 64, 412, 443, 445], "mizuki": 1053, "mk": 1024, "mkdir": [47, 388, 390], "mkdtemp": [89, 415], "mkl": [369, 370, 380, 390, 394, 1039], "mkl_num_thread": 370, "mksol": 104, "ml": [47, 172, 292, 376, 379, 387, 507, 509, 517, 1004, 1006, 1027, 1028, 1032], "ml_map": 402, "mlant": 1053, "mlb": [377, 882], "mlc": 379, "mlcomp": 1039, "mld": 47, "mldata": [1039, 1047], "mle": [113, 130, 548, 1047, 1050], "mlewis1729": 1046, "mlflow": 1027, "mlg": 1043, "mlinari\u0107": 1054, "mline": [48, 113, 231, 301, 344, 347], "mljar": 1027, "mlle": [696, 700, 1005], "mlliou112": 1046, "mlo": 179, "mlondschien": 1052, "mlop": 1027, "mlp": [187, 191, 255, 309, 311, 503, 837, 868, 869, 1012, 1029], "mlp_disp": 255, "mlp_model": 191, "mlp_preprocessor": 191, "mlpclassifi": [2, 67, 152, 164, 187, 309, 310, 312, 371, 509, 511, 521, 529, 867, 869, 881, 1009, 1012, 1029, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mlpregressor": [2, 43, 191, 255, 371, 867, 868, 1012, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mlpregressormlpregressor": 255, "mlxtend": 1027, "mm": 195, "mm_bunch": 50, "mmap_mod": [408, 973], "mmm": 51, "mmse": [112, 416, 427, 481], "mn193": 1056, "mnb": 1010, "mnist": [187, 196, 208, 210, 225, 232, 295, 309, 311, 503, 665, 837, 868, 891, 940, 1004, 1012, 1029], "mnist_10000": 295, "mnist_20000": 295, "mnist_784": [225, 233, 295, 312], "mo": [329, 1050], "mobil": 390, "mock": 1049, "mockdatafram": 1049, "modal": [2, 244, 480, 957], "mode": [2, 48, 49, 81, 82, 113, 217, 244, 295, 297, 313, 324, 380, 382, 386, 390, 391, 394, 411, 417, 421, 425, 449, 450, 453, 455, 458, 465, 468, 477, 478, 484, 488, 493, 515, 516, 564, 568, 571, 599, 602, 603, 605, 606, 607, 617, 634, 651, 652, 665, 666, 673, 675, 680, 681, 682, 683, 686, 689, 690, 696, 700, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 867, 911, 913, 916, 919, 921, 943, 954, 955, 957, 1011, 1014, 1027, 1040, 1048, 1053, 1056], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 83, 84, 89, 90, 91, 93, 96, 103, 105, 106, 107, 111, 115, 118, 122, 123, 132, 133, 136, 137, 138, 140, 142, 146, 149, 150, 152, 153, 155, 157, 158, 161, 163, 165, 166, 168, 169, 177, 178, 180, 181, 182, 183, 186, 188, 189, 193, 198, 200, 203, 205, 207, 208, 210, 212, 213, 214, 218, 219, 221, 222, 223, 225, 229, 230, 232, 233, 234, 244, 247, 252, 260, 262, 263, 264, 268, 270, 271, 273, 276, 278, 279, 280, 281, 283, 284, 289, 290, 292, 295, 297, 298, 299, 301, 304, 308, 316, 319, 321, 322, 324, 326, 328, 329, 330, 332, 334, 335, 342, 344, 345, 346, 347, 348, 350, 352, 354, 357, 358, 361, 362, 363, 365, 374, 376, 377, 385, 388, 396, 399, 405, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 433, 437, 439, 443, 448, 455, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 503, 505, 507, 508, 509, 510, 516, 529, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 595, 596, 600, 601, 604, 609, 613, 616, 617, 618, 622, 634, 639, 640, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 708, 713, 718, 728, 729, 730, 731, 741, 742, 748, 757, 760, 792, 795, 796, 799, 804, 805, 806, 807, 810, 811, 812, 813, 821, 822, 823, 824, 828, 829, 830, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 856, 857, 858, 860, 862, 867, 868, 869, 871, 872, 874, 876, 878, 883, 884, 886, 887, 888, 890, 891, 892, 896, 897, 899, 900, 901, 902, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 991, 998, 1000, 1001, 1002, 1005, 1006, 1009, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1058], "model_1": 275, "model_1_scor": 275, "model_2": 275, "model_2_scor": 275, "model__estimator__max_depth": 997, "model_coef": 189, "model_color": 351, "model_detail": 146, "model_displai": 142, "model_fixed_threshold": 269, "model_from_prevision_vers": 408, "model_i": 275, "model_i_scor": 275, "model_idx": 254, "model_k": 275, "model_k_scor": 275, "model_l1": 352, "model_l2": 352, "model_nam": [143, 254, 294], "model_no_cf": 322, "model_param": 232, "model_prop": 43, "model_scor": [275, 294], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 89, 105, 106, 107, 108, 109, 111, 118, 128, 130, 137, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 163, 168, 169, 171, 174, 185, 186, 187, 189, 190, 192, 193, 195, 202, 212, 217, 219, 224, 225, 232, 233, 235, 245, 250, 251, 254, 256, 257, 258, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 298, 299, 303, 304, 310, 312, 313, 317, 319, 320, 321, 322, 324, 325, 326, 329, 330, 331, 332, 337, 338, 345, 348, 352, 360, 364, 365, 382, 384, 387, 395, 396, 405, 410, 413, 415, 418, 421, 443, 444, 565, 567, 574, 575, 586, 666, 704, 705, 707, 709, 749, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 860, 868, 869, 871, 919, 920, 921, 922, 997, 998, 1003, 1008, 1010, 1011, 1016, 1018, 1023, 1028, 1029, 1036, 1043, 1045, 1046], "model_selection_tut": 163, "model_step": 43, "model_titl": 146, "model_with_cf": 322, "moder": [275, 382, 424, 460, 1014], "modern": [43, 153, 422, 474, 510, 597, 697, 701, 737, 909, 1005, 1027, 1028, 1055], "modif": [382, 417, 421, 422, 452, 1021, 1056, 1057], "modifi": [109, 202, 227, 237, 238, 239, 251, 254, 330, 354, 382, 384, 396, 411, 414, 421, 424, 449, 453, 460, 465, 474, 488, 489, 490, 491, 502, 517, 588, 617, 618, 620, 626, 683, 685, 696, 700, 726, 736, 737, 775, 790, 791, 794, 935, 989, 990, 1004, 1021, 1022, 1028, 1033, 1034, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1058], "modified_fil": 382, "modified_hub": [46, 683, 1022], "modified_huber_loss": 227, "modified_tol": [696, 700], "modrak": [1054, 1055], "modroiu": 1008, "modul": [7, 11, 16, 30, 31, 71, 72, 84, 88, 110, 116, 119, 122, 123, 136, 166, 173, 184, 187, 188, 194, 196, 232, 236, 237, 259, 267, 291, 292, 293, 296, 309, 311, 312, 314, 333, 340, 355, 359, 362, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 394, 396, 399, 400, 408, 412, 414, 417, 421, 422, 423, 425, 450, 510, 542, 586, 587, 666, 947, 997, 1002, 1004, 1006, 1008, 1009, 1012, 1014, 1015, 1018, 1020, 1022, 1024, 1025, 1032, 1040, 1041, 1042, 1044, 1045, 1049, 1053], "modulo": [422, 1050], "moeller": 1045, "mogavero": 1049, "moham": [1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "mohamedbsh": 1054, "mohammad": [1047, 1048], "mohit": [1053, 1056], "mohn": [1047, 1051], "mohr": 1045, "moin": 1051, "mois\u00e9": 1020, "moitra": [1039, 1040, 1041], "mojca": 1050, "mojdeh": 1056, "mola": [1050, 1056], "molden": 1041, "molecul": 1005, "molin": 1054, "molla": [1040, 1041], "molnar": [191, 1015], "moment": [369, 419, 424, 446, 622, 630, 868, 869, 971, 1012, 1013], "momentum": [311, 868, 869, 1012], "mon": [43, 153, 191], "mona": [173, 181, 187, 424, 503, 618, 622, 629, 630, 632, 1029], "monaf": 1054, "monei": [0, 235, 1032], "monitor": [148, 202, 225, 385, 396, 560, 561, 566, 567, 568, 569, 1012, 1031, 1042, 1047, 1049, 1051], "mono": [653, 654, 659, 660, 667, 668, 669, 670, 688, 691], "monografia": 1004, "monomi": 218, "monotoinc": 325, "monoton": [2, 22, 43, 62, 136, 187, 191, 235, 247, 255, 325, 412, 564, 565, 566, 567, 568, 569, 571, 572, 639, 642, 643, 701, 713, 887, 899, 913, 916, 919, 920, 921, 922, 1005, 1009, 1018, 1023, 1029, 1046, 1050, 1054, 1056], "monotonic_cst": [153, 155, 325, 327, 331, 421, 564, 565, 568, 569, 571, 572, 919, 920, 921, 922, 1054, 1057], "mont": [249, 424, 618, 648, 649, 1000, 1013], "montecchio": 1043, "montesel": 1057, "month": [0, 43, 179, 191, 321, 377, 382, 386, 397, 1039], "month_co": 43, "month_sin": 43, "monthli": [179, 397, 1008], "montoya": 1046, "montreal": 329, "moodi": 1044, "moon": [275, 311, 317, 356, 357, 529], "moonkyung94": 1053, "moor": [0, 742, 1008, 1032, 1056], "moosmann": 573, "moradizadeh": 1053, "morai": 1057, "moral": [57, 356, 665, 1047, 1051, 1052, 1057], "morawiec": [1046, 1047], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 81, 84, 87, 88, 90, 92, 95, 102, 109, 113, 120, 121, 123, 126, 129, 130, 137, 138, 140, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 158, 170, 172, 174, 180, 183, 186, 187, 190, 191, 193, 195, 197, 198, 202, 203, 206, 208, 211, 215, 217, 218, 219, 221, 232, 233, 234, 235, 237, 241, 244, 249, 250, 251, 252, 254, 256, 260, 262, 263, 265, 266, 268, 269, 273, 275, 276, 277, 278, 282, 284, 289, 292, 294, 295, 297, 298, 305, 310, 311, 313, 315, 316, 317, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 335, 342, 345, 349, 350, 352, 354, 356, 357, 358, 360, 361, 364, 365, 369, 370, 371, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 388, 389, 390, 395, 396, 397, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 927, 929, 930, 951, 953, 955, 957, 970, 973, 991, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "moreau": [1045, 1046, 1047, 1048, 1049], "moreov": [163, 180, 317, 328, 365, 414, 418, 424, 904, 977, 1008, 1016, 1032, 1047, 1053, 1054], "moreyra": 1052, "morgan": [1020, 1024], "mori": 1054, "morikko": 1046, "morina": 1052, "moritz": [1052, 1054], "morn": 43, "moroz": 1045, "morril": 1039, "mors": 1050, "moslei": 1008, "mosley2013": 1008, "mosold": 158, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 87, 88, 90, 97, 111, 117, 118, 131, 137, 143, 144, 151, 153, 158, 167, 168, 169, 171, 172, 179, 186, 189, 190, 191, 192, 193, 195, 202, 217, 218, 235, 251, 255, 260, 266, 269, 272, 273, 278, 282, 283, 285, 289, 292, 294, 304, 315, 321, 322, 324, 327, 330, 332, 335, 345, 349, 356, 357, 358, 365, 369, 370, 371, 377, 378, 380, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 400, 405, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 449, 450, 452, 456, 462, 463, 466, 474, 503, 510, 528, 531, 539, 541, 546, 550, 556, 558, 568, 569, 573, 574, 595, 596, 598, 600, 611, 618, 634, 637, 656, 665, 679, 681, 683, 685, 694, 695, 699, 702, 732, 735, 765, 766, 770, 792, 801, 804, 805, 810, 811, 826, 839, 840, 853, 854, 855, 857, 859, 860, 861, 862, 863, 886, 888, 896, 897, 899, 900, 901, 902, 909, 928, 954, 955, 957, 970, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1016, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1056, 1058], "most_common": 57, "most_frequ": [278, 558, 634, 637, 861, 998, 1008, 1047, 1049, 1051], "mostli": [0, 2, 81, 104, 217, 235, 320, 384, 390, 394, 396, 419, 421, 422, 528, 786, 787, 1023, 1027, 1032, 1047, 1048, 1049, 1055], "mother": 1005, "motiv": [132, 382, 384, 396, 1000, 1008, 1018, 1032, 1052], "motmoti": 1049, "motoda": 414, "motor": 235, "motorcycl": [57, 377], "mottl": [1047, 1048], "moudgalya": [1055, 1056], "moufad": 1054, "moulavi": [414, 452], "mount": 390, "mountain": 1047, "mountford": [1055, 1056], "mous": 376, "mouseid": 376, "moussa": 1045, "move": [64, 146, 276, 313, 345, 381, 382, 388, 412, 414, 556, 557, 578, 579, 580, 582, 584, 585, 949, 950, 974, 1039, 1040, 1044, 1047, 1049, 1052, 1053, 1058], "moveabl": 415, "movelikeriv": 1048, "movement": 377, "movi": 422, "movie_entri": 422, "moya": 1051, "mp": 1004, "mpce": 57, "mpl": [70, 260, 261, 262, 266, 315], "mpl_toolkit": [50, 80, 102, 120, 129, 191, 214, 237, 239, 308], "mplot3d": [80, 102, 120, 129, 191, 214, 237, 239], "mpoemsl": 1053, "mppca": [541, 548], "mprun": 388, "mpy": 422, "mr": [329, 1040, 1043, 1053], "mrandrewandrad": 1045, "mrastgoo": [1054, 1056], "mrg": 390, "mridul": 1045, "mrinal": 1053, "mrinaltyagi": 1053, "mrl09": 419, "mrmjauh": 1046, "mro": [384, 431, 437, 1049, 1050], "mrs2008": 597, "msabati": 1053, "msc": 379, "mschaffenroth": 1049, "mse": [44, 46, 111, 112, 148, 150, 151, 185, 186, 217, 219, 221, 223, 290, 331, 654, 660, 1008, 1024, 1050, 1052], "mse_path_": [206, 654, 658, 660, 662, 668, 670], "mse_valu": 46, "mses_california": 186, "mses_diabet": 186, "msft": 51, "msg": [295, 991], "msle": 1008, "msm": [172, 379], "mssubclass": 158, "mst": 414, "msvc": 1042, "msvcp140": 1053, "mt19937": [282, 287, 940, 1050], "mthorrel": [1046, 1049], "mtrand": 365, "mtse": 686, "mu": [54, 113, 114, 275, 419, 427, 479, 481, 482, 485, 486, 487, 547, 554, 1002, 1004, 1046, 1049], "mu_i": 1010, "mu_j": 414, "mu_k": 1002, "muayyad": 1047, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 90, 113, 115, 121, 126, 132, 142, 150, 151, 158, 159, 160, 174, 185, 186, 190, 191, 192, 193, 195, 214, 215, 219, 248, 251, 254, 269, 275, 277, 278, 281, 286, 288, 312, 316, 320, 321, 322, 326, 327, 329, 345, 350, 356, 357, 365, 369, 370, 371, 377, 382, 383, 384, 387, 390, 394, 395, 400, 408, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 453, 454, 503, 541, 542, 543, 545, 566, 567, 568, 569, 665, 666, 673, 674, 675, 683, 684, 685, 699, 786, 787, 810, 811, 825, 886, 904, 911, 997, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1020, 1021, 1023, 1024, 1028, 1032, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "mudd": 1052, "mueller": [0, 403, 1032, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "muhammad": [1047, 1048, 1052], "mukherje": 1050, "mula": 1051, "multi": [2, 50, 67, 136, 138, 146, 156, 159, 161, 165, 176, 178, 187, 196, 202, 203, 206, 209, 216, 224, 233, 236, 239, 243, 244, 252, 255, 267, 272, 284, 294, 309, 316, 317, 318, 324, 329, 339, 350, 356, 359, 360, 361, 362, 364, 370, 377, 379, 385, 391, 396, 400, 414, 421, 422, 424, 431, 443, 458, 468, 475, 480, 502, 503, 511, 512, 517, 521, 522, 526, 527, 529, 548, 556, 557, 558, 560, 562, 564, 565, 566, 568, 571, 572, 574, 576, 617, 638, 640, 650, 653, 654, 659, 660, 664, 665, 667, 668, 669, 670, 673, 675, 679, 680, 681, 682, 683, 688, 691, 697, 710, 720, 727, 741, 747, 749, 790, 806, 807, 821, 829, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 858, 859, 861, 867, 868, 869, 872, 878, 891, 895, 906, 907, 911, 913, 916, 919, 920, 921, 923, 924, 925, 927, 931, 937, 940, 943, 997, 1009, 1011, 1015, 1018, 1022, 1027, 1028, 1029, 1030, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "multi_class": [209, 284, 324, 617, 665, 666, 795, 911, 927, 1004, 1009, 1023, 1039, 1043, 1047, 1052, 1054, 1057], "multi_confus": 761, "multi_label": [927, 929], "multi_layer_regressor": 421, "multi_output": [391, 931, 937, 996], "multi_target_forest": 1009, "multialign": 287, "multiarch": 390, "multiclass": [2, 31, 63, 66, 143, 196, 209, 233, 245, 252, 254, 257, 267, 272, 280, 282, 285, 294, 313, 342, 353, 377, 378, 384, 385, 387, 396, 405, 414, 421, 443, 458, 468, 495, 503, 511, 564, 566, 568, 571, 574, 575, 601, 609, 617, 638, 639, 640, 665, 666, 673, 675, 680, 681, 682, 683, 709, 713, 715, 736, 737, 741, 742, 745, 750, 761, 790, 791, 794, 795, 796, 801, 807, 808, 810, 811, 812, 813, 821, 823, 825, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 878, 892, 911, 913, 916, 919, 921, 969, 970, 971, 1002, 1004, 1018, 1019, 1023, 1024, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1054, 1055, 1056], "multicollinear": [144, 145, 151, 187, 188, 192, 281, 337, 417, 507, 571, 641, 662, 837, 1004, 1016, 1029], "multicor": [1051, 1052], "multidimension": [2, 417, 695, 697, 699, 701, 1005, 1011], "multigrid": 468, "multiindex": 1053, "multilabel": [2, 30, 31, 117, 119, 187, 243, 282, 292, 293, 377, 384, 385, 396, 409, 488, 493, 503, 504, 515, 516, 522, 530, 548, 564, 571, 574, 665, 681, 682, 710, 714, 720, 733, 736, 737, 741, 742, 745, 746, 761, 763, 790, 791, 794, 795, 801, 803, 837, 840, 842, 844, 868, 875, 878, 882, 884, 895, 916, 919, 921, 929, 943, 969, 970, 971, 1019, 1029, 1030, 1034, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057], "multilabel_": [840, 1044], "multilabel_confusion_matrix": [2, 720, 736, 737, 745, 791, 794, 1008, 1048], "multilabelbinar": [2, 396, 840, 875, 884, 1009, 1042, 1044, 1045, 1047, 1048], "multilay": [394, 1006], "multilearn": 1027, "multimetr": [718, 997, 1049, 1054, 1058], "multimetric_": [807, 810, 811, 821], "multimod": 244, "multinomi": [2, 47, 66, 187, 196, 208, 210, 226, 232, 252, 270, 284, 312, 353, 377, 378, 382, 419, 421, 503, 519, 530, 558, 560, 566, 568, 638, 665, 666, 748, 837, 840, 846, 847, 848, 849, 850, 891, 940, 1008, 1024, 1029, 1030, 1034, 1039, 1043, 1045, 1046, 1047, 1052, 1053, 1057], "multinomialdevi": 1050, "multinomialhmm": 1039, "multinomialnb": [2, 47, 371, 377, 422, 846, 847, 848, 849, 1010, 1041, 1043, 1046, 1047, 1051, 1052, 1054], "multiouput": 1049, "multioutput": [2, 41, 157, 284, 294, 396, 405, 437, 471, 488, 489, 490, 558, 561, 563, 564, 565, 567, 569, 571, 572, 575, 577, 618, 639, 640, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 795, 797, 798, 832, 840, 842, 843, 844, 845, 854, 862, 869, 878, 912, 914, 917, 919, 920, 921, 922, 943, 970, 971, 1008, 1029, 1030, 1034, 1039, 1040, 1041, 1045, 1046, 1052, 1053, 1058], "multioutput_arrai": 382, "multioutputclassifi": [2, 405, 795, 840, 842, 844, 1008, 1046, 1048, 1049, 1050, 1051, 1055, 1056], "multioutputregressor": [2, 157, 405, 437, 471, 488, 489, 490, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 843, 845, 854, 862, 869, 912, 914, 917, 920, 922, 1045, 1046, 1048, 1050, 1051, 1055, 1056], "multipl": [2, 25, 52, 81, 103, 106, 121, 132, 137, 143, 145, 146, 148, 168, 187, 190, 211, 249, 269, 275, 280, 283, 287, 292, 294, 297, 324, 330, 348, 369, 370, 371, 376, 378, 379, 382, 384, 385, 386, 387, 394, 396, 408, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 450, 466, 470, 472, 473, 475, 480, 494, 497, 499, 502, 503, 504, 510, 511, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 566, 567, 568, 569, 570, 588, 606, 614, 615, 617, 618, 634, 639, 641, 646, 647, 648, 649, 653, 654, 657, 659, 660, 661, 664, 667, 668, 669, 670, 673, 674, 675, 678, 680, 683, 685, 686, 696, 697, 699, 700, 701, 718, 728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 795, 797, 798, 800, 804, 805, 807, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 833, 834, 835, 837, 841, 842, 843, 844, 845, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 873, 876, 888, 892, 900, 903, 904, 911, 912, 913, 916, 933, 949, 954, 955, 978, 981, 1000, 1003, 1004, 1005, 1009, 1010, 1011, 1015, 1016, 1021, 1022, 1024, 1027, 1028, 1029, 1039, 1040, 1042, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "multipleloc": [237, 300], "multiplex": 1024, "multipli": [190, 221, 235, 275, 364, 369, 391, 396, 419, 421, 422, 427, 470, 481, 522, 545, 547, 548, 554, 564, 568, 571, 653, 655, 659, 661, 665, 666, 667, 669, 675, 676, 677, 679, 683, 684, 685, 687, 693, 694, 696, 700, 771, 913, 916, 919, 921, 943, 983, 984, 985, 997, 1000, 1004, 1008, 1022, 1050], "multiprocess": [394, 396, 973, 1011, 1039, 1047, 1053], "multirespons": 1004, "multiscal": 468, "multisurfac": [172, 379], "multitarget": 391, "multitask": [294, 422, 1009], "multitaskelasticnet": [2, 653, 654, 659, 668, 669, 670, 688, 1004, 1009, 1039, 1046, 1047, 1050, 1052], "multitaskelasticnetcv": [2, 405, 653, 654, 659, 667, 669, 670, 688, 1004, 1009, 1042, 1049, 1050, 1052, 1056], "multitasklasso": [2, 211, 659, 667, 670, 1004, 1009, 1039, 1047, 1050, 1052], "multitasklassocv": [2, 405, 668, 669, 1009, 1042, 1049, 1050, 1052, 1056], "multithread": [369, 414, 781, 785, 911, 912, 913, 914, 915, 916, 917], "multivari": [2, 123, 190, 374, 416, 419, 422, 479, 523, 524, 525, 634, 635, 636, 637, 656, 678, 685, 686, 846, 847, 848, 849, 850, 1002, 1004, 1007, 1010, 1027, 1034], "multivariate_norm": [115, 118, 260, 427, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487], "multiwai": 1024, "muma": 114, "mungui": 1052, "munoz": [1045, 1051], "muoki": 1051, "murad": 1042, "murashkin": 1043, "murata": [1052, 1053], "murder": 356, "murezzda": 1055, "murmurhash": 391, "murmurhash3": [2, 422, 589, 596, 972], "murmurhash3_32": [2, 391], "murmurhash3_x86_32": [391, 972], "murphi": [412, 650, 1001], "murrai": [1045, 1046], "music": 1032, "must": [90, 190, 191, 193, 199, 202, 234, 235, 244, 255, 270, 301, 316, 321, 356, 365, 377, 381, 382, 383, 384, 386, 388, 390, 396, 397, 405, 410, 412, 414, 415, 418, 419, 421, 422, 423, 424, 425, 435, 444, 447, 450, 451, 452, 453, 455, 456, 457, 461, 463, 465, 467, 468, 470, 472, 473, 475, 480, 493, 515, 516, 519, 530, 538, 544, 545, 546, 547, 548, 550, 551, 554, 560, 561, 566, 567, 568, 569, 574, 575, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 618, 624, 627, 634, 635, 636, 637, 638, 639, 640, 645, 649, 650, 655, 656, 659, 665, 666, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 706, 710, 713, 716, 742, 753, 771, 778, 781, 785, 788, 795, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 816, 817, 819, 821, 822, 823, 825, 826, 828, 832, 835, 837, 838, 846, 847, 848, 849, 850, 853, 854, 855, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 871, 874, 875, 876, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 911, 912, 913, 914, 915, 916, 917, 918, 924, 982, 991, 993, 996, 997, 998, 1004, 1005, 1006, 1008, 1011, 1012, 1014, 1015, 1022, 1023, 1024, 1039, 1042, 1046, 1050, 1052, 1053, 1056], "mutat": [365, 996, 1047], "mutual": [2, 72, 73, 84, 90, 93, 166, 187, 396, 421, 423, 452, 599, 602, 603, 606, 607, 613, 614, 615, 616, 711, 712, 722, 762, 764, 793, 802, 809, 824, 827, 997, 1004, 1008, 1009, 1029, 1039, 1045, 1055], "mutual_info_classif": [2, 106, 423, 599, 602, 603, 606, 607, 1045, 1051, 1054, 1057], "mutual_info_regress": [2, 167, 328, 423, 599, 602, 603, 606, 607, 616, 1045, 1046, 1051, 1053, 1054, 1055, 1057], "mutual_info_scor": [2, 72, 414, 711, 1008, 1047, 1050, 1051], "mu\u00f1oz": [1052, 1054], "mwestt": 1048, "my": [376, 382, 387, 390, 503], "my_custom_loss_func": 1008, "my_data": 387, "my_dataset": 493, "my_estim": [384, 415], "my_extra_param": 384, "my_featur": 382, "my_fil": 388, "my_func": [383, 388], "my_g": [426, 540], "my_group": [251, 405], "my_kernel": [341, 1023], "my_memb": [96, 98, 99], "my_other_weight": [251, 405], "my_pipelin": 1048, "my_script": 370, "my_test_script": 390, "my_token": 422, "my_weight": [251, 405], "myatt": [1048, 1049], "mycach": [515, 516], "mycluster": 432, "myenugula": 1057, "myer": [1042, 1046], "myestim": [384, 428, 430, 431, 433, 434, 435, 436, 437], "myestimator0": 430, "myestimator1": 430, "mymultioutputestim": 384, "mypi": [382, 386, 400, 407, 1050], "myself": 382, "mysvmlightfil": 515, "mytransform": [384, 438], "m\u00e9hault": [1047, 1048], "m\u00f6rtberg": 1045, "m\u00fcller": [0, 397, 419, 542, 877, 1012, 1018, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 93, 104, 109, 113, 117, 121, 123, 126, 128, 130, 132, 133, 137, 139, 140, 144, 160, 167, 170, 172, 174, 178, 183, 191, 193, 198, 202, 213, 217, 218, 221, 232, 234, 235, 237, 247, 248, 249, 252, 260, 262, 263, 273, 275, 278, 280, 281, 282, 284, 285, 288, 295, 298, 300, 313, 317, 319, 320, 326, 329, 331, 335, 349, 352, 364, 369, 376, 379, 380, 382, 386, 388, 390, 391, 396, 400, 401, 405, 411, 412, 414, 417, 418, 419, 420, 421, 422, 424, 425, 450, 451, 453, 454, 456, 475, 477, 480, 484, 495, 522, 523, 524, 525, 530, 535, 545, 547, 548, 554, 564, 565, 566, 567, 570, 571, 572, 573, 595, 596, 597, 598, 614, 615, 621, 634, 656, 678, 686, 699, 703, 706, 713, 714, 762, 812, 815, 817, 822, 823, 826, 847, 851, 852, 856, 876, 903, 905, 919, 920, 921, 922, 934, 953, 958, 959, 982, 986, 987, 997, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "n1": 126, "n2": 126, "n4": 126, "n_": [113, 114, 193, 275, 327, 414, 419, 421, 653, 659, 692, 703, 1000, 1004, 1008, 1010, 1011, 1015, 1018, 1020, 1023, 1024], "n_alpha": [222, 478, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 680, 682, 688, 689, 690, 691, 1042], "n_atom": 1040, "n_averag": 69, "n_bar": 186, "n_batch_iter_": 543, "n_best": 457, "n_bin": [61, 62, 64, 88, 217, 235, 316, 318, 322, 444, 445, 876, 1018], "n_bins_": 876, "n_bootstrap": [278, 1040], "n_bulk_repeat": 49, "n_byte": 248, "n_c": [414, 666], "n_call": [851, 852], "n_candid": [810, 811, 997], "n_candidates_": [287, 810, 811, 997], "n_candidates_0": 997, "n_candidates_i": 997, "n_categori": [322, 847, 885, 1018], "n_categorical_featur": [147, 568, 569, 639, 640], "n_categories_": 847, "n_center": [77, 519], "n_channel": [590, 591, 594], "n_class": [2, 45, 72, 121, 137, 139, 144, 146, 169, 171, 232, 238, 249, 252, 262, 282, 283, 284, 304, 305, 324, 361, 364, 365, 378, 382, 384, 396, 421, 443, 494, 495, 509, 522, 526, 530, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 600, 601, 611, 617, 641, 646, 665, 666, 673, 674, 675, 681, 682, 683, 684, 704, 714, 723, 725, 729, 742, 745, 748, 761, 795, 801, 806, 807, 810, 811, 821, 829, 832, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 853, 858, 860, 861, 868, 871, 878, 879, 882, 885, 892, 895, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 921, 923, 924, 942, 943, 1004, 1008, 1009, 1012, 1019, 1022, 1023, 1044, 1045, 1046, 1048, 1049, 1050, 1056], "n_classes_": [558, 560, 562, 564, 566, 571, 617, 839, 840, 919, 921, 1040, 1049, 1051], "n_classes_pr": [721, 762], "n_classes_tru": [721, 762], "n_classifi": [66, 576, 577], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 123, 328, 357, 382, 396, 414, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 468, 469, 518, 520, 717, 799, 800, 1039, 1043, 1045, 1047, 1048, 1050, 1053], "n_clusters_": [73, 84, 90, 98, 447, 451], "n_clusters_list": 78, "n_clusters_per_class": [67, 141, 169, 171, 272, 305, 310, 317, 378, 387, 522, 612, 614], "n_clusters_rang": 72, "n_clusters_tru": 96, "n_col": [45, 57, 123, 253, 429, 457, 459, 518, 520, 639], "n_color": 83, "n_column": [411, 457, 459], "n_column_clust": [457, 459, 520], "n_comp": [133, 195], "n_comparison": 275, "n_compon": [43, 44, 45, 51, 54, 79, 87, 92, 93, 94, 104, 106, 107, 108, 117, 118, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 156, 195, 216, 237, 238, 239, 240, 241, 242, 244, 248, 249, 252, 256, 260, 261, 262, 263, 264, 265, 266, 274, 299, 304, 313, 320, 326, 328, 331, 332, 357, 384, 387, 388, 396, 415, 417, 419, 426, 457, 458, 468, 470, 488, 489, 490, 491, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 646, 647, 648, 649, 695, 696, 697, 698, 699, 700, 701, 702, 703, 804, 805, 860, 867, 870, 903, 904, 905, 955, 1000, 1002, 1005, 1007, 1011, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1058], "n_components_": [107, 130, 396, 447, 451, 541, 545, 546, 547, 548, 549, 550, 903, 904, 1048, 1050], "n_components_fa": 130, "n_components_pca": 130, "n_components_pca_ml": 130, "n_components_rang": 248, "n_connected_compon": 469, "n_connected_components_": [447, 451, 1048], "n_core": 143, "n_core_sampl": [425, 450], "n_cpu": [370, 396], "n_cv": [418, 443], "n_cv_alpha": [658, 662], "n_cv_fold": [147, 321, 813, 830, 835, 838], "n_digit": 93, "n_dim": [484, 534, 536, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 1056], "n_dimens": [804, 805], "n_dimensions_of_x": [913, 914, 915, 916, 917], "n_dir": 53, "n_e": 414, "n_element": [424, 624], "n_encoded_featur": [884, 885], "n_error": 302, "n_error_outli": [231, 301, 344], "n_error_outliers_sgd": 231, "n_error_test": [231, 301, 344], "n_error_test_sgd": 231, "n_error_train": [231, 344], "n_error_train_sgd": 231, "n_estim": [46, 49, 63, 67, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 156, 157, 160, 185, 193, 238, 253, 257, 262, 272, 287, 317, 324, 326, 369, 395, 396, 421, 423, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 639, 810, 811, 997, 1014, 1015, 1036, 1047, 1055], "n_estimators_": [148, 566, 567], "n_estimators_ful": 148, "n_exampl": 47, "n_face": 253, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 87, 93, 95, 96, 111, 112, 113, 114, 115, 121, 123, 130, 137, 139, 141, 143, 144, 169, 171, 172, 185, 186, 195, 197, 200, 202, 203, 211, 212, 216, 220, 221, 232, 234, 238, 244, 248, 249, 251, 260, 265, 272, 278, 282, 284, 285, 287, 288, 305, 310, 317, 324, 325, 326, 328, 330, 331, 332, 352, 356, 357, 358, 365, 369, 375, 376, 378, 382, 384, 387, 394, 395, 396, 405, 414, 416, 417, 419, 421, 422, 425, 426, 427, 429, 431, 432, 433, 436, 437, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 499, 501, 508, 511, 515, 516, 519, 522, 523, 526, 528, 530, 531, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 717, 732, 765, 766, 767, 768, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 929, 955, 982, 983, 984, 985, 986, 987, 988, 989, 990, 996, 1000, 1004, 1009, 1011, 1012, 1018, 1022, 1023, 1024, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "n_feature_influ": 49, "n_features_": [171, 600, 601, 1052, 1054], "n_features_a": 860, "n_features_b": 860, "n_features_in_": [384, 396, 435, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 634, 635, 636, 637, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 996, 1050, 1052, 1054, 1057], "n_features_max": 69, "n_features_missing_ind": 637, "n_features_new": [438, 448, 451, 539, 541, 543, 544, 546, 549, 550, 556, 574, 576, 577, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 635, 637, 642, 645, 646, 647, 648, 649, 860, 867, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 903, 904], "n_features_opt": 106, "n_features_out": 637, "n_features_out_": 890, "n_features_rang": 69, "n_features_to_comput": 1047, "n_features_to_select": [170, 172, 326, 423, 600, 609, 1051, 1053], "n_features_to_select_": 609, "n_features_with_miss": 636, "n_features_with_missing_": 634, "n_fold": [163, 654, 658, 660, 662, 666, 668, 670, 1040, 1041, 1045], "n_gram_rang": 1039, "n_group": [418, 816, 1045], "n_i": [1010, 1018], "n_imag": 273, "n_index": [853, 854, 855, 857, 859, 861, 862], "n_inform": [62, 64, 67, 141, 144, 169, 171, 197, 202, 220, 221, 272, 278, 288, 305, 310, 317, 324, 352, 378, 387, 522, 531, 560, 561, 562, 563, 571, 572, 612, 613, 614, 615, 616, 653, 654, 659, 667, 668, 669, 672, 688, 689, 690, 841, 929, 1009, 1047], "n_init": [57, 77, 78, 80, 85, 92, 93, 96, 99, 237, 238, 239, 240, 325, 328, 357, 414, 449, 453, 455, 457, 458, 459, 465, 468, 697, 701, 804, 805, 1039, 1047, 1053, 1054, 1055], "n_init_rang": 96, "n_inlier": 244, "n_input_features_": 1052, "n_instanc": [49, 640], "n_iter": [45, 55, 105, 153, 174, 225, 276, 283, 295, 313, 347, 384, 388, 395, 426, 460, 484, 539, 540, 551, 552, 553, 554, 653, 654, 659, 660, 667, 668, 669, 670, 688, 689, 690, 691, 692, 693, 694, 699, 701, 810, 811, 819, 821, 867, 869, 954, 955, 997, 1022, 1040, 1045, 1046, 1047, 1051, 1053, 1054, 1055, 1057], "n_iter_": [43, 126, 153, 225, 263, 396, 446, 453, 454, 455, 477, 478, 488, 489, 490, 538, 539, 540, 543, 544, 545, 546, 547, 550, 568, 569, 634, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 686, 687, 697, 699, 804, 805, 860, 868, 869, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 1043, 1046, 1047, 1049, 1052, 1053, 1055], "n_iter_no_chang": [46, 143, 148, 153, 225, 327, 356, 387, 396, 421, 566, 567, 568, 569, 673, 674, 675, 683, 684, 685, 868, 869, 1022, 1047, 1050], "n_iter_search": 283, "n_iter_without_progress": [238, 699, 1044, 1045], "n_iterations_": [287, 810, 811], "n_iters_": 1045, "n_job": [52, 89, 106, 107, 143, 144, 145, 150, 151, 158, 171, 172, 185, 190, 191, 192, 193, 238, 240, 256, 269, 274, 276, 277, 279, 288, 292, 295, 324, 325, 326, 329, 352, 370, 382, 396, 421, 425, 443, 450, 452, 454, 456, 458, 461, 462, 463, 464, 467, 470, 473, 478, 538, 542, 543, 544, 546, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 601, 609, 614, 615, 617, 639, 641, 646, 654, 658, 660, 662, 664, 665, 666, 668, 670, 672, 673, 675, 683, 686, 695, 696, 697, 698, 699, 700, 701, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 870, 873, 906, 907, 973, 997, 1008, 1009, 1011, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1057], "n_k": [414, 557], "n_kernel": 619, "n_kernel_param": [617, 618], "n_knot": [43, 218, 327, 890, 1018, 1052], "n_l1_ratio": [654, 666, 668, 1042], "n_l1_ratios_": 666, "n_label": [51, 121, 252, 396, 493, 530, 720, 727, 733, 746, 747, 761, 763, 799, 800, 827, 1008, 1045, 1047], "n_labeled_point": [334, 335], "n_layer": [868, 869], "n_layers_": [868, 869], "n_leav": [469, 919, 920, 921, 922], "n_leaves_": [447, 451], "n_left": 570, "n_local_tri": 466, "n_m": 1024, "n_mask": 217, "n_missing_featur": 636, "n_missing_sampl": 186, "n_nearest_featur": [186, 634], "n_neighbor": [51, 79, 97, 102, 159, 185, 237, 238, 239, 241, 244, 254, 295, 297, 298, 301, 302, 303, 304, 307, 320, 324, 326, 356, 421, 458, 609, 614, 615, 635, 695, 696, 698, 700, 702, 703, 853, 854, 855, 857, 859, 860, 864, 906, 907, 998, 1005, 1011, 1014, 1021, 1046, 1053, 1055, 1056], "n_neighbors_": [698, 857], "n_neighbors_list": [254, 297], "n_neighbour": 1053, "n_node": [364, 447, 451, 469, 564, 565, 571, 572, 573, 919, 920, 921, 922, 961], "n_node_sampl": 364, "n_nodes_ptr": [564, 565, 571, 572, 573], "n_noise_": 84, "n_nonzero": 132, "n_nonzero_coef": [216, 533, 538, 544, 549, 552, 553, 555, 657, 671, 692, 693, 1057], "n_nonzero_coefs_": [671, 672, 1057], "n_nonzero_column": 358, "n_numerical_featur": 147, "n_order": 198, "n_original_featur": [599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "n_out": 573, "n_outlier": [113, 114, 154, 220, 244, 302], "n_output": [364, 396, 421, 431, 437, 438, 443, 448, 451, 471, 475, 488, 489, 490, 539, 541, 543, 544, 546, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 635, 637, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 683, 685, 686, 728, 730, 735, 752, 753, 755, 757, 758, 760, 761, 792, 795, 797, 798, 806, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 858, 860, 861, 862, 867, 868, 869, 870, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 903, 904, 906, 907, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 943, 978, 1008, 1009, 1024, 1046, 1049], "n_output_featur": 635, "n_output_features_": 886, "n_outputs_": [558, 559, 564, 565, 571, 572, 573, 868, 869, 919, 920, 921, 922], "n_oversampl": [457, 459, 548, 551, 955, 1053], "n_pack": [2, 958, 959], "n_patch": [590, 591, 594], "n_permut": [281, 418, 836], "n_pixel": [253, 273], "n_point": [270, 851, 852], "n_points_per_clust": 100, "n_popul": [391, 976], "n_possible_iterations_": [810, 811], "n_predict": 49, "n_pt": 53, "n_q": 414, "n_quantil": [109, 191, 319, 888, 900, 1048], "n_quantiles_": 888, "n_queri": [695, 853, 854, 855, 857, 859, 861, 862, 863], "n_random_featur": 206, "n_redund": [62, 64, 67, 144, 169, 171, 272, 278, 305, 310, 317, 378, 387, 443, 522, 560, 562, 571, 841], "n_refin": 478, "n_region": 81, "n_regions_plu": 81, "n_regressor": 577, "n_relevant_featur": 211, "n_remaining_candidates_": [810, 811], "n_repeat": [140, 144, 151, 171, 190, 192, 193, 275, 289, 292, 324, 418, 522, 641, 822, 823, 1016], "n_required_iterations_": [810, 811], "n_resourc": 997, "n_resources_": [287, 810, 811, 997], "n_resources_0": 997, "n_resources_i": 997, "n_restarts_optim": [180, 181, 424, 617, 618], "n_retri": [494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 1053, 1057], "n_row": [45, 57, 123, 411, 429, 457, 459, 518, 520], "n_row_clust": [457, 459, 520], "n_run": [72, 96, 195, 357], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 104, 109, 111, 112, 113, 114, 115, 118, 121, 123, 124, 128, 130, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 154, 155, 164, 165, 171, 172, 183, 185, 186, 189, 197, 199, 200, 202, 203, 204, 207, 209, 211, 212, 216, 217, 218, 220, 221, 225, 229, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 248, 249, 251, 254, 261, 263, 264, 265, 266, 272, 273, 275, 278, 279, 282, 284, 285, 286, 287, 288, 290, 295, 305, 317, 318, 319, 322, 325, 326, 328, 330, 331, 332, 336, 343, 346, 347, 352, 356, 357, 365, 375, 379, 382, 384, 387, 391, 394, 395, 396, 405, 413, 414, 416, 417, 418, 419, 421, 425, 426, 427, 429, 431, 432, 433, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 501, 508, 511, 515, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 628, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 777, 778, 779, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 929, 942, 943, 955, 957, 959, 969, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 996, 997, 1000, 1004, 1008, 1009, 1011, 1012, 1018, 1019, 1020, 1022, 1023, 1024, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "n_samples1": 877, "n_samples2": 877, "n_samples_": 548, "n_samples_1": [347, 1023], "n_samples_2": [347, 1023], "n_samples_a": [799, 800], "n_samples_fit": [437, 471, 488, 489, 490, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 695, 844, 845, 853, 854, 855, 857, 859, 861, 862, 863, 869, 912, 914, 917, 920, 922], "n_samples_fit_": [295, 853, 854, 855, 857, 859, 861, 862, 863], "n_samples_i": [619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 781, 782, 783, 784, 785, 786, 787, 788], "n_samples_per_cent": 96, "n_samples_rang": [112, 248], "n_samples_seen": 891, "n_samples_seen_": [541, 880, 881, 891, 1047], "n_samples_test": [288, 913, 914, 915, 916, 917, 1011, 1018], "n_samples_train": [288, 913, 914, 915, 916, 917], "n_samples_transform": [295, 855, 863], "n_samples_x": [618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 781, 782, 783, 784, 785, 786, 787, 788], "n_seed": 467, "n_selected_featur": [599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "n_skips_": 1046, "n_skips_invalid_data_": 678, "n_skips_invalid_model_": 678, "n_skips_no_inliers_": 678, "n_spline": [43, 890], "n_split": [43, 52, 143, 149, 153, 185, 186, 190, 262, 270, 275, 277, 280, 285, 289, 292, 331, 337, 345, 352, 365, 418, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 834, 1045, 1047, 1057], "n_splits_": [807, 810, 811, 821], "n_steps_": [126, 455, 544, 545, 1052], "n_subpopulation_": 686, "n_subsampl": [686, 943], "n_subsets_of_featur": 601, "n_support_": [913, 914, 915, 916, 917, 1023, 1049], "n_support_vector": 46, "n_sv": [913, 914, 915, 916, 917, 1023, 1049], "n_svd_vec": [457, 459], "n_t": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "n_t_l": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "n_t_r": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "n_target": [396, 417, 488, 489, 490, 491, 531, 563, 618, 650, 653, 654, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 678, 679, 680, 681, 682, 688, 691, 692, 693, 694, 1009, 1051, 1053, 1055], "n_task": [211, 1004], "n_test": [47, 49, 69, 140, 275, 1039, 1042], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [642, 734, 789, 796], "n_tick": [813, 830, 835, 838], "n_top": 283, "n_top_word": 54, "n_topic": [387, 543, 1046], "n_tot": 706, "n_total_sampl": [334, 335], "n_train": [47, 49, 69, 140, 275, 1039, 1042], "n_train_po": 47, "n_transformed_featur": 871, "n_tree": 46, "n_trees_per_iter": 568, "n_trees_per_iteration_": [566, 567, 568, 569], "n_trials_": 678, "n_uncorrelated_featur": 281, "n_unequ": 706, "n_unique_categori": 321, "n_unique_label": [736, 737, 745, 790, 791, 794, 971], "n_unique_tick": [813, 835], "n_valu": [830, 838, 1047], "n_values_": 1047, "n_values_feature_j": 640, "n_x": [89, 592], "n_y": [89, 592, 1010, 1018], "n_z": 592, "na": [634, 635, 636, 637, 776, 785, 935, 937, 938, 1049, 1050, 1053, 1054, 1055, 1056], "nabarun": 1047, "nabla": 1012, "nabsolut": 223, "nacross": 289, "nada": 57, "nadeau": [275, 1047], "nadia": 1051, "nadim": 1052, "nadirhan": 1053, "nadya": 1045, "nagarajan": [652, 1004], "nagarjuna": [1046, 1047], "nagasaka": 1052, "naghshhnejad": [1049, 1050], "naipawat": [1053, 1054], "naiv": [2, 32, 64, 67, 156, 275, 277, 294, 356, 358, 377, 412, 421, 422, 443, 551, 846, 847, 848, 849, 850, 1002, 1003, 1011, 1016, 1030, 1034, 1039, 1040, 1041, 1042, 1047, 1049, 1052, 1054], "naive_bay": [2, 47, 61, 62, 64, 67, 156, 160, 276, 277, 356, 365, 371, 377, 421, 443, 576, 846, 847, 848, 849, 850, 872, 1002, 1009, 1010, 1040, 1041, 1043, 1044, 1045, 1046], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 371, "naivebayesna": 402, "naivelycalibratedlinearsvc": [62, 64], "najera": 1046, "najork": [733, 763, 1008], "naka": 1052, "nakamura": 1053, "nakano": [1046, 1047], "nalepa": 1046, "naman": 1056, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 80, 93, 97, 105, 107, 109, 115, 124, 129, 140, 141, 142, 143, 147, 150, 153, 158, 190, 191, 192, 206, 215, 217, 219, 221, 223, 224, 232, 234, 235, 237, 238, 244, 250, 251, 253, 254, 258, 262, 269, 270, 272, 273, 276, 278, 279, 282, 284, 285, 289, 292, 295, 303, 304, 310, 311, 317, 319, 321, 328, 329, 332, 338, 350, 356, 357, 358, 370, 371, 376, 377, 380, 382, 384, 386, 387, 389, 390, 396, 400, 405, 411, 414, 418, 421, 422, 424, 428, 430, 435, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 583, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 697, 698, 699, 704, 705, 706, 707, 709, 715, 716, 718, 720, 739, 740, 749, 786, 787, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 819, 821, 825, 829, 830, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 936, 937, 938, 941, 946, 947, 948, 950, 963, 964, 965, 967, 970, 977, 991, 995, 996, 997, 1002, 1004, 1008, 1009, 1015, 1016, 1018, 1024, 1028, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "name_to_color": 321, "named_estim": [574, 575, 576, 577], "named_estimators_": [574, 575, 576, 577, 1047, 1049], "named_step": [107, 118, 170, 415, 600, 601, 604, 871, 872, 911, 912, 1004, 1046, 1048], "named_transform": [870, 1054], "named_transformers_": 470, "namedtupl": [2, 624, 1055], "namespac": 410, "namiya": 1046, "nan": [2, 109, 147, 153, 185, 186, 190, 235, 254, 256, 258, 270, 278, 321, 324, 329, 330, 331, 332, 369, 374, 391, 396, 421, 452, 474, 503, 562, 563, 564, 568, 569, 571, 600, 601, 604, 610, 613, 616, 634, 635, 636, 637, 642, 719, 720, 721, 723, 728, 729, 730, 731, 735, 736, 737, 776, 785, 790, 791, 792, 794, 807, 810, 811, 813, 821, 830, 833, 834, 835, 838, 880, 881, 885, 887, 888, 891, 892, 896, 899, 900, 902, 928, 935, 936, 937, 938, 982, 997, 1008, 1018, 1024, 1034, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058], "nan_euclidean": [635, 769, 785], "nan_euclidean_dist": [2, 324, 769, 998, 1049], "nandana": [1045, 1046, 1047], "nandiyawar": 1058, "nanshan": 1052, "nanta": 1042, "nanxin": 1047, "nanyang": 379, "naois": [1054, 1056], "naoki": [1041, 1051], "naoya": [1045, 1046, 1047, 1048], "naozin555": 1052, "napa": 321, "narasimhan": 858, "nardelli": 1042, "narendra": [1050, 1056], "narendramukherje": 1050, "narendran": 1047, "narin": [1046, 1047], "narinek": [1046, 1047], "narr": [382, 396, 665, 911, 916, 1039, 1040], "narrai": 601, "narrow": [52, 140, 150, 315, 317, 387, 851, 852], "nartayxd": 1053, "nasa": [104, 356, 357, 379], "nasdaq": 51, "naser": 1049, "nasir": 1047, "nass": 1054, "nastegiano": 1053, "nat": [614, 615, 711, 762, 764, 1053], "natasha": 1049, "natchiappan": [1052, 1053], "nate": [1045, 1046, 1052], "nath": [1047, 1058], "nathan": [542, 1047, 1051, 1054, 1057], "nathaniel": [1046, 1047, 1049], "nathansquan": 1053, "nati": 1054, "nation": [50, 113, 308, 377, 858], "nativ": [43, 153, 157, 179, 185, 269, 370, 377, 396, 408, 421, 503, 568, 569, 843, 844, 1004, 1008, 1009, 1027, 1049, 1051], "native_result": 147, "natl": [696, 700, 1005], "natur": [43, 64, 67, 143, 150, 181, 190, 191, 195, 202, 217, 218, 234, 235, 241, 254, 260, 266, 284, 294, 356, 382, 384, 396, 419, 421, 422, 425, 450, 456, 463, 558, 597, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 699, 711, 748, 762, 764, 853, 854, 855, 857, 859, 861, 862, 863, 890, 953, 1004, 1005, 1007, 1008, 1011, 1013, 1018, 1022, 1027, 1039, 1047], "naul": [1044, 1045], "nav": 51, "navarret": [1047, 1048, 1049], "navarro": 1054, "navi": [69, 104, 112, 127, 131, 132, 157, 197, 220, 228, 240, 261, 262, 263, 266, 282, 284, 300, 307, 336, 363], "navig": [390, 1041], "navin": 907, "navistar": 51, "navkal": 1047, "navractil": 1008, "navratil2007": 1008, "nawazish": [1054, 1055], "naziya": 1057, "nb": [47, 130, 156, 365, 848, 1010], "nbclaim": 235, "nber": 49, "nbr": [859, 1011], "nbrown": 1057, "nbrs_": [695, 696], "nbsp": [150, 206], "nbviewer": [51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364], "nbyte": [88, 248], "nca": [238, 303, 304, 305, 860, 1011], "nca_pip": 1011, "ncall": 388, "ncanip": 860, "nclass": 270, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 88, 92, 101, 123, 128, 133, 148, 191, 217, 218, 219, 225, 235, 237, 238, 247, 254, 269, 271, 277, 278, 286, 288, 289, 295, 298, 311, 316, 317, 319, 320, 329, 351, 352, 357, 378], "ncorrect": 275, "ncsu": [172, 379], "ncv": [457, 459], "nd": [1052, 1056], "ndarrai": [88, 93, 120, 217, 258, 273, 274, 275, 382, 383, 384, 388, 389, 410, 422, 425, 426, 429, 430, 432, 435, 436, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 504, 507, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 722, 725, 728, 729, 730, 731, 734, 735, 745, 752, 753, 755, 758, 760, 761, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 796, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 934, 935, 936, 937, 942, 943, 952, 954, 955, 956, 957, 962, 969, 971, 972, 976, 979, 980, 982, 983, 984, 985, 988, 993, 994, 996, 1008, 1023, 1028, 1042, 1046, 1049, 1050, 1053, 1054, 1055, 1056], "ndata": 281, "ndataset": [232, 317], "ndbscan": 100, "ndcg": [733, 763, 1008, 1046], "ndcg_score": [2, 733, 1008, 1046, 1049, 1054, 1055], "ndenumer": 229, "ndepend": 191, "ndim": [653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 937, 938], "ndimag": [53, 81, 82, 89, 313], "ndingwal": 1046, "ndirangu": [1049, 1053], "ne": [1008, 1011], "neal": [1004, 1052], "near_uniqu": 322, "nearbi": [414, 1011], "nearer": [2, 855, 863, 1011], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 85, 86, 89, 93, 96, 101, 106, 111, 115, 123, 126, 154, 164, 178, 186, 199, 208, 229, 233, 239, 242, 253, 254, 268, 278, 299, 301, 304, 305, 312, 313, 320, 341, 345, 350, 354, 374, 379, 391, 394, 396, 414, 420, 421, 425, 428, 438, 450, 452, 454, 456, 458, 463, 467, 468, 503, 509, 511, 614, 615, 634, 635, 637, 638, 642, 695, 696, 698, 699, 703, 799, 800, 807, 837, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 871, 872, 876, 891, 981, 1005, 1014, 1023, 1028, 1029, 1030, 1034, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1051], "nearest_neighbor": [79, 458, 698], "nearest_neighbor_algorithm": [853, 861, 862], "nearest_neighbors_algorithm": [854, 859], "nearestcentroid": [2, 306, 356, 1009, 1011, 1039, 1043, 1046, 1051, 1054], "nearestneighbor": [2, 295, 328, 400, 414, 425, 450, 452, 454, 467, 695, 696, 700, 853, 854, 855, 857, 861, 862, 863, 1011, 1039, 1043, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "nearli": [37, 62, 278, 377, 396, 771, 1008, 1011, 1020], "neat": 1039, "necess": [1005, 1011], "necessari": [46, 53, 141, 202, 217, 222, 260, 269, 275, 276, 282, 297, 349, 362, 369, 377, 380, 381, 382, 383, 384, 385, 386, 390, 394, 414, 416, 421, 458, 468, 494, 495, 497, 499, 500, 501, 502, 504, 541, 651, 652, 653, 659, 663, 664, 667, 668, 669, 670, 671, 672, 678, 680, 682, 683, 698, 702, 802, 874, 883, 894, 898, 904, 997, 1000, 1004, 1007, 1010, 1018, 1024, 1039, 1047], "necessarili": [43, 67, 106, 126, 190, 217, 225, 235, 249, 250, 261, 282, 317, 356, 357, 376, 408, 410, 412, 414, 421, 634, 859, 861, 862, 863, 1002, 1005, 1007, 1008], "need": [0, 30, 43, 48, 51, 68, 81, 83, 88, 90, 92, 115, 125, 135, 143, 147, 149, 150, 151, 153, 158, 172, 174, 179, 185, 186, 190, 204, 219, 234, 235, 238, 244, 247, 249, 251, 254, 255, 260, 261, 265, 266, 269, 273, 275, 277, 278, 280, 292, 294, 295, 297, 320, 324, 331, 337, 345, 356, 357, 365, 369, 370, 371, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 395, 396, 397, 399, 400, 405, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 430, 443, 447, 451, 455, 470, 471, 473, 510, 548, 558, 579, 589, 590, 595, 596, 597, 598, 634, 642, 645, 646, 647, 649, 656, 673, 675, 678, 683, 686, 699, 718, 727, 728, 729, 730, 731, 788, 792, 804, 805, 807, 810, 811, 821, 822, 823, 832, 840, 843, 851, 852, 868, 871, 874, 878, 883, 884, 888, 906, 913, 916, 928, 964, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021, 1022, 1023, 1024, 1028, 1032, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "needl": [172, 379], "needs_proba": [1048, 1056], "needs_threshold": 1056, "neeraj": 1046, "neg": [2, 42, 43, 45, 61, 95, 109, 111, 118, 143, 149, 150, 155, 187, 189, 190, 196, 207, 213, 215, 217, 235, 264, 265, 269, 272, 275, 278, 282, 284, 285, 289, 295, 315, 319, 328, 332, 356, 388, 396, 397, 414, 418, 421, 422, 423, 425, 426, 437, 446, 450, 458, 471, 475, 488, 489, 490, 494, 538, 540, 542, 543, 544, 545, 547, 549, 551, 554, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 595, 598, 599, 602, 603, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 684, 685, 686, 687, 694, 705, 706, 711, 712, 719, 720, 722, 723, 725, 726, 728, 729, 730, 731, 734, 736, 737, 738, 742, 745, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 789, 790, 791, 792, 794, 797, 798, 800, 804, 805, 813, 830, 832, 837, 844, 845, 854, 857, 862, 869, 878, 887, 889, 890, 895, 899, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 938, 953, 955, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1022, 1023, 1029, 1033, 1034, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1058], "neg_": [813, 830, 1045], "neg_brier_scor": [1008, 1049], "neg_label": [269, 289, 878, 895], "neg_log_loss": [64, 269, 1008], "neg_lr": 278, "neg_lr_bas": 278, "neg_lr_base_std": 278, "neg_max_error": [1008, 1058], "neg_mean_absolute_error": [43, 158, 219, 1008], "neg_mean_absolute_percentage_error": [52, 147, 1008, 1016], "neg_mean_gamma_devi": 1008, "neg_mean_pinball_loss_05p_scor": 150, "neg_mean_pinball_loss_95p_scor": 150, "neg_mean_poisson_devi": 1008, "neg_mean_squared_error": [185, 186, 219, 250, 290, 331, 834, 1008, 1016, 1045], "neg_mean_squared_log_error": 1008, "neg_median_absolute_error": 1008, "neg_root_mean_squared_error": [43, 153, 321, 1008], "neg_root_mean_squared_log_error": 1008, "neg_root_mean_squared_log_error_scor": 1056, "negat": [396, 813, 830, 1008], "negate_scor": [250, 813, 830], "negative_class": 719, "negative_likelihood_ratio": [278, 719], "negative_linestyl": 244, "negative_loglik": 111, "negative_mahal_dist": 475, "negative_outlier_factor": 857, "negative_outlier_factor_": [254, 302, 857, 1014], "neglig": [190, 1011, 1042, 1056], "neigh": [788, 853, 854, 855, 857, 859, 861, 862, 863], "neigh_dist": [853, 854, 855, 857, 859, 861, 862, 863], "neigh_ind": [853, 854, 855, 857, 859, 861, 862, 863], "neighbor": [2, 51, 67, 74, 79, 82, 95, 101, 106, 153, 154, 156, 159, 164, 185, 186, 199, 238, 239, 241, 242, 244, 253, 254, 268, 278, 299, 300, 301, 302, 304, 305, 306, 308, 312, 326, 328, 329, 356, 374, 379, 391, 394, 396, 400, 414, 420, 421, 422, 425, 428, 438, 447, 450, 451, 452, 454, 456, 458, 463, 464, 467, 469, 503, 509, 511, 570, 577, 609, 614, 615, 634, 635, 638, 695, 696, 697, 698, 699, 700, 702, 703, 788, 807, 837, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 871, 872, 891, 907, 915, 981, 1009, 1014, 1028, 1029, 1030, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "neighbor_feat_idx": 634, "neighborhood": [2, 90, 115, 131, 164, 187, 237, 296, 297, 298, 306, 307, 379, 396, 414, 419, 425, 450, 456, 463, 509, 511, 522, 548, 556, 635, 638, 703, 837, 853, 854, 857, 859, 860, 861, 862, 863, 865, 871, 872, 891, 1005, 1014, 1029, 1030, 1034, 1048], "neighborhoodcomponentanalysi": 304, "neighborhoodcomponentsanalysi": [2, 238, 303, 304, 305, 1011, 1048, 1053, 1057], "neighbors_algorithm": [695, 696], "neighborsbas": [1051, 1054], "neighborsclassifi": [859, 861, 862, 863, 1039], "neighborsregressor": 1039, "neighbour": [452, 468, 699, 1013], "neighbourhood": [860, 1011], "neighbourhood_components_analysi": 860, "neil": 1051, "neill": 1051, "neither": [186, 190, 324, 356, 365, 394, 412, 443, 601, 635, 941, 1011, 1024], "nelder": 1004, "nell": [0, 403, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051], "nelson": [0, 1045, 1046, 1051, 1057], "nemour": 51, "neo": 1047, "nep": 1049, "neptun": 1027, "neq": [414, 1008, 1010, 1018], "ness": [186, 235], "nest": [128, 137, 187, 206, 251, 267, 269, 270, 292, 331, 370, 388, 396, 400, 414, 418, 424, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 468, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 511, 526, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 812, 821, 829, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1008, 1011, 1029, 1039, 1040, 1043, 1045, 1046, 1047, 1053], "nested_lin": 280, "nested_scor": 280, "nesterov": [311, 868, 869, 1012, 1055, 1056], "nesterovs_momentum": [311, 868, 869], "nestor": 1054, "net": [2, 25, 67, 187, 196, 202, 203, 206, 208, 211, 228, 288, 388, 418, 477, 478, 484, 508, 531, 564, 565, 566, 567, 571, 572, 573, 653, 654, 659, 664, 665, 666, 667, 668, 669, 670, 675, 683, 685, 688, 689, 691, 867, 919, 920, 921, 922, 997, 1008, 1013, 1022, 1029, 1030, 1032, 1034, 1039, 1044, 1048, 1049, 1051], "netbsd": 1039, "neto": [597, 737, 1057], "nettei": 1052, "network": [34, 45, 254, 312, 369, 370, 371, 376, 377, 386, 396, 397, 408, 414, 419, 421, 426, 503, 540, 542, 574, 575, 703, 748, 868, 869, 1004, 1006, 1008, 1022, 1024, 1027, 1030, 1033, 1034, 1039, 1053, 1057], "networkx": [55, 391], "neural": [34, 44, 45, 67, 275, 312, 396, 408, 418, 419, 421, 426, 540, 542, 545, 547, 554, 574, 575, 646, 652, 703, 748, 804, 860, 867, 868, 869, 877, 1000, 1004, 1005, 1006, 1008, 1011, 1014, 1018, 1022, 1024, 1027, 1030, 1032, 1033, 1034, 1039, 1051], "neural_network": [2, 67, 187, 191, 255, 309, 310, 311, 312, 313, 371, 394, 867, 868, 869, 1009, 1012, 1029, 1041, 1056], "neuro": 1027, "neurodebian": 0, "neuroimag": [1026, 1032], "neuron": [868, 869, 1006, 1012], "neutral": 723, "nevalu": 158, "never": [143, 252, 332, 365, 382, 391, 394, 408, 413, 414, 415, 417, 418, 456, 463, 530, 562, 563, 564, 571, 871, 872, 996, 1000, 1018, 1049, 1052], "nevertheless": [43, 193, 421], "new": [2, 43, 46, 47, 49, 85, 91, 93, 95, 104, 105, 120, 130, 137, 139, 141, 142, 143, 148, 150, 153, 157, 158, 169, 172, 174, 180, 186, 192, 193, 217, 223, 231, 244, 251, 258, 269, 274, 277, 282, 294, 299, 301, 321, 325, 328, 331, 332, 335, 338, 344, 349, 365, 370, 371, 376, 377, 379, 380, 381, 384, 385, 386, 388, 390, 391, 395, 396, 397, 400, 408, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 439, 443, 444, 446, 448, 449, 451, 453, 454, 455, 458, 468, 469, 470, 478, 488, 489, 490, 511, 515, 516, 541, 548, 551, 562, 563, 564, 565, 570, 571, 572, 573, 588, 609, 637, 638, 642, 647, 648, 649, 652, 653, 659, 695, 696, 697, 704, 705, 707, 708, 709, 795, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 841, 857, 880, 881, 886, 887, 888, 890, 891, 892, 899, 900, 908, 926, 935, 940, 977, 982, 997, 998, 1000, 1004, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1020, 1021, 1022, 1023, 1028, 1032, 1034, 1037, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "new_data": [299, 384], "new_valu": [574, 575, 576, 577], "newaxi": [51, 53, 57, 61, 77, 115, 132, 138, 175, 199, 207, 213, 218, 219, 220, 222, 223, 234, 247, 249, 290, 300, 307, 362, 363, 411, 543, 1004], "newei": 1047, "newer": [174, 381, 400, 419], "newgroups20": 232, "newli": [380, 395, 421, 469, 1015, 1045, 1046, 1054], "newsgroup": [2, 46, 54, 57, 248, 276, 338, 357, 358, 375, 411, 422, 494, 495, 1034], "newsgroups_test": 377, "newsgroups_train": [377, 494], "newsgroups_vector": 495, "newsl": [892, 1018], "newslett": 376, "newswir": 377, "newton": [217, 235, 313, 617, 655, 665, 666, 676, 687, 868, 869, 1004, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "newton_cg": 1049, "next": [46, 62, 95, 113, 146, 147, 151, 161, 181, 189, 193, 210, 214, 217, 245, 251, 253, 257, 258, 262, 270, 281, 294, 320, 321, 322, 326, 335, 356, 360, 364, 365, 380, 382, 384, 386, 402, 408, 411, 414, 415, 418, 421, 515, 516, 617, 641, 699, 705, 707, 709, 788, 804, 805, 837, 973, 997, 1001, 1007, 1008, 1018, 1032, 1036, 1039, 1052, 1053], "nezar": 1049, "nff": 706, "nfit": 335, "nfkd": [595, 596, 598, 1049], "nfor": 252, "nfrom": 179, "nft": 706, "ng": [414, 419, 698, 857, 1012, 1014, 1050], "ngiam": 1012, "ngo": 1051, "ngram_rang": [276, 338, 422, 595, 596, 598], "ngram_vector": 422, "ngroup": 270, "ngshya": 1050, "nguyen": [1049, 1050, 1053, 1054], "nguy\u1ec5n": 1054, "ni": [1045, 1050], "nic": 1052, "nice": [43, 102, 218, 251, 315, 369, 419], "nicer": 638, "nichol": 1043, "nichola": [1047, 1048, 1050], "nicholson": [1045, 1046, 1047], "nick": [172, 379, 1039, 1045, 1046, 1047, 1048], "nicki": 1053, "nickledav": 1045, "nicknam": 377, "nico": [1045, 1052], "nicol": 1046, "nicola": [0, 172, 403, 665, 1004, 1021, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "nicolashug": 1048, "nicolasservel": 1050, "nicolau": 1047, "nicula": [0, 123, 403, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "niculescu": [62, 64, 412, 443, 445], "nidhin": 1049, "niederb\u00fchl": 1047, "niederhut": [1047, 1049], "nielsen": [750, 1047], "nielsenmarkus11": [1046, 1047], "nigam": [846, 1010], "nigel": 1052, "night": 52, "nightli": [0, 370, 385, 386], "nightwalkx": 1055, "nihal": 1054, "nihar": 1047, "niket": 1053, "nikhil": 1053, "nikita": [1046, 1047, 1049, 1052, 1053, 1054], "nikla": [1049, 1050], "nikolai": [1042, 1043, 1044, 1045, 1047, 1048, 1053, 1055], "nil": 1051, "nilearn": 1027, "nilesh": 1047, "nilotp": [642, 644], "nima": 1054, "nima10khodaveisi": 1054, "ninertia": 99, "ningchi": 1045, "ninh": 195, "ninja": [380, 1032], "nip": [130, 379, 522, 548, 573, 648, 1008], "nipal": [417, 489, 490], "nipy_spectr": [51, 74, 81, 82, 86, 87, 95, 96, 129], "nirvan": [1047, 1051], "nishan": 1049, "nishihara": 1051, "nishu": 1055, "nist": [379, 1008], "nistir": 379, "nit": 382, "nithish": 1057, "nitinramvelraj": 1054, "nitish": 1046, "nitya": 1049, "niuk": 1055, "niyogi": 1005, "nizam": 1047, "nizhibitski": 1040, "nk": 703, "nkish": 1050, "nkmean": 79, "nl": [52, 388], "nl1_ratio": 208, "nlasso": 202, "nlathia": 1045, "nlearn": 311, "nlog": 180, "nlogn": 699, "nlp": [377, 419, 422, 846, 850, 1006, 1032], "nls_max_it": 1044, "nltk": [422, 1026, 1027], "nm": 369, "nmcd": 113, "nmd": 240, "nmean": 127, "nmf": [2, 11, 54, 106, 388, 422, 542, 545, 551, 554, 1033, 1034, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "nmf_estim": 123, "nmi": [72, 414, 724, 743, 744, 764], "nmixtur": 79, "nmle": 113, "nmse": [44, 290], "nmslib": 295, "nmslib_": 295, "nmslibtransform": 295, "nn": [253, 422, 702], "nn_candid": 287, "nn_compon": [248, 249], "nn_sampl": [248, 287], "nndsvd": [419, 545, 547, 554, 1048, 1051], "nndsvda": [54, 419, 545, 547, 554, 1048, 1051], "nndsvdar": [419, 545, 547, 554, 1048], "nneq": 706, "nnl": [212, 664], "nnlnr": [1054, 1055], "nnmf": [422, 1033, 1034, 1039], "nntp": [356, 377], "nnz": [203, 357, 377, 706], "no_chang": 908, "no_interact": [568, 569, 1054], "no_mathjax": 382, "no_structur": [79, 97], "no_valid": [930, 996], "no_weight": 230, "no_weights_handl": 230, "noa": [1050, 1056], "noah": 1004, "noc": 51, "noced": 665, "nodar": 1052, "node": [2, 51, 76, 147, 151, 202, 324, 330, 331, 360, 364, 390, 391, 414, 416, 419, 421, 447, 448, 451, 469, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 657, 661, 663, 689, 690, 699, 851, 852, 919, 920, 921, 922, 923, 925, 961, 1011, 1013, 1014, 1015, 1024, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1056, 1058], "node_count": [324, 360, 364, 919, 920, 921, 922], "node_depth": 364, "node_id": [364, 923, 925], "node_idx": 364, "node_ind": 364, "node_index": 364, "node_position_model": 51, "noel": [0, 404, 1039, 1040, 1041, 1042, 1043, 1051], "noelano": 1051, "nof": 154, "nogil": 383, "noinfo": 254, "noir": 321, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 84, 87, 89, 90, 96, 97, 102, 109, 118, 123, 124, 126, 128, 130, 138, 140, 150, 155, 156, 173, 174, 175, 179, 183, 187, 197, 199, 200, 202, 206, 207, 212, 215, 216, 219, 220, 221, 222, 234, 240, 242, 244, 246, 247, 250, 275, 283, 288, 290, 307, 310, 311, 317, 322, 325, 331, 351, 362, 363, 365, 378, 384, 387, 412, 414, 419, 421, 423, 424, 425, 450, 452, 458, 518, 520, 521, 522, 523, 524, 525, 529, 531, 532, 537, 539, 541, 548, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 628, 629, 631, 632, 651, 652, 656, 657, 658, 660, 661, 662, 663, 670, 671, 672, 678, 686, 692, 693, 699, 888, 900, 906, 929, 1001, 1003, 1004, 1005, 1008, 1011, 1021, 1029, 1040, 1045, 1050, 1052, 1053], "noise_coef": 89, "noise_kernel": 179, "noise_level": [174, 179, 180, 619, 632], "noise_level_bound": [179, 180, 632], "noise_level_grid": 180, "noise_std": 181, "noise_vari": [204, 539, 663, 1004, 1053], "noise_variance_": [123, 204, 539, 541, 548, 663, 1046, 1053], "noise_variance_init": 539, "noiseless": [126, 1006], "noisi": [44, 69, 84, 90, 97, 124, 137, 168, 174, 180, 202, 216, 219, 240, 247, 266, 276, 282, 284, 285, 288, 320, 362, 363, 365, 414, 422, 424, 425, 450, 452, 456, 528, 531, 955, 1003, 1005, 1011, 1023], "noisier": 1005, "noisili": 191, "noisy_circl": [79, 97], "noisy_moon": [79, 97], "noiz": 117, "nolan": 1056, "noll": [217, 235], "nomenclatur": [1004, 1045], "nomin": [191, 376, 396, 397, 421, 422, 588, 589, 723, 1018, 1028], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 84, 92, 97, 105, 109, 113, 115, 124, 125, 126, 128, 139, 147, 155, 156, 158, 168, 169, 171, 178, 180, 186, 187, 189, 190, 191, 192, 193, 196, 197, 202, 203, 205, 207, 210, 211, 213, 215, 216, 218, 219, 223, 231, 232, 233, 235, 240, 241, 245, 246, 247, 248, 250, 254, 260, 262, 266, 267, 268, 269, 270, 275, 284, 292, 295, 299, 301, 313, 315, 317, 319, 320, 325, 326, 327, 328, 330, 331, 338, 340, 342, 347, 348, 349, 352, 353, 356, 357, 358, 364, 365, 369, 370, 374, 377, 378, 382, 383, 384, 387, 388, 390, 391, 394, 396, 397, 408, 412, 414, 415, 418, 420, 421, 422, 423, 424, 426, 443, 447, 451, 452, 456, 458, 462, 468, 469, 470, 471, 473, 474, 494, 503, 504, 510, 511, 515, 533, 539, 542, 543, 545, 547, 551, 554, 556, 558, 559, 560, 564, 565, 566, 567, 568, 569, 571, 572, 573, 579, 595, 596, 598, 599, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 638, 642, 645, 650, 657, 659, 664, 665, 666, 667, 671, 672, 673, 674, 675, 676, 679, 683, 684, 685, 692, 693, 694, 695, 696, 697, 698, 699, 701, 705, 706, 709, 713, 714, 719, 722, 724, 726, 727, 733, 734, 735, 742, 744, 746, 747, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 785, 789, 792, 795, 796, 797, 798, 801, 804, 805, 807, 808, 812, 814, 815, 816, 817, 819, 825, 833, 837, 840, 859, 861, 862, 863, 866, 871, 872, 874, 875, 876, 879, 883, 884, 885, 886, 887, 888, 890, 891, 898, 899, 900, 901, 902, 904, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 936, 937, 938, 953, 955, 959, 962, 970, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "non_determinist": [384, 930, 1053], "non_neg": [589, 1046], "non_negative_factor": [2, 1048, 1050, 1051, 1052, 1056], "non_nest": 280, "non_nested_scor": 280, "non_nested_scores_lin": 280, "non_noisy_label": 330, "non_outliers_mask": 315, "non_zero": [46, 51], "nonblasdotwarn": 1051, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 87, 89, 90, 91, 97, 125, 128, 132, 141, 146, 147, 149, 152, 153, 165, 172, 175, 181, 182, 193, 197, 217, 218, 225, 228, 235, 237, 250, 251, 252, 254, 268, 270, 275, 276, 287, 300, 302, 306, 319, 322, 326, 327, 335, 338, 343, 345, 346, 349, 350, 351, 356, 357, 377, 378, 379, 382, 384, 389, 391, 396, 405, 408, 414, 418, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 714, 715, 716, 718, 719, 720, 721, 723, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 741, 742, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 930, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 947, 949, 954, 955, 958, 959, 961, 962, 966, 967, 970, 973, 976, 978, 981, 982, 988, 991, 992, 994, 996, 997, 1004, 1008, 1018, 1021, 1024, 1034, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "nonecheck": 383, "nonetheless": [396, 1008], "nonexist": 639, "nonflavanoid": 379, "nonlinear": [290, 327, 651, 695, 696, 700, 703, 877, 1004, 1005, 1013, 1018], "nonmetr": [697, 701, 1005], "nonneg": [414, 419, 459, 545, 547, 554, 888], "nonner": 1050, "nono": 402, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 402, "nonoisomapisomapspectralembeddingspectr": 402, "nonojustlookingjust": 402, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 402, "nonolinearsvclinear": 402, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 402, "nonopredict": 402, "nonopredictingstructurepredict": 402, "nonosvcsvcensembleclassifiersensembl": 402, "nonosvr": 402, "nonotoughlucktough": 402, "nonoverlap": 379, "nonparametr": [423, 424, 614, 615], "nonzero": [55, 57, 132, 216, 248, 279, 358, 411, 425, 450, 530, 531, 538, 544, 549, 555, 595, 598, 692, 693, 706, 853, 854, 857, 859, 861, 862, 1008], "nonzero_coef": 1004, "noptic": 100, "noptimum": 180, "noqa": [80, 102, 120, 129, 150, 172, 185, 186, 191, 214, 237, 239, 286, 287, 326, 356, 386, 586, 587, 634, 810, 811, 997, 1048], "nor": [150, 278, 356, 365, 369, 387, 394, 412, 422, 443, 452, 601, 941, 1012, 1024, 1050], "norbert": [0, 372, 1041, 1051, 1052, 1053], "nordbi": 1056, "nore\u00f1a": 1052, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 89, 126, 177, 180, 197, 202, 203, 208, 240, 260, 261, 262, 264, 266, 272, 276, 300, 315, 345, 357, 388, 391, 396, 414, 422, 423, 448, 449, 453, 465, 466, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 495, 538, 541, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 596, 597, 598, 604, 650, 653, 654, 659, 660, 664, 665, 666, 667, 668, 669, 670, 671, 679, 681, 683, 685, 688, 691, 692, 693, 697, 699, 700, 701, 777, 848, 883, 898, 911, 913, 916, 989, 990, 1001, 1004, 1006, 1008, 1018, 1022, 1042, 1044, 1046, 1050], "norm1": 470, "norm2": 470, "norm_diag": 534, "norm_laplacian": 702, "norm_ord": [604, 1046], "norm_y_weight": 1051, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 81, 92, 96, 97, 101, 107, 109, 111, 112, 113, 117, 118, 124, 137, 138, 140, 143, 149, 150, 153, 154, 155, 167, 177, 180, 181, 186, 187, 189, 190, 196, 197, 198, 199, 200, 202, 207, 210, 212, 215, 219, 220, 221, 223, 231, 235, 240, 254, 260, 265, 266, 268, 269, 272, 275, 281, 300, 301, 304, 314, 316, 320, 325, 328, 331, 332, 337, 345, 357, 358, 365, 374, 377, 378, 379, 382, 387, 391, 395, 396, 410, 411, 412, 414, 415, 417, 420, 421, 422, 426, 446, 455, 457, 458, 459, 468, 470, 471, 481, 488, 489, 490, 495, 503, 519, 522, 526, 533, 534, 540, 543, 548, 549, 551, 555, 556, 559, 560, 561, 564, 565, 566, 567, 569, 570, 571, 572, 573, 586, 587, 589, 595, 596, 597, 598, 618, 632, 634, 646, 665, 666, 676, 679, 683, 687, 694, 698, 702, 704, 710, 711, 713, 725, 731, 733, 741, 743, 748, 752, 756, 757, 759, 762, 763, 764, 768, 777, 801, 802, 803, 810, 811, 837, 839, 848, 850, 856, 857, 860, 871, 872, 875, 876, 879, 881, 884, 885, 886, 887, 888, 889, 891, 896, 897, 899, 900, 901, 902, 906, 907, 919, 920, 921, 922, 954, 955, 959, 983, 984, 989, 990, 1000, 1002, 1004, 1005, 1006, 1007, 1010, 1014, 1019, 1021, 1023, 1024, 1029, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "normalis": [190, 618, 795], "normalization_": [646, 1000], "normalize_compon": [1047, 1049], "normalize_i": [179, 183, 424, 618, 1053], "normalized_discounted_cumulative_gain": 763, "normalized_mutual_info_scor": [2, 72, 414, 743, 762, 802, 1008, 1047, 1053], "normalized_stress": [237, 697, 701, 1005, 1054], "normalized_weight": 199, "norms_squar": 693, "north": [379, 414], "northern": 321, "northrop": 51, "northwestern": 665, "norvan": 1049, "nose": [379, 1042, 1046], "nosetest": 1041, "not_memb": 190, "notabl": [251, 315, 376, 396, 413, 503, 735, 884, 1005, 1007, 1011, 1043, 1046, 1053], "notarstefano": [1047, 1048], "notat": [154, 396, 415, 419, 422, 597, 719, 1004, 1008, 1048, 1055], "notch": 1032, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 88, 101, 105, 106, 113, 115, 117, 118, 121, 126, 140, 141, 143, 146, 150, 151, 155, 172, 174, 181, 185, 189, 190, 191, 192, 193, 195, 204, 206, 210, 217, 218, 219, 221, 225, 231, 233, 235, 237, 238, 239, 241, 244, 245, 247, 249, 250, 251, 252, 254, 261, 269, 270, 271, 275, 278, 281, 283, 289, 294, 295, 297, 301, 302, 311, 315, 316, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 337, 339, 345, 349, 356, 364, 369, 370, 376, 379, 380, 382, 383, 384, 386, 388, 389, 394, 395, 396, 400, 405, 408, 409, 412, 414, 416, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 437, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 496, 503, 505, 516, 522, 526, 534, 537, 540, 541, 545, 546, 547, 548, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 604, 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 639, 640, 642, 643, 645, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 706, 707, 714, 715, 720, 722, 727, 728, 729, 730, 731, 735, 736, 737, 739, 741, 745, 748, 753, 761, 762, 765, 770, 771, 775, 777, 781, 785, 789, 790, 791, 792, 794, 795, 796, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 927, 928, 930, 933, 943, 945, 954, 955, 967, 970, 982, 991, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1034, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 383, 384, 388, 415, 474, 909, 1024, 1026, 1027, 1028, 1050, 1053], "notes_neighbor": 1039, "notfittederror": [2, 135, 396, 860, 991, 1043, 1045, 1048, 1049, 1055, 1056], "noth": [57, 104, 332, 356, 357, 387, 549, 721, 874, 883, 938, 1018], "nothman": [0, 397, 403, 422, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "notic": [46, 52, 62, 63, 70, 88, 92, 113, 140, 142, 143, 150, 153, 171, 197, 202, 244, 257, 272, 273, 275, 276, 278, 284, 285, 295, 320, 349, 356, 357, 358, 365, 384, 387, 397, 413, 418, 421, 503, 548, 570, 997, 1007, 1008, 1014, 1036, 1052], "notif": 386, "notifi": [2, 579, 580, 581, 1037, 1049], "notimplementederror": [560, 561, 898, 1046, 1056], "notin": 414, "notion": [284, 349, 357, 371, 394, 414, 419, 421, 1004, 1008], "notmatthancock": [1047, 1049], "noto": 1052, "notplancha": 1057, "noun": 396, "nouri": [369, 1040, 1042], "novak": 1042, "novarti": 51, "novaya": [1049, 1052], "novel": [231, 301, 344, 365, 412, 997], "novelti": [187, 231, 244, 254, 296, 302, 344, 857, 1029, 1030, 1033, 1034, 1039, 1047], "novemb": [172, 217, 235, 379, 386, 1044, 1045, 1047], "novic": 1041, "now": [43, 44, 46, 52, 55, 58, 88, 92, 105, 118, 128, 137, 138, 142, 144, 146, 147, 150, 151, 158, 161, 172, 174, 179, 180, 181, 186, 189, 190, 191, 192, 195, 197, 199, 203, 204, 206, 218, 219, 221, 241, 249, 251, 269, 271, 275, 278, 286, 287, 288, 289, 292, 298, 320, 325, 326, 328, 329, 330, 331, 332, 336, 345, 356, 357, 358, 365, 369, 371, 377, 382, 383, 384, 388, 394, 395, 396, 400, 411, 414, 418, 419, 421, 422, 426, 434, 500, 515, 516, 519, 543, 556, 586, 587, 589, 634, 637, 656, 660, 665, 670, 691, 733, 763, 804, 805, 810, 811, 843, 858, 870, 871, 982, 998, 1004, 1008, 1014, 1017, 1018, 1023, 1024, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "nowadai": 382, "nozawa": [1054, 1055], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 121, 124, 125, 126, 127, 129, 130, 132, 133, 138, 139, 140, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 165, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 294, 295, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 369, 376, 377, 382, 384, 387, 388, 391, 394, 396, 405, 411, 414, 415, 418, 419, 420, 421, 422, 424, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 491, 500, 503, 504, 507, 511, 515, 516, 517, 521, 522, 523, 524, 525, 526, 527, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 570, 571, 572, 573, 576, 577, 588, 589, 592, 593, 595, 596, 600, 601, 604, 608, 611, 613, 616, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 643, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 694, 698, 699, 701, 702, 706, 709, 710, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 750, 751, 755, 760, 761, 762, 763, 770, 776, 780, 785, 788, 789, 790, 791, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 833, 834, 835, 837, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 861, 862, 863, 867, 868, 875, 876, 878, 879, 884, 885, 886, 887, 888, 890, 891, 892, 899, 900, 903, 904, 905, 906, 907, 908, 911, 913, 914, 916, 917, 919, 920, 921, 922, 928, 933, 934, 935, 936, 937, 938, 940, 942, 943, 953, 954, 955, 961, 962, 969, 970, 972, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 997, 998, 1003, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1022, 1023, 1024, 1040, 1042, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "npach": [1054, 1055], "npo": 240, "npolynomi": 43, "nprior": 260, "npropag": 79, "nqy18": 422, "nreceiv": 284, "nrow": [43, 44, 66, 68, 70, 92, 101, 107, 123, 153, 183, 191, 217, 219, 225, 235, 237, 238, 241, 254, 269, 277, 278, 295, 317, 319, 320, 329, 335, 351, 352, 378], "nsampl": [384, 804, 805], "nswdemand": 153, "nswprice": 153, "nt": 55, "nt_uri": 55, "ntest": 304, "ntf": 706, "nth": [282, 714, 1008], "nthe": [191, 273, 364], "ntime": [50, 286], "nto": [223, 284], "ntol": 172, "ntrain": 85, "ntree": 43, "ntrue": [45, 334, 335], "ntt": 706, "ntu": [195, 376, 493, 515, 516, 665], "ntwo": 378, "nu": [2, 46, 48, 50, 183, 231, 244, 344, 369, 421, 424, 626, 684, 913, 914, 915, 1014, 1022, 1023, 1050, 1054], "nuanc": 396, "nuc": 292, "nuclear": [172, 379], "nuclei": [172, 379], "nudge_dataset": 313, "nuff": 1046, "nugmanov": [1047, 1048], "nuisanc": 424, "nukariya": [1051, 1052], "null": [79, 105, 190, 191, 192, 269, 275, 281, 414, 418, 503, 655, 676, 687, 711, 738, 764, 802, 836, 1004, 1005, 1008, 1023, 1049], "null_count": 52, "nullabl": [634, 635, 636, 637, 1050, 1054], "nullformatt": [237, 239, 242, 295], "nullloc": 300, "num": [43, 51, 105, 172, 174, 179, 180, 181, 191, 192, 219, 282, 283, 328, 330, 331, 421, 503, 639], "num_col": 258, "num_cor": 388, "num_depend": 269, "num_featur": [1006, 1054], "num_linear_processor": 158, "num_missing_cel": 153, "num_pip": 258, "num_preprocess": 470, "num_proc": [246, 325], "num_sampl": [807, 821, 1054], "num_selector": 158, "num_sent": 104, "num_thread": 295, "num_tree_processor": 158, "num_trial": 280, "numba": [295, 1028], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 92, 96, 97, 98, 102, 104, 105, 106, 107, 109, 115, 117, 118, 121, 123, 125, 127, 128, 130, 137, 138, 140, 143, 145, 146, 148, 149, 150, 151, 154, 158, 160, 168, 169, 170, 172, 182, 183, 186, 187, 190, 191, 195, 202, 206, 216, 217, 218, 219, 224, 225, 231, 232, 233, 234, 235, 237, 244, 248, 252, 254, 255, 260, 261, 263, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 288, 292, 295, 297, 301, 302, 315, 317, 318, 321, 324, 325, 326, 327, 328, 329, 330, 332, 338, 345, 350, 352, 357, 358, 360, 364, 365, 370, 371, 374, 376, 377, 378, 379, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 588, 589, 590, 591, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 710, 711, 712, 714, 719, 720, 721, 723, 725, 727, 731, 735, 736, 737, 738, 741, 742, 745, 747, 759, 762, 781, 785, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 937, 938, 941, 954, 955, 958, 959, 976, 978, 981, 982, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 101, 105, 109, 145, 147, 158, 172, 179, 182, 191, 192, 206, 217, 235, 254, 256, 258, 282, 305, 321, 327, 331, 358, 376, 377, 379, 385, 387, 388, 394, 395, 396, 410, 414, 416, 421, 422, 423, 424, 426, 427, 446, 449, 453, 465, 477, 478, 481, 484, 495, 496, 497, 503, 507, 508, 509, 511, 512, 517, 538, 540, 542, 547, 548, 554, 568, 569, 574, 588, 597, 618, 624, 627, 634, 637, 639, 640, 653, 659, 661, 679, 694, 697, 701, 721, 785, 795, 801, 807, 810, 811, 813, 821, 830, 833, 834, 835, 838, 846, 847, 848, 849, 850, 868, 869, 874, 879, 884, 885, 892, 923, 924, 925, 937, 938, 954, 955, 997, 998, 1004, 1005, 1009, 1016, 1018, 1019, 1024, 1031, 1032, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "numeric_featur": [105, 328], "numeric_onli": 191, "numeric_preprocessor": 256, "numeric_transform": [105, 328], "numerical_column": [190, 192, 473], "numerical_columns_subset": 147, "numerical_featur": [191, 321], "numerical_pip": 192, "numerical_transform": 105, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 138, 139, 140, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 165, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 294, 295, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 365, 369, 375, 376, 377, 380, 382, 383, 384, 385, 388, 390, 391, 394, 395, 396, 400, 405, 407, 408, 410, 411, 414, 415, 418, 419, 420, 421, 422, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 491, 496, 500, 501, 503, 510, 513, 515, 516, 528, 534, 538, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 576, 577, 588, 589, 592, 593, 595, 596, 598, 608, 611, 625, 634, 635, 636, 637, 638, 639, 640, 650, 653, 654, 656, 659, 660, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 679, 683, 684, 685, 691, 694, 695, 698, 699, 700, 701, 702, 706, 709, 710, 713, 714, 716, 719, 721, 733, 734, 736, 737, 739, 741, 742, 745, 746, 761, 763, 780, 786, 788, 789, 790, 791, 794, 795, 796, 801, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 834, 837, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 913, 914, 916, 917, 919, 933, 934, 935, 936, 940, 942, 952, 953, 954, 955, 959, 961, 962, 969, 970, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 997, 998, 1003, 1004, 1006, 1008, 1009, 1011, 1014, 1018, 1020, 1023, 1024, 1026, 1028, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "numpydoc": [382, 396, 400, 407], "nune": 1040, "nuniformli": 154, "nuniqu": 321, "nurseit": 1056, "nusvc": [2, 369, 443, 914, 1009, 1023, 1039, 1040, 1041, 1044, 1047, 1049, 1050, 1051, 1053], "nusvr": [2, 46, 369, 917, 1023, 1041, 1047, 1049, 1050, 1051, 1053, 1054], "nutshel": 1006, "nv": 51, "nvidia": [0, 394], "nvirginica": 284, "nwanna": 1054, "nweight": 160, "nwith": [72, 92, 96, 171, 357], "nx": [50, 308, 377, 505], "nxorabl": 1049, "ny": [50, 52, 274, 308, 377, 379, 505, 998, 1020], "nyc": [1026, 1032], "nymark": 1054, "nystroem": [2, 43, 185, 231, 244, 249, 374, 647, 648, 649, 684, 877, 916, 917, 1034, 1040, 1046, 1049, 1051, 1052, 1053], "nystroem_approx_svm": 249, "nystroem_scor": 249, "nystroem_tim": 249, "nystrom": [886, 1048, 1049], "nystr\u00f6m": [43, 1000], "nyu": [0, 860], "nz": 537, "nzw": 1047, "n\u00e1jera": [1043, 1044, 1045, 1046], "n\u00e1pole": 1052, "o": [0, 55, 57, 64, 66, 73, 84, 90, 95, 96, 98, 99, 115, 117, 125, 155, 172, 182, 204, 210, 215, 217, 232, 250, 260, 269, 275, 277, 284, 315, 316, 320, 325, 328, 331, 338, 349, 360, 369, 377, 379, 382, 390, 400, 414, 416, 419, 421, 425, 427, 450, 453, 454, 456, 479, 481, 506, 541, 611, 634, 673, 674, 699, 839, 867, 882, 923, 976, 1000, 1002, 1004, 1005, 1008, 1009, 1011, 1012, 1022, 1023, 1024, 1039, 1042, 1045, 1047, 1048, 1051, 1052, 1054, 1055, 1056], "oa": [2, 49, 65, 70, 110, 114, 115, 130, 152, 187, 304, 306, 416, 475, 476, 479, 480, 482, 483, 519, 556, 807, 1002, 1029], "oa_ms": 112, "oa_shrinkag": 112, "oak": 321, "oarc": 1004, "ob2019": 1008, "obaja": 1043, "obatin": 320, "obei": [396, 1006], "obj": [251, 408, 574, 575, 945, 964, 966, 967, 968, 973], "obj_func": [617, 618], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 85, 97, 101, 104, 105, 126, 135, 153, 158, 163, 171, 179, 187, 191, 202, 213, 217, 233, 235, 243, 251, 255, 257, 258, 269, 273, 282, 284, 285, 287, 308, 321, 327, 328, 330, 331, 334, 357, 358, 365, 375, 376, 377, 382, 383, 385, 387, 388, 389, 391, 395, 396, 397, 405, 408, 414, 415, 416, 419, 422, 423, 424, 428, 430, 435, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 718, 725, 739, 740, 749, 765, 766, 788, 789, 796, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 926, 937, 938, 939, 940, 941, 944, 945, 949, 951, 960, 962, 963, 964, 965, 966, 967, 968, 970, 972, 973, 992, 993, 995, 1004, 1005, 1006, 1007, 1011, 1014, 1015, 1018, 1021, 1022, 1023, 1027, 1028, 1029, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "object_nam": [251, 964, 967], "obozinski": 419, "obscur": [1015, 1055], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 88, 97, 105, 111, 113, 114, 115, 124, 125, 128, 130, 137, 140, 141, 143, 144, 150, 153, 154, 157, 172, 174, 177, 179, 180, 181, 183, 190, 191, 192, 197, 198, 212, 213, 215, 217, 218, 219, 221, 231, 235, 241, 242, 247, 248, 254, 269, 271, 275, 277, 278, 282, 288, 289, 295, 298, 301, 308, 320, 330, 332, 337, 344, 345, 349, 350, 356, 357, 358, 362, 363, 377, 379, 396, 400, 412, 414, 416, 417, 418, 419, 420, 423, 424, 447, 449, 451, 452, 453, 455, 465, 466, 475, 476, 477, 478, 479, 480, 481, 482, 531, 539, 558, 559, 570, 617, 618, 653, 659, 664, 708, 723, 725, 765, 828, 849, 857, 890, 892, 1004, 1007, 1008, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1031, 1040, 1052, 1053, 1054, 1055], "observatori": 179, "obsolet": [1039, 1055], "obstruct": 1046, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 83, 90, 92, 93, 105, 108, 109, 128, 130, 137, 147, 150, 151, 156, 163, 172, 176, 178, 190, 191, 202, 217, 219, 221, 231, 241, 254, 260, 261, 262, 269, 271, 275, 276, 277, 281, 284, 288, 298, 320, 327, 343, 349, 357, 358, 364, 365, 377, 379, 384, 396, 408, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 443, 448, 475, 503, 539, 540, 562, 563, 564, 565, 566, 567, 570, 571, 572, 600, 613, 621, 652, 666, 668, 673, 675, 679, 681, 683, 684, 694, 715, 719, 733, 746, 763, 800, 813, 830, 836, 839, 840, 843, 857, 868, 888, 900, 913, 916, 919, 920, 955, 997, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1045, 1047, 1050, 1052, 1053, 1054, 1055, 1056], "obviat": 1000, "obviou": [190, 349, 365, 369, 382, 411, 419], "obvious": [186, 369], "oc": 1054, "occas": 382, "occasion": [397, 734, 1048], "occup": [190, 315, 331, 503], "occupation_cler": 190, "occupation_manag": 190, "occupation_oth": 190, "occupation_profession": 190, "occupation_sal": 190, "occupation_servic": 190, "occupi": [414, 1008], "occur": [54, 104, 148, 217, 221, 235, 352, 365, 382, 390, 397, 411, 414, 416, 418, 422, 450, 515, 516, 579, 588, 597, 634, 678, 805, 807, 810, 811, 813, 821, 830, 833, 834, 835, 838, 881, 942, 1008, 1010, 1018, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "occurr": [2, 217, 321, 357, 358, 377, 382, 386, 414, 422, 576, 577, 588, 596, 597, 624, 634, 635, 636, 637, 790, 846, 874, 1010, 1040, 1045], "ocean": 308, "ocsvm": [48, 231], "oct": [699, 776, 1005, 1011], "octob": [112, 377, 1039, 1046, 1052, 1053, 1055], "od280": 379, "od315": 379, "odd": [278, 421, 521, 719, 1008, 1046, 1047], "ofcategoriesknownnumb": 402, "off": [44, 51, 53, 72, 74, 75, 82, 83, 87, 88, 111, 115, 117, 123, 143, 153, 171, 172, 187, 221, 238, 249, 253, 267, 268, 274, 276, 277, 278, 288, 292, 315, 332, 335, 337, 339, 345, 354, 356, 377, 382, 384, 396, 413, 414, 416, 423, 448, 503, 560, 561, 566, 567, 595, 598, 641, 663, 665, 699, 722, 804, 805, 807, 810, 811, 821, 823, 829, 834, 872, 891, 959, 1007, 1013, 1023, 1028, 1029, 1039, 1043, 1044, 1046], "offer": [43, 143, 205, 384, 390, 394, 395, 396, 400, 408, 418, 419, 421, 422, 997, 998, 1009, 1012, 1024, 1027, 1028, 1032, 1045, 1057, 1058], "offic": 1032, "offici": [377, 384, 394, 396, 400, 500, 504, 1027, 1047, 1048, 1051], "offlin": [269, 369, 382], "offset": [140, 195, 394, 416, 419, 475, 515, 516, 570, 639, 640, 648, 649, 651, 652, 684, 735, 782, 784, 857, 915, 1008, 1022, 1047, 1058], "offset_": [475, 570, 684, 857, 915, 1047], "offset_init": 684, "offsetbox": 238, "offsetimag": 238, "ofmulticlass": 1023, "often": [43, 57, 61, 62, 64, 69, 104, 108, 143, 153, 156, 178, 185, 190, 191, 218, 235, 238, 254, 262, 277, 280, 315, 320, 345, 354, 356, 357, 358, 369, 370, 376, 377, 379, 382, 384, 387, 390, 394, 395, 396, 399, 402, 408, 412, 414, 415, 416, 418, 419, 421, 422, 424, 426, 474, 528, 531, 540, 543, 639, 653, 654, 659, 660, 667, 668, 669, 670, 679, 681, 694, 735, 881, 889, 897, 909, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1018, 1021, 1022, 1024, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "og": 422, "ogbonna": 1052, "ogordon100": 1052, "ogrid": 53, "ogu": 422, "ogura": 1054, "oh": [884, 1049], "ohad": 1053, "ohayon": [1047, 1048, 1055], "ohio": 377, "ohno": 412, "oj_lappi": 1051, "oja": [426, 540], "ojala": [281, 418, 836], "ojeda": 1053, "ok": [49, 382, 1014], "okal": 1043, "okbalefthand": 1045, "okhlopkov": [1045, 1046], "okon": 1053, "okroshiashvili": 1052, "ol": [197, 207, 212, 214, 215, 223, 234, 327, 663, 1004], "ol2001": 998, "olatunji": 1054, "old": [235, 382, 386, 388, 414, 474, 543, 653, 659, 909, 1005, 1028, 1039, 1044, 1045, 1047, 1052, 1053, 1054], "olden": 1047, "older": [251, 381, 386, 408, 470, 1031, 1037, 1042, 1049, 1051], "oldest": 503, "oldid": 1008, "oldja": 1051, "oleg": 1049, "oleggio": 1043, "olegovich": 1046, "oleh": [1051, 1053], "oleksandr": [1047, 1048, 1049, 1050, 1053], "oleksii": 1056, "olemiss": 686, "olga": [635, 998], "oli": 1046, "oliblum90": [1046, 1047], "olicairn": 1050, "olimpio": 1047, "oliph": 1039, "oliv": [1047, 1048, 1050, 1051, 1052], "oliveira": [1045, 1047, 1049, 1053], "olivetti": [2, 123, 145, 375, 419, 502, 1034, 1039, 1047], "olivetti_fac": 502, "olivi": [0, 397, 403, 907, 1021, 1026, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "oll": 1054, "olr": 197, "olsen": 1046, "olshen": [919, 920, 1024], "olson": 1045, "olszewski": 1052, "olvi": [172, 379], "om": 1046, "omar": [0, 403, 1049, 1054, 1055, 1056, 1057, 1058], "omarmanzoor": 1055, "omega": [352, 417, 1002], "omega_": 1002, "omega_k": [417, 1002], "omer": 1044, "omit": [144, 189, 190, 339, 387, 427, 481, 541, 673, 675, 683, 814, 816, 839, 840, 843, 846, 847, 848, 849, 850, 868, 1006, 1013], "omohundro": 1011, "omp": [2, 126, 132, 216, 419, 538, 544, 549, 555, 671, 672, 692, 693, 1030, 1034, 1039, 1047], "omp_cv": 216, "omp_get_max_thread": 383, "omp_num_thread": 370, "omtcyfz": 1046, "onc": [2, 43, 47, 85, 169, 172, 174, 179, 238, 251, 254, 269, 273, 276, 288, 289, 292, 295, 321, 324, 328, 356, 358, 364, 365, 369, 371, 376, 377, 380, 382, 386, 387, 388, 389, 390, 395, 396, 397, 408, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 455, 457, 459, 478, 515, 516, 545, 551, 558, 566, 567, 597, 598, 604, 618, 626, 634, 654, 658, 660, 662, 668, 670, 672, 673, 674, 675, 683, 684, 685, 704, 719, 723, 725, 743, 788, 808, 812, 815, 825, 829, 846, 847, 848, 849, 850, 923, 1004, 1005, 1011, 1018, 1022, 1023, 1024, 1036, 1039, 1047, 1049, 1050, 1051, 1052, 1056], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 82, 88, 90, 92, 93, 95, 96, 99, 101, 105, 114, 120, 123, 126, 128, 132, 142, 143, 148, 150, 153, 154, 158, 161, 171, 172, 174, 181, 182, 185, 189, 190, 191, 192, 193, 195, 197, 198, 202, 206, 207, 209, 210, 211, 213, 217, 219, 226, 227, 232, 235, 239, 244, 251, 252, 254, 258, 262, 265, 269, 271, 272, 273, 275, 276, 278, 279, 282, 283, 284, 285, 292, 294, 295, 300, 313, 316, 317, 320, 321, 324, 326, 327, 328, 332, 337, 344, 345, 353, 356, 357, 358, 360, 364, 365, 369, 370, 371, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 396, 397, 399, 400, 402, 405, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 466, 468, 470, 475, 480, 493, 494, 496, 497, 499, 500, 501, 502, 503, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 521, 541, 546, 547, 548, 550, 554, 558, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 588, 590, 591, 595, 596, 597, 598, 617, 618, 622, 623, 627, 634, 637, 639, 640, 641, 642, 650, 654, 655, 656, 657, 661, 664, 665, 666, 668, 673, 675, 676, 678, 680, 681, 682, 683, 685, 687, 695, 699, 702, 706, 710, 716, 718, 727, 736, 737, 741, 745, 757, 758, 761, 770, 778, 781, 785, 786, 787, 788, 790, 791, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 810, 811, 813, 814, 815, 817, 819, 821, 825, 826, 829, 830, 832, 834, 835, 837, 838, 839, 840, 841, 843, 844, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 867, 871, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 890, 891, 892, 895, 897, 911, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 933, 943, 947, 957, 978, 997, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "one_class": 252, "one_d_arrai": 928, "one_d_label": 931, "one_hot": [321, 332], "one_hot_encod": [43, 147], "one_hot_encoder_": 573, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 147, "one_hot_tim": 43, "one_imag": [422, 591, 594], "one_vs_on": [424, 617, 1009], "one_vs_rest": [617, 1009], "oneclasssvm": [2, 48, 50, 231, 244, 327, 344, 570, 684, 857, 1014, 1022, 1023, 1041, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "oned": 400, "onehot": [256, 316, 317, 415, 876, 1018], "onehot_categor": [217, 235], "onehotencod": [2, 43, 105, 142, 147, 158, 190, 191, 217, 235, 246, 254, 256, 258, 321, 325, 327, 330, 331, 332, 376, 396, 415, 421, 472, 473, 573, 588, 589, 874, 878, 879, 882, 885, 892, 998, 1018, 1040, 1043, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "onehotencoderonehotencod": [105, 142, 158, 190, 191, 246, 256, 325, 328], "ones": [43, 50, 70, 78, 90, 105, 114, 148, 154, 174, 195, 202, 221, 222, 244, 247, 251, 275, 283, 286, 302, 319, 335, 354, 369, 370, 382, 390, 396, 414, 416, 418, 421, 429, 432, 436, 456, 539, 573, 588, 617, 618, 625, 651, 652, 665, 666, 677, 683, 710, 803, 809, 814, 825, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 886, 890, 961, 1004, 1008, 1013, 1014, 1018, 1023, 1039, 1047, 1048, 1049], "onetoonefeaturemixin": [2, 384, 438], "onevsoneclassifi": [2, 292, 405, 840, 841, 1040, 1042, 1043, 1045, 1046, 1048, 1051, 1053, 1056], "onevsrestclassifi": [2, 66, 209, 232, 252, 282, 284, 292, 405, 412, 665, 666, 839, 841, 911, 1040, 1041, 1043, 1045, 1046, 1052, 1053, 1056, 1057], "ong": 715, "ongari": 1056, "onggo": 1055, "ongo": [330, 383, 397], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 80, 84, 88, 90, 93, 101, 104, 105, 106, 108, 109, 114, 120, 126, 127, 129, 133, 137, 139, 144, 145, 146, 147, 149, 157, 158, 167, 168, 169, 172, 174, 176, 181, 183, 186, 187, 189, 190, 191, 195, 196, 201, 202, 206, 213, 217, 218, 220, 223, 225, 226, 235, 237, 238, 244, 246, 248, 250, 251, 255, 258, 260, 261, 262, 265, 266, 269, 271, 273, 275, 277, 278, 281, 282, 283, 284, 286, 287, 288, 289, 292, 294, 295, 301, 303, 306, 308, 312, 315, 316, 320, 321, 326, 327, 334, 335, 337, 341, 342, 345, 349, 350, 352, 353, 356, 357, 358, 360, 361, 364, 365, 369, 370, 371, 375, 376, 377, 379, 380, 382, 384, 386, 387, 388, 389, 390, 391, 394, 396, 397, 400, 405, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 434, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 495, 496, 497, 499, 501, 503, 504, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 523, 526, 530, 531, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 706, 714, 716, 720, 733, 736, 737, 741, 743, 744, 745, 748, 750, 763, 765, 767, 781, 785, 786, 787, 788, 790, 791, 794, 795, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 821, 825, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 932, 933, 935, 936, 937, 938, 941, 943, 947, 955, 957, 961, 963, 968, 973, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1028, 1029, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "onlin": [2, 44, 47, 54, 71, 86, 123, 126, 187, 196, 225, 231, 253, 269, 311, 371, 377, 381, 387, 396, 414, 419, 422, 424, 448, 452, 453, 455, 502, 509, 538, 543, 544, 545, 546, 552, 553, 589, 591, 665, 673, 674, 675, 683, 685, 837, 846, 847, 848, 849, 850, 853, 854, 859, 861, 862, 880, 881, 891, 911, 912, 1000, 1004, 1012, 1014, 1026, 1029, 1030, 1032, 1034, 1039, 1043, 1044, 1046, 1054], "onlineldavb": 543, "only_non_neg": 1052, "only_physical_cor": 143, "onnx": [1027, 1028, 1034], "onnxruntim": 408, "onto": [118, 238, 239, 249, 315, 394, 419, 422, 426, 452, 454, 467, 540, 546, 550, 634, 635, 637, 695, 1002, 1006, 1011], "onward": [885, 1043, 1057, 1058], "onx": 408, "oob": [136, 149, 187, 421, 522, 571, 1028, 1029, 1041, 1052, 1056], "oob_best_it": 149, "oob_color": 149, "oob_decision_function_": [562, 564, 571], "oob_error": 141, "oob_improvement_": [149, 421, 566, 567, 1041], "oob_lin": 149, "oob_prediction_": [563, 565, 572], "oob_scor": [141, 421, 562, 563, 564, 565, 571, 572, 1044, 1046], "oob_score_": [141, 562, 563, 564, 565, 566, 567, 571, 572, 1041, 1055], "oob_scores_": [566, 567, 1055], "op": [386, 433, 665, 666, 673, 674, 675, 683, 684, 685, 868, 869, 911, 1018], "opaqu": 1016, "open": [0, 47, 51, 55, 239, 376, 377, 380, 381, 382, 386, 388, 394, 395, 397, 408, 415, 422, 493, 503, 515, 516, 998, 1027, 1032, 1042, 1046, 1047, 1049, 1055], "open_pric": 51, "openbla": [369, 370, 380, 390, 394, 1052, 1056, 1057], "openblas_num_thread": 370, "opencv": 377, "opengraph": [382, 400, 407], "openml": [2, 43, 52, 105, 158, 179, 190, 217, 225, 233, 235, 245, 269, 289, 292, 294, 312, 375, 400, 503, 1034, 1047, 1049, 1052], "openml1": 52, "openml100": 376, "openmp": [325, 380, 385, 394, 396, 414, 421, 1050, 1052, 1055, 1057], "opentsn": 699, "oper": [2, 19, 53, 172, 182, 187, 245, 250, 257, 267, 269, 270, 272, 277, 282, 358, 369, 370, 379, 380, 382, 385, 388, 394, 396, 397, 400, 408, 410, 413, 418, 419, 421, 422, 423, 427, 448, 454, 467, 474, 481, 488, 489, 490, 491, 511, 540, 541, 548, 558, 559, 573, 579, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 623, 628, 631, 637, 642, 650, 665, 696, 700, 709, 713, 714, 715, 734, 781, 788, 789, 795, 796, 826, 837, 840, 851, 852, 874, 878, 883, 894, 895, 909, 916, 919, 957, 980, 1004, 1011, 1018, 1023, 1027, 1029, 1032, 1043, 1045, 1046, 1047, 1049, 1050, 1055, 1058], "operand": 424, "operation": [235, 1032], "operatornam": [419, 748, 1004, 1008, 1024], "opinion": 397, "opitz": 1008, "opportun": [541, 1022], "oppos": [102, 251, 410, 414, 907, 1011, 1023, 1039, 1057], "opposit": [62, 88, 102, 128, 190, 191, 206, 269, 282, 396, 412, 416, 418, 423, 449, 453, 455, 475, 545, 547, 554, 570, 719, 737, 857, 915, 1039], "opposite_lof_scor": 857, "opt": [380, 384], "opta": 904, "optic": [2, 71, 79, 187, 328, 337, 375, 425, 450, 452, 461, 462, 463, 509, 1029, 1033, 1034, 1048, 1052, 1053, 1054, 1055, 1056, 1057], "optim": [46, 52, 53, 64, 88, 89, 92, 95, 106, 111, 112, 123, 148, 149, 151, 153, 171, 172, 174, 175, 178, 179, 180, 181, 182, 202, 204, 206, 210, 225, 233, 250, 254, 269, 273, 280, 283, 288, 289, 292, 294, 299, 313, 315, 320, 328, 332, 337, 347, 352, 356, 357, 358, 365, 369, 376, 379, 382, 384, 385, 394, 396, 400, 409, 411, 413, 414, 416, 418, 419, 421, 423, 424, 425, 450, 453, 454, 455, 456, 458, 463, 467, 468, 478, 479, 485, 538, 541, 542, 544, 546, 550, 564, 565, 566, 567, 581, 617, 618, 626, 627, 642, 645, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 691, 694, 697, 699, 701, 702, 708, 726, 730, 737, 806, 807, 821, 829, 853, 854, 855, 857, 859, 860, 861, 862, 863, 868, 869, 887, 899, 903, 904, 911, 912, 913, 914, 915, 916, 917, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1022, 1023, 1024, 1027, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055], "optima": 424, "optimis": [384, 414, 1011, 1042, 1052, 1054], "optimist": [52, 206, 280, 356, 365, 714, 1004, 1008], "optimum": [96, 180, 190, 195, 269, 288, 413, 419, 478, 1004, 1007], "option": [2, 43, 66, 81, 87, 130, 143, 151, 180, 186, 199, 202, 218, 254, 269, 278, 284, 325, 332, 356, 360, 365, 371, 376, 377, 378, 380, 382, 383, 385, 387, 388, 390, 391, 394, 396, 397, 400, 408, 414, 415, 417, 418, 419, 421, 422, 425, 438, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 694, 695, 696, 697, 699, 701, 702, 718, 720, 724, 736, 737, 742, 743, 744, 764, 765, 766, 771, 773, 774, 778, 781, 782, 783, 784, 785, 788, 790, 791, 794, 799, 800, 802, 806, 808, 809, 810, 811, 813, 814, 816, 825, 829, 830, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 903, 904, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 945, 993, 997, 998, 1004, 1007, 1008, 1011, 1018, 1021, 1023, 1024, 1028, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "option_context": 235, "ora": 1052, "oracl": [2, 69, 217, 235, 427, 475, 476, 479, 480, 481, 482, 1002, 1039], "orallo": 1008, "orang": [46, 48, 88, 113, 121, 124, 125, 130, 137, 152, 153, 155, 181, 186, 204, 206, 227, 252, 263, 269, 306, 325, 331, 363, 1009, 1056], "orazbayev": 1053, "orbit": [356, 357], "order": [2, 43, 53, 58, 61, 64, 82, 90, 99, 100, 106, 111, 132, 145, 146, 147, 151, 153, 165, 179, 189, 190, 193, 195, 206, 210, 213, 217, 218, 223, 231, 235, 239, 248, 251, 254, 258, 262, 270, 273, 275, 282, 294, 313, 315, 320, 321, 322, 326, 327, 332, 352, 356, 358, 365, 369, 370, 377, 382, 383, 384, 386, 387, 388, 391, 396, 400, 401, 405, 408, 414, 415, 416, 418, 419, 420, 421, 422, 424, 426, 443, 446, 449, 452, 453, 455, 456, 461, 462, 463, 465, 470, 494, 495, 496, 502, 504, 522, 541, 542, 546, 547, 548, 550, 554, 558, 560, 562, 563, 564, 565, 566, 570, 571, 572, 573, 574, 588, 595, 598, 600, 601, 604, 613, 614, 615, 617, 629, 634, 638, 647, 665, 666, 672, 683, 692, 693, 695, 696, 700, 704, 706, 707, 709, 711, 719, 720, 725, 729, 733, 736, 737, 745, 747, 748, 749, 761, 763, 785, 789, 790, 791, 794, 795, 796, 801, 806, 807, 808, 810, 811, 812, 814, 818, 821, 825, 826, 829, 832, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 861, 868, 871, 882, 884, 885, 886, 890, 891, 892, 895, 896, 897, 899, 900, 901, 902, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 937, 938, 943, 955, 971, 976, 998, 1004, 1005, 1008, 1009, 1011, 1012, 1018, 1021, 1022, 1023, 1024, 1028, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "order_": [842, 845], "order_centroid": 357, "ordered_sampl": 235, "ordereddict": 141, "ordering_": [100, 414, 456, 461, 462, 463], "ordin": [43, 88, 105, 158, 254, 318, 321, 322, 326, 329, 376, 396, 421, 503, 574, 716, 876, 879, 884, 885, 892, 1004, 1005, 1018, 1028, 1047, 1053], "ordinal_encod": [147, 254], "ordinal_result": 147, "ordinalencod": [2, 147, 158, 191, 192, 217, 254, 321, 329, 376, 396, 588, 847, 879, 884, 892, 998, 1010, 1018, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056], "ordinalencoderordinalencod": [158, 191, 192, 321], "ordinari": [2, 125, 140, 187, 196, 197, 200, 202, 207, 213, 219, 220, 222, 234, 327, 642, 653, 659, 661, 662, 663, 664, 679, 685, 689, 690, 694, 1022, 1029, 1030, 1034], "ordinarili": [394, 396], "ordowski": 1008, "oregon": 321, "oren": 1047, "oresti": 1048, "orfano": [1052, 1053, 1054, 1055, 1056], "org": [43, 51, 52, 55, 61, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 195, 199, 217, 225, 233, 235, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 294, 312, 313, 321, 325, 326, 328, 329, 331, 336, 364, 370, 375, 380, 382, 385, 388, 390, 397, 418, 602, 643, 675, 678, 683, 702, 712, 776, 853, 854, 859, 860, 861, 862, 889, 905, 919, 920, 949, 950, 1004, 1008, 1024, 1034, 1047, 1051], "organ": [0, 50, 52, 104, 113, 356, 376, 381, 382, 397, 859, 1027], "ori": 1045, "orient": [66, 123, 190, 237, 315, 396, 923, 1005], "orig": [53, 302], "orig_coin": [81, 82], "orig_data_ax": 128, "origin": [43, 44, 53, 58, 59, 81, 82, 83, 86, 91, 93, 108, 109, 120, 123, 125, 126, 132, 153, 156, 168, 169, 172, 174, 176, 178, 179, 185, 186, 191, 195, 204, 206, 221, 237, 238, 239, 241, 242, 248, 249, 250, 254, 266, 269, 272, 278, 288, 298, 303, 313, 316, 320, 330, 335, 349, 356, 358, 365, 370, 377, 379, 381, 382, 384, 386, 387, 394, 396, 408, 411, 414, 415, 418, 419, 421, 422, 424, 425, 426, 427, 439, 443, 447, 449, 450, 451, 452, 453, 455, 456, 465, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 500, 501, 502, 508, 526, 538, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 583, 588, 589, 591, 595, 597, 598, 601, 614, 615, 617, 618, 621, 637, 639, 642, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 699, 703, 708, 735, 770, 776, 806, 808, 809, 814, 816, 825, 829, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 861, 862, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 891, 900, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 935, 937, 938, 942, 943, 966, 978, 981, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1014, 1019, 1020, 1021, 1022, 1025, 1027, 1032, 1042, 1043, 1045, 1047, 1049, 1051, 1053, 1055], "original_param": 152, "original_shap": 83, "original_sklearn_vers": [408, 583], "original_space_centroid": 357, "orii": 1041, "orphan": [454, 467, 1039], "orr": [1012, 1022], "orr\u00f9": 1042, "orthogon": [2, 37, 89, 124, 125, 126, 132, 187, 196, 419, 533, 538, 544, 546, 549, 550, 555, 671, 672, 692, 693, 1020, 1029, 1030, 1034, 1039], "orthogonal_mp": [2, 555, 671, 672, 693, 1004], "orthogonal_mp_gram": [2, 671, 672, 692, 1053], "orthogonalmatchingpursuit": [2, 216, 672, 692, 693, 1004, 1009, 1039, 1041, 1044, 1047, 1052, 1057], "orthogonalmatchingpursuitcv": [2, 216, 405, 671, 1041, 1052, 1056], "orthonorm": [2, 45, 391, 954, 1000], "orthotrop": 1011, "ortiz": [1049, 1055], "os": 1057, "osa": 1047, "osaid": 1047, "osborn": [1042, 1043], "oscar": [1042, 1046], "oscil": [155, 191, 222, 414, 446], "oscillatori": [218, 1018], "osei": 1053, "osendorf": [1039, 1040], "oserror": [400, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505], "osindero": [867, 1013], "osman": [1048, 1054], "osx": 369, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 87, 92, 101, 103, 105, 106, 118, 125, 126, 128, 130, 140, 142, 143, 146, 147, 150, 151, 153, 154, 160, 167, 185, 186, 187, 189, 190, 191, 192, 195, 197, 205, 210, 217, 221, 235, 237, 238, 239, 241, 244, 245, 246, 248, 250, 251, 254, 255, 262, 265, 269, 270, 272, 275, 276, 277, 284, 285, 289, 292, 300, 301, 302, 314, 315, 319, 320, 322, 324, 325, 327, 331, 332, 334, 345, 349, 351, 354, 356, 357, 360, 364, 365, 369, 374, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 390, 391, 395, 396, 397, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 443, 449, 450, 452, 453, 454, 455, 456, 458, 463, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 503, 504, 510, 540, 541, 542, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 604, 609, 617, 618, 619, 620, 627, 634, 635, 637, 642, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 697, 699, 703, 706, 711, 725, 770, 781, 785, 792, 799, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 821, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 866, 868, 869, 871, 872, 874, 876, 877, 878, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 892, 899, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 949, 950, 964, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1034, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1052, 1053, 1054, 1055, 1056, 1058], "other_parti": 269, "other_payment_plan": 269, "other_scor": 387, "otherwis": [50, 91, 97, 139, 183, 186, 199, 219, 225, 269, 308, 349, 352, 365, 371, 384, 386, 388, 396, 405, 414, 416, 418, 422, 424, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 459, 460, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 503, 534, 540, 541, 542, 543, 545, 547, 548, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 604, 609, 617, 618, 621, 638, 639, 640, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 692, 693, 697, 699, 703, 704, 705, 707, 709, 710, 714, 716, 720, 721, 731, 733, 734, 735, 736, 737, 745, 748, 759, 761, 762, 763, 773, 781, 785, 788, 789, 790, 791, 792, 794, 795, 796, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 821, 825, 826, 829, 830, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 868, 869, 871, 874, 875, 876, 877, 878, 882, 883, 890, 891, 892, 893, 896, 897, 898, 900, 901, 902, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 924, 926, 937, 938, 940, 944, 954, 955, 966, 968, 991, 993, 996, 1003, 1004, 1005, 1008, 1011, 1012, 1014, 1015, 1018, 1020, 1022, 1023, 1027, 1032, 1041, 1047, 1048, 1049, 1052, 1055], "ott": 1043, "oudshoorn": [634, 998], "ought": 369, "our": [0, 43, 44, 46, 50, 51, 52, 77, 88, 91, 104, 105, 113, 114, 118, 123, 124, 137, 138, 144, 147, 148, 150, 151, 167, 172, 174, 179, 180, 181, 187, 189, 190, 191, 192, 193, 217, 221, 235, 239, 241, 251, 268, 269, 275, 278, 281, 282, 288, 298, 312, 315, 321, 325, 327, 332, 339, 342, 348, 350, 352, 356, 357, 358, 365, 370, 381, 386, 387, 390, 394, 395, 396, 397, 405, 414, 418, 421, 422, 424, 425, 450, 456, 570, 651, 699, 715, 727, 733, 745, 763, 853, 854, 855, 857, 859, 861, 862, 863, 997, 998, 1004, 1005, 1008, 1014, 1018, 1021, 1022, 1023, 1028, 1031, 1032, 1046, 1047, 1049, 1050, 1053, 1054, 1056], "our_rand_r": 1048, "oura": [1052, 1053, 1054], "ourselv": 1032, "ouss1508": [1054, 1055], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 85, 90, 91, 104, 105, 130, 135, 136, 141, 143, 144, 151, 152, 165, 182, 187, 189, 190, 192, 202, 217, 219, 221, 225, 235, 251, 254, 260, 262, 269, 273, 275, 278, 283, 287, 288, 292, 294, 320, 321, 327, 337, 339, 341, 342, 345, 352, 356, 368, 377, 379, 380, 382, 384, 385, 386, 388, 394, 396, 402, 408, 414, 417, 419, 421, 422, 424, 430, 440, 441, 442, 448, 449, 451, 452, 453, 455, 478, 488, 489, 490, 491, 506, 522, 523, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 595, 596, 598, 611, 614, 615, 641, 646, 647, 648, 649, 658, 662, 673, 675, 680, 682, 683, 695, 696, 699, 708, 734, 748, 807, 809, 810, 811, 812, 814, 815, 816, 817, 821, 837, 846, 847, 848, 849, 850, 855, 860, 863, 867, 868, 869, 877, 881, 888, 900, 903, 904, 926, 969, 971, 976, 996, 998, 1002, 1003, 1007, 1008, 1009, 1011, 1016, 1018, 1028, 1029, 1030, 1032, 1034, 1039, 1041, 1043, 1045, 1047, 1048, 1051, 1052, 1055, 1057], "out_activation_": [868, 869], "out_bounds_predict": 219, "out_fil": [923, 1024], "out_of_bound": [247, 642], "out_of_cluster_doc": 57, "outcom": [43, 143, 190, 288, 396, 402, 421, 576, 665, 716, 749, 801, 839, 906, 907, 908, 913, 916, 1004, 1008, 1024, 1031, 1043, 1047, 1049], "outdat": 385, "outer": [58, 128, 280, 336, 457, 521, 647, 657, 658, 661, 1000, 1040], "outer_cv": [280, 331], "outer_numb": 336, "outermost": 349, "outli": [48, 113, 396, 475, 480, 1004, 1014], "outlier": [2, 42, 70, 79, 89, 113, 114, 150, 154, 174, 187, 196, 215, 219, 220, 221, 222, 223, 231, 243, 296, 314, 319, 322, 344, 354, 377, 396, 414, 416, 421, 436, 452, 470, 472, 475, 476, 479, 480, 481, 482, 496, 497, 499, 503, 517, 519, 529, 531, 570, 638, 646, 656, 677, 678, 679, 683, 684, 685, 686, 699, 709, 837, 857, 861, 872, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 896, 897, 898, 899, 900, 901, 902, 914, 915, 917, 1008, 1022, 1023, 1027, 1029, 1030, 1033, 1034, 1039, 1044, 1045, 1047, 1058], "outlier_detector": [254, 436], "outlier_label": [861, 1049], "outlier_label_": 861, "outlier_mask": 220, "outlier_plot": 113, "outliermixin": [2, 1056], "outliers_": 656, "outliers_cov": 113, "outliers_fract": 244, "outliers_index": 114, "outliers_offset": 114, "outlin": [101, 146, 382, 384, 396, 397, 399, 414, 997, 1034], "outlying": 1014, "outperform": [111, 118, 153, 158, 292, 320, 394, 418, 421, 458, 468, 1010, 1018], "output": [2, 30, 31, 51, 54, 62, 64, 72, 88, 94, 126, 136, 137, 138, 140, 146, 158, 161, 174, 182, 185, 186, 187, 190, 213, 243, 251, 255, 258, 263, 268, 269, 273, 275, 278, 282, 284, 285, 289, 292, 295, 316, 319, 321, 322, 324, 327, 328, 330, 332, 357, 358, 359, 360, 362, 364, 375, 376, 377, 379, 382, 384, 388, 390, 394, 395, 396, 412, 413, 414, 415, 417, 418, 421, 422, 423, 424, 430, 435, 438, 443, 447, 448, 449, 451, 452, 453, 455, 456, 458, 465, 466, 468, 469, 470, 471, 472, 473, 474, 488, 489, 490, 491, 494, 497, 499, 500, 501, 502, 503, 504, 510, 512, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 653, 654, 657, 659, 660, 661, 664, 665, 667, 668, 669, 670, 673, 674, 675, 678, 680, 681, 683, 685, 686, 688, 689, 690, 691, 695, 696, 697, 699, 701, 703, 706, 707, 720, 721, 728, 730, 731, 733, 735, 742, 752, 753, 755, 757, 758, 759, 760, 761, 763, 768, 774, 779, 792, 795, 797, 798, 804, 805, 806, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 829, 832, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 854, 855, 856, 860, 861, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 899, 900, 903, 904, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 937, 938, 940, 943, 955, 956, 963, 964, 966, 974, 994, 997, 998, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1018, 1023, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "output_dict": [720, 1047, 1051], "output_distribut": [109, 315, 319, 415, 887, 888, 899, 900, 1018], "output_fil": 493, "output_indices_": [470, 1052], "output_label": 336, "output_label_arrai": 336, "outputcodeclassifi": [2, 292, 405, 839, 840, 1046, 1051, 1055, 1056], "outputs_2d_": [853, 861, 1049], "outreach": 397, "outsid": [45, 48, 57, 146, 218, 219, 247, 258, 408, 422, 452, 642, 890, 1014, 1047], "outward": 315, "outweigh": 1043, "ouvert": [765, 766, 1006], "ova": [226, 673, 675, 683, 1022], "ovb": [189, 190], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 85, 90, 91, 106, 107, 108, 123, 140, 143, 148, 153, 154, 167, 171, 174, 182, 185, 189, 191, 200, 211, 217, 225, 235, 244, 254, 269, 275, 276, 278, 280, 282, 283, 284, 287, 300, 308, 310, 311, 317, 327, 328, 330, 334, 356, 357, 369, 370, 371, 377, 378, 381, 382, 383, 384, 388, 395, 396, 410, 412, 414, 415, 418, 419, 420, 421, 422, 426, 452, 455, 470, 478, 516, 540, 541, 543, 544, 545, 546, 553, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 595, 596, 598, 601, 609, 637, 639, 640, 641, 651, 652, 653, 654, 659, 660, 665, 667, 668, 669, 670, 672, 673, 674, 675, 683, 684, 685, 692, 693, 704, 723, 725, 746, 770, 795, 800, 804, 807, 810, 811, 813, 818, 819, 821, 830, 832, 833, 834, 835, 836, 838, 867, 868, 869, 870, 886, 890, 911, 919, 921, 928, 934, 943, 949, 950, 997, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "overal": [43, 78, 83, 137, 140, 143, 148, 158, 179, 235, 269, 272, 295, 320, 321, 357, 369, 381, 382, 388, 411, 412, 421, 453, 455, 470, 477, 478, 484, 556, 892, 1005, 1008, 1024, 1032, 1049], "overallqu": 158, "overcom": [144, 221, 369, 422], "overcomplet": 419, "overconstrain": 153, "overestim": [130, 365, 418], "overfit": [43, 64, 142, 148, 150, 153, 187, 191, 192, 193, 197, 218, 221, 244, 262, 267, 269, 270, 276, 280, 288, 289, 310, 316, 317, 319, 320, 321, 322, 345, 352, 360, 362, 363, 377, 396, 412, 413, 418, 421, 443, 494, 495, 568, 569, 574, 575, 664, 807, 810, 811, 821, 829, 833, 834, 868, 869, 871, 886, 890, 1003, 1012, 1014, 1016, 1018, 1024, 1029, 1032, 1042], "overflow": [381, 390, 394, 410, 1031, 1042, 1046, 1047, 1048, 1049, 1050, 1052], "overflowerror": 1049, "overhead": [47, 295, 370, 371, 382, 388, 391, 394, 396, 421, 447, 451, 455, 541, 706, 843, 844, 846, 847, 848, 849, 850, 851, 852, 1010, 1011, 1042, 1047, 1048, 1051], "overlai": [390, 639], "overlaid": 1015, "overlap": [2, 51, 52, 72, 90, 120, 151, 171, 240, 262, 357, 411, 414, 418, 421, 422, 594, 799, 800, 808, 809, 812, 814, 815, 816, 817, 824, 825, 827, 1005, 1018, 1045], "overli": [52, 62, 63, 206, 280, 365, 419, 1008], "overlin": [275, 411], "overparameter": 1004, "overrid": [384, 422, 452, 456, 463, 549, 555, 595, 596, 598, 600, 601, 604, 663, 671, 692, 693, 813, 830, 853, 854, 855, 857, 859, 861, 862, 863, 1039, 1047, 1049, 1053, 1055], "overridden": [384, 396, 424, 549, 555, 623, 628, 631, 701, 1047, 1048, 1055], "oversampl": [551, 1039], "oversc": 1054, "overset": [419, 1015], "overst": 190, "oversubscript": [785, 1053], "overview": [109, 187, 280, 291, 294, 383, 385, 395, 396, 503, 741, 750, 807, 823, 834, 839, 840, 841, 919, 1010, 1022, 1029, 1033, 1034], "overwhelm": 382, "overwrit": [153, 452, 503, 638, 1039, 1050, 1055, 1056], "overwrite_": 1039, "overwritten": [448, 539, 540, 541, 543, 548, 555, 614, 615, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 679, 681, 686, 688, 689, 690, 691, 693, 977, 1052], "ovo": [292, 324, 795, 839, 913, 916, 1008, 1009, 1023], "ovo_tpr": 284, "ovo_tre": 292, "ovr": [2, 66, 209, 232, 292, 294, 324, 353, 665, 666, 795, 840, 911, 913, 916, 1008, 1009, 1023, 1039, 1044, 1045, 1047, 1048, 1049, 1053, 1054], "ovr_jaccard_scor": 294, "ovr_tre": 292, "ow": 95, "owen": [656, 1048, 1049], "own": [2, 16, 52, 70, 143, 235, 251, 265, 295, 297, 336, 357, 370, 376, 385, 387, 390, 391, 400, 413, 414, 426, 430, 446, 460, 540, 564, 571, 653, 804, 805, 853, 854, 855, 857, 859, 861, 862, 863, 885, 919, 921, 943, 949, 1004, 1010, 1011, 1014, 1018, 1023, 1027, 1032, 1046, 1047, 1049, 1056], "own_telephon": 269, "owner": [251, 377, 379, 963, 964], "ownership": 384, "oyamada": 1044, "oyindamola": 1054, "oywa": 1049, "ozga": 1047, "ozsvald": 1041, "p": [0, 2, 50, 53, 61, 63, 64, 76, 96, 113, 114, 117, 121, 130, 149, 168, 172, 177, 195, 229, 234, 235, 237, 239, 248, 275, 281, 282, 308, 376, 377, 379, 380, 387, 390, 411, 412, 413, 414, 416, 417, 419, 421, 423, 424, 425, 427, 448, 450, 452, 453, 456, 461, 462, 463, 475, 477, 480, 481, 484, 505, 535, 541, 545, 547, 548, 554, 556, 557, 558, 560, 562, 563, 564, 565, 566, 568, 571, 572, 573, 597, 599, 600, 601, 602, 603, 605, 606, 607, 611, 612, 613, 614, 615, 616, 622, 623, 634, 647, 650, 695, 697, 699, 701, 706, 712, 722, 731, 748, 759, 793, 795, 809, 815, 816, 817, 820, 836, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 867, 871, 872, 887, 899, 905, 921, 922, 923, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1022, 1023, 1039, 1040, 1042, 1045, 1047, 1054, 1055, 1056], "p0": 63, "p1": [63, 160], "p1d": 63, "p2": [63, 160, 235], "p3": 160, "p4": 160, "p5": 955, "p592": 141, "p_": [168, 1008, 1011, 1024], "p_c": [121, 530], "p_e": 723, "p_grid": 280, "p_i": [1008, 1011], "p_k": [282, 1008], "p_n": [282, 714, 1008], "p_o": 723, "p_val": 275, "p_val_uncorrect": 275, "p_valu": [611, 612, 613], "p_w": 121, "p_w_c": [121, 530], "pa": [673, 674, 908, 1004, 1008, 1021], "pab": [1054, 1055], "pablo": [1049, 1052, 1053], "pabloduque0": 1052, "pace": 377, "pacha": 1047, "pacif": 275, "pack": [391, 1047], "packag": [0, 81, 88, 185, 251, 295, 370, 375, 376, 379, 380, 382, 383, 384, 386, 390, 391, 394, 396, 400, 401, 408, 416, 421, 422, 458, 484, 653, 654, 998, 1004, 1007, 1011, 1018, 1024, 1032, 1039, 1045, 1047, 1048, 1049], "packet": 369, "packg": 400, "pacman": 400, "paczuski": [1047, 1048], "pad": [123, 146, 185, 191, 237, 254, 356, 361, 422, 595, 596, 598], "page": [0, 51, 55, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 172, 179, 190, 191, 192, 199, 237, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 369, 377, 379, 382, 384, 386, 388, 390, 397, 414, 416, 479, 523, 524, 525, 635, 651, 841, 906, 955, 998, 1004, 1008, 1009, 1037, 1039, 1043, 1044], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 955], "pagh": [195, 1000], "pai": [0, 190, 235, 269, 382], "paid": 1004, "pain": 394, "paint": [923, 925], "pair": [2, 49, 52, 72, 79, 93, 99, 128, 139, 141, 146, 150, 165, 178, 182, 198, 201, 209, 226, 229, 235, 248, 270, 275, 282, 284, 339, 341, 343, 345, 346, 347, 349, 357, 361, 377, 394, 396, 411, 412, 415, 418, 422, 424, 443, 446, 447, 451, 456, 463, 469, 477, 478, 484, 500, 515, 516, 589, 599, 602, 603, 605, 606, 607, 617, 620, 621, 622, 624, 626, 627, 629, 630, 632, 634, 639, 640, 650, 652, 699, 706, 707, 712, 713, 714, 722, 738, 747, 765, 766, 770, 773, 776, 777, 778, 779, 780, 781, 783, 785, 786, 787, 788, 789, 793, 839, 851, 852, 926, 1008, 1009, 1010, 1011, 1018, 1024, 1039, 1051, 1052, 1054, 1055, 1056], "pair_confusion_matrix": [2, 414, 1051], "pair_list": 284, "pair_scor": 284, "paired_cosine_dist": [2, 410, 1058], "paired_dist": [2, 770, 776, 785, 1043], "paired_euclidean_dist": [2, 410, 1058], "paired_manhattan_dist": 2, "pairidx": 361, "pairplot": [189, 190], "pairwis": [2, 37, 99, 189, 190, 248, 254, 284, 324, 328, 329, 356, 369, 374, 396, 410, 414, 419, 424, 452, 460, 464, 467, 468, 474, 493, 515, 516, 542, 568, 569, 627, 645, 646, 647, 648, 649, 650, 695, 697, 699, 701, 703, 706, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 799, 800, 839, 855, 859, 863, 877, 909, 928, 1000, 1008, 1011, 1020, 1023, 1034, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1056, 1057, 1058], "pairwise_bayesian": 275, "pairwise_bayesian_df": 275, "pairwise_comp_df": 275, "pairwise_dist": [2, 75, 332, 396, 414, 425, 450, 452, 456, 463, 695, 703, 769, 778, 786, 787, 799, 800, 855, 857, 859, 863, 1006, 1039, 1043, 1045, 1047, 1048, 1050, 1051, 1056, 1057, 1058], "pairwise_dist_chunk_s": [474, 909], "pairwise_distance_funct": [699, 703, 785, 788, 1011], "pairwise_distances_argmin": [2, 83, 99, 328, 787, 1047, 1053, 1054, 1055, 1056], "pairwise_distances_argmin_min": [2, 328, 786, 1042, 1047, 1053, 1054, 1055, 1056], "pairwise_distances_chunk": [2, 369, 785, 1047, 1050, 1056], "pairwise_indices_": 839, "pairwise_kernel": [2, 396, 424, 458, 468, 650, 772, 877, 1006, 1039, 1046, 1056], "pairwise_kernel_funct": [627, 650, 781], "pairwise_kernels_kwarg": 627, "pairwise_t_test": 275, "pairwisedistancesreduct": 370, "pairwisekernel": [2, 424], "paislei": [419, 543], "pakdd": 414, "pal": [1047, 1053], "palac": 83, "palacio": 1052, "palafox": 1039, "palett": [83, 190, 275], "palevioletr": [231, 301, 344], "palioura": [846, 1010], "paliw": 1047, "palladium": 1032, "palmol": 51, "pami": [379, 414, 732], "pamnani": 1047, "pan": 402, "panchal": 1051, "pancholi": 1046, "panda": [2, 43, 51, 62, 104, 105, 106, 137, 143, 144, 147, 150, 153, 155, 171, 179, 185, 189, 190, 191, 192, 193, 197, 202, 206, 217, 221, 225, 235, 254, 255, 258, 265, 269, 273, 275, 276, 278, 286, 287, 289, 292, 320, 321, 322, 324, 327, 328, 352, 356, 357, 376, 377, 380, 381, 382, 384, 385, 390, 396, 400, 407, 415, 438, 448, 449, 451, 453, 455, 470, 472, 474, 488, 489, 490, 491, 495, 496, 497, 499, 503, 507, 508, 509, 511, 512, 517, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 568, 569, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 639, 640, 642, 645, 646, 647, 648, 649, 695, 696, 699, 807, 810, 811, 821, 837, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 909, 933, 997, 998, 1018, 1027, 1028, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "pandata": [1054, 1055], "pandei": [1046, 1051], "panel": [266, 300, 315, 420, 1027], "panga": [1054, 1055], "panico": [1047, 1051], "pankaj": 1051, "pano": 1045, "panpiort8": [1049, 1051], "paolo": [0, 404, 1039, 1043, 1049, 1057], "papadopoulo": [1052, 1053, 1054, 1055, 1056], "papapanagiot": 1046, "paper": [0, 172, 195, 269, 275, 379, 388, 394, 414, 416, 421, 448, 455, 484, 511, 541, 548, 570, 648, 665, 673, 674, 678, 683, 686, 699, 795, 848, 857, 860, 903, 904, 1004, 1008, 1011, 1014, 1023, 1039, 1046, 1047], "paper355": 678, "papier": [671, 692, 693], "par": 1018, "paraboloid": 1004, "paradi": 1054, "paradigm": 1004, "paragraph": [422, 510], "paralel": 1055, "parallel": [2, 53, 136, 141, 143, 144, 146, 187, 191, 192, 193, 219, 276, 325, 326, 328, 350, 364, 368, 374, 380, 382, 383, 385, 386, 394, 396, 415, 423, 425, 426, 443, 450, 452, 454, 455, 456, 458, 463, 464, 467, 470, 473, 478, 502, 538, 540, 541, 542, 544, 546, 548, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 596, 601, 609, 614, 615, 617, 639, 641, 646, 665, 695, 696, 697, 698, 699, 700, 701, 788, 807, 810, 811, 813, 818, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 870, 873, 906, 907, 974, 977, 1028, 1029, 1034, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1058], "parallel_backend": [2, 370, 425, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 538, 542, 543, 544, 546, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 601, 609, 614, 615, 617, 639, 641, 646, 654, 658, 660, 662, 664, 665, 666, 668, 670, 672, 673, 675, 683, 686, 695, 696, 697, 698, 699, 700, 701, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 857, 859, 861, 862, 864, 865, 870, 873, 906, 907, 1047, 1057], "parallel_batch_queri": 295, "parallel_coordin": 276, "parallel_help": 1049, "parallelbackendbas": 977, "parallelis": [276, 474, 909, 1046], "param": [79, 90, 96, 97, 105, 148, 149, 151, 152, 237, 250, 251, 273, 275, 283, 287, 299, 311, 331, 378, 382, 384, 396, 405, 421, 424, 428, 431, 437, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 819, 821, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 963, 964, 967, 996, 997, 1045, 1049, 1050, 1052, 1053, 1056, 1057, 1058], "param1": 384, "param2": 384, "param3": 384, "param_": 143, "param_c": [286, 807], "param_classifier__c": 105, "param_covariance_typ": 265, "param_degre": 807, "param_dist": [283, 287, 326], "param_distribut": [105, 174, 276, 283, 287, 326, 395, 811, 819, 821, 1055], "param_gamma": [286, 807, 821], "param_grid": [43, 45, 105, 106, 107, 108, 143, 150, 250, 256, 265, 269, 273, 274, 275, 279, 280, 283, 286, 292, 297, 317, 331, 345, 396, 405, 415, 421, 749, 807, 810, 818, 819, 997, 1008], "param_kernel": [807, 821], "param_list": 819, "param_min_samples_split": 279, "param_n_compon": 265, "param_nam": [143, 276, 288, 330, 352, 405, 830, 838, 1003], "param_pca__n_compon": 107, "param_preprocessor__cat__selector__percentil": 105, "param_preprocessor__num__imputer__strategi": 105, "param_rang": [288, 330, 352, 830, 838, 1003, 1055], "param_reduce_dim__n_compon": 274, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 89, 90, 93, 95, 96, 97, 105, 106, 107, 112, 114, 115, 121, 123, 135, 137, 141, 143, 146, 147, 148, 151, 152, 153, 163, 169, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 197, 198, 199, 200, 202, 204, 205, 206, 208, 217, 219, 221, 222, 225, 234, 235, 241, 242, 244, 246, 249, 250, 251, 260, 261, 262, 263, 265, 266, 268, 269, 274, 275, 276, 277, 279, 280, 283, 286, 287, 292, 295, 297, 298, 301, 302, 308, 310, 311, 313, 315, 316, 317, 320, 324, 325, 327, 328, 329, 330, 338, 340, 342, 347, 349, 350, 351, 353, 354, 356, 357, 358, 360, 361, 362, 363, 365, 369, 370, 371, 374, 375, 377, 385, 387, 389, 390, 391, 394, 405, 409, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1024, 1027, 1028, 1029, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "parameter": [360, 424, 621, 622, 629, 630, 804, 805, 1004, 1005, 1013, 1018, 1024], "parameter_grid": 276, "parameter_nam": [574, 575, 576, 577], "parametergrid": [2, 807, 1041, 1047], "parameters_str": 90, "parametersampl": [2, 821, 1041, 1047, 1051], "parametr": [2, 48, 61, 62, 115, 247, 299, 319, 327, 412, 415, 420, 421, 443, 558, 560, 642, 692, 703, 887, 899, 949, 950, 1004, 1007, 1010, 1011, 1018, 1021, 1024, 1047, 1049, 1052], "parametrize_with_check": [2, 324, 384, 930, 949, 1049, 1050, 1058], "params_str": 287, "parcel": [89, 102, 414], "parch": [192, 329], "pardeep": 1051, "parel": 1043, "parent": [47, 189, 251, 364, 382, 386, 396, 414, 448, 469, 964, 965, 1039, 1056], "parent_hourly_wag": 189, "parenthes": 945, "parenthesi": [76, 382], "paresh": [1048, 1049], "pareto": 219, "pargent": 1018, "pari": [0, 379, 415, 472, 771, 879, 1019, 1053], "pariet": [1032, 1039], "parikh": [1048, 1053, 1054, 1055, 1056, 1057], "parimi": 1057, "paris_in_radian": 771, "paristech": 0, "pariti": 1024, "parizi": 1054, "park": [1044, 1049, 1051, 1054, 1055], "parmet": 1056, "parmind": 1046, "parquet": 52, "parra": 1047, "parri": [1044, 1045, 1046], "parrot": 356, "pars": [47, 55, 369, 376, 377, 383, 515], "parse_vers": [151, 193, 324, 677], "parser": [47, 153, 269, 289, 324, 328, 503, 1054, 1055], "parsifalxu": 1057, "parsimoni": [419, 1018], "parsing_tim": 47, "parson": [1050, 1052], "part": [0, 44, 67, 71, 86, 96, 105, 115, 123, 126, 140, 143, 146, 150, 156, 163, 164, 165, 169, 179, 187, 197, 251, 253, 263, 269, 270, 272, 290, 310, 317, 320, 322, 358, 371, 377, 379, 382, 384, 388, 390, 395, 396, 400, 402, 410, 412, 413, 414, 418, 419, 421, 422, 424, 452, 455, 500, 501, 502, 528, 538, 544, 549, 581, 591, 592, 593, 620, 632, 800, 876, 894, 896, 897, 898, 899, 900, 901, 902, 997, 998, 1000, 1005, 1009, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1039, 1047, 1048, 1050, 1052, 1054, 1058], "part3": 418, "part_of_speech": 422, "partev": [1053, 1054, 1055, 1056], "parthiv": 1051, "parti": [235, 292, 330, 370, 381, 384, 394, 408, 809, 816, 1039, 1050, 1055, 1056, 1058], "partial": [2, 43, 47, 51, 85, 116, 117, 155, 187, 188, 235, 243, 326, 329, 379, 382, 396, 399, 416, 417, 419, 421, 424, 470, 488, 489, 490, 491, 503, 508, 541, 543, 548, 569, 596, 639, 640, 664, 795, 837, 839, 840, 867, 868, 869, 872, 884, 885, 888, 891, 920, 1005, 1012, 1022, 1029, 1034, 1036, 1040, 1047, 1048, 1052, 1056], "partial_correl": 51, "partial_depend": [2, 191, 639, 1015, 1040, 1048, 1049, 1050, 1051, 1054, 1055], "partial_fit": [47, 85, 123, 328, 371, 384, 396, 414, 419, 448, 455, 541, 543, 544, 545, 596, 604, 665, 666, 673, 674, 675, 683, 684, 685, 839, 840, 843, 844, 846, 847, 848, 849, 850, 867, 868, 869, 880, 881, 891, 911, 996, 1004, 1010, 1012, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1056], "partial_fit_": 1052, "partial_fit_classifi": 47, "partial_fit_param": [604, 839, 840, 843, 844], "partialdependencedisplai": [2, 153, 155, 191, 255, 325, 326, 327, 329, 331, 389, 640, 1015, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "particip": [381, 382, 397, 1032], "particl": 1013, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 95, 105, 111, 121, 128, 131, 147, 150, 153, 154, 178, 185, 190, 191, 217, 219, 225, 249, 269, 272, 276, 278, 284, 295, 304, 308, 315, 324, 325, 328, 357, 358, 365, 369, 370, 376, 377, 380, 381, 382, 384, 386, 387, 388, 390, 391, 395, 396, 400, 414, 415, 418, 419, 421, 422, 423, 424, 452, 475, 479, 503, 551, 570, 616, 660, 665, 670, 679, 681, 691, 694, 719, 735, 792, 843, 936, 938, 998, 1000, 1002, 1004, 1008, 1011, 1012, 1013, 1014, 1016, 1018, 1028, 1032, 1039, 1042, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1056], "particularli": [58, 67, 104, 105, 108, 132, 156, 190, 218, 246, 275, 289, 317, 325, 332, 354, 365, 369, 382, 384, 391, 396, 414, 415, 417, 420, 422, 503, 813, 830, 848, 955, 976, 1004, 1005, 1008, 1010, 1016, 1028, 1032, 1039, 1044, 1046, 1047, 1053], "partit": [81, 101, 104, 154, 156, 275, 312, 396, 411, 412, 414, 418, 421, 455, 457, 459, 468, 518, 564, 565, 566, 567, 570, 571, 572, 711, 712, 722, 793, 859, 919, 920, 921, 922, 1007, 1011, 1014, 1018, 1024], "partli": [81, 408, 776], "partnership": 1032, "parvu": 379, "pasbi": [1046, 1047], "pascal": 1008, "pascual": 1042, "paskov": 1046, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 143, 153, 155, 169, 199, 202, 218, 245, 247, 248, 251, 254, 255, 257, 265, 269, 273, 276, 322, 324, 327, 332, 350, 358, 365, 369, 370, 371, 377, 382, 383, 384, 387, 388, 389, 390, 391, 394, 396, 405, 408, 410, 413, 414, 415, 418, 419, 421, 422, 424, 425, 426, 431, 432, 436, 437, 443, 444, 446, 448, 449, 450, 452, 453, 454, 455, 456, 458, 460, 463, 465, 466, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 497, 499, 502, 503, 504, 510, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 588, 589, 595, 596, 597, 598, 600, 601, 604, 609, 614, 615, 617, 618, 624, 627, 633, 638, 639, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 718, 739, 740, 749, 770, 781, 785, 786, 787, 788, 795, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 888, 890, 891, 892, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 931, 936, 937, 938, 945, 949, 950, 954, 955, 957, 959, 962, 964, 967, 968, 977, 978, 981, 991, 996, 997, 998, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1018, 1021, 1022, 1023, 1028, 1032, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "passiv": [2, 47, 224, 673, 674, 1030, 1034, 1040], "passiveaggress": [371, 422], "passiveaggressiveclassifi": [2, 47, 224, 369, 371, 1004, 1009, 1040, 1043, 1044, 1046, 1047, 1050, 1052, 1057], "passiveaggressiveregressor": [2, 371, 1004, 1040, 1043, 1046, 1047, 1050, 1052, 1057], "passo": [0, 404, 1039, 1040], "passthrough": [43, 106, 147, 190, 191, 217, 235, 254, 321, 329, 415, 470, 473, 574, 575, 870, 871, 1018, 1048, 1050, 1053, 1054, 1056], "passthrough_numer": [217, 235], "passthroughpassthrough": [191, 321], "past": [50, 52, 386, 387, 390, 394, 397, 418, 419, 421, 545, 562, 563, 685, 1032, 1055], "pat": [635, 998], "patch": [2, 70, 85, 254, 260, 261, 262, 265, 266, 270, 377, 394, 419, 421, 562, 563, 590, 591, 594, 1039, 1047], "patch_height": [590, 591, 594], "patch_siz": [85, 126, 422, 590, 591, 594], "patch_width": [590, 591, 594], "patchextractor": [2, 422, 1055], "patel": [1047, 1049, 1050, 1051, 1053], "path": [2, 47, 55, 187, 196, 202, 203, 206, 208, 211, 221, 233, 288, 352, 360, 376, 380, 382, 386, 390, 391, 396, 408, 447, 451, 456, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 515, 516, 555, 564, 565, 570, 571, 572, 573, 600, 601, 604, 653, 654, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 688, 689, 690, 691, 692, 693, 695, 871, 872, 918, 919, 920, 921, 922, 961, 997, 1004, 1005, 1014, 1028, 1029, 1039, 1040, 1043, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055], "path_length": 961, "path_method": [695, 1005], "pathak": [1054, 1055], "patheffect": 75, "pathlib": [47, 1054, 1055], "pathlik": [503, 1055], "patholog": [87, 1007, 1045], "pathwai": 383, "pati": 1041, "patienc": [390, 396], "patient": [46, 161, 172, 186, 379, 390, 413, 418, 1004], "patil": [1053, 1056], "paton": 1052, "patric": [1051, 1052], "patricio": 1053, "patrick": [1046, 1047, 1052, 1053, 1056, 1057], "patrini": [1044, 1045, 1046], "pattaniyil": 1049, "pattern": [43, 52, 58, 98, 115, 120, 122, 130, 174, 185, 187, 191, 202, 221, 251, 254, 327, 349, 356, 357, 358, 365, 379, 382, 384, 397, 411, 414, 415, 419, 421, 422, 454, 470, 472, 511, 539, 541, 548, 562, 563, 645, 715, 732, 748, 776, 795, 796, 804, 891, 1000, 1002, 1004, 1008, 1009, 1015, 1023, 1025, 1028, 1029, 1032, 1051], "patterson": [501, 1044], "paul": [377, 1042, 1045, 1046, 1047, 1048, 1052, 1053], "paula": [1049, 1050, 1057], "pauli": 1044, "paulo": [1046, 1052, 1054], "paus": 81, "pava": 642, "pavel": [1040, 1048], "pavlo": [1047, 1048], "pavlyk": [1047, 1048, 1049, 1050], "pawel": 1048, "pawe\u0142": [1042, 1046, 1051, 1052], "payn": 1049, "pazzani": 64, "pb_q": [327, 1004], "pbl": 150, "pc": [57, 338, 358, 377], "pca": [2, 11, 42, 45, 68, 69, 80, 86, 101, 103, 104, 106, 108, 109, 118, 122, 125, 132, 133, 164, 187, 214, 238, 240, 247, 249, 252, 256, 274, 283, 286, 295, 299, 304, 313, 327, 365, 374, 384, 396, 410, 414, 415, 420, 430, 479, 482, 490, 503, 509, 511, 521, 539, 540, 541, 542, 546, 547, 550, 551, 556, 650, 665, 695, 697, 699, 703, 807, 833, 837, 860, 867, 870, 871, 873, 881, 889, 891, 1000, 1002, 1005, 1011, 1018, 1022, 1024, 1029, 1033, 1034, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1057], "pca0": 430, "pca1": [415, 430], "pca2": [415, 430], "pca_2": 118, "pca__n_compon": 107, "pca_back_proj_ax": 128, "pca_estim": 123, "pca_proj_ax": 128, "pca_scor": 130, "pcapca": [106, 256], "pcd": [867, 1013], "pchelintsev": 1051, "pclass": [105, 192, 258, 324, 328, 329], "pcolor": 175, "pcolormesh": [70, 156, 165, 201, 298, 303, 341, 345, 349, 638], "pcr": [118, 417], "pd": [43, 51, 62, 105, 106, 137, 143, 144, 150, 155, 171, 185, 189, 190, 191, 192, 193, 197, 202, 206, 217, 221, 225, 235, 255, 258, 265, 273, 275, 276, 278, 286, 287, 289, 292, 320, 321, 322, 327, 328, 352, 356, 357, 387, 396, 415, 470, 472, 634, 635, 636, 637, 639, 785, 935, 937, 938, 997, 998, 1015, 1018, 1050, 1052, 1053, 1054, 1056], "pd2000": 1008, "pd_": 1015, "pd_line_kw": 639, "pd_result": 639, "pdb": 390, "pdbcl": 390, "pdf": [172, 275, 300, 315, 379, 382, 414, 423, 448, 455, 538, 541, 544, 548, 648, 651, 656, 665, 671, 673, 674, 678, 683, 686, 689, 690, 692, 693, 699, 848, 860, 867, 904, 906, 1004, 1021, 1024, 1031, 1035, 1039], "pdist": [699, 785, 788], "pdp": [2, 639, 1015, 1053], "pdp_lim": 639, "pdp_line_kw": 639, "pe": 590, "pe_tran": 590, "peai": 1048, "peak": [43, 52, 64, 191, 412, 418, 1053], "pear": 1009, "pearson": [2, 613, 616, 1052], "pearu": 1039, "pedersen": [1043, 1055], "pedigo": [1051, 1052], "pedregosa": [0, 404, 1039, 1040, 1041, 1042, 1043, 1045], "pedro": [1040, 1042, 1043, 1047], "peek": [191, 382, 1015], "peer": 1032, "peev": [1047, 1050], "pegaso": 1022, "pei": [414, 1046], "peixinho": 1053, "pelennor": 1053, "penal": [2, 53, 66, 115, 158, 202, 206, 210, 217, 221, 233, 235, 288, 320, 352, 414, 416, 419, 421, 423, 475, 476, 477, 478, 479, 480, 481, 482, 484, 568, 569, 654, 659, 660, 668, 670, 683, 712, 722, 741, 793, 802, 884, 911, 912, 918, 1004, 1008, 1010, 1012, 1022, 1023], "penalis": [215, 232, 703], "penalti": [2, 25, 46, 49, 66, 115, 187, 196, 197, 202, 205, 206, 210, 217, 221, 224, 232, 233, 246, 283, 288, 310, 327, 338, 350, 356, 369, 390, 394, 416, 419, 423, 477, 478, 479, 480, 481, 482, 484, 509, 538, 544, 545, 546, 547, 549, 550, 554, 555, 604, 650, 653, 654, 655, 656, 659, 660, 661, 664, 665, 666, 667, 668, 669, 675, 676, 677, 679, 683, 685, 687, 688, 694, 821, 891, 911, 912, 914, 916, 917, 918, 997, 1004, 1007, 1012, 1018, 1022, 1023, 1029, 1041, 1044, 1046, 1048, 1049, 1051, 1052, 1054, 1055], "peng": [686, 1004, 1045, 1046, 1047, 1049, 1051], "peopl": [2, 45, 104, 190, 253, 278, 356, 357, 370, 371, 377, 379, 381, 382, 386, 397, 420, 500, 501, 648, 848, 1027], "pep": [51, 390, 1039], "pep073": 383, "pep257": 396, "pep440": 386, "pep8": [384, 386, 390], "pepsi": 51, "per": [43, 49, 58, 70, 83, 88, 99, 142, 143, 147, 179, 181, 190, 191, 217, 232, 235, 254, 258, 261, 269, 271, 282, 284, 315, 321, 326, 331, 332, 352, 356, 358, 369, 377, 378, 382, 387, 388, 391, 394, 396, 412, 414, 418, 419, 420, 421, 422, 424, 452, 454, 456, 463, 467, 470, 474, 493, 503, 507, 509, 510, 511, 515, 517, 519, 522, 530, 539, 541, 542, 543, 546, 548, 550, 556, 557, 568, 569, 576, 590, 595, 598, 617, 618, 639, 640, 648, 649, 665, 666, 673, 674, 675, 678, 680, 681, 682, 683, 685, 699, 703, 720, 723, 727, 729, 748, 761, 765, 766, 788, 790, 804, 805, 832, 839, 840, 841, 843, 844, 847, 849, 867, 870, 876, 878, 880, 881, 884, 885, 891, 892, 909, 911, 912, 913, 914, 915, 916, 917, 942, 943, 955, 982, 997, 1000, 1004, 1007, 1008, 1009, 1012, 1015, 1022, 1023, 1024, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1055, 1056], "perc": 270, "percal": 388, "percent": [137, 499, 607, 1021], "percent10": [254, 499], "percentag": [2, 52, 89, 131, 147, 208, 235, 270, 278, 281, 418, 423, 541, 548, 551, 556, 600, 601, 655, 676, 687, 710, 741, 753, 825, 826, 827, 841, 923, 925, 1009, 1024, 1041, 1045, 1051, 1052], "percentil": [2, 49, 52, 105, 150, 153, 254, 258, 315, 369, 599, 602, 603, 605, 606, 607, 610, 613, 639, 640, 755, 1018, 1044, 1052], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 270, "percept": [167, 191, 1015], "perceptron": [2, 47, 67, 146, 156, 165, 176, 178, 187, 224, 227, 233, 255, 309, 317, 318, 339, 350, 371, 394, 422, 521, 522, 529, 673, 683, 837, 867, 868, 869, 872, 891, 1006, 1009, 1013, 1022, 1029, 1030, 1034, 1043, 1045, 1046, 1047, 1051], "percol": 74, "perdisci": [414, 448], "perdok": 1054, "pere": 1056, "peredachi": [614, 615], "pereira": [1044, 1047, 1048, 1058], "peretti": 1054, "perez": [1047, 1054], "perf_count": 254, "perfect": [58, 63, 72, 104, 114, 126, 128, 213, 217, 356, 357, 382, 414, 418, 560, 561, 697, 701, 711, 712, 715, 724, 733, 735, 738, 744, 750, 763, 764, 792, 793, 802, 1004, 1008, 1011, 1023, 1032, 1053], "perfectli": [63, 64, 72, 278, 290, 349, 399, 414, 421, 444, 574, 613, 711, 712, 722, 724, 743, 744, 764, 793, 802, 884, 1003, 1005, 1008, 1023, 1052, 1053], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 83, 84, 88, 92, 93, 94, 95, 96, 97, 99, 101, 102, 104, 105, 108, 111, 118, 126, 132, 135, 137, 143, 145, 147, 148, 149, 151, 152, 153, 157, 158, 163, 167, 170, 171, 172, 175, 183, 185, 186, 187, 190, 191, 192, 193, 195, 202, 206, 217, 219, 221, 223, 224, 225, 234, 235, 238, 239, 241, 244, 249, 252, 254, 261, 262, 265, 267, 269, 270, 271, 272, 273, 275, 276, 277, 280, 281, 283, 284, 286, 288, 289, 292, 294, 295, 308, 313, 315, 317, 319, 321, 322, 324, 330, 331, 333, 335, 336, 345, 348, 349, 352, 356, 358, 365, 368, 370, 371, 377, 379, 384, 385, 386, 388, 390, 391, 394, 395, 396, 399, 405, 408, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 432, 436, 446, 448, 449, 450, 452, 453, 454, 456, 458, 460, 461, 465, 467, 474, 475, 488, 489, 490, 491, 501, 509, 519, 522, 538, 539, 540, 542, 544, 549, 550, 551, 552, 553, 555, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 601, 608, 609, 610, 617, 618, 634, 637, 638, 645, 647, 652, 658, 661, 662, 663, 665, 671, 672, 673, 674, 675, 677, 680, 682, 683, 684, 685, 689, 690, 692, 694, 696, 697, 700, 701, 704, 710, 711, 712, 714, 715, 719, 720, 733, 736, 737, 745, 747, 749, 762, 763, 764, 785, 790, 791, 793, 794, 795, 801, 802, 803, 804, 805, 807, 810, 811, 818, 819, 821, 825, 832, 833, 834, 836, 837, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 858, 860, 866, 867, 868, 869, 871, 872, 874, 877, 878, 880, 881, 883, 884, 885, 887, 888, 891, 892, 894, 896, 897, 898, 900, 901, 902, 906, 907, 909, 913, 914, 915, 916, 917, 919, 920, 921, 922, 937, 938, 980, 991, 996, 997, 998, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "performancetip": 388, "perhap": [104, 146, 379, 381, 390, 396, 420, 1028], "perimet": [172, 379], "period": [2, 52, 153, 174, 179, 183, 386, 396, 397, 412, 424, 622, 828, 890, 1047, 1052, 1054], "periodic_spline_transform": 43, "periodicity_bound": [174, 179, 183, 622], "peripheri": 414, "perla": 1042, "perm_scores_iri": 281, "perm_scores_rand": 281, "perm_sorted_idx": 193, "permalink": 386, "perman": 390, "permiss": [381, 386, 397, 400, 401, 1032, 1054], "permit": [415, 473, 595, 596, 598, 807, 810, 811, 821, 833, 872, 873, 1008, 1009, 1010, 1045], "permut": [2, 58, 59, 72, 114, 145, 151, 165, 167, 187, 188, 233, 267, 275, 319, 322, 337, 399, 409, 414, 421, 470, 503, 507, 511, 566, 567, 571, 572, 634, 637, 641, 686, 711, 712, 724, 743, 744, 762, 764, 802, 824, 826, 836, 837, 871, 885, 916, 919, 920, 955, 976, 978, 981, 1008, 1022, 1029, 1034, 1039, 1045, 1052, 1054], "permutation_import": [2, 144, 145, 151, 192, 193, 324, 421, 560, 561, 564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922, 1016, 1049, 1051, 1052, 1056], "permutation_scor": 836, "permutation_test_scor": [2, 281, 405, 418, 1039, 1046, 1051, 1058], "permuted_categori": 322, "perp_tol": 543, "perpendicular": [70, 350], "perperogl": 1018, "perplex": [187, 236, 237, 239, 241, 295, 521, 532, 543, 699, 1005, 1029, 1044, 1046, 1053], "perri": 1049, "perrin": 1045, "perrot": [0, 1039], "persian": 1027, "persist": [390, 394, 419, 452, 617, 618, 867, 1013, 1027, 1034, 1045, 1048], "persola": 1047, "person": [45, 190, 269, 278, 377, 381, 418, 422, 500, 501, 502, 1018, 1047], "personal_statu": 269, "perspect": [90, 95, 217, 289, 369, 377, 394, 397, 537, 650, 911, 1001], "pertin": 217, "perturb": [190, 234, 313, 419, 421, 1007], "peru": [50, 308, 377, 505], "pervas": [365, 382], "pessimist": [149, 421], "pessoa": 1052, "pestrickland": 1045, "pet": [327, 331, 795, 1008], "pet_cat": 327, "pet_dog": 327, "pet_fish": 327, "petal": [80, 120, 131, 133, 146, 258, 326, 329, 379, 415, 924, 1024], "petal_col": 329, "petar": 1054, "pete": [1046, 1050, 1051], "peter": [0, 98, 404, 414, 454, 456, 463, 656, 799, 800, 1004, 1008, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1056], "peterlongo": 1056, "peterson": [1039, 1041], "petfood": 1032, "petrov": [1046, 1047, 1055], "petrushev": 1048, "pe\u00f1a": 1043, "pfaffel": 1052, "pfahring": [842, 1009], "pfe": 51, "pfister": 1018, "pfizer": 51, "pft": 218, "pg": [51, 388, 656, 1004, 1044], "pg_i": 656, "pgithub": 1051, "ph": 1051, "pham": [195, 1000, 1046], "phan": 419, "pharmaceut": 379, "phase": [43, 202, 211, 369, 634, 1000, 1005, 1011, 1032, 1047, 1049], "phase_nois": 75, "phd": [0, 414, 421, 1028, 1032], "phenol": 379, "phenomena": 179, "phenomenon": [357, 1018], "phi": [75, 419, 421, 750, 877, 1000, 1008, 1018, 1023], "phi_coeffici": 1008, "phil": [1044, 1055], "philipp": [1041, 1042, 1045, 1054], "phillip": [2, 50, 308, 377, 505], "phlypo": 1042, "phongpanagnam": 1052, "phongpanangam": 1052, "photo": 83, "photogrammetr": 1004, "php": 1008, "phrase": 422, "phy": [614, 615], "phyo": 1053, "physic": [2, 104, 143, 370, 512, 972, 1004, 1055], "physician": 413, "physiolog": [278, 379], "pi": [43, 53, 70, 74, 75, 124, 132, 155, 157, 167, 174, 198, 202, 204, 211, 218, 239, 260, 261, 262, 265, 266, 290, 308, 325, 331, 363, 400, 420, 424, 523, 524, 525, 622, 649, 1002, 1003, 1004, 1010], "pianomania": 1044, "pick": [83, 90, 95, 193, 252, 283, 328, 334, 377, 382, 386, 414, 421, 449, 466, 530, 680, 921, 922, 997, 1004, 1005, 1007, 1022, 1050], "pickl": [386, 396, 422, 596, 851, 852, 1027, 1028, 1034, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "pickleabl": [875, 1045], "pickup": 1047, "pico": [1042, 1043], "pict": [841, 1009], "pictur": [51, 55, 59, 71, 83, 101, 187, 248, 266, 377, 397, 414, 419, 422, 468, 500, 501, 528, 1028, 1029], "piec": [70, 82, 218, 370, 1007], "piecewis": [132, 327, 411, 999, 1004, 1018, 1024], "pierr": [1039, 1047, 1048, 1050, 1052, 1054, 1056, 1057], "pierreablin": 1047, "pierreattard": [1052, 1053], "pierretallott": [1047, 1048, 1049], "pierron": 1042, "piet": [1053, 1054], "pieter": [55, 1045, 1046, 1053], "pietro": [1039, 1042, 1056], "pietruh": 1047, "pig": 790, "pillow": [382, 400, 407], "pim": 1048, "pin": [388, 408], "pinaki": 1047, "pinbal": [2, 52, 150, 153, 327, 421, 569, 677, 730, 755, 1004, 1052, 1053], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [904, 1020, 1045, 1046], "pink": 198, "pinki": 1053, "pinot": 321, "pinto": 1039, "pintor": 1050, "pinvh": [1046, 1048], "piontek": 1055, "piotr": [1047, 1048, 1057], "pip": [295, 324, 325, 326, 327, 328, 329, 330, 331, 332, 370, 380, 382, 386, 388, 390, 400, 408, 410, 1024], "pip3": [380, 400], "pipe": [106, 107, 147, 170, 251, 256, 274, 321, 326, 327, 395, 405, 415, 422, 597, 871, 896, 897, 899, 900, 901, 902, 997, 1018], "pipe_sgd": 231, "pipegraph": 394, "pipelin": [2, 7, 43, 67, 89, 93, 105, 108, 109, 118, 142, 143, 147, 164, 166, 168, 170, 171, 172, 185, 186, 191, 192, 195, 197, 204, 206, 217, 218, 223, 231, 235, 238, 243, 244, 245, 247, 249, 254, 255, 258, 267, 269, 272, 274, 275, 282, 283, 286, 289, 290, 295, 297, 298, 303, 304, 310, 313, 317, 320, 322, 324, 325, 326, 327, 328, 329, 330, 338, 356, 357, 365, 369, 374, 376, 377, 382, 385, 396, 405, 408, 418, 422, 424, 428, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 509, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 614, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 720, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 821, 825, 829, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 998, 1000, 1004, 1011, 1012, 1017, 1018, 1022, 1023, 1027, 1028, 1029, 1030, 1032, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1056], "pipelineifittedpipelin": [105, 142, 169, 190, 192, 245, 255, 258, 282, 328], "pipelineinot": [158, 246, 256, 276, 289, 321, 325], "pipelinepipelin": [105, 106, 256, 269], "pita": 1056, "pitfal": [172, 187, 188, 189, 192, 213, 221, 222, 275, 326, 395, 396, 399, 418, 471, 473, 503, 660, 679, 680, 708, 760, 822, 834, 837, 872, 884, 891, 1004, 1029, 1034], "pitkin": [191, 1015], "pitt": 57, "pitter": 1054, "pivot": [81, 286, 287], "pivot_t": 286, "pixel": [2, 44, 45, 53, 58, 68, 82, 83, 88, 123, 136, 144, 170, 187, 192, 193, 195, 248, 273, 312, 313, 379, 414, 419, 421, 422, 423, 500, 501, 502, 571, 592, 593, 614, 615, 641, 1011, 1013, 1024, 1029], "pixelwis": 123, "pixi": 408, "piyg": 317, "pkdd": 0, "pkg": 380, "pkgsrc": 400, "pkl": 408, "pl": [2, 52, 107, 118, 179, 331, 379, 417, 488, 489, 490, 491, 1044], "place": [2, 43, 95, 245, 255, 299, 369, 382, 383, 384, 387, 389, 397, 412, 422, 424, 447, 448, 451, 452, 488, 489, 490, 522, 588, 597, 635, 637, 638, 775, 788, 804, 894, 896, 897, 898, 899, 900, 901, 902, 986, 987, 1027, 1039, 1046, 1049, 1050, 1052, 1056, 1057, 1058], "placehold": [57, 386, 634, 635, 636, 637, 822, 823, 826, 827, 996, 998], "plagre": 1046, "plai": [124, 151, 176, 201, 226, 268, 306, 341, 342, 369], "plain": [347, 424, 664, 1022], "plan": [51, 376, 380, 382, 383, 397, 408, 1018, 1042], "planar": 414, "plane": [51, 172, 229, 249, 301, 347, 349, 350, 354, 379, 458, 468, 1002, 1004, 1023], "plant": [281, 284, 285, 375, 1008, 1034], "plasma": 315, "plasma_r": 315, "plateau": [143, 148, 171, 269, 273, 277], "platform": [385, 396, 397, 1027, 1031, 1032, 1044, 1047, 1048, 1050, 1052, 1053, 1056, 1057], "platt": [412, 443, 913, 914, 916, 917, 1023], "platypu": 356, "pldtc325": 1046, "pleas": [0, 2, 51, 55, 63, 105, 106, 142, 144, 145, 151, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 221, 245, 246, 247, 249, 251, 254, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 295, 305, 313, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 349, 364, 370, 376, 377, 380, 382, 383, 384, 386, 390, 394, 395, 396, 400, 405, 408, 410, 414, 421, 422, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 503, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1008, 1012, 1018, 1022, 1023, 1027, 1028, 1031, 1039, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "pleasant": [381, 1032], "plenti": 62, "plgreenliru": 1050, "plo": [376, 614, 615], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 80, 89, 90, 91, 93, 94, 95, 96, 97, 100, 106, 107, 108, 109, 112, 113, 114, 118, 119, 123, 126, 127, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 144, 148, 149, 150, 152, 153, 155, 156, 157, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 229, 230, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 247, 248, 250, 252, 253, 258, 260, 261, 262, 264, 266, 267, 268, 269, 270, 275, 276, 278, 280, 281, 285, 286, 287, 288, 289, 290, 292, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 325, 328, 329, 330, 331, 335, 336, 339, 340, 341, 345, 346, 347, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 382, 385, 391, 394, 399, 400, 409, 412, 414, 416, 418, 420, 421, 444, 447, 452, 456, 462, 470, 477, 503, 508, 509, 511, 519, 530, 560, 564, 567, 569, 571, 572, 576, 577, 617, 629, 638, 639, 640, 664, 665, 679, 683, 704, 705, 707, 708, 709, 710, 725, 734, 742, 768, 789, 791, 794, 795, 796, 807, 813, 824, 830, 832, 833, 834, 835, 838, 840, 849, 853, 869, 872, 884, 885, 886, 888, 891, 911, 913, 916, 919, 920, 925, 1001, 1002, 1004, 1005, 1007, 1008, 1011, 1012, 1014, 1022, 1023, 1024, 1027, 1028, 1029, 1034, 1040, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "plot_": [327, 400], "plot_2d": [121, 237], "plot_3d": 237, "plot_accuraci": 47, "plot_adaboost_multiclass": [137, 1029], "plot_adaboost_regress": [138, 1029], "plot_adaboost_twoclass": [139, 1029], "plot_adjusted_for_chance_measur": [72, 1029], "plot_affinity_propag": [73, 446, 460, 1029], "plot_agglomerative_clust": [74, 1029], "plot_agglomerative_clustering_metr": [75, 1029], "plot_agglomerative_dendrogram": [76, 1029], "plot_all_sc": [315, 1029], "plot_anomaly_comparison": [244, 1029], "plot_ard": [197, 651, 1029], "plot_arg": 311, "plot_bayesian_ridge_curvefit": [198, 1029], "plot_benchmark_throughput": 49, "plot_bias_vari": [140, 1029], "plot_bicluster_newsgroup": [57, 1029], "plot_birch_vs_minibatchkmean": [77, 1029], "plot_bisect_kmean": [78, 1029], "plot_caching_nearest_neighbor": [297, 1029], "plot_calibr": [61, 382, 1029], "plot_calibration_curv": [62, 1029], "plot_calibration_multiclass": [63, 1029], "plot_causal_interpret": [189, 1029], "plot_chance_level": [254, 269, 282, 284, 285, 707, 709, 1055], "plot_classif": [298, 1029], "plot_classification_prob": [66, 1029], "plot_classifier_chain_yeast": [294, 1029], "plot_classifier_comparison": [67, 1029], "plot_clust": 87, "plot_cluster_comparison": [79, 1029], "plot_cluster_iri": [80, 1029], "plot_coin_segment": [81, 1029], "plot_coin_ward_segment": [82, 1029], "plot_color": [139, 361], "plot_color_quant": [83, 1029], "plot_column_transform": [104, 1029], "plot_column_transformer_mixed_typ": [105, 1029], "plot_compare_calibr": [64, 1029], "plot_compare_cross_decomposit": [117, 1029], "plot_compare_gpr_krr": [174, 1029], "plot_compare_method": [237, 1029], "plot_compare_reduct": [106, 1029], "plot_concentration_prior": [260, 1029], "plot_confusion_matrix": [268, 324, 1029, 1049, 1050, 1051, 1052], "plot_cost_complexity_prun": [360, 1029], "plot_cost_sensitive_learn": [269, 1029], "plot_covariance_estim": [111, 1029], "plot_custom_kernel": [341, 1029], "plot_cv_diabet": [163, 1029], "plot_cv_indic": [270, 1029], "plot_cv_predict": [271, 1029], "plot_cyclical_feature_engin": [43, 1029], "plot_dbscan": [84, 425, 450, 1029], "plot_decision_funct": 354, "plot_dendrogram": 76, "plot_det": [272, 1029], "plot_det_curv": [1051, 1052], "plot_dict_face_patch": [85, 1029], "plot_digit": 44, "plot_digits_agglomer": [86, 1029], "plot_digits_classif": [68, 1029], "plot_digits_classification_exercis": [164, 1029], "plot_digits_denois": [44, 1029], "plot_digits_kde_sampl": [299, 1029], "plot_digits_linkag": [87, 1029], "plot_digits_pip": [107, 1029], "plot_discret": [316, 1029], "plot_discretization_classif": [317, 1029], "plot_discretization_strategi": [318, 1029], "plot_display_object_visu": [245, 1029], "plot_distribut": 315, "plot_document_classification_20newsgroup": [356, 1029], "plot_document_clust": [357, 1029], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [199, 1029], "plot_ellips": [70, 260], "plot_embed": 238, "plot_ensemble_oob": [141, 1029], "plot_estimator_represent": [246, 1029], "plot_f_test_vs_mi": [167, 1029], "plot_face_compress": [88, 1029], "plot_face_recognit": [45, 1029], "plot_faces_decomposit": [123, 1029], "plot_feature_agglomeration_vs_univariate_select": [89, 1029], "plot_feature_effect": 356, "plot_feature_select": [168, 1029], "plot_feature_selection_pipelin": [169, 1029], "plot_feature_transform": [142, 1029], "plot_feature_union": [108, 1029], "plot_fig": 214, "plot_forest_hist_grad_boosting_comparison": [143, 1029], "plot_forest_import": [144, 1029], "plot_forest_importances_fac": [145, 1029], "plot_forest_iri": [146, 1029], "plot_galleri": [45, 123], "plot_gmm": [261, 1029], "plot_gmm_covari": [262, 1029], "plot_gmm_init": [263, 1029], "plot_gmm_pdf": [264, 1029], "plot_gmm_select": [265, 1029], "plot_gmm_sin": [266, 1029], "plot_gpc": [175, 1029], "plot_gpc_iri": [176, 1029], "plot_gpc_isoprob": [177, 1029], "plot_gpc_xor": [178, 1029], "plot_gpr_co2": [179, 1029], "plot_gpr_noisi": [180, 1029], "plot_gpr_noisy_target": [181, 1029], "plot_gpr_on_structured_data": [182, 1029], "plot_gpr_prior_posterior": [183, 1029], "plot_gpr_sampl": 183, "plot_gradient_boosting_categor": [147, 1029], "plot_gradient_boosting_early_stop": [148, 1029], "plot_gradient_boosting_oob": [149, 1029], "plot_gradient_boosting_quantil": [150, 1029], "plot_gradient_boosting_regress": [151, 1029], "plot_gradient_boosting_regular": [152, 1029], "plot_grid_search_digit": [273, 1029], "plot_grid_search_refit_cal": [274, 1029], "plot_grid_search_stat": [275, 1029], "plot_grid_search_text_feature_extract": [276, 1029], "plot_hashing_vs_dict_vector": [358, 1029], "plot_hdbscan": [90, 1029], "plot_hgbt_regress": [153, 1029], "plot_huber_vs_ridg": [200, 1029], "plot_hyperplan": [209, 226, 252], "plot_ica_blind_source_separ": [124, 1029], "plot_ica_vs_pca": [125, 1029], "plot_idx": 146, "plot_image_denois": [126, 1029], "plot_incremental_pca": [127, 1029], "plot_indic": 278, "plot_inductive_clust": [91, 1029], "plot_influ": 46, "plot_info": 147, "plot_iris_dataset": [120, 1029], "plot_iris_dtc": [361, 1029], "plot_iris_exercis": [165, 1029], "plot_iris_logist": [201, 1029], "plot_iris_svc": [342, 1029], "plot_isolation_forest": [154, 1029], "plot_isotonic_regress": [247, 1029], "plot_iterative_imputer_variants_comparison": [185, 1029], "plot_johnson_lindenstrauss_bound": [248, 1029], "plot_kde_1d": [300, 1029], "plot_kernel_approxim": [249, 1029], "plot_kernel_pca": [128, 1029], "plot_kernel_ridge_regress": [250, 1029], "plot_kind": 43, "plot_kmeans_assumpt": [92, 1029], "plot_kmeans_digit": [93, 1029], "plot_kmeans_plusplu": [94, 1029], "plot_kmeans_silhouette_analysi": [95, 1029], "plot_kmeans_stability_low_dim_dens": [96, 1029], "plot_label_propagation_digit": [334, 1029], "plot_label_propagation_digits_active_learn": [335, 1029], "plot_label_propagation_structur": [336, 1029], "plot_lasso_and_elasticnet": [202, 1029], "plot_lasso_dense_vs_sparse_data": [203, 1029], "plot_lasso_lars_": [204, 1029], "plot_lasso_lasso_lars_elasticnet_path": [205, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 1029], "plot_lasso_model_select": [206, 654, 660, 1029], "plot_lda": [69, 1029], "plot_lda_qda": [70, 1029], "plot_learning_curv": [277, 1029], "plot_likelihood_ratio": [278, 1029], "plot_linear_model_coefficient_interpret": [190, 1029], "plot_linearsvc_support_vector": [343, 1029], "plot_linkage_comparison": [97, 1029], "plot_lle_digit": [238, 1029], "plot_lof_novelty_detect": [301, 1029], "plot_lof_outlier_detect": [302, 1029], "plot_logist": [207, 1029], "plot_logistic_l1_l2_spars": [208, 1029], "plot_logistic_multinomi": [209, 1029], "plot_logistic_path": [210, 1029], "plot_lw_vs_oa": [112, 1029], "plot_mahalanobis_dist": [113, 1029], "plot_manifold_spher": [239, 1029], "plot_map_data_to_norm": [319, 1029], "plot_md": [240, 1029], "plot_mean_shift": [98, 1029], "plot_metadata_rout": [251, 1029], "plot_method": [48, 70, 201, 231, 298, 303, 341, 343, 344, 346, 347, 349, 638], "plot_mini_batch_kmean": [99, 1029], "plot_missing_valu": [186, 1029], "plot_mlp_alpha": [310, 1029], "plot_mlp_training_curv": [311, 1029], "plot_mnist_filt": [312, 1029], "plot_model_complexity_influ": [46, 1029], "plot_monotonic_constraint": [155, 1029], "plot_multi_metric_evalu": [279, 1029], "plot_multi_task_lasso_support": [211, 1029], "plot_multiclass_overview": [292, 1029], "plot_multilabel": [252, 1029], "plot_multioutput_face_complet": [253, 1029], "plot_n_features_influ": 49, "plot_nca_classif": [303, 1029], "plot_nca_dim_reduct": [304, 1029], "plot_nca_illustr": [305, 1029], "plot_nearest_centroid": [306, 1029], "plot_nested_cross_validation_iri": [280, 1029], "plot_nnl": [212, 1029], "plot_num": [79, 97, 244], "plot_obs_pr": 235, "plot_ol": [213, 1029], "plot_ols_3d": [214, 1029], "plot_ols_ridge_vari": [215, 1029], "plot_omp": [216, 1029], "plot_on_dataset": 311, "plot_oneclass": [344, 1029], "plot_opt": [100, 1029], "plot_out_of_core_classif": [47, 1029], "plot_outlier_detection_bench": [254, 1029], "plot_outlier_detection_win": [48, 1029], "plot_partial_depend": [191, 324, 325, 326, 1029, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "plot_partial_dependence_visualization_api": [255, 1029], "plot_pca_iri": [129, 1029], "plot_pca_vs_fa_model_select": [130, 1029], "plot_pca_vs_lda": [131, 1029], "plot_pcr_vs_pl": [118, 1029], "plot_permutation_import": [192, 193, 1029], "plot_permutation_importance_multicollinear": [193, 1029], "plot_permutation_tests_for_classif": [281, 1029], "plot_pipeline_displai": [256, 1029], "plot_poisson_regression_non_normal_loss": [217, 1029], "plot_polynomial_interpol": [218, 886, 890, 1029], "plot_precision_recal": [282, 1029], "plot_precision_recall_curv": [324, 1049, 1051, 1052], "plot_prediction_lat": [49, 1029], "plot_quantile_regress": [219, 1029], "plot_random_forest_embed": [156, 1029], "plot_random_forest_regression_multioutput": [157, 1029], "plot_random_multilabel_dataset": [121, 1029], "plot_randomized_search": [283, 1029], "plot_rang": 139, "plot_ransac": [220, 1029], "plot_rbf_paramet": [345, 1029], "plot_rbm_logistic_classif": [313, 1029], "plot_regress": [307, 1029], "plot_release_highlights_0_22_0": [324, 1029], "plot_release_highlights_0_23_0": [325, 1029], "plot_release_highlights_0_24_0": [326, 1029], "plot_release_highlights_1_0_0": [327, 1029], "plot_release_highlights_1_1_0": [328, 1029], "plot_release_highlights_1_2_0": [329, 1029], "plot_release_highlights_1_3_0": [330, 1029], "plot_release_highlights_1_4_0": [331, 1029], "plot_release_highlights_1_5_0": [332, 1029], "plot_result": [70, 147, 260, 261, 266], "plot_rfe_digit": [170, 1029], "plot_rfe_with_cross_valid": [171, 1029], "plot_ridge_coeff": [221, 1029], "plot_ridge_path": [222, 1029], "plot_robust_fit": [223, 1029], "plot_robust_vs_empirical_covari": [114, 1029], "plot_roc": [284, 1029], "plot_roc_crossv": [285, 1029], "plot_roc_curv": [324, 1049, 1051], "plot_roc_curve_visualization_api": [257, 1029], "plot_roc_pr_curv": 269, "plot_sampl": [125, 266], "plot_scalable_poly_kernel": [195, 1029], "plot_scaling_import": [320, 1029], "plot_scatt": 91, "plot_segmentation_toi": [101, 1029], "plot_select_from_model_diabet": [172, 1029], "plot_self_training_varying_threshold": [337, 1029], "plot_semi_supervised_newsgroup": [338, 1029], "plot_semi_supervised_versus_svm_iri": [339, 1029], "plot_separating_hyperplan": [346, 1029], "plot_separating_hyperplane_unbalanc": [347, 1029], "plot_set_output": [258, 1029], "plot_sgd_comparison": [224, 1029], "plot_sgd_early_stop": [225, 1029], "plot_sgd_iri": [226, 1029], "plot_sgd_loss_funct": [227, 1029], "plot_sgd_penalti": [228, 1029], "plot_sgd_separating_hyperplan": [229, 1029], "plot_sgd_weighted_sampl": [230, 1029], "plot_sgdocsvm_vs_ocsvm": [231, 1029], "plot_sparse_cod": [132, 1029], "plot_sparse_cov": [115, 1029], "plot_sparse_logistic_regression_20newsgroup": [232, 1029], "plot_sparse_logistic_regression_mnist": [233, 1029], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1029], "plot_species_kd": [308, 1029], "plot_spectral_biclust": [58, 1029], "plot_spectral_coclust": [59, 1029], "plot_stack_predictor": [158, 1029], "plot_step": [139, 146, 361], "plot_step_coars": 146, "plot_stock_market": [51, 1029], "plot_subfigur": 252, "plot_successive_halving_heatmap": [286, 1029], "plot_successive_halving_iter": [287, 1029], "plot_surfac": [191, 214], "plot_svm_anova": [348, 1029], "plot_svm_kernel": [349, 1029], "plot_svm_margin": [350, 1029], "plot_svm_regress": [351, 1029], "plot_svm_scale_c": [352, 1029], "plot_svm_tie_break": [353, 1029], "plot_swissrol": [241, 1029], "plot_t_sne_perplex": [242, 1029], "plot_target_encod": [321, 1029], "plot_target_encoder_cross_v": [322, 1029], "plot_theilsen": [234, 1029], "plot_time_series_lagged_featur": [52, 1029], "plot_titl": 260, "plot_tomography_l1_reconstruct": [53, 1029], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1029], "plot_train_error_vs_test_error": [288, 1029], "plot_training_data_with_decision_boundari": 349, "plot_transformed_target": [109, 1029], "plot_tre": [2, 361, 364, 1024, 1048, 1050, 1051, 1052, 1054, 1055, 1057], "plot_tree_regress": [362, 1029], "plot_tree_regression_multioutput": [363, 1029], "plot_tuned_decision_threshold": [289, 1029], "plot_tweedie_regression_insurance_claim": [235, 1029], "plot_underfitting_overfit": [290, 1029], "plot_unveil_tree_structur": [364, 1029], "plot_varimax_fa": [133, 1029], "plot_voting_decision_region": [159, 1029], "plot_voting_proba": [160, 1029], "plot_voting_regressor": [161, 1029], "plot_ward_structured_vs_unstructur": [102, 1029], "plot_weighted_sampl": [354, 1029], "plotli": [143, 276, 382, 400, 407], "pls1": [417, 490], "pls2": [417, 490], "plsca": [117, 489], "plscanon": [2, 117, 488, 490, 491, 1009, 1030, 1034, 1043, 1047, 1049, 1051, 1053, 1057], "plsregress": [2, 117, 118, 1009, 1030, 1034, 1046, 1049, 1051, 1053, 1055, 1057, 1058], "plssvd": [2, 488, 489, 1030, 1034, 1051, 1053, 1057], "plsw2a": 417, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 331, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 378, 389, 444, 509, 638, 639, 704, 705, 707, 708, 709, 813, 830, 925, 1015, 1036], "plu": [282, 379, 387, 686, 842, 845, 1009, 1022], "plug": [419, 1004, 1032], "plugin": 400, "plural": 1045, "pm": [183, 191, 285, 421, 1008], "pmlr": 703, "pmml": 1027, "png": [0, 68, 923], "pnucci": 1055, "po": [151, 240, 422], "podshumok": [1045, 1046], "poesio": 723, "poetri": 408, "poh": [1047, 1048], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 83, 84, 87, 90, 93, 95, 99, 102, 113, 114, 117, 120, 121, 122, 124, 126, 128, 137, 139, 143, 146, 147, 148, 153, 156, 171, 172, 176, 181, 182, 187, 190, 191, 192, 197, 201, 206, 209, 211, 213, 215, 217, 218, 219, 221, 223, 226, 229, 230, 234, 235, 237, 238, 239, 240, 241, 244, 247, 249, 262, 266, 267, 268, 272, 276, 277, 278, 282, 284, 285, 292, 294, 295, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 316, 317, 319, 321, 332, 334, 335, 337, 339, 341, 345, 346, 347, 349, 350, 353, 354, 356, 357, 358, 361, 365, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 390, 394, 396, 397, 410, 413, 414, 419, 420, 421, 422, 425, 426, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 466, 467, 475, 478, 480, 503, 505, 511, 519, 521, 522, 526, 529, 532, 537, 540, 542, 548, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 617, 618, 635, 638, 639, 640, 644, 645, 646, 651, 652, 658, 662, 664, 665, 677, 678, 680, 682, 683, 685, 686, 689, 690, 695, 696, 697, 698, 699, 700, 701, 708, 713, 714, 717, 720, 724, 730, 732, 738, 743, 744, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 771, 786, 787, 797, 798, 804, 805, 807, 821, 823, 829, 832, 834, 841, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 868, 869, 872, 876, 881, 890, 891, 905, 906, 907, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 935, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1020, 1021, 1023, 1024, 1027, 1028, 1029, 1034, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "pointer": [382, 390, 448, 1048], "pointplot": 153, "points_color": 237, "pointwis": [140, 181, 425, 450], "poisson": [2, 43, 52, 187, 196, 252, 378, 421, 470, 471, 503, 530, 559, 565, 569, 572, 655, 676, 679, 687, 713, 731, 752, 756, 757, 759, 837, 871, 872, 875, 876, 884, 885, 886, 891, 920, 922, 959, 1004, 1024, 1029, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "poisson_gbrt": 217, "poisson_glm": 217, "poissonregressor": [2, 217, 235, 325, 328, 655, 687, 1004, 1050, 1053, 1054, 1058], "pokorni": 1054, "pola": 52, "polar": [107, 179, 382, 400, 407, 438, 448, 449, 451, 453, 455, 470, 474, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 568, 569, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 695, 696, 699, 855, 860, 863, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 909, 1056, 1057], "pole": 239, "poli": [43, 165, 195, 275, 342, 349, 351, 458, 542, 627, 772, 781, 807, 886, 913, 914, 915, 916, 917, 1004, 1018], "polici": [153, 189, 190, 217, 235, 269, 385, 396, 542, 548, 1004, 1054], "policyhold": [217, 235, 1004], "polit": [57, 356, 377, 381, 1004, 1009], "pollak": 1057, "polli": 356, "pollut": [356, 735, 792, 1008, 1014], "polmauri": 1046, "poloso": 1053, "polycollect": [813, 830], "polynomi": [2, 54, 185, 187, 194, 196, 217, 223, 249, 256, 275, 290, 300, 326, 327, 342, 351, 374, 378, 458, 497, 627, 646, 647, 648, 650, 652, 679, 772, 781, 782, 837, 872, 881, 883, 886, 890, 911, 913, 914, 915, 916, 917, 1003, 1023, 1029, 1030, 1034, 1051, 1052], "polynomial_featur": 290, "polynomial_kernel": [2, 410, 772, 1006, 1056, 1058], "polynomialcountsketch": [2, 195, 646, 648, 1000, 1051, 1053, 1056], "polynomialfeatur": [2, 43, 197, 217, 218, 223, 256, 290, 326, 349, 890, 1004, 1018, 1043, 1047, 1048, 1049, 1052, 1053, 1055, 1056], "polynomialfeaturespolynomialfeatur": 256, "polysemi": 419, "polytop": 522, "pomegran": 1027, "ponc": [419, 538, 544], "poncho": 1032, "pone": 376, "ponnuthurai": 379, "ponzi": 321, "pooch": [88, 382, 400, 407], "pooja": [1054, 1055, 1056], "pool": [284, 394, 451, 642, 976, 1028, 1050], "pooling_func": [451, 1047], "poolqc": 147, "poolsawat": [1053, 1054], "poor": [191, 195, 281, 337, 412, 418, 419, 697, 701, 745, 848, 851, 852, 1002, 1003, 1005, 1010, 1028, 1046, 1047, 1048, 1050, 1052], "poor_scor": [927, 929], "poorer": [147, 365, 419], "poorest": 1010, "poorli": [62, 64, 97, 111, 118, 140, 152, 241, 370, 414, 421, 535, 637, 1004, 1005, 1045], "poorna": [1049, 1051], "pop": [364, 394, 926, 1047], "popa": [1049, 1050], "popitem": 926, "popo": 1042, "popul": [106, 111, 113, 153, 190, 217, 254, 278, 315, 377, 391, 396, 416, 446, 496, 719, 725, 853, 854, 855, 857, 859, 861, 862, 863, 976, 1008, 1014, 1018, 1024], "popular": [6, 10, 185, 241, 377, 380, 387, 390, 394, 396, 420, 421, 422, 424, 458, 468, 998, 1000, 1004, 1006, 1013, 1022, 1028], "port": [380, 400, 1049], "portabl": [408, 1027], "portfolio": [217, 235, 1002], "portion": [45, 47, 114, 148, 172, 284, 369, 377, 379, 382, 388, 396, 795, 832, 849, 997, 1007, 1011], "portland": [414, 425, 450], "portnoi": [1004, 1056], "portrait": [45, 419], "pos_class": 47, "pos_label": [245, 254, 269, 289, 396, 413, 444, 445, 705, 707, 709, 713, 714, 716, 734, 736, 737, 745, 789, 790, 791, 794, 796, 806, 878, 895, 1008, 1047, 1051, 1053, 1057], "pos_lr": 278, "pos_lr_bas": 278, "pos_lr_base_std": 278, "pos_tagg": 422, "pos_vector": 422, "pos_window": 422, "pose": [221, 283, 1004], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 102, 133, 153, 155, 160, 170, 183, 189, 190, 202, 205, 212, 217, 218, 219, 221, 235, 240, 248, 254, 269, 272, 275, 278, 282, 284, 285, 288, 289, 315, 325, 326, 330, 332, 356, 364, 369, 377, 381, 382, 384, 389, 391, 396, 397, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 444, 445, 448, 452, 453, 455, 470, 473, 501, 505, 507, 511, 515, 516, 517, 532, 534, 536, 537, 538, 540, 542, 543, 544, 549, 552, 553, 555, 556, 557, 564, 568, 569, 570, 571, 599, 600, 601, 602, 603, 605, 606, 607, 609, 613, 617, 618, 627, 638, 639, 650, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 676, 679, 680, 681, 682, 684, 687, 688, 689, 690, 691, 694, 697, 705, 707, 709, 714, 716, 719, 720, 722, 723, 725, 727, 729, 731, 734, 736, 737, 738, 742, 743, 745, 746, 747, 748, 750, 751, 759, 761, 765, 773, 789, 790, 791, 794, 795, 796, 804, 805, 806, 810, 811, 834, 851, 852, 853, 855, 857, 859, 861, 863, 864, 874, 875, 878, 884, 887, 890, 895, 899, 903, 904, 906, 907, 911, 912, 915, 916, 917, 919, 921, 928, 931, 934, 953, 955, 972, 974, 999, 1000, 1004, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1023, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "position": 396, "positive_class": [47, 719], "positive_cod": [123, 538, 544, 549, 552, 553], "positive_dict": [123, 538, 544, 552, 553], "positive_featur": 387, "positive_likelihood_ratio": [278, 719], "positive_onli": [928, 931], "posix": [370, 394], "posixpath": 52, "possa": 1046, "possibl": [30, 43, 52, 55, 63, 64, 72, 84, 90, 105, 111, 123, 140, 143, 153, 155, 174, 190, 191, 192, 193, 217, 234, 235, 249, 251, 269, 275, 276, 277, 278, 280, 281, 282, 284, 285, 294, 324, 345, 352, 356, 357, 365, 369, 370, 371, 375, 376, 377, 382, 383, 384, 385, 386, 388, 390, 394, 395, 396, 400, 405, 408, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 424, 426, 428, 437, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 503, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 697, 698, 699, 716, 728, 729, 730, 731, 735, 749, 763, 785, 790, 792, 795, 804, 805, 806, 807, 809, 810, 811, 813, 819, 820, 821, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 935, 937, 938, 941, 947, 978, 981, 997, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1016, 1018, 1023, 1024, 1028, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055], "possibli": [92, 118, 172, 217, 232, 349, 357, 379, 381, 390, 408, 414, 421, 422, 457, 459, 596, 846, 847, 848, 849, 850, 916, 917, 919, 920, 921, 922, 997, 1000, 1005, 1011, 1018, 1054, 1058], "post": [2, 46, 54, 57, 104, 171, 172, 187, 245, 267, 279, 282, 292, 328, 332, 337, 356, 357, 358, 359, 364, 369, 377, 381, 382, 387, 395, 409, 414, 454, 494, 495, 503, 507, 558, 564, 565, 566, 567, 568, 571, 572, 665, 707, 709, 719, 725, 749, 791, 794, 806, 807, 823, 829, 834, 837, 872, 891, 909, 919, 920, 921, 922, 1008, 1024, 1029, 1031, 1032, 1034, 1050], "post1": [380, 400, 406, 407, 1037], "poster": [356, 381, 382], "posterior": [92, 173, 174, 175, 180, 187, 197, 269, 275, 289, 419, 424, 556, 557, 559, 617, 618, 620, 621, 622, 626, 629, 630, 634, 651, 652, 715, 804, 806, 829, 1002, 1027, 1029, 1045, 1048], "posteriori": [1004, 1010], "postfit_hook": 46, "postiv": 282, "postpon": [384, 386], "postprocess": [61, 412, 542, 548], "postprocessor": 1050, "postscript": 923, "potenti": [2, 43, 64, 90, 111, 153, 186, 189, 191, 197, 269, 301, 302, 310, 330, 331, 349, 358, 369, 370, 380, 396, 400, 405, 413, 414, 418, 421, 422, 474, 488, 489, 490, 491, 503, 531, 556, 564, 565, 568, 569, 571, 572, 580, 613, 618, 641, 770, 829, 901, 902, 909, 919, 920, 921, 922, 1014, 1022, 1024, 1027, 1042, 1049, 1050, 1053, 1056, 1057], "poughon": 1046, "poundal": 104, "pour": 1008, "pourbozorg": [1047, 1048, 1049], "pow": [683, 684, 685, 868, 869], "powel": [45, 377], "power": [2, 43, 46, 55, 143, 148, 189, 218, 235, 266, 278, 283, 299, 315, 316, 319, 334, 342, 369, 370, 395, 412, 414, 417, 420, 421, 422, 425, 450, 488, 489, 490, 539, 542, 548, 551, 637, 687, 701, 731, 754, 756, 759, 853, 854, 861, 862, 864, 865, 886, 887, 888, 899, 900, 954, 955, 1004, 1005, 1008, 1016, 1018, 1022, 1023, 1032, 1042, 1045, 1047, 1049, 1050, 1052, 1056], "power_iteration_norm": [410, 548, 551, 954, 955, 1053], "power_t": [683, 684, 685, 868, 869, 1022], "power_transform": [2, 887, 900, 1047], "powers_": 886, "powershel": 380, "powertransform": [2, 319, 888, 899, 998, 1018, 1047, 1050, 1053, 1055, 1058], "pox": 292, "poznik": [1052, 1053, 1054], "pp": [0, 98, 172, 274, 379, 414, 416, 422, 425, 426, 450, 454, 458, 468, 518, 540, 541, 548, 597, 642, 650, 671, 692, 693, 727, 733, 737, 747, 763, 776, 790, 846, 848, 850, 867, 887, 899, 1001, 1008, 1010, 1011, 1021], "pp2013": 1000, "pp84": 424, "ppc64le": 390, "ppf": 275, "ppm": 179, "pprint": [55, 150, 251, 276, 377, 950], "pq": [52, 329], "pr": [0, 160, 370, 382, 385, 386, 390, 422, 748, 1008, 1031, 1049, 1051], "pr_displai": 245, "pr_number": 390, "prabakaran": [1047, 1048, 1051, 1053, 1054], "prabhakar": 419, "practic": [64, 88, 105, 113, 118, 126, 143, 147, 148, 153, 174, 189, 190, 195, 202, 219, 244, 250, 276, 283, 301, 302, 326, 332, 345, 349, 370, 382, 384, 385, 386, 388, 390, 395, 396, 414, 416, 418, 419, 420, 421, 422, 424, 453, 458, 468, 528, 531, 596, 639, 640, 677, 804, 850, 904, 911, 997, 998, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1027, 1028, 1030, 1032, 1033, 1034, 1041, 1045, 1047, 1049, 1051], "practicalswift": 1045, "practis": 222, "practition": [141, 221], "pradeep": [1047, 1048], "pragmat": 382, "prakash": [1044, 1046, 1052], "pramod": 1053, "pranayanchuri": 1052, "prang": 383, "prasanth": 1054, "pratama": 1050, "pratap": [1043, 1046, 1053], "prathmesh": 1048, "pratik": 1046, "pratiqu": 379, "pravar": 1047, "pravarmahajan": [1046, 1047], "pre": [44, 105, 190, 206, 288, 315, 358, 380, 382, 396, 400, 413, 416, 418, 419, 421, 422, 423, 425, 426, 449, 450, 453, 465, 540, 542, 697, 719, 770, 806, 874, 916, 1008, 1013, 1018, 1023, 1024, 1027, 1028, 1034, 1042, 1047, 1053, 1057, 1058], "pre_dispatch": [807, 813, 821, 830, 832, 833, 834, 835, 838, 973, 1042], "preambl": 90, "prec": [115, 245, 534, 1008], "prec_": 115, "prec_macro": 418, "preced": [370, 382, 386, 493, 1008, 1039], "precipit": 412, "precis": [2, 8, 45, 52, 62, 68, 104, 109, 115, 123, 169, 180, 181, 187, 195, 245, 267, 268, 269, 273, 313, 315, 334, 335, 382, 384, 396, 410, 411, 412, 413, 414, 416, 419, 421, 449, 475, 476, 477, 478, 479, 480, 481, 482, 484, 511, 530, 539, 541, 548, 551, 651, 652, 653, 655, 657, 658, 659, 661, 662, 663, 676, 679, 681, 687, 689, 690, 694, 706, 707, 713, 714, 715, 720, 734, 736, 737, 738, 746, 748, 770, 789, 790, 791, 794, 795, 804, 805, 829, 837, 840, 851, 852, 857, 872, 891, 895, 911, 916, 923, 925, 955, 1002, 1004, 1011, 1012, 1023, 1029, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "precision_": [51, 115, 475, 476, 477, 478, 479, 480, 481, 482], "precision_macro": 418, "precision_recall_curv": [2, 245, 282, 707, 713, 714, 734, 1008, 1040, 1041, 1045, 1052, 1053, 1055, 1057], "precision_recall_fscore_support": [2, 720, 736, 737, 791, 794, 1008, 1043, 1047, 1049, 1055], "precision_scor": [2, 62, 269, 282, 715, 794, 1008, 1039, 1041, 1042, 1043, 1044, 1049, 1055], "precision_threshold": 273, "precisionrecalldisplai": [2, 269, 282, 327, 789, 791, 794, 1008, 1049, 1052, 1055, 1056, 1057], "precisions_": [804, 805], "precisions_cholesky_": [804, 805, 1053], "precisions_init": [805, 1053, 1055], "precompil": 380, "precomput": [122, 123, 124, 187, 196, 216, 240, 295, 297, 384, 391, 394, 396, 414, 422, 425, 437, 446, 447, 450, 451, 452, 456, 458, 463, 471, 477, 488, 489, 490, 531, 538, 542, 544, 547, 548, 549, 555, 561, 563, 565, 567, 569, 572, 575, 577, 617, 618, 627, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 688, 689, 691, 692, 695, 697, 698, 699, 703, 781, 785, 788, 799, 800, 807, 821, 844, 845, 853, 854, 855, 857, 858, 859, 861, 862, 863, 869, 912, 913, 914, 915, 916, 917, 920, 922, 928, 983, 984, 985, 1000, 1004, 1006, 1011, 1023, 1028, 1029, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "precompute_dist": [1043, 1050], "precompute_gram": 1041, "precomputed_nearest_neighbor": [458, 698], "precondit": [414, 458, 468, 702, 1024, 1055], "pred": [43, 46, 50, 52, 68, 353, 356, 377, 655, 676, 687, 704, 709, 713, 725, 736, 737, 745, 790, 791, 794, 795, 1008], "pred1": 161, "pred2": 161, "pred3": 161, "pred4": 161, "pred_background": 50, "pred_decis": [742, 1008, 1052], "pred_entropi": [334, 335], "pred_nam": 45, "pred_ort": 408, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [137, 456, 461, 462, 463, 1056], "predecessor_": [456, 463], "predecessor_correct": [456, 462], "predefin": [2, 279, 820, 997, 1011, 1054, 1056], "predefinedsplit": [2, 418, 1043], "predetermin": [414, 1005], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 83, 91, 92, 93, 97, 104, 105, 106, 107, 109, 117, 133, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 158, 159, 160, 169, 170, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 195, 197, 200, 201, 202, 209, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 231, 232, 234, 235, 244, 245, 247, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267, 268, 273, 275, 277, 278, 281, 284, 285, 289, 290, 292, 294, 298, 301, 302, 303, 306, 307, 313, 315, 316, 320, 321, 324, 325, 326, 327, 328, 330, 331, 332, 335, 337, 338, 339, 341, 342, 344, 345, 349, 351, 352, 353, 356, 357, 361, 362, 363, 364, 365, 368, 370, 374, 377, 379, 382, 384, 389, 391, 396, 399, 405, 408, 409, 410, 412, 414, 415, 417, 419, 421, 422, 423, 428, 431, 436, 437, 443, 444, 445, 446, 448, 449, 450, 453, 454, 455, 471, 475, 488, 489, 490, 493, 508, 515, 531, 541, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 589, 600, 601, 609, 613, 617, 618, 620, 621, 622, 623, 629, 632, 634, 635, 637, 638, 639, 640, 641, 642, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 719, 721, 722, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 745, 748, 749, 750, 753, 755, 757, 759, 763, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 803, 804, 805, 806, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 857, 858, 861, 862, 868, 869, 871, 878, 891, 892, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 981, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1032, 1034, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "predict_ecoc": 1043, "predict_joint_log_proba": [846, 847, 848, 849, 850, 1054], "predict_log_proba": [384, 396, 556, 557, 558, 560, 562, 564, 566, 571, 600, 601, 665, 666, 683, 806, 807, 810, 811, 821, 829, 832, 842, 846, 847, 848, 849, 850, 868, 871, 908, 913, 916, 919, 921, 1023, 1039, 1052, 1056, 1058], "predict_ovo": 1043, "predict_ovr": 1043, "predict_param": [251, 471, 574, 575, 600, 601, 1052], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 156, 160, 172, 175, 176, 177, 178, 269, 284, 289, 294, 310, 317, 320, 324, 326, 332, 356, 384, 389, 396, 412, 413, 421, 443, 444, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 600, 601, 617, 626, 627, 629, 630, 638, 639, 640, 665, 666, 683, 705, 707, 709, 729, 748, 749, 795, 804, 805, 806, 807, 810, 811, 821, 829, 832, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 853, 861, 868, 871, 878, 906, 907, 908, 913, 916, 919, 921, 930, 1004, 1008, 1010, 1012, 1015, 1021, 1022, 1023, 1024, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "predict_proba_ovr": 1043, "predicted_label": [334, 335], "prediction_df": 153, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 109, 158, 190, 271, 329, 1008, 1054, 1056], "predictions_kr": 174, "predictive_analyt": 1024, "predictive_word": 356, "predictor": [2, 109, 136, 147, 161, 185, 187, 217, 235, 246, 271, 384, 395, 396, 415, 417, 418, 421, 424, 472, 473, 488, 489, 490, 503, 523, 524, 525, 562, 563, 569, 572, 575, 609, 617, 637, 639, 640, 655, 660, 664, 676, 680, 687, 708, 832, 834, 843, 844, 871, 872, 884, 885, 891, 981, 1004, 1009, 1029, 1040, 1046, 1049], "predispatch": [813, 830, 835, 838], "predit": 118, "predomin": [384, 1040], "prefer": [73, 79, 90, 153, 266, 284, 315, 365, 369, 370, 371, 382, 383, 384, 396, 414, 418, 419, 421, 422, 446, 460, 477, 478, 484, 493, 515, 516, 634, 639, 640, 661, 665, 666, 708, 733, 735, 749, 764, 765, 842, 860, 886, 911, 912, 961, 973, 997, 1000, 1002, 1004, 1008, 1013, 1023, 1024, 1027, 1031, 1040, 1046, 1048, 1052, 1053, 1056], "prefetch": 973, "prefit": [63, 269, 396, 412, 413, 423, 443, 574, 575, 604, 806, 829, 1028, 1051, 1052, 1053, 1058], "prefix": [2, 55, 104, 276, 297, 324, 382, 386, 388, 390, 424, 430, 448, 449, 451, 453, 455, 470, 473, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 646, 647, 648, 649, 695, 696, 699, 813, 835, 855, 860, 863, 867, 870, 871, 877, 903, 904, 1045, 1046, 1052, 1054, 1057], "prein": [0, 372, 1051, 1052, 1053], "preiss": 1052, "preliminari": 468, "prematur": 1052, "prepar": [218, 251, 356, 369, 386, 388, 390, 930, 1024, 1032, 1047, 1055], "prepend": [190, 1039], "preprint": 379, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 84, 88, 90, 93, 97, 104, 105, 106, 107, 109, 118, 123, 133, 142, 147, 168, 170, 172, 179, 192, 195, 197, 199, 204, 206, 208, 217, 218, 223, 233, 235, 238, 245, 246, 255, 258, 269, 272, 282, 284, 289, 290, 298, 303, 304, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 345, 348, 357, 371, 374, 376, 379, 382, 387, 395, 396, 408, 410, 411, 414, 415, 418, 421, 422, 423, 470, 471, 472, 473, 495, 574, 588, 589, 595, 596, 598, 637, 665, 666, 679, 681, 683, 685, 694, 840, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 911, 912, 913, 914, 916, 917, 998, 1004, 1009, 1012, 1019, 1022, 1023, 1025, 1027, 1029, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "preprocessor": [105, 158, 190, 217, 246, 254, 256, 321, 325, 327, 328, 329, 331, 415, 422, 595, 596, 598, 1027, 1039, 1042, 1047, 1049], "preprocessor__cat__selector__percentil": 105, "preprocessor__num__imputer__strategi": 105, "preprocessor_list": 254, "prescrib": 396, "presenc": [2, 48, 95, 97, 113, 114, 135, 189, 193, 202, 221, 254, 315, 380, 383, 396, 416, 419, 719, 733, 763, 776, 840, 874, 882, 884, 891, 991, 998, 1004, 1008, 1009, 1022, 1031, 1042, 1043, 1045, 1049, 1051, 1053], "present": [0, 2, 43, 44, 52, 78, 84, 121, 123, 130, 142, 143, 150, 153, 154, 171, 172, 180, 183, 197, 200, 202, 206, 217, 244, 247, 251, 265, 269, 273, 278, 281, 284, 285, 295, 315, 318, 320, 357, 379, 380, 384, 387, 394, 396, 405, 412, 414, 416, 419, 421, 422, 432, 433, 436, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 498, 499, 503, 507, 508, 509, 510, 511, 512, 517, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 556, 557, 568, 569, 570, 573, 576, 577, 588, 589, 590, 595, 596, 598, 624, 634, 635, 636, 637, 657, 661, 684, 695, 696, 697, 698, 719, 736, 737, 745, 776, 790, 791, 794, 804, 805, 807, 810, 811, 819, 821, 835, 853, 854, 855, 857, 859, 861, 862, 863, 870, 875, 883, 884, 885, 886, 887, 889, 892, 903, 904, 915, 923, 925, 926, 955, 991, 1007, 1008, 1009, 1010, 1015, 1018, 1026, 1028, 1042, 1047, 1049, 1050, 1051, 1053, 1054, 1056, 1058], "preserv": [37, 43, 83, 128, 241, 248, 270, 385, 418, 419, 421, 422, 588, 595, 596, 598, 653, 659, 703, 781, 785, 825, 826, 827, 895, 932, 937, 938, 998, 1004, 1005, 1018, 1020, 1027, 1039, 1042, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057], "preserves_dtyp": 932, "preservs": 1053, "preset": [673, 675, 683, 1012], "presort": [1044, 1049], "press": [377, 414, 419, 424, 425, 450, 597, 617, 618, 621, 626, 629, 650, 846, 850, 1001, 1004, 1006, 1010], "pressur": [172, 379], "preston": [1044, 1045, 1046], "presum": [190, 294, 414, 422, 846], "prettenhof": [0, 404, 1039, 1040, 1041, 1042, 1043, 1044], "pretti": [191, 241, 273, 356, 369, 382, 394, 868, 869, 1012, 1048], "preuss": 1055, "prev_scor": 55, "preval": [137, 324, 396, 707, 719, 1008], "prevalence_pos_label": [282, 707], "prevent": [43, 90, 148, 150, 169, 189, 218, 221, 315, 321, 322, 345, 356, 360, 365, 382, 384, 386, 394, 395, 408, 410, 414, 419, 422, 448, 455, 494, 495, 568, 569, 597, 598, 618, 735, 792, 868, 869, 896, 897, 899, 900, 901, 902, 1008, 1010, 1013, 1014, 1018, 1024, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "previou": [43, 78, 88, 105, 123, 140, 147, 148, 150, 158, 174, 179, 180, 189, 190, 191, 202, 203, 218, 248, 250, 251, 269, 275, 278, 282, 315, 320, 328, 356, 357, 358, 365, 369, 377, 382, 384, 386, 387, 388, 390, 394, 396, 397, 400, 413, 414, 421, 422, 474, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 637, 653, 655, 659, 660, 665, 667, 669, 673, 674, 675, 676, 683, 684, 685, 687, 714, 826, 842, 845, 860, 868, 869, 908, 925, 1004, 1008, 1012, 1018, 1028, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "previous": [46, 88, 92, 105, 137, 180, 190, 269, 273, 282, 289, 328, 377, 390, 394, 400, 414, 419, 422, 446, 449, 460, 531, 541, 548, 656, 665, 666, 673, 674, 675, 683, 684, 685, 911, 1004, 1018, 1027, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "previous_loss": [673, 674, 675, 684], "previs": 245, "price": [51, 109, 147, 148, 153, 158, 254, 321, 998, 1004, 1005, 1032], "priceless": 382, "prieur": 1052, "primal": [665, 666, 684, 911, 912, 1022, 1023], "primari": [396, 419, 522, 928, 1015, 1031, 1032], "primarili": [266, 280, 382, 396, 410, 414, 965, 1032, 1048, 1049], "primat": 356, "primdal": 1047, "primit": 1054, "princ": 1052, "princip": [2, 42, 116, 117, 120, 125, 127, 128, 129, 131, 156, 187, 237, 249, 252, 304, 320, 326, 374, 414, 417, 426, 490, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 557, 664, 695, 696, 697, 699, 700, 837, 860, 872, 891, 954, 955, 1005, 1011, 1029, 1033, 1034, 1039], "principl": [137, 181, 300, 358, 382, 394, 396, 397, 418, 421, 955, 997, 1007, 1011, 1022, 1046], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 81, 82, 83, 84, 85, 87, 88, 93, 95, 96, 98, 102, 104, 105, 107, 108, 109, 113, 117, 118, 121, 123, 126, 130, 131, 133, 137, 140, 143, 144, 145, 146, 147, 149, 151, 153, 163, 164, 168, 169, 171, 172, 174, 175, 177, 179, 183, 189, 191, 192, 193, 195, 202, 203, 205, 208, 209, 212, 213, 217, 219, 220, 221, 224, 225, 232, 233, 235, 238, 239, 242, 246, 248, 250, 251, 254, 258, 263, 268, 269, 273, 274, 275, 276, 278, 280, 283, 284, 288, 295, 299, 306, 308, 311, 312, 313, 317, 320, 322, 324, 325, 326, 328, 330, 331, 332, 334, 335, 338, 345, 356, 357, 358, 360, 364, 365, 369, 376, 377, 380, 383, 384, 390, 396, 405, 408, 415, 418, 421, 422, 424, 470, 473, 474, 478, 484, 496, 501, 509, 519, 520, 548, 551, 556, 557, 566, 567, 568, 569, 571, 572, 576, 577, 584, 590, 591, 592, 594, 595, 596, 598, 619, 624, 625, 637, 653, 654, 656, 657, 659, 660, 661, 663, 667, 668, 669, 670, 673, 674, 683, 684, 691, 703, 720, 724, 744, 802, 804, 805, 806, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 838, 840, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 868, 869, 870, 871, 872, 873, 881, 887, 891, 899, 909, 910, 911, 912, 913, 916, 918, 924, 936, 941, 968, 991, 998, 1008, 1009, 1010, 1011, 1016, 1024, 1039, 1041, 1047, 1048, 1050, 1054, 1058], "print_changed_onli": [474, 909, 1048, 1050, 1051], "print_datafram": 273, "print_progress": 973, "print_rout": 251, "printabl": 1031, "prior": [2, 42, 46, 55, 81, 82, 92, 100, 101, 102, 121, 173, 174, 180, 186, 187, 192, 197, 199, 202, 259, 261, 265, 266, 269, 275, 286, 305, 382, 384, 396, 400, 405, 414, 417, 419, 421, 424, 471, 530, 543, 555, 556, 557, 558, 566, 618, 620, 621, 622, 626, 629, 630, 637, 651, 652, 653, 654, 658, 659, 661, 662, 663, 667, 668, 669, 679, 685, 688, 723, 804, 846, 847, 848, 849, 850, 871, 872, 886, 913, 916, 974, 997, 1000, 1002, 1004, 1007, 1008, 1010, 1016, 1024, 1025, 1029, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1055], "prior_k": 556, "priori": [217, 234, 284, 294, 315, 396, 414, 421, 595, 601, 1007, 1055], "priorit": [413, 1028, 1046], "prioriti": [381, 639, 839, 840, 1028, 1042], "priors_": [556, 557], "privaci": 1027, "privat": [0, 384, 386, 396, 397, 933, 1032, 1039, 1047, 1049, 1050, 1052, 1053, 1058], "privileg": [254, 390], "priyam": 1054, "priyank": 1057, "priyansh": 1057, "priyash": 1057, "prng": 115, "pro": [408, 1007], "proanthocyanin": 379, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [444, 445], "prob_tru": [444, 445], "proba": [62, 64, 160, 443, 919, 921], "proba_": [913, 916, 1050], "proba_map": 90, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 115, 122, 123, 132, 133, 173, 174, 177, 180, 181, 187, 250, 269, 356, 396, 412, 420, 421, 443, 479, 482, 539, 541, 542, 548, 566, 595, 596, 617, 629, 650, 652, 683, 710, 748, 807, 833, 878, 913, 914, 916, 917, 1001, 1002, 1004, 1007, 1008, 1013, 1018, 1023, 1024, 1027, 1029, 1032, 1039, 1042, 1046], "probabilisticpca": [1039, 1042], "probabilities_": [90, 452], "probabilities_or_label": 576, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 90, 109, 121, 136, 151, 153, 159, 167, 173, 174, 175, 176, 187, 190, 193, 209, 229, 232, 233, 237, 241, 245, 247, 248, 269, 275, 277, 278, 281, 282, 285, 289, 292, 294, 313, 315, 319, 324, 326, 332, 337, 339, 351, 352, 369, 377, 378, 384, 388, 394, 396, 413, 414, 418, 419, 422, 423, 424, 440, 441, 442, 443, 444, 445, 452, 453, 455, 511, 519, 522, 530, 534, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 577, 600, 601, 617, 620, 621, 629, 634, 638, 639, 640, 665, 666, 678, 683, 699, 705, 707, 709, 710, 713, 714, 716, 719, 723, 727, 729, 733, 734, 736, 746, 747, 748, 763, 789, 791, 794, 795, 796, 801, 804, 805, 806, 807, 810, 811, 821, 829, 836, 837, 840, 842, 843, 846, 847, 848, 849, 850, 853, 856, 861, 867, 868, 892, 904, 905, 906, 907, 908, 911, 913, 916, 919, 921, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1021, 1022, 1024, 1028, 1029, 1030, 1034, 1039, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "probable_clust": 91, "probas_pr": [789, 1057], "probb_": [913, 916, 1050], "probe": 1016, "probinette4": 1051, "probl": [614, 615], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 89, 90, 92, 101, 123, 137, 140, 143, 145, 150, 151, 174, 187, 192, 195, 197, 202, 203, 206, 210, 211, 217, 219, 221, 234, 235, 239, 244, 245, 252, 254, 257, 273, 275, 280, 284, 285, 289, 290, 292, 294, 295, 300, 307, 319, 327, 331, 332, 342, 345, 349, 352, 353, 356, 357, 364, 365, 369, 377, 378, 379, 380, 381, 383, 384, 387, 388, 390, 391, 394, 396, 402, 412, 413, 414, 416, 418, 420, 421, 422, 423, 424, 425, 426, 450, 453, 455, 456, 458, 463, 468, 471, 484, 510, 515, 516, 522, 523, 524, 525, 530, 531, 535, 538, 540, 544, 546, 549, 550, 551, 552, 553, 554, 555, 558, 559, 564, 568, 571, 574, 578, 580, 596, 617, 638, 650, 655, 657, 659, 661, 662, 663, 664, 665, 666, 671, 672, 673, 675, 676, 679, 680, 681, 682, 683, 684, 686, 687, 692, 693, 694, 695, 696, 698, 700, 702, 715, 723, 726, 736, 737, 742, 745, 746, 790, 791, 794, 795, 804, 805, 808, 809, 810, 811, 812, 814, 815, 816, 817, 822, 823, 824, 825, 826, 827, 831, 839, 840, 841, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 877, 878, 884, 892, 895, 901, 902, 911, 912, 919, 921, 943, 955, 998, 999, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1022, 1025, 1028, 1030, 1032, 1033, 1034, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "problemat": [43, 190, 269, 271, 415, 998, 1047], "proc": [64, 112, 412, 422, 456, 696, 700, 846, 997, 1005, 1010, 1014], "proce": [85, 169, 199, 380, 386, 417, 418, 421, 446, 884, 1004], "procedur": [25, 81, 91, 143, 150, 172, 198, 204, 265, 277, 318, 322, 345, 356, 365, 382, 394, 395, 396, 397, 412, 416, 418, 419, 421, 423, 538, 544, 545, 547, 552, 553, 554, 560, 561, 562, 563, 566, 567, 600, 602, 609, 616, 651, 679, 681, 694, 735, 792, 868, 869, 888, 900, 928, 978, 997, 1004, 1010, 1018, 1021, 1022, 1023, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "proceed": [113, 172, 377, 379, 414, 425, 445, 450, 518, 703, 715, 733, 763, 858, 908, 1008, 1020, 1021, 1022], "process": [0, 2, 19, 37, 43, 44, 47, 57, 63, 66, 67, 70, 80, 81, 82, 83, 85, 91, 92, 101, 104, 106, 108, 112, 114, 124, 125, 127, 135, 137, 146, 148, 150, 155, 156, 165, 189, 197, 200, 219, 221, 227, 228, 229, 230, 250, 251, 252, 254, 260, 261, 264, 266, 269, 275, 277, 278, 287, 292, 310, 315, 317, 318, 326, 330, 335, 339, 349, 350, 354, 357, 358, 360, 369, 370, 371, 377, 381, 382, 384, 386, 388, 391, 394, 395, 396, 408, 414, 415, 416, 418, 419, 420, 421, 422, 423, 427, 454, 455, 481, 503, 511, 530, 541, 542, 543, 544, 545, 568, 569, 570, 595, 596, 598, 617, 618, 620, 621, 622, 624, 625, 626, 629, 630, 632, 634, 639, 640, 646, 650, 671, 679, 692, 693, 710, 730, 748, 788, 804, 806, 807, 810, 811, 821, 829, 832, 833, 834, 843, 844, 860, 874, 878, 880, 881, 882, 891, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 973, 997, 1000, 1004, 1008, 1011, 1018, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1058], "process_rout": [2, 251, 1056], "processor": [105, 158, 190, 425, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 538, 542, 543, 544, 546, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 601, 609, 614, 615, 617, 639, 641, 646, 654, 658, 660, 662, 664, 665, 666, 668, 670, 672, 673, 675, 683, 686, 695, 696, 697, 698, 699, 700, 701, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 853, 854, 857, 859, 861, 862, 864, 865, 870, 873, 906, 907], "procter": 51, "prod": [357, 628], "prod_": 1010, "prod_i": 1000, "proding": 1055, "produc": [52, 53, 62, 63, 79, 92, 104, 126, 150, 151, 152, 154, 202, 281, 313, 337, 365, 370, 377, 378, 382, 384, 387, 396, 397, 414, 415, 418, 419, 421, 446, 449, 452, 458, 526, 543, 566, 570, 588, 595, 600, 601, 639, 640, 809, 810, 811, 819, 824, 827, 832, 876, 886, 913, 916, 999, 1000, 1004, 1006, 1007, 1008, 1011, 1014, 1015, 1019, 1021, 1022, 1023, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "product": [2, 58, 105, 123, 159, 174, 179, 191, 349, 365, 369, 384, 385, 388, 391, 411, 419, 421, 457, 545, 547, 554, 589, 596, 597, 598, 620, 621, 640, 647, 671, 672, 692, 693, 768, 770, 782, 784, 883, 886, 903, 904, 956, 997, 1000, 1004, 1006, 1018, 1020, 1022, 1023, 1027, 1032, 1034, 1047], "production": 1032, "prof": 388, "profession": 190, "professor": 1032, "profil": [217, 369, 382, 385, 528, 531, 1004, 1032], "profile_default": 388, "profit": [0, 269, 332, 1056], "prog": [172, 379], "prognosi": [172, 379], "program": [0, 85, 172, 357, 365, 370, 371, 379, 380, 382, 384, 388, 394, 515, 642, 677, 901, 902, 1004, 1023, 1024, 1027, 1028, 1031, 1039, 1041], "programmat": [384, 506, 1048], "progress": [43, 46, 47, 123, 161, 172, 186, 210, 300, 328, 379, 386, 387, 397, 405, 410, 414, 566, 567, 699, 840, 842, 845, 860, 868, 869, 1032, 1039, 1041, 1048, 1053], "prohibit": [189, 254, 418, 421, 634, 1013, 1021, 1046], "proj": [53, 656], "proj_gradi": 388, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 80, 90, 93, 102, 120, 122, 123, 125, 127, 129, 133, 178, 180, 182, 183, 187, 191, 214, 237, 238, 239, 241, 243, 245, 249, 252, 261, 299, 304, 308, 313, 342, 357, 369, 374, 376, 380, 381, 382, 387, 388, 391, 396, 397, 400, 411, 417, 419, 420, 426, 446, 452, 457, 458, 468, 480, 488, 489, 490, 491, 495, 509, 511, 538, 540, 541, 542, 544, 546, 548, 549, 550, 551, 555, 556, 580, 589, 596, 648, 649, 656, 679, 681, 695, 698, 702, 703, 841, 860, 888, 903, 904, 905, 954, 955, 1002, 1004, 1005, 1006, 1009, 1011, 1012, 1014, 1021, 1024, 1029, 1032, 1034, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "projected_data": 248, "projected_dist": 248, "projectedgradientnmf": 1044, "prokopi": [1044, 1047], "prolifer": 384, "prolin": [57, 320, 379], "promin": [126, 396], "promis": [396, 1028], "promot": [190, 448, 715, 1027, 1050, 1052, 1056], "prompt": [380, 382, 386, 400, 407, 422], "prone": [64, 217, 262, 319, 394, 412], "pronounc": [74, 75, 87, 179], "proof": [394, 421, 905, 1020], "prop": [107, 114, 223, 262, 301, 344, 364], "propag": [2, 58, 68, 71, 72, 84, 98, 99, 170, 187, 333, 377, 446, 460, 509, 519, 521, 704, 711, 712, 720, 721, 724, 725, 744, 800, 802, 871, 885, 906, 907, 908, 973, 974, 1012, 1029, 1030, 1033, 1034, 1039, 1051, 1054], "proper": [64, 90, 206, 235, 269, 371, 384, 388, 412, 421, 455, 548, 560, 683, 955, 982, 1003, 1004, 1005, 1008, 1023, 1039, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "properli": [43, 52, 62, 90, 155, 179, 270, 288, 324, 371, 380, 382, 386, 390, 420, 911, 912, 913, 914, 915, 916, 917, 997, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "properti": [51, 62, 181, 182, 219, 234, 261, 297, 320, 364, 369, 375, 382, 384, 400, 411, 412, 414, 416, 419, 421, 423, 424, 429, 448, 451, 457, 458, 459, 470, 471, 549, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 598, 600, 601, 604, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 639, 653, 659, 662, 667, 669, 681, 682, 706, 711, 712, 715, 806, 807, 810, 811, 821, 829, 839, 840, 870, 871, 884, 885, 886, 892, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1000, 1003, 1004, 1005, 1008, 1009, 1011, 1014, 1018, 1021, 1023, 1024, 1025, 1028, 1044, 1048, 1049, 1052, 1053, 1056, 1057], "property_magnitud": 269, "propon": 104, "proport": [54, 63, 75, 153, 171, 203, 217, 224, 230, 244, 254, 269, 278, 282, 298, 302, 305, 352, 354, 364, 369, 377, 412, 414, 416, 418, 419, 421, 422, 444, 445, 452, 475, 480, 522, 556, 557, 562, 564, 566, 567, 568, 569, 570, 571, 590, 591, 595, 598, 634, 639, 665, 666, 673, 674, 675, 681, 682, 683, 685, 703, 708, 719, 729, 808, 809, 810, 811, 824, 827, 837, 857, 868, 869, 885, 911, 912, 913, 916, 917, 919, 921, 923, 925, 943, 997, 1007, 1008, 1011, 1014, 1022, 1023, 1024, 1044, 1056], "propos": [92, 111, 112, 295, 377, 382, 384, 394, 396, 414, 416, 421, 426, 456, 542, 614, 615, 683, 684, 685, 868, 869, 1004, 1007, 1011, 1022, 1046], "proprietari": 1024, "propto": [420, 1010], "prorokovi\u0107": 1057, "protect": [383, 386, 973], "protein": 376, "protocol": [408, 1008, 1027, 1042, 1055, 1056], "protocol_typ": 254, "prototyp": 1032, "prove": [124, 1032], "proven": [275, 1002, 1006, 1032], "provenc": 321, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 90, 95, 114, 123, 144, 145, 153, 156, 158, 174, 180, 190, 191, 197, 203, 204, 206, 218, 221, 238, 242, 245, 246, 251, 265, 269, 275, 276, 277, 281, 305, 308, 312, 315, 319, 324, 325, 327, 329, 343, 349, 352, 356, 357, 360, 364, 365, 369, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 394, 395, 396, 399, 400, 405, 408, 410, 411, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 428, 435, 443, 446, 448, 449, 450, 452, 453, 455, 456, 458, 465, 466, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 498, 500, 501, 503, 505, 508, 539, 540, 541, 542, 545, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 600, 601, 608, 612, 617, 618, 634, 639, 640, 641, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 697, 701, 706, 718, 729, 742, 748, 749, 771, 781, 785, 795, 799, 801, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 823, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 868, 869, 871, 874, 876, 877, 878, 881, 882, 883, 886, 888, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 927, 929, 943, 949, 960, 964, 966, 983, 984, 985, 996, 997, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "provinc": 321, "provost": [795, 1008], "proxi": [189, 190, 419, 867, 1044], "prun": 388, "prune": [187, 359, 364, 423, 507, 564, 565, 566, 567, 571, 572, 600, 651, 837, 919, 920, 921, 922, 1011, 1029, 1030, 1034, 1039, 1042, 1049, 1050], "przybocki": 1008, "ps_lsvm_score": 195, "ps_lsvm_time": 195, "pseudo": [218, 313, 384, 418, 426, 446, 458, 460, 468, 475, 476, 477, 479, 480, 481, 482, 540, 568, 569, 570, 634, 641, 646, 648, 649, 653, 654, 659, 660, 667, 668, 669, 670, 684, 698, 702, 810, 811, 819, 821, 860, 867, 903, 904, 908, 911, 912, 913, 916, 954, 955, 1004, 1020, 1044, 1053], "pseudo_likelihood": 867, "pseudocount": [543, 1047], "psf": 382, "psi": 419, "psi_1": 419, "psi_2": 419, "psi_n": 419, "pspachtholz": [1049, 1050, 1051], "psycholog": [414, 712, 723], "psychometrica": 642, "psychometrika": [697, 701, 1005], "pt": [50, 377, 423, 887, 1018], "pt_i": 305, "pt_j": 305, "ptocca": 1049, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [242, 906], "public": [0, 112, 376, 382, 384, 386, 387, 394, 395, 396, 397, 418, 421, 474, 671, 678, 692, 693, 699, 909, 1004, 1012, 1039, 1044, 1045, 1050, 1051, 1052, 1055], "publicli": [382, 1049], "publish": [376, 377, 384, 386, 390, 396, 1020, 1028, 1051], "pubu": [231, 248, 301, 344], "pubu_r": 113, "puerta": 1054, "puggioni": 1043, "puhuk": [1053, 1054], "pujalt": 1053, "pulapakura": [1056, 1057], "pulchritud": 356, "pulido": 1052, "pulkit": [1047, 1048, 1050], "pull": [104, 327, 370, 380, 385, 396, 397, 1031, 1049], "puls": 379, "punctuat": [422, 595, 596, 598], "puneet": 1046, "puneeth": [1056, 1057], "puor": 126, "puor_r": 178, "pure": [113, 114, 118, 202, 217, 396, 414, 479, 485, 503, 564, 565, 566, 567, 571, 572, 573, 712, 722, 793, 802, 919, 920, 921, 922, 1018], "pure_emp_cov": 114, "pure_loc": 114, "pure_x": 114, "purepremium": 235, "puriti": [139, 923, 925], "purna": 1053, "purpl": [111, 121, 241], "purport": 1046, "purpos": [48, 51, 72, 118, 148, 153, 185, 231, 232, 233, 237, 239, 252, 263, 265, 269, 271, 272, 345, 346, 352, 356, 357, 365, 377, 382, 395, 396, 397, 400, 407, 411, 414, 415, 419, 421, 422, 423, 424, 833, 834, 871, 928, 1005, 1008, 1009, 1011, 1014, 1027, 1051, 1053, 1057], "pursu": 190, "pursuit": [2, 89, 124, 126, 132, 187, 196, 419, 480, 533, 538, 544, 549, 555, 671, 672, 692, 693, 1029, 1030, 1034, 1039], "push": [64, 382, 386, 412, 1031], "pushd": 390, "put": [75, 93, 165, 174, 176, 245, 249, 256, 260, 289, 310, 317, 328, 339, 350, 354, 371, 384, 386, 387, 390, 408, 424, 449, 453, 465, 522, 621, 654, 668, 804, 888, 892, 900, 913, 914, 915, 916, 917, 945, 998, 1005, 1007, 1008, 1009, 1015, 1018], "putnam": 1045, "putschblo": 1052, "pvalu": [2, 599, 602, 603, 605, 606, 607, 836], "pvalue_iri": 281, "pvalue_rand": 281, "pvalues_": [168, 599, 602, 603, 605, 606, 607, 1039], "pvnguyen": 1043, "pwalchessen": 1051, "pwd": 390, "px": [143, 276], "pxd": 382, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 370, 382, 383, 386, 388, 390, 396, 400, 422, 425, 446, 450, 460, 537, 651, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 886, 890, 950, 1008, 1027, 1029, 1039, 1041, 1045, 1049, 1053], "py3": 400, "py39": 400, "pyamg": [81, 400, 407, 414, 458, 468, 698, 702], "pyarrow": [400, 407], "pybrain": 1039, "pycon": [408, 1026], "pyd": 383, "pydata": [43, 382, 390, 400, 407, 408, 1026, 1032], "pydata_2013": 1032, "pydebug": 388, "pyflak": 384, "pyfunc": [706, 1011], "pyfuncdist": 706, "pymc": 1027, "pynndesc": 295, "pynndescenttransform": 295, "pyodid": 382, "pyoxid": 1052, "pypi": [370, 380, 384, 386, 388, 400, 1024, 1047, 1051, 1053, 1054, 1056], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 331, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 378, 382, 389, 444, 509, 638, 639, 704, 705, 707, 708, 709, 813, 830, 1036, 1053], "pyplpt": 376, "pypy3": 1047, "pysniak": 1042, "pystruct": 394, "pytabl": 376, "pytb": 390, "pytest": [2, 324, 370, 380, 382, 384, 385, 400, 407, 410, 930, 949, 950, 1049, 1052], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 369, 371, 376, 380, 382, 383, 384, 385, 386, 387, 390, 391, 394, 396, 400, 401, 407, 408, 410, 415, 422, 503, 515, 516, 588, 706, 818, 885, 1008, 1018, 1023, 1024, 1028, 1031, 1032, 1034, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056], "python2": 1047, "python3": [380, 400], "python37": 400, "pythonsoftwarefound": 400, "pythonx": 380, "pytorch": [45, 332, 394, 1027, 1028, 1055, 1056], "pytorch_enable_mps_fallback": 410, "pyx": [382, 383, 388, 390], "p\u00e9rez": 1047, "p\u00f6lsterl": [1046, 1049, 1052], "q": [51, 105, 117, 150, 217, 327, 411, 414, 419, 954, 1004, 1023], "q1": 516, "q327": 379, "q_": 1023, "q_m": 1024, "q_max": [889, 901], "q_min": [889, 901], "qaiser": 1056, "qda": [67, 379, 556, 557, 1030, 1034, 1044], "qdeffens": [1049, 1052], "qemu": 390, "qi": [516, 1051], "qian": [1045, 1050], "qiang": 1043, "qianm": 1051, "qid": [493, 515, 516, 1040, 1045], "qimu": 1045, "qin": [0, 379, 403, 422, 1046, 1047, 1048, 1049, 1050, 1058], "qingi": 1047, "qizhi": 1050, "qmarcou": 1056, "qn": 516, "qodari": [1057, 1058], "qp": 1023, "qr": [81, 219, 410, 541, 548, 551, 954, 955, 1005, 1045, 1056], "qt": [319, 888], "qtconsol": 388, "quad": [424, 1011, 1022], "quadcontourset": 638, "quadmesh": 638, "quadrant": 315, "quadrat": [2, 12, 43, 48, 65, 69, 113, 114, 115, 179, 187, 231, 254, 265, 277, 327, 446, 464, 467, 556, 557, 630, 638, 655, 665, 666, 676, 683, 687, 723, 916, 917, 1004, 1005, 1008, 1011, 1014, 1018, 1022, 1023, 1029, 1030, 1034, 1040], "quadraticdiscriminantanalysi": [2, 67, 70, 556, 1002, 1009, 1011, 1039, 1044, 1046, 1054, 1058], "quadro": 1052, "quadv": 1053, "qualifi": 387, "qualit": [44, 45, 88, 90, 96, 143, 150, 217, 329, 377, 414, 445, 708, 1054], "qualiti": [0, 13, 27, 45, 58, 61, 72, 81, 83, 84, 93, 126, 146, 153, 190, 223, 268, 273, 282, 283, 284, 349, 382, 390, 394, 396, 409, 414, 416, 419, 458, 468, 475, 480, 564, 565, 566, 567, 571, 572, 750, 821, 903, 904, 919, 920, 921, 922, 955, 1003, 1005, 1013, 1020, 1024, 1027, 1028, 1032, 1034], "quang": 1050, "quansight": 0, "quantifi": [13, 27, 43, 72, 84, 111, 179, 235, 269, 282, 332, 384, 396, 409, 580, 874, 1003, 1016, 1018, 1034], "quantil": [2, 79, 88, 98, 137, 139, 187, 196, 315, 318, 319, 378, 394, 421, 444, 445, 464, 526, 559, 560, 567, 569, 664, 677, 730, 752, 755, 757, 834, 876, 888, 889, 890, 900, 901, 1008, 1018, 1029, 1030, 1034, 1039, 1043, 1046, 1048, 1052, 1053, 1055, 1057], "quantile_list": 52, "quantile_rang": [315, 889, 901, 1045], "quantile_regress": 219, "quantile_transform": [2, 109, 888, 899, 1018, 1046, 1047, 1048, 1057], "quantileregressor": [2, 327, 1004, 1008, 1052, 1053, 1054], "quantiles_": [888, 1018, 1049], "quantiletransform": [2, 109, 191, 319, 415, 471, 887, 900, 998, 1018, 1046, 1047, 1048, 1049, 1050, 1055, 1057], "quantiletransformerquantiletransform": 191, "quantit": [43, 44, 45, 52, 62, 96, 150, 153, 161, 172, 271, 290, 379], "quantiti": [51, 147, 275, 326, 369, 396, 414, 421, 728, 729, 730, 731, 792, 867, 997, 999, 1002, 1004, 1044], "quantiz": [45, 71, 81, 93, 126, 187, 376, 377, 414, 449, 453, 455, 513, 786, 876, 981, 1018, 1029], "quantum": 1006, "quartil": 889, "quartimax": [539, 1051], "quasi": [384, 868, 869, 1004], "quazi": [1046, 1047], "queensland": 379, "quentin": [1046, 1047, 1048, 1055, 1056], "queqichao": 1043, "queri": [197, 298, 308, 369, 420, 425, 450, 452, 456, 463, 559, 617, 618, 635, 651, 652, 733, 763, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 1008, 1011, 1024, 1027, 1031, 1041, 1043, 1044, 1047], "query_id": [493, 515, 516], "query_radiu": [851, 852], "question": [0, 163, 189, 269, 275, 352, 381, 382, 387, 390, 408, 418, 421, 840, 913, 916, 1004, 1007, 1008, 1014, 1032], "queue": [47, 1011, 1042], "quick": [43, 128, 257, 382, 384, 388, 400, 613, 837, 1008, 1009, 1018, 1032, 1036], "quicker": 1007, "quickest": 380, "quickli": [74, 255, 311, 324, 379, 382, 383, 418, 421, 699, 785, 1004, 1011, 1012, 1032, 1050], "quinlan": 1024, "quinonez": 1047, "quintana": 1008, "quit": [43, 52, 64, 88, 92, 118, 140, 163, 172, 190, 191, 215, 235, 269, 283, 292, 327, 356, 369, 387, 395, 414, 422, 1003, 1005, 1010, 1032, 1047], "quiver": 125, "quot": [37, 51, 52, 54, 104, 276, 356, 357, 370, 376, 377, 380, 382, 386, 400, 401, 410, 494, 495, 503, 1008, 1020, 1023, 1054], "quota": [1052, 1053], "quotat": 377, "quotient": 1008, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 100, 109, 111, 112, 113, 114, 118, 123, 130, 133, 137, 140, 141, 146, 150, 151, 152, 161, 168, 175, 176, 177, 181, 182, 183, 185, 186, 190, 200, 202, 205, 206, 217, 224, 227, 235, 242, 247, 250, 260, 263, 266, 274, 275, 278, 280, 281, 282, 285, 288, 294, 297, 298, 302, 306, 308, 321, 328, 347, 349, 358, 365, 377, 379, 383, 386, 394, 396, 408, 411, 412, 414, 416, 417, 418, 419, 421, 422, 431, 437, 443, 452, 457, 459, 471, 475, 480, 484, 488, 489, 490, 505, 511, 520, 527, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 595, 596, 597, 598, 601, 613, 616, 617, 618, 634, 642, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 692, 693, 699, 703, 723, 728, 729, 730, 731, 735, 737, 788, 792, 795, 806, 807, 821, 824, 829, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 860, 861, 862, 868, 869, 882, 887, 899, 906, 907, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 924, 973, 998, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1039, 1043, 1046, 1049, 1050, 1051, 1052, 1054, 1056], "r0": [810, 811], "r1": 577, "r11": [217, 235], "r2": [109, 138, 143, 158, 189, 191, 212, 250, 288, 415, 421, 561, 577, 680, 834, 869, 929, 1008, 1016, 1048], "r2007": 421, "r22": 217, "r25": 235, "r26": 217, "r2_score": [2, 109, 189, 202, 212, 213, 410, 421, 437, 471, 488, 489, 490, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 731, 735, 844, 845, 854, 862, 869, 912, 914, 917, 920, 922, 997, 1008, 1040, 1042, 1048, 1052, 1053, 1057], "r2_score_ard": 202, "r2_score_enet": 202, "r2_score_lasso": 202, "r2_score_nnl": 212, "r2_score_ol": 212, "r2_with_abl": 189, "r2_without_": 189, "r3": 577, "r72": 217, "r73": 235, "r82": 217, "r93": 217, "r_": [50, 132, 230, 231, 261, 282, 301, 302, 344, 350, 354, 414, 714, 1008, 1024], "r_0": 997, "r_k": 282, "r_multi": 1016, "r_n": [282, 714, 1008], "r_regress": [2, 423, 613, 1052, 1053, 1056], "r_squar": 395, "raamana": [1047, 1048], "rabbit": [328, 330, 1018], "raccoon": [88, 126, 419], "raccoon_fac": [88, 126], "race": [190, 331, 377, 503, 1042], "race_hispan": 190, "race_oth": 190, "race_whit": 190, "rachel": [1051, 1054], "rachelcjordan": 1050, "rachez": [1044, 1045], "rachit": [1045, 1051, 1054], "rachum": 1051, "radar": 1032, "radford": 1004, "radhakrishnan": 1047, "radial": [2, 44, 128, 174, 179, 181, 345, 349, 374, 458, 629, 698, 1006, 1023, 1034], "radian": [308, 706, 771], "radii": [851, 852], "radiu": [2, 172, 302, 345, 379, 414, 448, 456, 695, 771, 788, 851, 852, 853, 854, 855, 859, 861, 862, 863, 865, 1011, 1041, 1043, 1053, 1056], "radius1": 101, "radius2": 101, "radius3": 101, "radius4": 101, "radius_neighbor": [328, 859, 861, 862, 863, 1043, 1048, 1049, 1051, 1052, 1053, 1054], "radius_neighbors_graph": [2, 414, 425, 450, 853, 854, 855, 857, 859, 861, 862, 863, 864, 1011, 1043, 1048, 1051], "radiusneighborsclassifi": [2, 328, 853, 854, 859, 862, 1009, 1011, 1039, 1041, 1045, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "radiusneighborsregressor": [2, 328, 853, 854, 859, 861, 1009, 1011, 1039, 1041, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "radiusneighborstransform": [2, 324, 855, 1011, 1049, 1051, 1053, 1054], "radostin": [1047, 1048], "raduspaimoc": 1050, "raf": 1048, "rafael": [1032, 1040, 1041, 1043, 1046], "rafal": [1054, 1055], "rafei": 1051, "raff": 1042, "raffaello": 1048, "rafiqu": [1047, 1048], "raghav": [0, 404, 1043, 1044, 1045, 1046, 1047, 1051], "raghavan": [419, 597, 846, 850, 1006, 1008, 1010], "raghu": [414, 448], "raghunathan": [1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "raghuv": [1054, 1055], "raghuwanshi": 1053, "rah": 648, "rahiel": 1043, "rahil": [1053, 1054, 1055, 1056, 1057], "rahimi": [648, 1000], "rahmaan": 1049, "rahman": [1046, 1047, 1051], "rahn": [1046, 1049], "rahul": [1051, 1056], "rai": [0, 404, 1008, 1039, 1049, 1051, 1052], "raimundo": 1047, "rain": [43, 52, 191, 413, 1004], "rainbow": [61, 239], "rainfal": 1004, "rais": [2, 135, 218, 251, 252, 269, 278, 319, 327, 382, 384, 386, 387, 388, 391, 394, 396, 405, 408, 415, 418, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 516, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 583, 584, 588, 589, 595, 596, 597, 598, 610, 617, 618, 624, 636, 639, 642, 643, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 703, 705, 709, 716, 718, 719, 720, 721, 723, 734, 736, 737, 745, 785, 789, 790, 791, 794, 795, 796, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 821, 825, 829, 830, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 860, 861, 862, 866, 868, 869, 870, 871, 874, 875, 876, 877, 878, 883, 884, 885, 889, 890, 891, 898, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 930, 935, 937, 938, 940, 941, 959, 964, 968, 991, 992, 993, 994, 996, 997, 1008, 1018, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "raisadz": 1057, "raise_exc": [718, 1058], "raise_except": 993, "raise_warn": [278, 719, 993], "raj": [1056, 1057], "rajagopalan": [0, 404, 1047, 1051], "rajaona": [1045, 1046], "rajat": [1042, 1049], "rajdeep": 1048, "rajendra": 1047, "raji": [1054, 1055], "rakotoarison": [1046, 1047, 1049], "ralf": [1042, 1045, 1046, 1054, 1055, 1057], "ralph": 1057, "ram": [55, 88, 371, 408, 421, 903, 904, 1010, 1023, 1045, 1051, 1054, 1055], "ramakrishnan": [414, 448], "ramana": [1045, 1046], "ramanath": 1044, "ramesh": [377, 1032, 1042, 1045, 1049], "rameshwar": [1046, 1047], "ramil": [1047, 1048], "rammig": [1032, 1045], "ramo": 1054, "rampin": 1046, "ramyanp": [1051, 1052], "ramzi": 1051, "ram\u00edrez": 1008, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 84, 93, 97, 130, 140, 155, 157, 167, 197, 202, 239, 240, 244, 250, 251, 290, 307, 325, 326, 331, 338, 339, 351, 357, 362, 363, 391, 405, 551, 711, 712, 722, 764, 788, 793, 903, 904, 906, 907, 908, 1020, 1039, 1050, 1051], "rand_index": 712, "rand_scor": [2, 72, 414, 722, 1008, 1051], "randal": [891, 1043, 1053], "randi": 1045, "randint": [50, 72, 114, 121, 149, 186, 192, 240, 247, 251, 253, 287, 326, 331, 384, 387, 395, 405, 811, 828, 846, 847, 848, 850, 997, 998], "randn": [53, 69, 70, 74, 89, 100, 101, 113, 114, 126, 130, 154, 167, 174, 178, 189, 192, 206, 211, 212, 216, 230, 231, 234, 261, 264, 265, 270, 282, 284, 285, 290, 301, 302, 322, 325, 326, 331, 344, 349, 350, 354, 384, 387, 650, 677, 679, 685, 694, 828, 914, 917], "randolf": 1057, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 80, 83, 85, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 105, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 121, 124, 125, 126, 129, 130, 136, 138, 140, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 158, 161, 165, 167, 168, 171, 174, 175, 178, 180, 181, 183, 185, 186, 187, 188, 189, 197, 198, 199, 200, 202, 206, 207, 211, 212, 215, 216, 217, 218, 219, 220, 223, 224, 226, 230, 231, 234, 235, 237, 238, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253, 254, 260, 261, 263, 264, 265, 266, 267, 270, 272, 273, 274, 275, 276, 278, 280, 282, 284, 285, 286, 287, 290, 294, 295, 300, 301, 302, 307, 310, 316, 318, 319, 322, 325, 326, 328, 330, 332, 334, 335, 338, 339, 344, 345, 347, 348, 349, 350, 351, 354, 356, 357, 362, 363, 369, 370, 374, 378, 385, 387, 394, 395, 396, 405, 409, 410, 412, 414, 422, 423, 427, 439, 446, 449, 453, 455, 457, 458, 459, 460, 464, 465, 466, 468, 470, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 494, 495, 496, 497, 499, 502, 503, 504, 509, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 543, 545, 546, 547, 548, 551, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 589, 590, 591, 596, 614, 615, 617, 618, 634, 637, 639, 641, 646, 647, 648, 649, 650, 653, 654, 656, 657, 659, 660, 661, 665, 667, 668, 669, 670, 677, 678, 679, 683, 684, 685, 686, 694, 696, 697, 698, 699, 700, 701, 702, 708, 711, 712, 715, 738, 750, 788, 795, 800, 804, 805, 807, 809, 810, 811, 812, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 836, 837, 842, 844, 845, 846, 847, 848, 850, 851, 852, 856, 860, 867, 868, 869, 871, 874, 876, 885, 888, 892, 900, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 940, 952, 954, 955, 976, 978, 981, 998, 1000, 1003, 1005, 1007, 1008, 1012, 1013, 1014, 1016, 1018, 1023, 1024, 1028, 1029, 1030, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "random_": 206, "random_02": 206, "random_05": 206, "random_08": 206, "random_11": 206, "random_cat": [192, 1016], "random_choice_csc": 1049, "random_forest": 142, "random_from_data": [263, 804, 805, 1007], "random_label": 72, "random_num": [192, 1016], "random_offset_": [648, 649], "random_project": [2, 238, 248, 903, 904, 905, 1020, 1025, 1040, 1045, 1055, 1056], "random_sampl": [202, 851, 852, 856], "random_se": [49, 121, 146], "random_search": [276, 283], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 81, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 109, 115, 118, 121, 123, 125, 128, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 163, 168, 169, 171, 174, 180, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 199, 200, 203, 209, 216, 217, 220, 221, 223, 224, 225, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 249, 252, 253, 254, 255, 257, 258, 260, 262, 263, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 294, 295, 298, 299, 303, 304, 305, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 343, 345, 346, 347, 352, 353, 356, 357, 360, 364, 365, 378, 384, 387, 391, 395, 396, 410, 413, 414, 415, 418, 419, 421, 422, 426, 439, 443, 444, 446, 449, 453, 455, 457, 458, 459, 460, 464, 465, 466, 468, 475, 480, 484, 493, 494, 497, 499, 502, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 600, 601, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 639, 640, 641, 642, 645, 646, 647, 648, 649, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 681, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 717, 742, 795, 799, 800, 804, 805, 806, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 856, 860, 867, 868, 869, 871, 876, 888, 892, 900, 903, 904, 911, 912, 913, 916, 918, 919, 920, 921, 922, 924, 925, 927, 929, 930, 952, 954, 955, 976, 978, 981, 997, 998, 1000, 1003, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1023, 1024, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "random_state_": [384, 543, 634, 860, 1053], "random_tre": 573, "random_tree_embed": 142, "random_unlabeled_point": [326, 906, 907, 908], "random_weights_": [648, 649], "randomforest": [49, 146, 369, 421, 919, 920, 1044], "randomforestclassifi": [2, 63, 64, 67, 91, 141, 142, 143, 144, 145, 146, 160, 192, 193, 256, 257, 272, 287, 324, 326, 331, 356, 365, 395, 396, 412, 421, 423, 564, 565, 566, 568, 573, 574, 576, 810, 811, 829, 841, 921, 997, 998, 1009, 1016, 1032, 1036, 1043, 1044, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "randomforestclassifierifittedrandomforestclassifi": [63, 144, 145, 331], "randomforestclassifierinot": 331, "randomforestclassifierrandomforestclassifi": [63, 192, 256, 287], "randomforestregressor": [2, 49, 143, 157, 158, 161, 185, 186, 326, 331, 395, 421, 564, 565, 567, 569, 573, 575, 577, 639, 640, 921, 998, 1009, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "randomforestregressorrandomforestregressor": [158, 161], "randomgeek78": 1053, "randomized_range_find": [2, 391, 1040, 1045], "randomized_svd": [2, 55, 391, 457, 459, 539, 548, 551, 553, 1039, 1040, 1045, 1052, 1053, 1054], "randomized_svd_low_rank": 1046, "randomizedlasso": 1046, "randomizedlogisticregress": 1046, "randomizedpca": [1032, 1039, 1041, 1042, 1044, 1045, 1046], "randomizedsearchcv": [2, 45, 105, 174, 276, 283, 326, 365, 395, 405, 410, 582, 997, 1008, 1022, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1056, 1057, 1058], "randomizedsearchcvinot": 105, "randomli": [2, 52, 72, 83, 85, 96, 105, 117, 119, 140, 153, 154, 185, 187, 191, 234, 248, 252, 265, 270, 281, 292, 294, 334, 365, 370, 391, 394, 395, 414, 418, 421, 424, 455, 464, 522, 530, 538, 544, 552, 553, 558, 566, 567, 568, 569, 570, 571, 572, 617, 618, 678, 686, 697, 701, 723, 804, 805, 867, 905, 919, 920, 921, 922, 1007, 1009, 1011, 1014, 1016, 1020, 1024, 1029, 1050, 1054, 1056, 1058], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 85, 96, 97, 114, 115, 118, 123, 125, 130, 138, 149, 150, 153, 154, 155, 157, 168, 174, 175, 178, 180, 181, 183, 185, 186, 189, 192, 197, 198, 199, 200, 202, 206, 211, 218, 219, 224, 231, 240, 244, 250, 251, 260, 263, 270, 278, 281, 282, 284, 285, 286, 287, 307, 310, 316, 318, 319, 322, 325, 326, 328, 330, 331, 334, 335, 339, 348, 362, 363, 384, 387, 391, 396, 405, 419, 426, 427, 446, 449, 453, 455, 457, 458, 459, 460, 464, 465, 466, 468, 475, 476, 480, 481, 482, 484, 485, 486, 487, 494, 497, 499, 502, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 590, 591, 614, 615, 617, 618, 634, 639, 641, 646, 647, 648, 649, 650, 653, 654, 656, 657, 659, 660, 661, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 679, 681, 683, 684, 685, 686, 694, 696, 697, 698, 699, 700, 701, 702, 708, 788, 800, 804, 805, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 829, 835, 836, 837, 841, 842, 845, 846, 847, 848, 850, 851, 852, 856, 860, 867, 868, 869, 876, 888, 892, 900, 903, 904, 906, 907, 908, 911, 912, 913, 916, 917, 919, 920, 921, 922, 940, 954, 955, 976, 978, 981, 1018, 1034], "randomtreesembed": [2, 142, 156, 238, 421, 921, 998, 1040, 1047, 1048, 1052, 1053, 1054], "randomtreesembedding_": 573, "randomtreesembeddingrandomtreesembed": 142, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 81, 82, 83, 85, 86, 90, 95, 96, 98, 99, 111, 112, 114, 115, 137, 139, 140, 141, 144, 150, 153, 157, 167, 170, 171, 175, 190, 191, 195, 202, 206, 207, 211, 215, 217, 218, 221, 224, 225, 233, 235, 238, 240, 247, 248, 253, 254, 260, 262, 265, 266, 269, 270, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 288, 290, 294, 299, 305, 307, 308, 313, 315, 320, 321, 324, 328, 329, 335, 345, 352, 356, 357, 361, 364, 370, 376, 377, 379, 382, 384, 388, 391, 396, 408, 414, 418, 421, 424, 446, 467, 475, 477, 478, 479, 480, 481, 482, 484, 487, 497, 501, 502, 521, 534, 548, 560, 561, 566, 567, 570, 595, 596, 598, 636, 639, 645, 647, 655, 656, 676, 678, 683, 684, 685, 687, 699, 719, 738, 753, 795, 837, 843, 857, 859, 861, 862, 867, 881, 888, 889, 890, 896, 897, 900, 901, 904, 905, 954, 955, 997, 1004, 1008, 1012, 1022, 1028, 1032, 1044, 1045, 1046, 1047, 1049, 1052, 1055], "range_n_clust": 95, "range_n_outli": 114, "rangeindex": [190, 269, 503], "rangl": [1000, 1008, 1022, 1023], "ranjanikrishnan": 1052, "rank": [2, 43, 55, 62, 113, 127, 130, 144, 170, 192, 193, 235, 273, 275, 283, 378, 409, 411, 412, 416, 417, 419, 421, 422, 515, 516, 528, 531, 556, 557, 600, 601, 613, 655, 664, 676, 687, 703, 727, 733, 734, 746, 747, 763, 795, 801, 810, 811, 955, 997, 999, 1000, 1005, 1016, 1018, 1032, 1034, 1040, 1045, 1048, 1049, 1053, 1054, 1057], "rank_": 664, "rank_t": 807, "rank_test_": 279, "rank_test_precis": [273, 279], "rank_test_recal": 273, "rank_test_scor": [275, 283, 807, 821, 1045], "rankdata": 1046, "ranked_exposur": [217, 235], "ranked_frequ": 217, "ranked_pure_premium": 235, "ranking_": [170, 600, 601], "rankylau": 1047, "ransac": [2, 187, 196, 223, 234, 531, 656, 664, 678, 685, 686, 1029], "ransacregressor": [2, 220, 223, 234, 405, 656, 685, 686, 1004, 1009, 1042, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1057], "rao": [418, 1051, 1054], "raphael": 1056, "rapha\u00ebl": 1049, "raphson": [655, 676, 687], "rapid": 1032, "rapidli": [221, 277, 1023, 1032], "rare": [64, 191, 321, 365, 386, 394, 396, 399, 412, 414, 418, 596, 655, 665, 666, 676, 687, 911, 942, 1004, 1018, 1032, 1046, 1047, 1048, 1052, 1054, 1057], "rarer": [356, 358, 422], "raschka": [1044, 1045, 1046, 1047, 1048, 1051], "rashchedrin": 1046, "rasmu": [195, 1046], "rasmussen": [179, 424, 617, 618, 621, 626, 629], "raspberri": 400, "raster": 104, "rastgoo": 1056, "rastogi": 1047, "rastrojo": [414, 712], "rasul": [1044, 1046, 1047], "rat": [50, 308, 377, 505], "rate": [2, 43, 137, 141, 147, 153, 167, 191, 217, 224, 235, 248, 254, 269, 272, 275, 284, 285, 311, 312, 313, 371, 382, 413, 414, 415, 419, 423, 452, 472, 543, 560, 561, 566, 567, 568, 569, 599, 602, 603, 605, 606, 607, 613, 651, 652, 675, 683, 684, 685, 699, 705, 709, 734, 789, 796, 867, 868, 869, 905, 997, 1004, 1005, 1008, 1011, 1012, 1022, 1024, 1032, 1043, 1047, 1048], "rather": [51, 64, 88, 115, 137, 140, 153, 185, 190, 217, 218, 231, 254, 289, 319, 320, 356, 357, 365, 370, 378, 380, 382, 384, 387, 388, 390, 394, 395, 396, 397, 414, 418, 419, 421, 422, 424, 454, 467, 469, 470, 473, 572, 588, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 636, 653, 654, 659, 660, 667, 668, 669, 670, 788, 821, 842, 844, 845, 874, 911, 912, 923, 928, 955, 1002, 1004, 1005, 1008, 1010, 1011, 1015, 1028, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1054, 1055, 1057, 1058], "ratio": [2, 46, 88, 101, 107, 131, 187, 248, 250, 263, 267, 369, 382, 414, 416, 418, 421, 456, 462, 500, 501, 522, 548, 556, 557, 558, 638, 665, 717, 719, 723, 732, 737, 743, 746, 789, 790, 791, 794, 802, 834, 837, 857, 904, 976, 1002, 1014, 1024, 1029, 1054, 1056], "ration": [2, 179, 269, 630, 1006], "rationalquadrat": [2, 179, 183, 424, 623], "raton": 1004, "raul": [1041, 1042], "rausch": [1047, 1048, 1051], "rauwuckl": 1051, "ravel": [2, 44, 53, 55, 57, 63, 77, 88, 89, 93, 113, 132, 138, 140, 146, 150, 156, 157, 158, 165, 174, 176, 178, 179, 180, 181, 190, 197, 207, 208, 210, 217, 230, 231, 238, 242, 244, 248, 250, 254, 258, 262, 264, 269, 278, 282, 284, 289, 295, 300, 301, 307, 308, 310, 311, 312, 313, 317, 318, 328, 332, 339, 345, 350, 351, 353, 354, 356, 362, 363, 471, 500, 501, 502, 638, 725, 994, 1008, 1055], "ravi": [1051, 1054], "raw": [2, 17, 43, 51, 52, 54, 72, 114, 125, 158, 179, 190, 195, 313, 322, 336, 358, 369, 377, 384, 390, 396, 412, 414, 416, 419, 422, 475, 480, 508, 509, 510, 566, 567, 568, 570, 589, 595, 596, 597, 598, 641, 684, 697, 701, 712, 793, 857, 915, 1005, 1008, 1012, 1014, 1015, 1018, 1021, 1040, 1044, 1047, 1050, 1056], "raw_coef_": [911, 912], "raw_covariance_": [416, 475, 480], "raw_data": 358, "raw_docu": [595, 598], "raw_location_": [416, 475, 480], "raw_model": 322, "raw_pixel_classifi": 313, "raw_support_": [475, 480], "raw_target_regr": 415, "raw_valu": [728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 797, 798, 1008, 1047, 1050], "raw_x": [422, 589], "raytheon": 51, "raz": 1053, "ra\u00fal": 1048, "rb": [47, 408], "rbf": [2, 44, 45, 49, 50, 66, 67, 128, 159, 165, 174, 175, 176, 178, 179, 180, 181, 183, 187, 195, 231, 243, 244, 250, 273, 275, 277, 280, 301, 339, 340, 342, 351, 374, 402, 415, 419, 421, 458, 468, 509, 511, 542, 548, 617, 618, 619, 620, 623, 625, 626, 627, 628, 630, 631, 638, 646, 647, 648, 649, 650, 683, 698, 772, 781, 783, 807, 818, 821, 827, 871, 891, 906, 907, 911, 913, 914, 915, 916, 917, 997, 1000, 1001, 1005, 1008, 1014, 1018, 1021, 1029, 1034, 1045, 1050], "rbf_featur": [648, 1000], "rbf_kernel": [2, 410, 772, 1006, 1043, 1058], "rbf_svc": [339, 1023], "rbfsampler": [2, 249, 646, 647, 649, 1000, 1043, 1053, 1054], "rbm": [2, 313, 867, 868, 869, 1013], "rbm_features_classifi": 313, "rc": [231, 386], "rceil": [411, 1014], "rcond": 132, "rcparam": [47, 244, 249, 322], "rcv1": [2, 375, 504, 1034, 1044], "rcwoolston": 1050, "rd": 422, "rd9e56ef97513": 2, "rda": 379, "rdbu": [67, 70, 123, 233, 310, 345, 350], "rdbu_r": [89, 115, 133, 345], "rdownload": 47, "rdylbu": [146, 361], "re": [43, 47, 53, 63, 64, 91, 104, 105, 137, 147, 177, 189, 190, 235, 251, 261, 265, 278, 280, 284, 325, 356, 358, 370, 382, 383, 390, 395, 397, 405, 412, 418, 422, 475, 476, 477, 478, 479, 480, 481, 482, 498, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 653, 659, 667, 669, 809, 824, 827, 919, 920, 921, 922, 1004, 1009, 1011, 1018, 1023, 1028, 1032, 1039, 1043, 1044, 1046, 1048, 1058], "reach": [96, 143, 148, 172, 180, 217, 219, 233, 235, 269, 277, 328, 345, 364, 387, 397, 400, 414, 419, 423, 456, 463, 515, 516, 600, 601, 634, 651, 652, 653, 654, 659, 660, 661, 662, 663, 667, 668, 669, 670, 673, 674, 675, 683, 684, 685, 686, 688, 689, 690, 691, 736, 737, 790, 804, 805, 868, 869, 908, 997, 1008, 1012, 1022, 1024, 1032, 1050, 1054, 1055, 1056], "reachability_": [100, 414, 456, 461, 462, 463], "reachabl": [2, 90, 100, 452, 456, 461, 462, 463, 857, 961], "react": 307, "reactiv": 388, "read": [47, 52, 55, 123, 237, 282, 324, 325, 326, 328, 330, 369, 376, 383, 384, 385, 386, 387, 389, 390, 394, 395, 396, 402, 408, 414, 425, 426, 427, 428, 431, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 951, 997, 1004, 1008, 1009, 1027, 1032, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1056, 1057], "read_byt": 47, "read_csv": [51, 387, 503, 1054], "read_csv_kwarg": [503, 1055], "read_parquet": 52, "readabl": [115, 276, 327, 387, 388, 390, 541, 1048, 1051, 1052, 1053, 1054], "reader": [45, 77, 327, 371, 382], "readi": [43, 46, 179, 218, 269, 377, 382, 386, 390, 470], "readili": [328, 419, 1024, 1032], "readm": [390, 422, 500], "readonli": [911, 912, 1052, 1054, 1055], "readonly_memmap": 1056, "readthedoc": 396, "real": [52, 67, 70, 90, 92, 104, 108, 111, 113, 114, 137, 153, 177, 190, 221, 241, 244, 254, 268, 269, 281, 290, 299, 302, 316, 317, 344, 349, 358, 369, 375, 376, 379, 386, 388, 391, 394, 395, 396, 411, 412, 414, 416, 418, 419, 421, 422, 475, 495, 496, 500, 501, 502, 503, 504, 507, 508, 511, 517, 558, 559, 562, 563, 564, 565, 566, 567, 571, 572, 599, 601, 602, 603, 604, 605, 606, 607, 638, 706, 711, 731, 735, 759, 762, 764, 792, 802, 836, 868, 869, 913, 914, 915, 916, 917, 920, 922, 998, 999, 1000, 1005, 1008, 1010, 1012, 1013, 1014, 1024, 1026, 1029, 1034, 1039, 1052, 1056], "real_cov": [111, 112, 427, 476, 479, 480, 481, 482, 485, 486, 487], "real_data": 299, "realist": [43, 47, 277, 284, 285, 342, 377, 1008], "realiti": 378, "realiz": [217, 1032], "realli": [111, 192, 206, 386, 387, 388, 1008, 1014, 1032, 1053], "reappli": 421, "rearrang": [58, 59, 411], "reason": [43, 47, 51, 64, 77, 88, 104, 150, 153, 172, 190, 191, 195, 217, 218, 225, 235, 244, 248, 249, 251, 254, 269, 272, 275, 276, 281, 288, 292, 295, 316, 320, 349, 357, 358, 365, 369, 370, 371, 377, 381, 382, 383, 384, 386, 390, 394, 395, 396, 397, 413, 414, 415, 416, 419, 421, 422, 515, 539, 581, 645, 653, 659, 661, 679, 694, 699, 770, 807, 821, 855, 860, 867, 886, 908, 927, 929, 930, 997, 998, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1018, 1022, 1023, 1024, 1032, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "reassign": [85, 382, 453, 455, 1040, 1044], "reassignment_ratio": 455, "rebalanc": 396, "rebas": 386, "rebecca": 1046, "rebekah": [1047, 1048, 1049], "reboul": 1049, "rebuild": [369, 380, 408, 422, 448], "rebuilt": [68, 380, 851, 852], "rec": [57, 358, 377, 648], "rec_l1": 53, "rec_l2": 53, "rec_macro": 418, "recal": [2, 45, 62, 68, 104, 115, 128, 169, 187, 245, 254, 267, 269, 273, 292, 313, 334, 335, 382, 396, 413, 414, 511, 611, 707, 713, 714, 715, 719, 720, 734, 736, 737, 738, 789, 790, 791, 794, 795, 829, 837, 840, 872, 891, 895, 911, 1004, 1024, 1029, 1042, 1043, 1046, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "recalcul": [255, 257, 414, 1036, 1039], "recall_macro": [418, 1008], "recall_scor": [2, 62, 269, 282, 418, 715, 791, 1008, 1039, 1041, 1042, 1043, 1044, 1049, 1055], "recant": 397, "receiv": [0, 2, 57, 163, 187, 245, 251, 257, 267, 269, 270, 272, 277, 358, 365, 382, 384, 390, 396, 413, 418, 421, 511, 665, 709, 713, 715, 734, 789, 795, 796, 826, 837, 839, 840, 878, 916, 1009, 1012, 1013, 1022, 1029, 1049, 1050], "recent": [52, 251, 380, 387, 390, 396, 414, 474, 545, 572, 1022, 1032, 1042, 1051], "recht": [648, 1000], "recip": [386, 408, 1005, 1032], "reciproc": [378, 1008], "reckon": 377, "recogn": [43, 44, 65, 86, 88, 118, 126, 145, 170, 187, 218, 268, 299, 327, 334, 335, 388, 405, 414, 422, 509, 704, 720, 837, 916, 1008, 1029, 1056], "recognit": [42, 48, 54, 123, 187, 250, 253, 313, 320, 375, 387, 419, 421, 423, 501, 509, 539, 541, 548, 704, 715, 720, 748, 776, 795, 796, 804, 821, 837, 891, 916, 1000, 1004, 1008, 1009, 1013, 1023, 1025, 1029, 1034, 1039], "recommend": [118, 145, 185, 234, 245, 251, 271, 284, 319, 326, 349, 369, 370, 376, 377, 380, 382, 384, 388, 390, 394, 400, 408, 417, 418, 419, 421, 423, 444, 453, 455, 457, 466, 503, 515, 542, 545, 551, 556, 568, 569, 576, 589, 590, 596, 613, 618, 638, 639, 645, 665, 666, 677, 683, 699, 704, 705, 707, 709, 813, 819, 821, 830, 867, 874, 876, 883, 890, 891, 896, 897, 899, 900, 901, 902, 904, 913, 916, 955, 996, 997, 1005, 1008, 1010, 1012, 1015, 1018, 1020, 1022, 1023, 1024, 1026, 1032, 1034, 1041, 1042, 1048, 1049, 1050, 1051, 1053, 1055], "recompil": [383, 388, 400], "recomput": [90, 91, 255, 257, 297, 324, 475, 480, 1004, 1020, 1044, 1055], "reconstruct": [2, 42, 55, 58, 101, 123, 124, 128, 187, 216, 240, 241, 328, 408, 419, 422, 488, 489, 490, 538, 540, 542, 544, 545, 546, 547, 549, 550, 552, 553, 555, 590, 594, 659, 679, 695, 696, 700, 903, 904, 1004, 1005, 1029, 1053], "reconstruct_from_patches_2d": [2, 126, 422, 590], "reconstruction_err_": [545, 547], "reconstruction_error": 695, "reconstruction_error_": 696, "record": [2, 50, 124, 141, 153, 192, 251, 269, 321, 358, 369, 382, 408, 414, 416, 456, 463, 505, 627, 650, 699, 778, 781, 785, 786, 787, 788, 834, 857, 1052, 1053], "recov": [75, 100, 115, 124, 125, 130, 147, 174, 189, 202, 216, 217, 221, 237, 288, 358, 416, 420, 423, 426, 466, 540, 566, 1004, 1005, 1007, 1028, 1045], "recoveri": [51, 115, 202, 216, 416, 423], "recreat": [83, 255], "recreate_imag": 83, "rect": [47, 87, 197], "rect_colorbar": 315, "rect_histi": 315, "rect_histx": 315, "rect_scatt": 315, "rectangl": 47, "rectangular": [377, 396, 955, 1028], "rectifi": [868, 869], "recurs": [2, 18, 52, 86, 154, 163, 166, 169, 172, 187, 270, 273, 274, 280, 289, 299, 360, 384, 414, 418, 446, 447, 448, 451, 469, 509, 522, 570, 600, 601, 604, 609, 639, 640, 665, 826, 871, 881, 1008, 1011, 1014, 1015, 1024, 1029, 1030, 1034, 1039, 1049, 1050], "recursionerror": 1057, "red": [48, 49, 50, 63, 69, 70, 95, 113, 121, 123, 124, 125, 140, 158, 161, 183, 195, 197, 198, 207, 215, 242, 255, 270, 281, 308, 311, 316, 320, 321, 336, 345, 363, 380, 396, 414, 419, 1009], "reda": 1045, "redden": 1050, "reddi": [1046, 1047, 1048, 1053, 1056], "redefin": [58, 150, 190], "redesign": [394, 1039], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 448, "redo": 357, "reduc": [2, 37, 43, 46, 77, 80, 81, 82, 83, 88, 105, 106, 111, 140, 150, 152, 153, 156, 169, 190, 197, 198, 202, 215, 221, 222, 225, 246, 248, 251, 254, 276, 282, 292, 304, 317, 320, 321, 329, 357, 358, 365, 374, 376, 379, 382, 388, 394, 396, 408, 412, 413, 414, 416, 418, 419, 421, 422, 423, 425, 450, 451, 456, 463, 466, 500, 541, 551, 556, 562, 563, 564, 565, 570, 571, 572, 573, 580, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 617, 634, 650, 659, 679, 680, 681, 682, 694, 699, 702, 788, 807, 810, 811, 813, 821, 830, 832, 833, 834, 835, 838, 880, 881, 888, 900, 903, 904, 911, 912, 919, 920, 921, 922, 997, 1000, 1002, 1003, 1004, 1005, 1008, 1011, 1020, 1021, 1023, 1025, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1055, 1057], "reduce_dim": [106, 256, 274, 415], "reduce_dim__k": 106, "reduce_dim__n_compon": [106, 274, 415], "reduce_func": [788, 1050], "reduced_data": 93, "reducer_label": 106, "reduct": [2, 11, 45, 57, 89, 92, 103, 107, 118, 123, 131, 140, 156, 187, 236, 238, 239, 242, 248, 252, 296, 303, 305, 328, 342, 365, 369, 374, 414, 415, 417, 419, 421, 423, 474, 488, 489, 490, 491, 509, 537, 539, 541, 542, 545, 546, 547, 548, 551, 554, 556, 560, 561, 564, 565, 566, 567, 571, 572, 573, 606, 614, 695, 696, 697, 698, 699, 700, 788, 807, 837, 853, 860, 867, 871, 872, 881, 891, 909, 911, 919, 920, 921, 922, 1000, 1005, 1020, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1040, 1041, 1042, 1045, 1053, 1054, 1055], "redund": [62, 64, 133, 171, 261, 266, 331, 365, 378, 381, 382, 387, 396, 412, 522, 641, 1028, 1051], "redundantli": 396, "ref": [382, 390, 998, 1045], "ref_lin": 444, "refactor": [328, 434, 1039, 1041, 1042, 1043, 1049, 1052, 1053, 1054], "refer": [43, 44, 72, 73, 95, 98, 105, 113, 120, 137, 151, 153, 158, 172, 179, 183, 192, 204, 235, 251, 254, 269, 275, 280, 281, 282, 289, 298, 305, 315, 324, 325, 326, 327, 328, 329, 330, 331, 332, 357, 370, 376, 377, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 394, 395, 396, 397, 400, 405, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 463, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 505, 510, 518, 520, 522, 523, 524, 525, 526, 527, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 551, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 597, 600, 601, 602, 609, 614, 615, 617, 618, 621, 626, 629, 630, 634, 635, 638, 639, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 654, 656, 658, 660, 662, 663, 665, 668, 670, 672, 673, 674, 675, 678, 680, 682, 683, 685, 686, 689, 690, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 711, 712, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 741, 742, 743, 744, 745, 747, 748, 750, 763, 765, 766, 776, 790, 792, 793, 795, 796, 799, 800, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 846, 847, 848, 850, 853, 856, 857, 858, 860, 867, 868, 869, 871, 876, 877, 878, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 899, 904, 905, 906, 907, 908, 909, 911, 913, 914, 916, 917, 919, 920, 921, 922, 942, 949, 950, 955, 973, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1031, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "referenc": [379, 382, 384, 390, 396, 903, 904, 1011, 1046, 1052], "references_": 888, "refin": [62, 115, 478, 716, 1008], "refit": [144, 163, 169, 171, 187, 267, 274, 276, 279, 282, 283, 287, 396, 413, 418, 424, 509, 574, 575, 634, 666, 672, 720, 807, 810, 811, 821, 829, 837, 916, 997, 1004, 1008, 1029, 1046, 1047, 1048, 1057], "refit_strategi": 273, "refit_time_": [807, 810, 811, 821, 1047], "reflect": [51, 75, 81, 82, 113, 121, 124, 147, 191, 192, 217, 235, 284, 299, 357, 378, 381, 382, 386, 396, 399, 411, 456, 462, 1005, 1008, 1014, 1016, 1040, 1048, 1057], "reformul": 381, "refrain": [218, 382], "refurbish": 7, "refus": [269, 394, 901, 902], "reg": [151, 190, 198, 251, 316, 325, 350, 421, 565, 567, 575, 657, 658, 660, 661, 662, 663, 664, 670, 671, 672, 677, 678, 685, 686, 696, 700, 922, 1004, 1044], "reg1": [161, 421], "reg2": [161, 421], "reg3": [161, 421], "reg_covar": [260, 804, 805], "reg_nnl": 212, "reg_ol": 212, "reg_param": [557, 1058], "regard": [0, 11, 44, 46, 50, 52, 88, 90, 105, 120, 128, 164, 174, 179, 191, 192, 206, 214, 219, 239, 250, 254, 277, 284, 285, 298, 357, 377, 382, 383, 387, 394, 396, 402, 408, 414, 419, 421, 422, 424, 449, 453, 458, 465, 468, 508, 621, 626, 663, 665, 708, 750, 805, 813, 829, 830, 835, 853, 854, 1001, 1004, 1008, 1010, 1011, 1013, 1015, 1022, 1023, 1024, 1046, 1049], "regardless": [235, 276, 277, 278, 370, 382, 414, 542, 639, 640, 665, 711, 722, 1008, 1020, 1047, 1054, 1055], "regedit": 400, "regener": 876, "regex": [275, 358, 470, 472], "regexp": [595, 596, 598], "regim": [43, 396, 911, 912, 1007], "region": [51, 55, 59, 62, 71, 82, 83, 84, 88, 91, 101, 159, 181, 187, 190, 217, 235, 244, 248, 249, 266, 307, 318, 345, 352, 379, 389, 396, 414, 421, 424, 454, 456, 462, 468, 594, 1005, 1008, 1011, 1014, 1018, 1022, 1024, 1029], "region_1": 321, "region_2": 321, "regist": [2, 202, 356, 388, 977], "register_parallel_backend": [2, 1047, 1057], "registri": [380, 400, 1027], "regr": [213, 415, 561, 563, 572, 653, 654, 674, 844, 869, 912, 914, 917, 1023], "regr_1": [138, 362, 363], "regr_2": [138, 362, 363], "regr_3": 363, "regr_multirf": 157, "regr_rf": 157, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 89, 103, 105, 113, 114, 116, 120, 124, 125, 126, 133, 136, 137, 140, 142, 143, 144, 145, 148, 149, 152, 153, 157, 158, 164, 170, 172, 173, 175, 183, 185, 186, 187, 189, 190, 191, 193, 196, 199, 200, 202, 203, 205, 207, 211, 212, 214, 218, 220, 221, 222, 223, 226, 228, 233, 240, 243, 245, 253, 254, 255, 258, 269, 271, 283, 286, 288, 289, 290, 294, 296, 298, 306, 312, 313, 315, 316, 319, 320, 326, 327, 328, 329, 331, 340, 341, 342, 352, 353, 356, 359, 360, 364, 370, 371, 374, 375, 377, 379, 382, 384, 387, 390, 391, 394, 395, 396, 409, 412, 416, 417, 418, 419, 421, 423, 437, 443, 470, 471, 480, 490, 495, 496, 499, 503, 508, 509, 511, 512, 519, 523, 524, 525, 531, 535, 538, 542, 544, 546, 548, 549, 550, 552, 553, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 577, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 613, 616, 617, 618, 621, 622, 629, 630, 632, 638, 639, 640, 641, 642, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 701, 708, 713, 728, 730, 731, 735, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 792, 797, 798, 807, 810, 811, 813, 821, 830, 834, 835, 837, 838, 840, 842, 844, 845, 853, 854, 859, 861, 862, 868, 869, 871, 872, 875, 876, 878, 884, 885, 886, 888, 891, 892, 895, 900, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 925, 929, 931, 937, 940, 942, 959, 997, 998, 1000, 1003, 1005, 1015, 1016, 1018, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "regression_data": 46, "regression_model": 1046, "regression_test": 390, "regressioncriterion": 1047, "regressionregressionramdomizedpcaramdom": 402, "regressor": [2, 30, 43, 109, 118, 151, 157, 158, 161, 174, 179, 186, 187, 190, 196, 198, 200, 202, 217, 218, 220, 223, 234, 235, 251, 278, 290, 300, 320, 325, 326, 369, 382, 384, 394, 396, 412, 415, 424, 437, 440, 441, 442, 471, 488, 489, 490, 491, 531, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 572, 573, 574, 575, 576, 577, 612, 613, 616, 618, 639, 640, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 685, 686, 708, 839, 840, 843, 844, 845, 854, 862, 867, 868, 869, 872, 878, 886, 891, 892, 912, 914, 917, 919, 920, 921, 922, 925, 929, 930, 931, 944, 947, 949, 997, 998, 1004, 1008, 1009, 1011, 1016, 1022, 1027, 1029, 1030, 1034, 1039, 1040, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1054, 1056, 1058], "regressor_": [190, 471, 600, 601, 604], "regressor__sample_weight": 217, "regressor_tag": [930, 944], "regressor_with_": 189, "regressor_without_": 189, "regressorchain": [2, 405, 842, 844, 1047, 1050, 1054], "regressormixin": [2, 251, 384, 396, 471, 931, 1050], "regressortag": [2, 930, 944], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 92, 94, 95, 96, 105, 107, 112, 128, 136, 146, 148, 149, 151, 156, 163, 165, 174, 175, 176, 178, 181, 183, 185, 187, 189, 196, 197, 198, 200, 202, 204, 205, 206, 208, 212, 213, 215, 217, 224, 231, 233, 235, 250, 261, 267, 268, 271, 276, 277, 279, 300, 301, 309, 311, 312, 313, 317, 318, 320, 321, 322, 339, 340, 342, 344, 345, 346, 349, 350, 356, 358, 360, 369, 382, 394, 395, 412, 414, 416, 417, 419, 420, 421, 424, 443, 449, 453, 477, 478, 482, 484, 485, 486, 487, 511, 519, 521, 522, 527, 529, 531, 535, 545, 546, 547, 550, 554, 555, 557, 566, 568, 569, 595, 596, 598, 645, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 696, 700, 742, 748, 757, 804, 805, 824, 830, 837, 838, 868, 869, 872, 891, 911, 912, 913, 914, 916, 917, 918, 997, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1013, 1014, 1018, 1021, 1022, 1023, 1029, 1030, 1032, 1034, 1039, 1040, 1041, 1043, 1044, 1048, 1049, 1051, 1052, 1057], "regularis": [221, 427, 479, 481], "regularli": [146, 292, 394, 1010], "regulatori": 153, "rehan": 1054, "rehman": 1047, "reiichiro": [1046, 1047], "reilli": 1056, "reimburs": 269, "reimplement": [388, 394, 396, 1045, 1049], "reinforc": 1028, "reinit": 390, "reiniti": 394, "reinstal": 400, "reintroduc": 1055, "reitsam": 1051, "reject": [252, 269, 396, 397, 530, 678, 734, 937, 938, 1004, 1008, 1047], "rel": [43, 45, 47, 55, 58, 64, 90, 96, 128, 144, 179, 193, 195, 198, 217, 235, 263, 288, 301, 302, 316, 325, 328, 345, 349, 356, 357, 377, 381, 384, 390, 396, 412, 414, 418, 421, 422, 424, 446, 449, 453, 455, 465, 528, 531, 538, 541, 544, 548, 552, 553, 564, 565, 566, 567, 571, 572, 573, 611, 656, 665, 666, 678, 679, 681, 697, 701, 736, 753, 754, 807, 810, 811, 813, 821, 830, 835, 838, 851, 852, 856, 868, 869, 880, 881, 891, 907, 911, 912, 913, 916, 918, 919, 920, 921, 922, 1004, 1005, 1008, 1010, 1011, 1012, 1014], "relabel": [381, 825, 826, 908], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 376, 377, 378, 381, 382, 386, 387, 389, 390, 391, 394, 396, 397, 399, 405, 408, 413, 414, 415, 416, 417, 418, 419, 421, 424, 456, 470, 475, 503, 556, 557, 569, 570, 646, 680, 684, 699, 708, 730, 750, 828, 834, 869, 870, 872, 875, 876, 881, 884, 886, 887, 890, 899, 915, 997, 1000, 1002, 1008, 1009, 1011, 1012, 1015, 1018, 1023, 1024, 1025, 1028, 1029, 1031, 1034, 1039, 1043, 1044, 1045, 1047, 1048, 1051, 1052, 1055], "relate_point": 305, "relationship": [2, 43, 52, 58, 137, 138, 153, 180, 189, 190, 197, 202, 205, 217, 219, 220, 282, 289, 294, 316, 322, 331, 396, 414, 416, 418, 468, 503, 643, 721, 1005, 1008, 1010, 1011, 1015, 1016, 1044], "relative_tim": 263, "relax": [46, 414, 422, 459, 1021, 1046], "releas": [0, 54, 90, 105, 141, 142, 155, 172, 185, 186, 191, 192, 195, 217, 218, 219, 246, 251, 256, 257, 258, 269, 270, 287, 289, 297, 321, 337, 364, 370, 380, 382, 383, 385, 390, 394, 396, 422, 449, 452, 453, 470, 473, 496, 497, 503, 508, 509, 511, 519, 522, 528, 531, 545, 548, 568, 569, 571, 572, 574, 606, 609, 635, 637, 639, 641, 647, 653, 655, 659, 665, 676, 687, 695, 704, 708, 709, 724, 725, 739, 749, 755, 785, 795, 802, 806, 807, 808, 810, 811, 813, 821, 829, 830, 833, 834, 837, 853, 855, 872, 876, 881, 884, 885, 886, 890, 891, 892, 908, 909, 911, 916, 919, 920, 950, 1024, 1029, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "release_highlight": 1029, "relev": [46, 48, 57, 110, 114, 172, 187, 197, 211, 220, 275, 276, 282, 365, 369, 371, 377, 379, 381, 382, 384, 387, 388, 396, 397, 405, 416, 417, 423, 424, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 733, 747, 763, 806, 808, 809, 810, 811, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 889, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 1008, 1009, 1014, 1025, 1028, 1029, 1042, 1047, 1053], "reli": [128, 143, 147, 172, 193, 204, 206, 292, 295, 325, 329, 356, 369, 370, 384, 387, 390, 391, 394, 396, 410, 411, 414, 419, 421, 422, 556, 600, 604, 614, 615, 785, 835, 838, 876, 960, 973, 997, 1000, 1002, 1004, 1008, 1011, 1016, 1018, 1023, 1032, 1047, 1048, 1049, 1053, 1055, 1056], "reliabl": [2, 62, 64, 412, 418, 444, 445, 653, 1024, 1032], "relianc": [128, 221], "religion": [57, 276, 356, 357, 358, 377, 1009], "reloc": 1048, "relova": 1052, "relu": [868, 869], "remain": [47, 62, 64, 105, 137, 144, 149, 151, 171, 190, 217, 221, 233, 260, 273, 277, 281, 284, 411, 414, 415, 416, 418, 422, 452, 470, 473, 522, 523, 528, 535, 541, 577, 617, 618, 770, 776, 810, 811, 812, 815, 817, 846, 847, 848, 850, 959, 997, 998, 1000, 1007, 1008, 1012, 1018, 1024, 1028, 1041, 1047, 1053, 1056], "remaind": [43, 147, 190, 206, 217, 219, 235, 254, 329, 360, 415, 470, 473, 1039, 1046, 1047, 1048, 1051, 1052, 1055, 1057], "remaining_column": 470, "remark": [90, 118, 172, 269, 371, 382, 1018], "remedi": 234, "rememb": [90, 384, 386, 387, 400, 422, 1011, 1015, 1024], "remi": 1046, "remind": [251, 397], "reminisc": 126, "remot": [195, 335, 382, 385], "remov": [1, 2, 44, 54, 55, 89, 90, 104, 109, 170, 172, 185, 186, 190, 193, 276, 315, 322, 324, 325, 326, 331, 356, 357, 360, 365, 374, 377, 381, 382, 383, 384, 386, 387, 391, 396, 400, 407, 414, 415, 418, 421, 422, 424, 425, 434, 448, 450, 451, 456, 463, 488, 489, 490, 491, 494, 495, 534, 541, 542, 545, 547, 548, 560, 574, 575, 576, 577, 586, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 618, 637, 651, 661, 662, 663, 665, 666, 680, 682, 686, 699, 716, 749, 785, 786, 787, 789, 807, 810, 811, 813, 821, 830, 835, 836, 838, 858, 870, 871, 875, 876, 888, 889, 891, 900, 908, 926, 935, 937, 938, 949, 950, 998, 1005, 1011, 1024, 1030, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "remove_zero_eig": [542, 1041, 1048], "rempfler": 1050, "renaissance0n": 1057, "renam": [151, 193, 265, 276, 324, 382, 386, 414, 453, 465, 470, 477, 478, 484, 534, 543, 560, 561, 562, 563, 564, 565, 570, 571, 572, 573, 785, 884, 935, 937, 938, 1039, 1040, 1041, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "rename_axi": 275, "render": [51, 63, 88, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 212, 221, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 382, 384, 386, 387, 388, 396, 558, 596, 638, 707, 709, 888, 900, 923, 925, 1007, 1024, 1052, 1056], "rene": 1052, "renni": [2, 846, 848, 1010, 1047], "renorm": 63, "rent": 43, "rental": [43, 52, 191, 1015], "reorder": [58, 129, 396, 704, 725, 1028, 1047], "reordered_data": 58, "reordered_row": 58, "reorgan": 1045, "rep": 379, "reparameter": 1023, "reparametr": 352, "repartit": 43, "repeat": [2, 49, 69, 101, 112, 114, 149, 172, 174, 180, 181, 191, 195, 219, 269, 270, 275, 276, 287, 292, 335, 357, 358, 384, 391, 396, 397, 411, 412, 414, 419, 422, 423, 595, 600, 614, 615, 622, 634, 641, 666, 812, 822, 823, 826, 943, 998, 1007, 1024, 1034, 1047, 1049], "repeatedkfold": [2, 190, 418, 812, 823, 1046], "repeatedli": [137, 328, 365, 396, 414, 421, 424, 515, 553, 673, 674, 683, 684, 685, 788, 998, 1012], "repeatedstratifiedkfold": [2, 275, 289, 292, 418, 822, 826, 1046, 1058], "repercuss": 320, "repetit": [275, 289, 292, 387, 418, 822, 823, 1016, 1053], "replac": [2, 43, 62, 113, 127, 137, 153, 174, 179, 181, 185, 191, 203, 218, 258, 278, 295, 317, 322, 326, 347, 380, 382, 386, 388, 391, 396, 408, 415, 418, 421, 422, 447, 451, 470, 510, 522, 562, 563, 570, 589, 595, 596, 597, 598, 614, 615, 634, 637, 641, 646, 648, 735, 792, 813, 819, 821, 830, 870, 871, 874, 894, 907, 908, 914, 927, 929, 976, 978, 981, 997, 998, 1000, 1004, 1008, 1018, 1023, 1024, 1027, 1028, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058], "replai": [810, 811], "repli": [54, 356, 381, 382, 385], "replic": [275, 381, 384, 1034], "repo": [382, 386, 1028, 1031], "report": [0, 2, 43, 47, 52, 68, 104, 109, 169, 182, 204, 269, 273, 283, 289, 292, 324, 334, 365, 377, 381, 383, 384, 385, 388, 390, 394, 396, 400, 408, 414, 418, 618, 656, 665, 671, 692, 693, 707, 720, 736, 737, 745, 790, 791, 794, 840, 849, 868, 869, 906, 924, 949, 1004, 1011, 1016, 1027, 1028, 1031, 1040, 1043, 1046, 1047, 1049, 1050, 1052, 1054, 1055], "reporthook": 47, "repositori": [43, 47, 52, 195, 269, 330, 375, 377, 379, 380, 382, 384, 386, 390, 394, 397, 400, 511, 1027, 1031, 1034], "repr": [584, 1050, 1051, 1053], "repreat": 275, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 83, 84, 85, 88, 123, 125, 131, 132, 144, 145, 154, 190, 197, 209, 219, 221, 222, 226, 239, 241, 249, 254, 263, 268, 269, 272, 275, 278, 282, 300, 317, 349, 356, 358, 364, 371, 374, 377, 379, 384, 394, 395, 396, 397, 408, 412, 414, 418, 419, 420, 421, 422, 423, 444, 448, 452, 458, 469, 470, 476, 477, 478, 479, 480, 481, 482, 494, 496, 497, 499, 501, 503, 505, 507, 508, 509, 511, 512, 517, 534, 541, 543, 545, 547, 548, 554, 557, 562, 570, 588, 595, 598, 601, 636, 639, 641, 647, 683, 685, 704, 706, 708, 718, 737, 750, 796, 807, 809, 820, 821, 824, 827, 829, 834, 836, 837, 840, 841, 847, 853, 854, 855, 857, 858, 859, 861, 862, 863, 868, 869, 878, 884, 885, 908, 911, 912, 937, 938, 959, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1021, 1022, 1024, 1045, 1047, 1050, 1051, 1054, 1057], "represent": [2, 43, 51, 55, 58, 63, 88, 105, 106, 123, 126, 142, 144, 145, 154, 155, 156, 158, 161, 169, 179, 190, 192, 195, 199, 202, 237, 238, 239, 245, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 292, 305, 313, 321, 326, 328, 329, 331, 336, 357, 358, 364, 365, 374, 376, 385, 396, 408, 414, 415, 419, 420, 421, 428, 469, 538, 542, 544, 547, 549, 555, 573, 595, 597, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 650, 653, 659, 665, 666, 667, 669, 673, 674, 675, 683, 684, 685, 776, 804, 805, 813, 830, 867, 880, 884, 885, 889, 891, 904, 911, 923, 925, 928, 934, 951, 973, 1000, 1005, 1007, 1009, 1011, 1012, 1013, 1015, 1018, 1023, 1028, 1039, 1040, 1043, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "reproduc": [44, 51, 95, 137, 190, 195, 204, 284, 292, 313, 370, 381, 382, 384, 385, 390, 394, 396, 414, 418, 419, 422, 426, 446, 460, 466, 475, 480, 494, 497, 499, 502, 504, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 566, 567, 568, 569, 570, 614, 615, 617, 618, 641, 646, 647, 648, 649, 653, 654, 657, 659, 660, 661, 667, 668, 669, 670, 673, 674, 675, 678, 683, 685, 686, 696, 697, 699, 700, 701, 800, 804, 805, 809, 810, 811, 812, 813, 819, 821, 822, 823, 824, 825, 826, 827, 835, 836, 837, 841, 842, 845, 856, 860, 867, 868, 869, 876, 888, 892, 900, 903, 904, 911, 912, 913, 916, 954, 955, 978, 981, 1000, 1027, 1031, 1039, 1047, 1052, 1053], "reproduct": [394, 1004], "request": [2, 47, 55, 81, 217, 235, 251, 327, 370, 376, 380, 381, 385, 396, 397, 405, 408, 419, 422, 423, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 588, 589, 595, 597, 598, 606, 607, 617, 618, 639, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 706, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 963, 964, 966, 1008, 1011, 1031, 1045, 1046, 1047, 1056, 1057], "request_rout": 251, "requir": [30, 31, 43, 46, 53, 62, 80, 81, 83, 88, 90, 92, 93, 102, 104, 120, 127, 129, 142, 143, 147, 148, 151, 153, 154, 158, 172, 191, 202, 206, 214, 217, 237, 239, 245, 248, 251, 254, 258, 269, 276, 284, 286, 289, 295, 297, 315, 320, 326, 327, 356, 357, 358, 376, 379, 380, 382, 383, 384, 388, 390, 394, 396, 397, 400, 401, 405, 408, 410, 414, 415, 416, 418, 419, 421, 422, 423, 425, 431, 437, 443, 444, 445, 450, 452, 456, 458, 463, 468, 470, 473, 475, 488, 489, 490, 503, 515, 528, 531, 542, 548, 556, 557, 558, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 579, 586, 587, 588, 609, 617, 618, 626, 634, 639, 640, 641, 650, 653, 654, 659, 660, 665, 666, 673, 674, 675, 678, 681, 682, 683, 684, 685, 693, 696, 698, 699, 700, 702, 706, 731, 736, 737, 754, 756, 759, 770, 790, 791, 794, 806, 807, 810, 811, 814, 816, 821, 829, 834, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 868, 871, 872, 873, 875, 885, 886, 887, 891, 899, 903, 904, 906, 907, 911, 912, 913, 916, 919, 920, 921, 922, 928, 930, 931, 937, 938, 944, 949, 950, 964, 967, 973, 993, 996, 997, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1022, 1023, 1024, 1028, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "requires_fit": [930, 991, 1058], "requires_i": [431, 437, 996, 1050], "requires_positive_x": [1049, 1054], "requires_vector_input": [619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "requisit": 384, "rerais": 1056, "rerun": [51, 63, 77, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 390], "resampl": [2, 87, 150, 190, 235, 299, 391, 394, 396, 562, 563, 981, 1028, 1048, 1052], "resampled_arrai": 978, "rescal": [43, 81, 82, 90, 128, 199, 204, 240, 254, 315, 354, 416, 421, 426, 475, 476, 477, 478, 479, 480, 481, 482, 540, 545, 653, 656, 659, 883, 889, 913, 914, 915, 916, 917, 1008, 1018, 1043, 1044, 1058], "rescaled_coin": [81, 82], "rescu": [408, 422], "research": [0, 172, 189, 269, 275, 281, 292, 377, 379, 394, 414, 508, 520, 642, 652, 699, 742, 836, 841, 997, 1005, 1009, 1011, 1023, 1028, 1032], "resembl": [74, 221, 251], "reserv": [269, 321, 382, 568, 569, 1032], "reserva": 321, "reservoir": 976, "reservoir_sampl": 976, "reset": [258, 365, 390, 541, 683, 684, 685, 851, 852, 880, 881, 891, 996, 1041], "reset_n_cal": [851, 852], "reshama": [0, 367, 372, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1057], "reshap": [2, 43, 44, 45, 53, 61, 68, 81, 82, 83, 85, 86, 88, 89, 93, 106, 113, 117, 123, 126, 132, 140, 145, 146, 156, 165, 170, 174, 176, 177, 178, 179, 180, 181, 183, 197, 208, 214, 230, 231, 233, 234, 238, 240, 242, 244, 249, 253, 264, 273, 299, 301, 308, 310, 312, 313, 316, 317, 318, 322, 324, 327, 328, 330, 331, 339, 344, 345, 350, 353, 354, 394, 411, 419, 421, 422, 451, 471, 591, 638, 739, 837, 886, 890, 1004, 1018, 1024, 1044], "resid": 377, "residence_sinc": 269, "residenti": 158, "residu": [2, 109, 213, 219, 271, 437, 471, 488, 489, 490, 559, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 680, 681, 685, 686, 692, 693, 708, 751, 792, 844, 845, 854, 862, 869, 912, 914, 917, 920, 922, 1004, 1008, 1051, 1052, 1054], "residual_metr": 1045, "residual_threshold": [234, 678, 1004, 1052], "residual_vs_predict": [43, 52, 109, 271, 329, 708], "residues_": 1044, "resign": 397, "resili": 422, "resist": [113, 114, 382], "resiz": [45, 81, 82, 255, 377, 500, 501], "resolut": [43, 50, 55, 132, 191, 307, 308, 345, 397, 412, 1049], "resolv": [55, 381, 382, 386, 390, 397, 422, 452, 458, 468, 698, 702, 955, 998, 1008, 1046, 1048, 1049, 1052, 1057], "resort": [277, 377, 408, 562, 1049], "resourc": [55, 77, 150, 153, 185, 217, 312, 326, 368, 385, 394, 396, 413, 421, 810, 811, 997, 1009, 1028, 1032, 1034, 1047, 1052, 1053, 1058], "resourcewarn": 1042, "resp": [377, 421, 604, 804, 805, 1022, 1047], "respect": [64, 90, 102, 120, 128, 137, 141, 143, 146, 155, 182, 195, 197, 202, 206, 219, 231, 234, 237, 239, 245, 248, 250, 254, 265, 269, 284, 301, 302, 313, 320, 328, 342, 349, 364, 369, 370, 377, 378, 382, 412, 414, 417, 419, 421, 422, 424, 452, 470, 473, 476, 477, 478, 479, 480, 481, 482, 541, 547, 548, 554, 560, 568, 569, 604, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 635, 643, 650, 678, 697, 701, 719, 735, 789, 792, 804, 805, 847, 857, 868, 869, 923, 925, 996, 997, 1001, 1002, 1004, 1005, 1008, 1011, 1012, 1013, 1014, 1018, 1023, 1027, 1031, 1032, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "respond": [190, 382, 414], "respons": [0, 25, 172, 191, 213, 217, 220, 251, 285, 288, 356, 379, 382, 396, 414, 415, 421, 452, 470, 488, 489, 490, 574, 575, 638, 639, 640, 681, 682, 705, 707, 709, 749, 804, 805, 1009, 1015, 1056], "response_method": [48, 66, 70, 91, 139, 154, 159, 201, 209, 226, 231, 269, 278, 298, 303, 306, 320, 332, 341, 342, 344, 349, 361, 638, 639, 640, 705, 707, 709, 749, 806, 829, 1008, 1056, 1058], "rest": [2, 30, 62, 66, 147, 151, 187, 196, 202, 226, 232, 251, 254, 263, 292, 324, 338, 342, 353, 388, 396, 424, 519, 617, 638, 651, 665, 666, 683, 761, 795, 839, 840, 841, 860, 911, 913, 916, 1004, 1008, 1009, 1012, 1015, 1023, 1029, 1032, 1043, 1044, 1053, 1054, 1055, 1057], "restart": [92, 180, 385, 390, 453, 538, 544, 545, 550, 552, 553, 617, 618, 1005, 1052], "restor": [1042, 1047, 1048, 1049, 1050, 1054], "restrict": [2, 64, 101, 102, 107, 117, 185, 187, 207, 234, 309, 384, 388, 394, 412, 414, 421, 422, 471, 500, 509, 539, 588, 617, 660, 661, 662, 663, 665, 689, 690, 720, 789, 795, 796, 837, 859, 861, 862, 863, 865, 867, 868, 869, 871, 897, 1008, 1024, 1029, 1033, 1034, 1039, 1041, 1049, 1051, 1056], "restructuredtext": 382, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 81, 83, 88, 89, 90, 95, 97, 101, 105, 107, 109, 114, 118, 123, 126, 128, 129, 133, 140, 141, 142, 144, 147, 148, 150, 151, 154, 156, 157, 165, 171, 172, 174, 176, 178, 180, 182, 185, 190, 191, 192, 193, 198, 203, 205, 206, 207, 212, 218, 219, 221, 225, 231, 232, 235, 237, 238, 241, 244, 247, 249, 255, 260, 265, 266, 268, 269, 270, 273, 275, 276, 278, 281, 282, 283, 284, 286, 287, 289, 292, 295, 297, 301, 310, 311, 312, 315, 316, 317, 320, 324, 326, 328, 329, 330, 331, 332, 334, 337, 339, 345, 349, 350, 352, 356, 358, 362, 363, 364, 369, 370, 371, 376, 377, 379, 382, 384, 386, 387, 388, 390, 394, 395, 396, 397, 408, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 439, 446, 447, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 465, 468, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 495, 515, 516, 518, 520, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 586, 587, 588, 589, 591, 595, 596, 598, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 638, 639, 641, 643, 647, 650, 659, 660, 665, 671, 672, 673, 674, 682, 683, 684, 685, 693, 696, 697, 698, 699, 700, 701, 702, 715, 717, 718, 719, 724, 732, 733, 735, 736, 737, 738, 739, 743, 744, 745, 761, 763, 764, 771, 778, 781, 785, 786, 787, 788, 790, 791, 792, 794, 800, 801, 804, 805, 807, 809, 810, 811, 812, 817, 821, 822, 823, 826, 827, 832, 838, 839, 840, 842, 843, 844, 845, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 875, 876, 884, 885, 888, 889, 892, 900, 904, 908, 911, 913, 916, 919, 920, 921, 922, 923, 924, 937, 938, 954, 955, 957, 962, 972, 973, 978, 981, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1027, 1028, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "results_df": [225, 275, 321], "results_for_preval": 278, "results_sc": 352, "retail": 1032, "retain": [2, 197, 396, 414, 417, 418, 422, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 501, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 702, 703, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 884, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1021, 1039], "retbin": 1018, "retent": [599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "retrac": 251, "retract": 382, "retrain": [408, 1028, 1055, 1057], "retri": [192, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 1047, 1053, 1057, 1058], "retriev": [2, 118, 190, 221, 282, 357, 364, 386, 396, 419, 422, 423, 474, 503, 597, 600, 601, 633, 660, 670, 691, 706, 733, 737, 739, 740, 763, 788, 846, 850, 883, 909, 1004, 1006, 1008, 1010, 1027, 1028, 1044, 1049, 1051, 1053, 1056], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 83, 88, 91, 96, 104, 109, 121, 130, 132, 135, 137, 140, 142, 149, 150, 153, 154, 158, 172, 177, 180, 182, 186, 193, 197, 198, 204, 206, 209, 217, 218, 225, 226, 227, 235, 251, 254, 257, 258, 263, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 282, 290, 295, 300, 305, 308, 313, 315, 317, 320, 324, 332, 341, 345, 356, 358, 360, 364, 369, 375, 376, 377, 382, 383, 384, 388, 389, 391, 394, 396, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 933, 934, 935, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 976, 977, 978, 979, 980, 981, 982, 988, 991, 992, 993, 994, 995, 996, 998, 1008, 1011, 1015, 1016, 1023, 1024, 1028, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "return_a": [592, 593, 973, 1042], "return_cent": [519, 1050], "return_cod": 553, "return_cost": [477, 478, 484], "return_count": [337, 357, 863], "return_cov": [396, 574, 575, 618, 871], "return_dist": [89, 469, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 1011, 1043], "return_distribut": [121, 530], "return_estim": [43, 190, 289, 331, 418, 834, 1047], "return_ind": 530, "return_indic": [418, 834, 1055], "return_inner_stat": 1053, "return_intercept": [694, 1048], "return_invers": [152, 384], "return_log": [851, 852], "return_model": [1041, 1043], "return_n_it": [426, 460, 465, 484, 552, 553, 653, 654, 659, 660, 667, 668, 669, 670, 688, 689, 690, 691, 692, 693, 694, 701, 1053], "return_norm": [898, 1046], "return_path": [689, 690, 692, 693], "return_std": [174, 179, 180, 181, 183, 197, 198, 396, 559, 574, 575, 618, 620, 621, 622, 623, 632, 634, 651, 652, 871, 1046, 1047, 1051, 1056], "return_sum_weight": 988, "return_tim": [277, 835, 1049], "return_train_scor": [143, 279, 289, 321, 418, 807, 810, 811, 821, 834, 1045, 1046, 1048], "return_x_i": [44, 46, 54, 93, 104, 105, 106, 107, 123, 143, 147, 161, 163, 164, 168, 185, 186, 192, 193, 195, 204, 205, 206, 208, 213, 214, 224, 232, 233, 245, 253, 254, 257, 258, 271, 274, 277, 282, 283, 292, 294, 297, 304, 311, 312, 313, 320, 324, 326, 328, 329, 330, 331, 337, 348, 358, 360, 375, 387, 388, 395, 408, 414, 415, 418, 421, 423, 426, 434, 452, 494, 495, 496, 497, 499, 501, 502, 503, 504, 507, 508, 509, 511, 512, 517, 539, 540, 541, 542, 565, 568, 569, 574, 575, 599, 602, 603, 605, 606, 607, 608, 609, 617, 626, 627, 629, 630, 645, 646, 665, 666, 675, 680, 681, 682, 695, 696, 697, 698, 700, 702, 708, 718, 795, 810, 811, 813, 839, 844, 855, 860, 863, 920, 921, 922, 998, 1003, 1008, 1009, 1010, 1011, 1018, 1036, 1045, 1047, 1049, 1052], "return_x_mean": 426, "reuben": 1039, "reus": [52, 174, 210, 269, 276, 324, 358, 384, 396, 414, 415, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 641, 653, 655, 656, 659, 665, 667, 669, 673, 674, 675, 676, 683, 684, 685, 687, 868, 869, 1016, 1020, 1032, 1046, 1056], "reuter": [369, 377], "reuters21578": 47, "reuterspars": 47, "rev": [382, 614, 615], "revamp": [384, 1049], "reveal": [43, 52, 190, 192, 356, 388, 411, 1005, 1055], "revers": [109, 172, 222, 275, 541, 548, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 796, 871, 1008, 1039, 1040, 1049, 1051, 1055], "revert": [124, 410, 637, 639, 640, 1046, 1051, 1056], "review": [292, 321, 369, 377, 384, 385, 387, 388, 394, 397, 418, 419, 542, 548, 1008, 1018], "revillet": 1039, "revis": [397, 677], "revisit": [414, 425, 450], "revolv": 1005, "reward": 382, "reweight": [137, 357, 396, 416, 421, 597, 598, 655, 676, 687], "reweight_covari": [475, 480], "rewrit": [388, 394, 1024, 1039], "rewritten": [382, 656, 1041, 1043], "rey": 1054, "reza": 1049, "rezazadeh": 1052, "rf": [142, 143, 157, 160, 161, 192, 324, 365, 421, 574, 576, 577], "rf_123": 365, "rf__n_estim": 421, "rf_appli": 142, "rf_applyfunctiontransform": 142, "rf_cst": 331, "rf_inst": 365, "rf_leaves_yield": 142, "rf_model": 142, "rf_no_cst": 331, "rf_pipelin": 158, "rfc": [64, 257, 324, 1036], "rfc_disp": [257, 324, 1036], "rfe": [2, 170, 171, 405, 423, 601, 604, 609, 1039, 1043, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058], "rfecv": [2, 171, 405, 423, 600, 604, 609, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058], "rfrandomforestregressor": 161, "rgb": [83, 377, 422, 500, 501, 590, 591, 594], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1046, "rho": [228, 419, 684, 1004, 1022, 1040], "rho_k": 420, "ri": [414, 712, 793], "ribeiro": [597, 737, 1052], "ricardo": [1042, 1052, 1053, 1056], "ricardojnf": 1052, "riccadonna": 750, "riccardo": [1050, 1056], "rice": [50, 308, 377, 505, 1052], "rich": [87, 153, 390, 394, 414, 445, 1032, 1050, 1053], "richard": [377, 423, 665, 1040, 1049, 1051, 1053, 1054, 1057], "richardscottoz": 1052, "richer": [87, 132, 414], "richi": 1047, "rick": 1050, "ricker": 132, "ricker_funct": 132, "ricker_matrix": 132, "rickiepark": 1046, "rid": [48, 1022], "riddel": [1042, 1044, 1046], "ridg": [2, 24, 44, 49, 53, 89, 109, 124, 125, 140, 158, 163, 172, 173, 179, 180, 181, 185, 187, 189, 190, 191, 196, 197, 202, 207, 210, 213, 217, 218, 243, 253, 288, 316, 319, 351, 352, 356, 369, 394, 410, 419, 421, 424, 531, 542, 546, 550, 618, 622, 629, 632, 650, 651, 652, 654, 656, 664, 668, 680, 681, 682, 685, 694, 708, 757, 807, 813, 821, 844, 917, 1008, 1009, 1016, 1018, 1022, 1023, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1052, 1053, 1054, 1055, 1057], "ridge_alpha": [546, 550, 1046], "ridge_cv": 109, "ridge_cv_with_trans_target": 109, "ridge_glm": 217, "ridge_regress": [2, 1047, 1048, 1054], "ridgeclassifi": [2, 356, 369, 679, 680, 682, 1004, 1009, 1044, 1048, 1052, 1053, 1054, 1057], "ridgeclassifiercv": [2, 405, 680, 681, 795, 1004, 1008, 1009, 1047, 1049, 1050, 1052, 1053, 1057, 1058], "ridgecv": [2, 43, 109, 158, 172, 190, 253, 396, 405, 421, 575, 650, 679, 682, 1004, 1009, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057, 1058], "ridgecvridgecv": [158, 190], "ridgeridg": 190, "ridgewai": [149, 421], "riedmann": 1051, "ries": 1053, "rifkin": 1004, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 80, 86, 88, 95, 97, 99, 112, 113, 115, 120, 121, 125, 126, 128, 130, 132, 137, 139, 140, 141, 150, 151, 152, 153, 160, 168, 174, 177, 186, 193, 205, 207, 218, 219, 220, 221, 223, 224, 227, 228, 244, 247, 248, 260, 262, 263, 265, 266, 269, 270, 271, 275, 278, 282, 285, 286, 288, 289, 300, 308, 310, 313, 315, 317, 320, 330, 331, 335, 345, 347, 349, 352, 354, 356, 361, 364, 365, 382, 384, 390, 394, 395, 397, 411, 413, 414, 417, 419, 420, 421, 424, 470, 488, 489, 490, 491, 541, 548, 551, 564, 565, 566, 567, 568, 569, 571, 572, 573, 594, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 642, 683, 685, 876, 919, 920, 921, 922, 923, 941, 955, 997, 1000, 1002, 1004, 1006, 1008, 1010, 1011, 1015, 1020, 1022, 1023, 1024, 1028, 1032, 1034, 1041, 1047, 1053, 1055, 1056, 1058], "right_impur": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "rightarrow": [424, 626, 1012], "rijn": [376, 1047], "rileran": 1053, "rio": [1049, 1051, 1052, 1053], "ripe": 321, "rise": 179, "rishabh": 1053, "rishi": 1051, "rishikesh": 1046, "risk": [16, 48, 90, 153, 217, 221, 235, 316, 352, 365, 381, 382, 396, 408, 413, 418, 421, 574, 575, 896, 897, 899, 900, 901, 902, 1004, 1008, 1032, 1046], "riski": 235, "riskiest": [217, 235], "ritchi": 1050, "rithvik": 1051, "ritter": [1053, 1054], "ritual": 356, "rival": [43, 908, 1021], "rk": 100, "rkf": [418, 822], "rl2007": 1004, "rlm": 1049, "rm": [113, 177, 386, 390, 416], "rmse": [43, 52, 114, 153, 321, 1008, 1050], "rmse_": 321, "rmse_test_mean": 321, "rmse_test_scor": 321, "rmse_test_std": 321, "rmse_train_mean": 321, "rmse_train_scor": 321, "rmse_train_std": 321, "rmsle": 1008, "rmtree": [89, 106, 415], "rna": 394, "rnd": 316, "rng": [44, 58, 59, 67, 70, 72, 79, 85, 97, 114, 118, 123, 125, 130, 138, 150, 153, 154, 155, 157, 174, 175, 178, 180, 181, 183, 185, 186, 189, 192, 197, 198, 199, 200, 202, 206, 211, 218, 219, 224, 231, 244, 250, 251, 253, 260, 270, 278, 281, 286, 287, 307, 310, 319, 322, 325, 326, 328, 330, 331, 334, 335, 339, 348, 362, 363, 365, 370, 384, 387, 405, 427, 476, 480, 481, 482, 484, 485, 486, 487, 650, 656, 677, 679, 685, 694, 819, 846, 847, 848, 850, 851, 852, 856, 859, 861, 862, 863, 888, 900, 903, 904, 906, 907, 908, 917], "ro": 63, "road": 394, "rob": [1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1051, 1054], "robert": [0, 172, 204, 292, 379, 404, 419, 535, 542, 635, 663, 728, 730, 731, 742, 877, 998, 1004, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1054, 1057], "roberto": [414, 448, 1057], "robertson": 1052, "robin": [185, 186, 634, 998, 1045, 1048, 1053, 1054], "robinson": 1052, "robl": 1046, "robson": 1049, "robust": [2, 48, 70, 96, 98, 110, 112, 148, 150, 172, 186, 187, 190, 191, 196, 207, 219, 221, 234, 244, 254, 290, 315, 330, 371, 379, 390, 414, 421, 422, 452, 454, 475, 476, 479, 480, 481, 482, 531, 541, 566, 567, 656, 664, 677, 678, 685, 686, 757, 841, 872, 886, 888, 889, 900, 906, 953, 1008, 1012, 1014, 1018, 1021, 1022, 1027, 1029, 1030, 1032, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1055], "robust_contour": 113, "robust_cov": 113, "robust_mah": 113, "robust_scal": [2, 889, 900, 1047], "robustli": [8, 220], "robustscal": [2, 254, 888, 901, 998, 1018, 1044, 1045, 1047, 1049, 1050, 1051, 1055], "roc": [2, 50, 62, 142, 172, 187, 243, 245, 254, 255, 267, 269, 270, 277, 331, 332, 389, 412, 413, 418, 511, 517, 571, 665, 709, 713, 714, 715, 734, 789, 795, 796, 826, 837, 840, 878, 916, 1014, 1029, 1036, 1041, 1042, 1044, 1045, 1049, 1051, 1055], "roc_auc": [50, 172, 275, 279, 284, 285, 389, 641, 709, 740, 1008, 1036], "roc_auc_ovo": [1008, 1049], "roc_auc_ovo_weight": [1008, 1049], "roc_auc_ovr": [1008, 1049], "roc_auc_ovr_weight": [1008, 1049], "roc_auc_scor": [2, 62, 172, 275, 284, 324, 331, 709, 713, 714, 715, 796, 1008, 1041, 1042, 1047, 1049, 1053, 1054, 1058], "roc_curv": [2, 50, 245, 272, 284, 709, 713, 734, 789, 795, 1008, 1039, 1040, 1041, 1044, 1045, 1047, 1052, 1055, 1057], "roc_displai": 245, "rocchio": [356, 858], "rocco": [1052, 1053, 1054], "roccurvedisplai": [2, 142, 254, 257, 269, 272, 284, 285, 324, 389, 795, 796, 1014, 1036, 1049, 1055, 1056, 1057], "rock": 114, "rocklin": [381, 387], "roddi": [1048, 1049], "rodent": [50, 308, 377, 505], "roderick": 998, "rodion": 1052, "rodrigo": [1047, 1057], "rodrigu": [1046, 1047, 1052], "rodr\u00edguez": 321, "roeder": 1049, "roehr": [1055, 1056], "roei": 1051, "roeschk": 1048, "roger": [730, 1046, 1047, 1051], "rogerstanimoto": [456, 463, 706, 785, 786, 787, 1011], "rogerstanimotodist": 706, "rohan": [1044, 1045, 1047, 1048, 1052], "rohit": [1042, 1043, 1047, 1048], "roi": [1039, 1053], "roi_siz": 89, "roic": 1054, "rok": 1049, "rokem": [1039, 1045], "rokhlin": [542, 548, 955], "roland": [1041, 1042], "rolando": [1040, 1041], "role": [0, 284, 369, 381, 419], "roll": [2, 102, 187, 236, 237, 242, 385, 414, 537, 699, 700, 949, 1029, 1032, 1049, 1054], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1046, 1051], "roman": [0, 403, 634, 925, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "roman4oo": 1054, "romaniuk": 1043, "romero": 1057, "romijnd": 1051, "romuald": 1048, "ron": [0, 404, 1039], "ronald": [377, 1012, 1042, 1052], "ronan": [1039, 1042, 1047], "ronchetti": [656, 1004], "rong": 1023, "ronrubin": [671, 692, 693, 1004], "ronsin": [1047, 1048, 1056], "room": [315, 377, 387, 414, 1031], "roopam": [1047, 1048], "root": [2, 43, 113, 153, 172, 199, 364, 379, 382, 390, 414, 448, 508, 548, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 646, 797, 798, 919, 920, 921, 922, 923, 925, 1008, 1014, 1024, 1041, 1047, 1048, 1049, 1050, 1053, 1054, 1058], "root_": 448, "root_mean_squared_error": [2, 52, 153, 410, 1008, 1056, 1058], "root_mean_squared_log_error": [2, 410, 1008, 1056, 1058], "rope": 275, "rope_interv": 275, "rope_prob": 275, "rori": 1050, "rosa": 1054, "rosal": 418, "rosati": 1057, "rose": 377, "rosenberg": [414, 724, 744, 802], "rosenfeld": 1047, "ross": [541, 614, 615, 1024, 1053, 1054], "rosset": [137, 421, 526, 560], "rossi": 1042, "rosslimlinyang_ijcv": 541, "rostamizadeh": 997, "rostomyan": 1047, "rotat": [47, 75, 122, 125, 128, 130, 149, 160, 187, 193, 240, 286, 287, 294, 345, 351, 417, 419, 424, 426, 511, 539, 548, 557, 621, 704, 891, 923, 1004, 1029, 1050, 1051], "rotation_mod": 286, "rotations_": 557, "roth": [1044, 1047, 1054], "rough": [25, 402, 1014], "roughli": [137, 150, 206, 266, 285, 295, 320, 369, 396, 419, 422, 526, 1005, 1039], "rouli": 1042, "round": [46, 48, 62, 117, 143, 153, 185, 186, 224, 235, 275, 281, 317, 319, 356, 396, 456, 462, 463, 571, 572, 600, 601, 604, 634, 699, 720, 809, 819, 876, 908, 923, 925, 998, 1012, 1024, 1041, 1043, 1045, 1047, 1048, 1050, 1052, 1053, 1055, 1056], "rounded_list": 819, "rouseeuw1984": 480, "rousseeuw": [113, 114, 414, 416, 475, 480, 799, 800, 1014], "rousseuw": [113, 114], "rout": [2, 47, 91, 135, 182, 187, 199, 243, 269, 332, 428, 431, 434, 437, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 964, 965, 966, 967, 991, 1029, 1034, 1053, 1055], "route_param": [251, 964], "routed_param": [251, 967], "routemappingpair": 964, "router": [2, 251, 396, 405, 964, 965, 966, 967], "routerconsumerclassifi": 251, "routerconsumerclassifierifittedrouterconsumerclassifi": 251, "routin": [331, 371, 376, 379, 382, 383, 384, 385, 390, 394, 396, 423, 679, 681, 694, 854, 913, 914, 915, 916, 917, 1005, 1011, 1018, 1019, 1022, 1032, 1039, 1053, 1054, 1055], "routing_info": 964, "routlei": 1045, "rouvinen": 1044, "roux": [665, 1004, 1021], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 95, 109, 120, 121, 143, 146, 156, 159, 185, 217, 218, 219, 245, 248, 254, 255, 269, 317, 364, 369, 377, 384, 391, 395, 396, 411, 414, 417, 422, 429, 448, 449, 453, 455, 456, 457, 459, 462, 463, 465, 470, 474, 494, 496, 497, 499, 500, 501, 502, 507, 508, 509, 511, 512, 517, 518, 520, 533, 541, 549, 555, 558, 597, 598, 627, 635, 639, 650, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 699, 703, 704, 717, 725, 726, 732, 765, 766, 770, 773, 775, 776, 777, 778, 780, 781, 783, 785, 786, 787, 788, 804, 805, 840, 846, 847, 848, 849, 850, 856, 859, 860, 861, 862, 863, 866, 877, 881, 883, 884, 886, 896, 897, 898, 901, 902, 905, 909, 928, 933, 937, 938, 955, 978, 981, 985, 987, 989, 990, 993, 994, 997, 998, 1000, 1002, 1004, 1006, 1008, 1009, 1011, 1018, 1019, 1022, 1023, 1028, 1046, 1047, 1048, 1049, 1054], "row_compl": 57, "row_id_attribut": 376, "row_idx": [59, 217], "row_idx_shuffl": 58, "row_ind": [429, 457, 459], "row_indic": 153, "row_labels_": [57, 58, 59, 411, 457, 459], "row_norm": 263, "rowan": 1054, "rowei": [696, 700, 860, 1005, 1011], "rows_": [57, 411, 429, 457, 459], "royal": [548, 634, 887, 899, 1022], "rp": 248, "rpath": 380, "rr2007": 1000, "rragundez": 1047, "rsalakhu": 651, "rsh": [287, 326], "rskf": 823, "rsme": 1008, "rsnegrin": 1053, "rsplit": [45, 55, 276], "rst": [370, 382, 390, 1039], "rstride": 191, "rt": 142, "rt_model": 142, "rtn": 51, "rtol": [384, 851, 852, 856], "ruben": 1054, "rubi": 1051, "rubia": 1042, "rubial": 1052, "rubin": 998, "rubinstein": [671, 692, 693], "rubric": 1005, "ruchitagard": 1049, "rudi": 1045, "rudresh": 1054, "ruff": [382, 400, 407], "ruifeng": [1045, 1046, 1051], "ruin": 382, "ruiter": 1054, "rule": [2, 13, 27, 43, 64, 143, 195, 269, 361, 364, 365, 369, 379, 382, 383, 384, 394, 396, 397, 409, 412, 413, 414, 418, 419, 421, 423, 543, 556, 557, 558, 559, 560, 568, 569, 576, 577, 601, 609, 641, 652, 665, 666, 673, 674, 675, 680, 682, 683, 684, 685, 713, 714, 718, 807, 810, 811, 813, 821, 829, 830, 833, 834, 835, 836, 838, 860, 911, 924, 997, 1002, 1010, 1011, 1022, 1024, 1028, 1034, 1041, 1044, 1051, 1056], "ruleset": 1024, "rumelhart": 1012, "rumsfeld": [45, 377], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 380, 382, 383, 384, 386, 387, 388, 389, 390, 394, 396, 397, 400, 401, 408, 410, 414, 416, 418, 421, 424, 425, 426, 443, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 470, 473, 474, 477, 478, 538, 539, 540, 541, 542, 544, 546, 548, 549, 550, 552, 553, 555, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 589, 599, 601, 602, 603, 605, 606, 607, 609, 617, 618, 637, 641, 647, 653, 654, 656, 658, 659, 660, 662, 663, 667, 668, 669, 670, 689, 690, 695, 696, 697, 698, 699, 700, 701, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 843, 844, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 868, 869, 870, 873, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 928, 930, 949, 950, 978, 981, 997, 1007, 1009, 1012, 1021, 1023, 1024, 1027, 1028, 1032, 1039, 1042, 1044, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1058], "run_histori": 47, "run_id": 96, "run_tim": [232, 233], "rung": 1018, "runnabl": [54, 386, 387], "runtim": [30, 47, 49, 93, 137, 203, 232, 234, 249, 313, 317, 370, 384, 385, 394, 396, 408, 414, 421, 456, 570, 686, 821, 911, 912, 913, 914, 915, 916, 917, 1022, 1023, 1042, 1046, 1047, 1053, 1054, 1056, 1057, 1058], "runtime_histori": 47, "runtimewarn": 183, "runxfail": 390, "rupesh": 1042, "rush": [43, 52, 382], "rushabh": 1050, "rushil": [1054, 1055], "russ": [635, 998], "russel": [1045, 1046], "russellrao": [456, 463, 706, 785, 786, 787, 1011], "russellraodist": 706, "russian": 422, "ruth": 1049, "rutter": 1052, "ruusmann": 1045, "rv": [0, 811, 819, 821, 997, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "rv_discrete_frozen": 287, "rvd": [475, 480], "rvdriessen": [475, 480], "rw2006": [424, 617, 618], "rwelsch427": 1057, "ryad": 1045, "ryan": [1042, 1045, 1047, 1048], "ryb": 361, "ryder": 51, "ryotaro": 1051, "r\u00e9my": 1045, "r\u00fcdiger": [1047, 1048, 1050], "s1": [124, 172, 182, 204, 206, 379], "s2": [124, 172, 182, 204, 206, 379, 557], "s22": 505, "s3": [57, 124, 172, 204, 206, 379], "s4": [172, 204, 206, 379], "s5": [172, 204, 206, 379, 1016], "s6": [172, 204, 206, 379], "s_": [124, 279, 1004, 1005, 1016, 1018], "s__p": 871, "s_color": 237, "s_hessian": 237, "s_i": [414, 1004, 1018], "s_ica_": 125, "s_isomap": 237, "s_j": 414, "s_ltsa": 237, "s_mod": 237, "s_pca_": 125, "s_point": 237, "s_scale": 237, "s_spectral": 237, "s_standard": 237, "s_t_sne": 237, "sa": [377, 499], "saaba": 1044, "saad": 1057, "sabharw": 1049, "sabri": 1054, "sach": 51, "sachdev": 1054, "sachdeva": 1046, "sachin": [1046, 1047, 1053], "sackei": 1049, "saclai": 0, "sacr": 1027, "sad": [825, 826], "sadak": 1051, "sadhana": 1047, "sadli": 150, "sadra": 1055, "sad\u0142ocha": 1052, "saeed": 1008, "saeger": [1044, 1045, 1046], "safari": 1018, "safe": [2, 72, 190, 206, 269, 357, 382, 384, 414, 415, 439, 471, 515, 516, 574, 575, 600, 604, 781, 785, 835, 836, 838, 870, 905, 973, 979, 1011, 1045, 1046, 1047, 1052, 1053], "safe_copi": 1046, "safe_index": [391, 1049], "safe_mask": [2, 391], "safe_realloc": 1042, "safe_sparse_dot": [2, 391, 1049], "safe_sqr": [2, 391], "safeguard": 408, "safer": [357, 365, 380, 414, 418, 1039], "safest": [217, 235, 365, 376], "safeti": [104, 394, 415, 973, 1028, 1049], "safikh": 1054, "safiuddin": 1054, "sag": [209, 224, 665, 666, 679, 681, 694, 1004, 1022, 1044, 1045, 1046, 1048, 1049], "sag_solv": 1048, "saga": [66, 208, 232, 233, 665, 666, 679, 681, 694, 821, 1004, 1046, 1048], "sagar": 1049, "sagnik": 1047, "saha": 1053, "sahil": 1055, "sahin": 1049, "sahu": 1051, "sai": [203, 244, 352, 356, 357, 382, 412, 414, 415, 419, 421, 422, 452, 453, 507, 511, 517, 684, 997, 1014, 1021, 1032, 1056, 1057], "said": [153, 190, 244, 276, 377, 382, 799, 1006, 1014], "saihttam": 1045, "sailesh": [1046, 1047], "saint": 1045, "saito": [419, 545, 547, 554, 1046], "saiw": 1045, "sake": [43, 64, 150, 153, 186, 190, 217, 320, 349, 356, 358, 390, 394, 677], "saket": [1043, 1044, 1051], "sakinaouisrani": 1053, "salahuddin": 1054, "salakhutdinov": [651, 860, 1011], "salamin": 1043, "sale": [147, 254, 275, 1008, 1032], "saleem": 1049, "salerno": 379, "salim": [1056, 1057], "sallisaw": [415, 472], "salman": [0, 403, 1054, 1055, 1056, 1057, 1058], "salt": [67, 249, 317, 1053], "salvator": [1039, 1053, 1054, 1056, 1057], "salz": 1046, "salzmann": [217, 235], "sam": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "sambhav": 1050, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 88, 90, 92, 93, 99, 104, 105, 106, 121, 123, 125, 128, 130, 132, 138, 140, 144, 147, 150, 151, 153, 156, 172, 174, 190, 191, 193, 203, 204, 206, 211, 217, 218, 219, 225, 235, 251, 255, 265, 269, 270, 271, 272, 273, 275, 276, 278, 280, 281, 283, 288, 289, 295, 298, 300, 312, 315, 316, 318, 320, 321, 324, 326, 337, 345, 356, 357, 358, 364, 365, 369, 370, 371, 376, 377, 379, 381, 382, 384, 386, 388, 390, 391, 394, 395, 396, 397, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 435, 439, 444, 445, 452, 456, 462, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 500, 502, 503, 505, 511, 515, 516, 538, 539, 542, 543, 544, 545, 546, 547, 550, 554, 556, 558, 559, 560, 561, 564, 566, 567, 568, 569, 571, 572, 574, 575, 596, 597, 609, 610, 613, 617, 618, 620, 629, 634, 635, 636, 639, 640, 653, 656, 659, 660, 662, 665, 666, 670, 673, 674, 675, 679, 680, 681, 682, 683, 684, 685, 691, 694, 706, 711, 712, 719, 720, 722, 724, 733, 738, 739, 743, 762, 763, 764, 785, 786, 787, 793, 795, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 815, 816, 821, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 853, 854, 855, 859, 861, 862, 863, 874, 875, 876, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 893, 900, 911, 912, 919, 921, 932, 939, 943, 955, 973, 978, 981, 982, 992, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1028, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "same_kind": 1056, "samesh": [1049, 1050], "samm": [137, 421, 560, 1055, 1056], "samoocha": 1047, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 81, 83, 84, 88, 91, 92, 93, 94, 95, 100, 113, 114, 115, 118, 120, 121, 123, 127, 128, 131, 132, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 153, 154, 159, 160, 161, 169, 171, 172, 174, 178, 179, 180, 181, 183, 185, 187, 190, 191, 195, 196, 202, 203, 204, 206, 217, 219, 221, 224, 225, 227, 228, 229, 231, 233, 234, 235, 237, 244, 248, 249, 251, 252, 254, 260, 261, 263, 264, 265, 266, 267, 269, 270, 274, 275, 277, 278, 279, 281, 283, 287, 289, 290, 294, 295, 299, 300, 301, 302, 304, 305, 306, 308, 312, 313, 315, 317, 318, 319, 320, 322, 324, 326, 327, 329, 331, 332, 334, 336, 337, 338, 339, 340, 341, 343, 345, 347, 349, 350, 352, 353, 356, 357, 361, 364, 369, 375, 377, 378, 381, 382, 384, 385, 394, 395, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 431, 432, 433, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 462, 463, 464, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 618, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 694, 695, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 767, 768, 770, 771, 775, 776, 777, 778, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 933, 937, 938, 942, 943, 955, 959, 976, 978, 981, 982, 985, 988, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1031, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "sample_i": [183, 424, 618, 1053], "sample_id": [364, 377, 504], "sample_interv": 645, "sample_interval_": 1055, "sample_posterior": [186, 634, 998], "sample_s": [93, 249, 357, 800], "sample_score_mean": 279, "sample_score_std": 279, "sample_silhouette_valu": 95, "sample_step": 645, "sample_weight": [61, 199, 217, 230, 235, 251, 325, 330, 331, 354, 382, 396, 405, 414, 421, 425, 431, 437, 443, 449, 450, 453, 455, 465, 466, 471, 475, 488, 489, 490, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 617, 618, 639, 640, 641, 642, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 704, 705, 707, 709, 710, 714, 715, 716, 719, 720, 723, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 741, 742, 745, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 789, 790, 791, 792, 794, 795, 796, 797, 798, 801, 803, 806, 807, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 876, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 967, 995, 1008, 1022, 1023, 1024, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "sample_weight1": 251, "sample_weight2": 251, "sample_weight_const": 354, "sample_weight_last_ten": 354, "sample_weight_vect": 943, "sample_without_replac": [2, 391, 1045], "samples_weight": 230, "samplewis": [761, 1008], "samson": 1046, "samuel": [703, 1032, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "samuela": 1042, "samu\u00ebl": 1046, "san": [172, 379, 422, 1020], "sanchez": [1047, 1048], "sandbox": 408, "sandeep": 1051, "sander": [414, 425, 450, 452, 456, 463, 857, 1014, 1048, 1049], "sandi": 1052, "sandip": [1056, 1057], "sandra": [1048, 1054], "sandro": [1047, 1054], "sandrocasagrand": [1047, 1048], "sandrovskii": 1046, "sangam": 1054, "sangamswadik": 1054, "sangeeth": 1048, "saniti": [385, 875, 1008, 1039, 1040], "sanjabi": 1049, "sanjai": 1053, "sanjai_3": [1054, 1055], "sanjoi": [905, 1020], "sano": 1053, "sanofi": 51, "santa": [182, 1054], "santana": [1050, 1053], "santhanam": 1047, "santhosh": 1050, "santhoshbala18": 1050, "santi": [1044, 1046, 1047], "santiago": 1050, "sap": 51, "sapiro": [419, 538, 544], "saqib": 1047, "sara": 1052, "sarah": [1046, 1048, 1051], "sarahremu": [1054, 1057], "sarajpoor": 1054, "sarat": 1050, "sarawagi": 790, "sarra": 1049, "sartaj": 1045, "sasank": 1045, "sashka": [1054, 1055], "sass": [382, 400, 407], "sassenhagen": [1051, 1056], "sat": [43, 153, 191, 422], "satellit": 1011, "satisfi": [414, 657, 661, 706, 724, 743, 744, 851, 852], "satish": 1047, "sato": 1042, "satrajit": [0, 404, 1039, 1040], "satur": [72, 190, 315], "sauerbrei": 1018, "sauerkraut": 422, "saul": [696, 700, 1005, 1046, 1047, 1049], "saurabh": [1043, 1044, 1045, 1046, 1047, 1051], "sauvignon": 321, "saval": 1048, "savard": 1039, "save": [88, 104, 106, 254, 313, 381, 382, 386, 388, 389, 390, 396, 408, 418, 426, 474, 498, 541, 542, 634, 851, 852, 909, 1004, 1008, 1018, 1024, 1032, 1039, 1042, 1046, 1049, 1057], "savings_statu": 269, "savkomax": 1054, "saw": [124, 218, 221], "sawtooth": 124, "say_hello": 968, "sc": [376, 414], "scaja": 1056, "scala": 1028, "scalabl": [77, 79, 97, 187, 194, 249, 267, 329, 357, 382, 414, 421, 422, 454, 497, 509, 596, 647, 813, 824, 835, 837, 849, 872, 881, 883, 911, 913, 916, 917, 1000, 1003, 1005, 1008, 1021, 1023, 1029, 1032, 1039, 1042, 1043, 1049, 1050, 1053, 1054], "scalar": [2, 123, 327, 332, 388, 396, 410, 415, 424, 426, 470, 473, 531, 540, 622, 623, 624, 629, 630, 634, 635, 637, 745, 749, 933, 941, 1000, 1012, 1014, 1018, 1022, 1027, 1049, 1050, 1053, 1055, 1058], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 81, 82, 91, 93, 96, 105, 106, 112, 115, 118, 125, 128, 148, 155, 172, 174, 175, 176, 179, 180, 181, 187, 191, 195, 198, 199, 204, 208, 217, 219, 221, 231, 232, 233, 235, 236, 239, 244, 250, 254, 265, 272, 275, 276, 277, 278, 282, 298, 300, 311, 312, 313, 314, 315, 325, 328, 330, 331, 339, 340, 342, 345, 349, 365, 368, 369, 374, 375, 376, 379, 382, 387, 391, 394, 395, 396, 414, 415, 419, 421, 422, 423, 424, 452, 453, 456, 457, 463, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 508, 517, 521, 522, 531, 541, 545, 547, 548, 554, 556, 557, 568, 569, 589, 597, 598, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 638, 639, 648, 651, 652, 653, 654, 656, 659, 665, 666, 667, 668, 669, 679, 681, 683, 684, 685, 688, 694, 695, 696, 697, 699, 701, 706, 710, 723, 748, 754, 764, 766, 776, 782, 784, 821, 824, 837, 838, 839, 851, 852, 853, 868, 869, 872, 875, 880, 881, 883, 886, 888, 889, 891, 896, 897, 898, 900, 901, 903, 904, 911, 912, 913, 914, 915, 916, 917, 982, 983, 984, 985, 988, 997, 1000, 1001, 1004, 1008, 1009, 1010, 1011, 1012, 1016, 1022, 1023, 1028, 1029, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "scale_": [656, 880, 881, 889, 891, 901, 1018, 1044], "scaled_clf": 320, "scaled_pca": 320, "scaled_x_train": 320, "scaler": [45, 105, 107, 154, 170, 187, 233, 234, 249, 254, 256, 258, 289, 298, 303, 314, 319, 320, 329, 345, 348, 365, 387, 415, 418, 496, 665, 666, 679, 681, 694, 871, 880, 881, 883, 887, 888, 889, 891, 896, 897, 898, 899, 900, 901, 902, 1012, 1018, 1022, 1029, 1039, 1044, 1047, 1052], "scaler2": 258, "scalewai": 390, "scaling_": 557, "scalings_": [556, 557], "scanpi": 1056, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 80, 84, 87, 91, 92, 93, 94, 95, 97, 102, 113, 118, 121, 125, 127, 128, 129, 131, 138, 139, 143, 146, 154, 156, 157, 159, 165, 167, 174, 175, 176, 178, 180, 181, 182, 183, 189, 190, 195, 198, 201, 207, 209, 213, 214, 215, 218, 219, 220, 226, 229, 230, 231, 234, 237, 238, 239, 240, 241, 242, 244, 249, 250, 252, 260, 261, 262, 263, 264, 265, 266, 270, 276, 278, 290, 295, 298, 301, 302, 303, 304, 305, 306, 307, 310, 315, 317, 318, 320, 328, 336, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 356, 361, 362, 363, 378, 416, 638, 708, 1002, 1004], "scatter_": 708, "scatter_fig": 143, "scatter_kwarg": [43, 52, 109, 158, 190, 708], "scatter_trac": 143, "scatterplot": [117, 197, 275], "scatterpoint": [127, 131, 240, 262, 336], "scenario": [92, 104, 153, 174, 195, 221, 278, 365, 389, 400, 413, 418, 421, 544, 550, 552, 553, 1002, 1008, 1018, 1049], "scene": [379, 390, 1011, 1013, 1052], "schapir": [50, 292, 308, 377, 421, 505, 560, 561], "schedul": [153, 311, 370, 386, 683, 684, 685, 868, 869, 1022, 1032, 1046], "scheidegg": 1039, "scheme": [284, 300, 321, 322, 377, 386, 396, 414, 418, 420, 422, 573, 597, 665, 666, 712, 820, 854, 878, 879, 882, 884, 888, 892, 895, 900, 911, 916, 997, 1004, 1018, 1022, 1039, 1047, 1050, 1051, 1056, 1057], "scherer": 1045, "scheubrein": 1051, "schloss": 1008, "schl\u00fcter": [1039, 1047], "schmerler": 1054, "schmid": [765, 766, 1006], "schmidt": [665, 1004, 1042], "schmitt": [1049, 1050], "schmitz": 1056, "schneider": [356, 1052, 1057], "schoelkopf": 907, "schoentgen": [1047, 1048], "schofield": 1039, "schole": 1051, "scholkopf1997": 419, "scholkopf1998": 1018, "scholz": 1057, "school": [104, 179, 190, 379, 414, 795, 1008], "schreiber": [0, 404, 1044, 1045, 1046], "schroeder": [45, 377], "schubert": [414, 425, 450, 456, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1057], "schucker": 1045, "schuder": [1047, 1048, 1049], "schuetz": [846, 850], "schuldt": 1043, "schult": 55, "schulz": 1039, "schumach": [1042, 1043, 1044], "schut": 1039, "schwardt": 1039, "schwartz": [1039, 1041, 1053], "schwetlick": [1050, 1051], "sch\u00f6lkopf": [44, 419, 542, 877, 1014, 1018, 1023], "sch\u00f6nberger": [1041, 1042], "sch\u00fctze": [419, 597, 1006, 1008, 1010], "sci": [57, 104, 356, 357, 358, 377, 394, 494, 696, 700, 882, 1005, 1018], "scibol": 1050, "scienc": [0, 73, 113, 172, 182, 190, 292, 376, 379, 394, 414, 446, 460, 545, 547, 554, 695, 696, 700, 858, 998, 1000, 1004, 1005, 1008, 1011, 1020, 1028, 1032, 1047], "scientif": [0, 68, 249, 376, 380, 394, 400, 414, 458, 468, 508, 1032, 1034], "scientist": [998, 1032], "scikera": 1027, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 371, 374, 376, 377, 378, 379, 381, 382, 385, 388, 389, 390, 391, 395, 396, 401, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 428, 429, 431, 432, 433, 434, 436, 437, 438, 444, 449, 452, 453, 456, 463, 470, 471, 473, 474, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 519, 522, 528, 531, 545, 548, 568, 569, 571, 572, 574, 583, 588, 589, 590, 596, 606, 609, 618, 633, 635, 637, 639, 641, 645, 647, 653, 655, 659, 665, 676, 687, 695, 704, 707, 708, 709, 724, 725, 739, 749, 755, 785, 786, 787, 795, 802, 806, 807, 808, 809, 810, 811, 812, 813, 821, 824, 825, 826, 827, 828, 829, 830, 833, 834, 837, 839, 840, 853, 855, 871, 872, 874, 876, 878, 881, 883, 884, 885, 886, 890, 891, 892, 895, 908, 909, 911, 916, 919, 920, 927, 929, 949, 950, 960, 973, 974, 997, 998, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1021, 1022, 1023, 1024, 1026, 1029, 1031, 1034, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "scikit_learn": 1027, "scikit_learn_data": [52, 377, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506], "scipi": [0, 2, 45, 53, 55, 57, 76, 81, 82, 88, 89, 111, 112, 115, 124, 126, 130, 149, 174, 190, 193, 203, 207, 261, 265, 266, 272, 275, 283, 287, 295, 300, 305, 313, 325, 326, 331, 332, 334, 335, 369, 376, 377, 380, 382, 384, 388, 390, 391, 394, 395, 396, 400, 407, 408, 410, 411, 414, 419, 422, 456, 457, 458, 459, 463, 468, 469, 503, 510, 515, 539, 541, 542, 548, 551, 588, 589, 592, 593, 595, 596, 617, 618, 655, 656, 660, 664, 665, 666, 670, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 687, 691, 694, 698, 699, 702, 726, 767, 770, 785, 786, 787, 788, 799, 800, 811, 819, 821, 837, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 868, 874, 883, 884, 889, 890, 891, 894, 898, 901, 902, 911, 913, 914, 916, 917, 952, 956, 957, 962, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 997, 998, 1004, 1006, 1009, 1011, 1012, 1018, 1022, 1023, 1026, 1028, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1058], "sckit": 1055, "scls19fr": 1044, "scognamiglio": 421, "scope": [45, 57, 269, 369, 371, 382, 394, 422, 1027, 1028], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 93, 95, 104, 105, 106, 107, 108, 109, 111, 115, 118, 130, 135, 137, 139, 146, 147, 148, 149, 150, 153, 154, 157, 158, 164, 167, 168, 169, 172, 185, 187, 189, 190, 191, 192, 193, 195, 202, 208, 209, 212, 217, 219, 223, 225, 233, 235, 244, 249, 250, 251, 254, 258, 264, 267, 269, 273, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 292, 294, 302, 303, 304, 310, 311, 312, 313, 317, 319, 320, 321, 322, 324, 325, 326, 327, 331, 332, 334, 335, 337, 338, 345, 352, 356, 357, 360, 365, 377, 382, 384, 387, 395, 396, 408, 409, 410, 411, 412, 413, 415, 417, 419, 421, 423, 431, 433, 437, 443, 449, 453, 455, 458, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 509, 511, 539, 543, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 599, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 613, 616, 617, 618, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 705, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 743, 744, 745, 746, 747, 749, 762, 763, 764, 789, 790, 791, 792, 793, 794, 795, 796, 801, 802, 803, 804, 805, 806, 807, 810, 811, 813, 821, 826, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 860, 861, 862, 867, 868, 869, 871, 891, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 927, 929, 957, 997, 1000, 1004, 1006, 1011, 1014, 1016, 1018, 1022, 1028, 1029, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 280, "score_estim": [217, 235], "score_full_data": 185, "score_func": [72, 105, 106, 423, 599, 602, 603, 605, 606, 607, 749, 1039, 1041, 1056], "score_iri": 281, "score_iterative_imput": 185, "score_label": [235, 281], "score_mean": 348, "score_nam": [62, 72, 250, 277, 330, 357, 813, 830], "score_param": [600, 601, 666, 1056], "score_rand": 281, "score_sampl": [264, 300, 301, 302, 308, 396, 420, 475, 539, 548, 570, 684, 804, 805, 807, 810, 811, 821, 856, 857, 867, 871, 915, 1014, 1042, 1047, 1049, 1051], "score_simple_imput": 185, "score_std": 348, "score_tim": [277, 418, 834, 835], "score_times_nb": 277, "score_times_svm": 277, "score_typ": [250, 277, 288, 330, 813, 830, 1055], "score_valu": 357, "scorer": [2, 153, 158, 235, 251, 269, 279, 331, 384, 396, 405, 413, 418, 421, 423, 568, 569, 601, 609, 641, 666, 680, 682, 718, 739, 740, 749, 807, 810, 811, 813, 821, 829, 830, 833, 834, 835, 836, 838, 965, 997, 1004, 1008, 1016, 1028, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "scorer1_nam": 418, "scorer2_nam": 418, "scorer_": [807, 810, 811, 821], "scorer_nam": [279, 807, 821], "scores_": [197, 198, 599, 602, 603, 605, 606, 607, 651, 652, 666, 1039, 1049], "scores_df": 52, "scores_glm_pure_premium": 235, "scores_matrix": 286, "scores_max": 55, "scores_product_model": 235, "scores_std": 163, "scoring_cal": 718, "scoring_inner_cv": 331, "scoring_on_bootstrap": 278, "scoring_weight": 405, "scott": [420, 856, 1039, 1040, 1045, 1047, 1048, 1049, 1054, 1055], "scottlog": 1057, "scratch": [383, 448, 1008, 1041], "screen": [48, 1052], "screenporch": 147, "screenshot": 380, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 382, 383, 384, 385, 386, 388, 394, 396, 400, 408, 422, 1028, 1031], "scroll": 402, "scrollbar": 387, "scrutin": 284, "scsi": 57, "scullei": 414, "sdenton4": 1042, "sdg_param": 338, "se": [172, 239, 379, 400], "seabold": [1042, 1044, 1045], "seaborn": [72, 138, 153, 189, 190, 197, 202, 265, 275, 382, 400, 407, 1027], "seagreen": 211, "seal": 1045, "seamu": 1041, "sean": [1051, 1052, 1054], "seanpwilliam": 1046, "sear": 1045, "search": [2, 45, 52, 64, 81, 89, 105, 106, 107, 108, 150, 167, 169, 171, 172, 174, 187, 235, 250, 251, 265, 267, 269, 274, 276, 279, 280, 282, 287, 294, 295, 297, 299, 313, 317, 329, 345, 351, 356, 365, 379, 380, 382, 384, 394, 396, 409, 414, 415, 418, 421, 422, 423, 425, 449, 454, 456, 458, 463, 464, 467, 470, 477, 478, 484, 509, 522, 529, 564, 565, 566, 567, 571, 572, 573, 586, 606, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 635, 660, 683, 695, 696, 699, 700, 720, 735, 792, 795, 807, 810, 811, 818, 819, 821, 823, 837, 838, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 871, 916, 919, 920, 921, 922, 961, 995, 1001, 1003, 1005, 1008, 1011, 1012, 1022, 1024, 1028, 1029, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1053, 1054, 1056, 1058], "search_05p": 150, "search_95p": 150, "search_cv": 105, "searchcv": [395, 1054], "searchforpass": 1055, "searchgrid": 1028, "searchsort": 50, "season": [43, 52, 179, 191, 218, 381], "seasonal_kernel": 179, "seasoncountcatu32": 52, "sebastian": [1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "sebastien": 1047, "sebastin": [1046, 1047], "sebasti\u00e1n": 1045, "seberg": 1040, "sec": [49, 225, 239, 242, 295], "sec65": 1054, "secant": 649, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 377, 384, 388, 396, 411, 413, 414, 418, 419, 421, 422, 424, 470, 473, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 511, 517, 560, 590, 595, 596, 597, 598, 628, 631, 638, 639, 706, 719, 723, 765, 766, 770, 771, 773, 774, 781, 782, 783, 784, 785, 788, 807, 810, 811, 821, 835, 841, 842, 845, 848, 859, 861, 862, 863, 868, 869, 997, 998, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1018, 1019, 1024, 1054], "secondari": [642, 1043], "secondli": [380, 394, 414, 421, 664, 1004], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 123, 128, 140, 148, 153, 158, 163, 164, 165, 179, 183, 189, 190, 191, 193, 197, 202, 204, 206, 219, 241, 245, 251, 254, 256, 269, 273, 275, 278, 284, 320, 321, 322, 326, 356, 357, 358, 365, 375, 377, 380, 382, 383, 384, 386, 387, 388, 389, 390, 397, 405, 412, 413, 415, 417, 418, 419, 421, 422, 423, 424, 445, 449, 465, 541, 621, 626, 629, 644, 652, 795, 805, 913, 916, 997, 1002, 1004, 1008, 1009, 1011, 1012, 1014, 1015, 1022, 1023, 1024, 1025, 1039, 1041, 1042, 1043, 1046], "sector": 190, "sector_construct": 190, "sector_manufactur": 190, "sector_oth": 190, "secur": [386, 396, 1027, 1028, 1032, 1034], "sed": [386, 1039], "sedamaki": 1053, "sedykh": 1054, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 84, 85, 88, 90, 92, 93, 97, 99, 100, 102, 103, 113, 118, 120, 123, 128, 129, 133, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 158, 163, 168, 169, 170, 172, 174, 179, 180, 181, 185, 187, 190, 191, 193, 195, 197, 198, 199, 202, 208, 218, 219, 220, 221, 223, 234, 235, 237, 239, 246, 248, 251, 254, 255, 256, 258, 261, 262, 263, 268, 269, 270, 272, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 289, 290, 292, 295, 301, 302, 304, 308, 315, 321, 322, 324, 325, 326, 327, 328, 329, 330, 336, 345, 349, 352, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 374, 375, 376, 377, 379, 380, 381, 382, 384, 386, 388, 389, 390, 394, 395, 396, 402, 408, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 497, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 616, 617, 618, 621, 626, 629, 630, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 713, 715, 718, 720, 750, 770, 781, 785, 786, 787, 788, 795, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 954, 955, 976, 978, 981, 991, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 80, 87, 89, 92, 94, 95, 99, 100, 105, 111, 112, 113, 121, 124, 129, 140, 146, 165, 167, 192, 207, 212, 215, 220, 223, 226, 230, 234, 240, 261, 263, 264, 265, 266, 278, 281, 290, 300, 301, 302, 349, 350, 354, 357, 365, 370, 384, 391, 394, 396, 414, 418, 419, 449, 453, 454, 456, 458, 463, 465, 466, 467, 468, 477, 478, 479, 543, 551, 560, 561, 562, 563, 566, 567, 634, 653, 654, 659, 660, 667, 668, 669, 670, 684, 696, 698, 700, 702, 804, 805, 811, 842, 845, 860, 914, 940, 954, 955, 972, 976, 997, 998, 1003, 1005, 1043, 1044, 1048, 1049, 1055], "seeger": [646, 1000], "seek": [237, 239, 241, 381, 382, 394, 397, 515, 516, 1005], "seel": 1053, "seem": [43, 48, 52, 81, 90, 150, 153, 180, 191, 217, 241, 244, 276, 292, 311, 319, 352, 356, 357, 381, 382, 387, 413, 418, 508, 1004, 1008], "seemingli": [235, 365, 394], "seen": [55, 62, 75, 90, 101, 115, 126, 132, 144, 150, 153, 190, 191, 213, 241, 247, 251, 311, 315, 345, 356, 377, 384, 386, 395, 396, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 430, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 528, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 630, 634, 635, 636, 637, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 982, 988, 997, 1003, 1008, 1011, 1012, 1018, 1024, 1032, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "segfault": [370, 383, 1039, 1047, 1052], "segment": [51, 53, 55, 59, 71, 82, 83, 187, 240, 247, 377, 390, 414, 422, 458, 468, 515, 516, 698, 867, 1008, 1029, 1032, 1047, 1049, 1051], "seguin": 1044, "sei": 422, "seismic_r": [197, 202], "sejourn": 1048, "sel": [405, 423], "seladu": 1055, "seldom": 911, "sele": [1053, 1054], "selecci\u00f3n": 321, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 90, 92, 97, 103, 105, 108, 115, 121, 122, 123, 132, 133, 137, 139, 145, 147, 150, 153, 158, 167, 169, 179, 181, 190, 191, 193, 195, 196, 198, 200, 202, 203, 205, 216, 221, 225, 232, 235, 238, 244, 248, 250, 254, 259, 260, 261, 262, 269, 273, 274, 275, 276, 280, 288, 289, 299, 315, 320, 321, 326, 330, 332, 334, 335, 338, 340, 345, 352, 356, 357, 358, 365, 369, 377, 379, 380, 382, 384, 386, 390, 395, 396, 411, 414, 415, 416, 419, 421, 422, 424, 449, 451, 452, 453, 455, 457, 459, 464, 465, 466, 470, 472, 473, 478, 479, 482, 494, 495, 499, 500, 503, 504, 507, 508, 509, 511, 519, 522, 539, 541, 542, 547, 548, 551, 556, 558, 565, 566, 567, 570, 572, 588, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 634, 638, 639, 652, 653, 654, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 678, 680, 683, 685, 689, 690, 698, 699, 704, 719, 723, 725, 761, 795, 799, 800, 804, 805, 807, 810, 811, 812, 813, 821, 833, 834, 835, 837, 839, 853, 854, 855, 857, 859, 861, 862, 863, 871, 872, 876, 881, 887, 891, 908, 911, 912, 916, 919, 920, 921, 922, 933, 976, 977, 1002, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "select__k": 997, "select_dtyp": [109, 147, 329, 472], "selected_featur": 193, "selected_features_nam": 193, "selectfdr": [2, 423, 599, 603, 605, 606, 607, 613, 1043, 1045, 1046, 1055], "selectfpr": [2, 382, 423, 599, 602, 605, 606, 607, 613, 1055], "selectfrommodel": [2, 172, 396, 405, 600, 609, 610, 1030, 1034, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1056], "selectfw": [2, 423, 599, 602, 603, 606, 607, 613, 1055], "selectkbest": [2, 106, 108, 168, 169, 328, 365, 382, 405, 415, 423, 588, 599, 602, 603, 605, 607, 613, 997, 1040, 1045, 1055, 1056], "selectkbestselectkbest": [169, 328], "selector": [2, 52, 105, 168, 169, 254, 352, 390, 422, 423, 472, 588, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 1041, 1049, 1051, 1055], "selectormixin": [2, 1050], "selectpercentil": [2, 89, 105, 258, 348, 423, 599, 602, 603, 605, 606, 610, 613, 1040, 1045, 1055, 1056], "selectpercentileselectpercentil": [105, 258], "self": [2, 47, 57, 62, 64, 91, 100, 135, 182, 187, 251, 289, 295, 333, 339, 345, 356, 376, 382, 383, 384, 387, 388, 389, 390, 414, 422, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 507, 515, 516, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 710, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 821, 825, 826, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 960, 964, 965, 967, 968, 973, 981, 996, 1011, 1028, 1029, 1030, 1032, 1034, 1041, 1046, 1053], "self_request": 251, "self_training_clf": 337, "self_training_model": [326, 908], "selftrain": 338, "selftrainingclassifi": [2, 326, 337, 338, 339, 405, 1021, 1051, 1056, 1058], "selftrainingclassifierifittedselftrainingclassifi": 326, "seljak": 1054, "sell": 109, "selvan": 1051, "semant": [54, 356, 357, 396, 551, 1033, 1034, 1041], "semi": [2, 38, 57, 67, 165, 176, 249, 252, 317, 326, 342, 345, 349, 358, 377, 396, 494, 511, 542, 595, 597, 683, 736, 837, 871, 875, 906, 907, 908, 916, 1006, 1011, 1014, 1029, 1030, 1034, 1039, 1051, 1054], "semi_supervis": [2, 187, 326, 328, 333, 334, 335, 336, 337, 338, 339, 405, 906, 907, 908, 1009, 1021, 1029, 1040, 1045, 1046, 1053, 1054], "semiconductor": 1032, "semidefinit": [183, 1018, 1023], "semilogi": [205, 248], "semilogx": [163, 205, 206], "semin": 421, "seminar": 1008, "semisupervis": [334, 396], "sen": [2, 187, 196, 220, 223, 315, 656, 664, 678, 685, 686, 1029], "send": [382, 386, 397, 414, 426, 540], "sender": [356, 377], "sendyk": 1048, "seng": 1051, "senger": [0, 1055, 1056, 1057, 1058], "senior": [1018, 1032], "sens": [42, 43, 52, 55, 62, 90, 101, 180, 187, 190, 195, 248, 315, 321, 335, 345, 356, 365, 369, 382, 383, 396, 414, 416, 418, 423, 468, 475, 476, 477, 478, 479, 480, 481, 482, 659, 662, 663, 679, 808, 818, 908, 1002, 1004, 1011, 1012, 1014, 1018, 1021, 1029], "sensibl": [87, 185, 288, 292, 357, 384, 1004, 1018], "sensit": [43, 79, 90, 113, 114, 140, 150, 187, 191, 219, 220, 221, 244, 245, 254, 267, 279, 282, 289, 315, 332, 345, 370, 371, 397, 413, 416, 421, 458, 468, 503, 558, 568, 665, 699, 707, 709, 719, 720, 725, 749, 791, 794, 795, 806, 807, 829, 837, 872, 891, 909, 1003, 1004, 1005, 1007, 1008, 1012, 1014, 1022, 1023, 1029, 1043, 1057], "sensor": 202, "sent": [153, 414, 840, 1024], "sentenc": [104, 356, 358, 377, 397, 422], "seoeun": 1055, "sep": [121, 284], "sepal": [80, 120, 131, 133, 146, 176, 201, 258, 298, 326, 329, 342, 379, 1018], "sepal_col": 329, "separ": [52, 53, 61, 62, 66, 67, 75, 90, 95, 97, 101, 107, 113, 122, 123, 125, 128, 137, 139, 142, 145, 156, 172, 177, 186, 187, 191, 192, 195, 196, 216, 218, 238, 252, 262, 275, 278, 284, 285, 315, 317, 320, 326, 337, 340, 341, 343, 344, 345, 349, 350, 356, 365, 369, 378, 379, 384, 387, 390, 394, 396, 408, 412, 414, 415, 416, 419, 421, 422, 424, 470, 519, 526, 540, 545, 547, 548, 554, 556, 588, 595, 596, 598, 617, 638, 645, 653, 654, 680, 683, 684, 697, 701, 732, 739, 752, 753, 755, 760, 799, 826, 843, 844, 870, 871, 913, 915, 916, 921, 922, 997, 998, 1000, 1002, 1004, 1005, 1007, 1014, 1015, 1018, 1022, 1023, 1029, 1039, 1042, 1044, 1045, 1049, 1051, 1052, 1055, 1056], "seper": 560, "septemb": [741, 1008, 1039, 1042, 1045, 1047, 1052, 1055, 1057], "seq": 640, "seq_dataset": [1039, 1049], "seqlearn": 394, "sequenc": [2, 51, 137, 146, 204, 240, 384, 396, 415, 418, 419, 421, 422, 510, 519, 560, 561, 568, 569, 576, 577, 588, 589, 595, 596, 598, 653, 807, 810, 818, 837, 871, 895, 958, 959, 970, 978, 981, 1039, 1042, 1044, 1045], "sequencekernel": 182, "sequenti": [2, 52, 146, 166, 169, 187, 211, 276, 326, 380, 419, 421, 422, 507, 508, 541, 600, 604, 609, 610, 612, 613, 653, 654, 659, 660, 665, 667, 668, 669, 670, 680, 795, 871, 872, 891, 998, 1016, 1022, 1029, 1030, 1034, 1039, 1048, 1051], "sequentialfeatureselector": [2, 172, 405, 423, 600, 604, 610, 1051, 1052, 1053, 1054, 1055, 1058], "sergei": [414, 1041, 1045, 1046, 1047, 1048, 1049], "sergeyf": 1041, "sergio": [1039, 1041, 1042, 1051, 1054], "sergiodsr": 1050, "sergul": [1046, 1047, 1050], "seri": [2, 42, 43, 51, 58, 115, 144, 150, 153, 187, 189, 192, 193, 200, 217, 219, 221, 237, 258, 280, 289, 322, 328, 334, 374, 377, 387, 396, 414, 495, 496, 497, 498, 499, 503, 507, 508, 509, 511, 512, 517, 548, 569, 697, 701, 708, 749, 752, 753, 755, 797, 828, 833, 834, 837, 933, 999, 1004, 1005, 1009, 1011, 1022, 1027, 1029, 1042, 1045, 1046, 1047, 1051, 1054, 1056, 1057], "serial": [396, 408, 428, 963, 1027, 1028, 1039, 1047, 1051, 1056], "serializetostr": 408, "serious": 1010, "serum": [172, 379], "serv": [104, 127, 137, 180, 269, 278, 349, 415, 558, 1000, 1034, 1053], "server": [0, 172, 369, 379, 380, 382, 503, 1031, 1047], "servic": [0, 43, 245, 254, 382, 386, 408, 1032, 1047], "sess": 408, "session": [384, 388, 394, 400, 1026, 1032], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 92, 93, 95, 97, 99, 100, 101, 104, 105, 107, 113, 114, 115, 118, 120, 122, 123, 127, 128, 131, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 160, 163, 168, 169, 172, 174, 180, 181, 182, 187, 189, 190, 191, 192, 193, 197, 202, 204, 205, 206, 208, 210, 212, 213, 214, 216, 217, 218, 219, 222, 225, 230, 231, 235, 237, 238, 239, 244, 245, 246, 247, 249, 250, 251, 254, 258, 260, 262, 264, 265, 268, 270, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 290, 292, 294, 297, 301, 302, 303, 304, 305, 308, 311, 312, 313, 315, 317, 319, 320, 321, 322, 324, 326, 327, 331, 334, 335, 338, 339, 342, 344, 347, 349, 352, 356, 357, 358, 362, 363, 364, 365, 369, 370, 371, 374, 375, 377, 379, 380, 382, 384, 386, 387, 389, 390, 395, 396, 397, 400, 405, 408, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 494, 495, 500, 502, 503, 504, 506, 509, 510, 511, 515, 516, 517, 522, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 586, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 704, 705, 706, 707, 708, 709, 710, 718, 720, 721, 723, 726, 728, 730, 733, 734, 735, 736, 737, 738, 741, 745, 747, 752, 753, 755, 757, 758, 760, 763, 786, 787, 789, 790, 791, 792, 794, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 937, 938, 944, 949, 950, 955, 959, 963, 964, 976, 977, 978, 981, 982, 988, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "set1": [275, 304, 305], "set_": [251, 405, 1057], "set_alpha": [70, 260, 261, 262, 265, 266], "set_arrai": [51, 240, 247], "set_aspect": [43, 125, 177, 228, 262, 353], "set_autoscaley_on": 77, "set_axis_bgcolor": 115, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 299, "set_clip_box": [70, 260, 261, 262, 265, 266], "set_color": [46, 228], "set_config": [2, 251, 256, 258, 269, 322, 325, 331, 369, 370, 405, 415, 443, 449, 450, 453, 455, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 600, 601, 604, 609, 617, 618, 633, 634, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 808, 809, 814, 816, 825, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 1048, 1050, 1053, 1055], "set_constrained_layout_pad": 123, "set_edgecolor": 123, "set_facecolor": [115, 260], "set_fit_request": [251, 331, 405, 443, 449, 450, 453, 455, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 595, 598, 642, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 697, 843, 844, 846, 847, 848, 849, 850, 856, 876, 877, 890, 891, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922], "set_fmt_str_length": 52, "set_i": 92, "set_index": [62, 137, 150, 206, 235, 275, 321, 357], "set_inverse_transform_request": [540, 588, 878, 891], "set_label": [75, 177, 248], "set_label_posit": 46, "set_linewidth": [51, 240, 247], "set_major_formatt": [237, 239, 242, 295, 300], "set_major_loc": [237, 300], "set_output": [187, 191, 243, 256, 320, 321, 385, 438, 448, 449, 451, 453, 455, 470, 474, 488, 489, 490, 491, 503, 511, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 665, 695, 696, 699, 837, 855, 860, 863, 867, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 909, 1029, 1054, 1055, 1056, 1058], "set_param": [126, 133, 141, 147, 150, 191, 192, 198, 204, 206, 210, 221, 225, 249, 254, 258, 269, 288, 298, 324, 348, 357, 385, 396, 414, 415, 421, 424, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 998, 1014, 1039, 1045, 1046, 1047, 1052, 1053], "set_partial_fit_request": [455, 541, 673, 674, 675, 683, 684, 685, 839, 840, 843, 844, 846, 847, 848, 849, 850, 868, 891], "set_path_effect": 75, "set_posit": [102, 129, 228, 315], "set_predict_proba_request": [919, 921], "set_predict_request": [251, 488, 489, 490, 559, 618, 642, 651, 652, 919, 920, 921, 922], "set_printopt": 268, "set_prop_cycl": 218, "set_score_request": [251, 269, 331, 405, 443, 449, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 806, 829, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 853, 854, 858, 861, 862, 868, 869, 871, 906, 907, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 1008], "set_siz": 302, "set_size_inch": [95, 163, 255], "set_split_request": [808, 809, 814, 816, 825], "set_start_method": 394, "set_stat": 997, "set_tick_param": 260, "set_ticklabel": [80, 120, 129, 214, 356], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 80, 88, 90, 92, 95, 99, 100, 106, 109, 113, 120, 121, 128, 133, 137, 142, 144, 148, 154, 156, 158, 159, 183, 185, 186, 189, 190, 191, 192, 193, 197, 198, 206, 208, 215, 217, 218, 219, 225, 237, 238, 241, 242, 247, 249, 250, 254, 255, 260, 268, 269, 270, 271, 272, 275, 277, 278, 282, 286, 287, 289, 292, 294, 295, 298, 299, 300, 305, 310, 311, 315, 316, 317, 318, 319, 320, 324, 328, 334, 335, 342, 349, 352, 353, 354, 356, 360, 378], "set_transform_request": [251, 488, 489, 490, 540, 589, 595, 597, 598, 642, 874, 877, 883, 891], "set_vis": [54, 70, 299, 305, 315], "set_xlabel": [46, 49, 80, 88, 95, 106, 107, 109, 120, 121, 128, 148, 183, 185, 186, 189, 191, 192, 193, 195, 206, 212, 214, 215, 217, 219, 232, 233, 249, 269, 275, 277, 281, 286, 287, 289, 292, 300, 315, 316, 320, 337, 357, 358, 360], "set_xlim": [67, 77, 95, 109, 113, 121, 142, 156, 186, 191, 215, 217, 222, 249, 260, 279, 281, 292, 300, 310, 315, 317, 318, 319, 320, 325, 331, 353], "set_xscal": [206, 222], "set_xtick": [43, 47, 49, 67, 78, 95, 99, 133, 156, 160, 191, 193, 208, 233, 249, 260, 286, 287, 294, 310, 312, 317, 318, 342], "set_xticklabel": [47, 49, 113, 133, 160, 177, 191, 193, 286, 287, 294], "set_ylabel": [46, 47, 49, 66, 70, 80, 88, 95, 100, 106, 107, 109, 113, 120, 121, 128, 133, 137, 144, 148, 183, 191, 195, 206, 208, 212, 214, 215, 217, 219, 221, 232, 249, 260, 269, 275, 277, 281, 286, 287, 289, 294, 300, 315, 316, 320, 324, 337, 352, 357, 360], "set_ylim": [47, 49, 67, 77, 95, 106, 121, 142, 155, 156, 183, 191, 198, 215, 217, 218, 249, 260, 279, 294, 300, 310, 315, 317, 318, 320, 325, 331, 337, 353], "set_yscal": [148, 217], "set_ytick": [43, 67, 78, 95, 99, 133, 156, 185, 186, 193, 208, 233, 260, 286, 310, 312, 317, 318, 342, 358], "set_yticklabel": [133, 177, 185, 186, 193, 286, 358], "set_zlabel": [80, 120, 214], "set_zord": 125, "setattr": 384, "setdefault": [55, 926], "setdiff1d": 351, "seth": 1045, "sethdandridg": 1043, "setminu": 1024, "setosa": [80, 120, 129, 131, 284, 285, 379, 511], "setp": [47, 49, 286, 290], "settabl": 1008, "settingwithcopywarn": 191, "setup": [282, 284, 369, 380, 384, 388, 390, 1011], "setuptool": 1057, "seuclidean": [456, 463, 706, 785, 786, 787, 1011, 1047, 1050, 1051], "seuclideandist": 706, "seung": 419, "seven": [377, 1001], "seventh": [518, 1020], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 90, 91, 92, 96, 108, 140, 153, 156, 158, 161, 169, 172, 174, 179, 180, 187, 190, 195, 202, 206, 217, 221, 236, 237, 240, 241, 242, 248, 262, 270, 275, 280, 289, 295, 297, 311, 315, 327, 352, 356, 357, 369, 376, 377, 379, 382, 384, 387, 390, 394, 396, 411, 414, 415, 418, 420, 421, 422, 424, 453, 455, 470, 493, 506, 515, 516, 545, 562, 563, 566, 567, 570, 571, 572, 577, 595, 596, 598, 617, 652, 653, 659, 695, 696, 697, 698, 699, 700, 804, 805, 807, 810, 811, 821, 839, 840, 846, 847, 848, 849, 850, 870, 871, 878, 895, 919, 920, 921, 922, 940, 997, 1000, 1005, 1008, 1009, 1011, 1016, 1018, 1022, 1024, 1025, 1026, 1027, 1029, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1052, 1055, 1056], "sevin": 1047, "sewook": 1049, "sex": [105, 172, 190, 192, 204, 206, 258, 329, 331, 379, 503, 1016], "sex_mal": 190, "seyedsaman": 1053, "sf": [172, 275, 326, 377, 423, 499, 609], "sfm": 172, "sfs_backward": 172, "sfs_forward": 172, "sfu": [414, 448], "sgd": [2, 46, 47, 50, 132, 139, 149, 150, 159, 177, 178, 187, 196, 199, 208, 209, 224, 231, 244, 264, 283, 308, 311, 312, 327, 346, 347, 350, 354, 356, 361, 365, 371, 511, 519, 638, 656, 673, 674, 675, 678, 683, 684, 685, 686, 868, 869, 997, 1012, 1029, 1030, 1034, 1039, 1042, 1043, 1044, 1046, 1050, 1052], "sgdclassifi": [2, 25, 46, 47, 224, 225, 226, 227, 228, 229, 230, 249, 283, 338, 347, 356, 365, 369, 371, 388, 396, 412, 422, 645, 647, 648, 649, 653, 665, 673, 675, 911, 916, 1000, 1004, 1009, 1022, 1023, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "sgdoneclasssvm": [2, 231, 244, 327, 915, 1014, 1022, 1052, 1054, 1055, 1056, 1057], "sgdregressor": [2, 25, 49, 228, 369, 371, 394, 653, 656, 674, 678, 683, 686, 869, 912, 917, 1004, 1022, 1041, 1043, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1057], "sgi": 356, "sgkf": [418, 825], "sgm": 47, "sgml": [47, 369], "sh": [286, 390, 997], "sh_color": 241, "sh_err": 241, "sh_lle": 241, "sh_point": 241, "sh_tsne": 241, "sha256": [47, 52, 498, 1054, 1058], "shack": [1049, 1050, 1051], "shade": [58, 88, 170, 201, 298, 303, 341, 419], "shader": 410, "shadi": [1054, 1055], "shadow": [127, 131, 132, 240, 336, 351, 358, 422], "shafer": 104, "shagun": 1045, "shah": [1043, 1044, 1045, 1051, 1057], "shaharyar": 1057, "shahebaz": 1047, "shahriar": 1041, "shaikh": [0, 367, 372, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1057], "shail": 1051, "shakerimoff": 1053, "shalev": [673, 674, 1004, 1022], "shalil": 1047, "shall": 179, "shallow": [388, 421, 568, 569, 926], "shamsi": 1047, "shandeng123": 1053, "shane": [1048, 1051, 1054], "shanghai": [696, 700, 1005], "shangwu": [1047, 1048], "shankar": 1049, "shanmuga": 1045, "shanno": 1004, "shannon": [564, 571, 919, 921, 1005, 1024], "shantanu": 790, "shao": [1051, 1052, 1053], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 81, 82, 83, 86, 87, 88, 89, 90, 93, 95, 96, 101, 104, 108, 109, 113, 123, 124, 126, 138, 143, 144, 145, 146, 147, 150, 151, 152, 153, 156, 157, 165, 168, 170, 175, 176, 178, 179, 180, 181, 185, 186, 187, 191, 192, 204, 206, 217, 219, 224, 226, 229, 230, 231, 232, 233, 236, 238, 239, 240, 244, 247, 248, 249, 250, 251, 253, 254, 260, 262, 264, 265, 266, 273, 275, 277, 278, 281, 282, 284, 285, 295, 300, 301, 305, 308, 310, 312, 317, 318, 324, 326, 329, 330, 331, 336, 337, 339, 342, 345, 348, 349, 350, 353, 354, 356, 357, 364, 369, 375, 376, 377, 382, 384, 396, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 934, 939, 942, 943, 949, 953, 955, 957, 961, 962, 969, 971, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 996, 998, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1029, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1055, 1056], "shape_fit_": [913, 914, 915, 916, 917], "shape_img": 592, "sharad": 1047, "sharan": [1046, 1047], "share": [70, 117, 156, 190, 265, 356, 364, 365, 369, 370, 384, 390, 408, 414, 419, 422, 556, 675, 711, 715, 804, 805, 810, 811, 1002, 1015, 1031, 1039, 1041, 1047, 1049, 1051, 1054], "shared_yax": 143, "sharedmem": 1047, "sharei": [43, 52, 70, 109, 121, 128, 133, 159, 183, 191, 217, 219, 225, 277, 286, 288, 289, 300, 316, 321, 351, 352, 357, 378], "sharex": [43, 46, 54, 70, 107, 121, 128, 159, 183, 191, 219, 277, 288, 289, 300, 337, 378], "sharma": [1043, 1045, 1047, 1048, 1050, 1051, 1053, 1056, 1057], "sharmadharmp": 1053, "sharon": [45, 377], "sharova": 1046, "sharp": [43, 191, 1015, 1018], "sharper": 733, "shashank": [1045, 1051], "shaun": 1040, "shawpan": 1045, "shaymernaturalint": 1053, "she": [382, 901, 902, 1049], "shea": [1047, 1048], "shebanov": [1047, 1048], "sheep": 1032, "sheer": [382, 1032], "sheerman": 1039, "sheet": 1041, "sheetscikit": 402, "shekhar": 1045, "shell": [383, 390, 394], "shellyfung": 1054, "shen": 1052, "sheng": 1049, "shengxiduan": 1045, "shenhanc78": 1047, "sheni": 1051, "shenk": 1047, "shenoi": 1046, "sherlock": [635, 998], "sheth": 1047, "shetti": 1052, "shi": [414, 458, 468, 698], "shibata": 1049, "shiebler": 1045, "shield": 396, "shift": [2, 52, 71, 73, 79, 84, 99, 187, 197, 240, 265, 300, 313, 315, 349, 416, 420, 446, 454, 464, 467, 475, 519, 522, 696, 700, 857, 880, 1018, 1029, 1033, 1034, 1039, 1043, 1047], "shifted_gaussian": 264, "shifted_opposite_lof_scor": 857, "shih": [848, 1010], "shiki": 1050, "shilt": 1042, "shinehid": 1052, "shinitski": 1056, "shinnar": 1052, "shinsuk": 1054, "ship": [57, 158, 186, 361, 370, 380, 400, 422, 1004, 1039, 1048], "shiqiao": [0, 404, 1039, 1040], "shirsat": 1054, "shiva": [1054, 1055], "shivam": [1047, 1048, 1049], "shivamgargsya": [1046, 1050, 1052], "shivan": 1044, "shivram": 1047, "shiyu": 1048, "shleifer": [1045, 1046], "shmelkov": 1044, "shoaib": 1054, "shoemak": 1050, "shogo": [1054, 1055], "shooter23": [1051, 1052], "shop": 1032, "short": [44, 120, 147, 154, 208, 273, 312, 356, 382, 390, 418, 422, 426, 1004, 1005, 1011, 1031, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "short_nam": 55, "shortcom": 1004, "shortcut": [390, 408, 424], "shorten": [382, 1023, 1052], "shorten_param": 276, "shorter": [43, 180, 263, 394, 414, 419, 456, 463, 570, 704, 1010, 1014, 1050], "shortest": [2, 74, 387, 391, 695, 961, 1005, 1052], "shortest_path": 1052, "shorthand": [93, 396, 415, 473, 568, 569, 872, 873, 1042], "shortlog": 386, "shortname_slic": 55, "shota": 1045, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 88, 135, 137, 140, 143, 147, 150, 153, 172, 185, 190, 195, 197, 198, 202, 217, 235, 244, 249, 250, 251, 254, 269, 275, 278, 281, 282, 284, 289, 292, 295, 316, 317, 322, 336, 345, 352, 357, 365, 369, 370, 371, 377, 380, 381, 382, 384, 386, 387, 389, 390, 391, 395, 396, 400, 405, 408, 410, 412, 413, 414, 416, 418, 419, 421, 422, 423, 424, 425, 426, 428, 431, 437, 443, 446, 448, 449, 450, 451, 453, 455, 456, 458, 460, 463, 464, 465, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 503, 510, 515, 516, 523, 528, 530, 531, 534, 539, 540, 541, 543, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 600, 601, 604, 609, 614, 615, 617, 618, 627, 634, 635, 636, 638, 639, 640, 642, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 716, 734, 735, 749, 773, 778, 781, 785, 786, 787, 788, 789, 792, 795, 796, 799, 806, 808, 809, 814, 815, 816, 817, 824, 825, 826, 827, 829, 833, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 890, 891, 892, 894, 898, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 937, 941, 943, 947, 955, 960, 964, 968, 973, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 996, 997, 998, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1013, 1014, 1015, 1018, 1021, 1022, 1023, 1024, 1028, 1031, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "shouldn": [261, 266, 382], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 370, 371, 378, 382, 388, 394, 395, 400, 401, 405, 411, 412, 413, 416, 418, 419, 420, 421, 423, 424, 444, 509, 566, 600, 601, 638, 639, 704, 705, 707, 708, 709, 720, 813, 830, 853, 871, 923, 924, 925, 997, 1000, 1002, 1003, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1028, 1041, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058], "show_top10": 377, "show_vers": [2, 369, 380, 382, 390, 400, 401, 1047], "show_weight": 924, "show_with_diff": 126, "showcas": [135, 138, 143, 147, 150, 151, 153, 187, 384], "shown": [62, 83, 92, 135, 139, 143, 150, 183, 189, 191, 202, 207, 215, 235, 242, 244, 249, 254, 262, 275, 278, 281, 284, 292, 300, 311, 312, 315, 316, 317, 334, 352, 356, 357, 382, 387, 397, 412, 414, 415, 418, 419, 420, 422, 424, 444, 466, 639, 705, 707, 708, 709, 720, 807, 821, 923, 925, 1004, 1005, 1008, 1011, 1018, 1022, 1023, 1024, 1043, 1048, 1049, 1050, 1053], "shown_imag": 238, "shrankhla": 1054, "shreekant": 1058, "shreesha": [1055, 1056], "shreya": 1049, "shrink": [63, 115, 123, 151, 191, 202, 212, 215, 221, 237, 264, 288, 315, 352, 419, 566, 567, 683, 685, 858, 868, 869, 913, 914, 915, 916, 917, 1011, 1023], "shrink_threshold": [306, 858, 1011, 1039, 1051], "shrinkag": [2, 69, 110, 112, 115, 130, 152, 187, 306, 427, 475, 476, 479, 480, 481, 482, 483, 485, 486, 487, 546, 550, 556, 568, 569, 807, 1004, 1018, 1029, 1030, 1034, 1039, 1043, 1044, 1046], "shrinkage_": [111, 112, 479, 481], "shrinkage_coeffici": 486, "shroff": 1057, "shrunk": [2, 111, 130, 315, 322, 330, 427, 479, 481, 482, 485, 486, 487, 556, 892, 1002, 1022, 1033, 1034], "shrunk_cov": [427, 485, 487], "shrunk_cov_scor": 130, "shrunk_covari": [2, 416, 1056], "shrunkcovari": [2, 111, 130, 416, 475, 476, 479, 480, 481], "shrunken": [858, 1039], "shruti": 1058, "shu": [1040, 1043, 1047], "shuangchi": [1053, 1054], "shubernetskii": 1041, "shubh": 1050, "shubhal": 1056, "shubham": [1046, 1049, 1057], "shubhanshu": 1051, "shubhraneel": 1053, "shuckle16": 1045, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 83, 95, 96, 123, 143, 144, 146, 153, 158, 186, 202, 225, 226, 231, 244, 276, 280, 281, 288, 295, 322, 334, 335, 336, 337, 347, 356, 357, 365, 377, 391, 396, 409, 475, 480, 494, 495, 497, 499, 502, 504, 510, 518, 519, 520, 521, 522, 526, 529, 531, 538, 544, 546, 547, 553, 554, 560, 561, 562, 563, 571, 572, 574, 575, 609, 612, 614, 665, 666, 673, 674, 675, 679, 681, 683, 684, 685, 694, 807, 809, 810, 811, 812, 813, 821, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 868, 869, 892, 911, 912, 913, 916, 954, 955, 976, 978, 1003, 1004, 1009, 1016, 1022, 1023, 1034, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "shuffle_param": 352, "shuffled_arrai": 981, "shufflesplit": [2, 270, 277, 352, 418, 809, 815, 817, 827, 837, 1039, 1040, 1042, 1044, 1045], "shuhei": 1052, "shuhua": 1051, "shutil": [89, 106, 415], "shuttl": 357, "shuzh": 1049, "shwartz": [673, 674, 1004, 1022], "shwed": 1047, "shyam": 1052, "si": 104, "siam": [414, 418, 458, 466, 468, 542, 548], "siang": 1042, "siavash": 1052, "siavrez": 1053, "sibsp": [192, 329], "sid": 1046, "siddharth": [1046, 1050], "siddiqui": 1057, "side": [43, 64, 94, 150, 210, 221, 235, 239, 247, 269, 315, 349, 356, 365, 377, 394, 412, 415, 418, 419, 422, 431, 437, 522, 807, 821, 1004, 1005, 1008, 1010, 1023, 1048], "sidebar": 382, "sidhpura": 1054, "siebert": 1047, "sierra": [538, 544], "sievert": 1049, "siftikha": 1047, "sig": 124, "sigh": 356, "sigkdd": [376, 377, 518, 683, 892, 1018, 1020], "sigma": [53, 81, 82, 89, 113, 130, 150, 273, 275, 411, 416, 419, 421, 621, 656, 1002, 1004, 1006, 1010, 1013], "sigma2": [541, 548], "sigma_": [416, 651, 652, 1052, 1056], "sigma_0": [177, 178, 183, 424, 621], "sigma_0_bound": [183, 621], "sigma_i": [1010, 1018], "sigma_k": [419, 1002], "sigmod": [414, 456, 463, 857, 1014], "sigmoid": [2, 61, 62, 63, 64, 374, 421, 443, 458, 542, 568, 627, 646, 650, 772, 781, 784, 868, 869, 913, 914, 915, 916, 917, 1013, 1023, 1034, 1052, 1056], "sigmoid_kernel": [2, 410, 772, 1006, 1058], "sign": [75, 112, 118, 124, 127, 139, 202, 265, 310, 352, 382, 414, 419, 422, 551, 589, 596, 613, 642, 643, 665, 666, 673, 675, 681, 682, 683, 684, 742, 749, 911, 915, 953, 955, 972, 1004, 1008, 1013, 1018, 1022, 1023, 1039, 1043, 1048, 1052, 1054, 1057], "signal": [2, 11, 53, 114, 123, 124, 125, 132, 148, 150, 174, 179, 180, 187, 196, 197, 203, 204, 205, 206, 211, 216, 218, 266, 288, 327, 414, 416, 422, 423, 424, 427, 481, 510, 528, 533, 538, 541, 544, 548, 552, 553, 632, 651, 652, 653, 654, 659, 660, 670, 671, 679, 691, 692, 693, 792, 828, 837, 885, 1004, 1008, 1025, 1029, 1032, 1033, 1034], "signatur": [251, 356, 357, 377, 494, 495, 564, 565, 571, 572, 601, 617, 618, 666, 680, 682, 718, 749, 813, 830, 833, 835, 838, 884, 967, 997, 1046, 1052, 1056], "signif": [45, 1000], "signifi": [414, 588, 818, 1013], "signific": [2, 43, 90, 143, 150, 167, 168, 170, 187, 221, 235, 267, 275, 294, 295, 319, 356, 365, 376, 377, 394, 414, 417, 418, 421, 511, 539, 541, 556, 634, 665, 666, 673, 674, 675, 683, 684, 685, 826, 836, 911, 913, 914, 915, 916, 917, 997, 1007, 1008, 1011, 1029, 1039, 1041, 1042, 1043, 1047], "significantli": [43, 61, 62, 64, 72, 111, 112, 137, 143, 148, 150, 153, 172, 190, 191, 192, 217, 221, 225, 233, 235, 269, 275, 295, 325, 326, 357, 358, 365, 370, 386, 414, 419, 421, 422, 427, 475, 480, 485, 486, 545, 547, 554, 565, 572, 653, 654, 659, 660, 667, 668, 669, 670, 691, 699, 851, 852, 1000, 1004, 1005, 1011, 1016, 1023, 1039, 1041, 1042, 1046, 1047, 1052, 1053, 1054], "sijaranamu": 1045, "silenc": [251, 1058], "silent": [251, 422, 588, 867, 1018, 1044, 1045, 1047, 1048, 1052, 1053], "silhouett": [2, 58, 71, 73, 84, 92, 93, 187, 357, 453, 519, 799, 800, 1029, 1039, 1043], "silhouette_avg": 95, "silhouette_sampl": [2, 95, 800, 1043, 1045, 1047, 1055], "silhouette_scor": [2, 73, 84, 93, 95, 357, 382, 414, 1039, 1043, 1045, 1047, 1049, 1053], "silicon": 380, "silk": 1053, "sillanp\u00e4\u00e4": 1039, "silva": [412, 695, 1005, 1050, 1052, 1057], "silverman": [420, 856, 1054], "silverthorn": 1039, "silvestrin": 1056, "sim": 419, "sim4n6": 1054, "simd": [396, 1054], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 84, 86, 92, 95, 109, 118, 123, 127, 137, 150, 171, 174, 181, 189, 190, 191, 192, 202, 217, 219, 231, 237, 239, 240, 241, 244, 250, 251, 266, 269, 272, 275, 278, 281, 282, 283, 292, 294, 295, 315, 327, 344, 349, 352, 357, 358, 365, 369, 374, 376, 378, 381, 382, 384, 387, 388, 390, 391, 394, 396, 408, 411, 412, 414, 417, 418, 419, 421, 422, 423, 424, 425, 446, 449, 450, 456, 458, 460, 461, 510, 515, 516, 543, 589, 596, 597, 598, 617, 684, 699, 702, 710, 712, 722, 726, 732, 735, 736, 738, 741, 745, 747, 762, 767, 768, 793, 799, 800, 803, 804, 805, 833, 838, 883, 904, 907, 911, 912, 913, 914, 928, 938, 997, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1034, 1039, 1043, 1044, 1045, 1047, 1051, 1052], "similarli": [43, 51, 72, 90, 121, 154, 191, 193, 202, 206, 217, 245, 254, 269, 275, 310, 315, 330, 332, 345, 365, 370, 378, 380, 384, 387, 396, 408, 410, 411, 417, 418, 422, 736, 737, 745, 790, 791, 794, 829, 1003, 1005, 1006, 1008, 1015, 1022, 1023, 1025, 1047, 1053, 1055], "simmon": 1032, "simon": [1004, 1032, 1042, 1043, 1052, 1053, 1054, 1055], "simona": [1050, 1051, 1052], "simonamaggio": [1050, 1051, 1052], "simoncw": 1049, "simonpl": 1044, "simpl": [2, 13, 37, 43, 64, 90, 105, 109, 111, 117, 118, 123, 143, 148, 181, 187, 191, 202, 218, 234, 257, 276, 292, 296, 299, 308, 328, 341, 356, 358, 361, 365, 380, 382, 384, 385, 386, 387, 389, 394, 395, 396, 397, 405, 411, 414, 415, 416, 418, 419, 420, 421, 422, 423, 428, 435, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 521, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 793, 795, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 963, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1018, 1020, 1022, 1024, 1028, 1029, 1032, 1036, 1039], "simplefilt": 408, "simpleimput": [2, 105, 158, 185, 186, 192, 246, 256, 258, 325, 328, 365, 396, 634, 635, 636, 998, 1018, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "simpleimputersimpleimput": [105, 158, 192, 246, 256, 325, 328], "simplepipelin": 251, "simpler": [151, 193, 235, 324, 345, 369, 381, 414, 419, 1004, 1009, 1044], "simplest": [88, 418, 1005], "simplex": [63, 677, 804, 886], "simpli": [74, 118, 156, 174, 182, 241, 252, 254, 284, 308, 326, 327, 369, 377, 382, 384, 387, 394, 396, 416, 417, 418, 419, 421, 422, 491, 702, 769, 772, 878, 930, 957, 1000, 1008, 1009, 1010, 1011, 1022, 1046, 1047, 1048], "simplic": [43, 53, 67, 202, 349, 356, 358, 396, 420, 1011, 1012, 1013, 1023], "simplif": [378, 381, 387, 1039, 1045], "simplifi": [43, 105, 204, 251, 345, 381, 383, 387, 414, 417, 522, 569, 870, 871, 1008, 1010, 1018], "simplist": [217, 422], "simul": [112, 125, 153, 190, 211, 252, 275, 1032], "simultan": [58, 90, 124, 279, 283, 330, 352, 363, 374, 411, 414, 997, 1008, 1009, 1024, 1032, 1046], "sin": [43, 53, 57, 74, 124, 138, 149, 150, 155, 157, 167, 174, 180, 181, 183, 197, 198, 202, 211, 218, 223, 239, 250, 266, 307, 316, 325, 331, 351, 362, 363, 424, 523, 622, 706, 771], "sin_transform": 43, "sina": 1052, "sinayev": 1041, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 84, 88, 90, 101, 104, 105, 106, 124, 147, 163, 169, 172, 174, 179, 190, 191, 193, 195, 200, 217, 219, 221, 234, 245, 249, 250, 251, 262, 265, 269, 271, 275, 277, 278, 284, 285, 288, 289, 292, 294, 295, 297, 298, 321, 327, 328, 339, 342, 345, 352, 356, 357, 358, 365, 370, 377, 380, 382, 383, 384, 386, 387, 390, 394, 395, 396, 400, 405, 408, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 431, 434, 443, 448, 451, 452, 456, 459, 462, 475, 488, 489, 490, 491, 503, 534, 543, 545, 547, 554, 556, 557, 558, 559, 560, 562, 564, 566, 568, 569, 570, 571, 574, 576, 595, 596, 598, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 639, 640, 645, 658, 662, 665, 666, 673, 675, 680, 681, 682, 683, 686, 699, 714, 716, 742, 749, 785, 789, 796, 806, 807, 810, 811, 821, 829, 835, 836, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 858, 861, 868, 869, 871, 876, 901, 902, 906, 907, 908, 911, 913, 916, 919, 921, 935, 937, 938, 955, 964, 997, 1000, 1001, 1002, 1004, 1005, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1032, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "sinclert": 1047, "sind": 422, "sine": [2, 43, 174, 179, 180, 187, 211, 223, 259, 260, 261, 262, 264, 265, 362, 378, 622, 804, 805, 1007, 1024, 1029], "singer": [292, 673, 674, 742, 1004, 1008, 1022, 1023], "singh": [1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "singl": [2, 30, 31, 70, 74, 83, 87, 88, 90, 93, 96, 97, 106, 125, 136, 137, 138, 146, 147, 157, 172, 174, 180, 185, 187, 191, 193, 195, 202, 217, 219, 221, 255, 257, 265, 269, 271, 284, 292, 312, 328, 330, 345, 356, 357, 358, 361, 363, 365, 369, 370, 376, 377, 382, 387, 389, 390, 391, 394, 395, 396, 405, 412, 413, 415, 417, 418, 419, 421, 422, 423, 439, 443, 446, 447, 451, 452, 453, 455, 460, 470, 472, 473, 500, 501, 503, 513, 516, 541, 560, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 589, 599, 606, 607, 609, 613, 634, 639, 641, 650, 673, 674, 680, 683, 684, 685, 697, 699, 701, 717, 718, 728, 729, 730, 731, 732, 743, 744, 745, 748, 781, 792, 804, 805, 807, 810, 811, 821, 828, 829, 833, 834, 836, 837, 840, 848, 851, 852, 856, 868, 869, 870, 880, 881, 884, 885, 886, 891, 892, 906, 907, 919, 920, 921, 922, 931, 933, 971, 994, 997, 1003, 1004, 1005, 1008, 1009, 1011, 1013, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1029, 1032, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "single_output": [384, 931], "single_prior": 183, "single_source_shortest_path_length": [2, 391], "singleton": [370, 815, 940, 1052, 1055], "singular": [2, 123, 391, 411, 414, 417, 457, 459, 488, 489, 490, 491, 528, 531, 541, 545, 547, 548, 551, 554, 556, 557, 664, 679, 680, 681, 694, 955, 1004, 1005, 1007, 1033, 1034, 1045, 1046, 1057], "singular_": 664, "singular_values_": [541, 548, 551, 1046], "sinha": [1047, 1056, 1057], "sinhrk": [1043, 1044], "sink": [648, 1000], "sinoisoid": 150, "sinusoid": [124, 138, 150, 202, 250, 652, 1001], "sio": 408, "siola": [1054, 1055], "sip\u0151cz": [1049, 1050, 1051, 1055, 1057], "siqi": 1053, "siqueira": 1049, "sir": 379, "sister": 1027, "site": [380, 382, 390, 400, 421, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 1032, 1047], "situat": [62, 79, 92, 106, 189, 190, 223, 244, 278, 382, 390, 408, 416, 418, 419, 421, 474, 535, 541, 589, 884, 887, 899, 909, 1002, 1004, 1010, 1011, 1021, 1024, 1047], "situp": 379, "sivamani": 1049, "sivaprasad": [1042, 1043], "six": [172, 218, 238, 319, 379, 1048], "sixteenth": 1020, "sixth": 377, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 81, 82, 87, 89, 90, 92, 93, 95, 96, 97, 101, 102, 107, 111, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 130, 132, 140, 149, 150, 153, 154, 155, 168, 174, 176, 177, 180, 181, 187, 189, 191, 192, 197, 198, 199, 200, 203, 207, 212, 215, 218, 219, 220, 223, 230, 231, 237, 242, 244, 247, 248, 249, 250, 251, 253, 254, 262, 268, 271, 273, 275, 277, 278, 280, 281, 282, 292, 301, 302, 303, 310, 313, 316, 317, 318, 319, 322, 325, 328, 330, 331, 335, 339, 341, 343, 344, 345, 352, 354, 356, 357, 358, 360, 369, 370, 371, 377, 378, 382, 387, 391, 394, 395, 396, 400, 405, 411, 412, 414, 416, 418, 419, 422, 424, 425, 427, 450, 451, 452, 454, 455, 456, 463, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 500, 501, 502, 522, 534, 541, 543, 545, 547, 554, 564, 565, 566, 567, 568, 569, 571, 572, 590, 594, 595, 601, 639, 640, 650, 664, 673, 674, 686, 690, 699, 702, 712, 726, 745, 747, 750, 788, 800, 809, 812, 813, 817, 824, 827, 828, 829, 832, 835, 837, 846, 847, 848, 850, 853, 854, 855, 856, 857, 859, 861, 862, 863, 868, 869, 886, 888, 900, 905, 909, 913, 914, 915, 916, 917, 919, 920, 921, 922, 925, 954, 958, 959, 970, 971, 973, 976, 982, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1018, 1020, 1022, 1023, 1024, 1031, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1054, 1055, 1057, 1058], "size_cluster_i": 95, "size_mb": 356, "sizeabl": [809, 824, 827], "sk": 557, "skaft": 1053, "skeleton": 1042, "sketch": [2, 23, 195, 371, 374, 391, 646, 647, 648, 972, 1034, 1051], "skew": [2, 48, 150, 220, 248, 254, 315, 330, 374, 412, 418, 646, 647, 648, 649, 887, 899, 1004, 1018, 1034, 1042, 1046, 1055], "skewed": [649, 1046], "skewedchi2sampl": [2, 645, 646, 647, 648, 1000, 1046, 1053, 1054], "skf": [262, 418, 826], "skfold": 337, "skforecast": 1027, "skill": 1008, "skimag": [81, 82, 376], "skip": [370, 382, 391, 410, 422, 474, 653, 654, 659, 667, 668, 669, 678, 688, 909, 930, 1043, 1046, 1049, 1051, 1053, 1055, 1058], "skip_check_arrai": 996, "skip_complet": 634, "skip_comput": 1049, "skip_parameter_valid": [474, 909, 1055], "skipper": [1042, 1044, 1045], "skiptestwarn": 930, "skl2onnx": 408, "sklear": 383, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 371, 375, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 394, 395, 396, 399, 400, 401, 405, 408, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "sklearn2pmml": 1027, "sklearn_api": 0, "sklearn_assume_finit": 369, "sklearn_cache_": 324, "sklearn_enable_debug_cython_direct": 383, "sklearn_fail_no_openmp": 380, "sklearn_graph_cache_": 297, "sklearn_is_fit": [135, 1029], "sklearn_run_float32_test": 382, "sklearn_site_joblib": 1047, "sklearn_warning_as_error": 370, "sklearnex": 400, "skop": [1027, 1034], "skorch": 1027, "sktime": [52, 1027], "sl": 217, "slack": 1022, "slai": 356, "slama": [1049, 1051], "slep": [382, 396], "slep000": 397, "slep009": [1050, 1052, 1053], "slep010": [384, 1050], "slep011": 1028, "slep018": [258, 384, 1054], "slep020": 397, "slice": [2, 43, 52, 55, 146, 153, 226, 239, 249, 303, 306, 327, 328, 341, 377, 383, 391, 415, 470, 473, 500, 501, 515, 553, 646, 781, 785, 788, 928, 933, 958, 959, 978, 1051, 1053, 1057], "slice_": [500, 501, 1054], "sliceabl": 962, "slide": [276, 651, 1004, 1026], "slight": [147, 222, 326, 408, 421, 455, 1049], "slightli": [43, 62, 64, 99, 115, 140, 143, 147, 150, 154, 158, 172, 174, 175, 176, 192, 197, 217, 235, 240, 242, 251, 254, 283, 289, 295, 324, 342, 358, 381, 382, 412, 414, 421, 422, 424, 426, 452, 595, 596, 598, 645, 665, 810, 811, 911, 913, 916, 954, 955, 997, 1004, 1018, 1022, 1023, 1024, 1048, 1052, 1053, 1055, 1057, 1058], "slishak": 1053, "sloan": 0, "slogdet": 953, "slope": [191, 215, 219, 234, 414, 497, 730, 755, 1006, 1008], "sloppili": 422, "sloth": [50, 308, 377, 505], "slow": [297, 315, 356, 369, 376, 380, 382, 419, 422, 453, 706, 885, 886, 890, 913, 916, 955, 1005, 1011, 1028, 1046], "slower": [106, 126, 143, 147, 185, 250, 284, 358, 396, 421, 422, 423, 452, 457, 459, 545, 547, 554, 562, 563, 564, 565, 570, 571, 572, 573, 595, 596, 598, 638, 639, 640, 650, 666, 679, 681, 694, 699, 711, 839, 843, 844, 1001, 1005, 1006, 1007, 1009, 1011, 1024, 1043, 1050], "slowest": [147, 954, 955], "slowli": [394, 396, 551, 955], "slug": 104, "smacof": [2, 697, 1054], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 83, 84, 88, 90, 104, 111, 115, 118, 128, 138, 140, 147, 149, 150, 179, 181, 190, 191, 198, 203, 207, 208, 218, 221, 223, 232, 234, 235, 262, 269, 275, 282, 287, 289, 297, 308, 311, 313, 315, 317, 319, 326, 334, 339, 345, 350, 352, 356, 357, 371, 375, 377, 379, 382, 385, 391, 394, 396, 408, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 427, 447, 449, 451, 452, 453, 455, 464, 465, 469, 481, 503, 505, 545, 547, 548, 554, 562, 563, 564, 568, 569, 570, 571, 589, 596, 597, 609, 614, 615, 657, 661, 662, 663, 665, 666, 686, 689, 690, 810, 811, 825, 836, 839, 868, 869, 876, 904, 913, 916, 955, 997, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1020, 1021, 1024, 1027, 1028, 1032, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "smaller": [2, 37, 47, 61, 75, 81, 90, 115, 137, 153, 172, 179, 180, 185, 205, 206, 208, 221, 248, 292, 301, 302, 310, 315, 332, 345, 352, 357, 382, 411, 414, 416, 418, 419, 421, 423, 445, 446, 452, 456, 460, 462, 521, 541, 542, 564, 565, 566, 567, 568, 569, 571, 572, 600, 617, 626, 640, 653, 654, 656, 657, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 679, 681, 689, 690, 699, 716, 804, 810, 811, 857, 860, 884, 885, 903, 904, 911, 919, 920, 921, 922, 955, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1020, 1022, 1023, 1024, 1028, 1047, 1052, 1056], "smallest": [113, 114, 217, 295, 332, 360, 377, 414, 416, 423, 534, 548, 637, 661, 662, 663, 689, 690, 697, 701, 702, 807, 810, 811, 821, 826, 881, 934, 1024, 1052], "smallest_ab": 332, "smallest_coef": [115, 534], "smari": [1048, 1049, 1050], "smart": [251, 449, 465, 466, 597], "smartphon": 1032, "smedbergm": 1045, "smedemark": 1049, "smile": [109, 377, 1053], "sminchisescu": [649, 1000], "smirnov": 1051, "smith": [1045, 1046, 1047, 1048, 1049, 1051], "sml": [867, 1013], "smo": [911, 912], "smola": [419, 422, 542, 877, 1018, 1023], "smolskii": 1054, "smooth": [43, 81, 82, 89, 172, 179, 210, 218, 233, 321, 345, 379, 397, 414, 420, 421, 424, 454, 455, 544, 545, 546, 553, 564, 565, 566, 567, 571, 572, 573, 597, 598, 626, 629, 683, 846, 847, 848, 850, 888, 892, 900, 919, 920, 921, 922, 1004, 1010, 1018, 1022, 1023, 1024], "smooth_idf": [422, 597, 598], "smoothened_coin": [81, 82], "smoother": [43, 44, 150, 191, 312, 420], "smoothli": 376, "smt": 1055, "smtp": [377, 499], "smujjiga": 1049, "sn": [72, 138, 153, 189, 190, 197, 202, 265, 275], "snake": [328, 330, 589, 892, 1018], "snapshot": [408, 566, 567, 1028], "sne": [51, 187, 236, 237, 238, 239, 241, 295, 521, 532, 699, 1029, 1033, 1034], "snippet": [135, 365, 382, 387, 390, 394, 410, 421, 422, 423, 998, 1018, 1031, 1052], "snowhit": 1050, "snr": 89, "snuderl": 1043, "sny": 51, "snyder": [699, 1005], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 83, 90, 91, 96, 100, 114, 143, 146, 147, 148, 149, 153, 157, 174, 179, 190, 192, 195, 198, 217, 218, 244, 251, 254, 269, 275, 288, 292, 295, 301, 302, 305, 311, 312, 316, 321, 322, 325, 337, 345, 356, 358, 364, 365, 369, 370, 371, 376, 377, 380, 381, 382, 384, 386, 387, 388, 390, 391, 396, 405, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 427, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 503, 515, 516, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 702, 712, 715, 723, 733, 763, 785, 795, 804, 805, 806, 807, 810, 811, 813, 814, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 901, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 955, 973, 982, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1020, 1021, 1022, 1023, 1027, 1028, 1032, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056], "soar": 1054, "sobkevich": 1051, "sobolev": 1043, "soc": [57, 377], "socastro": [1049, 1055, 1058], "socg2006": 453, "social": [190, 386, 397, 414, 1032], "societi": [172, 379, 414, 416, 475, 480, 548, 634, 887, 899, 1004, 1022], "sodhani": 1045, "soft": [2, 132, 159, 160, 382, 396, 576, 577, 907, 915, 1022, 1032, 1044], "softmax": [421, 568, 665, 666, 1004, 1011, 1012], "softw": 1004, "softwar": [0, 172, 369, 379, 382, 390, 394, 396, 408, 422, 634, 642, 665, 998, 1032], "soil_typ": 254, "sokalmichen": [456, 463, 706, 785, 786, 787, 1011], "sokalmichenerdist": 706, "sokalsneath": [456, 463, 706, 785, 786, 787, 1011], "sokalsneathdist": 706, "sok\u00f3\u0142": [1056, 1057], "sole": [102, 382, 394, 414], "soledad": 1051, "soler": [0, 404], "solid": [50, 67, 69, 149, 177, 229, 230, 244, 254, 308, 317, 1032], "solntz": 356, "solosil": 1052, "solut": [81, 197, 202, 206, 208, 222, 231, 244, 250, 288, 327, 345, 380, 396, 408, 411, 413, 414, 416, 418, 419, 422, 423, 455, 457, 459, 538, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 617, 653, 655, 657, 659, 661, 662, 663, 665, 667, 669, 671, 672, 673, 674, 675, 676, 679, 681, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 804, 805, 821, 860, 868, 869, 1001, 1002, 1004, 1005, 1007, 1012, 1014, 1022, 1023, 1026, 1032, 1039, 1042, 1052, 1053, 1054], "solutu": 1047, "solutusimmensu": 1047, "solv": [2, 44, 45, 101, 174, 206, 249, 275, 294, 381, 382, 383, 384, 387, 394, 402, 414, 416, 418, 419, 424, 453, 459, 468, 484, 538, 544, 545, 546, 550, 552, 553, 554, 555, 642, 644, 653, 659, 661, 662, 671, 672, 677, 679, 681, 684, 692, 693, 694, 726, 841, 911, 912, 915, 955, 999, 1002, 1004, 1005, 1008, 1009, 1022, 1023, 1024, 1026, 1027, 1032, 1045, 1049, 1052], "solvabl": 414, "solver": [54, 66, 69, 70, 81, 101, 187, 196, 206, 208, 209, 210, 217, 225, 232, 233, 235, 310, 311, 312, 313, 322, 331, 332, 356, 388, 394, 396, 400, 410, 414, 426, 458, 468, 477, 478, 484, 509, 540, 542, 547, 548, 551, 554, 556, 653, 654, 655, 659, 660, 665, 666, 667, 668, 669, 670, 673, 675, 676, 677, 679, 681, 683, 687, 688, 691, 694, 695, 696, 698, 700, 702, 795, 821, 837, 842, 845, 868, 869, 913, 914, 915, 916, 917, 1002, 1005, 1008, 1009, 1012, 1022, 1023, 1029, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "solver_": [679, 681], "solver_opt": 677, "somani": 1051, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 85, 88, 90, 91, 93, 97, 102, 105, 108, 111, 113, 114, 118, 123, 138, 139, 143, 147, 150, 151, 153, 154, 155, 158, 159, 168, 174, 176, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 195, 197, 199, 201, 202, 204, 205, 206, 207, 211, 212, 217, 218, 221, 225, 226, 231, 234, 235, 237, 239, 244, 248, 251, 254, 261, 262, 263, 268, 269, 270, 275, 276, 277, 278, 281, 283, 289, 292, 294, 298, 301, 306, 311, 312, 315, 320, 325, 326, 327, 328, 329, 330, 331, 332, 341, 342, 344, 345, 352, 354, 356, 357, 358, 364, 365, 369, 370, 371, 375, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 400, 405, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 443, 449, 450, 453, 455, 457, 459, 465, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 503, 506, 515, 516, 522, 530, 531, 540, 541, 543, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 588, 589, 595, 597, 598, 613, 616, 617, 618, 639, 640, 642, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 696, 697, 699, 700, 704, 705, 707, 708, 709, 714, 715, 722, 727, 733, 734, 745, 746, 747, 753, 761, 763, 764, 770, 789, 791, 794, 795, 796, 801, 804, 806, 808, 809, 814, 816, 825, 826, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 937, 938, 964, 997, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "some_funct": [382, 945], "some_integ": 418, "some_iter": 382, "some_param": 382, "somebodi": 397, "someestim": 381, "somehow": 191, "someon": [382, 386, 396, 1039], "someth": [190, 238, 292, 356, 382, 385, 386, 390, 422, 927, 929, 1008, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "sometim": [106, 158, 189, 269, 275, 312, 357, 365, 370, 371, 382, 384, 388, 395, 396, 414, 416, 419, 421, 422, 455, 541, 542, 545, 547, 548, 876, 877, 878, 926, 1003, 1004, 1005, 1008, 1013, 1018, 1019, 1023, 1036, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055], "somewhat": [352, 365, 371, 382, 419, 421, 913, 916, 1004, 1023, 1024], "somewher": [388, 1008], "sommer": 1057, "somya": 1047, "son": [379, 998], "song": 1005, "soni": [51, 1049, 1051], "sonni": 1044, "sonniv": [1054, 1055], "sonoiya": 1049, "sonoma": 321, "soon": [114, 396, 1058], "sooner": 1056, "sophist": [998, 1010], "sorbaro": 1044, "sorensen": 419, "soriano": 1048, "sornarajah": 1044, "sorri": 1047, "sorro": 1048, "sorski": [1053, 1054], "sort": [2, 43, 47, 49, 51, 58, 61, 95, 104, 107, 135, 140, 147, 150, 157, 172, 179, 197, 202, 217, 218, 235, 253, 275, 276, 279, 290, 307, 351, 356, 362, 363, 382, 386, 390, 391, 396, 418, 421, 422, 424, 541, 548, 562, 573, 588, 601, 617, 624, 704, 719, 725, 736, 737, 745, 761, 790, 791, 794, 796, 807, 834, 846, 847, 848, 849, 850, 851, 852, 859, 861, 862, 863, 866, 876, 882, 884, 885, 888, 890, 892, 900, 913, 916, 955, 961, 1004, 1011, 1014, 1018, 1032, 1039, 1043, 1049, 1050, 1051, 1053, 1054, 1057], "sort_graph_by_row_valu": [2, 391, 1054], "sort_index": 292, "sort_result": [851, 852, 859, 861, 862, 863, 1051], "sort_valu": [105, 192, 193, 258, 265, 275, 286, 321, 322], "sorted_idx": [151, 324], "sorted_importances_idx": 192, "sortofamudkip": [1054, 1055], "sought": 788, "soumirai": 1049, "sound": [172, 365], "sounder": 1045, "sourav": [1046, 1049], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 379, 381, 382, 383, 385, 386, 388, 390, 391, 394, 395, 400, 408, 411, 415, 419, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 1005, 1018, 1024, 1027, 1029, 1032, 1049, 1053, 1057, 1058], "south": [50, 153, 190, 308, 377, 420], "south_y": 190, "sp": [43, 190, 331, 998], "sp_version": 677, "space": [2, 37, 43, 47, 49, 57, 67, 81, 83, 88, 92, 93, 95, 96, 98, 100, 104, 105, 108, 118, 123, 125, 131, 133, 142, 146, 150, 156, 169, 172, 174, 180, 195, 202, 218, 237, 238, 239, 241, 248, 249, 250, 254, 255, 261, 266, 283, 286, 287, 295, 304, 305, 317, 326, 349, 356, 357, 358, 364, 365, 369, 374, 377, 378, 379, 382, 389, 394, 395, 396, 411, 414, 417, 419, 420, 421, 422, 424, 449, 453, 454, 455, 458, 468, 470, 471, 472, 473, 488, 489, 490, 494, 505, 539, 541, 542, 545, 546, 547, 548, 550, 551, 556, 580, 589, 595, 596, 598, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 639, 640, 645, 647, 648, 649, 650, 695, 696, 697, 699, 700, 701, 703, 706, 807, 810, 811, 813, 821, 830, 841, 851, 852, 859, 860, 861, 862, 871, 876, 877, 883, 888, 903, 904, 905, 924, 959, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1033, 1034, 1039, 1040, 1042, 1047, 1048, 1049, 1053, 1054, 1055], "spacek": 1044, "spain": 321, "spam": [588, 716, 748, 846, 1008, 1010, 1032], "span": [52, 90, 111, 150, 249, 269, 272, 377, 414, 422, 556, 643, 807, 810, 1008], "spanish": 1027, "spannbauer": 1051, "sparciti": 357, "spare": [376, 681, 682], "spark": [377, 1028], "sparrai": 1056, "spars": [2, 25, 45, 46, 51, 53, 55, 57, 66, 74, 75, 89, 90, 92, 104, 110, 111, 112, 122, 124, 142, 156, 187, 196, 197, 204, 205, 206, 209, 211, 212, 216, 233, 248, 250, 276, 282, 288, 295, 313, 325, 329, 332, 338, 355, 358, 364, 369, 374, 376, 377, 378, 382, 384, 385, 386, 387, 394, 395, 396, 408, 414, 415, 421, 422, 424, 425, 429, 436, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 463, 465, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 493, 494, 495, 503, 504, 510, 515, 530, 531, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 592, 593, 595, 596, 597, 598, 600, 601, 610, 611, 612, 613, 614, 615, 616, 636, 637, 638, 640, 645, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 719, 720, 721, 736, 737, 738, 741, 745, 746, 747, 761, 762, 767, 768, 770, 771, 773, 774, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 794, 799, 800, 803, 806, 807, 810, 811, 821, 828, 829, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 874, 875, 876, 878, 880, 881, 882, 883, 884, 886, 888, 889, 890, 891, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 933, 935, 936, 937, 938, 943, 952, 955, 956, 959, 961, 962, 970, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 996, 998, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1021, 1023, 1024, 1028, 1029, 1030, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "sparse_cg": [356, 679, 681, 694, 1004, 1040, 1046, 1048, 1049, 1053, 1055], "sparse_coef_": [653, 659, 667, 669, 1039], "sparse_encod": [2, 549, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 689, 690, 691, 692, 693, 1039, 1046, 1047, 1049, 1053], "sparse_encode_parallel": 1039, "sparse_format": [534, 1056], "sparse_func": [1045, 1051], "sparse_input_": 878, "sparse_lasso": 203, "sparse_output": [43, 147, 258, 321, 328, 331, 573, 878, 882, 884, 890, 895, 1018, 1054, 1055], "sparse_output_": [470, 558], "sparse_symmetric_arrai": 993, "sparse_threshold": [191, 470, 473, 1047], "sparsearrai": 1050, "sparsecod": [2, 132, 419, 538, 544, 547, 555, 1046, 1047, 1049, 1051, 1053], "sparsecodingmixin": 1039, "sparsefunc": [2, 391, 982, 983, 984, 985, 986, 987, 988, 1052], "sparsefuncs_fast": [2, 391, 989, 990], "sparsepca": [2, 123, 538, 540, 541, 542, 544, 546, 547, 548, 549, 552, 553, 1039, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1057], "sparser": [90, 197, 208, 288, 419, 477, 484, 546, 550, 1004, 1011, 1022], "sparserandomproject": [2, 238, 248, 903, 1020, 1040, 1045, 1053, 1055, 1056], "sparsetool": 1046, "sparsifi": [46, 202, 369, 665, 666, 673, 674, 675, 683, 684, 685, 911, 991, 1041], "sparsiti": [2, 53, 66, 80, 115, 129, 187, 196, 202, 205, 210, 228, 232, 233, 250, 352, 357, 369, 396, 416, 419, 421, 423, 508, 509, 534, 538, 544, 545, 546, 547, 550, 552, 553, 554, 653, 659, 664, 665, 683, 685, 728, 730, 731, 880, 886, 891, 896, 1001, 1004, 1011, 1018, 1029, 1041], "sparsity_en_lr": 208, "sparsity_l1_lr": 208, "sparsity_l2_lr": 208, "sparsity_ratio": 369, "spatial": [82, 84, 90, 193, 202, 234, 312, 377, 396, 414, 425, 450, 452, 456, 458, 463, 686, 699, 767, 770, 785, 786, 787, 788, 799, 800, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 1004, 1011, 1018, 1041, 1045, 1052, 1055], "spawn": [369, 394, 807, 821, 832, 833, 834, 1050], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364], "speak": [357, 369, 382, 1022], "spearman": [193, 642, 643, 999], "spearmanr": 193, "spec": [1054, 1055], "speci": [2, 42, 120, 187, 254, 296, 356, 375, 420, 505, 713, 796, 856, 915, 926, 1008, 1014, 1029, 1034, 1039], "special": [149, 190, 207, 235, 292, 305, 321, 345, 376, 378, 384, 388, 394, 396, 414, 417, 419, 470, 473, 560, 562, 566, 832, 923, 997, 1002, 1004, 1006, 1007, 1008, 1009, 1011, 1024, 1046, 1049, 1051, 1053, 1058], "special_charact": [923, 1024], "species_nam": [50, 308], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 90, 97, 100, 104, 106, 143, 153, 158, 179, 182, 187, 190, 191, 195, 221, 235, 269, 270, 275, 292, 315, 324, 325, 329, 332, 349, 356, 357, 358, 365, 369, 370, 377, 382, 385, 387, 388, 390, 394, 396, 400, 408, 410, 414, 415, 418, 419, 421, 422, 423, 424, 438, 503, 510, 541, 558, 564, 571, 574, 575, 576, 577, 581, 595, 598, 600, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 632, 647, 650, 653, 654, 659, 665, 679, 694, 704, 706, 719, 720, 807, 808, 809, 814, 815, 816, 821, 834, 847, 928, 947, 949, 950, 970, 983, 984, 985, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1013, 1015, 1016, 1018, 1022, 1024, 1025, 1026, 1031, 1039, 1043, 1047, 1048, 1049, 1050, 1053, 1054, 1056], "specifi": [2, 43, 58, 64, 90, 123, 147, 148, 153, 175, 178, 180, 181, 182, 206, 218, 225, 260, 269, 283, 369, 370, 376, 382, 384, 390, 391, 395, 396, 405, 408, 412, 414, 415, 418, 419, 421, 423, 424, 426, 428, 443, 447, 451, 456, 458, 469, 470, 473, 475, 476, 478, 479, 480, 481, 482, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 510, 522, 534, 538, 540, 544, 545, 547, 548, 553, 554, 559, 564, 566, 567, 568, 569, 571, 574, 575, 590, 591, 600, 601, 604, 609, 617, 618, 627, 638, 639, 640, 645, 650, 653, 654, 655, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 672, 675, 676, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 694, 698, 705, 707, 709, 716, 718, 736, 737, 745, 749, 761, 778, 786, 787, 790, 791, 794, 807, 810, 811, 813, 814, 816, 820, 821, 824, 829, 830, 831, 832, 833, 834, 835, 836, 838, 842, 845, 846, 847, 849, 850, 851, 852, 856, 861, 884, 885, 886, 889, 890, 892, 907, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 950, 957, 991, 998, 1004, 1005, 1007, 1008, 1011, 1015, 1016, 1018, 1021, 1022, 1023, 1039, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "spector": 418, "spectral": [2, 53, 56, 71, 79, 81, 84, 90, 104, 187, 238, 239, 336, 338, 356, 357, 358, 382, 422, 455, 457, 458, 459, 468, 475, 476, 477, 478, 479, 480, 481, 482, 494, 518, 520, 598, 695, 696, 697, 698, 699, 702, 726, 802, 1011, 1021, 1029, 1033, 1034, 1039, 1040], "spectral_clust": [2, 81, 101, 1047, 1049, 1051, 1052, 1053, 1054, 1056], "spectral_embed": [2, 396, 1005, 1040, 1043, 1045, 1047, 1049, 1052, 1053, 1054, 1056], "spectralbiclust": [2, 411, 459, 1041, 1045, 1046, 1050], "spectralclust": [2, 79, 328, 414, 446, 1011, 1039, 1040, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "spectralcoclust": [2, 57, 59, 411, 457, 1041, 1046, 1050], "spectralembed": [2, 87, 237, 238, 239, 695, 696, 697, 699, 1005, 1040, 1045, 1049, 1053, 1054, 1056], "spectrum": [107, 531, 551, 702, 955, 1032, 1047], "speech": [422, 1008], "speed": [81, 82, 92, 104, 126, 135, 143, 186, 191, 203, 206, 210, 254, 295, 326, 335, 356, 358, 371, 382, 385, 391, 394, 396, 410, 412, 414, 419, 421, 422, 425, 449, 450, 453, 454, 455, 456, 458, 463, 465, 466, 467, 468, 538, 539, 617, 634, 639, 640, 641, 646, 653, 654, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 688, 691, 699, 804, 805, 813, 835, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 886, 955, 997, 1000, 1005, 1007, 1009, 1022, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "speedi": 369, "speedup": [331, 369, 419, 421, 657, 661, 664, 1039, 1040, 1041, 1042, 1054, 1058], "speer": 1041, "spell": 422, "spend": 422, "spent": [295, 321, 383, 388, 835, 1054], "sperret6": 1057, "sphere": [137, 187, 236, 237, 240, 241, 242, 295, 357, 420, 526, 596, 695, 696, 697, 698, 699, 771, 940, 1002, 1006, 1011, 1029], "sphere_data": 239, "spheric": [70, 92, 117, 154, 239, 262, 264, 265, 308, 378, 771, 804, 805, 1004, 1007, 1011], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 370, 386, 396, 400, 407, 1039, 1046], "sphinxcontrib": [382, 400, 407], "sphinxext": [382, 400, 407], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1039, "spidlen": [699, 1005], "spie": [172, 379], "spielman": 1049, "spike": 191, "spikebh": 1053, "spikhalskii": 1044, "spiki": 43, "spin": 390, "spine": [46, 54, 70, 228, 315], "spirit": 419, "spite": 1010, "spline": [2, 187, 196, 197, 290, 300, 523, 524, 525, 679, 872, 886, 890, 1027, 1029, 1052], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 218, 254, 327, 886, 1018, 1052, 1054, 1055], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 104, 128, 137, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 163, 168, 189, 190, 193, 202, 212, 213, 217, 220, 225, 235, 245, 254, 261, 262, 268, 269, 270, 273, 275, 280, 282, 285, 289, 292, 298, 304, 310, 312, 316, 317, 322, 328, 330, 337, 345, 356, 358, 364, 377, 389, 395, 396, 400, 405, 412, 413, 414, 419, 421, 422, 423, 443, 448, 449, 478, 479, 485, 486, 504, 538, 544, 546, 549, 553, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 596, 598, 601, 609, 654, 658, 660, 662, 668, 670, 672, 680, 682, 702, 711, 712, 724, 738, 744, 764, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 845, 851, 852, 868, 869, 892, 896, 897, 899, 900, 901, 902, 919, 920, 921, 922, 978, 997, 1000, 1004, 1005, 1011, 1014, 1015, 1016, 1018, 1022, 1024, 1028, 1034, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "split0_test_precis": [807, 821], "split0_test_scor": [807, 821, 1045], "split0_train_scor": [807, 821, 1045], "split1_test_scor": [807, 821], "split1_train_scor": [807, 821], "split2_test_scor": 807, "split_cod": 419, "split_sign": [538, 544, 549], "splitter": [43, 251, 330, 331, 396, 405, 418, 443, 478, 571, 572, 574, 575, 601, 609, 654, 658, 660, 662, 666, 668, 670, 672, 680, 682, 807, 809, 810, 811, 812, 813, 821, 822, 823, 826, 827, 830, 831, 832, 833, 834, 835, 836, 838, 842, 845, 919, 920, 921, 922, 1024, 1028, 1045, 1046, 1047, 1048, 1055, 1056, 1057, 1058], "splot": [261, 266], "splt": 218, "sply88": 1053, "spmatrix": 1056, "spolski": 422, "sport": [57, 377], "spot": [88, 246, 414], "spottabl": 388, "spread": [43, 75, 239, 276, 315, 334, 335, 336, 339, 352, 369, 382, 414, 458, 468, 522, 888, 900, 908, 1008], "spring": [43, 52, 191], "springboard": 1027, "springer": [140, 141, 152, 179, 274, 412, 414, 418, 419, 421, 527, 542, 566, 567, 697, 701, 703, 712, 727, 733, 747, 748, 763, 804, 919, 920, 1005, 1008, 1009, 1015, 1024], "sprint": [381, 382, 1039], "spuriou": [345, 390, 1018, 1052, 1053, 1054], "spy": 211, "sq": 776, "sqeuclidean": [73, 456, 463, 785, 786, 787], "sqft": 254, "sql": 376, "sqr": 75, "sqrt": [51, 113, 114, 115, 126, 132, 141, 163, 193, 197, 199, 240, 242, 256, 260, 261, 262, 265, 266, 275, 350, 352, 414, 421, 422, 424, 469, 475, 476, 477, 478, 479, 480, 481, 482, 545, 547, 554, 564, 565, 566, 567, 571, 572, 626, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 706, 738, 770, 771, 776, 891, 904, 919, 920, 921, 922, 1000, 1004, 1005, 1008, 1010, 1020, 1053], "squar": [2, 43, 44, 52, 96, 105, 112, 113, 114, 116, 117, 124, 125, 133, 140, 151, 153, 154, 172, 174, 179, 187, 189, 190, 196, 197, 199, 200, 202, 206, 207, 213, 217, 219, 222, 227, 234, 235, 247, 248, 250, 263, 290, 319, 326, 327, 329, 342, 356, 374, 379, 382, 388, 391, 396, 414, 416, 417, 419, 420, 421, 425, 426, 437, 446, 448, 449, 450, 452, 453, 455, 456, 460, 463, 465, 466, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 508, 538, 544, 546, 548, 550, 552, 553, 554, 556, 559, 561, 563, 565, 566, 567, 569, 572, 575, 577, 597, 598, 599, 602, 603, 605, 606, 607, 611, 612, 613, 616, 618, 622, 629, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 692, 693, 694, 695, 697, 699, 701, 703, 716, 728, 729, 730, 731, 757, 758, 765, 766, 770, 776, 777, 792, 797, 798, 837, 844, 845, 853, 854, 857, 858, 859, 861, 862, 869, 872, 891, 911, 912, 914, 916, 917, 918, 920, 922, 953, 980, 993, 999, 1001, 1002, 1011, 1012, 1016, 1022, 1024, 1029, 1030, 1034, 1039, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058], "square_dist": 1051, "squared_epsilon_insensit": [674, 683, 685, 912, 1004, 1045], "squared_error": [46, 52, 132, 150, 151, 327, 421, 565, 566, 567, 569, 572, 678, 683, 685, 700, 920, 922, 1022, 1024, 1052, 1055, 1056], "squared_hing": [224, 352, 673, 683, 911, 918, 1004, 1023], "squared_loss": [394, 1052], "squareform": 193, "squash": [254, 386, 424, 538, 544, 549, 555], "squeez": [109, 180, 181, 254, 295, 315, 1058], "sr": 1032, "sr_color": 241, "sr_err": 241, "sr_lle": 241, "sr_point": 241, "sr_tsne": 241, "srajan": 1047, "sre": 1054, "srebro": 1022, "srep30750": 414, "sri": [678, 1004, 1046, 1047], "sridharan": 1044, "sriharsha": [1047, 1048], "srikantan": 1004, "srimukh": 1051, "srinath": [1053, 1054], "srinivasan": [1047, 1050], "sripada": 1051, "srivastava": [1042, 1054, 1057], "srivatsan": [1045, 1046, 1049], "srvanrel": 1045, "sr\u0161e\u0148": 1057, "ss": 418, "sse": 449, "sseg": 1044, "ssrn": [217, 235], "sss": 827, "ssvm": 394, "st": [82, 102, 275, 329, 1042, 1045, 1047], "st30": 339, "st50": 339, "st_pipelin": 338, "sta4273": 651, "stabil": [72, 141, 148, 190, 238, 280, 315, 352, 357, 396, 411, 452, 657, 661, 677, 849, 868, 869, 887, 899, 954, 998, 1004, 1007, 1018, 1028, 1039, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "stabilis": 197, "stabl": [43, 64, 190, 211, 215, 219, 295, 325, 352, 357, 380, 382, 386, 391, 396, 400, 418, 422, 426, 477, 478, 484, 540, 548, 662, 679, 681, 694, 699, 731, 759, 954, 955, 1004, 1010, 1011, 1018, 1028, 1035, 1039, 1040, 1045, 1050, 1052, 1056], "stack": [2, 14, 109, 136, 147, 161, 185, 187, 217, 246, 271, 300, 364, 381, 390, 394, 396, 420, 470, 472, 473, 503, 522, 569, 572, 574, 575, 619, 634, 635, 637, 660, 680, 708, 832, 834, 872, 876, 884, 885, 891, 981, 998, 1028, 1029, 1030, 1031, 1034, 1039, 1042, 1046, 1047, 1048, 1049, 1050], "stack_method": [421, 574], "stack_method_": [421, 574, 575], "stacking_regressor": 158, "stackingclassifi": [2, 324, 365, 396, 405, 421, 575, 998, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1058], "stackingregressor": [2, 158, 324, 396, 405, 421, 574, 998, 1049, 1050, 1051, 1052, 1053, 1056, 1058], "stackingregressorinot": 158, "stackoverflow": [387, 390, 394], "stade": 1043, "stage": [0, 46, 63, 106, 137, 142, 148, 151, 269, 386, 396, 410, 414, 421, 454, 560, 561, 566, 567, 568, 569, 595, 596, 598, 609, 1005, 1018, 1026, 1047, 1051], "staged_decision_funct": [560, 566, 568], "staged_predict": [137, 148, 151, 421, 560, 561, 566, 567, 568, 569, 1039, 1051], "staged_predict_proba": [149, 152, 560, 566, 568, 1039], "staged_scor": [560, 561], "stagewis": 137, "stagg": 1052, "stai": [43, 52, 63, 72, 132, 190, 357, 381, 382, 386, 396, 397, 1013, 1031, 1045], "stairstep": 282, "stalei": [1048, 1049], "stall": [381, 385], "stallei": 1051, "stan": [849, 1056], "stand": [278, 358, 386, 394, 419, 538, 544, 552, 553, 603, 616, 685, 712, 724, 743, 744, 764, 793, 795, 802, 1007, 1008, 1014], "standalon": [388, 665, 911], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 90, 96, 104, 105, 107, 113, 114, 118, 124, 137, 140, 142, 143, 144, 145, 146, 154, 158, 172, 174, 179, 181, 183, 190, 197, 205, 206, 215, 217, 226, 237, 238, 239, 249, 254, 265, 269, 270, 273, 274, 275, 276, 278, 315, 320, 343, 356, 369, 370, 374, 375, 376, 378, 379, 380, 382, 384, 385, 387, 388, 391, 394, 396, 400, 408, 410, 414, 416, 417, 418, 422, 424, 452, 470, 474, 478, 494, 503, 508, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 531, 532, 537, 539, 542, 548, 559, 597, 601, 618, 641, 651, 652, 679, 680, 681, 682, 683, 685, 694, 696, 700, 795, 813, 828, 830, 848, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 875, 880, 881, 884, 887, 888, 889, 891, 899, 900, 901, 902, 909, 911, 912, 937, 997, 1000, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1022, 1023, 1028, 1032, 1034, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1057], "standard_coef_": 1050, "standard_intercept_": 1050, "standard_norm": [365, 694], "standard_scal": 256, "standard_t": 125, "standardscal": [2, 45, 49, 67, 79, 84, 90, 93, 97, 105, 107, 118, 133, 158, 172, 190, 197, 204, 206, 208, 217, 233, 235, 245, 246, 254, 255, 256, 258, 269, 272, 282, 289, 298, 303, 304, 310, 317, 320, 324, 325, 327, 328, 329, 331, 332, 345, 348, 365, 371, 382, 384, 387, 391, 395, 415, 418, 435, 472, 473, 574, 683, 685, 871, 872, 875, 888, 902, 911, 912, 913, 914, 916, 917, 998, 1005, 1012, 1018, 1022, 1023, 1025, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "standardscalerifittedstandardscal": 258, "standardscalerstandardscal": [105, 158, 190, 245, 246, 255, 256, 258, 269, 282, 289, 325, 328], "standpoint": 85, "stanford": [172, 379, 656, 689, 690, 846, 849, 850, 904, 1006], "stanislav": [1054, 1055], "stanlei": [1053, 1054, 1055], "stap": 1047, "stapl": 1043, "star": [70, 121, 161, 382], "stareh": 1050, "start": [0, 43, 46, 49, 51, 52, 58, 63, 88, 93, 99, 102, 108, 118, 126, 142, 148, 150, 169, 172, 179, 181, 191, 195, 198, 199, 206, 217, 218, 219, 225, 235, 237, 241, 245, 249, 251, 263, 269, 275, 283, 295, 328, 330, 335, 356, 364, 365, 369, 370, 371, 382, 383, 384, 386, 387, 388, 394, 396, 400, 411, 414, 418, 419, 423, 424, 446, 448, 456, 460, 462, 545, 617, 624, 639, 652, 660, 666, 673, 674, 675, 683, 684, 685, 697, 701, 788, 789, 796, 804, 805, 807, 810, 811, 821, 853, 854, 855, 857, 859, 867, 961, 991, 997, 1004, 1007, 1012, 1013, 1022, 1028, 1032, 1042, 1044, 1047, 1049, 1051, 1052, 1053, 1054, 1055], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 240], "start_reut": 47, "start_tim": [46, 49, 57, 144, 145, 148, 158, 174, 206, 238], "start_titl": 47, "start_top": 47, "startstart": 402, "startswith": [52, 104, 238, 308], "startup": 1032, "stat": [2, 45, 47, 49, 104, 113, 172, 174, 193, 272, 275, 283, 287, 300, 326, 334, 335, 379, 391, 395, 416, 480, 599, 602, 603, 605, 606, 607, 611, 612, 613, 616, 689, 690, 811, 819, 821, 919, 920, 957, 997, 1004, 1018, 1046, 1048, 1052], "stat_learn_tut_index": [163, 164, 165], "state": [37, 88, 92, 104, 106, 113, 153, 219, 248, 256, 261, 269, 281, 326, 365, 370, 371, 382, 384, 388, 390, 394, 396, 397, 413, 421, 422, 427, 446, 449, 453, 455, 460, 465, 481, 551, 596, 686, 810, 811, 819, 821, 823, 851, 852, 858, 906, 907, 940, 997, 998, 1004, 1010, 1013, 1020, 1028, 1032, 1041, 1043, 1045, 1047, 1049, 1052, 1055], "state_to_print": 383, "stateless": [104, 357, 371, 396, 422, 589, 590, 596, 645, 874, 875, 883, 930, 991, 1018, 1055, 1058], "statement": [190, 384, 387, 390, 394, 396, 419], "static": [382, 384, 388, 390, 653, 654, 659, 660, 667, 668, 669, 670], "station": 179, "stationari": [178, 424, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "statist": [2, 47, 52, 114, 137, 140, 141, 152, 167, 171, 172, 187, 189, 190, 191, 192, 202, 204, 221, 267, 269, 272, 274, 277, 284, 292, 294, 315, 321, 326, 365, 375, 377, 379, 388, 396, 412, 413, 414, 415, 416, 418, 419, 421, 423, 439, 475, 480, 500, 501, 523, 524, 525, 527, 529, 548, 560, 566, 567, 569, 611, 612, 613, 616, 634, 637, 641, 642, 651, 656, 663, 697, 701, 703, 717, 723, 728, 730, 731, 738, 750, 795, 807, 823, 841, 868, 869, 887, 888, 889, 891, 896, 899, 900, 902, 916, 919, 920, 982, 997, 998, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1015, 1016, 1018, 1022, 1023, 1024, 1025, 1026, 1029, 1044, 1047, 1050, 1051, 1053, 1054, 1057], "statistician": [396, 891], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 637, "statlearnspars": [728, 730, 731], "statlib": 377, "statnikov": 1008, "statsmodel": [1004, 1027], "statu": [52, 135, 331, 376, 400, 503, 851, 852, 1057], "statweb": [656, 689, 690], "staub": 1045, "staubda": 1042, "std": [43, 50, 51, 52, 72, 81, 85, 89, 96, 101, 112, 114, 115, 124, 125, 126, 144, 146, 147, 153, 158, 180, 183, 185, 186, 190, 198, 205, 226, 248, 273, 274, 275, 277, 278, 280, 283, 285, 289, 290, 321, 337, 348, 357, 365, 396, 414, 418, 421, 522, 613, 616, 836, 891, 902, 1018, 1047, 1051], "std_": [279, 1044], "std_auc": 285, "std_display_styl": [250, 277, 813, 830], "std_error": 163, "std_fit_tim": [143, 297, 807, 821], "std_i": 190, "std_precis": 273, "std_predict": 181, "std_predictions_gpr": 174, "std_recal": 273, "std_scaler": 332, "std_score": [357, 1052], "std_score_tim": [143, 276, 807, 821], "std_test_precis": 273, "std_test_recal": 273, "std_test_scor": [105, 107, 143, 163, 171, 274, 275, 276, 283, 297, 478, 601, 807, 821, 1045, 1052], "std_time": 1045, "std_tpr": 285, "std_train_scor": [807, 821, 1045], "std_y_pr": 179, "stderr": [51, 840], "stdin": 390, "stdout": [47, 123, 225, 840, 860, 868, 869], "stds_california": 186, "stds_diabet": 186, "steadi": [906, 907], "steelblu": [124, 125, 160], "steep": [2, 175, 191, 284, 285, 414, 418, 424, 456, 462], "stef": [634, 998], "stefan": [1042, 1043, 1047, 1049], "stefani": [0, 1052, 1054, 1055, 1056, 1057, 1058], "stefanini": 1053, "stefano": 1041, "steffen": 1057, "stehl": [1053, 1054], "stein": 1045, "steinbach": [414, 1054, 1056], "steinfurt": [1049, 1051], "steingold": [1046, 1047], "steinlei": [414, 712], "steinley2004": 712, "stella": [414, 458, 468], "stellalin7": 1054, "stem": [140, 148, 192, 216, 266, 288, 418, 422, 1000, 1010], "step": [52, 58, 63, 69, 77, 89, 90, 93, 102, 104, 105, 106, 107, 108, 114, 118, 126, 130, 137, 142, 146, 147, 148, 158, 169, 170, 171, 176, 179, 190, 192, 217, 225, 235, 245, 246, 249, 255, 258, 266, 269, 273, 276, 282, 284, 289, 295, 297, 298, 303, 310, 313, 317, 320, 321, 325, 328, 339, 341, 345, 357, 358, 360, 365, 369, 377, 380, 381, 382, 384, 385, 387, 390, 394, 396, 408, 411, 412, 414, 416, 417, 419, 421, 422, 423, 448, 453, 455, 543, 544, 545, 546, 553, 570, 595, 596, 598, 600, 601, 604, 613, 634, 651, 655, 673, 674, 676, 683, 685, 686, 687, 701, 707, 804, 805, 807, 810, 811, 821, 842, 843, 844, 845, 867, 868, 869, 871, 872, 874, 911, 912, 913, 914, 916, 917, 954, 955, 978, 982, 998, 1004, 1007, 1012, 1013, 1018, 1022, 1024, 1025, 1027, 1031, 1039, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1055, 1057], "stephan": [715, 1042, 1048, 1049, 1051], "stephani": 1050, "stephen": [1032, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052], "stepwis": [153, 642, 661, 662, 663, 689, 690, 1004], "stern": [795, 1008], "steve": [1041, 1043, 1047, 1052, 1054], "steven": [1041, 1042, 1044, 1046, 1047, 1052, 1054, 1055, 1057], "steward": 1046, "stewart": [1044, 1049, 1052, 1054, 1057], "stick": [48, 804, 1007], "stijn": 1046, "stikhin": 1049, "still": [43, 52, 64, 68, 79, 88, 90, 92, 97, 115, 120, 127, 145, 150, 153, 158, 174, 180, 189, 190, 192, 193, 197, 202, 205, 217, 219, 235, 249, 278, 284, 288, 315, 326, 327, 330, 356, 357, 365, 371, 376, 381, 382, 386, 387, 388, 390, 396, 414, 418, 421, 422, 425, 446, 450, 460, 480, 503, 634, 639, 642, 644, 665, 666, 724, 763, 785, 788, 799, 800, 809, 810, 811, 824, 827, 889, 891, 911, 935, 960, 997, 998, 1002, 1004, 1007, 1008, 1011, 1014, 1016, 1023, 1024, 1026, 1028, 1031, 1032, 1039, 1041, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1057, 1058], "stine": [1047, 1048], "stochast": [2, 46, 93, 148, 149, 152, 164, 187, 195, 196, 204, 239, 241, 244, 249, 301, 303, 304, 309, 312, 327, 344, 414, 419, 421, 468, 494, 503, 509, 510, 511, 521, 529, 543, 551, 566, 567, 611, 634, 638, 646, 665, 666, 675, 679, 681, 683, 684, 685, 686, 694, 695, 696, 697, 699, 837, 860, 867, 868, 869, 872, 881, 915, 954, 955, 981, 997, 1011, 1012, 1014, 1029, 1030, 1033, 1034, 1039, 1040, 1043, 1044, 1046, 1048, 1050], "stochastic_gradi": [1041, 1042, 1048], "stock": [42, 81, 87, 187, 237, 238, 414, 416, 460, 477, 478, 696, 1005, 1029], "stogbauer": [614, 615], "stojanov": [1053, 1054], "stolbunov": 1044, "stone": [382, 919, 920, 1024], "stop": [43, 46, 51, 55, 79, 97, 136, 137, 143, 179, 181, 187, 191, 196, 204, 219, 319, 325, 382, 384, 390, 391, 396, 414, 419, 421, 423, 446, 447, 449, 451, 453, 455, 458, 460, 468, 469, 477, 478, 484, 488, 489, 490, 496, 503, 515, 516, 539, 543, 544, 545, 546, 547, 550, 552, 553, 554, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 595, 596, 598, 609, 624, 634, 651, 652, 653, 655, 656, 659, 663, 665, 666, 673, 674, 675, 676, 678, 683, 684, 685, 687, 698, 699, 702, 721, 757, 804, 805, 837, 868, 869, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 961, 981, 997, 1004, 1012, 1013, 1023, 1024, 1028, 1029, 1030, 1032, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056], "stop_n_inli": [678, 1004], "stop_prob": 678, "stop_scor": [678, 1004], "stop_word": [54, 57, 356, 357, 422, 595, 596, 598], "stop_words_": 1057, "stopiter": 1051, "stopword": 495, "storag": [0, 358, 396, 665, 666, 673, 674, 675, 683, 684, 685, 911, 1011, 1023, 1042, 1047], "storch": 1048, "store": [2, 68, 88, 89, 104, 106, 114, 120, 169, 182, 195, 203, 206, 221, 238, 245, 255, 265, 269, 280, 284, 334, 358, 364, 369, 376, 377, 382, 384, 389, 390, 391, 394, 396, 408, 410, 415, 417, 419, 421, 422, 424, 425, 444, 446, 450, 452, 456, 463, 470, 473, 475, 476, 479, 480, 481, 482, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 510, 515, 541, 542, 548, 556, 557, 562, 563, 564, 565, 570, 571, 572, 573, 576, 577, 592, 596, 617, 618, 634, 638, 639, 642, 656, 657, 661, 667, 668, 669, 670, 673, 674, 680, 682, 683, 684, 685, 695, 696, 697, 699, 704, 705, 707, 708, 709, 788, 804, 805, 807, 813, 821, 829, 830, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 866, 882, 889, 891, 892, 906, 907, 908, 937, 938, 964, 965, 978, 981, 993, 998, 1000, 1004, 1009, 1011, 1020, 1023, 1024, 1027, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "store_cent": [452, 1056], "store_covari": [70, 556, 557, 1044, 1046], "store_cv_result": [269, 680, 682, 829, 1057], "store_cv_valu": [680, 682, 1047, 1050, 1057], "store_precis": [69, 112, 475, 476, 479, 480, 481, 482], "stori": [189, 275, 292, 377, 1007], "stork": 1002, "stott": 1047, "stoyanov": [1047, 1048], "str": [47, 49, 52, 93, 95, 131, 133, 146, 170, 235, 254, 275, 287, 295, 305, 343, 356, 376, 377, 391, 422, 425, 426, 430, 435, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 463, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 583, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 624, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 699, 703, 704, 705, 706, 707, 709, 714, 716, 718, 720, 734, 736, 737, 739, 740, 745, 749, 778, 781, 785, 786, 787, 788, 789, 790, 791, 794, 796, 799, 800, 806, 807, 808, 809, 810, 811, 813, 814, 816, 818, 819, 821, 825, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 930, 932, 933, 936, 937, 938, 941, 945, 947, 951, 963, 964, 965, 967, 970, 991, 992, 995, 1054], "str_": [51, 284, 500, 507, 511, 517, 879], "strai": 1013, "straight": [128, 207, 213, 215, 272, 349, 369], "straightforward": [316, 381, 413, 419, 1032], "straka": 1051, "strateg": 397, "strategi": [2, 30, 43, 52, 87, 89, 93, 96, 105, 147, 152, 153, 158, 164, 169, 171, 185, 186, 187, 192, 202, 206, 217, 225, 235, 246, 254, 256, 267, 269, 274, 276, 278, 279, 280, 282, 283, 284, 285, 287, 289, 294, 309, 312, 314, 316, 317, 321, 322, 324, 325, 328, 358, 368, 384, 388, 395, 396, 408, 413, 418, 421, 422, 423, 426, 443, 444, 445, 451, 453, 458, 468, 478, 509, 511, 519, 521, 529, 540, 545, 558, 559, 568, 569, 571, 572, 574, 575, 595, 596, 598, 599, 601, 609, 634, 635, 637, 641, 652, 654, 658, 660, 662, 668, 670, 672, 680, 682, 698, 702, 711, 718, 720, 739, 762, 764, 802, 807, 809, 810, 811, 813, 821, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 868, 869, 876, 881, 892, 906, 911, 913, 916, 919, 920, 921, 922, 978, 997, 998, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1029, 1034, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057], "stratif": [808, 809, 815, 816, 823, 825, 826, 827, 978, 1048], "stratifi": [2, 44, 128, 144, 154, 168, 192, 232, 245, 254, 258, 269, 270, 275, 278, 284, 298, 303, 304, 324, 384, 396, 413, 558, 566, 574, 575, 609, 666, 673, 675, 683, 806, 807, 810, 811, 813, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 845, 860, 868, 978, 1008, 1011, 1044, 1045, 1046, 1048, 1049, 1052], "stratifiedgroupkfold": [2, 270, 1052], "stratifiedkfold": [2, 171, 262, 270, 281, 285, 337, 418, 443, 574, 575, 601, 609, 666, 680, 807, 808, 810, 811, 812, 813, 815, 817, 821, 825, 827, 830, 831, 832, 833, 834, 835, 836, 838, 892, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1052], "stratifiedshufflesplit": [2, 270, 345, 418, 1039, 1040, 1045, 1046, 1052], "stream": [47, 414, 419, 422, 468, 596, 880, 881, 891, 1000, 1047, 1050], "stream_reuters_docu": 47, "streamhandl": 1050, "streamlin": 1004, "street": [158, 172, 379], "strehl": 414, "strength": [51, 158, 181, 205, 217, 221, 276, 288, 324, 369, 417, 421, 452, 574, 575, 650, 655, 656, 659, 665, 666, 676, 679, 680, 681, 682, 683, 685, 687, 694, 790, 868, 869, 911, 912, 916, 917, 997, 1004, 1011, 1014, 1022, 1023], "stress": [697, 701, 1005, 1054], "stress_": 697, "stretch": [241, 264], "stretched_gaussian": 264, "strickland": 1045, "strict": [365, 380, 396, 410, 419, 510, 542, 595, 596, 598, 1004, 1039, 1048, 1051, 1057], "stricter": 185, "strictli": [64, 217, 235, 251, 315, 330, 357, 387, 396, 412, 417, 419, 421, 422, 515, 516, 542, 548, 551, 568, 569, 595, 598, 609, 649, 677, 678, 680, 682, 702, 707, 746, 773, 807, 810, 811, 817, 821, 834, 860, 887, 899, 903, 904, 906, 907, 911, 912, 916, 917, 953, 997, 999, 1004, 1008, 1018, 1022, 1040, 1050, 1055], "striebel": [1045, 1046], "strife": 1005, "strike": [148, 191, 221], "string": [2, 47, 105, 146, 182, 235, 246, 269, 279, 327, 332, 358, 369, 376, 377, 382, 383, 384, 388, 396, 415, 418, 421, 422, 423, 425, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 495, 496, 503, 512, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 624, 627, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 706, 716, 718, 726, 739, 769, 772, 778, 781, 785, 786, 787, 788, 799, 800, 804, 805, 807, 810, 811, 813, 821, 829, 830, 834, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 928, 935, 937, 938, 946, 947, 948, 971, 991, 992, 997, 998, 1008, 1021, 1023, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "strip": [54, 235, 357, 369, 376, 377, 503], "strip_acc": [595, 596, 598], "strip_accents_unicod": 1049, "stripe": 318, "stripplot": 190, "strive": [381, 397, 1032], "strong": [32, 43, 52, 89, 174, 187, 189, 190, 196, 210, 214, 215, 221, 222, 223, 250, 294, 322, 352, 412, 419, 421, 531, 656, 679, 1001, 1002, 1004, 1005, 1007, 1015, 1023, 1029], "stronger": [276, 650, 659, 665, 666, 679, 680, 681, 682, 683, 685, 694], "strongest": [55, 210], "strongli": [62, 64, 115, 118, 126, 147, 151, 190, 200, 232, 251, 281, 356, 382, 399, 400, 412, 421, 665, 743, 802, 1004, 1005, 1034, 1048, 1055], "stroudsburg": [908, 1021], "strubel": 1052, "struct": [380, 396, 1042], "structur": [0, 2, 42, 47, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 81, 87, 88, 89, 90, 91, 97, 115, 133, 135, 154, 173, 187, 237, 238, 241, 246, 251, 266, 270, 281, 300, 320, 325, 328, 333, 345, 349, 359, 360, 361, 369, 377, 379, 382, 384, 387, 394, 396, 397, 400, 411, 414, 416, 417, 418, 419, 421, 422, 423, 424, 447, 448, 451, 452, 456, 457, 458, 459, 460, 463, 468, 469, 477, 478, 503, 510, 511, 515, 518, 520, 521, 528, 537, 542, 548, 551, 570, 617, 618, 619, 623, 624, 625, 696, 703, 716, 720, 837, 859, 864, 891, 903, 904, 907, 919, 920, 921, 922, 925, 954, 955, 978, 981, 1005, 1007, 1008, 1011, 1013, 1014, 1018, 1021, 1024, 1027, 1028, 1029, 1039, 1040, 1042, 1043, 1045, 1049], "struggl": [381, 397, 414], "stuck": [96, 699, 1005], "student": [0, 125, 275, 1005, 1028, 1032], "studi": [43, 64, 95, 150, 217, 235, 278, 281, 282, 289, 356, 377, 379, 418, 423, 703, 715, 765, 766, 836, 1006, 1008, 1022], "studio": [380, 1032], "study_135": 376, "study_14": 376, "study_34": 376, "study_98": 376, "study_99": 376, "stuff": 1032, "stump": [139, 421, 566, 1050], "stupp": [1045, 1046], "stupperich": 1051, "sturla": 1041, "style": [114, 150, 206, 225, 235, 279, 382, 389, 414, 422, 449, 453, 465, 707, 813, 830, 937, 938, 951, 1039, 1042, 1053], "st\u00e9fan": 383, "st\u00e9phan": 1049, "st\u00e9phane": [1048, 1049, 1053, 1054], "su": [728, 730, 731], "sub": [47, 72, 83, 88, 90, 92, 95, 104, 132, 251, 253, 260, 326, 334, 335, 342, 345, 353, 377, 382, 384, 388, 396, 415, 421, 422, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 543, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 595, 597, 598, 604, 617, 618, 634, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 870, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 928, 965, 1004, 1008, 1022, 1049, 1053, 1055, 1056], "sub_sampl": 543, "subclass": [135, 384, 424, 581, 973, 1044, 1047, 1052, 1056], "subclust": [414, 448], "subcluster_centers_": [77, 448], "subcluster_labels_": 448, "subcompon": [123, 419], "subdirectori": 382, "subdivid": [377, 424], "subestim": 384, "subestimator__c": 384, "subestimator__class_weight": 384, "subestimator__du": 384, "subestimator__fit_intercept": 384, "subestimator__intercept_sc": 384, "subestimator__l1_ratio": 384, "subestimator__max_it": 384, "subestimator__multi_class": 384, "subestimator__n_job": 384, "subestimator__penalti": 384, "subestimator__random_st": 384, "subestimator__solv": 384, "subestimator__tol": 384, "subestimator__verbos": 384, "subestimator__warm_start": 384, "subexpress": 52, "subfold": [2, 380, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 510, 1052], "subgraph": 411, "subhash": 1053, "subhodeep": [1039, 1040, 1041], "subi": [1048, 1049, 1054], "subject": [16, 104, 155, 266, 278, 356, 377, 382, 384, 386, 394, 396, 397, 412, 416, 418, 419, 502, 665, 666, 692, 829, 874, 930, 977, 999, 1004, 1023, 1026, 1048, 1049, 1052, 1054], "subject_body_extractor": 104, "subject_body_transform": 104, "subjectbodi": 104, "subjectbodyextractor": 104, "sublinear": [419, 597, 598], "sublinear_tf": [356, 419, 422, 597, 598], "submatric": 411, "submatrix": [411, 429, 457, 459], "submiss": 382, "submit": [379, 380, 381, 384, 385, 386, 387, 390, 396, 397, 400], "submitt": 381, "submodel": 418, "submodul": [386, 1000, 1006, 1039], "subobject": [428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 810, 811, 821, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922], "suboptim": [418, 707, 709, 789, 796, 1011, 1047, 1055], "subpackag": [382, 386, 1043, 1048], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 85, 86, 88, 89, 90, 91, 92, 95, 97, 100, 101, 107, 109, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 128, 132, 133, 137, 139, 140, 142, 143, 144, 146, 147, 148, 151, 153, 155, 156, 158, 159, 160, 167, 176, 178, 183, 185, 186, 190, 191, 193, 195, 198, 201, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 225, 230, 231, 233, 235, 237, 238, 241, 242, 244, 245, 247, 249, 250, 252, 253, 254, 255, 260, 261, 262, 263, 265, 266, 269, 270, 271, 272, 275, 277, 278, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 295, 297, 298, 299, 300, 303, 304, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 328, 329, 337, 339, 342, 343, 344, 345, 349, 351, 352, 353, 354, 356, 357, 358, 360, 361, 378, 389], "subplot_kw": [237, 299], "subplot_spec": 389, "subplot_titl": 143, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 80, 85, 86, 89, 97, 99, 113, 115, 121, 125, 126, 132, 139, 140, 158, 190, 216, 217, 232, 235, 244, 252, 260, 262, 263, 266, 270, 286, 300, 308, 310, 313, 317, 326, 335, 342, 345], "subpopul": [234, 686, 1004], "subproblem": 1044, "subrahmanyam": [1039, 1042], "subramaniam": [1054, 1055, 1056], "subramaniyan": 1051, "subramanyam": 1046, "subrat": 1051, "subrat93": 1051, "subsampl": [132, 149, 152, 191, 234, 271, 322, 326, 464, 566, 567, 568, 569, 570, 639, 686, 708, 810, 811, 837, 876, 888, 900, 933, 943, 1000, 1004, 1028, 1039, 1049, 1053, 1055, 1056, 1057], "subscrib": 1037, "subscript": [370, 1052], "subsect": [25, 370, 382], "subsequ": [46, 68, 93, 109, 126, 137, 169, 204, 219, 277, 280, 295, 297, 345, 365, 382, 384, 386, 388, 396, 410, 414, 415, 421, 424, 443, 503, 515, 560, 561, 566, 568, 569, 673, 675, 683, 810, 811, 839, 840, 843, 846, 847, 848, 849, 850, 868, 886, 890, 998, 1007, 1009, 1048, 1049, 1053, 1055, 1057], "subset": [2, 46, 57, 58, 63, 64, 68, 104, 105, 113, 114, 144, 146, 147, 148, 163, 169, 172, 191, 193, 206, 218, 232, 233, 234, 235, 247, 249, 253, 254, 269, 273, 276, 278, 284, 285, 287, 292, 320, 321, 326, 334, 338, 356, 357, 358, 365, 377, 382, 390, 394, 396, 411, 412, 414, 415, 418, 421, 422, 424, 431, 443, 455, 470, 472, 473, 475, 494, 495, 499, 500, 504, 515, 556, 557, 558, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 609, 617, 636, 646, 647, 648, 649, 658, 662, 665, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 704, 710, 711, 718, 720, 723, 725, 738, 741, 762, 764, 800, 803, 806, 809, 829, 835, 837, 839, 840, 841, 842, 846, 847, 848, 849, 850, 853, 858, 861, 868, 877, 906, 907, 911, 913, 916, 919, 921, 933, 976, 997, 1004, 1008, 1009, 1019, 1021, 1023, 1024, 1042, 1047, 1048, 1050, 1052, 1057, 1058], "subset_featur": 105, "subset_label": 235, "subsidi": 190, "subspac": [130, 417, 421, 458, 522, 562, 563, 698, 702, 955, 1002, 1011, 1014, 1020, 1032], "substanti": [163, 297, 301, 302, 316, 382, 857, 1014, 1043, 1046], "substitut": [405, 991, 1028, 1045], "subtl": [354, 365, 1007, 1028], "subtleti": 1034, "subtract": [179, 190, 254, 417, 419, 449, 453, 465, 541, 651, 652, 1046, 1056], "subtre": [564, 565, 566, 567, 571, 572, 919, 920, 921, 922, 1024], "subwindow": 1024, "succe": [130, 153, 202, 289], "succeed": 382, "success": [2, 85, 167, 187, 267, 279, 282, 283, 351, 365, 409, 414, 418, 419, 421, 522, 571, 586, 807, 810, 811, 828, 916, 1011, 1029, 1032, 1034, 1051], "successfulli": [43, 53, 319, 381, 386, 408, 414, 422, 1022], "successor": [456, 462, 1024, 1027], "suchak": 1052, "sudo": [380, 400], "suen": 1012, "suffer": [118, 145, 192, 295, 315, 357, 369, 414, 421, 551, 770, 1003, 1004, 1008, 1011, 1048], "suffic": [92, 93, 384], "suffici": [2, 64, 90, 158, 225, 290, 345, 369, 396, 414, 423, 539, 664, 689, 690, 823, 826, 827, 1009, 1011, 1028, 1048, 1054, 1055], "suffix": [400, 834, 1008, 1049], "suganthan": 379, "sugar": [172, 379], "suggest": [113, 126, 140, 144, 190, 193, 275, 345, 369, 381, 382, 389, 396, 418, 419, 421, 475, 480, 572, 652, 836, 1002, 1004, 1005, 1013, 1016, 1023, 1043, 1050, 1053, 1056], "suh": 1047, "suha": 1057, "suit": [58, 123, 156, 190, 217, 218, 244, 265, 327, 328, 330, 356, 370, 382, 384, 387, 388, 390, 400, 402, 408, 417, 419, 421, 456, 458, 510, 684, 848, 892, 949, 997, 1000, 1005, 1008, 1010, 1011, 1022, 1027, 1028, 1032, 1046, 1053], "suitabl": [141, 150, 202, 203, 221, 311, 358, 376, 377, 388, 391, 408, 414, 419, 422, 458, 468, 474, 493, 512, 515, 634, 642, 846, 847, 850, 885, 886, 909, 972, 976, 1002, 1004, 1007, 1018, 1020, 1022, 1027, 1053, 1054], "sullivan": [1042, 1043, 1044], "sultan": 1053, "sum": [2, 30, 47, 55, 57, 63, 96, 114, 121, 126, 132, 149, 150, 168, 172, 182, 190, 199, 213, 217, 221, 232, 235, 238, 240, 254, 269, 284, 295, 302, 305, 328, 332, 338, 349, 350, 352, 356, 357, 358, 364, 379, 388, 396, 411, 412, 414, 416, 417, 419, 420, 421, 422, 424, 437, 448, 449, 453, 455, 465, 470, 471, 488, 489, 490, 522, 527, 530, 538, 541, 543, 544, 548, 551, 552, 553, 556, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 597, 598, 618, 620, 630, 632, 642, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 683, 684, 685, 686, 688, 691, 697, 701, 703, 706, 716, 717, 726, 733, 748, 763, 765, 766, 770, 795, 839, 840, 844, 845, 854, 858, 862, 869, 870, 890, 891, 911, 912, 914, 917, 919, 920, 921, 922, 957, 982, 988, 993, 1004, 1008, 1009, 1010, 1011, 1023, 1024, 1042, 1043, 1045, 1047, 1048, 1050, 1055, 1056], "sum_": [275, 284, 352, 411, 412, 414, 419, 420, 421, 545, 547, 554, 703, 762, 1002, 1004, 1005, 1008, 1010, 1012, 1013, 1015, 1016, 1018, 1022, 1023, 1024], "sum_gradi": 421, "sum_h": 1013, "sum_hessian": 421, "sum_i": [327, 421, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 999, 1000, 1004, 1006, 1008, 1013], "sum_j": [653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 1004, 1008, 1013], "sum_k": [421, 556, 1024], "sum_m": 421, "sum_n": [282, 714, 1008], "sum_n_compon": [470, 870], "sum_over_featur": [1039, 1054], "sum_weight": 988, "sumit": 1053, "summar": [217, 266, 282, 284, 358, 382, 384, 399, 421, 528, 665, 701, 713, 714, 1004, 1005, 1008, 1014, 1034], "summari": [52, 172, 328, 364, 365, 379, 394, 568, 569, 699, 720, 795, 924, 1006, 1009, 1027, 1058], "summaris": [246, 325], "summat": [1010, 1012], "summer": [0, 43, 52, 83, 179, 1039], "sun": [43, 153, 191, 1047, 1052, 1053], "sundai": 43, "sundaramahalingam": 1056, "sung": 1050, "sunglok": 1004, "sunita": 790, "sunitha": 1051, "sunmi": 1050, "super": [57, 62, 64, 384, 422, 1047], "superflu": 419, "superimpos": 419, "superior": 421, "superposit": 202, "supersed": [381, 1044], "superset": [418, 828, 1008], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 84, 89, 93, 118, 131, 142, 153, 165, 176, 238, 249, 252, 262, 275, 304, 326, 337, 342, 345, 349, 357, 358, 369, 377, 384, 395, 396, 412, 414, 417, 418, 419, 421, 422, 424, 443, 445, 470, 494, 510, 511, 560, 595, 597, 600, 601, 641, 683, 736, 808, 809, 812, 814, 815, 816, 817, 822, 823, 824, 825, 826, 827, 831, 832, 833, 834, 836, 837, 860, 870, 871, 875, 885, 892, 906, 907, 908, 916, 1002, 1005, 1008, 1010, 1011, 1014, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1034, 1039, 1045, 1051], "supervised_learning_tut": [164, 165], "supp": 390, "suppli": [153, 394, 414, 653, 937, 938, 1011, 1032, 1043, 1045, 1047, 1052], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 81, 104, 105, 106, 136, 141, 157, 158, 168, 169, 179, 191, 218, 227, 228, 229, 235, 249, 250, 251, 257, 268, 273, 280, 282, 292, 295, 313, 315, 319, 328, 332, 334, 335, 338, 339, 341, 342, 345, 346, 347, 348, 349, 350, 352, 369, 370, 371, 376, 380, 382, 384, 386, 387, 388, 389, 391, 392, 395, 396, 397, 408, 414, 418, 419, 422, 423, 424, 443, 446, 456, 458, 459, 470, 472, 473, 475, 480, 493, 503, 519, 545, 547, 548, 551, 554, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 620, 621, 622, 624, 626, 627, 629, 630, 632, 634, 638, 639, 640, 650, 652, 664, 665, 666, 677, 678, 679, 681, 682, 683, 684, 685, 694, 697, 701, 706, 714, 720, 736, 737, 745, 750, 785, 786, 787, 790, 791, 794, 795, 807, 810, 811, 813, 821, 829, 834, 835, 843, 844, 849, 851, 852, 855, 857, 863, 871, 872, 876, 882, 884, 885, 887, 891, 899, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 933, 943, 949, 950, 995, 997, 998, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1022, 1027, 1028, 1029, 1030, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "support_": [250, 351, 475, 480, 600, 601, 609, 913, 914, 915, 916, 917, 1023], "support_fract": [48, 475, 480], "support_reweight": [475, 480], "support_vector": [343, 349], "support_vector_indic": 343, "support_vectors_": [46, 49, 346, 349, 350, 913, 914, 915, 916, 917, 1023], "suppos": [251, 278, 334, 369, 370, 382, 384, 386, 388, 416, 421, 422, 423, 564, 568, 571, 665, 666, 673, 675, 681, 682, 683, 857, 911, 913, 916, 919, 921, 943, 1012, 1048, 1050, 1056], "suppress": [190, 369, 390, 699, 1011, 1046], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 85, 88, 92, 95, 102, 109, 123, 126, 133, 137, 146, 147, 155, 158, 183, 190, 191, 193, 211, 216, 232, 233, 237, 238, 239, 253, 263, 269, 271, 288, 289, 313, 315, 317, 324, 326, 334, 335, 339, 351, 352, 361], "surac": 1049, "sure": [2, 63, 91, 210, 223, 251, 252, 269, 365, 369, 370, 376, 380, 381, 382, 383, 384, 386, 387, 390, 394, 400, 412, 415, 422, 500, 530, 656, 937, 938, 949, 960, 993, 998, 1005, 1022, 1027, 1028, 1046, 1047, 1049, 1054, 1058], "suresh": 1053, "surf": 191, "surfac": [67, 127, 136, 137, 138, 139, 141, 159, 187, 201, 209, 226, 281, 298, 341, 342, 359, 360, 362, 363, 364, 421, 511, 560, 564, 571, 638, 771, 919, 925, 1002, 1007, 1022, 1023, 1024, 1029], "surface_": 638, "surgan12": 1048, "surpass": [137, 349, 868, 869], "surplu": 418, "surpris": [88, 191, 380, 1004, 1027, 1041], "surprisingli": [235, 377, 422], "surrend": 57, "surrog": 1032, "surround": [252, 382, 857, 1014], "survei": [190, 417], "surviv": [105, 192, 997, 1027], "surya": [1052, 1053], "suscept": 408, "susik": 1043, "suspect": 43, "suspici": 377, "sustain": 0, "sutherland": [1041, 1043, 1044, 1046, 1047, 1048, 1049], "sutiono": 1050, "suzuki": [1050, 1051], "sv": 1023, "sv_ind": 250, "sv_ratio": 250, "svc": [2, 45, 62, 64, 66, 67, 68, 104, 108, 148, 159, 165, 175, 187, 195, 208, 249, 252, 256, 268, 273, 275, 277, 280, 281, 282, 285, 286, 317, 320, 324, 326, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 353, 354, 356, 369, 384, 388, 396, 412, 415, 418, 421, 440, 441, 442, 443, 474, 522, 562, 704, 705, 707, 709, 807, 824, 838, 840, 871, 908, 909, 911, 913, 914, 917, 995, 997, 1003, 1006, 1008, 1009, 1018, 1029, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057], "svc__c": [317, 871], "svc_disp": [257, 324, 1036], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 257, "svcsvc": [256, 273, 275, 326], "svd": [2, 70, 130, 156, 238, 357, 391, 410, 417, 426, 457, 459, 488, 489, 491, 528, 539, 540, 541, 542, 546, 547, 548, 551, 553, 556, 557, 671, 679, 680, 681, 692, 693, 694, 870, 955, 1002, 1041, 1045, 1046, 1052, 1054, 1057], "svd__n_compon": 870, "svd_lapack_driv": 955, "svd_method": [57, 457, 459, 539, 1042], "svd_solver": [45, 104, 123, 130, 331, 332, 410, 419, 542, 548, 1045, 1057], "sven": [1053, 1054], "svg": [0, 402], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 104, 106, 108, 123, 146, 156, 159, 162, 164, 166, 171, 172, 176, 178, 187, 196, 199, 201, 209, 210, 227, 228, 229, 230, 244, 250, 252, 253, 256, 257, 268, 272, 273, 274, 275, 277, 278, 280, 281, 282, 283, 285, 286, 290, 301, 306, 307, 310, 312, 317, 318, 324, 326, 333, 337, 338, 340, 343, 351, 352, 356, 369, 377, 384, 388, 396, 415, 418, 419, 421, 423, 440, 441, 442, 443, 501, 511, 519, 522, 548, 562, 563, 570, 574, 575, 584, 600, 601, 606, 607, 612, 638, 646, 650, 675, 683, 684, 685, 696, 704, 705, 707, 709, 720, 742, 749, 768, 807, 821, 827, 833, 834, 837, 839, 840, 857, 871, 872, 884, 886, 891, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 995, 997, 1000, 1003, 1005, 1006, 1008, 1009, 1013, 1021, 1023, 1025, 1029, 1030, 1034, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "svm1": 415, "svm2": 415, "svm__c": 108, "svm_weight": 168, "svm_weights_select": 168, "svmlight": [2, 375, 493, 515, 516, 1034, 1039, 1040, 1046, 1048], "svmlight_file_test": 516, "svmlight_file_train": 516, "svmsgd": 1022, "svr": [2, 46, 49, 187, 243, 324, 340, 369, 402, 440, 441, 442, 563, 574, 575, 600, 601, 650, 685, 807, 813, 912, 914, 916, 1001, 1029, 1039, 1041, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "svr_fit": 250, "svr_lin": 351, "svr_poli": 351, "svr_predict": 250, "svr_rbf": 351, "sw": 295, "sw_test": [61, 325], "sw_train": [61, 325], "swap": [2, 414, 419, 723, 743, 986, 987, 1039], "swapnil": 1053, "swart": 55, "sweep": 867, "swier": [1050, 1051], "swiss": [2, 102, 187, 236, 237, 242, 414, 537, 699, 700, 1029, 1053], "switch": [368, 685, 711, 724, 744, 762, 764, 802, 851, 852, 954, 955, 1008, 1011, 1034, 1039], "swpeas": 1052, "swu": 1043, "sy": [47, 51, 57, 225, 248, 295, 338, 358, 377, 394, 624], "syd": 1054, "sydnei": 0, "syhw": [1040, 1041], "sylvain": [0, 372, 1043, 1048, 1049, 1050, 1051, 1052, 1053], "sylvainlan": [1047, 1048, 1049, 1050, 1051], "symbol": [51, 358, 370, 384, 388, 416, 422, 506, 589, 595, 596, 598, 923, 925, 1027], "symbol_dict": 51, "symlink": 386, "symlognorm": [197, 202], "symmetr": [2, 79, 150, 183, 193, 219, 396, 412, 414, 458, 468, 469, 480, 526, 534, 536, 697, 701, 702, 711, 712, 722, 723, 724, 729, 731, 735, 743, 744, 762, 764, 770, 792, 802, 804, 805, 993, 997, 1004, 1008, 1011, 1055], "symmetri": [172, 379, 706, 884, 887, 899, 1006], "symmetric_arrai": 993, "symposium": [172, 379, 414, 466], "symptomat": 269, "synchron": [382, 422], "syndrom": 376, "synonym": [396, 853, 854, 855, 861, 862, 863], "synonymi": 419, "syntax": [370, 382, 387, 390, 415, 474, 870, 871, 909, 997, 1050, 1052], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 84, 144, 150, 156, 174, 179, 181, 191, 207, 219, 234, 310, 317, 352, 365, 369, 375, 385, 397, 414, 416, 423, 665, 666, 911, 912, 918, 1002, 1045], "synthetic_feature_weight": [665, 666], "syonekura": 1047, "system": [44, 128, 202, 275, 282, 332, 365, 369, 370, 371, 377, 379, 382, 383, 384, 385, 390, 394, 400, 408, 414, 419, 421, 425, 450, 477, 478, 484, 542, 546, 550, 557, 646, 652, 657, 658, 661, 662, 663, 689, 690, 733, 763, 776, 804, 860, 906, 907, 1004, 1008, 1011, 1020, 1027, 1028, 1032, 1039, 1047, 1048], "systemat": [43, 153, 275, 719, 735, 927, 929, 1008, 1054], "sysuresh": 1053, "szabo": [1041, 1042], "szepieniec": 1045, "szlam": [419, 954, 955], "szpak": [1046, 1049], "szyma\u0144ski": [1047, 1048], "s\u00e1nchez": 1051, "s\u00e3o": 1057, "s\u00e4ger": [1042, 1045], "s\u00e9bastien": [1032, 1045, 1047], "s\u00e9rgio": 1058, "s\u00f6nke": 1049, "s\u00f8ren": 1056, "s\u0142apek": 1050, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 87, 89, 93, 104, 106, 111, 112, 113, 115, 117, 121, 124, 125, 130, 132, 133, 137, 140, 141, 149, 150, 151, 152, 153, 157, 158, 172, 175, 177, 178, 179, 182, 183, 187, 190, 191, 192, 193, 197, 199, 202, 211, 214, 215, 216, 217, 218, 235, 236, 238, 239, 240, 241, 251, 252, 261, 264, 266, 269, 274, 275, 288, 289, 294, 295, 308, 312, 324, 327, 328, 330, 334, 335, 337, 341, 342, 345, 346, 350, 356, 357, 358, 363, 364, 365, 369, 370, 376, 377, 379, 382, 384, 386, 388, 390, 395, 396, 400, 405, 408, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 427, 431, 434, 437, 439, 443, 453, 454, 456, 462, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 502, 503, 520, 521, 522, 526, 527, 532, 537, 539, 541, 548, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 597, 598, 601, 614, 615, 617, 618, 634, 635, 637, 638, 639, 640, 642, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 702, 703, 711, 717, 723, 724, 733, 743, 744, 762, 763, 764, 774, 795, 796, 801, 802, 806, 807, 810, 811, 821, 829, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 857, 858, 861, 862, 867, 868, 869, 877, 880, 881, 882, 884, 885, 891, 892, 904, 906, 907, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 930, 955, 956, 971, 997, 1000, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1022, 1023, 1024, 1029, 1033, 1034, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 81, 83, 85, 87, 93, 97, 99, 126, 202, 203, 232, 233, 234, 239, 242, 244, 248, 250, 276, 331, 356, 357, 358, 683, 684, 685], "t1": [79, 81, 97, 232, 239, 242, 244], "t15h": 1046, "t_": [673, 674, 675, 683, 684, 685, 868, 869, 1022], "t_0": 1022, "t_batch": 99, "t_i": 1010, "t_k": [421, 1008, 1024], "t_m": 1024, "t_mini_batch": [77, 99], "t_p": 282, "t_post": 275, "t_sne": [237, 1047], "t_stat": 275, "t_stat_uncorrect": 275, "t_t": 1024, "taa": 182, "taac": 182, "tab": [46, 48, 70, 88, 113, 137, 153, 155, 158, 174, 179, 181, 204, 206, 269, 325, 331, 415, 1046], "tab10": [249, 265], "tab20b": 43, "taba": 1058, "tabea": [1054, 1055], "tabibian": 1045, "tabl": [93, 235, 275, 382, 383, 391, 414, 422, 589, 665, 687, 807, 821, 848, 972, 1004, 1008, 1009, 1014, 1027, 1040], "tabular": [43, 52, 191, 384, 421, 1016, 1027], "tacit": 396, "tacitli": 1041, "tackl": [151, 275, 370, 382, 414, 848, 1010, 1032], "tadej": [1040, 1041], "tae": 1051, "taehoon": [1046, 1047], "taemin": 1004, "tag": [2, 47, 84, 105, 244, 336, 376, 381, 385, 386, 390, 394, 396, 410, 422, 431, 437, 503, 839, 927, 928, 929, 931, 932, 944, 960, 991, 996, 1028, 1031, 1044, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1058], "tahar": 1046, "tahiri": 1051, "taifi": 1045, "tail": [52, 150, 186, 190, 217, 219, 275, 315, 528, 531, 1004], "tail_strength": [332, 528, 531], "takanori": 1047, "take": [2, 44, 47, 52, 58, 66, 81, 88, 90, 92, 101, 109, 113, 121, 123, 137, 146, 174, 176, 179, 183, 190, 195, 201, 221, 225, 226, 241, 251, 262, 263, 269, 270, 276, 280, 284, 285, 294, 295, 298, 301, 302, 303, 305, 306, 315, 328, 332, 337, 341, 342, 345, 354, 357, 358, 361, 369, 370, 371, 376, 377, 380, 382, 384, 387, 388, 389, 390, 394, 396, 397, 405, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 426, 443, 449, 452, 453, 455, 456, 458, 463, 464, 465, 467, 469, 475, 526, 540, 545, 546, 547, 553, 554, 588, 599, 602, 603, 605, 606, 607, 617, 618, 623, 627, 628, 631, 639, 650, 656, 678, 680, 681, 682, 683, 686, 698, 699, 706, 712, 714, 716, 726, 736, 737, 745, 750, 763, 778, 781, 785, 786, 787, 788, 790, 791, 794, 795, 807, 808, 812, 813, 821, 825, 835, 853, 854, 855, 857, 859, 860, 861, 862, 863, 875, 885, 906, 907, 911, 912, 913, 914, 915, 916, 917, 941, 977, 997, 1000, 1004, 1005, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1018, 1023, 1024, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "takeawai": 294, "taken": [37, 43, 46, 67, 77, 88, 90, 152, 172, 179, 190, 248, 249, 263, 281, 292, 317, 377, 379, 381, 382, 386, 396, 414, 418, 422, 426, 446, 540, 568, 569, 590, 591, 653, 654, 657, 659, 660, 661, 665, 666, 667, 668, 669, 670, 684, 686, 688, 691, 702, 884, 885, 905, 908, 914, 915, 966, 1008, 1010, 1018, 1020, 1045, 1048, 1051, 1052], "takeshi": [1047, 1052, 1053, 1054], "takeuchi": 377, "takingitcasu": [1047, 1048], "talbot": 280, "talgatomarov": 1050, "talk": [57, 104, 276, 356, 357, 358, 377, 396, 408, 1032, 1034], "talli": 420, "tallott": 1047, "talwalkar": 997, "tamara": [377, 1056, 1058], "tamer": 1054, "tami": 93, "tamir": [1050, 1053], "tamirlan1": 1050, "tamper": 47, "tampermonkei": 390, "tan": [868, 869, 1012, 1046], "tandfonlin": 414, "tang": [379, 1049, 1050, 1051], "tangent": [237, 349, 696, 700, 1006, 1033, 1034], "tanh": [349, 784, 868, 869, 1006, 1023], "tanjina": 1056, "tann": [1047, 1052], "tao": [1055, 1056], "tar": [47, 386], "taranjeet": 1045, "tarashanski": 1056, "tarbal": [386, 1054], "tarcusx": 1047, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 80, 87, 103, 105, 107, 108, 118, 120, 127, 129, 131, 138, 145, 146, 147, 148, 150, 151, 153, 155, 157, 158, 159, 161, 165, 167, 170, 172, 174, 176, 179, 180, 186, 187, 189, 190, 191, 192, 197, 201, 202, 210, 213, 217, 219, 221, 222, 225, 226, 238, 245, 247, 248, 249, 250, 253, 254, 255, 262, 268, 269, 271, 273, 276, 278, 280, 281, 284, 285, 289, 292, 294, 295, 298, 303, 306, 307, 311, 314, 315, 325, 326, 328, 330, 334, 335, 338, 339, 341, 342, 345, 349, 351, 356, 357, 361, 362, 363, 364, 365, 369, 371, 374, 375, 376, 377, 378, 379, 382, 384, 386, 387, 390, 391, 395, 399, 408, 414, 417, 418, 421, 424, 438, 443, 444, 445, 448, 451, 470, 471, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 515, 517, 527, 531, 538, 539, 541, 543, 544, 546, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 580, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 634, 635, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 704, 705, 707, 708, 709, 714, 715, 716, 719, 720, 725, 727, 728, 730, 731, 733, 734, 735, 736, 737, 742, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 789, 790, 791, 792, 794, 795, 796, 797, 798, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 858, 860, 861, 862, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 895, 900, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 930, 931, 937, 969, 970, 971, 996, 999, 1000, 1001, 1004, 1005, 1008, 1012, 1015, 1016, 1022, 1023, 1024, 1028, 1029, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "target_class": 320, "target_column": [495, 496, 503], "target_encod": 322, "target_filenam": [508, 512], "target_gener": 180, "target_idx": 639, "target_mean_": [892, 1018], "target_nam": [45, 57, 66, 87, 120, 127, 131, 189, 226, 238, 262, 268, 276, 284, 285, 298, 321, 338, 356, 361, 375, 377, 494, 495, 497, 499, 500, 501, 503, 504, 507, 509, 510, 511, 512, 517, 720, 1008, 1024, 1049], "target_opset": 408, "target_tag": [384, 930, 944], "target_test": [269, 516], "target_train": [269, 516], "target_typ": [321, 892, 941, 970, 1056], "target_type_": 892, "targetencod": [2, 321, 322, 396, 884, 885, 998, 1018, 1027, 1055, 1056], "targetencodertargetencod": 321, "targets_test": 249, "targets_train": 249, "targettag": [2, 930], "tari": 93, "tashai": [1047, 1048], "task": [2, 38, 43, 46, 126, 144, 145, 151, 153, 171, 182, 187, 196, 202, 203, 206, 216, 217, 233, 237, 254, 269, 272, 289, 294, 349, 358, 369, 371, 377, 379, 381, 382, 387, 388, 391, 394, 395, 396, 419, 421, 422, 423, 424, 454, 467, 500, 512, 522, 599, 602, 603, 605, 606, 607, 611, 612, 613, 616, 639, 640, 653, 654, 659, 660, 667, 668, 669, 670, 681, 688, 691, 734, 736, 737, 761, 789, 791, 794, 796, 808, 812, 825, 831, 973, 974, 1005, 1008, 1009, 1010, 1011, 1019, 1021, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1034, 1039, 1044, 1048, 1054], "tast": 1039, "tata": 1056, "tau": 1018, "tau_0": 543, "tavenard": 1051, "tax": 0, "taxonom": 379, "taylor": [421, 1047, 1049, 1050, 1053], "tb": 390, "tc": [172, 379, 397], "tcg": 182, "tch": [172, 379], "tcompl": 93, "tcpdump": 377, "tda": 1027, "teach": 382, "teacher": 104, "teal": [218, 227, 282], "team": [377, 385, 394, 396, 397, 1027, 1032, 1039], "teas": 190, "tech": [51, 379, 849], "technic": [182, 190, 218, 238, 328, 377, 379, 382, 396, 421, 659, 671, 692, 693, 906, 997, 1004, 1005, 1011], "technion": [671, 692, 693, 1004], "techniqu": [11, 26, 51, 56, 104, 106, 125, 133, 138, 148, 164, 171, 172, 186, 187, 189, 225, 239, 241, 280, 292, 299, 327, 335, 349, 360, 371, 379, 394, 396, 408, 412, 414, 418, 419, 420, 421, 422, 423, 453, 454, 455, 456, 541, 561, 684, 696, 697, 700, 701, 733, 763, 1000, 1004, 1005, 1007, 1008, 1011, 1014, 1016, 1020, 1022, 1024, 1028, 1032, 1052], "technolog": 379, "technologi": [172, 379, 414, 1027, 1032], "technometr": [379, 416, 475, 480, 1014], "tediou": [158, 269], "teen": 1018, "teevan": [848, 1010], "teh": [867, 1013], "tejesh95": 1043, "telecom": 1032, "telenczuk": [172, 1048, 1051, 1052, 1054], "tell": [174, 190, 191, 251, 275, 345, 350, 370, 377, 414, 422, 570, 586, 997, 1002, 1015], "temp": [43, 191], "temp_fold": 973, "temperatur": [191, 422, 1015], "tempfil": [89, 297, 324, 415, 1011], "templat": [382, 386, 387, 396, 397, 564, 565, 570, 571, 572, 573, 1027], "templateclassifi": 384, "tempor": [52, 153, 202, 1027, 1028], "temporari": [89, 104, 106, 369, 474, 694, 788, 909, 1011, 1042, 1043, 1046, 1052, 1053], "temporarili": [414, 1044], "temporarydirectori": [297, 324], "tempt": 190, "temptat": [365, 382], "ten": [54, 57, 137, 143, 153, 172, 238, 266, 377, 379, 421, 527, 916, 1048], "tenavi": 1053, "tend": [43, 51, 64, 72, 74, 78, 87, 90, 92, 170, 172, 190, 191, 206, 217, 222, 235, 254, 260, 263, 272, 276, 288, 294, 313, 349, 358, 369, 371, 382, 384, 396, 412, 414, 416, 419, 421, 423, 443, 454, 660, 857, 888, 900, 955, 1004, 1005, 1011, 1024], "tendenc": [153, 242, 1004, 1005, 1007, 1010, 1013], "tenenbaum": [695, 1005], "tenenhau": 379, "tensor": [2, 195, 374, 410, 419, 545, 547, 554, 646, 647, 648, 1034, 1051, 1057], "tensorflow": [45, 394], "tensorsketch": 1000, "tent": 388, "tenur": 1032, "teon": 1051, "terenc": [1051, 1052], "term": [2, 43, 53, 54, 62, 68, 93, 128, 140, 143, 147, 150, 179, 189, 202, 204, 205, 206, 217, 219, 221, 231, 234, 235, 254, 269, 273, 277, 295, 310, 327, 349, 352, 356, 358, 371, 382, 384, 394, 412, 414, 416, 418, 419, 421, 449, 453, 455, 458, 465, 468, 531, 542, 545, 547, 551, 554, 556, 595, 596, 597, 598, 611, 614, 615, 639, 640, 647, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 681, 682, 683, 685, 687, 694, 702, 737, 745, 790, 791, 794, 868, 869, 886, 890, 893, 911, 912, 913, 914, 915, 916, 917, 997, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1018, 1022, 1023, 1047, 1053, 1054, 1055], "term1": 422, "term2": 422, "term3": 422, "termin": [370, 387, 388, 390, 400, 414, 428, 454, 467, 560, 561, 565, 566, 567, 570, 572, 673, 674, 675, 683, 685, 868, 869, 920, 922, 1014, 1024], "terminalipythonapp": 388, "terminalpdb": 390, "termination_condition_": 908, "terminologi": [396, 1047], "terraza": 1051, "terri": 1043, "terrycojon": 1043, "tesson": 414, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 104, 105, 117, 128, 137, 140, 142, 143, 144, 145, 149, 150, 151, 152, 153, 163, 165, 166, 168, 171, 174, 175, 187, 189, 190, 191, 192, 193, 195, 202, 206, 210, 212, 213, 217, 218, 219, 221, 222, 224, 225, 232, 233, 235, 241, 245, 250, 251, 253, 262, 267, 268, 269, 270, 273, 274, 275, 276, 277, 279, 280, 282, 283, 285, 286, 287, 289, 294, 298, 303, 304, 310, 312, 317, 319, 320, 321, 322, 331, 338, 345, 352, 358, 365, 369, 370, 376, 377, 379, 385, 386, 387, 388, 394, 395, 396, 399, 400, 407, 409, 410, 412, 413, 415, 416, 419, 421, 422, 423, 424, 431, 433, 434, 437, 440, 441, 442, 443, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 500, 504, 505, 509, 511, 531, 538, 544, 546, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 599, 601, 602, 603, 605, 606, 607, 609, 611, 612, 613, 615, 616, 617, 618, 634, 635, 637, 642, 643, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 719, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 858, 861, 862, 868, 869, 871, 896, 897, 899, 900, 901, 902, 906, 907, 909, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 927, 928, 929, 930, 936, 947, 949, 950, 1003, 1004, 1007, 1008, 1011, 1012, 1016, 1018, 1022, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058], "test_": [52, 158, 418], "test_0": 43, "test_4": 43, "test_accuraci": [262, 276, 289], "test_auc": 834, "test_ax": 128, "test_balanced_accuraci": 289, "test_best_it": 149, "test_check_estim": 950, "test_color": 149, "test_common": [382, 390], "test_dataset": 376, "test_devi": 152, "test_enable_hist_gradient_boost": 386, "test_fn": 1008, "test_fold": [418, 820], "test_fract": 1039, "test_idx": [52, 396], "test_import": 192, "test_index": [262, 337, 418, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828], "test_indx": 418, "test_lin": 149, "test_logist": [382, 390], "test_ms": 331, "test_neg_mean_absolute_error": [43, 219], "test_neg_mean_squared_error": [219, 834], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 278, "test_positive_likelihood_ratio": 278, "test_prec_macro": 418, "test_precision_macro": 418, "test_r2": 834, "test_rec_macro": 418, "test_recall_macro": 418, "test_requiring_mpl_fixtur": 382, "test_result": 192, "test_scor": [147, 149, 151, 153, 225, 274, 277, 288, 292, 321, 352, 360, 395, 418, 813, 830, 834, 835, 838], "test_scores_mean": 288, "test_scores_nb": 277, "test_scores_svm": 277, "test_set": 412, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 105, 142, 148, 149, 151, 152, 153, 157, 189, 195, 202, 212, 217, 224, 225, 232, 233, 269, 272, 273, 277, 282, 284, 288, 294, 303, 304, 310, 312, 313, 317, 319, 320, 326, 345, 352, 365, 387, 418, 705, 809, 824, 827, 828, 837, 839, 860, 998, 1010, 1011, 1039, 1040, 1045, 1046, 1051], "test_sklearn_compatible_estim": [324, 950], "test_sparsifi": 390, "test_stat": 47, "test_tim": [250, 356], "test_tp": 1008, "test_val": 383, "test_your_test_nam": 370, "tested_neg": 289, "tested_posit": 289, "testpypi": 386, "teunp": 1053, "texa": [51, 104], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 88, 91, 92, 93, 95, 96, 97, 99, 104, 113, 114, 135, 143, 148, 170, 182, 193, 198, 211, 212, 244, 248, 251, 255, 256, 260, 262, 267, 274, 275, 281, 282, 286, 300, 303, 305, 310, 317, 327, 333, 335, 351, 360, 369, 371, 374, 375, 376, 382, 387, 394, 396, 402, 412, 414, 415, 417, 418, 419, 421, 424, 453, 455, 470, 474, 493, 494, 495, 506, 510, 515, 528, 543, 551, 571, 595, 596, 597, 598, 622, 632, 659, 665, 673, 675, 681, 683, 704, 710, 712, 714, 720, 724, 736, 737, 744, 800, 802, 807, 821, 837, 846, 848, 850, 853, 858, 871, 872, 874, 875, 883, 907, 908, 909, 911, 923, 924, 925, 952, 997, 1000, 1004, 1006, 1008, 1009, 1010, 1012, 1015, 1018, 1020, 1022, 1023, 1026, 1028, 1029, 1032, 1034, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "text1": 422, "text2": 422, "text2d": 241, "text3": 422, "text3d": [80, 129], "text_": 704, "text_kw": [704, 1054], "text_preprocess": 470, "text_stat": 104, "text_stats_transform": 104, "textbook": [422, 597], "textcoord": [48, 195], "textrm": 1023, "texttt": 1008, "textual": [419, 428, 1024, 1048], "textur": [172, 379, 765, 766, 1006], "tf": [2, 54, 57, 248, 356, 357, 358, 377, 419, 528, 551, 595, 596, 597, 598, 850, 858, 883, 997, 1006, 1010, 1018, 1027], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 597, "tfidf": [54, 104, 338, 422, 598], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 338, 357, 358, 422, 495, 598, 1046, 1047, 1053, 1055, 1056, 1057], "tfidfvector": [2, 54, 57, 104, 276, 356, 377, 419, 422, 495, 595, 596, 597, 1039, 1041, 1047, 1048, 1049, 1052, 1053, 1057], "tfidfvectorizertfidfvector": 276, "tfifi": 1052, "tfrac": 424, "tgct": 182, "tgz": 45, "th": [137, 327, 364, 395, 414, 418, 421, 429, 447, 451, 452, 457, 459, 465, 469, 478, 557, 564, 565, 566, 567, 568, 569, 571, 572, 573, 600, 601, 639, 655, 656, 676, 678, 687, 703, 725, 787, 828, 892, 942, 998, 1004, 1008, 1012, 1015, 1022, 1023, 1054], "th0rwa": [1049, 1050], "thakur": [1042, 1043], "thaler": 1045, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 82, 88, 90, 106, 109, 113, 115, 118, 121, 123, 126, 128, 130, 137, 139, 140, 142, 143, 144, 146, 147, 150, 153, 170, 172, 174, 180, 185, 190, 191, 192, 195, 197, 202, 203, 206, 217, 219, 223, 233, 234, 235, 241, 244, 250, 251, 252, 254, 261, 269, 272, 273, 275, 276, 277, 278, 281, 284, 289, 292, 294, 295, 301, 302, 313, 315, 319, 320, 321, 322, 326, 328, 330, 332, 335, 349, 356, 357, 358, 365, 369, 370, 371, 376, 377, 378, 380, 381, 382, 384, 387, 388, 390, 396, 397, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 460, 463, 466, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 500, 501, 503, 516, 521, 522, 530, 538, 541, 542, 543, 544, 545, 547, 548, 549, 551, 554, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 588, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 634, 635, 637, 641, 647, 649, 650, 651, 653, 654, 659, 660, 662, 665, 666, 667, 668, 669, 670, 673, 674, 675, 678, 679, 681, 683, 684, 685, 686, 689, 694, 699, 701, 703, 711, 712, 719, 727, 728, 729, 730, 731, 742, 743, 746, 771, 786, 787, 788, 790, 792, 802, 804, 805, 807, 810, 811, 817, 821, 826, 828, 829, 832, 833, 834, 835, 836, 839, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 865, 868, 869, 874, 884, 885, 886, 888, 889, 891, 894, 900, 901, 905, 908, 911, 912, 913, 916, 917, 919, 920, 921, 922, 923, 928, 943, 955, 957, 958, 964, 970, 976, 978, 981, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1028, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "thanh": 1057, "thank": [0, 43, 55, 62, 90, 118, 192, 195, 217, 284, 356, 357, 381, 390, 1027, 1032, 1039, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "tharak": 1056, "thebabush": [1056, 1057], "thedevpanda": 1054, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 85, 92, 115, 125, 135, 138, 144, 145, 147, 149, 151, 153, 154, 168, 171, 172, 174, 175, 179, 190, 191, 202, 203, 206, 212, 217, 218, 235, 238, 241, 244, 250, 251, 254, 268, 272, 275, 276, 278, 284, 289, 292, 295, 297, 311, 315, 320, 326, 328, 349, 356, 357, 362, 363, 365, 369, 370, 371, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 390, 391, 394, 395, 396, 397, 405, 408, 411, 413, 414, 415, 416, 417, 419, 421, 423, 424, 426, 446, 448, 452, 459, 460, 473, 503, 515, 516, 540, 542, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 604, 617, 626, 636, 650, 653, 654, 659, 665, 666, 667, 668, 669, 677, 679, 683, 685, 688, 694, 769, 770, 772, 775, 781, 796, 807, 821, 840, 846, 847, 848, 849, 850, 868, 871, 873, 879, 890, 891, 913, 916, 919, 920, 921, 922, 926, 997, 998, 1000, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "theil": [2, 187, 196, 220, 223, 315, 656, 664, 678, 685, 686, 1029], "theilsen": 223, "theilsenregressor": [2, 223, 234, 656, 678, 685, 1004, 1043, 1051, 1053, 1058], "theirs": 356, "them": [16, 43, 44, 47, 68, 74, 75, 84, 88, 90, 91, 95, 100, 101, 104, 105, 118, 123, 125, 128, 138, 154, 167, 172, 174, 185, 186, 190, 191, 192, 195, 197, 202, 205, 212, 218, 219, 221, 235, 248, 251, 254, 255, 269, 273, 275, 276, 278, 284, 288, 292, 297, 315, 320, 322, 327, 338, 345, 358, 364, 369, 371, 377, 382, 383, 384, 385, 386, 390, 394, 396, 397, 399, 405, 408, 412, 413, 414, 415, 418, 419, 421, 422, 424, 450, 453, 455, 456, 463, 470, 473, 500, 501, 515, 574, 575, 576, 577, 614, 615, 623, 627, 628, 631, 639, 646, 671, 699, 775, 778, 781, 785, 786, 787, 788, 796, 807, 821, 828, 836, 871, 875, 880, 881, 885, 889, 891, 892, 901, 902, 908, 919, 920, 949, 950, 964, 973, 997, 998, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1018, 1023, 1024, 1026, 1027, 1031, 1032, 1039, 1040, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "themat": 396, "theme": [377, 382, 400, 407, 1039], "themrmax": [1045, 1046], "themselv": [64, 190, 315, 378, 384, 390, 396, 405, 411, 414, 421, 422, 424, 452, 622, 799, 1024, 1049], "theodor": 1044, "theofilo": 1046, "theoptip": [1049, 1050], "theorem": [32, 174, 352, 1010], "theoret": [37, 72, 92, 174, 269, 414, 421, 560, 561, 646, 711, 733, 763, 911, 997, 1004, 1005, 1007, 1008, 1010, 1020, 1022, 1023, 1032], "theori": [8, 147, 250, 265, 352, 379, 414, 418, 421, 697, 701, 733, 763, 903, 904, 955, 997, 1004, 1005, 1007, 1008, 1009, 1023, 1024], "theotheo": 1049, "thereaft": [190, 197], "therebi": [43, 190, 418, 421, 1000, 1049], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 87, 88, 105, 106, 109, 113, 118, 128, 132, 137, 140, 142, 150, 153, 156, 158, 171, 189, 192, 217, 221, 233, 234, 260, 265, 266, 269, 276, 278, 288, 289, 292, 294, 298, 312, 315, 320, 334, 345, 352, 353, 356, 357, 364, 369, 376, 380, 384, 387, 394, 405, 408, 410, 414, 415, 416, 418, 419, 421, 422, 443, 542, 548, 556, 558, 560, 561, 566, 567, 571, 572, 611, 613, 665, 666, 672, 675, 678, 683, 685, 686, 708, 719, 742, 764, 804, 871, 872, 884, 888, 892, 900, 927, 998, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1016, 1018, 1023, 1024, 1028, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "therein": 675, "thereof": 396, "theriley106": 1047, "thesi": [0, 379, 414, 421], "theta": [175, 176, 178, 180, 182, 183, 252, 419, 424, 530, 543, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 699, 1010, 1024], "theta0": 175, "theta1": 175, "theta_": [849, 1010], "theta_c": [252, 530], "theta_d": 419, "theta_i": 1010, "theta_l": 424, "theta_opt": [617, 618], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 488, 489, 490, 491, 493, 495, 496, 500, 501, 503, 504, 505, 506, 508, 509, 510, 512, 515, 516, 522, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 711, 713, 714, 716, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 743, 744, 745, 746, 747, 748, 750, 755, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 775, 776, 781, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 930, 931, 932, 933, 937, 938, 943, 944, 945, 947, 949, 950, 955, 957, 960, 963, 964, 965, 966, 967, 968, 970, 973, 974, 977, 978, 981, 982, 991, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "thibault": 1048, "thibaut": 1053, "thibsej": 1048, "thick": [95, 305, 1011], "thierno": 1049, "thierri": [0, 1032, 1045, 1046, 1053], "thij": [1051, 1054, 1055], "thin": [239, 627], "thing": [48, 70, 238, 270, 356, 370, 371, 377, 381, 382, 384, 394, 397, 414, 416, 422, 566, 567, 1004, 1018, 1032, 1045], "think": [44, 72, 190, 191, 356, 357, 382, 390, 420, 1007, 1028, 1032], "thinner": 102, "third": [70, 146, 151, 167, 172, 182, 235, 244, 266, 292, 300, 317, 330, 370, 377, 381, 384, 394, 397, 408, 422, 541, 595, 596, 597, 598, 809, 810, 811, 816, 853, 854, 855, 857, 859, 889, 901, 997, 1019, 1039, 1050, 1055, 1056, 1058], "thirion": [0, 403, 1039, 1045, 1046, 1052], "thirteen": 379, "thirti": 1026, "thiruvenkadam": 1053, "this_centroid": 77, "this_cov": 115, "this_cv": 270, "this_di": 51, "this_dx": 51, "this_i": [61, 223], "this_max_it": 232, "this_p": 63, "this_prec": 115, "this_scor": 348, "this_sw": 61, "this_x": [61, 215, 223], "thoma": [0, 130, 370, 372, 397, 403, 907, 1004, 1018, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "thomas9292": 1051, "thomaz": 1050, "thomo": 93, "thompson": [1042, 1054, 1055], "thorben": 1051, "thorough": 1032, "thoroughli": 1013, "thorsten": 1032, "those": [43, 46, 51, 55, 57, 90, 95, 105, 138, 150, 153, 170, 172, 189, 190, 191, 192, 193, 217, 219, 221, 235, 242, 248, 251, 253, 254, 266, 268, 269, 275, 278, 281, 292, 311, 315, 320, 332, 342, 345, 356, 357, 358, 369, 370, 376, 382, 384, 386, 387, 388, 389, 394, 396, 397, 400, 411, 412, 413, 414, 418, 419, 421, 422, 424, 454, 456, 467, 470, 474, 501, 502, 503, 510, 564, 565, 571, 572, 576, 577, 588, 699, 704, 719, 725, 743, 807, 810, 811, 819, 821, 828, 853, 854, 855, 857, 859, 860, 861, 862, 863, 911, 912, 913, 916, 919, 920, 921, 922, 967, 997, 1000, 1004, 1007, 1008, 1010, 1011, 1012, 1015, 1018, 1024, 1026, 1027, 1032, 1039, 1042, 1045, 1046, 1047, 1052, 1053, 1054, 1055, 1056, 1057], "though": [80, 90, 143, 172, 195, 197, 254, 281, 300, 317, 319, 357, 358, 365, 369, 376, 379, 382, 386, 395, 396, 414, 419, 420, 421, 422, 423, 706, 814, 816, 911, 997, 998, 1000, 1005, 1008, 1011, 1016, 1018, 1022, 1047], "thought": [237, 300, 396, 414, 452, 1005, 1009], "thoui": [0, 404, 1039], "thousand": [77, 143, 153, 248, 250, 319, 357, 377, 414, 421, 868, 869, 916, 1005, 1048, 1050], "thread": [295, 325, 328, 380, 382, 394, 396, 414, 421, 570, 843, 844, 973, 974, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056], "threadpoolctl": [41, 370, 380, 400, 407], "threadsaf": 1052, "three": [43, 46, 63, 70, 75, 76, 80, 81, 90, 93, 111, 120, 137, 142, 144, 147, 148, 149, 159, 160, 161, 169, 172, 182, 190, 202, 209, 214, 217, 219, 226, 228, 250, 251, 260, 263, 294, 321, 322, 325, 370, 375, 378, 379, 386, 400, 408, 411, 414, 418, 419, 420, 422, 457, 468, 505, 716, 957, 1001, 1003, 1004, 1005, 1008, 1011, 1018, 1022, 1023, 1026, 1039], "three_d_arrai": 928, "thresh": 1043, "threshold": [2, 50, 62, 77, 100, 126, 132, 172, 187, 191, 193, 212, 245, 247, 267, 272, 273, 274, 279, 282, 294, 330, 331, 333, 361, 364, 396, 409, 414, 419, 421, 423, 447, 448, 451, 452, 475, 503, 507, 515, 516, 538, 544, 549, 555, 556, 557, 558, 568, 570, 595, 598, 600, 604, 609, 610, 651, 665, 674, 678, 683, 685, 699, 705, 707, 709, 710, 713, 714, 725, 727, 733, 734, 746, 747, 749, 763, 789, 791, 794, 795, 796, 801, 804, 805, 806, 807, 826, 829, 837, 846, 857, 858, 872, 874, 876, 878, 891, 894, 906, 907, 908, 909, 916, 923, 925, 981, 1004, 1008, 1011, 1012, 1014, 1018, 1021, 1023, 1024, 1028, 1029, 1034, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "threshold_": [604, 1046], "threshold_lambda": 651, "threshold_sign": 364, "thriller": [422, 882], "thrive": [0, 382], "throat": [50, 308, 377, 505], "through": [0, 2, 46, 52, 70, 142, 172, 182, 190, 221, 237, 249, 270, 275, 278, 300, 319, 320, 343, 350, 358, 364, 379, 382, 384, 389, 391, 396, 397, 400, 405, 413, 414, 417, 419, 421, 423, 424, 431, 437, 452, 470, 473, 478, 542, 548, 564, 565, 568, 571, 572, 573, 588, 600, 601, 604, 654, 658, 660, 662, 665, 666, 668, 670, 672, 675, 683, 684, 695, 698, 727, 813, 830, 887, 899, 903, 904, 919, 920, 921, 922, 962, 965, 997, 998, 1005, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1022, 1023, 1024, 1032, 1039, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "throughout": [330, 365, 396, 634, 808, 868, 869, 1042, 1047], "throughput": [368, 1027, 1034, 1042], "throw": [2, 312, 391, 936, 1043, 1046, 1047, 1048, 1049, 1053], "thrown": [718, 1048, 1049], "thu": [43, 44, 61, 62, 63, 64, 75, 88, 90, 95, 111, 115, 126, 128, 140, 142, 143, 145, 147, 153, 168, 174, 179, 180, 191, 202, 204, 206, 217, 219, 235, 244, 250, 255, 262, 269, 273, 275, 280, 281, 282, 288, 289, 298, 322, 324, 327, 360, 365, 369, 370, 377, 384, 388, 394, 396, 405, 412, 413, 414, 418, 419, 421, 422, 424, 425, 443, 445, 469, 522, 534, 560, 561, 562, 563, 564, 565, 570, 571, 572, 573, 610, 613, 617, 629, 634, 639, 640, 650, 652, 665, 684, 712, 725, 732, 753, 795, 802, 807, 809, 814, 816, 821, 828, 842, 845, 880, 911, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1028, 1032, 1039, 1041, 1045, 1047, 1048, 1049, 1051, 1055], "thuan": 1050, "thukarama": 1054, "thumb": [13, 143, 195, 369, 382, 383, 394, 414, 665, 666, 673, 674, 675, 683, 684, 685, 911, 1008], "thumbnail": 1039, "th\u00e9ophil": 1055, "ti": [104, 217, 262, 265, 273, 353, 369, 390, 412, 414, 606, 607, 642, 727, 733, 763, 804, 805, 913, 916, 919, 1007, 1008, 1023, 1040, 1042, 1043, 1047, 1049, 1053, 1054, 1055], "tiago": [1040, 1044], "tialo": [1056, 1057, 1058], "tian": [414, 448, 1044, 1045, 1046], "tianqi": 421, "tiao": [1044, 1045], "tib": [689, 690], "tibshirani": [140, 141, 152, 172, 204, 274, 379, 418, 421, 527, 566, 567, 635, 663, 728, 730, 731, 841, 858, 919, 920, 998, 1002, 1004, 1009, 1015, 1024], "tic": [172, 191, 254, 286, 1010], "tic_bwd": 172, "tic_fwd": 172, "ticconi": 1045, "tick": [47, 78, 95, 177, 255, 286, 382, 639, 835], "tick_bottom": 315, "tick_label": [151, 193, 324], "tick_labels_dict": [151, 193, 324], "tick_labels_parameter_nam": [151, 193, 324], "tick_left": 315, "tick_param": [46, 54, 161, 260, 275, 319, 337], "tick_right": 46, "ticker": [237, 239, 242, 295], "ticket": [329, 382], "tidelift": 0, "tie": [187, 209, 340, 394, 421, 519, 839, 916, 1009, 1023, 1024, 1029, 1040, 1055], "tieleman": [867, 1013], "tien": 1044, "tiernei": [1047, 1048, 1049], "tight": [75, 132, 139, 146, 165, 168, 205, 209, 210, 211, 222, 226, 229, 234, 239, 242, 264, 295, 301, 302, 306, 307, 341, 345, 348, 350, 361, 589, 699, 1051], "tight_layout": [45, 47, 62, 64, 67, 75, 87, 90, 100, 107, 109, 118, 123, 124, 125, 133, 137, 139, 144, 146, 148, 151, 156, 158, 160, 176, 178, 183, 185, 189, 190, 192, 193, 197, 198, 202, 207, 215, 217, 225, 228, 232, 235, 237, 249, 254, 270, 271, 287, 294, 295, 297, 307, 316, 317, 318, 319, 320, 324, 328, 343, 357, 360, 361, 378], "tijanajovanov": 1051, "tikhonov": [181, 424, 679], "tild": [877, 1016, 1018], "tilen": 1049, "till": [414, 448, 795, 1008], "tim": [0, 403, 1039, 1044, 1045, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 394, 396, 397, 405, 408, 410, 411, 412, 414, 416, 417, 419, 421, 422, 425, 443, 447, 449, 450, 451, 452, 453, 456, 458, 461, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 478, 498, 503, 506, 508, 526, 530, 541, 543, 545, 547, 548, 554, 569, 574, 575, 576, 577, 597, 617, 626, 634, 635, 636, 637, 641, 646, 647, 650, 653, 657, 659, 661, 667, 669, 671, 673, 674, 679, 680, 681, 683, 684, 685, 692, 693, 697, 699, 701, 708, 749, 752, 753, 755, 797, 801, 804, 805, 807, 809, 810, 811, 812, 814, 816, 821, 822, 823, 826, 828, 832, 833, 834, 835, 836, 837, 839, 841, 846, 847, 848, 849, 850, 851, 852, 859, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 875, 876, 878, 881, 884, 886, 890, 895, 903, 904, 908, 909, 913, 916, 917, 925, 949, 950, 957, 973, 997, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1032, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "time_dens": 331, "time_spars": 331, "time_step": [202, 869], "timeit": [232, 263, 388], "timeout": [503, 973, 1053], "timer": [263, 388], "times_init": 263, "timescal": 249, "timeseri": 43, "timeseriessplit": [2, 43, 52, 153, 202, 270, 418, 1045, 1046, 1051], "timo": 1051, "timofei": 1054, "timotheemathieu": 1052, "timothi": [1044, 1052], "timsaur": 1049, "tinertia": 93, "ting": [570, 1014, 1047, 1048], "tingshan": 1052, "tini": [1041, 1054, 1057], "tinoco": 1056, "tinta": 321, "tip": [365, 368, 382, 385, 388, 409, 422, 541, 548, 652, 699, 1004, 1030, 1031, 1033, 1034, 1042], "tiphain": 1050, "tirth": [1049, 1050], "titan": [105, 192, 258, 324, 328, 329, 1016], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 111, 112, 114, 115, 117, 118, 120, 123, 124, 125, 126, 127, 130, 131, 132, 138, 139, 140, 143, 145, 146, 147, 150, 151, 153, 154, 157, 160, 161, 165, 167, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 190, 197, 198, 200, 202, 204, 205, 206, 209, 210, 216, 217, 219, 221, 222, 223, 225, 226, 231, 234, 235, 237, 238, 239, 244, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 274, 275, 276, 278, 279, 280, 284, 285, 288, 290, 297, 298, 301, 302, 303, 304, 306, 307, 308, 315, 319, 320, 321, 322, 336, 339, 341, 342, 343, 344, 345, 348, 349, 353, 354, 356, 361, 362, 363, 378, 381, 382, 386, 390, 415, 1008, 1031], "title_bow": 415, "titles_opt": 268, "titov": [1047, 1049, 1052, 1053], "titu": 1050, "tiwari": 1051, "tiziano": 1039, "tjoa": 1043, "tkammi": 1045, "tkdd": 570, "tliu68": 1052, "tm": [51, 1011], "tmp": 386, "tmpdir": [297, 324], "tn": [269, 332, 719, 725, 1008], "tn_c": 284, "tnr": 269, "tnwei": 1051, "to_british": 422, "to_fram": 109, "to_list": 193, "to_numpi": [179, 269], "to_onnx": 408, "to_replac": [43, 191], "toarrai": [46, 331, 338, 364, 415, 422, 573, 589, 595, 597, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 884, 901, 902, 956, 978, 979, 981, 989, 990, 998, 1011, 1018, 1056], "toastedcornflak": [1045, 1046], "toastedyeast": [1053, 1054], "tobia": [1047, 1052, 1054], "tobychees": [1046, 1047], "toc": [172, 254], "toc_bwd": 172, "toc_fwd": 172, "toccac": 1049, "tocsc": 203, "tocsr": 55, "toctre": [382, 400, 407], "tod": [414, 425, 450], "todai": 179, "todens": [982, 983, 984, 985, 986, 987, 988], "todo": [81, 248, 386, 390, 414, 1058], "toeplitz": 112, "togeth": [43, 51, 86, 95, 105, 146, 158, 174, 180, 190, 199, 238, 241, 254, 271, 321, 328, 348, 361, 365, 384, 394, 395, 396, 414, 421, 422, 423, 429, 457, 459, 574, 575, 601, 696, 722, 807, 821, 871, 872, 885, 1004, 1005, 1008, 1009, 1015, 1018, 1024, 1025, 1032, 1045, 1056], "toi": [48, 58, 71, 74, 75, 76, 77, 82, 84, 87, 88, 90, 92, 102, 113, 118, 127, 140, 154, 159, 160, 187, 200, 207, 221, 231, 243, 254, 260, 301, 302, 311, 342, 351, 375, 388, 394, 414, 421, 422, 446, 447, 448, 450, 452, 454, 455, 456, 458, 464, 475, 519, 521, 529, 570, 646, 684, 733, 763, 805, 857, 864, 872, 891, 915, 1005, 1007, 1008, 1014, 1018, 1029, 1034], "tok": [358, 422], "token": [2, 57, 358, 369, 377, 386, 422, 543, 595, 596, 597, 598, 1039, 1047, 1051, 1057], "token_featur": 422, "token_freq": 358, "token_pattern": [358, 422, 595, 596, 598], "tokoroten": 1044, "tokyo": [879, 1019], "tol": [46, 49, 55, 107, 123, 148, 153, 172, 185, 198, 208, 210, 224, 225, 231, 233, 244, 255, 261, 263, 313, 327, 352, 356, 384, 388, 421, 426, 449, 453, 455, 458, 465, 468, 477, 478, 484, 488, 489, 490, 538, 539, 540, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 566, 567, 568, 569, 609, 634, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 679, 681, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 698, 700, 702, 804, 805, 821, 860, 868, 869, 906, 907, 911, 912, 913, 914, 915, 916, 917, 993, 1004, 1022, 1023, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "tola": 1049, "told": 422, "toledano": 1047, "toler": [81, 107, 153, 185, 208, 210, 233, 234, 349, 358, 377, 384, 391, 414, 426, 449, 453, 458, 465, 468, 477, 478, 484, 488, 489, 490, 538, 539, 540, 542, 543, 547, 548, 549, 550, 551, 552, 554, 555, 566, 567, 568, 569, 634, 653, 654, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 683, 685, 686, 688, 689, 690, 691, 695, 696, 697, 698, 700, 701, 702, 851, 852, 856, 860, 868, 869, 906, 907, 911, 912, 913, 914, 915, 916, 917, 993, 1004, 1008, 1022, 1023, 1051, 1052, 1053, 1054], "toleranbc": 1048, "tolist": [43, 149, 185, 274, 326, 377], "tom": [0, 403, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tom1092": 1052, "toma": 1043, "tomasz": 1052, "tomato": 218, "tomatti": 1054, "tomdlt": 1045, "tomiock": [1054, 1055], "tommaso": 1052, "tommi": [1046, 1047, 1048], "tomographi": [42, 55, 101, 187, 659, 679, 1004, 1029], "tomohiro": 1052, "tomorrow": 413, "tom\u00e1": [1052, 1053], "tongyu": 1056, "toni": [45, 377, 570, 891, 1014, 1052, 1053], "tonk": 1046, "too": [43, 46, 51, 52, 55, 64, 79, 85, 90, 92, 97, 104, 108, 115, 127, 150, 153, 185, 190, 192, 202, 218, 221, 238, 248, 254, 261, 268, 269, 273, 282, 288, 312, 321, 345, 356, 362, 363, 369, 379, 382, 388, 390, 394, 396, 412, 414, 416, 418, 421, 422, 423, 426, 443, 455, 545, 686, 699, 714, 846, 847, 848, 849, 850, 876, 889, 891, 1003, 1005, 1007, 1008, 1010, 1011, 1015, 1040, 1043, 1046, 1047, 1048, 1049, 1051, 1057], "took": [0, 43, 77, 283], "tool": [21, 29, 41, 48, 50, 52, 148, 190, 251, 269, 273, 278, 365, 375, 376, 377, 380, 382, 384, 385, 387, 388, 389, 390, 395, 396, 397, 399, 400, 405, 408, 414, 415, 416, 493, 699, 708, 997, 1003, 1004, 1008, 1014, 1018, 1023, 1025, 1027, 1028, 1032, 1046, 1049, 1052, 1053, 1054], "toolbox": [394, 1027, 1032], "toolchain": 380, "toolkit": [369, 1027, 1032], "toolset": 1032, "tooth": 124, "tootoonian": 1052, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 80, 86, 97, 99, 105, 125, 135, 142, 143, 146, 153, 158, 161, 190, 217, 219, 228, 232, 244, 254, 255, 260, 262, 263, 266, 272, 276, 284, 285, 300, 315, 317, 321, 325, 331, 334, 335, 345, 349, 356, 365, 382, 384, 388, 394, 411, 412, 414, 419, 420, 421, 493, 594, 595, 598, 606, 733, 763, 801, 923, 925, 997, 1000, 1004, 1006, 1016, 1027, 1032, 1053, 1058], "top10": 377, "top5": 356, "top_featur": 54, "top_features_ind": 54, "top_indic": 356, "top_k_accuraci": 1008, "top_k_accuracy_scor": [2, 1008, 1051, 1053], "tophat": [300, 420, 851, 852, 856], "topic": [42, 45, 46, 47, 104, 187, 356, 357, 358, 377, 378, 418, 419, 422, 494, 504, 543, 545, 547, 554, 595, 598, 1004, 1009, 1027, 1028, 1029, 1044, 1046], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [419, 543], "topic_word_prior_": 543, "topisan": 1049, "toplak": 1055, "topolog": [469, 1027], "topologi": [241, 242], "torch": [410, 1057], "torgo": 376, "toro": 321, "toronto": [541, 651, 867], "torr": [1048, 1057], "torrella": [1048, 1049, 1055, 1058], "tortois": 1004, "tosequ": 1057, "toshihiro": [1045, 1046, 1052], "toshniw": 1051, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 370, 376, 377, 379, 388, 396, 411, 414, 420, 422, 425, 437, 450, 471, 488, 489, 490, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 512, 517, 519, 521, 522, 526, 529, 530, 543, 551, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 577, 590, 591, 597, 601, 603, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 683, 684, 685, 686, 704, 711, 712, 720, 736, 737, 738, 741, 745, 746, 764, 776, 790, 791, 794, 801, 802, 803, 807, 821, 832, 833, 834, 844, 845, 846, 847, 854, 856, 862, 869, 886, 890, 912, 914, 917, 919, 920, 921, 922, 955, 997, 1004, 1005, 1008, 1009, 1010, 1011, 1018, 1022, 1023, 1024, 1029, 1040, 1045, 1047, 1055, 1056], "total_cel": 153, "total_fit_tim": 47, "total_sampl": [337, 543], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 158, "totrmsabvgrd": 147, "tottim": 388, "tour": [0, 403, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tournament": 997, "toward": [0, 63, 64, 98, 115, 144, 150, 157, 174, 192, 197, 221, 222, 242, 254, 288, 352, 382, 396, 414, 454, 458, 468, 683, 685, 702, 885, 1007, 1022, 1024, 1026, 1028], "toyota": 51, "tp": [332, 414, 719, 725, 736, 737, 738, 789, 790, 791, 794, 923, 1008], "tp_c": 284, "tpng": 923, "tpot": 1027, "tpr": [50, 245, 254, 269, 272, 284, 285, 389, 709, 713, 796, 1008, 1036, 1039, 1055], "tpr_a": 284, "tpr_b": 284, "tpr_score": 269, "tprs_lower": 285, "tprs_upper": 285, "tr": [270, 379, 386, 414, 416, 475, 476, 477, 478, 479, 480, 481, 482], "trace": [390, 414, 427, 479, 481, 482, 485, 486, 487, 696, 700, 1005, 1050], "traceback": [382, 387, 390, 394, 474, 718, 1031, 1056], "traceord": 143, "tracer0tong": 1045, "trach": 1039, "track": [135, 141, 149, 335, 382, 385, 386, 410, 541, 976, 1009, 1027, 1028, 1046, 1049], "tracker": [381, 385, 390, 394, 397, 400, 408, 1028], "tracking_select": 976, "tractabl": [43, 418, 548, 641, 1027, 1052], "trade": [37, 96, 111, 143, 153, 192, 221, 274, 276, 277, 288, 345, 356, 396, 413, 414, 416, 560, 561, 566, 567, 641, 663, 699, 807, 810, 811, 821, 834, 1005, 1012, 1020, 1022, 1023, 1028], "tradeoff": [90, 140, 187, 249, 257, 267, 282, 283, 284, 285, 356, 369, 382, 390, 420, 522, 571, 705, 709, 734, 796, 837, 872, 891, 911, 1005, 1029, 1048, 1051], "tradit": [55, 90, 217, 232, 357, 371, 412, 421, 422, 639, 701, 1004, 1007, 1018, 1027, 1032], "tradition": 1024, "traffic": 1032, "trail": [384, 991], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 91, 93, 99, 100, 104, 105, 109, 117, 118, 123, 126, 127, 128, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 158, 159, 160, 163, 169, 174, 175, 176, 179, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 195, 201, 202, 203, 204, 206, 208, 209, 210, 212, 213, 217, 218, 219, 222, 224, 225, 226, 229, 231, 232, 235, 244, 247, 249, 253, 262, 264, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 294, 295, 298, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 315, 317, 319, 320, 324, 327, 331, 333, 334, 335, 338, 339, 341, 344, 351, 352, 358, 359, 362, 363, 365, 369, 370, 371, 374, 377, 379, 384, 387, 394, 395, 396, 410, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 426, 443, 446, 447, 449, 450, 453, 455, 457, 458, 459, 460, 465, 471, 475, 476, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 500, 503, 504, 505, 507, 511, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 634, 635, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 695, 696, 698, 699, 703, 710, 748, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 876, 877, 880, 881, 884, 885, 889, 890, 891, 892, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 981, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1032, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "train_0": 43, "train_4": 43, "train_accuraci": [262, 289], "train_auc": 834, "train_ax": 128, "train_balanced_accuraci": 289, "train_cover_std": 50, "train_dataset": [190, 376], "train_errors_with": 148, "train_errors_without": 148, "train_fract": 1039, "train_idx": [52, 190, 396], "train_import": 192, "train_index": [262, 337, 418, 808, 809, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828], "train_indx": 418, "train_pr": 148, "train_prec_macro": 418, "train_r2": 834, "train_rec_macro": 418, "train_result": 192, "train_sampl": [64, 232, 233], "train_scor": [225, 321, 352, 360, 813, 830, 834, 835, 838, 1003], "train_score_": [151, 421, 566, 567, 568, 569], "train_set": 412, "train_siz": [44, 46, 49, 137, 157, 175, 195, 233, 250, 254, 277, 288, 326, 329, 352, 809, 813, 824, 827, 835, 837, 1003, 1039, 1040, 1045, 1046], "train_size_ab": 835, "train_size_idx": 352, "train_sizes_ab": 835, "train_test_s": 250, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 105, 109, 118, 128, 137, 142, 144, 148, 149, 150, 151, 152, 153, 154, 157, 168, 169, 189, 190, 192, 193, 195, 202, 212, 217, 224, 225, 232, 233, 235, 245, 254, 257, 258, 268, 269, 272, 273, 278, 282, 284, 288, 294, 298, 303, 304, 310, 312, 313, 317, 319, 320, 322, 324, 325, 326, 331, 332, 338, 360, 364, 365, 387, 395, 410, 415, 418, 421, 443, 444, 565, 567, 574, 575, 704, 705, 707, 709, 806, 807, 829, 839, 842, 860, 868, 869, 871, 921, 922, 997, 998, 1008, 1010, 1011, 1016, 1018, 1023, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1056, 1057], "train_tim": [232, 250, 356, 357], "trainabl": 384, "traine": 1032, "training_data": 174, "training_data_": 1049, "training_idx": 182, "training_indic": 181, "training_noisy_target": 174, "training_sample_indic": 174, "training_tim": [148, 356], "training_time_early_stop": 148, "training_time_ful": 148, "trajectori": 141, "tran": 112, "trans_data": 239, "transact": [98, 269, 332, 379, 414, 416, 425, 427, 450, 454, 481, 541, 545, 547, 554, 570, 651, 671, 692, 693, 732, 733, 763, 776, 1004, 1008], "transax": [79, 97, 241, 244, 262, 303, 317], "transcript": 382, "transcriptom": 699, "transduc": 335, "transduct": [396, 414, 906, 907, 1028], "transduction_": [334, 335, 336, 906, 907, 908], "transfer": [153, 405, 410, 1004, 1028], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 81, 82, 83, 86, 89, 92, 97, 103, 107, 108, 118, 120, 125, 126, 128, 129, 131, 132, 136, 141, 143, 147, 157, 158, 169, 180, 186, 187, 190, 191, 192, 195, 209, 217, 218, 225, 231, 233, 235, 238, 241, 244, 246, 247, 249, 251, 252, 254, 258, 262, 271, 272, 273, 276, 284, 294, 295, 297, 303, 304, 305, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 329, 331, 332, 345, 348, 349, 356, 358, 365, 376, 377, 378, 379, 382, 384, 387, 391, 396, 405, 408, 410, 412, 414, 416, 417, 418, 419, 421, 422, 423, 424, 430, 435, 438, 443, 447, 448, 449, 451, 453, 455, 458, 470, 471, 472, 473, 474, 488, 489, 490, 491, 494, 495, 503, 510, 515, 516, 521, 522, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 557, 564, 566, 568, 571, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 643, 645, 646, 647, 648, 649, 660, 665, 670, 680, 683, 691, 695, 696, 697, 698, 699, 701, 708, 709, 720, 760, 761, 792, 807, 810, 811, 821, 837, 840, 846, 855, 860, 863, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 911, 913, 916, 917, 930, 932, 944, 947, 949, 997, 998, 1000, 1002, 1004, 1005, 1008, 1009, 1012, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "transform_algorithm": [126, 132, 538, 544, 549, 1055], "transform_alpha": [126, 132, 538, 544, 549, 1052], "transform_dur": 295, "transform_func": 276, "transform_list": 870, "transform_max_it": [538, 544, 545, 549, 1049], "transform_method": 419, "transform_n_nonzero_coef": [126, 132, 538, 544, 549], "transform_n_nozero_coef": 132, "transform_output": [258, 269, 322, 474, 909, 1054, 1055], "transformed_grid": 156, "transformedtargetregressor": [2, 109, 190, 217, 394, 405, 415, 600, 601, 604, 1009, 1047, 1049, 1052, 1057, 1058], "transformedtargetregressortransformedtargetregressor": 190, "transformer_": [251, 471], "transformer_list": [108, 415, 870, 873, 998, 1050, 1051], "transformer_nam": [295, 470], "transformer_tag": [930, 944], "transformer_weight": [104, 470, 473, 870, 1044, 1051], "transformermixin": [2, 251, 295, 384, 396, 471, 1047, 1054, 1055, 1056], "transformers_": [470, 473, 1056, 1057], "transformertag": [2, 930, 944], "transfus": 245, "transit": [55, 352, 386, 408, 1050], "transitive_target": 55, "translat": [109, 384, 424, 534, 621, 880, 881, 897, 1005, 1008, 1032], "transluc": 163, "transpar": [67, 317, 992, 1032], "transpos": [62, 275, 426, 545, 547, 554, 667, 668, 669, 670, 795, 955, 993, 1000, 1008, 1020, 1039, 1053], "transposit": 955, "trapezoid": [2, 282, 713, 714, 1008], "travel": 0, "travers": [364, 1011, 1015, 1057, 1058], "travi": [1039, 1047], "treat": [43, 45, 105, 147, 158, 185, 190, 217, 284, 321, 326, 331, 337, 365, 382, 394, 396, 411, 421, 422, 448, 568, 569, 595, 596, 598, 614, 615, 639, 645, 652, 678, 681, 736, 737, 745, 761, 790, 791, 794, 795, 880, 881, 887, 888, 891, 892, 896, 899, 900, 902, 911, 912, 964, 998, 1000, 1004, 1008, 1009, 1015, 1018, 1022, 1024, 1043, 1051, 1055, 1056], "treatment": [114, 189, 376, 413, 419, 475, 480, 1024], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 90, 97, 127, 136, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 155, 157, 158, 159, 161, 172, 182, 185, 191, 193, 201, 225, 226, 238, 251, 252, 253, 254, 255, 272, 279, 281, 292, 294, 295, 298, 300, 308, 315, 316, 320, 325, 326, 328, 365, 369, 377, 379, 388, 395, 396, 399, 412, 413, 414, 420, 425, 443, 447, 448, 449, 450, 451, 452, 454, 456, 463, 469, 502, 503, 507, 511, 521, 522, 526, 551, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 638, 639, 640, 641, 665, 695, 699, 709, 710, 718, 749, 755, 795, 797, 813, 828, 834, 835, 837, 846, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 872, 875, 884, 919, 920, 921, 922, 923, 924, 925, 950, 998, 1005, 1008, 1009, 1014, 1015, 1027, 1028, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "tree_": [324, 360, 364, 856, 919, 920, 921, 922, 1056], "tree_copi": [851, 852], "tree_disp": 255, "tree_importance_sorted_idx": 193, "tree_optim": 292, "tree_preprocessor": [158, 217], "tree_stat": [851, 852], "treelit": 1027, "trein": 1042, "tremend": [321, 421], "trend": [155, 179, 191, 247, 311, 1032, 1046], "trent": [1032, 1045], "trevor": [172, 204, 329, 379, 635, 663, 728, 730, 731, 998, 1004, 1020, 1043, 1044, 1047, 1048, 1049, 1051], "trevorstephen": [1043, 1045], "tri": [101, 131, 237, 288, 304, 349, 370, 384, 387, 394, 397, 412, 455, 457, 459, 638, 639, 640, 677, 699, 705, 707, 709, 821, 1013, 1041, 1047, 1051, 1057], "triag": [0, 382, 385, 397], "trial": [43, 280, 453, 455, 466, 678, 804, 805, 1004, 1045], "triangl": [396, 419, 449, 453, 465, 706, 1006, 1011], "triangular": [414, 469, 618, 1005], "tribe": 377, "trick": [2, 174, 250, 305, 349, 358, 368, 371, 385, 394, 415, 589, 596, 650, 679, 1000, 1001, 1012, 1022, 1023, 1034, 1040, 1048, 1056], "tricki": [412, 1005], "trickiest": 382, "trigg": 573, "trigger": [105, 106, 382, 386, 396, 408, 415, 868, 869, 871, 872, 937, 938, 955, 1004, 1047, 1053, 1054], "triglycerid": [172, 379], "trim": [232, 414, 851, 852], "trimeta": 1050, "trinh": 1054, "tripl": 387, "triplet": 516, "tripramudya": 1055, "trishnendu": 1047, "tristan": 1004, "triu": 51, "trivial": [48, 219, 269, 360, 382, 414, 825, 913, 916, 1005, 1028, 1039], "troillard": [1055, 1056], "tropp": [542, 548], "troubl": [66, 422], "troubleshoot": 422, "troyanskaya": [635, 998], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 84, 85, 88, 89, 90, 92, 93, 95, 98, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 121, 123, 124, 125, 126, 128, 133, 135, 137, 141, 143, 147, 149, 150, 152, 153, 154, 155, 158, 159, 161, 163, 164, 168, 171, 174, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 202, 204, 205, 206, 208, 210, 212, 213, 214, 217, 219, 220, 221, 224, 225, 231, 232, 233, 235, 237, 240, 241, 244, 245, 248, 250, 251, 252, 253, 254, 257, 258, 260, 263, 265, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 300, 301, 304, 308, 310, 311, 312, 313, 316, 320, 321, 322, 324, 326, 328, 329, 330, 331, 332, 335, 337, 338, 339, 348, 349, 351, 352, 353, 356, 357, 358, 360, 361, 364, 365, 369, 370, 375, 377, 378, 380, 382, 383, 384, 387, 388, 389, 391, 395, 396, 399, 405, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 526, 529, 530, 531, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 714, 715, 716, 718, 719, 720, 721, 722, 725, 726, 727, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 745, 746, 747, 748, 749, 750, 759, 761, 763, 768, 774, 776, 785, 789, 790, 791, 792, 793, 794, 795, 796, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 821, 825, 826, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 935, 936, 937, 938, 944, 949, 950, 955, 956, 968, 969, 972, 973, 977, 978, 979, 980, 988, 993, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1027, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "true_": [204, 544, 643], "true_coef": [189, 202, 212, 288, 653, 654, 659, 667, 668, 669, 688, 689, 690], "true_cov": [475, 477, 478, 484], "true_den": 300, "true_fac": 253, "true_fun": 290, "true_h": 328, "true_k": 357, "true_label": [330, 334, 335], "true_nam": 45, "true_relev": [733, 763], "true_w": 328, "true_weight": 197, "trujillo": [1053, 1054], "truli": [278, 371, 719, 1008], "truncat": [2, 107, 156, 238, 391, 541, 542, 546, 547, 548, 551, 683, 685, 733, 763, 804, 860, 924, 955, 997, 1007, 1008, 1022, 1033, 1034, 1045, 1047], "truncate_mod": 76, "truncatedsvd": [2, 156, 238, 357, 419, 541, 542, 546, 547, 548, 699, 870, 873, 1041, 1046, 1050, 1051, 1053, 1057], "truong": 1045, "trust": [0, 51, 63, 105, 106, 114, 137, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 193, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 397, 408, 412, 1053], "trustworthi": [2, 328, 1047, 1048, 1053, 1054, 1055, 1056], "truth": [2, 27, 58, 68, 75, 80, 84, 92, 93, 96, 111, 115, 118, 126, 130, 154, 182, 202, 211, 217, 218, 254, 266, 278, 357, 396, 414, 710, 711, 712, 715, 719, 720, 721, 722, 724, 725, 728, 730, 731, 733, 735, 736, 737, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 790, 791, 792, 793, 794, 797, 798, 802, 803, 1008, 1047, 1053], "truthi": [2, 968], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 88, 105, 106, 126, 137, 142, 143, 144, 145, 146, 153, 154, 155, 158, 161, 169, 174, 179, 180, 186, 189, 190, 191, 192, 195, 197, 199, 206, 245, 246, 247, 251, 255, 256, 257, 258, 261, 262, 265, 269, 273, 275, 276, 282, 287, 289, 292, 295, 308, 313, 321, 325, 326, 328, 329, 331, 336, 347, 352, 356, 357, 364, 377, 380, 381, 382, 384, 387, 388, 390, 394, 396, 400, 402, 405, 408, 414, 417, 418, 421, 422, 494, 495, 496, 497, 499, 500, 501, 502, 504, 505, 510, 574, 584, 596, 665, 680, 682, 696, 700, 806, 807, 810, 811, 819, 821, 829, 832, 833, 834, 836, 889, 891, 894, 896, 897, 898, 899, 900, 901, 902, 911, 930, 936, 991, 997, 1004, 1005, 1014, 1023, 1024, 1028, 1031, 1032, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "tr\u00e9segni": [0, 1041], "ts_cv": [43, 52, 153], "tscv": [418, 828], "tseng": 414, "tsetogl": 1054, "tsilhouett": 93, "tslearn": 1027, "tsne": [2, 187, 237, 238, 239, 241, 242, 296, 297, 328, 396, 428, 438, 503, 695, 696, 697, 855, 859, 872, 981, 1005, 1011, 1029, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "tsne_param": 295, "tsoumaka": [727, 741, 747, 1008], "tspeng": [1054, 1055], "tsuga": 1052, "tsujii": 1022, "tsukada": 1051, "tsuruoka": 1022, "tsutomu": 1050, "tt": [159, 270, 471], "ttang131": 1049, "ttime": 93, "tttthomasssss": 1043, "tube": [917, 1023], "tue": [43, 52, 153, 191, 1045], "tuft": 455, "tuhin": 1057, "tuk": 1057, "tulio": [1047, 1048], "tulken": 1049, "tulloch": [1042, 1043], "tumor": [172, 379, 413], "tune": [2, 43, 64, 79, 90, 105, 128, 137, 143, 153, 171, 172, 174, 185, 187, 191, 206, 221, 222, 234, 241, 245, 254, 267, 268, 278, 279, 280, 282, 292, 297, 316, 337, 345, 349, 352, 356, 365, 369, 370, 371, 395, 396, 409, 412, 414, 418, 421, 423, 424, 458, 468, 503, 558, 566, 567, 568, 601, 620, 621, 622, 624, 626, 627, 629, 630, 632, 650, 665, 666, 697, 701, 707, 709, 725, 749, 791, 794, 806, 807, 823, 829, 834, 837, 867, 872, 891, 909, 916, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1014, 1022, 1023, 1027, 1029, 1034, 1039, 1053, 1055, 1057, 1058], "tuned_classifi": 332, "tuned_model": [269, 289], "tuned_model_coef": 289, "tuned_param": 46, "tuned_paramet": [111, 163, 273], "tunedthresholdclassifiercv": [2, 269, 289, 413, 806, 1057], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 269, "tupl": [47, 83, 84, 90, 132, 191, 235, 375, 376, 377, 396, 418, 426, 439, 457, 459, 470, 473, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 512, 515, 517, 518, 519, 520, 521, 529, 540, 568, 569, 574, 575, 576, 577, 589, 590, 591, 594, 595, 596, 598, 634, 639, 640, 641, 718, 719, 726, 749, 788, 790, 804, 807, 821, 834, 851, 852, 870, 871, 881, 882, 886, 889, 897, 901, 913, 914, 915, 916, 917, 926, 938, 939, 941, 946, 947, 948, 949, 973, 974, 991, 996, 1015, 1045, 1046, 1050, 1051, 1052, 1057], "tur": 1057, "turn": [2, 30, 43, 68, 111, 185, 186, 190, 202, 232, 233, 249, 275, 299, 332, 358, 369, 370, 371, 377, 394, 396, 397, 414, 415, 417, 419, 422, 423, 424, 588, 589, 596, 614, 615, 840, 844, 913, 916, 940, 998, 1002, 1010, 1013, 1018, 1032, 1044, 1046, 1047, 1052], "turquois": [127, 131, 132, 152, 223, 234, 240, 262, 263, 282], "tushar": 1057, "tutori": [114, 163, 164, 165, 206, 219, 235, 275, 382, 383, 388, 390, 408, 414, 458, 468, 698, 1023, 1034, 1042], "tuveri": 1054, "tuzova": 1047, "tv": 93, "tw": [195, 376, 493, 515, 516, 665, 1023], "tweak": [2, 115, 251, 418, 973, 1007, 1050], "tweedi": [2, 187, 196, 217, 470, 503, 559, 655, 676, 687, 713, 731, 752, 754, 756, 757, 759, 837, 872, 875, 876, 884, 891, 1004, 1029, 1049, 1050, 1052], "tweedie_pow": 235, "tweedieregressor": [2, 43, 325, 328, 655, 676, 1004, 1050, 1053, 1054, 1058], "tweet": 1032, "twelfth": 703, "twenti": [57, 248, 379, 411, 414], "twice": [64, 269, 287, 289, 356, 358, 384, 424, 626, 737, 739, 957, 1048, 1056], "twine": 386, "twinx": 337, "twister": 1050, "twitter": 386, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 90, 95, 99, 104, 105, 109, 113, 117, 118, 120, 121, 123, 125, 126, 128, 131, 136, 137, 138, 145, 146, 147, 148, 150, 153, 154, 155, 156, 159, 169, 172, 174, 175, 176, 177, 180, 181, 185, 186, 187, 190, 191, 192, 197, 201, 202, 204, 206, 207, 208, 213, 217, 218, 219, 225, 226, 229, 234, 235, 239, 241, 242, 244, 249, 251, 252, 254, 260, 261, 262, 264, 265, 266, 269, 270, 272, 276, 282, 292, 298, 300, 303, 304, 306, 308, 315, 317, 320, 324, 325, 327, 328, 332, 336, 341, 342, 345, 346, 347, 349, 353, 356, 357, 358, 361, 365, 375, 376, 377, 378, 379, 380, 382, 384, 386, 388, 389, 390, 394, 396, 397, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 463, 465, 470, 475, 476, 477, 478, 479, 480, 481, 482, 494, 496, 497, 499, 500, 501, 503, 505, 507, 508, 509, 510, 511, 512, 514, 517, 521, 526, 529, 543, 545, 547, 551, 554, 556, 557, 560, 567, 577, 588, 591, 597, 598, 599, 602, 603, 605, 606, 607, 608, 609, 610, 613, 614, 615, 617, 618, 627, 628, 631, 635, 638, 639, 646, 650, 652, 677, 678, 680, 699, 706, 710, 711, 712, 719, 722, 723, 726, 728, 729, 730, 731, 738, 739, 742, 743, 745, 748, 750, 761, 762, 764, 770, 771, 778, 781, 784, 785, 786, 787, 788, 792, 793, 801, 802, 803, 804, 840, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 868, 869, 875, 876, 883, 884, 885, 886, 905, 906, 907, 911, 912, 919, 921, 922, 970, 986, 987, 993, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "two_d_arrai": 928, "two_d_label": 931, "two_mean": 79, "two_point_correl": [851, 852], "twoclass_output": 139, "twosigmajab": 1047, "twx": 51, "tx": 417, "tx_k": [417, 1002], "txn": 51, "txt": [356, 376, 500, 510], "ty": 417, "ty_k": 417, "tyagi": 1053, "tygert": [542, 548, 955], "tyler": [1046, 1052, 1053, 1054], "type": [2, 46, 52, 88, 89, 100, 103, 104, 114, 120, 121, 132, 146, 147, 149, 179, 186, 187, 189, 190, 191, 195, 202, 217, 219, 246, 251, 256, 258, 259, 261, 262, 265, 266, 269, 270, 276, 281, 282, 284, 285, 286, 288, 289, 292, 305, 321, 331, 349, 356, 358, 364, 365, 370, 375, 376, 377, 379, 382, 385, 386, 387, 388, 394, 395, 400, 402, 408, 411, 415, 422, 438, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 503, 515, 516, 522, 574, 579, 588, 589, 595, 596, 598, 607, 611, 624, 634, 636, 637, 645, 663, 665, 679, 681, 686, 694, 696, 699, 700, 706, 708, 714, 721, 723, 736, 737, 740, 745, 790, 791, 794, 795, 804, 805, 807, 813, 821, 830, 835, 837, 838, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 871, 872, 873, 876, 878, 884, 885, 891, 892, 909, 913, 914, 915, 916, 917, 932, 933, 935, 937, 938, 941, 946, 947, 970, 971, 994, 998, 1000, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1020, 1024, 1029, 1031, 1032, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "type_check": 386, "type_filt": 947, "type_of_target": [2, 396, 878, 892, 1009, 1053, 1054, 1056, 1057], "type_of_target_": 892, "typed_ndarrai": 382, "typeerror": [251, 327, 387, 718, 941, 964, 991, 1046, 1047, 1050, 1052, 1056], "typic": [25, 62, 64, 127, 135, 148, 195, 202, 217, 221, 235, 250, 277, 278, 282, 284, 285, 301, 302, 326, 345, 357, 369, 375, 376, 377, 380, 384, 385, 391, 395, 396, 408, 410, 412, 414, 415, 418, 419, 421, 422, 424, 449, 453, 455, 503, 548, 558, 562, 563, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 636, 645, 647, 650, 661, 662, 663, 678, 689, 690, 719, 878, 885, 889, 892, 954, 955, 960, 964, 967, 992, 997, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1016, 1032, 1048, 1052, 1055, 1056], "typo": [382, 397, 405, 1039], "tzu": 1043, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 85, 87, 91, 120, 123, 130, 147, 148, 153, 174, 183, 189, 190, 191, 214, 218, 221, 225, 235, 238, 241, 248, 251, 257, 258, 261, 262, 266, 269, 270, 275, 278, 282, 288, 289, 321, 349, 356, 364, 370, 377, 382, 386, 388, 390, 394, 400, 405, 411, 414, 417, 419, 421, 422, 437, 469, 471, 488, 489, 490, 538, 544, 552, 553, 557, 559, 561, 563, 565, 567, 569, 572, 575, 577, 595, 596, 598, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 688, 691, 696, 700, 711, 727, 747, 762, 844, 845, 854, 862, 869, 891, 905, 912, 914, 917, 920, 922, 955, 1000, 1002, 1007, 1008, 1015, 1018, 1032, 1036, 1049], "u2uwz2": [172, 379], "u_": [411, 488, 489, 490], "u_1": [411, 1000], "u_2": [411, 1000], "u_i": [414, 488, 489, 490, 762], "u_init": 550, "u_k": [417, 419], "uai": 1020, "ubuntu": [369, 380, 388, 390], "uchida": 1049, "uci": [47, 172, 269, 320, 376, 379, 507, 509, 511, 517], "ucl": 1021, "ucla": 1004, "udi": 1039, "udit": 1053, "ufmay": 1051, "ufunc": [190, 1056], "ugli": [226, 303, 306, 341], "ugo": 1053, "ugurcaliskan": 1043, "ugurthemast": [1042, 1043], "uhmann": 1052, "uieda": 1052, "uint": 1050, "uint32": [377, 504], "uint8": [88, 126, 376, 504, 513, 514, 1051], "uk": 1021, "ulloa": 1045, "ulrik": [414, 458, 468, 698], "ulterior": 52, "ultim": [90, 241, 383], "umar": [1047, 1048], "umass": [45, 57, 377], "umberto": 1051, "umbrella": 413, "umpi": 422, "un": [51, 382, 412, 422, 426, 540, 596, 802, 874, 883, 894, 898, 1048], "unabl": [51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 189, 190, 191, 192, 199, 202, 217, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 329, 331, 336, 364, 371, 891, 1018, 1048], "unadjust": [414, 1008, 1051], "unaffect": 1011, "unalt": 1008, "unambigu": [284, 1009, 1045], "unanim": 397, "unavail": [396, 665, 666, 968, 1046, 1052], "unbalanc": [2, 187, 278, 340, 343, 346, 418, 519, 638, 916, 942, 943, 997, 1022, 1029], "unbias": [111, 412, 416, 419, 443, 557, 663, 679, 681, 694, 1004], "unbound": [72, 1007, 1053, 1057], "uncalibr": [61, 62, 63, 443], "uncent": 199, "uncertain": [275, 335, 381], "uncertainti": [62, 153, 174, 181, 197, 277, 412, 414, 574, 575, 650, 871, 998, 1020], "uncertainty_index": [334, 335], "unchang": [180, 190, 235, 282, 421, 438, 443, 448, 449, 450, 451, 452, 453, 455, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 618, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 699, 770, 806, 808, 809, 814, 816, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 858, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 996, 1011, 1047, 1053, 1055], "unclaim": 385, "unclear": [381, 382, 508], "unclust": 452, "uncommon": [416, 665, 911, 1023], "uncompress": [47, 515, 516], "unconstrain": [153, 155, 191, 325, 331, 377, 1022], "uncorrect": [275, 602, 605], "uncorrel": [2, 281, 378, 535, 541, 548, 1008], "uncorrupt": 44, "uncov": [133, 702], "undefin": [52, 278, 396, 719, 736, 745, 790, 976, 1008, 1047, 1051, 1055, 1058], "undefinedmetricwarn": [2, 313, 736, 737, 790, 791, 794, 1048], "under": [2, 43, 46, 50, 61, 62, 64, 76, 102, 111, 112, 130, 147, 150, 191, 205, 217, 244, 254, 275, 282, 284, 285, 316, 330, 376, 382, 384, 386, 388, 390, 396, 400, 408, 412, 414, 416, 418, 419, 422, 423, 452, 457, 459, 476, 477, 478, 479, 480, 481, 482, 498, 539, 546, 548, 550, 661, 662, 663, 709, 713, 714, 715, 722, 761, 795, 796, 804, 805, 856, 963, 1004, 1005, 1006, 1008, 1011, 1018, 1022, 1023, 1024, 1027, 1028, 1039, 1041, 1042, 1044, 1047, 1051], "underdetermin": 202, "underestim": [52, 150, 191, 217, 235, 275, 382], "underfit": [43, 70, 150, 174, 187, 192, 218, 221, 267, 288, 310, 321, 352, 421, 664, 807, 810, 811, 821, 833, 834, 871, 886, 1003, 1004, 1029], "underflow": [1047, 1052], "undergo": 281, "undergrad": 1032, "underli": [64, 91, 113, 157, 172, 190, 193, 218, 220, 221, 251, 269, 280, 299, 300, 349, 363, 370, 382, 394, 396, 399, 405, 410, 412, 414, 416, 418, 419, 420, 421, 423, 424, 443, 457, 458, 459, 468, 470, 471, 477, 478, 484, 531, 562, 563, 571, 572, 574, 575, 576, 577, 600, 601, 604, 609, 665, 666, 672, 675, 680, 682, 687, 698, 702, 806, 807, 810, 811, 821, 829, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 854, 856, 908, 911, 919, 920, 921, 922, 972, 996, 1004, 1005, 1009, 1014, 1021, 1023, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1055, 1056, 1057, 1058], "underrepres": 382, "underscor": [245, 358, 384, 396, 991, 1039, 1049, 1052], "underset": [419, 1004, 1011, 1024], "understand": [43, 48, 52, 76, 137, 179, 187, 191, 251, 269, 270, 273, 289, 326, 327, 342, 349, 356, 359, 360, 365, 381, 382, 383, 388, 394, 399, 414, 421, 422, 511, 837, 868, 869, 919, 920, 921, 922, 925, 997, 998, 1005, 1007, 1024, 1026, 1027, 1029, 1032, 1039, 1053], "understood": [276, 382, 414, 964], "undertak": 394, "undesir": [92, 175, 424, 829], "undistinguish": 418, "undistort": 126, "undo": [276, 881, 1043], "undocu": 1046, "unequ": [92, 1047], "uneth": 189, "uneven": [87, 270, 414, 418], "unevenli": [92, 217, 270], "unexpect": [92, 251, 365, 382, 387, 390, 400, 408, 542, 703, 1008, 1023, 1041, 1047, 1048, 1051, 1053, 1055, 1057], "unexpectedli": [396, 1047], "unfair": 365, "unfinish": [381, 382], "unfit": [2, 91, 415, 439, 470, 576, 577, 609, 618, 1047, 1049, 1056], "unfold": [128, 385, 1005], "unfortun": [150, 189, 190, 235, 390, 394, 421, 515, 516], "unhandl": 1048, "unhelp": 382, "unicod": [358, 422, 493, 510, 589, 595, 596, 598, 972, 1039, 1047, 1051], "unicodedata": [595, 596, 598], "unicodedecodeerror": [422, 595, 596, 598], "unifi": [292, 383, 391, 394, 395, 421, 644, 1027, 1039], "unifom": 298, "uniform": [2, 58, 67, 72, 88, 149, 150, 154, 168, 175, 180, 183, 197, 198, 231, 242, 244, 247, 283, 298, 301, 302, 307, 310, 316, 318, 319, 322, 328, 330, 344, 384, 387, 408, 414, 444, 445, 558, 576, 577, 617, 618, 635, 646, 656, 657, 661, 675, 683, 684, 685, 706, 728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 797, 798, 811, 819, 821, 846, 847, 850, 853, 854, 861, 862, 876, 888, 890, 900, 942, 957, 997, 998, 1007, 1008, 1011, 1045, 1047, 1049, 1053, 1055, 1058], "uniform_averag": [437, 471, 488, 489, 490, 561, 563, 565, 567, 569, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 728, 730, 735, 752, 753, 755, 757, 758, 760, 792, 797, 798, 844, 845, 854, 862, 869, 912, 914, 917, 920, 922, 1008, 1048, 1058], "uniform_labelings_scor": 72, "uniformli": [72, 143, 150, 167, 244, 260, 324, 384, 523, 524, 525, 558, 649, 811, 819, 821, 890, 997, 998, 1008, 1011, 1018, 1043, 1048], "unigram": [276, 377, 422, 595, 596, 598, 1046], "unilev": 51, "unimod": [244, 480], "unimport": [423, 1016], "uninform": [62, 64, 322, 378, 387, 422, 997, 1004, 1047], "uniniti": 390, "uninstal": 380, "unintention": 1018, "unintuit": 92, "union": [104, 190, 415, 745, 761, 870, 1046], "union_not_memb": 190, "uniqu": [2, 43, 61, 66, 77, 82, 83, 92, 93, 98, 102, 107, 144, 145, 151, 152, 153, 190, 192, 202, 232, 235, 262, 284, 304, 321, 322, 330, 337, 356, 357, 358, 376, 384, 391, 396, 414, 415, 418, 421, 422, 446, 456, 460, 462, 470, 473, 503, 556, 557, 558, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 573, 617, 640, 641, 642, 673, 675, 683, 704, 716, 718, 761, 789, 807, 809, 821, 834, 839, 840, 843, 849, 858, 861, 863, 868, 870, 882, 884, 885, 892, 895, 911, 913, 919, 920, 921, 922, 942, 955, 970, 971, 1004, 1009, 1018, 1032, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "unique_label": [2, 84, 90, 357, 384, 391], "unit": [2, 63, 104, 113, 190, 195, 217, 235, 300, 312, 315, 332, 357, 377, 382, 384, 388, 390, 391, 419, 422, 426, 470, 495, 496, 526, 531, 539, 540, 541, 548, 549, 596, 597, 598, 614, 615, 618, 665, 666, 683, 692, 706, 777, 858, 867, 868, 869, 875, 881, 883, 887, 889, 891, 897, 898, 899, 901, 902, 911, 912, 1004, 1006, 1007, 1008, 1013, 1018, 1024, 1043, 1047, 1053, 1054], "unit_eig_vec": 260, "unit_vari": [889, 901, 1051], "unitari": 955, "uniti": 30, "univ": [696, 700, 1005], "univ_select": 108, "univari": [2, 18, 48, 49, 71, 106, 108, 166, 167, 169, 187, 200, 216, 232, 340, 374, 414, 415, 422, 451, 511, 532, 537, 599, 602, 603, 605, 606, 607, 609, 612, 613, 614, 615, 616, 634, 635, 636, 637, 652, 807, 812, 833, 837, 871, 872, 881, 886, 890, 891, 911, 916, 1004, 1023, 1025, 1029, 1030, 1034, 1039, 1045], "univers": [0, 182, 190, 356, 377, 379, 385, 414, 419, 422, 597, 795, 846, 850, 906, 1004, 1006, 1008, 1010], "unix": 422, "unknown": [52, 91, 190, 251, 275, 334, 336, 371, 377, 396, 408, 411, 422, 878, 884, 885, 970, 1007, 1018, 1043, 1047, 1051, 1052], "unknown_typ": 408, "unknown_v": 158, "unknown_valu": [147, 158, 192, 254, 321, 885, 1018, 1051, 1053, 1054], "unlabel": [38, 45, 252, 326, 334, 335, 336, 338, 339, 396, 414, 906, 907, 908, 1007, 1051], "unlabeled_indic": 335, "unlabeled_set": 334, "unless": [189, 251, 261, 266, 382, 385, 394, 396, 408, 412, 414, 417, 425, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 495, 503, 515, 516, 538, 542, 543, 544, 546, 549, 550, 552, 553, 554, 555, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 601, 609, 614, 615, 617, 618, 639, 641, 646, 653, 654, 658, 659, 660, 662, 664, 665, 666, 668, 670, 672, 673, 675, 683, 686, 695, 696, 697, 698, 699, 700, 701, 716, 721, 781, 785, 788, 807, 810, 811, 813, 821, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 853, 854, 857, 859, 861, 862, 864, 865, 868, 869, 870, 873, 892, 896, 897, 899, 900, 901, 902, 906, 907, 919, 920, 921, 922, 930, 933, 937, 938, 955, 1004, 1007, 1009, 1039, 1041, 1045, 1047, 1050, 1051, 1056, 1057], "unlik": [90, 91, 143, 190, 191, 237, 239, 265, 315, 343, 382, 384, 388, 394, 396, 405, 408, 416, 418, 419, 422, 452, 456, 542, 657, 658, 661, 662, 663, 689, 690, 792, 828, 851, 852, 891, 902, 914, 1004, 1007, 1008, 1015, 1023, 1039, 1045], "unlimit": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "unlucki": 365, "unmaintain": 1039, "unmarri": 190, "unmeaning": 1046, "unmix": [124, 426, 540], "unmixing_matrix": 540, "unmodifi": [384, 396], "unnecessari": [143, 260, 387, 434, 449, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 712, 1011, 1018, 1028, 1032, 1042, 1044, 1049, 1050, 1052, 1055], "unnecessarili": [241, 1046, 1049], "unnorm": [396, 543, 1005, 1045, 1046], "unobserv": [153, 189, 190, 419], "unord": [414, 421, 1018], "unpack": 384, "unpen": [412, 655, 676, 687, 1004], "unpickl": [2, 396, 583, 851, 852, 1045, 1051, 1055], "unpleas": 1041, "unpract": 1007, "unprefix": 1045, "unprocess": [456, 595, 596, 598], "unprotect": 973, "unprun": [564, 565, 571, 572, 919, 920, 921, 922], "unquot": 235, "unrealist": 377, "unreason": [235, 418], "unreg": 350, "unregular": [884, 907, 1048], "unrel": [321, 370, 382, 387, 390, 422, 522], "unreli": [269, 415], "unrepresent": 926, "unrestrict": 500, "unrol": 241, "unrot": 133, "unsaf": 541, "unsampl": 1000, "unscal": [315, 320, 1004, 1008, 1047, 1053], "unscaled_clf": 320, "unseen": [111, 148, 169, 206, 221, 225, 301, 349, 371, 374, 384, 395, 396, 414, 418, 857, 888, 900, 999, 1008, 1014, 1016, 1018, 1024, 1042, 1047, 1051], "unseen_featur": [422, 588], "unset": [370, 396, 1047], "unsetmetadatapassederror": [405, 1058], "unshad": 419, "unshifft": 684, "unshift": 915, "unsign": [88, 127, 377, 589, 972], "unsmooth": 420, "unsort": [1011, 1040, 1043, 1047], "unspecifi": [606, 607, 1005], "unstabl": [74, 101, 190, 410, 414, 416, 417, 696, 700, 954, 955, 1024, 1043, 1044, 1046, 1051, 1053, 1055, 1058], "unstack": [235, 278], "unstructur": [53, 71, 74, 75, 76, 82, 187, 241, 312, 414, 447, 451, 469, 510, 537, 864, 1020, 1029, 1032, 1043], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 84, 106, 107, 118, 123, 142, 156, 244, 252, 301, 302, 344, 356, 357, 365, 374, 377, 384, 395, 396, 414, 417, 419, 420, 421, 422, 423, 438, 448, 451, 539, 541, 543, 544, 546, 549, 550, 556, 570, 573, 574, 576, 577, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 635, 637, 641, 642, 645, 646, 647, 648, 649, 684, 807, 810, 811, 813, 821, 830, 835, 838, 853, 854, 857, 859, 860, 861, 862, 867, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 903, 904, 908, 915, 1005, 1008, 1014, 1021, 1030, 1034, 1039, 1042, 1052, 1056], "unsupport": [405, 408, 500, 1047, 1052], "unsur": 912, "untangl": 128, "untar": 47, "unterthin": [1042, 1043, 1044], "until": [90, 172, 225, 287, 326, 328, 387, 396, 397, 411, 414, 418, 423, 515, 516, 564, 565, 566, 567, 571, 572, 573, 600, 653, 654, 659, 660, 665, 666, 667, 668, 669, 670, 673, 674, 675, 678, 683, 684, 685, 701, 804, 805, 810, 811, 868, 869, 908, 911, 919, 920, 921, 922, 982, 997, 1004, 1005, 1013, 1021, 1024, 1042, 1046, 1047, 1053, 1058], "untransform": [349, 470, 473, 1019], "untru": 1008, "untrust": 408, "untun": [150, 332], "unus": [120, 129, 191, 214, 237, 239, 469, 586, 770, 778, 997, 1005, 1039, 1047, 1049, 1050, 1052, 1054], "unusu": [64, 411, 1014, 1018, 1047], "unveil": 1045, "unvendor": 1047, "unwant": [218, 356], "unweight": [186, 230, 469, 654, 660, 685, 714, 720, 736, 737, 745, 790, 791, 794, 795, 846, 847, 848, 849, 850, 998], "unwieldi": 882, "uoa": 904, "up": [2, 47, 50, 72, 79, 81, 82, 83, 87, 90, 92, 97, 104, 113, 114, 121, 135, 142, 153, 186, 190, 191, 197, 202, 210, 218, 233, 234, 262, 269, 277, 280, 295, 308, 313, 316, 321, 328, 332, 335, 342, 349, 352, 356, 358, 371, 376, 377, 382, 386, 388, 389, 390, 391, 394, 396, 397, 412, 414, 419, 421, 422, 449, 453, 454, 455, 456, 458, 462, 465, 466, 467, 515, 516, 543, 556, 557, 564, 565, 566, 567, 568, 569, 571, 572, 573, 617, 634, 639, 640, 646, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 688, 689, 690, 691, 699, 712, 776, 804, 805, 809, 810, 811, 813, 835, 885, 886, 889, 901, 919, 920, 921, 922, 925, 955, 958, 959, 997, 1000, 1004, 1005, 1008, 1011, 1018, 1022, 1023, 1028, 1031, 1032, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "upadhyai": [1045, 1046, 1047, 1048], "upcast": [1049, 1053], "upcom": [179, 380], "updat": [47, 79, 97, 137, 143, 152, 249, 324, 358, 381, 382, 385, 390, 396, 408, 414, 419, 421, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 821, 825, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 982, 1004, 1011, 1012, 1013, 1022, 1031, 1032, 1040, 1046, 1047, 1048, 1050, 1052, 1054, 1055, 1057, 1058], "update_environments_and_lock_fil": 382, "update_from": 302, "update_func": 302, "update_h": 554, "update_layout": [143, 276], "update_legend_marker_s": 302, "update_terminal_region": 1048, "upgrad": [324, 325, 326, 327, 328, 329, 330, 331, 332, 400, 1028, 1039, 1044, 1047], "upload": [376, 380, 386, 394, 678], "upload_d": 376, "upon": [235, 242, 251, 308, 377, 382, 394, 396, 408, 568, 569, 634, 637, 678, 796, 804, 805, 851, 852, 997, 1004, 1024, 1053], "upper": [43, 46, 48, 61, 106, 109, 112, 113, 114, 125, 139, 140, 141, 149, 150, 151, 152, 158, 160, 168, 178, 180, 183, 190, 211, 217, 223, 224, 227, 231, 234, 235, 248, 252, 253, 274, 275, 276, 289, 300, 301, 311, 320, 337, 344, 347, 349, 351, 414, 420, 469, 595, 596, 598, 602, 620, 621, 622, 624, 626, 627, 629, 630, 632, 639, 640, 642, 644, 657, 661, 684, 742, 795, 884, 885, 913, 914, 915, 941, 1007, 1008, 1011, 1018, 1022, 1023, 1024, 1047], "upperbound": 741, "uppercas": [396, 1052], "uppercase_initi": 422, "upperlimit": 711, "upright": 377, "upstream": [369, 382, 386, 390, 394, 1018, 1048], "upward": [456, 462], "ur": 1050, "urbanowicz": 1008, "urbanowicz2015": 1008, "urcrnrlat": [50, 308], "urcrnrlon": [50, 308], "uri": 55, "url": [51, 52, 55, 172, 376, 379, 384, 386, 498], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1057, "urvang": [1047, 1049], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 120, 121, 122, 125, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 229, 232, 234, 235, 237, 238, 239, 240, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 355, 358, 360, 362, 363, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 391, 395, 396, 397, 399, 400, 401, 402, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 500, 501, 503, 505, 506, 510, 513, 515, 516, 518, 521, 522, 523, 526, 527, 529, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 744, 745, 746, 748, 749, 750, 752, 753, 755, 757, 758, 760, 762, 763, 764, 765, 766, 770, 771, 773, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 933, 936, 937, 938, 940, 943, 945, 950, 952, 954, 955, 959, 960, 963, 964, 965, 967, 970, 974, 976, 978, 979, 981, 983, 984, 985, 991, 996, 997, 998, 1000, 1001, 1003, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "usa": [274, 377, 908, 998, 1005, 1020, 1021], "usabl": [153, 376, 382, 384, 396, 408, 422, 807, 1039, 1046, 1053, 1054], "usag": [41, 77, 88, 105, 108, 117, 127, 135, 169, 190, 191, 245, 249, 251, 268, 269, 304, 306, 312, 341, 358, 369, 377, 381, 382, 385, 389, 390, 392, 396, 397, 400, 408, 414, 418, 419, 424, 425, 450, 452, 456, 467, 470, 477, 495, 501, 503, 530, 541, 542, 548, 556, 568, 569, 598, 616, 647, 655, 665, 666, 667, 673, 674, 675, 676, 683, 684, 685, 686, 687, 697, 785, 788, 799, 800, 867, 868, 870, 911, 919, 920, 921, 922, 930, 955, 997, 998, 1000, 1007, 1008, 1009, 1011, 1023, 1030, 1031, 1034, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "usd": 254, "use_encoded_valu": [147, 158, 192, 254, 321, 885, 1018, 1051], "use_group": 270, "use_idf": [419, 422, 597, 598], "usecas": [325, 328, 330, 414, 569], "useless": [54, 146, 278, 388, 423, 522, 535, 665, 719, 1004, 1018, 1048], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 90, 103, 123, 143, 151, 183, 187, 190, 193, 204, 237, 251, 265, 272, 282, 284, 292, 295, 301, 302, 305, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 365, 369, 370, 376, 380, 381, 382, 384, 386, 388, 389, 390, 394, 395, 396, 400, 402, 405, 408, 412, 414, 415, 416, 418, 419, 421, 422, 423, 425, 426, 427, 428, 431, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 925, 951, 955, 997, 998, 1004, 1005, 1007, 1008, 1009, 1011, 1018, 1022, 1027, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "user_guid": 43, "user_r": 415, "userguid": 1046, "usernam": 400, "userscript": 390, "userwarn": [79, 97, 245, 387, 719, 1018, 1045, 1047, 1052, 1057], "ushtanit": [1051, 1052], "using_kernels_tut": 165, "usp": 44, "usr": 380, "usual": [43, 52, 75, 111, 112, 114, 149, 150, 152, 158, 189, 191, 203, 217, 218, 268, 269, 272, 275, 284, 285, 289, 316, 327, 345, 365, 369, 370, 380, 382, 384, 386, 390, 394, 395, 396, 400, 405, 411, 414, 415, 418, 419, 421, 422, 423, 456, 462, 545, 547, 549, 554, 566, 567, 614, 615, 637, 647, 665, 666, 673, 674, 675, 683, 684, 685, 699, 733, 765, 813, 835, 839, 911, 928, 955, 997, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1018, 1022, 1023, 1024, 1054], "utc": 1008, "utf": [356, 358, 422, 493, 510, 589, 595, 596, 598], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 83, 90, 91, 96, 135, 137, 151, 158, 193, 217, 225, 233, 239, 247, 251, 253, 263, 281, 283, 295, 317, 324, 337, 345, 349, 356, 370, 376, 377, 382, 383, 384, 385, 394, 395, 396, 410, 413, 414, 415, 418, 419, 422, 443, 449, 450, 453, 455, 459, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 588, 589, 595, 597, 598, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 697, 806, 807, 808, 809, 814, 816, 825, 829, 831, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 858, 861, 862, 868, 869, 871, 874, 876, 877, 878, 883, 890, 891, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1003, 1006, 1008, 1009, 1018, 1019, 1027, 1032, 1034, 1039, 1040, 1042, 1043, 1045, 1046], "utilis": 1045, "utkarsh": [1045, 1046, 1047, 1048], "utl": 423, "utstat": 651, "uttam": 1052, "uv": [123, 419], "uw": [172, 379, 1051], "uwha": [1052, 1053], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 82, 84, 90, 93, 104, 109, 110, 113, 115, 116, 117, 123, 125, 126, 130, 141, 143, 144, 145, 150, 152, 168, 174, 187, 188, 193, 196, 206, 215, 216, 217, 218, 221, 222, 226, 232, 241, 248, 261, 262, 265, 266, 267, 271, 292, 306, 322, 324, 342, 353, 357, 365, 370, 374, 379, 382, 388, 390, 396, 410, 411, 412, 416, 417, 419, 422, 437, 447, 451, 458, 468, 469, 470, 471, 476, 479, 480, 481, 482, 483, 488, 489, 490, 503, 519, 531, 537, 538, 544, 548, 552, 553, 557, 559, 561, 563, 565, 567, 569, 571, 572, 575, 577, 588, 596, 600, 601, 607, 613, 618, 637, 638, 641, 642, 646, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 683, 685, 686, 695, 702, 706, 708, 711, 724, 743, 744, 746, 761, 762, 764, 795, 802, 807, 812, 819, 821, 833, 837, 839, 840, 841, 844, 845, 846, 854, 862, 864, 867, 869, 871, 872, 875, 878, 884, 885, 886, 891, 892, 895, 905, 911, 912, 913, 914, 916, 917, 920, 922, 926, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1013, 1016, 1018, 1022, 1023, 1025, 1029, 1034, 1039, 1042, 1043, 1044, 1047, 1049, 1050, 1053, 1054, 1057], "v0": [477, 478, 484, 519, 595, 596, 598, 807, 821, 870, 873, 1040, 1047, 1048, 1049], "v1": [269, 329, 376, 400, 804, 805, 1051, 1054, 1055, 1056, 1057], "v10": 269, "v11": 269, "v12": 269, "v13": 269, "v14": 269, "v15": 269, "v16": 269, "v17": 269, "v18": 269, "v19": 269, "v2": [269, 377, 504, 671, 692, 693, 1004], "v20": 269, "v21": 269, "v22": 269, "v23": 269, "v24": 269, "v25": 269, "v26": 269, "v27": 269, "v28": 269, "v3": 269, "v4": 269, "v5": [269, 1047], "v6": 269, "v7": 269, "v8": 269, "v9": 269, "v_": [411, 422], "v_1": 411, "v_2": 411, "v_i": 1013, "v_ih_j": 1013, "v_init": 550, "v_j": [414, 762, 1013], "v_k": [417, 419, 538, 544, 552, 553], "v_measur": [743, 802], "v_measure_scor": [2, 57, 72, 73, 84, 93, 330, 357, 414, 724, 743, 744, 764, 1008, 1048], "v_new": 867, "va": [47, 148, 170, 286, 303, 305, 351], "vac": 292, "vacaliuc": [1047, 1048], "vacat": 377, "vachan": 1050, "vadim": [1047, 1051, 1052], "vaerenbergh": [1054, 1055], "vaggi": [1041, 1042], "vaillant": 1051, "val": [107, 229, 275, 957], "val_errors_with": 148, "val_errors_without": 148, "val_pr": 148, "val_scor": 149, "vale": 1049, "valencia": [1053, 1055], "valentin": [1042, 1044, 1054, 1055], "valero": 51, "valgrind": 385, "valid": [2, 47, 52, 53, 63, 64, 89, 90, 91, 92, 105, 106, 108, 109, 111, 115, 130, 135, 141, 143, 146, 147, 148, 149, 150, 153, 162, 166, 169, 170, 172, 182, 187, 190, 192, 196, 202, 203, 204, 205, 211, 217, 219, 225, 235, 251, 253, 257, 262, 265, 267, 272, 275, 276, 277, 279, 281, 282, 283, 284, 287, 288, 289, 290, 292, 299, 313, 316, 321, 324, 326, 331, 337, 345, 352, 360, 370, 377, 382, 385, 394, 395, 396, 408, 409, 412, 414, 415, 416, 419, 420, 421, 422, 423, 428, 430, 443, 448, 449, 451, 452, 453, 455, 456, 463, 469, 470, 474, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 500, 508, 509, 511, 522, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 582, 584, 589, 590, 596, 600, 601, 604, 609, 639, 641, 645, 646, 647, 648, 649, 650, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 699, 706, 708, 709, 713, 720, 735, 769, 772, 781, 785, 786, 787, 792, 799, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 845, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 877, 883, 891, 903, 904, 906, 907, 909, 911, 913, 916, 918, 919, 920, 921, 922, 928, 930, 937, 938, 939, 940, 941, 949, 962, 964, 967, 991, 992, 993, 994, 995, 996, 998, 1007, 1008, 1009, 1011, 1012, 1016, 1018, 1020, 1022, 1023, 1024, 1028, 1029, 1032, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "valid_metr": [851, 852, 1011, 1055], "valid_scor": 1003, "validate_data": [2, 1058], "validate_metadata": [251, 964], "validate_separ": 996, "validation_curv": [2, 330, 352, 405, 830, 1003, 1046, 1047, 1048, 1051, 1055, 1058], "validation_fract": [148, 153, 225, 327, 421, 566, 567, 568, 569, 673, 674, 675, 683, 685, 868, 869, 1022, 1047, 1053], "validation_score_": [153, 568, 569], "validation_scores_": [868, 869, 1054], "validationcurvedisplai": [2, 288, 1003, 1055], "validationerror": 1053, "vallei": 321, "vall\u00e9": 1046, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 81, 88, 90, 95, 96, 97, 101, 105, 107, 109, 111, 113, 115, 123, 126, 133, 135, 137, 139, 141, 142, 143, 144, 145, 147, 150, 151, 154, 155, 157, 158, 167, 168, 170, 171, 174, 177, 178, 180, 182, 189, 190, 191, 192, 193, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 210, 215, 217, 218, 219, 221, 223, 232, 235, 236, 239, 240, 244, 245, 246, 247, 248, 249, 250, 254, 257, 258, 260, 266, 268, 269, 271, 273, 275, 276, 278, 280, 281, 282, 284, 286, 287, 288, 289, 295, 298, 307, 308, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 326, 332, 337, 345, 349, 350, 352, 356, 357, 358, 360, 365, 369, 370, 371, 374, 375, 376, 377, 379, 383, 384, 385, 387, 388, 389, 391, 394, 395, 396, 399, 400, 405, 411, 412, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 496, 497, 500, 503, 504, 505, 508, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 776, 778, 781, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 819, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 932, 934, 935, 936, 937, 938, 941, 942, 943, 945, 947, 955, 957, 964, 967, 968, 969, 970, 971, 983, 984, 985, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1021, 1022, 1023, 1029, 1030, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "valuabl": [148, 269, 382, 998, 1032], "valuat": 421, "value_count": [43, 52, 191, 269, 289, 292], "value_kei": [394, 926], "value_typ": [424, 624], "valueerror": [2, 251, 252, 384, 388, 405, 474, 584, 610, 624, 642, 678, 721, 843, 861, 870, 876, 890, 936, 938, 940, 941, 992, 993, 994, 1018, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "values_format": [704, 1049], "vamsi": 1054, "van": [0, 376, 403, 416, 475, 480, 541, 634, 699, 703, 998, 1005, 1008, 1014, 1032, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055], "vandana": 1050, "vander": 198, "vandermond": [218, 1018], "vanderpla": [0, 404, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "vang": 1052, "vanilla": [217, 410, 413, 414, 453, 455, 466, 636], "vanilla_model": 269, "vanilla_model_coef": 289, "vanrel": 1045, "vanschoren": [376, 1051], "vapnik": [600, 601], "var": [117, 118, 140, 172, 198, 275, 379, 383, 423, 648, 652, 913, 914, 915, 916, 917, 1008, 1047], "var_": [541, 849, 891, 1052], "var_smooth": [849, 1047], "varanasi": [1039, 1042], "vardhan": 1043, "varepsilon": [414, 1022, 1023], "vari": [46, 52, 64, 67, 70, 79, 81, 90, 97, 100, 109, 143, 144, 146, 156, 165, 171, 176, 178, 187, 190, 191, 205, 206, 208, 211, 215, 224, 242, 249, 254, 265, 271, 275, 278, 289, 309, 315, 317, 318, 320, 330, 333, 339, 345, 348, 350, 365, 369, 371, 377, 396, 408, 447, 451, 452, 507, 515, 521, 522, 529, 566, 567, 571, 572, 653, 654, 657, 658, 659, 660, 661, 662, 667, 668, 669, 670, 688, 691, 710, 770, 826, 830, 835, 837, 838, 868, 872, 876, 891, 908, 916, 919, 920, 981, 1000, 1003, 1004, 1008, 1011, 1012, 1021, 1024, 1029, 1032, 1046, 1047, 1055], "variabl": [2, 43, 48, 50, 51, 52, 72, 104, 140, 144, 147, 150, 151, 153, 167, 172, 181, 182, 185, 186, 191, 192, 195, 202, 206, 217, 221, 222, 235, 239, 251, 254, 266, 269, 275, 278, 285, 292, 294, 320, 321, 322, 365, 369, 371, 377, 379, 380, 382, 384, 386, 387, 390, 396, 405, 410, 414, 415, 416, 417, 419, 421, 422, 423, 456, 488, 489, 490, 493, 506, 508, 515, 522, 539, 541, 543, 548, 551, 560, 566, 567, 611, 613, 614, 615, 647, 657, 658, 661, 662, 668, 689, 690, 702, 716, 754, 808, 809, 812, 814, 815, 816, 817, 822, 823, 824, 825, 826, 827, 831, 832, 833, 834, 836, 839, 843, 844, 874, 885, 888, 892, 900, 912, 997, 998, 1000, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1018, 1022, 1024, 1027, 1028, 1039, 1044, 1047, 1049, 1052, 1054, 1058], "varianc": [2, 37, 43, 44, 52, 64, 79, 90, 92, 97, 107, 111, 113, 117, 118, 120, 123, 124, 125, 128, 130, 131, 133, 136, 152, 153, 181, 187, 190, 196, 198, 200, 202, 206, 207, 213, 217, 219, 222, 235, 265, 269, 272, 275, 278, 284, 285, 289, 304, 310, 315, 320, 332, 357, 365, 374, 378, 391, 411, 412, 414, 416, 417, 418, 419, 420, 421, 426, 447, 451, 455, 469, 528, 531, 539, 540, 541, 548, 551, 556, 557, 562, 563, 565, 566, 567, 572, 610, 614, 615, 618, 632, 650, 651, 652, 659, 663, 664, 667, 669, 679, 680, 681, 682, 683, 694, 717, 735, 792, 804, 805, 849, 860, 875, 881, 887, 889, 891, 897, 899, 901, 902, 920, 922, 982, 983, 984, 988, 1002, 1003, 1004, 1006, 1011, 1012, 1013, 1016, 1020, 1022, 1023, 1024, 1025, 1029, 1030, 1034, 1039, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "variance_weight": [735, 792, 1008], "variances_": 610, "variancethreshold": [2, 423, 876, 998, 1042, 1049, 1052, 1055], "variant": [2, 64, 78, 123, 184, 186, 187, 275, 327, 328, 357, 358, 388, 414, 417, 419, 422, 424, 455, 466, 496, 500, 501, 519, 522, 550, 566, 567, 572, 622, 626, 629, 630, 634, 637, 645, 646, 648, 652, 679, 711, 808, 812, 814, 815, 816, 825, 833, 854, 872, 908, 998, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1022, 1028, 1029, 1039, 1047], "variat": [2, 43, 46, 51, 72, 100, 121, 155, 172, 179, 180, 186, 187, 190, 222, 259, 261, 266, 272, 286, 294, 305, 325, 345, 379, 408, 418, 419, 449, 453, 465, 543, 650, 679, 681, 682, 804, 805, 825, 826, 828, 997, 1008, 1018, 1021, 1024, 1027, 1029, 1033, 1034, 1042, 1044, 1045], "variegatu": [50, 308, 377, 505], "variet": 321, "varieti": [25, 62, 185, 262, 321, 345, 390, 414, 416, 422, 650, 1011, 1024, 1027, 1032, 1041, 1054, 1055], "varimax": [133, 419, 539, 1051], "variou": [4, 41, 43, 51, 71, 72, 74, 90, 93, 95, 96, 97, 114, 117, 126, 187, 190, 196, 225, 227, 236, 237, 238, 239, 248, 292, 295, 311, 319, 325, 334, 335, 356, 358, 364, 365, 369, 376, 377, 378, 379, 382, 384, 387, 395, 397, 412, 414, 416, 443, 447, 478, 509, 521, 522, 532, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 601, 609, 654, 658, 660, 662, 665, 668, 670, 672, 673, 675, 680, 682, 683, 698, 699, 706, 807, 810, 811, 813, 821, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 871, 911, 912, 997, 998, 1005, 1008, 1011, 1015, 1018, 1022, 1024, 1027, 1029, 1031, 1032, 1039, 1042, 1043, 1056], "varma": [1048, 1058], "varoquaux": [0, 397, 403, 1026, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "varun": [1045, 1046, 1047, 1053, 1054], "varunchaduvula": 1057, "vasani": 1050, "vasilei": [1032, 1046], "vasileva": 1053, "vasiloudi": 1044, "vassard": 1053, "vassilvitskii": [414, 453, 466], "vast": [269, 382], "vastli": 320, "vathsala": [1046, 1047, 1048, 1049], "vatsan": 1045, "vavrova": 1046, "vazelh": [1047, 1048, 1049], "vazirgianni": 414, "vb": 543, "vbgmm": [1039, 1043, 1045], "vc": 380, "vcvarsal": 380, "vd": 1057, "ve": [357, 382, 422, 1032, 1046], "veal": 57, "veb2009": 414, "veb2010": 414, "vec": [123, 422, 545, 547, 554], "veclib": [369, 394], "vect": [47, 104, 276, 338, 422], "vect__": 276, "vect__max_df": 276, "vect__min_df": 276, "vect__ngram_rang": 276, "vect__norm": 276, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 83, 106, 123, 125, 126, 168, 174, 182, 199, 221, 222, 229, 233, 249, 250, 257, 273, 275, 276, 280, 301, 313, 315, 332, 339, 341, 342, 345, 346, 347, 348, 349, 350, 352, 354, 357, 369, 371, 377, 387, 388, 391, 394, 396, 411, 412, 414, 416, 417, 418, 419, 421, 424, 425, 426, 443, 449, 450, 451, 453, 455, 456, 457, 459, 470, 471, 473, 474, 488, 489, 490, 491, 493, 495, 504, 516, 519, 528, 531, 538, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 574, 575, 576, 577, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 629, 630, 632, 638, 645, 647, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 698, 699, 700, 702, 706, 726, 742, 770, 775, 776, 777, 778, 780, 781, 782, 784, 785, 806, 807, 810, 811, 821, 829, 835, 838, 839, 840, 846, 847, 848, 849, 850, 853, 854, 855, 857, 858, 859, 861, 862, 863, 868, 869, 876, 878, 883, 891, 895, 898, 909, 911, 912, 913, 914, 915, 916, 917, 918, 937, 952, 954, 955, 970, 976, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1022, 1024, 1029, 1030, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1052, 1057], "vectori": [396, 1049], "vectorizer2": 595, "vectorizer_param": 338, "vectorizermixin": 1049, "vectorizing_tim": 47, "vectors_test": 377, "ved": 1056, "vedaldi": [645, 1000], "veenhui": [1054, 1055, 1056, 1057, 1058], "veerkhar": 1054, "veerlosar": 1049, "veghit": 1055, "vehag": [217, 235], "vehbrand": [217, 235], "vehga": [217, 235], "vehicl": [217, 235], "vehpow": [217, 235], "vel": 379, "velkov": 1041, "veloc": 382, "vembu": 412, "vempati": 1000, "vendor": [251, 1044, 1047, 1048], "venezuela": [50, 308, 377, 505], "venkat": [0, 404], "venkatachalam": [1049, 1050, 1051, 1052, 1053, 1056, 1057], "venkatesh": 1049, "venna": 703, "venthur": 1047, "venu": [0, 396], "venv": [380, 400], "vera": [1053, 1054], "verbos": [49, 77, 85, 89, 99, 104, 106, 108, 158, 276, 312, 313, 315, 327, 338, 356, 380, 386, 396, 446, 449, 453, 455, 458, 460, 465, 468, 470, 473, 477, 478, 484, 538, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 600, 601, 634, 639, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 697, 699, 701, 772, 785, 804, 805, 807, 810, 811, 813, 821, 830, 832, 833, 834, 835, 836, 838, 840, 842, 845, 860, 867, 868, 869, 870, 871, 872, 873, 908, 911, 912, 913, 914, 915, 916, 917, 973, 1028, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1057, 1058], "verbose_feature_names_out": [147, 190, 191, 192, 258, 321, 327, 328, 329, 331, 415, 470, 473, 870, 1052, 1056, 1057, 1058], "verbose_interv": [804, 805], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 85, 87, 95, 97, 113, 114, 115, 117, 121, 126, 150, 156, 163, 179, 185, 190, 191, 192, 206, 217, 218, 219, 222, 225, 235, 241, 244, 250, 251, 254, 260, 269, 277, 278, 281, 282, 284, 285, 295, 312, 315, 327, 334, 337, 345, 349, 354, 356, 358, 365, 369, 377, 381, 382, 387, 388, 390, 394, 395, 396, 408, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 448, 453, 458, 468, 477, 478, 484, 507, 511, 517, 548, 564, 565, 568, 569, 571, 572, 574, 575, 596, 597, 629, 657, 658, 661, 662, 663, 671, 689, 690, 692, 698, 699, 702, 712, 750, 753, 799, 804, 807, 809, 815, 817, 821, 824, 827, 851, 852, 876, 880, 881, 882, 891, 903, 904, 913, 916, 919, 920, 921, 922, 930, 955, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1039, 1044, 1045, 1047, 1050, 1052, 1054, 1055, 1056], "verif": [377, 1008, 1032], "verifi": [88, 95, 135, 153, 190, 217, 382, 387, 408, 410, 498, 991, 1011], "verlag": 703, "vermeil": 1047, "veronda": 1040, "verrier": 1054, "versa": [190, 272, 356, 414, 424, 448, 614, 615, 840, 1043], "versatil": [424, 1023, 1032], "versicolor": [120, 284, 285, 511], "versicolour": [80, 120, 129, 131, 379], "version": [2, 7, 43, 66, 81, 88, 90, 105, 123, 128, 137, 153, 176, 186, 191, 192, 195, 202, 215, 218, 225, 231, 233, 251, 254, 258, 294, 312, 320, 324, 325, 326, 327, 329, 330, 331, 332, 345, 356, 369, 377, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 397, 400, 401, 405, 407, 408, 414, 415, 417, 419, 421, 422, 424, 425, 426, 432, 434, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 515, 516, 517, 519, 521, 529, 530, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 709, 711, 714, 715, 716, 718, 720, 721, 723, 725, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 741, 746, 747, 748, 749, 750, 753, 760, 761, 764, 765, 766, 768, 773, 774, 776, 785, 789, 790, 791, 792, 794, 796, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 820, 821, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 900, 901, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 935, 937, 938, 949, 950, 954, 955, 963, 964, 965, 966, 967, 970, 973, 974, 977, 982, 988, 993, 994, 996, 997, 1000, 1002, 1005, 1008, 1010, 1012, 1014, 1016, 1021, 1022, 1024, 1027, 1028, 1031, 1035, 1037], "versionchang": 382, "versionwarn": 386, "versu": [67, 125, 136, 158, 165, 176, 187, 190, 196, 226, 232, 244, 249, 250, 263, 267, 270, 292, 301, 303, 333, 338, 342, 344, 345, 349, 414, 418, 421, 424, 511, 541, 563, 617, 638, 646, 665, 666, 673, 675, 681, 682, 683, 684, 790, 807, 812, 833, 843, 872, 907, 908, 915, 916, 920, 997, 1004, 1008, 1009, 1014, 1021, 1022, 1023, 1029, 1047], "vert": [151, 192, 193, 324, 1022], "vertex": [55, 63, 414, 459, 1052], "vertic": [45, 55, 95, 149, 193, 206, 248, 249, 279, 294, 315, 318, 350, 351, 396, 411, 414, 419, 522, 704, 788], "verticalalign": [51, 63, 74, 75], "vese": 1051, "vesteghem": 1049, "veto": 397, "vettigli": 1048, "vga": 57, "vh": 955, "vi": [45, 47, 377, 706, 1047, 1050], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 374, 379, 380, 383, 384, 386, 390, 394, 395, 396, 397, 400, 405, 411, 412, 414, 415, 417, 418, 419, 423, 424, 443, 508, 542, 546, 548, 550, 553, 566, 567, 574, 575, 604, 618, 623, 628, 631, 634, 645, 646, 647, 648, 663, 673, 675, 678, 680, 683, 694, 696, 699, 700, 716, 807, 821, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 849, 857, 868, 870, 871, 872, 891, 892, 997, 1002, 1004, 1005, 1007, 1008, 1009, 1015, 1016, 1022, 1023, 1028, 1029, 1032, 1034, 1039, 1043, 1044, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "viacheslav": 1045, "viard": 1050, "vibrantabhi19": 1046, "vicdemand": 153, "vice": [190, 272, 356, 414, 424, 448, 614, 615, 840, 1043], "vicent": [1052, 1053, 1054], "vicpric": 153, "victoireloui": 1053, "victor": [414, 458, 468, 1046, 1049], "victoria": 153, "video": [329, 376, 385, 510, 1009, 1032, 1034], "vie": 1045, "viega": 1008, "view": [43, 77, 81, 111, 125, 153, 191, 214, 256, 369, 371, 382, 414, 422, 543, 652, 664, 851, 852, 926, 1004, 1005], "view_init": [191, 237, 239, 241], "viewabl": 382, "vighnesh": [1044, 1045, 1047], "vignesh": 1055, "vigni": 1056, "vijai": [1032, 1042], "vijalapuram": 1047, "vijeth": [1055, 1056], "vijitbenjaronk": [1046, 1047], "vika": [1051, 1053], "vikram": [1045, 1054, 1055], "vikrant": 1053, "vila": [1049, 1051], "vilhelm": [1046, 1047], "villalba": [1044, 1047, 1051], "villanova": [1051, 1052], "villaz\u00f3n": 1051, "villu": 1045, "vil\u00e9m": 1052, "vinayak": [1043, 1044, 1045, 1047, 1048, 1054, 1055], "vincent": [0, 404, 1032, 1039, 1041, 1043, 1044, 1046, 1049, 1054, 1055, 1056], "vineet": 1057, "vineyard": 321, "vinh": [414, 711], "vinh10a": 414, "viniciu": [1051, 1052], "vinit": 1047, "vink": [1050, 1052], "vinod": 1047, "vin\u00edciu": 1047, "viola": [377, 1047], "violat": [62, 345, 390, 394, 396, 642, 941, 1015, 1022, 1024], "violet": [130, 1055], "violeta": 1051, "vipin": 414, "viraj": 1047, "virchan": 1057, "virgil": [0, 404, 1039, 1040, 1042, 1058], "virgilefritsch": 1039, "virginica": [80, 120, 129, 131, 284, 285, 379, 511, 1008], "viridi": [66, 73, 295, 704], "viridis_r": 276, "virshup": 1056, "virtanen": 1044, "virtual": [383, 400, 418, 1032], "virtualenv": [380, 382], "visag": 1032, "visconti": 1043, "vishaal": [1047, 1048], "vishal": 1054, "vishwakarma": 1053, "visibl": [52, 190, 191, 219, 354, 376, 382, 414, 867, 1013, 1044, 1054], "vision": [541, 765, 766, 1000, 1004, 1006, 1024, 1027, 1032, 1040], "visit": [364, 382, 1015, 1031], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 81, 84, 87, 92, 95, 96, 113, 122, 125, 127, 130, 132, 142, 143, 151, 153, 154, 156, 160, 161, 170, 182, 186, 187, 191, 193, 202, 208, 217, 219, 235, 237, 238, 242, 243, 246, 249, 255, 256, 265, 267, 268, 271, 272, 276, 277, 280, 282, 284, 285, 300, 304, 305, 307, 309, 311, 315, 319, 320, 324, 326, 335, 349, 374, 378, 380, 388, 389, 411, 416, 418, 419, 420, 421, 444, 447, 451, 452, 460, 477, 478, 503, 509, 511, 514, 517, 521, 529, 539, 541, 548, 571, 573, 638, 640, 652, 665, 696, 699, 704, 705, 707, 708, 709, 725, 734, 789, 796, 808, 809, 812, 813, 824, 825, 826, 827, 828, 830, 837, 868, 872, 876, 880, 881, 883, 887, 888, 889, 891, 911, 913, 914, 916, 917, 925, 951, 1003, 1005, 1006, 1011, 1012, 1014, 1015, 1018, 1024, 1027, 1029, 1034, 1042, 1049, 1050, 1051, 1053], "visualis": [123, 126, 133, 252, 551, 808, 809, 812, 824, 825, 826, 827, 828, 1011, 1028], "visualize_group": 270, "vitor": 1054, "vivek": [1046, 1047, 1048, 1056], "viz": [285, 389], "vjacheslav": 1043, "vlad": [0, 123, 403, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "vladimir": [542, 955, 1004, 1049, 1053, 1056], "vlahava": [727, 747, 1008], "vlajic": [1050, 1051, 1057], "vlasio": [1032, 1046], "vlasovet": 1052, "vlb": 57, "vliet": 1051, "vline": [111, 125, 204, 206, 218, 275, 288, 316], "vlines_": 639, "vlo": 51, "vmax": [66, 86, 115, 123, 126, 133, 177, 180, 197, 202, 208, 233, 249, 264, 270, 312, 345], "vmin": [66, 75, 115, 123, 126, 133, 177, 180, 197, 202, 208, 233, 249, 264, 270, 312, 345], "vnherdeiro": 1049, "vo": [1045, 1053], "voc": 1008, "vocabulari": [121, 232, 356, 357, 394, 422, 595, 596, 597, 598, 1010, 1039, 1041, 1044, 1047, 1050, 1052], "vocabulary_": [358, 422, 588, 595, 598, 1039], "void": 383, "vol": [64, 182, 202, 269, 281, 379, 414, 480, 566, 567, 635, 642, 652, 671, 692, 693, 804, 836, 848, 998, 1010, 1011], "volgen": [411, 726], "voltag": 57, "volum": [0, 101, 112, 172, 179, 377, 379, 414, 416, 479, 541, 776, 1004, 1023, 1032], "volume11": 414, "volume2": 683, "volume7": [673, 674], "volunt": 390, "voluntari": 356, "von": [414, 458, 468, 698, 1046, 1047], "voronoi": [81, 101, 414], "voss": 1047, "vote": [2, 14, 136, 138, 143, 158, 159, 160, 187, 294, 349, 396, 397, 508, 562, 563, 564, 567, 571, 572, 576, 577, 664, 839, 853, 854, 859, 861, 1009, 1011, 1029, 1030, 1034, 1039, 1042, 1044, 1049], "votingclassifi": [2, 61, 63, 136, 187, 226, 405, 421, 511, 571, 577, 638, 665, 849, 853, 916, 919, 997, 998, 1029, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1057], "votingregressor": [2, 161, 405, 421, 576, 998, 1048, 1049, 1050, 1053, 1056, 1057], "votingregressorifittedvotingregressor": 161, "voxel": [81, 101, 592], "vp": 1032, "vq": [83, 93], "vqean3": [1047, 1048], "vredevoogd": [1041, 1042], "vrigazov": 1054, "vrishank": [1046, 1047], "vs_buildtool": 380, "vstack": [51, 63, 92, 100, 177, 178, 200, 260, 264, 295, 308, 350, 638, 1009, 1047], "vstolbunov": 1044, "vt": 557, "vufg": 1047, "vukolov": [1047, 1048], "vulner": 408, "vuw": 537, "vvz2010": 1000, "vx": 72, "vya": [1047, 1048, 1049], "vyom": [1054, 1055], "vz2010": 1000, "v\u00e1zquez": 1042, "v\u0103n": 1054, "w": [2, 45, 51, 53, 66, 70, 75, 77, 80, 83, 93, 99, 129, 132, 172, 185, 216, 221, 234, 251, 252, 260, 261, 262, 265, 266, 286, 313, 327, 328, 349, 350, 352, 358, 365, 370, 377, 379, 388, 408, 414, 415, 419, 421, 422, 426, 431, 437, 443, 471, 475, 478, 480, 488, 489, 490, 530, 545, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 595, 596, 598, 601, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 700, 706, 732, 733, 763, 806, 807, 821, 829, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 853, 854, 857, 858, 861, 862, 868, 869, 904, 906, 907, 911, 912, 913, 914, 916, 917, 919, 920, 921, 922, 952, 957, 1004, 1008, 1012, 1013, 1018, 1020, 1022, 1023, 1049, 1053, 1054, 1055, 1056], "w0": 121, "w1": [121, 421, 664], "w1992": 421, "w2": 421, "w3": 421, "w_": [419, 653, 654, 659, 660, 667, 668, 669, 670, 688, 691, 1004, 1008, 1010, 1013], "w_0": 1004, "w_1": [421, 1004, 1012], "w_1x_1": 1012, "w_2": [421, 1004, 1012], "w_2x_2": 1012, "w_3": 1004, "w_4": 1004, "w_5": 1004, "w_i": [421, 999, 1008], "w_ij": 667, "w_init": [426, 540], "w_intercept": [911, 912], "w_j": [653, 659, 1008, 1022], "w_k": [414, 421, 1004], "w_l": 1004, "w_mx_m": 1012, "w_n": 421, "w_new": 419, "w_p": 1004, "w_pad": [123, 146, 361], "w_x_1": [911, 912], "w_x_n": [911, 912], "wa": [0, 43, 47, 53, 64, 75, 104, 105, 113, 118, 121, 155, 158, 172, 183, 190, 195, 221, 241, 251, 254, 266, 268, 269, 271, 273, 275, 281, 282, 289, 292, 312, 320, 324, 325, 329, 336, 337, 356, 358, 364, 365, 369, 377, 379, 380, 382, 386, 387, 396, 400, 405, 408, 410, 411, 413, 414, 417, 418, 422, 426, 438, 446, 447, 448, 449, 451, 452, 453, 455, 456, 460, 463, 466, 470, 474, 475, 480, 488, 489, 490, 491, 522, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 560, 561, 562, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 665, 666, 671, 679, 681, 686, 692, 693, 695, 696, 699, 720, 736, 737, 785, 790, 791, 794, 804, 805, 807, 810, 811, 821, 834, 836, 848, 855, 858, 860, 863, 867, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 900, 903, 904, 908, 909, 935, 937, 938, 949, 950, 974, 995, 996, 997, 998, 1007, 1008, 1011, 1014, 1018, 1021, 1024, 1027, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "wadawson": 1043, "wadsworth": [919, 920, 1024], "waelbenamara": 1050, "wagner": 1053, "wai": [0, 2, 37, 43, 55, 64, 85, 95, 105, 108, 142, 149, 154, 156, 172, 181, 190, 192, 193, 218, 221, 222, 232, 235, 246, 247, 250, 251, 254, 255, 270, 275, 282, 284, 315, 316, 327, 329, 330, 365, 369, 370, 371, 376, 378, 380, 381, 384, 385, 386, 390, 391, 396, 397, 400, 405, 408, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 429, 449, 450, 457, 458, 459, 465, 466, 468, 469, 475, 503, 562, 563, 570, 579, 596, 606, 607, 618, 639, 673, 674, 683, 684, 685, 706, 711, 713, 724, 743, 744, 761, 762, 764, 770, 781, 785, 795, 802, 832, 840, 857, 878, 884, 889, 895, 921, 922, 978, 981, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1027, 1028, 1031, 1032, 1039, 1041, 1047, 1052, 1053, 1057, 1058], "waijean": 1052, "wainwright": [728, 730, 731], "waist": 379, "wait": [55, 380, 382, 386, 396, 673, 674, 675, 683, 685, 1051], "waithera": 1049, "wal": 51, "waldo": 329, "wale": 153, "walk": [414, 420, 1042], "walker": 1043, "wall": 414, "wallach": [1043, 1044], "walli": 1047, "wallygauz": 1047, "walsh": [1051, 1053], "walt": [1042, 1043, 1047], "walter": 1045, "walton": 329, "wan": 1047, "wang": [419, 543, 686, 696, 700, 733, 763, 1004, 1005, 1008, 1042, 1044, 1045, 1046, 1047, 1051, 1054, 1055, 1057], "wangz10": 1044, "want": [0, 30, 43, 51, 58, 61, 62, 63, 90, 99, 105, 172, 186, 190, 217, 218, 219, 251, 254, 266, 269, 275, 290, 292, 298, 312, 339, 342, 356, 365, 369, 370, 371, 380, 381, 382, 383, 384, 386, 387, 388, 394, 395, 396, 397, 400, 405, 408, 412, 413, 414, 415, 416, 421, 422, 423, 507, 510, 511, 517, 542, 556, 661, 662, 663, 665, 666, 673, 675, 681, 682, 683, 771, 806, 829, 857, 860, 876, 883, 904, 911, 997, 1004, 1007, 1008, 1009, 1012, 1014, 1018, 1019, 1023, 1027, 1028, 1039, 1053, 1057], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 81, 87, 88, 89, 91, 97, 187, 193, 241, 404, 422, 447, 451, 469, 537, 864, 1029, 1039, 1042, 1044], "ward__n_clust": 89, "ward_tre": [2, 89, 447, 451, 1039, 1043], "wardagglom": 1044, "wardagglomer": 1042, "wardclust": 1042, "wareh": 741, "warm": [385, 396, 538, 544, 550, 552, 553, 617, 660, 666, 673, 674, 675, 683, 684, 685, 1004, 1028, 1049, 1051, 1053], "warm_start": [141, 178, 210, 327, 384, 388, 396, 421, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 617, 653, 655, 656, 659, 665, 667, 669, 673, 674, 675, 676, 683, 684, 685, 687, 804, 805, 860, 868, 869, 1014, 1030, 1034, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1053, 1055], "warn": [2, 15, 79, 97, 106, 180, 217, 232, 251, 278, 295, 311, 312, 319, 369, 370, 382, 385, 386, 387, 396, 408, 422, 503, 557, 560, 561, 564, 565, 566, 567, 571, 572, 573, 578, 579, 580, 581, 582, 583, 585, 609, 643, 700, 719, 720, 723, 736, 737, 745, 790, 791, 794, 861, 875, 876, 884, 914, 915, 916, 917, 919, 920, 921, 922, 937, 938, 945, 955, 964, 977, 993, 994, 1008, 1018, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "warn_for": 790, "warn_on_dtyp": 1048, "warn_when_not_sort": 866, "warner": [51, 1054, 1055], "warshal": [695, 1005], "warshaw": 1045, "warut": [1046, 1047], "wase": [1056, 1057], "wasn": [104, 251, 1048], "waspa": 545, "wast": [143, 388, 418, 419, 997], "watanab": [1056, 1057], "watch": [52, 370], "watchtheblur": 1051, "water": 50, "waterburi": [1047, 1048], "waterland": 1042, "waterponei": [1045, 1046], "watson": [321, 415], "wattai": 1054, "wav": 376, "wave": [211, 382, 1007], "waveform": 75, "wavelet": [53, 132, 419], "wavfil": 376, "waweru": 1056, "wa\u00ebl": 1057, "wb": [55, 408], "wchathura": 1054, "wclf": 347, "wconnel": 1050, "wdbc": [172, 379], "wderos": 1050, "wdevazelh": 1047, "wdisp": 347, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 82, 84, 85, 88, 90, 91, 92, 93, 97, 99, 100, 101, 104, 105, 106, 107, 109, 111, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 130, 131, 133, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 158, 160, 161, 163, 167, 168, 169, 171, 172, 174, 176, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 206, 208, 210, 212, 214, 217, 218, 219, 220, 221, 223, 225, 226, 229, 230, 231, 232, 233, 235, 237, 238, 241, 242, 244, 245, 247, 248, 249, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 265, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 394, 395, 396, 397, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 456, 475, 476, 477, 478, 479, 480, 481, 482, 508, 530, 538, 539, 541, 544, 552, 553, 556, 568, 569, 570, 576, 577, 589, 590, 596, 618, 624, 634, 639, 640, 645, 647, 658, 662, 665, 666, 673, 675, 680, 681, 682, 683, 684, 699, 725, 727, 733, 753, 763, 771, 788, 806, 813, 829, 830, 832, 853, 854, 855, 857, 859, 860, 861, 862, 863, 874, 883, 884, 885, 891, 896, 897, 899, 900, 901, 902, 904, 907, 911, 915, 930, 949, 950, 960, 971, 973, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1036, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1057], "wea": 412, "weak": [117, 148, 151, 221, 235, 281, 418, 561, 566, 567, 637, 1011, 1032, 1055], "weak_learn": 137, "weak_learners_info": 137, "weak_learners_misclassification_error": 137, "weaker": [109, 568, 569], "weakest": [360, 1024], "weaklearn": 560, "weakli": 101, "weather": [43, 52, 179, 191, 413, 1004, 1008], "web": [2, 172, 376, 377, 379, 382, 390, 408, 414, 422, 498, 528, 904, 955, 1008, 1018, 1035, 1039, 1058], "weber": 1046, "weblog": 414, "webpag": [55, 195, 382], "websit": [376, 377, 379, 382, 385, 397, 400, 1012, 1022, 1031, 1032, 1040, 1041, 1042], "wed": [43, 153, 191], "weed": 611, "week": [43, 52, 153, 331, 381, 382, 397, 503, 1032, 1053], "weekdai": [43, 191], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 153], "weezel": [1054, 1055], "wegelin": 417, "wehenkel": [421, 564, 565, 572, 573, 921, 922], "wei": [0, 404, 1022, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1052, 1055], "weibul": 319, "weidemann": 1053, "weigh": [418, 1046], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 89, 104, 133, 150, 159, 160, 168, 169, 178, 179, 186, 187, 190, 196, 202, 206, 208, 217, 221, 222, 224, 227, 228, 229, 231, 232, 233, 235, 251, 256, 260, 264, 269, 273, 278, 282, 284, 298, 307, 308, 309, 310, 311, 313, 320, 322, 324, 327, 331, 332, 334, 335, 340, 345, 347, 349, 350, 352, 353, 356, 357, 358, 364, 365, 378, 379, 391, 394, 396, 413, 414, 416, 417, 419, 420, 423, 425, 431, 437, 443, 446, 449, 450, 452, 453, 455, 459, 465, 466, 469, 470, 471, 473, 475, 480, 488, 489, 490, 503, 522, 531, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 593, 596, 597, 598, 600, 604, 609, 610, 617, 618, 635, 639, 640, 641, 642, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 696, 700, 704, 705, 707, 709, 710, 714, 715, 716, 719, 720, 723, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 741, 742, 743, 745, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 765, 766, 776, 789, 790, 791, 792, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 829, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 873, 876, 890, 891, 892, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 942, 943, 957, 982, 988, 998, 999, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1018, 1021, 1022, 1023, 1024, 1028, 1029, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "weight_concentration_": 804, "weight_concentration_prior": [260, 266, 804, 1007], "weight_concentration_prior_": 804, "weight_concentration_prior_typ": [260, 266, 804, 1007, 1045], "weight_vector": [1039, 1049], "weighted_acc": 405, "weighted_mod": [2, 391], "weighted_n_node_sampl": 364, "weightedmetaregressor": 251, "weights_": [260, 804, 805, 1053], "weights_handl": 230, "weights_init": 805, "weijiadu": 1053, "weinberg": 422, "weinsberg": 1039, "weinstein": 1040, "weisberg": 1004, "weiss": [0, 404, 414, 698, 1039], "weitzenfeld": 1032, "weka": 848, "welch": 1045, "welcom": [381, 382, 390, 397, 1028], "welind": 1039, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 83, 88, 92, 93, 97, 104, 111, 118, 137, 138, 140, 143, 148, 150, 156, 158, 172, 179, 181, 189, 190, 191, 192, 195, 202, 204, 215, 217, 218, 219, 221, 225, 237, 238, 239, 242, 244, 248, 251, 254, 262, 269, 275, 282, 284, 286, 292, 295, 298, 300, 301, 302, 322, 325, 326, 327, 328, 329, 330, 331, 332, 349, 352, 356, 357, 358, 365, 377, 379, 381, 382, 386, 388, 390, 391, 394, 395, 396, 397, 408, 412, 414, 416, 418, 419, 421, 423, 425, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 465, 466, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 707, 728, 729, 730, 731, 792, 795, 799, 802, 804, 805, 806, 807, 810, 811, 821, 829, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 953, 954, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1021, 1022, 1024, 1025, 1027, 1028, 1032, 1039, 1040, 1043, 1045, 1046, 1047, 1050, 1057], "wellcom": 0, "wen": 1054, "wenbo": [1049, 1051], "wendi": 1049, "wendling": 1046, "weng": 1023, "wenhao": [1047, 1048], "wenhua": 1045, "wenjian": 1045, "wenliwyan": 1050, "went": [386, 1008], "were": [0, 43, 68, 104, 105, 108, 113, 114, 143, 147, 150, 153, 169, 172, 179, 186, 217, 218, 221, 245, 254, 282, 284, 286, 312, 313, 320, 325, 326, 328, 329, 330, 331, 332, 337, 349, 356, 358, 364, 365, 376, 377, 379, 382, 383, 384, 386, 390, 394, 396, 405, 411, 415, 421, 422, 470, 473, 474, 503, 568, 569, 609, 810, 811, 826, 835, 858, 908, 909, 997, 1000, 1008, 1009, 1024, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "weren": [356, 885, 1048], "werman": 1051, "werneck": 1047, "werner": [1046, 1051], "werror": 390, "wersd\u00f6rfer": 1041, "weslei": [597, 737], "westermann": [0, 372, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "western": 422, "weston": [44, 419, 542, 600, 601, 907], "westov": 1047, "wetter": 191, "weyb": 1057, "wfc": 51, "wget": 390, "wh": [419, 545, 547, 554], "wh_i": 419, "what": [0, 2, 43, 48, 51, 52, 75, 80, 87, 88, 118, 124, 128, 146, 189, 190, 206, 223, 225, 233, 246, 251, 258, 312, 356, 358, 360, 365, 370, 377, 380, 382, 383, 384, 386, 388, 390, 395, 396, 397, 399, 413, 414, 420, 421, 422, 510, 543, 595, 596, 598, 653, 659, 703, 896, 897, 899, 900, 901, 902, 919, 920, 921, 922, 1007, 1008, 1009, 1011, 1024, 1028, 1039, 1046, 1057], "whatnot": 356, "whats_new": [386, 390], "wheel": [380, 382, 386, 400, 402, 1049, 1051, 1053], "wheeler": [1050, 1051], "wheelhouse_upload": 386, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 91, 95, 102, 104, 105, 106, 111, 113, 114, 118, 123, 126, 127, 128, 130, 140, 143, 146, 147, 148, 150, 153, 154, 158, 159, 160, 169, 174, 185, 189, 190, 191, 192, 193, 197, 198, 202, 206, 208, 210, 214, 217, 219, 221, 222, 233, 244, 245, 246, 250, 251, 258, 261, 263, 271, 274, 275, 276, 277, 278, 282, 284, 285, 288, 289, 292, 295, 297, 298, 301, 302, 303, 315, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 336, 337, 339, 345, 348, 349, 352, 356, 357, 358, 360, 364, 365, 369, 370, 371, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 400, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 430, 437, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 522, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 582, 583, 585, 588, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 613, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 707, 708, 709, 711, 712, 714, 715, 719, 720, 723, 734, 735, 736, 737, 739, 741, 742, 745, 753, 755, 758, 761, 762, 764, 768, 770, 774, 775, 776, 778, 781, 785, 788, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 802, 804, 805, 806, 807, 810, 811, 812, 813, 821, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 898, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 930, 932, 933, 936, 937, 938, 945, 949, 953, 954, 955, 956, 958, 959, 960, 965, 968, 976, 996, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1028, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "whenev": [181, 189, 269, 365, 376, 390, 396, 400, 412, 488, 489, 490, 503, 635, 637, 999, 1007, 1028, 1049, 1058], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 88, 90, 92, 113, 118, 121, 123, 126, 132, 133, 137, 139, 141, 143, 147, 148, 150, 153, 155, 169, 170, 172, 174, 180, 183, 186, 190, 197, 202, 209, 218, 221, 226, 227, 228, 230, 234, 235, 237, 239, 240, 244, 245, 248, 251, 252, 254, 256, 266, 269, 271, 272, 275, 277, 281, 282, 284, 286, 287, 289, 292, 294, 313, 315, 317, 318, 319, 320, 321, 322, 324, 326, 327, 332, 335, 336, 343, 349, 352, 353, 354, 356, 360, 361, 365, 369, 370, 371, 376, 378, 379, 381, 382, 384, 386, 388, 389, 390, 394, 395, 396, 397, 400, 405, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 443, 450, 453, 454, 458, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 503, 533, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 589, 590, 591, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 616, 617, 618, 620, 622, 626, 629, 630, 632, 634, 635, 636, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 695, 698, 699, 700, 703, 714, 718, 719, 723, 732, 736, 737, 738, 746, 748, 762, 770, 775, 776, 777, 780, 788, 789, 790, 791, 794, 795, 799, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 854, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874, 881, 884, 886, 887, 890, 891, 897, 899, 905, 906, 907, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 928, 946, 947, 948, 949, 955, 960, 964, 967, 992, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "wherea": [52, 70, 83, 88, 102, 113, 154, 231, 254, 276, 277, 278, 284, 298, 320, 349, 352, 353, 371, 397, 418, 421, 450, 452, 572, 665, 666, 809, 825, 839, 1000, 1007, 1009, 1011, 1018, 1024, 1052, 1057], "wherein": 396, "whether": [2, 47, 49, 52, 105, 135, 154, 177, 182, 190, 191, 217, 221, 235, 238, 245, 251, 269, 273, 315, 364, 365, 370, 377, 380, 381, 382, 384, 386, 387, 388, 396, 405, 413, 414, 415, 416, 418, 419, 421, 423, 426, 446, 448, 457, 459, 460, 465, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 497, 499, 503, 504, 510, 515, 516, 521, 529, 534, 538, 539, 544, 545, 546, 547, 549, 552, 553, 555, 559, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 588, 595, 596, 597, 598, 604, 609, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 638, 639, 640, 642, 643, 644, 645, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 697, 701, 702, 704, 705, 707, 709, 711, 718, 719, 749, 768, 774, 781, 785, 789, 796, 806, 807, 810, 811, 812, 813, 821, 825, 826, 829, 830, 831, 834, 835, 837, 840, 842, 845, 846, 847, 848, 850, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 868, 869, 875, 892, 898, 911, 912, 913, 914, 915, 916, 917, 923, 925, 927, 928, 929, 930, 931, 935, 937, 938, 939, 941, 949, 950, 954, 955, 963, 964, 980, 991, 995, 996, 997, 998, 1003, 1004, 1008, 1013, 1014, 1020, 1022, 1023, 1032, 1046, 1047, 1048, 1056, 1058], "whi": [190, 192], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 81, 84, 88, 90, 91, 92, 93, 100, 102, 104, 105, 106, 109, 111, 113, 114, 118, 120, 121, 125, 127, 128, 133, 137, 140, 141, 142, 143, 147, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 163, 167, 169, 171, 172, 174, 175, 179, 180, 181, 185, 186, 189, 190, 191, 193, 195, 197, 198, 202, 206, 210, 217, 218, 219, 221, 223, 225, 231, 233, 234, 235, 237, 238, 239, 241, 244, 245, 248, 249, 250, 251, 252, 254, 255, 260, 261, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 292, 294, 295, 300, 301, 302, 311, 315, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 338, 345, 349, 352, 354, 356, 357, 358, 360, 364, 365, 369, 370, 371, 374, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 399, 400, 402, 405, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 468, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 493, 530, 538, 539, 540, 541, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 586, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 624, 626, 629, 634, 635, 636, 637, 639, 640, 641, 647, 649, 650, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 668, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 714, 716, 723, 724, 726, 727, 730, 732, 733, 741, 742, 743, 744, 749, 750, 763, 765, 785, 786, 787, 788, 789, 790, 796, 804, 805, 806, 807, 810, 811, 812, 813, 815, 817, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 868, 871, 875, 878, 882, 884, 885, 886, 889, 890, 891, 892, 893, 895, 903, 904, 906, 907, 908, 911, 913, 916, 917, 919, 920, 921, 922, 923, 927, 929, 932, 933, 937, 938, 944, 947, 949, 950, 954, 955, 957, 960, 963, 964, 965, 967, 976, 979, 982, 988, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "whichev": [414, 421, 452, 551, 568, 569, 640, 657, 661, 663, 671, 689, 690, 704], "whidou": 1052, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 83, 90, 97, 101, 104, 107, 109, 121, 127, 128, 137, 140, 143, 144, 148, 153, 155, 158, 172, 175, 180, 182, 183, 185, 189, 190, 191, 192, 195, 197, 199, 202, 205, 206, 211, 217, 219, 221, 233, 244, 247, 248, 251, 252, 261, 262, 266, 268, 269, 270, 274, 275, 276, 278, 282, 283, 284, 285, 286, 288, 297, 315, 316, 317, 320, 321, 322, 324, 327, 330, 331, 342, 345, 356, 358, 364, 365, 370, 374, 375, 376, 377, 378, 381, 382, 384, 386, 387, 388, 390, 391, 394, 396, 397, 408, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 426, 450, 470, 473, 474, 489, 491, 503, 528, 539, 559, 564, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 582, 589, 595, 596, 597, 598, 601, 604, 609, 613, 641, 650, 653, 654, 656, 663, 664, 665, 666, 683, 684, 685, 686, 715, 737, 761, 781, 785, 795, 801, 804, 807, 808, 809, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 830, 832, 833, 834, 835, 836, 838, 846, 857, 859, 861, 862, 863, 870, 871, 872, 873, 874, 887, 899, 904, 909, 911, 912, 919, 920, 921, 922, 933, 959, 997, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1020, 1023, 1024, 1027, 1028, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whilst": [141, 239], "whisker": 49, "white": [2, 93, 95, 123, 179, 190, 231, 237, 301, 313, 317, 339, 344, 419, 422, 632, 1024, 1039, 1042, 1045, 1049, 1053], "whitekernel": [2, 174, 179, 180, 424, 618, 619, 621, 1050], "whiten": [45, 123, 124, 125, 299, 419, 426, 540, 541, 548, 889, 891, 1018, 1043, 1045, 1053, 1054, 1057], "whiten_solv": [426, 540, 1054, 1057], "whitening_": 540, "whitespac": 422, "whl": 386, "who": [0, 104, 190, 370, 377, 382, 389, 397, 400, 853, 854, 855, 857, 859, 861, 862, 863, 1027, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "whole": [49, 85, 108, 153, 161, 186, 218, 254, 272, 279, 307, 345, 349, 360, 369, 382, 394, 395, 415, 417, 421, 424, 455, 489, 545, 562, 563, 564, 565, 570, 571, 572, 573, 577, 692, 693, 807, 810, 811, 821, 835, 846, 847, 848, 849, 850, 997, 1008, 1018, 1047, 1049], "whose": [2, 90, 112, 113, 114, 172, 179, 217, 245, 343, 377, 390, 391, 396, 412, 414, 416, 421, 423, 424, 427, 443, 444, 445, 454, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 522, 541, 545, 547, 548, 551, 554, 556, 579, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 647, 678, 702, 725, 807, 814, 821, 836, 857, 876, 903, 904, 954, 986, 987, 1002, 1009, 1013, 1014, 1015, 1023, 1042, 1047, 1048, 1050, 1053], "why": [64, 72, 87, 123, 137, 143, 153, 190, 192, 195, 206, 269, 272, 275, 292, 356, 357, 382, 390, 396, 414, 416, 419, 425, 450, 453, 457, 1008, 1010, 1023, 1042], "wick": 1051, "wide": [64, 95, 96, 120, 140, 248, 316, 394, 414, 419, 422, 997, 1004, 1027, 1032, 1039, 1041, 1055], "widehat": 177, "wider": [52, 219, 422, 924, 1004], "widetild": 1024, "width": [47, 49, 52, 80, 88, 113, 120, 125, 126, 131, 132, 133, 140, 146, 147, 150, 160, 168, 176, 182, 201, 258, 260, 274, 298, 315, 317, 318, 321, 326, 329, 342, 379, 415, 444, 445, 458, 470, 500, 501, 513, 528, 593, 876, 924, 1018, 1022, 1024, 1047], "wiesel": [416, 427, 481], "wignal": [1042, 1043, 1049, 1050], "wijewardena": [0, 1042, 1043, 1044], "wiki": [55, 61, 388, 390, 602, 643, 675, 678, 702, 712, 853, 854, 859, 860, 861, 862, 889, 905, 919, 920, 1004, 1008, 1024], "wikic": 1000, "wikipedia": [37, 42, 61, 187, 390, 414, 602, 614, 615, 643, 663, 675, 678, 689, 690, 702, 711, 712, 714, 716, 719, 723, 725, 733, 736, 737, 738, 741, 742, 745, 750, 763, 790, 792, 793, 795, 796, 799, 800, 853, 854, 859, 860, 861, 862, 889, 905, 919, 920, 955, 1000, 1004, 1008, 1011, 1020, 1024, 1029, 1039, 1046], "wikipedia_principal_eigenvector": [55, 1029], "wikipediadet2017": 1008, "wikipediamcc2021": 1008, "wil": 1051, "wild": [2, 45, 375, 500, 501, 515, 516, 1034, 1039], "wilderness_area": 254, "wildli": [300, 1007], "wilei": [379, 998], "wilhelm": [1043, 1045, 1049], "wilk": 412, "wilksch": 1054, "willamett": 321, "willard": 1051, "willdarnel": 1049, "willduan": 1046, "william": [172, 377, 379, 424, 617, 618, 621, 626, 629, 646, 1000, 1008, 1012, 1046, 1047, 1048, 1049, 1054, 1055], "williamson": 1049, "willing": [189, 272, 413], "willocx": 1049, "willpeppo": 1051, "wilson": [113, 379, 1039, 1042], "wiman": 1039, "wimld": 1053, "win": [52, 269], "winata": [1049, 1051], "wind": [191, 1009], "windber": 1050, "windiana42": 1055, "window": [57, 338, 377, 382, 384, 385, 390, 422, 1039, 1042, 1046, 1050, 1052, 1053, 1057], "windowsapp": 400, "windowserror": 1055, "windspe": [43, 191], "wine": [2, 48, 257, 320, 321, 375, 517, 1034], "wine_review": 321, "wineri": 321, "winn": 1008, "winter": [43, 52], "winterman": 1040, "wip": [390, 400], "wipf": [652, 1004], "wire": [388, 541, 548], "wiryadi": [1051, 1057], "wisc": [172, 379, 906], "wisconsin": [2, 172, 193, 375, 507, 1016, 1034, 1044], "wise": [2, 46, 63, 83, 182, 218, 244, 285, 315, 357, 369, 396, 412, 414, 418, 419, 423, 464, 538, 541, 544, 548, 552, 553, 556, 557, 560, 562, 563, 566, 567, 599, 602, 603, 605, 606, 607, 613, 647, 659, 707, 761, 839, 858, 888, 901, 902, 905, 980, 982, 983, 984, 985, 988, 1000, 1002, 1004, 1008, 1009, 1022, 1028, 1039, 1044, 1047, 1048, 1049], "wish": [376, 382, 384, 389, 391, 400, 414, 955, 1046], "wishart": 804, "wissen": 456, "with_cent": [889, 901], "with_error": 708, "with_mean": [387, 891, 902, 1018, 1047, 1052], "with_scal": [889, 901], "with_std": [891, 902, 1018, 1047], "withheld": 418, "within": [2, 41, 43, 58, 95, 142, 144, 145, 148, 153, 157, 169, 171, 172, 213, 218, 219, 229, 235, 251, 255, 273, 274, 278, 315, 316, 326, 343, 346, 349, 352, 358, 365, 369, 377, 382, 386, 391, 394, 396, 397, 405, 410, 411, 412, 414, 415, 418, 420, 421, 425, 450, 454, 467, 469, 470, 472, 475, 480, 522, 556, 574, 575, 576, 577, 600, 601, 639, 699, 703, 706, 717, 732, 788, 804, 805, 812, 813, 825, 826, 835, 836, 851, 852, 853, 854, 859, 861, 862, 863, 870, 871, 872, 884, 892, 896, 897, 899, 900, 901, 902, 913, 914, 915, 916, 917, 919, 920, 921, 922, 997, 1002, 1004, 1005, 1011, 1014, 1018, 1021, 1023, 1024, 1028, 1032, 1041, 1042, 1046, 1047, 1052, 1053, 1055, 1056, 1057, 1058], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 82, 87, 90, 91, 97, 102, 109, 128, 143, 148, 149, 152, 153, 155, 158, 164, 168, 172, 181, 187, 189, 190, 191, 202, 206, 225, 244, 248, 251, 252, 254, 255, 257, 268, 269, 276, 280, 282, 292, 296, 297, 298, 304, 305, 306, 307, 315, 316, 320, 322, 324, 349, 352, 357, 371, 377, 378, 380, 382, 383, 384, 386, 387, 388, 391, 394, 395, 396, 405, 408, 414, 415, 419, 421, 422, 423, 424, 439, 445, 447, 452, 464, 475, 480, 498, 503, 511, 522, 539, 541, 562, 563, 570, 586, 587, 618, 634, 638, 641, 646, 666, 699, 707, 788, 810, 811, 812, 819, 821, 836, 837, 853, 860, 864, 870, 871, 874, 877, 880, 881, 883, 887, 888, 889, 891, 896, 911, 933, 976, 997, 998, 1000, 1002, 1004, 1005, 1008, 1011, 1014, 1018, 1022, 1023, 1024, 1027, 1028, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058], "withstrok": 75, "witten": 418, "wittenau": 1044, "wk": 712, "wl": 380, "wminkowski": [1051, 1053], "wmt": 51, "wnl": 422, "wo": 422, "wojdyla": [1054, 1055], "wolberg": [172, 379], "wolf": [2, 49, 65, 70, 110, 111, 114, 115, 187, 304, 479, 481, 485, 486, 519, 556, 1002, 1029, 1046], "wolframalpha": 1049, "wolodzko": 1052, "wolosonovich": 1047, "wolpert": [421, 574, 575], "wolsza": 1057, "wompner": 1047, "won": [158, 312, 357, 386, 390, 414, 474, 503, 634, 635, 637, 694, 711, 724, 743, 744, 762, 764, 802, 1007, 1018, 1044, 1045, 1050], "wonder": [356, 380], "wonpil": 1004, "wood": 1048, "woolam": 1039, "word": [47, 54, 57, 104, 174, 205, 248, 252, 345, 357, 358, 369, 377, 378, 382, 384, 387, 396, 411, 413, 414, 416, 417, 418, 419, 459, 518, 530, 541, 543, 548, 595, 596, 598, 703, 840, 850, 908, 1002, 1006, 1010, 1013, 1018, 1021, 1022, 1032, 1039, 1047], "word_col": 57, "word_scor": 57, "word_token": 422, "wordnetlemmat": 422, "work": [0, 3, 43, 48, 52, 55, 68, 79, 80, 83, 87, 102, 111, 140, 147, 161, 172, 180, 181, 189, 190, 191, 206, 221, 234, 251, 273, 292, 301, 302, 321, 325, 327, 328, 330, 347, 349, 357, 358, 365, 370, 371, 376, 377, 380, 382, 383, 384, 385, 386, 387, 388, 390, 395, 396, 397, 408, 410, 411, 412, 414, 415, 416, 419, 421, 422, 423, 426, 427, 428, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 466, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 511, 515, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 702, 715, 781, 785, 786, 787, 788, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 955, 959, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1021, 1022, 1027, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "workabl": 387, "workaround": [321, 382, 807, 821], "workclass": [331, 503], "worker": [370, 396, 422, 973, 974, 1054], "workflow": [382, 385, 386, 395, 418, 1031, 1034], "working_memori": [369, 370, 474, 788, 909, 1047], "workingdai": [43, 191], "workload": 1027, "workshop": [0, 414, 422, 846, 1010, 1026], "workstat": 390, "world": [0, 90, 104, 108, 190, 221, 241, 254, 269, 356, 369, 375, 379, 414, 419, 422, 972, 998, 1008, 1010, 1026, 1028, 1032, 1034, 1039], "worldwid": 1032, "wornbb": 1050, "worri": [89, 1005], "wors": [43, 118, 137, 175, 191, 223, 275, 283, 294, 320, 365, 412, 414, 424, 437, 471, 488, 489, 490, 559, 561, 563, 565, 567, 569, 572, 575, 577, 617, 618, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 676, 677, 679, 680, 685, 686, 687, 712, 728, 729, 730, 731, 735, 792, 844, 845, 854, 862, 869, 912, 914, 917, 920, 922, 1008, 1018, 1048], "worse_prob": 275, "worsen": 148, "worst": [172, 217, 321, 379, 414, 450, 453, 715, 736, 737, 790, 791, 794, 799, 800, 836, 1008, 1032, 1039, 1052], "worth": [90, 146, 191, 217, 382, 390, 1032], "worthwhil": [106, 396], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 80, 88, 90, 93, 104, 111, 113, 114, 118, 121, 128, 137, 150, 172, 174, 179, 180, 190, 191, 192, 193, 195, 202, 207, 217, 218, 219, 232, 235, 244, 251, 254, 262, 269, 271, 275, 276, 281, 283, 285, 289, 292, 295, 301, 307, 312, 315, 316, 320, 321, 327, 330, 337, 345, 349, 352, 353, 356, 358, 364, 365, 369, 377, 378, 382, 383, 384, 388, 390, 391, 394, 395, 396, 397, 405, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 437, 452, 471, 474, 488, 489, 490, 495, 534, 539, 541, 543, 548, 551, 559, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 577, 590, 591, 594, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 683, 685, 686, 707, 709, 715, 719, 720, 727, 763, 785, 789, 792, 796, 807, 809, 821, 836, 844, 845, 854, 862, 869, 896, 897, 899, 900, 901, 902, 903, 904, 909, 911, 912, 914, 917, 919, 920, 921, 922, 964, 967, 997, 998, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1023, 1027, 1028, 1032, 1036, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "wp": [422, 664, 678], "wpd": 356, "wprd": 422, "wrap": [123, 142, 150, 295, 332, 376, 384, 396, 408, 438, 515, 664, 665, 666, 683, 837, 895, 998, 1008, 1011, 1023, 1027, 1039, 1044, 1047, 1049, 1050, 1052, 1054], "wraparound": 383, "wrapper": [2, 64, 295, 388, 391, 418, 424, 551, 627, 675, 678, 749, 911, 1004, 1024, 1027, 1043, 1051, 1058], "wrath": 415, "write": [47, 55, 151, 186, 193, 251, 324, 356, 369, 370, 376, 380, 381, 382, 386, 387, 388, 390, 391, 394, 396, 408, 410, 415, 419, 422, 1019, 1028, 1040, 1052, 1056], "writeabl": [937, 938, 1057], "writer": 356, "written": [41, 44, 46, 65, 86, 88, 126, 170, 187, 224, 268, 299, 327, 334, 335, 370, 379, 382, 383, 384, 388, 390, 394, 396, 415, 420, 493, 509, 515, 704, 720, 837, 916, 923, 1002, 1004, 1008, 1012, 1013, 1022, 1029, 1048], "wrong": [95, 217, 269, 301, 356, 365, 379, 382, 384, 422, 511, 733, 763, 800, 1008, 1014, 1023, 1042, 1044, 1046, 1047, 1048, 1049, 1052, 1056, 1057], "wrongli": [217, 345, 1057], "wrote": [158, 377], "ws2001": 1000, "wspace": [53, 54, 74, 79, 80, 97, 113, 123, 139, 217, 235, 244, 260, 262, 263, 266, 300, 308, 335, 342], "wstate": 1052, "wtv": 388, "wtw": 388, "wu": [1023, 1043, 1051], "wurp": [1053, 1054], "wuthrich": [217, 235], "ww": 419, "www": [45, 105, 195, 217, 233, 235, 289, 294, 312, 376, 377, 382, 390, 414, 418, 448, 455, 493, 515, 516, 538, 541, 544, 548, 651, 665, 671, 678, 692, 693, 860, 867, 919, 920, 1004, 1021], "www4": [172, 379], "wyseguy7": 1045, "w\u00fcthrich": 412, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 237, 238, 239, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 375, 376, 377, 378, 382, 383, 384, 386, 387, 388, 389, 390, 391, 394, 395, 396, 405, 408, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 500, 501, 502, 505, 507, 508, 509, 512, 513, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 717, 718, 732, 739, 742, 749, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 930, 932, 933, 934, 935, 936, 937, 938, 941, 952, 954, 955, 956, 957, 967, 968, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1021, 1022, 1023, 1024, 1028, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "x0": [51, 209, 226, 240, 258, 315, 342, 396, 435, 470, 574, 575, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 874, 875, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "x00": 422, "x006": 1040, "x00a": 422, "x00b": 422, "x00c": 422, "x00d": 422, "x00e": 422, "x00f": 422, "x00g": 422, "x00h": 422, "x00i": 422, "x00l": 422, "x00n": 422, "x00o": 422, "x00r": 422, "x00t": 422, "x00u": 422, "x00z": 422, "x0_cat": [328, 1018], "x0_infrequent_sklearn": [328, 1018], "x0_label": 315, "x0_rabbit": [328, 1018], "x0_str_femal": 884, "x0_str_male": 884, "x0l": 1043, "x1": [51, 117, 139, 149, 177, 229, 240, 315, 342, 384, 396, 435, 470, 516, 574, 575, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 634, 635, 636, 637, 706, 874, 875, 876, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "x110": 1054, "x1_int_1": 884, "x1_int_2": 884, "x1_int_3": 884, "x1_label": 315, "x2": [117, 139, 149, 177, 229, 258, 384, 415, 595, 636, 706], "x27": [63, 105, 106, 142, 158, 161, 169, 190, 191, 192, 245, 246, 255, 256, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 321, 325, 326, 328, 336], "x2_tr": 636, "x3": [149, 258, 415], "x64": 380, "x8": 88, "x86": 380, "x86_64": [385, 400], "x9ft": 422, "x_": [167, 175, 266, 275, 324, 384, 414, 417, 419, 634, 642, 771, 866, 906, 907, 1004, 1010, 1015, 1045], "x_0": [218, 664], "x_1": [123, 167, 177, 214, 218, 417, 419, 421, 424, 620, 632, 664, 884, 911, 912, 1004, 1010, 1012, 1018, 1022], "x_1d": 328, "x_1x_2": 1018, "x_1x_2x_3": 1018, "x_1x_3": 1018, "x_2": [167, 177, 214, 419, 421, 422, 424, 620, 632, 1004, 1012, 1018], "x_20": 338, "x_2d": 345, "x_2x_3": 1018, "x_3": [167, 1018], "x_6": 884, "x_7": 884, "x_a": 319, "x_adult": 331, "x_aniso": [79, 92, 97], "x_axi": [125, 225, 279], "x_b": 319, "x_bimod": 319, "x_bin": 316, "x_bound": [424, 624], "x_c": [488, 489, 491, 1015], "x_calib": 443, "x_california": 186, "x_cardiotocographi": 254, "x_center": 199, "x_check": 938, "x_chisq": 319, "x_cluster": 863, "x_convert": 937, "x_copi": 1050, "x_cu": 410, "x_d": [424, 621], "x_dens": [331, 551], "x_df": 155, "x_diabet": 186, "x_different_covari": 70, "x_digit": [107, 164, 311, 415], "x_dist_graph": 855, "x_embed": [304, 305, 699, 703, 860, 1011], "x_error": 223, "x_errors_larg": 223, "x_featur": [108, 647, 648, 649, 1000], "x_filter": 92, "x_fit": 695, "x_fit_": [542, 650], "x_forestcov": 254, "x_full": [185, 186, 315], "x_full_train": 142, "x_gaussian": 319, "x_hashed_lsa": 357, "x_hat": [538, 544, 552, 553], "x_hetero": 130, "x_homo": 130, "x_i": [52, 113, 141, 167, 190, 218, 327, 352, 414, 419, 420, 421, 424, 621, 622, 626, 629, 630, 632, 846, 847, 850, 999, 1000, 1004, 1010, 1011, 1012, 1018, 1022, 1023, 1024], "x_idx_sort": 1051, "x_imput": 637, "x_indic": 168, "x_inform": 322, "x_inlier": 302, "x_inv": [595, 598], "x_ipca": 127, "x_iri": 280, "x_isotropic_covari": 70, "x_j": [414, 424, 621, 622, 626, 629, 630, 632, 999, 1000, 1004, 1011, 1023, 1024], "x_k": [417, 419, 1002, 1011], "x_label": 186, "x_leav": [564, 565, 566, 567, 571, 572, 573, 919, 920, 921, 922], "x_left_lower_corn": [50, 308, 377, 505], "x_legend": 47, "x_list": 318, "x_loadings_": [488, 489, 490], "x_lognorm": [319, 1018], "x_lsa": 357, "x_m": 1012, "x_max": [67, 87, 93, 139, 146, 156, 165, 176, 249, 310, 317, 339, 349, 350], "x_max_": 642, "x_mean": 426, "x_mean_": 1051, "x_min": [67, 87, 93, 139, 146, 150, 156, 165, 176, 206, 249, 310, 317, 339, 349, 350], "x_min_": 642, "x_miss": [153, 185, 186], "x_miss_california": 186, "x_miss_diabet": 186, "x_n": [123, 419, 911, 912, 1010, 1012, 1022], "x_near_unique_categori": 322, "x_new": [91, 415, 419, 423, 438, 448, 449, 451, 453, 455, 538, 539, 540, 541, 542, 543, 544, 546, 548, 549, 550, 551, 556, 574, 576, 577, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 635, 637, 642, 645, 646, 647, 648, 649, 695, 696, 697, 698, 699, 860, 867, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 903, 904, 1020], "x_new_again": 1020, "x_new_invers": 1020, "x_norm_squar": [770, 1044, 1056], "x_normal": 1018, "x_np": 410, "x_offset": 199, "x_offset_": [651, 652, 1051], "x_origin": [541, 546, 548, 550, 551, 637, 903, 904], "x_out": [329, 875, 884, 885], "x_outlier": [200, 231, 301, 302, 344], "x_p": [414, 452, 1004], "x_pca": 127, "x_plot": [197, 218, 223, 250, 278, 300, 320], "x_plot_ext": 218, "x_plot_scal": 320, "x_po": 294, "x_q": 414, "x_r": [131, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "x_r2": 131, "x_rand": 281, "x_random": 206, "x_reconstruct": [328, 488, 489, 490, 590], "x_reconstructed_kernel_pca": [44, 128], "x_reconstructed_pca": [44, 128], "x_red": 87, "x_reduc": [86, 120, 156, 451], "x_restor": 86, "x_right": 70, "x_rope": 275, "x_rotations_": [417, 488, 489, 490], "x_scale": [199, 881, 897, 1018], "x_scale_": [651, 652, 1051], "x_scaler": 49, "x_score": [302, 488, 489, 490, 491], "x_scores_": [490, 1051], "x_select": 365, "x_shared_covari": 70, "x_shuffl": 322, "x_size": 114, "x_sp": 203, "x_spars": [331, 541, 978, 981], "x_sparse_embed": 573, "x_squared_norm": [263, 466], "x_src": 300, "x_std": [881, 897, 1018], "x_std_": 1051, "x_t": [470, 634, 870], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 111, 117, 118, 128, 137, 140, 142, 144, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 179, 182, 189, 190, 191, 192, 193, 195, 198, 202, 207, 212, 214, 215, 223, 224, 225, 231, 232, 233, 235, 245, 247, 253, 257, 258, 262, 268, 269, 272, 273, 278, 282, 284, 288, 290, 294, 298, 301, 303, 304, 307, 310, 312, 313, 317, 319, 320, 322, 324, 325, 326, 331, 332, 337, 338, 344, 356, 360, 362, 363, 364, 365, 369, 376, 384, 387, 395, 408, 415, 418, 421, 444, 476, 477, 478, 479, 480, 481, 482, 516, 565, 566, 567, 574, 575, 704, 705, 707, 709, 806, 829, 837, 839, 842, 860, 868, 869, 871, 885, 921, 922, 998, 1008, 1010, 1011, 1012, 1014, 1018, 1022, 1023, 1024, 1036, 1039], "x_test_df": 258, "x_test_kernel_pca": 128, "x_test_maxab": 1018, "x_test_minmax": 1018, "x_test_miss": 153, "x_test_no_cf_encod": 322, "x_test_noisi": 44, "x_test_np": 258, "x_test_pca": [45, 128], "x_test_r": 117, "x_test_scal": 258, "x_test_sel": 193, "x_test_select": 365, "x_test_text": 47, "x_test_tran": 1018, "x_test_transform": [365, 418], "x_text": 47, "x_tfidf": 357, "x_thresholds_": [247, 642, 1051], "x_torch": 410, "x_tr": [874, 880, 883, 884, 885, 889, 891, 894, 896, 897, 901, 902], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 111, 117, 118, 128, 137, 140, 144, 148, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 198, 202, 212, 214, 215, 218, 224, 225, 231, 232, 233, 235, 245, 253, 257, 258, 262, 264, 268, 269, 272, 273, 278, 282, 284, 288, 294, 298, 301, 303, 304, 307, 310, 312, 313, 317, 319, 320, 322, 324, 325, 326, 331, 332, 337, 338, 344, 356, 360, 364, 365, 369, 376, 384, 387, 395, 415, 418, 421, 443, 444, 516, 565, 566, 567, 574, 575, 704, 705, 707, 709, 806, 829, 837, 839, 842, 860, 868, 869, 871, 885, 921, 922, 998, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1022, 1023, 1036], "x_train_": 618, "x_train_ensembl": 142, "x_train_linear": 142, "x_train_maxab": 1018, "x_train_minmax": 1018, "x_train_miss": 153, "x_train_no_cf_encod": 322, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 190, "x_train_r": 117, "x_train_sel": 193, "x_train_select": 365, "x_train_std_transform": 320, "x_train_text": 47, "x_train_tran": 1018, "x_train_transform": [320, 365, 418], "x_train_valid": 63, "x_tran": [319, 330, 410, 448, 470, 887, 892, 899, 932, 1018], "x_trans_bc": 319, "x_trans_qt": 319, "x_trans_yj": 319, "x_transform": [127, 156, 251, 491, 538, 539, 540, 541, 542, 544, 546, 550, 573, 645, 646, 695, 696, 697, 698], "x_transformed_fit_": 542, "x_true": 240, "x_uniform": 319, "x_val": [148, 1016], "x_valid": 63, "x_valu": 337, "x_vari": 92, "x_weibul": 319, "x_weights_": [417, 488, 489, 490, 491], "x_wrong": 70, "xa": 588, "xanchor": 276, "xarg": 1039, "xavier": [868, 869, 1047, 1048, 1049, 1051, 1052, 1057], "xaxi": [80, 120, 129, 143, 214, 237, 239, 242, 295, 300, 356], "xaxis2": 143, "xb": [117, 890], "xbar_": 556, "xbc": 422, "xc3": 422, "xcjason": 1049, "xcode": 380, "xd": 533, "xdang": 686, "xerox": 51, "xerr": [185, 186, 357], "xethan": 1051, "xfail": [390, 930], "xfc": 422, "xfcche": 422, "xfea": 422, "xff": 422, "xgamma": 692, "xgboost": [153, 155, 421, 1027], "xgrid": [50, 308], "xhan": 1048, "xhy": 1046, "xi": [2, 79, 100, 379, 414, 417, 422, 456, 462, 516, 1022, 1050], "xi_i": 1022, "xi_k": 417, "xiang": 1057, "xiangyin": 1052, "xiao": [0, 393, 403, 1047, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "xiaojin": 906, "xiaoyu": 1051, "xiaoyuchai": 1052, "xin": [686, 1004, 1047], "xinfan": [1039, 1040, 1043], "xing": [1047, 1048], "xinv": 876, "xinyu": 414, "xinyuliu12": 1048, "xiong": [1047, 1048, 1053], "xj": 412, "xk": [100, 557], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 96, 111, 112, 114, 115, 117, 118, 120, 125, 130, 138, 139, 141, 147, 149, 150, 151, 152, 153, 157, 161, 163, 167, 168, 171, 174, 175, 176, 177, 179, 180, 181, 190, 197, 200, 201, 202, 204, 205, 206, 207, 210, 211, 217, 219, 220, 222, 224, 226, 227, 231, 235, 248, 250, 252, 254, 270, 274, 275, 279, 280, 284, 285, 288, 290, 297, 298, 301, 302, 321, 322, 342, 344, 345, 348, 356, 361, 362, 363, 638], "xlim": [51, 63, 79, 93, 97, 107, 111, 112, 113, 125, 139, 140, 141, 157, 163, 175, 176, 190, 197, 207, 209, 216, 223, 226, 231, 244, 252, 261, 266, 270, 284, 290, 301, 302, 344, 349, 350, 353, 363], "xm": [51, 240], "xmax": [50, 111, 207, 209, 226, 227, 308], "xmin": [50, 111, 207, 209, 226, 227, 308], "xn": 516, "xom": 51, "xor": [173, 175, 176, 177, 187, 227, 228, 230, 264, 318, 350, 354, 617, 621, 629, 1004, 1024, 1029, 1046], "xp": [417, 886], "xpreprocessor": 380, "xrang": 1045, "xred": [451, 1055], "xrot": 53, "xrx": 51, "xs_sp": 203, "xsat": 1049, "xscale": [175, 180, 250], "xt": [161, 295, 396, 451, 545, 547, 634, 636, 807, 810, 811, 821, 855, 863, 871, 876, 881, 888, 900, 935, 1055, 1057], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 81, 85, 86, 87, 93, 94, 97, 115, 117, 126, 147, 149, 153, 176, 177, 178, 182, 201, 207, 213, 230, 244, 252, 261, 262, 263, 266, 274, 275, 290, 299, 308, 313, 321, 334, 345, 348, 350, 704], "xtick_period": 191, "xtick_start": 191, "xticklabel": [43, 49, 147, 153, 191, 321], "xticks_label": 149, "xticks_po": 149, "xticks_rot": [45, 704], "xtrain": 308, "xu": [414, 417, 425, 450, 1022, 1052, 1053, 1056, 1057, 1058], "xue": [0, 1043, 1044, 1045, 1047, 1048, 1051], "xuefeng": [1056, 1057, 1058], "xueqin": [686, 1004], "xun": [1049, 1051], "xuniu": 1054, "xval": 186, "xw": [216, 327, 653, 654, 656, 659, 660, 661, 662, 663, 667, 668, 669, 670, 679, 688, 689, 690, 691, 1004], "xx": [77, 93, 113, 146, 150, 156, 165, 176, 177, 178, 191, 224, 227, 228, 229, 230, 231, 242, 244, 252, 264, 301, 310, 317, 318, 339, 344, 345, 349, 350, 353, 354], "xx0": [139, 638], "xx1": [139, 638], "xx_coarser": 146, "xxx": 396, "xy": [48, 63, 84, 282, 308, 350, 400, 653, 654, 657, 658, 659, 660, 661, 662, 667, 668, 669, 670, 671, 688, 689, 690, 691, 693], "xycoord": [48, 63], "xyguo": [1045, 1047], "xytext": [48, 63, 195], "xyz": 381, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 80, 87, 89, 91, 92, 95, 96, 97, 100, 101, 105, 106, 108, 109, 114, 117, 118, 121, 125, 127, 128, 129, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 235, 237, 238, 239, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 260, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 297, 298, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 361, 362, 363, 364, 365, 374, 375, 376, 377, 378, 380, 382, 384, 386, 387, 389, 390, 391, 395, 396, 405, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 505, 507, 509, 512, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 590, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 713, 718, 733, 739, 742, 748, 749, 763, 765, 766, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 795, 796, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 903, 904, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 930, 931, 937, 942, 943, 967, 969, 970, 971, 978, 981, 994, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1022, 1023, 1024, 1028, 1034, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "y0": [51, 240], "y1": [51, 139, 240, 516, 723, 1009, 1010], "y1_label": 46, "y2": [139, 723, 1009], "y2_label": 46, "y3": 1009, "y_": [247, 261, 265, 266, 307, 384, 417, 419, 644, 655, 676, 687, 736, 737, 745, 771, 790, 791, 794, 1004, 1008, 1045], "y_1": [138, 362, 363, 417, 1008, 1012, 1022], "y_2": [138, 362, 363, 1012], "y_20": 338, "y_2d": 345, "y_3": 363, "y_30": 339, "y_50": 339, "y_adult": 331, "y_all": [673, 675, 683, 839, 840, 868], "y_ard": 197, "y_ard_std": 197, "y_axi": [125, 225], "y_bia": 140, "y_brr": 197, "y_brr_std": 197, "y_c": [488, 489, 491], "y_calib": 443, "y_california": 186, "y_coclust": 57, "y_convert": 937, "y_cov": 618, "y_cu": 410, "y_decis": [331, 842], "y_dens": 1009, "y_diabet": 186, "y_different_covari": 70, "y_digit": [107, 164, 311, 415], "y_error": [140, 223], "y_errors_larg": 223, "y_filter": 92, "y_full": [185, 186, 315], "y_full_train": 142, "y_grid_pr": 156, "y_hat": 471, "y_high": 150, "y_i": [141, 327, 352, 412, 421, 999, 1000, 1004, 1008, 1012, 1022, 1023, 1024], "y_indic": 882, "y_iri": 280, "y_isotropic_covari": 70, "y_j": [1000, 1008, 1010, 1018, 1023], "y_k": [417, 1018], "y_kmean": 57, "y_kr": 250, "y_l": 1008, "y_label": 235, "y_left_lower_corn": [50, 308, 377, 505], "y_limit": 147, "y_loadings_": [488, 489, 490], "y_loc": 356, "y_log_prob": 842, "y_log_proba": 871, "y_low": 150, "y_lower": [95, 150], "y_mask": 338, "y_max": [67, 93, 139, 146, 156, 165, 176, 235, 249, 310, 317, 339, 349, 350, 642, 644], "y_mean": [179, 180, 183, 618, 651, 652], "y_mean_": 1051, "y_med": 150, "y_min": [67, 93, 139, 146, 156, 165, 176, 249, 310, 317, 339, 349, 350, 642, 644], "y_miss": [185, 186], "y_miss_california": 186, "y_miss_diabet": 186, "y_multirf": 157, "y_n": [1008, 1012, 1022], "y_new": 91, "y_nois": 140, "y_noisi": 216, "y_norm_squar": 770, "y_normal": 219, "y_np": 410, "y_numer": [937, 996], "y_observ": 332, "y_onehot_test": 284, "y_org": 942, "y_outlier": 200, "y_pareto": 219, "y_plot": [197, 218, 223, 278], "y_plot_ext": 218, "y_po": 358, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 92, 97, 104, 109, 137, 150, 151, 153, 158, 169, 190, 217, 219, 224, 227, 232, 234, 235, 244, 245, 254, 269, 271, 273, 278, 302, 306, 313, 320, 332, 337, 338, 365, 382, 389, 396, 421, 437, 445, 471, 488, 489, 490, 556, 559, 561, 563, 564, 565, 567, 569, 571, 572, 574, 575, 577, 618, 638, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 704, 705, 707, 708, 709, 710, 715, 719, 720, 725, 728, 729, 730, 731, 735, 736, 737, 741, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 790, 791, 792, 794, 795, 797, 798, 803, 807, 810, 811, 821, 832, 842, 844, 845, 854, 862, 869, 871, 911, 912, 913, 914, 915, 916, 917, 920, 922, 1008, 1010, 1045, 1046, 1048, 1050, 1054, 1055, 1056], "y_pred_ard": 202, "y_pred_bin": 217, "y_pred_chain": 294, "y_pred_empti": [736, 737], "y_pred_enet": 202, "y_pred_ensembl": 294, "y_pred_lasso": 202, "y_pred_lr": 219, "y_pred_nnl": 212, "y_pred_ol": 212, "y_pred_outli": [231, 301, 344], "y_pred_outliers_sgd": 231, "y_pred_ovr": 294, "y_pred_product": 235, "y_pred_qr": 219, "y_pred_ridg": 109, "y_pred_ridge_with_trans_target": 109, "y_pred_scal": 320, "y_pred_seg": 217, "y_pred_test": [231, 301, 344], "y_pred_test_sgd": 231, "y_pred_tot": 235, "y_pred_train": [231, 344], "y_pred_train_sgd": 231, "y_pred_with_": 189, "y_pred_without_": 189, "y_predict": [140, 384, 1039], "y_prob": [62, 64, 177, 444, 445, 716, 842, 868, 1008, 1053, 1057], "y_proba": [149, 152, 320, 396, 716, 871, 1057], "y_proba_sc": 320, "y_rand": 339, "y_reconstruct": [488, 489, 490], "y_rf": 157, "y_right": 70, "y_rotations_": [417, 488, 489, 490], "y_sampl": [183, 618], "y_scaler": 49, "y_score": [245, 282, 284, 396, 488, 489, 490, 714, 727, 733, 734, 746, 747, 763, 789, 795, 796, 801, 807, 810, 811, 821, 871, 1008, 1045, 1053, 1055, 1057], "y_scores_": [490, 1051], "y_shared_covari": 70, "y_spars": 1009, "y_std": [180, 183, 559, 618, 651, 652, 1052], "y_std_": 1051, "y_svr": 250, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 117, 118, 128, 137, 140, 142, 144, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 182, 189, 190, 191, 192, 193, 195, 202, 212, 214, 217, 223, 224, 225, 232, 233, 235, 245, 253, 257, 258, 262, 268, 269, 272, 273, 278, 282, 284, 288, 294, 298, 303, 304, 310, 312, 313, 317, 320, 322, 324, 325, 326, 331, 332, 337, 338, 356, 360, 364, 365, 376, 387, 395, 415, 418, 421, 444, 516, 565, 566, 567, 574, 575, 704, 705, 707, 709, 806, 829, 837, 839, 842, 860, 868, 869, 871, 921, 922, 1008, 1010, 1011, 1018, 1023, 1036, 1039], "y_test_pr": 262, "y_test_predict": 253, "y_test_r": 117, "y_test_tru": 337, "y_thresholds_": [247, 642, 1051], "y_torch": 410, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 117, 118, 128, 137, 140, 144, 148, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 198, 202, 212, 214, 215, 218, 224, 225, 232, 233, 245, 253, 257, 258, 262, 268, 269, 272, 273, 278, 282, 284, 288, 294, 298, 303, 304, 310, 312, 313, 317, 320, 322, 324, 325, 326, 331, 332, 334, 335, 337, 338, 339, 356, 360, 364, 365, 369, 376, 384, 387, 395, 415, 418, 421, 443, 444, 516, 565, 566, 567, 574, 575, 704, 705, 707, 709, 806, 829, 837, 839, 842, 860, 868, 869, 871, 921, 922, 998, 1008, 1010, 1011, 1016, 1018, 1023, 1036], "y_train_": 618, "y_train_ensembl": 142, "y_train_linear": 142, "y_train_noisi": 181, "y_train_pr": 262, "y_train_r": 117, "y_train_valid": 63, "y_tran": 109, "y_transform": 491, "y_true": [43, 52, 57, 68, 94, 109, 137, 158, 177, 217, 227, 235, 254, 263, 269, 337, 382, 437, 444, 445, 471, 488, 489, 490, 559, 561, 563, 564, 565, 567, 569, 571, 572, 575, 577, 618, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 685, 686, 704, 705, 707, 708, 709, 710, 714, 715, 716, 719, 720, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 789, 790, 791, 792, 794, 795, 796, 797, 798, 801, 803, 806, 844, 845, 854, 862, 869, 912, 914, 917, 920, 922, 1008, 1040, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1056], "y_true_bin": 217, "y_true_categor": [716, 1008], "y_true_empti": 736, "y_true_mean": 219, "y_true_seg": 217, "y_type_": 878, "y_uniqu": 61, "y_upper": [95, 150], "y_val": [148, 1016], "y_valid": 63, "y_var": 140, "y_vari": 92, "y_weights_": [417, 488, 489, 490, 491], "y_wrong": 70, "yacin": 1047, "yadav": 1053, "yagi": 1051, "yahoo": 51, "yair": [414, 698], "yakov": 1051, "yalburgi": [1046, 1047], "yaman": 1054, "yamanishi": 377, "yamin": 1039, "yaml": [386, 390], "yan": [1043, 1051], "yanchor": 276, "yang": [377, 414, 419, 541, 646, 1045, 1046, 1049, 1051, 1052, 1053, 1055, 1056], "yangarbit": 1046, "yanhong": 1054, "yanlend": 1045, "yann": [1039, 1041], "yanni": 414, "yannick": [1039, 1041], "yao": [0, 379, 393, 403, 1045, 1046, 1047, 1048, 1055, 1056, 1057, 1058], "yap": 1046, "yar": 1053, "yareyaredesuyo": 1057, "yaroslav": [0, 403, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1055, 1056, 1057, 1058], "yarowski": [326, 908, 1021], "yashika": 1051, "yasmeen": 1052, "yat2016": 414, "yate": [597, 737], "yates2011": 597, "yau": [1042, 1043, 1044, 1045, 1046], "yaxi": [46, 49, 80, 95, 120, 129, 143, 214, 237, 239, 242, 260, 295, 300, 356], "ye": [356, 390, 396, 408, 665, 666, 878, 895, 1004], "year": [0, 43, 161, 172, 179, 189, 190, 191, 217, 218, 235, 332, 379, 381, 386, 394, 418, 422, 809, 814, 816, 890, 1004, 1008, 1028, 1032], "yearli": [43, 397], "yearremodadd": 158, "yeast": [294, 842], "yee": [1046, 1047], "yegelwel": 1051, "yeh": 1052, "yelit": 1045, "yellow": [70, 121, 345, 1009], "yellowbrick": 1027, "yellowgreen": [218, 220, 227, 362], "yen": [1045, 1046], "yenchen": [0, 1045], "yenchenlin": 1045, "yenugula": 1057, "yeo": [315, 319, 887, 899, 1018, 1047, 1053, 1055], "yep": 385, "yerr": [107, 112, 114, 144, 147, 171, 297, 321, 337], "yesy": 402, "yesyesclassificationclassificationnumb": 402, "yesyesdo": 402, "yesyesfew": 402, "yesyesllel": 402, "yesyespredict": 402, "yesyessgdclassifiersgd": 402, "yesyessgdregressorsgd": 402, "yesyestextdatatext": 402, "yet": [48, 92, 202, 235, 265, 276, 358, 371, 377, 381, 386, 394, 399, 400, 405, 418, 419, 421, 422, 424, 454, 458, 467, 468, 560, 561, 584, 785, 991, 997, 1004, 1008, 1014, 1022, 1028, 1048, 1056], "yeung": 1045, "ygrid": [50, 308], "yhoo": 51, "yi": [516, 1010, 1043, 1047, 1048, 1051], "yichuan": [1045, 1046], "yield": [47, 48, 62, 80, 90, 111, 112, 113, 114, 150, 202, 212, 217, 232, 235, 280, 294, 310, 315, 342, 347, 356, 357, 365, 369, 371, 376, 387, 396, 411, 414, 416, 418, 419, 421, 422, 423, 443, 455, 474, 478, 515, 516, 544, 545, 546, 548, 553, 560, 561, 566, 567, 568, 569, 574, 575, 601, 609, 654, 658, 659, 660, 662, 668, 670, 672, 680, 682, 693, 733, 788, 795, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 838, 842, 845, 903, 904, 949, 956, 958, 959, 965, 1000, 1002, 1004, 1005, 1008, 1023, 1024, 1044, 1045, 1047, 1050, 1052], "yifan": 1012, "yime": 1047, "ying": [414, 458, 468, 1053], "yinglr": 1049, "yisheng": 1056, "yiyangq": 1053, "yj": [117, 319], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 96, 111, 112, 114, 115, 117, 118, 120, 125, 130, 138, 139, 141, 149, 150, 151, 152, 153, 157, 161, 163, 167, 168, 171, 174, 175, 176, 177, 179, 180, 181, 190, 197, 200, 201, 202, 204, 205, 206, 207, 210, 211, 217, 219, 220, 222, 224, 226, 227, 235, 248, 250, 252, 270, 274, 275, 278, 279, 280, 284, 285, 288, 290, 298, 322, 342, 345, 348, 356, 361, 362, 363, 638], "ylim": [51, 61, 63, 69, 72, 79, 93, 97, 111, 112, 113, 125, 139, 140, 147, 150, 157, 160, 175, 176, 190, 206, 207, 209, 210, 211, 223, 226, 227, 231, 244, 252, 261, 266, 270, 274, 278, 284, 290, 301, 302, 344, 349, 350, 353, 356, 363], "ylorbr_r": 113, "ym": [51, 240], "ymax": [47, 49, 50, 111, 206, 209, 210, 218, 226, 275, 308], "ymazari": 1047, "ymean": 198, "ymin": [50, 111, 206, 209, 210, 218, 226, 275, 308], "yml": 390, "yn": [516, 1009, 1010], "yoav": 1045, "yoch": 1052, "yogendrasingh": 1054, "yojana": 1054, "yokasr": 1049, "yoni": 1042, "yoon": 1050, "yoram": [292, 742], "york": [274, 795, 804, 998, 1008, 1020], "yoshihiro": 1049, "yoshiki": [1042, 1045], "yoshizawa": 1047, "yoshua": [868, 869, 1021], "yosshi999": 1053, "yosuk": [1051, 1052], "yotam": 1055, "you": [0, 30, 54, 58, 61, 105, 120, 145, 146, 149, 151, 169, 172, 186, 191, 193, 204, 218, 221, 246, 251, 258, 263, 270, 275, 276, 282, 301, 324, 325, 328, 330, 331, 335, 338, 349, 356, 365, 369, 370, 371, 376, 377, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 395, 396, 400, 401, 402, 405, 408, 410, 412, 413, 414, 415, 416, 418, 421, 422, 423, 425, 426, 431, 443, 449, 450, 452, 453, 455, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 507, 510, 511, 516, 517, 539, 540, 541, 543, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 586, 587, 588, 589, 595, 596, 597, 598, 614, 615, 617, 618, 634, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 697, 706, 707, 792, 805, 806, 808, 809, 810, 811, 812, 814, 816, 822, 823, 825, 826, 827, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 868, 869, 870, 871, 874, 875, 876, 877, 878, 883, 884, 885, 890, 891, 896, 897, 899, 900, 901, 902, 904, 906, 907, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 930, 955, 973, 997, 998, 1003, 1004, 1008, 1009, 1012, 1014, 1015, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1031, 1032, 1039, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "youden": 1008, "younger": 235, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 376, 380, 381, 382, 383, 385, 386, 388, 390, 391, 394, 395, 396, 400, 401, 402, 408, 410, 413, 414, 415, 416, 421, 422, 425, 426, 450, 452, 510, 540, 568, 569, 609, 641, 653, 694, 718, 807, 810, 811, 813, 821, 830, 834, 836, 930, 949, 1005, 1012, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1032, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "yourlogin": 382, "yourself": [105, 381, 382, 383, 387, 390, 1012], "ypred": 1046, "yrsold": 158, "yscale": [175, 180, 217, 250, 356], "ystd": 198, "yt": 882, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 81, 85, 86, 87, 93, 94, 97, 115, 117, 126, 151, 168, 176, 177, 178, 182, 201, 207, 213, 230, 244, 252, 261, 262, 263, 266, 270, 290, 299, 308, 313, 334, 345, 350, 356], "yticklabel": [270, 356], "ytrain": 308, "ytrue": 1046, "yu": [202, 414, 458, 468, 665, 1004, 1012, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "yuan": [1053, 1054, 1055, 1056, 1057], "yuchen": [1055, 1056], "yucheng": 1044, "yue": [1051, 1057], "yufeng": 1047, "yuichi": 1046, "yuki": 1053, "yule": [456, 463, 785, 786, 787], "yulia": 1049, "yum": 380, "yun": [1054, 1055], "yung": [1042, 1045], "yunqian": 1004, "yurchak": [0, 403, 422, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "yuri": [1042, 1044], "yusuf": [1054, 1055], "yusuk": 1052, "yusukenagasaka": 1052, "yutaro": 1051, "yuusuk": 1056, "yuval": [411, 457], "yv": 417, "yve": 1052, "yy": [77, 93, 113, 146, 156, 165, 176, 178, 191, 224, 228, 229, 230, 231, 242, 244, 252, 301, 310, 317, 318, 339, 344, 345, 349, 350, 353, 354], "yy_": 224, "yy_coars": 146, "yy_down": 350, "yy_up": 350, "yzhenman": 1052, "z": [50, 93, 146, 165, 176, 178, 191, 227, 229, 230, 237, 239, 244, 249, 264, 301, 308, 310, 317, 320, 339, 345, 350, 354, 379, 386, 411, 419, 421, 560, 561, 592, 646, 671, 678, 692, 693, 696, 700, 706, 731, 792, 891, 1004, 1005, 1012, 1013, 1054], "z_": 419, "z_1": 1004, "z_2": 1004, "z_3": 1004, "z_4": 1004, "z_5": 1004, "z_i": [141, 1012], "z_l": 1012, "z_points_coars": 146, "zablit": 1054, "zac": 1044, "zacchari": 1051, "zach": [1047, 1048, 1053], "zachariah": 1047, "zadrozni": [64, 412, 443, 683], "zaffalon": 275, "zahlii": 1052, "zain": [0, 403, 1053, 1054, 1055, 1056], "zalkow": 1044, "zambelli": 1042, "zamrii": 1049, "zanouda": 1046, "zaxi": [80, 120, 129, 214, 237], "zayd": 1048, "zaytsev": 1042, "zdzieblo": 1056, "zebra": 719, "zedan": 1055, "zeel": 1053, "zeeshan": [1054, 1055], "zempleni": 1053, "zen": 942, "zenin": 1045, "zentrum": 1008, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 87, 89, 112, 114, 115, 123, 126, 128, 139, 140, 149, 151, 152, 157, 169, 172, 186, 197, 202, 203, 205, 208, 210, 211, 216, 217, 218, 221, 222, 223, 227, 232, 235, 248, 251, 252, 254, 260, 264, 266, 272, 275, 280, 284, 285, 288, 300, 315, 325, 326, 349, 352, 357, 358, 360, 364, 369, 370, 377, 384, 388, 396, 412, 414, 416, 419, 421, 422, 423, 424, 427, 452, 458, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 493, 504, 515, 516, 530, 533, 534, 538, 539, 542, 544, 545, 546, 547, 549, 550, 554, 555, 559, 564, 565, 566, 567, 568, 569, 571, 572, 573, 588, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 618, 643, 646, 650, 651, 652, 657, 665, 666, 671, 672, 673, 674, 675, 678, 683, 684, 685, 692, 693, 710, 716, 719, 720, 722, 723, 732, 736, 737, 741, 745, 747, 753, 790, 791, 792, 794, 803, 804, 822, 823, 826, 827, 840, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 881, 883, 884, 886, 887, 888, 890, 891, 897, 898, 899, 900, 904, 911, 919, 920, 921, 922, 953, 982, 993, 998, 1004, 1006, 1007, 1010, 1011, 1012, 1018, 1019, 1020, 1022, 1023, 1024, 1039, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "zero_bas": [493, 515, 516], "zero_class": 252, "zero_divis": [313, 720, 723, 736, 737, 745, 790, 791, 794, 1008, 1049, 1051, 1055, 1058], "zero_impute_scor": 186, "zero_on": [382, 1040], "zero_one_loss": [2, 382, 410, 710, 741, 1008, 1040, 1041, 1042, 1056, 1057], "zero_one_scor": 1040, "zerodivisionerror": [1046, 1049, 1055], "zeros_lik": [84, 219, 284], "zeta": 1023, "zeta_i": 1023, "zev": [1045, 1046, 1047, 1048], "zeyusun": 1052, "zha": [696, 700, 1005], "zhai_pro": 1044, "zhan": 1054, "zhang": [414, 448, 671, 686, 692, 693, 696, 700, 765, 766, 1004, 1005, 1006, 1010, 1022, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1055, 1056, 1057], "zhang02c": 683, "zhang96": [414, 448], "zhao": [1049, 1051, 1052, 1053, 1054], "zhaowei": 1051, "zhaoweiwang": 1052, "zhauniarovich": 1044, "zhdanovich": 1047, "zhechev": 1054, "zhehao": [1052, 1053, 1054, 1055, 1057], "zhenfish": 1053, "zheng": [1045, 1046, 1051], "zhenq": 1047, "zhi": [570, 1014], "zhiqe": 1047, "zhou": [570, 646, 907, 1014, 1047, 1055, 1056], "zht2007": 204, "zhu": [137, 421, 526, 560, 665, 906], "zhuyi": [1047, 1048], "zhuzhunashvili": [414, 468], "ziad": 1057, "zibulevski": [671, 692, 693], "zichen": 1044, "zielinska": 1050, "zihna": [1052, 1058], "ziji": [1047, 1048], "zijlstra": 1042, "zike": 1045, "zimek": 452, "zimmer": [1043, 1053], "zinkov": [1039, 1040, 1041, 1043, 1044], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 380, 421, 835, 1018, 1035], "zisserman": [645, 1000, 1008], "zito": [1039, 1052], "ziv": 1045, "zivori": 1045, "zj": [1047, 1048], "zoj613": 1051, "zolisa": 1051, "zoom": [43, 142, 315, 402], "zoom_in_percentile_rang": 315, "zorder": [51, 93, 125, 155, 165, 175, 183, 207, 215, 238, 240, 247, 250, 260, 325, 331, 350], "zou": [137, 204, 421, 526, 560, 663, 1004, 1022], "zou_et_al_criterion_resc": 204, "zoubin": 906, "zoubir": 114, "zouhar": 1052, "zsh": 370, "zuckerberg": 0, "zwinck": 1041, "zxcvbniu": 1046, "zz": 113, "zzrh2009": 421, "z\u00e9": 1047, "\u00e4yr\u00e4m\u00f6": 1004, "\u00f3scar": [1043, 1044, 1045, 1046], "\u00f6zer": 1052, "\u0142ukasz": 1054, "\u015fahin": 1053, "\u0161t\u011bp\u00e1n": 1057, "\u675c\u4e16\u6a4b": [0, 404], "\u8d75\u4e30": 1053}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Iris Dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [192, 320, 322, 385, 394, 421, 1008], "0": [186, 324, 325, 326, 327, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "1": [191, 214, 327, 328, 329, 330, 331, 332, 394, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "10": [102, 1039], "11": 1039, "12": 1039, "13": 1040, "14": 1041, "15": 1042, "16": 1043, "17": 1044, "18": 1045, "19": 1046, "1d": 300, "2": [214, 329, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "20": [104, 356, 377, 1047], "2018": 1028, "20newgroup": 232, "21": 1048, "22": [324, 1049], "23": [325, 1050], "24": [326, 1051], "2d": [51, 87, 125, 131, 191], "3": [63, 201, 330, 1047, 1048, 1053, 1055], "3d": 191, "4": [331, 1039, 1047, 1056], "5": [332, 1024, 1039, 1057], "6": [1039, 1058], "7": 1039, "8": 1039, "9": 1039, "99": 377, "A": [52, 58, 59, 82, 93, 98, 217, 327, 381, 388, 418], "And": [241, 397], "In": 282, "NOT": 387, "One": [209, 231, 284, 327, 344, 418, 1014, 1022], "The": [0, 118, 120, 189, 190, 217, 242, 248, 269, 273, 282, 289, 292, 377, 386, 390, 418, 422, 1007, 1008, 1020], "Will": 394, "With": 255, "__sklearn_is_fitted__": 135, "_safe_index": 933, "abil": 180, "ablat": 254, "about": [0, 190, 394], "absolut": 1008, "access": 415, "accuraci": [192, 249, 356, 360, 1008], "accuracy_scor": 710, "across": 365, "action": 382, "activ": [0, 335], "ad": 414, "adaboost": [137, 138, 139, 421], "adaboostclassifi": [137, 560], "adaboostregressor": 561, "add": [331, 394], "add_dummy_featur": 893, "addit": [421, 1000], "additive_chi2_kernel": 765, "additivechi2sampl": 645, "address": 269, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 711, "adjusted_rand_scor": 712, "advanc": 255, "advantag": 414, "affin": [51, 73, 414, 1006], "affinity_propag": 460, "affinitypropag": 446, "agglom": [74, 75, 87], "agglomer": [86, 89, 1025], "agglomerativeclust": 447, "aggress": [997, 1004], "aic": [206, 1004], "algebra": [369, 391], "algorithm": [57, 58, 59, 73, 79, 84, 90, 98, 99, 100, 237, 244, 388, 394, 1002, 1004, 1009, 1011, 1012, 1016, 1024], "alias": 390, "align": 1005, "all": [275, 284, 328, 400, 1054, 1055, 1056], "all_displai": 946, "all_estim": 947, "all_funct": 948, "alloc": [54, 419], "alpha": [163, 360], "alpin": 400, "alreadi": 55, "altern": 997, "am": [147, 254], "amount": 287, "an": [82, 94, 135, 186, 199, 206, 305, 324, 328, 390, 394, 422, 997, 1014], "anaconda": 400, "analysi": [43, 64, 69, 70, 95, 123, 130, 133, 137, 150, 191, 202, 260, 277, 278, 285, 303, 304, 305, 356, 417, 419, 1002, 1011, 1025], "analyz": [52, 997], "angl": [206, 1004], "ani": 394, "anomali": 244, "anova": [169, 348], "api": [2, 41, 135, 257, 258, 324, 327, 329, 370, 384, 389, 396, 405, 410, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1056, 1057, 1058], "appli": 163, "applic": 422, "approach": [111, 206, 275], "approxim": [187, 194, 195, 249, 295, 326, 416, 1000], "ar": [102, 269, 327, 394], "arch": 400, "architectur": 1028, "ard": [202, 1004], "ardregress": 651, "arff": 376, "argument": [327, 384, 1050, 1052], "arm64": 390, "arrai": [41, 329, 332, 364, 391, 410, 1056, 1057, 1058], "artifact": 408, "artwork": 0, "as_float_arrai": 935, "ask": 394, "assert": 384, "assert_all_finit": 936, "assign": 414, "assumpt": 92, "atom": [49, 369], "attent": 394, "attribut": [384, 396, 410, 997], "auc": [324, 713], "author": [386, 1039], "autom": 382, "automat": [202, 395, 1004], "auxiliari": 41, "avail": [328, 1035, 1036], "available_if": 968, "averag": [282, 284, 414, 421, 1008], "average_precision_scor": 714, "avoid": [365, 415], "aweb": 1032, "ax": 389, "b": 117, "backend": 390, "backward": 382, "bag": [140, 149, 356, 421, 422, 997], "baggingclassifi": 562, "baggingregressor": 563, "balanc": [274, 1008], "balanced_accuracy_scor": 715, "ball": 1011, "balltre": [851, 1011], "base": [4, 41, 42, 43, 117, 144, 145, 172, 187, 202, 250, 324, 325, 327, 329, 330, 331, 382, 414, 418, 421, 423, 1004, 1016, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "baseestim": [384, 428], "baselin": [195, 217], "basi": [44, 183, 424, 1000, 1004], "basic": [181, 235, 395, 416, 424], "batch": [414, 419], "bay": [61, 62, 1010], "bayesian": [25, 197, 198, 260, 275, 1004, 1007], "bayesiangaussianmixtur": 804, "bayesianridg": 652, "befor": 186, "behavior": 270, "behind": 0, "being": 190, "benchmark": [46, 49, 93, 356], "bernoulli": [1010, 1013], "bernoullinb": 846, "bernoullirbm": 867, "best": [265, 383, 394], "bestofmedia": 1032, "beta": 419, "betawork": 1032, "between": [99, 286, 1004], "bia": 140, "bic": [206, 265, 1004], "biclust": [27, 56, 57, 58, 187, 378, 411], "biclustermixin": 429, "bigger": 371, "bike": [43, 52, 191], "bin": 1018, "binar": [874, 894, 1018, 1019], "binari": [282, 294, 332, 1004, 1008], "birch": [77, 414, 448], "birchbox": 1032, "bisect": [78, 414], "bisectingkmean": [328, 449], "blind": 124, "bnp": 1032, "boil": 387, "boltzmann": [313, 1013], "bonu": 163, "book": 1032, "boost": [43, 143, 147, 148, 149, 150, 151, 152, 153, 191, 217, 324, 325, 327, 329, 330, 421], "bouldin": 414, "bound": 248, "boundari": [154, 159, 298, 339, 349], "branch": 390, "break": 353, "breast": [193, 379], "brier": 1008, "brier_score_loss": 716, "brute": [997, 1011], "bug": [381, 382, 1031, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "build": [179, 186, 380, 382, 390, 415, 1057, 1058], "bulk": [49, 369], "bunch": [394, 926], "busi": 269, "c": 388, "c4": 1024, "c5": 1024, "cach": [106, 297, 415], "calcul": [148, 160], "calibr": [5, 60, 61, 62, 63, 64, 150, 187, 217, 412, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "calibratedclassifiercv": 443, "calibration_curv": 445, "calibrationdisplai": 444, "california": 377, "calinski": 414, "calinski_harabasz_scor": 717, "call": [365, 381], "callgrind": 388, "can": [163, 394], "cancer": [193, 379], "candid": [287, 997], "canon": [117, 417], "card": 269, "cardif": 1032, "cardiotocographi": 254, "cart": 1024, "case": [352, 1004, 1008], "categor": [147, 321, 326, 331, 394, 421, 1010, 1018], "categori": [43, 328, 330, 1018], "categoricalnb": 847, "caus": 400, "causal": [189, 190], "cautiou": 190, "cca": [117, 488], "center": [123, 1018], "central": 55, "centroid": [306, 1011], "chain": [107, 256, 294, 395, 415], "chanc": 72, "chang": [251, 382, 397, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "changelog": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "characterist": [284, 285, 1008], "check": [190, 277, 324, 390, 410, 1047, 1048, 1049], "check_arrai": 938, "check_consistent_length": 939, "check_cv": 831, "check_estim": [949, 1058], "check_increas": 643, "check_is_fit": [384, 991], "check_memori": 992, "check_random_st": 940, "check_scalar": 941, "check_scor": 718, "check_symmetr": 993, "check_x_i": 937, "checker": 41, "checklist": 382, "chi": [1000, 1006], "chi2": 611, "chi2_kernel": 766, "choic": 419, "choos": [46, 402], "ci": [382, 390], "circl": 101, "cite": 0, "claim": [217, 235], "class": [41, 63, 72, 137, 139, 160, 201, 226, 231, 278, 282, 284, 327, 344, 347, 396, 413, 418, 421, 422, 1008, 1011, 1014, 1022, 1023, 1039, 1040], "class_likelihood_ratio": 719, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 104, 164, 175, 176, 177, 178, 182, 187, 233, 252, 278, 281, 282, 285, 294, 298, 306, 313, 324, 333, 338, 349, 356, 378, 424, 1004, 1008, 1009, 1011, 1012, 1022, 1023, 1024], "classifi": [25, 41, 61, 62, 64, 67, 135, 161, 201, 256, 272, 289, 294, 298, 324, 332, 339, 342, 345, 356, 364, 412, 421, 1002, 1011], "classification_report": 720, "classifierchain": [842, 1009], "classifiermixin": 431, "classifiertag": 927, "classnameprefixfeaturesoutmixin": 430, "clear": 1049, "clear_data_hom": 492, "clone": [384, 439], "close": [381, 390], "cloud": 125, "cloudpickl": 408, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 80, 82, 84, 87, 90, 91, 93, 95, 98, 99, 100, 101, 102, 123, 187, 328, 330, 357, 378, 411, 414, 419, 1008, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "cluster_optics_dbscan": 461, "cluster_optics_xi": 462, "clustermixin": 432, "co": [57, 59, 411], "co2": 179, "code": [0, 46, 123, 132, 382, 384, 387, 388, 390, 419, 1043, 1044, 1045, 1046, 1047], "coeffici": [172, 190, 197, 221, 222, 288, 414, 1008], "cohen": 1008, "cohen_kappa_scor": 723, "coin": [81, 82], "color": 83, "column": [104, 105, 256], "column_or_1d": 994, "columntransform": [332, 415, 470], "com": 1032, "combin": [158, 245], "comment": 387, "commit": 382, "committe": 397, "common": [190, 365, 396, 410, 422, 1008], "commun": [0, 382], "compact": 246, "compar": [63, 77, 79, 97, 111, 117, 143, 157, 168, 195, 197, 203, 219, 224, 244, 250, 275, 283, 303, 311, 315, 321, 394], "comparison": [64, 67, 70, 78, 99, 113, 131, 147, 148, 167, 174, 237, 238, 250, 275, 286, 288, 292, 358, 1004], "compat": [41, 324, 382, 384, 410], "compil": [380, 388], "complement": 1010, "complementnb": 848, "complet": [253, 414], "completeness_scor": 724, "complex": [46, 246, 256, 274, 277, 336, 360, 369, 1004, 1011, 1012, 1022, 1023, 1024], "compon": [118, 123, 303, 304, 305, 419, 1011, 1025], "compos": [7, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "composit": [103, 187, 415, 997], "compoundkernel": 619, "compress": [53, 88, 369], "comput": [41, 55, 73, 82, 84, 98, 99, 102, 111, 143, 210, 222, 368, 369, 415, 418, 1015, 1029], "computation": 371, "compute_class_weight": 942, "compute_optics_graph": 463, "compute_sample_weight": 943, "concaten": 108, "concentr": 260, "concept": [396, 1004], "conclud": [43, 241], "conclus": [46, 52, 174, 202, 206, 292, 298, 322, 349], "conda": 380, "condit": [191, 326, 1015], "confid": 150, "config_context": 474, "configur": [369, 370], "confus": [268, 414, 1008], "confusion_matrix": 725, "confusionmatrixdisplai": [245, 704], "connect": [414, 422], "consensu": 1004, "consensus_scor": 726, "consider": 269, "constant": [217, 269, 998], "constantkernel": 620, "constraint": [153, 155, 329, 331, 414, 421], "construct": 250, "consum": 251, "content": 394, "conting": 414, "contingency_matrix": 721, "continu": [316, 382], "contribut": [382, 394], "contributor": [0, 381, 382, 397, 1043, 1044, 1045, 1046, 1047], "control": [365, 421, 1012], "convent": 383, "converg": 137, "convergencewarn": 578, "convex": 227, "cookbook": 183, "coordin": 206, "core": [0, 47, 371, 381, 388, 394, 397, 1010], "corpu": 422, "correl": [190, 193, 417, 1008, 1016], "cosin": 1006, "cosine_dist": 767, "cosine_similar": 768, "cost": [269, 360, 1024], "countvector": 595, "covari": [8, 70, 110, 111, 113, 114, 115, 187, 262, 416, 1002, 1047, 1051, 1052, 1053, 1055, 1056, 1058], "coverag": [382, 390, 1008], "coverage_error": 727, "covertyp": [254, 377], "craft": 387, "crash": 394, "creat": [104, 130, 137, 221, 245, 282, 322, 348, 349, 394], "credit": 269, "criteria": [204, 394, 1004, 1024], "criterion": [206, 326, 997, 1022], "cross": [43, 116, 117, 163, 171, 187, 206, 269, 270, 271, 273, 274, 278, 280, 285, 322, 348, 365, 413, 417, 418, 997, 1004], "cross_decomposit": [9, 1049, 1051, 1053, 1055, 1057, 1058], "cross_val_predict": 832, "cross_val_scor": [279, 833], "cross_valid": [418, 834], "cubic": 198, "cumul": 1008, "curat": 381, "curv": [62, 64, 198, 250, 257, 266, 272, 277, 282, 284, 412, 1003], "custom": [135, 273, 332, 341, 422, 1018, 1023], "cut": [269, 289], "cv": [270, 365], "cv_results_": 997, "cython": [383, 388, 390], "d": [418, 1011], "d2_absolute_error_scor": 728, "d2_log_loss_scor": 729, "d2_pinball_scor": 730, "d2_tweedie_scor": 731, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 82, 84, 85, 90, 92, 93, 98, 99, 101, 102, 104, 109, 111, 113, 115, 117, 118, 124, 125, 128, 129, 130, 138, 144, 145, 148, 151, 153, 154, 158, 168, 171, 172, 180, 182, 186, 189, 192, 193, 195, 198, 203, 210, 211, 221, 245, 250, 257, 265, 270, 272, 276, 281, 282, 284, 285, 288, 298, 302, 307, 313, 315, 319, 320, 321, 331, 334, 345, 348, 351, 352, 357, 358, 365, 369, 371, 387, 394, 396, 414, 415, 418, 423, 1018, 1022, 1032], "dataconversionwarn": 579, "datadimensionalitywarn": 580, "datafram": [324, 331, 394, 1056], "dataiku": 1032, "datarobot": 1032, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 93, 97, 104, 117, 119, 120, 121, 123, 131, 137, 143, 146, 147, 158, 163, 174, 176, 178, 179, 181, 183, 187, 189, 190, 191, 197, 200, 202, 206, 217, 219, 226, 235, 237, 238, 244, 249, 254, 255, 269, 273, 281, 282, 289, 292, 294, 322, 338, 339, 342, 349, 356, 361, 374, 375, 376, 377, 378, 379, 387, 394, 424, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "davi": 414, "davies_bouldin_scor": 732, "dbscan": [84, 414, 425, 450], "dbscan_clust": 90, "dcg_score": 733, "deal": [41, 394], "debian": 400, "debug": 390, "debugg": 388, "decis": [137, 138, 146, 154, 159, 187, 249, 269, 289, 298, 330, 332, 339, 349, 359, 360, 361, 362, 363, 364, 394, 397, 413, 1024], "decisionboundarydisplai": 638, "decisiontre": 138, "decisiontreeclassifi": 919, "decisiontreeregressor": [326, 920], "decod": 422, "decompos": 419, "decomposit": [11, 116, 117, 122, 123, 140, 187, 378, 417, 419, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "decreas": [144, 145, 192], "deep": 394, "default": [251, 302, 382], "default_tag": 944, "defin": [72, 82, 93, 102, 237, 270, 272, 273, 358, 1008], "definit": [235, 288, 313, 1015, 1049], "deflat": 117, "delai": 974, "demand": [43, 52], "demo": [58, 59, 73, 82, 84, 90, 93, 98, 100], "demonstr": [92, 279, 318, 334], "dendrogram": 76, "denois": [44, 126], "dens": 203, "densiti": [264, 299, 300, 308, 330, 420, 952, 1023], "densitymixin": 433, "depend": [191, 251, 255, 380, 1015, 1039, 1052, 1053], "deploi": 394, "deploy": 400, "deprec": [1, 251, 382, 945, 1049], "descent": [206, 225, 231, 1004, 1022], "descript": 189, "design": 179, "det": [272, 1008], "det_curv": 734, "detail": [1000, 1022, 1023], "detcurvedisplai": 705, "detect": [48, 244, 254, 272, 301, 302, 1008, 1014, 1023], "determin": [114, 202, 416, 1004, 1008], "develop": [134, 135, 187, 251, 380, 383, 384, 385, 389, 390, 391, 997, 1034, 1055], "devianc": [151, 1008], "devic": 410, "diabet": [163, 255, 289, 379], "diagnost": 379, "dict": 422, "dict_learn": 552, "dict_learning_onlin": 553, "dictionari": [85, 123, 126, 132, 419], "dictionarylearn": 538, "dictvector": [358, 588], "did": 394, "diff": 390, "differ": [75, 79, 97, 111, 183, 191, 315, 318, 321, 342, 349, 384, 394, 405, 414, 1004], "digit": [68, 87, 93, 164, 238, 313, 334, 335, 379], "dimension": [106, 237, 240, 256, 304, 320, 357, 1002, 1005, 1011, 1025], "direct": 234, "directli": 394, "dirichlet": [54, 419, 1007], "discount": 1008, "discov": 41, "discret": [154, 182, 316, 317, 1018], "discrimin": [69, 70, 1002], "discriminant_analysi": [12, 1047, 1048, 1051, 1053, 1054, 1055, 1058], "discuss": 381, "disk": 55, "dispatch": 392, "displai": [126, 222, 245, 246, 256, 329, 330, 331, 390, 1036, 1055], "distanc": [27, 113, 332], "distance_metr": 769, "distancemetr": 706, "distort": 126, "distribut": [50, 235, 237, 308, 319, 377, 400, 1005, 1018], "diverg": 419, "divid": 328, "do": [387, 394], "document": [0, 47, 57, 187, 326, 327, 355, 356, 357, 382, 1027, 1028, 1031, 1035, 1039, 1042, 1043, 1046, 1047], "doe": 394, "domain": 1027, "donat": 0, "dot": [183, 424], "dotproduct": 621, "down": 387, "download": [55, 158, 186, 376], "drawback": 414, "drop": [147, 1058], "dtype": 331, "dummi": [13, 1008, 1047, 1048, 1049, 1052, 1053, 1057], "dummyclassifi": 558, "dummyregressor": 559, "dump_svmlight_fil": 493, "dure": 365, "d\u00b2": 1008, "each": [282, 287, 356], "earli": [148, 153, 225], "earlier": 1039, "eas": 383, "effect": [109, 153, 189, 242, 288, 315, 320, 337, 360], "effici": [329, 331, 391], "efficiencywarn": 581, "eigenfac": [45, 123], "eigenmap": 1005, "eigenvector": 55, "elast": [199, 205, 1004], "elasticnet": [202, 325, 653], "elasticnetcv": 654, "element": 396, "elimin": [170, 171, 423, 997], "ellipsoid": [70, 261], "ellipt": 1014, "ellipticenvelop": 475, "embed": [51, 87, 237, 238, 248, 305, 421, 1005], "emeritu": 0, "empir": [96, 114, 248, 416], "empirical_covari": 483, "empiricalcovari": 476, "enable_halving_search_cv": 586, "enable_iterative_imput": 587, "encod": [88, 147, 321, 322, 330, 1018, 1019], "enet_path": 688, "enforc": [1050, 1052], "engin": [43, 52, 192, 1027, 1032], "enhanc": [329, 397, 1027, 1042, 1043, 1044, 1045, 1046], "enrich": 331, "ensembl": [14, 136, 142, 146, 187, 421, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "enthought": 400, "entir": 394, "entri": 1021, "envelop": 1014, "environ": [370, 390, 408], "equival": 275, "error": [137, 141, 148, 150, 163, 197, 221, 272, 288, 390, 400, 1004, 1008], "establish": [99, 195], "estim": [41, 103, 110, 111, 112, 113, 114, 115, 134, 135, 140, 147, 149, 157, 180, 186, 187, 197, 220, 223, 246, 251, 253, 254, 264, 283, 292, 299, 300, 308, 324, 325, 326, 329, 331, 365, 384, 394, 395, 396, 402, 410, 415, 416, 418, 420, 421, 997, 998, 1002, 1004, 1008, 1023, 1027, 1040, 1047, 1048, 1049], "estimate_bandwidth": 464, "estimator_html_repr": 951, "euclidean_dist": 770, "evalu": [52, 72, 93, 96, 114, 217, 254, 269, 276, 279, 288, 313, 321, 357, 395, 409, 411, 414, 418, 421, 997, 1003, 1008], "evernot": 1032, "exact": 419, "exampl": [42, 45, 48, 88, 94, 109, 119, 129, 135, 154, 181, 187, 213, 214, 221, 350, 353, 371, 387, 394, 405, 410, 413, 422, 424, 428, 431, 434, 437, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 489, 490, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 511, 513, 517, 518, 519, 520, 521, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 591, 594, 595, 596, 597, 598, 600, 601, 604, 606, 607, 609, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 624, 625, 626, 629, 630, 632, 634, 635, 637, 638, 639, 640, 641, 642, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 659, 660, 662, 663, 664, 665, 666, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 695, 696, 697, 698, 699, 700, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 716, 719, 720, 724, 725, 726, 734, 736, 739, 741, 742, 744, 745, 748, 749, 752, 753, 755, 756, 757, 759, 760, 762, 764, 768, 785, 786, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 864, 867, 868, 869, 870, 871, 872, 875, 876, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 897, 900, 904, 905, 907, 908, 909, 911, 914, 915, 916, 917, 918, 919, 920, 925, 926, 940, 950, 952, 959, 964, 965, 966, 967, 968, 981, 991, 1039], "except": [15, 391, 1051, 1055], "execut": [365, 394], "exercis": [162, 163, 164, 165, 187], "exhaust": 997, "exist": 382, "exp": [183, 424], "expans": 197, "expect": [191, 326, 1015], "experi": [0, 72, 381], "experiment": [16, 329, 386, 410, 1055], "explain": 1008, "explained_variance_scor": 735, "explicit": 249, "explor": 43, "exponenti": 623, "export": [40, 394], "export_graphviz": 923, "export_text": 924, "expsinesquar": 622, "extend": 1004, "extens": [388, 400], "extern": [376, 1026, 1039, 1048], "extract": [54, 108, 126, 235, 276, 357, 369, 371, 422], "extract_patches_2d": 591, "extrapol": 179, "extratreeclassifi": 921, "extratreeregressor": 922, "extratreesclassifi": 564, "extratreesregressor": 565, "extrem": [387, 421], "f": [167, 1008], "f1": 282, "f1_score": 736, "f_classif": 612, "f_regress": 613, "fa": [123, 130], "face": [45, 85, 123, 253, 377, 1032], "factor": [54, 123, 130, 133, 301, 302, 419, 1014], "factoranalysi": 539, "fail": 387, "failur": [189, 997], "fast_logdet": 953, "faster": [329, 421], "fastica": [123, 124, 125, 426, 540], "fbeta_scor": 737, "featur": [43, 52, 86, 89, 108, 128, 142, 144, 145, 147, 151, 153, 155, 156, 166, 168, 170, 171, 172, 187, 192, 193, 195, 197, 211, 214, 235, 249, 255, 276, 313, 316, 317, 320, 321, 324, 326, 327, 348, 356, 357, 369, 371, 382, 386, 405, 415, 421, 422, 423, 998, 1016, 1018, 1025, 1042, 1043, 1044, 1045, 1046], "feature_extract": [17, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "feature_select": [18, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "featureagglomer": [414, 451], "featurehash": [358, 589], "featureunion": [415, 870], "fedora": 400, "fetch_20newsgroup": 494, "fetch_20newsgroups_vector": 495, "fetch_california_h": 496, "fetch_covtyp": 497, "fetch_fil": 498, "fetch_kddcup99": 499, "fetch_lfw_pair": 500, "fetch_lfw_peopl": 501, "fetch_olivetti_fac": 502, "fetch_openml": [329, 503], "fetch_rcv1": 504, "fetch_species_distribut": 505, "file": [55, 382, 390, 400, 422], "final": [92, 174], "find": 1011, "first": [48, 72], "fit": [29, 58, 63, 92, 124, 130, 144, 145, 150, 151, 179, 197, 198, 199, 211, 214, 219, 223, 282, 294, 302, 307, 322, 351, 365, 384, 395, 405, 410, 421, 1010, 1014], "fitfailedwarn": 582, "fix": [72, 1039, 1042, 1043, 1044, 1045, 1046, 1052], "fixedthresholdclassifi": [332, 806], "flag": 390, "flexibl": [327, 998], "float64": 410, "fold": [390, 418], "footprint": 88, "forc": [997, 1011], "forecast": [52, 179], "forest": [141, 143, 144, 145, 157, 192, 193, 254, 257, 331, 377, 421, 1014], "forg": 380, "format": [376, 387, 394, 1009], "formul": [411, 421, 1002, 1011, 1022, 1023, 1024], "four": 101, "fowlk": 414, "fowlkes_mallows_scor": 738, "framework": 1027, "free": 181, "freebsd": 380, "freez": 394, "french": 217, "frequenc": 235, "frequent": 394, "frequentist": 275, "frobeniu": 419, "from": [17, 51, 126, 172, 192, 321, 324, 370, 376, 380, 394, 422, 1008, 1049], "fruit": 381, "fulli": 189, "function": [41, 49, 70, 183, 207, 221, 222, 227, 238, 270, 289, 326, 348, 358, 391, 418, 421, 424, 1000, 1004, 1008, 1023, 1056], "functiontransform": 875, "fund": 0, "futur": 394, "futurewarn": 1049, "gain": [269, 1008], "galleri": [428, 431, 434, 437, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 489, 490, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 511, 513, 517, 518, 519, 520, 521, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 588, 589, 591, 594, 595, 596, 597, 598, 600, 601, 604, 606, 607, 609, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 624, 625, 626, 629, 630, 632, 634, 635, 637, 638, 639, 640, 641, 642, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 659, 660, 662, 663, 664, 665, 666, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 695, 696, 697, 698, 699, 700, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 716, 719, 720, 724, 725, 726, 734, 736, 739, 741, 742, 744, 745, 748, 749, 752, 753, 755, 756, 757, 759, 760, 762, 764, 768, 785, 786, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 864, 867, 868, 869, 870, 871, 872, 875, 876, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 897, 900, 904, 905, 907, 908, 909, 911, 914, 915, 916, 917, 918, 919, 920, 925, 926, 940, 950, 952, 959, 964, 965, 966, 967, 968, 981, 991], "gamma": [235, 330, 1008], "gammaregressor": 655, "gaussian": [61, 62, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 259, 260, 261, 264, 265, 266, 315, 424, 1007, 1010, 1018, 1020], "gaussian_process": [19, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "gaussianmixtur": 805, "gaussiannb": 849, "gaussianprocessclassifi": 617, "gaussianprocessregressor": 618, "gaussianrandomproject": 903, "gdb": 388, "gen_batch": 958, "gen_even_slic": 959, "gener": [10, 25, 52, 58, 61, 70, 73, 82, 84, 90, 92, 98, 99, 101, 102, 111, 113, 115, 121, 124, 125, 126, 144, 154, 168, 171, 174, 180, 181, 183, 187, 196, 197, 198, 202, 211, 217, 219, 250, 265, 272, 288, 302, 307, 313, 325, 334, 351, 352, 365, 378, 382, 396, 419, 421, 1004, 1018, 1028], "genericunivariateselect": 599, "german": 269, "get": [365, 390, 394, 395], "get_config": 633, "get_data_hom": 506, "get_feature_names_out": 328, "get_param": 384, "get_routing_for_object": 966, "get_scor": 739, "get_scorer_nam": 740, "get_tag": 960, "git": 382, "github": 382, "gitter": 1031, "glm": 25, "glossari": 396, "gmm": [262, 263], "goal": 1028, "good": [382, 387], "govern": [0, 397], "gpc": [175, 176, 177, 178, 424], "gperftool": 388, "gpr": [179, 180, 424], "gprof": 388, "gpu": 394, "gradient": [43, 143, 147, 148, 149, 150, 151, 152, 153, 191, 217, 225, 231, 324, 325, 327, 329, 330, 421, 1004, 1022], "gradientboostingclassifi": [421, 566], "gradientboostingregressor": [421, 567], "gram": 199, "graph": [41, 51, 324, 391, 394, 414, 422], "graphic": [394, 1013], "graphical_lasso": 484, "graphicallasso": 477, "graphicallassocv": 478, "greek": 81, "grid": [256, 273, 275, 283, 286, 997], "grid_to_graph": 592, "gridsearchcv": [106, 163, 279, 807], "ground": [72, 197], "group": [328, 330, 418, 1032], "groupkfold": 808, "groupshufflesplit": 809, "grow": 72, "guid": [385, 1034], "guidelin": [382, 384], "halv": [286, 287, 326, 997], "halvinggridsearchcv": 810, "halvingrandomsearchcv": 811, "ham": 1008, "hamming_loss": 741, "hand": 68, "handl": [41, 193, 998], "handwritten": [93, 238, 379], "harabasz": 414, "hard": 421, "has_fit_paramet": 995, "hash": [156, 391, 422], "hashingvector": [357, 596], "haversine_dist": 771, "hdbscan": [90, 330, 414, 452], "help": [381, 394], "helper": [49, 183, 238, 391], "here": 364, "hessian": 1005, "heterogen": [104, 415], "hierarch": [76, 82, 97, 102, 330, 414], "hierarchi": 414, "higher": 370, "highlight": [187, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 1039, 1042, 1043, 1046, 1047], "hing": 1008, "hinge_loss": 742, "histgradientboost": [326, 331], "histgradientboostingclassifi": [421, 568], "histgradientboostingregressor": [328, 569], "histogram": [143, 153, 325, 327, 329, 420, 421], "histori": [0, 1037], "hmm": 394, "hoc": 289, "hole": 241, "home": 275, "homebrew": 380, "homogen": 414, "homogeneity_completeness_v_measur": 743, "homogeneity_scor": 744, "hot": 147, "hour": 52, "hourli": 189, "hous": [147, 254, 377], "how": [163, 365, 382, 388, 394], "howaboutw": 1032, "html": [246, 384], "huber": 1004, "huberregressor": [200, 656], "hug": 1032, "hyper": [29, 150, 273, 326, 997], "hyperparamet": [90, 179, 180, 276, 283, 292, 624], "hyperplan": [229, 346, 347], "i": [332, 364, 387, 394, 418, 1032], "ic": [191, 1015], "ica": [124, 419], "id3": 1024, "idf": 422, "illustr": [106, 178, 183, 305, 424], "imag": [17, 44, 82, 85, 88, 101, 126, 376, 394, 422], "img_to_graph": 593, "impact": [43, 96, 288, 1054, 1055, 1056, 1057, 1058], "implement": [135, 203, 394, 1008, 1011, 1022, 1023], "import": [144, 145, 151, 172, 192, 193, 249, 292, 320, 324, 413, 421, 1016], "improv": [325, 326, 327, 328, 329, 331, 332, 381, 382, 1042, 1043], "impur": [144, 145, 192, 360, 1016], "imput": [20, 184, 185, 186, 187, 324, 332, 998, 1018, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "includ": 394, "inclus": 394, "incom": 189, "inconsist": 365, "inconsistentversionwarn": 583, "incr_mean_variance_axi": 982, "increment": [127, 371, 419], "incrementalpca": 541, "independ": [123, 419], "index": [414, 962], "indic": 270, "individu": [161, 191, 326, 1015], "induct": 91, "infer": 189, "influenc": [46, 49, 369], "infonea": 1032, "inform": [167, 186, 204, 206, 386, 414, 997, 1004], "infrastructur": 0, "infrequ": [328, 330, 1018], "init": 384, "initi": [94, 96, 263], "inplace_column_scal": 983, "inplace_csr_column_scal": 984, "inplace_csr_row_normalize_l1": 989, "inplace_csr_row_normalize_l2": 990, "inplace_row_scal": 985, "inplace_swap_column": 986, "inplace_swap_row": 987, "input": [41, 369, 384, 410, 414, 1018], "inputtag": 928, "inria": 1032, "inspect": [21, 187, 188, 399, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "instal": [380, 400], "instanc": [365, 371], "instanti": 384, "instead": 269, "instruct": 380, "insur": 235, "integr": 382, "intel": 400, "interact": [43, 191, 329, 421], "interfac": [27, 405], "intern": [322, 413], "internet": 51, "interoper": 1027, "interpol": 218, "interpret": [179, 190, 221, 254, 294, 419, 421], "interv": 150, "introduc": 258, "introduct": 1005, "introductori": 181, "invari": [90, 278], "invers": [115, 416, 1020], "io": 408, "iri": [120, 129, 131, 146, 176, 226, 339, 342, 361, 379, 424], "is_classifi": 440, "is_cluster": 441, "is_multilabel": 969, "is_regressor": 442, "iso": [177, 282], "isol": 1014, "isolationforest": [154, 570], "isomap": [237, 238, 695, 1005], "isoton": [22, 247, 412, 999, 1047, 1048, 1049, 1051, 1053, 1054], "isotonic_regress": 644, "isotonicregress": 642, "issu": [381, 382, 390], "iter": [186, 287, 418], "iterativeimput": [185, 634, 998], "j": 1032, "jaccard": 1008, "jaccard_scor": 745, "job": 394, "joblib": [370, 388, 408], "johnson": [248, 1020], "johnson_lindenstrauss_min_dim": 905, "joint": 211, "k": [78, 80, 83, 92, 93, 94, 96, 99, 102, 117, 298, 320, 357, 414, 418, 1008, 1011, 1018], "k_mean": 465, "kappa": 1008, "kbinsdiscret": [316, 318, 876], "kcachegrind": 388, "kddcup": 377, "kddcup99": 254, "kdtree": [852, 1011], "keep": 998, "kei": 408, "kernel": [19, 43, 44, 128, 174, 179, 180, 182, 183, 187, 194, 195, 249, 250, 299, 300, 308, 326, 341, 344, 349, 351, 419, 420, 424, 625, 1000, 1001, 1006, 1018, 1023], "kernel_approxim": [23, 1049, 1051, 1052, 1053, 1054, 1055], "kernel_metr": 772, "kernel_ridg": [24, 1056], "kernelcenter": 877, "kerneldens": 856, "kernelpca": [128, 542], "kernelridg": 650, "keyword": [327, 1050, 1052], "kfold": 812, "kmean": [95, 99, 325, 453], "kmeans_plusplu": 466, "kneighbors_graph": 864, "kneighborsclassifi": 853, "kneighborsregressor": 854, "kneighborstransform": 855, "knn": [186, 324], "knnimput": 635, "knowledg": 383, "known": [1047, 1048], "kpca": 419, "l": 198, "l1": [53, 202, 208, 210, 233, 352, 423], "l1_min_c": 918, "l2": [221, 352], "label": [41, 72, 282, 334, 335, 336, 377, 378, 414, 418, 421, 1008, 1019, 1021], "label_binar": 895, "label_ranking_average_precision_scor": 746, "label_ranking_loss": 747, "labelbinar": [878, 1019], "labelencod": 879, "labelpropag": 906, "labelspread": 907, "lag": 52, "laplacian": 1006, "laplacian_kernel": 773, "lar": [205, 657, 1004], "larg": 422, "lars_path": 689, "lars_path_gram": 690, "larscv": 658, "lasso": [53, 202, 203, 204, 205, 206, 211, 325, 659, 1004], "lasso_path": 691, "lassocv": 660, "lassolar": 661, "lassolars": 663, "lassolarscv": 662, "latenc": [49, 369], "latent": [54, 117, 419], "latentdirichletalloc": 543, "latest": 400, "layer": [191, 310, 1012], "lda": [70, 131, 419, 1002], "leakag": 365, "learn": [0, 41, 44, 51, 85, 123, 126, 173, 187, 189, 190, 191, 195, 236, 237, 238, 239, 250, 251, 269, 270, 277, 305, 311, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 368, 369, 371, 378, 380, 382, 383, 384, 386, 387, 394, 397, 400, 419, 421, 1003, 1005, 1013, 1021, 1027, 1028, 1030, 1032, 1033, 1035], "learner": [137, 421], "learning_curv": 835, "learningcurvedisplai": 813, "least": [118, 150, 206, 212, 215, 1004], "leav": [360, 418, 1004], "leaveonegroupout": 814, "leaveoneout": 815, "leavepgroupsout": 816, "leavepout": 817, "ledoit": [69, 112, 416], "ledoit_wolf": 485, "ledoit_wolf_shrinkag": 486, "ledoitwolf": [111, 479], "lemma": 1020, "length": [154, 400], "lesson": [189, 190], "level": [179, 180, 370, 414, 421], "liabil": 217, "librari": [369, 370], "libsvm": 376, "likelihood": [111, 197, 198, 278, 1008, 1013], "limit": [147, 174, 369, 400, 408, 422], "lindenstrauss": [248, 1020], "line": [163, 177], "linear": [25, 43, 62, 69, 70, 150, 174, 187, 190, 196, 197, 213, 217, 220, 223, 237, 238, 249, 325, 344, 349, 351, 369, 391, 394, 1002, 1004, 1005, 1006, 1018], "linear_kernel": 774, "linear_model": [25, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "lineardiscriminantanalysi": [329, 556], "linearregress": [219, 664], "linearsvc": [343, 911], "linearsvr": 912, "link": [369, 1008], "linkag": [97, 414], "linnerrud": 379, "linux": [380, 394, 400], "list": [72, 386, 1031], "loa": 179, "load": [44, 46, 55, 85, 93, 120, 143, 145, 147, 151, 163, 172, 192, 210, 235, 238, 245, 249, 257, 276, 284, 285, 294, 298, 320, 321, 345, 348, 356, 357, 358, 375, 376, 387, 394, 422], "load_breast_canc": 507, "load_diabet": 508, "load_digit": 509, "load_fil": 510, "load_iri": 511, "load_linnerud": 512, "load_sample_imag": [513, 514], "load_svmlight_fil": [515, 516], "load_win": 517, "loader": 10, "local": [237, 238, 301, 302, 1005, 1014], "locally_linear_embed": 700, "locallylinearembed": 696, "localoutlierfactor": 857, "lock": [382, 390], "lof": [301, 302], "log": [197, 198, 1008], "log_loss": 748, "logarithm": 1008, "logist": [107, 201, 207, 208, 209, 210, 232, 233, 1004], "logisticregress": [294, 665], "logisticregressioncv": 666, "loo": 418, "look": [52, 250, 351], "loss": [153, 217, 227, 325, 328, 330, 421, 1008, 1056], "lot": 394, "love": 1032, "low": [414, 421, 423], "lower": 370, "lpo": 418, "lsa": 357, "mac": 400, "machin": [173, 187, 189, 190, 191, 313, 340, 390, 1013, 1023], "machinali": 1032, "maco": 380, "macport": 400, "macro": 284, "mahalanobi": 113, "mail": 1031, "main": [47, 217], "maintain": [0, 382, 386, 408], "major": [421, 1047, 1048], "make": [158, 161, 186, 382, 397], "make_biclust": 518, "make_blob": [387, 519], "make_checkerboard": 520, "make_circl": 521, "make_classif": [387, 522], "make_column_selector": 472, "make_column_transform": 473, "make_friedman1": 523, "make_friedman2": 524, "make_friedman3": 525, "make_gaussian_quantil": 526, "make_hastie_10_2": 527, "make_low_rank_matrix": 528, "make_moon": 529, "make_multilabel_classif": 530, "make_pipelin": 872, "make_regress": [387, 531], "make_s_curv": 532, "make_scor": 749, "make_sparse_coded_sign": 533, "make_sparse_spd_matrix": 534, "make_sparse_uncorrel": 535, "make_spd_matrix": 536, "make_swiss_rol": 537, "make_union": 873, "mallow": 414, "manag": [370, 400], "manhattan_dist": 775, "mani": [270, 329, 370, 394, 1056, 1057, 1058], "manifold": [26, 187, 236, 237, 238, 239, 378, 1005, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "manual": [269, 413], "map": [249, 319, 1018], "mar": 1032, "margin": [197, 198, 229, 346, 350], "mark": 998, "markdown": 387, "marker": 382, "market": 51, "match": [216, 1004], "matern": 626, "mathemat": [41, 411, 421, 1000, 1002, 1011, 1015, 1022, 1023, 1024], "matric": [41, 391, 1018], "matrix": [54, 55, 182, 199, 268, 414, 419, 1008], "matter": 190, "matthew": 1008, "matthews_corrcoef": 750, "mat\u00e9rn": [183, 424], "max": [111, 1008], "max_error": 751, "maxabs_scal": 896, "maxabsscal": [315, 880], "maximum": [229, 346, 1013], "md": [697, 1005], "mdi": [145, 192], "mean": [78, 80, 83, 92, 93, 94, 96, 98, 99, 144, 145, 186, 192, 221, 357, 414, 1008, 1018], "mean_absolute_error": 752, "mean_absolute_percentage_error": 753, "mean_gamma_devi": 754, "mean_pinball_loss": 755, "mean_poisson_devi": 756, "mean_shift": 467, "mean_squared_error": 757, "mean_squared_log_error": 758, "mean_tweedie_devi": 759, "mean_variance_axi": 988, "meanshift": [98, 454], "measur": [158, 278, 414, 1008], "media": 1031, "median": [1004, 1008], "median_absolute_error": 760, "member": 381, "memori": [88, 331, 369, 388, 390], "merg": 386, "meson": [390, 1057], "messag": [275, 382], "meta": [41, 157, 251, 292, 326, 410, 421], "metadata": [41, 251, 330, 331, 356, 396, 405, 1056, 1057, 1058], "metadatarequest": 963, "metadatarout": 964, "metaestimatormixin": 434, "method": [97, 108, 117, 136, 174, 187, 237, 239, 263, 291, 293, 396, 408, 414, 1000, 1014, 1015], "methodmap": 965, "metric": [27, 72, 75, 150, 269, 279, 410, 414, 418, 997, 1006, 1008, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "micro": [282, 284], "min_cluster_s": 90, "min_po": 934, "min_sampl": 90, "mincovdet": 480, "mini": [414, 419], "minibatchdictionarylearn": 544, "minibatchkmean": [77, 99, 123, 455], "minibatchnmf": [328, 545], "minibatchsparsepca": [123, 419, 546], "minim": [387, 1024, 1052, 1053], "minimum": [114, 416], "minmax_scal": 897, "minmaxscal": [315, 881], "misc": 1039, "miscellan": [25, 187, 243, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "mislead": 1016, "miss": [153, 184, 185, 186, 187, 324, 330, 331, 421, 998, 1018, 1024], "missingind": 636, "mix": 105, "mixin": 384, "mixtur": [28, 187, 259, 260, 261, 264, 265, 266, 1007, 1047, 1048, 1052, 1053, 1055, 1057], "mlp": 312, "mlpclassifi": [311, 868], "mlpregressor": 869, "mnist": [233, 312], "mode": [117, 369], "model": [25, 27, 29, 43, 46, 50, 52, 92, 109, 117, 124, 130, 143, 144, 145, 147, 148, 151, 154, 171, 172, 174, 179, 187, 190, 191, 192, 195, 196, 197, 202, 204, 206, 211, 217, 220, 235, 245, 250, 254, 255, 259, 261, 265, 266, 267, 269, 274, 275, 277, 282, 288, 294, 302, 307, 313, 320, 325, 327, 331, 349, 351, 356, 369, 384, 394, 395, 397, 408, 409, 418, 997, 1003, 1004, 1007, 1008, 1010, 1012, 1013, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "model_select": [29, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "modifi": 1005, "modul": [1039, 1047, 1048, 1054, 1055, 1056, 1057, 1058], "mona": 179, "monitor": 382, "monoton": [153, 155, 331, 421], "more": [327, 394, 1012], "morgan": 1032, "most": 334, "motor": 217, "mp": 410, "much": 163, "multi": [25, 90, 137, 157, 191, 211, 226, 240, 253, 279, 282, 310, 363, 388, 1004, 1005, 1008, 1012, 1023, 1024], "multiclass": [30, 41, 187, 232, 284, 291, 292, 324, 391, 412, 1008, 1009, 1048, 1051, 1052, 1053], "multicollinear": 193, "multidimension": 237, "multilabel": [27, 121, 252, 294, 378, 391, 1008, 1009], "multilabel_confusion_matrix": 761, "multilabelbinar": [882, 1019], "multinomi": [209, 233, 1004, 1010], "multinomialnb": 850, "multioutput": [31, 187, 293, 1009, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057], "multioutputclassifi": [843, 1009], "multioutputregressor": [844, 1009], "multipl": [108, 256, 279, 365, 389, 418, 997, 998, 1008, 1047, 1048], "multitaskelasticnet": 667, "multitaskelasticnetcv": 668, "multitasklasso": 669, "multitasklassocv": 670, "multivari": [117, 998], "murmurhash3_32": 972, "mutual": [167, 414], "mutual_info_classif": 614, "mutual_info_regress": 615, "mutual_info_scor": 762, "my": 394, "n_featur": 49, "n_job": 394, "naiv": [43, 52, 61, 62, 1010], "naive_bay": [32, 1047, 1049, 1050, 1051, 1052, 1054, 1055], "name": [155, 327, 394, 415], "nan": 998, "nan_euclidean_dist": 776, "nativ": [147, 321, 324, 326, 331], "ndcg_score": 763, "nearest": [102, 187, 295, 296, 297, 298, 303, 306, 307, 324, 998, 1011], "nearestcentroid": 858, "nearestneighbor": 859, "necessari": 387, "need": 394, "neg": [54, 123, 172, 212, 419, 1004], "neighbor": [33, 102, 187, 237, 295, 296, 297, 298, 303, 307, 320, 324, 998, 1005, 1011, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "neighborhood": [303, 304, 305, 1011], "neighborhoodcomponentsanalysi": 860, "nest": [280, 415], "net": [199, 205, 1004], "netbsd": 400, "network": [187, 191, 309, 1012, 1013], "neural": [187, 191, 309, 1012, 1013], "neural_network": [34, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "new": [324, 326, 327, 329, 330, 382, 394, 1026, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "newsgroup": [104, 356, 377], "next": [52, 395], "nightli": 380, "nmf": [123, 328, 419, 547], "nnmf": 419, "nois": [180, 181, 198], "noisi": [126, 181, 221], "non": [43, 54, 123, 150, 212, 217, 221, 237, 280, 332, 344, 351, 419, 1004, 1018], "non_negative_factor": 554, "none": 365, "norm": 419, "normal": [69, 195, 217, 315, 319, 883, 898, 1008, 1018], "normalized_mutual_info_scor": 764, "note": [371, 410, 413, 418], "notfittederror": 584, "novelti": [301, 1014, 1023], "now": [324, 327, 1049], "number": [72, 95, 147, 153, 171, 287, 369, 384, 998], "numer": [190, 332, 370, 384], "numpi": [370, 387], "nusvc": 913, "nusvr": 914, "nystroem": [646, 1000], "oa": [69, 111, 112, 427, 481], "object": [41, 245, 270, 384, 394, 997, 1008, 1036], "observ": 189, "obtain": [394, 418], "off": [269, 289, 1004], "offici": 1058, "okcupid": 1032, "older": 1039, "olivetti": 377, "omp": 1004, "one": [118, 147, 255, 1004, 1008], "oneclasssvm": 915, "onehotencod": [328, 884], "onetoonefeaturemixin": 435, "onevsoneclassifi": [839, 1009], "onevsrestclassifi": [294, 840, 1009], "onli": [214, 234, 1050, 1052], "onlin": [85, 224, 327, 328, 1022], "onnx": 408, "oob": 141, "openml": [44, 321, 324, 376], "openmp": [370, 383], "oper": [41, 284, 285, 381, 391, 424, 1008], "optic": [100, 379, 414, 456], "optim": [29, 41, 388, 997], "optimis": 180, "option": [384, 413], "oracl": 416, "ordin": 147, "ordinalencod": [330, 885], "ordinari": [215, 1004], "org": [376, 386, 1032], "origin": [88, 128, 281, 305, 315], "orthogon": [216, 1004], "orthogonal_mp": 692, "orthogonal_mp_gram": 693, "orthogonalmatchingpursuit": 671, "orthogonalmatchingpursuitcv": 672, "osx": [394, 400], "other": [321, 376, 394, 421, 1027, 1039], "otto": 1032, "our": [93, 270, 273, 289, 382], "out": [47, 149, 371, 390, 418, 997, 1004, 1010], "outdat": 390, "outlier": [25, 48, 200, 234, 244, 254, 301, 302, 315, 1004, 1014, 1018], "outliermixin": 436, "outlin": 1016, "output": [157, 253, 315, 329, 331, 363, 1024], "outputcodeclassifi": [841, 1009], "over": 256, "overfit": 290, "overhead": 369, "oversubscript": 370, "overview": [292, 389, 408, 414, 1014], "ovo": 284, "ovr": 284, "own": [384, 394, 1008], "p": [418, 1032], "packag": [249, 1027, 1051], "pair": 414, "pair_confusion_matrix": 722, "paired_cosine_dist": 777, "paired_dist": 778, "paired_euclidean_dist": 779, "paired_manhattan_dist": 780, "pairwis": [27, 43, 275, 332, 1006], "pairwise_dist": 785, "pairwise_distances_argmin": 786, "pairwise_distances_argmin_min": 787, "pairwise_distances_chunk": 788, "pairwise_kernel": 781, "pairwisekernel": 627, "panda": [329, 387, 394], "parallel": [41, 145, 370, 388, 414, 421, 973, 997], "parallel_backend": 975, "paramet": [29, 41, 46, 111, 150, 273, 288, 326, 345, 352, 382, 384, 395, 396, 415, 421, 997, 1004, 1008, 1023], "parametergrid": 818, "parametersampl": 819, "parametr": 1013, "parametrize_with_check": 950, "pariba": 1032, "paristech": 1032, "pariti": 99, "parser": [329, 376], "part": [85, 423], "parti": [217, 251, 400], "partial": [118, 189, 191, 255, 1015], "partial_depend": 640, "partialdependencedisplai": 639, "partit": 195, "passiv": 1004, "passiveaggressiveclassifi": 673, "passiveaggressiveregressor": 674, "past": 0, "patch": [126, 422], "patchextractor": 590, "path": [154, 205, 210, 222, 364, 400], "pattern": 133, "pca": [44, 93, 107, 120, 123, 124, 127, 128, 129, 130, 131, 320, 331, 332, 419, 548, 1025], "pdp": 191, "peerindex": 1032, "penalti": [208, 228, 352], "peopl": [0, 394, 1039, 1040, 1041, 1042], "per": 357, "percentag": 1008, "percentil": 348, "perceptron": [191, 310, 675, 1004, 1012], "perform": [72, 78, 278, 320, 326, 328, 332, 334, 357, 369, 382, 383, 414, 418], "period": [43, 218], "permiss": 394, "permut": [144, 192, 193, 281, 324, 418, 1016], "permutation_import": 641, "permutation_test_scor": 836, "perplex": 242, "persist": 408, "phimeca": 1032, "pickl": 408, "pictur": 81, "pinbal": 1008, "pipelin": [35, 103, 104, 106, 107, 158, 169, 187, 190, 246, 251, 256, 276, 321, 348, 384, 394, 395, 415, 423, 871, 1025, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "pitfal": [190, 365], "pixel": 145, "pl": 117, "plai": 348, "plan": 394, "plant": 379, "platform": [380, 390, 400], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 82, 84, 85, 92, 98, 99, 101, 102, 111, 115, 117, 120, 121, 124, 125, 138, 143, 146, 151, 154, 158, 159, 160, 161, 163, 171, 186, 191, 197, 198, 202, 209, 210, 211, 221, 222, 226, 238, 245, 249, 254, 255, 257, 265, 271, 272, 277, 279, 282, 284, 294, 302, 313, 321, 324, 326, 327, 334, 342, 343, 348, 349, 356, 361, 389, 1003, 1015, 1036], "plot_tre": 925, "pls1": 117, "pls2": 117, "plscanon": [417, 489], "plsregress": [417, 490], "plssvd": [417, 491], "point": [125, 269, 289, 305, 408], "poisson": [217, 235, 325, 326, 1008], "poissonregressor": 676, "polar": [52, 331], "polici": 382, "polynomi": [43, 195, 197, 198, 218, 349, 1000, 1004, 1006, 1018], "polynomial_kernel": 782, "polynomialcountsketch": [326, 647], "polynomialfeatur": 886, "posit": [123, 327], "possibl": [92, 387], "post": [29, 269, 278, 289, 360, 413], "post1": 1049, "posterior": 183, "power": [118, 217], "power_transform": 899, "powertransform": [315, 887], "pr": 381, "practic": [275, 365, 383, 387, 1005, 1012, 1022, 1023, 1024], "pre": [278, 365, 395], "precis": [282, 1008], "precision_recall_curv": 789, "precision_recall_fscore_support": 790, "precision_scor": 791, "precisionrecalldisplai": [245, 707], "precomput": [132, 199, 324, 419], "predefin": [418, 1008], "predefinedsplit": 820, "predict": [43, 49, 52, 61, 118, 138, 150, 161, 175, 189, 198, 217, 250, 269, 271, 282, 334, 369, 394, 395, 413, 418, 424, 1008, 1019], "predictionerrordisplai": 708, "predictor": 158, "premium": 235, "prepar": [123, 138, 148, 153, 195, 237, 284, 285, 320, 345], "preprocess": [36, 151, 158, 187, 190, 191, 254, 256, 314, 358, 365, 394, 1018, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "preprocessor": 191, "preserv": 390, "preval": 278, "princip": [55, 118, 419, 1025], "prior": [53, 183, 260], "privat": 1056, "probabilist": [130, 175, 419, 424], "probabl": [61, 62, 63, 66, 160, 177, 412, 421, 1023], "problem": [190, 269, 419, 1023, 1024], "process": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 365, 397, 424, 1007], "process_rout": 967, "processor": 395, "product": [183, 235, 390, 394, 408, 424, 628], "profil": 388, "project": [0, 118, 128, 131, 248, 384, 394, 1020, 1025, 1027], "pronounc": 394, "propag": [51, 73, 334, 335, 336, 414, 1021], "proper": [52, 179], "properti": 396, "propos": 397, "provid": 387, "prune": [324, 360, 1024], "public": 1049, "publica": 1032, "pull": [382, 386, 390, 394], "pure": 235, "purpos": [221, 358, 1028], "pursuit": [216, 1004], "pypi": [394, 1058], "pytest": 390, "python": [249, 370, 388, 1026, 1027], "pytorch": 410, "qda": [70, 1002], "quadrat": [70, 183, 424, 1002], "quadraticdiscriminantanalysi": 557, "qualit": [43, 52], "qualiti": [357, 1008], "quantifi": [357, 1008], "quantil": [52, 150, 153, 219, 327, 328, 1004], "quantile_transform": 900, "quantileregressor": [219, 677], "quantiletransform": [315, 888], "quantiz": [83, 88], "question": [394, 1031], "r2_score": 792, "r_regress": 616, "radial": [183, 424, 1000], "radius_neighbors_graph": 865, "radiusneighborsclassifi": 861, "radiusneighborsregressor": 862, "radiusneighborstransform": 863, "rand": 414, "rand_scor": 793, "random": [41, 55, 123, 141, 143, 156, 157, 192, 193, 248, 257, 281, 283, 331, 365, 384, 391, 418, 419, 421, 997, 1004, 1020, 1025], "random_project": [37, 1053], "random_st": 394, "randomforestclassifi": 571, "randomforestregressor": 572, "randomized_range_find": 954, "randomized_svd": 955, "randomizedsearchcv": 821, "randomli": 121, "randomst": 365, "randomtreesembed": 573, "rang": 1018, "rangespan": 1032, "rank": [27, 217, 1008], "ransac": [220, 1004], "ransacregressor": 678, "rate": 421, "ratio": [278, 1008], "ration": [183, 424], "rationalquadrat": 630, "rbf": [249, 344, 345, 349, 424, 629, 1006, 1023], "rbf_kernel": 783, "rbfsampler": 648, "rcv1": 377, "reachabl": 414, "read": 382, "real": [42, 48, 109, 187, 377], "recal": [282, 1008], "recall_scor": 794, "receiv": [284, 285, 1008], "recent": 1, "recogn": 68, "recognit": [45, 377, 379], "recommend": [365, 1027], "reconstruct": [44, 53, 126], "reconstruct_from_patches_2d": 594, "recov": 197, "recurs": [170, 171, 423], "redirect": 55, "reduc": [93, 369], "reduct": [106, 237, 241, 256, 304, 320, 357, 1002, 1011, 1025], "refer": [2, 50, 62, 64, 114, 126, 140, 195, 202, 292, 308, 386, 424, 998], "refit": [269, 273], "regard": [269, 413], "region": [81, 275], "register_parallel_backend": 977, "regress": [25, 27, 43, 52, 107, 109, 117, 118, 138, 150, 151, 161, 174, 179, 180, 181, 182, 197, 198, 201, 206, 208, 209, 210, 213, 215, 217, 219, 232, 234, 235, 247, 250, 307, 351, 362, 363, 378, 415, 424, 999, 1001, 1004, 1008, 1009, 1011, 1012, 1022, 1023, 1024], "regressor": [25, 49, 138, 150, 197, 221, 322, 324, 327, 421], "regressorchain": [845, 1009], "regressormixin": 437, "regressortag": 929, "regular": [78, 111, 152, 190, 210, 221, 222, 288, 310, 352, 1004, 1012], "reinforc": 394, "relat": [43, 47, 1016, 1027, 1046], "releas": [187, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 386, 400, 1037], "relev": [113, 202, 1004], "remark": [43, 92, 241, 248], "remot": 390, "remov": [394, 423, 1018, 1039], "repeat": [365, 415, 418], "repeatedkfold": 822, "repeatedstratifiedkfold": 823, "replac": 186, "repli": 390, "replic": 408, "report": [382, 387, 1008], "repositori": 376, "represent": [120, 191, 246, 325, 369, 384, 422], "reproduc": [365, 387], "request": [382, 386, 390, 394], "resampl": 978, "rescal": 320, "reshap": 369, "resourc": [287, 370, 382, 1026, 1031], "respect": 278, "respons": [117, 397], "rest": [209, 284], "restart": 388, "restrict": [313, 1013], "result": [46, 47, 58, 64, 73, 82, 84, 85, 92, 93, 98, 99, 102, 111, 113, 115, 124, 125, 138, 143, 158, 161, 186, 195, 202, 222, 250, 254, 279, 294, 302, 321, 351, 357, 365, 997], "retriev": [51, 324], "return": 410, "reuter": 47, "review": [381, 382, 390], "rfe": 600, "rfecv": 601, "rich": [246, 325], "ridg": [174, 198, 200, 215, 221, 222, 250, 322, 679, 1001, 1004], "ridge_regress": 694, "ridgeclassifi": 681, "ridgeclassifiercv": 682, "ridgecv": 680, "right": 402, "roadmap": 1028, "robust": [25, 90, 113, 114, 197, 220, 223, 365, 416, 997, 1004], "robust_scal": 901, "robustscal": [315, 889], "roc": [257, 272, 284, 285, 324, 1008], "roc_auc_scor": 795, "roc_curv": 796, "roccurvedisplai": [245, 709], "role": 397, "roll": [241, 384], "root_mean_squared_error": 797, "root_mean_squared_log_error": 798, "rotat": 133, "rout": [41, 251, 330, 331, 396, 405, 1056, 1057, 1058], "routin": [47, 370, 391], "rule": 1008, "run": [46, 93, 279], "runtim": [331, 380], "r\u00b2": 1008, "sa": 254, "safe_mask": 979, "safe_sparse_dot": 956, "safe_sqr": 980, "sampl": [10, 41, 58, 73, 90, 98, 111, 124, 125, 168, 199, 230, 250, 276, 288, 307, 325, 351, 354, 376, 391, 396, 421, 1004], "sample_without_replac": 976, "saniti": 390, "save": 394, "scalabl": [195, 277, 325], "scale": [90, 190, 237, 240, 320, 352, 371, 902, 1005, 1014, 1018, 1025], "scaler": 315, "scatter": [117, 120], "scenario": 1004, "scientif": 1026, "scikit": [0, 41, 251, 270, 324, 325, 326, 327, 328, 329, 330, 331, 332, 368, 369, 380, 383, 384, 386, 387, 394, 397, 400, 1027, 1028, 1032, 1035], "scipi": [370, 1056], "score": [55, 117, 143, 163, 171, 186, 197, 265, 274, 281, 282, 348, 405, 414, 418, 1003, 1008, 1023], "script": 387, "search": [256, 273, 275, 283, 286, 292, 395, 997], "second": [48, 72], "secur": [408, 1057], "segment": [81, 101], "select": [25, 27, 89, 95, 106, 130, 163, 166, 168, 171, 172, 187, 204, 206, 211, 265, 267, 348, 394, 405, 409, 418, 423, 997, 1004, 1045], "selectfdr": 602, "selectfpr": 603, "selectfrommodel": [423, 604], "selectfw": 605, "selectkbest": 606, "selectormixin": 608, "selectpercentil": 607, "self": [326, 337, 1021], "selftrainingclassifi": 908, "semant": 419, "semi": [187, 333, 334, 338, 339, 1021], "semi_supervis": [38, 1049, 1050, 1051, 1055, 1058], "sen": [234, 1004], "sens": 53, "sensit": 269, "separ": [124, 229, 346, 347], "sequenc": [182, 394], "sequenti": [172, 423], "sequentialfeatureselector": [326, 609], "seri": [52, 211, 418], "serv": 408, "set": [48, 109, 111, 129, 158, 186, 221, 269, 282, 332, 345, 360, 394, 413, 418, 1004], "set_config": 909, "set_output": [258, 329, 331, 384], "set_param": 384, "setuptool": 1058, "sever": [235, 239], "sgd": [226, 227, 228, 229, 230, 1004, 1022], "sgdclassifi": 683, "sgdoneclasssvm": 684, "sgdregressor": 685, "shape": 242, "share": [43, 52, 191], "shift": [98, 414], "should": 394, "show": [163, 284], "show_vers": 910, "shrinkag": [111, 416, 421, 1002], "shrunk": 416, "shrunk_covari": 487, "shrunkcovari": 482, "shrunken": 1011, "shuffl": [418, 981], "shufflesplit": 824, "sigmoid": [349, 412, 1006], "sigmoid_kernel": 784, "signal": [202, 419], "signific": 281, "silhouett": [95, 414], "silhouette_sampl": 799, "silhouette_scor": 800, "similar": [182, 1006, 1008], "simpl": [135, 174, 251, 300, 388], "simpleimput": [332, 637], "simul": 189, "sine": [183, 266, 424], "singl": [140, 158, 235, 245, 378, 414, 998], "single_source_shortest_path_length": 961, "singular": [55, 419], "sinusoid": 198, "size": 421, "sketch": 1000, "skew": 1000, "skewedchi2sampl": 649, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "sklearn_assume_finit": 370, "sklearn_build_enable_debug_symbol": 370, "sklearn_enable_debug_cython_direct": 370, "sklearn_pairwise_dist_chunk_s": 370, "sklearn_run_float32_test": 370, "sklearn_se": 370, "sklearn_skip_network_test": 370, "sklearn_tests_global_random_se": 370, "sklearn_warnings_as_error": 370, "sklearn_working_memori": 370, "skop": 408, "slep": 397, "smacof": 701, "small": 387, "sne": [242, 1005], "so": 394, "social": 1031, "soft": 421, "solido": 1032, "solut": 92, "solver": [224, 419, 1004], "some": 348, "someth": 387, "sometim": 394, "sort_graph_by_row_valu": 866, "sourc": [104, 124, 380], "space": [51, 128, 415, 997, 1005], "spars": [41, 115, 123, 132, 190, 202, 203, 232, 324, 331, 356, 357, 391, 416, 419, 423, 1018, 1020, 1022, 1056], "sparse_encod": 555, "sparsecod": 549, "sparsefunc": 1048, "sparsepca": [419, 550], "sparserandomproject": 904, "sparsiti": [208, 214, 422], "spawn": 370, "speci": [50, 308, 377], "special": 358, "specif": [284, 380, 384, 997, 1027, 1028], "specifi": [155, 394, 997], "spectral": [57, 58, 59, 101, 237, 411, 414, 1005], "spectral_clust": 468, "spectral_embed": 702, "spectralbiclust": [58, 457], "spectralclust": 458, "spectralcoclust": 459, "spectralembed": 698, "speed": [49, 388], "sphere": 239, "sphinx": 382, "spline": [43, 218, 327, 1018], "splinetransform": 890, "split": [147, 326, 365, 418], "splitter": [29, 365], "sponsor": 0, "spotifi": 1032, "sprint": 0, "squar": [118, 150, 183, 212, 215, 221, 424, 1000, 1004, 1006, 1008], "stabil": 325, "stabl": 327, "stack": [158, 324, 421], "stackingclassifi": 574, "stackingregressor": 575, "stall": 382, "standard": [390, 1018], "standardscal": [315, 891], "start": 395, "statement": 1028, "statist": [275, 1027], "statlog": 269, "statu": 405, "std": [163, 197], "step": [43, 256, 386, 395, 415], "stochast": [225, 231, 237, 311, 1004, 1005, 1013, 1022], "stock": 51, "stop": [148, 153, 225, 422, 1022], "strategi": [88, 273, 292, 311, 318, 330, 332, 371, 414, 1008], "stratif": 418, "stratifi": 418, "stratifiedgroupkfold": [418, 825], "stratifiedkfold": 826, "stratifiedshufflesplit": 827, "stream": 371, "string": 394, "strip": 356, "strong": 200, "strongli": 1016, "structur": [51, 74, 82, 102, 182, 336, 364], "studi": 254, "submit": 382, "subpackag": 1028, "subsampl": 421, "subscript": 332, "subtleti": 365, "success": [286, 287, 326, 997], "sum": 631, "summar": 408, "summari": [62, 148, 206, 357, 358, 408, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "supervis": [187, 333, 334, 338, 339, 1012, 1021, 1030], "support": [0, 62, 147, 153, 187, 211, 321, 324, 325, 326, 327, 329, 330, 331, 340, 343, 351, 394, 400, 405, 410, 412, 421, 1023, 1024, 1031, 1056, 1057, 1058], "surfac": [146, 249, 361], "svc": [257, 349, 352, 916, 1023], "svd": [55, 123, 419], "svm": [39, 45, 165, 168, 169, 195, 231, 249, 327, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 353, 354, 1004, 1014, 1022, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "svmlight": 376, "svr": [250, 351, 917, 1023], "swiss": 241, "switch": 370, "symmetr": 117, "synthet": [61, 109, 197, 202, 272, 322, 387], "system": 380, "t": [237, 242, 1005], "tabl": 394, "tag": [380, 382, 384, 930], "take": 275, "takeawai": 217, "talk": 1026, "tangent": 1005, "target": [41, 109, 181, 235, 321, 322, 394, 396, 415, 1009, 1018, 1019], "targetencod": [330, 892], "targettag": 931, "task": [25, 211, 1004, 1027], "team": [0, 381], "technic": 397, "techniqu": 238, "templat": 384, "tensor": 1000, "term": [357, 396, 422], "test": [44, 111, 167, 278, 281, 288, 356, 360, 380, 382, 384, 390, 391, 418], "text": [17, 47, 187, 246, 276, 338, 355, 356, 357, 358, 377, 422], "tf": 422, "tfidftransform": 597, "tfidfvector": [357, 358, 598], "than": 394, "theil": [234, 1004], "theilsenregressor": 686, "them": [126, 381], "theoret": 248, "thi": [221, 1028], "third": [217, 251, 400], "thread": 370, "threshold": [269, 289, 332, 337, 413], "throughput": [49, 369], "tie": 353, "time": [43, 52, 143, 211, 249, 250, 356, 418, 1029], "timeseriessplit": 828, "tip": [369, 383, 390, 997, 1005, 1012, 1022, 1023, 1024], "togeth": [255, 284], "toi": [79, 97, 244, 379], "toler": 172, "tomographi": 53, "too": 370, "tool": [391, 394, 410], "top": [357, 1008], "top_k_accuracy_scor": 801, "topic": 54, "total": [156, 360, 421], "tough": 381, "track": [390, 415], "tracker": [382, 1031], "trade": 1004, "tradeoff": [272, 1008], "train": [137, 138, 148, 151, 154, 161, 171, 221, 245, 250, 254, 255, 257, 265, 288, 292, 313, 321, 322, 326, 337, 345, 349, 356, 360, 361, 364, 408, 418, 1011, 1021], "train_test_split": 837, "transform": [104, 105, 106, 109, 117, 142, 156, 256, 326, 327, 328, 374, 394, 395, 415, 1011, 1018, 1019, 1020], "transformedtargetregressor": 471, "transformermixin": 438, "transformertag": 932, "translat": 1027, "tree": [40, 137, 138, 142, 144, 145, 146, 153, 156, 187, 192, 217, 324, 329, 330, 331, 359, 360, 361, 362, 363, 364, 394, 421, 423, 1011, 1016, 1024, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "triag": 381, "trick": [369, 388, 390, 422], "trigonometr": 43, "troubleshoot": 400, "true": [197, 198], "truncat": 419, "truncatedsvd": 551, "trust": 163, "trustworthi": 703, "truth": [72, 197], "tsne": [295, 699], "tune": [29, 150, 269, 273, 276, 289, 326, 332, 413, 997], "tunedthresholdclassifiercv": [332, 829], "tutori": [162, 187, 1026], "tweedi": [235, 1008], "tweedieregressor": [235, 687], "two": [101, 139, 203, 255, 275], "type": [105, 260, 383, 384, 396, 410, 414], "type_of_target": 970, "typic": 381, "t\u00e9l\u00e9com": 1032, "u": 0, "ubuntu": 400, "uci": 292, "unbalanc": [347, 1023], "uncertain": 334, "uncertainti": 52, "unclaim": 382, "undefinedmetricwarn": 585, "under": [182, 394, 1034, 1055], "underfit": 290, "understand": 364, "unfold": 390, "uniform": [315, 1018], "unique_label": 971, "univari": [89, 117, 168, 348, 423, 998], "univers": 384, "unlabel": 1021, "unless": 387, "unstructur": 102, "unsupervis": [1011, 1013, 1025, 1033], "unweight": 405, "up": 1014, "updat": [386, 1049], "us": [44, 45, 51, 55, 83, 123, 124, 126, 155, 156, 158, 172, 179, 220, 231, 233, 275, 279, 284, 294, 316, 351, 356, 357, 364, 365, 371, 383, 387, 388, 390, 394, 418, 419, 422, 423, 1002, 1004, 1005, 1008, 1012, 1022, 1023, 1024, 1032, 1049], "usabl": 394, "usag": [388, 394, 405, 410, 412, 415, 421, 422, 1004], "user": [1031, 1034], "util": [41, 375, 387, 391, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "v": [89, 102, 111, 112, 114, 118, 128, 171, 191, 192, 200, 209, 235, 278, 284, 290, 360, 414, 421, 998], "v_measure_scor": 802, "valgrind": [388, 390], "valid": [29, 41, 43, 163, 171, 206, 248, 269, 270, 271, 273, 274, 278, 280, 285, 348, 365, 369, 384, 391, 413, 418, 997, 1003, 1004], "validate_data": 996, "validation_curv": 838, "validationcurvedisplai": [330, 830], "valu": [153, 172, 184, 185, 186, 187, 242, 251, 324, 330, 331, 364, 382, 410, 419, 421, 998, 1008, 1016, 1018, 1024], "vanilla": [269, 289], "vari": [72, 310, 337, 414], "variabl": [25, 117, 189, 190, 370, 394], "varianc": [140, 215, 423, 1008, 1018], "variancethreshold": 610, "variant": 185, "variat": [260, 1007], "variou": [49, 87, 224, 242], "vector": [55, 62, 88, 187, 340, 343, 351, 356, 358, 422, 1023], "version": [328, 376, 380, 382, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "versu": [140, 231, 280, 339, 369], "via": [44, 52, 88, 204, 206, 235, 421, 1000], "video": [382, 1026], "visual": [5, 29, 51, 93, 133, 148, 245, 250, 257, 270, 312, 325, 345, 414, 415, 1008, 1036], "vote": [161, 421], "votingclassifi": [159, 160, 576], "votingregressor": 577, "wage": [189, 190], "wai": [191, 382, 394], "ward": [82, 102, 414], "ward_tre": 469, "warm": 388, "warm_start": 1012, "warn": 391, "we": 102, "weak": [137, 421], "websit": [386, 1049], "weight": [41, 137, 197, 199, 230, 312, 325, 354, 405, 421, 422], "weighted_mod": 957, "what": [364, 394], "when": 269, "which": 1004, "whitekernel": 632, "who": 1032, "why": [394, 421], "wikipedia": 55, "wild": 377, "window": [380, 400], "wine": 379, "winpython": 400, "wisconsin": 379, "within": 106, "without": [74, 303, 356], "wolf": [69, 112, 416], "word": [356, 422], "work": [41, 187, 355, 369, 381, 394], "workflow": [381, 408], "world": [42, 109, 187, 377], "wrap": 294, "written": 68, "wrong": [190, 394], "x": 234, "x86_64": 390, "xor": [178, 349, 424], "y": [234, 394, 1019, 1021], "yeast": 292, "yep": 388, "yhat": 1032, "you": [163, 394], "your": [384, 387, 1008], "zero": 1008, "zero_one_loss": 803, "zopa": 1032}})