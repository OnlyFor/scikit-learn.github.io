Search.setIndex({"alltitles": {"(Generalized) linear models": [[215, "generalized-linear-models"]], "1-way partial dependence with different models": [[189, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[102, "newsgroups-dataset"]], "2D interaction plots": [[189, "d-interaction-plots"]], "3D representation": [[189, "d-representation"]], "A constant prediction baseline": [[215, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[91, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[96, null]], "A more flexible plotting API": [[325, "a-more-flexible-plotting-api"]], "A note on shuffling": [[416, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[386, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[379, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1002, "aic-and-bic-criteria"]], "API Interface": [[403, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1044, "api-changes"]], "API changes summary": [[1037, "api-changes-summary"], [1037, "id4"], [1037, "id7"], [1037, "id10"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1042, "api-changes-summary"], [1043, "api-changes-summary"], [1043, "id6"], [1044, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[382, "apis-of-scikit-learn-objects"]], "ARDRegression": [[649, null]], "ARFF parser": [[374, "arff-parser"]], "AWeber": [[1030, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[178, null]], "Ablation study": [[252, "ablation-study"]], "About the project": [[392, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[413, "access-pipeline-steps"]], "Access to nested parameters": [[413, "access-to-nested-parameters"]], "Accuracy of the Model": [[190, "accuracy-of-the-model"]], "Accuracy score": [[1006, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[358, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[419, "adaboost"]], "AdaBoostClassifier": [[558, null]], "AdaBoostRegressor": [[559, null]], "Add support for monotonic constraints in tree-based models": [[329, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[412, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[998, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[643, null]], "Addressing the problem with a business metric": [[267, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[253, null]], "Advantages:": [[412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null]], "Affinity Propagation": [[412, "affinity-propagation"]], "AffinityPropagation": [[444, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[445, null]], "Aggressive elimination of candidates": [[995, "aggressive-elimination-of-candidates"]], "Algorithms": [[1010, "algorithms"]], "Alpine Linux": [[398, "alpine-linux"]], "Alternatives to brute force parameter search": [[995, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[252, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[133, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[92, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[398, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[135, "analysis"]], "Analysis of a bag-of-words document classifier": [[354, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[148, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[189, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[995, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[420, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[293, null]], "Arch Linux": [[398, "arch-linux"]], "Architectural / general goals": [[1026, "architectural-general-goals"]], "Array API support (experimental)": [[408, null]], "Artwork": [[0, "artwork"]], "Attributes": [[394, "attributes"]], "Authors": [[1037, "authors"], [1037, "id20"]], "Automated Contributions Policy": [[380, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[200, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1002, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[393, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1034, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1033, null]], "BIRCH": [[412, "birch"]], "BNP Paribas Cardif": [[1030, "id29"]], "Bagging meta-estimator": [[419, "bagging-meta-estimator"]], "BaggingClassifier": [[560, null]], "BaggingRegressor": [[561, null]], "Balance model complexity and cross-validated score": [[272, null]], "Balanced accuracy score": [[1006, "balanced-accuracy-score"]], "Ball Tree": [[1009, "ball-tree"]], "BallTree": [[849, null]], "BaseEstimator": [[426, null]], "BaseEstimator and mixins:": [[382, null]], "Basic kernels": [[422, "basic-kernels"]], "Basic shrinkage": [[414, "basic-shrinkage"]], "Bayesian Regression": [[1002, "bayesian-regression"]], "Bayesian Ridge Regression": [[1002, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[195, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[802, null]], "BayesianRidge": [[650, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[354, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1008, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1011, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[844, null]], "BernoulliRBM": [[865, null]], "Bestofmedia Group": [[1030, "id13"]], "BiclusterMixin": [[427, null]], "Biclustering": [[56, null], [185, "biclustering"], [376, "biclustering"], [409, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[409, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[189, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[872, null]], "Binary Case": [[1002, "binary-case"]], "Binary case": [[1006, "binary-case"]], "Binary classification": [[1006, "binary-classification"]], "Birch": [[446, null]], "Birchbox": [[1030, "id12"]], "Bisecting K-Means": [[412, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[447, null]], "BisectingKMeans: divide and cluster": [[326, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[122, null]], "Boil down your script to something as small as possible": [[385, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[161, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1030, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[377, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1006, "brier-score-loss"]], "Brute Force": [[1009, "brute-force"]], "Bug Tracker": [[1029, "bug-tracker"]], "Bug fixes": [[1040, "bug-fixes"], [1040, "id1"], [1040, "id3"], [1041, "bug-fixes"], [1041, "id3"], [1042, "bug-fixes"], [1042, "id3"], [1043, "bug-fixes"], [1043, "id5"], [1044, "bug-fixes"], [1044, "id4"]], "Bug triaging and issue curation": [[379, null]], "Build a pipeline": [[413, "build-a-pipeline"]], "Build dependencies": [[378, "build-dependencies"]], "Build the dataset": [[177, "build-the-dataset"]], "Building a specific version from a tag": [[378, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[388, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[378, "building-from-source"]], "Building the documentation": [[380, "building-the-documentation"]], "Bulk versus Atomic mode": [[367, "bulk-versus-atomic-mode"]], "Bunch": [[924, null]], "CCA": [[486, null]], "CCA (PLS mode B with symmetric deflation)": [[115, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[363, "cv-splitters"], [363, "id3"]], "Caching nearest neighbors": [[295, null]], "Caching transformers within a Pipeline": [[104, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[413, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[441, null]], "Calibrating a classifier": [[410, "calibrating-a-classifier"]], "Calibration": [[60, null], [185, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [410, "calibration-curves"]], "Calibration of the confidence interval": [[148, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[442, null]], "California Housing dataset": [[375, "california-housing-dataset"]], "Calinski-Harabasz Index": [[412, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[115, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[415, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[252, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[145, null]], "Categorical Features Support": [[419, "categorical-features-support"]], "Categorical Naive Bayes": [[1008, "categorical-naive-bayes"]], "CategoricalNB": [[845, null]], "Centering kernel matrices": [[1016, "centering-kernel-matrices"]], "Chain of binary classifiers": [[292, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[380, "change-the-default-value-of-a-parameter"]], "Change.org": [[1030, "id14"]], "Changed displays": [[1053, "changed-displays"]], "Changed models": [[1044, "changed-models"], [1045, "changed-models"], [1045, "id9"], [1045, "id22"], [1046, "changed-models"], [1046, "id6"], [1047, "changed-models"], [1048, "changed-models"], [1048, "id3"], [1049, "changed-models"], [1050, "changed-models"], [1051, "changed-models"], [1051, "id6"], [1052, "changed-models"], [1052, "id7"], [1053, "changed-models"], [1053, "id4"], [1054, "changed-models"], [1054, "id1"], [1055, "changed-models"]], "Changelog": [[1037, "changelog"], [1037, "id1"], [1037, "id3"], [1037, "id6"], [1037, "id9"], [1037, "id12"], [1037, "id14"], [1037, "id16"], [1037, "id18"], [1037, "id19"], [1038, "changelog"], [1038, "id2"], [1039, "changelog"], [1040, "changelog"], [1041, "changelog"], [1041, "id2"], [1042, "changelog"], [1042, "id2"], [1043, "changelog"], [1043, "id1"], [1043, "id3"], [1044, "changelog"], [1044, "id2"], [1045, "changelog"], [1045, "id1"], [1045, "id5"], [1045, "id10"], [1045, "id23"], [1046, "changelog"], [1046, "id1"], [1046, "id2"], [1046, "id7"], [1047, "changelog"], [1047, "id1"], [1047, "id4"], [1048, "changelog"], [1048, "id1"], [1048, "id4"], [1049, "changelog"], [1049, "id1"], [1049, "id4"], [1050, "changelog"], [1050, "id6"], [1051, "changelog"], [1051, "id1"], [1051, "id7"], [1052, "changelog"], [1052, "id1"], [1052, "id9"], [1053, "changelog"], [1053, "id1"], [1053, "id6"], [1054, "changelog"], [1054, "id3"], [1055, "changelog"], [1055, "id2"], [1055, "id6"], [1056, "changelog"]], "Changes impacting all modules": [[1052, "changes-impacting-all-modules"], [1052, "id8"], [1053, "changes-impacting-all-modules"], [1053, "id5"], [1054, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1054, "changes-impacting-many-modules"], [1055, "changes-impacting-many-modules"], [1055, "id1"], [1055, "id5"], [1056, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1045, "changes-to-estimator-checks"], [1046, "changes-to-estimator-checks"], [1047, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[388, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[322, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[188, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1004, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[417, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[400, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[394, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[276, null]], "Class likelihood ratios": [[1006, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[428, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [180, "classification"], [185, "classification"], [1002, "classification"], [1009, "id4"], [1010, "classification"], [1020, "classification"], [1021, "classification"], [1022, "classification"]], "Classification and ROC analysis": [[283, "classification-and-roc-analysis"]], "Classification criteria": [[1022, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1006, "classification-metrics"]], "Classification of text documents using sparse features": [[354, null]], "Classification pipeline": [[102, "classification-pipeline"]], "Classification report": [[1006, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[840, null], [1007, "classifierchain"]], "ClassifierMixin": [[429, null]], "ClassifierTags": [[925, null]], "Clear definition of the public API": [[1047, "clear-definition-of-the-public-api"]], "Cloning": [[382, "cloning"]], "Closing issues: a tough call": [[379, null]], "Cluster centers - MiniBatchKMeans": [[121, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[430, null]], "Clustering": [[71, null], [185, "clustering"], [412, null]], "Clustering evaluation summary": [[355, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[417, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1006, "clustering-metrics"]], "Clustering performance evaluation": [[412, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[355, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[355, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1041, "code-contributors"], [1042, "code-contributors"], [1043, "code-contributors"], [1043, "id7"]], "Code Review Guidelines": [[380, "code-review-guidelines"]], "Code and Documentation Contributors": [[1044, "code-and-documentation-contributors"], [1044, "id10"], [1045, "code-and-documentation-contributors"], [1045, "id8"], [1045, "id21"], [1045, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[382, "coding-guidelines"]], "Coefficients comparison": [[286, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1006, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[102, null]], "Column Transformer with Mixed Types": [[103, null]], "ColumnTransformer": [[468, null]], "ColumnTransformer for heterogeneous data": [[413, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[330, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[156, null]], "Combining the display objects into a single plot": [[243, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[380, "commit-message-markers"]], "Common Vectorizer usage": [[420, "common-vectorizer-usage"]], "Common cases: predefined values": [[1006, "common-cases-predefined-values"]], "Common estimator checks": [[408, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[363, null]], "Common pitfalls and subtleties": [[363, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[188, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[244, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[309, null]], "Compare cross decomposition methods": [[115, null]], "Compare different approaches to setting the regularization parameter": [[109, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[313, null]], "Compare times of SVR and Kernel Ridge Regression": [[248, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[166, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[195, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[301, null]], "Comparing QuantileRegressor and LinearRegression": [[217, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[141, null]], "Comparing Target Encoder with Other Encoders": [[319, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[242, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[95, null]], "Comparing random forests and the multi-output meta estimator": [[155, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[281, null]], "Comparing the results": [[193, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[201, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[201, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[273, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[273, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[222, null]], "Comparison between grid search and successive halving": [[284, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[165, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[129, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[235, null]], "Comparison of kernel ridge and Gaussian process regression": [[172, null]], "Comparison of kernel ridge regression and SVR": [[248, null]], "Comparison of results": [[111, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[97, null]], "Comparison with special purpose text vectorizers": [[356, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1002, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1008, "complement-naive-bayes"]], "ComplementNB": [[846, null]], "Complexity": [[1009, "complexity"], [1010, "complexity"], [1020, "complexity"], [1021, "complexity"], [1022, "complexity"]], "Complexity analysis": [[275, "complexity-analysis"]], "Composite estimators and parameter spaces": [[995, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[617, null]], "Compression via vector quantization": [[86, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1013, "computation-methods"]], "Computation times": [[1027, null]], "Computational Performance": [[367, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[82, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [100, "compute-clustering"], [100, "id1"]], "Compute clustering with KMeans": [[97, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[96, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[97, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[220, "compute-paths"]], "Compute regularization path": [[208, "compute-regularization-path"]], "Compute score and computation times": [[141, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[109, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[416, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[366, null]], "Concatenating multiple feature extraction methods": [[106, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[258, null]], "Concluding remarks": [[43, "concluding-remarks"], [239, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [204, "conclusion"], [290, "conclusion"], [296, "conclusion"], [320, "conclusion"], [347, "conclusion"]], "Conclusions": [[200, "conclusions"]], "Configuration switches": [[368, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[367, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[266, null], [1006, "confusion-matrix"]], "ConfusionMatrixDisplay": [[702, null]], "Connectivity graph of an image": [[420, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[267, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[618, null]], "Construct the kernel-based regression models": [[248, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[249, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[249, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[412, "contingency-matrix"]], "Continuous Integration (CI)": [[380, "continuous-integration-ci"]], "Contributing": [[380, null], [392, "contributing"]], "Contributing code": [[380, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[395, "contributors"]], "Controlling randomness": [[363, "controlling-randomness"]], "Controlling the tree size": [[419, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[135, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[576, null]], "Core Contributors": [[395, "core-contributors"]], "Cosine similarity": [[1004, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[267, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[267, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[593, null]], "Covariance estimation": [[108, null], [185, "covariance-estimation"], [414, null]], "Coverage error": [[1006, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[385, null]], "Create ConfusionMatrixDisplay": [[243, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[243, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[243, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[320, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[280, "create-multi-label-data-fit-and-predict"]], "Create the data": [[128, "create-the-data"]], "Create the pipeline": [[346, "create-the-pipeline"]], "Creating a dataset": [[347, "creating-a-dataset"]], "Creating a non-noisy data set": [[219, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[135, "creating-the-dataset"]], "Creating transformers": [[102, "creating-transformers"]], "Cross decomposition": [[114, null], [185, "cross-decomposition"], [415, null]], "Cross validation and model selection": [[416, "cross-validation-and-model-selection"]], "Cross validation iterators": [[416, "cross-validation-iterators"]], "Cross validation of time series data": [[416, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[416, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[416, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[416, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[276, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[161, null]], "Cross-validation: evaluating estimator performance": [[416, null]], "Curve Fitting with Bayesian Ridge Regression": [[196, null]], "Custom Kernels": [[1021, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[330, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[271, null]], "Custom transformers": [[1016, "custom-transformers"]], "Customizing the vectorizer classes": [[420, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[381, null]], "DBSCAN": [[412, "dbscan"], [448, null]], "DO NOT report your data unless it is extremely necessary": [[385, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[190, "data-loading-and-feature-engineering"]], "Data Preparation": [[146, "data-preparation"]], "Data Publica": [[1030, "id21"]], "Data and sample properties": [[394, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [82, "data-generation"], [90, "data-generation"], [152, "data-generation"], [169, "data-generation"], [178, "data-generation"], [263, "data-generation"], [332, "data-generation"], [350, "data-generation"]], "Data generation and model fitting": [[142, "data-generation-and-model-fitting"]], "Data leakage": [[363, "data-leakage"]], "Data leakage during pre-processing": [[363, "data-leakage-during-pre-processing"]], "Data loading": [[274, "data-loading"]], "Data preprocessing": [[149, "data-preprocessing"]], "DataConversionWarning": [[577, null]], "DataDimensionalityWarning": [[578, null]], "DataFrame Support": [[1054, "dataframe-support"]], "DataRobot": [[1030, "id18"]], "Dataiku": [[1030, "id25"]], "Dataset": [[62, "dataset"], [204, "dataset"], [279, "dataset"]], "Dataset Versions": [[374, "dataset-versions"]], "Dataset and Gaussian process generation": [[181, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[280, "dataset-and-model"]], "Dataset based latent variables model": [[115, "dataset-based-latent-variables-model"]], "Dataset examples": [[117, null], [185, "dataset-examples"]], "Dataset generation": [[179, "dataset-generation"], [217, "dataset-generation"]], "Dataset loading utilities": [[373, null], [385, "dataset-loading-utilities"]], "Dataset preparation": [[121, "dataset-preparation"], [235, "dataset-preparation"]], "Dataset preprocessing and model training": [[252, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[372, null]], "Datasets in svmlight / libsvm format": [[374, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[412, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[398, "debian-ubuntu"]], "Debugging CI issues": [[388, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[388, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[395, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[247, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[360, null]], "Decision Tree Regression with AdaBoost": [[136, null]], "Decision Trees": [[185, "decision-trees"], [357, null], [1022, null]], "Decision boundary": [[296, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[337, null]], "Decision path": [[362, "decision-path"]], "DecisionBoundaryDisplay": [[636, null]], "DecisionTreeClassifier": [[917, null]], "DecisionTreeRegressor": [[918, null]], "Decoding text files": [[420, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[417, null]], "Decomposition": [[120, null], [121, "decomposition"], [185, "decomposition"]], "Decomposition: Dictionary learning": [[121, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[268, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[235, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[91, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[271, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[356, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[270, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1006, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[82, null]], "Demo of HDBSCAN clustering algorithm": [[88, null]], "Demo of OPTICS clustering algorithm": [[98, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[316, null]], "Demonstration of k-means assumptions": [[90, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[277, null]], "Density Estimation": [[418, null]], "Density Estimation for a Gaussian mixture": [[262, null]], "Density Estimation: Histograms": [[418, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1021, "density-estimation-novelty-detection"]], "DensityMixin": [[431, null]], "Dependencies": [[378, "dependencies"]], "Deprecation": [[380, "deprecation"]], "Deprecation / Default Value Change": [[249, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1047, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[187, "description-of-the-simulated-data"]], "Design the proper kernel": [[177, "design-the-proper-kernel"]], "DetCurveDisplay": [[703, null]], "Detection error tradeoff (DET)": [[1006, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[270, null]], "Developer API for HTML representation": [[382, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[382, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[382, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[388, null]], "Developer\u2019s Guide": [[383, null]], "Developing Estimators": [[132, null], [185, "developing-estimators"]], "Developing scikit-learn estimators": [[382, null]], "Developing with the Plotting API": [[387, null]], "Diabetes dataset": [[377, "diabetes-dataset"]], "DictVectorizer": [[356, "dictvectorizer"], [586, null]], "Dictionary Learning": [[417, "dictionary-learning"]], "Dictionary learning": [[121, "dictionary-learning"]], "Dictionary learning - positive code": [[121, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[121, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[121, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[536, null]], "Differences between solvers": [[1002, "differences-between-solvers"]], "Different label assignment strategies": [[412, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[412, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[382, "different-objects"]], "Different scenario and useful concepts": [[1002, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[403, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[162, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[302, null]], "Dimensionality reduction": [[1009, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[1000, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1016, "discretization"]], "Dispatching": [[390, null]], "Display Objects": [[1034, "display-objects"]], "Display code coverage in pull requests": [[388, "display-code-coverage-in-pull-requests"]], "Display results": [[220, "display-results"]], "Display the distorted image": [[124, "display-the-distorted-image"]], "Displaying Pipelines": [[254, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[254, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[254, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[254, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[254, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[254, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[244, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[704, null]], "Do you plan to implement transform for target y in a pipeline?": [[392, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[392, "do-you-support-pypy"]], "Documentation": [[380, "documentation"], [1037, "documentation"]], "Documentation Resources": [[1029, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1040, "documentation-improvements"], [1041, "documentation-improvements"]], "Domain specific packages": [[1025, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[422, "dot-product-kernel"]], "Dot-product kernel": [[181, "dot-product-kernel"]], "DotProduct": [[619, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[184, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[156, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[374, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null]], "Dropping official support for PyPy": [[1056, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1056, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[1006, "dummy-estimators"]], "DummyClassifier": [[556, null]], "DummyRegressor": [[557, null]], "D\u00b2 score": [[1006, "d2-score"]], "D\u00b2 score for classification": [[1006, "d2-score-for-classification"]], "Earlier versions": [[1037, "earlier-versions"]], "Early stopping in Gradient Boosting": [[146, null]], "Early stopping of Stochastic Gradient Descent": [[223, null]], "Effect of model regularization on training and test error": [[286, null]], "Effect of number of trees and early stopping": [[151, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[318, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[318, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[318, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[107, null]], "Effect of varying threshold for self-training": [[335, null]], "EfficiencyWarning": [[579, null]], "Efficient Linear Algebra & Array Operations": [[389, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[389, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[389, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[121, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1002, "elastic-net"]], "ElasticNet": [[200, "elasticnet"], [651, null]], "ElasticNetCV": [[652, null]], "EllipticEnvelope": [[473, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[236, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[414, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[94, null]], "Empirical validation": [[246, "empirical-validation"]], "EmpiricalCovariance": [[474, null]], "Encoding categorical features": [[1016, "encoding-categorical-features"]], "Encoding strategy": [[86, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1048, "enforcing-keyword-only-arguments"], [1050, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[395, "enhancement-proposals-sleps"]], "Enhancements": [[1040, "enhancements"], [1041, "enhancements"], [1042, "enhancements"], [1043, "enhancements"], [1043, "id4"], [1044, "enhancements"], [1044, "id3"]], "Enriched estimator displays": [[329, "enriched-estimator-displays"]], "Ensemble methods": [[134, null], [185, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[419, null]], "Environment variables": [[368, "environment-variables"]], "Error Calculation": [[146, "error-calculation"]], "Error caused by file path length limit on Windows": [[398, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[135, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[193, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[97, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[193, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[193, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[113, "estimate-the-covariance"]], "Estimate the score": [[184, "estimate-the-score"]], "Estimated Attributes": [[382, "estimated-attributes"]], "Estimation algorithms": [[1000, "estimation-algorithms"]], "Estimator Tags": [[382, "estimator-tags"]], "Estimator types": [[382, "estimator-types"]], "Estimators": [[363, "estimators"], [363, "id2"], [382, "estimators"], [408, "estimators"]], "Estimators that handle NaN values": [[996, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[286, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[112, "evaluation"], [311, "evaluation"]], "Evaluation metrics": [[267, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[252, null]], "Evaluation of the calibration of predictions": [[215, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[215, "evaluation-of-the-ranking-power"]], "Evernote": [[1030, "id6"]], "Exact Kernel PCA": [[417, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[417, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[408, "example-usage"]], "Example with noise-free target": [[179, "example-with-noise-free-target"]], "Example with noisy targets": [[179, "example-with-noisy-targets"]], "Examples": [[185, null], [369, "examples"], [411, "examples"], [1037, "examples"]], "Examples based on real world datasets": [[42, null], [185, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[995, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[181, "exp-sine-squared-kernel"], [422, "exp-sine-squared-kernel"]], "ExpSineSquared": [[620, null]], "Experimental / Under Development": [[1053, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[327, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[384, "experimental-features"]], "Explained variance score": [[1006, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[247, null]], "Exponentiation": [[621, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1024, null]], "External Tutorials": [[1024, "external-tutorials"]], "External dependencies": [[1037, "external-dependencies"]], "ExtraTreeClassifier": [[919, null]], "ExtraTreeRegressor": [[920, null]], "ExtraTreesClassifier": [[562, null]], "ExtraTreesRegressor": [[563, null]], "Extract noisy patches and reconstruct them using the dictionary": [[124, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[124, "extract-reference-patches"]], "Extracting features": [[369, "extracting-features"]], "Extremely Randomized Trees": [[419, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[251, null]], "Faces dataset decompositions": [[121, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[417, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[131, null]], "Factor Analysis components - FA": [[121, "factor-analysis-components-fa"]], "FactorAnalysis": [[537, null]], "Failure of Machine Learning to infer causal effects": [[187, null]], "FastICA": [[538, null]], "FastICA on 2D point clouds": [[123, null]], "Faster parser in fetch_openml": [[327, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[367, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[355, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[325, "feature-names-support"]], "Feature Selection": [[164, null], [185, "feature-selection"]], "Feature agglomeration": [[84, null], [1023, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[87, null]], "Feature binarization": [[1016, "feature-binarization"]], "Feature discretization": [[315, null]], "Feature extraction": [[420, null]], "Feature hashing": [[420, "feature-hashing"]], "Feature importance based on feature permutation": [[142, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[142, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[143, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[419, "feature-importance-evaluation"]], "Feature importance from coefficients": [[170, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[142, null]], "Feature normalization": [[193, "feature-normalization"]], "Feature scaling": [[1023, null]], "Feature selection": [[421, null]], "Feature selection as part of a pipeline": [[421, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[421, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[421, null]], "Feature transformations with ensembles of trees": [[140, null]], "FeatureAgglomeration": [[412, null], [449, null]], "FeatureHasher": [[356, "featurehasher"], [587, null]], "FeatureHasher and DictVectorizer Comparison": [[356, null]], "FeatureUnion": [[868, null]], "FeatureUnion: composite feature spaces": [[413, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[151, null]], "Fedora": [[398, "fedora"]], "Final conclusion": [[172, "final-conclusion"]], "Final remarks": [[90, "final-remarks"]], "Finding the Nearest Neighbors": [[1009, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[122, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[196, "fit-by-cubic-polynomial"]], "Fit models": [[209, "fit-models"], [292, "fit-models"]], "Fit models and plot results": [[90, "fit-models-and-plot-results"]], "Fit regression model": [[149, "fit-regression-model"], [305, "fit-regression-model"], [349, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[300, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[128, "fit-the-models"]], "Fit the regressors": [[195, "fit-the-regressors"], [195, "id2"]], "FitFailedWarning": [[580, null]], "Fitting": [[382, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[217, "fitting-a-quantileregressor"]], "Fitting additional trees": [[419, "fitting-additional-trees"]], "Fitting additional weak-learners": [[419, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[197, null]], "Fitting an elliptic envelope": [[1012, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[393, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[148, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1050, "fixed-models"]], "FixedThresholdClassifier": [[804, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[330, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1037, "fixes"]], "Flexibility of IterativeImputer": [[996, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[388, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[177, null]], "Forest covertypes": [[375, "forest-covertypes"]], "Forest covertypes dataset": [[252, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[412, "fowlkes-mallows-scores"]], "FreeBSD": [[378, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[233, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[392, null]], "From binary to multiclass and multilabel": [[1006, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[379, null]], "FunctionTransformer": [[873, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[261, null]], "GMM covariances": [[260, null]], "GPC examples": [[422, "gpc-examples"]], "Gallery examples": [[426, "gallery-examples"], [429, "gallery-examples"], [432, "gallery-examples"], [435, "gallery-examples"], [436, "gallery-examples"], [441, "gallery-examples"], [442, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [459, "gallery-examples"], [462, "gallery-examples"], [464, "gallery-examples"], [466, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [478, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [483, "gallery-examples"], [486, "gallery-examples"], [487, "gallery-examples"], [488, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [505, "gallery-examples"], [506, "gallery-examples"], [507, "gallery-examples"], [509, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [535, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [575, "gallery-examples"], [586, "gallery-examples"], [587, "gallery-examples"], [589, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [595, "gallery-examples"], [596, "gallery-examples"], [598, "gallery-examples"], [599, "gallery-examples"], [602, "gallery-examples"], [604, "gallery-examples"], [605, "gallery-examples"], [607, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [612, "gallery-examples"], [613, "gallery-examples"], [615, "gallery-examples"], [616, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [620, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [624, "gallery-examples"], [627, "gallery-examples"], [628, "gallery-examples"], [630, "gallery-examples"], [632, "gallery-examples"], [633, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [646, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [657, "gallery-examples"], [658, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [663, "gallery-examples"], [664, "gallery-examples"], [667, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [671, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [687, "gallery-examples"], [689, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [702, "gallery-examples"], [703, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [712, "gallery-examples"], [714, "gallery-examples"], [717, "gallery-examples"], [718, "gallery-examples"], [722, "gallery-examples"], [723, "gallery-examples"], [724, "gallery-examples"], [732, "gallery-examples"], [734, "gallery-examples"], [737, "gallery-examples"], [739, "gallery-examples"], [740, "gallery-examples"], [742, "gallery-examples"], [743, "gallery-examples"], [746, "gallery-examples"], [747, "gallery-examples"], [750, "gallery-examples"], [751, "gallery-examples"], [753, "gallery-examples"], [754, "gallery-examples"], [755, "gallery-examples"], [757, "gallery-examples"], [758, "gallery-examples"], [760, "gallery-examples"], [762, "gallery-examples"], [766, "gallery-examples"], [783, "gallery-examples"], [784, "gallery-examples"], [787, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [795, "gallery-examples"], [797, "gallery-examples"], [798, "gallery-examples"], [800, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [811, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [840, "gallery-examples"], [842, "gallery-examples"], [844, "gallery-examples"], [846, "gallery-examples"], [847, "gallery-examples"], [848, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [858, "gallery-examples"], [862, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [870, "gallery-examples"], [873, "gallery-examples"], [874, "gallery-examples"], [876, "gallery-examples"], [878, "gallery-examples"], [879, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [890, "gallery-examples"], [893, "gallery-examples"], [895, "gallery-examples"], [898, "gallery-examples"], [902, "gallery-examples"], [903, "gallery-examples"], [905, "gallery-examples"], [906, "gallery-examples"], [907, "gallery-examples"], [909, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [918, "gallery-examples"], [923, "gallery-examples"], [924, "gallery-examples"], [938, "gallery-examples"], [948, "gallery-examples"], [950, "gallery-examples"], [957, "gallery-examples"], [962, "gallery-examples"], [963, "gallery-examples"], [964, "gallery-examples"], [965, "gallery-examples"], [966, "gallery-examples"], [979, "gallery-examples"], [989, "gallery-examples"]], "Gamma loss for gradient boosting": [[328, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[653, null]], "Gaussian Mixture": [[1005, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[259, null]], "Gaussian Mixture Model Selection": [[263, null]], "Gaussian Mixture Model Sine Curve": [[264, null]], "Gaussian Mixture Models": [[185, "gaussian-mixture-models"], [257, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1008, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[422, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[422, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[171, null], [185, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[422, null]], "Gaussian Processes regression: basic introductory example": [[179, null]], "Gaussian mixture models": [[1005, null]], "Gaussian process classification (GPC) on iris dataset": [[174, null], [422, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[172, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[180, null]], "Gaussian random projection": [[1018, "gaussian-random-projection"]], "GaussianMixture": [[803, null]], "GaussianNB": [[847, null]], "GaussianProcessClassifier": [[615, null]], "GaussianProcessRegressor": [[616, null]], "GaussianRandomProjection": [[901, null]], "General Concepts": [[394, "general-concepts"]], "General recommendations": [[363, "general-recommendations"]], "Generalized Linear Models": [[185, "generalized-linear-models"], [194, null], [1002, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[323, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [100, "generate-data"], [111, "generate-data"], [209, "generate-data"], [311, "generate-data"]], "Generate data with outliers": [[300, "generate-data-with-outliers"]], "Generate distorted image": [[124, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [96, "generate-sample-data"], [109, "generate-sample-data"], [122, "generate-sample-data"], [123, "generate-sample-data"], [166, "generate-sample-data"], [248, "generate-sample-data"], [286, "generate-sample-data"], [305, "generate-sample-data"], [349, "generate-sample-data"]], "Generate sinusoidal data with noise": [[196, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[270, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [195, "generate-synthetic-dataset"], [195, "id1"], [200, "generate-synthetic-dataset"]], "Generate the data": [[97, "generate-the-data"], [99, "generate-the-data"], [113, "generate-the-data"]], "Generated datasets": [[376, null]], "Generated documentation on GitHub Actions": [[380, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[172, "generating-a-dataset"]], "Generating polynomial features": [[1016, "generating-polynomial-features"]], "Generators for classification and clustering": [[376, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[376, "generators-for-decomposition"]], "Generators for manifold learning": [[376, "generators-for-manifold-learning"]], "Generators for regression": [[376, "generators-for-regression"]], "Generic dictionary learning": [[417, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[597, null]], "Getting Started": [[393, null]], "Getting reproducible results across multiple executions": [[363, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1029, "gitter"]], "Glossary of Common Terms and API Elements": [[394, null]], "Good practices": [[385, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[395, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[147, null]], "Gradient Boosting Regression Trees for Poisson regression": [[215, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[149, null]], "Gradient Boosting regularization": [[150, null]], "Gradient boosting": [[189, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[145, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[145, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[145, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[145, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[419, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[564, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[419, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[419, null]], "GradientBoostingRegressor": [[565, null]], "Graph Routines": [[389, "graph-routines"]], "Graphical model and parametrization": [[1011, "graphical-model-and-parametrization"]], "GraphicalLasso": [[475, null]], "GraphicalLassoCV": [[476, null]], "GridSearchCV": [[805, null]], "Group Shuffle Split": [[416, "group-shuffle-split"]], "Group k-fold": [[416, "group-k-fold"]], "GroupKFold": [[806, null]], "GroupShuffleSplit": [[807, null]], "Grouping infrequent categories in OneHotEncoder": [[326, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[328, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[412, "hdbscan"], [450, null]], "HDBSCAN: hierarchical density-based clustering": [[328, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[808, null]], "HalvingRandomSearchCV": [[809, null]], "Hamming loss": [[1006, "hamming-loss"]], "Handling Multicollinear Features": [[191, "handling-multicollinear-features"]], "Hash Functions": [[389, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[154, null]], "HashingVectorizer": [[355, "hashingvectorizer"], [594, null]], "Helper Functions": [[389, "helper-functions"]], "Helper function": [[181, "helper-function"]], "Helper function to plot embedding": [[236, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1003, "hessian-eigenmapping"]], "Hierarchical Clustering": [[412, "id11"]], "Hierarchical clustering": [[412, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[100, null]], "Higher-level parallelism with joblib": [[368, "higher-level-parallelism-with-joblib"]], "Highlights": [[1037, "highlights"], [1040, "highlights"], [1041, "highlights"], [1044, "highlights"], [1045, "highlights"]], "Hinge loss": [[1006, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[329, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[566, null]], "HistGradientBoostingRegressor": [[567, null]], "Histogram-Based Gradient Boosting": [[419, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[325, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[412, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[392, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[392, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[392, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[392, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[392, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[392, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[392, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[392, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[363, "how-to-avoid-data-leakage"]], "How to contribute": [[380, "how-to-contribute"]], "How to make a good bug report": [[380, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[386, null]], "HowAboutWe": [[1030, "id16"]], "Huber Regression": [[1002, "huber-regression"]], "HuberRegressor": [[654, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[198, null]], "Hugging Face": [[1030, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[622, null]], "Hyperparameter Robustness": [[88, "hyperparameter-robustness"]], "ICE vs. PDP": [[189, "ice-vs-pdp"]], "INFONEA": [[1030, "id24"]], "Illustration of GPC on the XOR dataset": [[422, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[176, null]], "Illustration of Pipeline and GridSearchCV": [[104, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[181, null]], "Image denoising using dictionary learning": [[124, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[420, "image-feature-extraction"]], "Implementation": [[1009, "implementation"]], "Implementation decisions": [[392, "implementation-decisions"]], "Implementation details": [[1020, "implementation-details"], [1021, "implementation-details"]], "Implementing your own scoring object": [[1006, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[318, null]], "Important notes regarding the internal cross-validation": [[411, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[327, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[329, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[324, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[323, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[996, null], [1016, "imputation-of-missing-values"]], "Impute missing values with mean": [[184, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[184, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[184, null]], "Imputing missing values with variants of IterativeImputer": [[183, null]], "In binary classification settings": [[280, "in-binary-classification-settings"]], "In multi-label settings": [[280, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[187, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[187, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[363, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[581, null]], "Incremental PCA": [[125, null], [417, "incremental-pca"]], "Incremental learning": [[369, "incremental-learning"]], "IncrementalPCA": [[539, null]], "Independent component analysis (ICA)": [[417, "independent-component-analysis-ica"]], "Independent components - FastICA": [[121, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[324, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1013, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[89, null]], "Influence of the Input Data Representation": [[367, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[367, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[367, "influence-of-the-number-of-features"]], "Information Criterion": [[995, "information-criterion"]], "Information-criteria based model selection": [[1002, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1016, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[412, null]], "Input validation": [[382, "input-validation"]], "InputTags": [[926, null]], "Inria": [[1030, "id3"]], "Inspection": [[185, "inspection"], [186, null], [397, null]], "Installing nightly builds": [[378, "installing-nightly-builds"]], "Installing scikit-learn": [[398, null]], "Installing the development version of scikit-learn": [[378, null]], "Installing the latest release": [[398, "installing-the-latest-release"]], "Instantiation": [[382, "instantiation"]], "Intel Extension for Scikit-learn": [[398, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[419, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[327, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1025, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[177, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[419, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[188, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[188, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[219, "interpreting-the-plots"]], "Introducing the set_output API": [[256, null]], "Introduction": [[1003, "introduction"]], "Invariance with respect to prevalence": [[276, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1018, "inverse-transform"]], "Iris plants dataset": [[377, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[175, null]], "Isolation Forest": [[1012, "isolation-forest"]], "IsolationForest": [[568, null]], "IsolationForest example": [[152, null]], "Isomap": [[693, null], [1003, "isomap"]], "Isomap Embedding": [[235, "isomap-embedding"]], "Isotonic": [[410, "isotonic"]], "Isotonic Regression": [[245, null]], "Isotonic regression": [[997, null]], "IsotonicRegression": [[640, null]], "Issue Tracker Tags": [[380, "issue-tracker-tags"]], "Issues for New Contributors": [[380, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[184, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[632, null]], "J.P.Morgan": [[1030, "id1"]], "Jaccard similarity coefficient score": [[1006, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[209, null]], "K-D Tree": [[1009, "k-d-tree"]], "K-bins discretization": [[1016, "k-bins-discretization"]], "K-fold": [[416, "k-fold"]], "K-means": [[412, "k-means"]], "K-means clustering on text features": [[355, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[296, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[874, null]], "KDDCup99 - SA dataset": [[252, "kddcup99-sa-dataset"]], "KDTree": [[850, null]], "KDTree and BallTree Classes": [[1009, "kdtree-and-balltree-classes"]], "KFold": [[810, null]], "KMeans": [[451, null]], "KNN Based Imputation": [[322, "knn-based-imputation"]], "KNNImputer": [[633, null]], "KNeighborsClassifier": [[851, null]], "KNeighborsRegressor": [[852, null]], "KNeighborsTransformer": [[853, null]], "Kddcup 99 dataset": [[375, "kddcup-99-dataset"]], "Keeping the number of features constant": [[996, "keeping-the-number-of-features-constant"]], "Kernel": [[623, null]], "Kernel Approximation": [[185, "kernel-approximation"], [192, null], [998, null]], "Kernel Density Estimate of Species Distributions": [[306, null]], "Kernel Density Estimation": [[297, null], [418, "kernel-density-estimation"]], "Kernel PCA": [[126, null]], "Kernel Principal Component Analysis (kPCA)": [[417, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[181, "kernel-cookbook"]], "Kernel functions": [[1021, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[172, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[422, "kernel-operators"]], "Kernel ridge": [[172, "kernel-ridge"]], "Kernel ridge regression": [[999, null]], "KernelCenterer": [[875, null]], "KernelDensity": [[854, null]], "KernelPCA": [[540, null]], "KernelRidge": [[648, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[422, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[325, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1045, "known-major-bugs"], [1046, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[206, null]], "L1-based feature selection": [[421, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[200, null]], "L1-penalty case": [[350, "l1-penalty-case"]], "L2-penalty case": [[350, "l2-penalty-case"]], "LARS Lasso": [[1002, "lars-lasso"]], "LDA": [[1000, "lda"]], "Label Propagation": [[1019, "label-propagation"]], "Label Propagation digits active learning": [[333, null]], "Label Propagation digits: Demonstrating performance": [[332, null]], "Label Propagation learning a complex structure": [[334, null]], "Label binarization": [[1017, "label-binarization"]], "Label encoding": [[1017, "label-encoding"]], "Label ranking average precision": [[1006, "label-ranking-average-precision"]], "LabelBinarizer": [[876, null], [1017, "labelbinarizer"]], "LabelEncoder": [[877, null]], "LabelPropagation": [[904, null]], "LabelSpreading": [[905, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1004, "laplacian-kernel"]], "Lars": [[655, null]], "LarsCV": [[656, null]], "Lasso": [[200, "lasso"], [657, null], [1002, "lasso"]], "Lasso model selection via information criteria": [[202, null]], "Lasso model selection: AIC-BIC / cross-validation": [[204, null]], "Lasso on dense and sparse data": [[201, null]], "Lasso via coordinate descent": [[204, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[204, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[203, null]], "LassoCV": [[658, null]], "LassoLars": [[659, null]], "LassoLarsCV": [[660, null]], "LassoLarsIC": [[661, null]], "Latent Dirichlet Allocation (LDA)": [[417, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[541, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[124, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[83, "learn-the-dictionary-of-images"]], "Learning Curve": [[275, "learning-curve"]], "Learning Git": [[380, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[303, "learning-an-embedding"]], "Learning curve": [[1001, "learning-curve"]], "LearningCurveDisplay": [[811, null]], "Least Angle Regression": [[1002, "least-angle-regression"]], "Leave One Group Out": [[416, "leave-one-group-out"]], "Leave One Out (LOO)": [[416, "leave-one-out-loo"]], "Leave P Groups Out": [[416, "leave-p-groups-out"]], "Leave P Out (LPO)": [[416, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[812, null]], "LeaveOneOut": [[813, null]], "LeavePGroupsOut": [[814, null]], "LeavePOut": [[815, null]], "Ledoit-Wolf shrinkage": [[414, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[110, null]], "LedoitWolf": [[477, null]], "Lessons learned": [[187, "lessons-learned"], [188, "lessons-learned"]], "Limitations of a simple linear model": [[172, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[420, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[367, "limiting-working-memory"]], "Limiting the number of splits": [[145, "limiting-the-number-of-splits"]], "Linear Models": [[1002, null]], "Linear Regression Example": [[211, null]], "Linear algebra libraries": [[367, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[1000, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[347, "linear-kernel"], [1004, "linear-kernel"]], "Linear models with regularization": [[188, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[188, "linear-models-with-sparse-coefficients"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[554, null]], "LinearRegression": [[662, null]], "LinearSVC": [[909, null]], "LinearSVR": [[910, null]], "Link to R\u00b2 score, the coefficient of determination": [[1006, null]], "Links": [[367, "links"]], "Linnerrud dataset": [[377, "linnerrud-dataset"]], "Linux": [[378, "linux"]], "Linux compilers from conda-forge": [[378, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[378, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[145, "load-ames-housing-dataset"]], "Load Data": [[356, "load-data"]], "Load Data and Train a SVC": [[255, "load-data-and-train-a-svc"]], "Load Data and train model": [[243, "load-data-and-train-model"]], "Load and prepare data": [[282, "load-and-prepare-data"], [283, "load-and-prepare-data"], [318, "load-and-prepare-data"]], "Load and prepare data set": [[343, "load-and-prepare-data-set"]], "Load data": [[208, "load-data"]], "Load dataset": [[141, "load-dataset"]], "Load dataset and apply GridSearchCV": [[161, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[236, "load-digits-dataset"]], "Load some data to play with": [[346, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [83, "load-the-data"], [149, "load-the-data"], [296, "load-the-data"]], "Load the dataset": [[91, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[319, "loading-data-from-openml"]], "Loading a dataset": [[292, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[354, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[233, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[420, "loading-features-from-dicts"]], "Loading from external datasets": [[374, "loading-from-external-datasets"]], "Loading other datasets": [[374, null]], "Loading text data": [[355, "loading-text-data"]], "Loading the data": [[170, "loading-the-data"]], "Loading the data and model fitting": [[143, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[118, "loading-the-iris-dataset"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1012, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1003, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[855, null]], "Locally Linear Embedding": [[1003, "locally-linear-embedding"]], "Locally Linear Embeddings": [[235, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[694, null]], "Lock files": [[380, "lock-files"]], "Log loss": [[1006, "log-loss"]], "Logistic Regression 3-class Classifier": [[199, null]], "Logistic function": [[205, null]], "Logistic regression": [[1002, "logistic-regression"]], "LogisticRegression": [[663, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[292, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[664, null]], "Look at the results": [[248, "look-at-the-results"], [349, "look-at-the-results"]], "Loss Functions": [[419, "loss-functions"]], "Lovely": [[1030, "id20"]], "Low-level parallelism": [[412, "low-level-parallelism"], [419, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[368, "lower-level-parallelism-with-openmp"]], "MARS": [[1030, "id28"]], "MDS": [[695, null]], "MLPClassifier": [[866, null]], "MLPRegressor": [[867, null]], "MNIST classification using multinomial logistic + L1": [[231, null]], "MacPorts for Mac OSX": [[398, "macports-for-mac-osx"]], "Machinalis": [[1030, "id22"]], "Mailing Lists": [[1029, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[215, "main-takeaways"]], "Maintainer Information": [[384, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[380, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[419, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[156, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[159, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[237, null]], "Manifold learning": [[185, "manifold-learning"], [234, null], [1003, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[236, null]], "Manually setting the decision threshold": [[411, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[267, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[317, null]], "Mapping to a Gaussian distribution": [[1016, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1016, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[996, "marking-imputed-values"]], "Matern": [[624, null]], "Mathematical Definition": [[1013, "mathematical-definition"]], "Mathematical Details": [[998, "mathematical-details"]], "Mathematical formulation": [[409, "mathematical-formulation"], [409, "id3"], [419, "mathematical-formulation"], [1009, "mathematical-formulation"], [1020, "mathematical-formulation"], [1021, "mathematical-formulation"], [1022, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[1000, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[1000, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1006, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[181, "matern-kernel"], [422, "matern-kernel"]], "Max error": [[1006, "max-error"]], "MaxAbsScaler": [[313, "maxabsscaler"], [878, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1006, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[412, "mean-shift"]], "Mean absolute error": [[1006, "mean-absolute-error"]], "Mean absolute percentage error": [[1006, "mean-absolute-percentage-error"]], "Mean squared error": [[1006, "mean-squared-error"]], "Mean squared logarithmic error": [[1006, "mean-squared-logarithmic-error"]], "MeanShift": [[452, null]], "Measure and plot the results": [[156, "measure-and-plot-the-results"]], "Median absolute error": [[1006, "median-absolute-error"]], "Memory footprint": [[86, "memory-footprint"]], "Memory usage profiling": [[386, "memory-usage-profiling"]], "Merging Pull Requests": [[384, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [408, "meta-estimators"]], "MetaEstimatorMixin": [[432, null]], "Metadata Routing": [[249, null], [328, "metadata-routing"], [394, "metadata-routing"], [403, null], [1054, "metadata-routing"], [1054, "id2"], [1055, "metadata-routing"], [1056, "metadata-routing"]], "Metadata Routing Support": [[329, "metadata-routing-support"]], "Metadata Routing Support Status": [[403, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[961, null]], "MetadataRouter": [[962, null]], "MethodMapping": [[963, null]], "Methods": [[394, "methods"]], "Metrics": [[408, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1006, null]], "MinCovDet": [[478, null]], "MinMaxScaler": [[313, "minmaxscaler"], [879, null]], "Mini Batch K-Means": [[412, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[417, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[417, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[542, null]], "MiniBatchKMeans": [[453, null]], "MiniBatchNMF": [[543, null]], "MiniBatchNMF: an online version of NMF": [[326, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[544, null]], "Minimal Cost-Complexity Pruning": [[1022, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1050, "minimal-dependencies"], [1051, "minimal-dependencies"]], "Minimum Covariance Determinant": [[414, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[112, "minimum-covariance-determinant-estimator"]], "Misc": [[1037, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [185, "miscellaneous"], [241, null], [1045, "miscellaneous"], [1045, "id40"], [1046, "miscellaneous"], [1047, "miscellaneous"], [1048, "miscellaneous"], [1048, "id13"], [1049, "miscellaneous"], [1050, "miscellaneous"], [1053, "miscellaneous"]], "Misleading values on strongly correlated features": [[1014, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[182, null], [185, "missing-value-imputation"]], "Missing Values Support": [[1022, "missing-values-support"]], "Missing information": [[184, "missing-information"]], "Missing value support for Random Forest": [[329, "missing-value-support-for-random-forest"]], "Missing values support": [[419, "missing-values-support"]], "Missing values support in decision trees": [[328, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[634, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[367, "model-compression"]], "Model Reshaping": [[367, "model-reshaping"]], "Model Selection": [[185, "model-selection"], [265, null]], "Model Selection Enhancements and API Changes": [[1043, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[146, "model-training-and-comparison"]], "Model comparison": [[145, "model-comparison"]], "Model definition": [[286, "model-definition"]], "Model evaluation": [[393, "model-evaluation"]], "Model fitting and extrapolation": [[177, "model-fitting-and-extrapolation"]], "Model persistence": [[406, null]], "Model selection and evaluation": [[407, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[128, null]], "Model selection: development and evaluation": [[995, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[995, "model-specific-cross-validation"]], "Model training and selection": [[169, "model-training-and-selection"], [263, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[354, "model-with-metadata-stripping"]], "Model without metadata stripping": [[354, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[170, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[311, "models-definition"]], "Models robustness to recover the ground truth weights": [[195, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1003, "modified-locally-linear-embedding"]], "Monitoring performance": [[380, "monitoring-performance"]], "Monotonic Constraints": [[153, null], [419, "monotonic-constraints"]], "Monotonic constraints": [[151, "monotonic-constraints"]], "More control with warm_start": [[1010, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[88, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[135, null]], "Multi-class case": [[1006, "multi-class-case"]], "Multi-class classification": [[1021, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[386, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1003, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[238, null]], "Multi-label case": [[1006, "multi-label-case"]], "Multi-label confusion matrix": [[1006, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1010, "multi-layer-perceptron"]], "Multi-layer perceptron": [[189, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[361, null]], "Multi-output problems": [[1022, "multi-output-problems"]], "Multi-task Elastic-Net": [[1002, "multi-task-elastic-net"]], "Multi-task Lasso": [[1002, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[880, null], [1017, "multilabelbinarizer"]], "MultiOutputClassifier": [[841, null], [1007, "multioutputclassifier"]], "MultiOutputRegressor": [[842, null], [1007, "multioutputregressor"]], "MultiTaskElasticNet": [[665, null]], "MultiTaskElasticNetCV": [[666, null]], "MultiTaskLasso": [[667, null]], "MultiTaskLassoCV": [[668, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[282, null]], "Multiclass and multilabel classification": [[1006, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[389, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1007, null]], "Multiclass classification": [[1007, "multiclass-classification"]], "Multiclass methods": [[185, "multiclass-methods"], [289, null]], "Multiclass sparse logistic regression on 20newgroups": [[230, null]], "Multiclass support": [[410, "multiclass-support"]], "Multiclass-multioutput classification": [[1007, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[235, "multidimensional-scaling"]], "Multilabel": [[376, "multilabel"]], "Multilabel classification": [[250, null], [1007, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[292, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1006, "multilabel-ranking-metrics"]], "Multinomial Case": [[1002, "multinomial-case"]], "Multinomial Naive Bayes": [[1008, "multinomial-naive-bayes"]], "MultinomialNB": [[848, null]], "Multioutput methods": [[185, "multioutput-methods"], [291, null]], "Multioutput regression": [[1007, "multioutput-regression"]], "Multiple modules": [[1045, "multiple-modules"], [1046, "multiple-modules"]], "Multiple vs. Single Imputation": [[996, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[996, "multivariate-feature-imputation"]], "Mutual Information based scores": [[412, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[412, "mutual-reachability-graph"]], "NMF": [[545, null]], "NMF with a beta-divergence": [[417, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[417, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1008, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[319, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[324, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[322, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[304, null]], "Nearest Centroid Classifier": [[1009, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1009, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[185, "nearest-neighbors"], [294, null], [1009, null]], "Nearest Neighbors Classification": [[296, null], [1009, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1009, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1009, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[305, null]], "Nearest Shrunken Centroid": [[1009, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[996, "nearest-neighbors-imputation"]], "NearestCentroid": [[856, null]], "NearestNeighbors": [[857, null]], "Neighborhood Components Analysis": [[1009, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[303, null]], "NeighborhoodComponentsAnalysis": [[858, null]], "Nested versus non-nested cross-validation": [[278, null]], "NetBSD": [[398, "netbsd"]], "Neural Networks": [[185, "neural-networks"], [307, null]], "Neural network models (supervised)": [[1010, null]], "Neural network models (unsupervised)": [[1011, null]], "New Estimator Classes": [[1038, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[324, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[324, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[324, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[327, "new-and-enhanced-displays"]], "New classes": [[1037, "new-classes"]], "New display ValidationCurveDisplay": [[328, "new-display-validationcurvedisplay"]], "New documentation improvements": [[324, "new-documentation-improvements"], [325, "new-documentation-improvements"]], "New features": [[1040, "new-features"], [1041, "new-features"], [1042, "new-features"], [1043, "new-features"], [1044, "new-features"]], "New plotting API": [[322, "new-plotting-api"]], "New self-training meta-estimator": [[324, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1024, "new-to-scientific-python"]], "Next steps": [[393, "next-steps"]], "Non-Negative Least Squares": [[1002, "non-negative-least-squares"]], "Non-linear transformation": [[1016, "non-linear-transformation"]], "Non-negative components - NMF": [[121, "non-negative-components-nmf"]], "Non-negative least squares": [[210, null]], "Non-negative matrix factorization (NMF or NNMF)": [[417, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1016, "normalization"]], "Normalized Discounted Cumulative Gain": [[1006, "normalized-discounted-cumulative-gain"]], "Normalizer": [[313, "normalizer"], [881, null]], "NotFittedError": [[582, null]], "Note on MPS device support": [[408, "note-on-mps-device-support"]], "Note on device support for float64": [[408, "note-on-device-support-for-float64"]], "Notes": [[369, "notes"]], "Novelty Detection": [[1012, "novelty-detection"]], "Novelty and Outlier Detection": [[1012, null]], "Novelty detection with Local Outlier Factor": [[1012, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[299, null]], "NuSVC": [[911, null]], "NuSVR": [[912, null]], "NumPy": [[385, "numpy"]], "Number of candidates and amount of resource at each iteration": [[285, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[382, "numerical-assertions-in-tests"]], "Nystroem": [[644, null]], "Nystroem Method for Kernel Approximation": [[998, "nystroem-method-for-kernel-approximation"]], "OAS": [[479, null]], "ONNX": [[406, "onnx"]], "OOB Errors for Random Forests": [[139, null]], "OPTICS": [[412, "optics"], [454, null]], "Obtaining predictions by cross-validation": [[416, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1030, "id19"]], "Older Versions": [[1037, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[229, null]], "One-class SVM with non-linear kernel (RBF)": [[342, null]], "One-vs-One multiclass ROC": [[282, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[282, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[913, null]], "OneHotEncoder": [[882, null]], "OneToOneFeatureMixin": [[433, null]], "OneVsOneClassifier": [[837, null], [1007, "onevsoneclassifier"]], "OneVsRestClassifier": [[838, null], [1007, "onevsrestclassifier"]], "Online One-Class SVM": [[325, "online-one-class-svm"], [1020, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[83, null]], "Optical recognition of handwritten digits dataset": [[377, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[178, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[382, "optional-arguments"]], "Options to tune the decision threshold": [[411, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[414, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[883, null]], "Ordinary Least Squares": [[1002, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1002, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[213, null]], "Original data": [[279, "original-data"], [313, "original-data"]], "Original image": [[86, "original-image"]], "Original points": [[303, "original-points"]], "Orthogonal Matching Pursuit": [[214, null]], "Orthogonal Matching Pursuit (OMP)": [[1002, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[669, null]], "OrthogonalMatchingPursuitCV": [[670, null]], "Other changes": [[1037, "other-changes"]], "Other estimators and tasks": [[1025, "other-estimators-and-tasks"]], "Otto Group": [[1030, "id26"]], "Our community, our values": [[380, null]], "Our vanilla classifier": [[287, "our-vanilla-classifier"]], "Out of Bag Estimates": [[995, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1008, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1012, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[300, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[434, null]], "Outliers in the X direction": [[232, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[232, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1014, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[839, null], [1007, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[368, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[412, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[290, null]], "Overview of outlier detection methods": [[1012, "overview-of-outlier-detection-methods"]], "PCA": [[546, null]], "PCA example with Iris Data-set": [[127, null]], "PCA using randomized SVD": [[417, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1023, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1030, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[115, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[115, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[415, "plscanonical"], [487, null]], "PLSRegression": [[415, "plsregression"], [488, null]], "PLSSVD": [[415, "plssvd"], [489, null]], "Packaging": [[1049, "packaging"]], "Pair Confusion Matrix": [[412, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[273, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[273, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[330, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1004, null]], "PairwiseKernel": [[625, null]], "Pandas": [[385, "pandas"]], "Pandas output with set_output API": [[327, "pandas-output-with-set-output-api"]], "Parallel": [[971, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[368, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[368, "parallelism"], [995, "parallelism"]], "Parallelism, resource management, and configuration": [[368, null]], "Parallelization": [[419, "parallelization"]], "ParameterGrid": [[816, null]], "ParameterSampler": [[817, null]], "Parameters": [[394, "parameters"], [419, "parameters"]], "Parameters and init": [[382, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1021, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[189, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1013, null]], "Partial dependence plots": [[1013, "partial-dependence-plots"]], "PartialDependenceDisplay": [[637, null]], "Partitioning the data": [[193, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1002, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[671, null]], "PassiveAggressiveRegressor": [[672, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[420, "patch-extraction"]], "PatchExtractor": [[588, null]], "PeerIndex": [[1030, "id17"]], "People": [[1037, "people"], [1037, "id2"], [1037, "id5"], [1037, "id8"], [1037, "id11"], [1037, "id13"], [1037, "id15"], [1037, "id17"], [1038, "people"], [1038, "id3"], [1039, "people"], [1040, "people"]], "Perceptron": [[673, null], [1002, "perceptron"]], "Performance improvements": [[326, "performance-improvements"]], "Performance improvements in PCA": [[330, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[355, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[216, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[190, null]], "Permutation Importance with Multicollinear or Correlated Features": [[191, null]], "Permutation feature importance": [[1014, null]], "Permutation test score": [[279, "permutation-test-score"], [416, "permutation-test-score"]], "Permutation-based feature importance": [[322, "permutation-based-feature-importance"]], "Pinball loss": [[1006, "pinball-loss"]], "Pipeline": [[869, null]], "Pipeline ANOVA SVM": [[167, null]], "Pipeline compatibility": [[382, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[274, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[413, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[101, null], [185, "pipelines-and-composite-estimators"], [413, null]], "Pipelines: chaining pre-processors and estimators": [[393, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1023, null]], "Pipelining: chaining a PCA and a logistic regression": [[105, null]], "Pixel importances with a parallel forest of trees": [[143, null]], "Platform-specific instructions": [[378, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[280, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[270, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[220, null]], "Plot a PCA representation": [[118, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[354, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[282, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[282, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[200, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[252, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[158, null]], "Plot classification boundaries with different SVM Kernels": [[347, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[340, null]], "Plot discrete decision boundary": [[152, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[161, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[149, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[159, null]], "Plot multi-class SGD on the iris dataset": [[224, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[207, null]], "Plot number of features VS. cross-validation scores": [[169, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[152, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[119, null]], "Plot regularization path": [[208, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [96, "plot-result"], [100, "plot-result"], [100, "id2"]], "Plot results": [[47, "plot-results"], [82, "plot-results"], [109, "plot-results"], [122, "plot-results"], [123, "plot-results"], [141, "plot-results"], [292, "plot-results"], [300, "plot-results"]], "Plot support and time series": [[209, "plot-support-and-time-series"]], "Plot the BIC scores": [[263, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[280, "plot-the-precision-recall-curve"]], "Plot the best model": [[263, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[346, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[157, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[359, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[144, null]], "Plot the marginal log-likelihood": [[195, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[280, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[332, "plot-the-most-uncertain-predictions"]], "Plot the results": [[83, "plot-the-results"], [113, "plot-the-results"], [159, "plot-the-results"], [184, "plot-the-results"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[341, null]], "Plot the true and estimated coefficients": [[195, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[196, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[149, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [311, "plotting"]], "Plotting API Overview": [[387, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[269, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[275, null]], "Plotting four circles": [[99, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[253, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[253, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[253, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[195, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[255, "plotting-the-roc-curve"]], "Plotting the Results": [[319, "plotting-the-results"]], "Plotting the result": [[277, "plotting-the-result"]], "Plotting the results": [[97, "plotting-the-results"], [136, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[219, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[99, "plotting-two-circles"]], "Plotting with Multiple Axes": [[387, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[215, null]], "PoissonRegressor": [[674, null]], "Polars output in set_output": [[329, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[998, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[216, null]], "Polynomial features": [[1016, "polynomial-features"]], "Polynomial kernel": [[347, "polynomial-kernel"], [1004, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1002, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[645, null]], "PolynomialFeatures": [[884, null]], "Possible solutions": [[90, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[358, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[287, null]], "Post-tuning the decision threshold": [[411, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[267, null]], "PowerTransformer": [[313, "powertransformer"], [885, null]], "Pre-test vs. post-test analysis": [[276, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1006, "precision-recall-and-f-measures"]], "Precision-Recall": [[280, null]], "PrecisionRecallDisplay": [[705, null]], "Precomputed sparse nearest neighbors graph": [[322, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[416, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[818, null]], "Prediction Intervals for Gradient Boosting Regression": [[148, null]], "Prediction Latency": [[49, null], [367, "prediction-latency"]], "Prediction Throughput": [[367, "prediction-throughput"]], "PredictionErrorDisplay": [[706, null]], "Preparing the data": [[136, "preparing-the-data"], [151, "preparing-the-data"], [193, "preparing-the-data"]], "Preprocessing": [[185, "preprocessing"], [312, null]], "Preprocessing data": [[1016, null]], "Preprocessing numerical variables": [[188, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[189, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[189, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[189, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[116, null]], "Principal component analysis (PCA)": [[417, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1054, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[422, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[173, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[410, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[188, "processing-the-dataset"]], "Product": [[626, null]], "Productivity and sanity-preserving tips": [[388, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[386, "profiling-python-code"]], "Profiling compiled extensions": [[386, "profiling-compiled-extensions"]], "Project template:": [[382, null]], "Projecting data: PCA vs. KernelPCA": [[126, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[126, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[116, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[385, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[380, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[233, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1026, "purpose-of-this-document"]], "Purpose of this example": [[219, "purpose-of-this-example"]], "PyTorch Support": [[408, "pytorch-support"]], "Python API": [[368, "python-api"]], "Python package and dataset imports, load dataset": [[247, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[386, "python-cython-or-c-c"]], "QDA": [[1000, "qda"]], "QuadraticDiscriminantAnalysis": [[555, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[355, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1002, "quantile-regression"]], "Quantile Regressor": [[325, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[326, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[217, null]], "QuantileRegressor": [[675, null]], "QuantileTransformer": [[886, null]], "QuantileTransformer (Gaussian output)": [[313, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[313, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1002, "ransac-random-sample-consensus"]], "RANSACRegressor": [[676, null]], "RBF": [[627, null]], "RBF SVM parameters": [[343, null]], "RBF kernel": [[347, "rbf-kernel"], [1004, "rbf-kernel"]], "RBFSampler": [[646, null]], "RCV1 dataset": [[375, "rcv1-dataset"]], "RFE": [[598, null]], "RFECV": [[599, null]], "ROC AUC now supports multiclass classification": [[322, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[255, null]], "ROC curve showing a specific class": [[282, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[282, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[282, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[282, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[998, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[181, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[422, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[859, null]], "RadiusNeighborsRegressor": [[860, null]], "RadiusNeighborsTransformer": [[861, null]], "Rand index": [[412, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[191, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[419, "random-forests"]], "Random Numbers": [[382, "random-numbers"]], "Random Projection": [[1018, null]], "Random data": [[279, "random-data"]], "Random forests and other randomized tree ensembles": [[419, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[416, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1023, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[569, null]], "RandomForestRegressor": [[570, null]], "RandomTreesEmbedding": [[571, null]], "Randomized Parameter Optimization": [[995, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[819, null]], "Rangespan": [[1030, "id11"]], "Ranking loss": [[1006, "ranking-loss"]], "Rational Quadratic kernel": [[181, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[422, "rational-quadratic-kernel"]], "RationalQuadratic": [[628, null]], "Reading the existing code base": [[380, "reading-the-existing-code-base"]], "Real world datasets": [[375, null]], "Real-world data set": [[107, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[283, null]], "Receiver operating characteristic (ROC)": [[1006, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1025, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[168, null], [421, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[169, null]], "Reference Steps": [[384, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [112, "references"], [138, "references"], [193, "references"], [200, "references"], [290, "references"], [306, "references"], [422, "references"], [996, "references"]], "Region of Practical Equivalence": [[273, "region-of-practical-equivalence"]], "Regression": [[180, "regression"], [1002, "regression"], [1010, "regression"], [1020, "regression"], [1021, "regression"], [1022, "regression"]], "Regression criteria": [[1022, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1006, "regression-metrics"]], "RegressorChain": [[843, null], [1007, "regressorchain"]], "RegressorMixin": [[435, null]], "RegressorTags": [[927, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1010, "regularization"]], "Regularization path of L1- Logistic Regression": [[208, null]], "Related Projects": [[1025, null]], "Related changes": [[1044, "related-changes"]], "Relation to impurity-based importance in trees": [[1014, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[185, "release-highlights"], [321, null]], "Release Highlights for scikit-learn 0.22": [[322, null]], "Release Highlights for scikit-learn 0.23": [[323, null]], "Release Highlights for scikit-learn 0.24": [[324, null]], "Release Highlights for scikit-learn 1.0": [[325, null]], "Release Highlights for scikit-learn 1.1": [[326, null]], "Release Highlights for scikit-learn 1.2": [[327, null]], "Release Highlights for scikit-learn 1.3": [[328, null]], "Release Highlights for scikit-learn 1.4": [[329, null]], "Release Highlights for scikit-learn 1.5": [[330, null]], "Release History": [[1035, null]], "Releasing": [[384, "releasing"]], "Remarks": [[246, "remarks"]], "Removed modules": [[1037, "removed-modules"]], "Removing features with low variance": [[421, "removing-features-with-low-variance"]], "Repeated K-Fold": [[416, "repeated-k-fold"]], "RepeatedKFold": [[820, null]], "RepeatedStratifiedKFold": [[821, null]], "Replace missing values by 0": [[184, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[406, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[311, null]], "Restricted Boltzmann machines": [[1011, "restricted-boltzmann-machines"]], "Results interpretation": [[292, "results-interpretation"]], "Retrieve dataframes from OpenML": [[322, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[244, "rich-html-representation"]], "Rich visual representation of estimators": [[323, "rich-visual-representation-of-estimators"]], "Ridge": [[677, null]], "Ridge Complexity": [[1002, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[219, null]], "Ridge regression and classification": [[1002, "ridge-regression-and-classification"]], "RidgeCV": [[678, null]], "RidgeClassifier": [[679, null]], "RidgeClassifierCV": [[680, null]], "Roadmap": [[1026, null]], "Robust Covariance Estimation": [[414, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[111, null]], "Robust linear estimator fitting": [[221, null]], "Robust linear model estimation using RANSAC": [[218, null]], "Robust vs Empirical covariance estimate": [[112, null]], "RobustScaler": [[313, "robustscaler"], [887, null]], "Robustness of cross-validation results": [[363, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1002, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[995, "robustness-to-failure"]], "RocCurveDisplay": [[707, null]], "Roles And Responsibilities": [[395, "roles-and-responsibilities"]], "Rolling your own estimator": [[382, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[249, "routing-meta-estimator"]], "Run the benchmark": [[91, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[277, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[378, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1006, "r2-score-the-coefficient-of-determination"]], "SGD": [[1020, "id5"]], "SGD: Maximum margin separating hyperplane": [[227, null]], "SGD: Penalties": [[226, null]], "SGD: Weighted samples": [[228, null]], "SGD: convex loss functions": [[225, null]], "SGDClassifier": [[681, null]], "SGDOneClassSVM": [[682, null]], "SGDRegressor": [[683, null]], "SKLEARN_ASSUME_FINITE": [[368, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[368, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[368, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[368, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[368, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[368, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[368, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[368, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[368, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[368, "sklearn-working-memory"]], "SVC": [[914, null], [1021, "svc"]], "SVM Exercise": [[163, null]], "SVM Margins Example": [[348, null]], "SVM Tie Breaking Example": [[351, null]], "SVM with custom kernel": [[339, null]], "SVM-Anova: SVM with univariate feature selection": [[346, null]], "SVM: Maximum margin separating hyperplane": [[344, null]], "SVM: Separating hyperplane for unbalanced classes": [[345, null]], "SVM: Weighted samples": [[352, null]], "SVR": [[915, null], [1021, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[374, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[274, null]], "Sample weight support": [[419, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[323, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[323, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[193, null]], "Scale Invariance": [[88, "scale-invariance"]], "Scaling data with outliers": [[1016, "scaling-data-with-outliers"]], "Scaling features to a range": [[1016, "scaling-features-to-a-range"]], "Scaling sparse data": [[1016, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[350, null]], "Scaling up the One-Class SVM": [[1012, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[369, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[118, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[115, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[395, null]], "Scores and probabilities": [[1021, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[995, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1055, "security"]], "Security & Maintainability Limitations": [[406, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, null]], "SelectFdr": [[600, null]], "SelectFpr": [[601, null]], "SelectFromModel": [[602, null]], "SelectFwe": [[603, null]], "SelectKBest": [[604, null]], "SelectPercentile": [[605, null]], "Selecting Lasso via an information criterion": [[204, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[204, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[104, null]], "Selecting features based on importance": [[170, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[170, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[93, null]], "SelectorMixin": [[606, null]], "Self Training": [[1019, "self-training"]], "SelfTrainingClassifier": [[906, null]], "Semi Supervised Classification": [[185, "semi-supervised-classification"], [331, null]], "Semi-supervised Classification on a Text Dataset": [[336, null]], "Semi-supervised learning": [[332, "semi-supervised-learning"], [1019, null]], "Sequence similarity matrix under the kernel": [[180, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[421, "sequential-feature-selection"]], "SequentialFeatureSelector": [[607, null]], "Serving the model artifact": [[406, "serving-the-model-artifact"]], "Setting regularization parameter": [[1002, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1002, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[233, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[1000, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[109, null]], "Shrinkage via learning rate": [[419, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[414, "shrunk-covariance"]], "ShrunkCovariance": [[480, null]], "ShuffleSplit": [[822, null]], "Sigmoid": [[410, "sigmoid"]], "Sigmoid kernel": [[347, "sigmoid-kernel"], [1004, "sigmoid-kernel"]], "Silhouette Coefficient": [[412, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[298, null]], "Simple Pipeline": [[249, "simple-pipeline"]], "SimpleImputer": [[635, null]], "Single estimator versus bagging: bias-variance decomposition": [[138, null]], "Single label": [[376, "single-label"]], "Skewed Chi Squared Kernel": [[998, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[647, null]], "Social Media": [[1029, "social-media"]], "Solvers": [[1002, "solvers"]], "Sparse coding with a precomputed dictionary": [[130, null], [417, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[121, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1016, null]], "Sparse inverse covariance": [[414, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[113, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[417, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1018, "sparse-random-projection"]], "SparseCoder": [[547, null]], "SparsePCA": [[548, null]], "SparseRandomProjection": [[902, null]], "Sparsity": [[420, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[212, null]], "Species distribution dataset": [[375, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[382, "specific-models"]], "Specifying an objective metric": [[995, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[995, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[409, "spectral-biclustering"]], "Spectral Clustering Graphs": [[412, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[409, "spectral-co-clustering"]], "Spectral Embedding": [[1003, "spectral-embedding"]], "Spectral clustering": [[412, "spectral-clustering"]], "Spectral clustering for image segmentation": [[99, null]], "Spectral embedding for non-linear dimensionality reduction": [[235, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[455, null]], "SpectralClustering": [[456, null]], "SpectralCoclustering": [[457, null]], "SpectralEmbedding": [[696, null]], "Sphinx version": [[380, null]], "Spline Transformers": [[325, "spline-transformers"]], "Spline transformer": [[1016, "spline-transformer"]], "SplineTransformer": [[888, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1030, "id2"]], "Stack of predictors on a single data set": [[156, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[419, "stacked-generalization"]], "Stacking Classifier and Regressor": [[322, "stacking-classifier-and-regressor"]], "StackingClassifier": [[572, null]], "StackingRegressor": [[573, null]], "Stalled and Unclaimed Issues": [[380, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[380, "stalled-pull-requests"]], "Standard replies for reviewing": [[388, "standard-replies-for-reviewing"]], "StandardScaler": [[313, "standardscaler"], [889, null]], "Standardization, or mean removal and variance scaling": [[1016, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1026, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[273, null]], "Statistical learning with Python": [[1025, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1020, null]], "Stochastic Gradient Descent - SGD": [[1002, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1020, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1011, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1020, "stopping-criterion"]], "Strategies comparison": [[290, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[369, null]], "Stratified Shuffle Split": [[416, "stratified-shuffle-split"]], "Stratified k-fold": [[416, "stratified-k-fold"]], "StratifiedGroupKFold": [[416, "stratifiedgroupkfold"], [823, null]], "StratifiedKFold": [[824, null]], "StratifiedShuffleSplit": [[825, null]], "Streaming instances": [[369, "streaming-instances"]], "Submitting a bug report or a feature request": [[380, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1026, "subpackage-specific-goals"]], "Subsampling": [[419, "subsampling"]], "Successive Halving Iterations": [[285, null]], "Successive Halving estimators for tuning hyper-parameters": [[324, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[629, null]], "Summarizing the key points": [[406, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [146, "summary"], [356, "summary"]], "Summary of cross-validation approach": [[204, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[406, "id2"]], "Supervised learning": [[1028, null]], "Support": [[1029, null]], "Support Vector Machines": [[185, "support-vector-machines"], [338, null], [1021, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[349, null]], "Support for Array API": [[1054, "support-for-array-api"], [1055, "support-for-array-api"], [1056, "support-for-array-api"]], "Support for Array API-compatible inputs": [[408, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1054, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1055, "support-for-building-with-meson"]], "Support for missing values": [[151, "support-for-missing-values"]], "Support for quantile loss": [[151, "support-for-quantile-loss"]], "Swiss Roll": [[239, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[239, null]], "Swiss-Hole": [[239, "swiss-hole"]], "Synthetic dataset": [[385, "synthetic-dataset"]], "Synthetic example": [[107, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[235, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[697, null]], "Table of Contents": [[392, "table-of-contents"]], "Tags": [[928, null]], "Take-home messages": [[273, "take-home-messages"]], "Target Encoder": [[1016, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[320, null]], "Target Types": [[394, "target-types"]], "Target format": [[1007, "target-format"], [1007, "id5"], [1007, "id8"], [1007, "id10"]], "TargetEncoder": [[890, null]], "TargetEncoder: a new category encoding strategy": [[328, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[929, null]], "Technical Committee": [[395, "technical-committee"]], "Test dependencies": [[378, "test-dependencies"]], "Test with permutations the significance of a classification score": [[279, null]], "Testing Functions": [[389, "testing-functions"]], "Testing and improving test coverage": [[380, "testing-and-improving-test-coverage"]], "Text feature extraction": [[420, "text-feature-extraction"]], "TfidfTransformer": [[595, null]], "TfidfVectorizer": [[356, "tfidfvectorizer"], [596, null]], "Tf\u2013idf term weighting": [[420, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[375, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[420, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1005, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[215, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[118, null]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[246, null]], "The Johnson-Lindenstrauss lemma": [[1018, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[375, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[388, "the-meson-build-backend"]], "The Olivetti faces dataset": [[375, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[290, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[280, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[267, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[416, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[116, "the-data"]], "The dataset": [[271, "the-dataset"]], "The dataset: simulated hourly wages": [[187, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[188, "the-dataset-wages"]], "The diabetes dataset": [[287, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[290, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[188, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[188, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[384, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1006, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[232, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1002, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[684, null]], "Theoretical bounds": [[246, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[249, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[398, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[416, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[826, null]], "Timing and accuracy plots": [[247, "timing-and-accuracy-plots"]], "Tips and Tricks": [[367, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[381, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[995, "tips-for-parameter-search"]], "Tips for performance": [[381, "tips-for-performance"]], "Tips on Practical Use": [[1010, "tips-on-practical-use"], [1020, "tips-on-practical-use"], [1021, "tips-on-practical-use"]], "Tips on practical use": [[1003, "tips-on-practical-use"], [1022, "tips-on-practical-use"]], "Tips to ease development": [[381, "tips-to-ease-development"]], "Tools": [[408, "tools"]], "Top terms per cluster": [[355, "top-terms-per-cluster"]], "Top-k accuracy score": [[1006, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[358, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[419, "totally-random-trees-embedding"]], "Toy datasets": [[377, null]], "Tracking feature names in a pipeline": [[413, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1002, null]], "Train and Persist the Model": [[406, "train-and-persist-the-model"]], "Train classifiers": [[343, "train-classifiers"]], "Train models on the diabetes dataset": [[253, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[362, "train-tree-classifier"]], "Training": [[311, "training"], [1009, "training"]], "Training SVC model and plotting decision boundaries": [[347, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[255, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[320, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[319, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[136, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[159, "training-classifiers"]], "Training of the model": [[152, "training-of-the-model"]], "Training the AdaBoostClassifier": [[135, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[219, "training-the-ridge-regressor"]], "Transform": [[1009, "transform"]], "Transform data": [[115, "transform-data"]], "TransformedTargetRegressor": [[469, null]], "TransformerMixin": [[436, null]], "TransformerTags": [[930, null]], "Transformers and pre-processors": [[393, "transformers-and-pre-processors"]], "Transforming target in regression": [[413, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1017, null]], "Translations of scikit-learn documentation": [[1025, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1022, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[322, "tree-pruning"]], "Tree structure": [[362, "tree-structure"]], "Tree-based feature selection": [[421, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[190, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[379, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[398, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[417, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[549, null]], "TunedThresholdClassifierCV": [[827, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[330, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[271, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[267, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[267, "tuning-the-decision-threshold"], [287, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[411, null]], "Tuning the hyper-parameters of an estimator": [[995, null]], "Tuning the hyper-parameters of the quantile regressors": [[148, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[160, null], [185, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[233, null]], "TweedieRegressor": [[685, null]], "Two-class AdaBoost": [[137, null]], "Type of return values and fitted attributes": [[408, "type-of-return-values-and-fitted-attributes"]], "Types": [[381, "types"]], "T\u00e9l\u00e9com ParisTech": [[1030, "id7"]], "Unbalanced problems": [[1021, "unbalanced-problems"]], "UndefinedMetricWarning": [[583, null]], "Under Development": [[1032, "under-development"]], "Underfitting vs. Overfitting": [[288, null]], "Understanding the decision tree structure": [[362, null]], "Univariate Feature Selection": [[166, null]], "Univariate feature imputation": [[996, "univariate-feature-imputation"]], "Univariate feature selection": [[166, "id1"], [421, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[996, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[382, "universal-attributes"]], "Unlabeled entries in y": [[1019, null]], "Unsupervised Nearest Neighbors": [[1009, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1023, null]], "Unsupervised learning": [[1031, null]], "Unweighted feature selection": [[403, "unweighted-feature-selection"]], "Updating Authors List": [[384, "updating-authors-list"]], "Usage": [[410, "usage"], [413, "usage"], [413, "id1"], [419, "usage"], [419, "id24"], [419, "id25"], [419, "id27"], [419, "id35"], [1002, "usage"]], "Usage Examples": [[403, "usage-examples"]], "Use markdown formatting": [[385, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[388, "useful-pytest-aliases-and-flags"]], "User Guide": [[1032, null]], "User Questions": [[1029, "user-questions"]], "Using Cython": [[386, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[314, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[363, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[381, "using-openmp"]], "Using a debugger, gdb": [[386, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[388, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1002, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[416, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[153, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[386, "using-gprof"]], "Using multiple metric evaluation": [[1006, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[170, "using-negative-tolerance-values"]], "Using scikit-learn": [[392, "using-scikit-learn"]], "Using stop words": [[420, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[386, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[386, "using-yep-and-gperftools"]], "Utilities for Developers": [[389, null]], "Validation Tools": [[389, "validation-tools"]], "Validation curve": [[1001, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[1001, null]], "ValidationCurveDisplay": [[828, null]], "Vanilla predictive model": [[267, "vanilla-predictive-model"]], "VarianceThreshold": [[608, null]], "Variational Bayesian Gaussian Mixture": [[1005, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[85, null]], "Varying regularization in Multi-layer Perceptron": [[308, null]], "Varying the metric": [[412, "varying-the-metric"]], "Vector Quantization Example": [[86, null]], "Vectorizing a large text corpus with the hashing trick": [[420, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1037, "version-0-10"]], "Version 0.11": [[1037, "version-0-11"]], "Version 0.12": [[1037, "version-0-12"]], "Version 0.12.1": [[1037, "version-0-12-1"]], "Version 0.13": [[1038, null], [1038, "changes-0-13"]], "Version 0.13.1": [[1038, "version-0-13-1"]], "Version 0.14": [[1039, null], [1039, "changes-0-14"]], "Version 0.15": [[1040, null], [1040, "changes-0-15"]], "Version 0.15.1": [[1040, "version-0-15-1"]], "Version 0.15.2": [[1040, "version-0-15-2"]], "Version 0.16": [[1041, null], [1041, "changes-0-16"]], "Version 0.16.1": [[1041, "version-0-16-1"]], "Version 0.17": [[1042, null], [1042, "changes-0-17"]], "Version 0.17.1": [[1042, "version-0-17-1"]], "Version 0.18": [[1043, null], [1043, "changes-0-18"]], "Version 0.18.1": [[1043, "version-0-18-1"]], "Version 0.18.2": [[1043, "version-0-18-2"]], "Version 0.19": [[1044, null], [1044, "id1"]], "Version 0.19.1": [[1044, "version-0-19-1"]], "Version 0.19.2": [[1044, "version-0-19-2"]], "Version 0.20": [[1045, null]], "Version 0.20.0": [[1045, "version-0-20-0"]], "Version 0.20.1": [[1045, "version-0-20-1"]], "Version 0.20.2": [[1045, "version-0-20-2"]], "Version 0.20.3": [[1045, "version-0-20-3"]], "Version 0.20.4": [[1045, "version-0-20-4"]], "Version 0.21": [[1046, null]], "Version 0.21.0": [[1046, "version-0-21-0"]], "Version 0.21.1": [[1046, "version-0-21-1"]], "Version 0.21.2": [[1046, "version-0-21-2"]], "Version 0.21.3": [[1046, "version-0-21-3"]], "Version 0.22": [[1047, null]], "Version 0.22.0": [[1047, "version-0-22-0"]], "Version 0.22.1": [[1047, "version-0-22-1"]], "Version 0.22.2.post1": [[1047, "version-0-22-2-post1"]], "Version 0.23": [[1048, null]], "Version 0.23.0": [[1048, "version-0-23-0"]], "Version 0.23.1": [[1048, "version-0-23-1"]], "Version 0.23.2": [[1048, "version-0-23-2"]], "Version 0.24": [[1049, null]], "Version 0.24.0": [[1049, "version-0-24-0"]], "Version 0.24.1": [[1049, "version-0-24-1"]], "Version 0.24.2": [[1049, "version-0-24-2"]], "Version 0.4": [[1037, "version-0-4"]], "Version 0.5": [[1037, "version-0-5"]], "Version 0.6": [[1037, "version-0-6"]], "Version 0.7": [[1037, "version-0-7"]], "Version 0.8": [[1037, "version-0-8"]], "Version 0.9": [[1037, "version-0-9"]], "Version 1.0": [[1050, null]], "Version 1.0.0": [[1050, "version-1-0-0"]], "Version 1.0.1": [[1050, "version-1-0-1"]], "Version 1.0.2": [[1050, "version-1-0-2"]], "Version 1.1": [[1051, null]], "Version 1.1.0": [[1051, "version-1-1-0"]], "Version 1.1.1": [[1051, "version-1-1-1"]], "Version 1.1.2": [[1051, "version-1-1-2"]], "Version 1.1.3": [[1051, "version-1-1-3"]], "Version 1.2": [[1052, null]], "Version 1.2.0": [[1052, "version-1-2-0"]], "Version 1.2.1": [[1052, "version-1-2-1"]], "Version 1.2.2": [[1052, "version-1-2-2"]], "Version 1.3": [[1053, null]], "Version 1.3.0": [[1053, "version-1-3-0"]], "Version 1.3.1": [[1053, "version-1-3-1"]], "Version 1.3.2": [[1053, "version-1-3-2"]], "Version 1.4": [[1054, null]], "Version 1.4.0": [[1054, "version-1-4-0"]], "Version 1.4.1": [[1054, "version-1-4-1"]], "Version 1.4.2": [[1054, "version-1-4-2"]], "Version 1.5": [[1055, null]], "Version 1.5.0": [[1055, "version-1-5-0"]], "Version 1.5.1": [[1055, "version-1-5-1"]], "Version 1.5.2": [[1055, "version-1-5-2"]], "Version 1.6": [[1056, null]], "Version 1.6.0": [[1056, "version-1-6-0"]], "Video resources": [[380, "video-resources"]], "Videos": [[1024, "videos"]], "Visual evaluation of regression models": [[1006, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [343, "visualization"]], "Visualization of MLP weights on MNIST": [[310, null]], "Visualization of cluster hierarchy": [[412, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1034, null]], "Visualizations with Display Objects": [[243, null]], "Visualize Comparison": [[146, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[268, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[268, "visualize-our-data"]], "Visualize the learning curves": [[248, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[91, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[248, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[413, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[268, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[419, "voting-classifier"]], "Voting Regressor": [[419, "voting-regressor"]], "VotingClassifier": [[574, null]], "VotingRegressor": [[575, null]], "Warnings and Exceptions": [[389, "warnings-and-exceptions"]], "Ways to contribute": [[380, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[100, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1047, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[419, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[403, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[403, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[392, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[392, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[362, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[392, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[630, null]], "Who is using scikit-learn?": [[1030, null]], "Why are there so many different estimators for linear models?": [[392, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[392, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[392, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[392, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[392, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[392, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[392, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[392, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[392, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[419, "why-it-s-faster"]], "Why scikit?": [[392, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[392, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[392, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[398, "winpython-for-windows"]], "Windows": [[378, "windows"]], "Wine recognition dataset": [[377, "wine-recognition-dataset"]], "Workflow Overview": [[406, "workflow-overview"]], "Working on PRs to help review": [[379, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[379, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[185, "working-with-text-documents"], [353, null]], "Wrong causal interpretation": [[188, "wrong-causal-interpretation"]], "XOR dataset": [[347, "xor-dataset"]], "Yhat": [[1030, "id10"]], "Zero one loss": [[1006, "zero-one-loss"]], "Zopa": [[1030, "id27"]], "__sklearn_is_fitted__ as Developer API": [[133, null]], "_safe_indexing": [[931, null]], "accuracy_score": [[708, null]], "add_dummy_feature": [[891, null]], "additive_chi2_kernel": [[763, null]], "adjusted_mutual_info_score": [[709, null]], "adjusted_rand_score": [[710, null]], "affinity_propagation": [[458, null]], "all_displays": [[944, null]], "all_estimators": [[945, null]], "all_functions": [[946, null]], "as_float_array": [[933, null]], "assert_all_finite": [[934, null]], "auc": [[711, null]], "available_if": [[966, null]], "average_precision_score": [[712, null]], "balanced_accuracy_score": [[713, null]], "betaworks": [[1030, "id4"]], "binarize": [[892, null]], "brier_score_loss": [[714, null]], "calibration_curve": [[443, null]], "calinski_harabasz_score": [[715, null]], "check_X_y": [[935, null]], "check_array": [[936, null]], "check_consistent_length": [[937, null]], "check_cv": [[829, null]], "check_estimator": [[947, null]], "check_increasing": [[641, null]], "check_is_fitted": [[989, null]], "check_memory": [[990, null]], "check_random_state": [[938, null]], "check_scalar": [[939, null]], "check_scoring": [[716, null]], "check_symmetric": [[991, null]], "chi2": [[609, null]], "chi2_kernel": [[764, null]], "class_likelihood_ratios": [[717, null]], "classification_report": [[718, null]], "clear_data_home": [[490, null]], "clone": [[437, null]], "cluster_optics_dbscan": [[459, null]], "cluster_optics_xi": [[460, null]], "cohen_kappa_score": [[721, null]], "column_or_1d": [[992, null]], "completeness_score": [[722, null]], "compute_class_weight": [[940, null]], "compute_optics_graph": [[461, null]], "compute_sample_weight": [[941, null]], "config_context": [[472, null]], "confusion_matrix": [[723, null]], "consensus_score": [[724, null]], "contingency_matrix": [[719, null]], "cosine_distances": [[765, null]], "cosine_similarity": [[766, null]], "coverage_error": [[725, null]], "cross_val_predict": [[830, null]], "cross_val_score": [[831, null]], "cross_validate": [[832, null]], "d2_absolute_error_score": [[726, null]], "d2_log_loss_score": [[727, null]], "d2_pinball_score": [[728, null]], "d2_tweedie_score": [[729, null]], "davies_bouldin_score": [[730, null]], "dbscan": [[423, null]], "dbscan_clustering": [[88, "dbscan-clustering"]], "dcg_score": [[731, null]], "default_tags": [[942, null]], "delayed": [[972, null]], "density": [[950, null]], "deprecated": [[943, null]], "det_curve": [[732, null]], "dict_learning": [[550, null]], "dict_learning_online": [[551, null]], "distance_metrics": [[767, null]], "dump_svmlight_file": [[491, null]], "empirical_covariance": [[481, null]], "enable_halving_search_cv": [[584, null]], "enable_iterative_imputer": [[585, null]], "enet_path": [[686, null]], "estimate_bandwidth": [[462, null]], "estimator_html_repr": [[949, null]], "euclidean_distances": [[768, null]], "explained_variance_score": [[733, null]], "export_graphviz": [[921, null]], "export_text": [[922, null]], "extract_patches_2d": [[589, null]], "f1_score": [[734, null]], "f_classif": [[610, null]], "f_regression": [[611, null]], "fast_logdet": [[951, null]], "fastica": [[424, null]], "fbeta_score": [[735, null]], "fetch_20newsgroups": [[492, null]], "fetch_20newsgroups_vectorized": [[493, null]], "fetch_california_housing": [[494, null]], "fetch_covtype": [[495, null]], "fetch_file": [[496, null]], "fetch_kddcup99": [[497, null]], "fetch_lfw_pairs": [[498, null]], "fetch_lfw_people": [[499, null]], "fetch_olivetti_faces": [[500, null]], "fetch_openml": [[501, null]], "fetch_rcv1": [[502, null]], "fetch_species_distributions": [[503, null]], "fowlkes_mallows_score": [[736, null]], "gen_batches": [[956, null]], "gen_even_slices": [[957, null]], "get_config": [[631, null]], "get_data_home": [[504, null]], "get_feature_names_out Available in all Transformers": [[326, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[382, "get-params-and-set-params"]], "get_routing_for_object": [[964, null]], "get_scorer": [[737, null]], "get_scorer_names": [[738, null]], "get_tags": [[958, null]], "graphical_lasso": [[482, null]], "grid_to_graph": [[590, null]], "hamming_loss": [[739, null]], "has_fit_parameter": [[993, null]], "haversine_distances": [[769, null]], "hinge_loss": [[740, null]], "homogeneity_completeness_v_measure": [[741, null]], "homogeneity_score": [[742, null]], "img_to_graph": [[591, null]], "incr_mean_variance_axis": [[980, null]], "indexable": [[960, null]], "inplace_column_scale": [[981, null]], "inplace_csr_column_scale": [[982, null]], "inplace_csr_row_normalize_l1": [[987, null]], "inplace_csr_row_normalize_l2": [[988, null]], "inplace_row_scale": [[983, null]], "inplace_swap_column": [[984, null]], "inplace_swap_row": [[985, null]], "is_classifier": [[438, null]], "is_clusterer": [[439, null]], "is_multilabel": [[967, null]], "is_regressor": [[440, null]], "isotonic_regression": [[642, null]], "jaccard_score": [[743, null]], "johnson_lindenstrauss_min_dim": [[903, null]], "kNN-imputation of the missing values": [[184, "knn-imputation-of-the-missing-values"]], "k_means": [[463, null]], "kcachegrind": [[386, "kcachegrind"]], "kernel_metrics": [[770, null]], "kmeans_plusplus": [[464, null]], "kneighbors_graph": [[862, null]], "l1_min_c": [[916, null]], "label_binarize": [[893, null]], "label_ranking_average_precision_score": [[744, null]], "label_ranking_loss": [[745, null]], "laplacian_kernel": [[771, null]], "lars_path": [[687, null]], "lars_path_gram": [[688, null]], "lasso_path": [[689, null]], "learning_curve": [[833, null]], "ledoit_wolf": [[483, null]], "ledoit_wolf_shrinkage": [[484, null]], "linear_kernel": [[772, null]], "load_breast_cancer": [[505, null]], "load_diabetes": [[506, null]], "load_digits": [[507, null]], "load_files": [[508, null]], "load_iris": [[509, null]], "load_linnerud": [[510, null]], "load_sample_image": [[511, null]], "load_sample_images": [[512, null]], "load_svmlight_file": [[513, null]], "load_svmlight_files": [[514, null]], "load_wine": [[515, null]], "locally_linear_embedding": [[698, null]], "log_loss": [[746, null]], "macOS": [[378, "macos"]], "macOS compilers from Homebrew": [[378, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[378, "macos-compilers-from-conda-forge"]], "make_biclusters": [[516, null]], "make_blobs": [[385, "make-blobs"], [517, null]], "make_checkerboard": [[518, null]], "make_circles": [[519, null]], "make_classification": [[385, "make-classification"], [520, null]], "make_column_selector": [[470, null]], "make_column_transformer": [[471, null]], "make_friedman1": [[521, null]], "make_friedman2": [[522, null]], "make_friedman3": [[523, null]], "make_gaussian_quantiles": [[524, null]], "make_hastie_10_2": [[525, null]], "make_low_rank_matrix": [[526, null]], "make_moons": [[527, null]], "make_multilabel_classification": [[528, null]], "make_pipeline": [[870, null]], "make_regression": [[385, "make-regression"], [529, null]], "make_s_curve": [[530, null]], "make_scorer": [[747, null]], "make_sparse_coded_signal": [[531, null]], "make_sparse_spd_matrix": [[532, null]], "make_sparse_uncorrelated": [[533, null]], "make_spd_matrix": [[534, null]], "make_swiss_roll": [[535, null]], "make_union": [[871, null]], "manhattan_distances": [[773, null]], "matthews_corrcoef": [[748, null]], "max_error": [[749, null]], "maxabs_scale": [[894, null]], "mean_absolute_error": [[750, null]], "mean_absolute_percentage_error": [[751, null]], "mean_gamma_deviance": [[752, null]], "mean_pinball_loss": [[753, null]], "mean_poisson_deviance": [[754, null]], "mean_shift": [[465, null]], "mean_squared_error": [[755, null]], "mean_squared_log_error": [[756, null]], "mean_tweedie_deviance": [[757, null]], "mean_variance_axis": [[986, null]], "median_absolute_error": [[758, null]], "min_cluster_size": [[88, "min-cluster-size"]], "min_pos": [[932, null]], "min_samples": [[88, "min-samples"]], "minmax_scale": [[895, null]], "multilabel_confusion_matrix": [[759, null]], "murmurhash3_32": [[970, null]], "mutual_info_classif": [[612, null]], "mutual_info_regression": [[613, null]], "mutual_info_score": [[760, null]], "nan_euclidean_distances": [[774, null]], "ndcg_score": [[761, null]], "non_negative_factorization": [[552, null]], "normalize": [[896, null]], "normalized_mutual_info_score": [[762, null]], "oas": [[425, null]], "orthogonal_mp": [[690, null]], "orthogonal_mp_gram": [[691, null]], "pair_confusion_matrix": [[720, null]], "paired_cosine_distances": [[775, null]], "paired_distances": [[776, null]], "paired_euclidean_distances": [[777, null]], "paired_manhattan_distances": [[778, null]], "pairwise_distances": [[783, null]], "pairwise_distances_argmin": [[784, null]], "pairwise_distances_argmin_min": [[785, null]], "pairwise_distances_chunked": [[786, null]], "pairwise_kernels": [[779, null]], "parallel_backend": [[973, null]], "parametrize_with_checks": [[948, null]], "partial_dependence": [[638, null]], "permutation_importance": [[639, null]], "permutation_test_score": [[834, null]], "pickle, joblib, and cloudpickle": [[406, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[923, null]], "polynomial_kernel": [[780, null]], "power_transform": [[897, null]], "precision_recall_curve": [[787, null]], "precision_recall_fscore_support": [[788, null]], "precision_score": [[789, null]], "process_routing": [[965, null]], "quantile_transform": [[898, null]], "r2_score": [[790, null]], "r_regression": [[614, null]], "radius_neighbors_graph": [[863, null]], "rand_score": [[791, null]], "randomized_range_finder": [[952, null]], "randomized_svd": [[953, null]], "rbf_kernel": [[781, null]], "recall_score": [[792, null]], "reconstruct_from_patches_2d": [[592, null]], "register_parallel_backend": [[975, null]], "resample": [[976, null]], "ridge_regression": [[692, null]], "robust_scale": [[899, null]], "roc_auc_score": [[793, null]], "roc_curve": [[794, null]], "root_mean_squared_error": [[795, null]], "root_mean_squared_log_error": [[796, null]], "safe_mask": [[977, null]], "safe_sparse_dot": [[954, null]], "safe_sqr": [[978, null]], "sample_without_replacement": [[974, null]], "scale": [[900, null]], "set_config": [[907, null]], "show_versions": [[908, null]], "shrunk_covariance": [[485, null]], "shuffle": [[979, null]], "sigmoid_kernel": [[782, null]], "silhouette_samples": [[797, null]], "silhouette_score": [[798, null]], "single_source_shortest_path_length": [[959, null]], "sklearn": [[3, null], [1053, "sklearn"]], "sklearn.base": [[4, null], [1046, "sklearn-base"], [1047, "sklearn-base"], [1049, "sklearn-base"], [1050, "sklearn-base"], [1051, "sklearn-base"], [1052, "sklearn-base"], [1052, "id2"], [1052, "id10"], [1053, "sklearn-base"], [1054, "sklearn-base"], [1056, "sklearn-base"]], "sklearn.calibration": [[5, null], [1046, "sklearn-calibration"], [1047, "sklearn-calibration"], [1049, "sklearn-calibration"], [1050, "sklearn-calibration"], [1050, "id7"], [1051, "sklearn-calibration"], [1052, "sklearn-calibration"], [1052, "id11"], [1053, "sklearn-calibration"], [1053, "id7"], [1054, "sklearn-calibration"], [1054, "id4"], [1055, "sklearn-calibration"], [1055, "id7"]], "sklearn.cluster": [[6, null], [1045, "sklearn-cluster"], [1045, "id2"], [1045, "id11"], [1045, "id24"], [1046, "sklearn-cluster"], [1046, "id8"], [1047, "sklearn-cluster"], [1047, "id5"], [1048, "sklearn-cluster"], [1048, "id2"], [1048, "id5"], [1049, "sklearn-cluster"], [1050, "sklearn-cluster"], [1050, "id1"], [1050, "id8"], [1051, "sklearn-cluster"], [1051, "id8"], [1052, "sklearn-cluster"], [1052, "id12"], [1053, "sklearn-cluster"], [1053, "id8"], [1054, "sklearn-cluster"], [1054, "id5"], [1055, "sklearn-cluster"], [1056, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1045, "sklearn-compose"], [1045, "id3"], [1045, "id6"], [1045, "id12"], [1045, "id25"], [1046, "sklearn-compose"], [1046, "id9"], [1047, "sklearn-compose"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1049, "id5"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1053, "sklearn-compose"], [1054, "sklearn-compose"], [1054, "id6"], [1055, "sklearn-compose"], [1055, "id3"], [1055, "id8"], [1056, "sklearn-compose"]], "sklearn.covariance": [[8, null], [1045, "sklearn-covariance"], [1045, "id26"], [1049, "sklearn-covariance"], [1050, "sklearn-covariance"], [1051, "sklearn-covariance"], [1053, "sklearn-covariance"], [1054, "sklearn-covariance"], [1056, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1047, "sklearn-cross-decomposition"], [1049, "sklearn-cross-decomposition"], [1049, "id6"], [1051, "sklearn-cross-decomposition"], [1053, "sklearn-cross-decomposition"], [1055, "sklearn-cross-decomposition"], [1056, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1045, "sklearn-datasets"], [1045, "id13"], [1045, "id27"], [1046, "sklearn-datasets"], [1046, "id10"], [1047, "sklearn-datasets"], [1048, "sklearn-datasets"], [1049, "sklearn-datasets"], [1050, "sklearn-datasets"], [1050, "id9"], [1051, "sklearn-datasets"], [1051, "id9"], [1052, "sklearn-datasets"], [1052, "id13"], [1053, "sklearn-datasets"], [1053, "id9"], [1054, "sklearn-datasets"], [1055, "sklearn-datasets"], [1056, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1045, "sklearn-decomposition"], [1045, "id4"], [1045, "id14"], [1045, "id28"], [1046, "sklearn-decomposition"], [1046, "id11"], [1047, "sklearn-decomposition"], [1048, "sklearn-decomposition"], [1048, "id6"], [1049, "sklearn-decomposition"], [1049, "id7"], [1050, "sklearn-decomposition"], [1050, "id10"], [1051, "sklearn-decomposition"], [1051, "id10"], [1052, "sklearn-decomposition"], [1052, "id14"], [1053, "sklearn-decomposition"], [1053, "id10"], [1054, "sklearn-decomposition"], [1055, "sklearn-decomposition"], [1055, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1045, "sklearn-discriminant-analysis"], [1046, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"], [1052, "sklearn-discriminant-analysis"], [1053, "sklearn-discriminant-analysis"], [1056, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1045, "sklearn-dummy"], [1046, "sklearn-dummy"], [1047, "sklearn-dummy"], [1050, "sklearn-dummy"], [1051, "sklearn-dummy"], [1055, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1045, "sklearn-ensemble"], [1045, "id29"], [1046, "sklearn-ensemble"], [1046, "id12"], [1047, "sklearn-ensemble"], [1048, "sklearn-ensemble"], [1048, "id7"], [1049, "sklearn-ensemble"], [1049, "id8"], [1050, "sklearn-ensemble"], [1050, "id2"], [1050, "id11"], [1051, "sklearn-ensemble"], [1052, "sklearn-ensemble"], [1052, "id3"], [1052, "id15"], [1053, "sklearn-ensemble"], [1053, "id11"], [1054, "sklearn-ensemble"], [1054, "id7"], [1055, "sklearn-ensemble"], [1056, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1049, "sklearn-exceptions"], [1053, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1046, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1045, "sklearn-feature-extraction"], [1045, "id15"], [1045, "id30"], [1046, "sklearn-feature-extraction"], [1047, "sklearn-feature-extraction"], [1048, "sklearn-feature-extraction"], [1048, "id8"], [1049, "sklearn-feature-extraction"], [1049, "id9"], [1050, "sklearn-feature-extraction"], [1050, "id12"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"], [1054, "sklearn-feature-extraction"], [1055, "sklearn-feature-extraction"]], "sklearn.feature_extraction.text": [[1056, "sklearn-feature-extraction-text"]], "sklearn.feature_selection": [[18, null], [1045, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1048, "sklearn-feature-selection"], [1049, "sklearn-feature-selection"], [1050, "sklearn-feature-selection"], [1050, "id13"], [1051, "sklearn-feature-selection"], [1051, "id2"], [1051, "id11"], [1052, "sklearn-feature-selection"], [1052, "id16"], [1053, "sklearn-feature-selection"], [1053, "id12"], [1054, "sklearn-feature-selection"], [1055, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1045, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1049, "id10"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1052, "sklearn-gaussian-process"], [1053, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1045, "sklearn-impute"], [1045, "id31"], [1046, "sklearn-impute"], [1046, "id13"], [1047, "sklearn-impute"], [1047, "id6"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1051, "id12"], [1052, "sklearn-impute"], [1053, "sklearn-impute"], [1053, "id13"], [1054, "sklearn-impute"], [1055, "sklearn-impute"], [1056, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1046, "sklearn-inspection"], [1046, "id3"], [1046, "id14"], [1047, "sklearn-inspection"], [1047, "id7"], [1048, "sklearn-inspection"], [1048, "id11"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1052, "id17"], [1053, "sklearn-inspection"], [1054, "sklearn-inspection"], [1054, "id8"], [1055, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1045, "sklearn-isotonic"], [1046, "sklearn-isotonic"], [1047, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1051, "sklearn-isotonic"], [1052, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1047, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"], [1052, "sklearn-kernel-approximation"], [1053, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1054, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1045, "sklearn-linear-model"], [1045, "id16"], [1045, "id32"], [1046, "sklearn-linear-model"], [1046, "id15"], [1047, "sklearn-linear-model"], [1048, "sklearn-linear-model"], [1048, "id9"], [1049, "sklearn-linear-model"], [1049, "id11"], [1050, "sklearn-linear-model"], [1050, "id3"], [1050, "id14"], [1051, "sklearn-linear-model"], [1051, "id13"], [1052, "sklearn-linear-model"], [1052, "id18"], [1053, "sklearn-linear-model"], [1054, "sklearn-linear-model"], [1054, "id9"], [1055, "sklearn-linear-model"], [1056, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"], [1050, "sklearn-manifold"], [1050, "id15"], [1051, "sklearn-manifold"], [1051, "id14"], [1052, "sklearn-manifold"], [1052, "id19"], [1053, "sklearn-manifold"], [1055, "sklearn-manifold"], [1056, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1045, "sklearn-metrics"], [1045, "id17"], [1045, "id33"], [1046, "sklearn-metrics"], [1046, "id4"], [1046, "id16"], [1047, "sklearn-metrics"], [1047, "id2"], [1047, "id8"], [1048, "sklearn-metrics"], [1048, "id10"], [1049, "sklearn-metrics"], [1049, "id2"], [1049, "id12"], [1050, "sklearn-metrics"], [1050, "id16"], [1051, "sklearn-metrics"], [1051, "id3"], [1051, "id15"], [1052, "sklearn-metrics"], [1053, "sklearn-metrics"], [1053, "id2"], [1053, "id14"], [1054, "sklearn-metrics"], [1055, "sklearn-metrics"], [1055, "id4"], [1055, "id10"], [1056, "sklearn-metrics"]], "sklearn.mixture": [[28, null], [1045, "sklearn-mixture"], [1045, "id34"], [1046, "sklearn-mixture"], [1050, "sklearn-mixture"], [1051, "sklearn-mixture"], [1053, "sklearn-mixture"], [1053, "id15"], [1055, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1045, "sklearn-model-selection"], [1045, "id35"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1047, "id9"], [1047, "id13"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1049, "id13"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1052, "id20"], [1053, "sklearn-model-selection"], [1054, "sklearn-model-selection"], [1055, "sklearn-model-selection"], [1055, "id11"], [1056, "sklearn-model-selection"]], "sklearn.multiclass": [[30, null], [1046, "sklearn-multiclass"], [1049, "sklearn-multiclass"], [1050, "sklearn-multiclass"], [1051, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"], [1049, "sklearn-multioutput"], [1049, "id14"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"], [1054, "sklearn-multioutput"], [1055, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1045, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1047, "id10"], [1048, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"], [1052, "sklearn-naive-bayes"], [1053, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1045, "sklearn-neighbors"], [1045, "id7"], [1045, "id18"], [1045, "id36"], [1046, "sklearn-neighbors"], [1046, "id5"], [1046, "id17"], [1047, "sklearn-neighbors"], [1047, "id11"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"], [1050, "id4"], [1050, "id17"], [1051, "sklearn-neighbors"], [1052, "sklearn-neighbors"], [1053, "sklearn-neighbors"], [1053, "id16"], [1054, "sklearn-neighbors"], [1055, "sklearn-neighbors"], [1056, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1052, "sklearn-neural-network"], [1052, "id21"], [1053, "sklearn-neural-network"], [1056, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1050, "id18"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1053, "sklearn-pipeline"], [1055, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1045, "sklearn-preprocessing"], [1045, "id19"], [1045, "id37"], [1046, "sklearn-preprocessing"], [1046, "id18"], [1047, "sklearn-preprocessing"], [1047, "id12"], [1048, "sklearn-preprocessing"], [1049, "sklearn-preprocessing"], [1049, "id15"], [1050, "sklearn-preprocessing"], [1050, "id19"], [1051, "sklearn-preprocessing"], [1051, "id4"], [1051, "id16"], [1052, "sklearn-preprocessing"], [1052, "id4"], [1052, "id22"], [1053, "sklearn-preprocessing"], [1053, "id17"], [1054, "sklearn-preprocessing"], [1054, "id10"], [1055, "sklearn-preprocessing"], [1056, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1051, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1047, "sklearn-semi-supervised"], [1048, "sklearn-semi-supervised"], [1049, "sklearn-semi-supervised"], [1049, "id3"], [1049, "id16"], [1053, "sklearn-semi-supervised"], [1056, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1045, "sklearn-svm"], [1045, "id38"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1050, "id20"], [1051, "sklearn-svm"], [1052, "sklearn-svm"], [1053, "sklearn-svm"], [1055, "sklearn-svm"]], "sklearn.tree": [[40, null], [1045, "sklearn-tree"], [1046, "sklearn-tree"], [1046, "id19"], [1047, "sklearn-tree"], [1048, "sklearn-tree"], [1049, "sklearn-tree"], [1049, "id17"], [1050, "sklearn-tree"], [1050, "id21"], [1051, "sklearn-tree"], [1051, "id5"], [1051, "id17"], [1052, "sklearn-tree"], [1052, "id5"], [1052, "id23"], [1053, "sklearn-tree"], [1053, "id3"], [1053, "id18"], [1054, "sklearn-tree"], [1054, "id11"], [1055, "sklearn-tree"], [1055, "id12"], [1056, "sklearn-tree"]], "sklearn.utils": [[41, null], [1045, "sklearn-utils"], [1045, "id20"], [1045, "id39"], [1046, "sklearn-utils"], [1047, "sklearn-utils"], [1047, "id14"], [1048, "sklearn-utils"], [1048, "id12"], [1049, "sklearn-utils"], [1049, "id18"], [1050, "sklearn-utils"], [1050, "id5"], [1050, "id22"], [1051, "sklearn-utils"], [1051, "id18"], [1052, "sklearn-utils"], [1052, "id6"], [1052, "id24"], [1053, "sklearn-utils"], [1054, "sklearn-utils"], [1054, "id12"], [1055, "sklearn-utils"], [1055, "id13"], [1056, "sklearn-utils"]], "sklearn.utils.check_estimators": [[1056, "sklearn-utils-check-estimators"]], "sklearn.utils.sparsefuncs": [[1046, "sklearn-utils-sparsefuncs"]], "skops.io": [[406, "skops-io"]], "smacof": [[699, null]], "solido": [[1030, "id23"]], "sort_graph_by_row_values": [[864, null]], "sparse_encode": [[553, null]], "spectral_clustering": [[466, null]], "spectral_embedding": [[700, null]], "t-SNE: The effect of various perplexity values on the shape": [[240, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1003, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[799, null]], "train_test_split": [[835, null]], "trustworthiness": [[701, null]], "type_of_target": [[968, null]], "unique_labels": [[969, null]], "v_measure_score": [[800, null]], "validate_data": [[994, null]], "validation_curve": [[836, null]], "ward_tree": [[467, null]], "weighted_mode": [[955, null]], "zero_one_loss": [[801, null]], "\u201cStatlog\u201d German credit dataset": [[267, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[394, "term-1d", true]], "1d array": [[394, "term-1d-array", true]], "2d": [[394, "term-2d", true]], "2d array": [[394, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[470, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[943, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[971, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[394, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[931, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[962, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[963, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[962, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[458, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[444, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[445, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[944, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[945, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[946, "sklearn.utils.discovery.all_functions", false]], "api": [[394, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[649, "sklearn.linear_model.ARDRegression", false]], "array-like": [[394, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[933, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[934, "sklearn.utils.assert_all_finite", false]], "attribute": [[394, "term-attribute", true]], "attributes": [[394, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[711, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[966, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[394, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[849, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[426, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[802, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[650, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[865, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[427, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[427, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[455, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[457, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.Binarizer", false]], "binary": [[394, "term-binary", true]], "birch (class in sklearn.cluster)": [[446, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[714, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[924, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[441, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[443, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[442, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[394, "term-callable", true]], "categorical feature": [[394, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[486, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[936, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[937, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[947, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[641, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[990, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[938, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[939, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[716, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[991, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[935, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[717, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[394, "term-class_weight", true]], "classes_": [[394, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[598, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[599, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[679, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[680, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[804, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[805, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[808, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[819, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[869, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[718, "sklearn.metrics.classification_report", false]], "classifier": [[394, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[840, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[429, "sklearn.base.ClassifierMixin", false]], "classifiers": [[394, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[925, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[428, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[490, "sklearn.datasets.clear_data_home", false]], "clone": [[394, "term-clone", true]], "clone() (in module sklearn.base)": [[437, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[394, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[459, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[460, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[394, "term-clusterer", true]], "clusterers": [[394, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[430, "sklearn.base.ClusterMixin", false]], "coef_": [[394, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[911, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[912, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[913, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[914, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[915, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[468, "sklearn.compose.ColumnTransformer", false]], "common tests": [[394, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.completeness_score", false]], "components_": [[394, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[940, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[461, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[941, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[472, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[723, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[394, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[961, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[962, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[719, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[394, "term-continuous", true]], "continuous multi-output": [[394, "term-continuous-multi-output", true]], "continuous multioutput": [[394, "term-continuous-multioutput", true]], "convergencewarning": [[576, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[593, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[725, "sklearn.metrics.coverage_error", false]], "cross fitting": [[394, "term-0", true]], "cross validation": [[394, "term-1", true]], "cross-fitting": [[394, "term-cross-fitting", true]], "cross-validation": [[394, "term-cross-validation", true]], "cross-validation estimator": [[394, "term-cross-validation-estimator", true]], "cross-validation generator": [[394, "term-cross-validation-generator", true]], "cross-validation splitter": [[394, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.cross_validate", false]], "cv": [[394, "term-cv", true]], "cv splitter": [[394, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[394, "term-data-leakage", true]], "data type": [[394, "term-data-type", true]], "dataconversionwarning": [[577, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[578, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[448, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[423, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[450, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.dcg_score", false]], "decision_function": [[394, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[636, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[917, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[918, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[942, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[972, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[394, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[431, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[943, "sklearn.utils.deprecated", false]], "deprecation": [[394, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[732, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[550, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[551, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[536, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[586, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[394, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[971, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[971, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[704, "sklearn.metrics.DistanceMetric", false]], "docstring": [[394, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[394, "term-double-underscore", true]], "double underscore notation": [[394, "term-double-underscore-notation", true]], "dtype": [[394, "term-dtype", true]], "duck typing": [[394, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[556, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[557, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[491, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[394, "term-early-stopping", true]], "efficiencywarning": [[579, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[651, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[473, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[394, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[481, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[474, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[462, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[394, "term-estimator", true]], "estimator instance": [[394, "term-estimator-instance", true]], "estimator tags": [[394, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[949, "sklearn.utils.estimator_html_repr", false]], "estimators": [[394, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[560, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[561, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[562, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[563, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[568, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[569, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[570, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[571, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[394, "term-evaluation-metric", true]], "evaluation metrics": [[394, "term-evaluation-metrics", true]], "examples": [[394, "term-examples", true]], "experimental": [[394, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[921, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[922, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[919, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[920, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[537, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[951, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[538, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[424, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.fbeta_score", false]], "feature": [[394, "term-feature", true]], "feature extractor": [[394, "term-feature-extractor", true]], "feature extractors": [[394, "term-feature-extractors", true]], "feature vector": [[394, "term-feature-vector", true]], "feature_importances_": [[394, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[558, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[559, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[562, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[563, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[564, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[565, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[569, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[570, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[571, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[917, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[918, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[919, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[920, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[868, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[869, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[449, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[587, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[394, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[868, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[503, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[394, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[444, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[445, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[448, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[450, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[452, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[454, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[456, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[394, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[449, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[430, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[434, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[444, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[445, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[448, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[450, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[452, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[454, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[456, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[394, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[436, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[580, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[394, "term-fitted", true]], "fitting": [[394, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[804, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[971, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[442, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[636, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[637, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[702, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[703, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[705, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[706, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[707, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[811, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[828, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[442, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[702, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[703, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[705, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[706, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[707, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.fromkeys", false]], "function": [[394, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[394, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[653, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[803, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[847, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[901, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[956, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[957, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[631, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[504, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[394, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[428, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[433, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[427, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[426, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[444, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[445, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[448, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[450, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[452, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[454, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[456, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[806, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[807, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[810, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[812, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[813, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[814, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[815, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[818, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[820, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[821, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[822, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[823, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[824, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[825, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[826, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[704, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[394, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[806, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[807, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[810, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[812, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[813, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[814, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[815, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[818, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[820, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[821, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[822, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[823, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[824, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[825, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[826, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[394, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[426, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[444, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[445, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[448, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[450, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[452, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[454, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[456, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[964, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[737, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[738, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[427, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[427, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[958, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[482, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[475, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[476, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[805, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[806, "sklearn.model_selection.GroupKFold", false]], "groups": [[394, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[807, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[808, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[809, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[739, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[993, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[594, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[450, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[741, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[654, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[394, "term-hyper-parameter", true]], "hyperparameter": [[394, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[591, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[394, "term-imputation", true]], "impute": [[394, "term-impute", true]], "inconsistentversionwarning": [[581, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[394, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[960, "sklearn.utils.indexable", false]], "induction": [[394, "term-induction", true]], "inductive": [[394, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[882, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[883, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[890, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[987, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[988, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[985, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[926, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[438, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[439, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[967, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[440, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[568, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[693, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[642, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[640, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[632, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.jaccard_score", false]], "joblib": [[394, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[903, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[463, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KDTree", false]], "kernel": [[394, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[854, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[648, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[810, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[451, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[464, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[862, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[853, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[633, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[916, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[394, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[744, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[745, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[904, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[394, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[905, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[655, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[657, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[541, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[394, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[814, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[815, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[483, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[484, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[477, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[909, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[910, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[515, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[698, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[694, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[855, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[746, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[470, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[471, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[870, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[747, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[535, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[871, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[748, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.max_error", false]], "max_iter": [[394, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[695, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[465, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[757, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[986, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[452, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[758, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[394, "term-memmapping", true]], "memory": [[394, "term-memory", true]], "memory map": [[394, "term-memory-map", true]], "memory mapping": [[394, "term-memory-mapping", true]], "meta-estimator": [[394, "term-meta-estimator", true]], "meta-estimators": [[394, "term-meta-estimators", true]], "metadata": [[394, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[961, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[962, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[394, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[432, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[394, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[963, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[394, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[932, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[478, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[453, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[543, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[394, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[634, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[866, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[867, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [584, "module-sklearn.experimental.enable_halving_search_cv", false], [585, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[394, "term-multi-class", true]], "multi-class multi-output": [[394, "term-multi-class-multi-output", true]], "multi-label": [[394, "term-multi-label", true]], "multi-output": [[394, "term-multi-output", true]], "multi-output continuous": [[394, "term-multi-output-continuous", true]], "multi-output multi-class": [[394, "term-multi-output-multi-class", true]], "multiclass": [[394, "term-multiclass", true]], "multiclass multioutput": [[394, "term-multiclass-multioutput", true]], "multilabel": [[394, "term-multilabel", true]], "multilabel indicator matrices": [[394, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[394, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[838, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[759, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[848, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[394, "term-multioutput", true]], "multioutput continuous": [[394, "term-multioutput-continuous", true]], "multioutput multiclass": [[394, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[841, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[842, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[665, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[667, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[970, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[837, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[838, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[394, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[547, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[394, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[469, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[547, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[572, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[573, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[574, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[575, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[602, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[805, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[808, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[819, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[868, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[869, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[394, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[394, "term-n_iter_no_change", true]], "n_jobs": [[394, "term-n_jobs", true]], "n_outputs": [[394, "term-n_outputs", true]], "n_samples": [[394, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[911, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[912, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[913, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[914, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[915, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[394, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[572, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[573, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[574, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[575, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[869, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[468, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[394, "term-narrative-docs", true]], "narrative documentation": [[394, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[856, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[857, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[545, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[552, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[762, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[582, "sklearn.exceptions.NotFittedError", false]], "np": [[394, "term-np", true]], "nusvc (class in sklearn.svm)": [[911, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[912, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[479, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[425, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[913, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[433, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[837, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[838, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[394, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[454, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[394, "term-out-of-core", true]], "outlier detector": [[394, "term-outlier-detector", true]], "outlier detectors": [[394, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[434, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[839, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[394, "term-outputs", true]], "pair": [[394, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[720, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[394, "term-pairwise-metric", true]], "pairwise metrics": [[394, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[783, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[785, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[786, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[971, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[973, "sklearn.utils.parallel_backend", false]], "param": [[394, "term-param", true]], "parameter": [[394, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[816, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[394, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[817, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[948, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[394, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[638, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[394, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[637, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[651, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[652, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[657, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[658, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[667, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[546, "sklearn.decomposition.PCA", false]], "pd": [[394, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[673, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[639, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[869, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[442, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[636, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[637, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[702, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[703, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[705, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[706, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[707, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[811, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[828, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[923, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[487, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[488, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[489, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[394, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[884, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[787, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[788, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[394, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[818, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[394, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[444, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[452, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[394, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[394, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[394, "term-predictor", true]], "predictors": [[394, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[971, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[911, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[914, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[911, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[914, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[965, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[614, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[863, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.rand_score", false]], "random_state": [[394, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[952, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[819, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[571, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[592, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[394, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[975, "sklearn.utils.register_parallel_backend", false]], "regressor": [[394, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[843, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[435, "sklearn.base.RegressorMixin", false]], "regressors": [[394, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[927, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[820, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[821, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[976, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[677, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[692, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[679, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[680, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[794, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[707, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[795, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[796, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[962, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[394, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[977, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[954, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[978, "sklearn.utils.safe_sqr", false]], "sample": [[394, "term-sample", true]], "sample properties": [[394, "term-sample-properties", true]], "sample property": [[394, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[394, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[974, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[394, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[900, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[394, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[394, "term-scikit-learn-contrib", true]], "score": [[394, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[429, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[431, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[435, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[394, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[394, "term-scorer", true]], "scoring": [[394, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[394, "term-semi-supervised", true]], "semi-supervised learning": [[394, "term-semi-supervised-learning", true]], "semisupervised": [[394, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[907, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[448, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[436, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[394, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[426, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[444, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[445, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[448, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[450, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[452, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[454, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[455, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[456, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[457, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[568, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[619, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[623, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[624, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[626, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[627, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[629, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[676, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[695, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[696, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[697, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[802, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[803, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[854, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[855, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[857, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[906, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[913, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[841, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[441, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[469, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[473, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[474, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[475, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[476, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[477, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[478, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[479, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[480, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[556, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[557, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[560, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[561, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[562, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[563, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[569, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[570, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[615, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[616, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[648, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[649, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[650, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[651, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[652, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[653, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[654, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[655, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[656, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[657, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[658, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[659, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[660, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[661, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[662, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[665, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[666, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[667, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[668, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[669, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[674, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[675, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[677, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[679, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[680, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[678, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[684, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[685, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[804, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[837, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[838, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[839, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[840, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[842, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[843, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[844, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[845, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[846, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[847, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[848, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[851, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[852, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[856, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[859, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[860, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[866, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[867, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[904, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[905, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[910, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[911, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[912, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[914, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[915, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[917, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[918, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[919, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[920, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[806, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[807, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[812, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[814, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[823, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[681, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[682, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[683, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[908, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[485, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[480, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[979, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[822, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[782, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[797, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[798, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[635, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[959, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[584, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[585, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[394, "term-SLEP", true]], "sleps": [[394, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[699, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[864, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[394, "term-sparse-graph", true]], "sparse matrix": [[394, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[651, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[657, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[665, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[667, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[553, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[547, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[548, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[902, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[663, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[664, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[671, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[672, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[673, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[681, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[682, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[683, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[909, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[466, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[700, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[455, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[456, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[457, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[696, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.SplineTransformer", false]], "split": [[394, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[806, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[807, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[810, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[812, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[813, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[814, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[815, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[818, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[820, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[821, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[822, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[823, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[824, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[825, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[826, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[572, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[573, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[565, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[567, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[564, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[566, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[558, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[559, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[394, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[823, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[824, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[825, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[394, "term-supervised", true]], "supervised learning": [[394, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[914, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[915, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[928, "sklearn.utils.Tags", false]], "target": [[394, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[890, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[394, "term-targets", true]], "targettags (class in sklearn.utils)": [[929, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[595, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[684, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[617, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[618, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[619, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[621, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[620, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[623, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[624, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[625, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[626, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[628, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[627, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[629, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[602, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[826, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[799, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.train_test_split", false]], "transduction": [[394, "term-transduction", true]], "transductive": [[394, "term-transductive", true]], "transform": [[394, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[446, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[447, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[449, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[451, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[453, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[468, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[486, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[487, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[488, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[489, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[536, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[537, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[538, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[539, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[540, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[541, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[542, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[543, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[544, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[545, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[546, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[547, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[548, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[549, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[554, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[571, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[572, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[573, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[574, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[575, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[586, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[587, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[588, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[593, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[594, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[595, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[596, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[597, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[598, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[599, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[600, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[601, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[602, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[603, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[604, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[606, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[605, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[607, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[608, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[632, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[633, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[634, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[635, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[640, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[643, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[644, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[645, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[646, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[647, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[693, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[694, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[805, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[808, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[809, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[819, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[853, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[858, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[861, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[865, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[868, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[869, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[872, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[873, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[874, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[875, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[876, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[877, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[878, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[879, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[880, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[881, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[882, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[883, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[884, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[885, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[886, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[887, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[888, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[889, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[890, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[901, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[902, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[469, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[394, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[436, "sklearn.base.TransformerMixin", false]], "transformers": [[394, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[930, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[549, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[701, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[697, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[827, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[685, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[849, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[850, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[968, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[583, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[969, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[394, "term-unlabeled", true]], "unlabeled data": [[394, "term-unlabeled-data", true]], "unsupervised": [[394, "term-unsupervised", true]], "unsupervised learning": [[394, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[800, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[994, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[962, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[836, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[828, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[622, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[924, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[608, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[394, "term-vectorizer", true]], "vectorizers": [[394, "term-vectorizers", true]], "verbose": [[394, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[574, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[575, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[467, "sklearn.cluster.ward_tree", false]], "warm_start": [[394, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[955, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[630, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[394, "term-X", true]], "xt": [[394, "term-Xt", true]], "y": [[394, "term-Y", true], [394, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[801, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [472, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [631, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [907, 4, 1, "", "set_config"], [908, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[426, 1, 1, "", "BaseEstimator"], [427, 1, 1, "", "BiclusterMixin"], [428, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [429, 1, 1, "", "ClassifierMixin"], [430, 1, 1, "", "ClusterMixin"], [431, 1, 1, "", "DensityMixin"], [432, 1, 1, "", "MetaEstimatorMixin"], [433, 1, 1, "", "OneToOneFeatureMixin"], [434, 1, 1, "", "OutlierMixin"], [435, 1, 1, "", "RegressorMixin"], [436, 1, 1, "", "TransformerMixin"], [437, 4, 1, "", "clone"], [438, 4, 1, "", "is_classifier"], [439, 4, 1, "", "is_clusterer"], [440, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[426, 2, 1, "", "get_metadata_routing"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[427, 3, 1, "", "biclusters_"], [427, 2, 1, "", "get_indices"], [427, 2, 1, "", "get_shape"], [427, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[428, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[429, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[430, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[431, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[433, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[434, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[435, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[436, 2, 1, "", "fit_transform"], [436, 2, 1, "", "set_output"]], "sklearn.calibration": [[441, 1, 1, "", "CalibratedClassifierCV"], [442, 1, 1, "", "CalibrationDisplay"], [443, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "predict_proba"], [441, 2, 1, "", "score"], [441, 2, 1, "", "set_fit_request"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[442, 2, 1, "", "from_estimator"], [442, 2, 1, "", "from_predictions"], [442, 2, 1, "", "plot"]], "sklearn.cluster": [[444, 1, 1, "", "AffinityPropagation"], [445, 1, 1, "", "AgglomerativeClustering"], [446, 1, 1, "", "Birch"], [447, 1, 1, "", "BisectingKMeans"], [448, 1, 1, "", "DBSCAN"], [449, 1, 1, "", "FeatureAgglomeration"], [450, 1, 1, "", "HDBSCAN"], [451, 1, 1, "", "KMeans"], [452, 1, 1, "", "MeanShift"], [453, 1, 1, "", "MiniBatchKMeans"], [454, 1, 1, "", "OPTICS"], [455, 1, 1, "", "SpectralBiclustering"], [456, 1, 1, "", "SpectralClustering"], [457, 1, 1, "", "SpectralCoclustering"], [458, 4, 1, "", "affinity_propagation"], [459, 4, 1, "", "cluster_optics_dbscan"], [460, 4, 1, "", "cluster_optics_xi"], [461, 4, 1, "", "compute_optics_graph"], [423, 4, 1, "", "dbscan"], [462, 4, 1, "", "estimate_bandwidth"], [463, 4, 1, "", "k_means"], [464, 4, 1, "", "kmeans_plusplus"], [465, 4, 1, "", "mean_shift"], [466, 4, 1, "", "spectral_clustering"], [467, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "partial_fit"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "set_fit_request"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[449, 2, 1, "", "fit"], [449, 3, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "inverse_transform"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[450, 2, 1, "", "dbscan_clustering"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "fit_transform"], [451, 2, 1, "", "get_feature_names_out"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "predict"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_fit_request"], [451, 2, 1, "", "set_output"], [451, 2, 1, "", "set_params"], [451, 2, 1, "", "set_score_request"], [451, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "predict"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "fit_transform"], [453, 2, 1, "", "get_feature_names_out"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "partial_fit"], [453, 2, 1, "", "predict"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_fit_request"], [453, 2, 1, "", "set_output"], [453, 2, 1, "", "set_params"], [453, 2, 1, "", "set_partial_fit_request"], [453, 2, 1, "", "set_score_request"], [453, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[455, 3, 1, "", "biclusters_"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_indices"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_shape"], [455, 2, 1, "", "get_submatrix"], [455, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_predict"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[457, 3, 1, "", "biclusters_"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_indices"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_shape"], [457, 2, 1, "", "get_submatrix"], [457, 2, 1, "", "set_params"]], "sklearn.compose": [[468, 1, 1, "", "ColumnTransformer"], [469, 1, 1, "", "TransformedTargetRegressor"], [470, 1, 1, "", "make_column_selector"], [471, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[468, 2, 1, "", "fit"], [468, 2, 1, "", "fit_transform"], [468, 2, 1, "", "get_feature_names_out"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 3, 1, "", "named_transformers_"], [468, 2, 1, "", "set_output"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 3, 1, "", "n_features_in_"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[470, 2, 1, "", "__call__"]], "sklearn.covariance": [[473, 1, 1, "", "EllipticEnvelope"], [474, 1, 1, "", "EmpiricalCovariance"], [475, 1, 1, "", "GraphicalLasso"], [476, 1, 1, "", "GraphicalLassoCV"], [477, 1, 1, "", "LedoitWolf"], [478, 1, 1, "", "MinCovDet"], [479, 1, 1, "", "OAS"], [480, 1, 1, "", "ShrunkCovariance"], [481, 4, 1, "", "empirical_covariance"], [482, 4, 1, "", "graphical_lasso"], [483, 4, 1, "", "ledoit_wolf"], [484, 4, 1, "", "ledoit_wolf_shrinkage"], [425, 4, 1, "", "oas"], [485, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[473, 2, 1, "", "correct_covariance"], [473, 2, 1, "", "decision_function"], [473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "fit_predict"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "predict"], [473, 2, 1, "", "reweight_covariance"], [473, 2, 1, "", "score"], [473, 2, 1, "", "score_samples"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[478, 2, 1, "", "correct_covariance"], [478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "reweight_covariance"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[480, 2, 1, "", "error_norm"], [480, 2, 1, "", "fit"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "get_precision"], [480, 2, 1, "", "mahalanobis"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[486, 1, 1, "", "CCA"], [487, 1, 1, "", "PLSCanonical"], [488, 1, 1, "", "PLSRegression"], [489, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[486, 2, 1, "", "fit"], [486, 2, 1, "", "fit_transform"], [486, 2, 1, "", "get_feature_names_out"], [486, 2, 1, "", "get_metadata_routing"], [486, 2, 1, "", "get_params"], [486, 2, 1, "", "inverse_transform"], [486, 2, 1, "", "predict"], [486, 2, 1, "", "score"], [486, 2, 1, "", "set_output"], [486, 2, 1, "", "set_params"], [486, 2, 1, "", "set_predict_request"], [486, 2, 1, "", "set_score_request"], [486, 2, 1, "", "set_transform_request"], [486, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[487, 2, 1, "", "fit"], [487, 2, 1, "", "fit_transform"], [487, 2, 1, "", "get_feature_names_out"], [487, 2, 1, "", "get_metadata_routing"], [487, 2, 1, "", "get_params"], [487, 2, 1, "", "inverse_transform"], [487, 2, 1, "", "predict"], [487, 2, 1, "", "score"], [487, 2, 1, "", "set_output"], [487, 2, 1, "", "set_params"], [487, 2, 1, "", "set_predict_request"], [487, 2, 1, "", "set_score_request"], [487, 2, 1, "", "set_transform_request"], [487, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_metadata_routing"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "inverse_transform"], [488, 2, 1, "", "predict"], [488, 2, 1, "", "score"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "set_predict_request"], [488, 2, 1, "", "set_score_request"], [488, 2, 1, "", "set_transform_request"], [488, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_metadata_routing"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "transform"]], "sklearn.datasets": [[490, 4, 1, "", "clear_data_home"], [491, 4, 1, "", "dump_svmlight_file"], [492, 4, 1, "", "fetch_20newsgroups"], [493, 4, 1, "", "fetch_20newsgroups_vectorized"], [494, 4, 1, "", "fetch_california_housing"], [495, 4, 1, "", "fetch_covtype"], [496, 4, 1, "", "fetch_file"], [497, 4, 1, "", "fetch_kddcup99"], [498, 4, 1, "", "fetch_lfw_pairs"], [499, 4, 1, "", "fetch_lfw_people"], [500, 4, 1, "", "fetch_olivetti_faces"], [501, 4, 1, "", "fetch_openml"], [502, 4, 1, "", "fetch_rcv1"], [503, 4, 1, "", "fetch_species_distributions"], [504, 4, 1, "", "get_data_home"], [505, 4, 1, "", "load_breast_cancer"], [506, 4, 1, "", "load_diabetes"], [507, 4, 1, "", "load_digits"], [508, 4, 1, "", "load_files"], [509, 4, 1, "", "load_iris"], [510, 4, 1, "", "load_linnerud"], [511, 4, 1, "", "load_sample_image"], [512, 4, 1, "", "load_sample_images"], [513, 4, 1, "", "load_svmlight_file"], [514, 4, 1, "", "load_svmlight_files"], [515, 4, 1, "", "load_wine"], [516, 4, 1, "", "make_biclusters"], [517, 4, 1, "", "make_blobs"], [518, 4, 1, "", "make_checkerboard"], [519, 4, 1, "", "make_circles"], [520, 4, 1, "", "make_classification"], [521, 4, 1, "", "make_friedman1"], [522, 4, 1, "", "make_friedman2"], [523, 4, 1, "", "make_friedman3"], [524, 4, 1, "", "make_gaussian_quantiles"], [525, 4, 1, "", "make_hastie_10_2"], [526, 4, 1, "", "make_low_rank_matrix"], [527, 4, 1, "", "make_moons"], [528, 4, 1, "", "make_multilabel_classification"], [529, 4, 1, "", "make_regression"], [530, 4, 1, "", "make_s_curve"], [531, 4, 1, "", "make_sparse_coded_signal"], [532, 4, 1, "", "make_sparse_spd_matrix"], [533, 4, 1, "", "make_sparse_uncorrelated"], [534, 4, 1, "", "make_spd_matrix"], [535, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[536, 1, 1, "", "DictionaryLearning"], [537, 1, 1, "", "FactorAnalysis"], [538, 1, 1, "", "FastICA"], [539, 1, 1, "", "IncrementalPCA"], [540, 1, 1, "", "KernelPCA"], [541, 1, 1, "", "LatentDirichletAllocation"], [542, 1, 1, "", "MiniBatchDictionaryLearning"], [543, 1, 1, "", "MiniBatchNMF"], [544, 1, 1, "", "MiniBatchSparsePCA"], [545, 1, 1, "", "NMF"], [546, 1, 1, "", "PCA"], [547, 1, 1, "", "SparseCoder"], [548, 1, 1, "", "SparsePCA"], [549, 1, 1, "", "TruncatedSVD"], [550, 4, 1, "", "dict_learning"], [551, 4, 1, "", "dict_learning_online"], [424, 4, 1, "", "fastica"], [552, 4, 1, "", "non_negative_factorization"], [553, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_covariance"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "get_precision"], [537, 2, 1, "", "score"], [537, 2, 1, "", "score_samples"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_inverse_transform_request"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "set_transform_request"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_covariance"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_precision"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "set_partial_fit_request"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "partial_fit"], [541, 2, 1, "", "perplexity"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "partial_fit"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "partial_fit"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_covariance"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "get_precision"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "score"], [546, 2, 1, "", "score_samples"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_components_"], [547, 3, 1, "", "n_features_in_"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[554, 1, 1, "", "LinearDiscriminantAnalysis"], [555, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[554, 2, 1, "", "decision_function"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_feature_names_out"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[555, 2, 1, "", "decision_function"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[556, 1, 1, "", "DummyClassifier"], [557, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_predict_request"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[558, 1, 1, "", "AdaBoostClassifier"], [559, 1, 1, "", "AdaBoostRegressor"], [560, 1, 1, "", "BaggingClassifier"], [561, 1, 1, "", "BaggingRegressor"], [562, 1, 1, "", "ExtraTreesClassifier"], [563, 1, 1, "", "ExtraTreesRegressor"], [564, 1, 1, "", "GradientBoostingClassifier"], [565, 1, 1, "", "GradientBoostingRegressor"], [566, 1, 1, "", "HistGradientBoostingClassifier"], [567, 1, 1, "", "HistGradientBoostingRegressor"], [568, 1, 1, "", "IsolationForest"], [569, 1, 1, "", "RandomForestClassifier"], [570, 1, 1, "", "RandomForestRegressor"], [571, 1, 1, "", "RandomTreesEmbedding"], [572, 1, 1, "", "StackingClassifier"], [573, 1, 1, "", "StackingRegressor"], [574, 1, 1, "", "VotingClassifier"], [575, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[558, 2, 1, "", "decision_function"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_decision_function"], [558, 2, 1, "", "staged_predict"], [558, 2, 1, "", "staged_predict_proba"], [558, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[560, 2, 1, "", "decision_function"], [560, 3, 1, "", "estimators_samples_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[561, 3, 1, "", "estimators_samples_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "estimators_samples_"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_function"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "staged_decision_function"], [564, 2, 1, "", "staged_predict"], [564, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[565, 2, 1, "", "apply"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[566, 2, 1, "", "decision_function"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_iter_"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "staged_decision_function"], [566, 2, 1, "", "staged_predict"], [566, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_iter_"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[568, 2, 1, "", "decision_function"], [568, 3, 1, "", "estimators_samples_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_predict"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score_samples"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[569, 2, 1, "", "apply"], [569, 2, 1, "", "decision_path"], [569, 3, 1, "", "estimators_samples_"], [569, 3, 1, "", "feature_importances_"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_log_proba"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[570, 2, 1, "", "apply"], [570, 2, 1, "", "decision_path"], [570, 3, 1, "", "estimators_samples_"], [570, 3, 1, "", "feature_importances_"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[571, 2, 1, "", "apply"], [571, 2, 1, "", "decision_path"], [571, 3, 1, "", "estimators_samples_"], [571, 3, 1, "", "feature_importances_"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[572, 2, 1, "", "decision_function"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 3, 1, "", "n_features_in_"], [572, 3, 1, "", "named_estimators"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "predict_proba"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"], [572, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "n_features_in_"], [573, 3, 1, "", "named_estimators"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"], [573, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "n_features_in_"], [574, 3, 1, "", "named_estimators"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "predict_proba"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"], [574, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "n_features_in_"], [575, 3, 1, "", "named_estimators"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_fit_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_score_request"], [575, 2, 1, "", "transform"]], "sklearn.exceptions": [[576, 5, 1, "", "ConvergenceWarning"], [577, 5, 1, "", "DataConversionWarning"], [578, 5, 1, "", "DataDimensionalityWarning"], [579, 5, 1, "", "EfficiencyWarning"], [580, 5, 1, "", "FitFailedWarning"], [581, 5, 1, "", "InconsistentVersionWarning"], [582, 5, 1, "", "NotFittedError"], [583, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[584, 0, 0, "-", "enable_halving_search_cv"], [585, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[586, 1, 1, "", "DictVectorizer"], [587, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "restrict"], [586, 2, 1, "", "set_inverse_transform_request"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "set_transform_request"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[588, 1, 1, "", "PatchExtractor"], [589, 4, 1, "", "extract_patches_2d"], [590, 4, 1, "", "grid_to_graph"], [591, 4, 1, "", "img_to_graph"], [592, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[593, 1, 1, "", "CountVectorizer"], [594, 1, 1, "", "HashingVectorizer"], [595, 1, 1, "", "TfidfTransformer"], [596, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[593, 2, 1, "", "build_analyzer"], [593, 2, 1, "", "build_preprocessor"], [593, 2, 1, "", "build_tokenizer"], [593, 2, 1, "", "decode"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_stop_words"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_fit_request"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "set_transform_request"], [593, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[594, 2, 1, "", "build_analyzer"], [594, 2, 1, "", "build_preprocessor"], [594, 2, 1, "", "build_tokenizer"], [594, 2, 1, "", "decode"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_stop_words"], [594, 2, 1, "", "partial_fit"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "set_transform_request"], [595, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[596, 2, 1, "", "build_analyzer"], [596, 2, 1, "", "build_preprocessor"], [596, 2, 1, "", "build_tokenizer"], [596, 2, 1, "", "decode"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_stop_words"], [596, 3, 1, "", "idf_"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_fit_request"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "set_transform_request"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection": [[597, 1, 1, "", "GenericUnivariateSelect"], [598, 1, 1, "", "RFE"], [599, 1, 1, "", "RFECV"], [600, 1, 1, "", "SelectFdr"], [601, 1, 1, "", "SelectFpr"], [602, 1, 1, "", "SelectFromModel"], [603, 1, 1, "", "SelectFwe"], [604, 1, 1, "", "SelectKBest"], [605, 1, 1, "", "SelectPercentile"], [606, 1, 1, "", "SelectorMixin"], [607, 1, 1, "", "SequentialFeatureSelector"], [608, 1, 1, "", "VarianceThreshold"], [609, 4, 1, "", "chi2"], [610, 4, 1, "", "f_classif"], [611, 4, 1, "", "f_regression"], [612, 4, 1, "", "mutual_info_classif"], [613, 4, 1, "", "mutual_info_regression"], [614, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[598, 3, 1, "", "classes_"], [598, 2, 1, "", "decision_function"], [598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "predict"], [598, 2, 1, "", "predict_log_proba"], [598, 2, 1, "", "predict_proba"], [598, 2, 1, "", "score"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[599, 3, 1, "", "classes_"], [599, 2, 1, "", "decision_function"], [599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "predict_log_proba"], [599, 2, 1, "", "predict_proba"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 3, 1, "", "n_features_in_"], [602, 2, 1, "", "partial_fit"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "threshold_"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "get_support"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[615, 1, 1, "", "GaussianProcessClassifier"], [616, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_metadata_routing"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "kernel_"], [615, 2, 1, "", "log_marginal_likelihood"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "predict_proba"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "get_metadata_routing"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "log_marginal_likelihood"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "sample_y"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "set_predict_request"], [616, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[617, 1, 1, "", "CompoundKernel"], [618, 1, 1, "", "ConstantKernel"], [619, 1, 1, "", "DotProduct"], [620, 1, 1, "", "ExpSineSquared"], [621, 1, 1, "", "Exponentiation"], [622, 1, 1, "", "Hyperparameter"], [623, 1, 1, "", "Kernel"], [624, 1, 1, "", "Matern"], [625, 1, 1, "", "PairwiseKernel"], [626, 1, 1, "", "Product"], [627, 1, 1, "", "RBF"], [628, 1, 1, "", "RationalQuadratic"], [629, 1, 1, "", "Sum"], [630, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameter_length_scale"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[622, 6, 1, "", "bounds"], [622, 2, 1, "", "count"], [622, 6, 1, "", "fixed"], [622, 2, 1, "", "index"], [622, 6, 1, "", "n_elements"], [622, 6, 1, "", "name"], [622, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[630, 2, 1, "", "__call__"], [630, 3, 1, "", "bounds"], [630, 2, 1, "", "clone_with_theta"], [630, 2, 1, "", "diag"], [630, 2, 1, "", "get_params"], [630, 3, 1, "", "hyperparameters"], [630, 2, 1, "", "is_stationary"], [630, 3, 1, "", "n_dims"], [630, 3, 1, "", "requires_vector_input"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "theta"]], "sklearn.impute": [[632, 1, 1, "", "IterativeImputer"], [633, 1, 1, "", "KNNImputer"], [634, 1, 1, "", "MissingIndicator"], [635, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "inverse_transform"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.inspection": [[636, 1, 1, "", "DecisionBoundaryDisplay"], [637, 1, 1, "", "PartialDependenceDisplay"], [638, 4, 1, "", "partial_dependence"], [639, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[636, 2, 1, "", "from_estimator"], [636, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[637, 2, 1, "", "from_estimator"], [637, 2, 1, "", "plot"]], "sklearn.isotonic": [[640, 1, 1, "", "IsotonicRegression"], [641, 4, 1, "", "check_increasing"], [642, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_predict_request"], [640, 2, 1, "", "set_score_request"], [640, 2, 1, "", "set_transform_request"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[643, 1, 1, "", "AdditiveChi2Sampler"], [644, 1, 1, "", "Nystroem"], [645, 1, 1, "", "PolynomialCountSketch"], [646, 1, 1, "", "RBFSampler"], [647, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "fit_transform"], [647, 2, 1, "", "get_feature_names_out"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "set_output"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[648, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[649, 1, 1, "", "ARDRegression"], [650, 1, 1, "", "BayesianRidge"], [651, 1, 1, "", "ElasticNet"], [652, 1, 1, "", "ElasticNetCV"], [653, 1, 1, "", "GammaRegressor"], [654, 1, 1, "", "HuberRegressor"], [655, 1, 1, "", "Lars"], [656, 1, 1, "", "LarsCV"], [657, 1, 1, "", "Lasso"], [658, 1, 1, "", "LassoCV"], [659, 1, 1, "", "LassoLars"], [660, 1, 1, "", "LassoLarsCV"], [661, 1, 1, "", "LassoLarsIC"], [662, 1, 1, "", "LinearRegression"], [663, 1, 1, "", "LogisticRegression"], [664, 1, 1, "", "LogisticRegressionCV"], [665, 1, 1, "", "MultiTaskElasticNet"], [666, 1, 1, "", "MultiTaskElasticNetCV"], [667, 1, 1, "", "MultiTaskLasso"], [668, 1, 1, "", "MultiTaskLassoCV"], [669, 1, 1, "", "OrthogonalMatchingPursuit"], [670, 1, 1, "", "OrthogonalMatchingPursuitCV"], [671, 1, 1, "", "PassiveAggressiveClassifier"], [672, 1, 1, "", "PassiveAggressiveRegressor"], [673, 1, 1, "", "Perceptron"], [674, 1, 1, "", "PoissonRegressor"], [675, 1, 1, "", "QuantileRegressor"], [676, 1, 1, "", "RANSACRegressor"], [677, 1, 1, "", "Ridge"], [678, 1, 1, "", "RidgeCV"], [679, 1, 1, "", "RidgeClassifier"], [680, 1, 1, "", "RidgeClassifierCV"], [681, 1, 1, "", "SGDClassifier"], [682, 1, 1, "", "SGDOneClassSVM"], [683, 1, 1, "", "SGDRegressor"], [684, 1, 1, "", "TheilSenRegressor"], [685, 1, 1, "", "TweedieRegressor"], [686, 4, 1, "", "enet_path"], [687, 4, 1, "", "lars_path"], [688, 4, 1, "", "lars_path_gram"], [689, 4, 1, "", "lasso_path"], [690, 4, 1, "", "orthogonal_mp"], [691, 4, 1, "", "orthogonal_mp_gram"], [692, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_predict_request"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_predict_request"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"], [651, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"], [657, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[663, 2, 1, "", "decision_function"], [663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "predict_log_proba"], [663, 2, 1, "", "predict_proba"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[664, 2, 1, "", "decision_function"], [664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "predict_log_proba"], [664, 2, 1, "", "predict_proba"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "path"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"], [665, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "path"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"], [667, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "path"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[671, 2, 1, "", "decision_function"], [671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[673, 2, 1, "", "decision_function"], [673, 2, 1, "", "densify"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "partial_fit"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_partial_fit_request"], [673, 2, 1, "", "set_score_request"], [673, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[679, 3, 1, "", "classes_"], [679, 2, 1, "", "decision_function"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[680, 3, 1, "", "classes_"], [680, 2, 1, "", "decision_function"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[681, 2, 1, "", "decision_function"], [681, 2, 1, "", "densify"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "partial_fit"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "predict_log_proba"], [681, 2, 1, "", "predict_proba"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_partial_fit_request"], [681, 2, 1, "", "set_score_request"], [681, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[682, 2, 1, "", "decision_function"], [682, 2, 1, "", "densify"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "fit_predict"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "partial_fit"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score_samples"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_partial_fit_request"], [682, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[683, 2, 1, "", "densify"], [683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "partial_fit"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_partial_fit_request"], [683, 2, 1, "", "set_score_request"], [683, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "predict"], [685, 2, 1, "", "score"], [685, 2, 1, "", "set_fit_request"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[693, 1, 1, "", "Isomap"], [694, 1, 1, "", "LocallyLinearEmbedding"], [695, 1, 1, "", "MDS"], [696, 1, 1, "", "SpectralEmbedding"], [697, 1, 1, "", "TSNE"], [698, 4, 1, "", "locally_linear_embedding"], [699, 4, 1, "", "smacof"], [700, 4, 1, "", "spectral_embedding"], [701, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_feature_names_out"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "reconstruction_error"], [693, 2, 1, "", "set_output"], [693, 2, 1, "", "set_params"], [693, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_feature_names_out"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "set_output"], [694, 2, 1, "", "set_params"], [694, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_fit_request"], [695, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[697, 2, 1, "", "fit"], [697, 2, 1, "", "fit_transform"], [697, 2, 1, "", "get_feature_names_out"], [697, 2, 1, "", "get_metadata_routing"], [697, 2, 1, "", "get_params"], [697, 2, 1, "", "set_output"], [697, 2, 1, "", "set_params"]], "sklearn.metrics": [[702, 1, 1, "", "ConfusionMatrixDisplay"], [703, 1, 1, "", "DetCurveDisplay"], [704, 1, 1, "", "DistanceMetric"], [705, 1, 1, "", "PrecisionRecallDisplay"], [706, 1, 1, "", "PredictionErrorDisplay"], [707, 1, 1, "", "RocCurveDisplay"], [708, 4, 1, "", "accuracy_score"], [709, 4, 1, "", "adjusted_mutual_info_score"], [710, 4, 1, "", "adjusted_rand_score"], [711, 4, 1, "", "auc"], [712, 4, 1, "", "average_precision_score"], [713, 4, 1, "", "balanced_accuracy_score"], [714, 4, 1, "", "brier_score_loss"], [715, 4, 1, "", "calinski_harabasz_score"], [716, 4, 1, "", "check_scoring"], [717, 4, 1, "", "class_likelihood_ratios"], [718, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [721, 4, 1, "", "cohen_kappa_score"], [722, 4, 1, "", "completeness_score"], [723, 4, 1, "", "confusion_matrix"], [724, 4, 1, "", "consensus_score"], [725, 4, 1, "", "coverage_error"], [726, 4, 1, "", "d2_absolute_error_score"], [727, 4, 1, "", "d2_log_loss_score"], [728, 4, 1, "", "d2_pinball_score"], [729, 4, 1, "", "d2_tweedie_score"], [730, 4, 1, "", "davies_bouldin_score"], [731, 4, 1, "", "dcg_score"], [732, 4, 1, "", "det_curve"], [733, 4, 1, "", "explained_variance_score"], [734, 4, 1, "", "f1_score"], [735, 4, 1, "", "fbeta_score"], [736, 4, 1, "", "fowlkes_mallows_score"], [737, 4, 1, "", "get_scorer"], [738, 4, 1, "", "get_scorer_names"], [739, 4, 1, "", "hamming_loss"], [740, 4, 1, "", "hinge_loss"], [741, 4, 1, "", "homogeneity_completeness_v_measure"], [742, 4, 1, "", "homogeneity_score"], [743, 4, 1, "", "jaccard_score"], [744, 4, 1, "", "label_ranking_average_precision_score"], [745, 4, 1, "", "label_ranking_loss"], [746, 4, 1, "", "log_loss"], [747, 4, 1, "", "make_scorer"], [748, 4, 1, "", "matthews_corrcoef"], [749, 4, 1, "", "max_error"], [750, 4, 1, "", "mean_absolute_error"], [751, 4, 1, "", "mean_absolute_percentage_error"], [752, 4, 1, "", "mean_gamma_deviance"], [753, 4, 1, "", "mean_pinball_loss"], [754, 4, 1, "", "mean_poisson_deviance"], [755, 4, 1, "", "mean_squared_error"], [756, 4, 1, "", "mean_squared_log_error"], [757, 4, 1, "", "mean_tweedie_deviance"], [758, 4, 1, "", "median_absolute_error"], [759, 4, 1, "", "multilabel_confusion_matrix"], [760, 4, 1, "", "mutual_info_score"], [761, 4, 1, "", "ndcg_score"], [762, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [783, 4, 1, "", "pairwise_distances"], [784, 4, 1, "", "pairwise_distances_argmin"], [785, 4, 1, "", "pairwise_distances_argmin_min"], [786, 4, 1, "", "pairwise_distances_chunked"], [787, 4, 1, "", "precision_recall_curve"], [788, 4, 1, "", "precision_recall_fscore_support"], [789, 4, 1, "", "precision_score"], [790, 4, 1, "", "r2_score"], [791, 4, 1, "", "rand_score"], [792, 4, 1, "", "recall_score"], [793, 4, 1, "", "roc_auc_score"], [794, 4, 1, "", "roc_curve"], [795, 4, 1, "", "root_mean_squared_error"], [796, 4, 1, "", "root_mean_squared_log_error"], [797, 4, 1, "", "silhouette_samples"], [798, 4, 1, "", "silhouette_score"], [799, 4, 1, "", "top_k_accuracy_score"], [800, 4, 1, "", "v_measure_score"], [801, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[704, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[707, 2, 1, "", "from_estimator"], [707, 2, 1, "", "from_predictions"], [707, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[719, 4, 1, "", "contingency_matrix"], [720, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[763, 4, 1, "", "additive_chi2_kernel"], [764, 4, 1, "", "chi2_kernel"], [765, 4, 1, "", "cosine_distances"], [766, 4, 1, "", "cosine_similarity"], [767, 4, 1, "", "distance_metrics"], [768, 4, 1, "", "euclidean_distances"], [769, 4, 1, "", "haversine_distances"], [770, 4, 1, "", "kernel_metrics"], [771, 4, 1, "", "laplacian_kernel"], [772, 4, 1, "", "linear_kernel"], [773, 4, 1, "", "manhattan_distances"], [774, 4, 1, "", "nan_euclidean_distances"], [775, 4, 1, "", "paired_cosine_distances"], [776, 4, 1, "", "paired_distances"], [777, 4, 1, "", "paired_euclidean_distances"], [778, 4, 1, "", "paired_manhattan_distances"], [779, 4, 1, "", "pairwise_kernels"], [780, 4, 1, "", "polynomial_kernel"], [781, 4, 1, "", "rbf_kernel"], [782, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[802, 1, 1, "", "BayesianGaussianMixture"], [803, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[802, 2, 1, "", "fit"], [802, 2, 1, "", "fit_predict"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "sample"], [802, 2, 1, "", "score"], [802, 2, 1, "", "score_samples"], [802, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[803, 2, 1, "", "aic"], [803, 2, 1, "", "bic"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "fit_predict"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "sample"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"]], "sklearn.model_selection": [[804, 1, 1, "", "FixedThresholdClassifier"], [805, 1, 1, "", "GridSearchCV"], [806, 1, 1, "", "GroupKFold"], [807, 1, 1, "", "GroupShuffleSplit"], [808, 1, 1, "", "HalvingGridSearchCV"], [809, 1, 1, "", "HalvingRandomSearchCV"], [810, 1, 1, "", "KFold"], [811, 1, 1, "", "LearningCurveDisplay"], [812, 1, 1, "", "LeaveOneGroupOut"], [813, 1, 1, "", "LeaveOneOut"], [814, 1, 1, "", "LeavePGroupsOut"], [815, 1, 1, "", "LeavePOut"], [816, 1, 1, "", "ParameterGrid"], [817, 1, 1, "", "ParameterSampler"], [818, 1, 1, "", "PredefinedSplit"], [819, 1, 1, "", "RandomizedSearchCV"], [820, 1, 1, "", "RepeatedKFold"], [821, 1, 1, "", "RepeatedStratifiedKFold"], [822, 1, 1, "", "ShuffleSplit"], [823, 1, 1, "", "StratifiedGroupKFold"], [824, 1, 1, "", "StratifiedKFold"], [825, 1, 1, "", "StratifiedShuffleSplit"], [826, 1, 1, "", "TimeSeriesSplit"], [827, 1, 1, "", "TunedThresholdClassifierCV"], [828, 1, 1, "", "ValidationCurveDisplay"], [829, 4, 1, "", "check_cv"], [830, 4, 1, "", "cross_val_predict"], [831, 4, 1, "", "cross_val_score"], [832, 4, 1, "", "cross_validate"], [833, 4, 1, "", "learning_curve"], [834, 4, 1, "", "permutation_test_score"], [835, 4, 1, "", "train_test_split"], [836, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[805, 3, 1, "", "classes_"], [805, 2, 1, "", "decision_function"], [805, 2, 1, "", "fit"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "inverse_transform"], [805, 3, 1, "", "n_features_in_"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_log_proba"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "score_samples"], [805, 2, 1, "", "set_params"], [805, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "set_split_request"], [806, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "inverse_transform"], [808, 3, 1, "", "n_features_in_"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "score_samples"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[809, 3, 1, "", "classes_"], [809, 2, 1, "", "decision_function"], [809, 2, 1, "", "fit"], [809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "inverse_transform"], [809, 3, 1, "", "n_features_in_"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "score_samples"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[811, 2, 1, "", "from_estimator"], [811, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "set_split_request"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "set_split_request"], [814, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[819, 3, 1, "", "classes_"], [819, 2, 1, "", "decision_function"], [819, 2, 1, "", "fit"], [819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "inverse_transform"], [819, 3, 1, "", "n_features_in_"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "predict_log_proba"], [819, 2, 1, "", "predict_proba"], [819, 2, 1, "", "score"], [819, 2, 1, "", "score_samples"], [819, 2, 1, "", "set_params"], [819, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "set_split_request"], [823, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_n_splits"], [826, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[827, 3, 1, "", "classes_"], [827, 2, 1, "", "decision_function"], [827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "predict_log_proba"], [827, 2, 1, "", "predict_proba"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[828, 2, 1, "", "from_estimator"], [828, 2, 1, "", "plot"]], "sklearn.multiclass": [[837, 1, 1, "", "OneVsOneClassifier"], [838, 1, 1, "", "OneVsRestClassifier"], [839, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[837, 2, 1, "", "decision_function"], [837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 3, 1, "", "n_classes_"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[838, 2, 1, "", "decision_function"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 3, 1, "", "multilabel_"], [838, 3, 1, "", "n_classes_"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[840, 1, 1, "", "ClassifierChain"], [841, 1, 1, "", "MultiOutputClassifier"], [842, 1, 1, "", "MultiOutputRegressor"], [843, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[840, 2, 1, "", "decision_function"], [840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[844, 1, 1, "", "BernoulliNB"], [845, 1, 1, "", "CategoricalNB"], [846, 1, 1, "", "ComplementNB"], [847, 1, 1, "", "GaussianNB"], [848, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_joint_log_proba"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_fit_request"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_joint_log_proba"], [848, 2, 1, "", "predict_log_proba"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_fit_request"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_partial_fit_request"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[849, 1, 1, "", "BallTree"], [850, 1, 1, "", "KDTree"], [851, 1, 1, "", "KNeighborsClassifier"], [852, 1, 1, "", "KNeighborsRegressor"], [853, 1, 1, "", "KNeighborsTransformer"], [854, 1, 1, "", "KernelDensity"], [855, 1, 1, "", "LocalOutlierFactor"], [856, 1, 1, "", "NearestCentroid"], [857, 1, 1, "", "NearestNeighbors"], [858, 1, 1, "", "NeighborhoodComponentsAnalysis"], [859, 1, 1, "", "RadiusNeighborsClassifier"], [860, 1, 1, "", "RadiusNeighborsRegressor"], [861, 1, 1, "", "RadiusNeighborsTransformer"], [862, 4, 1, "", "kneighbors_graph"], [863, 4, 1, "", "radius_neighbors_graph"], [864, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[849, 2, 1, "", "get_arrays"], [849, 2, 1, "", "get_n_calls"], [849, 2, 1, "", "get_tree_stats"], [849, 2, 1, "", "kernel_density"], [849, 2, 1, "", "query"], [849, 2, 1, "", "query_radius"], [849, 2, 1, "", "reset_n_calls"], [849, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[850, 2, 1, "", "get_arrays"], [850, 2, 1, "", "get_n_calls"], [850, 2, 1, "", "get_tree_stats"], [850, 2, 1, "", "kernel_density"], [850, 2, 1, "", "query"], [850, 2, 1, "", "query_radius"], [850, 2, 1, "", "reset_n_calls"], [850, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "predict_proba"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "sample"], [854, 2, 1, "", "score"], [854, 2, 1, "", "score_samples"], [854, 2, 1, "", "set_fit_request"], [854, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[855, 2, 1, "", "decision_function"], [855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_predict"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "kneighbors"], [855, 2, 1, "", "kneighbors_graph"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "score_samples"], [855, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "kneighbors"], [857, 2, 1, "", "kneighbors_graph"], [857, 2, 1, "", "radius_neighbors"], [857, 2, 1, "", "radius_neighbors_graph"], [857, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "predict_proba"], [859, 2, 1, "", "radius_neighbors"], [859, 2, 1, "", "radius_neighbors_graph"], [859, 2, 1, "", "score"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "predict"], [860, 2, 1, "", "radius_neighbors"], [860, 2, 1, "", "radius_neighbors_graph"], [860, 2, 1, "", "score"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "radius_neighbors"], [861, 2, 1, "", "radius_neighbors_graph"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.neural_network": [[865, 1, 1, "", "BernoulliRBM"], [866, 1, 1, "", "MLPClassifier"], [867, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "gibbs"], [865, 2, 1, "", "partial_fit"], [865, 2, 1, "", "score_samples"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "partial_fit"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "predict_log_proba"], [866, 2, 1, "", "predict_proba"], [866, 2, 1, "", "score"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_partial_fit_request"], [866, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "partial_fit"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "score"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[868, 1, 1, "", "FeatureUnion"], [869, 1, 1, "", "Pipeline"], [870, 4, 1, "", "make_pipeline"], [871, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[868, 3, 1, "", "feature_names_in_"], [868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 3, 1, "", "n_features_in_"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[869, 3, 1, "", "classes_"], [869, 2, 1, "", "decision_function"], [869, 3, 1, "", "feature_names_in_"], [869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_predict"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 3, 1, "", "n_features_in_"], [869, 3, 1, "", "named_steps"], [869, 2, 1, "", "predict"], [869, 2, 1, "", "predict_log_proba"], [869, 2, 1, "", "predict_proba"], [869, 2, 1, "", "score"], [869, 2, 1, "", "score_samples"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "set_score_request"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing": [[872, 1, 1, "", "Binarizer"], [873, 1, 1, "", "FunctionTransformer"], [874, 1, 1, "", "KBinsDiscretizer"], [875, 1, 1, "", "KernelCenterer"], [876, 1, 1, "", "LabelBinarizer"], [877, 1, 1, "", "LabelEncoder"], [878, 1, 1, "", "MaxAbsScaler"], [879, 1, 1, "", "MinMaxScaler"], [880, 1, 1, "", "MultiLabelBinarizer"], [881, 1, 1, "", "Normalizer"], [882, 1, 1, "", "OneHotEncoder"], [883, 1, 1, "", "OrdinalEncoder"], [884, 1, 1, "", "PolynomialFeatures"], [885, 1, 1, "", "PowerTransformer"], [886, 1, 1, "", "QuantileTransformer"], [887, 1, 1, "", "RobustScaler"], [888, 1, 1, "", "SplineTransformer"], [889, 1, 1, "", "StandardScaler"], [890, 1, 1, "", "TargetEncoder"], [891, 4, 1, "", "add_dummy_feature"], [892, 4, 1, "", "binarize"], [893, 4, 1, "", "label_binarize"], [894, 4, 1, "", "maxabs_scale"], [895, 4, 1, "", "minmax_scale"], [896, 4, 1, "", "normalize"], [897, 4, 1, "", "power_transform"], [898, 4, 1, "", "quantile_transform"], [899, 4, 1, "", "robust_scale"], [900, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "set_transform_request"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_fit_request"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "set_fit_request"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "set_transform_request"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_inverse_transform_request"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "partial_fit"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "partial_fit"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "set_transform_request"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "infrequent_categories_"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "infrequent_categories_"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 3, 1, "", "powers_"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "inverse_transform"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "set_fit_request"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "inverse_transform"], [889, 2, 1, "", "partial_fit"], [889, 2, 1, "", "set_fit_request"], [889, 2, 1, "", "set_inverse_transform_request"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "set_partial_fit_request"], [889, 2, 1, "", "set_transform_request"], [889, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 3, 1, "", "infrequent_categories_"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "transform"]], "sklearn.random_projection": [[901, 1, 1, "", "GaussianRandomProjection"], [902, 1, 1, "", "SparseRandomProjection"], [903, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "fit_transform"], [901, 2, 1, "", "get_feature_names_out"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "inverse_transform"], [901, 2, 1, "", "set_output"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[902, 2, 1, "", "fit"], [902, 2, 1, "", "fit_transform"], [902, 2, 1, "", "get_feature_names_out"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "inverse_transform"], [902, 2, 1, "", "set_output"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[904, 1, 1, "", "LabelPropagation"], [905, 1, 1, "", "LabelSpreading"], [906, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_proba"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "predict_proba"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[906, 2, 1, "", "decision_function"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_log_proba"], [906, 2, 1, "", "predict_proba"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_params"]], "sklearn.svm": [[909, 1, 1, "", "LinearSVC"], [910, 1, 1, "", "LinearSVR"], [911, 1, 1, "", "NuSVC"], [912, 1, 1, "", "NuSVR"], [913, 1, 1, "", "OneClassSVM"], [914, 1, 1, "", "SVC"], [915, 1, 1, "", "SVR"], [916, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[909, 2, 1, "", "decision_function"], [909, 2, 1, "", "densify"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"], [909, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "decision_function"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "predict_log_proba"], [911, 2, 1, "", "predict_proba"], [911, 3, 1, "", "probA_"], [911, 3, 1, "", "probB_"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "decision_function"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "fit_predict"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score_samples"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[914, 3, 1, "", "coef_"], [914, 2, 1, "", "decision_function"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 3, 1, "", "n_support_"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "predict_log_proba"], [914, 2, 1, "", "predict_proba"], [914, 3, 1, "", "probA_"], [914, 3, 1, "", "probB_"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[915, 3, 1, "", "coef_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_params"], [915, 3, 1, "", "n_support_"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_score_request"]], "sklearn.tree": [[917, 1, 1, "", "DecisionTreeClassifier"], [918, 1, 1, "", "DecisionTreeRegressor"], [919, 1, 1, "", "ExtraTreeClassifier"], [920, 1, 1, "", "ExtraTreeRegressor"], [921, 4, 1, "", "export_graphviz"], [922, 4, 1, "", "export_text"], [923, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[917, 2, 1, "", "apply"], [917, 2, 1, "", "cost_complexity_pruning_path"], [917, 2, 1, "", "decision_path"], [917, 3, 1, "", "feature_importances_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_depth"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_n_leaves"], [917, 2, 1, "", "get_params"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "predict_log_proba"], [917, 2, 1, "", "predict_proba"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_predict_proba_request"], [917, 2, 1, "", "set_predict_request"], [917, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[918, 2, 1, "", "apply"], [918, 2, 1, "", "cost_complexity_pruning_path"], [918, 2, 1, "", "decision_path"], [918, 3, 1, "", "feature_importances_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_depth"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_n_leaves"], [918, 2, 1, "", "get_params"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_predict_request"], [918, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[919, 2, 1, "", "apply"], [919, 2, 1, "", "cost_complexity_pruning_path"], [919, 2, 1, "", "decision_path"], [919, 3, 1, "", "feature_importances_"], [919, 2, 1, "", "fit"], [919, 2, 1, "", "get_depth"], [919, 2, 1, "", "get_metadata_routing"], [919, 2, 1, "", "get_n_leaves"], [919, 2, 1, "", "get_params"], [919, 2, 1, "", "predict"], [919, 2, 1, "", "predict_log_proba"], [919, 2, 1, "", "predict_proba"], [919, 2, 1, "", "score"], [919, 2, 1, "", "set_fit_request"], [919, 2, 1, "", "set_params"], [919, 2, 1, "", "set_predict_proba_request"], [919, 2, 1, "", "set_predict_request"], [919, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[920, 2, 1, "", "apply"], [920, 2, 1, "", "cost_complexity_pruning_path"], [920, 2, 1, "", "decision_path"], [920, 3, 1, "", "feature_importances_"], [920, 2, 1, "", "fit"], [920, 2, 1, "", "get_depth"], [920, 2, 1, "", "get_metadata_routing"], [920, 2, 1, "", "get_n_leaves"], [920, 2, 1, "", "get_params"], [920, 2, 1, "", "predict"], [920, 2, 1, "", "score"], [920, 2, 1, "", "set_fit_request"], [920, 2, 1, "", "set_params"], [920, 2, 1, "", "set_predict_request"], [920, 2, 1, "", "set_score_request"]], "sklearn.utils": [[924, 1, 1, "", "Bunch"], [925, 1, 1, "", "ClassifierTags"], [926, 1, 1, "", "InputTags"], [927, 1, 1, "", "RegressorTags"], [928, 1, 1, "", "Tags"], [929, 1, 1, "", "TargetTags"], [930, 1, 1, "", "TransformerTags"], [931, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [933, 4, 1, "", "as_float_array"], [934, 4, 1, "", "assert_all_finite"], [935, 4, 1, "", "check_X_y"], [936, 4, 1, "", "check_array"], [937, 4, 1, "", "check_consistent_length"], [938, 4, 1, "", "check_random_state"], [939, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [942, 4, 1, "", "default_tags"], [943, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [949, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [956, 4, 1, "", "gen_batches"], [957, 4, 1, "", "gen_even_slices"], [958, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [960, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [970, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [973, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [975, 4, 1, "", "register_parallel_backend"], [976, 4, 1, "", "resample"], [977, 4, 1, "", "safe_mask"], [978, 4, 1, "", "safe_sqr"], [979, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[924, 2, 1, "", "clear"], [924, 2, 1, "", "copy"], [924, 2, 1, "", "fromkeys"], [924, 2, 1, "", "get"], [924, 2, 1, "", "items"], [924, 2, 1, "", "keys"], [924, 2, 1, "", "pop"], [924, 2, 1, "", "popitem"], [924, 2, 1, "", "setdefault"], [924, 2, 1, "", "update"], [924, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[932, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[940, 4, 1, "", "compute_class_weight"], [941, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[943, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[944, 4, 1, "", "all_displays"], [945, 4, 1, "", "all_estimators"], [946, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[947, 4, 1, "", "check_estimator"], [948, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[950, 4, 1, "", "density"], [951, 4, 1, "", "fast_logdet"], [952, 4, 1, "", "randomized_range_finder"], [953, 4, 1, "", "randomized_svd"], [954, 4, 1, "", "safe_sparse_dot"], [955, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[959, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[961, 1, 1, "", "MetadataRequest"], [962, 1, 1, "", "MetadataRouter"], [963, 1, 1, "", "MethodMapping"], [964, 4, 1, "", "get_routing_for_object"], [965, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[961, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[962, 2, 1, "", "add"], [962, 2, 1, "", "add_self_request"], [962, 2, 1, "", "consumes"], [962, 2, 1, "", "route_params"], [962, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[963, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[966, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[967, 4, 1, "", "is_multilabel"], [968, 4, 1, "", "type_of_target"], [969, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[971, 1, 1, "", "Parallel"], [972, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[971, 2, 1, "", "__call__"], [971, 2, 1, "", "dispatch_next"], [971, 2, 1, "", "dispatch_one_batch"], [971, 2, 1, "", "format"], [971, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[974, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[980, 4, 1, "", "incr_mean_variance_axis"], [981, 4, 1, "", "inplace_column_scale"], [982, 4, 1, "", "inplace_csr_column_scale"], [983, 4, 1, "", "inplace_row_scale"], [984, 4, 1, "", "inplace_swap_column"], [985, 4, 1, "", "inplace_swap_row"], [986, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[987, 4, 1, "", "inplace_csr_row_normalize_l1"], [988, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[989, 4, 1, "", "check_is_fitted"], [990, 4, 1, "", "check_memory"], [991, 4, 1, "", "check_symmetric"], [992, 4, 1, "", "column_or_1d"], [993, 4, 1, "", "has_fit_parameter"], [994, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 109, 110, 113, 115, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 135, 137, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 163, 165, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 188, 189, 191, 193, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 213, 215, 217, 219, 221, 222, 224, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 246, 248, 249, 250, 252, 258, 260, 261, 263, 267, 268, 273, 274, 275, 276, 277, 280, 284, 286, 288, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 316, 319, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 340, 341, 342, 343, 344, 347, 348, 349, 352, 354, 355, 356, 359, 360, 361, 362, 363, 367, 368, 369, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 394, 395, 397, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 424, 426, 433, 437, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 464, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 493, 495, 501, 503, 505, 509, 515, 516, 524, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 698, 705, 706, 707, 713, 716, 721, 725, 727, 740, 746, 763, 764, 784, 785, 802, 803, 804, 805, 807, 808, 809, 814, 819, 823, 824, 827, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 933, 935, 936, 939, 953, 955, 962, 963, 965, 989, 993, 994, 995, 997, 998, 1000, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1030, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 398, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 931, 932, 933, 935, 936, 940, 941, 944, 945, 946, 947, 948, 950, 952, 953, 955, 956, 957, 959, 966, 967, 968, 970, 971, 974, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1035], "00": [52, 68, 111, 124, 188, 189, 206, 233, 246, 267, 271, 274, 311, 329, 332, 333, 355, 374, 377, 386, 412, 419, 420, 610, 611, 718, 720, 793, 805, 819, 833, 918, 1002, 1006, 1016, 1018, 1020, 1027], "000": [43, 44, 59, 62, 64, 77, 106, 173, 190, 193, 246, 267, 271, 273, 275, 299, 318, 325, 354, 355, 363, 375, 386, 419, 420, 494, 566, 567, 649, 682, 1020, 1027, 1048], "0000": [43, 327], "000000": [79, 188, 204, 233, 273, 317, 742], "00000000": 175, "000000e": 233, "000024": 367, "000045": 188, "00005": 54, "0000ff": [67, 301, 308], "0001": [49, 161, 170, 223, 271, 382, 424, 447, 451, 463, 475, 476, 482, 538, 543, 545, 552, 554, 555, 564, 565, 651, 652, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 673, 674, 677, 679, 681, 683, 685, 692, 694, 698, 866, 867, 909, 910, 995], "000198": 188, "000220": 46, "000246": 46, "000252": 46, "000278": 46, "000296": 46, "0003": 138, "000323": 46, "000359": 46, "0004": [52, 138, 318, 609], "000430": 46, "000622": 354, "000657": 354, "000658": 46, "000695": 354, "000699": 354, "000752": 354, "0008": 388, "000891": 46, "000977": 273, "00099547": 175, "000e": 420, "001": [46, 53, 68, 79, 95, 146, 150, 170, 172, 188, 200, 224, 242, 252, 258, 271, 273, 275, 335, 355, 377, 386, 416, 541, 542, 544, 551, 632, 649, 650, 651, 652, 657, 658, 665, 666, 667, 668, 671, 672, 673, 681, 682, 683, 684, 686, 689, 694, 695, 698, 699, 802, 803, 866, 867, 904, 905, 911, 912, 913, 914, 915, 995, 1027], "00112": 354, "0012": [43, 699], "0013": 43, "0014": 43, "0015": 43, "001540": 52, "00166409": 666, "00171412": [763, 764, 1004], "001727": 267, "001882": [202, 204], "002": [43, 51, 170, 172, 326, 377, 1027], "00208": 354, "00228": 354, "002592": [202, 204], "00274": 215, "0028": 43, "002861": [202, 204], "003": 43, "00302": 354, "0032": 43, "0034189458230957995": 45, "003533": 204, "003586": 541, "00360392": 541, "0036211": 541, "00362644": 541, "00364": 326, "00393284e": 197, "003935": [202, 204], "003e": 420, "004": [43, 355], "0044": 916, "004577621581492997": 320, "00462428": 756, "0049896314219659565": 320, "005": [43, 95, 273, 277, 298, 313, 355, 386, 1027], "005027": 276, "0053": 271, "005383": [202, 204], "005422": 273, "005670": [202, 204], "005840": 276, "005861": 276, "006": [43, 45, 281, 386], "006360": 276, "007": [142, 258, 281, 293, 355], "0072b2": 258, "0075": [477, 546], "00755": 546, "007581": 278, "00768662e": 197, "007822": 287, "007833": 278, "008": [170, 377, 386], "008142": [202, 204], "0083899664": 769, "008449": [202, 204], "00860051": 663, "008915": 276, "009": [43, 355, 386], "009077": 188, "00911944e": 197, "0092": 138, "009362": [202, 204], "009747": 287, "009778": 276, "009788": 287, "0098": 138, "00ff00": 301, "01": [45, 47, 49, 52, 53, 75, 79, 80, 84, 95, 121, 123, 124, 138, 147, 149, 151, 153, 154, 170, 177, 181, 188, 189, 197, 200, 206, 222, 227, 228, 233, 235, 236, 242, 246, 247, 248, 252, 253, 260, 264, 266, 267, 272, 273, 274, 278, 280, 281, 282, 298, 309, 311, 313, 323, 329, 345, 355, 360, 361, 375, 377, 385, 412, 421, 453, 475, 520, 526, 537, 544, 548, 550, 600, 601, 603, 610, 647, 651, 659, 663, 683, 701, 720, 805, 819, 903, 974, 1002, 1006, 1010, 1016, 1018, 1020, 1027], "010": [355, 386, 834, 1014], "0106": 654, "010877306503748912": 281, "011": [43, 240, 281, 293, 355, 386, 1027], "011595": [202, 204], "0116": 609, "011e": 420, "012": [52, 191, 193], "012191": [202, 204], "012521": 204, "012831": 204, "0129126": 374, "013": [43, 52, 91, 167, 281, 355, 1027], "01327": 375, "013520": 188, "014": [43, 281, 386], "0144": 620, "015": [80, 325, 358, 1014, 1027], "0152": 138, "015347e": 233, "015414e": 233, "015579": 287, "015587e": 233, "015596": [202, 204], "0157": 549, "015716e": 233, "016": [274, 1027], "01621459": 412, "016445": 273, "017": [355, 386, 475, 476], "017379": 52, "017646": [202, 204], "018": [52, 200, 273, 476], "0182": 902, "018727": 188, "0188ff": 317, "018900": 204, "019": [170, 377, 386, 475], "019023": 273, "019069": 204, "01915283": 131, "019163": [202, 204], "0193": [474, 480], "0195": [425, 479], "0196": 138, "0198e1": 119, "019907": [202, 204], "01e": 201, "02": [43, 51, 66, 79, 83, 85, 91, 95, 97, 113, 115, 121, 124, 137, 144, 170, 174, 179, 187, 188, 197, 233, 242, 250, 252, 267, 268, 274, 280, 298, 308, 311, 313, 315, 337, 339, 355, 359, 374, 377, 385, 411, 416, 445, 449, 602, 610, 663, 681, 805, 819, 888, 904, 918, 1002, 1027], "020": [43, 52, 311, 1014, 1027], "02069427": 86, "021": 355, "021849": 327, "021872": [202, 204], "022": 1014, "022593": 188, "0226": 654, "022688": [202, 204], "023": [52, 281, 355, 910, 1014], "02306214": 672, "02449161": 131, "02456369": 200, "024991": [202, 204], "025": [67, 217, 252, 270, 695, 699], "025102": 188, "025422": 273, "0255": 138, "0256": 175, "025930": [202, 204], "026": [116, 355, 362], "026328": [202, 204], "026711": 87, "027": [52, 170, 244, 377, 1027], "027400": 367, "028": [271, 355], "02818216": 115, "02891072": 1007, "029": [355, 1014], "02d": 204, "03": [51, 52, 85, 111, 121, 151, 170, 177, 188, 197, 233, 246, 258, 264, 267, 274, 333, 377, 420, 753, 805, 1002, 1006, 1027], "030": [151, 172, 355], "030462": 103, "030498": 103, "030585": 287, "030677e": 233, "030867": 188, "031": [170, 377], "031020": 103, "031026": 188, "031255": 188, "0313": 354, "031555": 204, "03162278": 51, "031988": [202, 204], "0321": 840, "032179": 204, "03228": 627, "03228706": 615, "0323": 354, "032356": [202, 204], "03237920e": 197, "032405": 188, "03260883": 1007, "033": 1014, "033764e": 233, "033823": 188, "034": [151, 475], "034077": 204, "034194": [202, 204], "034278": 276, "034309": [202, 204], "03433306457": 45, "034821": [202, 204], "03498585": 1007, "035005": 188, "03531816": [831, 832], "035445": 287, "035527": 46, "0357": 354, "0358": 46, "035914": 287, "036": [386, 476], "036038": [202, 204], "036385": [202, 204], "036445": 273, "036592": 287, "036656": [202, 204], "0367": 177, "0368": 624, "037": [91, 201, 271, 714, 1027], "0370": 855, "037600e": 233, "038": [91, 475, 476, 866], "038076": [202, 204], "03812219": 1007, "038159": 817, "03823144": 175, "038358": 46, "038689": 263, "0387": 609, "039": [271, 756, 786, 1006], "039493": [202, 204], "039497": 256, "03f": 271, "04": [66, 75, 77, 87, 115, 123, 130, 170, 177, 188, 197, 214, 233, 250, 258, 264, 267, 273, 274, 306, 330, 349, 377, 419, 421, 475, 476, 651, 652, 657, 665, 666, 667, 686, 793, 805, 819, 1002, 1006, 1010, 1020, 1027], "040": [211, 1027], "040530e": 233, "041": 52, "041297": 309, "0416": 411, "042": 386, "0427": [233, 473, 478], "042898": 309, "043": [355, 386], "043401": [202, 204], "044": [43, 271, 355, 756, 1006], "044223": [202, 204], "044451": [202, 204], "044642": [202, 204], "0448": 233, "045": [249, 350, 728, 1027], "04520": 161, "0453": 549, "045311": 309, "045390e": 233, "045599": [202, 204], "045934": 309, "046": [237, 355], "046010e": 233, "046317": 46, "046636": 188, "046641": [202, 204], "047": 386, "0479": 549, "048": [45, 1014], "049": [168, 199, 475, 1027], "049530": 309, "049540": 309, "0499": 549, "04995982": 115, "05": [46, 47, 52, 54, 61, 63, 72, 79, 93, 95, 97, 98, 100, 107, 115, 126, 138, 141, 148, 151, 154, 166, 170, 180, 181, 188, 196, 197, 214, 217, 229, 239, 240, 242, 252, 258, 260, 261, 264, 267, 273, 274, 282, 284, 298, 301, 306, 313, 315, 322, 326, 333, 335, 348, 355, 377, 421, 454, 460, 482, 530, 535, 536, 551, 597, 600, 601, 603, 618, 619, 620, 624, 625, 627, 628, 630, 637, 638, 654, 695, 699, 761, 805, 858, 909, 910, 1002, 1010, 1016, 1027], "050": [52, 1014], "05063247886572012": 281, "050680": [202, 204], "051": 476, "0512": 549, "051474": [202, 204], "0517578125e": 46, "052": [189, 542], "05216586": 115, "052506": 327, "053": [43, 170, 377, 386], "05306648": 129, "05317": 177, "054": 237, "054045": 276, "0544": 354, "054699": 188, "0547": 913, "055": [170, 377, 1006], "05518": 628, "05532": 625, "05534985": 310, "0556": 913, "056": [52, 760, 1014], "0561": 913, "0566": 628, "05663": 625, "0568": 752, "057": [386, 834], "057122": 204, "05752333": 131, "057711": 204, "058": [170, 271, 377], "05840206": 131, "0595": 477, "05968": 161, "05994843": 51, "06": [47, 52, 85, 100, 188, 206, 214, 215, 252, 267, 273, 274, 311, 315, 349, 386, 411, 486, 487, 488, 649, 650, 694, 698, 802, 803, 805, 819, 918, 1002, 1016, 1018, 1027], "060": [43, 52, 756], "0602": 46, "061": 271, "0614": 628, "061517": 46, "06165": 625, "061696": [202, 204], "0622": [474, 480], "0626": 840, "063": [173, 271, 273, 441, 1027], "0631": 52, "064": [343, 386, 1014, 1027], "065": [271, 386], "06506307": 310, "0652": 627, "06525643": 615, "066": [271, 653], "06686804": 230, "06694199": 131, "06695631e": 111, "067": 181, "067109": 204, "067528": 204, "068": [43, 52, 273], "068332": [202, 204], "06880943": 115, "06896552": 453, "069": [54, 210, 271, 1027], "069196": 271, "0693": 624, "07": [47, 52, 85, 115, 130, 188, 211, 233, 267, 282, 363, 375, 412, 566, 567, 697, 699, 1006, 1020, 1027], "0707": 628, "07073": 625, "071": [92, 170, 330, 377, 441, 1027], "071964": 188, "072": [75, 227, 441, 653, 1027], "073": [54, 271, 475, 476], "074": 271, "074412": [202, 204], "075": 124, "0758": 354, "07582983e": 197, "075887": 204, "076": [43, 344, 897, 1027], "077": [54, 228, 293, 1027], "077846": 273, "0779": 46, "078": [43, 348, 1027], "07846529": 310, "07880": 161, "079": [170, 377], "079297": 273, "07963978e": 197, "07993421": 230, "08": [43, 79, 83, 124, 181, 188, 189, 200, 311, 377, 482, 536, 548, 550, 568, 646, 663, 805, 866, 867, 888, 1012, 1027], "080": 355, "08022103": [831, 832], "080295": 204, "081": 1014, "0813": [473, 478], "082": 43, "0825": 318, "083": [54, 271, 362, 1027], "08377444": 756, "084": [45, 61], "085": [300, 1027], "085299": [202, 204], "08533159": 218, "085711": 87, "08604995": 115, "086944": 256, "08699432": 219, "0872422": 665, "088": [674, 1014], "089": [355, 360, 1027], "089063": [202, 204], "08d": 55, "08t16": 374, "09": [123, 124, 130, 188, 246, 250, 311, 412, 534, 612, 740, 847, 1006, 1016, 1020, 1027], "09000": 215, "090528": 188, "090808": 188, "091053": 188, "091621": 87, "092204": [202, 204], "093": 475, "094": 476, "09443967": 310, "095": [317, 339, 1027], "09541846": 541, "09684337": 230, "096950": 309, "097": [43, 170, 218, 377], "098": [202, 225, 355, 1027], "098332": 62, "0986": [420, 873], "09861229": [617, 1016], "098758": 62, "098776": 273, "098932": 62, "099": 43, "099820": 62, "0d": 1038, "0e": [284, 554, 555], "0e4": 222, "0f": [57, 91], "0min": 87, "0rc1": 384, "0rcn": 384, "0x": 938, "0x7f59c064e100": 285, "0x7f59c3931610": 332, "0x7f59c3b8b430": 271, "0x7f59c81bf820": 140, "0x7f59c875a9d0": 285, "0x7f59c93cb040": 215, "0x7f59c97fb310": 263, "0x7f59c989c5e0": 103, "0x7f59c989ce80": 103, "0x7f59cb187540": 285, "0x7f59cba76840": [280, 285], "0x7f59cbf08250": 156, "0x7f59cbf085b0": 156, "0x7f59e3aeaaf0": 103, "0x7f59e3b53d30": 104, "0x7f59fa5a72b0": 253, "0x7f59faa5c040": 140, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 393, 394, 395, 398, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 947, 948, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1039], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 119, 123, 124, 125, 126, 130, 131, 135, 137, 138, 140, 141, 142, 144, 145, 146, 148, 149, 151, 153, 154, 157, 159, 163, 167, 170, 173, 174, 176, 178, 179, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 200, 205, 206, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 231, 232, 233, 236, 237, 242, 245, 246, 247, 248, 249, 251, 252, 253, 255, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 284, 286, 287, 288, 290, 292, 298, 308, 309, 310, 311, 313, 314, 316, 317, 318, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 336, 341, 342, 343, 345, 346, 348, 349, 350, 352, 354, 355, 356, 363, 367, 374, 375, 376, 377, 378, 380, 385, 386, 392, 393, 394, 398, 403, 404, 405, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 442, 447, 451, 453, 455, 456, 457, 463, 464, 466, 479, 492, 497, 498, 501, 505, 506, 507, 509, 515, 516, 517, 518, 521, 525, 526, 529, 531, 533, 536, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 553, 557, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 573, 575, 587, 588, 592, 598, 599, 604, 605, 610, 612, 616, 622, 624, 632, 635, 637, 639, 640, 641, 642, 645, 647, 648, 649, 651, 652, 654, 657, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 677, 678, 680, 681, 682, 683, 686, 690, 691, 696, 697, 700, 701, 704, 710, 720, 731, 747, 761, 774, 802, 803, 805, 806, 807, 808, 809, 816, 819, 820, 821, 822, 823, 825, 826, 828, 833, 835, 836, 837, 838, 844, 845, 846, 848, 849, 850, 856, 865, 866, 867, 869, 875, 879, 882, 883, 886, 898, 906, 912, 915, 917, 918, 922, 927, 939, 950, 953, 957, 969, 974, 975, 981, 982, 991, 995, 996, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1020, 1021, 1027, 1034, 1035, 1038, 1039, 1040, 1045, 1047, 1048, 1049, 1051, 1052], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 77, 83, 86, 90, 94, 99, 103, 104, 107, 110, 111, 121, 123, 124, 130, 136, 141, 151, 152, 155, 158, 173, 177, 180, 181, 188, 189, 191, 193, 195, 196, 198, 200, 201, 205, 206, 207, 209, 214, 215, 216, 217, 219, 224, 225, 226, 228, 230, 231, 233, 237, 238, 240, 245, 246, 247, 248, 249, 253, 258, 260, 264, 267, 268, 269, 271, 273, 276, 278, 283, 284, 288, 298, 299, 300, 311, 314, 315, 317, 319, 320, 325, 329, 330, 336, 337, 341, 342, 344, 345, 346, 349, 350, 352, 354, 355, 358, 361, 362, 367, 369, 375, 377, 380, 382, 385, 386, 403, 409, 412, 413, 416, 417, 418, 419, 420, 441, 445, 449, 453, 475, 476, 482, 494, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 535, 539, 541, 549, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 610, 612, 615, 636, 637, 638, 644, 645, 646, 647, 651, 652, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 670, 672, 674, 676, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 751, 802, 803, 807, 827, 833, 834, 839, 844, 845, 846, 848, 849, 850, 854, 866, 867, 885, 887, 890, 899, 916, 995, 996, 999, 1003, 1006, 1007, 1013, 1016, 1018, 1045, 1046, 1047, 1050, 1051], "1000": [43, 46, 47, 54, 63, 67, 72, 83, 104, 107, 115, 130, 138, 140, 142, 146, 147, 148, 153, 158, 162, 165, 178, 193, 201, 207, 218, 237, 245, 246, 248, 258, 262, 267, 271, 273, 279, 282, 284, 298, 300, 314, 317, 323, 324, 326, 328, 329, 344, 345, 351, 354, 355, 385, 386, 393, 410, 420, 441, 477, 483, 484, 536, 537, 542, 544, 546, 547, 548, 550, 551, 553, 558, 568, 569, 637, 651, 652, 656, 657, 658, 660, 665, 666, 667, 668, 671, 672, 673, 677, 681, 682, 683, 692, 697, 703, 706, 769, 886, 898, 904, 909, 910, 995, 999, 1021, 1027, 1044, 1046, 1055], "10000": [43, 50, 52, 66, 78, 96, 104, 105, 149, 161, 201, 208, 215, 223, 231, 246, 248, 324, 340, 342, 363, 369, 419, 420, 566, 567, 649, 684, 886, 915, 1018], "100000": [176, 248, 258, 380, 618, 619, 620, 624, 625, 627, 628, 630, 898, 999], "1000000": [55, 541], "10005": 1045, "1000x": 1043, "1001": [226, 256], "10027": 1050, "10045": 1045, "1005": 1021, "10058": 1046, "10059": 1045, "10065": 252, "1007": 710, "10070308464041304": 215, "10071": 1045, "10093": 1045, "10095": 1045, "10096": 1050, "100_000": [62, 64, 188], "100k": [246, 400], "100ksampl": 400, "100x": [1037, 1040, 1054], "101": [64, 170, 290, 377, 855, 1038], "10101": 1045, "10112": 1045, "1013": 1014, "10142": 1045, "10153": 1045, "10168": 1052, "10181": 1045, "10192": 1045, "10195": 1045, "101alexmartin": [1054, 1055], "102": [141, 162, 386, 1027, 1039], "10210": 1045, "10229": 1045, "1024": [86, 130, 453, 472, 543, 907, 1050], "10280": 1045, "10297": 1045, "103": [151, 292, 293, 375, 419, 502, 560, 561, 1037], "10306": 1045, "10325": 1045, "10336": 1045, "10346": 1045, "10377": 1045, "1038": 412, "10397": 1045, "104": [43, 61], "10403": 233, "10412": 1045, "10428": 1045, "10437": 1045, "10440": 1046, "10441": 1045, "1045": 103, "10452": 1045, "10458": 1045, "1046": [103, 263], "10463": 1026, "10468": 1052, "10469096": 175, "1047": 103, "10471": 1045, "10474": 1045, "10478008": 412, "10482": 1047, "1048576": [420, 587, 594], "10493": 1049, "105": [248, 317], "10500": 1045, "10521": 1045, "10526": 412, "10536": 1045, "10580": 1046, "10581": 1045, "10584743": 175, "10587": 1045, "10591": 1049, "10593": 1045, "106": [170, 198, 256, 377, 885, 1000, 1027, 1038], "10606655": 230, "10610": 1045, "10655": 1045, "10663": 1045, "10677": 1045, "10687": 1045, "107": [127, 151, 201, 327, 412, 904, 1007, 1027, 1039], "10708": 1049, "10711": 1049, "10723": [1044, 1045], "10727": 1046, "1073": [375, 492], "10733": 1026, "10740": 1045, "1076": 336, "10774": 1045, "10795": 1045, "108": [0, 47, 1038], "1080": [374, 412], "10805": 1051, "10811": 1045, "10815": 1047, "10827": 1045, "10829": 1045, "10834": 233, "10836": 1045, "1084": 263, "10845": 1045, "10869": 1045, "1088": 256, "10881": 1045, "108843": 276, "10887": 1045, "108880": 62, "10898": 1045, "10899": 1045, "109": [61, 86, 1007, 1039], "10908": 1045, "10913": 1045, "10914094": 230, "10928": 1045, "10933": 1045, "10982": 1045, "10992": 1045, "10998": 1045, "10999": 1045, "10_000": [46, 62, 107, 140, 148, 187, 193, 246, 276, 286, 293, 330, 564, 565, 569, 570, 886], "10_fold": [375, 498], "10e": [195, 200], "10k": [323, 400, 451], "10ksampl": 400, "10x": 1037, "10x10": 220, "10\u2079": 1045, "11": [43, 54, 57, 106, 112, 123, 170, 175, 188, 189, 200, 215, 216, 217, 220, 246, 252, 267, 270, 278, 279, 285, 296, 297, 299, 317, 324, 327, 328, 342, 346, 350, 354, 356, 374, 377, 378, 386, 393, 412, 415, 416, 419, 454, 461, 486, 487, 488, 489, 501, 506, 522, 523, 617, 655, 661, 675, 720, 726, 728, 729, 783, 784, 785, 806, 809, 823, 826, 834, 861, 918, 954, 969, 998, 1002, 1004, 1016, 1020, 1021, 1027, 1035, 1039, 1043, 1045, 1046, 1048, 1051, 1052], "110": [118, 195, 212, 222, 245, 319, 329, 441, 1000, 1001], "1100": 83, "11000": 1046, "11005": 1045, "11006": 1045, "11010": 1045, "11011": 1045, "11021": 151, "11042": 1045, "11047": [1026, 1047], "11064": 1049, "11082": 1045, "110923": 204, "11099": 769, "111": [43, 46, 47, 100, 118, 127, 183, 212, 230, 239, 273, 293, 861, 1027, 1040], "1111": [655, 661], "1111111111111111": 281, "11124": 1045, "1112658": [903, 1018], "11135": 1045, "11136": 1045, "1114": 263, "11144": [1045, 1046], "11144673": 230, "11160": 1045, "11166": 1045, "1117": 624, "11176": 1045, "11179": 1046, "1118": 103, "112": [87, 170, 189, 375, 377, 1039], "11206": 1045, "11211": 1045, "112141": 386, "11232": 1047, "11235": 1045, "112589990684262": 751, "11272": 1045, "11293": 1045, "11295": 1045, "11296": 1048, "113": [224, 290, 386, 1027, 1040], "11306": 1045, "11308": 1045, "11310": 1045, "11314": 375, "11315": 1045, "11327": 1045, "113516": 276, "11353": 1045, "11354": 1046, "11364": 1046, "11364637": 51, "113781": 327, "11378556": 310, "114": [76, 248, 327, 715, 1027, 1037], "1140": 375, "11413": 43, "11420": 1045, "1145": [193, 412, 681], "11452112": 230, "11458": 1046, "11464": 1045, "11466": 1045, "11467": 1045, "1148": 263, "115": [189, 1014], "11505": 1045, "11514": 1048, "11520": 1045, "11526": 1046, "11528972": 230, "11542": 1045, "11553": 1045, "11556": 1045, "11557": 1045, "11558": 1045, "11576": 1045, "11585": 1045, "11596": 1045, "116": [143, 356, 1037], "1162": 412, "11635": 1047, "11646": 1046, "11650": 1046, "11679": 1045, "11680": 47, "11682": 1049, "11682692": 230, "11693539": 115, "11699": 1046, "117": 1038, "11705": 1046, "117154": 188, "11724": 1045, "11727": 1046, "11741": 1045, "11754": 1046, "11756": [1045, 1046], "117608": 62, "11774": 1045, "1179": 263, "118": [205, 254, 595, 1027], "11805": 1026, "11841": [903, 1018], "1185": 386, "11860": 1052, "1189": 419, "119": [1000, 1040], "11901": 1045, "11905": 1045, "11912": 1045, "11915045": 363, "11924": 1045, "11931": 215, "11932": 215, "11933": 215, "11935": 215, "11950": 1048, "11951": 1045, "11958": 177, "11973": 1046, "11977": 1026, "12": [0, 43, 45, 50, 52, 58, 70, 75, 77, 78, 86, 88, 89, 90, 105, 106, 115, 144, 145, 146, 149, 151, 170, 175, 176, 177, 184, 188, 189, 191, 196, 200, 201, 215, 223, 233, 235, 238, 239, 240, 242, 243, 245, 253, 256, 260, 261, 267, 272, 273, 275, 276, 279, 285, 286, 287, 296, 317, 318, 319, 324, 327, 330, 350, 356, 376, 377, 378, 385, 393, 395, 398, 404, 405, 406, 412, 416, 420, 447, 451, 453, 461, 486, 487, 488, 489, 501, 537, 539, 546, 575, 651, 652, 657, 665, 666, 667, 669, 674, 676, 686, 690, 691, 694, 697, 698, 730, 735, 802, 803, 806, 823, 826, 840, 861, 877, 986, 995, 996, 998, 1002, 1004, 1006, 1007, 1016, 1020, 1021, 1027, 1035, 1038, 1040, 1044, 1045, 1047, 1048, 1053, 1054], "120": [152, 236, 329, 421, 595, 1037], "1200": [83, 147, 313, 419], "12000": 525, "12068": 1047, "12069": 1050, "121": [100, 137, 184, 247, 623, 674, 1016], "12105": 1045, "12116": 1046, "1212": 503, "12122": 1045, "121351": 204, "12143": 1046, "12145": 1047, "12147": 1026, "12159": 1045, "12165": 1045, "12165031": 1007, "1217": 215, "12171": 1045, "12174": 1046, "12177": 1046, "12190903": 115, "12196": 215, "12197": 1046, "122": [0, 137, 177, 184, 189, 246, 247, 262, 386, 1007, 1027], "1220": 624, "12211": 1045, "12222": 1046, "12232": 1046, "12234": 1045, "12246": 1045, "12251": 1046, "12258": 1047, "12274212": 1007, "12279": 1046, "12285": 1052, "1229": 522, "123": [139, 158, 363, 419, 521, 522, 523, 560, 561, 842, 1007, 1014], "12300": 1046, "12303": 1047, "12304": 1045, "12317": [177, 1045], "1232": 419, "12326": 43, "12327": 43, "12328": [43, 1046], "12329": 43, "12330": [43, 1045], "12334": 1046, "12338": 1045, "12339": 1045, "1234": [196, 261, 276, 380], "12344": 1046, "12345": 1045, "12350": 1045, "1236": 319, "12360": 1045, "12365": 1045, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 276, "12383": 43, "12388": 1045, "12393": 1045, "124": [46, 419, 1039], "124225": 204, "12436": 1046, "12441": 1045, "12451": 1045, "12462": 1045, "12467": 1045, "12471": 1045, "12481": 1045, "125": [43, 86, 111, 124, 272, 325, 539, 995, 1006, 1016, 1027], "12513": 1046, "12514": 1045, "125140": 276, "12517": 1045, "12518": 1045, "12522": 1045, "125247168": 52, "12543": 1046, "12557": 1047, "12568": 1046, "12569": 1047, "12582": 1046, "12583": 1046, "1259": 57, "12599": 1046, "126": [208, 419, 1027], "12612": 1045, "12613": 1046, "12625": 1045, "1263": 386, "12638": 1049, "12650": 1047, "126502": 204, "12669": 1046, "1268187": 230, "12685": 1045, "12699": 1045, "127": [147, 1037], "12701": 1045, "12704": 1045, "127128": 148, "12715": 1046, "12732": 1046, "1276": 47, "12789": 1047, "128": [53, 54, 215, 367, 541], "12800": 1026, "12807": 1046, "12821": 1046, "12834": 1046, "12852": [1026, 1047], "12855": 1046, "12860": [233, 1046], "12861": 1046, "12866": 1026, "1288": [45, 375], "12881": 1045, "12883823": 416, "12887": 1047, "129": [217, 1037], "12908": 1046, "12914884": 1007, "12916": 1046, "12927": 1047, "12946": 1045, "12949": 1045, "12955": 1046, "12972": 1046, "12983": 1046, "12988": 1046, "1299": [875, 1016], "12th": 1018, "13": [43, 45, 49, 50, 52, 79, 106, 126, 130, 144, 147, 149, 183, 188, 193, 201, 224, 240, 266, 267, 274, 277, 279, 311, 313, 317, 330, 343, 375, 377, 380, 386, 393, 416, 424, 501, 515, 518, 537, 538, 556, 557, 587, 611, 640, 644, 739, 764, 823, 853, 868, 875, 901, 902, 1002, 1006, 1007, 1012, 1013, 1016, 1021, 1027, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1049], "130": [188, 386, 1027], "1300": 83, "13003": 1049, "13005": 1045, "13007": 1046, "130107": [230, 246, 493], "13013": 1047, "13042": 1052, "13046": 1045, "13077794": 363, "13086": 1046, "131": [43, 53, 89, 355, 386, 1006, 1038], "13124": [1045, 1046], "13134": 1045, "13142": 1046, "13146": [1026, 1047], "13151": 1046, "13157": 1046, "13164": 1046, "13165": 1045, "13174": 1046, "1319": [875, 1016], "131900": 102, "13193": 1046, "132": [43, 47, 53, 89, 419], "13204": 1049, "13213": 1047, "1322": 627, "13221": 1045, "13222543": 615, "13227": 1026, "1323": 215, "13231": 1047, "13233": [375, 498, 499], "13240": 1046, "13241": 1046, "13250": 1046, "13251": 1046, "13253": 1046, "13260": 1046, "13266": 1046, "13276": 1045, "13279": 1046, "13283": 1046, "13286": 996, "13290": 1047, "133": [53, 89], "13312": 1045, "13317": 1046, "13328": 1046, "13333": 1046, "13336": 1046, "13350": 1046, "13363": 1046, "13366": 1046, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 268, "13382": 1046, "13389": 1046, "13392": 1047, "13393": 1047, "13397": 1046, "134": [86, 127, 147, 267, 273, 1040], "13422": 1046, "13427": 1046, "13439": 1046, "13447": 1046, "13459": 1046, "13467": 1047, "13485": 1046, "13486": 1046, "13496": 1046, "135": [170, 327, 377], "13511": 1048, "13524": 1046, "1353": 354, "13531": 1046, "13545": 1046, "13549": 1046, "13554": 1046, "13562": 1046, "13575": 1047, "13601": 1046, "13607": 1046, "13609": 1047, "13618": 1047, "13620": 1046, "13628": 1046, "13636": [1002, 1046], "13641": 1046, "13649": 1054, "13651": 1046, "137": [252, 386, 1038], "13704": 1047, "13707": 1047, "1371": 539, "13726": 1047, "1373": 1003, "1374": 539, "13741": 1046, "13769": 1047, "13772": [1045, 1046], "13773": 1047, "13779": 1046, "1378": 233, "13780": 1046, "1379": 233, "138": [386, 419, 1006], "13806": 1047, "1382": 529, "13822072286080167": 281, "13835": 1046, "1385": 478, "13864": 1046, "13875": 1047, "13877": 1046, "13894": 1046, "13896": 1047, "139": [119, 170, 233, 293, 386, 419, 456, 466, 696, 700, 1007, 1027], "13900": 1049, "13902": [1026, 1047], "13903": [1045, 1046], "13910": 1046, "13911": [1026, 1047], "13925": 1047, "13933": 1047, "13938": 1047, "13947": 1046, "1396": 1003, "13960": 1047, "1397": 386, "13974": 1046, "13983521": 310, "13987": 1047, "13988486": 230, "13995": 1047, "13th": 64, "14": [43, 50, 52, 73, 82, 93, 95, 96, 99, 106, 112, 126, 165, 189, 200, 204, 206, 233, 237, 242, 247, 267, 272, 278, 279, 288, 292, 293, 311, 316, 317, 327, 349, 352, 368, 375, 377, 378, 393, 398, 404, 405, 412, 416, 501, 503, 515, 558, 559, 640, 648, 697, 819, 823, 875, 999, 1002, 1006, 1016, 1021, 1027, 1035, 1037, 1038, 1040, 1041, 1045, 1050], "140": [86, 329, 419, 515, 521, 522, 523, 560, 561, 1007], "1400": [83, 478], "14012": 1047, "14024": 1046, "14028": 1047, "14035": 1047, "14048": 1048, "14053": 1046, "14067": 1046, "14075": 1048, "14087": 1046, "14092": 1046, "141": [290, 506, 539, 909, 1007], "14108": 1047, "14114": 1047, "14156": 233, "14170": 1047, "14180": [1026, 1048], "1419": 43, "14194": 1047, "14197": 1046, "142": [43, 175, 419, 1027], "1422": 43, "14228": 368, "14237": [1045, 1046], "14259": 1047, "14264": 1048, "142857": 233, "14286": 1047, "14287": 1047, "14294": 1047, "14296": 1047, "143": [170, 377, 475, 476, 1018, 1037, 1038], "14300": 1048, "14302": 252, "14305": 1047, "14309": 1046, "14336": 1047, "14338": 996, "14356": 1047, "14357": 1047, "14378": 1047, "14381": 1047, "14393": 1046, "144": [273, 386, 1037], "1440": 43, "14406": 1047, "1441": 627, "14410151": 615, "14417": 1047, "144204": 148, "1443": 1012, "14430": 1047, "14446": 1049, "14458": 1047, "14464": 1047, "14475": 1047, "144943": 62, "14496": [386, 1046], "145": [52, 412], "14510": 1047, "14516": 1048, "14520": 1047, "14538": 1047, "14544": 1047, "14549": 1047, "1456": 233, "14582": 1026, "14591": 1047, "14593": 1047, "14595": 1047, "145957": 148, "146": [45, 419], "1460": [145, 156], "14602": 1047, "14603365": 230, "14623": 1047, "14625": 47, "14629": 1047, "1464": 243, "14646": 1047, "14647": 1047, "14680": 1047, "14682": 1047, "14696": 1048, "147": 1007, "14702": 1047, "147022": 204, "14704": 1047, "14706": 1047, "1471": 1012, "14710": 1047, "14732": 1047, "14736": 1052, "1474": 386, "14740": 1047, "14764": 1047, "148": 1040, "14800": 1049, "14810": 319, "1482": 47, "14848": 1048, "14849": 1047, "14862": 1052, "14864": 1047, "14865": 1047, "14869": 1047, "14872": 1047, "14884": 1047, "14890": 1047, "14894": 1047, "14898": 1047, "149": [1007, 1037], "1490": 47, "14900": 1047, "14902": 1047, "14907": 1047, "14908": 1047, "14933": 1047, "14936": 1047, "14971": 1047, "14975": 1051, "14982": 1049, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 80, 86, 87, 88, 94, 95, 99, 105, 106, 111, 113, 119, 124, 130, 139, 141, 144, 145, 148, 151, 165, 167, 169, 172, 176, 183, 187, 188, 189, 204, 212, 217, 229, 233, 237, 240, 242, 260, 261, 267, 268, 276, 278, 281, 284, 285, 288, 297, 301, 308, 309, 311, 313, 315, 317, 328, 333, 341, 343, 346, 349, 352, 359, 374, 375, 378, 380, 393, 398, 404, 405, 416, 419, 420, 444, 458, 494, 501, 502, 503, 536, 542, 550, 551, 560, 561, 603, 609, 614, 649, 657, 666, 668, 673, 681, 683, 697, 823, 838, 861, 890, 995, 1001, 1002, 1003, 1006, 1009, 1010, 1016, 1021, 1027, 1033, 1035, 1039, 1049, 1051, 1052], "150": [43, 45, 104, 118, 119, 139, 148, 161, 236, 240, 242, 256, 286, 329, 342, 347, 350, 377, 416, 421, 509, 606, 607, 830, 831, 832, 1006, 1027], "1500": [74, 83, 90, 95, 100, 119, 235, 239, 258], "15000": [677, 692, 866, 867], "15005": [1048, 1050], "15007": 1049, "15010": 1047, "15028": 1047, "15038": 1047, "150407": 386, "15044": 1047, "15049": 1047, "150527": 309, "15053": 1047, "15057": 1047, "1506": 388, "15080": 1047, "15082": 1047, "15083": 1047, "15084": 1047, "15086": 1047, "15094": 1047, "15096": 1047, "15099": 1047, "150x4": 118, "151": [327, 386, 419, 506, 1018], "15100": 1047, "1511007": 256, "151101": 256, "15119": 1047, "15120": 1047, "15126": 1049, "1513": 47, "15138": 1047, "15160": 1047, "15179": 1048, "152": [91, 245, 386, 1027], "1521": 47, "15257": 1047, "1527": 865, "15274": 1047, "15297572": 541, "153": 668, "15304": 1047, "15319": 1026, "153244303321897735": 412, "15361": 1049, "15375": 1047, "15380": 1048, "15382": 1047, "15393": 1047, "154": [84, 311, 656, 1007, 1027], "1542": 386, "15427": 1049, "15429": 1047, "15436": 1048, "154453": 309, "15463": 1047, "15488": 1047, "15490": 1047, "15503": 1048, "15521": 161, "15524": 1047, "1553374": 412, "1553511": 412, "1554": 865, "15550": 1026, "15557": 1047, "15558": 1048, "15582": 1048, "156": [170, 188, 377], "15611": 996, "15622": 1048, "15625": 1047, "156252": 204, "15636": 1049, "15652": 1048, "15655": 1048, "15661": 1047, "15669": 1048, "15699552": 1007, "157": 386, "15707": 1048, "15709": 1048, "15730": 1048, "157334": 309, "15751": 1047, "15760": 1047, "15762": 1048, "15763": 1049, "15773": 1048, "15782": 1048, "15785": 1048, "15797": 1047, "158": [77, 419, 674], "15806": 1048, "15810": 1047, "15834": 1048, "15863": 1047, "15864": 1048, "15868": 1047, "15879": 1047, "15888": 1047, "15898": 1047, "159": [86, 310, 375, 1027, 1037], "1590": 311, "15918": 1048, "1592": 503, "15926": 1048, "15930": 1047, "15933": 1047, "15936": 1047, "15937": 1047, "159419": 256, "15946": 1048, "15947": 1047, "15948": 1051, "15950": 1048, "15953": 1048, "15959": 1048, "15963": 1048, "1597": 267, "15980": 1048, "15984": 1051, "15996": 1047, "15e": 121, "16": [43, 44, 52, 57, 64, 78, 83, 84, 87, 99, 106, 111, 121, 124, 165, 189, 208, 214, 215, 216, 233, 235, 236, 240, 247, 251, 252, 267, 275, 276, 277, 281, 297, 311, 313, 317, 322, 347, 355, 360, 375, 377, 378, 386, 393, 398, 404, 405, 416, 417, 420, 446, 461, 463, 475, 476, 482, 483, 502, 503, 507, 521, 539, 540, 575, 594, 600, 601, 612, 613, 644, 655, 656, 659, 660, 661, 662, 687, 688, 818, 823, 835, 884, 910, 918, 981, 982, 983, 995, 1002, 1006, 1016, 1021, 1033, 1035, 1037, 1038, 1042, 1043, 1045, 1046], "160": [57, 250, 995, 1027], "1600": 83, "160030": 204, "16006": 1048, "1600x1600": 87, "16018": 1051, "16021": 1048, "16052385": 131, "16061": 1051, "16066": 1049, "16069": 1048, "16075": 1048, "16076": 1047, "16084": 1048, "16090": 1048, "16103": 1048, "16111": 1048, "16112": 1048, "16117": 1048, "161245": 87, "16132": 1048, "16144": 386, "16147": 377, "16149": 1048, "16159": [386, 1048], "1616": 477, "16182": 1048, "16183": 1048, "162": [91, 377], "16224": 1048, "1623": 57, "1624": 503, "16245": 1048, "16257": 1048, "1626": 1026, "16261": 1048, "16266": 1048, "16280": 1048, "16289": 1049, "163": [170, 233, 290, 334, 377, 1014, 1027], "163224": 204, "16323": 1048, "16326": [43, 1049], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1048, "16335": 1049, "16352": 1049, "16362": 1048, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1049, "16397": [1047, 1048], "164": 419, "164009": 276, "16401": 1048, "16403": 1048, "16431": 1048, "16437": 1048, "16442": 1048, "16443186": 1007, "16449": 1050, "16451": 1048, "16466": 1048, "16484": 1048, "16493": 1049, "165": 1007, "16500": 1047, "16505": 1047, "16508": 1048, "16530": 1049, "16531": 151, "16539": 1048, "16585": 1048, "166": [43, 311, 386, 1006, 1037], "16605": 1051, "16619": 1049, "16622": 1048, "16625": 1049, "16632": 1048, "16655": 1048, "16663": 1048, "166667315173": 52, "16692": 1048, "16695": 1052, "167": [386, 1037], "16718": 1048, "16726": 1048, "16728": 1048, "16747": 1052, "16748": 1051, "168": 1037, "1680": 377, "16801": 1048, "16837": 1048, "16841": 1048, "16849": 1048, "1689": 355, "169": [91, 255, 311, 1027], "16906": 1049, "1691": 1002, "169106": 273, "1693": 909, "16935": 1049, "16948": 1051, "16950": 1048, "169504": 233, "16979946": 1007, "1698": 654, "16981": 1048, "16985": 1049, "16993": 1048, "17": [49, 52, 57, 74, 85, 106, 111, 124, 151, 173, 188, 214, 239, 246, 267, 276, 308, 317, 375, 378, 385, 398, 404, 405, 412, 416, 448, 465, 491, 502, 503, 505, 528, 536, 541, 545, 552, 554, 555, 560, 564, 565, 574, 575, 602, 633, 654, 662, 663, 664, 671, 674, 677, 679, 692, 697, 734, 735, 745, 766, 771, 788, 789, 792, 794, 823, 847, 858, 873, 878, 879, 887, 889, 895, 911, 914, 917, 918, 919, 920, 954, 995, 996, 1007, 1009, 1016, 1027, 1033, 1035, 1037, 1038, 1039, 1040, 1043, 1046, 1051], "170": [79, 90, 91, 95, 386], "1700": 83, "170087": 309, "17021": 1048, "17032": 1048, "17036": 1050, "17038": 1049, "170388": 1007, "1706": 336, "17061": 1048, "17090": 1049, "17095": 1049, "171": [86, 170, 377, 386, 793, 1006], "17107": 1049, "1714": 1002, "17148": 1049, "17159": 1049, "17169": 1050, "17187": 1049, "17192": 1049, "17193": 1049, "172": [386, 498, 499, 654, 1002], "17204": 1048, "17205": 1048, "17210": [52, 1048], "17225": 1049, "17226834": 86, "1723": 46, "17233": 1049, "17235": 1048, "17236387": 218, "17266": 1051, "17289014": 175, "1729": 189, "173": [170, 386, 589], "17309": 1048, "17317": 1049, "17357": 1048, "17360": [47, 1048], "17367": 1049, "17370318": 230, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1049], "1738": 1006, "17386": 1049, "17388": 1053, "17396": 1049, "174": [147, 243, 311, 386, 589], "17406": 1049, "17412": 1049, "17414": 1049, "17427": 1049, "17433": 1048, "17443": 1050, "17448": 1049, "1747": 189, "17474": 233, "17478": 1049, "17491": 1049, "17499": 1049, "175": [201, 386, 1016, 1027], "17526": 1049, "175298": 276, "17546": 1049, "17569": 1049, "17578": 1049, "17598": 1049, "176": [212, 386, 842, 1007, 1014, 1027], "17603": 1049, "17604": 1049, "17606": 1049, "17608": 1049, "17609": 1049, "17610": 1049, "17612": 1049, "17614": 1049, "17616": 1049, "17622": 1050, "17633": 1049, "17644": 1049, "17651": 1049, "17661": 1049, "17662": 1049, "17679": 1049, "17694": 1048, "177": 386, "17702": 1049, "1771": 355, "17742": 1048, "17743": 1050, "17746": 1050, "17750": 1050, "17759": 1049, "17769": 1050, "17772": 1050, "17777": 1049, "17785": 1050, "178": [46, 377, 386, 515, 853], "178000": 315, "17804": 1049, "17812": 1048, "17819": 1051, "17826": 1049, "17833": 1049, "17848": 1048, "1785": 355, "17856": 1049, "17864": 1049, "17876": 1049, "17878": 1049, "179": [377, 386, 419, 1037], "17914": 1048, "17928620": 374, "17932": 1049, "17935": 1049, "17937": 1049, "17959": 1048, "1797": [91, 271, 311, 332, 377, 424, 449, 507, 537, 538, 539, 540, 604, 605, 693, 694, 695, 696, 698, 1009], "17984": 1049, "17985": 1048, "17985197": 230, "17987": 1049, "17992": 1049, "17995": 1048, "17997": 1049, "17_760": 151, "17t14": 374, "18": [43, 46, 47, 57, 75, 79, 82, 86, 93, 95, 106, 128, 148, 181, 188, 226, 235, 240, 242, 247, 267, 273, 311, 317, 319, 333, 354, 355, 356, 380, 386, 416, 417, 420, 451, 463, 497, 505, 506, 507, 509, 510, 515, 540, 541, 543, 545, 546, 562, 563, 564, 565, 568, 569, 570, 571, 574, 576, 577, 578, 579, 580, 582, 583, 594, 599, 604, 605, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 651, 654, 663, 664, 676, 719, 723, 736, 739, 740, 746, 748, 765, 775, 802, 803, 826, 842, 865, 866, 867, 873, 879, 887, 888, 899, 909, 910, 917, 918, 919, 920, 921, 952, 953, 995, 1004, 1006, 1016, 1027, 1033, 1035, 1037, 1038, 1041, 1042, 1044, 1045, 1047, 1048], "180": [70, 258, 259, 260, 263, 264, 266, 302, 306, 386, 507, 1027], "1800": 83, "18000": [356, 375], "18010": 1050, "18016": 1048, "18020": 1052, "1804243": 374, "18052": 1049, "18094": 1052, "181": [290, 311, 386], "18108182014": 181, "18114": 1049, "18121": 1049, "18124": 1049, "18149": 1049, "18167": 1049, "18170": 1051, "18176": 1049, "18197458": 363, "182": [81, 172, 304, 311, 386, 419, 1027], "18222": 1049, "18256": 1049, "18266": 1049, "18269": 1049, "18278": 1049, "18280": 1049, "18293": 1049, "18298": 1052, "183": [138, 333, 386, 1007, 1027, 1037], "18302": 1049, "18310": 1051, "18326": 1049, "18328": 1050, "18334": 1049, "18341": 1049, "18343": 1049, "18368": 1050, "18370": 1049, "18393": 1050, "18394": 1049, "183mb": 354, "184": [43, 201, 215, 311, 386, 804], "18405": 1049, "18406": 1049, "18410": 1049, "18429": 1049, "18433": 1050, "18444": 1050, "18447": 1049, "18459": 1050, "1847": 46, "18482": 1051, "18488": 1053, "185": [86, 128, 170, 181, 303, 377, 386, 866, 867, 1027], "1850": [45, 375], "18508": 1049, "18510": 1049, "18525": 1049, "18527": 1049, "18528": 1049, "18543": 1050, "18545": 1049, "18555": 1055, "185654": 276, "185659": 204, "18595": 1049, "186": [172, 215, 311, 386, 793, 1006], "18607": 1049, "18612": 1049, "18622": 1049, "18639": 1049, "18649": 1050, "1865": 47, "18682": 1049, "18689": 1054, "18691": 1049, "187": [97, 231, 238, 273, 386, 589, 1007, 1027, 1039], "1871": 1021, "18723": 1053, "18736": 1050, "1874": 1021, "18746": 1049, "1875": 986, "18768": 1049, "188": [118, 170, 177, 377, 386, 589, 1027], "1880": 386, "18805": 1052, "18815268": 256, "188153": 256, "18818427": 672, "18832": 1051, "18842": 1050, "18843": 1055, "18846": [375, 492, 493], "1887": 355, "18898": 1050, "189": [215, 341, 386, 906, 1019, 1027], "18925": 1050, "189267": 276, "18959": 1050, "189631": 204, "18964": 1050, "18975": 1051, "189830": 327, "18987": 1049, "19": [43, 52, 57, 151, 177, 188, 215, 219, 230, 263, 267, 317, 318, 333, 377, 378, 394, 398, 404, 405, 412, 420, 423, 448, 497, 521, 522, 523, 541, 545, 546, 552, 554, 555, 562, 563, 564, 565, 569, 570, 571, 587, 594, 612, 653, 663, 664, 671, 672, 673, 676, 677, 679, 681, 683, 692, 712, 786, 790, 804, 805, 819, 832, 837, 838, 840, 841, 855, 856, 875, 886, 907, 911, 914, 917, 918, 919, 920, 995, 1006, 1016, 1027, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1045, 1054], "190": [50, 147, 207, 233, 282, 306, 375, 386, 503, 1027], "1900": 83, "19002": 1050, "19004": 1050, "19011": 1050, "19024": 1050, "19035": 1050, "1903908407869": 218, "19041": 1050, "19046": 1050, "19047631514961908949361222113": 52, "1905": [170, 377], "19052": 1050, "19055": 1050, "19069": 1050, "19075": 1052, "19085": 1051, "191": [354, 386, 1007], "19112072e": 197, "19126": 1049, "19145": 356, "19158": 1051, "19159": 1050, "19162": 1050, "19172": 1050, "19174891": 310, "19179": 1049, "19182": 1049, "19198": 1050, "192": [147, 345, 386, 1027, 1037], "19210": 1050, "19211": 1049, "19234": 1049, "19244": 1050, "19263": 1050, "19271": 1049, "19278": 1050, "192913": 276, "192938": 52, "19296": 1050, "19297": 1050, "193": [166, 386, 419, 720, 791, 1019, 1027], "19308": 1049, "1931": 111, "19310": 1050, "19317": 177, "19336": 1050, "193548": 233, "19356": 1050, "1936": 377, "19365": 1050, "19390": 1050, "19391": 1050, "193949": 276, "194": [259, 311, 1027], "1940": 233, "19401": 1050, "19407": 1049, "19411": 1050, "19415": 1050, "19417": 1049, "194239": 386, "19426": 1050, "19428": 1050, "19438": 1051, "19459": 1050, "19472": 1050, "19473": 1050, "1948": 57, "19483": 1050, "19490": 1051, "19491": 1050, "19499": 1050, "195": [498, 499], "1950": [377, 1006], "1951": 233, "195133": 386, "19520": 1050, "19522393": 230, "19527": 1050, "19564": 1050, "19568": 1050, "19571": 1050, "19579": 1049, "1958": [177, 417, 419, 537], "19580": 1049, "196": [906, 1019], "1960": [632, 721], "19616": 1050, "19631": 1050, "1964": [695, 699, 885, 897, 1003], "19641": 1050, "19643": 1050, "19646": 1049, "19659": 1049, "19662693": [849, 850], "19664": 1053, "19669": 1050, "196795181": 52, "19680": 1051, "196861": 204, "19689": 1051, "19703": 1049, "1972": 377, "19721": 1049, "19727": 1049, "1973": [377, 410], "19731": 1056, "19732": 1049, "19733": 1050, "19734": 1050, "1974": [412, 420, 715], "19747": 1051, "1975": 1009, "19752": 1050, "19766": 1050, "197666": 276, "1977": 640, "1978": [233, 1002], "19784": 1050, "19788": 1050, "1979": [412, 730, 774], "19790": 1050, "19794": 1051, "19799": 1050, "198": 1037, "1980": 377, "19803308": 115, "1981": [233, 1002], "19829832": 230, "1983": [412, 736, 889], "19836": 1050, "1984": [111, 112, 414, 478, 917, 918, 1022], "19847": 1049, "1985": [188, 412, 710, 720, 791], "1986": [996, 1022], "19869": 1050, "1987": [412, 612, 613, 797, 798], "198766": 276, "19879": 1050, "1988": 377, "19883": 1050, "19888": 1049, "1989": [282, 640, 793, 866, 867, 1002, 1009], "199": [652, 796, 1021], "1990": 375, "19906": 1050, "19908": 1050, "1990a": 410, "1991": [521, 522, 523], "19916": 1051, "1992": [170, 375, 377, 416, 419, 572, 573, 650, 1002], "19922": 1049, "19924": 1049, "1993": [170, 377, 478, 669, 690, 691, 1022], "19934": 1050, "19939": 1049, "1993apr6": 102, "1994": [170, 375, 377, 649], "19948": 1050, "1995": [170, 273, 377, 410, 419, 558, 559, 839, 906, 1007], "1996": [64, 151, 412, 419, 423, 448, 521, 522, 523, 560, 561, 1016], "1997": [136, 375, 417, 419, 540, 559, 695, 699, 1002, 1003, 1006], "1998": [151, 273, 375, 377, 417, 419, 560, 561, 839, 844, 875, 1007, 1008, 1010, 1016, 1020], "19982": 1049, "1999": [180, 375, 410, 412, 414, 417, 419, 441, 454, 461, 473, 478, 539, 546, 560, 561, 564, 565, 728, 903, 911, 912, 914, 915, 1012, 1018], "19th": 412, "1_": 1016, "1_000": [44, 64, 70, 104, 126, 151, 172, 177, 179, 189, 246, 270, 350, 411, 542, 544, 706, 804, 827, 828, 836], "1d": [2, 136, 138, 185, 189, 216, 246, 294, 297, 306, 330, 349, 360, 380, 387, 389, 393, 394, 413, 418, 468, 471, 622, 635, 638, 658, 662, 665, 668, 689, 708, 717, 718, 724, 734, 735, 739, 743, 788, 789, 792, 801, 851, 852, 853, 854, 855, 857, 859, 860, 861, 874, 926, 929, 931, 935, 936, 968, 992, 1007, 1027, 1037, 1042, 1043, 1044, 1046, 1050, 1051, 1055, 1056], "1e": [44, 45, 46, 49, 55, 63, 80, 121, 170, 172, 175, 177, 178, 179, 180, 181, 183, 188, 196, 208, 215, 216, 222, 229, 233, 238, 242, 248, 253, 258, 261, 264, 271, 281, 284, 310, 320, 325, 328, 336, 341, 343, 350, 354, 386, 424, 447, 451, 456, 463, 466, 475, 476, 482, 486, 487, 488, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 564, 565, 566, 567, 597, 602, 611, 613, 614, 616, 618, 619, 620, 624, 625, 627, 628, 630, 632, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 694, 695, 696, 697, 698, 699, 700, 733, 790, 802, 803, 819, 844, 845, 846, 847, 848, 849, 850, 858, 866, 867, 874, 904, 905, 909, 910, 911, 912, 913, 914, 915, 991, 995, 1006, 1010, 1014, 1016, 1020, 1045, 1050, 1051, 1052], "1e0": [172, 248, 264, 281, 995], "1e1": [172, 178, 215, 248, 343], "1e15": 181, "1e2": [49, 172, 179, 248, 264, 343], "1e3": [45, 46, 49, 172, 178, 183, 248, 284, 328, 995], "1e4": [284, 664, 684, 903, 1018], "1e5": [45, 177, 197, 199, 205, 284, 618, 619, 620, 624, 625, 627, 628, 630, 898, 903, 1018], "1e6": [47, 49, 208, 246, 330, 354, 356, 367, 541, 903, 1006, 1018], "1e7": 386, "1er": 420, "1f": [52, 58, 83, 86, 124, 196, 215, 246, 258, 260, 280, 322, 329, 355, 356], "1gb": 367, "1kastner": 1044, "1m": 971, "1mb": [368, 1042], "1mo": 177, "1nn": 377, "1or": 420, "1px": 311, "1qlettinn8oi": 354, "1st": [0, 43, 93, 118, 180, 216, 318, 887, 888], "1z": 420, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 161, 163, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 374, 375, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 392, 393, 394, 398, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 475, 476, 477, 478, 479, 482, 483, 484, 486, 487, 488, 489, 498, 501, 505, 506, 509, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 589, 590, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 708, 709, 710, 711, 712, 713, 716, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 768, 769, 772, 773, 774, 776, 778, 779, 780, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 902, 903, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 924, 931, 932, 933, 935, 936, 937, 941, 945, 951, 952, 953, 954, 955, 956, 957, 959, 960, 966, 967, 968, 969, 970, 971, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1027, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1056], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 80, 81, 83, 87, 88, 94, 100, 109, 113, 119, 121, 124, 128, 130, 137, 141, 144, 145, 148, 152, 156, 157, 159, 163, 165, 166, 167, 170, 178, 187, 189, 190, 198, 204, 205, 207, 211, 212, 214, 215, 216, 219, 224, 227, 228, 229, 230, 232, 238, 246, 252, 260, 262, 263, 267, 273, 274, 276, 277, 279, 284, 285, 288, 290, 293, 297, 298, 299, 300, 301, 304, 311, 317, 318, 319, 323, 324, 325, 326, 328, 332, 333, 336, 340, 342, 346, 348, 352, 355, 356, 360, 361, 373, 377, 378, 380, 385, 386, 398, 404, 405, 412, 419, 420, 445, 450, 451, 453, 468, 469, 473, 475, 476, 482, 492, 493, 494, 495, 497, 499, 501, 502, 505, 507, 509, 510, 516, 517, 520, 521, 528, 536, 541, 542, 547, 550, 551, 553, 557, 560, 561, 564, 565, 566, 567, 568, 574, 575, 587, 594, 595, 597, 599, 602, 604, 634, 635, 650, 654, 663, 671, 672, 673, 681, 683, 701, 709, 713, 718, 721, 730, 731, 744, 761, 762, 772, 797, 798, 802, 803, 804, 805, 819, 831, 832, 833, 836, 838, 841, 842, 843, 846, 847, 854, 855, 866, 867, 868, 869, 871, 873, 874, 882, 883, 884, 885, 890, 904, 905, 907, 908, 913, 916, 921, 927, 933, 935, 936, 939, 983, 995, 1002, 1006, 1009, 1012, 1013, 1016, 1019, 1027, 1029, 1030, 1032, 1033, 1035, 1037, 1043, 1046, 1049, 1051, 1052], "200": [69, 70, 79, 83, 87, 93, 107, 124, 137, 148, 155, 176, 201, 210, 216, 219, 220, 221, 227, 232, 236, 254, 258, 274, 280, 282, 283, 313, 316, 334, 342, 343, 361, 363, 375, 392, 417, 419, 424, 444, 458, 472, 475, 476, 527, 538, 539, 540, 543, 544, 545, 548, 552, 589, 654, 656, 676, 684, 697, 751, 819, 866, 867, 907, 911, 912, 913, 914, 915, 927, 1006, 1021, 1027], "2000": [54, 63, 75, 83, 107, 122, 128, 193, 261, 264, 273, 290, 308, 326, 355, 375, 377, 412, 413, 419, 424, 456, 466, 538, 539, 564, 694, 696, 698, 748, 793, 802, 855, 885, 897, 1003, 1006, 1012, 1018, 1056], "20000": [57, 123], "200000": [233, 874], "20002": 1050, "2001": [2, 64, 177, 190, 267, 272, 409, 412, 419, 441, 455, 456, 457, 466, 516, 564, 565, 569, 570, 633, 639, 644, 650, 696, 701, 740, 793, 890, 902, 940, 996, 998, 1002, 1006, 1012, 1014, 1016, 1018, 1021], "2002": [96, 410, 412, 419, 441, 452, 598, 599, 731, 761, 856, 904, 998, 1006], "20023": 1050, "2003": [2, 51, 177, 409, 412, 417, 420, 455, 456, 466, 518, 520, 694, 698, 844, 846, 1002, 1003, 1008, 1018, 1045], "20030": 1050, "20031": 1051, "2004": [44, 170, 273, 290, 375, 377, 412, 414, 417, 477, 540, 612, 613, 694, 698, 710, 748, 788, 905, 1000, 1002, 1003, 1008, 1021], "20041857": 329, "2005": [62, 64, 112, 377, 410, 441, 443, 858, 1002, 1009, 1019], "20056": 1050, "2006": [2, 50, 306, 375, 419, 422, 466, 503, 562, 563, 570, 571, 615, 616, 619, 624, 627, 654, 671, 672, 746, 793, 794, 802, 844, 902, 919, 920, 1002, 1006, 1008, 1011, 1018, 1019], "2007": [0, 73, 202, 375, 412, 421, 444, 456, 458, 464, 466, 571, 661, 696, 722, 739, 742, 763, 764, 800, 998, 1002, 1004, 1006], "20072": 1050, "2008": [51, 414, 416, 417, 482, 539, 568, 595, 650, 669, 690, 691, 697, 721, 731, 761, 839, 844, 848, 865, 1000, 1003, 1004, 1006, 1007, 1008, 1011, 1012, 1021], "20087": 1050, "2009": [2, 135, 138, 139, 150, 200, 412, 416, 417, 419, 420, 524, 525, 533, 536, 542, 543, 545, 546, 549, 552, 558, 564, 565, 640, 676, 684, 701, 840, 917, 918, 952, 953, 1002, 1006, 1007, 1013, 1022], "200_000": [874, 1053], "200j": 163, "200m": 375, "200x": 1037, "201": [82, 147, 170, 214, 260, 377, 589, 1027], "2010": [0, 110, 189, 278, 279, 409, 412, 414, 416, 417, 425, 479, 541, 709, 713, 724, 725, 745, 834, 866, 867, 998, 1002, 1006, 1010, 1020, 1024, 1037], "2011": [0, 189, 386, 417, 420, 540, 543, 545, 546, 552, 595, 632, 643, 663, 735, 996, 1010, 1020, 1024, 1037], "20117": 1050, "2012": [0, 112, 410, 419, 560, 561, 568, 644, 748, 995, 999, 1006, 1024, 1037], "2013": [0, 193, 377, 412, 416, 417, 541, 731, 761, 998, 1006, 1024, 1038, 1039], "2014": [0, 374, 406, 417, 419, 422, 535, 612, 613, 627, 628, 663, 697, 866, 867, 952, 953, 1003, 1010, 1030, 1040], "20145": 1051, "2015": [0, 189, 374, 713, 726, 728, 729, 866, 867, 1006, 1013, 1030, 1041, 1042], "201520": 204, "20155": 1050, "20159": 1050, "2016": [0, 240, 374, 412, 995, 1042, 1043], "20161": 1050, "20165": 1050, "2017": [0, 273, 374, 410, 412, 423, 448, 1006, 1043, 1044], "2018": [0, 215, 233, 420, 454, 995, 1006, 1030, 1044, 1045], "2019": [0, 189, 378, 412, 456, 466, 697, 1003, 1006, 1013, 1016, 1045, 1046, 1047], "2020": [0, 375, 1047, 1048, 1049, 1050], "20200": 1050, "20207": 1050, "20209": 1050, "2021": [0, 378, 380, 676, 1006, 1049, 1050], "2022": [0, 368, 412, 419, 710, 1016, 1051, 1052], "2023": [0, 392, 406, 410, 1052, 1053], "20231": 1050, "2024": [1054, 1055], "20240": 1050, "20250": 1050, "20272": 1050, "20297": 1050, "203": [86, 355], "20312": 1050, "203174": 204, "20326": 1050, "20331": 1052, "2034": [354, 375], "20380": 1050, "20385": 1050, "2039": 276, "204": [129, 283, 340, 1014, 1019, 1027], "20408": 1051, "20415": 1052, "20416": 1050, "20431": 1050, "20477": 1050, "20512": 1050, "20515": 1050, "20521": 1050, "20524": 1053, "20526": 1050, "20528": 1050, "20531": 1050, "20534": 1050, "20552": 1050, "20554": 1050, "20560": 1050, "20567": 1051, "20583": 1050, "20597": 1050, "20617": 1052, "20619": 1050, "20638": 1050, "20640": [141, 184, 375, 494], "20652": 1050, "20653": 1051, "20657": 1050, "20673": 1050, "20683": 1050, "207": [311, 1037], "2071716": [849, 850], "20727": 1050, "20729": 1050, "20752": 1050, "2075215": 230, "20753": 1051, "20761": 1050, "207667": 276, "2079": 278, "208": [170, 293, 377], "20802": 1052, "20803": 1051, "20811": 1051, "20842": 1050, "20843": 1050, "20860": 1051, "20880": 1050, "208864": 204, "20899": 1050, "209": [270, 746, 885, 1027], "20904": 1050, "20959": 1050, "20960": 1050, "20961": 1050, "20_000": 293, "20new": 375, "20newgroup": [66, 185, 194, 207, 231, 311, 493, 663, 835, 838, 1002, 1027], "20news_hom": 375, "20newsgroup": [230, 373, 1037], "20th": 713, "21": [43, 52, 105, 119, 170, 188, 193, 204, 216, 233, 236, 263, 267, 293, 311, 315, 317, 328, 377, 378, 382, 384, 398, 409, 419, 420, 445, 449, 478, 482, 534, 537, 566, 567, 568, 574, 575, 593, 594, 596, 632, 674, 692, 759, 805, 819, 832, 875, 882, 884, 890, 907, 923, 952, 998, 1002, 1006, 1007, 1016, 1027, 1033, 1035, 1037, 1038, 1040, 1044, 1045, 1047], "2100": [83, 325], "2102": 549, "21020": 1052, "21026": 1051, "21032": 1051, "21038": 1051, "2107": 278, "21078": 1051, "21079": 1051, "21080": 1050, "21086": 1051, "21093": 1050, "211": [278, 327, 335, 885, 897], "2110": 47, "21109": 1051, "21114": 1051, "211217613": 1045, "21130": 1050, "2114": 47, "21145": 1050, "21148": 1051, "2117": 336, "21177": 1051, "21179": 1050, "21194": [80, 1050], "21195": 1050, "21199": 1050, "212": [115, 147, 170, 248, 278, 335, 377, 473, 505, 1012, 1027], "21219": 1051, "212197e": 233, "21243": 80, "21251": 1050, "2126": 252, "2127": 47, "21271": 1050, "21278": 1051, "21295": 1050, "21298": 1051, "21301203": 175, "213056e": 233, "2131": 47, "21310": 1051, "21316": 1051, "21330": 1051, "21334": 1051, "21336": 1050, "21340": 1050, "21341": 1051, "21351": 1050, "21389": 1050, "2139": [215, 233], "214": [173, 589], "21408": 1051, "21425": 1051, "21430": 1051, "21432": 1051, "21434": 1051, "21436": 1051, "21443888": 230, "21445": 1051, "21448": 1051, "21469": 1052, "21481": [1050, 1051], "21482": 1051, "21493": 1050, "215": [288, 589, 1027], "21517": 1050, "21534": 1051, "21542": 1051, "21544347": 51, "21552": 1050, "21565": 1051, "2156660": 329, "21567": 1051, "21569": 1051, "21573": 1051, "21576": 1051, "21578": [47, 1050], "2159048": [658, 668, 689], "216": 1019, "21606": 1051, "21616": 746, "21617": 1051, "21632": 1051, "21694": 1050, "217": [324, 540, 546, 804, 1027], "21701": 1051, "21705": 1051, "2171": 46, "21713": 1051, "21724": 1051, "2173": [202, 661, 1002], "21735": 1051, "21741": 1050, "21762": 1051, "21767": 1051, "2179": 47, "218": [377, 475, 720, 791], "2180": 57, "21800": 1051, "21805": 1051, "21807": 1054, "21808": 1051, "21809": 1053, "21814": 1051, "21832": 1051, "21833": 1050, "21837": 1051, "21845": 1050, "21871": 1050, "21873": 1051, "21880": 1051, "21881": 1051, "21888": 1051, "218997": 204, "219": 272, "21901": 1051, "21915": 1050, "21917": 1050, "2192": [202, 661, 1002], "21938": 1052, "21954": 1051, "21987": 1051, "21988": 1051, "21991": 1050, "21998": 1051, "22": [43, 52, 77, 139, 140, 183, 184, 185, 188, 189, 190, 232, 240, 255, 263, 267, 295, 311, 313, 317, 321, 324, 327, 330, 333, 336, 356, 380, 385, 398, 409, 441, 452, 476, 482, 492, 493, 500, 501, 509, 520, 529, 536, 542, 547, 550, 551, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 599, 614, 632, 633, 637, 639, 650, 652, 656, 658, 660, 663, 664, 666, 668, 670, 674, 693, 697, 707, 709, 718, 762, 774, 783, 788, 789, 793, 805, 806, 810, 819, 824, 826, 829, 830, 831, 832, 833, 834, 835, 836, 853, 855, 857, 859, 860, 861, 866, 867, 868, 870, 873, 889, 900, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 947, 948, 998, 1006, 1016, 1027, 1033, 1035, 1037, 1040, 1045, 1048, 1050], "220": [79, 250, 267, 1027, 1037], "2200": [83, 375, 498], "22002": 1051, "22014": 1052, "22015": 1051, "22016": 1051, "22027": 1051, "220446049250313e": [475, 476, 482, 655, 656, 659, 660, 661, 687, 688], "2205": 47, "22050": 1050, "22054": 1052, "22058": 1051, "22059": 1051, "2206": 47, "22062": 1051, "22063": 1051, "22064": 1051, "22065": 1051, "221": [115, 154, 267, 1040], "2210": 47, "22106": 1051, "22108": 1051, "2211": [47, 639], "22111": 1051, "22114": 1051, "22118": 1051, "22119": 1051, "22120": 1051, "22137": 1051, "22148": 1051, "22149": 1051, "22150": 1051, "22154": 1051, "22159": 1051, "22181": 1051, "22188": 1051, "22191": 1051, "22199": 1051, "222": [115, 147, 154, 336, 1021, 1027], "22203": 1051, "22206": 1051, "22212": 1051, "22215": 1051, "22217": 1051, "22218": 1051, "2222": 661, "22223": 1051, "22235": 1051, "22237": 1051, "2224": [47, 1039], "22240": 1051, "22248": 1051, "22249": 1051, "22254": 1051, "22255": 1051, "2226": 47, "22268": 1052, "22269": 1052, "22284": 1051, "22288": 1051, "223": [115, 154, 170, 279, 377, 1027], "22300": 1051, "22314355": 595, "22318": 1051, "2232": 47, "22320": 1051, "2234": 47, "22356": 1051, "22361": 377, "22370": 1051, "223745": 215, "224": [86, 115, 154, 412, 730, 827], "22409": 1053, "22410": 1051, "22412": 1051, "22438": 392, "2245": 47, "2246": [47, 233], "22476": 1051, "22486": 1051, "2249": 47, "22493": 1051, "22498": 1051, "225": [54, 419], "2250": 47, "22504": 412, "22506": 1053, "22508": 1051, "22518": 1052, "22525": 1051, "22526": 1051, "22527": 1052, "22537": 1051, "22548": 1051, "22553": 1051, "22554": 1052, "22562": 1052, "22566": 1051, "22578": 1051, "225806": 233, "22595": 1051, "226": [180, 412, 423, 448, 1027], "22604": 1051, "22606": 1056, "22629": 1052, "22635": 1051, "22665": 1052, "22685": 1051, "22687": 1051, "22692": 124, "22694": 1051, "22695": 1051, "22696": 1051, "22697": 1051, "227": [273, 412, 730], "22710": 1052, "22735": 1051, "22747343e": 111, "2276": 47, "2277": 47, "22775": 1051, "22784907": 832, "228": [89, 246, 1027], "22806": 1051, "22808": 1051, "2282": 47, "2283": 47, "22830": 1051, "2284": 189, "22856": 1051, "2286": 375, "22866": 1051, "22868": 1051, "2287": 375, "2288": 375, "2289": 47, "22891": 1051, "22898": 1052, "22899": 1051, "229": [305, 361, 1006, 1027], "2290": 47, "22908": 1051, "22913": 1051, "2292": 47, "2293": 47, "22950": 1051, "22953": 1051, "22965": 1052, "22968": 1052, "22982": 1051, "22993": 1052, "22nd": 443, "23": [43, 57, 63, 70, 83, 124, 153, 170, 185, 215, 223, 240, 244, 252, 254, 256, 263, 267, 311, 317, 321, 324, 325, 326, 328, 329, 333, 350, 377, 386, 398, 419, 425, 435, 444, 451, 456, 458, 466, 469, 471, 472, 479, 482, 483, 484, 486, 487, 488, 494, 497, 505, 506, 507, 509, 510, 515, 517, 519, 527, 529, 543, 544, 545, 548, 552, 559, 561, 563, 565, 566, 567, 570, 573, 574, 575, 612, 613, 616, 632, 635, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 680, 683, 684, 685, 686, 722, 735, 783, 835, 841, 842, 843, 852, 860, 867, 870, 882, 889, 897, 898, 907, 910, 912, 915, 918, 920, 933, 935, 936, 947, 948, 953, 1006, 1027, 1033, 1035, 1037, 1038, 1044, 1045, 1046, 1049], "230": [170, 302, 589, 1027], "2300": [83, 204], "23023": 1051, "23033": 1051, "23034": 1051, "23036": 1051, "23038": 1052, "23040": 1051, "23046": 1051, "23047": 1051, "23077": 1051, "23079": 1051, "23095": 1051, "23097": 1051, "23098": 1051, "23099": 1053, "231": [50, 306, 375, 412, 423, 448, 503, 589], "23101": 1052, "23113": 1051, "23115": 1051, "23127": 1052, "23139": 1052, "23149": [375, 502, 1051], "23194": 1051, "23197": 1052, "23198": 1051, "232": [267, 1006], "23210": 1052, "23214": 1051, "2323": [694, 698, 1003], "23252": 1052, "23256": 1051, "23264": 1051, "23271": 1051, "23273": 1051, "23275": 1052, "23299": 1051, "2331": 43, "23317": 1054, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1051, "2336": 386, "23370": 1051, "23395": 1051, "233mb": 45, "234": [86, 844, 848, 866, 867, 1008], "2341": 529, "23410": 1051, "234137": 204, "23442": 1052, "23446": 1052, "23461": 1052, "23470": 1052, "23471": 1051, "23480": 1052, "235": 319, "235430": 276, "23548": 1051, "2357juan": [1051, 1052, 1053], "23585": 1052, "23595": 1053, "23604": 1052, "23608": 1051, "23619": 1052, "23636": 1051, "23637": 1052, "23668876": [658, 668, 689], "236720": 204, "23683": 1052, "23689075": [658, 668, 689], "237": [263, 1027], "23726": 1052, "23731": 1053, "23734": 1052, "237703": 204, "23773583": 111, "23786125": 211, "23798": 1052, "23819": [1052, 1053], "23833": 1051, "23834": 1052, "23865": 1052, "23874": 1052, "238744": 204, "23877": 1052, "238955": 276, "239": [269, 1027, 1037], "23905": 1052, "23935": 1052, "23977": 1052, "23990": 1051, "23993": 1052, "24": [43, 44, 52, 99, 151, 156, 170, 185, 189, 193, 200, 240, 267, 285, 293, 321, 322, 323, 325, 328, 329, 332, 333, 378, 380, 384, 398, 404, 405, 412, 419, 420, 441, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 464, 466, 468, 473, 474, 475, 476, 477, 478, 479, 480, 493, 494, 495, 497, 501, 509, 520, 521, 522, 523, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 618, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 703, 704, 705, 707, 713, 719, 732, 751, 758, 802, 803, 805, 808, 809, 819, 826, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 870, 872, 873, 874, 875, 878, 879, 881, 883, 884, 885, 886, 887, 889, 899, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 947, 948, 952, 980, 986, 995, 1013, 1016, 1027, 1033, 1035, 1037, 1045, 1046, 1047, 1048, 1050], "240": [43, 52, 79, 1014, 1037], "2400": 83, "24000": 525, "24015": 1051, "24017": 1051, "24027": 1053, "24051": 1052, "24058": 1052, "24075": 1052, "24076": 1053, "24083": 1053, "24084": 1052, "24087": 1051, "241": [125, 419, 572, 573, 1027], "2410": 549, "24140": 1053, "24141": 1052, "24145": 1053, "24146": 1052, "24160": 327, "242": [290, 314, 889, 1027, 1037], "24218": 1052, "24230": 1053, "24245": 1052, "24258": 1052, "24264": 1052, "24283": 1052, "243": 589, "2431": 479, "24317": 1052, "24338": 1052, "24350": 1052, "24354": 1052, "24365": 1052, "243802": 309, "244": [267, 290, 589], "24404831511191221642141021252626109": 52, "24405": 1052, "2441": 233, "24412": 1052, "24421": 1052, "24433": 1052, "24446": 1051, "244466": 256, "24465": 1052, "2449": 386, "245": [165, 1018, 1027, 1039], "24512": 1052, "24523": 1052, "24528": 1052, "24538": 1052, "24539": 1052, "24543": 1052, "24556": 1052, "24568": 1053, "245961": 148, "245mb": 356, "246": [200, 292, 354, 1014, 1027, 1037], "24617": 1052, "2463": 1002, "24630": 1052, "24631": 1051, "24637": 1052, "24640578": 111, "24645": 1052, "24667": 1052, "24668": 1053, "24677": 1053, "24683": 1052, "24688": 1052, "24699": 1052, "247": 889, "24714": 1052, "24747": 1052, "24750": 1052, "24755": 1052, "24767": 1052, "24769": 1053, "248": [54, 143, 1027], "24838": 1054, "24849": 1052, "24855": 1052, "24856": 1052, "24871": 1053, "24873": 1052, "2487575": 193, "2487591": 193, "24882": 1053, "24889": 1052, "24894": 1052, "249": 267, "24935": 1053, "24951": 1052, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 77, 87, 88, 111, 115, 128, 130, 139, 148, 166, 167, 173, 183, 188, 196, 205, 219, 242, 260, 267, 273, 306, 308, 311, 313, 315, 327, 332, 333, 354, 361, 363, 367, 386, 416, 419, 420, 423, 448, 481, 485, 506, 509, 526, 575, 602, 623, 683, 739, 801, 822, 835, 861, 879, 884, 886, 887, 890, 898, 899, 901, 902, 950, 954, 986, 1002, 1006, 1007, 1009, 1016, 1037, 1039, 1045, 1048], "250": [49, 88, 98, 148, 193, 235, 498, 697, 827, 995, 1018, 1027, 1044], "2500": 1006, "25000": 77, "2501": [170, 377], "25044": 1053, "250639": 204, "25067": 1052, "25077": 1052, "25080": 1052, "25089": 1052, "25093": 1053, "25094": 1052, "251": [170, 237, 377], "25102": 1053, "25120": 1053, "25129": 1052, "25147": 1052, "25163598": 388, "25172": 1052, "25174": 1052, "25177": 1053, "25183501383331797": 281, "25186": 1053, "25188": 1052, "25190": 1053, "25193977": 1007, "25196": 1053, "252": [170, 209, 237, 377, 539, 885, 897, 1027], "25209": 1053, "25214": 1053, "25220": 1053, "25232": 1053, "25250": 1052, "25251": 1053, "25257": 1053, "25274": 1052, "25275": 1054, "25291": 1053, "25291366": 363, "25294": 1053, "25295": 1052, "25296": 1052, "25297": 1053, "25299": 1053, "253": [147, 231, 539, 1027], "25308": 1053, "25312": 1052, "2532566": 329, "25334": 1053, "25341": 1052, "253445": 148, "25349312e": 197, "2535": [473, 478], "25354": 1052, "2536": 480, "25363": 1052, "25367": 1053, "25370": 1052, "25387": 1053, "254": [90, 1027], "25402": 1053, "25417": 1053, "25432": 1053, "25438": 1053, "25443": 1053, "25477": 1052, "2548": 211, "25490": 1053, "25499205": 541, "255": [124, 293, 310, 319, 325, 375, 419, 498, 499, 566, 567], "25500": 1052, "25506": 1053, "25511": 1052, "25531": 1053, "25563": 1052, "25570": 1052, "25587": 1053, "25589": 1052, "256": [77, 86, 147, 319, 368, 375, 412, 419, 453, 472, 542, 551, 568, 865, 897, 907, 1051], "25601": 1053, "25619": 1052, "25629": 1053, "25638": 1052, "25659": 1053, "25664": 1052, "25672": 1053, "25677": 1053, "2568": 1046, "25694": 1052, "25697": 1053, "257": [237, 271], "25704": 1052, "25713": 1053, "25719016": 1007, "25732": 1053, "25733": 1053, "25744": 1052, "25747": 1052, "25752": 1053, "25774": 1052, "25784": 1053, "2579": 697, "258": 237, "25805": 1053, "25813": 1053, "25814": 1053, "25815": 1053, "259": [50, 54, 237, 306, 375, 419, 503, 572, 573], "259031": 204, "259297": 204, "25931": 1053, "25956": 1053, "25973": 1053, "25987": 1053, "25991": 1055, "25th": [43, 252, 887], "26": [43, 80, 87, 111, 119, 123, 124, 177, 188, 240, 251, 252, 267, 319, 333, 386, 575, 653, 734, 788, 827, 885, 897, 953, 1006, 1016, 1027, 1037, 1040, 1041, 1049, 1055], "260": [272, 1050], "26019": 1053, "26021": 1053, "26033": 1053, "2605": 697, "26082": 1053, "26093": 1053, "26106": 1053, "26108": 1053, "26113448": 167, "26120": 1055, "26121": 1053, "26163": 1054, "26194": 1053, "262": 1037, "26207": 1053, "26242": 1053, "26243": 1054, "26253567e": 111, "26264": 1053, "26267": 1054, "26278": 1054, "26286": 1053, "26286057": 230, "26289": 1053, "26299": 1054, "26315": 1054, "26316": 177, "26318": 1053, "26323": 1053, "263234": 256, "26323428": 256, "26325": 1053, "26333": 1053, "26337": 1053, "26362917": 230, "26366": 1054, "263758": [588, 592], "26376": 1053, "26385": 1053, "26386": 1053, "26386883": 175, "26391": 1054, "2640": 840, "26400": 1053, "26410": 1054, "26411": 1054, "26416": 1053, "26424": 1053, "26433": 1053, "26454": 1053, "26459": 1054, "26464": 1054, "26466": 1053, "265": [740, 844, 848, 1008], "26503": 1053, "26506": 1054, "26521": 1053, "2652124": 820, "26525": 1054, "26551": 1053, "26566": 1053, "26579": 1053, "26593496": 230, "26600": 1053, "26602": 1053, "26616": 1054, "26634": 1054, "26642044": 671, "26644": 1053, "26648": 1054, "26653": 1053, "26657": 1053, "2666": 1006, "2667": 503, "26674": 1054, "26683": 1054, "267": 1037, "2671": 1016, "26721": 1054, "26734": 1054, "26736": 1054, "26744": 1054, "26748": 1053, "2675": 46, "26754": 1053, "26760": 1053, "26765": 1054, "267703": 87, "26772": 1053, "26786": 1054, "26789": 1054, "268": [246, 287], "26814": 1053, "268147": 276, "26828": 1054, "26830": 1054, "26831": 1054, "26837": 1055, "26840": 1054, "26855": 1054, "26862": 1054, "26893": 1053, "26896": 1054, "269": [259, 516], "26903": 1053, "26909": 1054, "26913": 1053, "2692": 1016, "26931": 1053, "26934744": 131, "26940": 1053, "26944": 1054, "26957": 1054, "26th": [412, 731, 761, 1006], "27": [43, 45, 47, 52, 57, 67, 81, 87, 267, 332, 333, 351, 377, 412, 420, 522, 529, 610, 718, 793, 794, 890, 910, 1006, 1016, 1037, 1039], "270": [200, 333], "27000": 233, "27002": 1053, "27005": 1054, "27006": 1054, "27017": 1054, "27018": 1054, "27044": 1053, "27054655": 230, "27058": 1054, "27096": 1056, "27098": 1054, "27100": 1054, "27104": 1054, "27110": 1054, "27137": 1054, "27139": 1054, "2714": 252, "271411": 256, "27161": 1054, "27161955": 167, "27166": 1054, "27167": 1053, "27179": 1054, "27185": 1054, "27204": 1054, "27219": 1054, "272214": 589, "27239": 1054, "27240": 1054, "27243": 1053, "27250": 1054, "27252": 1054, "2727": 563, "27274": 1054, "27277": 1054, "27291": 1054, "27292": 1053, "27301": 1054, "27308": 1054, "27309": 1054, "27311": 1053, "27314": 1054, "27315": 1054, "27328": 1054, "27336": 1054, "2734": 386, "27344": 1055, "27372": 1054, "27381": 1056, "27389": 1054, "274": 516, "27412": 1056, "27417": 1054, "27431": 1054, "27438": 1054, "27456": 1055, "27468": 1053, "27478": 1054, "27490": 1054, "27491": 1055, "27499706": 51, "275": [43, 322, 333, 1027, 1040], "27500": 1054, "27526": 1055, "27538": 1054, "27544": 1054, "27556": 1054, "27558": 1054, "27560": 1055, "27566": 1055, "275706": 87, "27573": 1053, "27576": 1055, "27577": 1054, "27580": 1053, "27583": 1053, "27584": 1055, "275851": 256, "2759": [901, 902], "27597342": 115, "276": 273, "27601": 1054, "27614": 1054, "27624": 1054, "2763": [425, 479], "27636": 1055, "27639": 1054, "27645": 1054, "27650": 1054, "27651": 1054, "27657": 1055, "27668": 1054, "27670": 1054, "27675": 1054, "27678": 1054, "277": [213, 1014, 1027, 1039], "27700": 1055, "27702": 1054, "27710": 1054, "27718": 1054, "27720": 1054, "27721": 1054, "27734": 1054, "27736": 1056, "27757": 1054, "27760": 1054, "27772182": 52, "278": [377, 849, 850], "2780": 386, "27800": 1055, "27801": 1054, "27817": 1054, "27821": 1054, "27828": 1054, "27834": 1054, "27835": 1054, "27841": 1054, "27844": 1055, "27865": 1054, "27875": 1056, "27898": 1054, "27899": 1054, "279": [181, 1002], "27904": 1055, "27937": 1055, "27966": 1056, "27979": 1054, "27990": 1055, "28": [43, 47, 99, 148, 170, 188, 231, 267, 275, 282, 310, 332, 333, 377, 386, 412, 416, 454, 461, 1016, 1027, 1037, 1040, 1043], "280": 333, "28009951": 832, "2802": 57, "28040": 1055, "28048": 1054, "28051": 1055, "28053": 1055, "28064": 1056, "28074": 1054, "28085": 1055, "28090": 1054, "28092": 1055, "28095": 1054, "28096": 1056, "28102": 1055, "28106": 1056, "28111": 1054, "28121": 1054, "28136": 1055, "28160": 1055, "28165": 1054, "28167": 1054, "28179": 1056, "2818": 474, "28184": 1054, "28187": 1055, "28188": 1054, "28191": 1054, "28195": 1054, "28198": 1054, "282": [50, 226, 1027, 1037], "28205": 1055, "28207552": 230, "28210": 1055, "28222": 1054, "28225276": 86, "2823": 336, "28233": 1054, "28235": 1054, "28240": 1054, "28241": 1054, "28247": 1054, "2825": 0, "28256": 1054, "28261": 1055, "28262": 1054, "28263": 1054, "28268": 1056, "28295": 1054, "2830": 0, "28306": 1055, "28327": 1054, "2833": 386, "28351": 1055, "28352": 1055, "28360": 1055, "28365": 1054, "28377": 1054, "28385": 1054, "28399": 1055, "284": 654, "28407": 1055, "28425": 1055, "284315": 267, "28432": 1055, "28435": 1055, "28471": 1055, "284806": 267, "284807": 267, "28483": 1055, "28491": 1055, "28494": 1056, "28498": 1055, "285": [256, 333, 729], "28521": 1055, "28552": 1055, "28557": 1055, "28582": 1055, "286": [111, 419, 1027], "28604": 1055, "28612": 1055, "28622": 1056, "28637": 1056, "28651": 1055, "28664": 1055, "28670": 1055, "28692": 1055, "287": [189, 196, 1018, 1027], "28701": 1056, "28703": 1055, "28712": 1055, "28718": 1055, "28722": 1055, "28756": 1055, "28763": 1055, "28768": 1055, "28773": 1056, "2879": 1044, "288": [540, 546], "28808734": 219, "28822": 1055, "28823": 1055, "28843": 1055, "28847": 1055, "289": 188, "28915": 1055, "28925": 1055, "28934": 1056, "28936": 1056, "28951": 1055, "28975": [1050, 1056], "28988": 1055, "28992": 1056, "28x28": 310, "29": [47, 112, 173, 177, 206, 215, 219, 232, 267, 327, 333, 377, 419, 564, 565, 695, 699, 786, 802, 861, 1002, 1003, 1020], "290": [333, 693, 694, 698, 1003], "290075": 204, "29014": 1056, "29018": 1055, "290584": 309, "29067": 1056, "29078": 1055, "29088659": 329, "291": [170, 355, 375, 377], "29105": 1056, "29112": 1056, "29119": 1055, "29124": 1056, "29128": 1056, "29135": 1056, "29136": 1056, "2914": 499, "29141": 1056, "29142": 1056, "29143": 1056, "29144": 1056, "29158": 1056, "29179": 1055, "292": [356, 398, 419, 740, 1027], "29207": 1056, "29210": 1056, "29212": 1056, "29227": 1056, "29235": 1055, "29239": 1056, "29260": 1056, "29265": 1056, "29266": 1056, "29267": 1056, "29269": 1055, "2928359": 230, "293": [246, 268, 1027], "29300": 1056, "29312": 1056, "29314": 1055, "29316": 177, "29327": 1055, "29329": 1056, "29330": 1055, "29336": 1055, "29354": 1056, "29389": 1056, "2939931": 329, "29400": 1056, "29401": 1055, "29402": 1056, "29404": 1056, "29419": 1056, "29433": 1056, "29442": 1056, "29462": 1056, "29473397": [849, 850], "29475": 1056, "295": [43, 1027], "295040e": 233, "29540": 1056, "29545": 1055, "295505e": 233, "296": [44, 1018, 1027], "2961": 656, "29612": 1055, "29634": 1056, "29639": 1056, "296575": 204, "29677": 1056, "29694": 1055, "29696": 1056, "297": 375, "29709": 1056, "29710": 1056, "29738": 1056, "29751": 1056, "29773": 1056, "29779": 1056, "29780": 1055, "298": 1014, "29818": 1056, "29835": 1056, "29842": 1056, "298688": 273, "29869": 1056, "29880": 1056, "29884": 1056, "29898468": 230, "299": [136, 355, 685], "299546e": 233, "29997": 1056, "2_": 998, "2_000": 135, "2_2": [651, 652, 657, 658, 659, 660, 661, 665, 666, 667, 668, 677, 686, 687, 688, 689], "2_f": 657, "2_fro": [658, 667, 668, 689], "2_poli": 273, "2_y": 1008, "2c": [648, 657, 677, 678, 679, 680, 692, 998], "2d": [2, 43, 69, 71, 74, 79, 81, 82, 86, 89, 94, 95, 118, 120, 122, 125, 127, 131, 154, 185, 209, 216, 221, 235, 236, 237, 240, 242, 245, 246, 302, 332, 333, 340, 343, 362, 374, 376, 380, 389, 394, 412, 413, 417, 420, 422, 445, 456, 466, 468, 471, 485, 492, 494, 495, 497, 498, 499, 505, 506, 507, 509, 515, 519, 538, 546, 554, 589, 591, 640, 648, 662, 677, 696, 743, 784, 830, 834, 838, 876, 926, 929, 931, 935, 936, 952, 968, 991, 992, 1000, 1002, 1003, 1006, 1013, 1017, 1022, 1027, 1037, 1041, 1044, 1045, 1046, 1049, 1051, 1055], "2e": [201, 286, 288], "2e6": 1006, "2ec5ac": 317, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 80, 83, 85, 95, 97, 100, 115, 119, 124, 130, 148, 151, 155, 156, 165, 188, 189, 193, 196, 204, 206, 211, 215, 230, 231, 232, 233, 242, 246, 252, 267, 272, 276, 277, 279, 281, 282, 283, 287, 301, 302, 308, 315, 318, 326, 330, 343, 354, 355, 363, 413, 416, 419, 701, 833, 836], "2fbf01908075": 710, "2fx": 261, "2g": [237, 240, 702, 1048], "2h": 418, "2k": 183, "2l": [422, 627], "2n": [701, 998, 1010], "2n_": 1002, "2nd": [93, 118, 180, 318, 412, 423, 448, 535, 1016, 1052], "2x": 1037, "2x2": [340, 412, 759], "2x_iy_i": 998, "3": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 368, 369, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 392, 393, 394, 398, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 441, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 509, 510, 511, 512, 515, 517, 520, 521, 522, 523, 524, 526, 528, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 589, 592, 593, 595, 596, 598, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 623, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 697, 698, 699, 701, 704, 705, 707, 708, 709, 710, 712, 714, 715, 718, 721, 722, 726, 728, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 746, 748, 749, 750, 751, 753, 755, 756, 757, 758, 759, 761, 762, 773, 774, 780, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 897, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 931, 932, 935, 936, 937, 941, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 968, 969, 971, 972, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1017, 1019, 1021, 1022, 1024, 1025, 1027, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1047, 1049, 1050, 1052, 1054, 1055], "30": [43, 47, 49, 54, 57, 70, 74, 75, 79, 87, 93, 103, 105, 109, 124, 128, 135, 144, 148, 151, 155, 161, 170, 172, 173, 176, 189, 193, 195, 209, 213, 215, 233, 235, 236, 240, 247, 251, 252, 262, 267, 273, 278, 288, 290, 293, 302, 303, 317, 318, 319, 327, 328, 332, 333, 337, 341, 344, 346, 347, 362, 367, 375, 377, 378, 385, 386, 398, 404, 405, 416, 420, 423, 448, 454, 459, 460, 461, 505, 536, 540, 542, 543, 544, 546, 548, 550, 551, 575, 597, 600, 601, 603, 653, 697, 740, 788, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 890, 905, 918, 983, 995, 1000, 1006, 1007, 1009, 1014, 1037, 1038, 1044, 1045, 1046], "300": [43, 58, 59, 70, 73, 83, 91, 124, 135, 136, 137, 141, 184, 205, 240, 242, 246, 262, 267, 276, 286, 303, 316, 324, 332, 347, 350, 447, 451, 452, 463, 465, 518, 644, 649, 650, 684, 695, 697, 699, 866, 925, 1002, 1047], "3000": [52, 97, 238, 901, 902], "30000": 375, "30001": 1056, "30022": 1056, "300343": 204, "30061": 546, "301": [413, 1020], "3015": 57, "30151134": 470, "302": [273, 632], "30258509": 422, "303": [233, 278, 640, 1027], "304": [170, 317, 362, 377], "3040": 149, "305": [237, 313, 386, 1027], "30506066": 200, "3053": [473, 478], "305438": 148, "306": 632, "306012": 204, "30750": 412, "308": 640, "30897646": 230, "309": [130, 1027], "30m": 375, "31": [43, 102, 110, 233, 267, 287, 298, 325, 332, 333, 409, 420, 505, 566, 567, 602, 654, 676, 684, 970, 1007, 1027, 1037], "3109306": 175, "311": 355, "312": [151, 1040], "3121": 713, "313276e": 233, "315": [293, 355, 377], "316": [177, 181, 616, 619, 630, 885], "31622776601683794": 161, "3164764": [215, 233], "317": 177, "31760": 1002, "318": 454, "318387": 309, "319": 173, "31958": 177, "31973683": 230, "31bit": 1048, "31st": [216, 888], "32": [43, 44, 52, 84, 119, 187, 190, 251, 287, 326, 333, 374, 378, 385, 394, 409, 419, 420, 449, 569, 570, 587, 594, 639, 681, 888, 890, 935, 936, 970, 1014, 1016, 1037, 1040, 1043, 1045, 1046, 1049, 1050, 1051, 1054], "320": [86, 375, 995, 1020, 1027, 1037], "3204": 1043, "321301": 62, "322": [45, 258, 355, 475, 476, 1027], "3221": [697, 1003], "323": [67, 246, 1027], "323200": 62, "324": 375, "324084": 204, "3245": [697, 1003], "325198e": 233, "3252": 602, "32634568": 219, "3264": 46, "327": [63, 735], "3272984419327777": 358, "3273": 751, "327407": 256, "327605": 256, "32767": 1048, "32782448": 175, "3279": 46, "328": [252, 355, 735, 1027], "3288": 549, "329": 454, "329616": 204, "32987858": 570, "32bit": [2, 367, 970, 1055], "32x32": 377, "33": [43, 57, 111, 170, 215, 252, 274, 327, 333, 362, 375, 377, 385, 386, 412, 420, 465, 537, 642, 653, 717, 718, 734, 735, 743, 748, 788, 789, 792, 811, 833, 835, 837, 896, 920, 987, 1002, 1006, 1016, 1027, 1037, 1045], "330": 333, "331263": 204, "3315057": [831, 832], "3317": 215, "332": [355, 897], "333": 851, "3333": 503, "333333": 233, "33333333": [859, 1016], "334": 175, "334795": 276, "335": [43, 332, 1027], "335919": 309, "336": [151, 386, 1016], "336188": 309, "3367": 1044, "337": [158, 243, 386, 1027], "3375": 327, "338": 252, "3383": 46, "3384": 355, "3387": 355, "339": [309, 355, 1027], "3397": [669, 690, 691], "33rd": [906, 1019], "34": [43, 52, 148, 170, 172, 267, 298, 311, 332, 333, 362, 377, 416, 525, 534, 575, 602, 654, 672, 721, 769, 1027, 1037], "340": [248, 284, 332, 1027], "341": [154, 1027], "34118": 375, "34125758": 230, "3415": [669, 690, 691], "341523": 309, "3419": 276, "341949": 204, "342": 827, "34279478": 230, "3433": 46, "34346583": 86, "344": [220, 1027], "3445": 46, "345": [170, 377], "34545455": 1002, "3456": 46, "34586917": 230, "346": [419, 506, 560, 561], "3467": 620, "347717": 148, "34867495": 1007, "349": [135, 320, 346, 355, 386, 558, 1027], "34990341": 115, "35": [43, 45, 46, 48, 50, 83, 88, 103, 137, 158, 188, 189, 195, 202, 242, 290, 318, 332, 333, 549, 653, 654, 661, 707, 711, 712, 732, 746, 761, 787, 794, 842, 995, 1002, 1006, 1012, 1013, 1016, 1037, 1039], "350": 188, "351390": 273, "352": [273, 386], "352124": 204, "35278655": 230, "3534": 57, "3539": 102, "354": [59, 1027], "354394": 148, "355": [54, 1027], "3551": 46, "355440": 273, "355445": 148, "356": 1014, "356497": 148, "3565178": 970, "357": [170, 355, 377, 505, 910], "3573": 832, "35776189065725783": 323, "3582": 46, "358295": 204, "358990": 204, "3591": 1046, "36": [43, 45, 46, 52, 53, 123, 170, 178, 188, 233, 252, 274, 346, 362, 377, 386, 419, 420, 560, 561, 575, 740, 764, 1006, 1027, 1037], "360": [135, 558], "360000": 309, "36047253": 230, "361": [81, 375, 419, 560, 561, 1027], "362176": 327, "363": 52, "3635": 832, "364": [475, 476, 1038], "365": [414, 477], "3659": 1042, "366": [329, 362, 1027], "367": [355, 419, 1037], "36787944": 1004, "3680": [616, 619, 630], "3684": 840, "36851234": 821, "368896": 62, "3690483151908911912247722318110": 52, "3696": 618, "3697": 855, "3697178": 52, "37": [43, 200, 276, 287, 332, 362, 375, 419, 529, 721, 889, 900, 1016, 1037], "370000e": 233, "370039": 204, "370738": 62, "372": [174, 355, 1027], "37257991": 115, "373333": 276, "375": [86, 122, 453, 755, 1006, 1027], "376": 1014, "37647423": 52, "376999": 62, "37741762": 131, "377eb8": [75, 79, 95, 96, 242], "378": [188, 355, 419, 1037], "37815029": 230, "37845099": 363, "37967282": 1007, "379710": 188, "379763": 148, "38": [189, 206, 214, 219, 266, 282, 298, 328, 419, 637, 890, 952, 1006, 1016, 1037, 1038, 1039], "3800": 204, "3803": 356, "381327": 375, "382": [347, 1027], "382005": 148, "382120e": 233, "383": [46, 61, 62, 1027], "38353048": 230, "383973": 276, "384": [189, 355, 701, 910], "3840": 1045, "384338": 204, "384616559": 389, "385": [73, 1027], "385000e": 233, "3854": [669, 670], "3855": 1026, "386": 885, "3862": 873, "38629436": 1016, "38690531511642143152471231333333107": 52, "387": [355, 1037], "387580e": 233, "387599": 52, "387830e": 233, "3889": 479, "3889873516666431": 52, "389": [598, 599], "3894": 620, "39": [43, 52, 170, 256, 267, 375, 377, 378, 384, 412, 420, 500, 900, 918, 954], "3908844": 832, "391": 701, "3910350737": 389, "3911": 47, "392": 54, "3928": 474, "393297": 256, "39329747": 256, "394": [102, 181], "3947": 1018, "395": [43, 49, 1027], "39568399": 541, "396": [102, 170, 377], "3964": [425, 479], "397": 375, "3972": 660, "398": [248, 355, 652, 1027], "3986": 233, "3996": 656, "3_": 998, "3_poli": 273, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 374, "3d": [100, 118, 127, 212, 235, 237, 239, 362, 420, 511, 591, 926, 968, 1044, 1045, 1047], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 81, 82, 91, 103, 105, 107, 116, 135, 142, 143, 151, 166, 170, 172, 173, 174, 176, 181, 187, 189, 190, 196, 200, 201, 207, 215, 217, 221, 230, 231, 233, 236, 246, 248, 271, 273, 274, 276, 279, 281, 284, 286, 293, 308, 330, 336, 354, 355, 356, 827, 834, 1014], "3k": 701, "3l": 422, "3llobo": 1052, "3m": 51, "3rd": [118, 180, 844, 887, 1008, 1016], "3ssnporch": 145, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 115, 116, 118, 119, 122, 123, 124, 125, 126, 127, 129, 130, 135, 136, 138, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 166, 170, 172, 175, 177, 178, 180, 181, 183, 184, 185, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 219, 221, 222, 223, 225, 228, 229, 233, 235, 242, 246, 247, 248, 249, 250, 251, 252, 254, 256, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 280, 281, 282, 284, 285, 287, 288, 292, 293, 295, 297, 298, 299, 300, 303, 308, 310, 311, 313, 314, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 330, 332, 333, 334, 335, 336, 340, 342, 346, 347, 348, 350, 351, 352, 354, 355, 356, 362, 363, 368, 374, 375, 376, 377, 378, 380, 384, 385, 386, 389, 392, 393, 394, 398, 403, 404, 405, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 495, 501, 509, 517, 518, 521, 522, 523, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 619, 622, 623, 624, 627, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 682, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 703, 704, 707, 711, 712, 720, 721, 730, 731, 732, 737, 739, 747, 748, 749, 751, 752, 753, 754, 756, 757, 761, 773, 774, 786, 787, 793, 794, 795, 796, 799, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 831, 832, 833, 835, 837, 838, 839, 840, 843, 844, 845, 846, 848, 853, 857, 858, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 896, 897, 901, 902, 903, 907, 909, 910, 913, 917, 918, 919, 920, 931, 932, 934, 935, 936, 937, 941, 952, 953, 954, 955, 957, 959, 960, 961, 962, 969, 976, 977, 978, 980, 981, 982, 983, 986, 987, 988, 995, 996, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1016, 1017, 1020, 1021, 1027, 1033, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1055], "40": [43, 54, 87, 99, 109, 118, 121, 152, 158, 172, 200, 206, 207, 209, 232, 237, 239, 250, 252, 262, 274, 299, 305, 310, 315, 332, 333, 341, 342, 344, 346, 348, 349, 362, 368, 375, 416, 450, 500, 522, 523, 804, 849, 850, 854, 866, 867, 995, 1007, 1016, 1037, 1038], "400": [44, 63, 83, 121, 150, 155, 172, 184, 221, 240, 285, 309, 355, 375, 417, 500], "4000": [92, 150, 261], "400000e": 233, "4017": 529, "4018260": 329, "402": [45, 277, 1027], "402344": 386, "4025": 1042, "403": 277, "404": 233, "40597": 292, "406": [694, 698, 1003], "4066": 46, "407": [170, 355, 377], "408": [285, 1027], "40842387": 51, "40887718": 90, "409": [48, 1027], "40945": 103, "4096": [121, 375, 417, 500], "40966": 374, "409717": 276, "41": [52, 170, 215, 252, 362, 375, 377, 461, 473, 485, 497, 626, 629, 640, 651, 652, 657, 663, 665, 666, 667, 669, 686, 690, 691, 704, 786, 844, 1008, 1012], "41075698": 418, "41076071": 418, "41082": 44, "411": [188, 336, 414, 424, 477, 538], "4110": 480, "41187": 177, "412": [501, 1002], "412021": 148, "41214": [215, 233], "41215": 233, "412304": 204, "414": [233, 413, 731, 761, 885, 897, 1006], "41421356": [768, 774, 1009], "4143": 392, "414810": 256, "414912": 151, "415": 355, "416": [355, 744, 1006], "416010": 327, "41666667": 755, "41691605": 131, "417": 292, "41726413": 131, "418": [349, 1027], "41888636": 667, "419": 621, "4194": 377, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 67, 79, 80, 89, 109, 115, 119, 123, 128, 135, 142, 143, 145, 146, 148, 149, 151, 152, 156, 166, 167, 184, 188, 190, 191, 193, 195, 204, 207, 209, 210, 217, 221, 222, 223, 229, 230, 232, 235, 236, 237, 242, 247, 248, 249, 252, 255, 267, 272, 274, 277, 286, 287, 293, 299, 300, 301, 308, 313, 314, 315, 316, 318, 320, 322, 324, 326, 335, 341, 343, 354, 355, 363, 368, 385, 386, 394, 403, 412, 416, 419, 420, 423, 441, 448, 482, 492, 497, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 532, 534, 536, 542, 549, 550, 551, 562, 563, 570, 571, 572, 573, 575, 610, 611, 612, 613, 614, 682, 699, 700, 701, 765, 797, 798, 802, 804, 807, 827, 833, 835, 849, 850, 854, 858, 861, 901, 902, 904, 905, 906, 916, 919, 920, 927, 938, 952, 970, 974, 1009, 1016, 1033, 1034, 1037], "42074": 319, "421": [731, 761, 1006], "421087": 276, "42165": 145, "422": [598, 599, 731, 761, 1006], "4226193151": 52, "4232": [43, 52], "423641": 204, "424": [229, 233, 1027], "4242": [43, 52], "42425183539869415": 323, "425": [236, 620], "4254": [170, 377], "4260": [754, 757], "427": [170, 377, 511, 512, 588, 589, 592], "427329": 256, "4285714285714286": 1006, "429": [290, 355], "4294": 1043, "43": [80, 170, 179, 212, 230, 246, 273, 293, 377, 385, 805, 819, 890], "430": [131, 328, 424, 538, 1027], "431": [355, 377], "4310090": 774, "432": [222, 273, 414, 1027], "4325": 57, "433": [267, 354, 377], "43348936": 230, "4337": 1002, "43475": 883, "436": 246, "4362": 1042, "437362": 204, "438": [188, 1014], "43847489": 131, "43873": 356, "4387766": 52, "439": [170, 189], "4394": 1045, "44": [43, 177, 188, 189, 200, 290, 297, 483, 786, 890, 910, 913, 988, 1006, 1013, 1037], "440": 188, "440409": 204, "4406": 477, "44063": 52, "4409": [43, 52], "441": [96, 216, 1027], "44139186": 310, "4415": 57, "442": [170, 180, 184, 377, 506], "4425765": [658, 668, 689], "44300751539296973": 52, "44300752": 52, "443238": 276, "44373091": 1007, "44381023": 219, "444": [103, 1027], "44412786": 541, "445": [100, 267, 286, 1014, 1027], "445978": 204, "446": [135, 355, 731, 761, 1006, 1027], "447268": 87, "4472869": 131, "4474": 386, "4478": 1042, "448": 293, "4486": 549, "449": [44, 417, 540], "4496": [43, 52], "4497": 1026, "45": [75, 97, 105, 115, 119, 151, 166, 177, 190, 204, 215, 233, 280, 284, 285, 333, 343, 416, 419, 420, 569, 570, 632, 639, 651, 652, 657, 665, 666, 667, 686, 687, 688, 793, 802, 913, 996, 1006, 1014, 1024, 1033, 1037, 1040], "450": [109, 1027], "4500": 230, "45070924": 671, "451": 651, "45192": 161, "451933": 87, "452": [176, 178], "453": 362, "454": 181, "4544": 43, "455": [52, 123, 319, 1027], "4550": 374, "456": [44, 417, 540], "45612256": 665, "45663524": 665, "457": 620, "4576": 840, "458": [70, 121, 1027], "458333315172": 52, "459": [412, 446], "459074": 256, "46": [43, 52, 86, 215, 252, 363, 386, 598, 599, 687, 688, 721, 827, 913, 918, 1016, 1033], "460": [358, 1027], "46033": 501, "46043": 501, "46081961": 1007, "461": 386, "462": [169, 1027], "462234": 256, "463": [233, 290], "463088": 52, "464": [200, 1027], "46428631511221642143151251232633109": 52, "465660": 62, "465730": 204, "466": 1013, "4666": 639, "467": [94, 1027], "46779927": 51, "468": 91, "46858513287221654": 328, "46874778": [658, 668, 689], "469": 91, "46915237": [658, 668, 689], "4694": 529, "469474": 204, "46958558": 666, "4697": 81, "47": [43, 52, 77, 211, 375, 498, 499, 540, 546], "471": 377, "47140": 412, "47236": [375, 502], "473": [206, 1027], "47330339": 420, "4738": 1042, "474": [136, 1027], "475": 135, "47668": 356, "478522": 204, "47885": 356, "479": [152, 1027], "4792": 233, "47922861": 256, "479229": 256, "47928": 356, "4794": 204, "4795": 204, "4796": 204, "4798": 204, "47985": 501, "47987268e": 197, "4799": 204, "48": [43, 52, 115, 127, 151, 177, 256, 319, 377, 386, 412, 515, 602, 704, 751, 833, 844, 995, 1008, 1016, 1033], "480": [200, 355], "4801": 204, "4802": 204, "4803": 204, "4804": 204, "4805": 204, "4806": 204, "4807": 204, "4809": [204, 276], "481": [149, 355, 1027], "4810": 204, "4812": 46, "4815": 204, "48204257": 1007, "4828": 204, "483": [319, 653, 1027], "4830": 204, "4831": [204, 660], "4832": 204, "4836": 204, "484": [142, 181], "4841": 204, "484109": 204, "4846": 204, "485": 701, "4852": 204, "4855": 204, "4857596147013469": 93, "486": 217, "4860": 204, "4866": 204, "4867": 204, "4869": 204, "487": [52, 729], "4872": 204, "48736655": 672, "4874": 204, "4876": 204, "4880": 204, "4881": [204, 1042], "48841": 501, "48842": 501, "4885": 204, "48858": 386, "4888": 204, "4891": 204, "48938813e": 197, "4894": 204, "48979592": 453, "4898431": [375, 497], "49": [43, 77, 119, 170, 219, 252, 374, 375, 377, 385, 412, 454, 461, 718, 731, 761, 769, 798, 802, 805, 890, 1006, 1016, 1040], "490": 267, "491": 701, "492": [193, 267, 648, 999, 1027], "4923": 654, "4928": 204, "493": [68, 648, 909, 999, 1027], "4936": 204, "4939": 1044, "494021": 497, "49424434": 329, "4948": 46, "4951": 658, "495761": 386, "49665188": 219, "4967": 529, "4976": 602, "499": [170, 377, 386], "4995": 1043, "49999993": 1002, "4daf4a": [79, 95], "4dbd33": 119, "4e": 236, "4e9a06": [92, 97], "4eacc5": [92, 97], "4f": [46, 47, 57, 138, 147, 149, 230, 231, 233, 318, 916], "4i": 83, "4th": [170, 180, 377], "4x": [386, 1052, 1056], "4x11": 297, "4x4": [377, 417, 420], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 125, 127, 128, 130, 133, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 163, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 216, 217, 218, 221, 223, 226, 227, 228, 229, 230, 231, 233, 236, 237, 238, 240, 242, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 335, 336, 337, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 375, 376, 377, 378, 380, 384, 385, 386, 388, 392, 393, 394, 398, 404, 405, 406, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 427, 441, 442, 443, 444, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 471, 473, 476, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 509, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 533, 536, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 557, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 587, 597, 598, 599, 602, 607, 609, 610, 611, 612, 613, 615, 618, 619, 620, 621, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 646, 648, 651, 652, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 693, 694, 696, 697, 698, 700, 701, 702, 704, 708, 710, 712, 714, 717, 718, 723, 725, 726, 727, 728, 729, 731, 732, 733, 735, 737, 740, 743, 744, 745, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 774, 775, 783, 786, 787, 789, 790, 792, 793, 794, 795, 796, 799, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 866, 867, 868, 869, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 903, 909, 910, 911, 912, 913, 914, 915, 917, 919, 927, 931, 932, 935, 936, 940, 941, 951, 952, 953, 954, 955, 957, 959, 960, 968, 969, 974, 976, 977, 980, 981, 982, 983, 984, 985, 986, 995, 996, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1027, 1028, 1032, 1033, 1035, 1038, 1039, 1040, 1042, 1044, 1045, 1047, 1051, 1052, 1053, 1056], "50": [0, 43, 46, 47, 49, 52, 54, 61, 68, 69, 73, 83, 85, 92, 93, 98, 99, 102, 103, 115, 119, 121, 124, 130, 135, 138, 141, 148, 151, 154, 155, 170, 173, 175, 176, 177, 178, 187, 188, 189, 196, 200, 210, 215, 218, 222, 223, 227, 229, 231, 233, 235, 239, 240, 245, 246, 248, 256, 267, 268, 273, 275, 276, 286, 293, 311, 313, 317, 324, 326, 333, 335, 337, 341, 349, 355, 375, 377, 380, 385, 400, 416, 419, 420, 421, 424, 446, 477, 483, 484, 505, 509, 526, 528, 531, 538, 544, 549, 558, 559, 574, 598, 599, 611, 613, 614, 620, 622, 663, 664, 671, 672, 673, 675, 681, 682, 683, 697, 718, 797, 805, 819, 838, 858, 909, 918, 1001, 1002, 1006, 1007, 1009, 1012, 1016, 1029, 1037, 1054], "500": [49, 79, 83, 90, 93, 94, 96, 99, 115, 116, 128, 130, 139, 141, 149, 169, 172, 193, 228, 229, 236, 253, 254, 258, 259, 263, 267, 273, 276, 286, 287, 293, 299, 305, 317, 323, 328, 329, 347, 352, 367, 419, 425, 473, 474, 478, 479, 480, 485, 486, 487, 488, 616, 618, 619, 621, 626, 629, 630, 655, 656, 659, 660, 661, 685, 687, 688, 867, 995, 1021, 1027], "5000": [89, 201, 230, 231, 233, 324, 890], "50000": 61, "500000": 309, "5000000": 55, "50000000": 175, "50000013": 1002, "500526": 151, "500x500": 546, "5012": 1043, "5016": [414, 425, 479], "5029": [414, 425, 479], "503452": 309, "5036": 1044, "50372537": 329, "504": [146, 1027], "504185": 309, "50447799": 1007, "505": 834, "507": [179, 280, 413, 1027], "50755672": 470, "507943": 276, "5082": 1026, "50941682": 1007, "50_000": [320, 355], "50sampl": 400, "51": [47, 61, 119, 177, 233, 252, 290, 293, 412, 413, 771, 781, 786, 1002, 1027, 1033], "51082562": 595, "512": 214, "512281": 263, "512595": 309, "51292546": 617, "513": [106, 858, 1009, 1027], "513034": 309, "5131": [46, 1042], "51341712": 1004, "514": [333, 1027], "5141": 1043, "51462041": 854, "5149": 46, "515": [43, 45], "515390": 386, "516": [113, 1027], "5166": 678, "5166646": 769, "517": [47, 456, 466], "517272": 263, "5182": 1042, "5186": 1042, "5193": 46, "51958": 177, "51963999": 111, "52": [43, 177, 215, 536, 638, 802, 952, 1037], "520": [633, 858, 996, 1009], "52003279": 1007, "5208": 204, "521": [119, 356], "52106591": 131, "5211": 1044, "5212": 204, "522": 910, "5224167": 52, "5229": 1044, "523": [181, 529], "524": 52, "5243": 420, "52433293": 420, "5244": 204, "525": [443, 633, 996], "5251": 1043, "526": [145, 909, 1027], "526599": 204, "527": [277, 1027], "5279": 1044, "5282": 1042, "52875032": 666, "5289": 46, "5291": 1043, "5295": 1044, "52955942": 854, "5299": 1043, "53": [43, 86, 104, 252, 412, 419, 540, 546, 551, 797, 798, 1027], "530": [51, 246, 1027], "5315170": 52, "5316": 354, "53284267": 256, "532843": 256, "533": 188, "5337": 1042, "534": [153, 176, 188, 1027], "535": [69, 1027], "5355": 1042, "5359": 1044, "536": [177, 293], "5360": 1042, "53777511": 52, "53844117956": 769, "539": [232, 1027], "5395559": 230, "53959628e": 197, "54": [170, 193, 200, 215, 218, 252, 375, 377, 412, 495, 1038, 1039], "540": [105, 1027], "54035582": 769, "541": [79, 456, 466, 1027], "5415": 1003, "5417": 233, "542": [170, 377], "5420": 549, "542052": 204, "54209": 161, "5425": 529, "543": 200, "5431": 1042, "543841": 204, "544": [264, 1027], "54434690031882": 105, "54488318": 389, "545": [352, 1027], "5460": 1043, "546068": 256, "54606834": 256, "54675220": 52, "5469": 377, "547": 362, "5488135": 389, "549": [63, 356], "5495": 1042, "54980": 546, "55": [119, 188, 193, 210, 215, 233, 237, 333, 385, 412, 416, 495, 602, 805, 811, 819, 833, 1006, 1037], "5500": [327, 693, 1003], "550213": 204, "551": [336, 1027], "55102041": 453, "5515": 751, "552": 1006, "55212743": 363, "5523": 1026, "55249": 602, "553": 170, "55390036": 131, "554": [87, 223, 231, 310, 1027], "5540": 1043, "55422893": 420, "555": 721, "5555555555555556": 281, "5557": 276, "5558": 46, "557": 248, "55800226": 230, "559": 621, "5591": [694, 698, 1003], "55968825": 651, "56": [43, 233, 246, 336, 386, 651, 652, 657, 665, 666, 667, 686, 718, 740, 1006, 1016, 1033, 1037], "560": [215, 522, 523], "561": [239, 261, 412, 1027], "561464362648773": 93, "562": [156, 1027], "564": [116, 215, 1027], "56479934": 363, "56485654": 131, "565": [47, 273, 1027], "566": 215, "569": [170, 335, 356, 377, 505, 597, 600, 601, 603], "5697": 1044, "56b4e9": 258, "57": [47, 141, 172, 188, 231, 282, 311, 377, 378, 398, 404, 405, 413, 710, 766, 786, 842, 1006, 1016, 1027, 1037], "570": [170, 377], "570655": 204, "571": [58, 356, 1027], "5713": 668, "57142857": 726, "573": 420, "5732": 1044, "57320793": 420, "573491": 204, "574": [91, 539, 546], "5748": 499, "5749": [375, 498, 499], "575": [102, 215], "5762": 1043, "576989": 256, "577": [170, 377], "578": 189, "579": 529, "58": [47, 99, 110, 124, 377, 414, 425, 479, 612, 769, 1016], "580": [295, 355, 849, 850, 1027], "5804131": 131, "5805": 1043, "5807": 1009, "581": 193, "581012": [375, 495], "5814": 1044, "58149261": 420, "58195950e": 197, "582": 910, "5828": [375, 498, 499], "583": 412, "5833": [743, 1006], "583333315172": 52, "58364548": 1004, "5853": 1026, "5857": 1042, "586": [217, 242, 1027], "5863": 386, "58667835e": 197, "586798": 204, "5871": 684, "5874": 1043, "5882004012129721": 93, "589715": 204, "59": [43, 193, 200, 233, 377, 386, 412, 413, 515, 827, 1006, 1033, 1037], "590": [187, 1027], "59122734": 672, "592": [616, 619, 630, 1013], "592373": 327, "5925110": 52, "5929": 1043, "593": 139, "594": [181, 215, 297, 1027], "594754": 204, "59489497": 230, "595": [155, 215, 1027], "5956": 1045, "596": 721, "5960": 230, "5963": 1047, "597": [66, 215, 1027], "598": [91, 126, 128, 173, 323, 546, 1027], "5981": 549, "598533": 204, "599": [298, 685, 1027], "5991": 1044, "5_000": 193, "5a": 889, "5d": 47, "5e": [44, 121, 203, 600, 601, 603], "5e5": 215, "5f": [161, 326], "5m": 55, "5n_": 112, "5th": [52, 148, 151, 180, 412], "5x": 1054, "6": [0, 43, 45, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 80, 82, 83, 85, 89, 90, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 109, 110, 111, 113, 115, 118, 121, 123, 130, 136, 144, 148, 149, 151, 153, 155, 161, 165, 170, 172, 175, 177, 179, 180, 181, 183, 184, 188, 189, 191, 193, 195, 196, 197, 200, 204, 208, 213, 215, 216, 217, 219, 229, 233, 235, 236, 239, 242, 245, 246, 250, 253, 254, 258, 259, 260, 261, 263, 264, 266, 267, 268, 272, 273, 274, 275, 276, 282, 283, 284, 285, 286, 292, 295, 298, 306, 308, 310, 311, 313, 315, 317, 318, 320, 322, 325, 326, 327, 328, 329, 330, 332, 333, 336, 337, 343, 344, 346, 348, 350, 352, 354, 355, 356, 361, 362, 363, 374, 375, 377, 378, 380, 382, 384, 385, 386, 393, 398, 404, 405, 410, 412, 413, 416, 417, 419, 420, 421, 427, 432, 439, 446, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 465, 466, 467, 468, 469, 486, 487, 488, 489, 494, 496, 501, 510, 522, 529, 532, 535, 543, 545, 546, 550, 552, 558, 567, 568, 572, 573, 574, 575, 598, 599, 607, 609, 610, 611, 613, 616, 619, 620, 630, 632, 633, 635, 641, 642, 649, 650, 684, 694, 698, 704, 716, 721, 726, 733, 743, 747, 750, 751, 755, 756, 758, 774, 783, 790, 793, 795, 802, 803, 804, 806, 807, 812, 814, 815, 817, 822, 823, 826, 833, 834, 835, 836, 844, 845, 846, 848, 849, 850, 857, 859, 860, 861, 876, 877, 879, 882, 884, 887, 888, 892, 893, 906, 924, 931, 933, 935, 936, 947, 948, 952, 953, 954, 956, 959, 960, 968, 980, 983, 991, 994, 995, 996, 1000, 1002, 1003, 1006, 1016, 1017, 1020, 1021, 1022, 1029, 1033, 1035, 1038, 1039, 1040, 1043, 1045, 1050, 1054, 1055], "60": [43, 45, 52, 92, 105, 113, 215, 227, 233, 235, 236, 256, 261, 281, 286, 333, 346, 354, 374, 412, 416, 454, 461, 718, 805, 1006, 1016, 1037, 1040], "600": [63, 83, 91, 146, 155, 156, 375, 685, 1027], "6000": [311, 632], "601052": 309, "601707": 204, "60244657": 854, "60276338": 389, "603": [96, 452], "604": [128, 546], "605": [235, 306, 1027], "606": [618, 839, 1007], "607": [77, 1027], "6072758064261095": 172, "607752": 148, "60809415": 667, "60834549": 90, "60836363e": 197, "609": [181, 267, 386, 1027], "61": [52, 112, 189, 233, 374, 377, 386, 413, 462, 546, 565, 651, 652, 657, 665, 666, 667, 686, 718, 827, 954], "6101": 1044, "611": [271, 273, 546], "6114": 832, "6114326": 215, "6114327": 215, "6114328": 215, "6114329": 215, "6114330": 215, "611676": 204, "612": 795, "6121": 1043, "6126": 1044, "6147": 1042, "615": [335, 1027], "615373": 188, "616": [846, 1008, 1016], "61611719": 175, "617": [91, 276, 412, 774], "617050e": 233, "6173": 1043, "617715": 148, "6178": 1043, "618": [91, 271], "6181": 1044, "6182": 1043, "618263": 204, "619": [96, 452], "619052": 375, "61958": 177, "6196": [276, 1042], "6198": 751, "62": [52, 189, 193, 233, 266, 327, 333, 363, 375, 498, 499, 849, 850, 1033, 1040], "620": 503, "621": [91, 774], "621645": 204, "622": [91, 546], "62241605": 200, "622811": 148, "623": [846, 1008], "6231": 1026, "6237": 233, "624": 1013, "625": [86, 107, 215, 623, 713, 1027], "6250": 1044, "6258": 1042, "626": [82, 201], "6261": 1046, "626286": 204, "62717609": 230, "62722912": 52, "62745778": 1007, "628": 355, "6282": 1043, "6284": 1026, "6288": 1044, "6291456": 86, "63": [45, 47, 267, 377, 419, 562, 563, 570, 571, 651, 652, 657, 665, 666, 667, 686, 704, 731, 805, 819, 827, 919, 920, 1006], "630": 729, "63035731": 420, "630382": 327, "631": [53, 1027], "6312": 52, "632": 319, "6323": 1026, "6331": 43, "6332": 43, "63327171": 200, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 320, "63394388": 200, "635": [43, 621], "636": [200, 386], "63667341": 90, "6369575901451894": 323, "6371000": 769, "6374": 1045, "6375861597263857": 951, "638": [355, 386], "638768": 87, "638843": 309, "639": 170, "63bit": 1048, "64": [43, 47, 52, 68, 86, 91, 121, 177, 188, 236, 246, 247, 251, 271, 282, 297, 302, 367, 368, 377, 378, 386, 394, 398, 413, 417, 424, 500, 503, 507, 604, 605, 651, 663, 693, 694, 695, 696, 698, 910, 1009, 1033, 1037, 1039, 1045, 1046, 1049, 1050, 1051, 1054], "640": [410, 494, 511, 512, 588, 589, 592, 995], "640000e": 233, "640770e": 233, "640880e": 233, "64185414": 671, "64236448": 541, "6424": 1026, "6425": 1026, "643": 271, "644": 336, "6440": 230, "64447187": 86, "645": 91, "6451": 1026, "6452": 1045, "646": 180, "6463": 1046, "647": 91, "6472": 1043, "6476": 529, "647689": 204, "648": [161, 1027], "648026": 148, "649": [157, 195, 1027], "6497": 1043, "64_conda": 388, "64bit": 1037, "64x64": [121, 375, 417], "65": [43, 47, 69, 189, 215, 281, 282, 319, 412, 443, 507, 522, 602, 704, 746, 797, 798, 827, 1013, 1037, 1038, 1039], "650": 410, "6505186632729437": 93, "6507": 1044, "651": 386, "652": [189, 355], "652739": 204, "653": [386, 616, 619, 630], "6545": 1049, "656": 375, "6567": 856, "657": [256, 273], "6572": 856, "6573": 1044, "65799352e": 197, "658": 116, "6586": 1043, "6599": 1026, "65e": 201, "66": [43, 237, 239, 319, 377, 412, 429, 465, 537, 637, 717, 788, 789, 800, 888, 896, 987, 1006, 1018], "660": 256, "660797": 256, "661086": 276, "6624": 1049, "662409": 204, "663": [903, 1014, 1018], "664": [170, 189, 377], "665": 43, "6650": 52, "6651": 1043, "666": [175, 412, 851, 996], "6660": 1043, "6666": [743, 1006, 1043], "66666667": [734, 787, 859, 1016], "666667315174": 52, "6667": 1043, "66670169e": 197, "666mb": 354, "667": [725, 745, 1006], "667219": 148, "6689": 1045, "6691": 1043, "6697": 1043, "669930e": 233, "67": [99, 188, 233, 377, 503, 521, 522, 523, 632, 672, 718, 819, 996, 1006, 1020, 1033, 1037], "670": [217, 267], "671": 1018, "6715": 1026, "67251877": 671, "673": [116, 355, 386], "67443065": 131, "67451144e": 197, "675": [137, 172, 181, 355, 1027], "675318": 87, "676": 674, "6764": 1043, "678008": 215, "678009": 215, "678010": 215, "678011": 215, "678012": 215, "678013": [215, 233], "678359": 204, "679": [217, 909], "68": [43, 206, 311, 332, 412, 482, 540, 546, 595, 690, 691, 1037], "681": [91, 148, 386, 1027], "6817": 1043, "682": 386, "6821": 47, "682880e": 233, "683": [163, 223, 296, 1027], "683980e": 233, "684": [103, 111], "6846": 1043, "6848": 1046, "685": [725, 745, 1006], "6852": 273, "6860": 147, "687": 1018, "6875": 721, "688": 111, "689015": 309, "689143": 309, "689751": 309, "69": [45, 206, 267, 318, 333, 412, 475, 476, 612, 613, 761, 1006, 1016], "690": 217, "6902": 1043, "691": 726, "6913": 1043, "692": 135, "692270e": 233, "692470": 309, "6929": 1026, "692901": 148, "693": 1006, "6931": 873, "69314718": [422, 617, 1016], "695": 271, "69513": 91, "6954": 1043, "69545": 91, "695740e": 233, "696": [98, 1027], "697": 181, "69735": 91, "698": [91, 267], "6984743": 175, "69892343": 219, "699691": 375, "69e": 181, "6d": 47, "6f": [55, 125, 278, 742, 800], "6ppm": 177, "6th": 180, "7": [1, 2, 43, 45, 47, 51, 52, 53, 54, 63, 66, 68, 70, 74, 77, 79, 80, 86, 87, 88, 89, 93, 97, 98, 100, 103, 104, 106, 111, 113, 124, 135, 138, 148, 151, 152, 156, 157, 170, 181, 187, 188, 189, 191, 193, 197, 198, 214, 215, 216, 217, 233, 235, 242, 246, 247, 248, 254, 256, 258, 259, 262, 263, 267, 268, 273, 277, 278, 279, 280, 284, 290, 292, 293, 295, 298, 299, 301, 310, 311, 313, 317, 322, 325, 326, 327, 329, 332, 333, 335, 336, 340, 347, 350, 351, 355, 356, 363, 375, 377, 378, 385, 386, 398, 404, 405, 410, 416, 417, 419, 420, 421, 423, 424, 427, 443, 448, 449, 452, 454, 455, 456, 457, 459, 460, 461, 462, 465, 466, 467, 468, 471, 475, 476, 486, 487, 488, 489, 495, 501, 503, 537, 538, 539, 540, 541, 543, 545, 549, 566, 567, 593, 596, 605, 610, 611, 632, 633, 635, 642, 651, 652, 654, 657, 663, 664, 665, 666, 667, 678, 680, 686, 687, 688, 697, 704, 712, 714, 726, 728, 729, 731, 733, 749, 750, 751, 755, 756, 758, 787, 790, 795, 796, 799, 802, 804, 805, 806, 807, 808, 809, 812, 815, 819, 822, 823, 826, 832, 835, 839, 849, 850, 858, 867, 868, 869, 874, 881, 882, 904, 905, 952, 953, 956, 957, 960, 969, 974, 995, 996, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1016, 1020, 1021, 1033, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1050, 1055], "70": [43, 45, 50, 99, 103, 105, 135, 189, 252, 258, 273, 333, 375, 377, 416, 498, 499, 687, 688, 718, 731, 761, 805, 819, 896, 995, 1016], "700": [83, 267, 275, 282, 324, 1027], "7000": 233, "701": 91, "702": [124, 1027], "702266": 204, "703": [410, 518], "70359377": 200, "704": 354, "70432034": 115, "7049": 1043, "7049787496083262": 93, "705": [316, 1027], "706026": 204, "707": [181, 885, 897], "7071": 1045, "70763101": 86, "708": [543, 545, 552, 755], "70814003": 363, "7083": 1006, "708333315174": 52, "7089": 1044, "709": [83, 274, 1027], "70x": 1054, "71": [43, 170, 219, 233, 377, 515, 735, 741, 771, 781, 1006, 1033, 1039], "710": [151, 410, 1027], "7101": 1043, "711": [219, 1027], "714": [189, 324, 1027], "71518937": 389, "7152": 1043, "7154": 1043, "715413": 148, "7159": 1043, "716": [144, 518, 1027], "7187": 1043, "718747": 204, "7194": 1043, "72": [43, 45, 46, 52, 141, 175, 385, 827, 833], "7200": 654, "721": [177, 543, 545, 552, 1027], "722128e": 233, "72295655": 115, "723": [91, 248], "723665": 287, "7239": 1043, "7242": 1026, "724702": 276, "7248": 1043, "7256": 640, "726": [247, 1014, 1027], "7260": 1043, "7261": 1043, "726573": 188, "72667194": 1007, "727148206404819": 281, "728": [287, 1027], "72850319": 1007, "7295": 1043, "7298221281347037": 43, "73": [277, 333, 393, 485, 741, 805, 819, 855, 918, 1016, 1037, 1039], "7301": 1043, "730119e": 233, "731249e": 233, "7313": 46, "73153": 386, "732": [110, 217, 1027], "7321432711315247203224138160467097": 52, "7323": 1043, "7325": 1043, "7329": 324, "732913": 287, "733": 293, "7331": 1044, "7332": 913, "734": 356, "7350": 1043, "7353": 1043, "7356": 1044, "736": 246, "7365": 1044, "73654189": 52, "737": [248, 356, 529], "7376": 1044, "7382": 1026, "7387": 480, "7388": 1044, "739865e": 233, "739950": 287, "74": [43, 231, 332, 333, 377, 595, 699, 805, 819, 888, 1033], "7411": [473, 478, 1043], "7419": 1043, "742": [327, 1027], "743": 271, "74310541": 175, "7436926291700353": 210, "744": [271, 293], "744029": 287, "744042e": 233, "7441": 1044, "744497e": 233, "74495357": 200, "7459": 1044, "746": 377, "7464": 1044, "746492": 273, "748": [354, 386], "7490": [1043, 1044], "75": [43, 45, 46, 49, 52, 69, 79, 88, 113, 138, 167, 179, 180, 184, 188, 193, 195, 198, 206, 222, 233, 256, 260, 261, 267, 273, 282, 298, 313, 325, 352, 354, 363, 453, 506, 556, 642, 663, 699, 711, 717, 739, 744, 745, 750, 758, 761, 799, 805, 887, 895, 899, 906, 922, 940, 941, 986, 1006, 1008, 1016, 1022, 1024, 1039], "750": [82, 88, 143, 273], "75000": 215, "7501": 1044, "750348": 148, "750389": 204, "7506": 1044, "752": 354, "752470": 287, "752867": 204, "753": 73, "7532": 493, "7533": [425, 479, 1044], "75474165": 1007, "7548": 1044, "7548291": 329, "7553": 1043, "7565": 1044, "756687e": 233, "7567": 1044, "756746e": 233, "7569": 474, "757": [170, 271, 293, 377], "7573": 1044, "75747153": 219, "7578": [276, 1044], "75788833": 167, "757915": 287, "758": 354, "759": 293, "7593": 1043, "7594": 1043, "75949622": 219, "75th": [252, 887], "76": [43, 193, 215, 333, 354, 363, 377, 386, 782, 786, 869], "760": [43, 151], "7608": 1026, "761": [91, 1027], "76195467e": 197, "7621951219512195": 256, "7632": 1043, "7638": 1002, "764": [726, 1006], "7646": 1026, "764779": 204, "765012": 327, "7655": 1044, "765671": 204, "7660": 1043, "7661": 1044, "7668": 1045, "767": [85, 1027], "7674": [529, 1044], "767498": 148, "7676": 1043, "768": 86, "7680": 1043, "76823": 45, "7685": 1044, "769": [140, 293, 1027], "76995": 375, "77": [43, 45, 79, 170, 193, 282, 333, 374, 377, 539, 712, 741, 780, 827], "77000": 215, "7702": 1044, "770926": 287, "772": [354, 728], "7721": 1044, "7723": 1044, "7724": 1043, "773": [139, 273, 336, 653, 847, 1027], "77310": 375, "7732": 1043, "77322639": 115, "7738": 1045, "7739": 1044, "774": [201, 236, 1027], "77426368": 51, "775": 57, "7750": 1043, "775047": 681, "775151": 681, "7756": 1043, "776": [318, 1027], "77630514": 420, "7768366": 1004, "777": 386, "7771": 1044, "77764": 408, "77777215": 115, "7786": 1043, "779": 354, "7794": 1044, "779751": 287, "7798": 913, "7799": 1043, "78": [43, 86, 193, 233, 282, 315, 333, 498, 499, 651, 652, 657, 658, 660, 665, 666, 667, 669, 670, 686, 690, 691, 805, 811, 827, 833, 1006, 1026], "780": 271, "7812": 1044, "781265": [375, 502], "7814": 1044, "7816": 52, "7819": [412, 1044], "7823": [1044, 1045], "7825": 1044, "7825594": 51, "7826": 377, "782755": 62, "783": [273, 1027], "7831": 354, "783149": 103, "7833": 479, "783392": 273, "7838": 1044, "784": 310, "7840": 87, "7849": 1044, "785063": 103, "78571427112143152472031331383346104": 52, "786": [86, 103], "786015": 103, "7863": 1044, "786432": 86, "78681467": 86, "7872": 1044, "7880": 1044, "7887550": 52, "788808": 327, "789": [166, 419], "7894": [903, 1018], "79": [43, 45, 66, 68, 111, 112, 119, 124, 170, 193, 311, 333, 377, 385, 414, 478, 529, 602, 699, 827, 847, 1037, 1039], "790": [43, 102], "7906": [627, 654], "79064206": 615, "79084103": 363, "791": 181, "7914": 1044, "791667315161908911936472223112": 52, "79269019073225": 297, "7927845601690917": 320, "7929": [355, 1044], "7943": 1047, "7944": 1044, "7946": 1043, "795": 653, "7954": 1044, "796": 148, "7970": 1044, "7971": 668, "7972": 559, "79769376": 115, "798": [103, 419], "7983": 1044, "798301": 256, "7986": 1044, "7986499491396734": 172, "798982054": 1006, "799": [181, 355], "7990": 1044, "7998": 1044, "7_qbz5n2kfra8p0": 398, "7x": 329, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 69, 70, 72, 78, 79, 83, 86, 88, 93, 95, 97, 98, 102, 104, 106, 107, 112, 115, 118, 119, 121, 122, 124, 125, 126, 129, 131, 135, 138, 140, 141, 145, 147, 148, 150, 154, 157, 158, 161, 169, 170, 173, 175, 177, 178, 180, 181, 184, 187, 188, 189, 191, 193, 195, 196, 201, 203, 206, 209, 215, 216, 219, 222, 223, 225, 231, 233, 235, 236, 237, 239, 240, 243, 247, 248, 250, 254, 255, 256, 258, 259, 260, 262, 263, 264, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 283, 284, 290, 292, 295, 297, 301, 305, 308, 310, 311, 313, 315, 316, 317, 318, 319, 322, 327, 332, 333, 334, 336, 337, 340, 343, 347, 348, 349, 350, 351, 354, 355, 356, 361, 363, 368, 374, 375, 376, 377, 378, 380, 385, 386, 398, 406, 410, 412, 416, 417, 419, 420, 421, 423, 425, 443, 446, 447, 448, 451, 453, 454, 456, 459, 460, 461, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 488, 489, 491, 494, 501, 503, 507, 508, 519, 521, 536, 539, 543, 545, 548, 550, 552, 554, 555, 558, 560, 561, 570, 575, 587, 593, 594, 595, 596, 609, 610, 633, 634, 641, 642, 653, 663, 675, 681, 684, 694, 697, 698, 699, 700, 704, 707, 711, 712, 714, 715, 720, 726, 732, 733, 734, 746, 747, 750, 751, 755, 756, 758, 783, 787, 788, 790, 793, 794, 795, 796, 800, 802, 804, 806, 807, 812, 815, 822, 823, 826, 827, 828, 833, 835, 836, 838, 847, 849, 850, 856, 866, 867, 868, 874, 881, 888, 890, 906, 911, 914, 933, 935, 936, 951, 952, 953, 957, 974, 980, 981, 982, 983, 984, 985, 986, 995, 996, 1002, 1003, 1004, 1006, 1009, 1014, 1016, 1020, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1044, 1045, 1050, 1051, 1053, 1056], "80": [43, 45, 50, 64, 100, 112, 156, 163, 167, 178, 189, 195, 250, 315, 319, 332, 346, 348, 354, 360, 363, 375, 377, 380, 410, 416, 421, 423, 448, 483, 515, 546, 718, 805, 819, 827, 890, 903, 922, 995, 1001, 1002, 1006, 1013, 1019, 1022], "800": [83, 325, 375, 589, 697], "8000": [233, 276, 277], "800000011920929": 362, "8000184677460305": 320, "8002": 1044, "8003": 1045, "8005": 1044, "8006": 1044, "801": [251, 1027], "8010": 1044, "801770e": 233, "802": [46, 170, 377], "8022": [46, 477, 1046], "802601": 204, "8028": 1044, "803483": 148, "803882e": 233, "8040": 1043, "804414": [375, 502], "805": 217, "8053": 1044, "8059798": 200, "806": 654, "8061": 1044, "8065": 1044, "8066": 1045, "8068": 1044, "807": [271, 273], "8075": 1045, "808": [102, 1027], "8086": [624, 1044], "8087": 1044, "8093": 1044, "8094": 1044, "80956739": 1007, "80_000": 140, "81": [43, 83, 256, 332, 333, 412, 704, 766, 793, 805, 819, 836, 1006, 1007, 1009, 1016], "810": [190, 834], "8100": 1026, "8102": 1045, "810596": 375, "8117": 1044, "8120": 1044, "8125": 726, "812526": 204, "8129": 1045, "8133333333333334": 304, "81355169": 420, "8137": 1044, "8139": 1044, "814": 190, "815476315189119122164721021826110": 52, "8157": 1026, "8159": 1044, "816": [274, 475, 476], "8160": 1044, "8174": 1044, "817724": 204, "8181": 1044, "819": 420, "8190": 1045, "81940995": 420, "8198": 1044, "82": [43, 66, 86, 91, 144, 167, 218, 304, 332, 793, 805, 819, 952, 1006, 1009, 1037], "820": [43, 52, 849, 850], "820705": 204, "8216": 1046, "822": 795, "822097": 188, "8224": 1044, "8225220806196525": 210, "823": 293, "8243": 1026, "825": [281, 755, 1027], "8251": 1044, "8253": 231, "8259": 1044, "827917": 148, "828": 293, "8282": 1044, "829": [178, 1027], "829429": 263, "8295": 1044, "83": [45, 66, 70, 74, 237, 332, 377, 699, 712, 791, 925, 1001, 1006, 1040], "830": 274, "830000": 309, "8306": 1044, "8316": 1044, "832": [190, 221, 419, 560, 561, 1027], "83236428": 420, "83281226": [849, 850], "8333": 503, "83333": 769, "833333": 188, "8335": 1044, "834": [203, 336, 1027], "834310": 204, "8344": 1044, "8345": 602, "8353": 46, "8354": [627, 1044], "83548752": 615, "8355": 1043, "8361": 1045, "836224": 62, "8363": 1044, "8370": 1026, "8377": 1044, "83816048": 651, "83822343": 1004, "83833": 386, "8387": 840, "839": [359, 685, 1027], "84": [43, 45, 47, 102, 167, 206, 233, 315, 332, 363, 377, 419, 420, 793, 819, 1006, 1016], "840": 386, "84000": 215, "840000": 309, "8407": 102, "84077985": 200, "841": [103, 184, 1027], "84127814": 671, "84253": 1007, "844": [419, 560, 561], "8446": 1044, "8449": 1044, "847222222222214": 210, "8473": 420, "8478": 1046, "8480": 1026, "8481": 1044, "8484": 1045, "848743": 62, "849835": 87, "85": [45, 47, 55, 68, 83, 88, 102, 124, 167, 230, 233, 284, 311, 333, 363, 419, 443, 503, 505, 560, 561, 602, 657, 663, 750, 758, 793, 805, 833, 1006, 1007, 1037], "850000": 309, "850031": 204, "8508": 1046, "851": 273, "8512": 1044, "8513": 624, "851348": 62, "8515": [420, 1044], "85151335": 420, "851792": 62, "852": [190, 1027], "85253229": 90, "852774": 148, "853174": 62, "853846": 204, "854": 271, "85418642": 363, "8549": 1044, "855": [47, 64, 1027], "8554": 1045, "855465": 309, "857": [274, 355], "857400": 62, "858486250088675": 320, "85857475": 131, "8586": 1044, "859007": 62, "8591": 1044, "86": [52, 68, 102, 167, 206, 315, 332, 333, 411, 793, 917, 1006], "860": [197, 1027], "860000": 309, "861": [170, 377, 793, 794, 1006], "861053": 62, "861106": 62, "8614": 1026, "861533": 62, "8617": 1045, "861868": 62, "8626621": 329, "8628": 640, "863": [315, 1027], "8640": 189, "865400": 62, "866": 1014, "866161": 62, "866571": 62, "867": 106, "8672": 1044, "8676": [625, 1044], "8678": 628, "868": [148, 166, 301, 1027], "868443": 50, "8698": 1044, "87": [45, 68, 102, 181, 267, 271, 333, 602, 672, 782, 793, 805, 827, 885, 897, 1006], "870": [170, 215, 377, 1027], "871": [73, 111, 112, 414, 478], "871277": 62, "871965": 62, "872": [73, 1014], "8720": [561, 1045], "872186": 62, "873": [170, 377], "873724": 62, "87382323": 667, "874": [105, 793, 794, 1006], "87421f": 119, "874771": 148, "875": [86, 173, 674], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 175, "8768": 1044, "8769": 1046, "877": [47, 271], "877206": 271, "8773": 1046, "877981": 62, "878": 47, "878051": 204, "878964": 817, "879": 1027, "87mb": 354, "88": [43, 45, 68, 206, 219, 252, 272, 311, 330, 332, 333, 358, 375, 377, 380, 411, 414, 477, 651, 652, 657, 665, 666, 667, 686, 869, 952, 1037], "880": 43, "880191": 204, "880298": 204, "88089948": 420, "88096009": 131, "882": 273, "88213": 375, "882561": 273, "883": 82, "883065": 62, "8833": 503, "8835": 1044, "884": [286, 293], "8845": 1044, "885": [47, 170, 336, 377], "8854": 1044, "8874": 1044, "8878": 840, "888": [172, 354, 1027], "8880": 625, "8881": 628, "889": [271, 441], "88978285": 1007, "89": [43, 68, 177, 206, 237, 332, 333, 988, 1001, 1006, 1016, 1037, 1040, 1048], "890": 271, "891": 47, "8922": 1044, "893055": 204, "8931": 1044, "8936": 1044, "894264": 256, "8947": 919, "8948018": 52, "89483932": 1004, "8948621": 1007, "896": [204, 653, 1027], "8963": 276, "8965": 419, "8973": 1044, "89856": 817, "899": [68, 271], "8992": 1044, "8995": 1044, "8pt": 1016, "8x8": [68, 206, 246, 302, 311, 377, 507], "9": [43, 46, 48, 51, 52, 53, 61, 63, 64, 67, 68, 70, 77, 79, 83, 88, 91, 95, 97, 106, 113, 115, 144, 145, 147, 148, 149, 154, 156, 162, 163, 170, 175, 179, 184, 187, 188, 189, 191, 197, 198, 206, 215, 228, 229, 232, 233, 235, 238, 246, 247, 256, 258, 259, 260, 261, 266, 267, 276, 280, 282, 286, 292, 295, 297, 298, 301, 302, 303, 308, 309, 311, 313, 315, 316, 317, 319, 320, 322, 327, 328, 330, 332, 333, 335, 336, 337, 343, 347, 352, 354, 356, 363, 377, 378, 386, 393, 398, 404, 405, 410, 411, 413, 414, 416, 419, 420, 443, 447, 454, 461, 467, 486, 487, 488, 489, 494, 501, 503, 521, 523, 525, 532, 539, 543, 544, 545, 552, 565, 572, 575, 588, 596, 609, 610, 612, 613, 632, 635, 639, 642, 644, 651, 652, 657, 663, 665, 666, 667, 686, 687, 688, 692, 697, 704, 714, 728, 731, 746, 753, 774, 783, 784, 785, 802, 804, 806, 808, 809, 823, 826, 827, 833, 835, 838, 846, 847, 851, 852, 857, 860, 866, 867, 875, 881, 884, 952, 953, 957, 978, 995, 1001, 1002, 1006, 1010, 1016, 1020, 1021, 1033, 1035, 1038, 1039, 1040, 1042, 1051, 1053], "90": [45, 49, 52, 54, 68, 106, 130, 131, 147, 148, 149, 151, 167, 177, 191, 196, 206, 212, 214, 217, 222, 233, 258, 282, 284, 315, 319, 328, 332, 333, 363, 367, 380, 386, 416, 568, 786, 805, 833, 838, 890, 1001, 1006, 1033, 1052, 1053], "900": [47, 83, 106, 107], "9000": 233, "900000e": 233, "9010": 1043, "9012": 1045, "9015": [668, 1045], "9019": 1044, "902": 230, "9022": 1044, "9024": 1044, "9026666666666666": 148, "903": 47, "904": [189, 271, 413], "9041": 1045, "9043": 1045, "9044": [273, 1044], "90453403": 470, "904556e": 233, "904558e": 233, "904747e": 233, "904751e": 233, "905": [253, 271, 1027], "905206": 87, "9067": 1044, "9069": 1046, "9078": 1044, "908": 1006, "90809432": 131, "9085": 1045, "9087": 1051, "90885631": 86, "909": 47, "909293": 309, "909909": 148, "91": [45, 68, 84, 177, 311, 332, 333, 419, 1001], "910": 43, "9100": 1044, "9101": 1045, "9105": 1044, "9108": 1044, "912": 73, "912632": 309, "913": [330, 419, 564, 1027], "914370e": 233, "914387e": 233, "9144057": 52, "9145": 1044, "914538e": 233, "914573e": 233, "9147": 1045, "9149": 1043, "915": 47, "9151": 1045, "9157": 1045, "916": 82, "91629073": 595, "916555e": 233, "9167": 327, "917": [82, 189, 362], "917281": 148, "9173": 1026, "917618e": 233, "919": 267, "92": [52, 68, 83, 124, 167, 193, 271, 311, 332, 333, 343, 375, 377, 543, 545, 552, 567, 602, 701, 805, 819, 827, 1001], "9202": 149, "9206": 1044, "9219": 1044, "9221": 654, "9222": 1045, "9226260871125187": 281, "923223": 817, "92329566": 131, "9234": 1045, "9239": 1044, "924": 47, "92461872": 129, "925": 1006, "9250": 1047, "92529176": 1007, "9257": 1045, "9259": 1044, "9266666666666666": 144, "927": 441, "9274": 1047, "9277": 1044, "9278": 1044, "928": [112, 441], "9284": 1044, "9284348221928922": 329, "928571": 233, "9288": 1047, "9289": 1044, "93": [45, 68, 170, 215, 256, 271, 333, 354, 377, 651, 652, 657, 665, 666, 667, 686, 782, 793, 805, 827, 833, 917, 1001, 1006], "9300": 273, "930000": 309, "9302": 1044, "9304": 1045, "932": 47, "9326": 1026, "93271427": 175, "933": [47, 106, 416], "933197": 256, "933253": 148, "9333": 416, "933333": [162, 858], "935": 1044, "9354": 1045, "936": [47, 441, 1006], "936480": 62, "9372": 1045, "937443": 62, "937532": 62, "937597": 62, "9378": 1045, "938": [47, 211, 790, 1006], "938613": 62, "939": 673, "9399": 1045, "93fletcher": 1002, "93goldfarb": 1002, "93lindenstrauss_lemma": 903, "93shanno_algorithm": 1002, "94": [43, 68, 70, 87, 123, 144, 214, 250, 315, 332, 333, 411, 419, 668, 793, 827, 1001, 1006, 1007, 1016, 1037], "940": 43, "9400": 273, "940000": 309, "940184": 148, "940201": 62, "940374": 62, "9403917": 115, "941": 47, "94114649": [849, 850], "9416": 52, "9417": 676, "9431": 840, "944": 47, "9456": 1045, "94592424": 667, "946": 112, "94731329": 672, "9473684210526315": 322, "947958": 995, "948": [790, 1006], "9484": 1045, "949": 47, "9490": 377, "9492": 1045, "9497": 1045, "9499": 643, "95": [45, 52, 54, 68, 79, 85, 90, 100, 127, 144, 148, 151, 179, 188, 195, 215, 217, 222, 233, 252, 260, 261, 264, 273, 274, 298, 306, 315, 319, 326, 333, 343, 363, 419, 532, 637, 638, 641, 652, 666, 753, 827, 906, 1002, 1006, 1007, 1019, 1040], "950": 47, "950000047683716": 362, "9502547": 200, "9507": 1044, "951": [191, 1027], "9515": 1045, "951751e": 233, "951958": 995, "952": [47, 82], "9521": 1045, "952289": 204, "9524": 1045, "953": [47, 78, 82, 1027], "953061": 310, "95373": 375, "954": [276, 885, 897, 1027], "95433992": 115, "955": [293, 416, 659], "9558": 1044, "955989": 995, "956": 47, "956038": 309, "9565": 377, "9569": 1045, "957": [47, 318, 733, 1006], "9579": 1045, "958": 47, "9583": 411, "9584": [632, 1044], "959": [885, 897], "9593": 1044, "9595": 679, "9597": 1047, "9599": 1045, "95th": [52, 148, 151, 753], "96": [43, 52, 68, 95, 179, 242, 252, 271, 311, 315, 318, 319, 332, 333, 377, 416, 558, 687, 688, 716, 827, 995, 1001, 1006, 1016, 1037], "9600": 1044, "9604": 1044, "961": 866, "961009": 995, "961111": 162, "9612": 1045, "961904": 858, "96190476": 1009, "962": 47, "96228895": 131, "9623": 1044, "9630": 680, "9641": 1044, "9647": 1045, "965": [47, 1006], "9655": 1045, "9656": 1045, "966": 45, "9666": 548, "966981": 204, "967": [106, 112, 1006, 1010, 1027], "9677": 1044, "968": [177, 187, 271, 337, 1027], "9681": 1045, "9686": 1045, "969": [74, 374, 1027], "9693": 1044, "9694898472080092": 328, "9697": 1044, "97": [68, 130, 170, 191, 250, 264, 333, 343, 377, 386, 393, 416, 651, 652, 657, 663, 665, 666, 667, 686, 687, 688, 1001, 1007, 1016, 1037], "9701": 1045, "9707": 1045, "9711": 1044, "9717": 1044, "9723": 1045, "9726": 1045, "973": [308, 355, 416, 1027], "9731": 1045, "9733": [625, 628], "973554": 327, "973770": 204, "974": 362, "974e": 420, "975": [170, 187, 1021], "9750": 1044, "97545464": 256, "975455": 256, "9759": 47, "976": [207, 230, 281, 1027], "976158": 375, "977": [43, 416], "9771": 559, "9772": 1045, "9775": 1045, "977890": 263, "9781605585161": 412, "978444": 309, "9786": 1045, "9788": 1044, "98": [68, 77, 79, 87, 95, 97, 113, 124, 170, 242, 271, 308, 315, 333, 377, 416, 419, 664, 844, 900, 1001, 1006, 1008], "980000": 309, "9802": 1044, "981": [170, 377, 1006], "9815": 1044, "9816": 1045, "982": [159, 1027], "9821": 855, "983": 733, "9830": 1044, "9832": 1045, "9833": 503, "98350372e": 197, "983667": 995, "9837": 1045, "984": [72, 1027], "9843": 1050, "9847": 1044, "984ea3": [79, 95], "9850": 215, "9851": 1045, "9858": 1045, "98633022": 131, "986429": 310, "9865": 1044, "9866": [615, 624, 627], "9866666666666667": 144, "9868": [903, 1018], "986989": 276, "987": [281, 355], "9875": 1045, "98809919e": 197, "9884": 684, "9885": 676, "9886": 1045, "989341": 204, "98mb": 354, "99": [45, 52, 62, 68, 79, 84, 95, 121, 233, 242, 246, 252, 258, 260, 271, 274, 313, 333, 368, 373, 377, 416, 419, 420, 497, 652, 666, 676, 687, 688, 793, 827, 856, 974, 1001, 1006, 1016, 1020, 1032, 1039], "990": [674, 1006], "9900": 233, "9907": 1046, "9908": 1045, "991": [281, 1006], "9914707264957264": 322, "991584977345022": 172, "991653": 309, "9922": 1044, "9924": 546, "99244": 546, "992766": 309, "993": 281, "9933333333333333": 144, "9935": 840, "993879": 309, "9939": 1045, "993919": 50, "994": 293, "9945": 1044, "995": 207, "9951": 1047, "9969977": 52, "997": [46, 75, 142, 170, 1027], "9978": 1050, "9979": 43, "9979281": 52, "998": [170, 1010], "9980": [43, 1045], "9981": 43, "998142": 52, "998273": 267, "9987": 644, "99891212e": 197, "999": [233, 267, 273, 351, 419, 722, 866, 867, 1027], "9990": 233, "9991": [669, 670, 1045], "99918858": 131, "9993": [43, 658, 660, 1045], "9994": 668, "9995": 43, "9996": 656, "999791942438998": 323, "9998": [50, 306], "9999": [50, 233, 306, 335, 503, 632, 1045], "99999": 335, "999999": [79, 95], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 107, 109, 112, 116, 119, 122, 123, 124, 136, 137, 142, 143, 145, 155, 159, 161, 162, 163, 167, 169, 172, 175, 177, 179, 180, 181, 185, 188, 189, 200, 202, 216, 219, 225, 229, 230, 233, 236, 249, 252, 261, 267, 273, 274, 276, 280, 288, 290, 308, 313, 315, 318, 322, 324, 327, 333, 334, 335, 337, 343, 347, 348, 354, 355, 356, 360, 362, 363, 367, 369, 374, 375, 377, 378, 380, 382, 383, 384, 385, 388, 392, 393, 394, 395, 397, 403, 407, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 494, 495, 497, 499, 502, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 525, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 622, 625, 632, 633, 634, 635, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 709, 710, 715, 716, 717, 721, 722, 724, 726, 727, 728, 729, 730, 731, 736, 741, 742, 745, 747, 748, 749, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 769, 771, 772, 779, 780, 781, 782, 783, 786, 793, 795, 796, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 951, 952, 953, 961, 962, 964, 965, 990, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1032, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "AND": 740, "AS": 424, "AT": [2, 375, 500], "And": [52, 185, 234, 235, 240, 249, 273, 354, 388, 406, 412, 416, 420, 535, 593, 594, 596, 697, 698, 1002, 1006, 1027, 1044], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 86, 88, 90, 91, 99, 113, 116, 126, 135, 136, 142, 145, 146, 147, 149, 151, 155, 165, 168, 172, 177, 178, 184, 188, 190, 191, 193, 195, 198, 200, 204, 206, 215, 219, 223, 233, 240, 249, 261, 267, 268, 270, 271, 273, 274, 276, 292, 298, 314, 325, 330, 335, 343, 347, 355, 356, 358, 360, 361, 363, 367, 368, 375, 379, 380, 382, 385, 392, 393, 394, 406, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 450, 498, 559, 567, 571, 624, 637, 660, 661, 677, 679, 692, 740, 763, 769, 851, 852, 853, 855, 857, 888, 995, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1013, 1016, 1020, 1021, 1022, 1025, 1026, 1030, 1037, 1043, 1048, 1053, 1055], "At": [52, 107, 135, 220, 249, 267, 285, 290, 292, 332, 335, 367, 368, 384, 395, 403, 408, 415, 419, 441, 444, 469, 593, 594, 596, 607, 837, 839, 876, 969, 995, 1002, 1005, 1007, 1011, 1020, 1030], "Be": [167, 181, 354, 380, 414, 572, 573, 653, 659, 660, 661, 663, 664, 674, 685, 709, 823, 824, 884, 1016, 1034, 1038], "Being": [380, 394, 395, 1002, 1009], "But": [43, 48, 86, 187, 216, 217, 273, 293, 313, 380, 392, 412, 415, 418, 419, 466, 751, 917, 918, 995, 1006, 1021, 1026], "By": [57, 121, 151, 152, 153, 195, 219, 249, 267, 282, 290, 313, 322, 328, 329, 347, 354, 368, 380, 382, 386, 387, 394, 403, 411, 412, 413, 415, 416, 417, 418, 419, 421, 442, 445, 449, 450, 454, 468, 471, 472, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 529, 554, 555, 562, 563, 564, 565, 569, 570, 590, 591, 593, 594, 596, 611, 614, 637, 638, 676, 678, 680, 682, 695, 697, 699, 702, 704, 705, 707, 708, 723, 734, 735, 739, 743, 788, 789, 792, 799, 801, 808, 809, 855, 869, 870, 882, 883, 885, 887, 897, 899, 907, 912, 913, 917, 918, 919, 920, 935, 936, 995, 996, 998, 1002, 1006, 1013, 1014, 1016, 1018, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1054, 1055], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 80, 82, 86, 88, 90, 91, 93, 100, 105, 111, 116, 122, 138, 140, 143, 148, 149, 151, 152, 154, 166, 167, 170, 172, 174, 179, 183, 184, 188, 189, 200, 202, 204, 215, 216, 219, 220, 223, 232, 233, 235, 237, 240, 242, 243, 245, 246, 247, 249, 256, 263, 267, 270, 273, 274, 280, 287, 292, 293, 303, 308, 310, 311, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 337, 343, 345, 347, 350, 354, 355, 356, 358, 359, 362, 363, 367, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 403, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 428, 435, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 475, 476, 478, 486, 487, 488, 489, 493, 499, 501, 503, 508, 519, 520, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 602, 607, 612, 613, 614, 615, 616, 619, 624, 627, 628, 632, 633, 634, 635, 636, 637, 638, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 697, 698, 700, 706, 709, 711, 712, 734, 735, 743, 746, 768, 774, 783, 788, 789, 792, 793, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 896, 897, 898, 899, 900, 901, 902, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 935, 941, 958, 968, 989, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1024, 1029, 1030, 1037, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "If": [0, 43, 50, 52, 64, 68, 77, 82, 88, 103, 113, 124, 133, 143, 148, 151, 156, 181, 184, 188, 197, 215, 230, 232, 233, 249, 252, 256, 267, 273, 280, 287, 298, 306, 313, 318, 319, 343, 347, 350, 351, 354, 355, 356, 362, 363, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 398, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 433, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 519, 520, 524, 527, 528, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 716, 717, 718, 719, 721, 722, 723, 727, 731, 732, 733, 734, 735, 736, 737, 741, 743, 746, 750, 751, 753, 758, 759, 760, 761, 762, 763, 764, 766, 768, 769, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 811, 817, 819, 822, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 930, 931, 933, 934, 935, 936, 938, 939, 940, 941, 942, 945, 951, 953, 955, 957, 962, 964, 968, 971, 974, 976, 979, 980, 986, 989, 990, 991, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1010, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1037, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1053, 1055], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 82, 86, 88, 90, 91, 93, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 116, 118, 121, 123, 126, 128, 129, 133, 135, 138, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 156, 159, 166, 167, 169, 170, 172, 176, 177, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 200, 202, 203, 204, 206, 210, 215, 216, 217, 218, 219, 220, 223, 232, 233, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 261, 263, 266, 267, 270, 271, 273, 274, 275, 276, 278, 279, 282, 283, 285, 286, 287, 288, 290, 293, 296, 299, 300, 302, 311, 313, 314, 315, 318, 319, 320, 322, 323, 324, 326, 327, 329, 330, 334, 336, 343, 347, 350, 354, 355, 356, 358, 362, 363, 367, 368, 369, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 397, 398, 399, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 441, 444, 445, 446, 447, 448, 451, 452, 453, 456, 466, 467, 468, 473, 476, 479, 498, 501, 508, 513, 514, 516, 528, 539, 541, 543, 545, 546, 547, 549, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 596, 607, 611, 614, 615, 616, 635, 637, 638, 639, 641, 648, 649, 650, 652, 653, 654, 656, 658, 660, 663, 664, 666, 668, 670, 671, 673, 674, 679, 680, 681, 684, 685, 689, 690, 691, 701, 704, 708, 717, 723, 725, 731, 733, 734, 739, 740, 743, 745, 747, 759, 761, 762, 786, 788, 790, 793, 799, 801, 802, 803, 804, 805, 808, 809, 811, 819, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 859, 860, 861, 866, 874, 876, 882, 883, 887, 888, 890, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 909, 910, 911, 914, 917, 919, 924, 934, 936, 953, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1030, 1034, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "Ines": 1054, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 86, 88, 91, 104, 109, 111, 113, 121, 124, 125, 130, 135, 138, 140, 141, 144, 146, 148, 156, 170, 177, 178, 179, 183, 184, 188, 189, 190, 196, 200, 202, 204, 212, 215, 219, 229, 232, 233, 235, 236, 242, 247, 249, 252, 267, 268, 269, 271, 273, 274, 276, 279, 280, 287, 290, 293, 299, 300, 301, 303, 304, 306, 313, 317, 318, 320, 322, 328, 330, 339, 343, 347, 350, 354, 355, 356, 363, 367, 368, 369, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 392, 393, 394, 395, 398, 403, 406, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 441, 442, 445, 446, 447, 448, 449, 451, 452, 453, 456, 463, 466, 468, 471, 472, 473, 478, 482, 489, 491, 501, 513, 520, 529, 538, 540, 541, 543, 545, 546, 554, 555, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 594, 601, 607, 611, 612, 613, 616, 619, 620, 624, 625, 627, 628, 632, 635, 636, 637, 638, 646, 647, 648, 651, 652, 655, 657, 658, 659, 660, 663, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 679, 681, 682, 683, 684, 686, 687, 688, 689, 692, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 713, 714, 715, 721, 728, 739, 747, 748, 752, 763, 764, 767, 770, 786, 788, 793, 804, 805, 808, 809, 811, 817, 818, 819, 827, 828, 830, 833, 836, 845, 846, 851, 852, 853, 855, 858, 859, 860, 861, 865, 866, 867, 871, 872, 873, 877, 878, 879, 883, 886, 888, 898, 901, 902, 906, 907, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 926, 930, 939, 953, 962, 976, 979, 981, 982, 983, 984, 985, 986, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1030, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "Its": [109, 271, 275, 376, 394, 417, 422, 543, 926, 1001, 1002, 1011, 1014, 1020, 1025, 1030, 1040, 1054], "NOT": [249, 299, 377, 383, 568, 815, 849, 850], "Nearness": 632, "No": [61, 150, 200, 221, 223, 243, 249, 267, 333, 350, 377, 388, 398, 406, 412, 478, 564, 565, 595, 596, 640, 650, 669, 681, 683, 690, 691, 802, 1002, 1054], "Not": [88, 161, 189, 367, 392, 406, 412, 430, 431, 434, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 473, 474, 475, 476, 477, 478, 479, 480, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 568, 571, 574, 575, 586, 587, 588, 593, 594, 596, 632, 633, 634, 635, 682, 693, 694, 695, 696, 698, 799, 802, 803, 805, 808, 809, 819, 846, 849, 850, 853, 854, 855, 857, 861, 873, 881, 884, 885, 887, 890, 901, 902, 913, 1006, 1012, 1025, 1046], "OF": 377, "ON": 327, "ONE": [374, 612, 613], "OR": [313, 412, 423, 448, 1048], "Of": [48, 62, 64, 183, 287, 367, 382, 412, 420, 996], "On": [43, 51, 52, 55, 63, 100, 103, 104, 115, 116, 126, 135, 138, 140, 142, 143, 148, 152, 153, 156, 159, 165, 167, 176, 177, 188, 189, 190, 197, 202, 204, 217, 219, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 256, 258, 260, 263, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 280, 285, 287, 311, 313, 315, 317, 318, 319, 323, 324, 326, 327, 329, 334, 343, 350, 362, 367, 378, 380, 381, 382, 384, 392, 394, 408, 410, 412, 416, 417, 419, 421, 422, 648, 661, 696, 740, 766, 874, 890, 995, 999, 1002, 1005, 1006, 1008, 1012, 1014, 1019, 1021], "One": [2, 43, 48, 51, 61, 66, 82, 88, 126, 128, 143, 145, 148, 151, 152, 185, 188, 191, 194, 219, 224, 230, 242, 253, 263, 267, 273, 280, 283, 290, 299, 302, 314, 329, 338, 340, 351, 355, 362, 367, 377, 380, 393, 394, 406, 411, 412, 415, 417, 418, 419, 420, 421, 423, 448, 453, 476, 478, 482, 517, 571, 636, 644, 663, 671, 673, 678, 680, 681, 682, 793, 812, 813, 837, 838, 839, 870, 871, 882, 913, 968, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1016, 1021, 1027, 1028, 1032, 1041, 1043, 1050, 1052], "Or": [354, 362, 416, 417, 882, 1006, 1012, 1020], "Such": [53, 152, 172, 177, 187, 195, 200, 204, 216, 267, 276, 354, 394, 395, 406, 416, 417, 419, 560, 561, 661, 996, 1006, 1009, 1016, 1022, 1047, 1052, 1054], "THE": 377, "That": [52, 64, 121, 135, 151, 170, 188, 204, 242, 273, 277, 355, 356, 368, 374, 388, 394, 411, 416, 421, 422, 447, 450, 451, 562, 569, 598, 823, 917, 918, 995, 1003, 1004, 1012, 1022, 1046, 1047], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 395, 397, 398, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 432, 434, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 771, 772, 775, 776, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 947, 948, 949, 950, 951, 952, 953, 955, 956, 958, 961, 962, 965, 968, 970, 971, 972, 974, 975, 976, 979, 987, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "Their": [188, 375, 377, 395, 412, 649, 1037], "Then": [103, 136, 140, 143, 151, 156, 159, 167, 188, 193, 200, 202, 215, 219, 239, 243, 249, 255, 267, 275, 276, 290, 354, 362, 374, 384, 386, 388, 398, 399, 409, 412, 415, 417, 420, 421, 575, 598, 724, 761, 805, 819, 909, 910, 996, 1005, 1006, 1012, 1021, 1022, 1046], "There": [0, 74, 80, 141, 172, 233, 239, 249, 264, 268, 270, 273, 292, 354, 373, 375, 377, 380, 381, 382, 385, 392, 394, 395, 398, 409, 412, 417, 419, 420, 421, 450, 456, 466, 539, 558, 559, 564, 565, 593, 594, 596, 611, 650, 996, 1002, 1003, 1004, 1005, 1006, 1009, 1013, 1016, 1020, 1021, 1022, 1024, 1029, 1037, 1045], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 84, 121, 123, 140, 144, 185, 189, 204, 215, 216, 217, 243, 267, 290, 293, 297, 311, 313, 320, 321, 326, 333, 335, 363, 367, 368, 373, 376, 377, 380, 382, 384, 387, 389, 392, 394, 398, 403, 406, 409, 410, 411, 412, 415, 417, 419, 420, 421, 422, 446, 450, 452, 503, 513, 514, 520, 543, 572, 573, 607, 608, 673, 681, 682, 704, 711, 738, 783, 799, 805, 808, 809, 811, 819, 828, 830, 831, 832, 833, 834, 836, 854, 855, 874, 928, 995, 997, 1000, 1002, 1003, 1006, 1007, 1017, 1019, 1021, 1025, 1037, 1043, 1045, 1046, 1047, 1050, 1054, 1056], "To": [1, 43, 47, 63, 64, 68, 80, 88, 90, 109, 111, 113, 116, 126, 135, 145, 148, 149, 158, 161, 170, 177, 178, 181, 183, 184, 187, 188, 193, 197, 200, 202, 215, 216, 217, 219, 223, 233, 246, 247, 249, 252, 254, 256, 263, 267, 268, 270, 271, 273, 275, 276, 278, 280, 286, 287, 290, 292, 310, 313, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 352, 355, 358, 363, 367, 368, 373, 374, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 398, 406, 408, 409, 412, 413, 414, 415, 416, 417, 419, 420, 450, 452, 453, 454, 465, 468, 471, 497, 501, 507, 508, 512, 513, 514, 536, 542, 543, 544, 546, 548, 549, 550, 551, 562, 563, 564, 565, 569, 570, 574, 602, 616, 632, 637, 651, 652, 657, 658, 661, 663, 664, 665, 666, 667, 668, 689, 705, 717, 733, 768, 790, 798, 808, 809, 831, 838, 869, 880, 885, 899, 900, 909, 910, 914, 917, 918, 919, 920, 943, 953, 992, 995, 996, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1020, 1021, 1022, 1030, 1037, 1040, 1042, 1043, 1044, 1046, 1048], "Will": [380, 502, 539, 632, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 678, 680, 712, 719, 793, 874, 878, 888, 889, 1040, 1041, 1043, 1045, 1055], "Willing": [1043, 1044], "With": [61, 70, 79, 100, 107, 118, 126, 151, 153, 166, 185, 189, 215, 217, 241, 243, 248, 250, 256, 273, 297, 367, 375, 378, 380, 382, 394, 403, 412, 413, 416, 419, 421, 441, 443, 506, 546, 587, 637, 638, 663, 867, 870, 872, 883, 889, 890, 916, 918, 999, 1002, 1003, 1006, 1007, 1009, 1010, 1013, 1020, 1022, 1027, 1034, 1040, 1044, 1045, 1047, 1049, 1051], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 83, 86, 88, 91, 96, 100, 102, 113, 118, 119, 121, 126, 128, 130, 138, 139, 140, 151, 165, 172, 177, 178, 179, 187, 188, 189, 191, 193, 195, 199, 200, 202, 203, 204, 207, 212, 213, 215, 217, 219, 228, 229, 232, 236, 239, 243, 248, 252, 256, 267, 268, 273, 275, 276, 277, 279, 280, 282, 286, 287, 290, 296, 301, 304, 311, 315, 318, 319, 320, 323, 326, 327, 328, 330, 333, 334, 342, 347, 350, 354, 356, 359, 382, 386, 394, 417, 419, 420, 424, 450, 482, 537, 538, 539, 540, 541, 543, 544, 545, 548, 550, 551, 552, 571, 602, 651, 652, 657, 658, 665, 666, 667, 668, 686, 687, 688, 689, 693, 694, 695, 696, 698, 700, 701, 703, 705, 715, 769, 805, 811, 819, 828, 853, 861, 882, 883, 890, 996, 1002, 1003, 1006, 1008, 1009, 1010, 1013, 1014, 1016, 1021, 1022, 1044], "_0": [214, 690, 1002, 1006, 1021], "_1": [325, 347, 414, 417, 420, 536, 542, 543, 545, 550, 551, 552, 651, 652, 657, 658, 659, 660, 661, 665, 666, 667, 668, 686, 687, 688, 689, 771, 1002, 1004, 1006, 1021], "_11": 657, "_2": [112, 177, 347, 417, 420, 536, 542, 550, 551, 651, 657, 1002, 1010, 1020, 1021], "_21": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "__": [105, 274, 394, 413, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 1045, 1046], "______________________________________________________________________": 333, "________________________________________________________________________________": [50, 87, 354], "__________________________________________________________________________________": 91, "________________________________________________________ward_tre": 87, "_____________________________________________________f_regress": 87, "__add__": [422, 629], "__array__": [1040, 1047], "__array_function__": [1026, 1047], "__c": 382, "__call__": [180, 343, 394, 420, 422, 470, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 943, 971, 1044], "__class__": [183, 215, 217, 249, 252, 275, 315, 354, 355, 356, 387], "__class_weight": 382, "__dataframe__": [566, 567], "__doc__": [78, 107, 177, 261, 394], "__file__": [47, 49, 1050], "__getattr__": 382, "__getitem__": 1055, "__getstate__": [1044, 1052], "__init__": [47, 89, 133, 180, 249, 293, 343, 380, 382, 384, 385, 386, 387, 394, 420, 426, 429, 432, 435, 436, 623, 966, 1038, 1043, 1045, 1050, 1051, 1052, 1053], "__init_subclass__": 382, "__len__": 1046, "__main__": [336, 392], "__metadata_request__fit": 249, "__mul__": 626, "__mul___": 422, "__name__": [46, 62, 94, 183, 215, 217, 249, 252, 256, 268, 275, 315, 336, 354, 355, 356, 387, 392, 882], "__pow__": [422, 621], "__repr__": [382, 1026, 1046], "__sklearn_clone__": [382, 437, 1053], "__sklearn_is_fitted__": [89, 132, 185, 382, 426, 429, 989, 1027, 1050, 1051], "__sklearn_tags__": [382, 942, 958, 1056], "__version__": [149, 191, 322, 384], "_agglom": 87, "_array_api": 408, "_bag": 945, "_base": [259, 382], "_basehmm": 1037, "_bay": 945, "_birch": 1047, "_breast_cancer_dataset": 170, "_build": 380, "_c_step": 1044, "_cfnode": 446, "_check_bounds_param": 1049, "_check_i": 994, "_check_param_grid": 1043, "_check_sample_weight": 1050, "_check_stop_list": 596, "_check_target": 1044, "_check_x": 1047, "_class": 1006, "_class_cov": 1045, "_class_mean": 1045, "_classif": 311, "_classifier_ha": 89, "_column_transform": [103, 156], "_compon": [246, 541], "_coo": [590, 591], "_count_nonzero_coeffici": 46, "_criterion": 1045, "_csr": 882, "_cython_bla": 381, "_devianc": 1006, "_diabetes_dataset": 170, "_distn_infrastructur": 285, "_doc_link_modul": 382, "_doc_link_templ": 382, "_doc_link_url_param_gener": 382, "_dotbla": 386, "_encod": 1045, "_error": 1006, "_estim": 994, "_estimator_html_repr": 949, "_estimator_typ": [382, 394, 429, 430, 431, 434, 435, 1042], "_estimator_with_converted_arrai": 408, "_f": [180, 1002], "_featur": [417, 543, 545, 552], "_fit_and_scor": 1045, "_fit_stag": [564, 565], "_fro": [536, 542, 550, 551, 651, 652, 657, 665, 666, 667, 686], "_g": 180, "_gb": 1047, "_generate_center_coordin": 53, "_get_support_mask": 606, "_get_tag": 1048, "_get_warnings_filters_info_list": 368, "_gpr": 181, "_h": [543, 545, 552], "_hist_gradient_boost": 384, "_i": [410, 419, 997, 1002, 1006, 1010, 1021], "_idx": 394, "_init": 196, "_init_t": 1020, "_initialize_nmf": 386, "_is_fit": 133, "_iter": 384, "_j": [410, 997], "_k": [414, 1000, 1002], "_l": 1006, "_learntselectormixin": 1042, "_level": [422, 630], "_logist": 380, "_loss": [394, 1006, 1055], "_m": 1022, "_mean": 319, "_mean_frequency_by_risk_group": 215, "_method": 965, "_my": 380, "_n": [420, 1006], "_n_cluster": 380, "_n_compon": 552, "_n_features_out": 428, "_name_estim": 1047, "_neg": 386, "_newton_cg": 1048, "_nls_subproblem": 386, "_nmf": 386, "_not_in_sphinx": [47, 49], "_num_thread": 368, "_obj": 965, "_openmp_help": 381, "_pairwis": [1047, 1049], "_plain_sgd": 1052, "_plot": [243, 332], "_po": 386, "_posterior_mod": 615, "_preprocess_data": 692, "_pvalu": 1037, "_rand": 363, "_ratio": [543, 545, 552], "_request": [249, 403, 1055], "_required_paramet": 432, "_reset": 47, "_run_search": 1045, "_safe_index": [2, 1050, 1054, 1055], "_safe_split": 926, "_safe_tag": 1048, "_sag": 1046, "_sampl": [246, 417, 543, 545, 552], "_samples_gener": 261, "_score": [394, 805, 819, 832, 1006, 1037, 1050], "_search": 1043, "_serial": 249, "_sgd_fast": 1052, "_skip_test": 928, "_spars": 386, "_sparse_fit": 1047, "_std": 319, "_t": 1020, "_test": [223, 315, 368, 382, 1050], "_test_scor": [273, 476, 599, 1050], "_transform_select": 1043, "_tree": [917, 918, 919, 920, 1038, 1040], "_typedef": 381, "_univariate_select": 87, "_validate_data": 1056, "_valu": [422, 618], "_w": [543, 545, 552], "_weight": [53, 233], "_weight_boost": 945, "_weighted_percentil": 1050, "_x_is_even": 966, "_xfail_check": 928, "a16": [1047, 1048], "a65628": [79, 95], "a674e682c281": 385, "a_": [122, 409, 412, 543, 545, 552, 1002], "a_column": 724, "a_i": 412, "a_mask": 282, "a_n": 409, "a_row": 724, "a_tru": 282, "aaa": 180, "aaaaff": [298, 301], "aaai": [412, 423, 448, 844, 1008], "aact": 180, "aaffaa": 301, "aagaard": 1041, "aakanksha": 1045, "aapl": 51, "aarch64": 388, "aaron": [499, 1002, 1040, 1041, 1042, 1047], "aarshai": [1044, 1045], "aashil": 1044, "ab": [51, 55, 75, 107, 125, 131, 137, 145, 156, 166, 170, 191, 206, 226, 228, 231, 233, 238, 273, 313, 330, 341, 352, 412, 543, 545, 552, 632, 849, 850, 884, 1006], "ab_mask": 282, "abadi": [1043, 1044], "abandon": 380, "abati": [1052, 1054, 1055, 1056], "abbi": [1047, 1048], "abbrevi": 704, "abdela": 1046, "abdulaziz": 1055, "abdulelah": 1050, "abdur": 1047, "abenbihi": 1047, "abhijeet": 1039, "abhinav": [1047, 1050], "abhishek": [1040, 1041, 1047, 1051, 1053, 1054], "abhyudai": 1044, "abid": 380, "abil": [48, 52, 94, 111, 148, 171, 172, 173, 177, 179, 181, 183, 185, 187, 188, 190, 215, 219, 233, 242, 354, 369, 398, 419, 420, 422, 616, 627, 630, 787, 788, 789, 792, 793, 1003, 1006, 1009, 1012, 1022, 1026, 1027, 1037, 1039, 1044, 1046, 1050, 1051], "abirami": 412, "abl": [43, 44, 48, 61, 81, 88, 94, 113, 116, 125, 126, 151, 153, 178, 188, 191, 200, 204, 215, 231, 233, 239, 279, 284, 286, 329, 330, 343, 363, 367, 368, 369, 374, 378, 380, 382, 384, 385, 388, 392, 406, 412, 414, 416, 420, 489, 508, 539, 834, 881, 995, 996, 1002, 1005, 1006, 1007, 1012, 1016, 1019, 1022, 1023, 1026, 1043, 1044, 1048, 1055], "ablin": 1052, "abnorm": [229, 242, 299, 342, 375, 497, 568, 855, 1012, 1045], "abo7atm": 1049, "abort": 697, "about": [3, 46, 50, 65, 79, 86, 90, 95, 102, 116, 144, 167, 181, 185, 187, 191, 219, 232, 242, 249, 267, 270, 271, 273, 275, 280, 292, 298, 318, 322, 324, 325, 326, 327, 328, 333, 354, 356, 362, 363, 367, 368, 373, 375, 379, 380, 382, 384, 385, 386, 388, 393, 394, 395, 406, 411, 416, 417, 420, 422, 442, 497, 499, 500, 501, 502, 505, 506, 507, 509, 510, 515, 520, 566, 567, 598, 599, 612, 613, 619, 645, 681, 683, 748, 805, 811, 819, 828, 838, 888, 936, 996, 1002, 1003, 1005, 1007, 1009, 1012, 1013, 1016, 1017, 1019, 1021, 1022, 1025, 1029, 1030, 1042, 1043, 1053, 1055], "abov": [43, 62, 63, 64, 72, 79, 99, 102, 137, 140, 141, 148, 151, 159, 169, 170, 188, 189, 201, 215, 217, 221, 226, 246, 249, 250, 267, 273, 279, 290, 298, 315, 318, 319, 323, 325, 329, 347, 355, 356, 362, 363, 367, 368, 369, 374, 375, 377, 378, 379, 380, 382, 384, 386, 392, 394, 395, 410, 412, 413, 414, 416, 417, 418, 419, 420, 422, 445, 449, 468, 471, 493, 500, 501, 502, 528, 595, 639, 709, 760, 805, 809, 817, 819, 830, 872, 873, 886, 892, 898, 906, 968, 995, 996, 998, 1000, 1002, 1003, 1006, 1009, 1011, 1013, 1016, 1020, 1021, 1022, 1026, 1043, 1055], "abraham": [1037, 1038, 1043, 1047], "abrahamowicz": 1016, "absenc": [242, 276, 394, 717, 872, 1005, 1006], "absent": [394, 410, 420, 734, 759, 830], "absgrad": 1048, "absher": 1039, "absolut": [2, 43, 52, 107, 125, 145, 170, 188, 215, 217, 221, 233, 330, 362, 382, 406, 412, 414, 416, 417, 419, 420, 421, 422, 423, 448, 454, 460, 461, 536, 542, 547, 550, 551, 553, 554, 555, 563, 565, 566, 567, 570, 593, 595, 596, 598, 602, 607, 624, 632, 637, 651, 654, 655, 657, 659, 661, 676, 677, 679, 681, 683, 687, 688, 709, 722, 726, 741, 742, 750, 751, 753, 758, 760, 762, 800, 807, 811, 822, 825, 833, 835, 847, 849, 850, 854, 873, 878, 881, 894, 918, 920, 991, 1002, 1003, 1016, 1020, 1022, 1038, 1043, 1048, 1049, 1050, 1051, 1054], "absolute_error": [52, 419, 563, 565, 567, 570, 676, 918, 920, 1050], "absolute_loss": 1050, "absolutelynowarranti": 1045, "absp": 865, "abstain": 539, "abstract": [394, 417, 422, 623, 774, 1037], "abstractmethod": 1047, "absurd": 1013, "abund": 375, "ac": [535, 669, 690, 691, 1002, 1019], "acad": [694, 698, 1003], "academ": [416, 1030], "academi": [111, 856], "acategorypredict": 400, "acc": 147, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 302, "acceler": [247, 327, 367, 392, 408, 412, 472, 697, 907, 1003, 1025, 1030, 1046, 1050, 1052, 1054], "accent": [351, 593, 594, 596, 1047], "accept": [170, 172, 249, 267, 270, 322, 330, 343, 354, 356, 363, 367, 368, 374, 380, 382, 389, 392, 393, 394, 395, 403, 408, 412, 420, 441, 445, 448, 449, 452, 465, 468, 471, 513, 514, 560, 561, 566, 567, 574, 575, 586, 587, 598, 599, 602, 633, 640, 644, 648, 651, 652, 657, 658, 684, 732, 747, 783, 802, 803, 804, 808, 809, 827, 851, 852, 859, 860, 869, 873, 933, 935, 936, 939, 994, 1002, 1004, 1006, 1009, 1014, 1016, 1021, 1025, 1026, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "accept_large_spars": [935, 936, 1045], "accept_spars": [873, 935, 936, 1044, 1054], "access": [43, 82, 109, 146, 252, 259, 264, 329, 330, 354, 362, 367, 368, 380, 381, 382, 388, 392, 394, 395, 408, 412, 414, 415, 419, 420, 422, 454, 461, 468, 471, 541, 572, 573, 574, 575, 622, 867, 868, 869, 924, 995, 1002, 1005, 1006, 1012, 1013, 1014, 1020, 1021, 1026, 1030, 1037, 1039, 1043, 1044, 1045, 1046, 1049, 1051, 1052, 1053], "accid": [215, 233], "accident": [1037, 1041, 1046], "accommod": [177, 1045], "accompani": [273, 1045], "accomplish": [249, 382, 410, 551, 1003, 1007, 1009, 1030, 1054], "accord": [2, 55, 61, 63, 72, 82, 109, 141, 147, 170, 173, 199, 215, 233, 246, 322, 347, 355, 363, 380, 382, 392, 393, 394, 395, 406, 409, 410, 412, 414, 416, 417, 419, 420, 422, 441, 454, 456, 460, 464, 466, 469, 473, 509, 521, 522, 523, 530, 535, 537, 540, 541, 543, 545, 555, 558, 559, 566, 567, 568, 571, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 646, 647, 649, 650, 654, 663, 664, 675, 685, 696, 700, 740, 784, 785, 805, 806, 807, 808, 809, 812, 813, 814, 819, 830, 844, 845, 846, 847, 848, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 872, 879, 887, 899, 901, 902, 909, 910, 911, 912, 914, 915, 1000, 1002, 1006, 1008, 1009, 1016, 1019, 1020, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "accordingli": [151, 189, 252, 347, 380, 384, 385, 1044, 1045, 1052], "account": [52, 53, 88, 123, 129, 135, 151, 177, 183, 188, 233, 249, 267, 273, 296, 302, 350, 352, 355, 367, 376, 380, 394, 395, 403, 412, 415, 416, 417, 419, 420, 467, 566, 567, 572, 573, 632, 633, 635, 637, 638, 654, 678, 684, 709, 712, 733, 734, 735, 743, 748, 761, 788, 789, 792, 793, 806, 810, 823, 883, 995, 998, 1000, 1004, 1006, 1007, 1008, 1009, 1016, 1020, 1022, 1042, 1044, 1045, 1046, 1049, 1050, 1052, 1054, 1055, 1056], "acctactagaagtt": 392, "acctcctagaag": 392, "accumul": [47, 83, 142, 143, 204, 384, 386, 412, 420, 1006, 1038, 1045], "accur": [43, 48, 52, 59, 62, 63, 111, 121, 150, 172, 179, 188, 189, 219, 230, 233, 267, 273, 280, 284, 290, 326, 354, 355, 363, 379, 394, 410, 412, 414, 417, 419, 420, 421, 441, 447, 451, 455, 457, 463, 536, 543, 545, 547, 548, 550, 551, 552, 612, 613, 639, 808, 809, 849, 850, 952, 953, 998, 1003, 1006, 1022, 1051], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 102, 103, 104, 105, 135, 141, 142, 146, 147, 154, 166, 167, 169, 173, 191, 193, 215, 219, 223, 230, 231, 260, 271, 272, 273, 274, 275, 277, 279, 287, 290, 295, 301, 302, 303, 311, 315, 318, 328, 332, 333, 335, 343, 346, 347, 350, 363, 367, 393, 394, 411, 412, 416, 419, 420, 421, 429, 441, 453, 473, 475, 476, 482, 537, 539, 546, 554, 555, 556, 558, 560, 562, 563, 564, 566, 569, 570, 572, 574, 615, 639, 663, 664, 671, 673, 676, 679, 680, 681, 697, 702, 708, 713, 716, 718, 723, 737, 738, 739, 743, 748, 759, 768, 792, 799, 801, 804, 827, 833, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 851, 856, 858, 859, 866, 904, 905, 909, 911, 914, 917, 919, 925, 952, 953, 995, 1000, 1001, 1002, 1003, 1007, 1009, 1010, 1014, 1018, 1020, 1022, 1045, 1046, 1055], "accuracy_histori": 47, "accuracy_scor": [2, 66, 135, 173, 277, 318, 335, 354, 363, 393, 403, 408, 429, 562, 569, 713, 716, 734, 735, 739, 743, 788, 789, 792, 799, 801, 946, 995, 1006, 1038, 1039, 1040, 1049, 1054, 1055], "acf": 145, "achar": [1044, 1045, 1046, 1047], "achiev": [43, 51, 55, 57, 64, 67, 124, 135, 144, 146, 151, 154, 180, 193, 215, 223, 270, 273, 280, 318, 330, 335, 343, 346, 347, 350, 354, 363, 367, 369, 374, 375, 377, 382, 386, 392, 394, 400, 409, 410, 411, 412, 416, 417, 419, 420, 563, 570, 645, 654, 681, 683, 712, 734, 735, 743, 745, 768, 788, 789, 792, 808, 809, 845, 889, 995, 996, 998, 1002, 1006, 1016, 1019, 1021, 1050], "achin": 1030, "achliopta": [246, 902, 903, 1018], "acid": [318, 377], "acknowledg": [379, 614, 1054], "acl": [906, 1019, 1020], "acm": [374, 375, 412, 423, 448, 454, 461, 464, 516, 568, 681, 731, 761, 855, 1006, 1009, 1012, 1018], "acoust": 1006, "acq": 47, "acquaint": 380, "acquir": [53, 143, 275, 1049], "acquisit": [409, 724], "acronym": 384, "across": [0, 2, 15, 43, 52, 88, 94, 100, 115, 118, 141, 161, 188, 204, 209, 236, 268, 270, 273, 286, 287, 293, 313, 318, 347, 381, 382, 389, 394, 406, 410, 412, 416, 419, 420, 421, 424, 441, 444, 454, 456, 458, 461, 464, 466, 473, 476, 478, 492, 495, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 572, 573, 593, 596, 599, 607, 612, 613, 615, 616, 637, 638, 639, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 681, 683, 684, 690, 691, 694, 695, 696, 697, 698, 699, 700, 709, 710, 722, 736, 762, 793, 798, 800, 802, 803, 805, 806, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 854, 858, 865, 866, 867, 874, 878, 879, 886, 887, 889, 890, 898, 901, 902, 904, 905, 909, 910, 911, 914, 917, 918, 952, 953, 976, 979, 995, 1002, 1004, 1006, 1016, 1020, 1022, 1026, 1030, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1055], "act": [343, 354, 380, 393, 418, 419, 718, 734, 735, 743, 788, 789, 792, 884, 888, 1003, 1006, 1009, 1021, 1045], "action": [325, 354, 379, 383, 384, 398, 411, 1016, 1047], "activ": [52, 68, 185, 223, 258, 264, 274, 331, 332, 356, 374, 375, 378, 380, 381, 386, 388, 392, 394, 395, 398, 399, 403, 413, 501, 507, 531, 637, 640, 642, 655, 656, 658, 659, 660, 668, 669, 670, 687, 688, 689, 690, 691, 718, 723, 802, 865, 866, 867, 905, 971, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1019, 1027, 1029, 1048], "active_": [655, 656, 659, 660], "active_features_": 1045, "actual": [43, 52, 64, 80, 93, 107, 116, 141, 151, 170, 188, 193, 204, 215, 219, 223, 260, 269, 276, 280, 356, 362, 363, 367, 369, 377, 380, 382, 385, 386, 392, 393, 394, 410, 412, 417, 419, 420, 421, 437, 514, 520, 521, 532, 540, 543, 545, 552, 567, 568, 649, 650, 653, 663, 664, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 685, 692, 696, 700, 706, 709, 714, 720, 726, 727, 728, 729, 790, 802, 808, 809, 821, 824, 825, 855, 886, 909, 915, 944, 945, 946, 980, 998, 1005, 1006, 1009, 1013, 1014, 1022, 1029, 1044, 1045, 1051, 1052, 1053], "actual_vs_predict": [43, 107, 156, 188, 269, 327, 706], "actuari": 410, "ad": [43, 53, 58, 107, 128, 130, 135, 141, 151, 166, 172, 178, 179, 195, 200, 217, 219, 239, 248, 249, 273, 274, 275, 313, 323, 324, 325, 326, 327, 328, 329, 330, 336, 347, 355, 379, 380, 382, 384, 392, 394, 395, 417, 419, 420, 421, 422, 423, 424, 430, 434, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 515, 517, 519, 527, 528, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 709, 713, 716, 718, 719, 721, 723, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 739, 744, 745, 746, 747, 748, 751, 758, 759, 762, 766, 771, 772, 774, 780, 782, 783, 787, 788, 789, 790, 792, 794, 795, 796, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 818, 819, 823, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 898, 899, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 933, 935, 936, 943, 947, 948, 952, 953, 961, 962, 963, 964, 965, 968, 971, 975, 980, 986, 992, 994, 995, 999, 1001, 1002, 1003, 1007, 1009, 1010, 1012, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "adaboost": [2, 67, 134, 138, 144, 152, 155, 156, 159, 175, 185, 347, 359, 360, 361, 524, 556, 558, 559, 564, 636, 708, 835, 917, 918, 1027, 1028, 1032, 1039], "adaboost_clf": 135, "adaboostclassifi": [2, 67, 137, 144, 403, 419, 559, 564, 566, 945, 1039, 1040, 1043, 1044, 1046, 1047, 1050, 1052, 1053, 1054, 1056], "adaboostregressor": [2, 136, 403, 419, 558, 567, 945, 1039, 1040, 1043, 1046, 1047, 1050, 1052, 1053], "adam": [0, 309, 401, 866, 867, 1010, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "adamgonzo": 1051, "adamson": 1049, "adanhawth": [1045, 1046], "adapt": [86, 88, 135, 147, 148, 258, 259, 267, 347, 368, 379, 380, 389, 412, 419, 422, 520, 521, 522, 523, 681, 682, 683, 866, 867, 1002, 1008, 1010, 1016, 1020, 1025, 1026, 1045, 1046, 1053, 1054], "adarsh": [1054, 1055], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 87, 107, 111, 112, 116, 122, 144, 147, 166, 168, 170, 172, 177, 178, 179, 183, 184, 198, 203, 204, 210, 216, 218, 219, 230, 238, 242, 246, 248, 249, 280, 282, 283, 293, 305, 315, 317, 322, 324, 325, 346, 347, 349, 350, 355, 367, 378, 379, 380, 381, 382, 384, 386, 388, 394, 398, 408, 410, 416, 419, 420, 421, 520, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 607, 632, 633, 635, 637, 663, 664, 699, 702, 826, 849, 850, 906, 943, 962, 963, 995, 996, 1005, 1012, 1016, 1019, 1020, 1026, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "add_2d_scatt": 235, "add_artist": [70, 236, 258, 259, 260, 263, 264], "add_ax": [189, 239, 284], "add_categori": 252, "add_collect": [51, 238, 245], "add_dummy_featur": 2, "add_ind": [156, 184, 632, 633, 635, 996, 1046, 1049, 1053], "add_missing_valu": 184, "add_nois": 178, "add_self_request": [249, 962], "add_subplot": [46, 62, 64, 77, 97, 100, 118, 127, 189, 212, 230, 237, 239, 332, 333, 387], "add_trac": 141, "adddatapointbatch": 293, "addep": 1048, "addison": [595, 735], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 99, 103, 113, 118, 121, 124, 135, 139, 141, 142, 145, 146, 169, 177, 178, 179, 184, 188, 189, 195, 200, 204, 216, 217, 219, 239, 253, 267, 275, 282, 286, 288, 292, 313, 323, 324, 329, 334, 347, 356, 360, 363, 367, 368, 372, 373, 374, 375, 376, 379, 380, 382, 384, 385, 386, 388, 392, 394, 395, 398, 406, 411, 412, 414, 416, 417, 420, 421, 422, 423, 436, 445, 446, 448, 449, 450, 454, 461, 473, 478, 501, 508, 537, 539, 541, 542, 544, 546, 547, 548, 554, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 617, 624, 633, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 675, 692, 693, 697, 703, 704, 707, 747, 763, 764, 793, 797, 802, 803, 811, 828, 838, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 891, 901, 902, 909, 910, 947, 953, 995, 1000, 1002, 1006, 1007, 1009, 1010, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1032, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056], "addition": [86, 104, 137, 151, 188, 215, 233, 249, 323, 325, 355, 380, 392, 410, 420, 615, 616, 651, 657, 676, 886, 995, 996, 1006, 1014, 1025, 1043, 1054], "additional_nois": 75, "additive_chi2": [625, 643, 770, 779], "additive_chi2_kernel": [2, 408, 643, 764, 770, 998, 1056], "additivechi2sampl": [2, 644, 645, 646, 647, 763, 764, 998, 1051, 1053], "address": [43, 219, 249, 354, 375, 380, 411, 412, 420, 451, 662, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1016, 1030, 1045], "adelr": 1045, "adequ": [368, 386, 572, 1050], "adeyemi": 1055, "adher": [2, 367, 382, 394, 947, 948, 1037, 1038], "adien": 1053, "adijohar": 1051, "adil": 1052, "adimension": 188, "adithya": 1042, "aditi": 1055, "aditya": [1043, 1045, 1046, 1047, 1051, 1052], "adityadaflapurkar": 1045, "adjac": [412, 417, 456, 466, 590, 591, 640, 696, 700, 959, 1003, 1009], "adjacency_matrix": 412, "adjust": [2, 43, 48, 71, 73, 82, 91, 109, 135, 148, 165, 185, 219, 242, 247, 255, 274, 290, 322, 336, 350, 355, 387, 412, 413, 417, 419, 420, 529, 558, 559, 562, 564, 566, 567, 569, 663, 664, 671, 673, 679, 680, 681, 709, 710, 713, 719, 720, 760, 762, 791, 800, 844, 845, 847, 848, 879, 901, 902, 909, 910, 911, 914, 917, 919, 941, 1005, 1006, 1010, 1016, 1027, 1034, 1037, 1043, 1053], "adjusted_mutual_info_scor": [2, 72, 73, 82, 91, 412, 710, 720, 738, 760, 762, 791, 1006, 1037, 1045, 1049, 1053], "adjusted_rand_index": 710, "adjusted_rand_scor": [2, 72, 73, 82, 91, 355, 412, 709, 720, 738, 762, 791, 1006, 1050], "administr": [398, 399], "admir": [1052, 1053], "admiss": [246, 368], "adopt": [382, 384, 392, 394, 905, 1006, 1020, 1045, 1052, 1054], "adoublet": [1052, 1053], "adpot": 328, "adrian": [1050, 1051, 1052], "adrien": 1037, "adrin": [0, 395, 401, 406, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "adrinjalali": [1040, 1049], "adult": [329, 501, 1016], "advanc": [44, 153, 185, 189, 241, 243, 273, 292, 369, 380, 412, 417, 493, 506, 540, 637, 644, 788, 802, 858, 867, 870, 889, 918, 995, 998, 1006, 1009, 1016, 1027, 1030, 1034, 1039], "advani": 1049, "advantag": [43, 44, 74, 88, 90, 121, 126, 149, 215, 216, 242, 259, 274, 292, 326, 330, 363, 394, 410, 416, 417, 420, 422, 445, 449, 464, 539, 594, 654, 679, 680, 768, 837, 838, 839, 869, 870, 909, 910, 911, 912, 913, 914, 915, 995, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1014, 1016, 1020, 1021, 1022, 1040], "advic": [388, 422, 627, 628], "advik": [1054, 1055], "advis": [52, 216, 249, 363, 380, 412, 420, 441, 651, 657, 659, 665, 667, 677, 692, 998, 1002, 1008, 1010, 1021, 1051], "advoc": 1007, "aeberhard": 377, "aesthet": [313, 1022, 1042], "af": 73, "affan": 1043, "affanv14": 1044, "affect": [46, 62, 111, 151, 179, 187, 188, 219, 239, 252, 253, 276, 283, 318, 328, 363, 367, 368, 369, 376, 394, 397, 410, 412, 415, 416, 418, 420, 423, 425, 448, 454, 461, 477, 479, 483, 554, 555, 574, 704, 717, 793, 805, 808, 809, 810, 819, 823, 824, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 889, 890, 900, 914, 1005, 1009, 1021, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1055], "affili": 375, "affin": [2, 27, 71, 72, 79, 82, 88, 96, 97, 185, 313, 334, 372, 382, 394, 417, 444, 445, 456, 458, 466, 517, 540, 696, 700, 709, 710, 722, 742, 798, 800, 905, 926, 1000, 1003, 1006, 1027, 1031, 1032, 1037, 1038, 1041, 1047, 1048, 1050, 1052], "affinity_matrix": [696, 700], "affinity_matrix_": [444, 456, 696], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 326, 412, 1037, 1040, 1041, 1045, 1048, 1050, 1051, 1052, 1053, 1054], "affirm": 43, "afnlp": 1020, "afor": [901, 902], "aforement": [368, 1007], "afraid": 398, "africa": 1016, "afroj": 1054, "aft": [319, 1040], "aftab": 1046, "after": [43, 55, 58, 59, 63, 80, 86, 88, 102, 103, 107, 112, 123, 135, 146, 151, 154, 156, 159, 166, 170, 177, 179, 181, 183, 188, 193, 208, 215, 252, 253, 256, 261, 273, 282, 292, 293, 301, 303, 313, 314, 317, 318, 354, 355, 369, 375, 377, 379, 380, 382, 384, 386, 387, 388, 392, 394, 406, 408, 409, 410, 412, 413, 416, 417, 420, 421, 424, 446, 451, 454, 455, 456, 457, 460, 466, 520, 537, 541, 555, 558, 559, 564, 565, 566, 567, 602, 632, 635, 663, 664, 671, 672, 673, 678, 680, 681, 682, 683, 697, 717, 731, 761, 799, 802, 803, 808, 809, 858, 865, 869, 882, 888, 909, 914, 915, 930, 995, 996, 1000, 1002, 1006, 1010, 1011, 1016, 1018, 1020, 1021, 1022, 1026, 1037, 1040, 1044, 1045, 1048, 1049, 1052, 1055], "afterward": [58, 384, 540, 546, 833], "ag": [103, 170, 188, 190, 202, 204, 215, 233, 253, 254, 256, 267, 313, 325, 326, 327, 329, 375, 377, 501, 1030], "again": [43, 58, 100, 104, 148, 176, 178, 180, 188, 239, 274, 354, 363, 384, 389, 394, 395, 412, 413, 414, 419, 420, 476, 572, 573, 639, 652, 656, 658, 660, 666, 668, 670, 697, 995, 1002, 1006, 1020, 1034, 1037, 1045, 1054], "against": [64, 72, 116, 130, 138, 149, 165, 193, 206, 207, 224, 232, 249, 282, 319, 322, 343, 375, 380, 395, 406, 410, 412, 416, 420, 442, 514, 547, 553, 556, 681, 683, 760, 762, 793, 807, 812, 814, 834, 838, 971, 998, 1002, 1006, 1007, 1009, 1021, 1024], "agamemnon": [1044, 1045, 1046, 1047, 1049, 1050], "agarw": [1044, 1045, 1047], "agath": 1051, "agc": 180, "agct": 180, "agent": 1030, "agg": 177, "aggfunc": 284, "agglo": [84, 449], "agglom": [2, 51, 71, 72, 77, 79, 81, 89, 93, 95, 99, 100, 185, 236, 238, 332, 333, 412, 445, 449, 507, 696, 783, 862, 1027, 1040], "agglomer": [2, 44, 68, 71, 83, 166, 168, 185, 198, 214, 251, 297, 332, 333, 372, 412, 420, 449, 507, 605, 611, 650, 805, 810, 869, 1027, 1032], "agglomerativeclust": [2, 74, 75, 76, 79, 81, 85, 89, 95, 100, 394, 412, 444, 446, 449, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "aggreg": [93, 139, 233, 276, 282, 287, 326, 328, 412, 419, 421, 539, 560, 561, 599, 726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 795, 796, 1007, 1009, 1016, 1053], "aggress": [2, 47, 222, 671, 672, 808, 809, 1028, 1032, 1038], "aggressive_elimin": [808, 809, 995], "agnost": [1005, 1014, 1055], "ago": [51, 384, 1026], "agraw": [1040, 1045, 1051, 1052], "agre": [25, 165, 388, 395, 412, 791], "agreement": [0, 2, 412, 709, 721, 760, 762, 800, 1006], "agricultur": 1002, "aguiar": 421, "agundez": 1045, "ahead": 893, "ahmadi": 1048, "ahmadjubair33": 1051, "ahmedbgh": [1052, 1053], "ahn": 1049, "ahuja": [1044, 1051, 1052], "ai": 416, "ai8rahim": 1040, "aic": [2, 161, 185, 194, 201, 202, 203, 209, 223, 263, 506, 656, 658, 659, 660, 661, 803, 870, 889, 995, 1027, 1037, 1044, 1050, 1051], "aic_criterion": 202, "aid": [270, 412, 797, 798, 1003, 1030, 1037, 1049], "aidan": 1045, "aidar": 1051, "aig": 51, "aiko": 1052, "aim": [52, 58, 112, 151, 184, 219, 267, 301, 334, 347, 369, 375, 378, 380, 394, 406, 412, 414, 420, 452, 1002, 1006, 1009, 1016, 1021, 1025, 1051], "air": [177, 769], "airport": 769, "airspe": 380, "aisha": 1055, "aishgrt1": 1045, "aishwarya": 1045, "aishwaryark": 1044, "aistat": 1019, "aivision2020": 1044, "aj": [499, 1051], "ak": [410, 1051, 1052], "aka": [2, 45, 308, 354, 392, 420, 456, 541, 543, 545, 549, 552, 586, 587, 620, 627, 656, 657, 659, 660, 661, 663, 664, 667, 671, 672, 673, 675, 681, 682, 683, 746, 876, 880, 882, 1002, 1010, 1020, 1039, 1051], "akai": 1050, "akaik": [202, 204, 263, 661, 803, 995, 1002], "akash": [1045, 1055], "aki": [1051, 1052, 1053], "akihiro": 1055, "akin": [43, 216, 394], "akinkunl": 1047, "akitti": 1042, "akshai": [1041, 1044, 1049], "akshay0724": 1044, "akshayah3": 1041, "akshita": 1052, "al": [0, 2, 50, 109, 110, 135, 150, 202, 306, 375, 377, 409, 412, 414, 417, 419, 420, 421, 455, 503, 524, 525, 533, 540, 546, 549, 568, 687, 688, 724, 725, 844, 846, 866, 867, 902, 952, 953, 1002, 1003, 1006, 1012, 1016, 1018, 1021, 1022, 1045, 1050, 1053, 1054], "ala": [1052, 1053], "aladago": 1047, "alam": [1052, 1053], "alan": [1044, 1045, 1048, 1050, 1051, 1055], "alastuei": 1040, "albeit": 62, "albert": [0, 370, 1044, 1045, 1046, 1049, 1050], "alberto": [1046, 1050, 1051, 1055], "alcalin": 377, "alcohol": [318, 377], "alcorn": 1045, "aldrian": 1041, "aleator": 52, "alec": 1047, "alejandro": [1038, 1043, 1054], "alek": [1050, 1051], "aleksandr": 1044, "aleksandra": 1048, "alemagnani": 1040, "alert": 1044, "alessandro": [1047, 1049, 1052], "alessia": 1050, "alex": [406, 420, 1021, 1037, 1040, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054], "alexand": [0, 402, 412, 417, 540, 875, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1051, 1054], "alexandercbooth": 1044, "alexandr": [0, 121, 395, 401, 402, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "alexandracraciun": 1049, "alexandru": 443, "alexanmv": 1051, "alexei": 1042, "alexfield": 1043, "alexgoryainov": 1047, "alexi": [1037, 1040, 1041, 1044, 1054, 1055], "alexl": [1053, 1054], "alexqiao": 1055, "alexryndin": 1045, "alexshack": [1047, 1048, 1049], "alfalfa": 57, "alfano": 1044, "alfaro": [0, 370, 1048, 1049, 1050, 1051, 1052], "alfr": 0, "algebra": [368, 378, 383, 392, 417, 420, 466, 875, 1016], "algesheim": 412, "algo": [78, 130], "algo_param": [79, 95], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 83, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 110, 111, 115, 121, 123, 135, 136, 141, 152, 185, 193, 203, 204, 218, 229, 231, 237, 239, 241, 245, 246, 252, 259, 260, 261, 264, 270, 273, 282, 293, 299, 300, 302, 306, 313, 315, 318, 322, 323, 324, 327, 329, 334, 336, 342, 354, 355, 356, 363, 367, 369, 373, 374, 375, 376, 377, 380, 381, 382, 383, 388, 389, 393, 394, 397, 408, 409, 412, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 478, 479, 482, 486, 487, 488, 492, 508, 516, 517, 518, 519, 520, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 558, 559, 560, 561, 564, 565, 568, 596, 608, 609, 615, 616, 640, 642, 644, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 709, 710, 713, 722, 724, 740, 742, 748, 779, 783, 784, 798, 800, 802, 803, 837, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 865, 870, 874, 876, 889, 893, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 935, 952, 953, 955, 970, 974, 980, 996, 998, 1001, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1016, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "algorithm_nam": 78, "ali": [1042, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "alia": [52, 249, 381, 388, 394, 403, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 615, 616, 622, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 979, 1012, 1026, 1037, 1051], "alias": [80, 81, 249, 378, 380, 383, 403, 602, 1037, 1041, 1051], "aliased_sample_weight": 249, "align": [70, 149, 151, 184, 235, 258, 284, 356, 394, 694, 698, 998, 1009, 1020, 1031, 1032, 1053, 1054], "alihan": [1050, 1056], "alik": [417, 1004], "alin": 1050, "alison": 1044, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 85, 86, 87, 88, 93, 97, 107, 113, 121, 123, 124, 133, 140, 141, 143, 144, 148, 151, 158, 159, 170, 177, 178, 180, 185, 187, 188, 189, 191, 195, 200, 201, 207, 208, 209, 215, 216, 217, 218, 219, 224, 226, 230, 232, 233, 235, 236, 242, 248, 249, 252, 253, 256, 259, 261, 263, 267, 271, 274, 275, 276, 277, 279, 280, 281, 283, 285, 286, 290, 293, 296, 298, 310, 313, 314, 318, 322, 323, 324, 325, 327, 328, 329, 330, 332, 334, 335, 336, 340, 343, 347, 348, 350, 351, 354, 355, 356, 359, 362, 363, 367, 368, 369, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 392, 393, 394, 395, 399, 403, 406, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 434, 435, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 508, 513, 514, 520, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 710, 714, 718, 719, 720, 721, 722, 723, 725, 726, 728, 731, 733, 734, 735, 737, 738, 740, 741, 742, 743, 747, 750, 751, 753, 755, 756, 758, 761, 766, 774, 779, 783, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 799, 800, 802, 803, 805, 806, 807, 808, 809, 811, 812, 814, 815, 817, 819, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 931, 933, 935, 936, 937, 941, 944, 945, 946, 947, 959, 962, 968, 980, 989, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1056], "all_class": 47, "all_displai": [2, 389, 1052], "all_estim": [2, 389, 1047, 1048, 1052], "all_funct": [2, 389, 1052], "all_label": 906, "all_model": 148, "all_or_ani": [989, 1047], "all_scor": 738, "all_split": [43, 52], "all_uppercas": 420, "allan": [354, 410, 1049], "allclos": [122, 153, 1018], "allefeld": 1050, "allen": [327, 1040, 1042, 1044, 1047], "allend": [1048, 1050], "allevi": [90, 151, 195, 200, 412, 1008], "allison": 327, "alloc": [2, 42, 45, 62, 94, 185, 285, 324, 376, 380, 381, 412, 420, 447, 451, 463, 492, 541, 543, 545, 589, 593, 596, 651, 657, 665, 667, 808, 809, 811, 828, 833, 836, 995, 1016, 1025, 1027, 1031, 1032, 1041, 1042, 1047, 1048, 1054, 1056], "allow": [25, 43, 58, 89, 91, 106, 107, 118, 125, 126, 138, 139, 146, 154, 172, 177, 178, 179, 181, 203, 209, 215, 219, 233, 236, 243, 246, 253, 255, 256, 258, 267, 273, 286, 287, 292, 322, 323, 324, 325, 327, 330, 347, 348, 354, 362, 363, 367, 374, 375, 380, 381, 382, 384, 387, 388, 389, 392, 394, 395, 403, 406, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 441, 447, 448, 450, 451, 453, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 501, 528, 529, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 598, 599, 602, 608, 615, 616, 620, 632, 633, 635, 639, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 695, 697, 704, 747, 767, 770, 779, 783, 786, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 816, 819, 823, 826, 827, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 855, 856, 859, 860, 864, 866, 867, 869, 871, 872, 874, 875, 876, 881, 888, 889, 893, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 933, 935, 936, 947, 948, 969, 995, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "allow_nan": [926, 934, 936, 1053], "allow_nd": [935, 936], "allow_non": 716, "allow_single_clust": [79, 450], "allow_unlabel": [119, 250, 528], "allowed_extens": 508, "allwein": 290, "almeida": [1038, 1039, 1050], "almeidayoel": 1051, "almer": 1044, "almost": [43, 70, 141, 147, 217, 223, 249, 252, 267, 288, 318, 330, 335, 363, 373, 375, 384, 386, 392, 393, 394, 403, 412, 416, 417, 474, 475, 476, 477, 479, 480, 481, 802, 995, 1001, 1002, 1005, 1006, 1021, 1045, 1050], "almubarak": [1050, 1051], "alon": [188, 219, 279, 343, 394, 410, 653, 674, 685, 1044, 1046], "along": [2, 51, 53, 89, 92, 99, 116, 142, 148, 151, 177, 203, 215, 247, 249, 277, 322, 355, 356, 363, 375, 380, 384, 388, 389, 394, 398, 403, 406, 409, 417, 419, 420, 421, 424, 538, 555, 592, 616, 617, 635, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 681, 683, 686, 687, 688, 689, 690, 691, 784, 785, 797, 805, 819, 878, 879, 882, 883, 886, 887, 888, 889, 894, 895, 896, 898, 899, 900, 931, 955, 980, 986, 995, 1002, 1009, 1016, 1019, 1030, 1037, 1042, 1043, 1045, 1049, 1050], "alongsid": [380, 386, 394, 398, 421, 830, 831, 832, 833, 834, 836, 1006, 1013, 1025, 1026], "alonso": [1048, 1050], "aloqe": 1055, "alpaydin": 377, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 85, 89, 93, 98, 107, 113, 116, 121, 123, 124, 126, 127, 129, 130, 135, 137, 138, 144, 148, 151, 152, 153, 155, 156, 157, 170, 172, 175, 177, 178, 179, 180, 181, 183, 184, 188, 195, 196, 197, 198, 200, 201, 202, 203, 204, 209, 210, 212, 213, 215, 216, 217, 219, 220, 224, 227, 228, 233, 235, 236, 239, 247, 248, 255, 258, 273, 274, 275, 276, 277, 280, 281, 283, 285, 286, 292, 293, 296, 298, 301, 303, 308, 310, 313, 314, 315, 316, 318, 320, 323, 325, 326, 329, 334, 336, 340, 341, 344, 345, 347, 348, 350, 351, 352, 354, 367, 375, 382, 386, 392, 414, 415, 417, 419, 421, 422, 424, 450, 475, 476, 482, 532, 536, 538, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 565, 600, 601, 603, 616, 618, 620, 621, 628, 636, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 692, 728, 753, 844, 845, 846, 848, 866, 867, 905, 917, 918, 919, 920, 995, 1002, 1006, 1008, 1010, 1014, 1019, 1020, 1021, 1022, 1034, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "alpha_": [43, 113, 161, 188, 196, 202, 204, 476, 616, 649, 650, 652, 656, 658, 660, 661, 666, 668, 678, 680, 1002, 1022, 1037, 1044], "alpha_1": [649, 650, 1002], "alpha_2": [649, 650, 1002], "alpha_a": 204, "alpha_b": 204, "alpha_bound": [181, 628], "alpha_h": [54, 417, 543, 545, 552, 1050], "alpha_i": [1008, 1021], "alpha_init": [196, 650, 1002, 1047], "alpha_max": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "alpha_min": [651, 652, 655, 657, 658, 659, 661, 665, 666, 667, 668, 686, 687, 688, 689], "alpha_per_target": [678, 1049], "alpha_w": [54, 417, 543, 545, 552, 1050], "alphabet": [104, 394, 727, 746], "alphalpha": 57, "alphanumer": [394, 593, 594, 596], "alphas_": [202, 204, 652, 655, 656, 658, 659, 660, 661, 666, 668, 687, 688, 1037, 1040, 1050], "alphas_enet": 203, "alphas_lar": 203, "alphas_lasso": 203, "alphas_positive_enet": 203, "alphas_positive_lar": 203, "alphas_positive_lasso": 203, "alphavantag": 51, "alphonsu": 1047, "alreadi": [2, 43, 45, 49, 88, 91, 118, 126, 135, 151, 156, 170, 188, 243, 250, 252, 255, 267, 274, 280, 293, 325, 328, 380, 381, 385, 392, 394, 410, 411, 414, 416, 418, 419, 424, 441, 496, 504, 528, 538, 572, 573, 639, 651, 654, 669, 670, 671, 672, 673, 679, 681, 682, 683, 690, 691, 773, 783, 844, 864, 872, 878, 879, 881, 886, 906, 909, 910, 938, 964, 995, 998, 1012, 1016, 1017, 1026, 1034, 1038, 1042, 1045, 1049, 1050, 1051, 1052], "alsadi": 1045, "alsaedi": 1050, "alsalhi": [0, 1040, 1041], "alsawadi": 1050, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 80, 86, 90, 91, 93, 97, 102, 103, 109, 111, 115, 116, 121, 128, 130, 135, 138, 141, 143, 145, 146, 147, 148, 149, 151, 154, 156, 166, 167, 168, 170, 172, 174, 177, 184, 185, 188, 189, 190, 191, 193, 196, 197, 199, 204, 207, 208, 211, 215, 216, 217, 219, 220, 224, 232, 233, 235, 245, 247, 249, 252, 253, 264, 267, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 290, 292, 293, 301, 304, 305, 306, 308, 313, 314, 315, 317, 318, 322, 323, 324, 325, 329, 330, 337, 339, 340, 341, 343, 345, 347, 354, 355, 356, 358, 359, 362, 363, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 386, 388, 389, 392, 393, 394, 395, 398, 400, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 441, 442, 443, 445, 446, 449, 450, 451, 452, 454, 456, 466, 467, 469, 471, 486, 488, 497, 501, 503, 508, 513, 537, 538, 540, 541, 546, 551, 554, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 615, 616, 627, 637, 638, 640, 648, 649, 650, 651, 652, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 677, 681, 683, 686, 689, 692, 696, 699, 700, 704, 715, 718, 721, 728, 734, 735, 743, 748, 768, 784, 785, 788, 789, 792, 802, 803, 805, 807, 808, 809, 819, 822, 825, 831, 832, 833, 834, 835, 836, 838, 848, 851, 852, 853, 855, 856, 857, 859, 860, 861, 865, 866, 867, 869, 871, 872, 877, 878, 882, 886, 889, 894, 898, 911, 914, 917, 918, 919, 920, 928, 935, 953, 955, 962, 969, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "alt": [57, 274, 336, 354, 355, 356, 375, 388, 492], "altai": 1047, "alter": [62, 184, 382, 394, 734, 735, 743, 788, 789, 792, 1042, 1046, 1049], "altern": [43, 63, 103, 116, 142, 143, 149, 151, 156, 190, 200, 215, 233, 243, 261, 264, 267, 282, 322, 347, 354, 355, 356, 363, 375, 378, 380, 384, 386, 392, 394, 395, 398, 406, 407, 409, 410, 412, 413, 414, 416, 417, 419, 420, 422, 445, 446, 449, 450, 451, 456, 462, 467, 504, 543, 545, 546, 552, 558, 559, 562, 563, 564, 565, 569, 570, 571, 587, 593, 594, 596, 622, 625, 648, 697, 711, 713, 776, 779, 783, 786, 807, 838, 873, 879, 882, 895, 902, 904, 917, 918, 919, 920, 972, 1000, 1002, 1003, 1005, 1006, 1009, 1010, 1014, 1016, 1018, 1019, 1021, 1022, 1026, 1032, 1042, 1044, 1050, 1051, 1055], "alternate_sign": [47, 420, 587, 594, 1044], "although": [43, 48, 62, 142, 156, 187, 212, 233, 242, 260, 292, 347, 363, 369, 382, 384, 388, 394, 412, 413, 417, 420, 501, 880, 1005, 1007, 1008, 1009, 1012, 1022, 1037, 1045, 1052], "altman": [633, 996], "altogeth": [145, 386, 1045], "alva": 1047, "alvaro": [1043, 1045], "alvin": 1045, "alwai": [141, 145, 148, 188, 195, 215, 233, 240, 246, 267, 276, 279, 283, 320, 340, 347, 350, 355, 363, 367, 368, 374, 378, 380, 381, 382, 386, 388, 393, 394, 398, 406, 410, 412, 413, 416, 419, 420, 421, 422, 429, 435, 447, 453, 468, 469, 471, 473, 486, 487, 488, 492, 501, 513, 514, 549, 554, 556, 557, 559, 561, 563, 564, 565, 566, 567, 569, 570, 573, 575, 586, 593, 594, 596, 599, 616, 632, 633, 635, 637, 638, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 676, 677, 678, 681, 683, 684, 700, 710, 714, 720, 726, 727, 728, 729, 737, 739, 740, 744, 787, 790, 791, 802, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 842, 843, 852, 853, 860, 861, 867, 874, 882, 887, 889, 892, 894, 895, 896, 897, 898, 899, 900, 902, 910, 911, 912, 914, 915, 917, 918, 920, 954, 964, 965, 995, 996, 998, 1000, 1002, 1005, 1006, 1009, 1012, 1014, 1018, 1019, 1021, 1022, 1030, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055], "always_accept_polici": 267, "always_reject_polici": 267, "alyssa": [1040, 1044], "alyssaq": 1043, "am": [102, 107, 111, 156, 189, 354, 385, 414, 478, 498, 1044], "amai": 1053, "aman": [1043, 1044, 1045, 1051, 1052], "amanda": [1045, 1048, 1049, 1050, 1051], "amar": [1051, 1052, 1053, 1055], "amax": 109, "amazon": 51, "amber": 394, "ambient": 239, "ambigu": [274, 385, 420, 577, 717, 953, 1009, 1046, 1048, 1050], "ambival": 93, "ambrosio": 1044, "ambroz": [1047, 1048], "amelia": 996, "amen": [386, 392, 422, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 995], "america": [50, 51, 111, 306, 375, 856, 1016], "american": [50, 51, 102, 112, 375, 412, 414, 418, 419, 420, 473, 478, 736, 889], "amerr": 1055, "ames_h": 252, "amg": [80, 99, 412, 456, 466, 696, 700, 1047, 1051, 1052], "amherst": 375, "ami": [72, 82, 91, 412, 709], "amicel": [1037, 1040], "amin": 109, "aminaka": 1041, "amit": [1037, 1051, 1052], "amlan": 1043, "amo": 1040, "amol": 1050, "among": [2, 64, 180, 189, 191, 193, 215, 263, 280, 292, 362, 369, 375, 382, 394, 395, 410, 415, 451, 453, 517, 524, 799, 834, 852, 857, 859, 911, 914, 917, 918, 919, 920, 995, 998, 1006, 1007, 1013, 1016, 1021, 1022, 1037, 1043, 1044, 1047, 1054], "amongst": [51, 1022], "amor": [0, 391, 1051, 1052, 1053, 1054, 1055], "amormachin": 1040, "amort": 1009, "amount": [37, 38, 47, 51, 86, 99, 109, 112, 121, 125, 136, 138, 178, 188, 200, 219, 233, 247, 267, 286, 324, 330, 332, 335, 337, 343, 350, 356, 367, 368, 369, 392, 412, 414, 417, 419, 420, 421, 447, 458, 473, 543, 544, 546, 548, 568, 601, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 670, 686, 689, 697, 808, 809, 849, 850, 855, 890, 905, 906, 919, 920, 995, 1001, 1002, 1005, 1008, 1010, 1016, 1018, 1019, 1020, 1021, 1050, 1054], "amount_fraud": 267, "amount_iter": 335, "amount_label": 335, "amount_test": 267, "amount_train": 267, "amourav": 1046, "amplitud": [148, 177, 179, 209, 1002], "amplitude_nois": 75, "amput": 1026, "amrcod": 1051, "amsterdam": [406, 877, 1017], "amy12xx": 1049, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 159, 166, 170, 172, 173, 174, 177, 178, 179, 181, 182, 183, 185, 187, 188, 189, 190, 193, 194, 195, 196, 199, 200, 202, 203, 210, 215, 216, 217, 219, 220, 222, 223, 229, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 250, 252, 256, 258, 259, 261, 263, 264, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 292, 293, 296, 299, 300, 301, 304, 306, 313, 318, 319, 320, 323, 324, 325, 327, 328, 329, 330, 333, 337, 339, 340, 342, 343, 345, 346, 347, 354, 355, 356, 358, 361, 362, 363, 367, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 393, 394, 395, 397, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 433, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 581, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 624, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 714, 716, 717, 723, 725, 726, 732, 734, 735, 739, 740, 742, 747, 748, 750, 751, 753, 755, 756, 758, 761, 763, 764, 768, 769, 771, 772, 773, 774, 775, 778, 780, 781, 782, 783, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 932, 933, 935, 936, 938, 939, 942, 943, 947, 948, 949, 951, 952, 953, 955, 957, 958, 961, 962, 963, 964, 965, 966, 968, 969, 970, 975, 976, 979, 980, 986, 989, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "ana": [1048, 1050, 1055], "anaconda": [0, 368, 378, 384], "anak": 1049, "analog": [43, 57, 150, 386, 419, 1006, 1007, 1021, 1046], "analogi": [1005, 1006], "analys": [235, 362, 417, 808, 809, 1003, 1025, 1030], "analysen": 454, "analysi": [2, 12, 27, 44, 46, 48, 49, 58, 62, 65, 71, 90, 96, 98, 109, 110, 111, 112, 113, 115, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 145, 162, 184, 185, 188, 204, 236, 257, 259, 263, 264, 267, 270, 273, 274, 278, 284, 293, 294, 295, 296, 304, 305, 313, 318, 350, 355, 372, 375, 377, 380, 382, 395, 409, 412, 414, 419, 420, 424, 443, 451, 452, 477, 479, 480, 486, 487, 489, 507, 509, 517, 520, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 560, 561, 636, 643, 693, 695, 696, 697, 698, 715, 724, 730, 731, 761, 793, 794, 797, 798, 802, 805, 831, 835, 851, 858, 869, 870, 875, 885, 889, 897, 952, 953, 996, 1002, 1003, 1005, 1006, 1016, 1024, 1025, 1027, 1028, 1030, 1031, 1032, 1037, 1038, 1039, 1041, 1046], "analyst": 872, "analyt": [126, 417, 422, 537, 625, 713, 996, 1000, 1006, 1024, 1030], "analyz": [43, 46, 55, 200, 275, 282, 327, 354, 356, 385, 386, 412, 420, 508, 593, 594, 596, 793, 1003, 1006, 1013, 1014, 1022, 1037, 1046], "anam": 1054, "anand": [1045, 1049], "ananiad": 1020, "anantharam": 1051, "anavelyz": 1050, "ana\u00ebl": 1047, "anbari": 533, "anchor": 284, "ander": [1041, 1047], "andersen": [748, 1051], "anderson": [50, 306, 375, 503, 1043, 1049, 1055], "andi": [1037, 1044], "ando": 1042, "andr": [1044, 1051], "andrea": [0, 395, 401, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "andreh7": 1044, "andrei": [1052, 1054, 1055], "andrew": [412, 466, 696, 700, 722, 742, 800, 884, 1010, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "andrewww": 1045, "andrii": 1051, "andriushchenko": [1043, 1044], "androutsopoulo": [844, 1008], "andrzej": [543, 545, 552], "andr\u00e1": [1050, 1051, 1052, 1053], "andr\u00e9": [1050, 1051, 1053], "ands": 880, "andyscanzio": 1054, "ang": 1044, "angel": [0, 402], "angela": [1047, 1048, 1052], "angelaambroz": 1048, "angelotti": 1056, "angermuel": [1041, 1042], "angl": [2, 53, 70, 124, 170, 258, 259, 260, 263, 264, 377, 417, 536, 542, 544, 547, 548, 550, 551, 553, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 683, 687, 688, 689, 690, 691, 697, 1003, 1004, 1028, 1032, 1037], "angmar": 57, "angu": [1044, 1045, 1051], "angular": [418, 697, 769], "anh": [543, 545, 552], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 80, 88, 90, 100, 153, 165, 170, 178, 179, 187, 188, 189, 190, 191, 204, 215, 219, 233, 242, 245, 246, 249, 259, 263, 264, 267, 273, 274, 276, 279, 282, 290, 306, 313, 314, 317, 322, 324, 325, 327, 330, 343, 347, 356, 363, 367, 368, 369, 374, 375, 377, 378, 380, 382, 384, 385, 386, 388, 393, 394, 395, 398, 400, 403, 406, 408, 409, 410, 412, 413, 416, 417, 418, 419, 420, 421, 437, 444, 450, 452, 453, 454, 456, 458, 460, 461, 465, 468, 471, 492, 493, 513, 514, 528, 539, 542, 544, 551, 556, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 584, 585, 587, 593, 594, 596, 598, 608, 615, 616, 625, 632, 637, 638, 650, 653, 663, 664, 671, 672, 673, 674, 681, 682, 683, 684, 685, 697, 701, 704, 705, 709, 721, 722, 724, 729, 741, 742, 757, 760, 762, 779, 783, 784, 785, 786, 797, 798, 800, 805, 808, 809, 817, 818, 838, 841, 849, 850, 855, 859, 868, 869, 873, 874, 878, 880, 882, 883, 890, 899, 900, 903, 906, 909, 910, 917, 918, 919, 920, 921, 923, 931, 935, 936, 942, 975, 989, 995, 996, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1029, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "aniket": [1052, 1054], "anil": [412, 456, 466], "anim": [354, 420], "anirban": 420, "aniruddha": 1045, "anish": [1042, 1043], "anisha": 1047, "aniso": [79, 95], "anisotrop": [90, 174, 422, 622, 624, 627], "anisotropicli": [79, 95], "anjirbag": 1045, "ankan": 1042, "ankerst": [412, 454, 461], "ankit": [1040, 1047, 1049, 1051], "ankit810": 1048, "ankita": 1045, "ankur": [1042, 1053], "ann": [1037, 1049, 1051], "anna": 1045, "annaayzenshtat": 1045, "annal": [170, 200, 202, 377, 419, 478, 521, 522, 523, 564, 565, 661, 1002], "annau": 1050, "annegnx": 1053, "anno": [697, 1003], "annoi": 368, "annot": [2, 43, 48, 63, 158, 168, 193, 236, 277, 280, 354, 380, 381, 382, 412, 721, 923, 1006, 1022, 1046], "annotationbbox": 236, "announc": [0, 322, 323, 324, 325, 326, 327, 328, 329, 330, 384], "annual": [377, 412, 731, 761, 906, 1006, 1019], "anomali": [14, 48, 111, 152, 185, 229, 241, 252, 299, 300, 375, 473, 517, 527, 568, 644, 682, 855, 870, 913, 1012, 1025, 1027, 1043, 1044], "anomaly_algorithm": 242, "anomaly_frac": 252, "anoth": [43, 72, 121, 126, 135, 146, 150, 170, 172, 180, 184, 188, 204, 219, 223, 240, 242, 249, 253, 259, 267, 273, 275, 276, 279, 283, 287, 303, 354, 356, 358, 363, 367, 369, 374, 375, 378, 380, 382, 386, 392, 394, 406, 409, 412, 416, 417, 419, 420, 421, 423, 446, 448, 456, 459, 466, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 513, 543, 545, 552, 678, 681, 697, 714, 724, 811, 827, 828, 868, 869, 890, 995, 996, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1016, 1020, 1021, 1046, 1047, 1054], "anova": [2, 49, 87, 106, 164, 166, 169, 170, 185, 338, 413, 449, 509, 520, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 718, 831, 835, 869, 870, 889, 909, 914, 1021, 1027], "anova__percentil": [87, 346], "anova_filt": 167, "anova_svm": 167, "ansam": 1053, "answer": [161, 187, 273, 380, 392, 406, 411, 731, 761, 1006, 1030], "ant": [723, 759, 1006], "anthoni": [1042, 1044, 1045], "anthony22": [1052, 1053], "anti": [200, 363, 611, 844, 1008], "anti_alias": [80, 81], "anticip": 52, "antoin": [1037, 1039, 1040, 1041, 1044, 1056], "antoni": [1041, 1043, 1049, 1052, 1056], "antonin": 1044, "antonio": [1045, 1047], "anubhav": 1045, "anuja": 1047, "anulekh": 1052, "anupam": [903, 1018, 1052], "anurag": 1056, "any_method": 965, "anymor": [151, 190, 215, 275, 322, 323, 343, 363, 384, 413, 432, 675, 1043, 1046, 1049, 1050, 1051, 1053, 1054, 1056], "anyon": [380, 395, 411, 1029, 1030], "anyth": [356, 386, 394, 403, 413, 416, 965, 969, 1051], "anywai": [48, 354, 382, 670, 690, 691], "anywher": 314, "anz": 1038, "aoif": [713, 1006], "ap": [2, 280, 712, 713, 1006], "apart": [188, 325, 343, 392, 394, 403, 413, 415, 421, 730, 1021, 1030, 1045], "api": [0, 51, 83, 89, 132, 140, 185, 241, 243, 249, 253, 254, 270, 275, 282, 283, 293, 329, 330, 355, 356, 369, 373, 374, 380, 383, 384, 389, 390, 392, 393, 395, 398, 406, 411, 417, 419, 420, 422, 426, 429, 430, 431, 434, 436, 442, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 501, 509, 513, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 568, 569, 571, 572, 573, 574, 575, 584, 585, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 676, 682, 693, 694, 695, 696, 697, 707, 802, 803, 808, 809, 811, 828, 835, 853, 855, 857, 858, 861, 865, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 907, 913, 914, 928, 947, 948, 971, 989, 995, 1004, 1005, 1006, 1009, 1016, 1020, 1025, 1026, 1027, 1030, 1032, 1034, 1035, 1036, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "api_refer": 380, "apk": 398, "apostolo": 1052, "appar": [115, 1008, 1030], "appdata": 398, "appeal": 395, "appear": [0, 47, 80, 138, 188, 191, 268, 270, 271, 299, 300, 308, 310, 314, 333, 347, 354, 355, 356, 375, 378, 380, 385, 394, 414, 417, 492, 493, 560, 572, 573, 584, 615, 632, 633, 635, 702, 705, 707, 717, 721, 723, 787, 794, 806, 823, 844, 845, 846, 847, 848, 911, 914, 955, 1002, 1008, 1012, 1037, 1045, 1049, 1050], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 83, 94, 103, 128, 138, 139, 141, 146, 148, 151, 184, 191, 208, 219, 220, 222, 223, 230, 233, 247, 248, 273, 276, 282, 283, 308, 309, 319, 335, 343, 346, 354, 355, 356, 358, 362, 386, 394, 413, 420, 663, 664, 909, 910, 916, 943, 1016], "appendix": [650, 681, 1002, 1016], "appl": [51, 367, 378, 392, 1007], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 80, 81, 88, 89, 91, 95, 103, 107, 116, 118, 121, 122, 127, 129, 131, 140, 141, 146, 148, 166, 172, 188, 190, 200, 204, 219, 220, 229, 235, 236, 237, 242, 247, 249, 273, 274, 276, 285, 286, 287, 292, 302, 313, 317, 318, 323, 343, 347, 356, 362, 363, 367, 372, 380, 382, 384, 388, 392, 393, 394, 403, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 444, 450, 456, 466, 468, 469, 471, 473, 478, 486, 487, 488, 489, 513, 514, 521, 522, 523, 529, 536, 537, 538, 539, 540, 542, 544, 546, 547, 548, 553, 554, 555, 558, 559, 562, 563, 564, 565, 569, 570, 571, 593, 594, 595, 596, 632, 637, 638, 643, 644, 646, 647, 663, 664, 673, 681, 682, 683, 696, 704, 706, 712, 716, 731, 761, 763, 764, 786, 793, 797, 798, 805, 819, 835, 838, 844, 845, 846, 847, 848, 858, 868, 869, 878, 885, 886, 889, 894, 895, 897, 898, 899, 900, 905, 916, 917, 918, 919, 920, 930, 935, 941, 945, 952, 953, 977, 996, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1014, 1016, 1020, 1021, 1022, 1023, 1024, 1030, 1038, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "applic": [42, 44, 57, 82, 88, 111, 185, 193, 215, 232, 237, 266, 267, 276, 313, 330, 367, 369, 375, 377, 380, 386, 388, 389, 392, 394, 410, 411, 412, 416, 417, 418, 419, 422, 424, 448, 450, 456, 501, 537, 538, 539, 558, 559, 634, 693, 694, 695, 699, 717, 734, 735, 743, 788, 789, 792, 835, 929, 995, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1018, 1022, 1025, 1026, 1027, 1029, 1030, 1037, 1038, 1043, 1045, 1048], "apply_along_axi": 311, "appr": 624, "appreci": [0, 380, 392], "approach": [44, 47, 91, 96, 99, 125, 170, 172, 183, 188, 191, 198, 202, 215, 217, 223, 233, 235, 267, 290, 319, 347, 354, 355, 356, 369, 379, 380, 386, 389, 394, 398, 400, 406, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 441, 447, 450, 452, 456, 466, 525, 537, 587, 594, 616, 640, 663, 664, 679, 680, 838, 854, 953, 995, 996, 1002, 1003, 1006, 1007, 1009, 1010, 1016, 1020, 1021, 1024, 1025, 1030, 1041, 1053], "appropri": [25, 88, 90, 128, 177, 188, 219, 249, 282, 287, 330, 358, 363, 380, 382, 388, 394, 406, 410, 412, 416, 418, 419, 423, 448, 454, 461, 493, 494, 495, 501, 505, 506, 507, 509, 510, 515, 582, 587, 596, 597, 600, 601, 603, 604, 605, 677, 679, 692, 714, 851, 852, 853, 855, 857, 859, 860, 861, 989, 1002, 1005, 1006, 1016, 1041, 1044, 1050, 1053, 1055], "approv": [380, 395, 419], "approx": [64, 121, 247, 417, 419, 420, 1006, 1013, 1020], "approxim": [0, 2, 23, 43, 44, 64, 69, 80, 86, 111, 125, 126, 130, 139, 147, 148, 170, 173, 188, 196, 211, 215, 216, 229, 233, 237, 240, 241, 242, 245, 248, 264, 273, 278, 288, 294, 295, 302, 313, 315, 316, 318, 322, 325, 354, 356, 360, 361, 363, 372, 377, 389, 392, 394, 409, 410, 413, 415, 416, 417, 419, 422, 424, 425, 426, 436, 453, 473, 474, 477, 478, 479, 480, 486, 487, 488, 495, 501, 507, 526, 529, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 564, 565, 587, 594, 615, 616, 624, 643, 644, 645, 646, 647, 650, 662, 663, 664, 677, 679, 681, 682, 684, 692, 697, 763, 764, 769, 802, 806, 823, 830, 834, 835, 849, 850, 853, 857, 859, 860, 861, 865, 869, 870, 875, 879, 881, 882, 886, 898, 909, 914, 915, 952, 953, 979, 999, 1000, 1001, 1002, 1003, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1032, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "approximate_nearest_neighbor": [293, 1027], "approximateident": 1038, "april": [375, 669, 690, 691, 1006, 1041, 1049, 1054], "apriori": 233, "apt": [378, 388, 398], "aptitud": 188, "aqua": 282, "aquantitypredict": 400, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 123, 126, 128, 131, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 166, 167, 169, 170, 172, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 219, 224, 226, 233, 235, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 259, 260, 261, 263, 266, 268, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 299, 303, 306, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 341, 343, 345, 347, 350, 351, 354, 355, 356, 358, 362, 363, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 398, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 432, 433, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 513, 514, 515, 517, 520, 521, 522, 523, 524, 525, 528, 529, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 714, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 753, 755, 756, 758, 759, 761, 762, 766, 767, 768, 770, 772, 773, 774, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 817, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 931, 932, 933, 935, 936, 939, 940, 941, 945, 947, 948, 952, 953, 954, 957, 958, 959, 961, 962, 965, 968, 969, 971, 976, 979, 980, 984, 985, 986, 989, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "arab": 632, "arabi": [412, 710, 720, 791], "aradwad": 1048, "arafat": 1043, "arai": 1047, "arang": [43, 50, 52, 53, 75, 91, 93, 98, 105, 110, 111, 128, 131, 144, 145, 147, 149, 150, 154, 158, 166, 172, 174, 179, 180, 183, 184, 191, 200, 215, 218, 220, 224, 238, 245, 247, 268, 273, 276, 281, 284, 292, 293, 306, 308, 315, 325, 332, 333, 335, 337, 343, 349, 354, 356, 360, 361, 362, 363, 392, 409, 416, 420, 469, 549, 835, 884, 888, 1001, 1002, 1010, 1016, 1020], "aravindh": 1052, "arbitarili": 354, "arbitrari": [2, 43, 52, 88, 116, 121, 122, 123, 140, 179, 195, 215, 232, 233, 271, 313, 317, 319, 324, 330, 354, 362, 380, 392, 394, 406, 413, 416, 417, 419, 420, 424, 450, 454, 459, 461, 469, 537, 538, 564, 565, 586, 644, 653, 674, 685, 693, 747, 794, 806, 807, 812, 814, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 873, 875, 888, 995, 997, 998, 1002, 1003, 1006, 1009, 1016, 1026, 1037, 1038, 1041, 1043, 1044, 1045, 1047, 1051, 1053, 1056], "arbitrarili": [173, 259, 264, 354, 394, 422, 435, 469, 486, 487, 488, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 685, 726, 727, 728, 729, 751, 790, 794, 842, 843, 852, 860, 867, 890, 910, 912, 915, 918, 920, 1006, 1009, 1016, 1022], "arc": [377, 419], "archana": [1047, 1049], "archit": 1043, "architectur": [378, 382, 388, 392, 398, 406, 472, 907, 1010, 1030, 1037, 1054], "archiv": [47, 290, 374, 375, 377, 378, 412, 446, 505, 507, 515, 763, 764, 1004, 1021], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [713, 1006], "arcidiacono": [1051, 1052, 1054, 1055], "arcsin": [704, 769], "arctan": [70, 259, 264, 376, 523], "arctan2": [258, 260, 263], "ard": [2, 195, 649, 650], "ard_poli": 195, "ard_scor": 195, "ardregress": [2, 195, 200, 650, 945, 1002, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054], "area": [2, 50, 52, 152, 170, 215, 233, 252, 270, 273, 280, 282, 283, 343, 347, 348, 351, 377, 380, 384, 392, 412, 420, 707, 711, 712, 713, 793, 794, 1003, 1006, 1009, 1024, 1039], "aren": [16, 249, 354, 375, 384, 398, 731, 761, 1011, 1047, 1049], "arezki": 1037, "arfa": 1043, "arff": [327, 380, 501, 1049, 1052, 1053], "arg": [249, 309, 347, 381, 394, 417, 419, 426, 704, 873, 971, 973, 1002, 1008, 1009], "arg_sort_bi": 52, "argentina": 769, "argmax": [63, 128, 272, 286, 382, 419, 574, 837, 917, 1021, 1050], "argmin": [51, 147, 272, 382, 414, 536, 542, 550, 551, 690, 784, 785, 1022], "argpartit": 1044, "argsort": [54, 55, 57, 58, 59, 147, 149, 190, 191, 215, 233, 322, 332, 333, 354, 355, 375, 1014], "argument": [2, 104, 149, 191, 216, 243, 246, 249, 322, 368, 374, 375, 380, 381, 383, 385, 386, 388, 389, 392, 394, 412, 413, 416, 417, 419, 421, 423, 424, 426, 430, 434, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 461, 463, 465, 467, 468, 472, 473, 498, 501, 508, 513, 538, 540, 541, 543, 545, 556, 564, 565, 568, 572, 573, 574, 575, 582, 586, 587, 593, 594, 596, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 636, 644, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 671, 673, 681, 682, 686, 689, 693, 697, 701, 703, 704, 705, 706, 707, 719, 724, 740, 747, 768, 784, 785, 811, 828, 830, 831, 832, 833, 834, 836, 837, 838, 841, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 866, 869, 873, 907, 913, 923, 933, 943, 948, 972, 974, 975, 989, 995, 998, 1002, 1003, 1004, 1006, 1009, 1013, 1014, 1021, 1022, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "argv": 246, "ari": [72, 91, 355, 412, 710, 1042, 1048], "aria": [1045, 1046, 1052], "aric": 55, "arida": [1046, 1047, 1049, 1051, 1054], "ariel": [45, 375, 1037, 1043], "arif": [1055, 1056], "ariga": 1043, "arik": 1045, "arima": 1025, "aris": [2, 188, 276, 350, 368, 385, 388, 412, 720, 1002, 1003, 1049], "arisa": [1051, 1052], "arithmet": [248, 386, 388, 412, 556, 653, 674, 685, 709, 722, 741, 742, 762, 800, 856, 1006, 1045], "ari\u00f1o": 1040, "arjona": 1046, "arka204": [1050, 1052], "arm": [378, 380, 388, 995], "arm64": [378, 383], "arm64v8": 388, "armstrong": 1049, "arnaud": [0, 402, 1038, 1039, 1040, 1041, 1042, 1043, 1055], "arnaudov": [1049, 1051], "arnaudstiegl": 1047, "arnold": [1037, 1038], "arnoldi": [693, 694, 698], "aroma": 319, "arora": [1045, 1052], "around": [0, 43, 63, 72, 85, 115, 135, 138, 148, 178, 189, 193, 249, 252, 267, 276, 287, 311, 332, 334, 335, 343, 346, 347, 354, 355, 356, 362, 363, 375, 377, 380, 386, 392, 400, 411, 412, 416, 417, 420, 475, 476, 520, 549, 625, 645, 654, 673, 709, 747, 802, 811, 828, 855, 857, 859, 860, 861, 889, 1002, 1003, 1005, 1006, 1012, 1016, 1020, 1025, 1026, 1029, 1030, 1041, 1042], "arpack": [51, 57, 79, 80, 99, 102, 236, 329, 417, 455, 456, 457, 466, 540, 546, 549, 693, 694, 696, 698, 700, 1003, 1043, 1044, 1049, 1053, 1054, 1055], "arpanchowdhri": 1047, "arr": 330, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 80, 86, 87, 94, 95, 97, 102, 104, 112, 115, 119, 122, 123, 147, 149, 151, 152, 155, 158, 167, 170, 173, 174, 175, 180, 188, 195, 197, 200, 208, 209, 212, 215, 216, 222, 232, 236, 237, 242, 246, 249, 252, 253, 256, 258, 259, 260, 262, 263, 267, 268, 269, 271, 273, 274, 277, 278, 282, 292, 306, 316, 322, 325, 326, 328, 329, 333, 339, 346, 347, 354, 361, 363, 367, 368, 373, 374, 375, 380, 381, 382, 383, 385, 386, 388, 390, 392, 393, 394, 406, 409, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 520, 524, 528, 529, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 588, 589, 591, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 928, 931, 932, 933, 934, 935, 936, 937, 940, 941, 951, 952, 953, 954, 955, 957, 959, 960, 967, 968, 969, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 994, 996, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1030, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "arrang": [2, 58, 292, 637, 840, 841, 842, 843, 1006], "array_api": [408, 1056], "array_api_compat": [408, 1056], "array_api_dispatch": [408, 472, 907], "array_api_support": [408, 928], "array_convert": 936, "array_equ": [574, 1044], "array_lik": 951, "array_paramet": 380, "array_sym": 991, "arrayfunc": [2, 389, 932], "arrow": [63, 400, 1051], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1051, "art": [324, 386, 654, 697, 1030], "artem": [1041, 1044, 1054], "arth": 1051, "arthur": [412, 451, 464, 1042, 1043, 1044, 1045, 1046, 1049, 1051], "arthurmello": 1051, "articl": [0, 55, 102, 354, 375, 379, 380, 388, 416, 425, 479, 710, 1002, 1006, 1050], "artiem": 1045, "artifact": [43, 53, 80, 81, 313, 369, 384, 1032], "artifici": [10, 142, 145, 153, 170, 184, 219, 235, 248, 267, 311, 354, 375, 376, 377, 385, 409, 412, 416, 417, 540, 701, 839, 866, 867, 999, 1003, 1005, 1007, 1013, 1018, 1022, 1026, 1030, 1037], "artist": [243, 387, 442, 637, 703, 705, 706, 707, 811, 828, 923], "artsiom": 1044, "artsion": 1043, "artstein": 721, "artur": [1052, 1053], "arturo": [0, 391, 1051, 1052, 1053, 1054, 1055], "arturoamor": 1051, "aruku": [1045, 1046], "arunav": 1048, "arunava": 1045, "arxiv": [380, 466], "arya": 1045, "as_float_arrai": [2, 389, 1056], "as_fram": [43, 44, 103, 107, 141, 145, 151, 156, 177, 188, 189, 190, 191, 202, 204, 215, 223, 231, 233, 252, 256, 267, 287, 290, 293, 296, 310, 318, 319, 322, 324, 326, 327, 374, 375, 493, 494, 495, 497, 501, 505, 506, 507, 509, 510, 515, 1047, 1048, 1049, 1050, 1053], "asanyarrai": 382, "asarrai": [47, 55, 215, 233, 311, 334, 354, 355, 382, 394, 408, 731, 761, 857, 859, 860, 861, 1016, 1021, 1054], "ascend": [58, 103, 190, 319, 419, 454, 460, 599, 632, 640, 921, 922, 923, 1020, 1047, 1053], "ascent": [177, 422], "ascii": [50, 306, 420, 491, 593, 594, 596], "ascontiguousarrai": 546, "asctim": 121, "aseem": 1044, "asgd": [222, 1020], "ash": [48, 377, 1040, 1043], "ashah002": [1052, 1053, 1054], "ashim": 1047, "ashimb9": 1047, "ashimin": 1050, "ashish": [1050, 1053], "ashra": 649, "ashutosh": [1044, 1045, 1047, 1049], "ashvith": 1050, "ashwin": [1052, 1053], "asia": [273, 1016], "asian": 420, "asid": [146, 223, 406, 564, 565, 566, 567, 671, 672, 673, 681, 683, 866, 867], "asish": [1043, 1044], "ask": [0, 183, 184, 273, 379, 380, 384, 385, 388, 394, 395, 406, 421, 851, 852, 853, 855, 857, 859, 860, 861, 1029, 1053], "asnt": 1043, "aspect": [46, 91, 116, 121, 176, 189, 235, 242, 282, 287, 302, 367, 368, 369, 380, 394, 395, 412, 495, 663, 664, 995, 1022, 1030, 1054], "aspir": [170, 377, 380], "ass": [111, 112, 414, 478], "assembl": [292, 320, 356, 869], "assert": [47, 55, 122, 246, 273, 282, 368, 383, 1026], "assert_all_finit": [2, 367, 389, 472, 1056], "assert_allclos": 382, "assert_array_equ": 420, "assert_warn": 1050, "assert_warns_messag": 1050, "assertionerror": 1044, "assess": [44, 52, 72, 93, 135, 146, 148, 188, 215, 233, 252, 269, 270, 272, 276, 410, 419, 706, 748, 1005, 1006, 1012, 1026, 1052], "assia": 1046, "assiaben": 1046, "assign": [47, 55, 58, 70, 72, 80, 82, 90, 91, 93, 135, 140, 152, 154, 166, 168, 174, 228, 233, 242, 247, 250, 267, 308, 315, 320, 330, 337, 350, 355, 375, 380, 382, 394, 409, 416, 417, 419, 420, 421, 422, 444, 445, 446, 447, 449, 450, 451, 452, 453, 456, 458, 460, 463, 464, 465, 466, 520, 541, 566, 567, 598, 599, 612, 613, 615, 663, 664, 671, 672, 673, 681, 682, 683, 709, 710, 720, 721, 722, 724, 725, 734, 735, 736, 743, 744, 748, 760, 762, 788, 789, 791, 792, 798, 799, 800, 805, 808, 809, 811, 814, 819, 828, 830, 831, 832, 833, 836, 853, 859, 861, 862, 863, 876, 904, 905, 909, 910, 911, 912, 913, 914, 915, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1016, 1019, 1030, 1037, 1042, 1044, 1045, 1054, 1055], "assign_label": [80, 412, 456, 466], "assist": [0, 380, 392, 411, 1016, 1029, 1030], "associ": [50, 61, 62, 111, 135, 172, 187, 188, 219, 261, 267, 319, 332, 334, 354, 388, 412, 414, 416, 417, 419, 420, 430, 450, 453, 473, 474, 475, 476, 477, 478, 479, 480, 498, 499, 500, 529, 562, 566, 569, 610, 611, 635, 650, 663, 664, 671, 673, 679, 680, 681, 694, 700, 704, 736, 744, 827, 832, 852, 860, 874, 886, 898, 906, 915, 917, 919, 941, 1005, 1006, 1009, 1016, 1019, 1030, 1037, 1049, 1053], "assum": [48, 70, 88, 90, 179, 184, 187, 188, 204, 215, 233, 242, 245, 252, 264, 273, 282, 313, 350, 356, 368, 379, 380, 382, 386, 392, 393, 394, 397, 406, 409, 410, 412, 414, 416, 417, 419, 420, 422, 423, 428, 433, 441, 443, 448, 450, 454, 461, 467, 473, 474, 475, 476, 477, 478, 479, 480, 508, 513, 514, 537, 547, 553, 554, 566, 567, 572, 573, 592, 593, 594, 596, 625, 637, 648, 649, 651, 652, 657, 663, 664, 665, 666, 667, 671, 672, 673, 676, 677, 681, 682, 683, 686, 690, 692, 693, 697, 714, 727, 731, 740, 746, 761, 769, 774, 779, 783, 786, 805, 808, 809, 819, 845, 851, 852, 855, 857, 859, 860, 865, 876, 889, 965, 981, 982, 983, 996, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1016, 1020, 1022, 1043, 1049], "assume_cent": [69, 110, 414, 425, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "assume_finit": [367, 368, 472, 907], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 109, 110, 124, 177, 181, 185, 187, 215, 242, 269, 292, 313, 386, 392, 393, 397, 410, 412, 414, 416, 417, 420, 422, 451, 455, 457, 492, 508, 517, 537, 539, 546, 655, 659, 803, 805, 808, 809, 819, 846, 901, 902, 1000, 1002, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1019, 1022, 1027, 1044, 1050], "assur": [0, 394, 802, 803, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "astel": 1045, "astolfi": 1037, "astrai": 394, "astroml": 1025, "astronom": 1024, "astronomi": 1025, "astropi": 380, "astyp": [43, 53, 72, 76, 79, 86, 93, 95, 99, 112, 127, 145, 147, 163, 187, 189, 205, 206, 233, 238, 248, 252, 267, 284, 293, 320, 406, 420, 996, 1002, 1044], "asv": 380, "asv_benchmark": 380, "aswathavicki": 1055, "asymmetr": [148, 217, 394, 1042], "asymmetri": [217, 354], "asymptot": [109, 110, 204, 367, 414, 478, 541, 735, 1002, 1005, 1047], "atag": 180, "atanasoska": 1056, "atariah": 1046, "ateif": 1050, "atharva": 1051, "atheism": [57, 274, 336, 354, 355, 356, 375, 492], "atheist": 354, "athena": 1030, "ation": 420, "atla": [367, 378], "atleast_2d": [148, 382], "atmospher": 177, "atol": [382, 677, 679, 849, 850, 854], "atom": [124, 130, 417, 536, 542, 544, 547, 548, 550, 551, 658, 668, 689, 1002, 1037, 1050], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1049, 1050], "attach": [47, 354, 437, 854, 1038, 1048], "attack": [252, 375], "attalla": 1051, "attard": 1050, "attempt": [43, 87, 189, 211, 221, 268, 354, 367, 379, 394, 412, 424, 450, 454, 461, 468, 472, 636, 693, 694, 698, 823, 851, 852, 853, 855, 857, 859, 860, 861, 887, 889, 907, 935, 936, 1002, 1003, 1009, 1022, 1044, 1049, 1054], "attenberg": 420, "attent": [388, 612, 613, 1020], "attenu": 172, "attia": 802, "attr": [47, 89], "attract": [423, 448, 1000, 1009, 1025], "attractador": [1044, 1045], "attrgett": [598, 602], "attribut": [2, 47, 62, 68, 82, 103, 129, 133, 135, 142, 143, 146, 166, 170, 215, 223, 249, 263, 271, 272, 277, 285, 302, 306, 325, 347, 356, 362, 369, 373, 374, 375, 377, 380, 383, 387, 392, 406, 409, 410, 412, 413, 414, 415, 417, 419, 420, 421, 422, 427, 428, 429, 430, 431, 434, 435, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 622, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 741, 800, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 924, 926, 966, 989, 994, 998, 1000, 1002, 1007, 1009, 1010, 1012, 1016, 1019, 1020, 1021, 1022, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "attributeerror": [413, 564, 582, 966, 1046, 1047, 1049, 1053, 1054], "attrselect": 1037, "atukorala": 1052, "atuo": [1053, 1054], "aubert": 1044, "auc": [2, 50, 62, 170, 215, 233, 252, 270, 273, 277, 280, 282, 283, 329, 410, 707, 713, 793, 1006, 1042, 1045, 1049], "auc_scor": [1037, 1039], "audio": [374, 508], "audrei": 1055, "aufarkari": 1051, "aug": 1021, "augment": [2, 335, 635, 891, 1014, 1030], "augspurg": [1045, 1047], "august": [170, 377, 412, 516, 539, 1021, 1037, 1039, 1040, 1044, 1051], "aura": 1049, "auroc": 1006, "aur\u00e9lien": [1044, 1045, 1046, 1050, 1051], "austin": 1044, "australian": [151, 398], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 374, 380, 383, 388, 392, 394, 395, 416, 455, 539, 876, 998, 1025, 1040], "authorit": 395, "authorship": 384, "auto": [57, 69, 90, 91, 119, 170, 176, 199, 235, 240, 254, 293, 296, 301, 322, 323, 324, 325, 326, 327, 330, 339, 340, 346, 349, 356, 374, 375, 382, 419, 422, 423, 445, 448, 449, 450, 451, 453, 454, 456, 459, 460, 461, 463, 466, 501, 513, 514, 540, 543, 545, 546, 549, 552, 554, 562, 563, 566, 567, 568, 569, 570, 572, 598, 599, 602, 607, 612, 613, 634, 636, 637, 638, 640, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 707, 804, 808, 809, 827, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 866, 867, 882, 883, 890, 901, 902, 906, 909, 910, 911, 912, 913, 914, 915, 919, 920, 952, 953, 971, 974, 997, 1000, 1002, 1003, 1009, 1016, 1025, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "auto_examples_jupyt": 185, "auto_examples_python": 185, "auto_viml": 1049, "auto_wrap_output_kei": 382, "autoclass": 377, "autocorrel": 416, "autolabel": 47, "autom": [274, 383, 384, 398, 697, 995, 1002, 1003, 1006, 1025, 1030], "automat": [2, 43, 47, 51, 52, 64, 80, 96, 98, 103, 128, 151, 161, 169, 195, 218, 258, 259, 267, 271, 274, 313, 320, 323, 327, 336, 345, 347, 368, 375, 378, 380, 382, 384, 388, 394, 398, 406, 408, 412, 413, 414, 417, 419, 420, 421, 436, 454, 456, 460, 466, 468, 469, 471, 501, 504, 520, 543, 545, 546, 552, 554, 556, 562, 566, 569, 588, 593, 596, 599, 607, 648, 650, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 677, 679, 680, 681, 683, 686, 689, 692, 693, 696, 700, 807, 822, 825, 835, 845, 866, 867, 870, 871, 873, 882, 883, 890, 901, 902, 909, 910, 911, 914, 917, 919, 923, 941, 976, 979, 994, 995, 997, 1000, 1005, 1010, 1016, 1020, 1022, 1025, 1026, 1037, 1040, 1041, 1042, 1048, 1051, 1052, 1053, 1054, 1055, 1056], "automl": [1006, 1025], "automobil": 1030, "autoregress": 375, "autoviml": 1025, "autoviz": 1049, "auxiliari": [184, 330, 378, 1030, 1052], "av": 1045, "avail": [0, 2, 44, 50, 51, 53, 76, 89, 90, 124, 143, 147, 151, 170, 172, 177, 181, 187, 188, 189, 204, 215, 223, 233, 236, 249, 252, 267, 270, 271, 276, 277, 280, 287, 298, 299, 300, 306, 318, 322, 323, 324, 325, 327, 328, 335, 337, 363, 367, 374, 375, 377, 378, 379, 380, 381, 384, 385, 389, 393, 394, 398, 406, 409, 412, 413, 416, 417, 418, 419, 420, 421, 423, 451, 454, 455, 456, 457, 473, 474, 475, 476, 477, 478, 479, 480, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 513, 540, 554, 560, 561, 562, 563, 564, 565, 569, 570, 572, 573, 574, 575, 598, 599, 607, 615, 616, 632, 637, 638, 652, 656, 658, 660, 662, 666, 668, 670, 673, 675, 676, 677, 678, 679, 680, 681, 694, 701, 704, 737, 738, 805, 808, 809, 819, 831, 832, 837, 838, 839, 840, 841, 842, 843, 855, 866, 867, 869, 876, 885, 888, 893, 897, 902, 906, 961, 966, 995, 996, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1016, 1019, 1020, 1021, 1024, 1025, 1026, 1029, 1030, 1032, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1056], "available_if": [2, 89, 394, 1050, 1051, 1054], "avebedrm": [313, 375, 494], "aventi": 51, "aveoccup": [313, 324, 375, 494], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 85, 93, 95, 138, 139, 144, 148, 151, 152, 157, 158, 159, 170, 177, 189, 197, 204, 215, 222, 233, 252, 267, 276, 278, 281, 283, 287, 292, 313, 322, 328, 330, 336, 354, 363, 367, 375, 377, 382, 392, 409, 410, 414, 416, 420, 421, 423, 424, 441, 442, 445, 448, 449, 450, 451, 453, 494, 498, 499, 528, 536, 537, 538, 542, 543, 545, 546, 550, 551, 552, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 592, 599, 637, 638, 653, 663, 664, 671, 672, 674, 677, 679, 681, 682, 683, 685, 692, 705, 708, 709, 711, 712, 713, 718, 725, 726, 728, 730, 731, 733, 734, 735, 739, 740, 741, 743, 744, 745, 748, 750, 751, 753, 755, 756, 758, 761, 769, 786, 787, 788, 789, 790, 792, 793, 795, 796, 800, 801, 802, 803, 833, 836, 855, 875, 890, 991, 996, 1001, 1002, 1007, 1010, 1012, 1013, 1020, 1021, 1022, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056], "average_bike_rent": 189, "average_coef_": 1048, "average_feature_effect": 354, "average_intercept_": 1048, "average_linkag": 79, "average_method": [412, 709, 762, 1045], "average_pr": 151, "average_precis": [280, 705, 712, 1006], "average_precision_scor": [2, 280, 705, 711, 713, 787, 793, 1006, 1037, 1040, 1044, 1045, 1051, 1053], "average_week_demand": [43, 151], "averoom": [313, 324, 375, 494], "avg": [45, 68, 102, 167, 271, 311, 332, 333, 574, 709, 718, 827, 1006, 1053], "avg_dist": [75, 786], "avgclaim": 233, "avgclaimamount": 233, "avi": [1049, 1050], "avidar": 1053, "avinash": 1049, "avm19": [1051, 1052, 1054], "avoid": [43, 46, 51, 52, 79, 90, 95, 104, 140, 141, 146, 151, 188, 189, 219, 224, 233, 238, 249, 252, 267, 268, 274, 278, 286, 301, 303, 304, 317, 318, 329, 339, 340, 355, 368, 378, 380, 381, 382, 384, 385, 386, 392, 394, 395, 398, 406, 410, 412, 414, 416, 419, 420, 423, 444, 446, 448, 456, 466, 472, 498, 499, 500, 504, 513, 514, 539, 544, 548, 639, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 694, 696, 698, 700, 717, 797, 805, 806, 810, 816, 819, 830, 831, 832, 869, 872, 878, 879, 881, 886, 887, 888, 889, 892, 894, 895, 896, 897, 898, 899, 900, 902, 907, 953, 1000, 1003, 1005, 1006, 1009, 1010, 1012, 1014, 1016, 1021, 1022, 1026, 1029, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "aw": 388, "awai": [62, 63, 64, 93, 109, 144, 172, 173, 177, 218, 267, 347, 348, 375, 410, 422, 633, 851, 852, 859, 860, 1005, 1006, 1021], "await": 323, "awalei": 1045, "awar": [48, 54, 167, 181, 267, 340, 354, 378, 380, 382, 392, 395, 411, 416, 420, 572, 573, 653, 659, 660, 661, 663, 664, 674, 685, 855, 884, 1012, 1016, 1022, 1034, 1037, 1038, 1051], "awesom": 1030, "awwwyan": 1055, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 86, 88, 89, 90, 97, 99, 104, 107, 111, 113, 116, 118, 119, 121, 127, 131, 135, 137, 140, 142, 145, 146, 151, 153, 154, 156, 157, 158, 175, 176, 181, 183, 187, 188, 189, 190, 191, 193, 195, 196, 199, 200, 204, 206, 207, 210, 212, 213, 215, 216, 217, 219, 220, 223, 224, 226, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 243, 248, 252, 253, 255, 258, 260, 263, 267, 268, 269, 270, 273, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 301, 303, 304, 308, 309, 310, 313, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 329, 339, 340, 341, 342, 344, 345, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 376, 383, 417, 422, 442, 539, 546, 555, 636, 637, 702, 703, 705, 706, 707, 723, 811, 828, 923, 926, 1006, 1009, 1013, 1034, 1047, 1053], "ax0": [105, 107, 215, 245, 355], "ax1": [46, 49, 90, 93, 98, 100, 105, 107, 111, 119, 145, 184, 191, 215, 243, 245, 253, 258, 276, 284, 314, 318, 319, 335, 354, 355, 376], "ax2": [46, 90, 93, 98, 100, 111, 119, 145, 184, 191, 215, 243, 253, 258, 276, 284, 303, 314, 318, 319, 335, 354, 376], "ax3": [98, 335], "ax4": 98, "ax_": [152, 266, 276, 280, 282, 286, 296, 318, 322, 387, 442, 636, 702, 703, 705, 706, 707, 811, 828], "ax_bc": 317, "ax_bottom": 387, "ax_calibration_curv": [62, 64], "ax_colorbar": 313, "ax_det": 270, "ax_histi": 313, "ax_histx": 313, "ax_histx_zoom": 313, "ax_histy_zoom": 313, "ax_idx": 275, "ax_origin": 317, "ax_qt": 317, "ax_roc": 270, "ax_row": 70, "ax_scatt": 313, "ax_scatter_zoom": 313, "ax_top_left": 387, "ax_top_right": 387, "ax_yj": 317, "ax_zoom_in": 313, "ax_zoom_out": 313, "axarr": [157, 313], "axes_": [151, 153, 253, 323, 329, 387, 637], "axes_idx": 317, "axes_list": 317, "axes_row": 206, "axesimag": 702, "axhlin": [128, 161, 205, 272, 276], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 81, 83, 85, 86, 87, 88, 94, 103, 104, 107, 113, 116, 119, 121, 122, 123, 124, 125, 130, 137, 138, 142, 144, 152, 155, 159, 163, 166, 176, 181, 183, 187, 188, 197, 203, 204, 207, 208, 209, 215, 220, 224, 227, 229, 230, 232, 233, 236, 237, 240, 242, 246, 247, 251, 258, 260, 262, 263, 269, 270, 274, 275, 280, 282, 283, 286, 292, 293, 298, 299, 300, 303, 304, 305, 311, 313, 317, 320, 329, 333, 335, 337, 339, 342, 343, 346, 348, 349, 350, 352, 354, 355, 359, 360, 361, 362, 375, 382, 389, 394, 410, 412, 420, 424, 442, 449, 468, 471, 536, 538, 541, 542, 544, 546, 548, 550, 551, 555, 590, 617, 636, 637, 690, 691, 706, 768, 784, 785, 786, 787, 811, 828, 837, 878, 879, 886, 887, 889, 894, 895, 896, 898, 899, 900, 923, 931, 935, 936, 955, 980, 986, 996, 1006, 1013, 1016, 1021, 1045, 1047, 1049, 1054, 1055], "axis_idx": 43, "axis_list": 123, "axp": 51, "axvlin": [86, 93, 105, 113, 128, 147, 158, 188, 190, 191, 204, 279, 287, 350], "ayako": 1049, "ayan": 1051, "ayc\u0131": 1055, "aydor": [1044, 1045, 1048], "ayerdi": 1041, "aymer": 1038, "aymericbasset": 1053, "ayomid": 1047, "ayush": [1045, 1050], "ayzenshtat": [1030, 1045], "azaria": [1052, 1053], "azencott": 1051, "azim": [100, 118, 127, 189, 212, 235, 239], "azur": [0, 380], "b": [0, 2, 47, 49, 61, 63, 92, 98, 111, 128, 137, 138, 144, 148, 149, 159, 161, 173, 174, 175, 180, 184, 198, 200, 203, 215, 216, 221, 233, 250, 252, 267, 272, 276, 278, 283, 288, 292, 325, 335, 363, 375, 377, 380, 384, 385, 386, 409, 410, 412, 415, 416, 417, 420, 441, 486, 503, 505, 546, 571, 593, 594, 595, 596, 612, 613, 615, 616, 633, 651, 652, 653, 654, 663, 674, 677, 679, 681, 685, 692, 693, 710, 724, 735, 736, 797, 798, 816, 817, 856, 882, 883, 884, 885, 888, 889, 897, 924, 937, 953, 954, 968, 970, 996, 998, 1002, 1003, 1004, 1006, 1009, 1011, 1016, 1020, 1021, 1037, 1045, 1048, 1050, 1051, 1052], "b0noi": 1043, "b0rxington": 1052, "b1": [229, 299, 342], "b12": [215, 233], "b1996": 419, "b1998": 419, "b1999": 419, "b2": [229, 299, 342], "b2001": 419, "b2011": 412, "b2c": 1030, "b30065": 315, "b5": 327, "b7a2ff": 317, "b_1": 1010, "b_2": 1010, "b_column": 724, "b_i": 1011, "b_iv_i": 1011, "b_j": 412, "b_k": 412, "b_mask": 282, "b_row": 724, "b_true": 282, "ba": [51, 866, 867, 1010], "baak": 1051, "baam": [1050, 1051], "babino": [1050, 1051], "bac": 51, "bach": [417, 536, 541, 542, 543, 663, 1002], "bachant": 1044, "back": [43, 126, 254, 368, 378, 380, 394, 395, 406, 413, 420, 437, 447, 450, 451, 463, 486, 487, 488, 513, 514, 538, 539, 540, 543, 545, 546, 549, 586, 635, 663, 664, 671, 672, 673, 681, 682, 683, 733, 874, 876, 877, 878, 882, 883, 884, 886, 887, 889, 901, 902, 909, 958, 1002, 1006, 1010, 1026, 1040, 1045, 1047, 1048, 1051, 1055, 1056], "backend": [2, 368, 383, 394, 472, 907, 971, 975, 1006, 1040, 1045, 1046, 1047, 1048], "background": [44, 50, 81, 99, 152, 311, 315, 375, 380, 388, 412, 498, 499, 1003, 1011, 1020, 1047], "background_point": 50, "backlink": 1042, "backport": [384, 389, 1044], "backprop": [1010, 1020], "backpropag": 1010, "backslash": 1052, "backtick": [380, 385], "backup": [513, 1037], "backward": [170, 249, 324, 383, 394, 421, 501, 582, 607, 619, 620, 623, 624, 625, 627, 628, 922, 931, 1010, 1026, 1037, 1040, 1045, 1046, 1047, 1049, 1051, 1053], "bad": [93, 94, 173, 178, 188, 267, 330, 354, 363, 380, 412, 422, 697, 751, 995, 1002, 1003, 1008, 1014, 1037], "badaracco": 1050, "badli": [204, 215, 354, 369, 889, 1002, 1016], "badr": 1052, "baeza": [595, 735, 1040], "bag": [2, 14, 64, 102, 123, 134, 139, 141, 149, 150, 185, 190, 290, 355, 356, 376, 410, 521, 522, 523, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 746, 810, 835, 918, 1004, 1007, 1027, 1028, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1050, 1051, 1053], "bagai": 1050, "baggingclassifi": [2, 394, 403, 419, 561, 919, 945, 996, 1040, 1043, 1044, 1045, 1048, 1052, 1053, 1055], "baggingregressor": [2, 138, 403, 419, 560, 920, 996, 1040, 1043, 1045, 1048, 1052, 1053, 1055], "baggipont": 1055, "baharev": 1042, "bahavior": 354, "bahaviour": 354, "baibak": [1045, 1046], "bail": 1048, "bailei": [412, 709], "bajic": 1052, "baji\u0107": 1052, "baker": 1056, "bakir2003": 417, "bakiri": [839, 1007], "bak\u0131r": [44, 417, 540], "bala": [1037, 1040], "balakumaran": [1044, 1045], "balanc": [2, 43, 45, 52, 64, 86, 99, 104, 135, 141, 146, 169, 185, 219, 220, 265, 271, 274, 276, 277, 287, 313, 369, 392, 394, 410, 411, 416, 417, 419, 507, 520, 539, 545, 546, 552, 562, 566, 569, 645, 663, 664, 671, 673, 679, 680, 681, 708, 713, 734, 748, 787, 792, 805, 806, 823, 869, 909, 911, 914, 917, 919, 940, 941, 995, 1021, 1022, 1027, 1037, 1039, 1042, 1043, 1046, 1047, 1051], "balanced_accuraci": [287, 713, 827, 1006, 1045], "balanced_accuracy_scor": [2, 708, 792, 1006, 1045], "balanced_subsampl": [562, 569, 1045], "balaz": 1041, "baldi": 748, "ball": [102, 298, 306, 412, 418, 452, 697, 849, 850, 854, 857, 859, 860, 861, 1037, 1039, 1042, 1048], "ball_tre": [306, 423, 448, 450, 454, 461, 693, 694, 851, 852, 853, 854, 855, 857, 859, 860, 861, 1009, 1037, 1054], "balltre": [2, 423, 448, 450, 454, 461, 693, 694, 704, 851, 852, 853, 854, 855, 857, 859, 860, 861, 1003, 1037, 1039, 1041, 1045, 1050, 1053, 1054], "baloo": 1003, "baluyot": 1046, "bamidel": 1047, "banana": [48, 1006], "band": [52, 276, 315, 1016], "bandit": 995, "bandol": 319, "bandwidth": [2, 48, 79, 96, 248, 297, 298, 306, 392, 394, 412, 418, 452, 462, 465, 849, 850, 854, 999, 1012, 1048, 1052], "bandwidth_": 854, "bangda": 1045, "banik": 1055, "banilo": [1041, 1042], "bank": [51, 57, 1030], "bannerje": [1053, 1054], "bansal": 1044, "bansod": [1042, 1043, 1044], "bao": [1043, 1051], "baod": 412, "baptbillard": 1050, "baptist": [1040, 1048], "bar": [47, 49, 54, 104, 141, 142, 145, 146, 149, 158, 166, 170, 180, 183, 189, 195, 258, 263, 272, 274, 278, 292, 318, 319, 326, 327, 355, 382, 415, 586, 637, 653, 674, 685, 1006, 1013, 1020, 1022, 1043, 1044, 1045, 1046], "bar_color": 47, "bar_kw": 637, "bar_siz": 354, "baran": 1047, "barang": 1053, "baraniuk": 421, "barankaraku": 1049, "barata": 1053, "barber": 537, "barberogaston": 1049, "bardiya": [1051, 1052], "bare": [375, 1003], "barh": [54, 149, 183, 184, 187, 188, 190, 191, 256, 320, 354, 355, 356], "barikbin": 1053, "barkhorn": 1045, "barklei": 1047, "barmalei": [1041, 1042], "barn": [697, 1003, 1042, 1044, 1047, 1055], "barnes_hut": [293, 697, 1044, 1045], "barnett": 1045, "barnhil": [598, 599], "barnowski": [1051, 1052], "barreca": [890, 1016], "barreto": 1051, "barri": [375, 1045], "barrier": 420, "barrycg": 1047, "bars_": 637, "bartelheim": 1048, "barth\u00e9lemi": [1053, 1054], "bartosz": 1046, "bart\u0142omiej": 1052, "barycent": [305, 1037], "basbug": 1044, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 82, 89, 90, 91, 100, 102, 103, 107, 111, 118, 121, 122, 133, 135, 136, 141, 146, 147, 148, 149, 151, 154, 156, 159, 164, 167, 168, 172, 177, 178, 180, 189, 190, 191, 194, 195, 201, 202, 203, 204, 209, 215, 216, 223, 232, 233, 235, 242, 249, 250, 252, 270, 271, 276, 286, 290, 292, 293, 306, 311, 313, 314, 316, 318, 324, 326, 330, 337, 341, 347, 355, 358, 367, 374, 375, 376, 377, 378, 381, 382, 383, 384, 388, 392, 394, 395, 397, 406, 408, 410, 411, 413, 417, 418, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 448, 449, 450, 451, 452, 453, 454, 456, 460, 461, 465, 467, 468, 469, 470, 471, 491, 505, 506, 513, 514, 537, 538, 540, 541, 542, 543, 544, 546, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 583, 593, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 621, 622, 623, 626, 629, 637, 638, 640, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 669, 674, 676, 677, 678, 679, 680, 685, 687, 688, 690, 691, 692, 695, 697, 709, 722, 731, 740, 741, 742, 744, 746, 760, 761, 762, 790, 793, 800, 804, 805, 807, 808, 809, 811, 812, 814, 819, 821, 823, 824, 825, 826, 833, 835, 839, 840, 843, 851, 852, 853, 855, 857, 859, 860, 861, 866, 867, 870, 871, 874, 881, 882, 884, 888, 889, 890, 898, 901, 902, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 925, 927, 929, 938, 947, 958, 974, 995, 997, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1030, 1032, 1033, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1055], "base_classifi": [335, 337, 1019], "base_clf": 441, "base_estim": [410, 558, 559, 560, 561, 840, 843, 906, 995, 1048, 1050, 1051, 1052, 1053, 1056], "base_estimator_": [558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 615, 1052], "base_estimator__": 1052, "base_lr": [292, 840], "base_model": 411, "base_x_test": 109, "base_x_train": 109, "basebag": [1043, 1045], "basebal": [57, 375], "basedecisiontre": [1045, 1046, 1049], "basedictionarylearn": 1037, "baseensembl": [1044, 1047], "baseestim": [2, 89, 133, 249, 293, 380, 393, 394, 422, 427, 429, 430, 434, 435, 436, 606, 637, 638, 945, 958, 1037, 1044, 1047, 1049, 1051, 1052, 1056], "basegradientboost": 1038, "baselabelpropag": 1044, "baselibsvm": 1047, "baselin": [62, 135, 145, 148, 159, 170, 191, 195, 233, 267, 283, 292, 324, 355, 377, 412, 421, 556, 557, 639, 1006, 1009, 1053], "baseline_similar": 180, "baseline_similarity_bound": 180, "basemap": [50, 306], "basemixtur": [1045, 1046], "basemultilayerperceptron": [1045, 1047], "basenb": 1047, "baserandomproject": [901, 902], "basesearchcv": [1044, 1045], "basesgd": 1020, "basesgdclassifi": 1046, "baseshufflesplit": 1050, "bash": [368, 388], "bashrc": 388, "basi": [2, 43, 45, 53, 126, 172, 177, 179, 216, 267, 310, 325, 343, 347, 372, 378, 381, 412, 417, 419, 456, 539, 627, 637, 644, 696, 888, 1004, 1016, 1021, 1028, 1032, 1045, 1047, 1050], "basic": [148, 171, 172, 177, 178, 180, 181, 184, 185, 213, 287, 320, 348, 367, 369, 380, 382, 384, 392, 394, 412, 416, 417, 419, 616, 627, 905, 917, 918, 919, 920, 995, 996, 1009, 1020, 1024, 1025, 1026, 1027, 1030], "basicconfig": 121, "basil": 1044, "basilisk": 1025, "basis_1": 216, "basis_2": 216, "basri": 518, "bassett": 1002, "bastiaan": [1038, 1039], "bastian": 1045, "bat": 378, "batch": [2, 47, 50, 97, 121, 125, 306, 326, 369, 389, 394, 420, 444, 446, 451, 453, 455, 457, 536, 538, 539, 541, 542, 543, 544, 545, 547, 548, 550, 551, 669, 690, 691, 810, 823, 824, 844, 845, 846, 847, 848, 866, 867, 878, 879, 889, 902, 956, 971, 1010, 1011, 1020, 1037, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1052, 1053], "batch_dict_estim": 121, "batch_pca_estim": 121, "batch_siz": [2, 54, 57, 77, 97, 121, 124, 125, 355, 417, 453, 539, 541, 542, 543, 544, 551, 865, 866, 867, 956, 957, 971, 1038, 1045, 1048, 1050, 1051], "batch_size_": 539, "batchkarov": [1038, 1042], "batiss": 1048, "batista": [1045, 1046, 1050], "batistaki": 412, "batoul": 1050, "battista": 1048, "batula": 1044, "bauk": [1045, 1046], "baum": 450, "baumgartn": 1044, "baxlei": 1044, "bay": [2, 32, 64, 67, 138, 154, 172, 204, 263, 275, 354, 375, 410, 417, 419, 420, 541, 554, 555, 661, 844, 845, 846, 847, 848, 890, 1000, 1001, 1002, 1016, 1028, 1032, 1037, 1038, 1039, 1040, 1045, 1047, 1050, 1052], "bayer": [0, 1037, 1038, 1042, 1055], "bayesian": [2, 46, 64, 87, 98, 119, 184, 185, 194, 200, 202, 216, 221, 257, 259, 263, 264, 276, 284, 288, 298, 303, 314, 318, 417, 441, 529, 533, 537, 616, 649, 650, 661, 662, 802, 803, 870, 872, 884, 889, 995, 1025, 1027, 1028, 1031, 1032, 1043, 1050], "bayesiangaussianmixtur": [2, 258, 259, 264, 803, 1005, 1043, 1045, 1046, 1050, 1051, 1055], "bayesianridg": [2, 87, 183, 195, 196, 200, 324, 632, 649, 1002, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054], "baz": [382, 586], "baze": 1046, "bbbbbb": 97, "bbox": [48, 51, 70, 127, 258, 259, 260, 263, 264, 315], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 181, 278, 349], "bc": 317, "bcde": 145, "bcross_val": 1037, "bde": 145, "bdegraaff": 1052, "bdt": 137, "beach": 1045, "beam": [138, 1037], "bear": [419, 1025], "bearer": 1045, "beatrizsmg": 1049, "beauchamp": [1038, 1041], "beaugnon": 1047, "becam": [156, 395, 1045], "becaus": [43, 44, 52, 57, 62, 64, 75, 81, 83, 103, 113, 116, 135, 140, 143, 148, 151, 170, 173, 176, 179, 188, 189, 191, 196, 201, 208, 215, 219, 221, 223, 233, 248, 249, 259, 267, 270, 273, 274, 279, 292, 293, 309, 310, 311, 313, 317, 318, 319, 320, 334, 343, 347, 354, 355, 356, 358, 362, 363, 367, 368, 375, 384, 385, 388, 392, 393, 394, 403, 406, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 422, 425, 435, 451, 452, 465, 469, 479, 486, 487, 488, 539, 541, 557, 559, 561, 563, 565, 567, 568, 570, 573, 575, 612, 613, 616, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 681, 682, 683, 684, 685, 694, 704, 714, 717, 718, 726, 727, 728, 729, 751, 768, 790, 793, 799, 805, 819, 833, 837, 842, 843, 852, 855, 857, 859, 860, 861, 867, 878, 879, 887, 889, 890, 894, 895, 897, 898, 899, 900, 910, 912, 915, 918, 920, 928, 969, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1013, 1016, 1021, 1022, 1030, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1053], "becker": [412, 1030, 1040, 1049], "becom": [83, 88, 90, 104, 111, 146, 188, 217, 219, 249, 252, 275, 293, 314, 318, 343, 347, 354, 363, 374, 380, 382, 384, 388, 394, 395, 412, 414, 419, 420, 422, 444, 454, 458, 459, 461, 586, 593, 594, 596, 624, 632, 663, 664, 681, 683, 883, 909, 910, 916, 1001, 1002, 1003, 1005, 1009, 1016, 1021, 1038, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1056], "bednar": 1044, "bedroom": [313, 375], "been": [0, 43, 48, 63, 79, 86, 93, 112, 126, 133, 135, 149, 170, 172, 177, 179, 188, 191, 239, 242, 244, 249, 250, 271, 273, 279, 280, 322, 323, 324, 325, 326, 328, 329, 330, 334, 354, 363, 368, 374, 375, 377, 378, 379, 380, 382, 384, 386, 388, 389, 392, 393, 394, 395, 403, 406, 409, 410, 411, 412, 414, 416, 417, 419, 422, 437, 441, 473, 475, 476, 478, 482, 491, 528, 539, 541, 554, 555, 572, 573, 586, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 638, 639, 663, 664, 671, 672, 673, 678, 680, 681, 682, 683, 725, 783, 784, 785, 798, 805, 808, 809, 811, 819, 827, 828, 833, 834, 858, 906, 909, 996, 998, 999, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1016, 1018, 1020, 1021, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "befor": [2, 47, 51, 62, 77, 102, 104, 107, 116, 146, 151, 156, 166, 179, 181, 182, 183, 185, 188, 189, 191, 197, 200, 202, 204, 208, 249, 267, 273, 280, 295, 296, 314, 317, 318, 320, 325, 346, 363, 367, 368, 375, 378, 380, 382, 384, 385, 386, 388, 389, 392, 394, 395, 397, 398, 406, 408, 410, 412, 413, 414, 416, 417, 419, 421, 424, 425, 447, 451, 452, 453, 463, 465, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 494, 506, 539, 542, 543, 544, 545, 546, 549, 551, 552, 566, 567, 570, 572, 574, 575, 582, 593, 594, 596, 616, 632, 633, 635, 650, 671, 672, 673, 676, 681, 683, 692, 697, 699, 802, 803, 810, 811, 823, 824, 826, 831, 833, 835, 849, 850, 857, 858, 859, 860, 861, 864, 869, 870, 873, 876, 883, 887, 888, 889, 890, 894, 895, 897, 898, 899, 900, 906, 917, 918, 928, 953, 989, 996, 1002, 1003, 1006, 1012, 1016, 1020, 1021, 1022, 1026, 1027, 1037, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "beforehand": [256, 296, 1022], "begin": [57, 133, 170, 172, 268, 275, 292, 325, 354, 363, 380, 385, 386, 394, 409, 412, 419, 558, 559, 564, 566, 567, 671, 672, 681, 682, 683, 995, 998, 1002, 1006, 1016, 1018, 1020, 1045, 1051, 1052], "beginn": 1026, "behav": [43, 51, 85, 90, 219, 267, 268, 313, 324, 343, 363, 380, 386, 393, 412, 413, 416, 889, 1002, 1016, 1021, 1023, 1026, 1037, 1044, 1046, 1050, 1051], "behavior": [62, 72, 74, 85, 183, 185, 188, 189, 203, 215, 233, 249, 256, 264, 265, 267, 276, 278, 310, 311, 313, 315, 320, 343, 363, 368, 374, 377, 380, 382, 384, 388, 389, 394, 408, 410, 411, 412, 416, 419, 420, 541, 556, 571, 671, 672, 673, 681, 682, 683, 704, 706, 734, 735, 788, 789, 792, 805, 806, 807, 810, 819, 822, 823, 824, 825, 826, 846, 882, 909, 910, 995, 1002, 1006, 1007, 1012, 1016, 1021, 1027, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "behaviour": [74, 126, 151, 216, 217, 233, 345, 380, 394, 406, 412, 419, 564, 565, 569, 570, 607, 806, 807, 810, 822, 823, 824, 825, 826, 907, 917, 918, 978, 995, 996, 1006, 1016, 1045, 1048, 1049, 1052, 1053], "behind": [37, 86, 111, 135, 290, 382, 384, 388, 414, 419, 1005, 1009, 1018, 1053], "behrend": 1047, "behrouz": 1051, "behzad": 1043, "beier": 1048, "beimportantfew": 400, "being": [61, 64, 70, 85, 88, 113, 116, 118, 126, 135, 139, 151, 153, 172, 177, 190, 193, 209, 249, 252, 266, 273, 311, 317, 318, 343, 347, 354, 356, 378, 379, 380, 382, 385, 392, 394, 395, 411, 412, 414, 416, 419, 420, 421, 422, 423, 425, 445, 446, 448, 449, 454, 460, 473, 479, 498, 528, 574, 645, 654, 661, 677, 679, 692, 695, 699, 717, 723, 739, 741, 788, 794, 802, 849, 850, 855, 857, 859, 860, 861, 884, 902, 954, 995, 996, 1002, 1005, 1006, 1009, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1037, 1038, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "beings": 354, "beirouti": 1044, "belatedli": 1044, "belief": [57, 273, 865, 1011], "believ": [354, 355, 388, 392, 1030], "belkin": 1003, "belkina": [697, 1003], "bell": [2, 526, 1045, 1047, 1049, 1050], "bella": 1006, "bella2012": 1006, "bellet": [1044, 1045, 1046], "belmont": [917, 918, 1022], "belong": [61, 64, 66, 88, 93, 252, 273, 322, 328, 334, 374, 375, 409, 410, 412, 413, 415, 416, 419, 427, 444, 447, 451, 452, 453, 455, 457, 528, 717, 736, 812, 818, 830, 876, 890, 961, 962, 1002, 1005, 1006, 1008, 1009, 1010, 1012, 1021, 1025], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 88, 93, 102, 107, 111, 118, 121, 133, 139, 142, 143, 148, 165, 187, 189, 199, 211, 212, 215, 217, 231, 232, 236, 240, 244, 249, 252, 254, 256, 268, 271, 276, 278, 279, 280, 313, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 348, 354, 362, 363, 368, 373, 374, 378, 380, 382, 384, 385, 389, 394, 395, 398, 400, 412, 414, 415, 416, 417, 419, 420, 421, 422, 448, 450, 452, 475, 476, 482, 495, 497, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 515, 536, 542, 547, 553, 587, 600, 601, 602, 603, 604, 605, 638, 651, 657, 663, 664, 672, 673, 678, 680, 697, 704, 710, 748, 768, 802, 803, 805, 816, 819, 838, 869, 872, 882, 883, 886, 892, 898, 995, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1023, 1025, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1055], "beltran": 1055, "ben": [1039, 1040, 1041, 1044, 1045, 1046, 1049, 1054], "ben3940": 1051, "benavoli": 273, "benbihi": 1046, "bench_k_mean": 91, "benchmark": [293, 324, 355, 356, 367, 373, 375, 380, 392, 398, 405, 410, 472, 520, 907], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 347, "benedek": 1053, "benedikt": 1041, "benediktsson": [1037, 1038, 1039], "benefici": [104, 106, 109, 121, 154, 267, 313, 314, 330, 406, 411, 1003], "benefit": [43, 80, 89, 106, 107, 135, 136, 146, 151, 188, 229, 239, 245, 247, 267, 295, 326, 367, 380, 389, 394, 410, 412, 452, 465, 472, 513, 572, 573, 663, 664, 671, 672, 673, 681, 682, 683, 840, 907, 909, 995, 1001, 1009, 1016, 1026, 1030, 1037, 1040, 1041, 1042, 1049, 1050, 1051, 1052], "benfield": 1044, "bengio": [273, 866, 867, 995, 1019], "bengtsson": 1041, "benhel": 381, "benhur": 1050, "benign": [170, 377, 505], "benjamin": [646, 1039, 1040, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "benjamini": [600, 1043, 1044], "benjaminirv": 1042, "benjastudio": [1045, 1046], "benn": 1045, "bennett": [170, 377, 1006], "benni": 1051, "benoit": 1054, "beno\u00eet": 1050, "benson": 57, "bentlei": 1009, "bera": 1052, "berei": 1051, "beren": 697, "berenbaum": 1053, "bereng": 1050, "berg": [375, 1038, 1039, 1049, 1054], "bergman": [1054, 1055], "bergstra": [995, 1037, 1038], "berk": 1037, "berkecanrizai": 1052, "berkelei": [646, 917, 918], "berlin": [177, 412, 417, 540, 701, 731, 761, 1006], "bernardo": 1043, "bernd": 1052, "bernhard": [44, 417, 540, 840, 875, 905, 1007, 1012, 1021, 1043], "bernhardsson": 1030, "berni": 1048, "bernoulli": [2, 311, 420, 421, 844, 845, 846, 847, 848, 865, 866, 867, 872, 1002, 1016, 1028, 1032, 1037], "bernoullinb": [2, 154, 369, 845, 846, 847, 848, 1007, 1008, 1038, 1039, 1041, 1044, 1049, 1050, 1052], "bernoullirbm": [2, 311, 866, 867, 1011, 1016, 1039, 1040, 1049, 1051, 1054], "bertin": 1030, "bertoncelj": 1048, "bertrand": [0, 401, 1037, 1043, 1044, 1049, 1050], "bertrandhaut": [1045, 1046], "besid": [156, 245, 287, 380, 385, 594, 995, 1045], "bessel": [422, 624], "bessi": 327, "besson": [1042, 1043], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 80, 87, 88, 94, 102, 103, 104, 105, 109, 115, 121, 125, 128, 129, 130, 138, 141, 145, 147, 148, 149, 151, 156, 159, 170, 172, 173, 178, 183, 188, 195, 200, 202, 204, 211, 229, 230, 231, 235, 238, 242, 247, 248, 252, 259, 260, 264, 266, 267, 271, 272, 273, 274, 277, 280, 281, 284, 285, 288, 292, 297, 302, 314, 319, 324, 325, 330, 343, 346, 347, 354, 355, 356, 361, 367, 368, 374, 377, 379, 380, 383, 386, 393, 394, 398, 403, 406, 409, 410, 411, 412, 416, 417, 419, 420, 421, 422, 435, 447, 450, 451, 453, 455, 456, 457, 463, 466, 469, 476, 486, 487, 488, 543, 550, 551, 557, 559, 561, 562, 563, 564, 565, 567, 569, 570, 571, 573, 575, 598, 599, 602, 607, 615, 616, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 693, 694, 695, 698, 699, 708, 713, 724, 725, 726, 727, 728, 729, 733, 734, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 788, 789, 790, 792, 795, 796, 797, 798, 799, 801, 802, 803, 805, 808, 809, 819, 832, 834, 837, 842, 843, 852, 860, 866, 867, 910, 912, 915, 917, 918, 919, 920, 995, 1000, 1001, 1002, 1003, 1006, 1009, 1010, 1012, 1020, 1022, 1025, 1026, 1030, 1037, 1040, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1055], "best_alpha": 1037, "best_c": 350, "best_c_scal": 350, "best_clf": 105, "best_estim": [805, 808, 809, 819], "best_estimator_": [45, 87, 104, 105, 106, 109, 128, 248, 263, 267, 271, 273, 274, 277, 285, 297, 805, 808, 809, 819, 995, 1044], "best_idx": [57, 272], "best_index": [271, 277], "best_index_": [272, 277, 805, 808, 809, 819], "best_loss": [681, 683], "best_loss_": [866, 867, 1052], "best_low_complex": 272, "best_n_it": 463, "best_paramet": 274, "best_parameters_": 263, "best_params_": [103, 105, 148, 172, 248, 263, 271, 277, 324, 343, 393, 805, 808, 809, 819, 995], "best_recal": 271, "best_recall_std": 271, "best_recall_threshold": 271, "best_scor": 277, "best_score_": [103, 105, 248, 267, 274, 277, 278, 343, 411, 678, 680, 805, 808, 809, 819, 827, 1048], "best_score_idx": 272, "best_threshold_": [267, 287, 330, 827], "best_validation_score_": [866, 867, 1052], "beta": [2, 80, 115, 187, 219, 386, 410, 412, 415, 541, 543, 545, 552, 649, 734, 735, 741, 747, 788, 800, 802, 1006, 1039, 1042, 1044, 1046, 1047], "beta_": [219, 417], "beta_1": [866, 867], "beta_2": [866, 867], "beta_k": 417, "beta_loss": [54, 543, 545, 552, 1044], "betatim": 1052, "better": [43, 44, 48, 52, 57, 58, 61, 67, 83, 88, 106, 107, 109, 110, 111, 112, 116, 118, 121, 124, 138, 141, 146, 147, 148, 151, 156, 165, 176, 177, 178, 180, 183, 188, 190, 196, 200, 201, 204, 215, 216, 217, 223, 230, 232, 233, 239, 247, 248, 249, 252, 263, 266, 267, 273, 275, 276, 279, 282, 283, 286, 290, 292, 311, 317, 318, 326, 327, 343, 350, 354, 355, 356, 358, 363, 367, 375, 379, 380, 381, 382, 385, 386, 388, 394, 397, 400, 408, 410, 412, 414, 416, 417, 418, 419, 420, 422, 453, 454, 543, 545, 552, 564, 565, 566, 567, 612, 613, 635, 676, 682, 697, 714, 730, 739, 744, 747, 768, 803, 834, 844, 845, 846, 847, 848, 849, 850, 855, 866, 867, 886, 887, 890, 898, 901, 902, 909, 910, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1014, 1016, 1019, 1020, 1022, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "better_prob": 273, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 86, 93, 94, 99, 115, 118, 124, 126, 129, 135, 138, 141, 145, 146, 148, 151, 165, 172, 177, 178, 180, 185, 187, 188, 189, 190, 195, 200, 201, 203, 206, 210, 211, 215, 216, 217, 219, 220, 223, 233, 235, 242, 247, 249, 252, 265, 267, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 285, 286, 287, 290, 292, 295, 299, 300, 302, 303, 313, 318, 320, 325, 330, 335, 343, 347, 349, 350, 354, 355, 356, 362, 363, 367, 368, 375, 380, 382, 384, 388, 389, 392, 393, 394, 395, 403, 406, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 433, 444, 445, 448, 449, 450, 451, 454, 456, 457, 458, 460, 461, 462, 467, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 519, 520, 526, 529, 532, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 554, 555, 558, 559, 564, 565, 567, 568, 569, 570, 589, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 616, 625, 632, 637, 638, 639, 644, 647, 650, 651, 652, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 681, 683, 684, 686, 689, 693, 695, 697, 699, 700, 701, 704, 706, 708, 709, 710, 712, 714, 715, 719, 720, 721, 722, 724, 729, 730, 731, 734, 735, 736, 739, 741, 742, 748, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 792, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 810, 814, 822, 823, 824, 825, 826, 834, 835, 837, 839, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 866, 867, 873, 876, 877, 879, 880, 882, 883, 886, 887, 888, 890, 895, 898, 899, 903, 909, 910, 914, 917, 918, 919, 920, 922, 950, 962, 963, 974, 995, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1026, 1027, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "bewar": 421, "beyond": [43, 64, 216, 217, 267, 367, 369, 379, 380, 392, 410, 419, 734, 735, 743, 788, 789, 792, 914, 1003, 1007, 1016, 1021, 1026, 1045], "beyst": 1051, "bezuidenhout": 1050, "bf5fff": 119, "bfg": [309, 615, 616, 653, 654, 663, 674, 677, 679, 685, 692, 1009, 1010, 1052], "bgm": 802, "bharat": [416, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "bharathi": 1048, "bhardwaj": [1044, 1045], "bhargav": 1043, "bhaskaran": [1044, 1045], "bhat": [1050, 1052, 1053, 1054], "bhattacharya": 1045, "bhattarai": 1047, "bhavika": 1049, "bhoomika": 1052, "bhsu": 1041, "bhtsne": [697, 1044], "bi": [88, 420], "bia": [43, 64, 109, 123, 134, 142, 143, 148, 151, 185, 188, 190, 195, 196, 198, 278, 308, 347, 350, 363, 375, 394, 410, 414, 418, 419, 422, 529, 561, 564, 565, 612, 613, 619, 647, 653, 654, 663, 664, 674, 675, 685, 866, 867, 882, 884, 888, 894, 895, 897, 898, 899, 900, 918, 927, 1001, 1002, 1005, 1006, 1010, 1011, 1014, 1020, 1027], "bianca": 64, "bianp": 386, "bias": [48, 113, 124, 148, 155, 187, 188, 190, 278, 375, 397, 410, 419, 529, 554, 865, 889, 900, 1001, 1005, 1014, 1020, 1022], "bibhash": [1047, 1048], "bibl": 355, "bibliograph": 380, "bibtex": 0, "bic": [2, 161, 185, 194, 201, 202, 203, 209, 223, 421, 506, 656, 658, 659, 660, 661, 803, 870, 889, 995, 1005, 1027, 1037, 1044, 1050, 1051], "bic_criterion": 202, "bicker": 1047, "biclust": [2, 6, 59, 102, 334, 336, 354, 355, 356, 420, 427, 453, 455, 457, 492, 516, 518, 596, 724, 800, 1006, 1027, 1031, 1032, 1039, 1043], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 427, 455, 457], "bidu": [1050, 1051], "biernat": 1049, "big": [43, 79, 93, 95, 220, 236, 252, 264, 368, 380, 386, 395, 414, 420, 424, 543, 566, 567, 569, 570, 811, 833, 844, 845, 846, 847, 848, 1026, 1030, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "bigg": [422, 624], "bigger": [47, 75, 93, 228, 273, 311, 347, 352, 355, 366, 368, 420, 442, 443, 513, 543, 855, 1032], "biggest": [412, 415, 417, 447], "biggest_inertia": [412, 447], "biggio": 1048, "bigram": [274, 420, 593, 594, 596], "bigram_vector": 420, "bijil": 1051, "bike": 1013, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 189], "bilbro": 1044, "bill": [1047, 1048], "billaud": 1045, "billi": 1041, "billing": [1040, 1041, 1042], "billion": 1030, "bimod": [317, 418], "bin": [2, 43, 61, 62, 64, 86, 107, 137, 141, 215, 246, 252, 267, 279, 298, 313, 314, 315, 316, 317, 319, 320, 378, 388, 398, 410, 418, 419, 442, 443, 452, 465, 566, 567, 872, 874, 888, 955, 1045, 1046, 1047, 1051, 1055, 1056], "bin_cent": [86, 215], "bin_edg": 86, "bin_edges_": [86, 314, 874], "bin_seed": [79, 96, 452, 465, 1048], "binar": [2, 36, 280, 282, 283, 372, 374, 759, 844, 873, 874, 876, 880, 882, 890, 893, 1006, 1008, 1032, 1051, 1053], "binari": [2, 30, 47, 53, 62, 64, 139, 141, 152, 154, 167, 180, 188, 193, 206, 208, 215, 223, 236, 243, 252, 255, 267, 270, 271, 276, 282, 287, 290, 297, 343, 347, 362, 363, 374, 375, 376, 384, 385, 394, 398, 406, 409, 410, 411, 412, 419, 420, 422, 441, 442, 443, 456, 491, 505, 513, 514, 525, 528, 554, 555, 558, 560, 564, 566, 571, 572, 573, 586, 593, 594, 596, 598, 599, 607, 615, 632, 633, 634, 635, 636, 637, 638, 663, 664, 671, 673, 678, 679, 680, 681, 705, 708, 712, 713, 714, 717, 718, 720, 723, 725, 727, 732, 734, 735, 739, 740, 743, 744, 745, 746, 748, 787, 788, 789, 792, 793, 794, 799, 801, 804, 805, 806, 808, 809, 810, 811, 819, 823, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 844, 855, 865, 876, 880, 882, 890, 893, 909, 911, 914, 925, 968, 996, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1034, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1051, 1052, 1054, 1055], "binary_crossentropi": 1051, "binary_eros": 53, "binary_onli": [1047, 1048], "binarytre": [854, 1041, 1045, 1049], "bincount": [394, 416, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 909, 911, 914, 917, 919, 940, 941, 1044], "bind": [398, 1025, 1037, 1044, 1045], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362], "binesh": [1053, 1054], "binet": [1047, 1052], "bing": [1043, 1044], "bingham": 1018, "binned_numer": [215, 233], "binom": 1002, "binomi": [147, 150, 419, 558, 564, 566, 1002, 1051, 1054], "bio": 276, "biocsklearn": 1025, "bioinformat": [633, 996], "biola": 1055, "biologi": 50, "biometrika": [885, 897], "biostatist": [414, 482], "bipartit": [409, 457, 516, 1011], "biprateep": 1049, "birch": [2, 71, 79, 97, 185, 326, 369, 394, 450, 453, 517, 1027, 1031, 1032, 1041, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056], "birch_model": 77, "bird": [587, 723, 759, 1006], "birodkar": [1042, 1043, 1045], "bischl": 374, "bisect": [2, 71, 75, 90, 91, 92, 93, 94, 181, 185, 269, 447, 451, 517, 1027, 1051], "bisect_km": 326, "bisect_mean": 447, "bisecting_strategi": [412, 447], "bisectingkmean": [2, 78, 412, 1051, 1052, 1053], "bisector": 70, "bishop": [537, 539, 546, 746, 802, 1002, 1007, 1021], "bistochast": [409, 455], "biswadip": 1047, "biswaroop": 1052, "bit": [43, 52, 64, 86, 109, 124, 213, 217, 290, 313, 343, 355, 363, 367, 375, 378, 394, 398, 400, 419, 420, 587, 594, 663, 839, 935, 936, 1003, 1007, 1024, 1037, 1040, 1043, 1045, 1046, 1049, 1050, 1051, 1054, 1055], "bithash": 645, "bithash_": 645, "bitli": 1030, "bitmap": 377, "bittarello": 1050, "bjerr": 1045, "bla": [367, 368, 378, 381, 386, 388, 783, 1037, 1045, 1046, 1048, 1049, 1055], "black": [43, 48, 49, 50, 52, 63, 70, 79, 82, 88, 89, 111, 112, 119, 121, 123, 144, 165, 168, 172, 173, 177, 178, 181, 184, 188, 189, 195, 202, 204, 205, 207, 211, 215, 216, 217, 221, 224, 227, 228, 233, 242, 252, 258, 261, 298, 308, 309, 311, 337, 352, 359, 360, 361, 380, 398, 405, 412, 419, 422, 560, 561, 636, 1012, 1013, 1022], "blackberri": 319, "blackburn": [1040, 1043], "blackd0t": 1047, "blair": [45, 375], "blakeflei": 1043, "blame": 380, "blanc": 319, "blanchard": [1041, 1042], "blank": [93, 385, 996, 1022], "bldgtype": 145, "bleed": 1030, "blei": [417, 541, 802], "bleich": [189, 1013], "bleki": 1049, "blend": [144, 156, 319, 394, 416], "bli": [368, 378, 392], "blind": [120, 123, 185, 214, 354, 417, 538, 546, 1027], "blink": 343, "blis_num_thread": 368, "blob": [2, 61, 69, 70, 77, 79, 90, 95, 97, 412, 452, 517], "blobs_param": 242, "block": [2, 298, 313, 326, 375, 377, 380, 385, 388, 394, 409, 412, 415, 418, 456, 457, 466, 477, 483, 484, 492, 493, 516, 518, 700, 953, 1009, 1011], "block_siz": [477, 483, 484, 1041], "blocker": [384, 1055], "blocknum": 47, "blockwis": [409, 1002], "blog": [326, 367, 380, 386, 388, 395, 1048], "blogpost": 385, "blondel": [0, 402, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1050], "blood": [170, 243, 377], "bloom": [389, 970], "blown": 346, "blue": [46, 48, 52, 58, 59, 63, 70, 111, 119, 121, 135, 138, 142, 150, 151, 153, 156, 158, 168, 177, 179, 193, 196, 202, 204, 211, 213, 238, 246, 266, 267, 268, 273, 309, 318, 323, 329, 334, 377, 412, 417, 1054], "blueviolet": [229, 299, 342], "blum": 1044, "blyston": [1047, 1048], "bmaisonn": 1049, "bmalezieux": 1050, "bmatrix": [409, 998], "bmc": 1016, "bme": 1055, "bmi": [170, 202, 204, 253, 377, 1014], "bmreinig": 1051, "bmug": 57, "bmva": 676, "bmvc": [676, 1002], "bo": [63, 1049], "board": 0, "boat": 327, "bob": [1038, 1044], "bobyrev": 1044, "boca": 1002, "bodega": 319, "bodenhof": [409, 724], "bodi": [47, 102, 170, 253, 327, 377], "body_bow": 102, "body_stat": 102, "boe": 51, "boechat": 1044, "boenisch": 1048, "boerner": 1051, "boersma": 1043, "bogazici": 377, "bogdan": 1037, "boggavarapu": 1049, "bohl": [1049, 1051], "bohn\u00e9": 1050, "boil": [135, 383, 394, 414], "boilerpl": [249, 382, 1030], "boisberrang": [0, 401, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "bold": [93, 148, 204, 210, 380], "boll": 1002, "bolleddula": 1055, "bolmier": [1048, 1049, 1053], "boltzmann": [2, 105, 162, 185, 205, 307, 507, 663, 718, 835, 865, 866, 867, 869, 895, 1027, 1031, 1032, 1039], "bommarito": [1040, 1041], "bonald": 1052, "bone": [228, 352], "bonferroni": 273, "bonu": [233, 378, 380], "bonusmalu": [215, 233], "boo": [170, 377], "book": [102, 447, 451, 453, 839, 844, 848, 1002, 1003, 1004, 1007, 1049], "booktitl": 0, "bool": [82, 99, 112, 184, 233, 362, 380, 424, 425, 426, 427, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 705, 707, 708, 712, 713, 714, 716, 717, 718, 719, 731, 732, 733, 734, 735, 736, 743, 746, 747, 759, 761, 766, 768, 772, 774, 779, 783, 787, 788, 789, 790, 792, 794, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 819, 823, 824, 827, 828, 829, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 933, 934, 935, 936, 947, 948, 953, 954, 967, 970, 976, 978, 986, 991, 992, 993, 994, 996, 1046, 1049, 1050], "bool_": 217, "boolean": [2, 133, 249, 362, 375, 380, 382, 389, 413, 419, 420, 421, 468, 566, 567, 586, 587, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 634, 637, 638, 641, 654, 676, 704, 783, 838, 844, 865, 872, 892, 926, 931, 989, 996, 1002, 1008, 1013, 1016, 1022, 1037, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1055], "boom": 1055, "boost": [2, 14, 46, 52, 103, 134, 135, 136, 139, 140, 142, 143, 153, 156, 159, 179, 185, 191, 196, 217, 223, 238, 272, 274, 309, 317, 319, 326, 329, 381, 386, 394, 411, 421, 452, 470, 471, 494, 501, 506, 525, 558, 559, 564, 565, 566, 567, 569, 570, 637, 638, 639, 640, 746, 747, 753, 755, 795, 805, 808, 809, 810, 826, 832, 835, 870, 882, 883, 1002, 1006, 1025, 1027, 1028, 1032, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1050], "booster": 1042, "boosting_error": 135, "boostingcolumntransform": 156, "boostingdecis": 419, "booth": 1044, "bootstrap": [138, 139, 147, 183, 276, 285, 324, 416, 419, 559, 560, 561, 562, 563, 568, 569, 570, 941, 976, 1002, 1037, 1038, 1040, 1042, 1045, 1047, 1050], "bootstrap_featur": [419, 560, 561], "bootstrap_indic": 276, "borchmann": 1052, "border": [450, 1047], "borderaxespad": 111, "borderpad": 359, "borderwidth": 141, "borg": [695, 699, 1003], "borgn": 1050, "bori": [1041, 1049, 1053], "borja": 1041, "born": 1043, "borovec": 1051, "borovikova": 1048, "bosch": 1050, "bossan": [1049, 1051, 1052, 1053, 1055], "bossch": [0, 401, 1044, 1045, 1046, 1050], "boston": 1030, "bot": [380, 384, 1011, 1051, 1054, 1055], "botelho": 1049, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 87, 88, 97, 103, 109, 111, 115, 116, 126, 128, 133, 138, 141, 142, 145, 146, 151, 155, 156, 159, 165, 166, 168, 170, 172, 179, 181, 187, 188, 189, 190, 195, 200, 201, 202, 204, 215, 216, 217, 219, 220, 221, 223, 233, 239, 248, 249, 250, 258, 259, 260, 261, 262, 263, 267, 273, 274, 275, 276, 280, 282, 284, 286, 293, 305, 313, 317, 318, 322, 324, 328, 334, 335, 340, 345, 347, 354, 355, 356, 362, 363, 367, 368, 369, 373, 374, 375, 378, 380, 382, 384, 386, 387, 389, 392, 393, 394, 395, 398, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 422, 425, 441, 450, 456, 466, 472, 479, 486, 487, 488, 489, 492, 493, 501, 502, 505, 507, 510, 512, 513, 514, 539, 543, 545, 552, 556, 560, 561, 562, 568, 569, 570, 571, 572, 582, 593, 594, 596, 602, 612, 613, 632, 637, 638, 648, 662, 663, 664, 677, 679, 681, 683, 692, 704, 709, 717, 721, 734, 735, 736, 741, 743, 762, 766, 772, 779, 783, 788, 789, 792, 793, 794, 800, 808, 809, 811, 828, 838, 866, 867, 881, 883, 885, 897, 902, 907, 909, 910, 917, 919, 926, 939, 945, 954, 968, 980, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "botstein": [633, 996], "bottleneck": [367, 386, 419, 452, 866, 867], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 84, 86, 95, 97, 119, 146, 154, 159, 215, 226, 242, 258, 260, 261, 264, 270, 273, 284, 298, 313, 333, 335, 343, 380, 410, 412, 418, 592, 921, 1000, 1002, 1006, 1014, 1026], "bottom_h": 313, "bottou": [681, 682, 683, 1010, 1020], "bou": [1052, 1053], "boucaud": 1045, "boucher": 1044, "bouckaert": 273, "boukhobza": 1055, "boulard": 1054, "bould": 412, "bouldin": [2, 730], "boulogn": 1040, "boun": 377, "bound": [2, 64, 176, 178, 180, 185, 217, 233, 241, 272, 387, 412, 417, 420, 422, 423, 448, 493, 507, 517, 528, 541, 568, 600, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 640, 642, 655, 659, 663, 682, 710, 740, 793, 802, 803, 849, 850, 886, 898, 901, 902, 903, 911, 912, 913, 916, 939, 1002, 1005, 1006, 1009, 1018, 1020, 1021, 1023, 1027, 1045, 1048, 1049, 1051], "bound_": 541, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 91, 93, 134, 137, 144, 154, 158, 163, 173, 174, 176, 185, 189, 199, 216, 224, 242, 247, 250, 276, 288, 301, 303, 304, 306, 308, 313, 315, 318, 331, 336, 338, 340, 341, 342, 343, 345, 351, 352, 359, 376, 410, 419, 420, 422, 454, 460, 509, 541, 554, 555, 574, 593, 594, 596, 636, 740, 766, 805, 838, 851, 857, 859, 860, 861, 884, 888, 905, 906, 911, 913, 914, 917, 939, 1000, 1009, 1012, 1016, 1019, 1020, 1021, 1027, 1037, 1039, 1041, 1050, 1051, 1052, 1054], "bounding_ax_": [387, 637], "boundscheck": [368, 381], "bourassa": 419, "bourbeau": [1044, 1045, 1046], "bourboux": 1048, "bourguignat": 1042, "bournhonesqu": 1047, "bousquet": 905, "boutili": 1018, "boutsidi": 417, "bow": 413, "bown": 1043, "bowyer": 1055, "box": [43, 49, 66, 88, 189, 190, 236, 290, 313, 317, 387, 417, 419, 517, 560, 561, 885, 897, 921, 923, 1006, 1007, 1013, 1016, 1022, 1045, 1053], "boxcox": 1056, "boxplot": [49, 111, 149, 188, 191, 287, 322], "boxplot_runtim": 49, "boxstyl": [48, 315], "boy": 1051, "boyd": 1002, "boyl": [1054, 1055], "boyuan": [1041, 1042, 1043], "bp": [49, 149, 170, 202, 204, 377, 1014], "bpo": 883, "br": 137, "br_estim": 183, "bracket": [380, 1002], "bradi": 1044, "bradlei": [170, 377, 1002], "bradshaw": [1040, 1041, 1044], "bradypu": [50, 306, 375, 503], "bradypus_variegatus_0": 50, "brain": 374, "branch": [367, 378, 380, 383, 384, 412, 419, 446, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 917, 918, 919, 920, 922, 1009, 1013, 1022], "branching_factor": 446, "brand": [395, 398], "brandon": [1043, 1044, 1051, 1052], "brandt": 1048, "brandyn": 1037, "brault": 1044, "braun": 1045, "bravi": 1043, "braycurti": [454, 461, 704, 783, 784, 785, 1009], "braycurtisdist": 704, "brc": [412, 446], "brdav": 1055, "bre": [2, 639, 1022], "bread": 1030, "breadth": [849, 850, 854, 1030, 1039], "breadth_first": [849, 850, 854], "break": [2, 55, 74, 80, 102, 112, 185, 204, 207, 221, 249, 260, 290, 325, 333, 338, 354, 356, 380, 384, 386, 393, 412, 473, 517, 644, 779, 783, 786, 802, 882, 889, 894, 911, 914, 928, 1002, 1005, 1014, 1016, 1021, 1026, 1027, 1037, 1038, 1044, 1045, 1047, 1049, 1053], "break_ti": [351, 911, 914, 1021, 1047], "breakdown": [111, 112, 232, 684, 1002], "breakdown_": 684, "breast": [2, 170, 373, 505, 1014, 1032, 1042], "breast_canc": 335, "breast_cancer_data": 170, "brecht": 646, "bredin": 1041, "breiman": [190, 416, 419, 521, 522, 523, 560, 561, 569, 570, 639, 917, 918, 1014, 1022], "brekk": 1052, "brendan": [73, 444, 458, 1053, 1054, 1055], "brenden": 1051, "brenner": 1006, "breno": [1044, 1045], "brent": [1041, 1045, 1046], "brentfagan": 1046, "bresson": 1056, "brett": [1040, 1042, 1043, 1044, 1045, 1052], "brettingen": 1043, "breuer": 1048, "breunig": [412, 454, 461, 855, 1012], "breve": 1053, "brevin": [1053, 1054], "brew": [147, 378, 398], "brian": [0, 402, 713, 1006, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051], "brice": [1049, 1050], "bridg": [392, 1003], "brief": [380, 1004], "briefli": [282, 379, 393, 419, 995, 1047], "brier": [2, 61, 62, 64, 410, 714], "brier1950": 1006, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 410, 1006, 1045, 1046, 1047, 1055], "brigata": 377, "bright": 343, "brighter": 180, "brigi": [1048, 1049], "brigitta": [1047, 1048, 1049, 1053, 1055], "bring": [188, 313, 417, 681, 683, 1003, 1030], "british": 420, "brittl": [74, 412], "broad": [380, 394, 1025], "broadcast": 632, "broader": [315, 1002, 1029], "broadli": [394, 412], "brocchini": 1049, "brochart": 1054, "brockherd": 1039, "brodersen": 713, "broke": 1044, "broken": [398, 416, 604, 605, 640, 725, 931, 1006, 1022, 1040, 1044, 1045, 1046, 1048, 1051], "brook": [1040, 1041, 1049], "brought": [187, 558, 559, 562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "brown": [50, 119, 306, 375, 503, 633, 996, 1042, 1044, 1045, 1046, 1049], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 380, 388, 1016, 1054], "broyden": 1002, "brr": 195, "brr_poli": 195, "brr_score": 195, "bruce": [1047, 1048], "brucher": [0, 402, 1037], "brummitt": [1044, 1045], "brunak": 748, "brunner": 1041, "bruno": [1048, 1049, 1050, 1055], "brutal": 343, "brute": [293, 392, 407, 416, 423, 448, 450, 454, 461, 637, 638, 693, 694, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 1013, 1032, 1041, 1045, 1049, 1052, 1053, 1054, 1055], "bry": [207, 224], "bryan": [1037, 1040, 1046, 1047, 1050], "br\u00f6mmel": [1051, 1052], "br\u00fblade": 319, "bsa": 769, "bsas_in_radian": 769, "bscikit": 1037, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 386, 392], "bsh": 1052, "bsmtfinsf1": [145, 156], "bsmtfinsf2": 145, "bsmthalfbath": 145, "bsmtunfsf": 156, "bspline": 888, "bsplines_": [216, 888], "bsr": [935, 936, 1050], "bt": 420, "btol": [677, 679], "buck": 632, "budarz": 1050, "buddha": 1042, "budget": [0, 145, 844, 845, 846, 847, 848, 995], "bueno": 769, "buffer": [83, 1050, 1055], "buffer_mb": 1037, "bug": [249, 322, 323, 324, 325, 326, 327, 328, 329, 330, 378, 382, 383, 384, 385, 388, 392, 394, 1026, 1037, 1038, 1039, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "bugfix": [1037, 1051], "buguen": 1037, "buhmann": 713, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 88, 100, 106, 125, 135, 144, 146, 153, 159, 167, 169, 182, 183, 185, 188, 223, 278, 281, 290, 292, 293, 310, 311, 314, 319, 320, 356, 363, 367, 368, 369, 376, 382, 383, 384, 385, 386, 394, 398, 405, 412, 416, 419, 420, 446, 494, 506, 508, 529, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 590, 591, 593, 594, 596, 632, 633, 635, 696, 718, 719, 806, 810, 814, 823, 829, 831, 870, 887, 889, 917, 918, 919, 920, 922, 949, 953, 995, 996, 1003, 1006, 1010, 1012, 1016, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1037, 1040, 1042, 1043, 1044, 1046, 1049], "build_analyz": [420, 593, 594, 596, 1047], "build_preprocessor": [420, 593, 594, 596, 1047], "build_projection_oper": 53, "build_token": [57, 420, 593, 594, 596], "build_tool": [380, 384, 388], "builder": [47, 49, 350, 384], "buildtool": 378, "built": [2, 25, 66, 116, 133, 135, 136, 144, 146, 190, 223, 276, 290, 306, 322, 359, 362, 367, 375, 378, 380, 381, 382, 384, 386, 388, 389, 392, 393, 394, 398, 406, 412, 413, 416, 419, 421, 449, 508, 558, 559, 560, 561, 564, 565, 566, 567, 593, 594, 598, 602, 644, 645, 646, 647, 648, 651, 652, 657, 663, 665, 666, 667, 668, 677, 678, 679, 680, 686, 808, 809, 816, 840, 843, 849, 850, 919, 920, 958, 989, 1002, 1006, 1007, 1019, 1020, 1022, 1025, 1030, 1037, 1040, 1041, 1043, 1049, 1055], "builtin": 1021, "buitinck": [0, 402, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "bulk": [282, 423, 448], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1044, "buluttekin": 1047, "bumblebe": 1050, "bunch": [2, 50, 249, 373, 374, 375, 468, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 515, 572, 573, 574, 575, 637, 638, 639, 868, 869, 917, 918, 919, 920, 962, 965, 1030, 1042, 1044, 1047, 1049, 1053], "bundl": [1045, 1046], "bupu": 189, "burden": [380, 881, 1026], "bureau": 375, "buri": 380, "burjek": 1037, "burk": [0, 364, 1052], "burn": [1044, 1045], "burst": 1006, "busch": [1045, 1046, 1048], "bush": [45, 375], "busi": [43, 215, 273, 330, 388, 392, 411, 793, 1002, 1006, 1030], "business_metr": 267, "business_scor": 267, "bussonni": [1037, 1049], "butler": [478, 1040, 1048, 1049], "butlerdavi": 478, "butter": 1030, "button": [380, 388], "butyugina": 1053, "buuren": [632, 996], "buzenet": [1052, 1053], "bv_bunch": 50, "bwignal": 1040, "bypass": [411, 413, 604, 651, 657, 827, 917, 918, 919, 920, 1053], "byproduct": 239, "byrd": 663, "byron": 1049, "byte": [86, 420, 491, 508, 513, 514, 587, 593, 594, 596, 970, 1037, 1044, 1045, 1052, 1055], "bz2": [55, 513, 514], "bz2file": 55, "bzip2": 1037, "b\u00e9gude": 319, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 85, 89, 90, 92, 93, 94, 98, 103, 104, 106, 116, 118, 119, 126, 127, 135, 137, 138, 144, 145, 152, 154, 155, 157, 158, 163, 170, 173, 174, 175, 176, 180, 193, 199, 203, 205, 206, 207, 208, 210, 212, 213, 222, 224, 226, 227, 228, 229, 231, 232, 235, 237, 239, 240, 247, 248, 250, 254, 259, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 276, 278, 282, 284, 293, 296, 299, 301, 302, 303, 304, 306, 308, 309, 311, 313, 314, 315, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 359, 360, 361, 367, 368, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 392, 398, 399, 403, 409, 410, 412, 413, 414, 415, 416, 417, 419, 421, 425, 441, 446, 447, 450, 451, 453, 463, 472, 479, 528, 533, 539, 543, 545, 546, 552, 554, 555, 595, 612, 613, 615, 636, 644, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 684, 690, 691, 693, 694, 697, 698, 713, 719, 720, 723, 736, 740, 746, 747, 763, 764, 805, 819, 828, 834, 836, 844, 845, 846, 847, 848, 849, 850, 856, 858, 865, 880, 882, 883, 884, 888, 890, 904, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 924, 935, 936, 968, 995, 998, 999, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1011, 1013, 1016, 1018, 1020, 1021, 1022, 1025, 1030, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1053, 1055], "c0": [145, 245, 319], "c1": [98, 145, 180, 245, 319], "c2": [98, 145, 180, 245, 319], "c22": 327, "c26": 327, "c3": [98, 145, 319], "c4": [98, 319, 1028, 1032], "c5": [98, 1028, 1032], "c56poni": 1047, "c6": 98, "c99": 1025, "c_": [50, 62, 63, 64, 91, 111, 122, 144, 147, 153, 154, 163, 174, 213, 228, 231, 242, 299, 316, 318, 337, 343, 351, 352, 412, 664, 719, 720, 723, 1006], "c_0": [998, 1004], "c_1": 1003, "c_2": [412, 1003], "c_2d_rang": 343, "c_e": 412, "c_i": [412, 1009], "c_j": [412, 1011], "c_jh_j": 1011, "c_k": 554, "c_option": 104, "c_p": 1002, "c_q": 412, "c_rang": 343, "c_scale": 350, "ca": [170, 377, 412, 446, 917, 918, 1018, 1022], "cabernet": 319, "cabin": 327, "cablevis": 51, "cabrera": 1047, "cach": [2, 52, 87, 99, 185, 274, 293, 294, 296, 301, 305, 367, 368, 375, 394, 445, 449, 454, 472, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 507, 513, 514, 805, 851, 853, 869, 870, 907, 911, 912, 913, 914, 915, 990, 1009, 1021, 1027, 1040, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1055, 1056], "cache_path": 1009, "cache_s": [472, 907, 911, 912, 913, 914, 915, 1021], "cached_pip": [104, 413], "cachedir": [87, 104, 389, 413], "caching_dir": 990, "caherrera": 1050, "cai": 1050, "caicedo": 1037, "cailean": 1055, "cainei": 1055, "caio": [1043, 1045, 1047], "caj": 51, "caje": 1038, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 375, "cal_scor": 63, "calcot": 1050, "calcsiz": 378, "calcul": [2, 46, 63, 64, 69, 80, 92, 111, 133, 134, 135, 139, 157, 184, 185, 191, 211, 219, 220, 232, 247, 249, 272, 273, 279, 283, 288, 292, 341, 347, 348, 363, 367, 387, 394, 403, 409, 410, 412, 416, 417, 419, 423, 442, 447, 448, 450, 452, 454, 455, 457, 459, 460, 475, 476, 482, 485, 541, 552, 568, 569, 574, 602, 616, 625, 637, 638, 639, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 684, 686, 689, 693, 695, 697, 699, 712, 721, 734, 735, 740, 741, 743, 749, 759, 769, 774, 776, 777, 778, 779, 783, 786, 788, 789, 792, 793, 794, 797, 798, 800, 812, 814, 830, 834, 847, 849, 850, 887, 888, 889, 895, 899, 909, 910, 941, 955, 998, 1000, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1014, 1016, 1019, 1021, 1027, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "cald": 904, "caleb": 1049, "calibr": [2, 52, 66, 138, 151, 158, 233, 245, 267, 273, 275, 394, 403, 441, 442, 443, 517, 520, 569, 574, 663, 664, 681, 714, 734, 746, 789, 792, 793, 804, 827, 835, 847, 906, 909, 944, 995, 1002, 1006, 1019, 1021, 1027, 1028, 1032, 1034, 1041, 1043], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 410, 441], "calibrated_clf": 441, "calibrated_df": [62, 64], "calibrated_forest": 995, "calibratedclassifiercv": [2, 61, 62, 63, 363, 394, 403, 410, 681, 804, 827, 995, 1021, 1026, 1041, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 410, 441, 442, 1046, 1051, 1055], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 410, 944, 1050, 1051, 1055], "california": [2, 146, 180, 183, 184, 313, 319, 324, 373, 377, 494, 1032], "calinski": [2, 715, 1043], "calinski_harabasz_scor": [2, 412, 1045], "calinski_harabaz_scor": [1043, 1045], "cali\u0144ski": 412, "call": [52, 53, 55, 80, 83, 87, 103, 119, 133, 140, 147, 167, 172, 176, 178, 180, 187, 189, 202, 215, 216, 219, 233, 243, 249, 253, 255, 256, 267, 273, 274, 282, 286, 288, 290, 293, 295, 318, 320, 324, 325, 354, 355, 356, 362, 367, 368, 369, 375, 380, 381, 382, 385, 386, 387, 388, 389, 392, 393, 394, 395, 398, 403, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 424, 435, 444, 447, 450, 451, 453, 454, 455, 456, 457, 458, 461, 464, 466, 468, 469, 472, 473, 478, 486, 487, 488, 492, 495, 497, 500, 502, 508, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 582, 587, 588, 593, 594, 596, 602, 607, 612, 613, 615, 616, 619, 625, 632, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 709, 737, 747, 760, 776, 779, 783, 784, 785, 786, 798, 802, 803, 804, 805, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 858, 860, 865, 866, 867, 868, 869, 872, 873, 874, 876, 878, 879, 881, 886, 889, 890, 893, 898, 899, 900, 901, 902, 906, 909, 910, 911, 912, 914, 915, 918, 920, 928, 930, 943, 947, 952, 953, 962, 963, 965, 971, 972, 976, 979, 989, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1018, 1019, 1021, 1022, 1025, 1030, 1032, 1034, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "callabl": [2, 263, 277, 330, 394, 416, 419, 420, 421, 423, 424, 445, 447, 448, 449, 450, 451, 453, 454, 456, 461, 463, 464, 468, 469, 470, 471, 536, 538, 540, 542, 544, 550, 551, 562, 563, 564, 565, 566, 567, 569, 570, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 615, 616, 625, 633, 635, 639, 644, 648, 664, 676, 678, 680, 693, 696, 697, 701, 716, 724, 737, 747, 776, 779, 783, 784, 785, 786, 797, 798, 805, 808, 809, 811, 819, 827, 828, 831, 832, 833, 834, 836, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 873, 882, 904, 905, 911, 912, 913, 914, 915, 966, 972, 975, 989, 995, 1006, 1016, 1037, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1056], "callback": [536, 542, 544, 550, 551, 858, 971, 1026, 1053], "callbl": 851, "calle": [2, 249, 963], "caller": [2, 249, 413, 651, 652, 657, 665, 666, 667, 686, 899, 900, 962, 963, 981, 982, 983, 1046], "callgrin": 386, "callgrind": 383, "calm": 51, "caltech": 354, "calvin": [1040, 1041], "calvo": [1045, 1046], "cambridg": [375, 417, 595, 844, 848, 1002, 1004, 1008], "came": 1005, "camera_ind": 53, "camil": [1045, 1053, 1054], "camila": 1047, "camilaagw": 1047, "camilo": 1043, "campello": [412, 450], "campustrampu": 1044, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 80, 82, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 109, 110, 111, 112, 113, 116, 118, 122, 124, 125, 126, 128, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166, 167, 168, 169, 170, 172, 177, 178, 179, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 200, 202, 204, 206, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 223, 231, 232, 233, 235, 236, 237, 242, 243, 244, 245, 246, 248, 249, 252, 253, 256, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 280, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 297, 298, 299, 300, 302, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 336, 337, 340, 341, 343, 346, 347, 350, 354, 355, 356, 360, 361, 362, 363, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 394, 395, 397, 398, 399, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 435, 437, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 476, 486, 487, 488, 491, 501, 504, 508, 513, 514, 517, 526, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 584, 585, 586, 587, 588, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 639, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 709, 712, 714, 716, 717, 723, 725, 726, 727, 728, 729, 731, 732, 734, 735, 737, 738, 742, 743, 744, 745, 748, 751, 757, 760, 761, 762, 763, 764, 768, 784, 785, 787, 788, 789, 790, 792, 793, 794, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 866, 867, 868, 869, 872, 873, 874, 876, 877, 878, 882, 883, 884, 887, 888, 889, 894, 901, 902, 906, 907, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 921, 922, 925, 926, 929, 931, 933, 935, 939, 941, 947, 950, 952, 953, 960, 962, 965, 968, 971, 975, 976, 979, 986, 989, 990, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1030, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "canberra": [454, 461, 704, 783, 784, 785, 1009], "canberradist": 704, "cancel": [419, 420, 768], "cancer": [2, 170, 373, 411, 505, 598, 599, 856, 1014, 1032, 1042], "candela": 377, "candid": [106, 263, 271, 274, 281, 324, 369, 380, 384, 412, 419, 452, 454, 805, 808, 809, 817, 819, 1002, 1009, 1022, 1043], "candidate_idx": 272, "cannon": 1052, "cannot": [43, 52, 75, 89, 107, 113, 121, 126, 143, 188, 189, 200, 215, 233, 249, 286, 313, 343, 350, 369, 379, 381, 386, 392, 394, 395, 400, 406, 412, 413, 414, 416, 417, 419, 420, 422, 469, 526, 543, 544, 545, 548, 552, 615, 618, 619, 620, 622, 624, 625, 627, 628, 630, 656, 660, 687, 697, 716, 722, 783, 808, 809, 856, 857, 859, 860, 861, 869, 870, 874, 879, 880, 891, 933, 935, 936, 995, 996, 1000, 1002, 1003, 1006, 1007, 1012, 1016, 1021, 1022, 1026, 1030, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "canon": [2, 51, 394, 410, 419, 486, 487, 489, 773, 1026, 1028, 1032], "canonic": 394, "cant": [1054, 1055], "cantor": [633, 996], "canuma": 1050, "canva": 51, "cao": 412, "cap": [409, 412, 760, 1006, 1046], "capabl": [88, 89, 116, 151, 177, 219, 239, 382, 394, 398, 1007, 1010, 1021, 1022, 1030, 1037, 1046, 1054], "capac": [151, 172, 190], "capit": [49, 62, 329, 501, 811, 828], "capitain": 1055, "cappion": [697, 1003], "cappuzzo": 1054, "capsiz": 335, "caption": 102, "captur": [2, 43, 48, 51, 52, 72, 74, 116, 148, 153, 165, 177, 188, 195, 200, 215, 219, 264, 286, 292, 323, 343, 347, 388, 412, 419, 420, 421, 576, 593, 594, 596, 855, 972, 1006, 1011, 1019, 1023, 1049], "car": 215, "carbal": 1054, "card": 1045, "cardin": [72, 142, 143, 149, 190, 191, 319, 320, 328, 412, 419, 467, 558, 559, 562, 563, 564, 565, 569, 570, 571, 684, 882, 883, 890, 917, 918, 919, 920, 1006, 1007, 1014, 1016, 1051, 1052], "cardiotocogram": 252, "care": [47, 88, 149, 188, 267, 290, 347, 367, 369, 384, 386, 392, 394, 395, 406, 411, 412, 414, 420, 441, 464, 473, 645, 663, 664, 671, 672, 673, 681, 682, 683, 700, 909, 1003, 1021, 1030, 1053], "carefulli": [287, 367, 410, 417, 1021], "carei": [1040, 1041, 1042, 1043, 1044], "carett": 1044, "cari": 1049, "carl": [177, 422, 615, 616, 619, 624, 627], "carla": 1053, "carlo": [0, 247, 370, 419, 422, 616, 646, 647, 998, 1011, 1037, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "carlson": 1044, "carlsson": 1040, "carmen": 319, "carnegi": 904, "caro": 1042, "carodorum": 319, "carol": [1043, 1044], "carolin": 1010, "caro\u00e7o": 1056, "carrascosa": [1030, 1041], "carre\u00f1o": 1052, "carri": [51, 67, 135, 184, 267, 273, 276, 281, 286, 309, 315, 356, 395, 420, 562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 1030], "carrillo": 1042, "carsten": 1050, "cart": [1028, 1032], "carter": [1043, 1044, 1052, 1055], "cartesian": [103, 409, 638, 1009, 1052], "cartman_nabana": 1047, "cartograph": 193, "cartographi": 1002, "caruana": [62, 64, 410, 441, 443], "carvaj": 1037, "casado": 1048, "casagrand": [1045, 1046], "casalegno": 1049, "cascad": 377, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 82, 85, 88, 90, 94, 99, 103, 104, 112, 116, 126, 128, 138, 140, 141, 148, 149, 156, 167, 169, 170, 172, 179, 188, 189, 191, 200, 201, 204, 206, 215, 216, 217, 219, 220, 223, 229, 231, 232, 233, 242, 246, 247, 248, 249, 252, 253, 263, 266, 267, 270, 272, 273, 274, 276, 279, 280, 282, 290, 293, 296, 300, 310, 313, 315, 318, 320, 322, 325, 330, 347, 354, 355, 356, 362, 363, 367, 368, 369, 374, 375, 380, 381, 382, 384, 385, 386, 387, 389, 392, 393, 394, 395, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 441, 444, 447, 448, 450, 451, 455, 457, 467, 468, 469, 471, 478, 501, 513, 514, 520, 544, 546, 547, 548, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 593, 596, 598, 599, 602, 607, 611, 614, 615, 616, 630, 632, 633, 635, 637, 652, 653, 658, 661, 662, 663, 664, 666, 668, 671, 673, 674, 677, 679, 680, 681, 685, 687, 688, 689, 690, 691, 692, 704, 708, 713, 714, 717, 721, 723, 725, 726, 728, 731, 733, 734, 735, 739, 740, 743, 747, 748, 750, 751, 753, 755, 758, 759, 761, 768, 783, 786, 788, 789, 790, 792, 793, 794, 795, 799, 801, 803, 805, 808, 809, 811, 819, 823, 828, 829, 830, 831, 832, 833, 834, 836, 838, 846, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 869, 876, 878, 879, 882, 883, 884, 887, 888, 889, 890, 893, 899, 900, 901, 902, 909, 911, 914, 917, 918, 924, 929, 931, 941, 953, 954, 994, 995, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1020, 1021, 1022, 1025, 1026, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "caselli": [1045, 1046], "cash": 1002, "cashman": 1047, "casino": [1051, 1052], "cass": 1043, "cassi": 319, "cast": [50, 52, 86, 215, 236, 374, 395, 420, 501, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 678, 680, 970, 1044, 1045, 1046, 1047, 1050, 1052, 1054], "castachick": 1048, "castello": 1041, "castor": 1048, "caswel": [1050, 1053], "cat": [51, 103, 189, 190, 252, 325, 326, 327, 328, 329, 330, 375, 420, 492, 587, 717, 723, 759, 788, 890, 1006, 1016, 1046, 1047, 1049], "cat_column": 252, "cat_linear_processor": 156, "cat_proc": [244, 323], "cat_selector": 156, "cat_str": 57, "cat_tree_processor": 156, "catajara": 1047, "catalfo": 1045, "catalin": 647, "catastroph": [267, 320, 768, 1026], "catch": [79, 95, 310, 368, 388, 389], "catch_warn": [79, 95, 249, 309, 310], "categor": [2, 43, 103, 134, 140, 151, 156, 185, 188, 189, 190, 215, 233, 252, 254, 256, 267, 320, 325, 327, 328, 369, 372, 374, 375, 385, 394, 413, 420, 470, 471, 493, 494, 501, 510, 566, 567, 586, 587, 612, 613, 637, 638, 653, 663, 664, 674, 685, 714, 832, 844, 845, 846, 847, 848, 870, 872, 876, 877, 880, 882, 883, 890, 904, 905, 926, 996, 1002, 1013, 1014, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1038, 1041, 1042, 1045, 1047, 1049, 1052, 1053, 1054, 1055], "categori": [2, 25, 57, 79, 95, 102, 103, 145, 156, 188, 189, 215, 223, 230, 252, 267, 274, 309, 310, 315, 319, 320, 324, 327, 329, 336, 354, 355, 356, 374, 375, 389, 412, 413, 419, 420, 422, 492, 501, 502, 508, 566, 567, 653, 663, 664, 674, 685, 748, 763, 764, 845, 882, 883, 890, 947, 948, 996, 1002, 1003, 1004, 1008, 1014, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "categorical_column": [43, 145, 188, 190, 252, 471], "categorical_columns_selector": 252, "categorical_columns_subset": 145, "categorical_crossentropi": [1047, 1051], "categorical_encod": 190, "categorical_featur": [43, 103, 145, 151, 189, 267, 319, 324, 325, 326, 327, 329, 385, 419, 566, 567, 637, 638, 1013, 1045, 1049, 1052, 1054], "categorical_preprocessor": [254, 319], "categorical_transform": 103, "categoricalnb": [2, 844, 846, 847, 848, 1008, 1047, 1048, 1049, 1050, 1052], "categories_": [882, 883, 890, 1016, 1045, 1052], "categoris": [947, 948], "category_1_fold": 508, "category_2_fold": 508, "category_count_": 845, "category_s": 355, "categr": 1014, "caterpillar": 51, "cathi": [1041, 1047], "catindex": 189, "catplot": 263, "caught": [380, 388, 406], "caus": [43, 62, 64, 148, 173, 188, 213, 215, 219, 220, 233, 292, 320, 347, 356, 363, 378, 385, 410, 412, 417, 418, 420, 422, 447, 451, 453, 463, 514, 537, 587, 594, 615, 616, 783, 844, 845, 846, 848, 873, 882, 884, 887, 888, 935, 936, 996, 1002, 1006, 1014, 1016, 1019, 1026, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056], "causal": [185, 186, 210, 662, 790, 835, 1027], "causat": 188, "caution": [188, 267, 384, 444, 458, 1045], "cautiou": 1044, "caveat": [416, 422], "cawlei": [278, 1006], "cax": [66, 175, 284], "ca\u00f1ardo": 1040, "cb": [175, 246, 262], "cbar_ax": 284, "cbar_kw": [195, 200], "cc": 378, "cc18": 374, "cc_home": [917, 918], "cca": [2, 250, 415, 487, 489, 1007, 1041, 1045, 1046, 1047, 1049, 1051, 1055], "ccat": 375, "ccf2002": 998, "cclauss": 1045, "cco": 354, "ccp_alpha": [322, 358, 562, 563, 564, 565, 569, 570, 917, 918, 919, 920, 1022, 1047], "ccp_path": [917, 918, 919, 920], "cd": [121, 170, 377, 378, 380, 384, 386, 417, 475, 476, 482, 536, 542, 544, 545, 548, 550, 551, 552, 1002, 1042, 1052], "cdef": 381, "cdf": 273, "cdist": 1050, "cdivis": 381, "cdot": [273, 347, 409, 412, 417, 418, 422, 619, 620, 624, 627, 628, 875, 998, 1000, 1006, 1010, 1016], "cdrig": 1051, "cdt": 57, "cea": [844, 1008], "ceballo": 1051, "ceder": [793, 1006], "ceethinwa": [1049, 1050], "ceh": 1052, "ceil": [151, 252, 562, 563, 564, 565, 568, 569, 570, 571, 599, 676, 808, 809, 917, 918, 919, 920, 1020], "celelibi": 1046, "celeo": 1041, "celeux": 533, "cell": [50, 51, 58, 63, 68, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 170, 177, 188, 189, 190, 197, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 306, 311, 319, 323, 324, 326, 327, 329, 334, 362, 377, 385, 697, 1006, 1007, 1043, 1051], "cellular": 53, "celsiu": [189, 1013], "cemlyn": 1055, "cen": 748, "censor": 1025, "censu": 375, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 89, 92, 93, 94, 96, 97, 112, 126, 127, 130, 146, 147, 148, 149, 168, 170, 184, 189, 197, 207, 209, 215, 216, 226, 227, 238, 239, 242, 243, 252, 258, 261, 262, 268, 274, 284, 298, 301, 303, 309, 313, 315, 316, 326, 334, 341, 343, 344, 345, 349, 355, 356, 375, 376, 377, 385, 412, 414, 415, 417, 418, 419, 425, 444, 446, 447, 450, 451, 452, 453, 456, 458, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 506, 517, 529, 539, 540, 546, 549, 555, 611, 614, 615, 616, 637, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 683, 695, 699, 701, 802, 874, 875, 878, 887, 889, 899, 900, 909, 910, 1000, 1002, 1003, 1005, 1013, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1054], "center1": 99, "center2": 99, "center3": 99, "center4": 99, "center_": 887, "center_box": [93, 517], "centers_0": 316, "centers_1": 316, "centers_init": 92, "cento": 378, "centr": 155, "central": [0, 53, 217, 375, 381, 412, 1012, 1025], "centrality_scor": 55, "centroid": [2, 77, 90, 91, 109, 185, 294, 301, 316, 326, 339, 355, 376, 403, 412, 446, 447, 450, 451, 452, 453, 456, 463, 464, 466, 509, 554, 636, 856, 1027, 1028, 1032, 1037, 1041, 1044, 1049, 1053], "centroids_": [446, 450, 856], "ceo": 1030, "cerda": 1051, "certain": [52, 88, 146, 151, 188, 220, 232, 249, 273, 293, 317, 347, 363, 375, 376, 380, 384, 394, 397, 406, 408, 412, 417, 421, 643, 654, 658, 663, 668, 689, 869, 874, 909, 995, 998, 1002, 1003, 1006, 1007, 1010, 1016, 1021, 1025, 1042, 1046, 1049, 1052], "certainli": [86, 102, 188, 355, 411], "certainti": [273, 382, 1006], "ceshin": 1043, "cest": 1006, "cetina": 1049, "cf": [320, 411, 412, 415, 446, 705, 1002, 1016, 1026], "cflag": 378, "cft": 412, "cftree": 446, "cg": [311, 663, 664, 677, 679, 692, 1002, 1041, 1042, 1044, 1048, 1050, 1051, 1054, 1055], "cga": 180, "cgi": 902, "cgohlk": [1040, 1041], "cgroup": [1050, 1051], "cgsavard": [1047, 1048], "ch6": 535, "chacon": 710, "chac\u00f3n": [412, 710], "chad": 1054, "chadi": 1045, "chai": [1049, 1052, 1053], "chain": [2, 35, 101, 107, 135, 162, 185, 245, 281, 284, 290, 291, 293, 296, 311, 363, 372, 392, 394, 422, 501, 507, 546, 616, 632, 663, 743, 805, 835, 838, 840, 841, 842, 843, 869, 870, 889, 995, 996, 1007, 1011, 1023, 1027, 1030, 1032], "chain_jaccard_scor": 292, "chain_method": [840, 1055], "chain_method_": 840, "chaitanya": 1048, "chaitanyamog": 1049, "chakhchoukh": 112, "chakravarti": [640, 642], "chalearn": 1006, "challeng": [51, 156, 172, 189, 195, 233, 242, 369, 375, 376, 406, 412, 414, 466, 476, 1006, 1012, 1030], "chalmer": 1051, "chalmerlow": 1040, "chalulu": 1052, "chan": [0, 847, 889, 1055, 1056], "chanc": [2, 71, 73, 82, 135, 165, 185, 191, 215, 223, 230, 233, 273, 279, 282, 283, 319, 350, 355, 363, 379, 411, 412, 416, 705, 707, 709, 710, 713, 721, 760, 762, 791, 800, 834, 1006, 1014, 1022, 1027, 1053], "chance_level_": [705, 707, 1053], "chance_level_kw": [252, 705, 707, 1053], "chandra": [1047, 1048, 1051], "chang": [2, 46, 62, 63, 64, 121, 125, 126, 138, 141, 149, 173, 183, 187, 188, 191, 203, 216, 217, 219, 220, 253, 254, 267, 268, 273, 280, 283, 287, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 343, 347, 356, 362, 363, 367, 368, 369, 375, 382, 383, 384, 385, 388, 392, 394, 403, 412, 416, 419, 420, 422, 424, 432, 437, 441, 444, 447, 448, 451, 453, 456, 458, 463, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 498, 499, 501, 509, 513, 514, 517, 518, 519, 527, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 593, 594, 595, 596, 598, 599, 602, 607, 615, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 697, 699, 705, 709, 712, 717, 721, 722, 734, 735, 741, 742, 760, 762, 783, 788, 789, 790, 792, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 819, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 859, 860, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 881, 882, 888, 889, 890, 897, 898, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 928, 933, 935, 936, 948, 953, 964, 971, 972, 975, 995, 996, 997, 1005, 1006, 1007, 1009, 1016, 1019, 1020, 1021, 1022, 1026, 1035, 1036], "changed_onli": 1048, "changedbehaviorwarn": 1049, "changedbehaviourwarn": 1046, "changelog": [327, 384, 394, 1035], "changing_param": 46, "changing_param_valu": 46, "changyao": [1052, 1053], "channel": [368, 375, 378, 398, 420, 498, 499, 588, 589, 591, 592, 1029], "channel_prior": 378, "chapman": 1002, "chapter": [121, 363, 382, 412, 417, 419, 422, 535, 537, 539, 619, 624, 627, 648, 996, 999, 1002, 1021, 1022], "char": [420, 593, 594, 596, 1037], "char_wb": [420, 593, 594, 596], "charact": [356, 380, 385, 394, 420, 508, 513, 514, 593, 594, 596, 921, 1011, 1037, 1050, 1052], "character": [75, 233, 358, 412, 416, 1003], "characteris": 1009, "characterist": [2, 79, 95, 170, 177, 185, 242, 243, 255, 265, 267, 268, 270, 275, 313, 363, 375, 377, 385, 410, 411, 416, 419, 422, 508, 509, 628, 643, 663, 707, 711, 713, 732, 787, 793, 794, 824, 835, 838, 876, 914, 1002, 1027], "chardet": 420, "chardetect": 420, "charg": [0, 267, 380], "charikar": 998, "charl": [64, 267, 769, 1037, 1040, 1043, 1047, 1049, 1052], "charli": [1044, 1045, 1053], "charlton": 1044, "charra": [1052, 1054, 1055], "charron": [1030, 1040, 1041, 1048, 1049, 1050], "charset": [1037, 1039], "charset_error": 1039, "chart": [72, 146, 278, 400, 1007, 1040], "chartbeat": 1030, "chase": [51, 1037], "chasnovski": 1048, "chat": 1030, "chatterje": 1048, "chaudhuri": 450, "chauhan": [1045, 1046, 1052, 1053], "chaumond": [1030, 1045], "chauvin": 748, "chavez": [45, 375], "chawla": 1047, "chayant": 1044, "chazalon": 1051, "cheaper": [189, 412, 422, 678, 998, 1002], "cheat": [52, 343, 400, 1010, 1020, 1039], "chebee7i": 1041, "chebyshev": [454, 461, 704, 783, 784, 785, 1009], "chebyshevdist": 704, "check": [2, 41, 43, 44, 47, 55, 80, 86, 89, 125, 133, 141, 156, 172, 185, 187, 189, 190, 201, 202, 204, 215, 236, 249, 259, 265, 267, 282, 290, 325, 334, 362, 367, 368, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 392, 393, 394, 398, 399, 403, 406, 413, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 495, 507, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 692, 693, 694, 695, 696, 697, 698, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 935, 936, 937, 947, 948, 958, 960, 961, 962, 966, 967, 989, 990, 991, 993, 994, 1001, 1002, 1003, 1006, 1021, 1022, 1026, 1027, 1030, 1032, 1037, 1038, 1040, 1044, 1048, 1049, 1050, 1051, 1052, 1054, 1056], "check_arrai": [2, 382, 389, 472, 539, 907, 994, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "check_classifier_multioutput": 1047, "check_consistent_length": 2, "check_cv": [2, 394, 1042], "check_decision_proba_consist": 1044, "check_estim": [2, 322, 382, 394, 928, 948, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "check_estimator_sparse_arrai": 1055, "check_estimator_sparse_data": 1055, "check_estimator_sparse_matrix": 1055, "check_estimators_fit_returns_self": 948, "check_estimators_pickl": 1054, "check_fit_idempot": 1046, "check_increas": 2, "check_input": [539, 553, 651, 652, 657, 665, 666, 667, 686, 692, 917, 918, 919, 920, 1045], "check_invers": [413, 469, 873, 1016, 1045, 1051, 1052], "check_is_fit": [2, 89, 133, 249, 383, 389, 394, 1047, 1050, 1051, 1056], "check_memori": [2, 389, 394, 1044], "check_metadata": 249, "check_methods_sample_order_invari": [1049, 1051], "check_methods_subset_invari": [1045, 1051], "check_nam": 928, "check_non_neg": 1056, "check_pairwise_arrai": [1046, 1056], "check_param": 994, "check_random_st": [2, 94, 231, 237, 245, 251, 382, 389, 394], "check_regressor_multioutput": 1047, "check_requires_y_non": 1051, "check_sample_weight_equival": 1056, "check_sample_weights_invari": 1056, "check_sample_weights_pandas_seri": 1045, "check_scalar": [2, 1051], "check_scor": [2, 394, 1055, 1056], "check_set_param": 1045, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1047, "check_transformers_unfitted_stateless": 1053, "check_x_i": [2, 382, 389, 994, 1041, 1045, 1046, 1051, 1056], "checkbox": 380, "checked_cv": 829, "checker": [2, 384, 829], "checkerboard": [2, 58, 409, 455, 457, 516, 518], "checking_statu": 267, "checkingclassifi": 1047, "checklist": [383, 384], "checkout": [378, 380, 384, 388], "checks_gener": 947, "checksum": [496, 1049], "cheeseman": 377, "chege": 1051, "chemic": 377, "chemometr": 377, "chen": [109, 110, 414, 419, 425, 479, 731, 761, 998, 1006, 1040, 1043, 1044, 1045, 1047, 1050, 1051, 1052, 1053, 1056], "chenal": [1046, 1047, 1049], "cherkasski": 1002, "chernei": 1055, "chernyi": 1051, "cherri": 384, "cherti": 1041, "cherubin": 1043, "chestervil": 327, "cheuk": [1045, 1046], "cheung": 1038, "chevali": 1049, "chevalli": 1054, "chevron": 51, "chi": [2, 103, 111, 135, 317, 372, 421, 524, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 643, 644, 645, 646, 647, 763, 764, 1032, 1037, 1042, 1043], "chi2": [2, 103, 420, 421, 456, 586, 597, 600, 601, 603, 604, 605, 610, 611, 614, 625, 643, 644, 645, 646, 647, 648, 764, 770, 779, 1037, 1044, 1051], "chi2_featur": 647, "chi2_kernel": [2, 408, 643, 647, 763, 770, 1004, 1038, 1056], "chi2_stat": 609, "chi2sampl": 643, "chiang": 1045, "chiara": [0, 371, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "chibuik": 1050, "chicco": 1055, "chief": 1030, "chieh": [1044, 1045], "chigurupati": 1049, "chih": [663, 1042], "chilamkurthi": 1043, "child": [151, 249, 354, 362, 368, 392, 394, 403, 412, 419, 446, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 917, 918, 919, 920, 962, 963, 965, 1022, 1044, 1056], "child_idx": 76, "children": [362, 412, 419, 445, 449, 467, 571, 1041, 1054], "children_": [76, 445, 449, 467], "children_left": 362, "children_right": 362, "chime": 379, "chin": [377, 1041], "china": [412, 511, 512, 589, 592], "chines": 1025, "chinmaya": 1044, "chinthala": 1044, "chiotelli": 1046, "chip": [408, 1030], "chisquar": 317, "chitteti": 1051, "chkoar": 1044, "chloe": 1051, "cho": 1048, "choe": 1046, "choi": [1002, 1055], "choic": [2, 43, 46, 64, 75, 80, 88, 98, 102, 109, 128, 151, 172, 173, 179, 183, 204, 216, 252, 266, 267, 271, 273, 276, 287, 298, 320, 324, 354, 355, 363, 367, 378, 385, 394, 398, 412, 414, 416, 418, 419, 421, 422, 456, 466, 475, 476, 477, 478, 479, 480, 482, 543, 545, 546, 552, 564, 643, 652, 653, 661, 663, 664, 666, 674, 685, 697, 710, 747, 838, 851, 852, 857, 859, 860, 886, 889, 898, 900, 909, 910, 939, 995, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1014, 1019, 1020, 1021, 1022, 1044, 1047, 1048, 1052, 1053], "choleski": [110, 215, 233, 389, 475, 476, 482, 532, 616, 653, 655, 656, 659, 660, 661, 663, 664, 674, 677, 679, 685, 687, 688, 692, 802, 803, 1002, 1040, 1044, 1046, 1049, 1052, 1053, 1056], "cholesky_delet": 389, "cholesterol": [170, 377], "chong": 541, "choo": [1052, 1053], "choos": [43, 50, 51, 79, 80, 83, 86, 93, 95, 99, 109, 127, 144, 156, 170, 188, 191, 208, 250, 267, 268, 278, 285, 358, 363, 367, 368, 369, 382, 385, 388, 393, 394, 406, 410, 411, 412, 414, 416, 419, 420, 423, 447, 448, 451, 453, 463, 528, 537, 543, 564, 565, 587, 607, 663, 664, 677, 679, 684, 692, 693, 694, 698, 731, 761, 805, 808, 809, 819, 876, 909, 910, 917, 918, 919, 920, 995, 996, 997, 1001, 1002, 1003, 1004, 1005, 1009, 1016, 1019, 1020, 1021, 1032, 1039, 1040, 1044, 1046, 1048], "choose_check_classifiers_label": 1047, "choose_random_sampl": 382, "choraria": 1049, "chose": [77, 188], "chosen": [47, 58, 80, 105, 156, 173, 188, 189, 204, 216, 232, 250, 266, 267, 268, 270, 276, 287, 355, 363, 367, 392, 411, 412, 414, 415, 419, 422, 444, 450, 453, 455, 457, 458, 464, 501, 528, 540, 562, 563, 564, 565, 566, 567, 569, 570, 652, 658, 661, 663, 664, 666, 668, 676, 681, 682, 683, 684, 685, 695, 699, 799, 802, 803, 805, 808, 809, 819, 839, 858, 909, 910, 917, 918, 919, 920, 953, 995, 998, 1000, 1002, 1003, 1005, 1007, 1012, 1013, 1020, 1022, 1045, 1053, 1054], "chou": [1044, 1045], "choudhari": [1041, 1042, 1051, 1053], "choudhri": 1055, "chowdhuri": [1045, 1051], "choyal": [1044, 1045], "chri": [0, 402, 1037, 1040, 1045, 1046, 1047, 1048, 1051], "chrissobel": 1050, "christ": 57, "christian": [0, 57, 354, 355, 375, 401, 1030, 1037, 1038, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "christianwaldmann": 1052, "christin": [1052, 1053], "christo": [1046, 1047, 1049, 1051, 1054], "christof": [1041, 1042], "christoph": [189, 417, 422, 537, 615, 616, 619, 624, 627, 802, 1002, 1007, 1038, 1042, 1045, 1048, 1049, 1050, 1051, 1052], "christopherlim98": 1051, "chrome": 1016, "chronolog": [375, 502], "chu": [856, 1053], "chuan": 1010, "chugh": 1049, "chuliang": 1050, "chun": [1048, 1049, 1051, 1052, 1053], "chung": [1044, 1045], "chunk": [2, 47, 83, 367, 368, 412, 417, 423, 448, 453, 472, 543, 783, 786, 837, 838, 844, 845, 846, 847, 848, 907, 1008, 1044, 1045, 1046, 1047, 1048], "chunk_siz": 1038, "chunker": 420, "church": [902, 1018], "chyi": [1040, 1041, 1042, 1043, 1044], "ci": [88, 368, 383, 384, 1008, 1043, 1045], "ciccolella": [697, 1003], "cice": [1013, 1051], "cichocki": [417, 543, 545, 552], "cimport": [381, 389, 1045], "cindi": [1042, 1050, 1054, 1055], "cio": 374, "cipri\u00e1n": 1051, "circl": [2, 70, 93, 126, 154, 155, 163, 240, 250, 300, 303, 309, 313, 315, 334, 347, 361, 376, 384, 388, 412, 456, 466, 519, 527, 769, 1021], "circle1": 99, "circle2": 99, "circle3": 99, "circle4": 99, "circleci": [52, 176, 178, 180, 181, 243, 259, 311, 380], "circlecl": 0, "circuit": [57, 1003], "circular": 53, "circumst": [128, 233, 1009, 1025], "circumstanti": 215, "cirru": [0, 380], "cisco": 51, "citat": [0, 374, 377, 392], "cite": [374, 392, 412], "citi": [413, 420, 470], "citizen": 1016, "city_categori": 413, "city_london": 413, "city_pari": 413, "city_sallisaw": 413, "cityblock": [75, 79, 412, 454, 461, 767, 783, 784, 785, 1009], "cividi": 75, "ciyou": 663, "cj": [1008, 1040, 1041, 1042, 1043, 1044], "cjlin": [193, 374, 491, 513, 514, 663, 1040], "ckdtree": [423, 448, 1039], "cl": [0, 47, 51, 387, 394, 919], "cla": 127, "clabel": [175, 226], "clae": 1045, "clai": 1037, "claim": [185, 194, 380, 468, 501, 557, 653, 674, 685, 711, 750, 755, 757, 835, 870, 873, 874, 882, 889, 1002, 1027], "claimamount": 233, "claimnb": [215, 233], "clair": 1037, "clamp": [905, 1019], "clang": [378, 381], "clara": [374, 1049], "clare": 1047, "clarifi": [388, 395, 798], "clariti": [168, 380, 388], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 87, 88, 89, 91, 103, 104, 118, 119, 126, 129, 131, 133, 134, 141, 143, 151, 152, 157, 170, 172, 173, 175, 176, 178, 180, 181, 183, 185, 188, 189, 193, 194, 205, 206, 207, 223, 227, 230, 231, 236, 242, 249, 250, 252, 258, 259, 260, 265, 266, 267, 268, 273, 275, 279, 283, 284, 287, 290, 292, 293, 296, 298, 299, 301, 302, 303, 304, 318, 322, 326, 328, 329, 330, 332, 334, 335, 338, 339, 340, 341, 343, 344, 347, 351, 354, 355, 356, 359, 362, 369, 372, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 389, 392, 393, 398, 403, 406, 407, 408, 410, 412, 413, 415, 417, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 505, 507, 508, 509, 513, 514, 515, 517, 519, 520, 524, 527, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 582, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 725, 727, 732, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 748, 759, 760, 762, 787, 788, 789, 791, 792, 793, 794, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 940, 941, 943, 944, 945, 947, 948, 958, 961, 962, 963, 966, 971, 973, 975, 976, 989, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1013, 1014, 1016, 1017, 1019, 1022, 1026, 1027, 1028, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "class1_1": 158, "class2_1": 158, "class_0": [223, 377, 515], "class_1": [223, 377, 515], "class_2": [377, 515], "class_count_": [844, 845, 846, 847, 848], "class_id": [282, 283], "class_index": 88, "class_label": [394, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 804, 827, 917, 919, 941, 1021], "class_likelihood_ratio": [2, 276, 1006, 1052], "class_log_prior_": [844, 845, 846, 848], "class_memb": 73, "class_member_mask": 82, "class_nam": [137, 266, 890, 921, 922, 923, 1022, 1053], "class_name0": [428, 446, 447, 449, 451, 453, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 875, 901, 902], "class_name1": [428, 446, 447, 449, 451, 453, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 875, 901, 902], "class_name2": [428, 446, 447, 449, 451, 453, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 875, 901, 902], "class_of_interest": [66, 282, 636, 1054], "class_prior": [375, 844, 845, 846, 848, 1038, 1041], "class_prior_": [556, 847], "class_protein_loc": 290, "class_sep": [169, 303, 520, 804, 827], "class_weight": [2, 45, 345, 394, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 682, 909, 911, 914, 916, 917, 919, 940, 941, 995, 1020, 1021, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1051, 1052], "class_weight_": [911, 914, 1052], "class_weight_vect": 940, "classes_": [133, 207, 224, 243, 249, 282, 332, 333, 380, 382, 394, 437, 441, 442, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 598, 599, 615, 636, 663, 664, 671, 673, 679, 680, 681, 702, 705, 707, 793, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 851, 856, 859, 866, 869, 876, 877, 880, 890, 904, 905, 906, 909, 911, 914, 917, 919, 922, 1006, 1017, 1020, 1038, 1041, 1042, 1044, 1047, 1049], "classic": [55, 210, 239, 258, 264, 347, 377, 384, 414, 416, 417, 447, 451, 453, 463, 497, 505, 509, 515, 546, 637, 638, 919, 920, 1000, 1002, 1005, 1008, 1016, 1025, 1037, 1038, 1042, 1051], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 103, 104, 105, 109, 110, 115, 119, 124, 135, 137, 139, 141, 142, 143, 144, 149, 151, 152, 154, 158, 160, 163, 165, 166, 167, 169, 170, 171, 177, 178, 188, 189, 193, 194, 205, 206, 207, 208, 215, 223, 225, 226, 227, 228, 230, 241, 243, 247, 248, 252, 255, 261, 262, 265, 266, 270, 271, 272, 273, 274, 282, 287, 288, 290, 291, 294, 295, 301, 302, 303, 305, 306, 307, 308, 309, 310, 315, 316, 317, 318, 332, 337, 338, 339, 343, 346, 348, 349, 350, 351, 352, 353, 355, 356, 363, 367, 369, 373, 374, 375, 377, 382, 385, 389, 393, 394, 407, 410, 411, 412, 413, 416, 417, 419, 420, 421, 429, 441, 473, 479, 486, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 515, 517, 519, 520, 524, 525, 527, 528, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 574, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 611, 614, 615, 616, 618, 619, 627, 636, 637, 638, 648, 663, 664, 671, 673, 679, 680, 681, 702, 708, 710, 713, 717, 718, 720, 721, 723, 731, 732, 734, 735, 739, 740, 743, 746, 748, 759, 761, 763, 764, 766, 787, 788, 789, 791, 792, 793, 794, 799, 801, 804, 805, 806, 808, 809, 810, 811, 819, 823, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 851, 856, 858, 859, 865, 866, 867, 869, 873, 876, 881, 882, 883, 884, 889, 890, 893, 895, 904, 905, 906, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 925, 938, 941, 950, 995, 996, 998, 999, 1000, 1003, 1004, 1008, 1011, 1013, 1014, 1016, 1017, 1019, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 89, 102, 103, 104, 105, 106, 118, 126, 131, 135, 136, 137, 138, 139, 142, 143, 144, 147, 154, 157, 158, 163, 166, 167, 168, 169, 174, 185, 190, 191, 193, 194, 205, 206, 207, 213, 215, 222, 224, 227, 230, 233, 242, 245, 247, 249, 250, 255, 266, 267, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 290, 291, 295, 301, 302, 304, 308, 311, 315, 324, 325, 329, 331, 332, 333, 335, 336, 338, 339, 341, 342, 344, 345, 346, 347, 351, 352, 356, 375, 377, 380, 382, 385, 392, 394, 403, 411, 412, 413, 416, 420, 421, 422, 429, 437, 438, 439, 440, 441, 442, 443, 492, 493, 501, 509, 517, 519, 520, 527, 536, 541, 542, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 572, 573, 574, 575, 598, 599, 607, 611, 615, 627, 634, 636, 637, 638, 654, 663, 664, 671, 673, 676, 677, 678, 679, 680, 681, 702, 703, 705, 707, 708, 712, 713, 714, 716, 717, 718, 723, 725, 727, 731, 732, 734, 735, 737, 739, 740, 743, 744, 745, 746, 748, 759, 761, 787, 788, 789, 792, 793, 794, 799, 801, 804, 805, 808, 809, 811, 819, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 856, 857, 859, 860, 865, 866, 867, 869, 870, 876, 889, 890, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 925, 928, 929, 942, 945, 947, 995, 996, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1014, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055], "classification_data": 46, "classification_report": [2, 45, 68, 102, 167, 271, 311, 332, 333, 827, 1006, 1039, 1041, 1045, 1046, 1047, 1049, 1053, 1055, 1056], "classificationcriterion": 1045, "classifier_": [89, 249], "classifier_01": 330, "classifier_05": 330, "classifier__c": 103, "classifier__criterion": 254, "classifier__max_depth": 254, "classifier__max_featur": 254, "classifier__min_samples_leaf": 190, "classifier__n_estim": 254, "classifier__n_neighbor": 295, "classifier_idx": 66, "classifier_model": 295, "classifier_other_threshold": 804, "classifier_tag": [928, 942], "classifier_tun": 827, "classifierchain": [2, 292, 394, 403, 841, 843, 1044, 1049, 1052, 1054, 1055], "classifiermixin": [2, 133, 249, 380, 382, 394, 416, 929, 1048], "classifiertag": [2, 928, 942], "classify__c": 104, "classmethod": [387, 442, 636, 637, 702, 703, 704, 705, 706, 707, 811, 828], "classnameprefixfeaturesoutmixin": [2, 382, 436, 1052], "claudio": [377, 1051, 1052, 1054, 1055], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 392], "clauss": 1054, "clb": 189, "clean": [85, 103, 214, 363, 372, 378, 418, 1012, 1016, 1047], "cleaner": 99, "cleanli": [95, 1037], "cleanup": [380, 1037], "clear": [43, 88, 93, 104, 188, 189, 318, 375, 379, 380, 382, 392, 393, 394, 410, 413, 418, 923, 924, 995, 1000, 1048, 1049, 1050, 1055], "clear_data_hom": 2, "clearer": [240, 1021], "clearli": [43, 93, 124, 189, 247, 347, 379, 380, 392, 394, 417, 419, 1007, 1013], "clegg": 1040, "clemen": 1041, "clement": [1044, 1045, 1049], "clenaghan": [1042, 1043], "cleveland": 375, "cleverless": 1039, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 84, 87, 91, 96, 103, 127, 139, 147, 150, 152, 157, 161, 163, 166, 167, 169, 174, 176, 191, 205, 207, 208, 212, 213, 219, 222, 224, 227, 228, 229, 230, 231, 238, 243, 244, 247, 250, 256, 262, 270, 274, 278, 279, 281, 284, 285, 296, 299, 300, 301, 304, 308, 315, 318, 322, 323, 324, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 358, 359, 362, 367, 375, 393, 394, 406, 413, 416, 419, 421, 442, 554, 555, 558, 560, 562, 564, 566, 568, 569, 572, 598, 599, 602, 637, 639, 643, 644, 645, 646, 647, 649, 650, 653, 657, 663, 664, 665, 666, 667, 671, 673, 674, 677, 678, 679, 680, 681, 682, 685, 702, 703, 705, 707, 716, 793, 805, 808, 809, 819, 837, 838, 839, 841, 844, 845, 846, 847, 848, 855, 856, 866, 909, 911, 913, 914, 917, 921, 923, 996, 998, 1002, 1006, 1007, 1009, 1010, 1012, 1013, 1020, 1021, 1022], "clf1": [69, 157, 158, 419, 574], "clf2": [69, 157, 158, 382, 419, 574], "clf3": [69, 157, 158, 382, 419, 574], "clf__": 274, "clf__alpha": 274, "clf__c": 413, "clf_descr": 354, "clf_en_lr": 206, "clf_err": 139, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 206, "clf_l2_lr": 206, "clf_list": [62, 64], "clf_name": [49, 354], "clf_no_weight": 352, "clf_pf": 847, "clf_prob": 63, "clf_sample_weight": 249, "clf_score": 61, "clf_sel": 191, "clf_select": 166, "clf_sgd": 229, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 162, "clf_weight": 352, "click": [244, 254, 274, 323, 329, 380, 382, 388, 400, 1030], "clickabl": 1051, "client": 382, "clifford": 1050, "cliffordemmanuel": 1050, "clim": 175, "climatologi": 410, "climb": [412, 452, 465], "clinton": 57, "clip": [62, 64, 233, 245, 313, 343, 640, 681, 746, 879, 1016, 1041, 1048, 1049, 1056], "clmbst": 1049, "clock": 43, "clone": [2, 89, 148, 180, 189, 249, 311, 329, 363, 378, 380, 383, 384, 386, 388, 394, 410, 413, 422, 441, 469, 574, 575, 602, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 811, 828, 833, 836, 840, 843, 869, 870, 906, 1026, 1037, 1043, 1045, 1049, 1053, 1054], "clone_kernel": [615, 616, 1047], "clone_with_theta": [180, 422, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "cloned_classifi": 437, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 80, 87, 93, 99, 109, 110, 113, 126, 138, 145, 148, 152, 156, 172, 173, 176, 177, 178, 179, 180, 188, 190, 200, 219, 221, 236, 242, 248, 252, 258, 264, 273, 274, 286, 287, 299, 300, 313, 322, 343, 347, 348, 355, 363, 375, 380, 382, 383, 384, 392, 394, 395, 410, 412, 415, 416, 419, 422, 454, 459, 476, 513, 514, 537, 568, 633, 648, 652, 666, 677, 679, 692, 710, 751, 802, 823, 824, 844, 845, 846, 848, 855, 936, 995, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1013, 1016, 1021, 1025, 1030, 1040, 1044, 1045, 1046], "close_pric": 51, "closer": [43, 72, 124, 126, 155, 170, 172, 189, 195, 219, 347, 356, 410, 412, 417, 453, 558, 633, 717, 851, 852, 857, 859, 860, 861, 1021, 1044], "closest": [64, 80, 97, 219, 382, 412, 444, 446, 447, 451, 452, 453, 463, 658, 784, 785, 839, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 997, 1000, 1007, 1009], "closur": 55, "cloud": [78, 115, 120, 122, 185, 388, 417, 538, 546, 697, 1006, 1024, 1025, 1027], "cloudpickl": 1032, "clouldpickl": 406, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 377, "clue": [375, 388, 1003], "clump": 239, "clust": [98, 454, 461], "cluster": [2, 48, 53, 54, 56, 58, 61, 77, 78, 80, 83, 84, 86, 87, 90, 92, 94, 95, 102, 111, 127, 133, 137, 144, 152, 165, 180, 191, 212, 236, 238, 239, 240, 246, 252, 258, 259, 260, 261, 274, 299, 300, 302, 316, 323, 327, 332, 333, 334, 336, 345, 353, 354, 356, 362, 369, 373, 375, 377, 380, 382, 385, 392, 394, 407, 408, 413, 418, 420, 423, 426, 427, 430, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 492, 507, 508, 509, 516, 517, 518, 519, 520, 527, 535, 546, 549, 558, 569, 571, 594, 595, 596, 636, 696, 697, 700, 709, 710, 715, 719, 720, 722, 724, 730, 736, 741, 742, 760, 762, 783, 784, 791, 797, 798, 800, 802, 803, 861, 862, 870, 874, 881, 889, 945, 947, 966, 989, 996, 1003, 1005, 1009, 1012, 1014, 1016, 1019, 1023, 1025, 1026, 1027, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "cluster_1": 152, "cluster_2": 152, "cluster_al": [452, 465], "cluster_cent": [73, 94, 96, 97, 465], "cluster_center_indic": [444, 458], "cluster_centers_": [77, 78, 83, 91, 93, 94, 96, 97, 121, 326, 355, 444, 447, 451, 452, 453], "cluster_centers_indic": [73, 458], "cluster_centers_indices_": [73, 444], "cluster_data": 92, "cluster_doc": 57, "cluster_hierarchy_": [412, 454], "cluster_id": [191, 355], "cluster_id_to_feature_id": 191, "cluster_label": [89, 93], "cluster_method": 454, "cluster_optics_dbscan": [2, 98, 412], "cluster_optics_xi": 2, "cluster_qr": [80, 412, 456, 466, 1051], "cluster_s": 355, "cluster_selection_epsilon": 450, "cluster_selection_method": 450, "cluster_std": [63, 73, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 227, 242, 261, 316, 345, 376, 517], "cluster_word": 57, "clusterer_": 89, "clustering_algorithm": [78, 79, 95], "clustering_metr": 91, "clustermixin": [2, 382, 1054], "clusters_std": 345, "clyde": 1042, "cl\u00e9ment": [1046, 1050, 1052], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 100, 111, 113, 121, 124, 127, 137, 143, 144, 163, 168, 175, 176, 189, 199, 207, 224, 227, 228, 231, 236, 237, 238, 243, 246, 247, 251, 256, 266, 267, 268, 293, 296, 297, 299, 303, 306, 308, 310, 311, 313, 315, 324, 327, 332, 333, 337, 339, 340, 341, 343, 344, 345, 351, 352, 359, 377, 413, 702, 922, 1006, 1016, 1022], "cm2013": 412, "cm_bright": [67, 308, 315], "cm_displai": 243, "cm_piyg": 315, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 80, 81, 83, 84, 86, 87, 91, 111, 113, 121, 124, 127, 131, 137, 143, 144, 163, 168, 175, 176, 189, 195, 199, 200, 206, 207, 224, 227, 228, 229, 231, 236, 237, 238, 246, 247, 251, 266, 268, 293, 297, 299, 301, 302, 304, 306, 308, 310, 311, 313, 315, 332, 333, 337, 339, 340, 341, 342, 343, 344, 345, 348, 351, 352, 359, 702], "cmap_bold": [301, 304], "cmap_cv": 268, "cmap_data": 268, "cmap_light": [301, 304], "cmcsa": 51, "cmd": 378, "cmu": 904, "cname": 77, "cnb": 1008, "cnp": 381, "cnx": 1045, "co": [2, 43, 51, 53, 56, 58, 74, 75, 102, 153, 155, 177, 185, 188, 216, 237, 273, 288, 326, 336, 354, 355, 356, 361, 384, 418, 420, 453, 455, 457, 492, 516, 596, 704, 724, 769, 800, 1001, 1016, 1027, 1030, 1031, 1032], "co2": [171, 179, 185, 422, 501, 616, 620, 627, 628, 630, 1027, 1044], "co2_data": 177, "co2_kernel": 177, "coars": [43, 144, 386, 452, 465], "coarser": [144, 148], "coast": [50, 306], "coastlin": [50, 170, 306, 377], "coca": 51, "cock": [156, 1046], "cockburn": 1039, "coclust": [57, 409, 455, 518], "cocoa": 1030, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 374, 378, 379, 381, 383, 384, 389, 392, 394, 395, 398, 403, 406, 408, 411, 412, 419, 420, 446, 447, 451, 453, 463, 501, 531, 535, 536, 542, 543, 547, 548, 550, 551, 553, 571, 577, 586, 587, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 687, 688, 690, 691, 716, 837, 838, 839, 876, 883, 995, 1003, 1007, 1016, 1018, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1037, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "code_book_": 839, "code_init": [536, 550], "code_s": [290, 839, 1007], "codebas": [328, 363, 380, 381, 382, 420, 1037, 1043], "codebook": [290, 571, 839], "codecov": 388, "codeofconduct": 380, "coder": [130, 547, 721], "codevig": 1043, "coef": [49, 87, 130, 187, 188, 195, 200, 206, 207, 209, 214, 218, 219, 220, 224, 230, 231, 256, 286, 310, 328, 351, 529, 651, 652, 654, 657, 658, 664, 665, 666, 667, 668, 674, 677, 679, 685, 686, 687, 688, 689, 690, 691, 692, 1010], "coef0": [193, 347, 349, 456, 540, 644, 645, 648, 780, 782, 911, 912, 913, 914, 915, 1004, 1021], "coef_": [46, 49, 53, 87, 115, 166, 167, 170, 187, 188, 195, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 218, 219, 220, 224, 230, 231, 250, 256, 286, 287, 320, 326, 341, 348, 351, 354, 363, 375, 382, 394, 415, 421, 469, 486, 487, 488, 554, 598, 599, 602, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 909, 910, 911, 912, 913, 914, 915, 989, 1000, 1002, 1020, 1021, 1037, 1039, 1042, 1044, 1049, 1051, 1054, 1055], "coef_agglomeration_": 87, "coef_en_lr": 206, "coef_i": 188, "coef_init": [651, 652, 657, 658, 665, 666, 667, 668, 671, 672, 673, 681, 682, 683, 686, 689], "coef_l": 203, "coef_l1_lr": 206, "coef_l2_lr": 206, "coef_lar": 203, "coef_lasso": 203, "coef_lasso_": 209, "coef_multi_task_lasso_": 209, "coef_p": 203, "coef_path": [658, 668, 689], "coef_path_": [655, 656, 659, 660, 1002], "coef_path_continu": [658, 668, 689], "coef_path_lar": [658, 668, 689], "coef_pl": 203, "coef_positive_lar": 203, "coef_ridg": 198, "coef_selection_": 87, "coeff": 685, "coeff_diff": 201, "coeffeci": 1046, "coeffici": [2, 25, 46, 49, 73, 82, 91, 93, 109, 110, 113, 121, 124, 161, 167, 172, 185, 186, 187, 194, 198, 200, 201, 203, 206, 208, 209, 210, 211, 212, 213, 217, 218, 230, 233, 256, 273, 287, 310, 320, 324, 325, 326, 347, 350, 354, 355, 356, 367, 376, 382, 394, 397, 414, 415, 417, 421, 422, 425, 435, 456, 469, 471, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 501, 529, 531, 532, 536, 540, 542, 544, 547, 548, 553, 557, 559, 561, 563, 565, 567, 570, 573, 575, 587, 594, 598, 602, 614, 616, 619, 632, 640, 641, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 706, 708, 721, 724, 734, 739, 743, 748, 755, 758, 780, 782, 790, 791, 793, 797, 798, 801, 820, 832, 835, 842, 843, 852, 860, 867, 870, 882, 889, 909, 910, 911, 912, 913, 914, 915, 918, 920, 997, 1000, 1002, 1020, 1021, 1027, 1037, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1054], "coefs_": [208, 310, 866, 867, 1010, 1042], "coefs_cf": 320, "coefs_enet": 203, "coefs_lar": 203, "coefs_lasso": 203, "coefs_no_cf": 320, "coefs_path": 664, "coefs_paths_": [664, 1047], "coefs_positive_enet": 203, "coefs_positive_lar": 203, "coefs_positive_lasso": 203, "coelho": [1038, 1040, 1041, 1045], "coelhudo": 1049, "cognit": [170, 377], "cohen": [2, 721, 1045], "cohen_kappa_scor": [2, 1006, 1042, 1044, 1056], "coher": 412, "cohort": 159, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 86, 87, 89, 95, 99, 100, 124, 185, 412, 420, 445, 466, 1018, 1027], "coincid": [176, 217, 422], "col": [52, 57, 62, 64, 73, 77, 82, 88, 92, 96, 97, 102, 105, 141, 157, 177, 235, 252, 351, 516, 518], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [427, 455, 457], "col_indic": 151, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 293, "cole": 1046, "coleman": [1038, 1039], "colgat": [51, 55], "colin": [45, 375, 1043], "collabor": 380, "collaps": [43, 189, 252, 313, 343, 392], "colleagu": 273, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 105, 139, 151, 152, 159, 170, 177, 184, 191, 202, 208, 238, 245, 276, 280, 355, 356, 367, 375, 377, 384, 398, 416, 417, 419, 420, 450, 468, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 574, 575, 586, 588, 589, 593, 594, 595, 596, 637, 734, 735, 743, 783, 788, 789, 792, 807, 811, 812, 814, 828, 976, 979, 995, 1001, 1002, 1006, 1012, 1017, 1026, 1030, 1039, 1049], "colleg": [0, 187], "college_degre": 187, "collid": 420, "collin": 1040, "collinear": [188, 191, 220, 233, 419, 572, 653, 674, 685, 882, 1002, 1037, 1056], "collis": [355, 356, 420, 587, 594], "collot": [1051, 1052], "colombia": [50, 306, 375, 503], "colon": 380, "coloni": 375, "color": [43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 73, 75, 77, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 116, 118, 119, 121, 122, 123, 125, 127, 128, 129, 130, 135, 136, 141, 144, 145, 147, 150, 151, 152, 153, 154, 156, 158, 161, 163, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 188, 190, 191, 195, 196, 198, 199, 200, 202, 203, 204, 205, 207, 209, 211, 213, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 232, 233, 236, 237, 238, 240, 242, 246, 247, 248, 250, 253, 258, 259, 260, 261, 262, 263, 264, 267, 268, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 292, 295, 298, 299, 300, 301, 304, 305, 306, 308, 313, 314, 315, 317, 318, 319, 323, 329, 334, 335, 337, 341, 342, 343, 344, 345, 347, 349, 350, 351, 359, 360, 375, 377, 388, 412, 419, 420, 498, 499, 511, 588, 589, 1020, 1022, 1042, 1047, 1049, 1054], "color_continuous_scal": 274, "color_intens": 48, "color_it": [259, 263, 264], "color_map": 337, "color_palett": [72, 136, 151, 263], "colorbar": [43, 50, 66, 75, 121, 131, 143, 152, 168, 173, 175, 176, 178, 189, 235, 246, 262, 284, 313, 343, 702, 1049], "colorbarbas": 313, "colorblind": [72, 136, 151], "coloring_matrix": [109, 110], "colormap": [121, 180, 343, 702, 1050], "colors_": 77, "colors_list": 141, "colour": [261, 377, 420, 592, 1007], "colt": [731, 761, 1006], "colton": 998, "columbia": 0, "column": [2, 43, 47, 52, 58, 59, 93, 101, 104, 107, 118, 142, 144, 145, 148, 151, 153, 156, 170, 177, 183, 185, 187, 188, 189, 190, 191, 204, 215, 216, 219, 223, 233, 244, 251, 252, 253, 256, 263, 267, 273, 274, 284, 285, 287, 292, 310, 318, 319, 320, 324, 325, 326, 327, 329, 330, 354, 355, 356, 367, 374, 375, 377, 380, 382, 386, 389, 392, 393, 394, 409, 412, 413, 415, 417, 419, 420, 421, 424, 427, 455, 457, 468, 470, 471, 475, 476, 482, 491, 492, 493, 494, 495, 497, 499, 501, 505, 506, 507, 509, 510, 513, 514, 515, 516, 518, 520, 531, 536, 539, 542, 546, 547, 553, 560, 562, 563, 566, 567, 569, 570, 571, 572, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 632, 635, 637, 638, 639, 651, 653, 657, 663, 665, 667, 669, 670, 674, 685, 690, 691, 702, 718, 723, 724, 734, 735, 743, 759, 768, 773, 774, 775, 778, 788, 789, 792, 793, 805, 808, 809, 819, 830, 835, 840, 843, 844, 845, 846, 847, 848, 849, 850, 869, 873, 874, 875, 876, 882, 883, 884, 888, 889, 890, 891, 893, 894, 895, 899, 900, 909, 911, 914, 917, 919, 926, 931, 935, 936, 941, 953, 968, 981, 982, 984, 992, 995, 996, 998, 1002, 1004, 1006, 1007, 1014, 1016, 1021, 1026, 1027, 1037, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "column_labels_": [58, 59, 409, 455, 457], "column_nam": 233, "column_or_1d": [2, 389, 1048, 1052], "column_result": 274, "column_stack": [76, 308, 315], "column_to_drop": 188, "column_tran": [233, 413], "column_transform": 330, "columnar": [374, 468, 1025], "columns_": [57, 409, 427, 455, 457], "columns_to_drop": 267, "columntransform": [2, 43, 102, 103, 156, 188, 189, 190, 215, 233, 244, 252, 254, 256, 319, 323, 325, 326, 327, 329, 372, 374, 392, 393, 403, 470, 471, 634, 874, 995, 996, 1026, 1032, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "columntransformercolumntransform": [103, 156, 188, 190, 244, 254, 319, 323, 326], "columntransformerinot": [156, 189], "columnwis": 417, "com": [51, 102, 293, 354, 375, 378, 380, 384, 385, 386, 388, 392, 412, 446, 539, 546, 676, 710, 1044, 1047], "coma": 1030, "comaniciu": [96, 412, 452], "comapar": 412, "comb": 1051, "combat": [308, 417], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 94, 102, 103, 105, 106, 107, 118, 121, 129, 130, 134, 145, 146, 150, 151, 159, 172, 178, 183, 184, 185, 188, 200, 215, 219, 232, 233, 239, 242, 244, 247, 269, 273, 274, 282, 284, 285, 302, 309, 319, 324, 325, 327, 346, 347, 356, 359, 367, 372, 376, 377, 380, 385, 393, 394, 408, 409, 410, 412, 413, 416, 417, 418, 419, 420, 421, 422, 424, 425, 449, 468, 470, 471, 477, 479, 480, 483, 484, 485, 493, 501, 513, 514, 520, 526, 529, 531, 536, 542, 543, 545, 547, 552, 554, 565, 567, 570, 572, 573, 615, 619, 621, 626, 629, 635, 639, 648, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 671, 673, 677, 678, 679, 680, 681, 683, 684, 686, 689, 697, 706, 735, 793, 805, 808, 809, 816, 817, 830, 832, 836, 853, 868, 869, 870, 874, 882, 883, 884, 889, 909, 979, 995, 998, 999, 1002, 1006, 1007, 1009, 1012, 1016, 1019, 1020, 1022, 1023, 1027, 1030, 1037, 1042, 1045, 1048, 1049, 1050, 1052, 1053], "combinator": 815, "combined_featur": 106, "combsccod": 1051, "comcast": 51, "come": [82, 100, 102, 111, 116, 126, 170, 172, 247, 287, 322, 354, 355, 367, 369, 373, 377, 380, 381, 384, 388, 392, 394, 398, 406, 411, 412, 416, 419, 420, 443, 454, 460, 476, 555, 710, 800, 826, 911, 914, 958, 995, 996, 1000, 1003, 1005, 1009, 1012, 1021, 1037, 1048, 1051, 1053], "comedi": 880, "comfort": [88, 419], "command": [246, 367, 368, 378, 380, 384, 386, 388, 398, 420, 513, 1025, 1039], "comment": [80, 354, 378, 379, 380, 381, 383, 384, 388, 491, 584, 1006], "commerc": 1030, "commerci": [416, 1030], "commit": [383, 384, 388, 1029, 1037, 1038, 1039, 1040], "committ": [380, 1037], "commod": 1006, "common": [2, 52, 54, 55, 57, 124, 167, 170, 185, 186, 187, 211, 219, 220, 268, 273, 280, 290, 324, 347, 354, 356, 362, 367, 374, 380, 382, 388, 390, 392, 393, 397, 398, 403, 409, 410, 412, 413, 416, 418, 421, 422, 451, 469, 471, 501, 595, 637, 658, 677, 678, 706, 751, 758, 774, 806, 807, 810, 820, 822, 823, 824, 825, 826, 832, 835, 870, 872, 880, 881, 882, 887, 889, 894, 895, 897, 898, 899, 900, 926, 928, 955, 958, 995, 996, 1002, 1009, 1012, 1016, 1021, 1022, 1025, 1026, 1027, 1030, 1032, 1037, 1045, 1047, 1048, 1052], "common_nod": 362, "common_node_id": 362, "common_param": [90, 148, 151, 189, 248, 275, 276, 347], "commonli": [215, 270, 286, 347, 373, 394, 412, 413, 422, 619, 763, 764, 802, 838, 881, 1003, 1004, 1006, 1007, 1009, 1053], "commun": [249, 373, 379, 385, 388, 394, 395, 412, 419, 543, 545, 552, 697, 715, 881, 996, 1003, 1009, 1016, 1020, 1025, 1029, 1030, 1045, 1046], "commut": [43, 52], "comp": [57, 115, 116, 124, 131, 311, 336, 354, 355, 356, 375], "comp_cov": [473, 474, 475, 476, 477, 478, 479, 480], "compact": [170, 193, 313, 367, 377, 849, 850, 1022, 1039], "compani": [215, 233, 411, 412, 1030], "companion": [380, 1016], "companioni": 1037, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 91, 97, 100, 103, 104, 105, 106, 111, 112, 114, 116, 124, 128, 130, 134, 135, 136, 138, 140, 144, 145, 146, 148, 150, 151, 152, 154, 156, 159, 162, 170, 176, 183, 184, 185, 188, 189, 190, 191, 194, 196, 198, 200, 202, 203, 204, 210, 212, 215, 216, 218, 219, 221, 223, 225, 229, 232, 233, 235, 236, 239, 241, 244, 247, 250, 252, 253, 255, 260, 261, 265, 268, 270, 271, 272, 274, 276, 278, 280, 282, 284, 285, 286, 288, 290, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 307, 310, 312, 314, 317, 318, 320, 324, 347, 354, 355, 356, 361, 362, 363, 369, 375, 377, 380, 382, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 421, 422, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 462, 467, 468, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 494, 501, 507, 509, 517, 519, 527, 529, 533, 536, 542, 544, 546, 550, 551, 556, 557, 566, 567, 568, 569, 570, 636, 644, 649, 650, 658, 660, 662, 663, 668, 671, 673, 681, 682, 689, 700, 710, 717, 720, 736, 743, 748, 791, 803, 805, 810, 819, 832, 835, 842, 851, 855, 858, 862, 866, 867, 869, 870, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 894, 895, 896, 897, 898, 899, 900, 909, 910, 911, 913, 914, 995, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1027, 1037, 1039, 1044, 1045, 1050], "comparison": [47, 51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 90, 91, 92, 93, 94, 96, 102, 110, 118, 120, 122, 123, 125, 127, 131, 135, 138, 141, 148, 151, 154, 158, 159, 164, 171, 177, 178, 179, 181, 185, 190, 198, 200, 201, 202, 203, 206, 213, 215, 219, 230, 233, 234, 237, 238, 239, 240, 241, 245, 246, 260, 265, 267, 268, 269, 270, 277, 285, 287, 292, 302, 308, 315, 317, 318, 322, 324, 337, 340, 349, 353, 354, 355, 363, 375, 377, 394, 410, 412, 414, 415, 417, 421, 422, 441, 442, 447, 449, 450, 451, 453, 486, 487, 488, 492, 509, 517, 519, 520, 527, 530, 540, 546, 554, 555, 558, 569, 570, 586, 587, 593, 594, 595, 596, 611, 613, 615, 616, 620, 627, 630, 636, 644, 648, 664, 677, 693, 694, 695, 696, 697, 709, 743, 748, 784, 793, 805, 806, 807, 808, 810, 811, 819, 821, 822, 823, 824, 825, 826, 835, 844, 847, 851, 866, 867, 870, 882, 883, 887, 889, 890, 894, 895, 896, 897, 898, 899, 900, 909, 911, 912, 914, 915, 917, 995, 999, 1000, 1003, 1006, 1008, 1009, 1012, 1021, 1027, 1034], "compat": [249, 276, 293, 323, 374, 383, 389, 390, 392, 394, 398, 403, 406, 420, 467, 473, 513, 571, 582, 594, 608, 619, 620, 623, 624, 625, 627, 628, 637, 638, 639, 663, 664, 678, 680, 779, 783, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 853, 854, 869, 874, 882, 883, 921, 922, 928, 931, 947, 948, 968, 1003, 1009, 1011, 1025, 1026, 1030, 1032, 1037, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "compens": [112, 187, 189, 193, 215, 233, 274, 414, 417], "compet": [43, 188], "competit": [43, 148, 354, 419, 649, 1009], "compil": [156, 293, 356, 367, 368, 381, 382, 383, 388, 389, 392, 1025, 1037], "compl": 91, "complain": 1055, "complement": [2, 189, 283, 354, 637, 638, 807, 822, 825, 835, 844, 845, 846, 847, 848, 1013, 1028, 1032, 1045], "complementari": [43, 420], "complementnb": [2, 274, 354, 844, 845, 847, 848, 1008, 1045, 1049, 1050, 1052], "complementnbcomplementnb": 274, "complet": [0, 2, 43, 72, 73, 74, 79, 82, 85, 91, 95, 116, 151, 154, 165, 167, 170, 185, 190, 191, 221, 241, 242, 249, 252, 267, 271, 318, 320, 322, 355, 363, 375, 380, 384, 385, 388, 392, 413, 416, 417, 419, 420, 445, 449, 453, 456, 466, 467, 468, 471, 500, 541, 542, 543, 544, 549, 551, 563, 574, 575, 586, 592, 593, 594, 596, 632, 633, 634, 635, 650, 654, 662, 676, 678, 709, 710, 720, 721, 722, 734, 736, 741, 742, 762, 791, 800, 837, 840, 843, 852, 868, 869, 870, 871, 938, 990, 1000, 1002, 1006, 1007, 1009, 1021, 1022, 1025, 1027, 1037, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "completed_fac": 251, "completeness_scor": [2, 73, 82, 91, 323, 355, 412, 741, 742, 800, 1006], "complex": [42, 48, 49, 54, 58, 104, 141, 156, 169, 172, 177, 183, 185, 219, 229, 232, 241, 248, 249, 252, 265, 271, 274, 277, 282, 314, 322, 325, 326, 330, 331, 343, 347, 356, 357, 362, 376, 380, 385, 392, 412, 413, 417, 419, 423, 444, 448, 451, 452, 454, 471, 493, 505, 506, 507, 519, 539, 546, 556, 562, 563, 564, 565, 567, 569, 570, 609, 635, 643, 661, 663, 681, 682, 739, 755, 805, 835, 837, 865, 869, 870, 874, 882, 889, 905, 909, 912, 915, 917, 918, 919, 920, 995, 996, 998, 999, 1001, 1003, 1005, 1007, 1012, 1016, 1019, 1026, 1027, 1028, 1030, 1032, 1038, 1040, 1046, 1047, 1050], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [380, 394, 947, 1026], "complianc": [0, 151], "compliant": [327, 380, 1055, 1056], "complic": [64, 249, 308, 386, 422, 699, 1009], "compon": [2, 11, 43, 44, 55, 79, 91, 95, 102, 105, 114, 115, 118, 122, 123, 125, 126, 127, 128, 129, 131, 154, 162, 177, 185, 187, 200, 235, 246, 247, 250, 258, 259, 262, 263, 264, 272, 274, 293, 294, 295, 296, 304, 305, 311, 318, 324, 367, 372, 375, 380, 382, 386, 389, 406, 408, 412, 413, 415, 420, 422, 424, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 507, 509, 520, 526, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 802, 803, 804, 805, 808, 809, 819, 827, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 952, 953, 998, 1003, 1005, 1016, 1018, 1021, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1037, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "component_1": 263, "component_2": 263, "component_indices_": [644, 1050], "components_": [45, 54, 91, 116, 121, 123, 124, 131, 246, 247, 311, 318, 326, 394, 413, 417, 448, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 644, 858, 865, 901, 902, 998, 1018, 1041, 1043, 1049, 1052, 1055], "components_col": 105, "compos": [2, 43, 44, 62, 101, 102, 103, 107, 116, 137, 145, 156, 185, 188, 189, 190, 215, 217, 233, 244, 252, 254, 256, 287, 290, 319, 323, 325, 326, 327, 329, 330, 393, 403, 412, 413, 416, 468, 469, 470, 471, 520, 558, 617, 1005, 1007, 1027, 1037], "composit": [7, 35, 244, 323, 372, 416, 663, 793, 996, 1002, 1015, 1032, 1038], "compound": [43, 233, 420, 615, 617, 685, 729, 757, 1002], "compoundkernel": [2, 615, 1051], "comprehens": [347, 388, 420, 763, 764, 1004, 1030, 1045], "compress": [42, 50, 55, 99, 185, 290, 313, 375, 406, 412, 417, 420, 421, 657, 677, 697, 839, 882, 976, 979, 991, 1002, 1007, 1016, 1027, 1037, 1046], "compressed_raccoon_kmean": 86, "compressed_raccoon_uniform": 86, "compris": [102, 148, 271, 354, 355, 356, 375, 392, 417, 419, 520, 812, 1003], "compromis": [48, 64, 189, 367, 380, 652, 684, 1009, 1040], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 80, 85, 87, 90, 91, 93, 94, 102, 104, 110, 111, 112, 113, 122, 130, 138, 142, 143, 146, 147, 148, 149, 150, 151, 169, 170, 172, 177, 179, 180, 183, 188, 189, 190, 191, 193, 196, 197, 200, 201, 202, 203, 204, 215, 217, 219, 223, 229, 232, 233, 236, 239, 243, 245, 246, 248, 252, 253, 255, 267, 269, 271, 273, 274, 275, 276, 280, 282, 284, 293, 295, 297, 299, 300, 302, 303, 306, 313, 322, 326, 327, 330, 333, 335, 343, 347, 350, 354, 355, 356, 362, 368, 369, 374, 375, 377, 380, 385, 386, 387, 389, 392, 393, 394, 397, 398, 406, 407, 408, 409, 410, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 461, 463, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 521, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 587, 590, 591, 594, 595, 596, 598, 599, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 730, 731, 732, 734, 735, 736, 739, 741, 743, 744, 745, 748, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 797, 798, 799, 801, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 874, 875, 878, 879, 884, 885, 886, 887, 888, 889, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 914, 916, 917, 918, 919, 920, 950, 951, 952, 953, 970, 971, 978, 980, 986, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "computation": [37, 53, 109, 121, 141, 147, 156, 172, 293, 347, 354, 366, 381, 392, 412, 413, 416, 417, 419, 422, 543, 637, 638, 676, 768, 805, 807, 808, 809, 819, 832, 1002, 1003, 1005, 1013, 1014, 1018, 1032, 1041], "compute_class_weight": [2, 394, 1040, 1051], "compute_corrected_ttest": 273, "compute_dist": [445, 449, 1049], "compute_full_tre": [445, 449, 1041], "compute_import": 1039, "compute_inverse_compon": [901, 902, 1018], "compute_inverse_transform": 1051, "compute_label": [446, 453], "compute_node_depth": 362, "compute_optics_graph": [2, 459, 460, 1054], "compute_sample_weight": [2, 1051], "compute_scor": [107, 128, 195, 196, 649, 650, 1046], "compute_sourc": 424, "computed_scor": 650, "con": [406, 594, 1005], "concat": [43, 183, 187, 204, 233, 882], "concaten": [2, 63, 70, 74, 83, 94, 101, 104, 112, 137, 152, 166, 180, 185, 195, 198, 207, 229, 230, 236, 242, 258, 262, 263, 269, 278, 280, 281, 282, 283, 298, 311, 317, 320, 333, 342, 346, 354, 413, 468, 471, 509, 514, 536, 542, 546, 547, 604, 786, 805, 868, 869, 871, 874, 882, 914, 1007, 1027, 1038], "concav": [170, 330, 377], "concentr": [46, 48, 98, 119, 126, 135, 154, 177, 184, 185, 240, 257, 259, 264, 284, 303, 315, 334, 376, 380, 419, 447, 524, 802, 1005, 1012, 1027], "concentrations_prior": 258, "concept": [2, 112, 141, 146, 249, 282, 392, 412, 418, 420, 998, 1006, 1009, 1022, 1030], "conceptu": [377, 419, 1004], "concern": [37, 56, 71, 108, 114, 117, 120, 132, 134, 164, 171, 182, 185, 192, 194, 234, 257, 263, 267, 289, 291, 294, 307, 312, 331, 338, 353, 357, 367, 382, 406, 1003, 1018], "concis": [64, 215, 380, 385, 1048, 1050], "conclud": [135, 188, 196, 233, 273, 356, 363, 395, 869], "conclus": [43, 126, 188, 190, 215, 217, 273, 275, 363, 419], "concomit": [654, 1002], "concret": [219, 381, 395, 411, 421, 679, 680, 901, 902, 1002, 1020, 1025], "concurr": [394, 420, 971, 1049, 1051], "conda": [322, 323, 324, 325, 326, 327, 328, 329, 330, 368, 380, 381, 383, 384, 386, 388, 398, 399, 405, 406, 1022], "conda_prefix": 386, "condarc": 378, "condens": [193, 450], "condit": [2, 43, 51, 52, 62, 64, 113, 143, 148, 185, 186, 188, 204, 217, 220, 233, 249, 253, 276, 325, 362, 386, 392, 397, 408, 409, 410, 411, 412, 414, 417, 419, 421, 455, 468, 475, 476, 477, 482, 501, 518, 528, 529, 541, 544, 545, 546, 548, 550, 552, 554, 555, 567, 632, 637, 638, 648, 655, 656, 657, 659, 660, 661, 675, 677, 678, 679, 680, 687, 688, 692, 702, 717, 722, 723, 741, 742, 800, 844, 845, 846, 847, 848, 867, 870, 873, 882, 883, 886, 890, 953, 977, 1000, 1002, 1003, 1004, 1006, 1008, 1009, 1011, 1016, 1022, 1027, 1032, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1049, 1051, 1052, 1053, 1055], "condition": [51, 64, 215, 410, 414, 763, 1000], "condition2": 156, "conduct": [187, 273, 422, 1029, 1051], "conf": [46, 64, 384, 410, 416, 844, 1008, 1051], "confer": [267, 273, 375, 412, 417, 423, 443, 448, 454, 516, 540, 568, 701, 713, 731, 761, 865, 866, 867, 1006, 1012, 1018, 1022], "confid": [52, 61, 62, 63, 64, 151, 177, 179, 259, 273, 276, 335, 395, 410, 422, 641, 663, 664, 671, 673, 676, 679, 680, 681, 703, 707, 712, 725, 731, 732, 744, 745, 761, 794, 837, 876, 909, 911, 914, 1002, 1005, 1006, 1007, 1012, 1019, 1020, 1021, 1030, 1047], "config": [52, 368, 378, 380, 381, 388, 631, 1045], "config_context": [2, 256, 367, 368, 408, 631, 907, 1044, 1050, 1053], "configur": [2, 3, 46, 49, 64, 103, 104, 189, 249, 254, 256, 287, 320, 354, 366, 378, 380, 382, 386, 388, 392, 394, 398, 403, 408, 413, 420, 421, 436, 446, 447, 449, 451, 453, 456, 466, 468, 472, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 631, 632, 633, 634, 635, 637, 640, 643, 644, 645, 646, 647, 693, 694, 695, 696, 697, 699, 700, 793, 805, 819, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 907, 971, 972, 1003, 1006, 1016, 1021, 1025, 1032, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054], "confirm": [43, 52, 116, 138, 145, 148, 151, 190, 215, 217, 267, 276, 279, 282, 318, 356, 384, 995, 1016, 1045], "conflict": [378, 380, 384, 388, 398, 1044, 1045], "conform": [52, 380, 586, 633, 837, 838, 1006, 1025, 1026, 1044, 1050], "confound": [187, 188], "confus": [2, 68, 185, 243, 265, 267, 282, 332, 333, 354, 394, 472, 509, 636, 657, 702, 718, 720, 723, 734, 735, 743, 759, 789, 792, 835, 907, 914, 1027, 1037, 1038, 1042, 1046, 1047, 1049, 1050, 1051, 1052], "confusingli": 378, "confusion_matrix": [2, 68, 243, 266, 267, 330, 332, 333, 702, 718, 759, 804, 832, 1006, 1038, 1043, 1044, 1047, 1048, 1050, 1054], "confusion_matrix_scor": 1006, "confusionmatrixdisplai": [2, 45, 68, 266, 325, 330, 332, 354, 636, 723, 1006, 1047, 1048, 1050, 1051, 1052], "congruenc": [659, 660, 661, 687, 688], "conjug": [273, 456, 466, 677, 679, 692, 700, 1002], "conjunct": [403, 412, 599, 811, 827, 828, 830, 831, 832, 833, 836, 972, 996, 1002, 1052], "connect": [2, 51, 74, 79, 81, 84, 87, 95, 99, 100, 378, 380, 389, 394, 414, 445, 449, 456, 466, 467, 590, 591, 700, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 1004, 1009, 1011, 1019, 1029, 1041, 1050, 1054], "connected_compon": 1044, "connectionist": [866, 867], "conner": 1050, "connor": [1045, 1050, 1054, 1055], "connossor": [1045, 1046], "conocophillip": 51, "conort": 1030, "conquer": 953, "conrad": [1037, 1038, 1052, 1055], "conroi": 1052, "consecut": [135, 146, 216, 392, 410, 416, 420, 447, 451, 453, 454, 456, 460, 463, 466, 542, 543, 544, 551, 607, 650, 671, 672, 673, 681, 682, 683, 802, 803, 810, 844, 845, 846, 847, 848, 866, 867, 995, 1016, 1045], "consensu": [2, 58, 59, 72, 379, 380, 395, 409, 412, 654, 676, 683, 684, 724, 1006], "consensus_scor": [2, 58, 59, 409, 1039], "consequ": [90, 128, 233, 273, 274, 313, 340, 363, 410, 411, 417, 419, 566, 567, 571, 660, 661, 996, 1002, 1006, 1014, 1022, 1046, 1048, 1053, 1055], "conserv": [50, 394, 587, 594, 901, 902, 1005, 1018], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 88, 99, 103, 112, 118, 121, 125, 145, 148, 165, 169, 170, 184, 189, 215, 217, 249, 267, 273, 276, 280, 284, 287, 293, 296, 299, 300, 313, 324, 330, 340, 347, 348, 350, 354, 363, 367, 368, 369, 372, 379, 380, 382, 386, 388, 392, 394, 395, 403, 406, 408, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424, 442, 448, 450, 454, 461, 478, 513, 514, 526, 538, 546, 554, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 593, 594, 596, 598, 612, 613, 625, 636, 637, 638, 651, 657, 663, 664, 665, 667, 676, 684, 693, 694, 695, 697, 698, 699, 701, 705, 707, 710, 712, 714, 720, 731, 735, 739, 761, 791, 793, 799, 851, 852, 853, 855, 857, 859, 860, 861, 864, 866, 867, 872, 882, 883, 890, 904, 905, 914, 915, 917, 918, 919, 920, 930, 989, 995, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1026, 1040, 1041, 1045, 1049, 1050, 1052, 1053, 1054], "consider": [150, 151, 173, 176, 252, 268, 274, 280, 375, 380, 411, 422, 624, 805, 819, 827, 995, 1002, 1008, 1012, 1020, 1030, 1054], "consist": [2, 43, 46, 63, 68, 72, 89, 90, 102, 111, 118, 119, 121, 141, 145, 151, 152, 159, 170, 175, 177, 180, 184, 191, 215, 233, 248, 252, 279, 282, 310, 318, 322, 325, 350, 355, 363, 367, 373, 375, 377, 380, 386, 387, 388, 389, 393, 394, 395, 410, 412, 414, 418, 419, 420, 430, 431, 434, 435, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 494, 502, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 596, 616, 632, 633, 634, 635, 640, 643, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 679, 682, 683, 684, 692, 693, 694, 695, 696, 705, 740, 802, 803, 812, 837, 838, 839, 841, 842, 843, 844, 852, 853, 855, 857, 860, 861, 867, 872, 873, 874, 876, 880, 881, 884, 885, 887, 888, 890, 901, 902, 905, 909, 910, 912, 913, 915, 918, 920, 926, 935, 937, 960, 976, 979, 994, 995, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1016, 1019, 1021, 1022, 1024, 1026, 1030, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "consol": [144, 378], "consolid": [0, 394, 395, 1037], "consolidate_scor": 52, "consortium": [0, 1030], "constant": [2, 43, 130, 138, 151, 175, 178, 179, 184, 188, 202, 216, 217, 219, 233, 244, 249, 254, 276, 305, 309, 311, 314, 316, 323, 350, 352, 363, 372, 382, 389, 394, 409, 419, 422, 435, 450, 469, 486, 487, 488, 516, 518, 539, 543, 545, 552, 554, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 595, 611, 614, 616, 618, 632, 635, 637, 638, 640, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 692, 694, 698, 700, 726, 728, 729, 733, 737, 780, 782, 790, 804, 827, 842, 843, 852, 860, 866, 867, 874, 885, 888, 897, 909, 910, 911, 912, 913, 914, 915, 916, 918, 920, 998, 1000, 1002, 1003, 1006, 1008, 1009, 1016, 1020, 1022, 1032, 1040, 1045, 1047, 1049, 1050, 1051, 1053, 1055], "constant_": 557, "constant_valu": [422, 618, 622], "constant_value_bound": [422, 616, 618, 622], "constantini": 1053, "constantkernel": [2, 175, 181, 422, 616, 622, 626, 629], "constantli": [72, 215, 1030], "constitu": 377, "constitut": [83, 394, 416, 419, 454, 460, 593, 594, 596, 1010], "constrain": [25, 81, 121, 145, 151, 153, 189, 206, 286, 308, 323, 329, 341, 343, 373, 394, 412, 417, 419, 514, 566, 567, 640, 663, 664, 695, 699, 827, 834, 1002, 1005, 1041], "constrained_layout": [121, 189, 235, 319, 320, 327], "constraint": [88, 90, 100, 121, 134, 185, 203, 210, 219, 252, 253, 268, 309, 310, 311, 323, 380, 392, 417, 420, 491, 513, 514, 562, 563, 564, 565, 566, 567, 569, 570, 637, 640, 823, 824, 917, 918, 919, 920, 974, 995, 997, 1002, 1003, 1020, 1027, 1041, 1044, 1045, 1048, 1050, 1052, 1054], "constru": 420, "construct": [2, 43, 50, 102, 104, 135, 137, 139, 143, 156, 170, 233, 243, 249, 254, 256, 306, 314, 316, 323, 326, 374, 377, 382, 389, 394, 412, 413, 416, 417, 419, 420, 423, 437, 445, 446, 448, 449, 454, 456, 461, 467, 469, 471, 524, 540, 546, 549, 560, 561, 586, 592, 644, 693, 695, 696, 819, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 868, 869, 870, 871, 873, 914, 934, 936, 952, 953, 964, 968, 995, 996, 998, 1002, 1003, 1006, 1007, 1009, 1016, 1019, 1021, 1022, 1026, 1042, 1044, 1045, 1048, 1051], "construct_grid": [50, 306], "constructor": [30, 31, 104, 245, 368, 382, 394, 413, 420, 468, 471, 554, 555, 560, 572, 573, 574, 575, 586, 587, 593, 594, 602, 673, 681, 682, 804, 805, 819, 851, 852, 853, 855, 857, 859, 860, 861, 868, 869, 870, 871, 995, 1007, 1016, 1021, 1026, 1037, 1038, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "consult": 1006, "consum": [2, 121, 363, 374, 382, 394, 403, 412, 416, 419, 453, 808, 809, 869, 870, 961, 962, 971, 1002, 1030, 1042, 1054], "consumpt": [47, 367, 394, 412, 539, 562, 563, 569, 570, 805, 819, 830, 831, 832, 917, 918, 919, 920, 971, 1037, 1039, 1043, 1045, 1046, 1051], "contact": [392, 1025], "contain": [2, 49, 57, 61, 64, 69, 75, 82, 89, 91, 102, 103, 137, 139, 143, 151, 152, 178, 188, 189, 191, 193, 206, 219, 233, 242, 249, 252, 253, 256, 263, 267, 271, 273, 279, 282, 283, 286, 292, 299, 300, 302, 313, 325, 333, 336, 354, 355, 373, 374, 375, 377, 380, 382, 384, 385, 386, 387, 388, 389, 392, 394, 406, 408, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 424, 426, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 501, 505, 507, 508, 509, 513, 514, 515, 519, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 693, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 714, 717, 721, 740, 741, 742, 777, 784, 785, 793, 799, 802, 803, 804, 805, 808, 809, 811, 819, 823, 824, 827, 828, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 931, 934, 935, 936, 956, 957, 960, 961, 968, 971, 972, 974, 995, 996, 998, 1004, 1007, 1010, 1012, 1014, 1016, 1017, 1019, 1022, 1025, 1029, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "container": 406, "container_fold": 508, "container_path": 508, "contamin": [48, 111, 112, 242, 252, 299, 300, 473, 568, 855, 1012, 1045, 1053, 1054], "content": [2, 7, 55, 318, 354, 356, 375, 380, 384, 386, 406, 420, 490, 508, 513, 514, 593, 594, 596, 676, 923, 1015, 1030, 1038, 1047], "context": [2, 91, 256, 267, 286, 293, 330, 367, 368, 374, 379, 381, 393, 394, 412, 413, 418, 419, 420, 422, 423, 441, 448, 450, 452, 454, 456, 461, 462, 465, 468, 471, 472, 476, 536, 540, 541, 542, 544, 547, 548, 549, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 631, 632, 635, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 855, 857, 859, 860, 862, 863, 868, 871, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 996, 1002, 1006, 1012, 1016, 1020, 1026, 1029, 1030, 1037, 1044, 1045, 1050, 1053], "contigu": [43, 59, 382, 392, 409, 416, 420, 447, 451, 453, 463, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 786, 824, 849, 850, 909, 911, 912, 913, 914, 915, 1021, 1040, 1047, 1051, 1055], "contin": [418, 719, 1016], "conting": [2, 719, 720, 736, 760, 1043], "contingency_matrix": [2, 412, 760, 1045], "continu": [0, 2, 52, 55, 57, 77, 119, 145, 172, 185, 189, 196, 216, 223, 233, 236, 239, 252, 253, 255, 259, 263, 264, 310, 312, 318, 319, 324, 325, 362, 368, 375, 378, 382, 383, 384, 385, 388, 392, 394, 395, 398, 412, 417, 419, 472, 497, 597, 600, 601, 604, 605, 612, 613, 614, 637, 651, 652, 657, 658, 662, 665, 666, 667, 668, 731, 761, 817, 819, 872, 874, 876, 878, 879, 888, 889, 890, 906, 907, 918, 968, 995, 1002, 1003, 1006, 1007, 1009, 1010, 1016, 1022, 1026, 1027, 1030, 1034, 1037, 1039, 1040, 1045, 1050, 1051, 1052, 1054, 1056], "continuous_featur": 385, "contour": [48, 50, 70, 80, 81, 111, 144, 163, 170, 175, 176, 178, 226, 227, 228, 229, 242, 247, 262, 299, 306, 341, 342, 344, 345, 347, 348, 377, 387, 636, 637, 1012, 1020], "contour_kw": 637, "contourf": [50, 144, 229, 247, 299, 306, 308, 315, 316, 337, 342, 348, 352, 636, 637], "contours_": [387, 637], "contract": [215, 233, 347, 368, 394, 1026], "contradict": [191, 1026], "contrari": [43, 53, 188, 236, 240, 252, 258, 276, 313, 354, 374, 412, 501, 549, 611, 807, 822, 890, 1002, 1008, 1012], "contrast": [129, 189, 217, 248, 252, 273, 275, 302, 318, 355, 394, 410, 412, 415, 419, 422, 453, 456, 466, 624, 648, 819, 865, 996, 999, 1001, 1002, 1006, 1009, 1011, 1014, 1016, 1019, 1020, 1022, 1047], "contrib": [328, 380, 382, 388, 392, 394, 412, 450, 1025, 1026, 1053], "contribut": [0, 53, 58, 149, 177, 200, 219, 282, 318, 377, 378, 382, 383, 384, 388, 394, 395, 398, 417, 418, 419, 451, 453, 558, 559, 564, 565, 731, 734, 761, 1000, 1006, 1009, 1014, 1021, 1025, 1026, 1029, 1030, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "contributor": [368, 383, 384, 385, 388, 392, 394, 1006, 1026, 1038, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "control": [37, 51, 70, 94, 125, 126, 141, 161, 177, 179, 200, 216, 219, 223, 245, 246, 274, 276, 290, 295, 311, 323, 325, 347, 358, 360, 361, 367, 368, 373, 376, 380, 382, 385, 388, 392, 394, 398, 411, 412, 415, 416, 417, 418, 421, 422, 437, 444, 453, 458, 475, 476, 482, 536, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 598, 599, 601, 619, 624, 630, 632, 637, 639, 644, 646, 647, 651, 652, 654, 655, 656, 657, 659, 660, 661, 677, 679, 681, 682, 687, 688, 692, 697, 706, 714, 802, 803, 805, 807, 808, 809, 810, 811, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 835, 836, 839, 840, 843, 866, 867, 888, 890, 901, 902, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 923, 971, 992, 995, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1025, 1026, 1028, 1032, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1056], "convei": [67, 240, 315], "conveni": [52, 88, 219, 252, 372, 388, 392, 413, 416, 420, 422, 427, 447, 451, 453, 455, 457, 468, 493, 616, 681, 683, 704, 733, 790, 868, 869, 979, 996, 998, 1002, 1003, 1013, 1030, 1037], "convent": [2, 133, 151, 267, 273, 380, 382, 383, 384, 386, 394, 408, 430, 431, 434, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 473, 474, 475, 476, 477, 478, 479, 480, 513, 514, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 552, 568, 571, 574, 575, 586, 587, 588, 593, 594, 596, 632, 633, 634, 635, 682, 693, 694, 695, 696, 723, 802, 803, 837, 838, 853, 855, 857, 861, 873, 881, 884, 885, 887, 890, 901, 902, 913, 947, 948, 1006, 1037, 1044, 1045, 1048, 1050, 1051, 1053, 1054], "convention": [341, 394, 905], "converg": [2, 55, 90, 94, 109, 110, 146, 148, 151, 172, 178, 208, 217, 223, 231, 259, 261, 309, 310, 313, 318, 333, 369, 389, 394, 409, 412, 417, 420, 422, 424, 444, 447, 450, 451, 452, 453, 456, 458, 463, 464, 465, 466, 475, 476, 482, 486, 487, 488, 538, 540, 541, 542, 543, 544, 551, 576, 615, 649, 650, 651, 652, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 673, 677, 679, 681, 683, 687, 688, 692, 693, 695, 696, 699, 700, 802, 803, 858, 866, 867, 904, 905, 911, 996, 1001, 1002, 1003, 1005, 1010, 1020, 1037, 1040, 1041, 1042, 1044, 1045, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "converged_": [802, 803, 1055], "convergence_it": [444, 458], "convergencewarn": [2, 176, 178, 180, 223, 230, 259, 309, 310, 315, 389, 394, 802, 803, 1045, 1046, 1049], "convers": [2, 55, 148, 206, 354, 363, 369, 374, 380, 382, 388, 392, 394, 406, 420, 577, 864, 873, 881, 935, 936, 991, 1003, 1026, 1030, 1045, 1046, 1047, 1050, 1053], "convert": [2, 55, 70, 80, 99, 103, 124, 177, 191, 215, 235, 252, 255, 259, 260, 263, 264, 287, 306, 330, 362, 367, 374, 375, 389, 392, 394, 406, 420, 444, 447, 448, 451, 453, 454, 455, 456, 463, 468, 469, 501, 539, 546, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 586, 587, 593, 594, 595, 596, 598, 599, 611, 632, 633, 634, 635, 651, 657, 663, 664, 665, 667, 671, 672, 673, 675, 679, 681, 682, 683, 697, 751, 783, 804, 827, 864, 873, 874, 876, 880, 882, 883, 884, 886, 909, 917, 918, 919, 920, 933, 935, 936, 960, 990, 991, 995, 1002, 1003, 1004, 1006, 1016, 1017, 1021, 1022, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055], "convex": [130, 147, 148, 185, 194, 222, 235, 351, 355, 412, 414, 417, 425, 450, 456, 466, 477, 479, 480, 483, 484, 485, 663, 681, 697, 1002, 1003, 1009, 1010, 1020, 1027, 1050], "convinc": 188, "convolut": [45, 180], "convolv": 311, "coo": [394, 558, 559, 697, 876, 931, 935, 936, 1009, 1038, 1054], "coo_matrix": [53, 201, 456, 590, 591, 976, 979], "cook": [377, 499, 1037, 1043], "cookbook": [422, 627, 628], "cool": [420, 1037], "coolwarm": [268, 340], "cooman": 377, "coord": [590, 1007], "coordin": [2, 50, 51, 53, 87, 126, 155, 176, 203, 235, 274, 306, 367, 375, 417, 422, 447, 451, 452, 453, 465, 475, 476, 482, 536, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 555, 590, 619, 651, 652, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 686, 687, 688, 689, 693, 694, 695, 698, 699, 711, 769, 774, 909, 1002, 1003, 1021, 1037, 1040, 1041, 1042, 1046, 1048, 1050, 1051, 1052], "cop": 51, "cope": [242, 369, 375, 1002], "copeland": [1045, 1046], "copi": [44, 51, 55, 79, 95, 107, 124, 138, 151, 170, 183, 184, 188, 189, 190, 201, 208, 221, 231, 233, 236, 249, 293, 332, 333, 335, 337, 355, 359, 368, 377, 380, 382, 384, 385, 386, 392, 394, 437, 441, 444, 446, 447, 448, 450, 451, 453, 458, 463, 486, 487, 488, 489, 505, 507, 515, 537, 538, 539, 540, 546, 553, 558, 559, 564, 566, 567, 577, 595, 602, 612, 613, 615, 616, 633, 635, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 676, 677, 679, 684, 686, 689, 690, 691, 737, 774, 797, 805, 819, 849, 850, 864, 872, 875, 878, 879, 880, 881, 885, 886, 887, 889, 892, 894, 895, 896, 897, 898, 899, 900, 904, 905, 909, 911, 912, 913, 914, 915, 924, 933, 935, 936, 964, 976, 978, 979, 1016, 1021, 1022, 1026, 1037, 1040, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "copy_": 1037, "copy_cov": 553, "copy_gram": [687, 688, 691], "copy_x": [447, 451, 463, 540, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 677, 679, 684, 686, 687, 688, 689, 690, 1039, 1045, 1046, 1056], "copy_x_train": [615, 616], "copy_xi": 691, "copybutton": [380, 398, 405], "copyright": [0, 55], "corani": 273, "cordier": 1044, "core": [42, 49, 82, 88, 98, 103, 135, 141, 143, 144, 185, 188, 189, 267, 327, 366, 368, 380, 383, 388, 394, 398, 406, 412, 417, 419, 420, 423, 448, 450, 453, 454, 459, 461, 501, 504, 543, 594, 599, 663, 664, 671, 673, 681, 844, 845, 846, 847, 848, 853, 861, 1002, 1009, 1012, 1021, 1026, 1027, 1028, 1030, 1032, 1039, 1041, 1042, 1044, 1047, 1051, 1052, 1053], "core_dist": [98, 459, 460, 461], "core_distances_": [98, 454, 459, 461], "core_sampl": 423, "core_sample_indices_": [82, 448], "core_samples_mask": 82, "corei": [1038, 1045, 1046], "corentin": 1051, "cori": 1042, "corneil": 1050, "corner": [50, 53, 63, 86, 187, 270, 274, 282, 283, 306, 329, 375, 380, 503, 921, 923, 1006, 1051], "cornerston": 1030, "cornflowerblu": [155, 209, 218, 225, 259, 261, 264, 280, 282, 298, 304, 360, 361], "corollari": 382, "corona": 1050, "corpora": 417, "corpu": [54, 355, 356, 375, 417, 593, 594, 595, 596, 1038], "corr": [115, 191, 273], "corrcoef": [115, 131], "correct": [2, 30, 52, 63, 64, 90, 112, 135, 146, 180, 188, 200, 204, 215, 233, 258, 266, 267, 273, 280, 282, 290, 292, 343, 345, 354, 363, 377, 380, 382, 384, 395, 408, 410, 412, 416, 417, 419, 420, 429, 435, 454, 460, 473, 478, 492, 506, 508, 640, 672, 681, 683, 708, 709, 713, 717, 718, 723, 726, 728, 729, 733, 734, 735, 739, 743, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 788, 789, 790, 792, 795, 796, 799, 801, 837, 838, 839, 846, 854, 880, 990, 1002, 1006, 1007, 1021, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "correct_covari": [473, 478], "corrected_std": 273, "corrected_var": 273, "correctli": [2, 165, 169, 215, 233, 249, 280, 282, 288, 303, 320, 334, 343, 380, 389, 417, 419, 429, 441, 473, 498, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 663, 671, 673, 679, 680, 681, 708, 799, 801, 804, 827, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 856, 859, 866, 889, 904, 905, 909, 911, 912, 913, 914, 915, 917, 919, 954, 1003, 1006, 1009, 1010, 1016, 1021, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "correl": [2, 51, 64, 113, 115, 116, 131, 142, 143, 149, 151, 153, 166, 169, 177, 185, 186, 187, 189, 190, 200, 204, 210, 233, 273, 279, 292, 319, 323, 324, 335, 373, 376, 377, 385, 394, 397, 409, 414, 416, 421, 454, 461, 486, 487, 489, 498, 499, 505, 529, 569, 611, 614, 632, 639, 640, 641, 687, 688, 748, 762, 783, 784, 785, 835, 849, 850, 886, 887, 889, 898, 997, 1002, 1007, 1013, 1016, 1020, 1022, 1026, 1027, 1028, 1032, 1037, 1038, 1039, 1050, 1051], "correlation_coeffici": 614, "correlation_model": 1044, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 86, 98, 109, 113, 123, 135, 138, 141, 142, 144, 152, 166, 169, 170, 173, 178, 181, 188, 204, 207, 215, 216, 219, 224, 233, 243, 248, 249, 256, 263, 267, 272, 274, 276, 277, 282, 283, 287, 306, 318, 324, 325, 326, 355, 358, 359, 362, 363, 368, 374, 375, 376, 379, 380, 382, 384, 387, 388, 393, 394, 395, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 427, 433, 441, 443, 445, 449, 452, 455, 457, 463, 465, 467, 468, 471, 476, 486, 487, 488, 494, 495, 497, 498, 499, 500, 501, 539, 546, 549, 550, 551, 554, 555, 557, 560, 562, 564, 565, 566, 569, 587, 589, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 622, 633, 635, 637, 638, 640, 648, 651, 652, 653, 657, 663, 664, 665, 666, 667, 673, 674, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 692, 695, 696, 697, 699, 708, 715, 718, 729, 730, 739, 743, 747, 751, 757, 759, 779, 783, 787, 793, 794, 799, 801, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 830, 838, 840, 841, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 866, 867, 876, 879, 880, 882, 883, 886, 890, 898, 909, 910, 911, 914, 917, 918, 919, 920, 930, 940, 947, 962, 965, 980, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1021, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "correspondingli": 1054, "corri": 1048, "corrobor": 392, "corrupt": [44, 128, 200, 221, 232, 392, 865, 1002, 1014], "cort": [1048, 1049, 1052, 1053], "cortex": 417, "cos_transform": 43, "cosin": [2, 43, 75, 288, 293, 298, 372, 375, 394, 412, 417, 418, 445, 449, 454, 461, 540, 595, 596, 625, 701, 765, 766, 767, 770, 775, 776, 779, 783, 784, 785, 849, 850, 854, 881, 1009, 1022, 1032, 1047], "cosine_dist": [2, 408, 701, 767, 1009, 1043, 1056], "cosine_similar": [2, 347, 408, 765, 770, 1004, 1042, 1056], "cosinesimil": 293, "cosmo": 57, "cost": [0, 43, 74, 124, 141, 151, 172, 185, 193, 235, 243, 247, 265, 275, 277, 280, 282, 287, 322, 330, 343, 355, 356, 357, 362, 380, 386, 388, 392, 411, 412, 419, 482, 501, 505, 542, 543, 544, 551, 556, 562, 563, 564, 565, 566, 569, 570, 607, 615, 624, 632, 651, 652, 657, 658, 663, 665, 666, 667, 668, 673, 677, 679, 681, 683, 692, 693, 697, 705, 707, 723, 747, 789, 792, 804, 805, 827, 835, 870, 889, 907, 909, 910, 911, 914, 917, 918, 919, 920, 953, 998, 1002, 1003, 1006, 1009, 1019, 1020, 1021, 1027, 1028, 1032, 1043, 1046, 1047], "cost_complexity_pruning_path": [358, 917, 918, 919, 920], "costa": [1045, 1050], "costin": 1037, "costli": [104, 109, 142, 183, 267, 274, 351, 368, 381, 386, 412, 447, 632, 813, 815, 901, 902, 953, 1006, 1009, 1018, 1026], "costlier": 676, "costs_": [475, 476, 1053], "could": [43, 48, 52, 53, 64, 72, 77, 86, 103, 104, 121, 124, 136, 137, 145, 148, 151, 167, 172, 177, 184, 187, 188, 189, 215, 216, 219, 224, 233, 239, 247, 248, 249, 266, 267, 273, 286, 292, 301, 304, 325, 339, 340, 354, 358, 362, 369, 380, 386, 388, 394, 398, 406, 410, 416, 419, 420, 424, 478, 538, 543, 612, 613, 634, 676, 807, 812, 814, 996, 1002, 1003, 1013, 1014, 1016, 1021, 1026, 1034, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "couldn": [1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "count": [2, 23, 43, 52, 54, 62, 64, 76, 82, 86, 102, 103, 119, 157, 158, 188, 189, 215, 217, 233, 246, 256, 267, 282, 287, 290, 293, 323, 324, 355, 356, 375, 377, 384, 389, 394, 395, 410, 412, 417, 419, 420, 450, 453, 493, 501, 541, 549, 586, 593, 594, 595, 596, 599, 609, 622, 645, 702, 710, 720, 723, 734, 735, 743, 759, 788, 789, 791, 792, 844, 848, 849, 850, 858, 861, 872, 921, 923, 955, 970, 994, 995, 998, 1002, 1006, 1008, 1009, 1016, 1022, 1030, 1037, 1040, 1042, 1045, 1046, 1048, 1049, 1054], "count_nonzero": [46, 49, 367], "count_onli": [849, 850], "counter": [57, 135, 280, 412, 681, 682, 683, 1050], "counterpart": [995, 1003, 1021], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [319, 329, 501, 1003], "counts_": 1049, "countvector": [2, 54, 336, 356, 375, 385, 413, 417, 420, 468, 493, 541, 587, 594, 595, 596, 1037, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1055], "coupl": [54, 85, 86, 88, 236, 374, 375, 409, 410, 412, 421, 594, 915, 995, 1021], "cournapeau": [0, 402, 1037, 1040], "cours": [47, 48, 193, 287, 367, 380, 382, 411, 417, 420, 421, 996, 1001, 1002, 1030], "coursecentr": [412, 446], "courtesi": 380, "couvreur": [1046, 1047], "cov": [70, 113, 116, 137, 263, 380, 394, 398, 405, 415, 425, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 524, 537, 539, 546, 553], "cov_": [50, 113], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1053, "cov_test": 50, "cov_train": 50, "cov_typ": [260, 495], "covar": [258, 259, 264], "covari": [2, 48, 51, 65, 69, 110, 115, 128, 131, 150, 152, 172, 179, 181, 218, 242, 257, 259, 261, 262, 263, 264, 280, 304, 329, 389, 394, 403, 412, 415, 417, 422, 425, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 509, 520, 524, 532, 537, 539, 546, 553, 554, 555, 568, 615, 616, 618, 627, 628, 636, 649, 650, 655, 659, 661, 687, 688, 691, 694, 698, 802, 803, 805, 824, 1005, 1012, 1016, 1027, 1028, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1044, 1046], "covariance_": [51, 70, 111, 113, 473, 474, 475, 476, 477, 478, 479, 480, 554, 555, 1000, 1044], "covariance_correct": [473, 478], "covariance_eigh": [330, 546, 1055], "covariance_estim": [69, 554, 1000, 1049], "covariance_prior": [264, 802], "covariance_prior_": 802, "covariance_reweight": [473, 478], "covariance_typ": [79, 259, 260, 262, 263, 264, 802, 803, 1053], "covariances_": [258, 259, 260, 263, 264, 802, 803, 1044], "cover": [0, 85, 193, 215, 233, 363, 372, 375, 380, 393, 640, 725, 799, 1006, 1007, 1024], "coverag": [2, 50, 52, 148, 151, 215, 233, 306, 375, 383, 408, 503, 632, 725], "coverage_error": [2, 1006, 1041, 1051], "coverage_fract": 148, "coverages_land": 50, "covertyp": [2, 373, 495, 1032], "covtyp": 193, "cow": 1038, "cowlei": 1047, "cowton": 1051, "cox": [313, 317, 885, 897, 1016, 1045, 1053], "cpo": [170, 377], "cppflag": 378, "cpu": [0, 94, 274, 293, 327, 367, 368, 386, 388, 394, 398, 408, 420, 501, 568, 637, 652, 656, 658, 660, 663, 664, 666, 668, 670, 671, 673, 681, 684, 805, 819, 830, 831, 832, 853, 861, 902, 1006, 1042, 1051, 1052, 1054, 1055], "cpu_count": [77, 141, 293], "cpuexecutionprovid": 406, "cpython": [380, 381, 386, 1052], "craeton": 1055, "craft": 383, "craig": [1018, 1040, 1045], "crall": [1044, 1050], "crammer": [671, 672, 740, 1002, 1006, 1021], "crammer06a": [671, 672], "crammer_sing": [909, 1007, 1021, 1037], "cranenburgh": 1041, "crash": [51, 380, 406, 472, 899, 900, 907, 1016, 1041, 1045, 1053, 1054, 1056], "crawl": [526, 945], "craze": 1044, "crc": 1002, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 80, 82, 85, 91, 93, 95, 103, 104, 111, 116, 118, 123, 126, 137, 140, 144, 145, 146, 148, 152, 155, 169, 172, 174, 177, 178, 179, 181, 184, 187, 189, 195, 197, 199, 201, 211, 216, 217, 227, 228, 237, 247, 249, 252, 253, 255, 263, 267, 268, 269, 271, 273, 283, 287, 301, 303, 304, 315, 317, 318, 322, 325, 326, 337, 339, 340, 344, 345, 348, 350, 351, 352, 356, 358, 360, 361, 363, 368, 375, 376, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 393, 394, 398, 399, 406, 410, 412, 413, 416, 418, 419, 420, 422, 442, 455, 457, 469, 470, 504, 520, 521, 522, 523, 551, 558, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 593, 594, 596, 602, 633, 635, 636, 637, 638, 702, 703, 705, 706, 707, 787, 794, 805, 807, 811, 815, 819, 823, 827, 828, 830, 831, 839, 870, 882, 911, 914, 917, 918, 919, 920, 924, 933, 956, 957, 964, 978, 990, 996, 1002, 1005, 1006, 1007, 1009, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1030, 1034, 1037, 1038, 1040, 1043, 1047, 1050, 1051, 1052, 1053, 1054, 1055], "create_ax": 313, "create_species_bunch": 50, "createindex": 293, "creation": [382, 516, 517, 518, 520, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 661, 849, 850, 1030, 1044, 1045, 1046, 1050], "creativ": 374, "creator": [170, 374, 377], "cred_int_df": 273, "cred_interv": 273, "credibl": 273, "credit": [375, 388, 419, 1002, 1030], "credit_amount": 267, "credit_card": 267, "credit_gain": 267, "credit_gain_scor": 267, "credit_histori": 267, "creighton": 327, "crispinlogan": [1049, 1052, 1053, 1055], "cristian": 647, "cristina": 1049, "criteria": [90, 141, 185, 194, 204, 223, 263, 273, 388, 412, 421, 445, 470, 486, 487, 488, 506, 562, 563, 564, 565, 569, 570, 651, 657, 661, 663, 664, 676, 697, 870, 889, 909, 910, 917, 918, 919, 920, 996, 1005, 1010, 1020, 1027, 1040, 1045, 1048], "criterion": [64, 109, 110, 191, 202, 223, 263, 285, 323, 382, 389, 394, 412, 417, 445, 449, 453, 456, 463, 466, 537, 542, 544, 551, 558, 559, 562, 563, 564, 565, 569, 570, 571, 611, 632, 649, 650, 653, 661, 671, 672, 673, 674, 676, 677, 679, 681, 682, 683, 685, 696, 700, 715, 803, 906, 911, 912, 913, 914, 915, 917, 918, 919, 920, 1002, 1005, 1006, 1014, 1019, 1022, 1028, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "criterion_": [202, 204, 661], "critic": [374, 380, 393, 419, 697, 1003, 1006, 1014, 1021, 1030, 1048], "crockett": 1052, "crombach": 1039, "crop": [388, 1052], "cross": [2, 9, 29, 52, 53, 64, 70, 87, 90, 91, 103, 104, 106, 107, 109, 113, 116, 128, 141, 144, 145, 147, 148, 151, 160, 164, 167, 168, 170, 188, 189, 194, 200, 201, 202, 203, 209, 215, 217, 223, 233, 250, 255, 260, 261, 263, 265, 270, 273, 274, 275, 277, 279, 280, 281, 282, 285, 287, 288, 290, 297, 311, 312, 314, 319, 322, 324, 329, 335, 343, 350, 375, 380, 382, 389, 392, 393, 394, 406, 407, 410, 413, 414, 417, 419, 420, 421, 422, 441, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 498, 506, 507, 509, 520, 546, 572, 573, 580, 598, 599, 602, 607, 611, 614, 647, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 706, 707, 711, 718, 733, 746, 790, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 843, 869, 870, 874, 889, 890, 907, 909, 911, 914, 926, 960, 1005, 1006, 1009, 1010, 1014, 1016, 1021, 1022, 1026, 1027, 1028, 1030, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "cross_decomposit": [2, 114, 115, 116, 185, 250, 486, 487, 488, 489, 1007, 1027, 1041, 1042, 1044, 1045, 1046], "cross_val": 1037, "cross_val_predict": [2, 156, 269, 322, 403, 410, 416, 419, 441, 572, 573, 831, 832, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1054], "cross_val_scor": [2, 52, 128, 183, 184, 185, 265, 269, 278, 288, 328, 346, 363, 380, 382, 392, 403, 416, 419, 476, 525, 580, 708, 747, 805, 830, 832, 917, 918, 995, 1006, 1027, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1053, 1054, 1056], "cross_valid": [2, 43, 52, 145, 151, 156, 188, 217, 249, 269, 276, 287, 290, 319, 329, 380, 393, 403, 580, 830, 831, 1006, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054], "crossentropi": 566, "crossvalid": [273, 288], "crowd": [388, 395, 1003, 1026], "crucial": [51, 151, 187, 219, 268, 367, 379, 380, 394, 395, 412, 422, 1021], "crude": 1048, "crunch": 386, "cruz": 180, "crypt": [57, 375], "cryptograph": 389, "cs_": 664, "cs_note": 421, "cs_point": 144, "csail": [412, 671, 672, 681, 846], "csc": [2, 367, 392, 394, 420, 532, 556, 558, 559, 675, 697, 876, 878, 884, 889, 892, 894, 900, 931, 935, 936, 968, 980, 981, 983, 984, 985, 986, 1009, 1016, 1045, 1046, 1048, 1051], "csc_matrix": [456, 562, 563, 568, 569, 570, 571, 886, 917, 918, 919, 920, 996, 1016, 1022, 1042], "csco": 51, "csgraph": [394, 1050], "csie": [193, 374, 491, 513, 514, 663], "csizsek": 1044, "csr": [2, 55, 330, 356, 367, 374, 375, 389, 392, 394, 420, 423, 447, 450, 451, 453, 454, 463, 502, 513, 528, 532, 558, 559, 562, 563, 569, 570, 571, 595, 635, 663, 697, 719, 773, 797, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 864, 872, 876, 878, 880, 881, 882, 884, 887, 888, 889, 892, 893, 894, 896, 899, 902, 917, 918, 919, 920, 931, 935, 936, 960, 968, 980, 981, 982, 983, 984, 985, 986, 987, 988, 1009, 1016, 1020, 1037, 1038, 1043, 1045, 1046, 1052, 1053, 1054], "csr_arrai": 987, "csr_matrix": [293, 323, 444, 448, 456, 501, 539, 549, 562, 563, 564, 565, 568, 569, 570, 571, 593, 598, 599, 719, 835, 864, 882, 884, 911, 912, 914, 915, 917, 918, 919, 920, 954, 960, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 1007, 1016, 1020, 1021, 1022, 1052], "css": 1049, "cst": 1000, "cstride": 189, "csv": [51, 374, 377, 385, 1045, 1050], "csytraci": 1040, "ct": [53, 180, 256, 413, 468, 470, 471], "ctc": 180, "cttt": 180, "cube": [424, 538], "cubic": [111, 422], "cuda": [392, 408], "cue": 1005, "culprit": 392, "cultiv": 377, "cultur": 375, "cum_claim": [215, 233], "cum_exposur": 215, "cumsum": [147, 215, 233, 1044], "cumtim": 386, "cumul": [2, 147, 215, 233, 412, 731, 740, 761, 886, 898, 1016, 1020, 1044, 1046, 1047], "cumulated_claim": 215, "cumulated_claim_amount": 233, "cumulated_exposur": 215, "cumulated_sampl": 233, "cunha": [1038, 1039], "cup": [375, 1006], "cupi": [327, 330, 392, 408, 1054, 1055, 1056], "cupy_to_ndarrai": 408, "curat": [380, 383, 384], "cure": 1002, "curic": [1045, 1046], "current": [0, 2, 7, 47, 80, 135, 177, 188, 233, 313, 322, 368, 369, 375, 378, 380, 381, 385, 389, 392, 394, 395, 408, 409, 412, 416, 419, 420, 421, 422, 444, 450, 454, 472, 473, 474, 475, 476, 477, 478, 479, 480, 537, 540, 546, 558, 559, 562, 563, 564, 565, 567, 569, 570, 571, 581, 596, 598, 615, 622, 631, 632, 651, 672, 676, 680, 681, 682, 683, 793, 802, 803, 854, 858, 866, 867, 885, 897, 907, 917, 918, 919, 920, 923, 925, 926, 927, 972, 980, 995, 1000, 1002, 1006, 1009, 1010, 1016, 1026, 1029, 1045, 1049, 1051, 1052, 1053], "current_count": 76, "current_month": 177, "current_sklearn_vers": 581, "current_sz_mb": 47, "currentcontrolset": 398, "currentmodul": 380, "curs": [354, 355, 412, 418, 1008, 1009], "cursor": [141, 274], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 107, 109, 138, 140, 141, 147, 185, 194, 195, 205, 215, 233, 235, 237, 240, 241, 243, 245, 252, 253, 257, 258, 259, 260, 262, 263, 265, 267, 273, 283, 286, 309, 314, 322, 330, 347, 360, 387, 407, 411, 416, 418, 441, 442, 443, 507, 515, 520, 526, 530, 569, 637, 650, 663, 703, 705, 707, 711, 712, 713, 714, 732, 734, 746, 787, 789, 792, 793, 794, 802, 803, 811, 822, 828, 833, 835, 836, 847, 870, 889, 909, 914, 1002, 1003, 1005, 1006, 1012, 1022, 1027, 1028, 1030, 1032, 1034, 1039, 1040, 1043, 1047, 1049, 1050, 1051, 1052, 1053], "curvatur": 308, "cusick": 1047, "custom": [2, 15, 30, 41, 132, 167, 169, 185, 199, 253, 265, 267, 272, 274, 277, 280, 281, 285, 295, 300, 304, 322, 338, 340, 341, 343, 344, 346, 354, 356, 372, 375, 378, 382, 387, 388, 389, 392, 393, 394, 403, 406, 412, 413, 416, 422, 472, 493, 498, 499, 507, 509, 543, 545, 552, 554, 562, 563, 569, 570, 576, 578, 607, 635, 636, 695, 704, 718, 783, 805, 835, 873, 907, 914, 989, 1000, 1006, 1009, 1025, 1026, 1027, 1030, 1032, 1037, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "custom_combin": 882, "custom_cv": 416, "custom_cv_2fold": 416, "custom_fnames_enc": 882, "custom_nam": 354, "custom_scor": 330, "custom_scorer_modul": 1006, "custom_scoring_funct": 1006, "customestim": 133, "customkernel": 623, "customvector": 420, "cut": [57, 78, 80, 98, 99, 169, 170, 185, 237, 265, 276, 290, 330, 335, 384, 392, 409, 411, 412, 450, 456, 457, 466, 501, 593, 596, 663, 696, 700, 821, 827, 832, 870, 889, 1016, 1027], "cut_dist": [88, 450], "cutler": [917, 918], "cutoff": [195, 959, 1016, 1046], "cutoffs_x0": 313, "cutoffs_x1": 313, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 87, 103, 104, 105, 106, 109, 128, 141, 145, 147, 151, 161, 169, 183, 184, 188, 204, 214, 217, 249, 267, 269, 271, 272, 273, 274, 275, 276, 278, 279, 283, 287, 288, 290, 319, 327, 329, 330, 343, 350, 393, 394, 403, 410, 411, 416, 419, 421, 441, 476, 572, 573, 599, 607, 652, 656, 658, 660, 664, 666, 668, 670, 678, 680, 805, 807, 808, 809, 810, 811, 819, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 840, 843, 890, 917, 918, 995, 998, 1001, 1002, 1006, 1016, 1026, 1039, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1054, 1055, 1056], "cv_alpha": [656, 660], "cv_alphas_": [204, 656, 660, 1049], "cv_best_it": 147, "cv_clf": 147, "cv_color": 147, "cv_estim": 147, "cv_estimators_tut": 161, "cv_line": 147, "cv_mape_scor": 52, "cv_model": 188, "cv_result": [43, 52, 103, 141, 151, 169, 271, 272, 274, 276, 403, 819, 832, 1006], "cv_results_": [103, 104, 105, 113, 141, 161, 169, 263, 267, 271, 272, 273, 274, 277, 281, 284, 285, 295, 343, 476, 599, 678, 680, 805, 808, 809, 819, 827, 1043, 1047, 1049, 1050, 1055, 1056], "cv_results_ecoc": 290, "cv_results_lr": 217, "cv_results_ovo": 290, "cv_results_ovr": 290, "cv_results_qr": 217, "cv_results_tre": 290, "cv_results_tuned_model": 287, "cv_results_vanilla_model": 287, "cv_score": [147, 287], "cv_test_scor": 833, "cv_train_scor": 833, "cv_valu": 1045, "cv_values_": [678, 680, 1055], "cvc": 51, "cve": 1050, "cvx": 51, "cwitt": 1045, "cxx": 378, "cxxflag": 378, "cyan": [109, 138, 188, 304], "cybernet": 774, "cycl": [0, 16, 43, 77, 79, 83, 95, 121, 203, 259, 264, 280, 282, 325, 326, 380, 384, 403, 417, 584, 585, 632, 808, 809, 931, 995, 996, 1045, 1046, 1047, 1049, 1050, 1051, 1052], "cycler": 73, "cyclic": [43, 651, 652, 657, 658, 665, 666, 667, 668, 1049], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 306], "cynthias13w": 1054, "cyt": 290, "cython": [41, 326, 367, 368, 378, 380, 383, 389, 392, 398, 405, 408, 412, 419, 513, 1016, 1017, 1020, 1021, 1025, 1026, 1037, 1040, 1041, 1043, 1049, 1052, 1053, 1054, 1055], "cython3": 378, "cythonx": 381, "c\u00e8sar": 1006, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 82, 83, 93, 94, 96, 102, 103, 113, 119, 121, 124, 128, 130, 172, 180, 188, 215, 223, 231, 233, 240, 245, 246, 247, 248, 261, 272, 273, 281, 287, 292, 299, 300, 306, 310, 332, 333, 336, 343, 347, 348, 356, 374, 375, 377, 380, 382, 386, 392, 410, 412, 414, 415, 417, 419, 420, 422, 423, 448, 450, 451, 456, 464, 467, 492, 498, 508, 531, 539, 541, 562, 563, 570, 571, 586, 587, 595, 619, 620, 624, 627, 628, 633, 649, 650, 653, 674, 675, 676, 685, 693, 694, 697, 698, 702, 704, 710, 713, 726, 727, 728, 729, 731, 761, 769, 783, 786, 793, 817, 844, 846, 848, 849, 850, 865, 876, 880, 882, 883, 885, 897, 902, 919, 920, 924, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1014, 1016, 1018, 1021, 1022, 1040, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 419, "d2": [727, 728, 1006], "d2_absolute_error_scor": [2, 728, 1006, 1051], "d2_log_loss_scor": [2, 1006, 1055], "d2_pinball_scor": [2, 1006, 1051], "d2_pinball_score_08": 1006, "d2_tweedie_scor": [2, 408, 1006, 1050, 1056], "d2_tweedie_score_15": 1006, "d55e00": 258, "d81b60": 317, "d83": 377, "d_": [111, 412, 417, 653, 674, 685, 783, 1003, 1008], "d_c": 412, "d_chunk": 786, "d_fit": 693, "d_fix": 130, "d_m": 412, "d_multi": 130, "da": [375, 1052, 1053, 1055], "dae": 1002, "dagm": 998, "dagstuhl": 1006, "dai": [0, 43, 51, 52, 151, 177, 189, 216, 377, 380, 888, 1030, 1043, 1044, 1051, 1052], "daiki": 1041, "daili": [51, 151, 1030], "dakota": 1047, "dale": 1050, "dalla": 1045, "dalmia": [1043, 1044, 1045], "damag": 420, "damicelli": 1052, "damink": 1054, "daml": [412, 456, 466], "damp": [79, 412, 444, 458], "dan": [55, 1037, 1041, 1042, 1043, 1045, 1046], "danfrankj": 1041, "dang": [684, 1002, 1055], "danger": [216, 416], "dangi": 1054, "dangl": 55, "dangonite57": [1052, 1053], "daniel": [327, 367, 890, 1016, 1030, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1054], "daniela": [1051, 1052], "danielgaerb": 1052, "danielsen": 1044, "danielweitzenfeld": 1040, "daniil": 1044, "danil": 1045, "dani\u00ebl": 1048, "danna": 1047, "danni": [1040, 1041, 1042], "dantzig": 350, "danylo": 1046, "dao": 1045, "daphn": 1048, "dare": 1047, "darioka": [1049, 1051, 1052], "dariu": [1044, 1045], "dark": [138, 188, 343, 375, 1054], "dark2": [62, 64, 236], "darkblu": 304, "darkorang": [110, 125, 129, 130, 216, 226, 238, 259, 260, 261, 264, 280, 282, 298, 304, 305, 334, 360], "darkorchid": 225, "darkr": [229, 299, 342], "darpa": 375, "darren": [1051, 1052], "darshan": 1049, "dart": 1025, "dartmouth": 0, "dasarathi": 377, "dasgupta": [420, 450, 903, 1018], "dash": [69, 111, 135, 147, 158, 172, 175, 177, 188, 207, 210, 216, 217, 224, 227, 228, 252, 267, 273, 283, 345, 1020], "dashdot": [147, 172, 175, 252], "dask": [1026, 1045], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 92, 93, 94, 95, 98, 101, 103, 104, 106, 110, 112, 118, 119, 120, 121, 124, 125, 129, 131, 133, 135, 138, 140, 141, 144, 145, 147, 148, 153, 154, 155, 157, 159, 161, 163, 167, 171, 172, 173, 174, 176, 177, 179, 181, 183, 185, 188, 189, 194, 195, 198, 199, 200, 203, 204, 205, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 242, 245, 246, 247, 249, 251, 252, 253, 256, 258, 259, 260, 261, 262, 264, 266, 267, 271, 273, 275, 276, 277, 278, 281, 287, 288, 290, 292, 293, 297, 299, 301, 302, 303, 304, 306, 309, 310, 312, 314, 315, 316, 320, 322, 324, 326, 327, 328, 330, 333, 334, 336, 337, 339, 340, 342, 347, 348, 354, 359, 360, 361, 362, 366, 368, 372, 373, 374, 375, 376, 377, 380, 382, 383, 386, 387, 388, 389, 393, 398, 400, 403, 406, 408, 409, 410, 411, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 518, 519, 520, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 622, 623, 627, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 715, 716, 718, 722, 723, 725, 730, 732, 733, 734, 735, 736, 739, 741, 742, 743, 745, 746, 759, 760, 762, 766, 768, 769, 774, 783, 788, 789, 790, 792, 793, 794, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 926, 928, 929, 930, 931, 933, 934, 935, 936, 939, 940, 941, 950, 952, 953, 968, 971, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "data1010": 1042, "data_filenam": [506, 510], "data_hom": [490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 1044, 1053], "data_home_path": 504, "data_id": [44, 145, 177, 188, 215, 233, 243, 267, 287, 290, 319, 374, 501], "data_ind": 53, "data_max": 1042, "data_max_": [879, 1042], "data_min": 1042, "data_min_": [879, 1042], "data_nam": 398, "data_path": 47, "data_rang": 1042, "data_range_": [879, 1042], "data_sampl": 54, "data_set": 309, "data_size_mb": 356, "data_stream": 47, "data_test": [247, 267, 274, 354, 514], "data_test_size_mb": 354, "data_train": [247, 267, 274, 354, 514], "data_train_size_mb": 354, "data_transform": 644, "data_transpos": [1051, 1053], "data_unravel_indic": 53, "data_vers": 398, "databas": [47, 170, 318, 367, 369, 375, 377, 412, 417, 419, 420, 423, 446, 448, 515, 560, 561, 902, 1018], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 102, 103, 104, 135, 141, 145, 148, 153, 169, 177, 183, 187, 188, 189, 190, 195, 200, 204, 219, 223, 233, 253, 256, 263, 267, 271, 273, 274, 276, 284, 285, 287, 290, 318, 319, 320, 325, 326, 327, 350, 354, 355, 374, 375, 380, 382, 385, 394, 413, 419, 436, 446, 447, 449, 451, 453, 468, 470, 471, 472, 486, 487, 488, 489, 493, 494, 495, 497, 501, 505, 506, 507, 509, 510, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 567, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 693, 694, 697, 805, 808, 809, 819, 835, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 907, 931, 960, 976, 979, 994, 995, 996, 1026, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "datalim": 260, "datapoint": [43, 77, 85, 89, 176, 179, 199, 247, 248, 252, 268, 273, 292, 422, 450, 507, 562, 563, 564, 565, 569, 570, 571, 616, 917, 918, 919, 920, 999], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 103, 104, 105, 106, 107, 111, 112, 113, 116, 120, 123, 124, 125, 126, 127, 128, 130, 131, 134, 136, 137, 138, 139, 140, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 166, 167, 168, 169, 170, 171, 173, 175, 180, 183, 184, 190, 191, 193, 194, 197, 199, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 237, 239, 240, 241, 243, 246, 248, 250, 251, 255, 256, 258, 260, 261, 262, 264, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 343, 344, 345, 346, 348, 350, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 368, 369, 383, 384, 386, 393, 394, 397, 398, 406, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 424, 427, 432, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 462, 463, 473, 474, 477, 478, 479, 480, 482, 485, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 588, 589, 592, 593, 594, 595, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 636, 637, 638, 639, 640, 643, 644, 645, 648, 650, 651, 652, 654, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 713, 715, 716, 734, 760, 762, 792, 793, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 865, 866, 867, 869, 870, 873, 874, 882, 883, 887, 889, 891, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 935, 936, 940, 941, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "dataset_44063": 52, "dataset_nam": [252, 293], "datasets_0004_44063": 52, "datasets_nam": 252, "datastructur": [408, 1045, 1049], "datastuctur": 1054, "datatyp": [468, 470, 1044, 1047], "date": [43, 102, 151, 170, 177, 189, 375, 377, 380, 384, 395, 413, 1026], "dateco2datef641958": 177, "daten": [454, 1045, 1046], "datenbergwerk": 1047, "datetim": [43, 55, 177, 189], "dauphin": 1039, "dave": [1037, 1044, 1045, 1051, 1053], "davi": [2, 478, 730, 1006, 1041], "david": [0, 112, 375, 402, 412, 419, 422, 466, 537, 541, 572, 573, 627, 628, 633, 730, 802, 906, 996, 1002, 1010, 1019, 1030, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "davidblnc": [1052, 1053], "davidleon123": 1055, "davies_bouldin_scor": [2, 412, 1045], "davis2006": 1006, "daw": [0, 402, 1037, 1038, 1039, 1040, 1041], "dawson": [1041, 1055], "dayn": [1052, 1053], "db": [82, 88, 412], "dbauer9": 1048, "dberenbaum": 1053, "dbg": 386, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 88, 93, 96, 98, 185, 328, 334, 392, 394, 450, 454, 456, 459, 517, 709, 710, 722, 742, 798, 800, 861, 889, 1009, 1027, 1031, 1032, 1037, 1039, 1041, 1042, 1044, 1045, 1046, 1053, 1054], "dbscan_clust": 450, "dcc": 375, "dcg": [731, 761, 1006, 1044], "dcg_score": [2, 761, 1006, 1044, 1047], "dd": [50, 51, 154, 306, 503], "ddof": [273, 889, 900], "de": [51, 156, 319, 377, 640, 693, 769, 1002, 1003, 1026, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "dea": [1051, 1052, 1053], "deactiv": [254, 374, 381, 386, 398, 413, 808, 809, 1051], "dead": 1055, "deadlock": 395, "deal": [62, 90, 103, 151, 183, 188, 200, 239, 287, 290, 347, 356, 380, 385, 413, 420, 421, 422, 478, 501, 708, 713, 768, 792, 875, 953, 1002, 1030, 1040, 1052, 1053], "dealloc": 1054, "dean": [156, 1045, 1051, 1053, 1055], "death": 375, "debian": [0, 367, 378, 386], "debias": 130, "deborah": [1043, 1044, 1054], "debug": [2, 363, 368, 381, 383, 386, 394, 397, 632, 908, 1045, 1049], "debugg": [383, 388], "dec": [216, 290, 682, 888, 913, 1021], "decad": [188, 1026], "decai": [177, 549, 866, 867, 953, 1006, 1020, 1041], "decal": 1049, "decemb": [112, 151, 177, 375, 669, 690, 691, 1037, 1045, 1047, 1049, 1050, 1052], "decent": [242, 272, 375, 1008], "deci": 282, "decid": [43, 50, 90, 93, 103, 146, 151, 264, 270, 273, 280, 375, 380, 395, 406, 411, 420, 422, 454, 461, 564, 565, 616, 640, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 676, 686, 689, 802, 851, 852, 853, 855, 857, 859, 860, 861, 872, 1005, 1012, 1030, 1050, 1053, 1056], "decil": [637, 1048], "deciles_hlines_": 637, "deciles_vlines_": 637, "decim": [62, 178, 475, 476, 922, 1044, 1045], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 89, 91, 93, 118, 125, 134, 137, 138, 139, 140, 146, 154, 155, 156, 158, 159, 163, 169, 170, 174, 176, 188, 198, 199, 207, 224, 225, 228, 242, 243, 245, 250, 253, 265, 276, 277, 279, 280, 290, 301, 304, 308, 313, 314, 315, 318, 331, 335, 336, 339, 340, 341, 342, 343, 344, 345, 351, 352, 354, 367, 376, 377, 380, 394, 406, 407, 410, 412, 419, 441, 473, 501, 505, 509, 524, 541, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 598, 599, 636, 637, 638, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 703, 705, 707, 708, 712, 723, 725, 731, 732, 740, 744, 745, 747, 761, 787, 789, 792, 793, 794, 799, 804, 805, 808, 809, 819, 821, 827, 832, 835, 837, 838, 840, 851, 870, 889, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 1000, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1054, 1055], "decision_funct": [48, 50, 62, 64, 89, 137, 152, 163, 227, 228, 229, 243, 252, 267, 280, 287, 299, 300, 308, 315, 329, 341, 342, 343, 347, 348, 352, 382, 394, 410, 411, 419, 441, 473, 554, 555, 558, 560, 564, 566, 568, 572, 598, 599, 636, 637, 638, 663, 664, 671, 673, 679, 680, 681, 682, 703, 705, 707, 712, 725, 731, 732, 740, 744, 745, 747, 761, 787, 793, 794, 799, 804, 805, 808, 809, 819, 827, 830, 837, 838, 839, 840, 855, 869, 876, 906, 909, 911, 913, 914, 928, 1002, 1006, 1012, 1013, 1020, 1021, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1054, 1056], "decision_function_shap": [322, 351, 911, 914, 1021, 1042, 1043, 1046, 1047], "decision_path": [362, 562, 563, 569, 570, 571, 917, 918, 919, 920, 1043, 1048], "decision_threshold": [267, 287], "decision_tre": [921, 922, 923, 1022], "decision_tree_learn": [917, 918, 1022], "decisionboundarydisplai": [2, 48, 66, 67, 70, 89, 137, 152, 157, 199, 207, 224, 229, 276, 296, 301, 304, 318, 339, 340, 341, 342, 344, 345, 347, 359, 1051, 1052, 1054, 1055], "decisiontre": [144, 558, 1042], "decisiontreeclassifi": [2, 67, 135, 137, 144, 157, 277, 290, 328, 358, 359, 362, 394, 411, 419, 558, 560, 562, 564, 566, 569, 636, 716, 811, 833, 918, 919, 921, 922, 923, 996, 1007, 1022, 1038, 1039, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "decisiontreeclassifierifitteddecisiontreeclassifi": 362, "decisiontreeregressor": [2, 136, 138, 253, 314, 322, 328, 360, 361, 385, 559, 561, 563, 564, 565, 567, 570, 637, 638, 917, 920, 922, 948, 996, 1007, 1022, 1038, 1039, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "decisiontreeregressorifitteddecisiontreeregressor": 324, "declan": 1049, "declar": [89, 236, 249, 363, 380, 381, 386, 394, 447, 450, 451, 463, 475, 476, 482, 695, 699, 1044, 1048], "decod": [47, 306, 375, 394, 508, 574, 593, 594, 596, 1037, 1038], "decode_error": [47, 420, 508, 593, 594, 596, 1039], "decompos": [11, 121, 125, 138, 315, 539, 543, 714, 830, 953, 1001, 1002, 1006, 1023, 1031, 1032], "decomposit": [2, 9, 44, 45, 54, 55, 83, 91, 102, 104, 105, 106, 116, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 154, 193, 235, 236, 238, 246, 247, 250, 251, 254, 272, 297, 302, 318, 326, 329, 330, 355, 369, 373, 386, 389, 394, 408, 409, 410, 413, 419, 424, 453, 455, 456, 457, 466, 486, 487, 488, 500, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 561, 616, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 677, 678, 679, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 802, 803, 858, 865, 868, 871, 887, 918, 952, 953, 1002, 1003, 1006, 1023, 1025, 1027, 1028, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "decompress": [406, 1037], "decor": [2, 189, 322, 380, 381, 382, 389, 811, 828, 943, 947, 948, 966, 972, 1047, 1050, 1053, 1055], "decoupl": [419, 1008], "decreas": [63, 74, 80, 88, 91, 99, 107, 151, 153, 169, 170, 180, 188, 189, 191, 223, 245, 246, 275, 280, 308, 315, 318, 322, 358, 367, 369, 380, 410, 412, 419, 445, 449, 467, 526, 539, 540, 546, 562, 563, 564, 565, 566, 567, 569, 570, 571, 607, 640, 641, 642, 681, 682, 683, 711, 717, 732, 787, 794, 866, 867, 917, 918, 919, 920, 995, 997, 998, 1002, 1003, 1006, 1009, 1010, 1013, 1014, 1020, 1021, 1030, 1039, 1044, 1047, 1050], "dede00": [79, 95, 96], "dedic": [43, 271, 352, 378, 384, 386, 392, 395, 408, 412, 589, 677, 679, 692, 995, 1002, 1025, 1045, 1054], "deduc": 46, "deduct": 1010, "dedupl": 1041, "deeksha": 1049, "deem": [281, 282, 539, 1014, 1050], "deep": [215, 382, 394, 406, 419, 426, 437, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 774, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 1010, 1011, 1025, 1026, 1030, 1042, 1048, 1049, 1051], "deepcopi": 382, "deeper": [354, 1022], "deepest": [566, 567, 1048], "deeplook": 1047, "deeppink": 282, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 85, 88, 89, 91, 94, 102, 107, 119, 121, 123, 124, 128, 130, 133, 135, 138, 140, 145, 147, 148, 151, 156, 175, 178, 180, 181, 184, 191, 196, 202, 204, 207, 212, 215, 216, 223, 224, 225, 233, 235, 236, 249, 250, 252, 258, 259, 260, 261, 263, 264, 267, 268, 271, 272, 273, 274, 276, 281, 284, 288, 293, 298, 300, 303, 306, 309, 311, 313, 315, 318, 319, 322, 330, 336, 339, 343, 347, 352, 354, 355, 356, 367, 375, 380, 382, 386, 387, 392, 413, 416, 420, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 513, 514, 538, 602, 606, 615, 616, 623, 786, 882, 943, 948, 966, 1006, 1013, 1021], "default": [2, 43, 52, 54, 62, 66, 77, 80, 88, 92, 121, 141, 166, 172, 183, 189, 195, 196, 204, 215, 216, 233, 244, 246, 252, 254, 256, 261, 267, 268, 276, 282, 287, 292, 293, 313, 317, 320, 322, 323, 327, 329, 330, 347, 350, 351, 354, 355, 356, 358, 362, 363, 367, 368, 374, 375, 378, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 398, 403, 406, 410, 411, 412, 413, 416, 417, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 739, 740, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 939, 941, 942, 943, 945, 947, 948, 952, 953, 954, 955, 956, 957, 958, 959, 968, 970, 971, 974, 975, 976, 978, 979, 980, 986, 989, 991, 992, 994, 995, 996, 998, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "default_bas": [79, 95], "default_rng": 276, "default_scor": 385, "default_tag": 2, "default_target_attribut": 374, "default_tim": [230, 261], "defaultdict": [49, 52, 62, 191, 276, 355, 356], "defazio": [663, 1002], "defens": 290, "defer": 380, "deffici": 1055, "defici": [555, 1003, 1020], "defin": [8, 27, 46, 51, 64, 70, 86, 88, 90, 99, 102, 103, 105, 116, 121, 126, 133, 135, 136, 156, 170, 172, 179, 180, 181, 189, 190, 191, 195, 216, 223, 232, 233, 242, 246, 249, 253, 255, 258, 263, 267, 273, 274, 276, 280, 282, 283, 284, 285, 287, 290, 293, 311, 313, 323, 329, 330, 343, 347, 350, 354, 355, 367, 376, 379, 380, 381, 382, 386, 387, 389, 392, 393, 394, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 427, 428, 429, 431, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 463, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 493, 524, 525, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 632, 633, 634, 635, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 701, 702, 704, 713, 715, 716, 721, 726, 727, 728, 729, 730, 733, 736, 743, 746, 750, 751, 753, 755, 756, 758, 759, 762, 765, 771, 786, 790, 795, 796, 797, 798, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 896, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 939, 941, 945, 951, 963, 965, 989, 995, 996, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1026, 1032, 1034, 1039, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056], "definit": [2, 91, 112, 202, 215, 280, 293, 355, 380, 381, 382, 394, 397, 412, 414, 415, 417, 532, 534, 540, 616, 633, 697, 713, 723, 733, 751, 763, 802, 803, 995, 998, 1000, 1002, 1004, 1006, 1009, 1020, 1024, 1032, 1041, 1045, 1052], "definitelyuncertain": 1043, "deflat": [188, 415, 424, 538], "defoi": 1050, "deform": [152, 263, 352], "degener": [119, 259, 424, 444, 458, 538, 725, 1002, 1006, 1046, 1050, 1051], "degrad": [151, 189, 242, 313, 350, 355, 418, 783, 1014], "degre": [43, 70, 123, 137, 177, 183, 187, 188, 189, 193, 195, 200, 202, 204, 216, 219, 248, 254, 258, 259, 260, 263, 264, 273, 288, 311, 324, 325, 340, 347, 349, 417, 421, 450, 456, 503, 540, 546, 644, 645, 648, 661, 780, 802, 805, 855, 884, 888, 911, 912, 913, 914, 915, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1012, 1013, 1016, 1019, 1021, 1040, 1046, 1050, 1051, 1054], "degrees_of_freedom_": 802, "degrees_of_freedom_prior": 802, "degrees_of_freedom_prior_": 802, "dei": 1049, "deil": [1038, 1048, 1049], "dein": 420, "dekel": [671, 672, 1002], "del": [55, 386, 1049, 1050], "delai": [2, 380, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 805, 819, 830, 831, 1051, 1052, 1055], "delalleau": 1019, "delanou": 1048, "delattr": 1049, "delayed_funct": 971, "delbert": [73, 444, 458], "deleg": [89, 386, 436, 437, 922, 994, 1041, 1043, 1049], "delet": [2, 104, 333, 335, 384, 385, 473, 478, 490], "delete_index": 333, "delete_indic": 333, "deleteri": 1044, "deli": 406, "deliber": 1002, "delimit": [380, 1012, 1052], "deliv": [367, 1030], "deliveri": 384, "dell": 51, "delong": [1049, 1050], "delta": [415, 456], "delta_": 1003, "delta_k": 415, "delteil": 1041, "delv": [866, 867], "demand": [147, 151, 394, 420, 805, 819, 830, 831], "demarc": 93, "demiraj": [1052, 1053], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 152, 185, 191, 200, 221, 246, 261, 263, 274, 282, 318, 334, 354, 355, 382, 409, 412, 420, 444, 445, 448, 450, 451, 452, 454, 455, 457, 459, 462, 465, 507, 516, 517, 518, 546, 709, 710, 722, 724, 742, 798, 800, 870, 889, 890, 1027], "demo_param": 382, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 88, 94, 102, 104, 135, 139, 146, 149, 167, 168, 180, 181, 185, 191, 216, 249, 255, 256, 260, 264, 265, 269, 276, 279, 282, 288, 295, 298, 305, 312, 314, 315, 317, 320, 324, 331, 333, 334, 337, 341, 347, 354, 355, 356, 363, 369, 375, 376, 380, 385, 392, 403, 408, 412, 416, 419, 451, 507, 517, 525, 702, 708, 718, 747, 803, 805, 852, 874, 905, 917, 995, 996, 1000, 1006, 1007, 1008, 1009, 1016, 1019, 1022, 1024, 1027], "dem\u0161ar": 273, "den": [0, 401, 1038, 1039, 1044, 1045, 1046, 1049, 1050], "dendrit": [412, 715], "dendro": 191, "dendro_idx": 191, "dendrogram": [71, 100, 185, 191, 362, 412, 445, 449, 509, 1027, 1049], "denero": 740, "deng": [1041, 1042, 1043], "dengemann": 1038, "dengyong": 905, "deni": [1039, 1040, 1044, 1045, 1046, 1052, 1053], "denni": 1051, "denois": [42, 68, 83, 84, 86, 120, 126, 185, 417, 501, 540, 542, 546, 589, 592, 835, 879, 1027], "denomin": [280, 419, 420, 425, 479, 595, 709, 762, 1000], "denot": [168, 389, 394, 398, 410, 412, 416, 419, 593, 594, 596, 805, 811, 819, 828, 882, 883, 990, 995, 998, 1002, 1004, 1006, 1007, 1016, 1019, 1054], "dens": [51, 55, 88, 185, 194, 200, 203, 209, 326, 327, 336, 367, 389, 394, 412, 417, 419, 421, 447, 450, 451, 453, 468, 471, 501, 528, 529, 532, 539, 540, 549, 571, 612, 613, 634, 635, 657, 662, 663, 664, 671, 672, 673, 677, 678, 681, 682, 683, 692, 693, 694, 697, 698, 765, 766, 772, 784, 797, 866, 867, 874, 881, 882, 884, 886, 887, 888, 889, 898, 899, 900, 901, 902, 909, 910, 911, 912, 914, 915, 954, 976, 979, 996, 999, 1002, 1003, 1006, 1007, 1009, 1012, 1016, 1018, 1019, 1020, 1021, 1022, 1027, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "dense_lasso": 201, "dense_output": [766, 772, 902, 954, 1045], "denser": 448, "densif": 1046, "densifi": [394, 663, 664, 671, 672, 673, 681, 682, 683, 909, 996, 1039], "densiti": [2, 50, 82, 88, 93, 98, 107, 130, 168, 170, 175, 185, 201, 215, 230, 233, 239, 242, 246, 257, 258, 264, 273, 279, 290, 294, 299, 300, 313, 343, 354, 375, 377, 389, 394, 412, 419, 423, 431, 448, 450, 452, 454, 456, 468, 471, 503, 507, 541, 546, 554, 555, 802, 803, 805, 849, 850, 854, 855, 902, 1000, 1002, 1005, 1009, 1011, 1012, 1018, 1025, 1027, 1028, 1031, 1032, 1039, 1041, 1045, 1046, 1052, 1053], "density_": 902, "densityestim": 431, "densitymixin": 2, "denton": 1039, "deodhar": 1049, "deoli": 1050, "depart": [180, 412], "depedend": 1054, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 86, 107, 125, 141, 145, 148, 149, 151, 153, 156, 165, 169, 178, 183, 185, 186, 188, 191, 193, 196, 200, 233, 236, 241, 242, 248, 252, 263, 267, 273, 274, 278, 279, 280, 287, 293, 309, 313, 318, 324, 327, 330, 340, 347, 350, 355, 356, 363, 367, 368, 369, 373, 380, 382, 383, 388, 389, 392, 393, 394, 395, 397, 398, 405, 406, 408, 412, 414, 416, 417, 419, 420, 421, 422, 423, 442, 443, 444, 448, 450, 451, 453, 454, 456, 458, 461, 463, 464, 466, 468, 473, 488, 493, 494, 495, 498, 501, 505, 506, 507, 509, 510, 515, 539, 540, 546, 549, 556, 564, 565, 567, 593, 594, 595, 596, 607, 609, 612, 613, 616, 632, 637, 638, 643, 645, 653, 663, 664, 674, 676, 678, 681, 682, 683, 685, 692, 695, 696, 699, 700, 716, 734, 735, 743, 783, 786, 788, 789, 792, 797, 798, 802, 803, 824, 834, 851, 852, 853, 855, 857, 858, 859, 860, 861, 867, 868, 870, 882, 883, 886, 889, 903, 910, 911, 914, 918, 933, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1014, 1018, 1020, 1021, 1022, 1027, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1053, 1054], "dependabot": 1055, "dependen": 350, "depict": [135, 275, 419, 1005], "deploi": [267, 330, 367, 397, 406, 411, 1026, 1030], "deploy": [388, 406, 1025, 1026, 1030], "depot": 51, "deprec": [2, 16, 149, 191, 322, 325, 368, 382, 383, 384, 389, 394, 403, 446, 449, 451, 454, 461, 463, 486, 487, 488, 489, 532, 541, 543, 545, 558, 574, 575, 584, 585, 587, 632, 663, 664, 678, 680, 684, 697, 714, 747, 783, 784, 785, 787, 805, 808, 809, 819, 833, 834, 836, 856, 868, 869, 874, 906, 911, 914, 931, 933, 935, 936, 947, 948, 995, 996, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "deprecated_api_refer": 380, "deprecationwarn": 1047, "dept": 377, "depth": [43, 140, 145, 149, 152, 157, 290, 358, 360, 361, 362, 367, 378, 380, 384, 393, 419, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 849, 850, 854, 917, 918, 919, 920, 921, 923, 959, 1011, 1012, 1022, 1039, 1040, 1048], "der": [697, 701, 1003, 1040, 1041, 1045], "derek": 1045, "deriv": [43, 57, 130, 131, 147, 177, 180, 190, 202, 204, 208, 216, 368, 375, 382, 414, 416, 418, 419, 420, 422, 424, 445, 449, 450, 469, 496, 538, 611, 622, 627, 653, 674, 681, 685, 866, 867, 882, 888, 909, 910, 1000, 1002, 1003, 1006, 1010, 1012, 1021, 1037, 1038, 1039, 1044, 1045, 1046, 1052], "deros": 1048, "derouich": 1037, "derweh": 1055, "desai": [1044, 1046, 1049, 1050, 1052, 1053], "desalvo": 995, "descamp": 1045, "descend": [144, 632, 1047], "descent": [2, 46, 53, 146, 185, 194, 202, 203, 242, 247, 299, 325, 342, 417, 419, 475, 476, 482, 492, 501, 508, 536, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 636, 644, 651, 652, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 673, 677, 679, 681, 682, 683, 686, 687, 688, 689, 692, 699, 835, 866, 867, 870, 909, 913, 979, 1003, 1010, 1012, 1021, 1027, 1028, 1032, 1037, 1040, 1041, 1042, 1044, 1046, 1048, 1050, 1051, 1052], "descr": [170, 373, 374, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 512, 515, 1045], "describ": [2, 43, 52, 89, 156, 170, 188, 233, 247, 273, 282, 363, 367, 368, 373, 375, 377, 379, 380, 382, 385, 388, 394, 395, 409, 412, 414, 415, 416, 417, 419, 420, 466, 473, 477, 478, 495, 498, 500, 501, 502, 505, 506, 507, 508, 509, 510, 515, 521, 522, 523, 533, 612, 613, 650, 664, 673, 719, 802, 803, 844, 846, 882, 884, 953, 995, 998, 1001, 1002, 1005, 1006, 1008, 1012, 1020, 1021, 1022, 1029, 1045, 1047], "descript": [2, 52, 170, 188, 319, 373, 374, 379, 380, 384, 385, 388, 394, 412, 420, 456, 466, 468, 471, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 512, 515, 549, 635, 681, 767, 770, 783, 1006, 1020, 1021, 1026, 1029, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "descriptor": [394, 513, 514], "deseri": 406, "deserv": [380, 386], "deshmukh": 1050, "deshpand": [1042, 1043], "design": [0, 2, 53, 58, 111, 135, 156, 175, 187, 188, 197, 249, 263, 267, 313, 319, 362, 369, 374, 380, 385, 392, 393, 394, 395, 397, 398, 400, 405, 406, 412, 419, 421, 520, 533, 637, 638, 653, 670, 674, 681, 685, 690, 805, 823, 824, 844, 846, 996, 1002, 1003, 1006, 1007, 1016, 1025, 1026, 1030, 1039, 1046, 1055], "desir": [50, 61, 137, 170, 184, 215, 217, 313, 317, 330, 373, 380, 388, 400, 406, 409, 412, 415, 416, 417, 421, 508, 543, 545, 549, 552, 572, 598, 607, 608, 669, 675, 690, 691, 704, 713, 741, 849, 850, 854, 869, 874, 876, 879, 880, 882, 883, 885, 886, 890, 893, 895, 897, 898, 939, 974, 998, 1000, 1003, 1009, 1016, 1020, 1021, 1022, 1037, 1045, 1046, 1047, 1050], "desislava": 1051, "desktop": 378, "despit": [64, 116, 178, 213, 215, 233, 248, 302, 394, 403, 414, 632, 633, 635, 1002, 1009, 1030, 1045, 1046], "dessyvv": 1051, "dest": 327, "destin": 1030, "destroi": [279, 420, 800, 878, 1016], "det": [2, 185, 255, 265, 282, 283, 380, 414, 520, 569, 703, 707, 732, 794, 835, 870, 889, 909, 951, 1027, 1049], "det_curv": [2, 270, 703, 787, 794, 1006, 1049, 1050, 1055], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 90, 135, 136, 138, 142, 144, 149, 156, 185, 189, 202, 204, 219, 240, 244, 247, 248, 252, 254, 256, 264, 267, 271, 280, 287, 296, 299, 300, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 358, 360, 361, 363, 367, 368, 369, 372, 373, 374, 375, 378, 380, 382, 384, 385, 386, 388, 392, 393, 394, 395, 398, 406, 408, 411, 412, 415, 416, 417, 419, 420, 421, 422, 423, 436, 437, 441, 447, 448, 450, 451, 452, 454, 455, 456, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 476, 501, 509, 529, 536, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 553, 554, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 598, 599, 602, 607, 612, 613, 615, 619, 624, 627, 632, 633, 635, 636, 637, 639, 644, 645, 650, 651, 652, 656, 658, 660, 661, 662, 663, 664, 666, 668, 670, 671, 673, 676, 677, 678, 679, 680, 681, 683, 684, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 716, 718, 779, 783, 784, 785, 786, 803, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 847, 851, 852, 854, 855, 856, 857, 859, 860, 862, 863, 865, 868, 869, 871, 873, 874, 886, 890, 898, 904, 905, 906, 907, 911, 914, 917, 918, 919, 920, 947, 971, 995, 996, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1019, 1022, 1028, 1029, 1030, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "detcurvedisplai": [2, 270, 325, 732, 1049, 1050, 1054, 1055], "detect": [2, 14, 42, 47, 49, 58, 70, 96, 98, 111, 112, 113, 142, 145, 152, 185, 197, 219, 229, 241, 255, 265, 267, 273, 276, 282, 283, 294, 313, 319, 330, 342, 375, 378, 380, 384, 392, 394, 410, 411, 412, 414, 416, 420, 434, 450, 453, 468, 470, 473, 474, 477, 478, 479, 480, 492, 493, 495, 497, 501, 515, 517, 520, 527, 542, 543, 544, 551, 568, 569, 593, 596, 601, 636, 644, 682, 703, 707, 732, 794, 835, 855, 859, 870, 879, 882, 883, 887, 888, 889, 909, 913, 998, 1002, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1037, 1040, 1043, 1044, 1045, 1047, 1049, 1050, 1052, 1053, 1056], "detection_error_tradeoff": 1006, "detector": [375, 394, 855], "determin": [2, 48, 50, 53, 57, 80, 88, 111, 135, 137, 141, 151, 168, 177, 188, 195, 196, 211, 218, 273, 286, 313, 318, 347, 356, 362, 363, 379, 380, 382, 389, 393, 394, 409, 410, 412, 416, 417, 419, 420, 421, 422, 435, 441, 445, 446, 447, 449, 451, 453, 454, 460, 463, 464, 465, 469, 473, 474, 476, 477, 478, 479, 480, 486, 487, 488, 492, 495, 497, 500, 502, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 542, 544, 547, 548, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 570, 572, 573, 575, 587, 588, 589, 593, 596, 599, 607, 612, 613, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 640, 641, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 692, 694, 695, 697, 698, 699, 712, 716, 728, 734, 735, 743, 788, 789, 790, 792, 793, 798, 805, 807, 808, 809, 811, 819, 827, 828, 829, 830, 831, 832, 833, 834, 836, 840, 842, 843, 845, 852, 854, 855, 860, 865, 866, 867, 873, 874, 882, 883, 884, 886, 890, 898, 909, 910, 912, 915, 918, 920, 923, 951, 968, 974, 976, 979, 995, 998, 1000, 1005, 1009, 1011, 1012, 1014, 1016, 1019, 1020, 1022, 1037, 1042, 1045, 1046, 1048, 1049, 1050, 1056], "determinist": [91, 148, 368, 376, 394, 412, 447, 451, 453, 455, 456, 457, 462, 463, 466, 556, 564, 565, 569, 570, 588, 589, 696, 700, 816, 817, 865, 917, 918, 928, 998, 1002, 1038, 1041, 1043, 1045, 1046, 1049, 1052, 1053], "detlefsen": 1051, "detomaso": 1044, "detriment": [46, 169, 287, 368, 421, 1002], "dev": [181, 188, 233, 278, 283, 378, 380, 384, 386, 388, 947, 948, 1006, 1030, 1033, 1044, 1049, 1052, 1053], "dev0": [378, 384, 1029, 1033], "dev514": 1051, "devansh": [1044, 1045], "devanshkyada27": 1054, "devashish": 1043, "devel": 378, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 328, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 367, 375, 379, 380, 384, 386, 392, 394, 395, 397, 403, 406, 409, 414, 415, 419, 420, 426, 429, 436, 498, 805, 947, 948, 989, 1002, 1006, 1009, 1022, 1025, 1026, 1027, 1029, 1030, 1037, 1045, 1046, 1047, 1052, 1055, 1056], "developing_estim": 1027, "devi": 1049, "devianc": [2, 147, 150, 215, 233, 328, 419, 558, 563, 564, 566, 567, 570, 653, 674, 685, 726, 728, 729, 752, 754, 757, 918, 920, 1002, 1022, 1038, 1047, 1048, 1050, 1051, 1053], "deviant": [221, 1012], "deviat": [52, 58, 70, 94, 111, 138, 141, 142, 143, 144, 146, 170, 172, 177, 179, 181, 188, 195, 221, 252, 270, 271, 272, 273, 274, 276, 299, 300, 313, 318, 372, 376, 377, 385, 389, 394, 416, 419, 422, 454, 476, 506, 516, 517, 518, 519, 521, 522, 523, 527, 529, 530, 535, 557, 599, 616, 639, 649, 650, 676, 729, 757, 811, 828, 855, 878, 879, 889, 898, 899, 900, 1002, 1006, 1012, 1016, 1043, 1044, 1045, 1048, 1049, 1050], "devic": [416, 587, 1025, 1055], "devnani": 1049, "deweight": 955, "dexter": 1047, "dezub": 1044, "df": [43, 52, 62, 64, 151, 156, 187, 189, 195, 200, 215, 233, 263, 273, 317, 319, 329, 355, 385, 420, 470, 595, 596, 995, 996, 1054], "df_": 233, "df_freq": 233, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 329, "df_sev": 233, "df_std": 355, "df_test": [215, 233], "df_train": [215, 233], "dfrac": [1010, 1016], "dgemm": 367, "dgesdd": 386, "dhanshre": 1052, "dhillon": [2, 57, 409, 455, 457, 516], "dhingra": [1045, 1046, 1049, 1054], "di": [394, 412, 417, 536, 542, 669, 690, 691, 902, 1041, 1050], "dia": 1054, "diabet": [2, 46, 149, 159, 160, 170, 184, 185, 202, 204, 211, 212, 269, 373, 419, 506, 657, 658, 805, 810, 830, 831, 832, 1014, 1027, 1032], "diabetes_i": 211, "diabetes_x": 211, "diabetes_x_test": 211, "diabetes_x_train": 211, "diabetes_y_pr": 211, "diabetes_y_test": 211, "diabetes_y_train": 211, "diadochokinet": 1052, "diag": [51, 113, 180, 260, 263, 417, 422, 537, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 802, 803, 1002, 1052], "diag_kind": [187, 188], "diagnos": [170, 276, 377, 388, 397, 413], "diagnosi": [170, 276, 377, 856], "diagnost": [170, 191, 276, 373, 394, 411, 505, 717, 831, 832, 1006, 1014, 1025, 1026, 1032], "diagon": [2, 43, 62, 64, 75, 113, 115, 233, 252, 260, 263, 264, 266, 343, 409, 412, 414, 422, 457, 475, 476, 482, 485, 516, 518, 532, 537, 555, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 655, 656, 659, 660, 661, 687, 688, 706, 720, 797, 802, 803, 853, 861, 998, 1000, 1002, 1005, 1006, 1009, 1016, 1043, 1045, 1046, 1047], "diagram": [2, 62, 64, 103, 254, 323, 329, 382, 410, 412, 442, 443, 472, 907, 1016, 1048, 1049, 1054, 1055], "diamet": 412, "diamond": 261, "diaz": 1045, "dice": [454, 461, 704, 783, 784, 785, 1009], "dicedist": 704, "dichotomis": 1022, "dickerson": 1038, "dickson": 1044, "dico": 124, "dict": [48, 49, 50, 51, 55, 63, 74, 102, 105, 106, 127, 141, 146, 148, 150, 213, 221, 242, 251, 260, 271, 272, 274, 277, 280, 282, 293, 297, 315, 319, 326, 336, 343, 347, 355, 356, 369, 372, 374, 382, 392, 394, 413, 416, 423, 424, 426, 430, 434, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 716, 718, 767, 770, 776, 784, 785, 802, 803, 804, 805, 808, 809, 811, 816, 817, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 926, 928, 940, 941, 959, 962, 965, 994, 995, 1006, 1016, 1032, 1037, 1043, 1044, 1053, 1054, 1055], "dict_count_vector": 356, "dict_init": [536, 542, 550, 551], "dict_kei": 631, "dict_learn": [2, 389, 536, 542, 551, 1038, 1045, 1047, 1050, 1051, 1053], "dict_learning_onlin": [2, 550, 1038, 1047, 1050, 1051, 1054], "dict_pos_code_estim": 121, "dict_pos_dict_estim": 121, "dict_pos_estim": 121, "dict_typ": 586, "dictat": 412, "dictionari": [2, 44, 45, 46, 47, 71, 84, 86, 120, 122, 151, 153, 185, 214, 249, 251, 267, 355, 356, 373, 374, 375, 382, 392, 394, 412, 420, 453, 468, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 515, 531, 536, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 572, 573, 574, 575, 586, 587, 589, 592, 593, 594, 599, 637, 638, 639, 669, 690, 691, 706, 716, 718, 805, 808, 809, 816, 817, 819, 827, 832, 868, 873, 882, 917, 918, 919, 920, 924, 926, 928, 940, 962, 965, 995, 1002, 1006, 1021, 1027, 1031, 1032, 1037, 1045, 1048, 1049, 1050, 1051, 1052], "dictionarylearn": [2, 417, 542, 544, 545, 547, 548, 549, 550, 551, 1038, 1042, 1044, 1047, 1050, 1051, 1052, 1053], "dictlearn": 1042, "dictvector": [2, 47, 57, 102, 185, 353, 354, 355, 375, 420, 492, 587, 593, 594, 595, 596, 882, 1027, 1037, 1038, 1041, 1047, 1049, 1050, 1053, 1054], "did": [148, 172, 188, 191, 215, 223, 233, 259, 267, 320, 375, 406, 632, 717, 824, 911, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052], "didact": [380, 1026], "didi": [1043, 1044, 1045, 1046], "didn": [249, 363, 394, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "die": 1003, "diebold": 273, "diederik": [866, 867, 1010, 1052], "diederikwp": 1052, "diego": [1038, 1039], "diegodlh": [1044, 1045], "diemert": [1030, 1039, 1040], "diesel": [215, 233], "dietterich": [273, 839, 1007], "diff": [383, 1006], "diff_embed": 303, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 118, 119, 121, 123, 124, 126, 128, 129, 130, 135, 138, 140, 141, 144, 145, 146, 148, 150, 151, 152, 156, 157, 158, 159, 161, 163, 165, 170, 171, 172, 173, 174, 177, 178, 179, 183, 184, 185, 187, 188, 190, 193, 195, 196, 199, 201, 202, 203, 204, 206, 212, 215, 216, 217, 219, 220, 221, 222, 223, 232, 233, 235, 236, 237, 238, 240, 242, 244, 247, 248, 249, 252, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 286, 287, 288, 290, 292, 293, 296, 299, 300, 302, 308, 309, 312, 314, 315, 317, 318, 322, 330, 337, 338, 339, 341, 342, 343, 345, 346, 350, 351, 354, 355, 356, 363, 367, 368, 369, 374, 375, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 393, 394, 398, 400, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 437, 441, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 462, 463, 466, 468, 479, 482, 494, 498, 499, 501, 508, 509, 513, 514, 517, 519, 527, 542, 543, 544, 545, 551, 552, 554, 555, 560, 561, 568, 586, 587, 593, 594, 595, 596, 599, 616, 618, 619, 620, 624, 627, 628, 632, 636, 637, 638, 639, 643, 648, 649, 650, 652, 654, 656, 658, 660, 663, 666, 671, 672, 677, 679, 681, 682, 683, 685, 695, 697, 699, 703, 705, 706, 709, 710, 711, 712, 714, 720, 722, 723, 732, 733, 734, 735, 736, 739, 740, 742, 748, 762, 763, 764, 766, 783, 787, 788, 789, 791, 792, 794, 797, 798, 800, 803, 805, 807, 808, 809, 810, 811, 814, 819, 820, 821, 823, 824, 825, 827, 828, 830, 832, 833, 836, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 859, 862, 865, 869, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 894, 895, 896, 897, 898, 899, 900, 909, 910, 911, 914, 917, 918, 919, 920, 962, 969, 995, 996, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1030, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "difference_plot": 278, "differenti": [118, 280, 419, 422, 564, 565, 624, 627], "difficult": [88, 135, 188, 223, 252, 380, 388, 410, 417, 419, 558, 559, 564, 566, 567, 1001, 1003, 1005, 1009, 1011, 1013, 1022, 1030, 1037, 1051], "difficulti": [48, 64, 233, 313, 369, 380, 410, 866, 867, 1005, 1009], "diffus": 177, "digest": [380, 1052, 1056], "digg": [1030, 1044], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 84, 86, 89, 90, 92, 94, 95, 104, 105, 124, 140, 160, 168, 170, 185, 205, 206, 222, 231, 234, 235, 237, 239, 246, 247, 261, 266, 271, 272, 275, 297, 302, 303, 307, 309, 310, 328, 331, 334, 355, 373, 380, 386, 412, 418, 419, 421, 445, 449, 451, 507, 546, 549, 554, 571, 663, 693, 694, 695, 696, 697, 702, 709, 710, 718, 722, 723, 742, 798, 800, 835, 851, 858, 865, 869, 870, 879, 889, 895, 902, 905, 914, 921, 922, 923, 1003, 1006, 1009, 1011, 1019, 1027, 1032, 1041], "digraph": 921, "dijkstra": [389, 693, 1003], "dilemma": 1001, "dillon": [1045, 1046, 1047], "dilut": [191, 377], "dilutedsauc": 1045, "dim": [224, 246, 301, 302, 304, 339, 340, 532, 704, 1054], "dim_reduction_method": 302, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 86, 113, 115, 118, 121, 170, 174, 176, 178, 180, 189, 199, 200, 213, 237, 239, 242, 246, 247, 253, 259, 260, 297, 298, 302, 316, 347, 354, 355, 356, 375, 377, 381, 394, 412, 417, 418, 422, 424, 446, 447, 449, 451, 452, 453, 456, 468, 469, 486, 487, 488, 498, 499, 520, 529, 530, 534, 535, 538, 546, 554, 587, 588, 589, 590, 592, 594, 602, 616, 624, 627, 646, 649, 664, 695, 696, 697, 699, 700, 704, 769, 830, 849, 850, 854, 868, 901, 902, 903, 911, 912, 913, 914, 915, 935, 936, 937, 968, 976, 979, 996, 998, 1000, 1002, 1003, 1004, 1007, 1009, 1010, 1012, 1018, 1021, 1025, 1044, 1046, 1047, 1049], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 87, 88, 90, 91, 95, 101, 103, 105, 106, 115, 116, 119, 121, 128, 129, 135, 140, 154, 170, 172, 174, 175, 179, 185, 200, 211, 216, 232, 234, 236, 237, 239, 242, 246, 247, 250, 259, 260, 294, 297, 301, 303, 315, 340, 347, 354, 363, 367, 372, 375, 376, 377, 380, 389, 394, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 449, 451, 453, 469, 473, 477, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 502, 505, 506, 507, 509, 510, 515, 520, 524, 537, 539, 540, 543, 544, 545, 546, 549, 552, 554, 568, 571, 578, 604, 612, 636, 645, 646, 647, 657, 693, 694, 695, 696, 697, 698, 699, 701, 704, 715, 730, 802, 803, 805, 835, 849, 850, 851, 854, 857, 858, 865, 869, 870, 873, 879, 884, 889, 901, 902, 903, 909, 913, 953, 991, 997, 998, 1001, 1002, 1007, 1008, 1012, 1018, 1019, 1020, 1021, 1022, 1027, 1028, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1049, 1052, 1053], "dimensionalityreduct": 377, "dimensionalityreductiondimension": 400, "diminish": 420, "dimitri": [1050, 1051, 1052, 1053, 1054], "dimmick": 377, "dinga92": 1055, "dingwal": 1044, "dionisi": 1051, "diop": 1047, "dipan": 1055, "direct": [51, 115, 116, 121, 123, 129, 170, 221, 258, 264, 270, 302, 311, 318, 343, 348, 378, 380, 381, 384, 388, 395, 398, 412, 415, 417, 420, 421, 456, 466, 475, 476, 482, 539, 546, 554, 593, 594, 596, 607, 646, 693, 858, 1000, 1001, 1002, 1007, 1009, 1011, 1026, 1037, 1040], "direction": 1055, "direction_vector": 311, "directli": [0, 45, 57, 64, 80, 89, 103, 140, 145, 170, 180, 200, 202, 215, 221, 233, 243, 278, 311, 313, 326, 329, 330, 356, 363, 367, 378, 380, 381, 382, 384, 386, 393, 394, 395, 408, 409, 410, 412, 413, 414, 415, 416, 420, 422, 446, 456, 466, 468, 469, 473, 478, 532, 572, 573, 574, 575, 598, 602, 616, 625, 637, 648, 651, 652, 657, 658, 665, 666, 667, 668, 669, 682, 686, 689, 695, 779, 783, 786, 797, 798, 804, 805, 808, 809, 819, 833, 834, 836, 852, 854, 868, 869, 870, 876, 886, 888, 891, 898, 995, 1002, 1004, 1009, 1011, 1013, 1016, 1021, 1022, 1026, 1037, 1045, 1046, 1048, 1049, 1050, 1053, 1054, 1056], "director": 1030, "directori": [0, 2, 47, 295, 374, 378, 380, 382, 384, 386, 388, 394, 398, 413, 445, 449, 454, 490, 496, 504, 869, 870, 1051], "direr": [1040, 1041, 1044, 1045], "dirichlet": [2, 42, 45, 185, 258, 259, 264, 268, 420, 492, 541, 543, 545, 593, 596, 802, 1025, 1027, 1031, 1032, 1037, 1042, 1043], "dirichlet_distribut": [258, 802, 1005, 1043], "dirichlet_process": [258, 264, 802, 1005, 1043], "disabl": [139, 249, 267, 320, 329, 354, 378, 380, 403, 420, 453, 464, 472, 542, 543, 544, 551, 564, 565, 566, 567, 868, 886, 898, 907, 935, 936, 1016, 1043, 1046, 1050, 1052, 1055], "disadvantag": [417, 422, 1002, 1003, 1010, 1020, 1021, 1022], "disagre": [740, 1013], "disambigu": [380, 837, 906, 1019, 1052], "disappear": [1002, 1037], "disappoint": 43, "discard": [47, 88, 197, 276, 367, 409, 414, 421, 513, 514, 554, 602, 632, 635, 649, 882, 886, 898, 996, 1002, 1045, 1049, 1055], "disclaim": 1025, "disclos": 393, "disconnect": 1050, "discontinu": [43, 392], "discord": [710, 1029], "discount": [2, 375, 412, 731, 761, 1044, 1047], "discounted_cumulative_gain": 731, "discourag": [219, 392, 398, 694], "discov": [355, 412, 417, 420, 423, 448, 452, 1052, 1055], "discoveri": [2, 273, 375, 386, 389, 412, 419, 421, 423, 448, 516, 560, 561, 568, 597, 600, 601, 603, 604, 605, 611, 725, 745, 788, 944, 945, 946, 1006, 1018, 1030, 1051, 1052], "discrep": [420, 1041], "discret": [2, 43, 67, 80, 119, 130, 135, 171, 185, 189, 196, 215, 233, 253, 290, 308, 312, 316, 369, 372, 375, 376, 380, 384, 393, 394, 412, 417, 420, 422, 442, 443, 452, 456, 464, 465, 466, 497, 519, 520, 527, 558, 564, 593, 594, 597, 600, 601, 604, 605, 612, 613, 615, 616, 617, 621, 622, 623, 662, 663, 805, 816, 827, 835, 844, 845, 848, 870, 874, 882, 883, 886, 889, 898, 909, 914, 918, 968, 995, 1002, 1003, 1004, 1006, 1007, 1009, 1022, 1025, 1027, 1032, 1039, 1042, 1050, 1051, 1052], "discrete_featur": [612, 613], "discrim": 215, "discrimin": [2, 12, 48, 49, 65, 109, 110, 111, 112, 113, 129, 165, 167, 170, 185, 193, 230, 236, 250, 263, 302, 377, 410, 419, 479, 517, 554, 555, 571, 636, 788, 858, 995, 1003, 1006, 1009, 1020, 1022, 1027, 1028, 1032, 1040], "discriminant_analysi": [2, 67, 69, 70, 129, 236, 302, 363, 408, 541, 554, 555, 858, 1000, 1007, 1037, 1040, 1041, 1042, 1043, 1044], "discriminatori": 410, "discuss": [43, 86, 91, 170, 188, 204, 235, 240, 267, 276, 290, 354, 363, 369, 375, 377, 380, 385, 386, 388, 392, 394, 395, 411, 412, 414, 418, 419, 422, 503, 687, 688, 851, 852, 857, 859, 860, 996, 1000, 1002, 1003, 1006, 1009, 1016, 1023, 1026, 1029, 1040], "diseas": [46, 159, 170, 184, 276, 377, 717, 1006], "disentangl": 1003, "disjoint": [410, 412, 413, 441, 709, 736, 760, 762, 1003], "disk": [45, 53, 375, 380, 385, 394, 406], "disp": [43, 66, 68, 137, 151, 152, 153, 266, 276, 286, 296, 318, 323, 329, 340, 345, 442, 636, 702, 705, 706, 858], "disp1": 637, "disp2": 637, "dispar": [695, 699, 1003], "dispatch": [103, 267, 394, 408, 472, 805, 819, 830, 831, 832, 907, 971, 972, 1032, 1052, 1055], "dispatch_next": 971, "dispatch_one_batch": 971, "dispers": [70, 287, 412, 715, 730, 1002], "displai": [2, 51, 62, 64, 70, 72, 80, 93, 103, 112, 113, 115, 116, 121, 141, 152, 153, 156, 183, 185, 188, 189, 203, 233, 241, 242, 252, 256, 262, 270, 274, 275, 280, 282, 283, 286, 288, 303, 319, 323, 324, 342, 359, 367, 380, 382, 383, 387, 389, 398, 400, 413, 417, 420, 421, 426, 442, 468, 471, 472, 501, 546, 569, 635, 636, 637, 663, 692, 702, 703, 705, 706, 707, 718, 723, 787, 794, 805, 811, 819, 828, 835, 869, 870, 882, 884, 889, 907, 914, 921, 922, 923, 944, 971, 992, 1006, 1010, 1025, 1027, 1032, 1046, 1048, 1049, 1051, 1052], "display_label": [45, 266, 702, 1049], "dispos": 995, "disproportion": 418, "disput": 141, "disregard": [354, 394, 420, 435, 469, 486, 487, 488, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 726, 727, 728, 729, 790, 842, 843, 852, 860, 867, 878, 879, 885, 886, 889, 894, 897, 898, 900, 910, 912, 915, 918, 920, 1006, 1045], "disrupt": [368, 378], "dissemin": 1025, "dissimilar": [238, 347, 394, 409, 456, 695, 699, 1003, 1043, 1053], "dissimilarity_matrix_": 695, "dist": [111, 236, 246, 384, 473, 474, 475, 476, 477, 478, 479, 480, 704, 768, 774, 849, 850], "dist_": [473, 478], "dist_embed": 303, "dist_linkag": 191, "dist_matrix": 456, "dist_matrix_": 693, "distanc": [2, 37, 74, 75, 88, 90, 93, 94, 98, 100, 108, 112, 126, 170, 183, 185, 191, 201, 216, 218, 235, 237, 240, 246, 252, 293, 295, 296, 301, 303, 305, 306, 313, 318, 322, 326, 327, 347, 354, 355, 367, 377, 389, 392, 394, 409, 412, 414, 417, 418, 422, 423, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 459, 460, 461, 462, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 543, 545, 552, 612, 613, 620, 624, 625, 627, 628, 633, 663, 664, 671, 673, 679, 680, 681, 682, 683, 693, 694, 695, 697, 698, 699, 700, 701, 704, 708, 730, 739, 763, 765, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 797, 798, 801, 805, 819, 838, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 888, 903, 907, 909, 911, 913, 914, 915, 917, 918, 919, 920, 996, 1000, 1003, 1004, 1006, 1009, 1012, 1016, 1018, 1020, 1021, 1026, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "distance_matrix": 191, "distance_metr": [2, 783, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863], "distance_threshold": [76, 445, 449, 1046, 1049], "distancemetr": [2, 394, 418, 852, 1009, 1045, 1049, 1050, 1051, 1054], "distancemetric64": [849, 850], "distances_": [76, 445, 449, 1049], "distant": [412, 697, 714, 1009], "distil": 240, "distinct": [93, 273, 334, 354, 356, 375, 382, 385, 394, 395, 416, 419, 420, 594, 806, 815, 823, 883, 884, 904, 905, 995, 1002, 1009, 1012, 1045], "distinguish": [43, 58, 75, 111, 119, 126, 217, 270, 290, 375, 382, 394, 395, 422, 995, 1006, 1009, 1012], "distort": [37, 214, 246, 377, 410, 886, 898, 903, 1003, 1016, 1018], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 85, 86, 88, 90, 95, 107, 110, 111, 112, 116, 119, 135, 137, 148, 152, 165, 170, 172, 181, 185, 187, 188, 191, 193, 195, 215, 217, 219, 237, 239, 242, 246, 252, 258, 263, 264, 267, 269, 273, 279, 281, 287, 290, 294, 298, 312, 313, 315, 318, 328, 332, 333, 348, 350, 354, 367, 368, 373, 376, 377, 378, 380, 381, 385, 394, 410, 412, 414, 416, 417, 418, 424, 451, 453, 473, 474, 475, 476, 477, 478, 479, 480, 492, 503, 508, 520, 521, 522, 523, 524, 528, 537, 538, 541, 555, 556, 557, 568, 616, 630, 645, 647, 649, 650, 653, 663, 664, 674, 684, 685, 693, 694, 695, 697, 711, 713, 729, 757, 794, 802, 803, 809, 810, 817, 819, 823, 824, 835, 845, 848, 854, 858, 865, 872, 885, 886, 887, 888, 889, 897, 898, 899, 904, 905, 913, 924, 955, 995, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1018, 1019, 1025, 1026, 1027, 1031, 1032, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "district": [184, 375], "distutils_use_sdk": 378, "ditenberg": 1044, "div": [252, 949], "dive": [116, 380, 386, 995], "diverg": [54, 147, 235, 240, 298, 543, 545, 552, 697, 865, 1003, 1005, 1006, 1011, 1013, 1044, 1045, 1050, 1056], "divers": [0, 394, 419], "divid": [72, 78, 121, 167, 177, 215, 252, 258, 355, 363, 376, 377, 409, 411, 412, 416, 417, 419, 473, 474, 475, 476, 477, 478, 479, 480, 517, 524, 539, 546, 681, 682, 683, 724, 731, 739, 743, 751, 761, 799, 801, 866, 867, 911, 914, 953, 956, 957, 995, 1003, 1005, 1006, 1009, 1016, 1020, 1022, 1037, 1044, 1045, 1048], "dividend": 1006, "divis": [326, 412, 420, 595, 596, 599, 717, 718, 721, 734, 735, 743, 751, 788, 789, 792, 1006, 1041, 1045, 1046, 1049, 1053, 1054, 1056], "divisor": 1006, "divo": 1047, "divyanshu": 1050, "divyaprabha": 1048, "diwakar": 1051, "dixon": [774, 1047, 1048], "dizietasahi": 1047, "di\u1ec5n": 1052, "djipei": [1042, 1043], "dl": 681, "dlabal": 1041, "dll": 1051, "dlovel": 1045, "dmallia17": 1050, "dmitri": [1042, 1044, 1045, 1046, 1050, 1053, 1054], "dmitrij": 1041, "dmytro": 1050, "dn": [0, 1009], "dna": [392, 633, 996], "dnf": 398, "do": [0, 30, 43, 49, 52, 62, 64, 77, 88, 94, 100, 106, 118, 125, 127, 130, 139, 142, 144, 148, 149, 151, 156, 167, 177, 183, 188, 189, 190, 212, 215, 219, 233, 235, 237, 249, 250, 252, 264, 267, 268, 271, 274, 276, 286, 292, 293, 295, 299, 325, 329, 337, 340, 343, 347, 348, 350, 354, 355, 356, 362, 363, 367, 368, 369, 375, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 394, 395, 406, 408, 410, 412, 413, 414, 415, 416, 419, 420, 421, 431, 454, 465, 468, 471, 508, 541, 543, 547, 549, 557, 560, 586, 587, 593, 594, 596, 607, 637, 638, 650, 651, 657, 660, 661, 663, 664, 671, 673, 681, 742, 768, 783, 787, 807, 822, 825, 841, 842, 846, 873, 874, 876, 883, 887, 889, 894, 895, 897, 898, 899, 900, 917, 918, 919, 920, 934, 979, 995, 998, 1000, 1002, 1003, 1006, 1007, 1009, 1010, 1014, 1016, 1021, 1022, 1025, 1026, 1029, 1030, 1037, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "do_early_stopping_": [566, 567], "doc": [0, 43, 47, 52, 57, 354, 356, 368, 380, 384, 385, 388, 394, 398, 405, 420, 593, 594, 596, 783, 786, 797, 798, 832, 1037, 1041, 1051], "doc_environ": 388, "doc_it": 47, "doc_linux": 388, "doc_topic_distr": [541, 1044], "doc_topic_prior": [417, 541], "doc_topic_prior_": 541, "dock": 1056, "docker": [388, 406, 1050, 1051], "dock\u00e8": [1046, 1047, 1048, 1054, 1055], "docstr": [380, 382, 386, 394, 452, 465, 476, 704, 706, 943, 995, 1009, 1010, 1020, 1037, 1044, 1045, 1050, 1051, 1054], "doctest": [380, 394, 1037], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 90, 91, 93, 94, 102, 103, 104, 119, 121, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 230, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 310, 311, 319, 323, 326, 327, 329, 334, 336, 350, 356, 362, 367, 368, 369, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 392, 394, 395, 398, 400, 403, 406, 409, 412, 417, 420, 423, 448, 451, 452, 453, 454, 457, 461, 468, 492, 493, 504, 506, 516, 526, 528, 541, 549, 569, 593, 594, 595, 596, 609, 636, 644, 648, 663, 671, 673, 679, 681, 701, 702, 704, 708, 710, 722, 742, 763, 764, 774, 783, 784, 785, 798, 800, 805, 808, 809, 811, 819, 828, 839, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 870, 881, 909, 914, 931, 934, 936, 950, 971, 995, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1014, 1020, 1023, 1027, 1030, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "document_clust": 1043, "document_nam": 57, "doddington": 1006, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 80, 86, 88, 90, 102, 104, 105, 116, 131, 135, 140, 141, 144, 145, 146, 150, 151, 156, 170, 178, 188, 189, 200, 212, 215, 221, 233, 235, 236, 237, 240, 242, 245, 246, 247, 249, 250, 252, 260, 261, 267, 268, 273, 275, 276, 280, 282, 283, 292, 293, 306, 313, 315, 317, 319, 320, 325, 326, 335, 336, 341, 343, 350, 352, 354, 355, 356, 367, 368, 374, 378, 380, 381, 382, 384, 388, 393, 394, 400, 403, 406, 408, 410, 412, 413, 416, 417, 419, 420, 421, 422, 437, 444, 446, 450, 451, 453, 454, 458, 460, 471, 477, 483, 491, 504, 508, 513, 532, 540, 542, 543, 544, 549, 551, 554, 555, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 586, 587, 588, 593, 594, 596, 598, 599, 602, 607, 611, 615, 637, 643, 654, 655, 656, 659, 660, 661, 664, 676, 687, 688, 703, 705, 707, 712, 733, 734, 735, 739, 741, 743, 748, 783, 788, 789, 792, 793, 799, 805, 808, 809, 819, 866, 870, 871, 872, 874, 876, 878, 881, 882, 883, 886, 889, 890, 898, 901, 902, 906, 909, 910, 917, 918, 919, 920, 924, 935, 939, 953, 956, 957, 958, 971, 989, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1020, 1021, 1022, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056], "doepk": 1044, "doesn": [47, 188, 215, 249, 259, 292, 310, 343, 388, 394, 398, 406, 412, 420, 421, 425, 437, 479, 637, 638, 671, 673, 681, 721, 833, 836, 841, 851, 852, 866, 878, 879, 1005, 1006, 1022, 1041, 1054], "dog": [325, 326, 328, 329, 330, 587, 788, 890, 1016], "dohmatob": [1042, 1043, 1044], "dohri": [1054, 1055], "doi": [193, 215, 233, 380, 412, 681], "dok": [558, 559, 876, 1050], "dokato": 1044, "dolan": 375, "dollar": [188, 375], "dolmatov": 1047, "dolphin": 354, "domain": [151, 215, 287, 319, 394, 397, 416, 640, 726, 728, 729, 806, 807, 812, 813, 814, 1002, 1026, 1056], "domin": [141, 184, 191, 215, 220, 252, 282, 318, 375, 386, 410, 889, 1008, 1016, 1022, 1053], "domingo": [64, 793, 1006], "dominik": [1044, 1053], "don": [51, 64, 87, 102, 151, 188, 236, 249, 250, 267, 273, 286, 293, 335, 340, 344, 354, 355, 367, 374, 380, 382, 384, 386, 388, 393, 398, 403, 411, 413, 420, 432, 651, 657, 837, 917, 918, 919, 920, 928, 969, 995, 1002, 1005, 1007, 1010, 1012, 1020, 1041, 1046, 1053, 1054, 1055], "don86": 1044, "donald": [45, 375, 412, 730, 996], "donat": 243, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 86, 124, 151, 167, 170, 177, 178, 188, 189, 193, 195, 200, 201, 219, 232, 248, 249, 263, 271, 274, 277, 282, 293, 316, 324, 354, 355, 356, 363, 368, 374, 378, 380, 382, 384, 387, 388, 389, 392, 394, 403, 412, 414, 416, 417, 419, 445, 446, 449, 454, 456, 476, 486, 487, 488, 489, 493, 540, 566, 567, 587, 611, 612, 613, 633, 635, 637, 639, 648, 649, 650, 664, 727, 746, 802, 803, 805, 819, 821, 824, 825, 827, 873, 887, 990, 995, 996, 999, 1002, 1003, 1006, 1008, 1009, 1010, 1016, 1019, 1020, 1021, 1022, 1026, 1037, 1039, 1044, 1047, 1049, 1053], "dong": 1047, "donn": 1042, "donoho": [694, 698, 1003], "donor": [170, 377], "donovan": 1043, "dor": 1045, "dorin": [96, 452], "dormagen": 1047, "dot": [2, 55, 69, 79, 82, 87, 90, 95, 109, 110, 111, 113, 115, 116, 122, 123, 124, 128, 130, 135, 138, 172, 173, 179, 180, 188, 197, 200, 207, 209, 210, 247, 259, 260, 262, 263, 267, 277, 339, 341, 347, 367, 382, 386, 389, 394, 409, 417, 420, 538, 543, 545, 552, 595, 596, 619, 651, 652, 655, 657, 658, 659, 662, 665, 666, 667, 668, 686, 689, 692, 766, 768, 881, 921, 954, 1004, 1008, 1016, 1020, 1021, 1046], "dot_data": [921, 1022], "dot_product": 954, "dotproduct": [2, 175, 176, 181, 422, 616, 630], "dotson": 1042, "doubl": [70, 141, 285, 380, 394, 417, 543, 545, 546, 552, 849, 850, 860, 989, 996, 1021, 1022, 1037, 1047, 1048], "doubt": [380, 381, 384, 1002, 1012, 1025], "doucet": 1051, "douetteau": 1030, "doug": [1038, 1039, 1049], "dougal": [1039, 1041, 1042, 1044, 1045, 1046, 1047], "dougla": 1045, "douillard": 1044, "doumouro": 1046, "douriez": [1047, 1048], "dowl": 1043, "down": [80, 81, 112, 135, 230, 231, 237, 246, 247, 249, 276, 290, 311, 313, 347, 363, 374, 383, 388, 394, 414, 417, 447, 454, 460, 595, 598, 599, 644, 654, 779, 783, 786, 878, 879, 884, 887, 888, 899, 911, 914, 921, 1002, 1045], "downarrow": 1008, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 373, 375, 377, 378, 384, 385, 388, 400, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 515, 1022, 1032, 1041, 1042, 1045, 1049, 1050, 1051, 1056], "download_20newsgroup": 1041, "download_if_miss": [492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 1044], "download_url": 47, "downsampl": 124, "downsid": 356, "downstream": [43, 111, 320, 356, 420, 536, 539, 542, 546, 547, 611, 882, 1016, 1047], "downweight": [414, 541], "dowon": [1045, 1046], "dozen": [393, 422], "do\u0161ilovi\u0107": [1054, 1055], "dp": [259, 264], "dpgmm": [259, 264, 1037, 1041, 1043], "dpi": [226, 923, 1050], "dpy_debug": 386, "dqd": 386, "dr": [0, 170, 377, 412, 1051], "draft": [380, 395], "drag": 400, "dragon": 1016, "drama": 420, "dramat": 369, "dramsch": 1047, "drastic": [172, 246, 281, 412, 416, 1009, 1019], "draw": [43, 46, 93, 181, 188, 211, 253, 275, 280, 343, 387, 415, 417, 418, 419, 560, 561, 562, 563, 568, 569, 570, 571, 616, 639, 706, 811, 828, 921, 923, 1005, 1025, 1050, 1051], "drawback": [143, 232, 998, 1001], "drawcoastlin": [50, 306], "drawcountri": [50, 306], "drawn": [46, 85, 111, 138, 169, 172, 181, 187, 253, 280, 297, 354, 368, 376, 412, 418, 419, 422, 424, 473, 474, 475, 476, 477, 478, 479, 480, 520, 528, 538, 560, 561, 562, 563, 568, 569, 570, 571, 616, 632, 637, 646, 845, 901, 902, 919, 920, 1002, 1016, 1018, 1040], "drawstyl": [358, 705], "draxu": 1037, "drew": [1046, 1055], "drewhogg": 1052, "drewmjohnston": 1046, "drgfreeman": 1047, "driessen": [414, 473, 478, 1012], "drift": 1026, "drivag": [215, 233], "drive": [369, 417, 418, 554, 1020, 1030], "driven": [0, 191, 1030], "driver": [215, 233, 1052], "drop": [43, 44, 52, 103, 107, 116, 151, 177, 187, 188, 189, 191, 215, 219, 233, 252, 256, 267, 283, 319, 324, 327, 329, 355, 384, 388, 413, 417, 419, 468, 471, 572, 573, 574, 575, 700, 705, 707, 787, 794, 868, 882, 888, 996, 1002, 1006, 1016, 1025, 1037, 1038, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "drop_binary_enc": 882, "drop_dupl": 285, "drop_enc": [882, 1016], "drop_first": 700, "drop_idx": 882, "drop_idx_": [882, 1048, 1052], "drop_intermedi": [705, 707, 787, 794, 1053], "drop_nul": [52, 177], "dropdown": [170, 380, 995], "dropped_result": 145, "dropper": 145, "dror": 1046, "dross": 539, "dro\u017cd\u017c": 1040, "drskd": 1051, "druck": 1051, "drucker": [136, 419, 559], "drug": 1002, "dry": 189, "dryden": 102, "ds_ana": 1050, "ds_cnt": [67, 315, 316], "dschult": 55, "dscullei": 453, "dseg": 102, "dsouza": [1048, 1049, 1050, 1051], "dsquareindia": 1043, "dss": 1030, "dt": [83, 124, 157, 177, 419, 420, 1022], "dtreeviz": 1025, "dtype": [43, 47, 49, 50, 55, 82, 86, 98, 102, 103, 145, 147, 149, 150, 152, 173, 174, 175, 184, 188, 189, 217, 233, 256, 258, 267, 271, 277, 281, 287, 290, 300, 306, 319, 325, 326, 328, 333, 362, 374, 375, 380, 382, 392, 394, 408, 413, 416, 419, 420, 427, 428, 430, 433, 446, 447, 451, 452, 453, 454, 455, 457, 463, 468, 470, 471, 473, 476, 478, 492, 493, 494, 495, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 519, 527, 547, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 590, 591, 593, 594, 596, 598, 599, 606, 607, 611, 632, 633, 634, 635, 637, 638, 645, 646, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 676, 678, 680, 702, 704, 710, 719, 720, 736, 743, 746, 760, 791, 811, 830, 832, 833, 845, 849, 850, 852, 860, 874, 880, 882, 883, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 903, 911, 912, 913, 914, 915, 917, 918, 919, 920, 930, 932, 933, 935, 936, 960, 970, 976, 979, 980, 981, 982, 983, 986, 991, 992, 996, 1007, 1016, 1019, 1021, 1038, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "dtype_exclud": [103, 470], "dtype_includ": [103, 145, 156, 252, 413, 470], "du": [0, 401, 402, 1037, 1038, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "dua": 1046, "dual": [102, 104, 322, 350, 354, 420, 421, 475, 476, 482, 616, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 686, 689, 849, 850, 909, 910, 911, 914, 1021, 1039, 1048, 1051, 1053], "dual_coef_": [540, 648, 911, 912, 913, 914, 915, 1021, 1041], "dual_gap": [475, 476, 482, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "dual_gap_": [651, 652, 657, 658, 665, 666, 667, 668, 1050], "dualiti": [476, 1002], "dualtre": [849, 850], "duan": [1046, 1048], "duart": [1042, 1050, 1052, 1055], "dubai": 420, "duboi": [1043, 1045], "dubou": 1047, "dubourg": [0, 402, 1030, 1037, 1041], "duchesnai": [0, 402, 1037], "duck": [382, 394, 1047], "ducktyp": [1041, 1054], "duckworth": 1037, "ducout": 1051, "duda": [377, 1000], "due": [48, 52, 63, 64, 86, 88, 93, 107, 135, 138, 172, 188, 189, 195, 200, 206, 213, 215, 217, 232, 233, 246, 252, 259, 281, 282, 287, 292, 293, 318, 319, 347, 350, 354, 355, 356, 380, 386, 392, 394, 398, 410, 411, 412, 416, 417, 419, 422, 447, 450, 451, 463, 540, 544, 548, 549, 579, 676, 805, 808, 809, 813, 815, 819, 830, 831, 834, 837, 841, 842, 874, 878, 879, 889, 996, 1002, 1003, 1005, 1006, 1007, 1009, 1013, 1020, 1021, 1026, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "dueck": [73, 444, 458], "dugnat": 1051, "duhaim": 1045, "dummi": [2, 135, 136, 215, 233, 249, 267, 276, 385, 407, 556, 557, 737, 882, 891, 928, 1007, 1016, 1022, 1032, 1038, 1040, 1041, 1042, 1044], "dummy_classifiers_misclassification_error": 135, "dummy_clf": [135, 556], "dummy_leaf_": 446, "dummy_regr": 557, "dummy_sev": 233, "dummybiclust": 427, "dummyclassifi": [2, 135, 267, 276, 557, 737, 1006, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1055], "dummyestim": [564, 565], "dummyregressor": [2, 215, 233, 556, 1006, 1007, 1038, 1040, 1041, 1044, 1045, 1047, 1050, 1051, 1055], "dumont": 1022, "dump": [2, 55, 406, 491, 849, 850], "dump_svmlight_fil": [2, 1037, 1038, 1042, 1052, 1054], "duong": [1054, 1055], "duplic": [368, 379, 380, 381, 394, 412, 423, 448, 452, 453, 520, 640, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 833, 880, 991, 1009, 1037, 1040, 1049, 1051, 1053, 1054, 1056], "dupont": 51, "dupr": [1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "dupr\u00e9": [0, 401, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "duqu": 1050, "durat": [43, 47, 215, 233, 252, 267, 295, 356, 368, 971, 972, 1002], "duration_sec": 49, "duration_test": 354, "duration_train": 354, "dure": [0, 43, 44, 51, 52, 83, 88, 91, 104, 107, 116, 126, 139, 145, 146, 151, 153, 167, 172, 177, 188, 189, 191, 204, 216, 223, 267, 271, 275, 287, 293, 324, 325, 347, 367, 369, 378, 380, 382, 385, 394, 395, 412, 413, 417, 419, 420, 422, 423, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 633, 634, 635, 637, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 705, 794, 802, 803, 804, 805, 808, 809, 819, 827, 830, 831, 832, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 900, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 996, 998, 1002, 1003, 1009, 1016, 1018, 1022, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056], "duron": 1051, "duti": 395, "dutt": 1053, "dutta": [1054, 1055], "duv2014": 422, "duvenaud": [422, 627, 628], "dwight": 1052, "dx": [51, 53, 704], "dx_c": 1013, "dy": [51, 704], "dye": 1050, "dylan": [1044, 1047], "dynam": [51, 52, 189, 560, 561, 562, 563, 568, 569, 570, 571, 584, 585, 681, 682, 683, 1022, 1030, 1043, 1049, 1054], "dzi": 1055, "dziki": 1040, "d\u00b2": 233, "d\u00f6pfert": 1045, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 86, 88, 90, 94, 102, 109, 111, 112, 113, 115, 116, 118, 124, 126, 135, 138, 145, 147, 148, 151, 152, 161, 166, 169, 170, 180, 187, 188, 189, 193, 196, 200, 204, 205, 215, 216, 217, 219, 233, 235, 236, 248, 249, 267, 269, 273, 274, 276, 278, 279, 280, 288, 290, 292, 299, 306, 315, 318, 322, 324, 330, 350, 356, 360, 361, 362, 363, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 392, 393, 394, 398, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 441, 443, 445, 447, 448, 449, 451, 453, 454, 458, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 501, 503, 505, 506, 507, 508, 529, 538, 539, 540, 541, 543, 545, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 593, 594, 595, 596, 598, 599, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 622, 627, 628, 633, 635, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 692, 693, 695, 697, 699, 702, 704, 706, 709, 710, 713, 714, 721, 733, 734, 735, 736, 743, 746, 747, 760, 768, 772, 783, 790, 793, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 818, 819, 823, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 865, 866, 867, 869, 872, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 904, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 947, 952, 953, 955, 959, 960, 962, 965, 980, 991, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1026, 1029, 1030, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "e0129126": 374, "e11": 375, "e2": [903, 1002], "e41a1c": [79, 95], "e501": [170, 354], "e_": 417, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 81, 82, 86, 88, 91, 93, 94, 102, 103, 105, 106, 107, 115, 116, 118, 119, 121, 122, 126, 128, 129, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 166, 170, 174, 176, 181, 183, 184, 187, 188, 189, 191, 193, 195, 201, 203, 204, 209, 213, 215, 216, 217, 219, 220, 223, 230, 233, 236, 242, 243, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 261, 263, 266, 267, 268, 269, 271, 273, 274, 276, 278, 279, 282, 283, 287, 290, 292, 293, 296, 298, 302, 304, 306, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 322, 324, 325, 326, 328, 329, 330, 332, 333, 334, 337, 343, 347, 350, 355, 356, 358, 359, 362, 363, 367, 368, 369, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 403, 406, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 429, 430, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 712, 713, 715, 718, 724, 730, 733, 734, 735, 743, 744, 750, 751, 753, 755, 756, 758, 759, 763, 764, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 781, 783, 784, 785, 786, 788, 789, 790, 792, 793, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 926, 941, 947, 948, 953, 955, 956, 961, 962, 981, 982, 983, 986, 995, 996, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1030, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "eager": 267, "eargl": 1051, "earl": 1040, "earli": [43, 54, 79, 95, 134, 135, 141, 144, 185, 194, 202, 317, 323, 394, 419, 445, 449, 453, 467, 494, 501, 541, 542, 543, 544, 551, 558, 559, 564, 565, 566, 567, 632, 650, 661, 671, 672, 673, 681, 683, 697, 755, 835, 866, 867, 979, 1003, 1009, 1016, 1024, 1026, 1027, 1030, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1054], "earlier": [141, 189, 219, 374, 380, 415, 840, 843, 1016, 1035, 1038, 1050, 1052], "earliest": [374, 1003], "early_exager": 1044, "early_exagger": 697, "early_stop": [141, 151, 189, 223, 308, 325, 354, 394, 419, 566, 567, 671, 672, 673, 681, 682, 683, 866, 867, 1020, 1045, 1048, 1051, 1052, 1056], "earn": [187, 188, 395], "earth": [237, 355, 769, 1025], "eas": [104, 191, 263, 318, 380, 383, 386, 1002, 1020, 1025, 1026, 1030, 1048, 1049, 1051], "easi": [189, 223, 233, 261, 271, 273, 343, 354, 363, 375, 380, 386, 388, 392, 393, 406, 412, 419, 505, 509, 515, 876, 995, 1001, 1005, 1013, 1016, 1025, 1026, 1030, 1047, 1052, 1053], "easier": [79, 95, 99, 113, 145, 195, 203, 244, 252, 270, 271, 313, 343, 354, 363, 375, 380, 382, 385, 388, 392, 398, 414, 416, 472, 520, 907, 947, 1001, 1006, 1013, 1022, 1026, 1030, 1046, 1051], "easiest": [382, 388, 413, 1003], "easili": [43, 48, 67, 118, 167, 191, 218, 231, 247, 249, 253, 256, 273, 275, 282, 298, 315, 380, 382, 394, 395, 406, 413, 419, 420, 422, 453, 1000, 1002, 1003, 1016, 1020, 1021, 1022, 1029, 1043], "easlii": 243, "ec": [313, 535], "ecat": 375, "echo": [378, 384], "eckert": 1042, "eckhart": 499, "eclf": [157, 158, 419], "eclf1": 574, "eclf2": 574, "eclf3": 574, "ecml": 0, "ecoc": 290, "ecolog": [50, 306, 375, 503], "econom": [187, 188, 273], "econometr": 1002, "econometrica": 1002, "ecosystem": [380, 388, 996, 1024, 1030], "ecuador": [50, 306, 375, 503], "ed": [139, 150, 412, 419, 525, 564, 565, 1018, 1037, 1044], "eddi": [1040, 1054, 1055], "eden": 1052, "edern": [1052, 1053], "edg": [51, 63, 80, 99, 124, 145, 168, 238, 280, 388, 394, 409, 412, 414, 457, 566, 567, 590, 591, 593, 594, 596, 802, 846, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 874, 922, 1016, 1019, 1030, 1043, 1045, 1048, 1051], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 89, 93, 100, 119, 127, 137, 144, 152, 154, 155, 157, 158, 163, 165, 173, 174, 176, 180, 189, 199, 207, 217, 224, 227, 228, 229, 246, 247, 248, 250, 252, 258, 261, 273, 276, 288, 296, 299, 300, 301, 304, 308, 315, 316, 318, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 359, 360, 361, 636], "edit": [77, 377, 378, 379, 380, 384, 388, 392, 398, 535, 539, 839, 1000, 1002, 1007, 1013], "editor": [380, 388, 392], "edm": 1002, "edoardo": [1052, 1054, 1055, 1056], "edouard": [0, 402, 1037], "edson": [1006, 1042], "edu": [45, 47, 55, 170, 193, 290, 354, 374, 375, 377, 412, 453, 491, 505, 507, 513, 514, 515, 539, 646, 649, 654, 663, 671, 672, 681, 684, 687, 688, 844, 846, 848, 858, 865, 902, 904, 917, 918, 1002, 1004], "eduardo": [1040, 1042, 1050, 1051], "educ": [187, 188, 329, 380, 501, 721, 1007], "edvardlindelof": 1047, "edward": [177, 619, 624, 627, 1040, 1045, 1046, 1047, 1048, 1052, 1055], "edwinensa": 1043, "edwinwenink": 1050, "eec": [453, 646], "ef": 1052, "eff": 1022, "effect": [43, 45, 64, 72, 74, 75, 80, 86, 90, 95, 98, 101, 105, 116, 119, 124, 126, 135, 146, 148, 150, 152, 153, 161, 169, 172, 173, 177, 179, 185, 186, 188, 189, 191, 200, 208, 210, 215, 216, 217, 219, 220, 221, 232, 234, 237, 239, 245, 252, 256, 259, 263, 265, 267, 269, 273, 274, 275, 278, 281, 282, 287, 293, 305, 311, 312, 314, 317, 323, 331, 343, 347, 348, 350, 351, 352, 354, 355, 356, 363, 368, 380, 382, 385, 392, 394, 410, 412, 413, 417, 418, 419, 420, 422, 423, 441, 446, 447, 448, 450, 451, 453, 454, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 494, 501, 505, 519, 529, 530, 538, 539, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 611, 614, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 696, 697, 706, 708, 758, 790, 802, 804, 806, 807, 810, 812, 814, 816, 823, 824, 827, 828, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 855, 856, 859, 860, 866, 867, 869, 872, 873, 874, 875, 876, 878, 879, 881, 885, 886, 887, 888, 889, 890, 894, 895, 896, 897, 898, 899, 900, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 935, 936, 953, 971, 979, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1013, 1014, 1016, 1019, 1021, 1022, 1027, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "effective_learning_r": [866, 867], "effective_metric_": [851, 852, 853, 855, 857, 859, 860, 861, 1009], "effective_metric_params_": [851, 852, 853, 855, 857, 859, 860, 861], "effective_rank": [526, 529], "efficaci": 204, "effici": [37, 43, 44, 51, 53, 77, 80, 86, 88, 121, 136, 141, 146, 154, 193, 204, 208, 217, 223, 298, 330, 354, 367, 372, 374, 380, 382, 383, 384, 385, 386, 392, 394, 406, 409, 412, 417, 418, 419, 422, 424, 446, 447, 450, 451, 453, 454, 456, 458, 461, 463, 465, 466, 501, 538, 539, 540, 543, 545, 546, 549, 568, 571, 579, 586, 587, 593, 594, 596, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 643, 645, 660, 663, 664, 669, 671, 672, 673, 678, 680, 681, 682, 683, 684, 690, 691, 693, 731, 761, 768, 784, 785, 802, 803, 805, 819, 838, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 874, 886, 898, 902, 909, 918, 920, 953, 995, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "efficiencywarn": [2, 864, 1052], "effort": [324, 380, 386, 1025, 1030, 1048, 1050], "efron": [170, 377, 687, 688, 1002], "eg": 989, "egashira": 1052, "egehan": 1055, "egg": 1045, "egger": 1055, "egin": 412, "egli": [1044, 1054], "egor": 1049, "ehrenheim": [1044, 1045], "eib": [840, 1007], "eickenberg": [1037, 1039, 1040, 1041, 1042], "eig": 1044, "eig_tol": 1038, "eig_val": 258, "eig_vec": 258, "eigen": [456, 554, 678, 696, 700, 1000, 1043, 1046], "eigen_solv": [51, 79, 80, 99, 235, 236, 417, 456, 466, 540, 693, 694, 696, 698, 700, 1003, 1038, 1047, 1050, 1051, 1052], "eigen_tol": [80, 456, 466, 696, 700, 1038, 1051, 1052], "eigendecompos": 417, "eigendecomposit": [466, 678, 696, 700, 875, 998], "eigenfac": [42, 54, 185, 251, 375, 417, 499, 546, 702, 718, 819, 835, 889, 914, 1023, 1027, 1037], "eigenface_titl": 45, "eigenmap": [235, 694, 696, 698, 700, 1031, 1032, 1038], "eigensolv": [417, 456, 466, 540, 549, 700, 1003], "eigenvalu": [118, 263, 329, 409, 412, 414, 456, 466, 473, 474, 475, 476, 477, 478, 479, 480, 540, 546, 554, 678, 693, 694, 696, 698, 700, 875, 998, 1003, 1016, 1039, 1043, 1046, 1047, 1048, 1049], "eigenvalues_": [540, 1050], "eigenvector": [2, 42, 80, 116, 118, 185, 258, 412, 456, 466, 539, 540, 546, 555, 693, 694, 696, 700, 953, 1003, 1027, 1037, 1041, 1051], "eigenvector_centr": 55, "eigenvectors_": [540, 1050], "eigh": [70, 258, 259, 260, 263, 264, 417, 424, 538, 540, 1052, 1055], "eighteenth": 412, "eighth": [568, 1012], "eigsh": [417, 540, 1043, 1044], "eiler": 1016, "einsum": 303, "eitan": 1054, "either": [43, 49, 64, 103, 141, 144, 145, 188, 202, 205, 243, 252, 267, 268, 277, 282, 287, 298, 350, 354, 362, 367, 368, 372, 375, 378, 380, 381, 382, 394, 403, 406, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 446, 451, 456, 491, 501, 517, 529, 538, 539, 541, 549, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 587, 588, 589, 593, 594, 595, 596, 598, 599, 602, 607, 612, 613, 615, 616, 627, 632, 635, 637, 638, 655, 659, 661, 669, 681, 683, 687, 688, 695, 702, 703, 707, 711, 712, 717, 725, 729, 731, 732, 733, 734, 735, 740, 743, 744, 745, 757, 761, 774, 779, 783, 787, 788, 789, 790, 792, 793, 794, 799, 805, 808, 809, 811, 819, 828, 829, 830, 831, 832, 833, 834, 836, 839, 869, 899, 900, 906, 909, 910, 917, 918, 919, 920, 924, 962, 966, 994, 995, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1020, 1021, 1037, 1040, 1046, 1047, 1048, 1051, 1055], "ekaterina": [1043, 1044, 1045, 1046, 1048, 1053], "ekman": [1039, 1043], "el": [533, 1050, 1052, 1053], "elabonga": [1053, 1054], "elabor": 1007, "elad": [669, 690, 691], "elaps": [50, 81, 100, 141, 142, 143, 367, 468, 471, 574, 575, 868, 869, 870, 871], "elapsed_tim": [46, 74, 100, 142, 143, 156, 232], "elast": [2, 25, 185, 194, 200, 201, 204, 206, 209, 226, 249, 286, 475, 476, 482, 506, 529, 651, 652, 657, 662, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 687, 689, 995, 1006, 1020, 1027, 1028, 1032, 1037, 1042, 1046, 1047], "elastic_net": 226, "elastic_net_color": 226, "elastic_net_contour": 226, "elasticnet": [2, 46, 49, 197, 206, 281, 286, 367, 386, 392, 417, 652, 657, 662, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 1002, 1007, 1020, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1055], "elasticnetcv": [2, 200, 394, 403, 651, 657, 665, 666, 667, 668, 686, 1002, 1037, 1040, 1048, 1050, 1051, 1054, 1055, 1056], "elasticnetifittedelasticnet": 197, "elbo": 417, "eldar": [414, 425, 479], "eleanor": 1052, "elec2": 151, "electr": [51, 151, 377, 412], "electron": [57, 170, 375, 377, 543, 545, 552, 632], "element": [2, 87, 121, 138, 139, 150, 244, 266, 272, 280, 282, 323, 355, 358, 362, 377, 379, 380, 382, 389, 395, 409, 412, 416, 417, 419, 420, 423, 448, 450, 456, 468, 491, 513, 517, 519, 525, 527, 531, 532, 536, 542, 543, 545, 555, 562, 563, 564, 565, 569, 570, 571, 572, 573, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 622, 637, 663, 664, 671, 672, 673, 681, 682, 683, 712, 722, 732, 739, 741, 751, 768, 774, 783, 787, 793, 794, 839, 849, 850, 851, 852, 853, 855, 857, 859, 860, 864, 866, 867, 872, 888, 889, 892, 896, 909, 914, 917, 918, 919, 920, 955, 956, 957, 976, 978, 979, 991, 1000, 1002, 1006, 1007, 1010, 1013, 1016, 1017, 1018, 1022, 1030, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1053], "elementari": [903, 1018], "elementwis": [417, 543, 545, 552], "elena": 1044, "eleni": 1050, "eleph": 587, "elev": [100, 118, 127, 189, 212, 235, 239, 495], "eleven": 1026, "elfner": 1051, "elia": 1043, "eliaschiavon": 1052, "eliasi": [1052, 1053, 1054], "elicit": 1006, "elif": [46, 47, 196, 217, 250, 260, 298, 885], "elimin": [2, 18, 161, 164, 167, 170, 185, 268, 271, 272, 278, 287, 297, 412, 416, 452, 507, 520, 598, 599, 602, 607, 663, 808, 809, 824, 869, 879, 991, 1006, 1027, 1028, 1030, 1032, 1037], "elisabeth": [327, 1054], "elizabeth": [1044, 1046, 1049], "elkan": [64, 267, 323, 410, 441, 447, 451, 463, 681, 1043, 1047, 1048, 1050, 1051], "ell": [70, 258, 259, 260, 264, 409], "ell_": 1002, "ell_0": [1002, 1006], "ell_1": [417, 1002], "ell_2": 1002, "ella": 1018, "ellen": 1044, "elli": [1043, 1046], "elliot": [1054, 1055], "elliott": 1044, "ellips": [70, 242, 258, 259, 260, 263, 264, 1012], "ellipsoid": [48, 65, 69, 111, 112, 113, 185, 257, 258, 260, 261, 262, 263, 264, 554, 555, 636, 802, 803, 1000, 1005, 1027], "ellipt": [90, 1002], "ellipticenvelop": [2, 48, 242, 474, 477, 478, 479, 480, 568, 1012, 1037, 1040, 1044, 1045, 1050], "eln": 1048, "elong": 412, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 82, 88, 89, 95, 113, 125, 138, 144, 145, 148, 149, 180, 188, 189, 191, 204, 207, 230, 233, 236, 242, 246, 248, 249, 250, 251, 252, 268, 273, 274, 277, 284, 293, 298, 306, 308, 309, 315, 322, 347, 354, 355, 362, 380, 384, 386, 419, 420, 422, 424, 432, 441, 453, 513, 525, 538, 574, 623, 630, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 677, 678, 679, 681, 684, 686, 687, 688, 689, 708, 714, 793, 799, 801, 808, 809, 835, 873, 885, 888, 896, 909, 910, 924, 967, 969, 971, 992, 994, 1022], "elsewher": [394, 466, 467, 475, 476, 482], "eltermann": 1040, "elucid": 998, "elvezio": [654, 1002], "elvi": [1042, 1043, 1044], "em": [259, 260, 264, 447, 451, 463, 541, 802, 803, 1005, 1051], "emad": 1055, "email": [0, 354, 380, 392, 395, 420, 844, 1008, 1030], "emami": 1051, "emanuel": 1038, "emb": [172, 236, 246, 302, 373, 374, 466, 700, 1003], "embark": [103, 190, 256, 322, 326, 327], "embed": [2, 26, 37, 71, 74, 79, 80, 89, 95, 140, 172, 185, 234, 237, 239, 241, 293, 302, 332, 333, 394, 412, 445, 456, 466, 493, 507, 549, 554, 571, 587, 644, 693, 694, 695, 696, 697, 698, 699, 700, 701, 858, 870, 879, 901, 902, 903, 998, 1009, 1012, 1018, 1023, 1025, 1027, 1031, 1032, 1037, 1038, 1048, 1049, 1051], "embedding_": [238, 394, 693, 694, 695, 696, 697], "emerg": [412, 1030], "emeritu": 395, "emiko": 1051, "emil": 1051, "emili": [1048, 1049, 1056], "emilyxinyi": 1055, "emipr": 802, "emir": [1052, 1053], "emit": [1048, 1055], "emlearn": 1025, "emma": 1054, "emmanouil": 1051, "emmanuel": [1037, 1044, 1045, 1046, 1054], "emoji": 400, "emp_cov": [109, 111, 113, 482, 485], "emp_cov_contour": 111, "emp_mah": 111, "emphas": [188, 352, 386, 417, 1006], "emphasi": [352, 411, 415, 911, 912, 913, 914, 915, 1013, 1025], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 97, 108, 110, 111, 113, 151, 185, 196, 233, 279, 313, 410, 416, 419, 422, 451, 453, 464, 473, 474, 475, 478, 481, 482, 537, 539, 544, 546, 548, 554, 556, 570, 595, 608, 644, 654, 672, 676, 683, 684, 721, 726, 728, 729, 834, 844, 845, 846, 848, 867, 890, 938, 979, 998, 1000, 1006, 1008, 1010, 1016, 1018, 1020, 1027, 1031, 1032], "empirical_covari": [2, 109, 414, 482, 483, 485, 1053], "empiricalcovari": [2, 109, 111, 112, 414, 473, 477, 478, 479, 480, 1012], "emploi": [0, 51, 172, 248, 394, 414, 420, 454, 482, 587, 594, 1030, 1043], "employ": [188, 267], "empti": [94, 102, 130, 227, 335, 367, 375, 384, 412, 424, 432, 487, 538, 566, 567, 636, 721, 816, 874, 914, 916, 924, 930, 935, 936, 943, 964, 965, 996, 1021, 1039, 1041, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "emptyset": 1006, "emul": [188, 388], "en": [55, 61, 388, 536, 542, 600, 641, 669, 673, 676, 690, 691, 700, 710, 851, 852, 857, 858, 859, 860, 887, 903, 917, 918, 1002, 1006, 1021, 1022], "enabl": [2, 16, 52, 66, 83, 104, 151, 189, 223, 237, 249, 315, 323, 325, 326, 328, 329, 330, 351, 378, 380, 385, 388, 392, 394, 398, 403, 408, 412, 413, 417, 419, 420, 453, 468, 472, 539, 540, 546, 564, 565, 566, 567, 568, 584, 585, 595, 596, 607, 615, 802, 803, 805, 808, 830, 831, 832, 833, 834, 836, 869, 870, 882, 883, 906, 907, 909, 910, 911, 912, 913, 914, 915, 924, 965, 972, 996, 998, 1003, 1005, 1006, 1009, 1016, 1017, 1020, 1021, 1026, 1030, 1037, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "enable_cython_pairwise_dist": [472, 907], "enable_halving_search_cv": [2, 148, 284, 285, 324, 384, 808, 809, 995], "enable_hist_gradient_boost": [384, 1046], "enable_iterative_imput": [2, 183, 184, 384, 632, 996, 1046], "enable_metadata_rout": [249, 267, 329, 403, 441, 447, 448, 451, 453, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 598, 599, 602, 607, 615, 616, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 806, 807, 808, 809, 812, 814, 819, 823, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 868, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 1053], "enable_my_experimental_featur": 384, "enblom": 1055, "enc": [314, 316, 326, 328, 882, 883, 1016], "enc_auto": 890, "enc_high_smooth": 890, "enc_low_smooth": 890, "encapsul": [387, 413, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920], "enclos": 995, "encod": [2, 43, 47, 50, 88, 103, 121, 140, 151, 156, 185, 188, 189, 190, 214, 215, 252, 267, 282, 287, 312, 314, 315, 316, 324, 326, 327, 343, 354, 356, 372, 374, 376, 385, 392, 394, 413, 416, 417, 419, 420, 422, 468, 491, 501, 508, 531, 536, 542, 544, 545, 547, 549, 550, 551, 553, 556, 566, 567, 571, 572, 574, 586, 593, 594, 596, 635, 653, 663, 664, 674, 677, 685, 740, 807, 812, 814, 832, 835, 869, 870, 872, 874, 876, 877, 880, 882, 883, 890, 893, 907, 926, 995, 996, 1002, 1003, 1006, 1008, 1009, 1011, 1020, 1025, 1026, 1027, 1032, 1038, 1039, 1045, 1049, 1051, 1052, 1053, 1054, 1055], "encoded_missing_valu": [156, 190, 883, 1016, 1051, 1052], "encodings_": [328, 890, 1016], "encompass": [394, 454, 460, 560, 561, 1003], "encount": [368, 378, 398, 406, 412, 419, 420, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 566, 567, 586, 844, 845, 846, 848, 882, 980, 1016, 1020, 1025, 1029, 1030, 1045, 1048], "encourag": [188, 203, 219, 308, 343, 379, 380, 392, 1021, 1025, 1055], "encrypt": 1025, "encyclopedia": 1006, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 378, 380, 382, 392, 394, 395, 398, 403, 409, 412, 413, 415, 419, 454, 460, 472, 492, 493, 513, 514, 542, 551, 562, 563, 564, 565, 569, 570, 571, 650, 651, 652, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 686, 687, 688, 689, 805, 808, 809, 819, 826, 830, 867, 869, 907, 917, 918, 919, 920, 957, 959, 989, 995, 998, 1002, 1003, 1005, 1006, 1016, 1018, 1020, 1025, 1030, 1042, 1044, 1047, 1050, 1051], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 238], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1049, "endo": 1050, "endpoint": [53, 314, 346, 640], "enemi": 380, "energi": [51, 151, 388, 865, 1011], "enet": [200, 286], "enet_path": [2, 203, 394, 651, 652, 657, 665, 666, 667, 1039, 1041, 1050], "enet_tol": [475, 476, 482, 1042], "enforc": [43, 51, 70, 86, 121, 151, 177, 209, 302, 367, 380, 414, 417, 419, 429, 435, 513, 532, 536, 542, 544, 547, 548, 550, 551, 553, 562, 563, 566, 567, 569, 570, 873, 888, 917, 918, 919, 920, 935, 936, 996, 1003, 1039, 1045, 1047, 1049, 1053], "enforce_estimator_tags_i": 1047, "eng": 1045, "engag": [386, 395], "engemann": [1039, 1040, 1044], "engin": [42, 75, 140, 145, 151, 177, 185, 189, 216, 367, 374, 377, 412, 418, 420, 468, 501, 567, 644, 678, 706, 826, 832, 867, 868, 870, 873, 874, 879, 882, 884, 888, 996, 998, 1006, 1016, 1027, 1043], "english": [54, 57, 102, 354, 355, 356, 385, 420, 593, 594, 596, 1025, 1026, 1050], "enh": 384, "enhanc": [121, 219, 379, 380, 384, 392, 394, 412, 1006, 1035, 1036, 1037, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "enjoi": [77, 267], "enough": [2, 43, 52, 64, 72, 79, 95, 141, 144, 151, 172, 183, 189, 190, 204, 215, 247, 250, 252, 267, 286, 317, 354, 356, 363, 378, 380, 384, 395, 410, 412, 414, 416, 419, 572, 573, 594, 805, 808, 809, 811, 819, 833, 953, 995, 1000, 1003, 1005, 1012, 1016, 1021, 1025, 1030, 1043, 1053, 1054], "enrich": 347, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 89, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 183, 184, 189, 190, 191, 215, 236, 242, 251, 252, 254, 255, 267, 270, 285, 290, 292, 315, 319, 322, 323, 324, 325, 326, 327, 328, 329, 354, 359, 360, 363, 367, 384, 385, 393, 394, 403, 406, 410, 412, 416, 421, 441, 509, 520, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 637, 638, 640, 663, 707, 808, 809, 827, 835, 839, 840, 870, 873, 882, 913, 917, 919, 920, 945, 995, 1006, 1007, 1012, 1013, 1022, 1025, 1026, 1027, 1028, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "ensemble_clf": 139, "ensemble_jaccard_scor": 292, "ensembleregressorsensembl": 400, "ensur": [0, 52, 58, 76, 90, 113, 119, 135, 141, 142, 151, 191, 215, 236, 267, 268, 276, 310, 362, 363, 367, 368, 380, 382, 384, 385, 386, 395, 398, 403, 408, 410, 412, 413, 416, 424, 473, 538, 539, 546, 616, 632, 701, 710, 787, 793, 794, 830, 902, 935, 936, 947, 948, 953, 960, 971, 1002, 1003, 1006, 1016, 1022, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "ensure_2d": [935, 936], "ensure_all_finit": [783, 933, 935, 936, 1056], "ensure_min_featur": [935, 936], "ensure_min_sampl": [935, 936], "ensure_non_neg": [936, 1056], "entail": [267, 393, 887, 889, 1020], "enter": [381, 384, 412, 446, 1013], "entertain": 1002, "entic": 188, "entir": [68, 183, 215, 223, 267, 311, 313, 323, 347, 362, 363, 374, 381, 394, 406, 412, 416, 418, 420, 476, 497, 539, 593, 594, 595, 596, 652, 656, 658, 660, 663, 664, 666, 668, 670, 671, 673, 681, 687, 688, 739, 801, 827, 837, 838, 841, 866, 868, 869, 882, 894, 895, 897, 898, 899, 900, 928, 974, 996, 1006, 1016, 1020, 1022, 1046, 1047], "entireti": 394, "entiti": [395, 731, 761], "entitl": [287, 296, 411, 451, 616, 851, 998], "entri": [0, 103, 107, 151, 156, 184, 188, 189, 267, 269, 322, 355, 363, 384, 386, 388, 393, 394, 409, 410, 412, 417, 419, 422, 467, 468, 471, 476, 501, 536, 537, 542, 550, 551, 566, 567, 593, 596, 599, 616, 625, 637, 643, 645, 652, 656, 658, 660, 661, 664, 666, 668, 669, 670, 678, 680, 687, 688, 690, 691, 704, 709, 712, 714, 717, 720, 721, 723, 731, 734, 735, 736, 739, 740, 743, 748, 761, 763, 764, 788, 790, 793, 794, 797, 798, 818, 833, 849, 850, 857, 858, 859, 860, 861, 880, 886, 898, 991, 995, 996, 1002, 1006, 1009, 1016, 1021, 1026, 1044, 1047, 1048, 1050, 1054], "entropi": [2, 50, 64, 254, 285, 306, 324, 332, 333, 363, 375, 408, 412, 419, 424, 503, 538, 562, 569, 612, 613, 663, 722, 741, 742, 746, 800, 917, 919, 1002, 1003, 1006, 1010, 1022, 1039, 1041, 1045, 1046, 1051, 1053, 1054, 1056], "entrypoint_to_bug_reproduc": 381, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 83, 88, 92, 93, 94, 95, 98, 102, 110, 112, 113, 116, 122, 124, 130, 138, 141, 146, 147, 149, 150, 151, 161, 174, 176, 181, 191, 196, 198, 206, 215, 236, 237, 240, 242, 247, 251, 252, 258, 259, 260, 261, 263, 264, 267, 268, 275, 276, 282, 283, 298, 302, 303, 305, 311, 315, 316, 332, 333, 335, 337, 341, 343, 349, 350, 354, 359, 375, 376, 564, 565, 569, 570, 786, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826], "env": [378, 388, 398, 399], "environ": [0, 3, 51, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 367, 375, 377, 378, 380, 382, 383, 386, 392, 398, 399, 408, 413, 504, 1026, 1030, 1032, 1044, 1045, 1054], "environment": [50, 200, 233], "environmenterror": 1053, "eom": 450, "eoss": 0, "ep": [67, 79, 80, 82, 88, 98, 199, 203, 238, 246, 392, 412, 423, 448, 454, 459, 475, 476, 482, 636, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 686, 687, 688, 689, 695, 699, 719, 746, 861, 901, 902, 903, 1018, 1052, 1053], "epanechnikov": [298, 418, 849, 850, 854], "ephemer": 388, "ephrem": 1052, "epimorph": 1054, "epistem": 52, "epoch": [230, 394, 541, 671, 672, 673, 681, 682, 683, 866, 867, 1020, 1044, 1045, 1050], "epp": [412, 709], "eps_": [665, 667], "eps_rang": 246, "epsilon": [2, 88, 98, 198, 238, 248, 328, 349, 417, 450, 459, 648, 654, 672, 681, 683, 751, 866, 867, 910, 912, 915, 999, 1002, 1006, 1010, 1020, 1021, 1037], "epsilon_": 847, "epsilon_i": 1006, "epsilon_insensit": [672, 681, 683, 910, 1002, 1020], "epsilon_valu": 198, "eq": [267, 425, 479, 726, 728, 729], "equal": [43, 50, 51, 63, 70, 72, 74, 86, 93, 111, 116, 123, 135, 148, 175, 188, 216, 217, 226, 232, 253, 260, 263, 266, 271, 273, 282, 303, 315, 319, 343, 345, 351, 355, 375, 376, 380, 382, 394, 409, 410, 412, 416, 417, 419, 420, 425, 441, 444, 445, 446, 447, 449, 451, 453, 458, 463, 464, 467, 473, 478, 483, 484, 508, 517, 520, 524, 537, 538, 539, 544, 546, 548, 549, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 593, 598, 599, 602, 604, 605, 612, 613, 630, 633, 634, 637, 638, 639, 640, 642, 646, 647, 654, 663, 664, 676, 704, 723, 725, 734, 788, 792, 793, 799, 801, 805, 806, 808, 809, 818, 819, 823, 830, 837, 841, 842, 849, 850, 851, 852, 857, 858, 859, 860, 861, 866, 867, 872, 873, 874, 881, 884, 887, 888, 889, 890, 892, 899, 906, 909, 910, 916, 917, 918, 919, 920, 941, 953, 980, 986, 1000, 1002, 1006, 1007, 1009, 1010, 1012, 1016, 1020, 1021, 1022, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "equat": [2, 64, 350, 380, 412, 417, 419, 562, 563, 564, 565, 569, 570, 571, 595, 632, 663, 664, 687, 688, 692, 768, 889, 917, 918, 919, 920, 996, 1003, 1006, 1011, 1045], "equi": 1005, "equiangular": 1002, "equidist": [145, 697], "equip": 1030, "equiv": [998, 1021], "equival": [43, 54, 70, 88, 90, 145, 152, 169, 172, 177, 188, 200, 233, 263, 282, 293, 318, 347, 356, 363, 367, 386, 389, 393, 394, 406, 412, 413, 414, 415, 416, 417, 419, 421, 422, 445, 447, 448, 449, 450, 451, 453, 454, 461, 468, 473, 478, 514, 539, 546, 563, 566, 567, 568, 569, 570, 593, 596, 618, 621, 624, 626, 629, 651, 652, 653, 657, 659, 663, 664, 671, 672, 673, 674, 677, 681, 682, 685, 688, 692, 693, 698, 713, 714, 728, 739, 747, 752, 753, 754, 766, 775, 784, 785, 802, 803, 808, 809, 813, 815, 840, 843, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 866, 872, 878, 879, 881, 884, 885, 886, 887, 889, 897, 899, 900, 939, 951, 991, 995, 1000, 1002, 1003, 1004, 1006, 1012, 1016, 1020, 1021, 1022, 1045, 1046, 1047, 1048, 1050, 1051, 1054, 1056], "er": 575, "era": 1026, "eras": [564, 565, 651, 657, 663, 665, 667, 671, 672, 673, 681, 682, 683, 866, 867], "ereg": [159, 419], "eren": [0, 1039, 1040], "eric": [1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "ericellwang": [1050, 1051], "erich": [454, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1055], "erick": 1042, "erik": [375, 1030, 1040], "eriksson": 1044, "erin": [290, 1049], "erl": 290, "erlbaum": 267, "erling": 1042, "ermolaevpa": [1051, 1052], "ernst": [419, 562, 563, 570, 571, 919, 920], "err": [55, 115, 125, 135], "err_cov_emp_ful": 112, "err_cov_emp_pur": 112, "err_cov_mcd": 112, "err_loc_emp_ful": 112, "err_loc_emp_pur": 112, "err_loc_mcd": 112, "errno": 398, "erron": [111, 112, 417, 1002, 1038, 1045, 1049], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 107, 109, 110, 112, 125, 130, 134, 138, 141, 142, 145, 147, 149, 151, 170, 172, 183, 185, 187, 188, 200, 204, 208, 210, 211, 215, 217, 220, 221, 222, 229, 233, 245, 248, 249, 255, 264, 265, 267, 269, 273, 274, 278, 282, 283, 288, 290, 299, 300, 326, 329, 342, 350, 354, 355, 368, 377, 378, 380, 382, 383, 384, 385, 389, 392, 394, 403, 406, 410, 412, 413, 414, 416, 417, 419, 420, 421, 441, 447, 448, 451, 453, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 520, 529, 536, 538, 539, 542, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 586, 587, 593, 595, 596, 597, 600, 601, 603, 604, 605, 611, 615, 616, 634, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 693, 694, 695, 697, 698, 701, 703, 706, 707, 714, 716, 717, 725, 726, 728, 732, 745, 748, 749, 750, 751, 752, 753, 755, 756, 758, 769, 783, 787, 793, 794, 795, 796, 804, 805, 806, 807, 808, 809, 811, 812, 814, 819, 823, 827, 828, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 859, 860, 861, 864, 866, 867, 868, 869, 870, 872, 874, 875, 876, 881, 882, 883, 888, 889, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 933, 934, 935, 936, 939, 968, 989, 992, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1007, 1010, 1014, 1016, 1020, 1021, 1022, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "error_": [536, 548], "error_i": [141, 274], "error_norm": [110, 112, 473, 474, 475, 476, 477, 478, 479, 480], "error_on_new": 634, "error_r": 139, "error_scor": [805, 808, 809, 811, 819, 828, 831, 832, 833, 836, 995, 1041, 1045, 1049, 1052], "error_x": [141, 274], "errorbar": [72, 94, 105, 110, 112, 169, 178, 179, 295, 335, 346, 811, 828], "errorbar_": [811, 828], "errorbar_kw": [811, 828], "errorbarcontain": [811, 828], "errors_coef": 219, "errors_lines_": 706, "erwan": 1054, "erwin": 1040, "escal": 395, "escalant": 1006, "escalera": 1006, "escap": [1050, 1052], "eschibli": 1049, "eschlbeck": 1051, "esdi": 57, "esp": [412, 1037], "especi": [43, 47, 52, 88, 89, 145, 148, 151, 188, 215, 249, 319, 327, 355, 363, 368, 374, 380, 388, 392, 394, 410, 412, 420, 447, 453, 506, 543, 562, 563, 564, 565, 569, 570, 571, 651, 652, 653, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 674, 685, 700, 710, 751, 844, 845, 846, 847, 848, 917, 918, 919, 920, 1002, 1008, 1009, 1016, 1030, 1040, 1045, 1049, 1050, 1051], "espinoza": [1038, 1039], "essenc": [612, 613, 748, 1003, 1006], "essenti": [0, 273, 327, 378, 382, 412, 416, 417, 514, 1006, 1009, 1026, 1030, 1045], "est": [156, 188, 207, 230, 249, 251, 267, 287, 315, 324, 363, 406, 419, 567, 740, 874, 958, 995, 1006, 1016, 1020, 1048, 1049], "est1": [394, 637], "est2": [394, 637], "est_freq": 233, "est_idx": 315, "est_sev": 233, "establish": [388, 392, 395, 996], "estefania": 1051, "ester": [412, 423, 448], "estev": [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 82, 87, 88, 89, 90, 91, 94, 96, 103, 104, 105, 106, 115, 116, 121, 122, 123, 128, 130, 134, 135, 139, 140, 141, 142, 144, 146, 148, 149, 150, 151, 153, 156, 157, 158, 159, 168, 169, 170, 171, 172, 173, 175, 177, 179, 181, 182, 183, 187, 188, 194, 197, 200, 202, 204, 205, 210, 215, 217, 219, 220, 222, 223, 232, 233, 241, 242, 243, 248, 254, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 300, 304, 313, 315, 325, 326, 328, 330, 346, 347, 350, 355, 356, 359, 361, 367, 368, 369, 372, 378, 380, 383, 384, 387, 388, 389, 390, 398, 403, 406, 407, 410, 411, 412, 415, 417, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 497, 500, 501, 503, 506, 507, 529, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 581, 582, 584, 585, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 692, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 712, 713, 716, 717, 718, 721, 723, 725, 726, 728, 729, 731, 732, 733, 734, 735, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 819, 821, 823, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 897, 898, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 925, 926, 927, 928, 929, 934, 935, 936, 938, 940, 941, 942, 945, 947, 948, 949, 958, 961, 962, 963, 965, 989, 993, 994, 1001, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "estimate_bandwidth": [2, 79, 96, 412, 452, 465], "estimated_coef": [651, 652, 657, 665, 666, 667, 686, 687, 688], "estimator_": [218, 249, 287, 432, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 598, 599, 602, 676, 804, 827, 906, 989, 1052], "estimator__alpha": 148, "estimator__max_depth": [394, 995], "estimator_alpha": 144, "estimator_check": [2, 322, 382, 394, 947, 948, 1044, 1045, 1047, 1048, 1051, 1052, 1053, 1055, 1056], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 223, "estimator_errors_": [135, 558, 559], "estimator_html_repr": [2, 382, 413, 1048, 1049, 1050, 1051, 1054], "estimator_modul": 382, "estimator_nam": [49, 223, 382, 387, 442, 581, 703, 705, 707, 934], "estimator_samples_": 1048, "estimator_weights_": [135, 558, 559], "estimatorcv": [394, 1026], "estimators_": [142, 144, 207, 230, 250, 322, 394, 419, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 837, 838, 839, 840, 841, 842, 843, 1038, 1044, 1051], "estimators_early_stop": 146, "estimators_features_": [560, 561, 568], "estimators_samples_": [560, 561, 562, 563, 568, 569, 570, 571, 1043, 1045, 1048, 1054], "est\u00e8v": [0, 401, 1045, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "est\u00e8vc": 1055, "esuli": [1044, 1049], "esvhd": 1046, "et": [0, 2, 50, 109, 110, 135, 150, 202, 306, 375, 377, 409, 412, 414, 417, 419, 420, 421, 455, 503, 524, 525, 533, 540, 546, 549, 568, 687, 688, 724, 725, 844, 846, 866, 867, 902, 952, 953, 1002, 1003, 1006, 1012, 1016, 1018, 1021, 1022, 1045, 1053], "eta": [417, 541, 681, 682, 683, 1010, 1020, 1042], "eta0": [673, 681, 682, 683, 1020], "eta_0": 1020, "etc": [2, 145, 215, 233, 268, 277, 278, 330, 363, 367, 369, 380, 382, 385, 392, 393, 394, 403, 406, 409, 413, 416, 420, 493, 508, 532, 562, 563, 569, 570, 673, 681, 697, 723, 776, 805, 819, 840, 843, 873, 884, 917, 918, 919, 920, 921, 923, 935, 936, 947, 995, 996, 1000, 1006, 1009, 1025, 1026, 1030, 1037, 1044, 1046, 1047], "eth": 1047, "ethan": [1040, 1043], "ethic": 151, "etiquett": 380, "etl": [1026, 1030], "euclidean": [2, 37, 75, 90, 91, 201, 246, 252, 293, 296, 301, 322, 327, 347, 355, 409, 412, 417, 418, 419, 420, 422, 444, 445, 448, 449, 450, 454, 456, 461, 464, 467, 536, 542, 550, 551, 594, 620, 624, 627, 628, 681, 683, 695, 697, 700, 701, 704, 767, 768, 774, 775, 776, 777, 783, 784, 785, 786, 797, 798, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 903, 996, 1000, 1004, 1007, 1009, 1018, 1026, 1041, 1044, 1045, 1046, 1047, 1053, 1054], "euclidean_dist": [2, 238, 246, 382, 408, 454, 458, 461, 693, 699, 767, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 1037, 1042, 1045, 1046, 1054, 1056], "euclideandist": 704, "eugen": [377, 1038, 1043], "eunji": 1045, "eunseop": 1047, "euro": 330, "europ": [420, 1016], "european": [731, 761, 1006], "eustach": [1030, 1039, 1040], "eval_and_print_metr": 336, "eval_gradi": [180, 422, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "evalml": 1025, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 82, 88, 97, 103, 104, 124, 135, 141, 142, 143, 145, 146, 148, 151, 165, 166, 175, 185, 191, 193, 196, 204, 217, 222, 233, 241, 265, 266, 270, 271, 272, 273, 276, 278, 279, 280, 282, 284, 285, 287, 288, 292, 300, 302, 306, 313, 318, 320, 324, 328, 329, 336, 343, 347, 354, 363, 373, 375, 382, 386, 394, 397, 413, 420, 421, 422, 451, 453, 468, 470, 492, 495, 497, 498, 501, 514, 525, 541, 556, 566, 567, 568, 572, 573, 596, 599, 607, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 638, 639, 652, 658, 664, 678, 680, 702, 704, 706, 707, 708, 709, 710, 716, 718, 719, 720, 722, 723, 731, 732, 741, 742, 747, 759, 760, 761, 762, 791, 800, 802, 803, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 835, 836, 840, 846, 849, 850, 855, 867, 869, 870, 876, 879, 882, 883, 887, 888, 889, 894, 895, 897, 898, 899, 900, 911, 914, 917, 938, 947, 979, 998, 1002, 1004, 1008, 1009, 1012, 1013, 1014, 1017, 1020, 1022, 1025, 1027, 1030, 1031, 1032, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "evaluate_everi": 541, "evaluate_model_and_stor": 319, "evaluation_std": 355, "evaluations_std": 355, "evelyn": 1055, "even": [37, 43, 52, 53, 64, 75, 77, 85, 107, 116, 124, 141, 148, 178, 188, 189, 190, 204, 215, 216, 223, 233, 239, 240, 248, 249, 259, 279, 290, 313, 315, 317, 318, 337, 350, 354, 355, 356, 363, 369, 375, 379, 380, 381, 382, 384, 385, 388, 392, 394, 406, 410, 412, 413, 414, 416, 417, 419, 420, 422, 445, 447, 449, 450, 451, 452, 453, 463, 465, 537, 540, 562, 563, 564, 565, 569, 570, 587, 594, 599, 632, 633, 635, 644, 663, 664, 700, 705, 710, 717, 748, 766, 772, 779, 783, 786, 791, 793, 832, 869, 870, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 917, 918, 919, 920, 953, 974, 995, 996, 998, 1000, 1002, 1005, 1006, 1009, 1011, 1012, 1014, 1016, 1018, 1020, 1021, 1022, 1030, 1044, 1045, 1046, 1049, 1051, 1054], "evenli": [2, 47, 74, 85, 148, 191, 219, 268, 420, 957], "event": [0, 43, 215, 233, 276, 410, 412, 593, 594, 641, 844, 940, 1002, 1007, 1008, 1025, 1030, 1043], "eventu": [7, 261, 412, 421, 598, 1030], "ever": [141, 155, 389, 419, 1030], "everi": [43, 121, 151, 177, 183, 213, 216, 236, 248, 259, 264, 282, 325, 329, 363, 375, 380, 382, 384, 388, 394, 410, 412, 414, 416, 417, 420, 444, 458, 513, 536, 541, 544, 550, 562, 564, 565, 566, 567, 569, 595, 596, 608, 651, 652, 654, 657, 658, 664, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 690, 691, 692, 697, 701, 759, 776, 784, 785, 818, 858, 917, 919, 921, 923, 941, 999, 1001, 1006, 1007, 1008, 1016, 1022, 1030, 1037, 1041, 1043, 1046, 1050, 1054], "everingham": 1006, "everingham2010": 1006, "everybodi": [374, 380], "everyon": [380, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "everyth": [332, 363, 384, 386, 392, 406, 468, 960, 1025, 1026, 1037], "everywher": 394, "evgeni": 1048, "evid": [279, 354, 388, 412, 416, 417, 419, 649, 802, 1005], "evol": 1006, "evolut": [47, 49, 285, 367, 369], "evolv": [389, 1052], "ex": [102, 378, 381, 398, 1041, 1042], "exact": [44, 46, 113, 126, 141, 177, 219, 247, 267, 293, 329, 363, 367, 368, 374, 380, 382, 388, 389, 392, 393, 394, 412, 419, 421, 437, 486, 487, 488, 492, 501, 539, 540, 546, 566, 567, 643, 647, 651, 697, 805, 819, 830, 831, 832, 911, 914, 995, 998, 1002, 1003, 1012, 1016, 1020, 1021, 1044, 1045, 1047], "exactli": [103, 135, 187, 195, 200, 208, 215, 219, 264, 267, 281, 314, 350, 354, 380, 382, 388, 409, 412, 416, 417, 420, 425, 450, 457, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 520, 531, 595, 596, 620, 681, 683, 708, 710, 768, 806, 823, 830, 998, 1002, 1003, 1004, 1006, 1007, 1022, 1037, 1043, 1044, 1050], "exagger": [74, 188, 697, 1003], "examin": [166, 386, 388, 412, 858], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 393, 394, 397, 398, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 427, 428, 430, 431, 433, 434, 437, 438, 439, 440, 443, 460, 461, 463, 465, 467, 475, 482, 484, 485, 489, 490, 491, 498, 502, 508, 510, 511, 512, 513, 514, 521, 522, 523, 533, 534, 536, 550, 551, 552, 553, 560, 577, 578, 582, 588, 590, 591, 597, 600, 601, 603, 606, 608, 614, 617, 621, 625, 626, 629, 631, 634, 641, 642, 643, 647, 655, 656, 659, 665, 666, 668, 672, 680, 688, 690, 691, 692, 699, 700, 701, 704, 713, 715, 716, 719, 720, 721, 725, 726, 728, 729, 730, 731, 733, 735, 736, 738, 741, 744, 745, 748, 749, 752, 756, 759, 761, 763, 764, 765, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 788, 796, 799, 801, 812, 813, 814, 815, 816, 817, 818, 829, 841, 843, 845, 849, 850, 859, 860, 861, 863, 864, 871, 872, 875, 877, 880, 891, 892, 894, 896, 897, 899, 900, 901, 904, 908, 910, 911, 919, 920, 921, 922, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 943, 944, 945, 946, 947, 949, 951, 952, 953, 954, 955, 956, 959, 960, 967, 968, 969, 970, 974, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1030, 1032, 1034, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1050, 1052, 1053, 1054], "example_funct": 380, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1037, "example_gaussian_process_plot_gp_regress": 1037, "exampleclassifi": 249, "exampleclassifierexampleclassifi": 249, "exampleestim": 380, "exampleregressor": 249, "examples_pattern": 380, "exampletransform": 249, "exc": [290, 989], "exce": [115, 292, 323, 422, 446, 520, 607, 654, 663, 1046, 1049, 1051], "exceed": [808, 809, 1043], "excel": [154, 374, 380, 419, 695, 699, 1002, 1030], "except": [2, 50, 79, 86, 124, 133, 141, 151, 223, 230, 242, 249, 281, 293, 306, 309, 310, 313, 315, 327, 373, 380, 382, 383, 385, 392, 394, 403, 406, 409, 413, 416, 417, 419, 420, 422, 435, 464, 469, 472, 486, 487, 488, 514, 559, 561, 562, 563, 565, 567, 569, 570, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 616, 632, 635, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 692, 716, 783, 812, 842, 843, 849, 850, 852, 855, 860, 866, 867, 873, 887, 889, 907, 910, 912, 915, 918, 920, 934, 957, 989, 991, 995, 1002, 1006, 1021, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1054, 1055, 1056], "exception": 233, "excerpt": [45, 1018], "excess": [219, 450, 1016, 1044], "exchang": [406, 1029], "excit": 1044, "exclud": [47, 57, 187, 313, 380, 384, 394, 450, 468, 470, 734, 735, 743, 788, 789, 792, 818, 826, 884, 980, 1006, 1009, 1046, 1053, 1056], "exclus": [368, 392, 394, 417, 419, 632, 633, 635, 721, 807, 822, 825, 995, 1002, 1006, 1007, 1030, 1044, 1048], "exec": 392, "execut": [64, 183, 200, 204, 248, 278, 368, 378, 380, 386, 406, 408, 412, 417, 423, 447, 465, 805, 811, 819, 828, 830, 831, 832, 833, 836, 854, 971, 972, 1016, 1019, 1027, 1039, 1042, 1045], "exemplar": [412, 444, 458], "exemplari": [157, 158], "exemplifi": 394, "exercis": [2, 105, 144, 154, 174, 176, 225, 228, 308, 309, 337, 348, 351, 352, 369, 377, 380, 506, 507, 509, 510, 657, 658, 663, 805, 810, 851, 914, 1027, 1040], "exhaust": [2, 170, 274, 322, 323, 324, 325, 326, 327, 328, 329, 330, 367, 377, 385, 393, 407, 412, 419, 805, 808, 809, 819, 899, 900, 902, 1002, 1032], "exhibit": [173, 220, 347, 354, 397, 416, 417, 419, 422, 1014], "exist": [47, 48, 52, 55, 57, 86, 233, 273, 310, 313, 347, 374, 379, 382, 383, 386, 392, 394, 395, 398, 406, 412, 416, 417, 419, 420, 427, 432, 437, 441, 447, 448, 451, 453, 455, 457, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 496, 504, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 590, 593, 594, 595, 596, 602, 608, 615, 616, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 703, 705, 707, 767, 770, 774, 804, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 882, 883, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 989, 998, 1003, 1005, 1006, 1010, 1012, 1013, 1016, 1030, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "exist_ok": 47, "existing_credit": 267, "exit": [104, 293, 384, 388, 472], "exp": [2, 80, 87, 99, 130, 138, 148, 173, 200, 225, 298, 303, 306, 323, 324, 328, 347, 410, 412, 413, 418, 424, 456, 469, 526, 538, 541, 620, 621, 627, 646, 764, 771, 781, 866, 867, 885, 1000, 1002, 1004, 1008, 1009, 1010, 1019, 1020, 1021], "exp10": 188, "exp_dirichlet_component_": 541, "exp_dist_embed": 303, "expand": [43, 82, 98, 244, 319, 323, 363, 372, 382, 419, 448, 454, 504, 562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 1006, 1038, 1045, 1046, 1053], "expand_frame_repr": 233, "expans": [43, 183, 324, 454, 884, 1046], "expect": [43, 44, 49, 52, 61, 72, 79, 86, 116, 119, 126, 135, 138, 140, 142, 145, 148, 151, 167, 168, 172, 178, 185, 186, 190, 201, 206, 215, 216, 217, 219, 223, 233, 246, 249, 252, 253, 259, 260, 263, 264, 267, 280, 293, 318, 350, 354, 355, 363, 367, 368, 380, 382, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 403, 408, 410, 412, 413, 414, 416, 419, 420, 421, 435, 468, 469, 471, 472, 473, 486, 487, 488, 501, 528, 537, 541, 543, 546, 557, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 575, 577, 593, 594, 596, 600, 602, 611, 616, 632, 637, 638, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 679, 680, 683, 684, 700, 709, 710, 721, 740, 793, 799, 804, 805, 819, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 855, 859, 860, 861, 862, 867, 870, 875, 882, 883, 886, 889, 890, 899, 900, 907, 909, 910, 911, 912, 913, 914, 915, 918, 920, 930, 968, 995, 1002, 1005, 1006, 1008, 1012, 1016, 1020, 1021, 1022, 1027, 1029, 1032, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "expected_anomaly_fract": 252, "expected_i": 148, "expected_n_anomali": 252, "expected_ri": 710, "expectedli": 354, "expens": [0, 89, 141, 156, 172, 187, 189, 243, 270, 282, 343, 347, 354, 355, 356, 369, 386, 394, 412, 413, 416, 419, 420, 453, 472, 513, 805, 808, 809, 819, 832, 907, 909, 1003, 1005, 1016, 1021, 1030, 1041], "experi": [30, 135, 175, 179, 187, 188, 189, 190, 193, 217, 267, 290, 318, 350, 355, 356, 368, 374, 380, 383, 395, 416, 520, 733, 790, 1002, 1007, 1018, 1024, 1025, 1030], "experienc": 380, "experiment": [2, 148, 183, 184, 215, 284, 285, 324, 325, 330, 382, 383, 390, 392, 394, 403, 416, 501, 554, 584, 585, 632, 701, 808, 809, 975, 995, 996, 1002, 1005, 1006, 1025, 1026, 1032, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "expert_r": 413, "expertis": [379, 380, 392], "expit": [147, 205, 419, 566, 1002, 1044], "explain": [2, 43, 44, 51, 64, 89, 105, 115, 116, 129, 148, 172, 177, 178, 189, 190, 215, 233, 242, 249, 264, 283, 319, 330, 354, 355, 368, 380, 392, 406, 408, 415, 417, 422, 498, 526, 529, 539, 546, 549, 554, 630, 653, 661, 674, 685, 726, 727, 728, 729, 733, 790, 1002, 1009, 1022, 1024, 1048, 1050, 1051], "explained_vari": [355, 1006], "explained_variance_": [116, 539, 546, 549, 1044], "explained_variance_ratio": 1043, "explained_variance_ratio_": [105, 129, 330, 355, 417, 539, 546, 549, 554, 1040, 1043], "explained_variance_scor": [2, 1006, 1040, 1044, 1051], "explan": [64, 116, 249, 367, 379, 380, 410, 420, 995, 1005, 1007, 1022, 1025, 1030, 1040], "explic": 1018, "explicit": [43, 151, 185, 189, 193, 241, 249, 287, 347, 367, 368, 369, 379, 381, 392, 394, 395, 403, 413, 420, 426, 476, 504, 506, 507, 546, 556, 557, 636, 643, 644, 646, 681, 805, 806, 813, 853, 861, 869, 909, 914, 969, 998, 1000, 1002, 1006, 1016, 1022, 1025, 1027, 1037, 1041, 1046, 1047, 1050, 1054], "explicitli": [43, 80, 142, 172, 179, 183, 184, 216, 245, 249, 329, 347, 356, 363, 368, 374, 376, 380, 381, 382, 384, 392, 394, 403, 406, 408, 416, 420, 422, 540, 554, 555, 584, 585, 602, 632, 653, 663, 664, 674, 685, 714, 732, 787, 793, 794, 808, 809, 840, 843, 849, 850, 875, 899, 900, 994, 995, 996, 998, 1000, 1002, 1003, 1006, 1008, 1009, 1016, 1030, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1055, 1056], "explod": 319, "exploit": [62, 292, 406, 1007, 1026, 1040], "exploit_incremental_learn": [811, 833], "explor": [52, 72, 138, 139, 151, 191, 239, 240, 252, 267, 274, 275, 281, 282, 290, 320, 324, 343, 355, 363, 374, 377, 379, 386, 412, 419, 476, 805, 808, 816, 890, 995, 1002, 1003, 1005, 1011, 1013, 1016, 1030, 1043], "exploratori": [188, 1030], "explos": [805, 819, 830, 831, 832], "expm1": 107, "expon": [422, 621, 681, 682, 683, 817, 866, 867, 884, 995], "exponenti": [2, 80, 107, 172, 177, 298, 303, 418, 419, 422, 453, 541, 559, 564, 619, 624, 627, 644, 648, 763, 764, 849, 850, 854, 866, 867, 884, 998, 1002, 1006, 1021, 1044, 1050], "export": [2, 378, 381, 382, 398, 921, 922, 1022, 1025, 1046], "export_graphviz": [2, 1022, 1042, 1044, 1050, 1052, 1053, 1055], "export_text": [2, 1022, 1046, 1053], "expos": [2, 170, 249, 286, 290, 325, 327, 368, 373, 377, 382, 394, 403, 410, 413, 419, 421, 422, 441, 468, 558, 559, 566, 567, 572, 573, 574, 575, 598, 599, 607, 616, 804, 805, 808, 809, 819, 827, 838, 839, 840, 841, 842, 843, 924, 1002, 1006, 1008, 1025, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "exposur": [215, 233, 1002], "express": [43, 46, 51, 52, 135, 141, 172, 177, 188, 273, 274, 319, 324, 340, 347, 356, 374, 375, 380, 381, 386, 392, 406, 412, 417, 418, 419, 420, 454, 460, 461, 593, 594, 596, 721, 793, 805, 811, 819, 828, 830, 831, 832, 833, 836, 856, 998, 1002, 1006, 1010, 1016, 1017, 1022, 1045], "expsinesquar": [2, 172, 177, 181, 422], "exstrac": 1006, "ext": 651, "extend": [31, 52, 88, 89, 100, 133, 216, 262, 267, 280, 343, 377, 378, 392, 394, 410, 412, 417, 419, 636, 663, 725, 826, 838, 841, 842, 874, 876, 893, 909, 910, 924, 998, 1006, 1007, 1021, 1026, 1028, 1032, 1042, 1043, 1044, 1045, 1047, 1052], "extens": [280, 282, 298, 367, 368, 374, 375, 378, 381, 383, 384, 388, 389, 392, 406, 412, 417, 501, 508, 539, 746, 947, 955, 1003, 1005, 1006, 1024, 1025, 1030, 1037, 1043, 1050, 1051, 1053, 1054], "extent": [2, 48, 91, 174, 175, 176, 246, 351, 444, 540, 701, 802, 1006], "extercond": 145, "extern": [161, 172, 267, 369, 373, 377, 380, 382, 385, 392, 394, 409, 412, 420, 421, 422, 598, 615, 616, 722, 742, 800, 1002, 1005, 1006, 1009, 1022, 1026, 1032, 1045, 1049], "exterqu": [145, 156], "extmath": [2, 261, 354, 389, 457, 950, 951, 952, 953, 954, 955, 1037, 1038, 1043, 1044, 1047, 1051, 1052, 1054], "extr": 47, "extra": [2, 80, 144, 151, 251, 293, 329, 356, 378, 379, 381, 394, 406, 419, 420, 442, 447, 451, 463, 468, 537, 562, 563, 571, 595, 596, 705, 706, 707, 830, 853, 919, 920, 943, 1005, 1006, 1009, 1037, 1040, 1042, 1043, 1045, 1050, 1052], "extra_cflag": 386, "extra_tre": [919, 920], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 83, 88, 101, 102, 103, 104, 115, 121, 141, 166, 170, 185, 230, 265, 272, 273, 278, 281, 311, 336, 346, 354, 356, 363, 372, 375, 377, 386, 389, 392, 412, 413, 416, 417, 454, 456, 459, 460, 466, 468, 492, 493, 498, 499, 508, 509, 536, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 588, 589, 593, 594, 596, 598, 599, 602, 604, 636, 723, 793, 805, 819, 846, 868, 869, 914, 926, 953, 962, 969, 995, 1003, 1007, 1011, 1016, 1020, 1025, 1027, 1030, 1032, 1037, 1038, 1046, 1049], "extract_dbscan": 412, "extract_patches_2d": [2, 83, 124, 420, 592, 1045], "extract_scor": 276, "extractal": 47, "extractor": [215, 311, 369, 375, 394, 420, 508, 586, 587, 593, 594, 596, 995, 1037], "extran": 380, "extrapol": [43, 172, 195, 216, 245, 276, 888, 1006, 1016, 1022, 1050, 1052], "extratre": [144, 154, 367, 1040], "extratreeclassifi": [2, 562, 571, 920, 996, 1007, 1022, 1041, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1056], "extratreeregressor": [2, 563, 568, 571, 919, 996, 1007, 1012, 1022, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1056], "extratreesclassifi": [2, 144, 154, 419, 421, 563, 569, 571, 919, 920, 996, 1007, 1040, 1041, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1056], "extratreesregressor": [2, 251, 419, 562, 570, 571, 919, 920, 996, 1007, 1040, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1056], "extrem": [2, 148, 215, 217, 251, 252, 286, 313, 320, 335, 355, 380, 383, 411, 412, 417, 562, 563, 569, 570, 571, 637, 638, 684, 729, 757, 919, 920, 921, 923, 1006, 1008], "extrema": 1000, "exxon": 51, "ey": [111, 112, 260, 264, 343, 375, 539, 546, 555], "eyast": 1051, "ezebunandu": 1049, "ezeiza": 769, "ezri": 1050, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 81, 82, 85, 86, 88, 91, 97, 100, 103, 107, 116, 124, 135, 138, 141, 142, 143, 145, 146, 148, 151, 156, 157, 162, 164, 166, 169, 170, 172, 178, 179, 181, 185, 187, 188, 189, 190, 191, 193, 200, 201, 204, 206, 215, 216, 217, 219, 225, 229, 233, 236, 246, 248, 249, 252, 256, 263, 267, 271, 273, 274, 275, 276, 279, 280, 282, 283, 285, 286, 287, 293, 296, 308, 309, 310, 315, 318, 319, 322, 324, 326, 328, 329, 330, 332, 333, 342, 347, 350, 354, 355, 356, 363, 375, 380, 381, 382, 386, 388, 392, 406, 410, 413, 417, 419, 420, 421, 422, 491, 513, 514, 536, 537, 542, 543, 571, 586, 587, 588, 592, 597, 600, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 622, 632, 637, 640, 663, 701, 718, 728, 731, 734, 735, 761, 788, 789, 792, 793, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 833, 834, 836, 866, 867, 871, 880, 883, 884, 888, 889, 890, 916, 924, 935, 936, 989, 998, 1001, 1010, 1013, 1014, 1016, 1020, 1027, 1039, 1045, 1046, 1047, 1049, 1051], "f0_c0": 890, "f0_c1": 890, "f0_c2": 890, "f0e442": 258, "f1": [2, 45, 62, 68, 102, 167, 271, 311, 332, 333, 336, 416, 718, 734, 735, 743, 788, 827, 1006, 1007, 1041, 1053], "f1_c0": 890, "f1_c1": 890, "f1_c2": 890, "f1_macro": [416, 1006, 1041], "f1_micro": [1006, 1041], "f1_sampl": 1006, "f1_score": [2, 62, 280, 336, 375, 411, 743, 1006, 1037, 1039, 1040, 1041, 1042, 1046, 1047, 1053, 1054], "f1_weight": [1006, 1041], "f2": [384, 1007], "f2001": 1006, "f2006": 1006, "f3": 1007, "f4": 503, "f401": [100, 118, 127, 189, 212, 235, 237], "f781bf": [75, 79, 95, 96], "f7bd01": 75, "f_": [419, 640, 735, 1006], "f_0": 153, "f_1": [153, 1006], "f_beta": 1006, "f_classif": [2, 166, 167, 346, 421, 597, 600, 601, 603, 604, 605, 609, 611, 614], "f_i": 410, "f_idx": 153, "f_j": [410, 1014], "f_m": 419, "f_n": 280, "f_p": 280, "f_regress": [2, 87, 165, 421, 597, 600, 601, 603, 604, 605, 609, 610, 614, 1040, 1044, 1051, 1054], "f_score": 280, "f_statist": [610, 611], "f_test": 165, "fa": [2, 120, 130, 131, 185, 386, 417, 477, 480, 537, 546, 805, 831, 1027], "fa_estim": 121, "fa_scor": 128, "fab": [1030, 1047, 1048], "fabia": [409, 724], "fabian": [0, 402, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1054], "fabiana": 1048, "fabio": 1043, "fabisch": [0, 402, 1039, 1040, 1041, 1043], "fabrizio": 1052, "face": [2, 42, 44, 54, 71, 84, 86, 120, 124, 128, 130, 143, 185, 193, 241, 246, 373, 380, 384, 412, 417, 419, 421, 453, 476, 498, 499, 500, 526, 537, 538, 542, 544, 545, 546, 548, 563, 589, 662, 678, 702, 718, 819, 835, 852, 889, 914, 938, 1009, 1022, 1023, 1027, 1032, 1037, 1045], "face_id": 251, "facecolor": [51, 63, 70, 93, 121, 127, 137, 163, 180, 235, 250, 273, 300, 315, 341, 344, 347, 348, 349], "faces_cent": 121, "facial": 375, "facil": [1005, 1025], "facilit": [367, 394, 406, 1025, 1026, 1043, 1046], "fact": [43, 50, 57, 62, 112, 116, 135, 146, 148, 190, 246, 256, 290, 292, 354, 374, 387, 392, 394, 408, 415, 417, 418, 419, 420, 654, 673, 675, 709, 1000, 1002, 1009, 1016, 1020, 1021, 1026, 1030, 1051], "facto": 1047, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 80, 86, 88, 95, 115, 120, 126, 130, 154, 185, 188, 229, 240, 242, 252, 267, 284, 285, 293, 294, 308, 309, 313, 315, 324, 326, 342, 367, 368, 376, 380, 386, 389, 394, 409, 412, 419, 420, 422, 444, 446, 458, 473, 475, 476, 477, 478, 480, 482, 492, 509, 519, 520, 532, 537, 540, 541, 543, 545, 546, 549, 550, 551, 552, 554, 555, 566, 567, 568, 593, 596, 602, 618, 654, 655, 656, 659, 660, 661, 687, 688, 697, 724, 788, 805, 808, 809, 831, 855, 889, 903, 905, 913, 952, 953, 995, 1002, 1003, 1009, 1016, 1019, 1023, 1027, 1031, 1032, 1037, 1038, 1040, 1041, 1043, 1051, 1053], "factoranalysi": [2, 121, 128, 131, 417, 549, 1038, 1040, 1049, 1051], "factori": [2, 94, 267, 273, 420, 928, 930, 975, 1006], "facundo": [1048, 1051], "fagan": 1046, "fail": [43, 87, 99, 122, 128, 180, 195, 200, 219, 249, 273, 322, 368, 378, 380, 383, 388, 395, 398, 415, 416, 444, 476, 478, 681, 682, 683, 716, 866, 867, 925, 927, 934, 947, 995, 1003, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056], "failur": [185, 186, 188, 210, 380, 388, 398, 662, 790, 835, 935, 936, 1027, 1029, 1030, 1050, 1051, 1055], "fair": [51, 64, 419, 695, 699, 838, 1007, 1030], "fairer": 363, "fairli": [113, 147, 237, 309, 388, 412, 564, 565, 704, 1007], "faith": [57, 348], "fake": 420, "falak": 1046, "fall": [25, 30, 43, 52, 148, 151, 179, 272, 273, 380, 412, 420, 437, 450, 451, 513, 514, 732, 733, 799, 886, 898, 958, 1005, 1006, 1016, 1046, 1056], "fallback": [395, 398, 837, 838, 1006], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 80, 81, 87, 88, 97, 100, 102, 103, 104, 110, 112, 119, 125, 129, 130, 135, 141, 142, 145, 148, 149, 151, 159, 161, 172, 177, 178, 179, 180, 188, 189, 190, 191, 195, 196, 200, 201, 215, 216, 220, 221, 223, 231, 233, 235, 238, 249, 250, 252, 256, 258, 267, 270, 271, 273, 276, 277, 280, 281, 282, 283, 284, 285, 286, 288, 293, 297, 303, 306, 309, 310, 313, 314, 319, 320, 322, 324, 325, 326, 327, 329, 330, 334, 343, 345, 347, 350, 351, 354, 355, 374, 380, 381, 382, 385, 394, 403, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 425, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 518, 520, 528, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 699, 700, 702, 703, 704, 705, 706, 707, 708, 713, 714, 716, 717, 718, 719, 720, 723, 724, 731, 732, 733, 734, 735, 736, 743, 748, 759, 761, 766, 768, 772, 774, 779, 783, 787, 788, 789, 790, 792, 794, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 819, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 933, 934, 935, 936, 942, 947, 954, 966, 967, 970, 971, 975, 976, 977, 979, 986, 991, 992, 994, 995, 996, 1002, 1006, 1009, 1016, 1020, 1021, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "false_": 641, "false_discovery_r": 600, "famili": [2, 45, 267, 367, 369, 394, 412, 415, 417, 420, 421, 597, 600, 601, 603, 604, 605, 611, 866, 867, 885, 897, 1002, 1016, 1020, 1041, 1051], "familiar": [380, 418, 1045], "famou": [375, 377, 419, 1021], "famous": 1008, "fan": [0, 368, 395, 401, 1021, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "fanci": 420, "fancybox": 349, "fanelli": [1052, 1053], "fang": [663, 1044, 1045], "fanni": 1047, "fantasi": 1011, "fantast": 1030, "faouzi": [1047, 1048], "faq": [0, 388, 416, 697, 1003, 1016], "far": [62, 93, 113, 145, 173, 179, 188, 215, 233, 267, 343, 347, 354, 356, 380, 389, 422, 725, 889, 980, 1011, 1012, 1021, 1030], "farach": 998, "farahsae": 1045, "farawai": 1009, "fare": [103, 190, 256, 326, 327, 1041, 1042], "fargo": 51, "farhan": 1053, "farid": 1056, "farlei": [0, 402, 1037], "farouk": [1045, 1046], "farther": 730, "farthest": 412, "fashion": [2, 46, 140, 146, 223, 282, 368, 394, 409, 410, 412, 417, 419, 558, 562, 563, 564, 565, 569, 570, 571, 607, 632, 835, 858, 873, 876, 882, 893, 917, 918, 919, 920, 976, 996, 1002, 1006, 1016, 1022, 1046], "fast": [2, 52, 64, 95, 193, 200, 204, 230, 231, 247, 248, 314, 356, 367, 375, 380, 389, 406, 412, 414, 416, 417, 419, 420, 424, 450, 451, 473, 478, 513, 537, 538, 540, 543, 545, 549, 552, 569, 570, 571, 593, 594, 596, 637, 638, 645, 663, 664, 677, 679, 692, 704, 805, 819, 830, 831, 841, 842, 849, 850, 854, 865, 953, 974, 998, 1002, 1005, 1008, 1009, 1011, 1012, 1022, 1025, 1030, 1037, 1038, 1043, 1044, 1047, 1048], "fast_dict": 1047, "fast_dot": 1044, "fast_logdet": [2, 389], "fast_svd": 1037, "faster": [37, 46, 57, 74, 97, 105, 121, 140, 141, 145, 146, 148, 151, 170, 189, 193, 201, 215, 217, 230, 231, 233, 248, 252, 267, 293, 295, 310, 323, 325, 326, 330, 354, 355, 356, 367, 374, 380, 388, 389, 394, 406, 412, 417, 421, 422, 424, 447, 451, 453, 455, 456, 457, 466, 513, 536, 537, 538, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 564, 565, 566, 567, 568, 648, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 677, 679, 689, 692, 696, 700, 731, 761, 783, 784, 785, 849, 850, 854, 866, 867, 884, 886, 888, 898, 902, 953, 974, 995, 999, 1002, 1007, 1009, 1010, 1013, 1018, 1020, 1021, 1022, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "fastest": [90, 271, 356, 451, 675, 677, 679, 692, 952, 953, 1005], "fastest_top_recall_high_precision_index": 271, "fastica": [2, 120, 185, 214, 417, 537, 540, 546, 1027, 1037, 1039, 1045, 1051, 1052, 1055], "fastkmean": 453, "fastmcd": [414, 473, 478], "fastnc": 865, "fat": [526, 529], "fatima": [1051, 1054], "fato": 1050, "fauchereau": 1050, "fault": [388, 1045, 1047, 1049], "faulti": [218, 1037], "faust": 1055, "favor": [44, 113, 141, 258, 264, 392, 414, 419, 678, 680, 735, 813, 815, 868, 995, 1014, 1039, 1041, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "favorit": [380, 392, 1030], "favour": [797, 1003, 1005, 1046], "fawcett": [793, 794, 1006], "fazlul": 1039, "fbeta_scor": [2, 734, 747, 788, 1006, 1039, 1040, 1041, 1042, 1047, 1053], "fc": [48, 298, 375], "fc2009": 1006, "fcd116": 119, "fcharra": 1052, "fcluster": 191, "fcostin": 1037, "fd": 47, "fdr": 597, "feasibl": [380, 878, 879, 889], "feast": 413, "feat": [47, 49, 384, 420], "feat0": [244, 323], "feat1": [244, 323, 420], "feat2": [244, 323, 420], "feat3": [244, 323, 420], "feat_idx": 632, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 83, 91, 93, 96, 101, 102, 103, 104, 105, 111, 112, 115, 116, 118, 119, 121, 123, 125, 127, 128, 129, 131, 134, 136, 139, 141, 144, 148, 150, 155, 156, 157, 159, 161, 162, 165, 167, 172, 173, 174, 177, 178, 180, 183, 184, 186, 187, 188, 189, 194, 196, 198, 199, 200, 201, 204, 205, 211, 214, 215, 216, 217, 219, 220, 223, 224, 230, 231, 232, 236, 241, 244, 246, 251, 252, 255, 256, 265, 267, 268, 270, 271, 272, 273, 276, 278, 279, 280, 281, 282, 283, 286, 287, 288, 292, 296, 297, 298, 301, 302, 304, 307, 308, 310, 312, 313, 316, 320, 321, 323, 326, 327, 328, 329, 330, 332, 333, 335, 336, 338, 339, 340, 343, 347, 350, 353, 356, 359, 361, 362, 363, 372, 373, 374, 375, 376, 377, 378, 382, 383, 385, 387, 388, 389, 392, 393, 394, 395, 397, 398, 400, 406, 410, 412, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 428, 433, 435, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 584, 585, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 623, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 692, 693, 694, 695, 696, 697, 702, 706, 707, 708, 718, 726, 727, 728, 729, 746, 747, 750, 751, 753, 763, 764, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 786, 790, 793, 795, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 935, 936, 950, 970, 980, 981, 982, 986, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "feature_0": 922, "feature_1": [636, 922], "feature_2": 636, "feature_all_": 846, "feature_count_": [844, 846, 848], "feature_extract": [2, 47, 54, 57, 80, 81, 83, 84, 87, 99, 102, 124, 185, 274, 336, 353, 354, 355, 356, 369, 375, 412, 413, 420, 468, 549, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 882, 1004, 1037, 1038, 1039, 1040, 1043, 1044], "feature_import": 149, "feature_importances_": [142, 143, 149, 170, 190, 191, 394, 419, 421, 558, 559, 562, 563, 564, 565, 569, 570, 571, 598, 599, 602, 917, 918, 919, 920, 1039, 1042, 1046], "feature_index": 420, "feature_indices_": 1045, "feature_log_prob_": [844, 845, 846, 848], "feature_map": [247, 313], "feature_map__n_compon": 247, "feature_map_fouri": 247, "feature_map_nystroem": [247, 644], "feature_nam": [54, 57, 118, 131, 142, 149, 153, 170, 188, 190, 224, 253, 287, 296, 313, 322, 323, 324, 329, 340, 354, 359, 373, 375, 385, 413, 468, 494, 495, 497, 501, 505, 506, 507, 509, 510, 515, 587, 636, 637, 638, 890, 921, 922, 923, 1014, 1022, 1053], "feature_name_combin": [882, 1053], "feature_names_": 586, "feature_names_in": 1051, "feature_names_in_": [256, 320, 325, 394, 433, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 994, 1050, 1051, 1052, 1053, 1055], "feature_names_out": [428, 433, 446, 447, 449, 451, 453, 468, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 1051, 1054], "feature_rang": [311, 879, 895, 1016, 1039, 1049], "feature_select": [2, 87, 103, 104, 106, 164, 165, 166, 167, 168, 169, 170, 185, 256, 324, 326, 346, 363, 394, 403, 413, 421, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 995, 1027, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1056], "feature_selector": 170, "feature_to_plot": 209, "feature_union": 1053, "featureagglomer": [2, 84, 87, 444, 445, 1023, 1040, 1046, 1047, 1050, 1051, 1053, 1054, 1055], "featureforg": 1030, "featurehash": [2, 47, 57, 102, 185, 353, 354, 355, 369, 375, 420, 492, 586, 593, 594, 595, 596, 882, 1027, 1038, 1043, 1044, 1045, 1051, 1052], "featureheash": 356, "features_": [634, 996], "features__pca__n_compon": 106, "features__univ_select__k": 106, "features_idx": 313, "features_info": 189, "features_nam": [187, 1044], "features_samples_ratio": 69, "featureselector": 606, "featuresshould": 400, "featuretool": 1025, "featureunion": [2, 7, 43, 106, 372, 394, 403, 468, 634, 871, 996, 1026, 1030, 1032, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055], "featurewis": [2, 885], "feb": [73, 444, 458], "februari": [0, 414, 477, 1006, 1038, 1042, 1054], "fed": [47, 156, 363, 375, 420, 995, 1011, 1016, 1048], "feda": [1045, 1046], "feder": 1025, "federico": [1039, 1040, 1045, 1046, 1051], "federicopisanu": 1047, "feed": [47, 116, 216, 249, 356, 375, 378, 385, 392, 412, 420, 747, 882, 1007], "feedback": [270, 379, 380, 381, 395, 1025, 1029, 1045], "feedforward": [866, 867], "feedstock": 384, "feel": [64, 184, 313, 379, 380, 388, 412, 450, 1022], "feel_temp": [43, 189], "feghali": 1054, "fei": [568, 1012], "feld": [1041, 1053], "feldbauer": [1045, 1046, 1047, 1048, 1051], "feldman": [1039, 1044, 1045, 1046, 1047], "felip": [1050, 1051, 1052, 1053], "felix": [1039, 1044, 1045, 1047, 1049, 1050, 1051], "femal": [103, 188, 327, 385, 882, 883, 1016], "fenc": 385, "feng": [1047, 1049, 1050, 1051], "fenil": 1050, "fenx": 1045, "ferdman": 1054, "ferenc": 1030, "fernand": [1045, 1051, 1052], "fernandez": 1046, "fernando": [1042, 1049], "fern\u00e1ndez": 1051, "ferrando": 1047, "ferrari": 1045, "ferreira": [1045, 1050, 1051], "ferri": [421, 1006], "ferria": 1044, "ferrin": 1051, "ferriss": 1044, "ferr\u00e9": 1051, "ferr\u00edn": 1048, "fetal": 252, "fetch": [2, 51, 55, 156, 188, 233, 267, 287, 373, 374, 375, 380, 384, 385, 388, 417, 496, 501, 560, 561, 562, 563, 568, 569, 570, 571, 593, 594, 596, 1045, 1053], "fetch_": 1044, "fetch_20newsgroup": [2, 54, 57, 102, 274, 336, 354, 355, 356, 375, 493, 1042, 1047, 1055], "fetch_20newsgroups_vector": [2, 46, 230, 246, 375, 1037, 1047, 1049, 1054, 1055], "fetch_california_h": [2, 141, 146, 183, 184, 313, 324, 375, 393, 413, 1046, 1048, 1055], "fetch_covtyp": [2, 193, 252, 324, 375, 1046, 1049, 1051, 1055], "fetch_fil": [2, 52, 1056], "fetch_kddcup99": [2, 252, 375, 1044, 1045, 1046, 1049, 1050, 1055], "fetch_lfw_pair": [2, 375, 1042, 1052, 1055], "fetch_lfw_peopl": [2, 45, 375, 1052, 1055], "fetch_mldata": 1045, "fetch_olivetti_fac": [2, 83, 121, 143, 251, 375, 1045, 1046, 1047, 1055], "fetch_openml": [2, 43, 44, 52, 103, 107, 145, 151, 156, 177, 188, 189, 190, 215, 223, 231, 233, 243, 252, 256, 267, 287, 290, 292, 293, 310, 319, 322, 326, 329, 374, 384, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fetch_rcv1": [2, 375, 1042, 1046, 1055], "fetch_species_distribut": [2, 50, 306, 1046, 1055], "fetcher": [373, 1042, 1044, 1053], "feth": 1037, "feurer": [1040, 1045], "fevott": [417, 543, 545, 552], "few": [0, 46, 54, 57, 74, 80, 85, 125, 145, 151, 175, 178, 179, 204, 213, 215, 217, 233, 248, 249, 258, 275, 276, 280, 305, 310, 313, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 350, 356, 367, 375, 376, 377, 380, 382, 393, 395, 403, 406, 409, 410, 412, 416, 417, 419, 421, 422, 441, 453, 566, 567, 660, 697, 700, 902, 953, 1002, 1003, 1005, 1006, 1009, 1010, 1019, 1021, 1022, 1030, 1043, 1053, 1055], "fewer": [43, 53, 63, 88, 135, 144, 146, 215, 367, 381, 412, 421, 422, 452, 465, 546, 599, 701, 839, 957, 1002, 1007, 1009, 1042, 1043, 1044], "fewest": [272, 632], "ff": 388, "ff0000": [67, 301, 308], "ff3333": 119, "ff7216": 119, "ff7f00": [79, 95, 242], "ff9c34": [92, 97], "ffaaaa": 301, "ffc107": 317, "fft": 645, "fhaselbeck": 1049, "fhoang7": 1046, "fhr": 252, "fi": 880, "fibins": [1045, 1046], "fidel": 53, "fidor": 1053, "fiedler": 1043, "fiegel": [1049, 1050, 1052], "field": [170, 233, 377, 409, 412, 413, 420, 468, 503, 506, 622, 1002, 1004, 1013, 1021, 1029, 1038], "fifth": [248, 999], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 86, 88, 90, 93, 97, 99, 105, 109, 111, 116, 118, 121, 126, 127, 131, 135, 141, 142, 145, 146, 148, 149, 151, 153, 154, 156, 158, 175, 181, 183, 189, 191, 193, 196, 202, 206, 209, 210, 212, 213, 215, 216, 219, 223, 228, 230, 233, 235, 236, 237, 238, 239, 240, 243, 245, 252, 253, 263, 267, 268, 269, 270, 273, 274, 275, 276, 279, 282, 283, 284, 286, 287, 292, 293, 295, 297, 298, 306, 309, 310, 313, 314, 315, 317, 318, 319, 322, 326, 327, 340, 347, 349, 350, 351, 352, 354, 355, 356, 358, 376, 387], "fig1": 100, "fig2": 100, "fig_num": 212, "figaspect": 317, "fight": [74, 219, 1030], "fighter": 102, "fignum": 348, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 105, 107, 111, 113, 115, 116, 118, 119, 121, 124, 125, 126, 127, 130, 131, 135, 137, 138, 145, 146, 147, 148, 149, 151, 154, 156, 157, 165, 174, 176, 180, 181, 183, 184, 188, 189, 191, 193, 195, 196, 199, 200, 205, 209, 212, 213, 214, 215, 216, 217, 219, 221, 223, 226, 229, 231, 233, 235, 236, 237, 239, 240, 242, 243, 245, 247, 250, 251, 252, 253, 258, 260, 261, 264, 267, 268, 269, 270, 275, 276, 277, 280, 282, 283, 286, 287, 288, 292, 293, 295, 296, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 326, 327, 332, 334, 341, 343, 347, 348, 349, 350, 351, 352, 354, 355, 356, 376, 923], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100, 109, 113, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 147, 148, 149, 150, 151, 154, 155, 159, 161, 163, 165, 166, 169, 173, 174, 175, 176, 179, 180, 184, 188, 189, 190, 191, 195, 200, 203, 205, 208, 209, 212, 214, 216, 217, 221, 226, 230, 231, 232, 237, 238, 239, 242, 246, 247, 248, 250, 251, 253, 258, 260, 261, 264, 266, 272, 277, 278, 288, 298, 302, 303, 306, 308, 311, 313, 315, 316, 320, 322, 324, 332, 333, 334, 341, 343, 348, 359, 360, 361, 380, 412, 418, 419, 420, 422, 442, 636, 637, 702, 703, 705, 706, 707, 811, 828, 923, 995, 999, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1020, 1021, 1022, 1050], "figure_": [68, 189, 253, 322, 324, 387, 442, 636, 637, 702, 703, 705, 706, 707, 811, 828], "figure_titl": 145, "filali": 1045, "file": [2, 47, 51, 52, 68, 354, 355, 367, 368, 369, 374, 375, 377, 378, 383, 384, 385, 386, 392, 406, 413, 417, 491, 496, 498, 499, 501, 508, 513, 514, 539, 584, 585, 593, 594, 596, 921, 1009, 1022, 1027, 1029, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1056], "file_1": 508, "file_2": 508, "file_42": 508, "file_43": 508, "file_44": 508, "file_id": 374, "file_path": 496, "filenam": [2, 47, 55, 336, 375, 380, 386, 406, 492, 496, 505, 508, 509, 512, 593, 594, 596, 1037, 1042, 1045, 1046], "filesystem": [388, 398, 1050], "filho": 410, "filip": [1054, 1055], "filipj8": [1044, 1045], "fill": [70, 144, 161, 190, 268, 298, 359, 394, 413, 417, 520, 532, 543, 545, 552, 592, 635, 921, 923, 996, 1009, 1022], "fill_between": [52, 148, 151, 161, 172, 177, 179, 181, 195, 196, 233, 273, 275, 276, 277, 283, 811, 828], "fill_between_": [811, 828], "fill_between_kw": [811, 828], "fill_betweenx": 93, "fill_diagon": [191, 238], "fill_legend": 233, "fill_valu": [184, 244, 254, 323, 426, 429, 435, 436, 632, 635, 1016, 1045, 1053, 1054], "fillna": [233, 252], "filo": [1037, 1040], "filter": [2, 18, 47, 54, 80, 81, 105, 221, 233, 271, 273, 295, 354, 368, 375, 386, 389, 412, 420, 452, 492, 493, 508, 593, 596, 600, 601, 602, 603, 604, 605, 779, 844, 945, 970, 1008, 1009, 1047], "filter_param": 779, "filtered_cv_result": 271, "filterwarn": [79, 95, 230, 309, 310, 380, 1016], "final": [2, 43, 52, 63, 64, 70, 75, 77, 88, 102, 103, 111, 113, 116, 126, 135, 136, 138, 140, 145, 146, 149, 156, 159, 167, 177, 184, 187, 189, 191, 193, 195, 200, 202, 204, 212, 215, 217, 232, 233, 236, 242, 256, 262, 267, 271, 279, 290, 293, 319, 320, 322, 323, 343, 347, 367, 369, 375, 378, 380, 381, 382, 384, 393, 394, 409, 410, 412, 413, 416, 419, 420, 421, 441, 446, 451, 452, 456, 463, 466, 468, 541, 560, 561, 572, 573, 575, 599, 632, 652, 658, 664, 684, 695, 699, 724, 805, 837, 838, 869, 870, 906, 909, 995, 996, 998, 1002, 1003, 1006, 1009, 1012, 1013, 1016, 1019, 1030, 1042, 1045, 1046, 1047, 1048, 1050], "final_estim": [156, 322, 419, 572, 573], "final_estimator_": [572, 573], "final_estimatorridgecv": 156, "final_lay": 419, "final_layer_gbr": 419, "final_layer_rfr": 419, "final_step": 77, "financ": [267, 1007], "financi": [0, 51, 412, 419, 1002], "find": [2, 43, 44, 45, 51, 55, 64, 75, 80, 81, 82, 85, 86, 88, 90, 98, 105, 111, 112, 121, 123, 125, 126, 131, 146, 156, 172, 176, 178, 180, 189, 200, 202, 204, 217, 223, 235, 237, 239, 240, 245, 252, 263, 267, 272, 273, 274, 284, 286, 296, 301, 302, 303, 318, 322, 328, 330, 345, 346, 347, 350, 354, 355, 358, 368, 377, 378, 380, 381, 382, 385, 386, 389, 392, 393, 394, 395, 400, 409, 411, 412, 414, 415, 417, 419, 420, 421, 423, 445, 448, 449, 450, 454, 455, 456, 457, 466, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 563, 570, 587, 594, 615, 616, 652, 655, 658, 659, 660, 661, 663, 664, 676, 693, 712, 734, 735, 743, 787, 788, 789, 792, 793, 799, 804, 805, 819, 827, 851, 852, 853, 855, 857, 859, 860, 861, 882, 883, 888, 901, 902, 903, 917, 918, 920, 932, 952, 953, 955, 995, 996, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1012, 1016, 1020, 1021, 1022, 1024, 1026, 1029, 1030, 1037, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1055], "findal": 356, "fine": [43, 72, 144, 170, 219, 231, 264, 271, 347, 360, 361, 377, 384, 394, 420, 450, 953, 1009, 1012, 1021, 1026, 1047], "finer": [43, 52, 72, 295, 343, 368, 412, 416, 995, 1009, 1047], "finfo": [238, 475, 476, 482, 611, 655, 656, 659, 660, 661, 687, 688, 1052], "finish": [170, 261, 1003], "finit": [64, 258, 264, 367, 375, 394, 472, 543, 556, 587, 611, 614, 615, 616, 663, 733, 783, 790, 802, 830, 907, 933, 934, 935, 936, 1002, 1005, 1006, 1030, 1044, 1045, 1049, 1051, 1052], "finn": [1045, 1046], "firefox": 1016, "fireplac": 145, "fireplacequ": 145, "firm": [51, 412], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 88, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 107, 111, 115, 116, 118, 126, 129, 135, 136, 140, 142, 143, 144, 145, 146, 147, 149, 151, 153, 156, 157, 158, 159, 166, 167, 170, 172, 173, 174, 177, 178, 179, 180, 184, 187, 188, 189, 191, 193, 195, 197, 199, 204, 211, 212, 213, 216, 217, 223, 224, 229, 236, 239, 246, 247, 249, 250, 251, 253, 255, 256, 260, 264, 267, 268, 273, 275, 276, 280, 282, 284, 285, 286, 290, 292, 293, 295, 298, 302, 303, 304, 308, 310, 313, 315, 318, 319, 320, 323, 324, 333, 336, 339, 340, 343, 345, 354, 355, 356, 358, 359, 362, 363, 368, 369, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 388, 392, 394, 406, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 422, 424, 447, 450, 451, 454, 463, 464, 468, 476, 487, 491, 492, 494, 495, 497, 499, 502, 505, 507, 509, 513, 514, 515, 533, 538, 539, 543, 546, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 587, 589, 593, 594, 595, 596, 598, 599, 606, 615, 616, 622, 626, 629, 636, 637, 638, 639, 651, 657, 664, 671, 673, 679, 681, 693, 700, 703, 704, 705, 707, 717, 721, 741, 747, 768, 769, 787, 799, 802, 803, 808, 809, 810, 811, 812, 817, 819, 826, 828, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 854, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 874, 882, 886, 887, 888, 890, 891, 898, 899, 911, 914, 917, 918, 919, 920, 922, 924, 930, 931, 935, 936, 937, 955, 957, 972, 976, 979, 991, 994, 995, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1013, 1016, 1017, 1020, 1021, 1022, 1030, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "first_img_data": 512, "first_pca_compon": 318, "first_quart": 130, "first_week": 151, "firstli": [124, 367, 392, 662], "fisach": 1043, "fiscal": 0, "fischer": [1042, 1043], "fischler": 1002, "fischoff": 1049, "fish": 325, "fisher": [377, 419, 509, 641], "fisher1958": 419, "fisher_transform": 641, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 121, 123, 124, 125, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 185, 187, 188, 189, 190, 191, 193, 194, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 238, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 290, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 367, 369, 372, 375, 377, 380, 383, 385, 386, 389, 392, 394, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 506, 514, 515, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 582, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 699, 702, 703, 705, 706, 707, 715, 716, 728, 737, 740, 755, 793, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 928, 929, 945, 962, 965, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "fit_": 1050, "fit_algorithm": [121, 536, 542, 1052, 1053], "fit_and_evalu": 355, "fit_and_plot_model": 318, "fit_and_scor": 223, "fit_data": 59, "fit_dur": 293, "fit_ecoc": 1041, "fit_grid_point": 1048, "fit_intercept": [46, 195, 196, 201, 220, 229, 242, 281, 320, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 909, 910, 916, 1002, 1020, 1041, 1045, 1046, 1047, 1049, 1050, 1051], "fit_inverse_transform": [44, 126, 540, 1046], "fit_ovo": 1041, "fit_ovr": 1041, "fit_param": [249, 394, 436, 441, 446, 449, 469, 537, 539, 541, 542, 544, 547, 548, 554, 560, 561, 572, 573, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 635, 640, 643, 644, 645, 646, 647, 670, 676, 811, 828, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 853, 858, 861, 865, 868, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 901, 902, 965, 1044, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056], "fit_path": [655, 659, 660, 661, 687, 688], "fit_predict": [57, 89, 90, 93, 242, 252, 300, 382, 394, 412, 430, 434, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 473, 568, 682, 797, 798, 802, 803, 855, 861, 869, 913, 929, 1012, 1042, 1045, 1046, 1050, 1052, 1054], "fit_prior": [375, 844, 845, 846, 848], "fit_status_": [911, 912, 913, 914, 915], "fit_tim": [52, 91, 145, 204, 223, 275, 416, 832, 833], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 275, "fit_times_svm": 275, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 82, 85, 86, 91, 95, 118, 122, 125, 131, 154, 193, 206, 231, 233, 235, 236, 237, 238, 239, 240, 245, 246, 249, 250, 256, 293, 297, 309, 313, 314, 318, 319, 320, 322, 325, 327, 328, 329, 330, 343, 354, 355, 356, 363, 372, 375, 382, 385, 386, 394, 408, 413, 417, 420, 421, 428, 436, 446, 447, 449, 451, 453, 468, 470, 472, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 695, 696, 697, 701, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 907, 929, 942, 996, 998, 1002, 1007, 1009, 1016, 1017, 1018, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1051, 1053, 1054, 1055], "fitfailedwarn": [2, 805, 808, 809, 811, 819, 828, 831, 832, 833, 836], "fitted_transform": [382, 468], "fittedcolumntransform": [156, 189], "fittedgridsearchcv": 254, "fittedpipelin": [156, 244, 254, 274, 287, 319, 323], "fittedrandomforestclassifi": 329, "fittedrandomizedsearchcv": 103, "fittedstackingregressor": 156, "fitter": 1022, "fitting_weight": 403, "fitzgerald": 1045, "fitzk": 1030, "five": [143, 151, 259, 267, 333, 336, 375, 536, 544, 550, 1003, 1009, 1021, 1030, 1037], "five_imag": 420, "fix": [2, 43, 47, 58, 62, 70, 80, 103, 130, 140, 141, 144, 149, 151, 172, 173, 177, 180, 188, 191, 200, 217, 233, 252, 264, 276, 286, 308, 322, 323, 324, 325, 326, 327, 328, 329, 330, 355, 367, 368, 374, 376, 378, 379, 380, 384, 388, 392, 394, 395, 403, 412, 413, 416, 417, 419, 420, 422, 456, 466, 476, 509, 517, 536, 542, 545, 547, 553, 554, 564, 565, 569, 570, 593, 596, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 635, 658, 668, 673, 675, 689, 692, 696, 700, 712, 790, 802, 819, 826, 851, 852, 854, 857, 859, 860, 876, 879, 893, 917, 918, 928, 953, 972, 995, 1002, 1005, 1006, 1009, 1016, 1026, 1035, 1036, 1038, 1039, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [593, 596], "fixedthresholdclassifi": [2, 267, 411, 827, 1055, 1056], "fixm": [384, 394], "fixtur": [368, 380], "fkaren27": 1051, "flach": [410, 1006], "flach2008": 1006, "flach2015": 1006, "flag": [177, 249, 252, 329, 378, 380, 381, 383, 403, 408, 468, 615, 616, 632, 678, 680, 733, 790, 925, 926, 1021, 1043, 1047, 1048, 1050, 1051, 1052, 1053], "flair": 1008, "flak": 1052, "flake8": 584, "flanagan": [1046, 1047], "flander": 1055, "flat": [2, 78, 121, 189, 235, 236, 237, 271, 412, 419, 420, 444, 450, 452, 465, 514, 1013, 1037, 1038, 1053], "flat_grid": 247, "flatnonzero": [130, 202, 272, 281, 282, 786], "flatten": [54, 68, 238, 247, 271, 317, 340, 351, 386, 507, 574, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 858], "flatten_transform": [574, 1044], "flatter": [43, 62], "flavanoid": [48, 377], "flaviomorelli": 1047, "flavor": [380, 1009], "flavour": 419, "flaw": [394, 419], "flaxman": [1039, 1041], "fledg": [369, 420], "fleet": 43, "fleme": 1052, "flennerhag": 1045, "fletcher": [1002, 1037, 1041], "flexibl": [43, 62, 145, 183, 215, 286, 314, 340, 356, 387, 392, 406, 416, 422, 679, 909, 910, 928, 995, 1000, 1002, 1006, 1010, 1016, 1025, 1026, 1030, 1046, 1050], "flier": 49, "flink": 102, "flip": [125, 587, 747, 953, 1008, 1041, 1050], "flip_i": 520, "flip_sign": 953, "float": [2, 46, 49, 51, 76, 80, 81, 86, 93, 94, 98, 99, 100, 103, 124, 127, 163, 180, 188, 201, 205, 238, 267, 272, 273, 277, 281, 350, 356, 367, 374, 375, 380, 389, 394, 408, 411, 412, 413, 420, 421, 423, 424, 425, 429, 431, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 588, 589, 593, 596, 597, 598, 599, 600, 601, 602, 603, 607, 608, 615, 616, 618, 619, 620, 621, 622, 624, 625, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 764, 771, 774, 780, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 811, 819, 822, 825, 827, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 872, 875, 876, 882, 883, 885, 887, 889, 890, 891, 892, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 932, 933, 935, 936, 939, 950, 951, 968, 980, 986, 991, 996, 1006, 1007, 1009, 1010, 1016, 1021, 1022, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "float16": 1046, "float32": [55, 147, 238, 311, 327, 368, 375, 380, 381, 382, 394, 406, 408, 562, 563, 564, 565, 568, 569, 570, 571, 598, 599, 645, 646, 663, 704, 768, 874, 917, 918, 919, 920, 933, 981, 982, 983, 1022, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "float64": [45, 50, 52, 53, 86, 103, 105, 147, 148, 149, 150, 161, 172, 188, 189, 248, 267, 281, 284, 326, 327, 328, 343, 368, 374, 380, 381, 382, 394, 420, 425, 462, 475, 476, 479, 482, 483, 484, 501, 502, 513, 514, 521, 522, 523, 525, 536, 542, 544, 547, 548, 550, 551, 553, 586, 587, 594, 596, 602, 646, 653, 655, 656, 659, 660, 661, 662, 663, 668, 674, 675, 678, 680, 685, 687, 688, 692, 699, 704, 711, 712, 713, 714, 715, 717, 721, 722, 724, 725, 726, 728, 730, 731, 734, 735, 736, 740, 741, 742, 743, 744, 745, 748, 753, 758, 760, 761, 788, 789, 791, 792, 793, 798, 799, 800, 819, 874, 882, 883, 890, 902, 911, 912, 914, 915, 918, 920, 930, 933, 935, 951, 976, 979, 981, 982, 983, 1021, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "float_info": 57, "floch": 1054, "floor": 53, "floor_x": 53, "flore": 1050, "florian": [1030, 1037, 1041, 1043, 1047, 1054], "florin": 1055, "flow": 382, "flowchart": [400, 416], "flower": [118, 129, 282, 511, 512, 1006, 1025], "floyd": [375, 693, 1003], "floydsoft": 1041, "fluctuat": [51, 93, 151, 215, 280, 1045], "flush": 223, "fly": [147, 385, 388, 513, 514, 587, 1037, 1039, 1046], "flyingdutchman23": 1050, "flyingimmidev": 1037, "flynn": [1050, 1052], "fmax": 233, "fmi": [412, 736], "fmin_l_bfgs_b": [615, 616], "fmt": [94, 226], "fn": [330, 412, 717, 723, 734, 735, 736, 787, 788, 789, 792, 1006, 1007], "fn_c": 282, "fna": [170, 377], "fnlwgt": [329, 501], "fnr": [270, 703, 732], "fo": 420, "focu": [43, 48, 121, 135, 172, 264, 303, 367, 385, 410, 419, 558, 559, 564, 566, 567, 683, 1003, 1009, 1016, 1025, 1026, 1029], "focus": [62, 109, 204, 290, 375, 380, 392, 1003, 1016, 1025], "fokow": 1054, "fold": [2, 43, 100, 106, 109, 141, 144, 147, 161, 169, 188, 204, 260, 267, 268, 269, 271, 273, 274, 276, 283, 287, 320, 335, 350, 363, 375, 380, 383, 384, 393, 394, 403, 411, 412, 421, 441, 476, 498, 541, 572, 573, 599, 607, 652, 656, 658, 660, 664, 666, 668, 670, 678, 680, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 840, 843, 890, 911, 914, 995, 1002, 1006, 1016, 1021, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1054], "folder": [2, 104, 375, 378, 380, 384, 388, 398, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 1009], "folkman": 1044, "folloni": 1048, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 87, 88, 90, 96, 100, 103, 104, 119, 121, 130, 135, 138, 148, 149, 153, 165, 177, 178, 183, 187, 188, 189, 190, 191, 195, 197, 200, 202, 204, 213, 215, 216, 230, 233, 243, 249, 250, 252, 264, 267, 273, 282, 283, 287, 290, 313, 319, 320, 322, 323, 325, 326, 327, 330, 340, 350, 354, 355, 356, 358, 362, 363, 367, 368, 374, 375, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 398, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 429, 431, 433, 434, 435, 436, 441, 445, 447, 449, 450, 451, 452, 453, 457, 465, 467, 468, 469, 472, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 520, 539, 543, 545, 546, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 636, 638, 639, 651, 657, 663, 664, 675, 676, 685, 697, 699, 704, 710, 714, 718, 723, 793, 824, 846, 851, 852, 853, 855, 857, 859, 860, 861, 868, 872, 873, 874, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 907, 909, 910, 914, 917, 918, 919, 920, 924, 931, 947, 948, 952, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1034, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "folwarczn\u00fd": 1054, "fonari": [1049, 1050], "fond": 1030, "fondat": 1030, "font": [148, 204, 229, 247, 921, 923], "font_manag": [112, 299, 342], "font_prop": 112, "font_siz": 317, "fontdict": [54, 74], "fontnam": [921, 1050], "fontproperti": [112, 299, 342], "fontsiz": [44, 47, 49, 54, 70, 83, 93, 124, 144, 165, 175, 176, 178, 181, 189, 196, 205, 214, 226, 236, 237, 261, 268, 277, 278, 279, 284, 285, 311, 317, 349, 923], "fontweight": [93, 210], "foo": [382, 586, 1010], "food": [0, 377], "foot": 1024, "footer": [54, 102, 274, 354, 355, 375, 492, 493], "footnot": [1013, 1025], "footprint": [324, 327, 367, 369, 412, 417, 546, 560, 561, 562, 563, 568, 569, 570, 571, 1039, 1042, 1043, 1048, 1049, 1052], "fopenmp": [378, 381], "foral": [412, 422, 618], "forbid": [412, 419], "forbidden": [189, 419], "forc": [135, 172, 219, 286, 293, 317, 354, 374, 378, 407, 416, 419, 454, 461, 468, 471, 501, 611, 614, 651, 652, 657, 658, 662, 665, 666, 667, 668, 677, 678, 679, 686, 689, 692, 759, 783, 786, 827, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 911, 912, 913, 914, 915, 933, 935, 936, 1016, 1032, 1042, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "force_all_finit": [783, 933, 935, 936, 1048, 1051, 1056], "force_alpha": [844, 845, 846, 848, 1052], "force_finit": [611, 614, 733, 790, 1006, 1051], "force_int_remainder_col": [468, 471], "force_writ": [935, 936, 1055], "ford": 51, "forecast": [42, 43, 148, 151, 171, 179, 185, 217, 273, 410, 411, 422, 496, 501, 567, 616, 620, 627, 628, 630, 706, 747, 750, 751, 753, 795, 826, 831, 832, 835, 1006, 1025, 1027], "foreground": [75, 99], "foreign_work": 267, "foreman": 1044, "forese": 392, "forest": [2, 14, 50, 64, 67, 134, 140, 144, 146, 147, 149, 150, 151, 152, 154, 156, 159, 183, 185, 186, 193, 242, 270, 272, 274, 306, 324, 354, 361, 363, 373, 393, 394, 410, 421, 467, 468, 494, 495, 500, 501, 503, 520, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 635, 639, 805, 810, 835, 842, 869, 883, 913, 917, 918, 919, 995, 996, 1007, 1014, 1022, 1026, 1027, 1028, 1032, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1054], "forest_import": 142, "forestclassifi": 1042, "forestcolumntransform": 156, "forestcov": 252, "forg": [322, 323, 324, 325, 326, 327, 328, 329, 330, 368, 381, 383, 384, 388, 398, 399], "forget": [189, 363, 368, 374, 384, 392, 417, 1003], "forget_factor": [417, 543], "forgiv": 739, "forina": 377, "fork": [378, 380, 388, 392], "forkserv": 392, "form": [2, 43, 48, 57, 68, 77, 93, 100, 121, 159, 179, 180, 185, 188, 248, 249, 264, 273, 332, 363, 374, 377, 380, 382, 384, 394, 395, 409, 412, 415, 416, 417, 418, 419, 420, 422, 424, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 463, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 704, 802, 803, 804, 805, 808, 809, 810, 813, 815, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 941, 962, 965, 995, 997, 999, 1000, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1016, 1021, 1025, 1043, 1047, 1049], "formal": [394, 395, 412, 419, 849, 850, 1003, 1006, 1007, 1010], "format": [2, 47, 50, 51, 52, 59, 87, 91, 94, 102, 111, 121, 130, 138, 144, 147, 149, 161, 165, 166, 193, 196, 201, 215, 233, 256, 268, 278, 280, 281, 284, 288, 297, 298, 301, 302, 317, 322, 330, 349, 358, 362, 367, 373, 379, 380, 382, 383, 388, 389, 393, 394, 406, 413, 416, 419, 420, 436, 446, 447, 449, 451, 453, 454, 456, 463, 468, 472, 486, 487, 488, 489, 491, 493, 501, 502, 503, 513, 514, 515, 528, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 556, 562, 563, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 651, 657, 663, 664, 665, 667, 671, 672, 673, 681, 682, 683, 693, 694, 697, 702, 716, 718, 725, 744, 745, 756, 773, 796, 797, 838, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 896, 901, 902, 907, 909, 921, 935, 936, 959, 967, 971, 981, 982, 983, 984, 985, 986, 996, 1006, 1009, 1014, 1016, 1017, 1020, 1022, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1052, 1054, 1055, 1056], "format_func": 298, "formatter_result": 91, "former": [51, 356, 411, 419, 420, 570, 807, 814, 823, 1008, 1037, 1043, 1046], "formerli": [219, 1038, 1041, 1043, 1044], "formul": [135, 172, 181, 219, 282, 380, 412, 414, 417, 420, 422, 425, 479, 554, 555, 562, 569, 655, 656, 659, 660, 661, 663, 664, 670, 675, 768, 774, 803, 911, 914, 917, 919, 1002, 1006, 1007, 1010, 1016, 1028, 1032, 1054], "formula": [109, 110, 409, 412, 414, 425, 477, 479, 521, 522, 523, 595, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 681, 683, 709, 734, 735, 760, 769, 826, 995, 1000, 1002, 1006, 1011, 1012, 1016, 1020, 1042, 1044, 1046], "forrest": [1048, 1049], "forsal": [57, 356, 375], "forsyth": 1045, "forth": 388, "fortin": [1037, 1039, 1040, 1041], "fortran": [424, 546, 651, 652, 657, 658, 665, 666, 667, 668, 670, 686, 689, 690, 691, 935, 936, 1037, 1040, 1041, 1045], "fortun": [386, 419, 1050, 1051], "forward": [46, 135, 170, 249, 324, 367, 380, 403, 406, 421, 513, 514, 544, 548, 558, 564, 565, 607, 673, 690, 691, 869, 873, 1002, 1026, 1049], "foster": [0, 1045], "fouchet": 1043, "found": [0, 45, 52, 57, 58, 59, 131, 142, 169, 172, 176, 178, 180, 219, 243, 250, 267, 271, 274, 275, 276, 286, 318, 322, 325, 327, 328, 343, 356, 367, 369, 374, 377, 379, 380, 382, 392, 394, 395, 406, 409, 411, 412, 415, 416, 417, 419, 420, 422, 437, 445, 448, 449, 463, 476, 562, 563, 564, 565, 569, 570, 593, 595, 615, 616, 633, 641, 652, 656, 658, 660, 666, 668, 670, 676, 677, 679, 681, 683, 692, 693, 717, 724, 805, 808, 809, 819, 827, 846, 851, 852, 858, 880, 882, 883, 917, 918, 919, 920, 924, 932, 989, 993, 995, 998, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1016, 1020, 1021, 1022, 1026, 1037, 1040, 1041, 1044, 1045, 1047, 1051, 1054], "foundat": [0, 156, 267, 380, 410, 1009], "founder": 1030, "fouqu": 1037, "fouquet": [1053, 1054], "four": [64, 166, 180, 193, 198, 216, 260, 261, 267, 333, 340, 376, 380, 394, 562, 569, 724, 917, 919, 941, 1002, 1004, 1005, 1006, 1016, 1024], "fourier": [2, 23, 247, 643, 644, 645, 646, 647, 763, 764, 998], "fourier_approx_svm": 247, "fourier_scor": 247, "fourier_tim": 247, "fournier": 1046, "fourth": 144, "fowkl": [412, 736], "fowlk": [736, 1043], "fowlkes_mallows_scor": [2, 412, 1006, 1043, 1045], "fox": [330, 420, 1053], "fp": [47, 267, 330, 412, 717, 723, 734, 735, 736, 787, 788, 789, 792, 1006], "fp_c": 282, "fpgawesom": 1051, "fpr": [2, 50, 243, 252, 267, 270, 282, 283, 387, 597, 601, 703, 707, 711, 732, 794, 1006, 1034, 1037, 1053], "fpr_a": 282, "fpr_b": 282, "fpr_grid": 282, "fpr_score": 267, "fr": [536, 542, 663, 669, 690, 691, 763, 764, 1004, 1006], "fraa\u00df": 1054, "frac": [63, 111, 112, 135, 273, 280, 282, 325, 409, 410, 412, 414, 417, 418, 419, 420, 422, 435, 467, 469, 486, 487, 488, 559, 561, 563, 565, 567, 570, 573, 575, 616, 620, 624, 627, 628, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 685, 701, 734, 735, 760, 774, 842, 843, 852, 860, 867, 910, 912, 915, 918, 920, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1020, 1021, 1022], "frac12": [419, 998], "fractal": [170, 377], "fraction": [2, 43, 62, 64, 148, 151, 215, 223, 233, 267, 280, 350, 355, 410, 416, 419, 442, 443, 453, 454, 460, 461, 520, 532, 562, 563, 564, 565, 569, 570, 571, 595, 598, 607, 671, 672, 673, 676, 681, 682, 683, 708, 726, 727, 728, 729, 739, 799, 801, 807, 811, 833, 834, 848, 876, 911, 912, 913, 917, 918, 919, 920, 971, 1002, 1006, 1009, 1013, 1014, 1016, 1021, 1022, 1026, 1038, 1039, 1040, 1051, 1054], "fragil": 660, "fragment": [88, 124], "frame": [43, 103, 151, 177, 188, 189, 215, 267, 319, 329, 375, 380, 392, 395, 493, 494, 495, 497, 501, 505, 506, 507, 509, 510, 515, 1049], "frameon": [46, 221], "framework": [273, 367, 382, 392, 394, 406, 412, 642, 693, 802, 1002, 1003, 1010, 1026, 1030, 1037, 1043], "fran": [1049, 1050, 1051], "franc": [319, 769], "francesco": [1049, 1052], "franci": [541, 663, 1002, 1043], "francia": 1051, "francidona": 1047, "francisco": [420, 1018], "franck": [1052, 1054, 1055], "franco": 1047, "francoi": [1037, 1050], "francoisgoupil": 1051, "frank": [273, 840, 1007, 1042, 1046, 1047], "frankhui": 1045, "franki": 1050, "franz": 1045, "franziska": 1048, "fran\u00e7oi": [0, 364, 1040], "fraud": [267, 330, 1002, 1030], "fraudul": [267, 1002, 1030], "fraudulent_accept": 267, "fraudulent_refus": 267, "fred": [102, 1037, 1050], "freddi": 1056, "freder": 1047, "frederick": 1050, "fredrik": 1045, "free": [0, 44, 64, 88, 177, 178, 184, 214, 263, 313, 374, 379, 380, 381, 388, 392, 398, 420, 456, 614, 676, 865, 915, 995, 998, 1002, 1006, 1026, 1045], "freebsd": 383, "freedom": [43, 123, 177, 202, 204, 206, 273, 546, 661, 802, 1002, 1040], "freeland": 1052, "freestand": 382, "freez": [384, 398, 406, 1026, 1030, 1045], "frei": [73, 444, 458, 1047], "freija": 1045, "freita": [1042, 1044, 1045], "frellwan": 1050, "fremtpl2": 233, "fremtpl2freq": 233, "fremtpl2sev": 233, "french": [233, 319], "freq": [188, 200, 356], "frequenc": [57, 64, 172, 189, 200, 209, 215, 246, 323, 324, 354, 355, 356, 375, 392, 410, 416, 417, 419, 420, 421, 556, 562, 564, 565, 566, 569, 593, 594, 595, 596, 609, 663, 664, 669, 671, 673, 679, 680, 681, 690, 691, 838, 873, 882, 883, 909, 911, 914, 917, 919, 941, 1002, 1003, 1008, 1016, 1020, 1022, 1039, 1041, 1042, 1048, 1055], "frequent": [72, 135, 184, 276, 282, 283, 287, 355, 377, 380, 420, 556, 595, 635, 859, 882, 883, 886, 898, 996, 998, 1006, 1020, 1026, 1055], "frequentist": 533, "fresh": [543, 1026, 1047], "fresh_restart": 543, "fresh_restarts_max_it": 543, "freund": [419, 558, 559], "fri": [43, 151, 189, 375], "frid": [1030, 1040], "friedman": [2, 138, 139, 150, 272, 414, 416, 419, 482, 521, 522, 523, 525, 563, 564, 565, 570, 598, 599, 839, 917, 918, 920, 1000, 1002, 1007, 1013, 1022], "friedman2001": 419, "friedman2002": 419, "friedman_ms": [563, 564, 565, 570, 918, 920, 1022, 1053, 1054], "friend": [426, 1041], "friendli": [121, 368, 380, 388, 417, 902, 1018, 1019, 1025, 1026], "fring": [85, 412], "fritsch": [0, 402, 1037, 1038, 1040], "fritzk": 1052, "fro": [417, 543, 545, 552, 698, 1002], "fro_2": [666, 668], "frobeniu": [54, 124, 447, 451, 463, 473, 474, 475, 476, 477, 478, 479, 480, 536, 542, 543, 545, 550, 551, 552, 1002, 1044], "frobenius_norm": 693, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 397, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 966, 967, 968, 969, 970, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "from_dtyp": [43, 145, 267, 329, 419, 566, 567, 1054], "from_estim": [45, 48, 62, 64, 66, 67, 70, 89, 137, 140, 151, 152, 153, 157, 189, 199, 207, 224, 229, 248, 253, 255, 266, 267, 270, 275, 276, 280, 283, 286, 296, 301, 304, 318, 322, 323, 324, 325, 327, 328, 329, 330, 339, 340, 341, 342, 344, 345, 347, 359, 387, 410, 442, 636, 637, 638, 702, 703, 705, 706, 707, 723, 732, 787, 789, 792, 793, 794, 811, 828, 1001, 1006, 1013, 1034, 1050, 1051, 1052, 1053, 1054, 1055], "from_predict": [43, 52, 68, 107, 156, 188, 252, 269, 280, 282, 325, 332, 354, 387, 442, 636, 702, 703, 705, 706, 707, 723, 732, 787, 789, 792, 793, 794, 1006, 1034, 1050, 1051, 1052, 1053, 1054, 1055], "frombuffer_empti": 1044, "fromkei": [274, 924], "fromnumer": 386, "front": 1044, "frontal": 375, "frontend": 386, "frontier": [48, 229, 299, 342, 1012], "frozen": 382, "frozentransform": 382, "frsi": 1045, "fruit": [380, 1007], "fr\u00e9minvil": [1054, 1055], "fs1995": 419, "ftfy": 420, "ftorres16": [1051, 1052], "ftp": [170, 377, 687, 688], "ftwo_scor": [747, 1006], "fu": [663, 1041], "fuck": [1049, 1050], "fuction": 989, "fuent": [1038, 1039], "fugled": 1054, "fujikawa": 1044, "fukatani": 1044, "fulfil": [380, 412, 419, 805, 808, 809, 819, 869, 873, 1002], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 367, 368, 369, 373, 375, 378, 380, 382, 385, 388, 392, 394, 395, 398, 408, 412, 414, 416, 417, 420, 426, 429, 435, 436, 445, 449, 451, 453, 463, 492, 493, 496, 497, 501, 502, 505, 506, 507, 508, 509, 510, 512, 515, 540, 542, 546, 555, 564, 565, 572, 573, 637, 653, 655, 659, 674, 685, 726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 795, 796, 802, 803, 816, 846, 941, 995, 1002, 1005, 1008, 1009, 1013, 1016, 1019, 1026, 1037, 1041, 1043, 1045, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056], "full_data": 195, "full_lik": 98, "full_model": 295, "full_scor": 184, "fulli": [52, 79, 88, 142, 148, 367, 374, 375, 380, 394, 412, 418, 419, 421, 447, 451, 562, 563, 569, 570, 917, 918, 919, 920, 921, 923, 996, 1002, 1011, 1019, 1025, 1050, 1051], "fullpap": 1019, "fultz": 1050, "fun": [424, 538, 1030], "fun_arg": [424, 538], "func": [50, 107, 140, 188, 196, 233, 306, 380, 413, 469, 704, 873, 1016, 1041, 1043, 1045, 1046, 1054, 1055], "func_metr": 633, "func_min": [615, 616], "funcformatt": 298, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 80, 86, 87, 88, 90, 92, 99, 102, 103, 104, 107, 121, 124, 126, 130, 133, 140, 141, 145, 146, 147, 148, 149, 150, 151, 161, 166, 169, 170, 172, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 191, 194, 195, 198, 200, 208, 210, 211, 212, 213, 215, 216, 221, 222, 223, 228, 231, 232, 233, 235, 243, 245, 248, 249, 252, 253, 255, 256, 263, 265, 267, 271, 273, 274, 275, 276, 281, 282, 286, 288, 290, 293, 308, 311, 313, 320, 322, 323, 325, 326, 328, 330, 335, 337, 340, 341, 342, 343, 344, 345, 347, 350, 352, 354, 355, 359, 363, 367, 368, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 392, 393, 394, 398, 403, 406, 408, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 423, 424, 427, 429, 431, 434, 435, 436, 441, 444, 447, 448, 449, 451, 452, 454, 456, 458, 461, 462, 463, 464, 465, 468, 469, 472, 473, 475, 476, 478, 482, 492, 493, 495, 497, 500, 501, 502, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 577, 580, 586, 587, 593, 594, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 609, 612, 613, 614, 615, 616, 620, 624, 625, 627, 628, 632, 633, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 703, 704, 705, 707, 708, 709, 711, 716, 717, 721, 724, 726, 727, 728, 729, 733, 737, 739, 740, 743, 745, 746, 747, 755, 760, 762, 766, 767, 768, 770, 773, 776, 779, 783, 784, 785, 786, 787, 788, 790, 794, 797, 798, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 816, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 879, 881, 885, 886, 887, 888, 889, 890, 893, 895, 898, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 933, 943, 945, 946, 947, 952, 953, 964, 965, 971, 972, 975, 976, 979, 980, 989, 994, 995, 996, 997, 999, 1001, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1022, 1025, 1026, 1027, 1028, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "functiontransform": [2, 43, 102, 140, 215, 233, 336, 406, 468, 469, 1016, 1042, 1043, 1045, 1050, 1051, 1052, 1054, 1056], "functiontransformerfunctiontransform": 140, "functool": 233, "fundament": [72, 82, 112, 355, 384, 392, 393, 415, 501, 543, 545, 552, 713, 1002, 1006], "funder": 0, "fung": 416, "funnel": [45, 498, 499], "funni": 102, "furlanello": 748, "furrer": 1054, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 103, 109, 116, 121, 138, 144, 146, 169, 172, 177, 188, 190, 195, 200, 235, 240, 249, 267, 270, 273, 274, 280, 327, 343, 355, 362, 367, 380, 392, 394, 406, 411, 412, 414, 417, 419, 420, 422, 448, 456, 466, 520, 537, 540, 587, 619, 627, 633, 663, 664, 671, 672, 673, 681, 682, 683, 696, 700, 742, 779, 783, 786, 797, 798, 845, 851, 852, 859, 860, 887, 889, 909, 911, 914, 953, 1005, 1006, 1008, 1009, 1010, 1012, 1014, 1016, 1020, 1021, 1046, 1050], "furthermor": [43, 52, 72, 141, 189, 190, 252, 253, 255, 293, 354, 355, 367, 369, 387, 412, 417, 419, 420, 567, 595, 611, 624, 709, 741, 760, 762, 800, 909, 1002, 1014, 1040, 1044], "fuse": [381, 1043, 1053], "fusion": 392, "futur": [0, 52, 177, 216, 255, 325, 328, 380, 384, 394, 395, 406, 416, 420, 501, 539, 640, 928, 975, 1007, 1021, 1022, 1030, 1034, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "futurewarn": [380, 388, 1044, 1045, 1046, 1048, 1050, 1053, 1054], "fuxin": 647, "fw": 693, "fwe": 597, "f\u00e9lix": [1037, 1039, 1040, 1041, 1045], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 86, 88, 98, 102, 113, 116, 128, 135, 138, 147, 148, 173, 174, 175, 180, 184, 187, 188, 198, 203, 215, 216, 217, 219, 233, 240, 248, 249, 258, 267, 273, 277, 278, 284, 292, 299, 318, 330, 335, 349, 350, 356, 363, 367, 372, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 392, 394, 403, 406, 408, 410, 412, 414, 416, 417, 419, 420, 421, 422, 424, 441, 447, 448, 451, 453, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 508, 533, 536, 538, 539, 542, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 598, 599, 602, 609, 615, 616, 622, 627, 628, 635, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 691, 695, 697, 702, 721, 725, 733, 743, 745, 768, 783, 790, 793, 804, 806, 807, 808, 809, 811, 812, 814, 823, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 856, 858, 859, 860, 861, 865, 866, 867, 869, 872, 874, 875, 876, 879, 881, 882, 885, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 952, 953, 965, 995, 996, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1020, 1021, 1022, 1026, 1029, 1030, 1037, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "g0g0gadget": 1047, "g2015": 1013, "g_": 412, "g_i": [419, 654], "g_j": [653, 674, 685], "ga": 0, "gaaca": 180, "gaatattaggccga": 392, "gabor": 1051, "gabriel": [1045, 1046, 1047, 1050, 1051], "gael": [0, 401, 1024, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "gaido": 1046, "gaidon": 1037, "gain": [2, 86, 151, 237, 280, 293, 295, 329, 330, 333, 354, 355, 362, 379, 386, 388, 419, 501, 537, 562, 566, 567, 569, 731, 761, 802, 803, 838, 917, 919, 1007, 1011, 1019, 1022, 1040, 1044, 1047], "gain_matrix": 267, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 375, 380, 382, 394, 398, 405, 1027, 1037, 1041, 1044], "galli": 1049, "gallopoulo": 417, "galvez": 1042, "gambl": 51, "gameiro": 1051, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 126, 157, 163, 193, 229, 242, 247, 248, 271, 273, 275, 278, 284, 324, 332, 333, 335, 337, 340, 342, 343, 346, 347, 349, 352, 415, 417, 419, 422, 456, 540, 567, 624, 625, 644, 645, 646, 648, 649, 650, 653, 685, 690, 696, 729, 752, 757, 764, 771, 780, 781, 782, 802, 816, 819, 904, 905, 906, 911, 912, 913, 914, 915, 995, 998, 1002, 1004, 1019, 1021, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1051, 1052, 1053], "gamma_": [540, 1053], "gamma_0": [258, 264], "gamma_2d_rang": 343, "gamma_bound": 625, "gamma_k": 415, "gamma_rang": 343, "gammaregressor": [2, 233, 323, 326, 685, 1002, 1048, 1051, 1052, 1056], "gandenberg": 1046, "ganesh": [1042, 1054], "ganevgv": 1047, "gangesh": 1049, "gangwar": 1044, "ganiev": [1042, 1043, 1044], "ganssl": 1044, "gap": [43, 52, 151, 354, 375, 416, 475, 476, 482, 593, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 826, 917, 918, 919, 920, 1002, 1003, 1045, 1049, 1051], "garagecar": [145, 156], "garagefinish": 145, "garagetyp": 156, "garageyrblt": 107, "garbag": 1049, "garcia": 1050, "garc\u00eda": [1046, 1047, 1052], "gardin": 374, "gardner": [1045, 1046], "garg": [1047, 1048], "gargsya": 1047, "gari": [375, 1044], "garret": 1041, "garreta": [1039, 1040], "garrett": 1041, "garri": 377, "garriga": [279, 416, 834], "gasmi": 1051, "gasquez": 1044, "gate": [377, 1050], "gather": [326, 328, 388, 395, 412, 1016, 1030], "gatsbi": 1019, "gaug": 188, "gaull": 769, "gaurav": [1045, 1046, 1047, 1048, 1049, 1051], "gauravahlawat": [1045, 1046], "gaussian": [2, 8, 19, 28, 43, 44, 46, 48, 64, 66, 67, 70, 79, 80, 81, 88, 90, 94, 98, 109, 110, 111, 112, 113, 119, 122, 123, 124, 130, 136, 137, 144, 148, 152, 154, 163, 184, 195, 198, 200, 202, 205, 225, 226, 227, 228, 242, 246, 248, 260, 261, 284, 298, 303, 306, 308, 316, 317, 337, 340, 347, 348, 352, 372, 376, 382, 385, 394, 412, 414, 417, 418, 424, 456, 473, 474, 475, 476, 477, 478, 479, 480, 501, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 535, 537, 549, 554, 555, 558, 568, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 648, 649, 677, 682, 685, 708, 729, 746, 757, 781, 802, 803, 805, 819, 844, 845, 846, 847, 848, 849, 850, 854, 885, 889, 897, 901, 902, 903, 1000, 1002, 1003, 1004, 1012, 1027, 1028, 1030, 1031, 1032, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1051], "gaussian_filt": [53, 80, 81, 87], "gaussian_process": [2, 66, 67, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 394, 422, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 648, 1007, 1027, 1040, 1043, 1044], "gaussianhmm": 1037, "gaussianmixtur": [2, 79, 90, 259, 260, 261, 262, 263, 264, 418, 802, 1005, 1043, 1045, 1046, 1050, 1051, 1053, 1055], "gaussianmixturegaussianmixtur": 263, "gaussiannb": [2, 61, 62, 64, 67, 158, 275, 363, 410, 419, 441, 574, 844, 845, 846, 848, 870, 1000, 1007, 1008, 1041, 1042, 1043, 1045, 1050, 1053], "gaussiannois": 382, "gaussianprocessclassifi": [2, 66, 67, 173, 174, 175, 176, 180, 394, 422, 616, 624, 625, 627, 628, 1007, 1043, 1045, 1047, 1051], "gaussianprocessregressor": [2, 172, 177, 178, 179, 180, 181, 422, 615, 618, 619, 620, 621, 622, 626, 629, 630, 648, 1007, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaussianprocessregressorifittedgaussianprocessregressor": 177, "gaussianrandomproject": [2, 902, 1018, 1038, 1051, 1053, 1054], "gauthier": 1051, "gauz": 1045, "gave": [64, 410, 805, 808, 809, 819, 876], "gavin": [633, 996], "gaynor": 406, "ga\u00ebl": [395, 1030], "gb": [159, 419, 558, 638], "gbc": 363, "gbdt": [140, 189, 267, 322, 323, 328, 385, 419], "gbdt_appli": 140, "gbdt_applyfunctiontransform": 140, "gbdt_cst": 323, "gbdt_leaves_yield": 140, "gbdt_model": 140, "gbdt_no_cst": [153, 323], "gbdt_pipelin": 156, "gbdt_with_monotonic_cst": 153, "gbdt_with_monotonic_cst_df": 153, "gbgradientboostingregressor": 159, "gbm": [147, 419, 1040], "gbm_early_stop": 146, "gbm_full": 146, "gbp": 1030, "gbr": 148, "gbr_l": 148, "gbrt": [43, 52, 215, 419], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 367, "gc": 49, "gca": [47, 79, 95, 116, 123, 175, 220, 224, 226, 242, 255, 277, 301, 303, 314, 339, 341, 344, 345, 1013, 1034], "gcc": [378, 381, 386, 392], "gcf": [47, 1013], "gcv": [678, 680], "gcv_mode": [678, 1039], "gd": [51, 159], "gdb": [381, 383, 1029], "gdex1": 1047, "ge": [51, 997, 1008, 1049], "ge0": 1022, "gear": 1024, "geb": 57, "gebremichael": [1052, 1053], "gedeck": 1044, "geevarghes": 1052, "gefel": 1006, "gegr": 420, "gei": 1039, "geiger": [1054, 1055], "geist": 377, "gelavizh": 1048, "gelder": 1048, "gemm": 1055, "gen": 786, "gen_batch": [2, 389, 957], "gen_cov": 111, "gen_even_slic": [2, 215, 389, 956], "gender": [254, 882, 1016], "gender_femal": 882, "gender_mal": 882, "gene": [180, 374, 409, 455, 518, 598, 599, 856, 889], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 170, 173, 174, 175, 176, 177, 180, 183, 184, 187, 188, 189, 190, 191, 193, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 367, 368, 372, 373, 375, 377, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 406, 409, 410, 412, 416, 418, 420, 421, 422, 424, 428, 433, 435, 441, 444, 447, 450, 451, 453, 456, 458, 462, 463, 464, 466, 468, 469, 471, 473, 476, 478, 486, 487, 488, 492, 495, 497, 500, 501, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 543, 545, 546, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 619, 620, 623, 624, 625, 627, 628, 632, 633, 634, 635, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 690, 691, 694, 695, 696, 697, 698, 699, 700, 706, 709, 711, 722, 726, 728, 729, 742, 748, 762, 783, 786, 790, 798, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 842, 843, 849, 850, 852, 854, 855, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 897, 898, 899, 900, 901, 902, 909, 910, 911, 912, 914, 915, 918, 920, 921, 922, 923, 947, 948, 952, 953, 956, 957, 970, 974, 976, 979, 994, 995, 996, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1021, 1022, 1027, 1028, 1029, 1030, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "generalis": [793, 1006, 1026], "generaliz": [347, 419], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 151, "generate_onli": [947, 1047], "generate_synthetic_data": 53, "generickernelmixin": [180, 1047], "genericunivariateselect": [2, 421, 600, 601, 603, 604, 605, 607, 1051, 1053, 1054], "generos": 380, "genesi": [1051, 1053], "genet": 1025, "genoa": 377, "genom": [58, 518, 1025], "genotyp": 374, "gensim": 1025, "gentil": [377, 1049], "gentli": 417, "genvalen": [1049, 1050, 1051, 1052, 1053], "geodes": [235, 693, 1003], "geoff": [840, 1007], "geoffrei": [866, 867, 1010, 1048, 1049, 1050, 1051, 1053], "geograph": [43, 50, 306, 375, 503], "geometr": [123, 412, 693, 709, 736, 762, 1003, 1045], "geometri": [74, 412, 1003, 1009], "geomspac": 328, "georg": [45, 375, 412, 1043, 1049, 1050, 1051, 1052], "georgi": [1045, 1048], "georgiamaydai": 1052, "geospati": [306, 418], "geovan": [1050, 1051], "geq": [246, 410, 417, 419, 1002, 1006, 1016, 1020, 1021], "ger": 420, "gerhard": [45, 375], "german_credit": 267, "germer": [1052, 1053], "geroldcsend": 1050, "geron": [1045, 1050, 1051], "gerstein": 518, "gertrud": 1044, "gertz": 454, "gervai": [1039, 1040], "gesa": 1049, "gesdd": 953, "gesvd": 953, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 85, 89, 122, 126, 148, 151, 158, 167, 170, 172, 177, 178, 183, 188, 189, 190, 191, 208, 217, 230, 233, 235, 249, 250, 271, 274, 275, 277, 281, 284, 286, 290, 293, 298, 306, 314, 322, 329, 333, 336, 340, 343, 345, 348, 352, 354, 356, 358, 368, 373, 374, 375, 378, 380, 381, 382, 383, 385, 386, 387, 394, 398, 406, 408, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 426, 427, 428, 433, 435, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 704, 726, 727, 728, 729, 731, 737, 738, 747, 761, 768, 769, 774, 790, 793, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 942, 944, 945, 946, 952, 953, 958, 964, 995, 1001, 1002, 1003, 1005, 1006, 1016, 1019, 1020, 1021, 1022, 1026, 1034, 1037, 1040, 1043, 1045, 1048, 1050, 1051, 1054], "get_adjacency_matrix": 55, "get_arrai": [849, 850], "get_bin_se": 452, "get_cmap": [62, 64, 348], "get_color": 46, "get_config": [2, 472, 786, 907, 972, 1052], "get_covari": [537, 539, 546], "get_data": [513, 514], "get_data_hom": [2, 47], "get_depth": [917, 918, 919, 920, 1046], "get_feature_nam": [325, 1045, 1046, 1048, 1049, 1050], "get_feature_names_out": [2, 54, 57, 188, 190, 325, 354, 355, 356, 375, 382, 394, 413, 420, 428, 433, 436, 446, 447, 449, 451, 453, 468, 471, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 1016, 1050, 1051, 1052, 1053, 1054, 1055], "get_figur": 135, "get_full_scor": 184, "get_height": [47, 146], "get_impute_it": 184, "get_impute_knn_scor": 184, "get_impute_mean": 184, "get_impute_zero_scor": 184, "get_indic": [57, 427, 455, 457], "get_initial_mean": 261, "get_legend_handles_label": [151, 248, 275, 280], "get_lin": 309, "get_metadata_rout": [249, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 961, 962, 963, 964, 965, 1006, 1054], "get_metr": 704, "get_minibatch": 47, "get_n_cal": [849, 850], "get_n_leav": [917, 918, 919, 920, 1046], "get_n_split": [394, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826], "get_nam": 315, "get_output_feature_nam": 1051, "get_param": [274, 383, 394, 422, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 1047, 1048, 1049, 1051, 1052], "get_precis": [473, 474, 475, 476, 477, 478, 479, 480, 537, 539, 546], "get_redirect": 55, "get_routing_for_object": [2, 249, 962], "get_scor": [2, 329, 394, 738, 1044, 1053], "get_scorer_nam": [2, 411, 737, 1006, 1051, 1054], "get_scores_for_imput": 184, "get_shap": [57, 427, 455, 457], "get_stop_word": [593, 594, 596], "get_submatrix": [427, 455, 457], "get_subplotspec": 387, "get_support": [166, 170, 324, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1039], "get_tag": 2, "get_tree_stat": [849, 850], "get_untrusted_typ": 406, "get_width": [47, 146], "get_x": [47, 146], "get_xaxi": [258, 303, 313], "get_xlim": [111, 210, 220, 313], "get_xticklabel": 284, "get_yaxi": [303, 313], "get_ybound": 86, "get_ylim": [210, 286, 313, 314], "getattr": [43, 47, 267, 313, 382, 394, 1053], "getgaurav2": 1047, "getmoredataget": 400, "gettempdir": 1009, "getter": [473, 474, 475, 476, 477, 478, 479, 480, 598, 599, 602], "geurt": [419, 560, 561, 562, 563, 570, 571, 919, 920], "gewili": [1052, 1053], "gh": 380, "ghahramani": 904, "gharibi": 1047, "ghg": 1043, "ghislain": 1049, "gholdman1": 1048, "ghorai": 1045, "ghosh": [0, 402, 412, 1037, 1038, 1054, 1055], "gia": 1048, "giancarlo": 1051, "gianr": 1052, "gibb": [865, 1011, 1025], "gideon": 1047, "giessel": 1043, "gigant": [1045, 1047, 1052, 1053], "gijsber": 1051, "gil": [367, 368, 381, 1040, 1045, 1046, 1049, 1050, 1054], "gilad": 1030, "gilberto": 1045, "gilbertson": [1051, 1052], "gilch": 1044, "gile": [1040, 1041], "gill": [0, 402, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "gilliam": 1044, "gilmor": 1041, "gim": 1049, "gini": [64, 191, 215, 233, 254, 285, 324, 558, 559, 562, 563, 564, 565, 569, 570, 571, 793, 917, 918, 919, 920, 995, 1014, 1022, 1045, 1046, 1053, 1054], "gionanidi": 1051, "giorgio": [1042, 1043, 1044, 1056], "giorgiop": 1042, "giotto": 1025, "giovanni": [1043, 1045], "gist": [380, 388, 1029], "git": [378, 382, 384, 386, 388, 1029, 1033, 1037, 1053, 1055], "github": [0, 51, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 293, 311, 319, 323, 324, 326, 327, 329, 334, 362, 378, 379, 383, 384, 385, 386, 388, 392, 394, 395, 406, 408, 697, 1024, 1025, 1029, 1047], "githubusercont": 51, "gitter": [1044, 1045], "giudic": 1049, "giusepp": [1045, 1046], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 82, 93, 95, 97, 102, 103, 107, 123, 147, 172, 177, 181, 183, 188, 189, 204, 206, 212, 215, 216, 217, 242, 264, 267, 270, 275, 282, 295, 299, 302, 311, 325, 326, 330, 336, 367, 369, 375, 377, 379, 380, 382, 386, 388, 392, 393, 394, 395, 400, 406, 409, 410, 412, 413, 414, 417, 419, 420, 422, 424, 437, 450, 451, 453, 455, 463, 476, 501, 504, 508, 538, 543, 554, 555, 556, 557, 562, 563, 569, 570, 571, 598, 599, 602, 612, 613, 643, 652, 666, 670, 681, 725, 735, 741, 744, 799, 805, 808, 809, 819, 830, 831, 832, 834, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 886, 887, 889, 890, 898, 1002, 1006, 1009, 1010, 1011, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1030, 1037, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 82, 91, 93, 109, 115, 122, 126, 141, 151, 152, 154, 156, 172, 179, 188, 189, 200, 215, 216, 219, 233, 236, 242, 246, 247, 249, 251, 252, 253, 267, 269, 273, 274, 275, 276, 282, 287, 296, 299, 300, 301, 315, 319, 325, 330, 354, 355, 356, 361, 362, 367, 369, 375, 379, 380, 386, 388, 389, 392, 394, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 429, 438, 439, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 460, 462, 463, 464, 465, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 488, 491, 501, 506, 508, 510, 528, 538, 539, 541, 543, 544, 545, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 598, 599, 606, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 636, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 692, 693, 695, 696, 702, 703, 704, 705, 706, 707, 709, 710, 711, 717, 719, 722, 723, 725, 729, 731, 732, 739, 741, 742, 745, 757, 760, 761, 763, 764, 769, 779, 783, 786, 787, 789, 792, 793, 794, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 817, 819, 823, 827, 828, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 895, 896, 898, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 928, 939, 940, 941, 961, 962, 964, 989, 993, 995, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "gkevinyen5418": 1045, "gkf": 416, "gkiasta": 1050, "gl": [170, 377], "glad": 380, "glanc": [290, 379], "glaser": [1045, 1046], "glass": 375, "glasso": [414, 482], "glaxosmithklin": 51, "gleb": [1050, 1052, 1053, 1054, 1056], "glemaitr": [1046, 1047, 1049], "glen": 1050, "glenn": 1043, "glennfrutiz": 1051, "glibc": 388, "glm": [215, 233, 323, 653, 674, 685, 1002, 1037, 1048], "glm_freq": 233, "glm_pure_premium": 233, "glm_sev": 233, "glmnet": [651, 652, 1037], "glob": 47, "global": [2, 3, 47, 49, 77, 90, 121, 215, 235, 236, 256, 282, 310, 323, 363, 367, 368, 386, 392, 394, 412, 422, 446, 456, 466, 472, 595, 631, 637, 693, 696, 697, 700, 712, 734, 735, 743, 788, 789, 792, 793, 823, 890, 905, 907, 975, 995, 1003, 1006, 1012, 1016, 1022, 1030, 1045, 1052], "global_dtyp": 368, "global_random_se": 368, "globular": [95, 412], "glorot": [866, 867], "glossari": [2, 363, 380, 382, 386, 423, 424, 441, 444, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 468, 471, 473, 476, 478, 492, 495, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 599, 607, 612, 613, 615, 616, 632, 637, 639, 644, 645, 646, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 779, 783, 786, 798, 802, 803, 805, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 851, 852, 854, 855, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 871, 874, 886, 890, 898, 901, 902, 904, 905, 909, 910, 911, 914, 917, 918, 919, 920, 952, 953, 976, 979, 995, 996, 1002, 1045], "glu": [170, 377], "glushchenkov": 1051, "gl\u00f2ria": [1050, 1052], "gm": 803, "gmil": 375, "gmm": [79, 91, 92, 185, 257, 259, 262, 263, 264, 509, 517, 803, 824, 1005, 1027, 1037, 1038, 1041, 1042, 1043], "gmm_": 1038, "gmm_bic_scor": 263, "gmmgmm": 400, "gmmhmm": [1037, 1038], "gnb": [61, 62, 64, 158, 419, 574, 1008], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 378, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 375, 380, 384, 385, 389, 395, 398, 413, 417, 419, 421, 447, 566, 567, 725, 888, 930, 956, 957, 1016, 1022, 1026, 1048], "goadrich": 1006, "goal": [49, 55, 58, 64, 85, 90, 116, 151, 183, 189, 193, 215, 230, 233, 251, 252, 267, 270, 271, 354, 368, 369, 375, 385, 386, 394, 395, 397, 403, 417, 421, 547, 553, 595, 598, 744, 1006, 1009, 1011, 1012, 1020, 1021, 1022, 1030, 1045], "god": [57, 354, 355], "godbol": 788, "goe": [43, 72, 140, 188, 362, 380, 419, 475, 476, 482, 562, 563, 569, 570, 571, 917, 918, 919, 920, 1016, 1020], "goetz": [1044, 1045], "goh": 1054, "gohlk": 1042, "goix": [0, 1041, 1043, 1044, 1045, 1046], "gold": [69, 209, 216, 218, 221, 225, 229, 232, 259, 264, 280, 299, 342, 386], "goldbaum": 1055, "goldberg": [858, 1009], "goldfarb": 1002, "goldman": 51, "goldstein": [189, 1013], "goldszmidt": 1018, "gollonet": [0, 402], "goltermann": 1049, "golub": [539, 847, 889], "golubin": 1044, "gome": [1050, 1051, 1055], "gomez": [1045, 1052, 1054], "gommer": [1040, 1043, 1044, 1052, 1053, 1055], "goncalo": [1044, 1045], "gone": [1037, 1038], "gonthier": 1048, "goo": [170, 377], "good": [43, 48, 58, 62, 64, 75, 79, 80, 82, 85, 86, 88, 91, 106, 112, 116, 130, 141, 144, 147, 148, 151, 173, 177, 183, 188, 200, 204, 215, 216, 221, 230, 240, 242, 246, 249, 252, 259, 261, 266, 267, 273, 279, 286, 311, 318, 319, 324, 330, 332, 337, 343, 354, 355, 363, 367, 368, 369, 379, 381, 382, 383, 386, 388, 392, 394, 409, 410, 412, 414, 416, 417, 419, 420, 421, 422, 441, 443, 448, 539, 564, 566, 567, 595, 635, 645, 652, 653, 661, 663, 664, 666, 674, 685, 695, 699, 728, 736, 747, 769, 834, 903, 928, 953, 995, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1020, 1021, 1022, 1026, 1030, 1043], "goodby": 380, "goodman": [1037, 1042], "googl": [0, 55, 392, 412, 446, 953, 1024, 1037], "gool": 1006, "gorb": 1049, "gordon": [57, 1043, 1047, 1049, 1051], "gorelli": [1045, 1046, 1050, 1052, 1055], "gorgolewski": [0, 402, 1037, 1040], "gorilla": 354, "gorinevski": 1002, "gorodkin": 748, "gorro\u00f1o": [1048, 1050, 1051], "got": [178, 249, 280, 363, 385, 556, 654, 670, 1050, 1052, 1054, 1056], "gotten": [1002, 1016], "gou": 412, "gouillart": 1037, "goupil": [0, 364], "gov": [55, 377], "govern": [188, 363, 367, 380, 394, 1030], "govin": 1043, "go\u0144da": 1052, "gp": [175, 180, 422, 615, 616, 627, 1043], "gp_fix": 173, "gp_opt": 173, "gpapadok": [1047, 1051], "gpassino": 1041, "gpc": [2, 66, 144, 154, 163, 171, 177, 178, 180, 185, 225, 226, 227, 228, 248, 262, 308, 316, 337, 348, 352, 509, 615, 616, 618, 619, 624, 625, 627, 628, 708, 746, 1027, 1028, 1032, 1047], "gpc_rbf_anisotrop": 174, "gpc_rbf_isotrop": 174, "gperftool": 383, "gplearn": 1025, "gpr": [2, 171, 172, 173, 179, 181, 185, 501, 615, 616, 618, 619, 620, 621, 626, 627, 628, 629, 630, 1027, 1028, 1032, 1047], "gpr_model": 181, "gprof": 383, "gpu": [327, 330, 408, 1010, 1026, 1054], "gr": 902, "grab": 380, "gracefulli": [1040, 1041], "grad": [386, 1030], "gradd": 386, "grade": 1006, "gradi": 1047, "gradient": [2, 14, 46, 52, 80, 99, 103, 134, 135, 136, 139, 140, 142, 143, 153, 156, 159, 177, 178, 179, 185, 191, 194, 196, 202, 217, 238, 242, 247, 272, 274, 299, 309, 313, 317, 319, 326, 329, 342, 394, 411, 412, 422, 456, 466, 470, 471, 492, 494, 501, 506, 508, 525, 558, 559, 564, 565, 566, 567, 569, 570, 591, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 636, 637, 639, 640, 644, 653, 654, 663, 664, 673, 674, 677, 679, 681, 682, 683, 685, 692, 697, 699, 700, 746, 747, 753, 755, 795, 805, 808, 809, 810, 826, 832, 835, 865, 866, 867, 870, 882, 883, 913, 979, 1003, 1006, 1009, 1010, 1011, 1012, 1025, 1027, 1028, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1052, 1054], "gradient_boost": [140, 1039, 1040, 1046], "gradientboost": 1042, "gradientboostingclassifi": [2, 140, 147, 150, 315, 363, 392, 558, 566, 637, 638, 1007, 1013, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "gradientboostingclassifier__learning_r": 315, "gradientboostingregressor": [2, 46, 146, 148, 149, 156, 159, 367, 385, 392, 559, 567, 637, 638, 1002, 1006, 1007, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "gradientboostingregressorgradientboostingregressor": 159, "gradual": [219, 866, 867, 947, 948, 1020], "graduat": 377, "graham": [1042, 1043], "grai": [45, 53, 80, 81, 83, 84, 86, 121, 124, 150, 170, 213, 215, 233, 246, 250, 251, 280, 310, 377, 417, 498, 499, 507, 526, 1048], "grain": [43, 67, 72, 247, 264, 315, 386, 420, 450, 1026], "gram": [2, 185, 194, 249, 382, 417, 420, 493, 529, 553, 593, 594, 595, 596, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 686, 687, 688, 689, 690, 691, 772, 995, 1002, 1016, 1021, 1027, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1050, 1051], "gram_test": 1021, "gram_train": 1021, "gramfort": [0, 121, 395, 401, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "grammar": 380, "grant": [0, 252, 267, 380], "granular": 1056, "grape": 413, "graph": [2, 55, 62, 74, 79, 80, 99, 100, 180, 235, 270, 293, 295, 335, 367, 380, 383, 394, 409, 414, 423, 445, 448, 449, 456, 457, 461, 466, 467, 475, 476, 482, 516, 590, 591, 693, 696, 697, 700, 787, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 864, 905, 959, 1003, 1006, 1009, 1011, 1019, 1022, 1025, 1030, 1037, 1044, 1045, 1047, 1050, 1052], "graph_laplacian": 1044, "graph_lasso": [482, 1045], "graph_model": 295, "graph_shortest_path": [389, 1050], "graphic": [8, 57, 112, 189, 336, 354, 355, 356, 375, 386, 412, 414, 417, 797, 798, 802, 839, 921, 1006, 1007, 1013, 1025], "graphical_lasso": [2, 389, 475, 476, 1045, 1053], "graphicallasso": [2, 113, 414, 473, 474, 476, 477, 478, 479, 480, 482, 1045, 1053], "graphicallassocv": [2, 51, 113, 403, 414, 475, 477, 478, 479, 480, 482, 1045, 1049, 1051, 1053, 1055], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [475, 1042, 1045], "graphlassocv": [476, 1039, 1045], "graphviz": [921, 1022], "grasp": [287, 1021, 1026], "grassberg": [612, 613], "grate": 1030, "graviton": 388, "gray_r": [68, 124, 175, 236, 311, 332, 333], "grayscal": 68, "greasemonkei": 388, "great": [88, 187, 188, 213, 363, 380, 392, 417, 769, 1026, 1030, 1037, 1044], "greater": [62, 119, 135, 137, 188, 232, 247, 252, 261, 267, 279, 292, 299, 300, 358, 367, 385, 394, 410, 411, 412, 415, 419, 445, 449, 450, 453, 456, 467, 476, 541, 546, 562, 563, 564, 565, 566, 567, 569, 570, 571, 598, 599, 602, 615, 616, 633, 645, 647, 669, 671, 672, 676, 681, 682, 683, 697, 714, 717, 725, 740, 741, 744, 747, 793, 800, 802, 803, 839, 851, 852, 859, 860, 866, 867, 872, 887, 899, 903, 906, 909, 910, 917, 918, 919, 920, 953, 974, 995, 1001, 1002, 1003, 1006, 1007, 1012, 1016, 1021, 1022, 1040, 1045, 1048, 1050, 1051, 1052, 1054], "greater_is_bett": [148, 330, 747, 1006], "greatest": [88, 398, 412, 876, 1045], "greatli": [213, 247, 327, 380, 388, 456, 1009, 1022, 1043, 1051], "greedi": [170, 419, 421, 451, 453, 464, 564, 565, 607, 1002, 1022], "greedili": [116, 170, 412, 416, 421, 464], "greek": [51, 55, 59, 71, 86, 99, 124, 185, 412, 466, 1027], "green": [63, 112, 119, 138, 153, 158, 172, 193, 240, 309, 314, 318, 323, 329, 394, 1007, 1045, 1046, 1048, 1049], "greenhal": 1045, "greg": [1030, 1043, 1044, 1046, 1047], "gregori": [1043, 1047, 1048, 1049, 1050], "gregorystrubel": 1050, "gregov": 1045, "grei": [44, 283, 313, 350, 375], "grep": 380, "greyscal": 311, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 87, 94, 103, 104, 105, 106, 109, 113, 144, 154, 165, 167, 169, 176, 185, 187, 188, 189, 204, 233, 240, 247, 248, 249, 253, 258, 263, 265, 267, 270, 272, 274, 277, 278, 280, 285, 292, 295, 297, 298, 306, 311, 315, 316, 318, 340, 342, 343, 349, 354, 375, 382, 387, 392, 394, 407, 413, 416, 418, 419, 420, 452, 465, 468, 476, 503, 507, 520, 527, 636, 637, 638, 652, 655, 658, 659, 661, 664, 666, 668, 681, 718, 733, 747, 790, 793, 805, 808, 809, 816, 819, 821, 835, 836, 869, 914, 999, 1001, 1006, 1009, 1013, 1026, 1027, 1032, 1037, 1040, 1041, 1042, 1044, 1045, 1051, 1053, 1054, 1055, 1056], "grid_encod": 316, "grid_model": 295, "grid_posit": [62, 64], "grid_resolut": [189, 324, 341, 636, 637, 638], "grid_scores_": [1043, 1049, 1050], "grid_search": [106, 141, 254, 263, 271, 281, 329, 413, 1039, 1040, 1041, 1042, 1043, 1044], "grid_siz": [50, 94, 306, 375, 503], "grid_to_graph": [2, 81, 84, 87, 412, 420, 1050], "grid_tograph": 1040, "grid_valu": [189, 638, 1013, 1053], "gridsearch": [87, 109, 284], "gridsearchcv": [2, 43, 87, 101, 103, 105, 106, 109, 128, 141, 185, 248, 254, 263, 265, 267, 271, 272, 273, 274, 278, 281, 284, 290, 295, 297, 311, 315, 324, 328, 329, 343, 347, 363, 368, 382, 392, 394, 403, 408, 413, 416, 419, 422, 426, 507, 525, 545, 546, 580, 604, 612, 658, 708, 747, 816, 819, 869, 879, 909, 917, 995, 1002, 1006, 1010, 1020, 1021, 1026, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056], "gridsearchcvifittedgridsearchcv": [104, 263, 267, 271, 273], "gridsearchcvinot": 254, "gridsiz": 246, "gridspec": [62, 64, 98, 258, 387], "gridspecfromsubplotspec": 387, "griffith": [1045, 1046], "grigorev": 1042, "grigorio": 739, "grime": [694, 698, 1003], "grinsztajn": 1054, "grisel": [0, 395, 401, 1024, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "griva": [1051, 1052], "grlivarea": 145, "grobler": [0, 402, 1037, 1038, 1039, 1040], "groceryheist": 1050, "groenen": [695, 699, 1003], "grok": 491, "groothui": [632, 996], "grother": 377, "ground": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 124, 152, 180, 200, 209, 215, 216, 252, 264, 276, 355, 394, 412, 708, 709, 710, 713, 717, 718, 719, 720, 722, 723, 726, 728, 729, 731, 733, 734, 735, 739, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 788, 789, 790, 791, 792, 795, 796, 800, 801, 1006, 1019, 1045], "ground_truth": [88, 300], "group": [0, 2, 51, 72, 75, 88, 91, 93, 158, 189, 191, 215, 236, 249, 264, 268, 319, 329, 334, 355, 362, 375, 385, 394, 395, 403, 412, 418, 419, 420, 437, 450, 500, 593, 594, 596, 599, 723, 793, 805, 806, 807, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 833, 834, 836, 882, 883, 919, 920, 947, 948, 1002, 1003, 1005, 1006, 1007, 1016, 1022, 1023, 1025, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "group_1": 882, "group_2": 882, "group_3": 882, "group_by_dynam": 177, "group_df": 223, "group_kfold": 806, "group_prior": 268, "groupbi": [43, 151, 189, 223, 233], "groupkfold": [2, 268, 278, 329, 403, 416, 599, 810, 811, 812, 813, 814, 823, 828, 830, 831, 832, 833, 836, 1043, 1050], "groupshufflesplit": [2, 268, 416, 1043], "grow": [43, 52, 74, 193, 200, 295, 350, 356, 367, 392, 408, 414, 419, 420, 562, 563, 564, 565, 569, 570, 571, 815, 849, 850, 917, 918, 919, 920, 995, 1006, 1009, 1022, 1030, 1040, 1041], "grower": [151, 419, 566, 567], "grown": [377, 419, 558, 559, 560, 561, 562, 563, 569, 570, 917, 918, 919, 920, 1022], "growth": [1006, 1042, 1043], "grumman": 51, "grusak": 1047, "gryllo": [1042, 1045], "gryze": [1039, 1042], "grzegorz": [1044, 1047], "gs_time": 284, "gsh": 284, "gsh_time": 284, "gsiisg": 1052, "gsk": 51, "gss": [416, 807], "gt": [68, 103, 104, 140, 156, 188, 263, 271, 285, 380, 384, 400], "gu": [1048, 1049, 1051], "guan": 1047, "guangguo": 1043, "guarante": [46, 47, 64, 111, 112, 151, 188, 223, 246, 292, 293, 313, 355, 363, 369, 374, 388, 389, 406, 412, 416, 417, 420, 450, 541, 650, 663, 664, 673, 677, 679, 681, 683, 692, 699, 807, 822, 825, 849, 850, 887, 889, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 916, 935, 936, 998, 1002, 1003, 1005, 1009, 1014, 1018, 1022, 1047, 1055], "gubri": [1045, 1046], "gudmalwar": 1049, "gued": 1055, "guerin": [1043, 1044], "guess": [55, 135, 144, 416, 419, 420, 537, 543, 545, 546, 552, 793, 1006, 1020], "guestrin": 419, "guha": 1052, "gui": [1038, 1048], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 88, 101, 121, 141, 181, 185, 188, 189, 202, 235, 280, 299, 300, 303, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 378, 379, 380, 385, 386, 387, 388, 393, 394, 395, 400, 403, 413, 419, 423, 424, 425, 426, 429, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 949, 1006, 1007, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1047, 1054, 1055, 1056], "guidanc": [392, 422], "guidelin": [2, 25, 379, 383, 385, 386, 388, 412, 419], "guiel": 499, "guilherm": 1040, "guillaum": [0, 401, 1030, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "guillem": [1046, 1047, 1052], "guillemot": [0, 1043, 1044], "guillermo": 1051, "guiniol": 1044, "guitar": 1052, "guitton": 1049, "guiweb": 1050, "gulati": [1042, 1043, 1044], "gun": [57, 375], "gunduz": 1055, "gunesbayir": [1052, 1053], "gunnar": [540, 953], "guo": 1050, "guoci": 1044, "gupta": [903, 1018, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "gustafson": [1052, 1053], "gustav": 1043, "gustavo": [1045, 1046, 1051], "gutierrez": 1047, "guttman": 699, "guyon": [520, 598, 599, 1006], "guyon2015": 1006, "gwulf": [1041, 1042], "gyeongja": 1055, "gz": [47, 384, 398, 513, 514], "gzip": 1037, "g\u00e9ron": 1045, "g\u00f3rski": [1048, 1049], "g\u00f6khan": [44, 417, 540], "g\u00f6n\u00fcl": 1055, "g\u00fcnther": [1050, 1054], "h": [44, 45, 52, 91, 121, 122, 135, 136, 154, 170, 174, 188, 260, 298, 301, 308, 315, 326, 337, 339, 356, 377, 386, 410, 412, 414, 417, 418, 419, 420, 423, 448, 524, 537, 540, 543, 545, 552, 558, 572, 573, 587, 595, 612, 613, 694, 698, 709, 713, 762, 844, 848, 849, 850, 855, 865, 880, 889, 998, 1000, 1002, 1003, 1004, 1006, 1008, 1010, 1011, 1020, 1022, 1043, 1048, 1052, 1053, 1054], "h1998": 419, "h2009": 1013, "h4dr1en": 1047, "h5py": 374, "h_": 1002, "h_i": [417, 1011], "h_init": 386, "h_j": 1011, "h_l": 1000, "h_m": 419, "h_pad": [121, 144, 359], "h_samples_": 865, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 83, 88, 89, 90, 93, 106, 111, 112, 116, 121, 133, 140, 144, 146, 148, 149, 151, 153, 158, 168, 169, 172, 177, 178, 179, 184, 188, 189, 190, 191, 193, 208, 212, 215, 216, 217, 221, 232, 233, 235, 242, 246, 248, 249, 252, 253, 256, 258, 259, 261, 263, 264, 267, 268, 271, 272, 273, 276, 277, 279, 284, 285, 292, 296, 299, 300, 301, 303, 310, 313, 314, 316, 318, 322, 323, 324, 325, 326, 328, 330, 332, 335, 343, 347, 348, 349, 354, 362, 363, 367, 368, 369, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 395, 398, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 437, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 498, 499, 502, 503, 513, 514, 521, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 624, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 700, 716, 718, 725, 727, 746, 768, 779, 783, 784, 785, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 819, 823, 826, 827, 828, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 869, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 926, 934, 935, 936, 942, 955, 974, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1026, 1029, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "haan": 1046, "haar": [53, 1054], "haas": 1047, "habchi": 1047, "haberland": [1052, 1053], "haberth\u00fcr": 1044, "hack": [47, 49], "had": [43, 48, 81, 148, 151, 177, 249, 313, 319, 325, 363, 380, 381, 388, 403, 420, 423, 448, 996, 1006, 1030, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1052], "hadamard": 382, "haddad": 1044, "hadrien": [1044, 1047], "hadshirt": 1047, "haenel": 1040, "haesun": [1049, 1052, 1053], "hafner": 1050, "hagai": 802, "hagberg": 55, "hahn": [1044, 1045], "haiat": 1049, "haidar": [1050, 1051], "hail": 319, "hailei": [1047, 1048], "hain": 375, "haitz": [1048, 1050, 1051], "hakaa1": [1044, 1045], "hal": [552, 663, 763, 764, 1004], "halchenko": [0, 401, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1053], "hale": [1039, 1051], "half": [2, 43, 61, 124, 151, 247, 251, 271, 273, 285, 375, 376, 417, 419, 467, 527, 567, 598, 602, 607, 775, 868, 876, 918, 1006, 1009, 1022], "half_cal": 602, "half_selector": 602, "halfbath": 145, "halford": [1045, 1052, 1053], "halkidi": 412, "halko": [417, 540, 546, 549, 952, 953], "hall": [1002, 1044, 1048], "hallock": 1043, "halpert": [697, 1003], "halv": [2, 165, 185, 265, 277, 281, 349, 407, 520, 569, 584, 805, 808, 809, 914, 1027, 1032, 1049], "halvic": 1049, "halvinggridsearchcv": [2, 284, 285, 324, 403, 408, 584, 809, 995, 1049, 1051, 1052, 1054, 1055, 1056], "halvingrandomsearchcv": [2, 148, 285, 324, 403, 408, 584, 808, 995, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 285, "halwai": 1043, "ham": [2, 46, 454, 461, 586, 704, 708, 714, 739, 746, 783, 784, 785, 801, 1009], "hamada": 1049, "hamdi": [1054, 1055], "hammerbach": 1041, "hamming_loss": [2, 46, 708, 801, 1006, 1039, 1043, 1046], "hammingdist": 704, "hammoudeh": 1046, "hamoumi": 1050, "hampu": 1041, "hamzeh": [0, 1040, 1041], "han": [412, 446, 454, 461, 1037, 1045, 1046, 1050], "hancock": 1047, "hand": [44, 65, 84, 86, 116, 123, 124, 126, 141, 148, 165, 168, 177, 185, 188, 189, 208, 219, 222, 239, 245, 246, 248, 249, 252, 266, 267, 270, 275, 282, 287, 297, 332, 333, 343, 367, 374, 375, 377, 380, 382, 386, 388, 393, 417, 418, 419, 421, 429, 435, 507, 648, 702, 718, 793, 835, 890, 914, 995, 999, 1002, 1006, 1008, 1010, 1014, 1019, 1021, 1027, 1030], "handbook": [725, 745, 1006], "handi": [82, 103, 355, 356, 381, 1053], "handk": 1053, "handl": [0, 2, 43, 48, 103, 141, 145, 149, 151, 152, 156, 193, 200, 248, 249, 267, 275, 280, 282, 290, 292, 293, 300, 319, 322, 329, 354, 356, 362, 367, 372, 374, 380, 381, 382, 389, 392, 394, 419, 420, 422, 501, 549, 582, 586, 587, 593, 594, 596, 615, 640, 651, 652, 657, 663, 664, 665, 666, 667, 673, 680, 681, 683, 686, 725, 793, 873, 882, 883, 909, 910, 914, 921, 925, 954, 962, 965, 1003, 1006, 1007, 1008, 1009, 1012, 1014, 1021, 1022, 1025, 1026, 1030, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 103, 140, 145, 156, 189, 190, 244, 252, 254, 256, 319, 323, 326, 882, 883, 1016, 1041, 1045, 1049, 1050, 1056], "handler": 1048, "handler_map": 300, "handlerpathcollect": 300, "handletextpad": 359, "handpick": 242, "handprint": 377, "handwritten": [51, 71, 80, 85, 90, 92, 94, 140, 168, 185, 234, 235, 237, 239, 246, 261, 271, 303, 310, 311, 332, 333, 355, 373, 412, 419, 451, 507, 546, 549, 554, 571, 693, 694, 695, 696, 697, 709, 710, 722, 742, 798, 800, 858, 870, 879, 889, 902, 1003, 1009, 1027, 1032], "hang": [380, 1047, 1048], "hank": 1040, "hanmin": [0, 401, 1044, 1045, 1046, 1047, 1048, 1056], "hann": 1037, "hanna": [1041, 1042, 1048], "hannah": [1047, 1049, 1051], "hannel": [1045, 1046], "hansen": 1045, "hansin": [1051, 1052], "hanu\u0161": 1054, "hanxiang": [684, 1002], "hao": [1048, 1049, 1051, 1052], "haoi": 1054, "haoran": 1045, "haoyin": [1048, 1050, 1051], "happen": [2, 44, 64, 140, 202, 267, 313, 319, 355, 363, 367, 368, 378, 379, 380, 384, 385, 386, 392, 394, 395, 398, 406, 412, 414, 416, 419, 441, 520, 577, 663, 790, 887, 889, 909, 1002, 1006, 1007, 1021, 1026, 1045, 1049, 1050, 1052, 1053, 1054, 1055], "happi": [188, 267, 354, 392, 395, 823, 824], "haqu": [1039, 1040, 1041], "harabasz": [2, 715], "harabaz": 1043, "hard": [48, 215, 242, 246, 273, 275, 369, 379, 392, 394, 411, 412, 417, 420, 539, 546, 574, 681, 911, 912, 913, 914, 915, 1002, 1019, 1021, 1022, 1026, 1046, 1047], "hardcod": [444, 458, 1045], "harder": [282, 283, 317, 375, 379, 382, 388, 392, 412, 520, 566, 567], "hardest": 400, "hardin": 112, "hardli": [88, 612, 613], "hardwar": [57, 336, 356, 367, 368, 375, 378, 392, 398, 406, 408, 1025, 1051, 1052], "hare": 1002, "harfouch": 1053, "harikrishnan": 1039, "harizo": [1043, 1044], "harm": [354, 382, 420, 800], "harmanan": [1054, 1055], "harmon": [43, 72, 355, 412, 540, 546, 734, 735, 741, 788, 800, 1006], "haroldfox": [1045, 1046], "harper": 1044, "harri": [1041, 1043, 1049, 1050], "harsanyi": 1053, "harsh": [429, 441, 473, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 615, 663, 671, 673, 679, 680, 681, 804, 827, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 856, 859, 866, 904, 905, 909, 911, 914, 917, 919, 1047, 1049, 1052], "harshit5674": 1052, "hart": [377, 1000, 1045], "hartong": 1048, "harutaka": 1050, "harvest": 319, "harwar": 392, "has_fit_paramet": [2, 389], "hasan": 1052, "hasattr": [79, 89, 95, 113, 133, 144, 233, 246, 308, 315, 354, 394, 427, 431, 437, 966, 1047], "haseeb": [1050, 1051], "hash": [2, 47, 52, 134, 185, 355, 356, 367, 369, 372, 380, 383, 392, 419, 519, 549, 562, 571, 586, 587, 594, 645, 844, 970, 998, 1027, 1032, 1038, 1041, 1044], "hashabl": [394, 877, 880, 1017], "hashcode55": 1043, "hasher": [154, 356, 420], "hashingvector": [2, 47, 356, 369, 420, 493, 593, 595, 596, 1038, 1044, 1045, 1046, 1047, 1050], "hashlib": 47, "hasil": 1041, "hasn": 403, "hassaan": [1045, 1046], "hassan": 1050, "hassen": 1037, "hassoun": 1052, "hasti": [2, 135, 138, 139, 150, 170, 202, 272, 377, 416, 419, 524, 525, 558, 564, 565, 633, 661, 726, 728, 729, 839, 856, 902, 917, 918, 996, 1000, 1002, 1007, 1013, 1018, 1020, 1022], "hat": [112, 130, 269, 273, 298, 325, 378, 410, 414, 418, 419, 997, 1002, 1003, 1006, 1008, 1010], "hathidara": 1049, "hatwar": [1045, 1046], "hauck": 1043, "hausamann": [1045, 1046], "haussler": 180, "hav": 400, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 80, 81, 83, 86, 88, 90, 93, 95, 97, 98, 102, 103, 109, 111, 116, 119, 126, 127, 135, 142, 144, 145, 146, 148, 151, 166, 167, 170, 172, 173, 177, 178, 179, 184, 187, 188, 189, 190, 191, 193, 195, 200, 215, 216, 217, 219, 233, 239, 242, 244, 249, 250, 252, 253, 259, 260, 261, 263, 266, 267, 273, 274, 276, 279, 280, 286, 287, 288, 290, 293, 295, 296, 299, 300, 313, 318, 319, 320, 322, 324, 325, 329, 333, 334, 335, 340, 346, 347, 348, 350, 354, 355, 362, 363, 367, 368, 369, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 497, 499, 500, 501, 513, 514, 519, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 704, 709, 710, 716, 717, 720, 725, 731, 736, 741, 761, 762, 763, 764, 787, 790, 791, 797, 800, 802, 803, 804, 805, 808, 809, 810, 811, 816, 819, 823, 827, 828, 830, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 935, 937, 939, 941, 942, 953, 980, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "havelabeleddatado": 400, "haversin": [2, 306, 418, 704, 767, 769, 1009, 1046, 1049], "haversine_dist": [2, 767, 1046], "haversinedist": 704, "hawaii": 177, "haxbi": 0, "haya": 1051, "hayashi": 1045, "hbgt": 151, "hd": 51, "hdb": [88, 450], "hdbscan": [2, 71, 79, 82, 98, 185, 246, 448, 517, 889, 996, 1025, 1027, 1031, 1032, 1053, 1054, 1055], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 374, "hdl": [170, 377], "hdmetor": 1043, "he": [380, 731, 761, 866, 867, 899, 900, 1006, 1044, 1051, 1052], "head": [0, 52, 63, 103, 177, 188, 202, 204, 233, 256, 263, 319, 322, 327, 380, 388, 401, 417, 1030, 1042, 1043, 1052, 1053, 1054, 1055, 1056], "head_width": 63, "header": [54, 102, 274, 354, 355, 375, 378, 420, 492, 493, 805, 808, 809, 819], "heali": 412, "health": 330, "heap": 454, "heapq": 467, "heard": 380, "heart": 252, "heat": [156, 343, 412, 456, 466, 700], "heatingqc": 156, "heatmap": [189, 191, 195, 200, 284, 327, 343, 637, 1013], "heatmap_kw": 637, "heatmaps_": 637, "heavei": 1045, "heavi": [217, 392, 409, 1026], "heavier": [130, 414, 1002], "heavili": [204, 367, 368, 380, 388, 654, 660, 783, 1023], "heavy_rain": [43, 189], "hebei": 412, "hedlund": 1053, "hedyati": 1041, "hee": [1044, 1047], "heer": 1048, "hegd": 1054, "heidelberg": [177, 412, 417, 540, 701, 731, 761, 1006], "height": [47, 54, 86, 124, 145, 146, 170, 313, 319, 329, 354, 418, 450, 498, 499, 511, 591], "heightpet_catpet_dogf64f64f64": 329, "heikki": 1018, "heilman": [1041, 1042], "heitz": 319, "held": [43, 47, 103, 128, 149, 190, 223, 260, 276, 281, 292, 416, 419, 564, 565, 566, 567, 706, 805, 808, 809, 819, 866, 867, 879, 995, 996, 1005, 1014], "helder": [1041, 1050, 1051], "heldout": 222, "heldout_scor": 147, "helen": 327, "heli": 1044, "hello": [380, 388, 966, 970], "helloifeven": 966, "helm": 1055, "helmu": 1041, "help": [0, 41, 43, 48, 50, 88, 102, 106, 126, 131, 189, 200, 233, 235, 267, 274, 276, 286, 290, 311, 340, 343, 355, 356, 363, 367, 368, 380, 381, 382, 383, 384, 385, 386, 388, 389, 394, 395, 397, 406, 412, 413, 416, 420, 422, 436, 541, 582, 632, 655, 659, 670, 690, 691, 697, 719, 845, 917, 918, 919, 920, 996, 1000, 1001, 1003, 1005, 1006, 1008, 1010, 1016, 1017, 1022, 1024, 1025, 1026, 1029, 1030, 1043, 1044, 1045, 1048, 1051, 1055], "helper": [44, 45, 124, 233, 284, 373, 382, 383, 393, 394, 416, 472, 580, 907, 994, 1037, 1044, 1045, 1046, 1050], "helvetica": [921, 923], "heme": 1054, "hempstalk": 1044, "henc": [72, 93, 104, 188, 219, 246, 267, 282, 343, 354, 355, 367, 375, 382, 384, 386, 394, 398, 412, 416, 419, 420, 491, 513, 544, 546, 547, 548, 568, 595, 648, 651, 657, 665, 667, 677, 692, 709, 710, 714, 720, 736, 762, 791, 800, 821, 824, 825, 844, 845, 846, 847, 848, 884, 962, 1003, 1005, 1006, 1007, 1012, 1013, 1016, 1026, 1044, 1045, 1048, 1049, 1051], "hendrik": [0, 401, 1037, 1040, 1041, 1042, 1043], "henri": [1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "henriqu": 1056, "henrymooresc": [1051, 1052], "hepe": [684, 1002], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 90, 91, 99, 109, 113, 118, 119, 123, 124, 126, 127, 128, 129, 131, 135, 138, 141, 145, 149, 151, 156, 167, 170, 172, 180, 181, 188, 189, 190, 193, 195, 200, 204, 208, 215, 219, 221, 230, 231, 233, 235, 237, 242, 247, 249, 252, 253, 259, 260, 261, 266, 267, 270, 271, 273, 275, 276, 278, 280, 282, 283, 285, 286, 287, 290, 293, 295, 302, 305, 309, 310, 311, 315, 318, 324, 326, 329, 332, 334, 343, 347, 350, 352, 356, 358, 363, 367, 368, 369, 374, 375, 378, 379, 380, 381, 382, 385, 386, 388, 392, 393, 403, 406, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 425, 441, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 468, 476, 479, 541, 543, 544, 548, 549, 568, 572, 573, 574, 575, 586, 587, 589, 593, 596, 599, 607, 633, 635, 652, 656, 658, 660, 666, 668, 670, 678, 680, 694, 696, 700, 704, 717, 731, 761, 799, 804, 805, 808, 809, 811, 819, 827, 828, 829, 830, 831, 832, 833, 834, 836, 845, 849, 850, 873, 881, 884, 887, 890, 901, 902, 912, 971, 995, 998, 1002, 1003, 1004, 1005, 1006, 1009, 1012, 1016, 1018, 1019, 1020, 1021, 1025, 1026, 1029, 1030, 1037, 1045, 1050], "hereaft": 395, "hereund": 1012, "herilalaina": [1044, 1045, 1047], "hermano": [1052, 1053], "hermida": [1046, 1050], "hernandez": 1006, "hern\u00e1ndez": 1006, "hero": [414, 425, 479], "herrou": 1051, "hershei": 1006, "hertel": 1054, "herv": 1041, "hervieu": 1037, "herv\u00e9": 1041, "heryanto": 1044, "hesit": 380, "hessian": [235, 236, 237, 419, 566, 567, 653, 663, 664, 674, 685, 694, 698, 1002, 1010, 1031, 1032, 1052, 1056], "hessian_tol": [694, 698], "heterogen": [43, 47, 48, 61, 88, 101, 103, 185, 189, 215, 256, 318, 322, 356, 372, 374, 392, 468, 492, 546, 586, 596, 718, 869, 873, 909, 1003, 1013, 1016, 1025, 1027, 1032, 1041, 1045, 1047, 1048, 1055], "heteroscedast": [121, 128, 148, 217, 417, 885, 897], "heteroschedast": 1006, "heuer": 1040, "heurist": [51, 54, 147, 252, 354, 368, 412, 421, 453, 456, 465, 466, 513, 514, 542, 544, 551, 681, 682, 683, 696, 700, 808, 809, 911, 912, 913, 914, 915, 940, 1003, 1004, 1009, 1020, 1022, 1030, 1037, 1038, 1042, 1046, 1049, 1050], "hexbin": 246, "hexdigest": 47, "hgbdt": 141, "hgbdt_model": 189, "hgbdt_model_without_interact": 189, "hgbdt_preprocessor": 189, "hgbt": [141, 151, 419], "hgbt_cst": 151, "hgbt_no_cst": 151, "hgbt_quantil": 151, "hhu": [654, 1046], "hi": [0, 413, 1006], "hibon": 1044, "hida": [1052, 1053], "hidden": [43, 189, 310, 311, 380, 388, 409, 417, 865, 866, 867, 1010, 1011, 1025, 1037, 1048], "hidden_layer_s": [189, 253, 308, 310, 866, 867, 1010], "hide": [52, 78, 380, 388, 844, 845, 846, 847, 848, 1040, 1045, 1053], "hideaki": 1051, "hierarch": [2, 53, 59, 71, 74, 75, 79, 80, 85, 86, 87, 89, 90, 185, 191, 212, 239, 326, 362, 394, 420, 445, 447, 449, 450, 509, 517, 519, 527, 535, 552, 736, 862, 889, 1023, 1026, 1027, 1031, 1032, 1037, 1040, 1041, 1053], "hierarchi": [76, 191, 380, 454, 460, 467, 1011], "higgin": [1054, 1055], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 82, 88, 90, 95, 98, 102, 106, 111, 112, 123, 124, 138, 140, 141, 142, 143, 148, 149, 151, 152, 154, 170, 172, 178, 184, 187, 189, 190, 191, 200, 210, 216, 217, 219, 229, 235, 236, 237, 242, 246, 258, 264, 271, 275, 279, 280, 299, 300, 308, 310, 315, 317, 318, 319, 320, 328, 335, 340, 342, 343, 354, 355, 360, 361, 367, 375, 377, 380, 385, 388, 389, 392, 393, 409, 410, 411, 412, 416, 418, 419, 420, 421, 422, 448, 451, 453, 454, 456, 473, 486, 487, 488, 558, 559, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 649, 675, 676, 684, 694, 697, 698, 731, 736, 747, 751, 761, 794, 797, 813, 815, 849, 850, 854, 883, 884, 888, 890, 911, 913, 914, 917, 918, 919, 920, 974, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1014, 1016, 1018, 1021, 1022, 1023, 1025, 1026, 1037, 1038, 1040, 1041, 1045, 1048, 1049, 1050, 1051, 1052], "high_cardin": 319, "high_cardinality_featur": 319, "high_cardinalityindex": 319, "high_i": 210, "high_precision_cv_result": 271, "high_recall_cv_result": 271, "high_x": 210, "higher": [43, 52, 90, 111, 124, 128, 135, 138, 140, 141, 148, 152, 168, 172, 174, 179, 180, 188, 189, 190, 193, 215, 216, 219, 233, 239, 240, 264, 266, 267, 271, 273, 276, 288, 298, 318, 343, 347, 354, 355, 356, 363, 367, 375, 378, 382, 409, 411, 412, 414, 419, 421, 422, 423, 448, 452, 453, 475, 482, 514, 537, 544, 548, 553, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 578, 593, 596, 612, 613, 624, 632, 636, 640, 642, 651, 652, 657, 658, 665, 666, 667, 668, 681, 683, 684, 709, 729, 733, 757, 790, 802, 805, 808, 809, 811, 819, 826, 828, 833, 836, 855, 858, 884, 901, 902, 903, 909, 910, 911, 912, 913, 914, 915, 922, 998, 1002, 1003, 1005, 1006, 1009, 1013, 1016, 1020, 1021, 1038, 1043, 1045, 1052, 1054], "highest": [2, 55, 63, 113, 166, 170, 219, 271, 273, 284, 324, 354, 380, 392, 410, 412, 416, 419, 421, 441, 560, 562, 569, 597, 600, 601, 603, 604, 605, 608, 609, 611, 640, 642, 731, 761, 799, 802, 805, 808, 809, 819, 906, 917, 955, 995, 1002, 1006, 1007, 1010, 1020, 1022, 1049], "highest_protocol": 406, "highli": [43, 48, 64, 104, 111, 112, 123, 131, 152, 200, 210, 220, 267, 273, 276, 282, 309, 347, 355, 367, 368, 380, 386, 392, 410, 412, 416, 419, 420, 456, 466, 501, 568, 676, 697, 817, 819, 865, 928, 1002, 1006, 1009, 1010, 1012, 1020, 1021, 1024, 1025], "highlight": [43, 54, 88, 103, 111, 119, 133, 139, 140, 153, 170, 172, 173, 178, 183, 184, 189, 190, 193, 215, 216, 217, 233, 244, 249, 254, 255, 256, 267, 268, 285, 287, 295, 317, 319, 335, 354, 356, 362, 380, 384, 385, 388, 392, 422, 447, 450, 451, 468, 471, 494, 495, 501, 506, 507, 509, 517, 520, 526, 529, 543, 546, 566, 567, 569, 570, 572, 604, 607, 633, 635, 637, 639, 645, 651, 653, 657, 663, 674, 685, 693, 702, 706, 707, 722, 723, 737, 747, 753, 783, 793, 800, 804, 805, 806, 808, 809, 811, 819, 827, 828, 831, 832, 835, 851, 853, 870, 874, 879, 882, 883, 884, 888, 889, 890, 906, 907, 909, 914, 917, 918, 948, 1003, 1006, 1014, 1016, 1021, 1027, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "highlight_min": [148, 204], "higuera": 374, "hila": 412, "hilbert": [220, 875, 998, 1016], "hilferti": 111, "hill": [412, 452, 465, 1047], "him": 420, "himanshu": [1048, 1051], "hind": 1051, "hinder": 1047, "hing": [2, 62, 222, 225, 227, 281, 340, 341, 345, 347, 394, 671, 681, 740, 909, 916, 1002, 1020, 1021], "hinge_loss": [2, 347, 1006, 1041, 1049, 1050], "hinrich": 417, "hint": [188, 367, 381, 385, 403, 452, 1006], "hinton": [697, 858, 865, 866, 867, 1003, 1009, 1010, 1011], "hintz": 1043, "hiramatsu": 1054, "hirofumi": [1048, 1049], "hirsch": 1045, "hirschberg": [412, 722, 742, 800], "hirzel": 1050, "hispan": 188, "hist": [43, 62, 64, 86, 107, 137, 141, 215, 217, 246, 252, 267, 279, 298, 313, 317, 319, 326, 329, 419], "hist_drop": 145, "hist_n": 145, "hist_nbin": 313, "hist_no_interact": 327, "hist_one_hot": 145, "hist_ordin": 145, "hist_quantil": 326, "hist_x0": 313, "hist_x1": 313, "histgradientboost": 1049, "histgradientboostingclassifi": [2, 140, 141, 267, 322, 323, 324, 325, 327, 329, 368, 406, 564, 569, 637, 638, 996, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "histgradientboostingclassifierhistgradientboostingclassifi": 267, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 267, "histgradientboostingregressor": [2, 43, 46, 52, 136, 141, 145, 148, 149, 151, 153, 156, 183, 189, 215, 319, 322, 323, 324, 325, 327, 328, 329, 419, 565, 570, 637, 638, 640, 996, 1013, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "histgradientboostingregressor__interaction_cst": 189, "histgradientboostingregressor__max_depth": 145, "histgradientboostingregressor__max_it": 145, "histgradientboostingregressorhistgradientboostingregressor": [156, 319], "histgradientboostingregressorifittedhistgradientboostingregressor": [153, 327], "histogram": [2, 52, 62, 64, 86, 134, 136, 140, 145, 146, 148, 149, 153, 185, 215, 223, 246, 272, 274, 279, 298, 313, 324, 326, 328, 329, 410, 494, 501, 564, 565, 566, 567, 569, 570, 637, 647, 747, 753, 763, 764, 795, 805, 810, 826, 832, 835, 998, 1004, 1016, 1027, 1031, 1032, 1049, 1052, 1054], "histor": [51, 215, 267, 1003, 1026], "histori": [51, 384, 564, 565, 1037], "hit": [217, 386], "hitesh": 1049, "hjortkj\u00e6r": 1051, "hkey_local_machin": 398, "hline": 123, "hlle": 1003, "hmasdev": 1051, "hmc": 51, "hmm": [1037, 1038, 1039, 1040, 1042], "hmmlearn": 1025, "hn": 386, "hnyk": [1043, 1044], "ho": [419, 560, 561, 1006, 1042, 1045, 1046, 1051], "hoang": [1046, 1047], "hobson": 1043, "hoc": [169, 170, 185, 265, 267, 276, 290, 330, 335, 394, 411, 501, 663, 821, 827, 832, 870, 889, 1027], "hochberg": [600, 1043, 1044], "hochreit": [409, 724], "hockei": [57, 375], "hoctor": 1049, "hoda1394": 1049, "hoenig": 1037, "hoesli": 419, "hoffman": [417, 541, 1042, 1049], "hogan": 1045, "hoh": 1045, "hold": [0, 47, 52, 63, 64, 215, 219, 249, 267, 274, 362, 373, 380, 381, 382, 394, 410, 412, 416, 419, 420, 422, 508, 562, 566, 569, 594, 637, 638, 639, 741, 805, 808, 809, 819, 845, 876, 877, 882, 883, 890, 893, 917, 919, 996, 1000, 1006, 1010, 1020, 1021, 1022, 1045, 1049, 1055], "holdgraf": 1045, "holdselig": 420, "hole": [185, 234, 235, 240, 535, 697, 698, 1027, 1051], "holger": 1044, "holidai": [43, 189], "holm": [840, 1007, 1054], "holman": 1052, "holmstr\u00f6m": 1039, "holohan": [1052, 1054], "holt": [0, 402, 1037], "holub": 539, "home": [0, 2, 7, 51, 52, 156, 176, 178, 180, 181, 243, 259, 311, 327, 375, 378, 388, 398, 490, 496, 504, 684, 1030], "homebrew": [383, 398], "homepag": [375, 535, 1022], "homm": 1052, "homo": 91, "homogen": [2, 72, 73, 74, 79, 80, 82, 88, 91, 355, 375, 392, 394, 414, 419, 422, 450, 619, 709, 722, 736, 741, 742, 762, 800, 1003, 1004, 1006, 1046], "homogeneity_completeness_v_measur": [2, 412, 1046], "homogeneity_scor": [2, 73, 82, 91, 355, 412, 722, 741, 800, 1006], "homomorph": 1025, "homoscedast": [128, 245, 317, 1006, 1045], "homoschedast": 1006, "honda": 51, "honei": 1000, "hong": [1043, 1045, 1049, 1050, 1051, 1053, 1055], "hongh": 1045, "hongkahjun": 1044, "honglu": 1047, "hongshaoyang": 1052, "honl": [1049, 1050], "honolulu": 1006, "honor": 319, "hood": [406, 1002, 1021], "hoover": [1042, 1043, 1044, 1046], "hope": [30, 44, 178, 233, 394, 1046], "hopefulli": [276, 388, 1037], "hopfensperg": [1054, 1055, 1056], "hopper": 1042, "horizont": [66, 121, 235, 247, 313, 316, 385, 394, 468, 520, 702, 706], "horizontal_distance_to_hydrologi": 495, "horizontalalign": [51, 63, 67, 75, 79, 95, 127, 242, 258, 308, 315], "hornik": 640, "hornstein": 1052, "horrel": 1044, "hoshia": 1051, "hossein": [1045, 1046, 1047], "host": [0, 141, 328, 354, 375, 380, 384, 388, 389, 496, 902, 1053], "hot": [2, 43, 103, 140, 143, 156, 188, 215, 282, 314, 315, 319, 324, 343, 394, 419, 420, 556, 571, 586, 653, 663, 664, 674, 685, 872, 874, 876, 877, 880, 882, 883, 890, 1002, 1016, 1045, 1051, 1052], "hot_r": [51, 313], "hotel": 1030, "hotspot": 386, "hotter": 143, "hour": [43, 151, 188, 189, 329, 380, 386, 501, 1003, 1024], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 151, 188], "hourly_wag": 187, "hous": [2, 107, 146, 156, 183, 184, 267, 313, 324, 373, 494, 1032], "house_pric": [107, 156], "houseag": [313, 324, 375, 494], "household": 375, "housestyl": [145, 156], "hover": 329, "hover_data": [141, 274], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 83, 84, 85, 86, 90, 93, 101, 102, 103, 106, 109, 111, 116, 130, 135, 136, 139, 143, 144, 145, 146, 148, 149, 151, 154, 156, 167, 168, 179, 185, 188, 189, 190, 191, 193, 197, 203, 204, 205, 211, 216, 217, 218, 219, 222, 223, 229, 233, 239, 240, 244, 247, 249, 251, 252, 253, 255, 264, 267, 268, 269, 271, 273, 274, 275, 280, 282, 283, 285, 287, 288, 292, 293, 295, 296, 297, 299, 300, 305, 310, 318, 320, 323, 324, 325, 328, 329, 340, 341, 343, 346, 347, 350, 354, 355, 358, 362, 367, 368, 369, 375, 378, 379, 381, 382, 383, 385, 388, 393, 394, 395, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 426, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 509, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 627, 628, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 709, 725, 762, 797, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 832, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 989, 995, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1012, 1013, 1014, 1016, 1018, 1019, 1021, 1022, 1024, 1026, 1030, 1032, 1037, 1039, 1042, 1048, 1051, 1052, 1053], "howel": 1044, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 81, 82, 86, 88, 93, 104, 107, 109, 113, 115, 126, 128, 138, 140, 141, 145, 148, 149, 156, 167, 170, 172, 177, 178, 189, 190, 197, 204, 215, 219, 236, 239, 240, 242, 248, 249, 252, 267, 273, 280, 286, 287, 288, 290, 292, 293, 298, 309, 313, 324, 330, 347, 350, 354, 355, 363, 367, 368, 369, 374, 375, 377, 379, 380, 382, 386, 388, 392, 394, 403, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 444, 447, 451, 453, 455, 458, 463, 501, 513, 537, 546, 556, 572, 586, 587, 588, 594, 611, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 635, 637, 638, 643, 648, 660, 661, 677, 692, 697, 700, 705, 768, 770, 805, 807, 808, 809, 819, 822, 825, 832, 836, 837, 848, 866, 867, 872, 881, 882, 887, 911, 912, 914, 931, 958, 974, 995, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1020, 1021, 1022, 1046, 1047, 1049, 1050, 1053], "hoyer": [417, 1040], "hp": 51, "hpq": 51, "hrishikesh": [1038, 1039], "hristo": [1045, 1052], "hsiang": [663, 1041], "hsieh": 1043, "hspace": [45, 53, 54, 79, 95, 121, 233, 242, 258, 260, 261, 264, 298, 324, 333, 340], "hstack": [53, 69, 77, 158, 166, 240, 251, 268, 346, 416, 868], "hsuan": 1042, "ht2001": 1006, "htf": 419, "htm": [917, 918], "html": [2, 43, 47, 51, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 170, 177, 188, 189, 190, 193, 197, 243, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 375, 377, 380, 381, 383, 384, 388, 413, 416, 420, 426, 491, 513, 514, 663, 844, 848, 947, 948, 949, 1004, 1025, 1026, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "htmledit": [844, 848, 1004], "htmlparser": 47, "htsedebenham": 1052, "http": [43, 45, 47, 51, 52, 55, 61, 103, 170, 193, 215, 223, 231, 233, 240, 287, 290, 292, 293, 310, 374, 375, 377, 378, 380, 384, 385, 386, 388, 392, 394, 398, 412, 416, 421, 446, 453, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 513, 514, 515, 535, 536, 539, 542, 546, 600, 641, 646, 649, 654, 663, 669, 671, 672, 673, 676, 681, 684, 687, 688, 690, 691, 697, 700, 710, 726, 728, 729, 763, 764, 774, 844, 846, 848, 851, 852, 857, 858, 859, 860, 865, 887, 902, 903, 904, 917, 918, 947, 948, 1002, 1004, 1006, 1019, 1022, 1047, 1056], "hu": [1042, 1045, 1047], "hua": [568, 1012], "huang": [375, 663, 1043, 1048], "huangk10": 1048, "huard": 1037, "huber": [25, 198, 225, 419, 565, 654, 681, 683, 1020, 1037, 1039, 1040, 1049], "huberlossfunct": 1050, "huberregressor": [2, 87, 172, 185, 194, 213, 219, 220, 221, 320, 529, 675, 676, 677, 683, 684, 1002, 1027, 1043, 1044, 1045, 1046], "hubert": [412, 710, 720, 791], "hubert1985": 710, "hudson": 327, "hue": [151, 263, 273, 318, 377], "huerta": 1047, "hug": [0, 170, 401, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "huge": [217, 220, 367, 386, 632, 1040], "hugh": [884, 1039, 1050], "hugo": [45, 375, 1043, 1048, 1049, 1050, 1051], "hugorichard": 1049, "hugu": 1041, "hui": [202, 543, 545, 552, 661, 1002], "huiginn": 1037, "huilgolkar": [1038, 1039], "hujiahong726": 1053, "hull": 1054, "humahn": 1052, "human": [121, 189, 354, 380, 412, 417, 866, 867, 1006, 1013, 1046], "humid": [43, 189, 1013], "hunan": 1045, "hundr": [77, 147, 236, 317, 375, 416, 419, 566, 567, 1003, 1048], "hunt": 1052, "hunter": 1046, "hurt": [367, 539, 1045], "husak": 1051, "huszar": 1030, "hut": [697, 1003, 1042, 1044, 1047], "huynh": [1047, 1049], "hv": 420, "hvassard": 1051, "hwan": 1048, "hwang": 1043, "hybrid": [450, 654, 1025], "hye": 1048, "hyper": [2, 43, 64, 103, 141, 266, 267, 273, 278, 311, 343, 363, 382, 392, 393, 394, 407, 416, 419, 421, 472, 649, 650, 809, 817, 819, 865, 907, 1001, 1002, 1006, 1009, 1020, 1021, 1025, 1032, 1037, 1051, 1056], "hyperband": 995, "hyperbol": [347, 647, 866, 867, 1004, 1010], "hypercub": [242, 520], "hyperlink": 1039, "hyperparamet": [2, 103, 105, 106, 151, 172, 173, 179, 180, 183, 185, 189, 195, 200, 204, 229, 233, 242, 252, 265, 267, 271, 276, 278, 284, 285, 295, 311, 354, 382, 394, 412, 416, 417, 419, 422, 507, 540, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 648, 658, 664, 670, 678, 681, 733, 790, 805, 819, 914, 995, 1000, 1001, 1002, 1005, 1006, 1008, 1010, 1012, 1020, 1026, 1027, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "hyperparameter_baseline_similar": 180, "hyperparameter_grid": 329, "hyperparameter_length_scal": 620, "hyperplan": [137, 175, 185, 194, 207, 224, 250, 276, 338, 339, 340, 341, 342, 343, 347, 348, 517, 636, 663, 664, 671, 673, 679, 680, 681, 682, 909, 911, 913, 914, 1020, 1021, 1027], "hyperspher": 376, "hypothes": 1002, "hypothesi": [148, 273, 279, 416, 695, 699, 834, 1003], "hypothet": 64, "hyunjin": 1037, "hyvarinen": [424, 538], "h\u00e9lion": 1048, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 341, 342, 343, 347, 348, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 363, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 393, 394, 395, 397, 398, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 955, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 979, 980, 986, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "i_ax": 293, "i_dataset": [79, 95, 242], "i_j": 1014, "iain": [170, 377, 1002], "iampat": 1045, "ian": [1039, 1041, 1046, 1047, 1049, 1052, 1053, 1055], "iasoon": 1051, "ibay": 1037, "ibieta": 1050, "ibm": [51, 57, 336, 356, 375], "ibn": 1037, "ibnukhsein": 1054, "ibraheem": 1046, "ibrahima": 1047, "ibraim": [1042, 1043, 1044], "ib\u00e1\u00f1ez": [1045, 1046, 1049], "ic": [47, 290, 324, 374, 377, 397, 505, 507, 515, 637, 638, 1032, 1049, 1050], "ica": [11, 123, 424, 1022, 1031, 1032], "ica_estim": 121, "icann": 701, "icassp": 1006, "icdm": [568, 1012], "icdmw": 412, "ice_lines_kw": 637, "icml": [62, 64, 410, 412, 420, 441, 443, 844, 846, 865, 1006, 1008, 1020, 1024], "icml03": 846, "icml09": [536, 542], "icon": [329, 382], "icyblad": 1044, "id": [2, 45, 52, 57, 233, 306, 362, 374, 375, 380, 388, 414, 416, 420, 426, 499, 500, 501, 921, 923, 948, 1045, 1046, 1049], "id3": [1028, 1032], "idea": [44, 86, 111, 112, 141, 170, 177, 188, 216, 235, 267, 298, 343, 358, 367, 368, 380, 385, 386, 414, 415, 416, 417, 418, 419, 421, 612, 613, 1002, 1003, 1006, 1009, 1012, 1024, 1030], "ideal": [215, 217, 233, 267, 270, 273, 280, 282, 283, 363, 379, 380, 381, 384, 385, 388, 392, 394, 410, 411, 731, 761, 995, 1005, 1020, 1021, 1026, 1029], "idelberg": 1054, "ident": [52, 57, 97, 147, 210, 215, 233, 242, 246, 337, 354, 375, 382, 394, 409, 412, 413, 414, 416, 422, 425, 442, 443, 456, 468, 469, 477, 479, 480, 483, 484, 485, 492, 508, 556, 564, 565, 569, 570, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 648, 684, 685, 704, 709, 710, 741, 790, 800, 807, 810, 820, 821, 824, 825, 851, 852, 858, 866, 867, 873, 874, 886, 898, 917, 918, 999, 1000, 1003, 1006, 1009, 1010, 1021, 1041, 1045, 1046, 1047, 1051, 1055], "identif": [375, 380, 412, 502, 995], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 374, 375, 379, 380, 385, 394, 411, 412, 413, 416, 419, 420, 450, 454, 461, 491, 501, 513, 514, 560, 561, 562, 563, 568, 569, 570, 571, 611, 648, 654, 704, 717, 779, 834, 855, 874, 904, 905, 995, 1002, 1006, 1012, 1019, 1030, 1044, 1046, 1051, 1052], "idf": [2, 54, 57, 246, 354, 355, 356, 375, 417, 526, 549, 593, 594, 595, 596, 848, 856, 881, 995, 1004, 1008, 1016, 1037], "idf_": [420, 595, 596, 1045, 1056], "idier": [417, 543, 545, 552], "idiom": 386, "idl": 1048, "ido": [1052, 1053], "idpol": [215, 233], "idx": [50, 57, 88, 130, 137, 141, 144, 151, 157, 181, 189, 191, 200, 207, 214, 215, 224, 236, 267, 359, 413, 416], "idx_a": 282, "idx_avg_max_test_scor": 286, "idx_b": 282, "idx_r": 214, "idx_sort": 215, "idxmax": 350, "idxmin": 271, "ie": [75, 99, 122, 444, 709, 1002, 1016], "ieee": [96, 110, 112, 377, 412, 414, 421, 425, 452, 479, 539, 568, 669, 690, 691, 730, 774, 1002, 1006, 1012], "ieeexplor": 774, "ieic": [543, 545, 552], "iem": 663, "if_binari": [188, 256, 882, 1016, 1048], "if_delegate_has_method": [1050, 1051], "iff": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 880], "iforest": 252, "iforest_kw": 252, "iglesi": 1052, "ignacio": 1040, "ignor": [2, 43, 45, 47, 55, 79, 82, 88, 95, 103, 135, 140, 145, 153, 156, 189, 202, 215, 230, 243, 244, 249, 254, 256, 264, 309, 310, 318, 319, 323, 326, 347, 355, 368, 380, 382, 384, 386, 394, 398, 403, 412, 413, 419, 420, 430, 431, 434, 437, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 464, 465, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 508, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 586, 587, 588, 593, 594, 595, 596, 602, 607, 608, 615, 616, 632, 633, 634, 635, 637, 638, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 712, 716, 718, 719, 731, 734, 735, 743, 760, 761, 768, 774, 779, 783, 788, 789, 792, 793, 802, 803, 804, 806, 807, 808, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 866, 867, 868, 869, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 901, 902, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 928, 942, 980, 989, 994, 1002, 1003, 1006, 1008, 1012, 1016, 1021, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055], "ignore_attribut": 374, "ignore_error": 87, "ignore_implicit_zero": [886, 898], "ignore_ti": [731, 761], "ignore_warn": [223, 315, 1043], "ignored_new_col": 413, "ignorerevsfil": 380, "igor": [1043, 1044, 1050], "ih": 298, "ii": [50, 122, 189, 222, 268, 377, 420, 587, 588, 594, 643, 671, 672, 872, 881, 1002, 1016, 1024, 1054], "iid": 1045, "iii": [1051, 1054], "iijima": 1046, "iinfo": 1052, "ij": [273, 303, 409, 412, 417, 543, 545, 552, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 1002, 1003, 1006, 1008, 1011, 1016, 1021], "ijcnn": 1006, "ijcv": 1006, "ijet": 412, "ik": [1002, 1006], "ikeda": 1049, "ikko": 1050, "il": [49, 669, 690, 691, 1002, 1006], "ilambharathi": [1040, 1041], "ili": [1053, 1054], "ilic": 1050, "ilion": 1051, "iliya": 1052, "iljin": [1052, 1053], "ill": [75, 113, 220, 311, 475, 476, 482, 655, 656, 659, 660, 661, 687, 688, 1002, 1005, 1047], "illustr": [48, 52, 60, 61, 63, 67, 69, 85, 89, 90, 102, 103, 106, 107, 109, 111, 116, 119, 123, 135, 138, 143, 150, 151, 153, 155, 156, 165, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 185, 187, 189, 190, 193, 204, 211, 212, 215, 217, 219, 223, 225, 226, 228, 229, 232, 233, 235, 236, 238, 240, 242, 244, 245, 247, 248, 249, 251, 262, 267, 273, 280, 285, 287, 294, 302, 316, 318, 321, 322, 324, 330, 335, 343, 344, 348, 350, 351, 352, 355, 356, 361, 363, 367, 377, 380, 385, 388, 393, 411, 415, 417, 419, 420, 520, 615, 616, 618, 619, 620, 624, 627, 628, 858, 995, 1002, 1006, 1009, 1012, 1018, 1019, 1020, 1021, 1025, 1027, 1030], "iloc": [43, 151, 156, 188, 189, 233, 273, 296], "ilya": [1044, 1055], "im": [121, 131, 284, 297], "im_": 702, "im_kw": [702, 1051], "imacul": 1043, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 80, 84, 87, 89, 91, 95, 100, 102, 120, 121, 126, 143, 168, 170, 176, 185, 206, 236, 244, 247, 251, 271, 302, 310, 311, 323, 332, 333, 354, 355, 372, 373, 375, 377, 380, 385, 388, 394, 398, 405, 411, 412, 417, 445, 449, 456, 466, 498, 499, 500, 501, 507, 508, 511, 512, 539, 540, 542, 546, 588, 589, 590, 591, 592, 612, 613, 696, 702, 743, 835, 879, 1002, 1006, 1007, 1009, 1011, 1018, 1022, 1025, 1027, 1030, 1032, 1037, 1040, 1045, 1046, 1050, 1052, 1053], "image_height": [588, 589, 592], "image_index": [332, 333], "image_nam": 511, "image_patch": 592, "image_reconstruct": 592, "image_s": 592, "image_shap": [121, 251], "image_width": [588, 589, 592], "imagebox": 236, "imageio": 374, "imagenet": [866, 867], "images_restor": 84, "imagin": [122, 172, 249, 347, 416, 417, 420, 1002], "imamura": 1051, "imbal": [266, 276, 287, 416, 712, 734, 735, 743, 788, 789, 792, 793, 1006], "imbalanc": [215, 267, 276, 280, 282, 287, 355, 392, 410, 416, 708, 713, 792, 806, 810, 846, 1006, 1008, 1014, 1025], "imbert": [1044, 1046, 1049, 1051, 1054, 1055], "img": [44, 83, 99, 511, 591], "img_height": 588, "img_shap": 143, "img_to_graph": [2, 80, 99, 420, 1040, 1050], "img_width": 588, "imit": 354, "immanuel": [0, 1037, 1038, 1042], "immedi": [88, 380, 392, 805, 819, 830, 831, 1045], "immens": 1030, "immensu": 1045, "immers": [695, 699], "immobil": 43, "immut": 406, "imp": 996, "imp_mean": [632, 635], "imp_reshap": 143, "impact": [51, 52, 62, 71, 72, 77, 78, 97, 107, 135, 166, 185, 187, 188, 189, 196, 217, 219, 233, 252, 266, 267, 290, 296, 318, 327, 350, 355, 363, 367, 368, 373, 392, 395, 410, 412, 417, 451, 453, 541, 545, 552, 595, 671, 672, 673, 677, 679, 681, 682, 683, 697, 799, 805, 808, 809, 819, 832, 849, 850, 851, 852, 886, 898, 909, 910, 938, 953, 976, 979, 995, 1005, 1013, 1021, 1027, 1044, 1047, 1050], "imped": 388, "imperfect": [733, 790, 1006, 1039], "imperfectli": [708, 739, 1006], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 80, 89, 112, 121, 141, 151, 184, 191, 193, 200, 204, 229, 233, 235, 242, 248, 249, 267, 271, 273, 282, 290, 292, 293, 295, 298, 316, 322, 323, 324, 325, 326, 328, 354, 356, 367, 368, 369, 374, 375, 377, 378, 380, 381, 382, 385, 386, 388, 389, 394, 398, 403, 408, 409, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 441, 446, 447, 448, 450, 451, 452, 453, 454, 479, 498, 501, 513, 537, 538, 539, 540, 541, 543, 546, 547, 548, 558, 559, 560, 562, 563, 566, 567, 568, 572, 577, 587, 593, 594, 596, 598, 602, 606, 615, 616, 637, 638, 645, 646, 650, 651, 658, 662, 663, 664, 668, 669, 673, 676, 677, 679, 680, 681, 682, 683, 689, 690, 691, 692, 693, 696, 697, 700, 712, 716, 725, 740, 743, 747, 783, 787, 793, 794, 802, 804, 805, 808, 809, 811, 819, 823, 824, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 854, 857, 859, 860, 865, 866, 867, 869, 891, 899, 900, 906, 909, 910, 911, 912, 913, 914, 915, 952, 953, 962, 965, 970, 974, 976, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1016, 1018, 1019, 1022, 1023, 1025, 1026, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "impli": [43, 172, 188, 354, 355, 356, 417, 419, 422, 478, 578, 587, 615, 616, 627, 740, 939, 1002, 1003, 1048], "implic": [363, 380], "implicit": [2, 215, 394, 419, 420, 577, 687, 688, 1000, 1005, 1025, 1046], "implicitli": [356, 389, 419, 602, 637, 638, 888, 996, 998, 1013, 1016, 1021, 1055], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 374, 375, 376, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 397, 398, 399, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 966, 967, 968, 969, 970, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1027, 1030, 1032, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1055], "importance_gett": [421, 598, 599, 602, 1049], "importances_mean": [142, 149, 190, 191, 322, 639, 1014], "importances_std": [142, 639, 1014], "important_word": 57, "importantli": [43, 53, 122, 178, 189, 193, 313, 380, 412, 1055], "importerror": [50, 86, 124, 293, 306, 388], "importlib": 1050, "impos": [74, 90, 153, 203, 209, 219, 319, 392, 412, 417, 419, 420, 532, 662, 1002], "imposs": [148, 356, 1026], "impract": 914, "impress": 1030, "improp": [394, 1044], "improv": [0, 30, 43, 61, 62, 69, 109, 110, 113, 126, 131, 135, 136, 141, 144, 146, 147, 148, 150, 151, 156, 166, 184, 188, 193, 201, 215, 223, 233, 267, 274, 276, 290, 293, 296, 311, 318, 328, 346, 347, 355, 363, 368, 378, 383, 385, 386, 388, 389, 392, 394, 395, 406, 417, 419, 421, 453, 454, 536, 537, 539, 542, 543, 544, 546, 547, 548, 551, 559, 562, 563, 564, 565, 566, 567, 569, 570, 615, 616, 648, 657, 669, 671, 672, 673, 677, 678, 679, 680, 681, 683, 690, 692, 697, 734, 735, 788, 789, 792, 793, 858, 866, 867, 883, 885, 897, 917, 918, 920, 953, 995, 1000, 1002, 1003, 1006, 1009, 1010, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "improvis": [50, 306], "impur": [149, 191, 362, 397, 419, 421, 558, 559, 562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 921, 923, 1022, 1032, 1042, 1043, 1044, 1045], "imput": [2, 103, 151, 156, 190, 244, 254, 256, 323, 326, 372, 384, 393, 394, 403, 413, 419, 494, 506, 570, 585, 632, 633, 634, 635, 644, 650, 677, 831, 852, 870, 934, 936, 1025, 1026, 1027, 1032, 1039, 1040], "imputation_const": 254, "imputation_mean": 254, "imputation_ord": [632, 1047], "imputation_sequence_": 632, "impute_estim": 183, "impute_scor": 184, "imran": [1039, 1040, 1041], "imread": 68, "imshow": [44, 45, 53, 68, 75, 80, 81, 83, 84, 86, 87, 91, 113, 121, 124, 131, 174, 175, 176, 180, 191, 206, 231, 236, 251, 284, 297, 311, 332, 333, 343, 351, 374, 637, 702, 1051], "in1d": 1044, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 88, "inaccur": 1056, "inact": [356, 374, 380], "inadvert": [187, 394], "inadvis": 406, "inappropri": [375, 416, 422, 714, 826], "inbuilt": 416, "inc": [0, 102, 272, 996, 1018, 1030], "incap": 88, "incentiv": 384, "incept": 1026, "includ": [0, 11, 18, 43, 68, 70, 88, 111, 141, 145, 146, 147, 187, 188, 190, 200, 215, 219, 233, 249, 274, 290, 293, 309, 313, 325, 326, 328, 343, 348, 354, 356, 363, 367, 368, 374, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 394, 395, 398, 406, 409, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 448, 450, 454, 460, 470, 473, 474, 475, 476, 477, 478, 479, 480, 493, 494, 495, 501, 505, 506, 507, 509, 510, 515, 539, 546, 562, 569, 579, 637, 643, 651, 652, 657, 665, 666, 667, 670, 686, 693, 694, 702, 718, 734, 735, 740, 742, 743, 776, 788, 789, 792, 800, 805, 807, 808, 809, 818, 819, 822, 825, 832, 835, 857, 859, 860, 861, 882, 883, 884, 888, 906, 909, 910, 917, 919, 921, 923, 935, 936, 939, 941, 945, 947, 948, 962, 995, 1002, 1005, 1006, 1007, 1009, 1010, 1016, 1020, 1021, 1022, 1025, 1026, 1029, 1030, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "include_bia": [43, 195, 288, 884, 888, 1051], "include_boundari": [939, 1051], "include_self": [74, 79, 100, 700, 862, 863, 1041], "include_valu": 702, "inclus": [0, 380, 382, 388, 454, 460, 759, 791, 1006, 1007, 1037, 1051], "incom": [313, 375, 444], "incoming_count": 55, "incompat": [501, 996, 1045, 1046], "incomplet": [380, 398, 408, 412, 710, 800, 996, 1003, 1041, 1043], "inconsist": [2, 394, 406, 420, 513, 514, 581, 911, 914, 939, 1012, 1021, 1032, 1037, 1042, 1043, 1044, 1045, 1047, 1050, 1052, 1053, 1054], "inconsistentversionwarn": [2, 406, 1053], "incorpor": [328, 380, 413, 419, 1005, 1025, 1030], "incorrect": [135, 187, 335, 363, 380, 412, 612, 613, 637, 638, 739, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1056], "incorrectli": [197, 280, 419, 420, 558, 564, 566, 739, 745, 1006, 1038, 1043, 1045, 1046, 1048, 1053], "incr_mean_variance_axi": [2, 1043, 1049], "increas": [2, 43, 46, 54, 63, 72, 78, 88, 90, 91, 94, 107, 124, 135, 136, 138, 141, 144, 146, 151, 153, 166, 170, 172, 176, 177, 178, 188, 189, 193, 196, 198, 206, 215, 216, 217, 219, 233, 240, 246, 259, 260, 267, 273, 274, 275, 280, 286, 287, 308, 314, 315, 318, 324, 330, 333, 343, 350, 355, 356, 358, 367, 368, 369, 379, 388, 389, 394, 410, 412, 414, 417, 419, 420, 423, 444, 448, 450, 456, 467, 475, 476, 482, 537, 541, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 632, 640, 641, 642, 650, 655, 656, 659, 660, 661, 663, 664, 671, 672, 673, 681, 682, 683, 687, 688, 690, 691, 697, 711, 712, 717, 783, 787, 794, 808, 809, 838, 857, 859, 860, 861, 864, 866, 867, 883, 909, 917, 918, 919, 920, 953, 995, 997, 1001, 1002, 1003, 1005, 1006, 1009, 1016, 1020, 1021, 1022, 1030, 1037, 1039, 1042, 1046, 1048, 1049, 1052, 1055], "increasing_": 640, "increasing_bool": 641, "increment": [2, 104, 120, 126, 127, 128, 129, 185, 276, 384, 386, 446, 451, 467, 509, 538, 539, 540, 541, 544, 546, 549, 607, 651, 663, 671, 811, 833, 841, 842, 844, 845, 846, 847, 848, 878, 879, 889, 909, 910, 980, 1002, 1008, 1027, 1040, 1041], "incrementalpca": [2, 125, 369, 417, 538, 540, 544, 546, 549, 1041, 1044, 1045, 1047, 1048, 1051], "incur": [63, 624, 909, 1021, 1045], "ind": [53, 77, 147, 158, 355, 849, 850], "inde": [44, 46, 62, 64, 70, 74, 75, 86, 88, 91, 113, 116, 126, 135, 138, 169, 170, 172, 188, 190, 195, 200, 202, 204, 215, 217, 275, 276, 280, 282, 290, 293, 313, 318, 350, 355, 363, 367, 379, 385, 393, 394, 395, 412, 414, 419, 572, 573, 1002, 1016, 1020, 1051], "indecisiveus": [1048, 1049], "indefinit": 384, "indent": [382, 971], "independ": [2, 32, 52, 62, 64, 72, 80, 122, 123, 125, 140, 144, 179, 189, 251, 252, 273, 276, 278, 282, 292, 313, 320, 322, 355, 363, 367, 368, 376, 382, 393, 394, 398, 406, 409, 410, 412, 413, 414, 415, 416, 420, 424, 453, 468, 492, 508, 520, 521, 522, 523, 525, 537, 538, 540, 542, 544, 545, 551, 552, 556, 557, 609, 612, 613, 630, 645, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 677, 678, 679, 680, 709, 710, 722, 741, 742, 760, 762, 800, 807, 834, 838, 840, 842, 843, 881, 885, 886, 887, 889, 893, 894, 895, 896, 898, 899, 900, 903, 911, 912, 913, 914, 915, 947, 995, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1011, 1013, 1016, 1021, 1022, 1031, 1032, 1037, 1038, 1043, 1045, 1047, 1052], "inder128": 1047, "inderjeet": 1048, "inderjit": [409, 457], "indeterminaci": 549, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 82, 83, 91, 103, 104, 135, 140, 142, 151, 167, 170, 183, 187, 188, 189, 190, 191, 215, 219, 233, 253, 256, 259, 260, 264, 268, 271, 272, 273, 274, 276, 284, 285, 286, 287, 293, 313, 318, 319, 320, 326, 330, 332, 333, 355, 356, 375, 377, 378, 380, 382, 384, 389, 392, 394, 409, 413, 416, 417, 419, 420, 427, 447, 451, 452, 453, 454, 455, 457, 458, 461, 463, 464, 468, 471, 508, 514, 562, 563, 564, 565, 569, 570, 571, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 622, 637, 638, 645, 702, 709, 710, 717, 721, 723, 736, 743, 762, 784, 785, 791, 793, 799, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 835, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 882, 917, 918, 919, 920, 926, 957, 976, 979, 984, 985, 1006, 1008, 1009, 1010, 1020, 1022, 1025, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "index_alpha_path_a": 202, "index_alpha_path_b": 202, "index_map": 55, "indexerror": [1045, 1046], "indexhash": 645, "indexhash_": 645, "indian": 375, "indic": [2, 51, 57, 58, 62, 63, 92, 93, 99, 107, 116, 118, 121, 135, 140, 146, 177, 180, 184, 187, 189, 212, 237, 246, 249, 266, 267, 275, 276, 279, 280, 293, 306, 332, 333, 336, 354, 355, 356, 362, 368, 375, 380, 381, 382, 384, 388, 389, 392, 394, 408, 409, 410, 412, 414, 416, 417, 419, 420, 423, 427, 432, 441, 444, 448, 454, 455, 456, 457, 459, 460, 461, 464, 468, 471, 476, 491, 513, 514, 516, 517, 518, 528, 537, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 586, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 625, 632, 633, 634, 635, 637, 638, 644, 651, 652, 655, 656, 657, 658, 659, 660, 666, 668, 670, 678, 680, 687, 688, 695, 697, 699, 701, 708, 712, 717, 718, 723, 724, 725, 727, 730, 733, 734, 735, 736, 739, 743, 744, 745, 746, 759, 776, 783, 784, 785, 786, 788, 789, 790, 792, 793, 797, 798, 799, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 842, 843, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 873, 876, 880, 882, 890, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 925, 926, 931, 935, 936, 941, 957, 968, 969, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 996, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1020, 1021, 1026, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056], "indicator_": [632, 633, 635], "indicator_matrix_": 1042, "indigo": 232, "indirect": [276, 381, 394], "indirectli": [233, 347], "indispens": 1030, "indistinguish": 313, "individu": [2, 43, 80, 93, 111, 134, 136, 138, 156, 165, 168, 181, 185, 186, 188, 191, 215, 233, 243, 252, 253, 267, 276, 278, 292, 322, 329, 330, 347, 350, 368, 381, 382, 384, 387, 389, 394, 397, 403, 409, 413, 416, 419, 420, 441, 456, 466, 468, 501, 506, 508, 514, 560, 561, 564, 565, 567, 568, 570, 572, 573, 574, 575, 608, 614, 615, 637, 638, 648, 650, 662, 663, 664, 673, 676, 677, 678, 679, 680, 681, 682, 683, 692, 717, 724, 733, 739, 755, 756, 790, 795, 796, 805, 819, 837, 841, 842, 844, 845, 846, 847, 848, 867, 870, 878, 879, 881, 882, 883, 886, 888, 889, 894, 895, 896, 909, 910, 1006, 1007, 1016, 1021, 1027, 1032, 1038, 1041, 1043, 1049, 1051, 1053], "indptr": [55, 293, 362, 980, 981, 982, 983, 984, 985, 986, 987, 988, 1045, 1053], "induc": [25, 63, 89, 188, 200, 206, 208, 213, 216, 230, 248, 252, 350, 356, 409, 417, 419, 450, 453, 544, 548, 558, 562, 563, 564, 565, 569, 570, 571, 648, 731, 761, 882, 917, 918, 919, 920, 999, 1006, 1020], "induct": [43, 71, 133, 148, 180, 185, 394, 412, 419, 426, 445, 517, 569, 632, 636, 904, 905, 966, 989, 1002, 1019, 1027, 1039], "inductive_learn": 89, "inductivecluster": 89, "industri": [412, 1025], "ineffect": [317, 410, 1016, 1045, 1046], "ineffici": [2, 419, 447, 579, 837, 838, 1009, 1011], "inequ": [362, 394, 412, 447, 451, 463, 704, 1003, 1004, 1009], "inertia": [90, 91, 94, 355, 412, 447, 451, 453, 456, 463, 464, 466, 467, 1048], "inertia_": [91, 94, 97, 447, 451, 453, 1048], "inf": [107, 175, 303, 389, 412, 422, 450, 454, 459, 460, 461, 465, 475, 476, 482, 558, 559, 564, 565, 598, 599, 602, 611, 612, 613, 624, 632, 640, 642, 653, 654, 655, 657, 674, 676, 677, 681, 682, 683, 685, 692, 733, 735, 751, 783, 790, 794, 865, 874, 881, 933, 934, 935, 936, 951, 1006, 1016, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055], "infant": 1016, "infeas": [1002, 1009, 1011], "infer": [25, 185, 186, 188, 210, 259, 263, 264, 273, 359, 374, 382, 392, 406, 416, 417, 496, 501, 513, 514, 520, 539, 541, 543, 545, 552, 554, 555, 558, 564, 565, 637, 640, 662, 714, 727, 728, 746, 790, 802, 803, 811, 828, 835, 845, 883, 890, 904, 905, 917, 918, 919, 920, 968, 996, 1002, 1005, 1006, 1011, 1016, 1019, 1022, 1025, 1026, 1027, 1038, 1042, 1043, 1048, 1051, 1054], "inferencesess": 406, "inferenti": 89, "inferior": [445, 449, 1048], "infin": [2, 273, 350, 546, 687, 688, 717, 830, 916, 934, 1009], "infinit": [64, 216, 258, 276, 347, 367, 422, 450, 627, 628, 783, 802, 933, 935, 936, 998, 1005, 1016, 1021, 1045, 1047, 1050, 1051, 1052, 1054, 1055], "inflammatori": 375, "inflat": [90, 187, 188, 190, 412, 416, 1006, 1016], "inflect": 275, "influenc": [42, 48, 52, 111, 112, 135, 185, 188, 198, 248, 258, 281, 313, 320, 343, 347, 350, 363, 369, 414, 417, 419, 435, 444, 458, 469, 486, 487, 488, 493, 506, 559, 561, 563, 565, 567, 570, 573, 575, 616, 633, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 683, 684, 739, 755, 835, 842, 843, 851, 852, 859, 860, 867, 886, 887, 898, 910, 912, 915, 918, 920, 935, 995, 1000, 1001, 1002, 1009, 1012, 1016, 1020, 1021, 1027, 1030, 1040, 1045, 1046], "influenti": [219, 355, 1030], "info": [2, 45, 77, 103, 121, 188, 189, 249, 267, 271, 377, 379, 384, 394, 420, 468, 501, 566, 567, 961], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 82, 86, 91, 99, 100, 102, 103, 116, 118, 127, 141, 142, 143, 164, 166, 167, 169, 170, 172, 177, 185, 188, 189, 191, 193, 194, 195, 196, 200, 216, 219, 230, 232, 233, 249, 253, 260, 261, 263, 267, 268, 270, 273, 274, 275, 278, 280, 282, 286, 296, 299, 300, 303, 320, 325, 329, 346, 350, 354, 355, 356, 359, 362, 363, 367, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 388, 392, 393, 394, 395, 403, 406, 409, 411, 416, 417, 419, 420, 421, 422, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 497, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 515, 520, 529, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 614, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 700, 702, 706, 709, 710, 720, 731, 735, 748, 760, 761, 762, 791, 793, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 928, 962, 989, 994, 996, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1020, 1022, 1026, 1027, 1029, 1030, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "informatik": 1006, "informed": 1006, "infrastructur": [310, 328, 1025, 1026], "infrequ": [882, 883, 890, 1006, 1037, 1051, 1052, 1053], "infrequent_categories_": [326, 328, 882, 883, 890, 1016], "infrequent_if_exist": [882, 1016], "infrequent_sklearn": [882, 1016], "infti": [233, 422, 624, 1002, 1016, 1044], "ing": 420, "ingela": 1051, "ingest": 420, "ingredi": 422, "ingrid": 1047, "inher": [131, 210, 363, 412, 417, 568, 996, 998, 1000, 1001, 1003, 1007], "inherit": [249, 380, 382, 393, 394, 426, 582, 681, 929, 945, 947, 958, 1002, 1037, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1054], "inhibit": [423, 448], "inhomogen": [422, 619], "ini": 261, "init": [2, 54, 77, 91, 92, 94, 97, 189, 196, 235, 236, 238, 239, 240, 259, 261, 293, 355, 383, 388, 412, 417, 419, 447, 451, 453, 455, 457, 463, 464, 543, 545, 552, 553, 564, 565, 637, 638, 695, 697, 699, 858, 1003, 1037, 1046, 1049, 1051, 1052, 1053], "init_": [564, 565], "init_param": [258, 261, 264, 802, 803], "init_s": [94, 355, 453], "init_size_": 1049, "init_tim": 261, "initi": [0, 46, 51, 55, 71, 77, 78, 90, 91, 93, 96, 97, 112, 149, 157, 158, 159, 173, 178, 185, 188, 196, 208, 230, 235, 236, 240, 257, 259, 260, 273, 293, 324, 334, 343, 355, 363, 368, 375, 380, 382, 388, 389, 392, 394, 412, 417, 419, 421, 422, 424, 446, 447, 451, 452, 453, 454, 455, 456, 457, 463, 464, 465, 466, 517, 520, 536, 537, 538, 542, 543, 545, 548, 550, 551, 552, 553, 558, 559, 564, 565, 568, 598, 612, 613, 615, 616, 624, 625, 632, 645, 650, 651, 652, 653, 657, 658, 663, 665, 666, 667, 668, 671, 672, 673, 674, 676, 681, 682, 683, 685, 686, 689, 695, 696, 697, 699, 700, 802, 803, 839, 858, 865, 866, 867, 905, 938, 952, 953, 974, 979, 980, 998, 1002, 1003, 1005, 1010, 1011, 1012, 1020, 1022, 1025, 1027, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "initial_imputer_": 632, "initial_strategi": 632, "initial_theta": [615, 616], "initialis": [121, 543, 545, 552, 1037, 1045, 1046], "initializedcheck": 381, "inject": [252, 375, 419], "inki": 1043, "inli": [242, 1002, 1012], "inlier": [111, 152, 218, 242, 252, 313, 394, 414, 434, 473, 568, 676, 682, 855, 886, 898, 912, 913, 915, 1002, 1012, 1044, 1045, 1050], "inlier_mask": 218, "inlier_mask_": [218, 676], "inlier_plot": 111, "inliers_mask": 112, "inlin": [226, 380, 381, 1022], "inner": [64, 126, 148, 151, 274, 278, 292, 334, 367, 420, 447, 519, 587, 594, 623, 653, 674, 685, 780, 782, 998, 1006, 1016, 1021, 1038, 1041, 1051, 1054], "inner_clf": 1006, "inner_cv": [278, 329], "inner_it": 386, "inner_numb": 334, "inner_stat": 1051, "inner_stats_": 1051, "inpaint": 417, "inplac": [2, 233, 252, 285, 458, 486, 487, 488, 489, 864, 872, 875, 878, 879, 881, 885, 886, 887, 889, 978, 981, 982, 983, 987, 988, 1046], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 389], "inplace_csr_row_normalize_l1": [2, 389], "inplace_csr_row_normalize_l2": [2, 389], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 105, 121, 125, 144, 148, 149, 178, 179, 180, 188, 193, 195, 215, 218, 219, 223, 230, 233, 245, 246, 248, 249, 256, 268, 286, 290, 297, 298, 310, 314, 315, 316, 317, 322, 325, 327, 330, 343, 347, 351, 356, 374, 377, 380, 383, 385, 389, 390, 392, 393, 394, 406, 409, 410, 413, 416, 417, 418, 419, 420, 421, 422, 424, 430, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 449, 452, 453, 454, 458, 461, 462, 465, 468, 469, 471, 472, 473, 475, 476, 486, 487, 488, 493, 508, 514, 521, 522, 523, 525, 529, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 625, 627, 632, 633, 634, 635, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 705, 706, 707, 726, 727, 728, 729, 733, 750, 751, 753, 755, 756, 758, 759, 766, 772, 776, 777, 779, 783, 784, 785, 786, 790, 795, 796, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 896, 897, 901, 902, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 941, 947, 950, 952, 962, 964, 965, 969, 978, 980, 986, 987, 988, 991, 992, 994, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "input_featur": [195, 382, 394, 428, 433, 446, 447, 449, 451, 453, 468, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 1053], "input_nam": [934, 936, 968, 1051], "input_tag": 928, "input_typ": [356, 420, 587], "inputtag": [2, 928], "inria": [0, 663, 1037], "insensit": [248, 648, 681, 683, 793, 910, 999, 1020, 1021, 1037], "insepar": [170, 377], "insert": [93, 188, 215, 392, 412, 491, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 924], "insid": [2, 55, 57, 63, 189, 217, 249, 273, 334, 343, 369, 374, 375, 382, 386, 403, 412, 420, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 962, 965, 1013, 1030, 1054], "insight": [43, 46, 188, 189, 203, 216, 217, 233, 267, 310, 313, 354, 362, 410, 411, 805, 808, 809, 819, 832, 1013, 1022, 1030], "insist": 102, "inspect": [2, 43, 48, 66, 67, 70, 89, 94, 137, 142, 149, 151, 152, 153, 157, 167, 172, 177, 178, 188, 189, 190, 191, 199, 207, 224, 229, 253, 267, 273, 276, 285, 296, 301, 304, 318, 322, 323, 324, 325, 327, 329, 339, 340, 341, 342, 344, 345, 347, 354, 359, 368, 382, 394, 412, 413, 419, 420, 468, 558, 559, 562, 563, 564, 565, 569, 570, 571, 636, 637, 638, 639, 838, 869, 870, 917, 918, 919, 920, 993, 1006, 1007, 1010, 1013, 1014, 1021, 1025, 1027, 1032, 1040], "inspir": [110, 153, 189, 233, 380, 392, 419, 566, 567, 940, 996, 1046], "instabl": [74, 188, 303, 422, 456, 540, 544, 548, 700, 1044, 1047, 1050], "instal": [86, 256, 293, 322, 323, 324, 325, 326, 327, 328, 329, 330, 367, 368, 380, 381, 383, 384, 386, 388, 392, 393, 399, 405, 406, 408, 412, 420, 456, 466, 501, 696, 700, 1022, 1044, 1045, 1046, 1050, 1051], "installment_commit": 267, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 86, 89, 91, 138, 151, 167, 170, 184, 189, 190, 199, 200, 244, 249, 252, 267, 269, 271, 282, 284, 285, 304, 322, 329, 337, 339, 340, 346, 347, 354, 355, 356, 366, 367, 368, 374, 375, 377, 378, 379, 380, 382, 385, 386, 388, 389, 392, 394, 398, 403, 406, 408, 409, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 426, 436, 437, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 466, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 495, 497, 500, 501, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 625, 632, 633, 634, 635, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 712, 725, 734, 735, 743, 776, 779, 783, 784, 785, 786, 788, 789, 792, 793, 794, 797, 798, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 935, 936, 938, 947, 948, 952, 953, 961, 962, 963, 964, 974, 975, 976, 979, 989, 990, 994, 995, 996, 1002, 1003, 1006, 1008, 1009, 1012, 1014, 1016, 1020, 1021, 1022, 1026, 1032, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "instanci": 1046, "instant": 209, "instantan": 513, "instanti": [104, 175, 325, 383, 403, 419, 454, 572, 573, 607, 635, 805, 808, 809, 811, 819, 828, 830, 831, 832, 833, 834, 836, 943, 1012, 1037, 1045, 1049, 1053], "instead": [0, 43, 44, 45, 52, 58, 86, 88, 89, 90, 103, 126, 138, 143, 153, 167, 170, 172, 215, 217, 230, 233, 239, 252, 264, 269, 270, 274, 275, 286, 292, 298, 313, 322, 323, 324, 325, 326, 343, 345, 347, 354, 356, 362, 363, 367, 368, 374, 375, 378, 379, 380, 381, 382, 384, 385, 388, 389, 392, 393, 394, 403, 406, 408, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 435, 441, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 460, 463, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 514, 515, 538, 539, 540, 543, 545, 546, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 612, 613, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 635, 637, 640, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 697, 699, 712, 714, 751, 779, 783, 784, 785, 787, 788, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 817, 819, 821, 823, 824, 825, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 870, 871, 872, 874, 875, 876, 881, 882, 887, 888, 889, 899, 900, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 941, 948, 953, 962, 980, 995, 996, 998, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1016, 1020, 1021, 1022, 1025, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "instinct": 354, "institut": [0, 267, 377, 1009], "instruct": [367, 380, 381, 382, 383, 384, 385, 388, 392, 393, 394, 508, 593, 594, 596, 1029, 1037], "instrument": [51, 102, 122, 187], "insuffici": [397, 1005], "insur": [185, 194, 215, 411, 468, 501, 557, 653, 674, 685, 711, 750, 755, 757, 835, 870, 873, 874, 882, 889, 1002, 1027], "int": [47, 49, 52, 53, 55, 72, 79, 95, 112, 138, 147, 151, 152, 162, 163, 173, 174, 175, 181, 184, 187, 197, 206, 208, 215, 233, 240, 242, 248, 252, 258, 267, 268, 271, 272, 273, 293, 298, 300, 306, 320, 333, 356, 375, 380, 382, 392, 394, 410, 413, 416, 420, 423, 424, 427, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 622, 632, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 712, 714, 718, 731, 732, 734, 735, 736, 739, 743, 761, 762, 774, 779, 783, 784, 785, 786, 787, 788, 789, 792, 794, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 931, 935, 936, 938, 939, 952, 953, 955, 956, 957, 959, 970, 974, 976, 979, 984, 985, 1002, 1013, 1037, 1043, 1047, 1048], "int32": [252, 293, 320, 380, 394, 447, 451, 453, 455, 457, 463, 911, 912, 913, 914, 915, 970, 1021, 1046, 1052, 1053, 1054], "int64": [43, 53, 87, 103, 188, 189, 267, 282, 287, 290, 319, 329, 362, 394, 420, 430, 446, 452, 454, 501, 519, 520, 524, 590, 593, 645, 651, 652, 657, 658, 670, 719, 720, 723, 749, 799, 845, 874, 903, 933, 960, 991, 1007, 1045, 1048, 1050, 1052, 1053, 1054], "int64dtyp": 1054, "intact": 882, "integ": [2, 43, 55, 86, 103, 188, 215, 233, 323, 324, 363, 367, 374, 375, 377, 382, 385, 389, 393, 394, 412, 413, 416, 417, 419, 420, 437, 441, 466, 468, 471, 476, 491, 501, 503, 506, 507, 508, 510, 513, 514, 517, 519, 520, 524, 527, 555, 564, 565, 566, 567, 568, 572, 573, 577, 587, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 637, 638, 649, 656, 660, 664, 670, 678, 680, 681, 683, 704, 719, 740, 805, 807, 808, 809, 810, 812, 814, 819, 820, 821, 824, 825, 827, 829, 832, 840, 843, 845, 848, 849, 850, 874, 882, 883, 888, 889, 890, 893, 903, 905, 917, 918, 919, 920, 931, 968, 969, 970, 974, 996, 1002, 1007, 1009, 1016, 1019, 1021, 1022, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056], "integr": [0, 52, 77, 103, 167, 180, 204, 310, 324, 368, 378, 382, 383, 384, 386, 388, 394, 398, 417, 422, 450, 720, 760, 791, 980, 1005, 1013, 1030, 1038, 1040, 1041, 1049, 1050, 1054, 1056], "intel": [1006, 1025], "intelex": [398, 1025], "intellectu": 187, "intellig": [96, 170, 267, 354, 377, 412, 419, 452, 560, 561, 643, 701, 730, 839, 866, 867, 1007, 1018, 1026, 1030], "intend": [90, 91, 125, 216, 256, 347, 354, 380, 381, 387, 392, 394, 412, 416, 472, 587, 678, 704, 878, 879, 889, 907, 926, 1001, 1002, 1006, 1010, 1017, 1025, 1056], "intens": [99, 124, 293, 377, 381, 392, 394, 417, 447, 451, 463, 612, 613, 637, 638, 807, 995, 1013, 1030, 1045], "intention": 64, "inter": [2, 75, 142, 363, 419, 721], "interact": [2, 42, 149, 151, 185, 215, 240, 244, 274, 323, 379, 381, 382, 384, 386, 392, 394, 395, 406, 413, 564, 565, 566, 567, 637, 638, 884, 888, 995, 998, 1002, 1003, 1004, 1011, 1013, 1016, 1024, 1026, 1039, 1044, 1051, 1052], "interaction_cst": [189, 327, 419, 566, 567, 1052], "interaction_onli": [43, 884, 1002, 1016], "interactiveshellapp": 386, "intercept": [124, 207, 224, 232, 351, 394, 486, 487, 488, 554, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 884, 888, 891, 909, 910, 916, 1002, 1004, 1006, 1011, 1020, 1021, 1040, 1042, 1046, 1047], "intercept_": [198, 205, 207, 224, 250, 341, 348, 351, 382, 394, 486, 487, 488, 554, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 909, 910, 911, 912, 913, 914, 915, 1000, 1002, 1020, 1021, 1037, 1044, 1049, 1051, 1054], "intercept_hidden_": 865, "intercept_init": [671, 672, 673, 681, 683], "intercept_sc": [208, 663, 664, 909, 910, 916, 1002, 1021], "intercept_visible_": 865, "intercepts_": [866, 867, 1010], "interchang": [1025, 1054], "interclass": 75, "interdepend": 520, "interest": [0, 43, 45, 52, 77, 79, 83, 88, 95, 99, 104, 135, 143, 148, 156, 167, 170, 177, 183, 188, 189, 190, 204, 215, 216, 217, 233, 236, 247, 266, 267, 270, 273, 274, 276, 282, 287, 290, 330, 343, 350, 355, 362, 367, 375, 377, 380, 385, 386, 388, 392, 395, 411, 412, 414, 417, 420, 422, 498, 499, 505, 509, 515, 651, 652, 909, 996, 1002, 1003, 1006, 1011, 1012, 1013, 1026, 1030, 1037, 1054], "interestingli": [109, 170, 1016], "interfac": [2, 42, 135, 185, 373, 374, 381, 382, 384, 389, 392, 394, 416, 422, 423, 445, 449, 454, 501, 558, 704, 805, 808, 809, 819, 869, 870, 895, 990, 995, 1009, 1021, 1025, 1026, 1030, 1037, 1039, 1042, 1043, 1045, 1046, 1051, 1053], "interfer": [329, 1047], "interim": 1044, "interior": [675, 1002, 1052], "interleav": [2, 376, 392, 527], "intermedi": [43, 46, 85, 88, 140, 148, 252, 343, 392, 420, 564, 565, 624, 869, 1006, 1049, 1055], "intern": [0, 43, 63, 103, 113, 126, 141, 146, 149, 151, 161, 170, 173, 183, 185, 215, 249, 267, 287, 293, 295, 312, 319, 334, 356, 363, 368, 375, 377, 382, 386, 389, 392, 394, 403, 408, 409, 412, 416, 417, 419, 420, 421, 422, 423, 441, 443, 448, 469, 472, 516, 539, 540, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 598, 599, 615, 616, 645, 648, 651, 657, 673, 677, 681, 683, 701, 713, 736, 739, 763, 764, 788, 835, 849, 850, 865, 866, 867, 869, 870, 874, 888, 890, 904, 905, 907, 909, 910, 911, 914, 917, 918, 919, 920, 1002, 1003, 1004, 1006, 1009, 1012, 1016, 1018, 1021, 1022, 1027, 1030, 1037, 1040, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "internet": [375, 385, 1016], "interop": 1025, "interoper": [406, 422, 1026], "interp": [282, 283, 343], "interp1d": [658, 668, 689], "interp_tpr": 283, "interpol": [43, 53, 68, 75, 83, 84, 87, 91, 113, 121, 124, 176, 179, 185, 194, 195, 206, 231, 245, 251, 282, 288, 297, 298, 305, 311, 333, 343, 422, 640, 650, 658, 668, 677, 689, 705, 712, 852, 860, 870, 884, 888, 997, 1002, 1006, 1016, 1027, 1044, 1049], "interpret": [43, 64, 151, 170, 179, 185, 186, 187, 189, 211, 215, 216, 220, 231, 233, 266, 273, 275, 276, 287, 311, 314, 317, 324, 354, 356, 367, 378, 380, 381, 386, 388, 389, 394, 397, 410, 412, 413, 418, 420, 456, 468, 469, 471, 501, 546, 577, 616, 644, 648, 658, 677, 678, 696, 697, 700, 706, 734, 758, 763, 764, 788, 797, 798, 811, 820, 832, 833, 835, 838, 870, 882, 889, 1000, 1002, 1006, 1007, 1013, 1014, 1016, 1022, 1025, 1027, 1037, 1038, 1042, 1045, 1050, 1051, 1052], "interquartil": [252, 887, 899], "interquartile_rang": 887, "interrog": 420, "interrupt": 1002, "intersect": [274, 340, 409, 412, 743], "interv": [2, 52, 64, 134, 151, 179, 185, 200, 215, 216, 217, 233, 273, 375, 394, 410, 416, 419, 422, 442, 443, 521, 522, 523, 562, 563, 565, 567, 569, 570, 640, 641, 643, 682, 747, 753, 755, 809, 826, 835, 872, 874, 888, 911, 912, 913, 939, 998, 1002, 1006, 1016, 1022, 1027, 1044, 1048], "intervent": [88, 188], "intl": [64, 416], "intp": [427, 455, 457], "intra": [43, 593, 596, 797, 798], "intract": [89, 417, 1003, 1011], "intric": [219, 517], "intricaci": 380, "intrins": [195, 394, 417, 419, 1009, 1014, 1020, 1049], "introduc": [43, 109, 111, 112, 126, 151, 169, 185, 190, 195, 200, 219, 241, 246, 249, 252, 254, 280, 327, 328, 356, 376, 378, 380, 382, 384, 385, 388, 392, 394, 403, 410, 412, 414, 416, 417, 419, 420, 436, 445, 446, 447, 449, 451, 453, 463, 468, 472, 486, 487, 488, 489, 501, 509, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 560, 561, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 669, 690, 691, 693, 694, 697, 835, 853, 858, 861, 865, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 903, 907, 1000, 1002, 1005, 1008, 1009, 1012, 1016, 1018, 1020, 1021, 1027, 1037, 1038, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "introduct": [169, 233, 271, 380, 411, 416, 417, 420, 595, 793, 794, 844, 848, 1002, 1004, 1006, 1008, 1024, 1031, 1032], "introductori": [148, 171, 172, 177, 178, 180, 181, 185, 241, 422, 616, 627, 1027, 1030], "introspect": [43, 45, 103, 386, 564, 565, 594, 1016], "intrus": 375, "intuit": [43, 52, 67, 79, 85, 95, 126, 135, 138, 145, 165, 172, 188, 189, 216, 217, 237, 242, 274, 290, 298, 315, 318, 340, 343, 347, 355, 380, 394, 410, 412, 414, 416, 418, 650, 787, 788, 789, 792, 880, 909, 911, 912, 914, 915, 998, 1002, 1003, 1006, 1007, 1013, 1016, 1017, 1021, 1030, 1037], "inv": [109, 113, 309], "inv_boxcox": 1056, "inv_kw_arg": 873, "invalid": [2, 47, 215, 394, 450, 583, 676, 717, 779, 994, 1002, 1006, 1043, 1045, 1047, 1048, 1050, 1051, 1053, 1056], "invalidparametererror": 1006, "invalu": 1030, "invari": [75, 377, 394, 412, 422, 619, 694, 752, 823, 824, 1002, 1003, 1006, 1021, 1026, 1045, 1048, 1049, 1050], "invent": 1009, "inventor": 1008, "inventori": 1030, "invers": [2, 8, 51, 87, 108, 109, 110, 135, 185, 263, 280, 282, 296, 343, 355, 356, 372, 394, 413, 415, 416, 417, 419, 420, 424, 449, 469, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 532, 538, 539, 540, 544, 546, 548, 562, 566, 569, 594, 595, 596, 633, 649, 650, 663, 664, 671, 673, 679, 680, 681, 682, 683, 685, 729, 748, 757, 802, 803, 851, 852, 859, 860, 866, 867, 869, 873, 876, 882, 883, 885, 901, 902, 909, 910, 911, 914, 915, 917, 919, 941, 1000, 1002, 1006, 1009, 1010, 1016, 1020, 1021, 1027, 1031, 1032, 1037, 1040, 1045, 1048, 1049, 1051, 1055, 1056], "inverse_components_": [901, 902, 1018, 1051], "inverse_func": [107, 188, 413, 469, 873, 1016, 1045, 1055], "inverse_transform": [44, 84, 87, 126, 167, 297, 355, 403, 417, 420, 449, 469, 486, 487, 488, 538, 539, 540, 543, 544, 545, 546, 548, 549, 586, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 635, 805, 808, 809, 819, 869, 873, 874, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 889, 901, 902, 1016, 1017, 1018, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "invert": [113, 126, 167, 236, 355, 356, 392, 414, 420, 635, 694, 698, 1016, 1046], "invert_yaxi": [184, 356], "invest": [386, 1030], "investig": [126, 131, 135, 184, 350, 380, 406, 1002], "invok": [382, 536, 542, 544, 550, 551, 572, 574, 575, 804, 827, 830, 906, 1049, 1054], "involv": [318, 320, 322, 330, 343, 347, 367, 369, 375, 380, 394, 395, 406, 415, 422, 704, 837, 838, 1003, 1007, 1009, 1013, 1014, 1021, 1025, 1030, 1045], "invscal": [309, 681, 682, 683, 866, 867, 1020], "io": [374, 377, 380, 384, 386, 388, 394, 697, 1025, 1032, 1035], "ioangatop": 1054, "ioanni": 739, "ioerror": 1053, "iofal": 1051, "ion": 1052, "ionescu": [647, 998, 1047], "iowa": [145, 156, 252], "ipca": [2, 125, 538, 539], "ipdb": 388, "ipm": 675, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362], "ipython": [382, 385, 386, 388], "ipython_config": 386, "iq": 187, "iqbal": 1049, "iqr": [252, 887, 899], "ir": [245, 417, 595, 731, 761, 844, 848, 1004, 1006], "iren": [1052, 1053], "iri": [2, 50, 55, 66, 67, 69, 76, 106, 117, 120, 123, 125, 126, 131, 134, 135, 136, 137, 139, 154, 157, 163, 166, 171, 173, 176, 177, 180, 185, 193, 194, 199, 207, 208, 212, 247, 250, 256, 260, 266, 278, 279, 282, 283, 296, 302, 304, 308, 309, 315, 324, 331, 336, 338, 339, 341, 343, 345, 346, 347, 357, 358, 360, 361, 362, 373, 374, 393, 406, 412, 413, 416, 417, 419, 451, 501, 509, 546, 554, 558, 562, 569, 615, 627, 636, 681, 805, 819, 904, 905, 906, 909, 914, 917, 921, 922, 923, 995, 996, 1000, 1005, 1006, 1009, 1013, 1016, 1019, 1020, 1021, 1022, 1027, 1032, 1050], "iris": [118, 279, 280], "iris_61": 374, "iris_969": 374, "iris_version_3": 374, "irreduc": [138, 1006], "irregular": [177, 347, 412, 1009], "irregularities_kernel": 177, "irrelev": [165, 200, 363, 386, 414, 419, 421, 609, 745, 1006], "irrespect": [215, 246, 267, 282, 293, 611], "irvin": 377, "is_categor": 637, "is_categorical_": [566, 567], "is_classifi": [2, 382, 394], "is_cluster": [2, 1056], "is_data_valid": [676, 1002], "is_fit": [2, 989], "is_fitted_": [426, 429, 431, 434, 435], "is_inli": [473, 568, 855], "is_leav": 362, "is_max_test_scor": 105, "is_model_valid": [676, 1002], "is_multilabel": [2, 389, 1054], "is_paramet": 993, "is_pypi": 1055, "is_regressor": [2, 394], "is_scalar_nan": 1050, "is_sh": 284, "is_split_nod": 362, "is_stationari": [180, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "isa": 57, "isaac": [1043, 1044, 1046, 1047, 1054], "isaack": 1050, "isaactrost": 1054, "isakov": 1049, "isbn": [377, 412, 1002], "isclos": 55, "isdigit": [57, 420], "ish": 69, "ishaan": 1050, "ishan": [1050, 1051], "ishank": [1042, 1043, 1044], "ishikawa": [1049, 1050], "isin": 333, "isinst": [70, 144, 233, 394], "islic": [47, 79, 95], "ism": 1041, "isn": [170, 322, 354, 356, 363, 368, 380, 384, 388, 520, 566, 567, 599, 799, 808, 809, 882, 1009, 1021, 1047, 1055], "iso": [171, 185, 227, 237, 615, 618, 619, 1027], "iso_reg": 640, "isoformat": 55, "isol": [2, 145, 152, 242, 252, 355, 378, 386, 398, 568, 855, 913, 1046, 1047], "isolationforest": [2, 134, 137, 185, 218, 242, 252, 313, 636, 835, 913, 1012, 1027, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1056], "isolationforestifittedisolationforest": 152, "isomap": [2, 51, 85, 140, 185, 234, 237, 239, 246, 303, 322, 326, 419, 507, 549, 554, 571, 694, 695, 696, 697, 858, 870, 879, 902, 1009, 1027, 1031, 1032, 1045, 1047, 1050, 1051, 1052, 1053, 1054], "isomap__n_neighbor": 322, "isometr": [235, 693, 695, 696, 697, 1003], "isoton": [2, 61, 62, 107, 185, 241, 441, 640, 641, 642, 662, 938, 1027, 1028, 1032, 1038, 1039, 1040, 1041, 1043, 1050, 1053], "isotonic_regress": [2, 640, 1050], "isotonicregress": [2, 245, 997, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1051, 1052, 1053], "isotonicregression0": 640, "isotrop": [2, 70, 88, 90, 94, 126, 174, 176, 235, 237, 412, 414, 422, 517, 524, 537, 620, 624, 625, 627, 628], "isotropi": 417, "isr": 421, "issam": [0, 1043], "issu": [0, 2, 43, 62, 110, 116, 215, 233, 278, 320, 368, 374, 383, 384, 385, 389, 392, 394, 395, 397, 398, 403, 406, 408, 412, 414, 415, 420, 453, 456, 466, 477, 486, 487, 488, 539, 544, 548, 578, 593, 594, 596, 616, 632, 696, 700, 774, 880, 882, 885, 897, 943, 996, 1003, 1014, 1016, 1021, 1025, 1026, 1029, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1055], "issuenumb": 388, "ist": 421, "isupp": 420, "isuru": 1049, "itakura": [417, 543, 545, 552, 1044], "itali": 377, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 88, 107, 139, 141, 145, 148, 156, 188, 213, 217, 223, 236, 248, 249, 251, 260, 270, 276, 280, 326, 333, 355, 373, 380, 381, 382, 389, 413, 468, 531, 566, 567, 593, 594, 596, 637, 817, 882, 904, 905, 924, 931, 959, 998, 1019, 1026], "item_idx": 313, "iter": [2, 47, 54, 55, 67, 80, 104, 113, 121, 124, 135, 138, 141, 144, 146, 147, 149, 150, 151, 170, 183, 185, 195, 196, 223, 230, 260, 261, 265, 268, 281, 284, 308, 310, 311, 315, 324, 333, 335, 336, 343, 380, 382, 386, 388, 389, 393, 394, 407, 412, 415, 417, 419, 421, 424, 441, 444, 445, 447, 449, 451, 452, 453, 456, 458, 463, 465, 466, 467, 475, 476, 482, 486, 487, 488, 520, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 564, 565, 566, 567, 569, 572, 573, 586, 587, 593, 594, 596, 598, 599, 607, 615, 632, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 843, 858, 865, 866, 867, 868, 869, 873, 880, 882, 884, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 924, 952, 953, 960, 961, 962, 963, 971, 995, 996, 1002, 1003, 1005, 1006, 1009, 1010, 1011, 1019, 1020, 1021, 1022, 1026, 1027, 1030, 1032, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056], "iter_minibatch": 47, "iter_offset": 1051, "iter_offset_": 1051, "iterated_pow": [104, 537, 540, 546, 1043], "iterative_impute_scor": 184, "iterativeimput": [2, 182, 184, 185, 384, 403, 494, 570, 585, 633, 634, 635, 644, 650, 677, 831, 852, 870, 1027, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "itergrid": 1039, "itertool": [47, 77, 79, 95, 157, 189, 203, 259, 264, 273, 280, 282, 419], "ith": [501, 779, 783, 845, 866, 867, 882, 883], "ith_cluster_silhouette_valu": 93, "itk": [1047, 1048, 1049], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 88, 98, 99, 109, 111, 113, 116, 118, 119, 126, 133, 135, 141, 144, 146, 148, 151, 161, 170, 172, 177, 179, 188, 189, 191, 193, 195, 204, 228, 232, 233, 237, 242, 249, 251, 252, 254, 256, 258, 263, 264, 267, 272, 276, 278, 280, 282, 287, 293, 295, 299, 300, 315, 325, 335, 340, 347, 352, 354, 355, 358, 362, 363, 368, 369, 373, 374, 375, 376, 380, 381, 382, 384, 385, 388, 392, 393, 394, 395, 398, 400, 403, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 428, 444, 446, 448, 450, 454, 458, 460, 464, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 502, 508, 528, 536, 538, 539, 540, 542, 543, 545, 546, 547, 549, 555, 558, 560, 561, 562, 563, 564, 565, 569, 570, 571, 588, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 649, 650, 676, 677, 679, 690, 691, 692, 693, 697, 701, 704, 713, 730, 734, 735, 741, 742, 746, 783, 786, 788, 802, 803, 805, 830, 837, 838, 840, 851, 852, 853, 855, 856, 857, 859, 860, 861, 868, 869, 873, 878, 881, 882, 884, 901, 902, 905, 909, 910, 917, 919, 935, 936, 941, 948, 975, 995, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1019, 1020, 1021, 1022, 1025, 1030, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "itsaphel": 1055, "itself": [27, 61, 64, 82, 88, 135, 148, 152, 189, 200, 213, 249, 255, 267, 282, 293, 320, 343, 355, 367, 369, 379, 380, 382, 394, 403, 406, 410, 412, 423, 444, 445, 448, 449, 450, 473, 474, 475, 476, 477, 478, 479, 480, 532, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 556, 571, 574, 588, 597, 600, 601, 603, 604, 605, 607, 608, 644, 645, 646, 647, 648, 650, 660, 694, 696, 797, 798, 844, 845, 846, 847, 848, 849, 850, 854, 862, 863, 874, 875, 876, 904, 905, 962, 998, 1002, 1003, 1005, 1009, 1010, 1014, 1025, 1041, 1052], "iv": [187, 1006], "ivan": [1045, 1046, 1049, 1052, 1055], "ivanllt": 1052, "iver": 1043, "iverson": 1002, "ivicajov": 1040, "ivl": 191, "ivt": 539, "iv\u00e1n": [1044, 1050], "iwhalv": 1050, "iwona": 1054, "ix": [50, 282, 349], "iy_j": 1016, "iyer": 1048, "izadifar": 1055, "j": [0, 50, 55, 72, 73, 75, 78, 94, 102, 110, 111, 112, 135, 138, 139, 150, 168, 173, 184, 189, 227, 238, 251, 258, 272, 273, 278, 284, 297, 303, 306, 317, 327, 362, 368, 374, 375, 377, 384, 386, 392, 401, 409, 410, 412, 414, 416, 417, 419, 420, 422, 423, 441, 444, 448, 450, 457, 458, 473, 478, 503, 518, 521, 522, 523, 525, 533, 536, 539, 541, 542, 543, 545, 546, 552, 558, 564, 565, 598, 599, 637, 638, 642, 649, 650, 653, 654, 671, 672, 674, 685, 693, 694, 695, 697, 698, 699, 701, 710, 713, 715, 719, 721, 723, 726, 728, 729, 731, 760, 761, 763, 764, 779, 783, 793, 794, 797, 798, 838, 839, 846, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 880, 889, 890, 917, 918, 995, 996, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "j0rd1smit": 1049, "ja": [415, 1044], "jaccard": [2, 292, 409, 454, 461, 704, 708, 724, 734, 739, 743, 783, 784, 785, 801, 1009, 1045, 1046], "jaccard_scor": [2, 292, 708, 734, 739, 801, 1006, 1046, 1049], "jaccard_similarity_scor": [1039, 1041, 1046], "jaccarddist": 704, "jack": [1039, 1042, 1050, 1051, 1052, 1053, 1055], "jacklangerman": [1045, 1046], "jackman": 1038, "jackmartin": 1043, "jackson": [1043, 1044, 1046], "jacob": [0, 402, 1042, 1043, 1044], "jacobi": 1052, "jacobsen": 1040, "jacopo": [1045, 1046], "jacqu": [1038, 1040], "jaehong": 1047, "jaehyun": 1049, "jaewon": 1045, "jai": [1047, 1051], "jaidev": 1042, "jaim": 1047, "jain": [1043, 1044, 1045, 1049, 1051, 1052], "jair": 1044, "jake": [0, 402, 1024, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1051], "jakemick": 1039, "jakhar": 1049, "jakirkham": [1044, 1045, 1046, 1052, 1053], "jakub": 1054, "jakubek": [1050, 1051], "jalali": [0, 395, 401, 406, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "jalexand3r": 1051, "jamaoui": [1045, 1046, 1049], "jame": [0, 377, 416, 839, 1007, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1054], "jamestwebb": [1039, 1040], "jami": 1045, "jamieson": 995, "jan": [0, 216, 290, 401, 888, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1053], "jana": 1047, "janet": 377, "jane\u017e": [1038, 1039], "janfidor": [1052, 1053], "janhang": 1047, "janin": 1044, "janna": 1043, "jannik": 1050, "janso": 1037, "jansson": [1040, 1052], "januari": [378, 380, 1037, 1038, 1047, 1049, 1052, 1054], "janvanrijn": [1045, 1046], "jaqu": [0, 402, 1037, 1038, 1039, 1040], "jardim": 1050, "jare": 1052, "jarfa": 1043, "jarir": 1050, "jarkko": 701, "jarosch": 1039, "jaroslaw": 1044, "jarrod": [0, 402, 1046, 1053, 1054], "jarvelin": [731, 761, 1006], "jaskowiak": 450, "jason": [44, 417, 540, 905, 1043, 1045, 1049, 1052], "jatin": [1041, 1043], "jauhar": 1051, "jauvin": 1038, "java": [412, 446], "javier": [1041, 1055], "jawahar": 998, "jax": 1054, "jay": 1044, "jaya": 1051, "jayaratn": [1048, 1049, 1052, 1053], "jayratn": 1049, "jayzed82": 1044, "jb": [1053, 1054], "jbdelafoss": 1044, "jbirch": [412, 446], "jblackburn": 1043, "jc": [1044, 1045], "jdcaballero": 1041, "jdethuren": [1045, 1046], "je": 1051, "jean": [1037, 1040, 1041, 1042, 1043, 1044, 1050], "jeann": 1051, "jeanselm": 1047, "jeb": 1045, "jeevan": 1049, "jeff": [1041, 1043, 1050, 1051], "jeffrei": [1040, 1043], "jeffrey04": [1042, 1043], "jelfner": 1051, "jell": 1040, "jen": [663, 1045], "jen09": 417, "jenatton": 417, "jenni": 1051, "jennif": 1050, "jensen": [1043, 1049], "jeong": 1047, "jeremi": [1030, 1042, 1043, 1044, 1045, 1048, 1049], "jeremiedbb": [1045, 1046, 1047], "jeremynixon": 1043, "jeroen": 1043, "jeroenpeterbo": 1049, "jeroko": 1044, "jeromedock": 1047, "jerphanion": [0, 401, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "jerryzhu": 904, "jesper": 1047, "jess": [840, 1007, 1050], "jess010": 1040, "jessica": 1043, "jessicakk0711": 1053, "jesu": [57, 354, 355], "jet": 100, "jevnik": 1042, "jewalikar": 1043, "jf": 1046, "jfraj": 1042, "jha": [1041, 1047, 1051], "jhay": 1049, "jhun": 478, "jia": 1043, "jiacheng": 1044, "jiali": 1042, "jian": 412, "jianbo": [412, 456, 466, 696], "jiang": [410, 1041, 1048], "jianzhu": 1050, "jiawei": [1053, 1054, 1055], "jiaxiang": 1049, "jie": [1045, 1046, 1049], "jiefangxuanyan": 1050, "jigna": 1049, "jihan": 1051, "jill": 1043, "jim": 1039, "jim0421": 1049, "jimenez": [1050, 1051], "jimmi": [866, 867, 1010, 1043, 1045], "jim\u00e9nez": [0, 370, 1045, 1048, 1049, 1050, 1051, 1052], "jin": [644, 1048, 1049], "jindal": 1049, "jinkun": 1045, "jiongyan": 1045, "jiquan": 1010, "jirka": 1051, "jiten": 1052, "jitendra": [412, 456, 466, 696], "jitter": [135, 655, 659, 1048], "jiyuan": 1043, "jjabl": 1045, "jjmistri": 1048, "jk": 1003, "jkarolczak": 1052, "jkleint": [1044, 1045], "jl": [246, 902], "jmlr": [0, 412, 671, 672, 681, 709, 1002, 1021], "jmlr_2014": 697, "jmontoyam": 1044, "jnboehm": 1050, "jnt": 416, "joaak": [1045, 1046], "joan": [1044, 1045, 1046, 1047], "joanna": 1047, "joaquin": 1049, "job": [143, 151, 188, 261, 267, 380, 384, 388, 400, 419, 423, 441, 448, 450, 452, 454, 456, 461, 462, 465, 468, 471, 472, 476, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 607, 612, 613, 615, 639, 644, 662, 693, 694, 695, 696, 697, 698, 699, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 868, 871, 904, 905, 907, 971, 1030, 1056], "joblib": [2, 41, 77, 87, 104, 141, 293, 323, 375, 378, 380, 383, 389, 392, 394, 398, 405, 413, 423, 441, 445, 448, 449, 450, 452, 454, 456, 461, 462, 465, 468, 471, 476, 513, 514, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 855, 857, 859, 860, 862, 863, 868, 869, 870, 871, 904, 905, 971, 972, 975, 990, 1006, 1026, 1032, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1048, 1049, 1052, 1054, 1055, 1056], "joblib_start_method": 392, "jochen": 1039, "jock": 102, "joe": [1042, 1055], "joei": 1053, "joel": [0, 395, 401, 420, 540, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "johann": [1039, 1040, 1045, 1047, 1048, 1051], "johanna": [112, 1055], "johannah": 1043, "johanwork": 1050, "john": [377, 420, 541, 713, 740, 774, 884, 911, 912, 914, 915, 996, 1002, 1006, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1050, 1052, 1053, 1054, 1055, 1056], "johnathanpi": [1052, 1053], "johnson": [37, 185, 241, 313, 317, 372, 493, 507, 885, 897, 901, 902, 903, 1016, 1023, 1027, 1032, 1045, 1051, 1053], "johnson_lindenstrauss_min_dim": [2, 246, 1018, 1038], "johnston": [170, 377, 1002, 1046], "johnstott": 1045, "johnthagen": 1052, "johnwon": 317, "join": [50, 51, 57, 88, 183, 233, 273, 315, 375, 395, 467, 1029, 1037, 1045], "joint": [148, 185, 189, 194, 200, 201, 204, 214, 235, 267, 413, 616, 657, 667, 697, 844, 845, 846, 847, 848, 909, 1002, 1003, 1007, 1011, 1013, 1017, 1027, 1037], "jointli": [25, 209, 280, 412, 417, 1002], "joli": [0, 402, 1038, 1039, 1040, 1041, 1042, 1043], "jon": [354, 1044, 1047, 1048, 1050, 1051, 1054], "jona": [1049, 1054], "jonatan": 1045, "jonathan": [375, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053], "joncral": 1043, "jone": [0, 375, 402, 1037], "jong": 1044, "jonker": [409, 724], "joona": 1037, "jordal": 1043, "jordan": [412, 417, 696, 802, 1047, 1048, 1051, 1052], "jordi": 1043, "jorg": [663, 1040, 1049, 1051], "jori": [0, 401, 1044, 1045, 1046, 1049, 1050], "jose": [170, 377, 663, 1006, 1045, 1047], "joseph": [1040, 1041, 1042, 1043, 1049, 1051, 1052], "josephsalmon": [1044, 1045, 1046], "josh": [420, 1044], "joshi": [1043, 1045, 1051, 1054, 1055], "joshua": [327, 375, 1039, 1040, 1042, 1043, 1049, 1052, 1053], "joshuakennethjon": 1046, "jos\u00e9": [728, 1040, 1050, 1055], "jotasi": 1045, "joudet": [1044, 1045], "journal": [0, 112, 189, 273, 279, 290, 374, 375, 377, 410, 412, 414, 419, 456, 466, 477, 539, 546, 632, 640, 650, 694, 697, 698, 710, 720, 736, 739, 740, 763, 764, 791, 834, 839, 885, 897, 995, 996, 1000, 1002, 1003, 1004, 1007, 1013, 1018, 1020, 1021], "jovan": [1051, 1052], "joydeep": 412, "jo\u00e3o": [1052, 1055], "jo\u00ebl": 1045, "jpcar": 1055, "jpeg": [374, 375, 498, 499], "jpfrancoia": [1043, 1044], "jpg": [511, 589, 592], "jpienaar": 1055, "jpm": 51, "jpmml": 1025, "jpmorgan": [51, 1030], "jr": 1002, "jrenni": 846, "jrfiedler": 1043, "jschendel": [1044, 1045], "jschuerz": 1051, "json": [52, 374, 380, 398], "jth": [779, 783], "juan": [0, 370, 1037, 1048, 1049, 1050, 1051, 1052], "juanfe88": 1052, "judg": [91, 221, 412], "judgment": [264, 1006], "judithabk6": 1048, "juergen": [1047, 1052], "jul": 282, "juli": [170, 377, 421, 739, 890, 1016, 1040, 1044, 1045, 1046, 1055], "julia": [412, 722, 742, 800], "julian": [1044, 1045, 1055], "juliankahnert": 1043, "juliaschoepp": [1052, 1053], "juliathebrav": 1043, "julien": [0, 401, 663, 1002, 1030, 1037, 1040, 1044, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "juliet": 1045, "julietcl": 1045, "julio": 1050, "julyrashchenko": 1050, "jumon": 1048, "jump": [43, 216, 313, 377, 380, 420, 888], "jumpi": 420, "june": [412, 1003, 1043, 1053], "juneja": 1055, "jung": [1044, 1048, 1052], "jungkook": 1042, "jungl": 1003, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 381, 382, 413, 472, 907, 1022, 1025, 1026, 1048, 1051], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362], "jurgen": 1030, "juri": 571, "jurman": 748, "just": [43, 52, 67, 102, 116, 121, 141, 145, 151, 170, 205, 212, 236, 247, 267, 273, 280, 284, 293, 308, 343, 354, 355, 362, 363, 375, 379, 380, 381, 382, 384, 385, 388, 392, 393, 394, 409, 411, 412, 413, 416, 419, 421, 424, 472, 538, 540, 547, 551, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 584, 589, 615, 616, 651, 657, 662, 663, 665, 667, 671, 672, 673, 681, 682, 683, 811, 828, 858, 866, 867, 995, 1002, 1005, 1006, 1007, 1010, 1014, 1016, 1020, 1026, 1037, 1041, 1043, 1045, 1049, 1053], "justglow": 1046, "justif": 681, "justifi": [380, 386, 410, 570], "justin": [1039, 1045, 1049], "jvm": 1050, "jygerardi": [1052, 1053], "j\u00e9r\u00e9mie": [0, 401, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "j\u00e9r\u00f4me": [1046, 1047, 1048, 1054, 1055, 1056], "j\u00eann": 1043, "j\u00f6rg": [412, 454, 461, 1045], "j\u00f6rn": 1044, "j\u00f8rgensen": [1002, 1054], "k": [2, 33, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 80, 82, 83, 86, 88, 89, 93, 96, 98, 106, 107, 111, 119, 121, 127, 128, 135, 137, 144, 148, 152, 154, 155, 157, 158, 161, 163, 166, 167, 170, 173, 175, 176, 180, 181, 184, 185, 188, 189, 190, 191, 196, 198, 199, 203, 209, 212, 227, 229, 246, 248, 250, 251, 252, 258, 261, 269, 273, 276, 277, 282, 283, 286, 287, 293, 295, 298, 299, 300, 301, 302, 304, 305, 306, 314, 315, 316, 317, 320, 322, 326, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 353, 354, 356, 362, 363, 368, 375, 377, 380, 388, 389, 392, 394, 403, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 444, 447, 450, 451, 452, 453, 454, 455, 456, 457, 463, 464, 466, 473, 476, 492, 507, 517, 528, 536, 542, 546, 549, 550, 551, 554, 555, 558, 560, 562, 563, 564, 586, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 636, 644, 645, 653, 655, 656, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 672, 674, 684, 685, 687, 688, 689, 690, 691, 693, 696, 700, 701, 709, 710, 713, 722, 731, 742, 748, 761, 763, 764, 766, 771, 774, 779, 780, 781, 782, 784, 798, 799, 800, 802, 803, 806, 810, 812, 813, 814, 817, 820, 821, 823, 824, 826, 827, 833, 844, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 870, 874, 875, 876, 880, 881, 882, 884, 885, 889, 897, 902, 916, 924, 938, 948, 953, 979, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1019, 1020, 1021, 1022, 1025, 1027, 1031, 1032, 1037, 1038, 1039, 1040, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055], "k0": 1000, "k1": [422, 626, 629], "k1__": 422, "k1__constant_valu": 176, "k1__k1": 422, "k1__k1__constant_valu": 422, "k1__k1__constant_value_bound": 422, "k1__k2": 422, "k1__k2__length_scal": [178, 422], "k1__k2__length_scale_bound": 422, "k2": [422, 626, 629], "k2__": 422, "k2__length_scal": 422, "k2__length_scale_bound": 422, "k_": [409, 422, 621, 624, 626, 629, 779, 998, 1016], "k_1": [2, 422, 626, 629], "k_2": [2, 422, 626, 629], "k_best": [597, 906, 1019, 1054], "k_diag": [617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "k_fit_all_": 875, "k_fit_rows_": 875, "k_fold": 161, "k_gradient": [617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630], "k_init": [447, 463], "k_mean": [2, 97, 389, 394, 1045, 1053], "k_means_cluster_cent": 97, "k_means_elkan": 1045, "k_means_label": 97, "k_new": 875, "k_ret": [849, 850], "k_true": [849, 850], "ka00ri": [1052, 1053], "kachaiev": 1054, "kaczmarzyk": 1054, "kadatatlu": 1050, "kadota": 1051, "kaggl": [156, 393], "kahni": 1049, "kai": [377, 568, 1012, 1044], "kaicheng": 1041, "kaichogami": 1043, "kailasa": [1051, 1052], "kaim": [866, 867], "kaiser": [417, 537], "kakati": 1052, "kalli": [1045, 1046], "kalyan": 1043, "kamalakerdadi": [1042, 1043], "kamar": 1045, "kamchyev": 1054, "kamel": 1037, "kamishima": [1043, 1044], "kamm": 1006, "kanai": [1043, 1044, 1045], "kanazu": [1052, 1053], "kanchimo": 1055, "kang": [1045, 1047], "kania": [1052, 1053], "kanika": 1047, "kanishk": 1052, "kanissh": 1052, "kanji": 1050, "kanniah": [1040, 1041], "kansal": 1043, "kapadni": 1052, "kapeln": [189, 1013], "kapoor": [1045, 1046], "kappa": [2, 541, 721], "kapur": 1044, "kar": 1043, "karan": [1044, 1045, 1046], "karayev": 1039, "karbownik": 1050, "karen": 1050, "karger": [846, 1008], "karhunen": 539, "karin": [632, 996], "karl": 1045, "karlo": [1054, 1055], "karnofski": 1044, "karnowski": 1049, "karol": 1040, "kartik": 1049, "karypi": 412, "kaseorg": 1047, "kashif": 1042, "kasim": 1041, "kaski": 701, "kasper": 1045, "kassa": [1052, 1053], "kastner": [0, 402, 1039, 1040, 1041, 1048, 1049], "kat": 1044, "kataev": [1045, 1046], "kataki": [725, 739, 745, 1006], "katarina": [1047, 1049], "katheleen": 374, "kathi": [1044, 1047], "kathleen": 1044, "kathryn": 1048, "kati": 1044, "katotten": 1051, "katrin": [1045, 1046], "katrina": 1048, "katriopla": 1045, "katyal": 1047, "katz": [1042, 1049, 1050], "kaufmann": [1018, 1022, 1049], "kaushik": [1044, 1051, 1052, 1053, 1055], "kaushik94": 1040, "kawamura": 1050, "kawwa": 1050, "kayawari": 1050, "kaylani2": 1049, "kaynak": 377, "kazmar": 1041, "kb": [103, 188, 189, 267], "kbest": [104, 597], "kbin": [320, 327], "kbinsdiscret": [2, 43, 86, 119, 185, 196, 215, 233, 253, 312, 315, 320, 327, 517, 662, 872, 888, 918, 1016, 1027, 1045, 1049, 1050, 1051, 1053, 1055], "kbinsdiscretizer__n_bin": 315, "kcachegrind": 383, "kd": [298, 412, 418, 1009, 1045, 1046, 1047], "kd_tree": [423, 448, 450, 454, 461, 693, 694, 851, 852, 853, 854, 855, 857, 859, 860, 861, 1009, 1050, 1054], "kdd": [193, 375, 410, 441, 1018], "kdd06_rp": 902, "kddcup": [252, 373, 497, 1032], "kddcup99": [2, 375, 497], "kde": [187, 188, 287, 290, 297, 298, 306, 418, 854], "kdt": 1009, "kdtree": [2, 450, 454, 461, 693, 694, 849, 851, 852, 853, 854, 855, 857, 859, 860, 861, 1039, 1041, 1045, 1049, 1050, 1053, 1054], "ke": [419, 1048, 1049], "kearn": 1040, "keat": [1052, 1053], "keep": [0, 45, 52, 64, 77, 107, 124, 126, 141, 151, 169, 178, 183, 187, 188, 189, 190, 191, 200, 215, 216, 217, 223, 233, 256, 263, 268, 271, 317, 318, 325, 333, 343, 354, 355, 358, 363, 367, 368, 372, 380, 384, 393, 394, 410, 412, 413, 414, 415, 416, 417, 435, 454, 469, 486, 487, 488, 489, 498, 499, 539, 545, 546, 549, 552, 559, 561, 563, 565, 567, 570, 573, 575, 600, 603, 605, 608, 616, 639, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 682, 683, 684, 713, 823, 842, 843, 852, 860, 866, 867, 905, 910, 912, 915, 918, 920, 1002, 1007, 1011, 1014, 1016, 1026, 1029, 1030, 1032, 1037, 1042, 1045, 1046, 1050, 1051, 1053, 1055], "keep_empty_featur": [632, 633, 635, 996, 1052, 1056], "keerti": 1052, "kegl": 1041, "kei": [2, 47, 49, 52, 55, 77, 141, 145, 156, 183, 187, 233, 249, 252, 255, 274, 276, 277, 323, 324, 325, 326, 327, 328, 329, 330, 369, 373, 382, 385, 386, 387, 392, 394, 395, 398, 403, 412, 413, 416, 422, 468, 476, 566, 567, 572, 573, 574, 575, 593, 596, 599, 622, 631, 637, 639, 664, 716, 805, 808, 809, 817, 819, 827, 832, 868, 869, 924, 940, 970, 1014, 1026, 1032, 1034, 1043, 1049, 1050, 1052, 1053, 1055], "keith": [354, 1037, 1042], "kekalainen": [731, 761, 1006], "kelkar": [1044, 1045, 1047], "kelleh": [713, 1006], "kelleher2015": 1006, "kellei": [375, 1039, 1040], "keller": 1049, "kellogg": 51, "kellycarmodi": 1047, "kemal": [0, 1039, 1040], "kemenad": 1048, "kemk": 1048, "ken": [377, 1039, 1046], "ken4git": 1051, "kendal": 1052, "kendrick": 1049, "kennedi": [1044, 1047, 1054], "kennel": 1048, "kenneth": [1018, 1037, 1038, 1043, 1044, 1051, 1052], "kenni": 1049, "kensuk": 1047, "kent": 57, "kenta": 1040, "kento": [1052, 1053], "kept": [64, 263, 293, 350, 374, 406, 422, 501, 540, 543, 545, 546, 552, 602, 615, 616, 624, 625, 649, 700, 802, 803, 936, 1016, 1045, 1046], "kera": [392, 1025], "kerimov": [1044, 1045], "kernal": 126, "kernc": [1037, 1051, 1052], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 84, 106, 116, 120, 122, 130, 133, 157, 163, 168, 171, 173, 174, 175, 176, 179, 183, 198, 199, 216, 229, 241, 242, 250, 254, 266, 271, 273, 275, 278, 279, 283, 288, 294, 299, 304, 318, 325, 334, 337, 338, 340, 341, 343, 344, 345, 346, 348, 351, 363, 367, 372, 382, 392, 394, 400, 410, 412, 413, 416, 419, 420, 435, 444, 452, 456, 465, 466, 469, 486, 487, 488, 495, 501, 503, 507, 509, 519, 538, 539, 540, 546, 549, 559, 561, 563, 565, 567, 570, 573, 575, 598, 599, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 636, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 682, 683, 684, 693, 695, 696, 697, 700, 740, 763, 764, 766, 771, 772, 779, 780, 781, 782, 805, 811, 816, 819, 835, 837, 842, 843, 849, 850, 852, 854, 860, 867, 869, 870, 875, 879, 881, 882, 884, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 918, 920, 926, 995, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1019, 1020, 1027, 1028, 1031, 1032, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "kernel_": [172, 173, 174, 175, 176, 177, 178, 179, 181, 615, 616], "kernel__length_scal": 172, "kernel__period": 172, "kernel_approxim": [2, 43, 183, 185, 192, 193, 229, 242, 247, 324, 643, 644, 645, 646, 647, 682, 763, 764, 875, 998, 1027, 1038, 1044, 1054], "kernel_dens": [849, 850], "kernel_label": 349, "kernel_metr": [2, 644, 645, 646, 647], "kernel_param": [456, 540, 644, 648], "kernel_pca": [44, 126, 413], "kernel_pca_": 693, "kernel_pca_back_proj_ax": 126, "kernel_pca_proj_ax": 126, "kernel_ridg": [2, 172, 248, 648, 1007, 1041], "kernel_ridge_tun": 172, "kernel_svm": 247, "kernel_svm_scor": 247, "kernel_svm_tim": 247, "kernelapproximationkernel": 400, "kernelcenter": [2, 408, 1016, 1047, 1051, 1053, 1054], "kerneldens": [2, 297, 298, 306, 418, 1039, 1045, 1046, 1050, 1051, 1052], "kernelpca": [2, 44, 413, 417, 538, 539, 546, 549, 693, 695, 697, 875, 1016, 1038, 1039, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "kernelridg": [2, 126, 172, 248, 677, 999, 1007, 1041, 1054], "kertesz": 1051, "keshat": [671, 672, 1002], "keshavan": 1047, "kesshi": [1047, 1048], "kevad": 1047, "kevin": [648, 1039, 1041, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1054], "kevlani": 1045, "keyber": 1055, "keyerror": [924, 1047], "keyword": [354, 374, 380, 382, 385, 387, 394, 412, 423, 426, 442, 448, 449, 454, 456, 461, 468, 471, 501, 508, 540, 543, 545, 564, 565, 572, 573, 574, 575, 625, 636, 637, 644, 648, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 693, 697, 702, 703, 704, 705, 706, 707, 779, 783, 784, 785, 786, 797, 798, 811, 828, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 869, 873, 948, 972, 995, 1003, 1006, 1009, 1019, 1037, 1041, 1043, 1044, 1045, 1047, 1049, 1051, 1052, 1053, 1054, 1055], "kf": [416, 810], "kfold": [2, 87, 141, 147, 161, 268, 278, 363, 416, 441, 476, 572, 573, 599, 607, 652, 656, 658, 660, 666, 668, 670, 678, 805, 808, 809, 811, 813, 815, 819, 824, 826, 828, 829, 830, 831, 832, 833, 834, 836, 840, 843, 890, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1055], "khaja": 1052, "khan": [1052, 1053], "khandelw": 1049, "khanduja": 1040, "khant": 1052, "kharsa": 1051, "khedkar": 1051, "khine": 1051, "kho": 1052, "khoo": 1049, "khosasi": 1050, "khosrow": 1006, "khoual": 1050, "khwaja": 1052, "ki": 1006, "kian": [1042, 1052, 1053, 1054], "kid": 1016, "kieker": [1045, 1046], "kielczewski": 1043, "kie\u00dfl": 1048, "kilian": [420, 1052, 1053], "kill": [354, 392], "killer": [380, 1030], "kilobyt": 86, "kilomet": 769, "kim": [1002, 1045, 1046, 1047, 1051], "kimayoung": 1051, "kimberli": 51, "kimbinyi": 1049, "kind": [43, 48, 51, 52, 61, 62, 107, 129, 141, 156, 165, 188, 189, 263, 266, 267, 269, 282, 320, 324, 327, 340, 343, 354, 368, 369, 373, 375, 380, 382, 386, 392, 393, 410, 412, 415, 416, 417, 419, 420, 421, 492, 493, 508, 513, 514, 526, 529, 593, 637, 638, 706, 945, 1002, 1008, 1013, 1022, 1040, 1049, 1051, 1052, 1053], "king": 940, "kingjr": 1043, "kingma": [866, 867, 1010], "kink": 204, "kiragu": 1049, "kiran": 1049, "kirandevraj": 1052, "kiril": [1044, 1045, 1047, 1049], "kirkbi": [1044, 1045], "kirkham": [1042, 1043, 1045], "kirthi": 1047, "kishan": 1054, "kishimoto": 1049, "kishor": 1050, "kislovskii": 1054, "kit": 392, "kitchen": [646, 998], "kj": [374, 1008], "kjell": 1043, "kk": 1006, "kl": [417, 1003, 1045], "kl_divergence_": [697, 1044], "klarup": 1044, "klass": 98, "klau": [417, 540, 875], "kleczewski": [1044, 1045], "kleiber": 1051, "klevebr": 1045, "klima": 1052, "klopfer": 1046, "kluge": [1052, 1053], "kluger": [2, 409, 455, 518], "klusacek": 1006, "km": [94, 326, 355], "kmatt10": 1050, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 83, 86, 90, 91, 94, 185, 261, 264, 316, 326, 355, 389, 403, 412, 438, 439, 440, 444, 447, 452, 453, 456, 466, 517, 715, 797, 798, 802, 803, 874, 1009, 1016, 1026, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "kmeans_estim": 121, "kmeans_model": 412, "kmeans_plusplu": [2, 92, 412, 1049, 1054], "kmode": 1025, "kms15": [1045, 1046], "knee": 412, "kneighbor": [318, 326, 851, 852, 853, 855, 857, 1009, 1041, 1046, 1050, 1051, 1052, 1053], "kneighbors_graph": [2, 74, 79, 95, 100, 293, 394, 412, 445, 449, 700, 851, 852, 853, 855, 857, 859, 860, 861, 863, 1009, 1037, 1041, 1046], "kneighborsclassifi": [2, 67, 157, 162, 295, 296, 301, 302, 318, 324, 326, 354, 419, 607, 852, 856, 857, 858, 859, 860, 1007, 1009, 1037, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "kneighborsclassifierkneighbor": 400, "kneighborsregressor": [2, 183, 251, 305, 326, 419, 575, 851, 857, 859, 860, 1007, 1009, 1037, 1039, 1041, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "kneighborstransform": [2, 293, 295, 322, 697, 861, 1009, 1047, 1051, 1052], "knight": 319, "knn": [138, 157, 162, 183, 296, 301, 302, 305, 318, 324, 334, 354, 419, 607, 858, 904, 905, 1009, 1019, 1043], "knn__weight": 296, "knn_graph": 74, "knn_impute_scor": 184, "knnimput": [2, 184, 322, 632, 635, 996, 1047, 1048, 1051, 1052, 1053, 1054, 1056], "knnquerybatch": 293, "knot": [43, 216, 325, 888, 1016, 1050], "know": [86, 99, 167, 170, 172, 181, 188, 233, 249, 250, 267, 273, 286, 290, 292, 326, 332, 350, 355, 367, 380, 392, 403, 406, 412, 415, 416, 417, 420, 505, 509, 515, 651, 657, 663, 664, 731, 761, 805, 819, 894, 895, 897, 898, 899, 900, 917, 918, 919, 920, 995, 1005, 1006, 1007, 1009, 1018, 1043, 1044, 1047, 1049], "knowledg": [90, 143, 151, 188, 232, 252, 267, 273, 286, 287, 375, 380, 383, 386, 393, 394, 412, 416, 419, 423, 448, 516, 560, 561, 568, 725, 741, 745, 788, 838, 1006, 1007, 1018, 1055], "known": [2, 50, 55, 62, 64, 74, 82, 90, 91, 112, 129, 130, 156, 177, 179, 184, 200, 215, 216, 233, 242, 267, 273, 275, 282, 302, 306, 314, 325, 330, 332, 340, 347, 355, 369, 375, 377, 378, 380, 388, 392, 394, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 422, 442, 467, 486, 488, 503, 513, 514, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 593, 594, 596, 599, 614, 627, 638, 663, 664, 677, 687, 688, 699, 709, 715, 718, 723, 734, 748, 760, 762, 800, 838, 844, 845, 846, 847, 848, 851, 856, 859, 865, 893, 917, 918, 919, 920, 953, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1021, 1022], "known_val": 632, "knox": 1049, "knp": 632, "knr": 419, "knyazev": [412, 456, 466, 700, 1047, 1050, 1051], "ko": [51, 63, 173], "kobak": [697, 1050], "kobaski": 1050, "kobayashi": [1049, 1050], "kober": 1045, "kobi": 740, "koch": [1039, 1045, 1046, 1048, 1049], "kocot": 1048, "koehler": 1041, "koen": [1045, 1046], "koenker": [728, 1002], "koh": [1002, 1030], "kohavi": 416, "kohli": [1054, 1055], "koi8": 420, "koivunen": 112, "kokhlikyan": [1044, 1045], "koki": 1049, "koko": [1045, 1051, 1052], "kolawol": 1050, "kolganov": 1042, "kolh": 1039, "kolstad": 57, "komarov": 1055, "komey": [1051, 1052], "kommireddi": 1051, "kondratyev": 1051, "kong": 1050, "konstantin": [1042, 1043, 1044], "konstantino": [1045, 1054], "konwar": 1048, "koonc": 1045, "korba": 375, "korean": 1025, "kornel": 1043, "kornev": 1052, "korobko": [1054, 1055, 1056], "korobov": [1038, 1039, 1040, 1043, 1044], "korolev": 1047, "kosic": 1049, "kosobrodov": 1045, "kossaifi": [1037, 1041, 1042], "kossen": [1052, 1053], "kossori": [1045, 1046], "kostelac": [1052, 1053], "kot271828": 1050, "kothari": 1048, "kotwalia": [1045, 1046], "koumenti": 1052, "koushik": 1051, "koustav": [1054, 1055], "kovalevskyi": 1043, "kowalski87": 1040, "koyama": 1051, "kozachenko": [612, 613], "kozynet": [1049, 1051], "kpca": [2, 538, 539, 540, 1031, 1032, 1037], "kr": [248, 273, 1051], "kr_fit": 248, "kr_predict": 248, "kraig": 1052, "kraktu": 1055, "kranthi": 1051, "kranz": 1030, "kraskov": [612, 613], "krasouli": [1044, 1045, 1046, 1047, 1049, 1050], "kratzwald": 1043, "krawczyk": 1051, "krawutschk": [1052, 1053], "krell": [1041, 1043], "kriegel": [412, 423, 448, 454, 461, 855, 1012], "krinitsyn": 1045, "krishna": [1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "krishnachaitanya9": 1048, "krishnakalyan3": 1043, "krishnan": 1047, "krivich": [1043, 1044, 1046], "kronovet": 1042, "krr": [248, 648, 999], "krsto": 1055, "krum": [1049, 1051], "krumetoft": 1051, "krump": 1042, "kruskal": [640, 695, 699, 1003], "krzeminski": 1044, "krzysztof": 374, "ksemb": 1045, "kshitij": [1052, 1053, 1055], "ksvd": [669, 690, 691, 1002], "ksvm": 193, "ksvm_score": 193, "ksvm_time": 193, "kth": [57, 826], "ku": [1041, 1042], "kuai": [1045, 1046], "kubin": 1048, "kuhlmann": [1044, 1045], "kulbear": 1046, "kulkarni": 1045, "kull": [410, 1006], "kullback": [54, 235, 417, 543, 545, 552, 697, 1003, 1044], "kulsinski": [454, 461, 704, 783, 784, 785], "kulsinskidist": [704, 1053], "kumar": [0, 170, 375, 402, 412, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "kumaresshan": [1045, 1046, 1049], "kumawat": 1051, "kund": [1053, 1054], "kunj": 1050, "kuno": 1055, "kuo": 1041, "kurumeyuta": 1050, "kurz": [1051, 1052], "kusanagi": [1048, 1050], "kusanagi2": 1049, "kushal": [1045, 1046], "kushan": 1054, "kushwah": [1053, 1054], "kushwaha": 1049, "kusterl": 1047, "kuth": 1043, "kvam": [1038, 1040], "kvle": 1043, "kw_arg": [140, 873, 1016, 1043], "kwarg": [76, 124, 249, 382, 387, 426, 430, 434, 442, 446, 452, 454, 468, 473, 540, 543, 545, 568, 636, 651, 652, 657, 658, 665, 666, 667, 668, 682, 686, 689, 703, 704, 705, 707, 747, 868, 869, 873, 913, 924, 965, 971, 973, 994, 1044, 1048, 1050, 1054], "kwd": [776, 779, 783, 786, 797, 798], "kwei": [1040, 1041, 1042, 1043, 1044], "kxytim": 1050, "kybernetika": 377, "kye": 1045, "kyeongpil": 1045, "kyle": [0, 402, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049], "kyledrogo": 1045, "kyler": 1042, "k\u00e4rkk\u00e4inen": 1002, "l": [0, 46, 53, 55, 75, 80, 81, 99, 100, 112, 138, 170, 190, 207, 210, 219, 224, 225, 278, 279, 280, 290, 309, 317, 350, 377, 378, 386, 388, 409, 410, 412, 416, 417, 419, 422, 478, 521, 522, 523, 543, 545, 552, 560, 561, 562, 563, 570, 571, 595, 612, 613, 615, 616, 620, 624, 627, 628, 639, 653, 654, 663, 674, 677, 679, 685, 692, 694, 697, 698, 710, 720, 730, 731, 736, 761, 791, 846, 880, 917, 918, 919, 920, 995, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1014, 1018, 1020, 1022, 1040, 1045, 1049, 1050, 1051, 1052, 1054], "l1": [2, 25, 42, 46, 55, 66, 75, 99, 113, 115, 185, 194, 195, 201, 202, 203, 204, 209, 219, 226, 230, 244, 274, 286, 293, 310, 325, 389, 392, 412, 414, 417, 445, 449, 454, 461, 468, 473, 474, 475, 476, 477, 478, 479, 480, 482, 501, 507, 509, 536, 542, 543, 544, 545, 547, 548, 552, 553, 563, 570, 594, 595, 596, 602, 649, 650, 651, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 677, 681, 682, 683, 684, 686, 693, 740, 767, 773, 778, 783, 784, 785, 790, 819, 826, 835, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 881, 889, 896, 909, 910, 916, 918, 920, 938, 987, 1002, 1004, 1006, 1009, 1016, 1020, 1021, 1022, 1027, 1042, 1044, 1050, 1053], "l1_color": 226, "l1_contour": 226, "l1_distanc": 1037, "l1_min_c": [2, 208, 1002, 1021, 1037], "l1_plot": 231, "l1_ratio": [46, 49, 54, 200, 203, 206, 281, 286, 367, 392, 417, 543, 545, 552, 651, 652, 657, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 1002, 1020, 1038, 1040, 1042, 1049, 1051], "l1_ratio_": [652, 664, 666], "l1_ratios_": 664, "l2": [2, 53, 66, 75, 113, 115, 185, 187, 188, 194, 195, 200, 203, 206, 208, 211, 215, 220, 226, 230, 231, 233, 274, 286, 293, 313, 320, 336, 354, 355, 382, 389, 392, 412, 414, 417, 419, 420, 445, 449, 454, 461, 529, 543, 545, 552, 563, 566, 567, 570, 594, 595, 596, 648, 651, 652, 653, 654, 657, 662, 663, 664, 665, 666, 667, 668, 673, 674, 677, 681, 683, 685, 686, 691, 692, 693, 740, 755, 766, 767, 783, 784, 785, 819, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 866, 867, 881, 889, 896, 909, 910, 914, 915, 916, 918, 920, 988, 995, 999, 1002, 1004, 1009, 1010, 1016, 1020, 1022, 1027, 1039, 1041, 1042, 1044, 1046], "l2014": 419, "l2_color": 226, "l2_contour": 226, "l2_regular": [325, 419, 566, 567], "l_": [409, 616, 657, 746, 1006], "l_i": 1016, "l_inf": 55, "l_m": 419, "l_p": [454, 461, 693, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863], "l_x": 53, "la": [0, 319, 377, 401, 1030, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lab": [0, 375, 472, 541, 907, 1030, 1048], "labb\u00e9": 1055, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 105, 107, 109, 110, 111, 112, 115, 116, 119, 123, 125, 127, 128, 129, 130, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 166, 168, 172, 173, 177, 178, 179, 180, 181, 183, 185, 188, 191, 193, 195, 196, 198, 199, 200, 202, 204, 205, 209, 215, 216, 217, 218, 221, 222, 223, 224, 225, 229, 230, 232, 233, 236, 237, 238, 242, 243, 247, 248, 250, 252, 253, 260, 266, 267, 268, 271, 272, 274, 275, 276, 277, 279, 282, 283, 284, 285, 286, 287, 288, 292, 298, 300, 302, 305, 309, 311, 313, 314, 318, 322, 323, 326, 329, 331, 335, 336, 337, 345, 347, 349, 350, 354, 355, 358, 359, 360, 361, 369, 372, 373, 374, 379, 380, 382, 384, 385, 389, 394, 395, 409, 410, 411, 422, 423, 429, 430, 434, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 466, 469, 473, 491, 492, 493, 498, 499, 500, 501, 507, 508, 513, 514, 517, 519, 520, 524, 527, 528, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 597, 598, 599, 600, 601, 603, 604, 605, 609, 610, 611, 614, 615, 636, 663, 664, 671, 672, 673, 678, 679, 680, 681, 682, 683, 702, 703, 705, 707, 708, 709, 710, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 727, 730, 731, 732, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 748, 759, 760, 761, 762, 787, 788, 789, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 819, 820, 821, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 858, 859, 866, 867, 869, 873, 876, 877, 880, 882, 883, 890, 893, 904, 905, 906, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 925, 929, 935, 940, 941, 968, 969, 976, 995, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1020, 1021, 1022, 1025, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "label1": 394, "label2": 394, "label_a": 282, "label_b": 282, "label_binar": [2, 280, 282, 876, 1041], "label_binarizer_": 838, "label_distributions_": [332, 333, 904, 905, 1048], "label_im": 99, "label_out": 78, "label_pr": [722, 741, 742, 760, 762, 800], "label_prop_model": [904, 905], "label_propag": 1038, "label_ranking_average_precision_scor": [2, 1006, 1041, 1045, 1046, 1052], "label_ranking_loss": [2, 1006, 1042], "label_spread": 334, "label_tru": [709, 722, 742, 760, 762, 800], "labelbinar": [2, 282, 394, 727, 746, 838, 873, 882, 890, 893, 1007, 1040, 1041, 1042, 1046, 1051], "labelbottom": [159, 273], "labeled_iter_": [335, 906], "labelencod": [2, 394, 574, 883, 1017, 1037, 1045, 1052, 1053, 1056], "labeling1": 1006, "labeling2": 1006, "labelkfold": [1042, 1043], "labelleft": 258, "labelpad": 273, "labelpropag": [2, 326, 334, 905, 906, 1007, 1019, 1038, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053], "labels": [54, 317], "labels_": [73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 100, 326, 328, 355, 380, 394, 412, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 715, 1042], "labels_050": 98, "labels_200": 98, "labels_a": 72, "labels_b": 72, "labels_pr": [412, 709, 710, 719, 720, 722, 736, 741, 742, 760, 762, 791, 800], "labels_tru": [73, 82, 88, 97, 412, 709, 710, 719, 720, 722, 736, 741, 742, 760, 762, 791, 800], "labels_uniqu": 96, "labelshufflesplit": [1042, 1043], "labelspread": [2, 326, 332, 333, 334, 336, 337, 904, 906, 1007, 1019, 1038, 1043, 1044, 1047, 1048, 1051, 1052, 1053], "labelspreadingifittedlabelspread": 334, "labex": 0, "labl": 151, "laboratori": [375, 1025], "lacchia": 1044, "lack": [43, 64, 347, 380, 392, 416, 834, 924, 1021, 1051], "lacost": [663, 1002], "lacouth": 1050, "lacrosse91": 1050, "lad": 1050, "lag": [42, 43, 148, 151, 185, 217, 496, 567, 706, 747, 750, 751, 753, 795, 826, 831, 832, 835, 1027], "lagacheri": 1041, "lagard": 1040, "lagat": 1047, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 318, 347, 1012], "laid": [0, 187, 380], "lakhotia": [1047, 1048], "lakshmi": 1047, "lakshmikanth": 1044, "lakshya": [1045, 1046, 1047], "lal": 905, "lalliacqua": [1047, 1050], "lam": [323, 324, 1048, 1055], "lama": 499, "lamb": [1042, 1050], "lambda": [43, 46, 47, 49, 57, 89, 147, 196, 233, 273, 274, 317, 336, 406, 408, 412, 417, 419, 420, 649, 650, 651, 652, 873, 885, 998, 1002, 1016, 1045, 1051], "lambda_": [196, 649, 650, 885, 1002, 1044], "lambda_1": [649, 650, 1002], "lambda_2": [649, 650, 1002], "lambda_i": [1002, 1016], "lambda_init": [195, 196, 650, 1002, 1047], "lambdas_": [317, 885, 1050, 1053], "lami": 1045, "lamond": 1041, "lamp": 1030, "lamu": 1043, "lan": [663, 1052, 1053], "land": [50, 306, 384, 395, 419], "land_mask": 306, "land_refer": [50, 306], "landeau": 1054, "landmark": [886, 898, 1016], "landscap": 173, "lane": 1043, "langford": [420, 693, 1003], "langl": [998, 1006, 1020, 1021], "languag": [0, 356, 385, 417, 420, 1020, 1025, 1026, 1030], "language_level": 381, "lanigan": 1044, "lanl": 55, "lannuzel": 1049, "lanterni": 1051, "lanzani": 1043, "lapack": [367, 368, 378, 537, 540, 546, 693, 1052], "lapack_lit": 386, "lapack_svd_driv": 1052, "laplac": [2, 173, 422, 615, 616, 844, 845, 846, 848, 1008], "laplacian": [2, 235, 372, 409, 444, 456, 466, 625, 644, 648, 696, 700, 770, 771, 779, 905, 1002, 1003, 1019, 1032, 1038, 1043], "laplacian_kernel": [2, 770, 1004, 1042], "laptop": [52, 388, 472, 907, 1051, 1052, 1053], "lar": [0, 2, 124, 170, 185, 194, 200, 201, 204, 206, 209, 377, 402, 475, 476, 482, 506, 536, 542, 544, 547, 548, 550, 551, 553, 656, 657, 658, 659, 660, 661, 668, 669, 670, 683, 686, 687, 688, 689, 690, 691, 1007, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1055], "laradji": [0, 1043], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 81, 82, 83, 85, 86, 88, 105, 107, 121, 125, 138, 140, 141, 148, 151, 152, 154, 166, 177, 178, 190, 191, 195, 196, 204, 206, 215, 217, 219, 220, 221, 233, 247, 252, 267, 270, 276, 279, 282, 295, 302, 310, 313, 315, 325, 326, 329, 343, 348, 350, 355, 356, 367, 375, 380, 386, 389, 392, 393, 394, 398, 406, 412, 414, 416, 417, 418, 419, 421, 423, 425, 446, 448, 450, 451, 454, 455, 456, 457, 462, 466, 477, 479, 504, 519, 539, 541, 543, 545, 546, 549, 552, 554, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 587, 594, 639, 646, 648, 651, 652, 655, 657, 658, 659, 662, 663, 664, 669, 676, 677, 679, 682, 684, 690, 692, 694, 696, 697, 698, 700, 751, 784, 785, 805, 813, 815, 819, 823, 834, 844, 845, 846, 847, 848, 849, 850, 855, 866, 867, 874, 878, 879, 887, 889, 901, 902, 909, 910, 914, 915, 917, 918, 919, 920, 952, 953, 995, 998, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1014, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "larger": [43, 46, 64, 72, 74, 77, 81, 88, 111, 113, 119, 130, 138, 149, 151, 173, 178, 179, 184, 188, 189, 193, 196, 200, 230, 231, 232, 240, 246, 248, 258, 264, 267, 274, 276, 282, 283, 290, 293, 295, 308, 309, 311, 313, 343, 347, 355, 356, 373, 375, 380, 386, 394, 409, 410, 412, 413, 414, 416, 417, 419, 420, 422, 444, 447, 453, 454, 456, 458, 460, 520, 532, 546, 549, 566, 567, 568, 572, 573, 587, 594, 648, 657, 677, 678, 679, 680, 684, 692, 697, 709, 724, 741, 802, 854, 855, 886, 888, 889, 890, 898, 903, 952, 953, 976, 979, 998, 999, 1002, 1003, 1005, 1006, 1009, 1010, 1014, 1016, 1020, 1021, 1041, 1042, 1045, 1046, 1047, 1050, 1051, 1054, 1055, 1056], "largest": [113, 123, 141, 170, 217, 377, 412, 414, 417, 447, 532, 546, 562, 563, 564, 565, 569, 570, 593, 714, 802, 803, 824, 847, 879, 917, 918, 919, 920, 953, 1003, 1006, 1016, 1021, 1022], "largest_clust": [412, 447], "largest_coef": [113, 532], "larrald": 1054, "lars_path": [2, 203, 389, 536, 542, 544, 547, 548, 550, 551, 553, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 688, 689, 690, 691, 1002, 1037, 1039, 1042, 1046, 1048], "lars_path_gram": [2, 687, 1002, 1046], "larscv": [2, 403, 655, 670, 687, 688, 1044, 1050, 1054], "larson": [1042, 1046, 1047, 1049, 1051], "larsson": [1049, 1050, 1051], "lasagna": 1043, "laska": 1043, "lasso": [2, 42, 55, 99, 130, 156, 161, 185, 188, 194, 206, 214, 223, 263, 325, 329, 350, 367, 392, 414, 415, 417, 419, 420, 421, 475, 476, 482, 506, 529, 536, 542, 544, 547, 548, 550, 551, 553, 602, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 675, 677, 683, 686, 687, 688, 689, 690, 691, 726, 728, 729, 830, 831, 832, 870, 889, 995, 1006, 1007, 1020, 1027, 1028, 1032, 1037, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1051, 1055], "lasso_cd": [536, 542, 547, 553], "lasso_cv": 161, "lasso_lar": [130, 536, 542, 547, 553, 1047], "lasso_lars_": [202, 204], "lasso_path": [2, 203, 656, 657, 658, 659, 660, 661, 668, 687, 688, 1002, 1037, 1039, 1041, 1050], "lasso_pipelin": 156, "lassocolumntransform": 156, "lassocv": [2, 53, 156, 161, 188, 200, 204, 403, 419, 421, 656, 657, 659, 660, 661, 668, 689, 1002, 1037, 1040, 1044, 1047, 1048, 1050, 1051, 1054, 1055, 1056], "lassocvlassocv": 156, "lassolar": [2, 656, 657, 658, 660, 661, 668, 669, 670, 687, 688, 689, 1002, 1007, 1037, 1038, 1040, 1044, 1047, 1048, 1050], "lassolars": [2, 202, 204, 421, 656, 659, 660, 1002, 1037, 1044, 1046, 1050, 1051], "lassolarscv": [2, 204, 403, 421, 657, 658, 659, 661, 668, 670, 687, 688, 689, 1002, 1037, 1044, 1050, 1054], "lassolarsic__criterion": [202, 204], "last": [43, 58, 79, 91, 148, 188, 195, 215, 216, 223, 228, 242, 264, 276, 284, 285, 318, 324, 326, 335, 358, 367, 375, 378, 382, 384, 385, 388, 394, 398, 406, 412, 413, 420, 424, 442, 446, 451, 463, 468, 471, 472, 520, 538, 564, 565, 566, 567, 588, 589, 592, 598, 599, 602, 615, 687, 688, 690, 691, 702, 703, 705, 706, 707, 712, 787, 802, 803, 808, 809, 824, 849, 850, 854, 869, 870, 874, 882, 888, 924, 956, 980, 994, 995, 1001, 1002, 1003, 1005, 1007, 1010, 1020, 1026, 1037, 1043, 1044, 1045, 1046, 1051, 1053, 1054], "last_hour": [43, 52], "last_mean": 980, "last_n": 980, "last_var": 980, "lat": [50, 306, 503, 769], "late": [319, 369], "latenc": [42, 46, 47, 185, 366, 529, 570, 677, 683, 835, 889, 915, 970, 979, 1025, 1027, 1032, 1040], "latent": [2, 42, 45, 55, 131, 185, 311, 355, 415, 420, 422, 492, 537, 541, 543, 544, 545, 548, 549, 593, 596, 865, 1005, 1025, 1027, 1031, 1032, 1039, 1042], "latentdirichletalloc": [2, 54, 369, 385, 417, 1025, 1042, 1044, 1051, 1052], "later": [0, 50, 86, 135, 140, 149, 172, 189, 193, 195, 252, 267, 290, 306, 356, 363, 378, 386, 392, 393, 406, 419, 855, 878, 879, 887, 889, 998, 1016, 1040, 1043, 1045, 1049], "latest": [322, 323, 324, 325, 326, 327, 328, 329, 330, 378, 380, 384, 386, 388, 1022, 1051], "latestst": 384, "latex": 1037, "latexpdf": 380, "latin": [47, 420], "latitud": [306, 313, 375, 503, 704, 769], "lattarini": 1039, "latter": [43, 54, 263, 273, 282, 283, 301, 318, 350, 369, 377, 394, 411, 416, 419, 420, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 747, 802, 803, 804, 805, 808, 809, 814, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 972, 1009, 1014, 1046], "laughlin": 1044, "launch": [354, 355, 398, 1030], "laur": 1037, "lauren": [0, 364, 697, 701, 1003, 1049, 1052], "laurent": [1040, 1041, 1044, 1045, 1052, 1053], "laurenz": 1049, "lauritzen": 1045, "laveen": 1050, "law": 1030, "lawrenc": 267, "lawson": [1044, 1045, 1046], "lawton": 1045, "layer": [2, 43, 67, 144, 154, 163, 174, 176, 185, 222, 231, 253, 307, 310, 311, 315, 316, 337, 348, 367, 388, 419, 519, 520, 527, 572, 835, 865, 866, 867, 870, 889, 1011, 1027, 1028, 1032, 1043], "layout": [135, 313, 392, 909, 910, 911, 914, 936, 1021, 1040, 1042, 1054], "layton": [0, 402, 1037, 1038, 1039, 1040, 1042], "lazaru": 1055, "lazebnik": [763, 764, 1004], "lazi": [52, 395, 420, 1020, 1041], "lazyfram": 105, "lazz": 1052, "lb": [876, 1017], "lbfg": [308, 382, 653, 654, 663, 664, 674, 677, 679, 685, 692, 840, 843, 866, 867, 1002, 1010, 1041, 1042, 1044, 1045, 1050, 1051, 1052, 1054, 1056], "lbfgsb": 663, "lbfin": 1047, "lc": [51, 238, 245], "lceil": [409, 1012], "lda": [54, 69, 118, 120, 123, 125, 127, 131, 185, 302, 363, 377, 408, 509, 541, 546, 554, 555, 858, 1025, 1027, 1028, 1031, 1032, 1042], "lda_featur": 385, "lda_model": 385, "lda_np": 408, "ldavid": 1043, "ldflag": 378, "ldirer": 1044, "ldl": [170, 377], "ldot": [1002, 1006, 1008, 1010, 1020], "ldwy4": [1054, 1055], "le": [663, 877, 997, 1002, 1009, 1017, 1019, 1045, 1049, 1050, 1054], "le_": 574, "lead": [0, 46, 62, 64, 67, 72, 85, 88, 94, 104, 141, 145, 146, 148, 169, 170, 188, 189, 190, 195, 200, 204, 206, 215, 219, 247, 249, 252, 267, 273, 274, 276, 280, 286, 298, 299, 310, 313, 315, 318, 319, 324, 343, 350, 355, 358, 363, 367, 368, 374, 379, 388, 389, 393, 394, 409, 410, 411, 412, 414, 416, 417, 418, 419, 421, 456, 466, 469, 472, 501, 520, 532, 540, 543, 544, 545, 548, 552, 556, 562, 563, 564, 565, 568, 569, 570, 571, 611, 635, 651, 652, 655, 657, 658, 659, 665, 666, 667, 668, 684, 696, 700, 751, 802, 808, 809, 837, 849, 850, 854, 873, 880, 890, 901, 902, 907, 909, 917, 918, 919, 920, 995, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1016, 1019, 1020, 1022, 1030, 1040, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "leader": [380, 1030], "leadership": 0, "leaf": [76, 140, 152, 154, 358, 362, 412, 419, 423, 445, 446, 447, 448, 449, 450, 454, 461, 467, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 917, 918, 919, 920, 921, 922, 1009, 1022, 1040, 1042, 1044, 1048, 1051], "leaf_id": 362, "leaf_rot": 191, "leaf_siz": [423, 448, 450, 454, 459, 460, 461, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 1009], "leagu": 375, "leak": [140, 278, 354, 363, 413, 416, 869, 894, 895, 897, 898, 899, 900, 1016, 1037, 1044, 1047, 1053, 1054, 1055], "leakag": [393, 394, 413, 1032], "lean": 406, "leandro": [1046, 1050], "lear": 1030, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 368, 372, 373, 374, 375, 377, 379, 383, 386, 387, 388, 389, 393, 394, 397, 399, 400, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 420, 421, 422, 426, 427, 429, 430, 431, 432, 434, 435, 436, 441, 442, 443, 446, 447, 450, 451, 453, 454, 461, 468, 469, 471, 472, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 513, 514, 515, 517, 519, 520, 521, 522, 523, 525, 526, 527, 529, 530, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 581, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 599, 604, 607, 608, 615, 616, 619, 624, 627, 631, 633, 635, 637, 639, 643, 645, 646, 648, 649, 650, 651, 653, 657, 662, 663, 673, 674, 681, 682, 683, 685, 693, 694, 695, 696, 697, 701, 702, 705, 706, 707, 713, 718, 722, 723, 726, 728, 729, 731, 737, 740, 746, 747, 748, 753, 761, 783, 784, 785, 789, 790, 792, 793, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 844, 845, 846, 847, 848, 851, 853, 858, 865, 866, 867, 868, 869, 870, 872, 874, 876, 879, 881, 882, 883, 884, 887, 888, 889, 890, 893, 901, 902, 904, 905, 906, 907, 909, 910, 911, 914, 917, 918, 919, 920, 925, 927, 938, 947, 948, 958, 971, 972, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1027, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "learn_rat": 1038, "learnalgorithm": 400, "learner": [2, 47, 136, 146, 156, 369, 559, 564, 565, 566, 567, 587, 594, 635, 851, 852, 857, 859, 860, 1008, 1011, 1022, 1025, 1026, 1053], "learning_curv": [2, 275, 327, 403, 811, 1001, 1040, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1054, 1056], "learning_decai": 541, "learning_method": [54, 385, 541], "learning_offset": [54, 541], "learning_r": [46, 135, 146, 147, 148, 149, 150, 151, 240, 293, 309, 311, 323, 325, 419, 558, 559, 564, 565, 566, 567, 673, 681, 682, 683, 697, 865, 866, 867, 1003, 1013, 1020, 1038, 1046, 1050], "learning_rate_": [697, 867], "learning_rate_init": [189, 309, 310, 866, 867], "learningcurvedisplai": [2, 248, 275, 327, 1001, 1052, 1053], "learnt": [151, 188, 320, 363, 394, 416, 890, 995, 1016], "least": [2, 37, 44, 52, 54, 111, 112, 114, 115, 123, 124, 138, 149, 168, 170, 180, 185, 187, 194, 195, 198, 200, 205, 208, 211, 215, 217, 219, 220, 223, 232, 233, 246, 252, 273, 286, 290, 292, 318, 324, 325, 343, 355, 356, 367, 373, 375, 377, 379, 380, 384, 386, 388, 392, 394, 395, 403, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 448, 452, 454, 460, 461, 462, 465, 478, 485, 486, 487, 488, 489, 499, 521, 536, 542, 544, 546, 547, 548, 550, 551, 552, 553, 554, 562, 563, 564, 565, 567, 569, 570, 571, 598, 599, 607, 640, 648, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 697, 702, 717, 721, 723, 790, 806, 810, 811, 817, 819, 820, 821, 823, 824, 826, 830, 833, 834, 835, 866, 867, 870, 881, 889, 914, 917, 918, 919, 920, 945, 968, 996, 999, 1003, 1006, 1009, 1018, 1020, 1021, 1022, 1026, 1027, 1028, 1030, 1032, 1037, 1039, 1040, 1043, 1044, 1048], "least_absolute_devi": [1047, 1049, 1050], "least_angl": 389, "least_squar": 1050, "leastangle_2002": [170, 377], "leastsquareserror": 1046, "leav": [2, 86, 135, 140, 149, 189, 191, 233, 280, 318, 362, 363, 367, 377, 379, 385, 394, 412, 419, 445, 446, 449, 450, 467, 508, 562, 563, 564, 565, 566, 567, 569, 570, 571, 678, 680, 807, 812, 813, 814, 815, 823, 824, 849, 850, 917, 918, 919, 920, 995, 1003, 1009, 1013, 1022, 1037, 1044, 1046, 1048, 1049, 1053], "leaveonegroupout": [2, 278, 416, 806, 813, 814, 1043], "leaveonelabelout": 1043, "leaveoneout": [2, 278, 416, 1055], "leavepgroupsout": [2, 416, 807, 1043], "leaveplabelout": 1043, "leaveplabelsout": 1043, "leavepout": [2, 416, 813], "leaves_parallel": 921, "lebedev": [1043, 1044], "lebel": 1052, "lebourgeoi": 1030, "lectur": [412, 649, 998, 1024], "lecture2": 649, "lecun": [1010, 1020], "led": 1037, "ledoit": [2, 49, 65, 70, 108, 109, 112, 113, 185, 302, 477, 479, 483, 484, 517, 554, 1000, 1027], "ledoit_wolf": [2, 113, 414, 1050], "ledoit_wolf_shrinkag": [2, 1050], "ledoitwolf": [2, 69, 108, 110, 113, 128, 150, 185, 304, 414, 473, 474, 478, 479, 480, 481, 805, 1027, 1041], "lee": [417, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1056], "leepei": 1041, "leereev": 1044, "leeuw": 640, "lefebvr": [1050, 1051], "lefevr": [417, 543], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 84, 88, 95, 97, 104, 107, 112, 113, 119, 123, 124, 135, 138, 140, 141, 142, 145, 148, 151, 156, 158, 175, 181, 184, 188, 191, 208, 215, 216, 217, 219, 226, 228, 229, 232, 233, 242, 246, 250, 252, 253, 258, 260, 261, 264, 269, 270, 271, 272, 274, 282, 283, 285, 296, 298, 299, 306, 308, 311, 313, 326, 328, 329, 333, 342, 343, 347, 362, 375, 380, 382, 384, 409, 412, 415, 416, 418, 419, 420, 422, 429, 435, 450, 476, 486, 487, 488, 489, 498, 503, 554, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 592, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 640, 644, 648, 656, 660, 802, 803, 805, 808, 809, 812, 819, 826, 882, 889, 917, 918, 919, 920, 921, 939, 953, 976, 979, 995, 998, 1000, 1002, 1004, 1006, 1008, 1013, 1018, 1020, 1022, 1044, 1046, 1051, 1056], "left_h": 313, "left_impur": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "leftarrow": [412, 1010, 1020], "leftmost": 1010, "legaci": [374, 384, 394, 947, 948, 1037, 1044, 1049], "legarreta": [1048, 1050, 1051], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 94, 104, 105, 107, 109, 110, 111, 112, 115, 116, 118, 123, 125, 128, 129, 130, 135, 136, 137, 138, 139, 141, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 166, 172, 173, 177, 178, 179, 180, 181, 188, 189, 193, 195, 196, 198, 202, 203, 204, 205, 209, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 230, 232, 233, 238, 243, 245, 246, 247, 248, 250, 253, 260, 267, 268, 270, 272, 273, 275, 276, 277, 278, 280, 283, 285, 286, 287, 288, 290, 296, 298, 299, 300, 305, 309, 314, 318, 323, 326, 329, 334, 342, 345, 347, 349, 354, 358, 359, 360, 361, 705, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "legend_el": [118, 152, 228, 276, 296, 347], "legend_handl": 300, "legend_lin": 48, "legend_titl": 221, "legitim": [267, 1003], "legitimate_accept": 267, "legitimate_refus": 267, "lego": 1025, "lehoucq": 417, "leibler": [54, 235, 417, 543, 545, 552, 697, 1003, 1044], "leibniz": 1006, "leig": 1043, "leightonzhang": 1043, "leinweb": [1045, 1046], "leisur": 43, "lejeun": 1044, "lekhwani": 1046, "leland": [1043, 1044, 1045, 1047, 1048, 1053], "lemaitr": [0, 401, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "lemir": 1048, "lemma": [37, 246, 372, 539, 546, 554, 901, 902, 903, 1000, 1032, 1040], "lemmat": 420, "lemmatoken": 420, "lemo": [1053, 1054], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 102, 104, 124, 130, 131, 133, 138, 141, 144, 145, 151, 162, 163, 168, 172, 180, 184, 189, 191, 214, 215, 233, 238, 242, 245, 246, 247, 249, 251, 252, 258, 260, 261, 268, 271, 273, 274, 281, 282, 284, 288, 292, 293, 300, 302, 303, 308, 314, 315, 316, 319, 328, 330, 332, 333, 336, 343, 349, 352, 354, 355, 356, 362, 392, 394, 419, 422, 430, 434, 436, 441, 449, 454, 460, 468, 512, 520, 555, 574, 575, 587, 602, 637, 638, 787, 805, 819, 831, 835, 837, 839, 840, 890, 904, 905, 1046, 1049], "lenail": [1045, 1049], "lend": 1030, "lene": 1053, "length": [2, 102, 118, 119, 129, 131, 144, 170, 172, 173, 174, 177, 178, 180, 193, 199, 249, 250, 253, 256, 296, 324, 327, 340, 356, 373, 377, 380, 388, 389, 394, 413, 417, 419, 420, 422, 449, 494, 513, 514, 517, 520, 528, 556, 568, 586, 587, 594, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 637, 651, 652, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 686, 689, 786, 805, 808, 809, 819, 835, 837, 840, 841, 843, 851, 852, 853, 855, 857, 896, 922, 935, 937, 941, 959, 960, 976, 979, 1005, 1012, 1016, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1053], "length_scal": [172, 173, 176, 177, 178, 179, 181, 422, 617, 620, 623, 624, 626, 627, 628, 629], "length_scale_bound": [172, 178, 179, 181, 422, 616, 620, 624, 627, 628], "length_scale_grid": 178, "lengthi": [380, 392], "lenient": [883, 1026, 1054], "lenz": [1048, 1052], "leo": 1054, "leogrin": 1055, "leon": [681, 682, 683, 1037, 1055], "leonardo": 1050, "leonenko": [612, 613], "leonieborn": 1043, "leopoldo": 1050, "leq": [175, 417, 419, 1002, 1006, 1009, 1020, 1021, 1022], "lera": 1044, "leriqu": [1043, 1045], "lernen": 454, "lesne": 1051, "less": [43, 44, 47, 64, 85, 86, 93, 119, 121, 124, 131, 135, 142, 148, 149, 151, 172, 179, 188, 198, 200, 215, 217, 219, 248, 252, 259, 261, 267, 273, 274, 282, 284, 287, 288, 314, 317, 318, 319, 324, 326, 330, 347, 354, 355, 363, 367, 369, 375, 380, 382, 392, 394, 406, 412, 416, 417, 419, 420, 424, 443, 445, 447, 449, 452, 454, 456, 461, 464, 466, 467, 486, 487, 488, 501, 520, 536, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 595, 601, 624, 632, 639, 652, 666, 681, 683, 697, 706, 726, 727, 728, 729, 730, 741, 757, 769, 784, 785, 790, 800, 802, 803, 807, 808, 809, 815, 833, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 872, 884, 886, 887, 889, 892, 898, 899, 909, 910, 917, 918, 919, 920, 941, 956, 995, 996, 998, 999, 1000, 1003, 1005, 1006, 1009, 1011, 1016, 1020, 1021, 1022, 1025, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1047, 1051, 1052, 1054], "lessen": [221, 663, 664], "lesser": [308, 394, 446, 546, 1002], "let": [43, 44, 52, 86, 88, 97, 103, 107, 118, 121, 126, 142, 145, 148, 149, 151, 153, 172, 178, 179, 184, 188, 189, 190, 197, 204, 215, 217, 233, 235, 239, 249, 256, 267, 268, 273, 276, 280, 286, 287, 330, 354, 356, 362, 363, 375, 380, 382, 386, 392, 406, 409, 411, 412, 416, 419, 420, 449, 495, 505, 509, 515, 539, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 686, 689, 875, 882, 883, 1002, 1003, 1004, 1005, 1006, 1013, 1014, 1016, 1021, 1022, 1030, 1047, 1056], "letelli": 1043, "letter": [170, 180, 375, 377, 384, 420, 793, 794, 811, 828, 1006], "leu": 1051, "leung": 1048, "lev_metr": 392, "levarag": 329, "level": [43, 48, 50, 51, 64, 70, 76, 86, 121, 140, 144, 163, 170, 171, 172, 173, 176, 179, 181, 185, 188, 189, 226, 227, 228, 229, 230, 233, 242, 246, 247, 262, 267, 273, 276, 282, 283, 299, 306, 341, 342, 344, 345, 347, 350, 355, 362, 367, 375, 377, 380, 382, 386, 392, 394, 397, 398, 403, 410, 417, 420, 422, 426, 458, 472, 498, 499, 501, 508, 526, 536, 541, 542, 550, 551, 552, 566, 567, 572, 573, 616, 620, 627, 628, 630, 671, 672, 673, 681, 682, 683, 692, 695, 697, 699, 705, 707, 721, 728, 733, 790, 830, 831, 832, 834, 837, 838, 865, 866, 867, 907, 922, 995, 1002, 1006, 1007, 1009, 1014, 1020, 1022, 1025, 1026, 1027, 1040, 1048, 1051, 1052, 1053, 1056], "levelnam": 121, "leven": 392, "levenshtein": [330, 392], "levenshtein_dist": 330, "levequ": [847, 889], "leverag": [43, 47, 72, 82, 116, 233, 330, 354, 355, 367, 368, 378, 394, 416, 419, 884, 995, 1002, 1040, 1052, 1055], "levesqu": 1043, "levi": [539, 1044], "levinson": [1045, 1046], "levitski": [1052, 1053, 1054, 1056], "levitskii": 1050, "lewi": [375, 1044, 1048], "lex": [412, 456, 466], "lexicograph": [394, 572, 793, 799, 851, 859], "lexicon": 1016, "lexsort": 61, "lf": 388, "lfw": [2, 45, 375, 498, 499, 1037], "lfw_home": 375, "lfw_pairs_train": [375, 498], "lfw_peopl": [45, 375, 499], "lg2012": 419, "lgtm": 1044, "li": [0, 335, 375, 401, 402, 644, 647, 701, 731, 761, 902, 995, 998, 1006, 1009, 1016, 1018, 1021, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "liabil": 233, "liac": [327, 374, 380, 501, 1052, 1053], "liam": [1045, 1046], "liang": [1043, 1048, 1049, 1054, 1055], "liau": 1040, "lib": [368, 378, 398, 1025], "liberti": 264, "libisel": 1055, "liblinear": [208, 341, 386, 663, 664, 793, 909, 910, 911, 914, 915, 1002, 1006, 1021, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "libomp": [378, 1049], "librari": [45, 267, 273, 325, 327, 360, 363, 372, 374, 375, 378, 379, 380, 381, 386, 388, 392, 393, 394, 398, 406, 408, 468, 663, 909, 910, 911, 912, 914, 915, 1002, 1006, 1021, 1022, 1025, 1026, 1030, 1035, 1040, 1044, 1045, 1046, 1047, 1048, 1050, 1054], "libsvm": [2, 193, 341, 373, 386, 491, 513, 568, 909, 910, 911, 912, 913, 914, 915, 1021, 1032, 1037, 1039, 1045, 1048, 1051], "libsvmtool": [193, 374, 491, 513, 514], "licenc": 374, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 374, 392, 394, 1022, 1030], "lichman": 377, "liddel": 1045, "lidston": [844, 845, 846, 848, 1008], "lie": [52, 93, 115, 169, 188, 247, 313, 334, 341, 343, 417, 419, 611, 857, 859, 860, 861, 909, 910, 1000, 1003, 1006, 1016, 1021], "lieg": 419, "lieret": 1052, "lieu": [1043, 1044], "life": [52, 151, 266, 330, 388, 1003], "lifecycl": [1025, 1026], "lifo": 924, "lift": 398, "light": [138, 375], "lighter": [367, 705, 707, 787, 794, 1053], "lightfm": 1025, "lightgbm": [151, 419, 566, 567, 1025, 1046, 1053], "lightgreen": [158, 221, 232], "lightgrei": 49, "lightweight": [381, 805, 819, 830, 831], "ligo": 1044, "lihaitao": 1055, "lik_max": 109, "lik_min": 109, "like": [0, 2, 43, 51, 52, 85, 88, 91, 93, 102, 119, 124, 128, 130, 133, 135, 137, 142, 148, 151, 152, 172, 178, 188, 196, 215, 249, 264, 267, 273, 276, 277, 280, 281, 288, 302, 311, 313, 318, 319, 322, 335, 343, 347, 354, 355, 363, 367, 369, 372, 374, 375, 379, 380, 382, 384, 387, 388, 389, 392, 393, 394, 403, 406, 408, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 520, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 931, 933, 940, 941, 955, 959, 968, 969, 976, 977, 978, 990, 992, 994, 995, 998, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1012, 1013, 1016, 1021, 1022, 1026, 1030, 1034, 1037, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "likelihood": [2, 69, 90, 108, 110, 111, 112, 113, 128, 150, 172, 173, 174, 176, 177, 178, 179, 181, 185, 202, 233, 262, 265, 273, 279, 304, 311, 313, 382, 394, 410, 414, 417, 419, 422, 441, 473, 474, 475, 476, 477, 478, 479, 480, 481, 520, 537, 541, 546, 554, 555, 556, 615, 616, 636, 650, 663, 717, 746, 802, 803, 805, 832, 835, 854, 865, 885, 897, 911, 912, 914, 915, 1002, 1005, 1008, 1016, 1021, 1027, 1040, 1041, 1046, 1052], "likewis": [250, 412, 528], "lil": [394, 558, 559, 876, 931, 959, 1009], "lil_matrix": 55, "lili": [1045, 1046], "lilian": [1042, 1043, 1054], "lim": [175, 539], "lima": [1050, 1051], "limit": [43, 47, 55, 64, 72, 77, 90, 99, 113, 135, 142, 143, 149, 156, 183, 188, 189, 190, 195, 215, 216, 232, 246, 280, 315, 319, 325, 350, 356, 363, 368, 381, 382, 385, 392, 394, 395, 410, 411, 412, 415, 417, 421, 450, 467, 472, 564, 565, 566, 567, 637, 655, 684, 687, 688, 693, 783, 826, 857, 859, 860, 861, 882, 883, 907, 911, 912, 913, 914, 915, 995, 1002, 1003, 1005, 1006, 1013, 1014, 1016, 1026, 1032, 1045, 1047, 1050, 1051, 1054, 1056], "limits_": 1009, "lin": [0, 539, 663, 1021, 1042, 1043, 1044, 1045], "lin_clf": 1021, "linalg": [70, 87, 109, 110, 113, 128, 130, 201, 258, 259, 260, 263, 264, 329, 380, 386, 417, 455, 456, 457, 466, 526, 537, 540, 546, 549, 662, 677, 679, 692, 696, 700, 951], "linalgerror": 1047, "linalgwarn": 1056, "lincoln": 375, "lindenbaum": 539, "lindenstrauss": [37, 185, 241, 372, 493, 507, 901, 902, 903, 1023, 1027, 1032], "lindgren": 1055, "lindquist": 1052, "line": [48, 50, 52, 55, 75, 78, 93, 102, 111, 121, 126, 135, 141, 147, 171, 183, 184, 185, 188, 189, 202, 204, 205, 207, 210, 211, 213, 216, 218, 223, 224, 226, 227, 229, 242, 246, 247, 250, 252, 270, 277, 279, 280, 286, 299, 303, 306, 314, 324, 342, 345, 347, 348, 351, 352, 354, 374, 375, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 417, 418, 419, 442, 491, 492, 493, 513, 514, 547, 558, 559, 560, 561, 615, 618, 619, 637, 675, 691, 705, 706, 707, 811, 828, 1000, 1006, 1010, 1013, 1020, 1025, 1027, 1029, 1039, 1048, 1050, 1053, 1054], "line0": [51, 238], "line1": [46, 51, 238], "line2": [46, 51, 238, 351], "line2d": [48, 111, 229, 299, 342, 345, 811, 828], "line_": [387, 442, 703, 705, 706, 707, 811, 828], "line_bin": 314, "line_fig": 141, "line_i": 218, "line_kw": [151, 153, 253, 275, 323, 329, 637, 811, 828], "line_kwarg": [156, 706], "line_profil": 386, "line_trac": 141, "line_x": [218, 232], "line_y_ransac": 218, "linea": 400, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 85, 90, 106, 107, 109, 110, 111, 112, 113, 116, 118, 121, 126, 129, 138, 140, 154, 156, 159, 161, 163, 165, 170, 176, 178, 183, 184, 186, 187, 189, 193, 196, 198, 200, 201, 202, 204, 205, 210, 212, 213, 216, 217, 219, 220, 223, 227, 229, 231, 232, 233, 234, 237, 239, 245, 246, 248, 250, 251, 254, 263, 266, 269, 270, 271, 273, 276, 278, 279, 280, 281, 282, 283, 286, 288, 298, 299, 301, 302, 303, 311, 313, 314, 315, 318, 320, 324, 325, 338, 340, 343, 344, 345, 348, 350, 351, 354, 360, 361, 368, 372, 376, 377, 378, 382, 383, 385, 394, 397, 400, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 424, 446, 448, 459, 469, 471, 479, 486, 487, 488, 501, 506, 507, 517, 520, 526, 529, 537, 538, 539, 540, 541, 544, 546, 548, 549, 553, 554, 555, 559, 571, 587, 594, 598, 599, 611, 614, 619, 625, 636, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 696, 697, 698, 706, 712, 721, 724, 755, 758, 770, 772, 779, 790, 805, 816, 820, 832, 835, 849, 850, 854, 858, 865, 866, 867, 870, 874, 875, 876, 879, 882, 884, 886, 887, 888, 889, 898, 902, 909, 910, 911, 912, 913, 914, 915, 995, 997, 998, 999, 1001, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1020, 1021, 1027, 1028, 1030, 1031, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051], "linear_baselin": 324, "linear_kernel": [2, 408, 766, 770, 1004, 1045, 1056], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 87, 103, 105, 107, 116, 140, 156, 158, 159, 161, 162, 168, 169, 170, 172, 183, 185, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 242, 243, 244, 245, 249, 251, 254, 256, 267, 269, 276, 281, 282, 286, 287, 288, 292, 311, 314, 315, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 336, 354, 363, 367, 369, 379, 380, 382, 386, 388, 389, 393, 394, 403, 408, 411, 413, 419, 432, 437, 442, 469, 542, 544, 547, 548, 550, 551, 553, 572, 573, 574, 575, 602, 636, 637, 639, 640, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 705, 706, 793, 804, 819, 828, 830, 831, 832, 834, 836, 840, 841, 842, 843, 867, 884, 888, 909, 910, 913, 916, 945, 947, 948, 949, 989, 998, 1002, 1006, 1007, 1012, 1014, 1016, 1020, 1027, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "linear_model_preprocessor": 215, "linear_pca": 413, "linear_preprocessor": 156, "linear_regress": [217, 288], "linear_sum_assign": [409, 724], "linear_svc": 1021, "linear_svm": 247, "linear_svm_scor": 247, "linear_svm_tim": 247, "lineardiscriminantanalysi": [2, 69, 70, 129, 236, 302, 363, 408, 541, 555, 858, 1000, 1007, 1009, 1037, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1051, 1052, 1053], "linearli": [67, 126, 137, 170, 188, 195, 229, 236, 242, 282, 283, 315, 318, 347, 354, 367, 377, 392, 417, 419, 520, 558, 647, 712, 878, 879, 1006, 1009, 1012, 1021, 1044, 1053], "linearly_separ": [67, 308], "linearmodel": 1050, "linearoper": [329, 692], "linearregress": [2, 116, 159, 187, 195, 205, 210, 211, 212, 213, 218, 221, 232, 245, 249, 251, 269, 288, 314, 363, 380, 392, 393, 413, 419, 469, 575, 637, 640, 651, 654, 657, 659, 676, 677, 692, 1002, 1006, 1007, 1016, 1041, 1042, 1046, 1049, 1050, 1051, 1053], "linearregressionifittedlinearregress": 245, "linearregressionlinearregress": 159, "linearsvc": [2, 62, 64, 102, 104, 166, 167, 185, 193, 247, 270, 272, 280, 315, 322, 338, 340, 344, 345, 350, 354, 367, 382, 386, 410, 420, 421, 441, 517, 572, 582, 636, 644, 648, 657, 677, 678, 679, 680, 681, 692, 740, 747, 832, 837, 910, 911, 914, 916, 1002, 1006, 1007, 1021, 1027, 1037, 1038, 1039, 1043, 1045, 1048, 1053], "linearsvc__c": 315, "linearsvclinearsvc": [104, 167, 280], "linearsvr": [2, 573, 915, 1021, 1041, 1043, 1048, 1053], "linecollect": [51, 238, 245, 637], "linen": [51, 238], "lineno": 386, "lineplot": [151, 273], "liner": [382, 835], "lines_": [387, 637, 811, 828], "linestyl": [49, 50, 69, 93, 105, 111, 128, 130, 135, 147, 158, 161, 163, 172, 175, 177, 179, 181, 190, 191, 202, 203, 204, 215, 216, 217, 221, 225, 227, 228, 233, 250, 252, 267, 270, 272, 276, 277, 282, 286, 287, 298, 306, 309, 314, 341, 344, 345, 347, 348, 350], "linewidth": [61, 69, 70, 72, 75, 91, 105, 109, 116, 119, 123, 136, 148, 151, 153, 172, 176, 180, 204, 205, 209, 210, 211, 213, 216, 218, 221, 229, 232, 242, 250, 252, 282, 286, 299, 303, 314, 323, 329, 341, 342, 344, 360], "linger": 217, "linguist": [721, 906, 1019], "lingyi1110": 1052, "link": [51, 55, 135, 188, 189, 195, 215, 219, 233, 258, 267, 276, 303, 358, 368, 374, 379, 380, 381, 382, 384, 388, 394, 410, 412, 414, 417, 419, 422, 566, 567, 615, 653, 674, 685, 693, 710, 934, 936, 1002, 1009, 1022, 1023, 1025, 1029, 1035, 1037, 1040, 1041, 1044, 1045, 1048, 1054], "link_thickness_i": 303, "linkag": [71, 74, 75, 76, 79, 81, 85, 88, 89, 90, 100, 185, 191, 444, 445, 449, 450, 467, 517, 519, 527, 889, 1025, 1027, 1040, 1045, 1048], "linkage_matrix": 76, "linkage_tre": 1041, "linkedin": 384, "linker": 381, "linnerrud": [373, 1032], "linnerud": [2, 377, 510], "linprog": [675, 1002], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 82, 88, 111, 112, 122, 130, 136, 148, 172, 173, 175, 176, 177, 178, 179, 181, 189, 195, 196, 198, 200, 205, 209, 215, 216, 217, 221, 225, 226, 227, 228, 229, 233, 240, 242, 245, 246, 248, 250, 262, 273, 275, 276, 280, 281, 282, 283, 288, 298, 299, 305, 306, 314, 316, 326, 327, 342, 343, 346, 347, 348, 350, 351, 352, 636, 637, 811, 833, 849, 850], "lint": [380, 388], "linter": 584, "linthresh": [195, 200], "linu": [1053, 1054, 1055], "linux": [380, 382, 383, 388, 1025, 1037], "lipoprotein": [170, 377], "lippert": 1002, "lippmann": 375, "lipschitz": [37, 1018], "lisa": [1045, 1046, 1048, 1049, 1051, 1052], "lise": 1051, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 82, 95, 102, 130, 131, 139, 141, 147, 156, 191, 219, 252, 253, 268, 271, 273, 274, 276, 277, 282, 302, 315, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 336, 346, 355, 356, 369, 374, 375, 378, 379, 380, 382, 383, 385, 386, 387, 388, 389, 392, 393, 394, 395, 398, 399, 403, 410, 412, 413, 416, 418, 419, 420, 435, 437, 441, 454, 460, 461, 468, 469, 470, 471, 475, 476, 482, 486, 487, 488, 492, 493, 494, 495, 497, 498, 501, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 528, 537, 555, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 596, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 637, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 686, 689, 691, 692, 697, 701, 702, 704, 715, 716, 717, 718, 721, 723, 730, 738, 747, 751, 759, 783, 786, 788, 793, 799, 802, 803, 805, 808, 809, 811, 816, 817, 819, 828, 830, 831, 832, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 873, 877, 880, 882, 883, 888, 890, 906, 910, 912, 915, 917, 918, 919, 920, 923, 930, 931, 935, 936, 937, 941, 944, 945, 946, 948, 956, 957, 960, 971, 976, 979, 989, 995, 996, 1002, 1006, 1008, 1009, 1010, 1013, 1014, 1017, 1022, 1025, 1026, 1030, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "list_param": 380, "listedcolormap": [67, 70, 144, 301, 304, 308, 315], "listen": 354, "listinfo": 388, "lite": 1037, "liter": [380, 1030], "literatur": [177, 273, 290, 355, 377, 380, 386, 388, 392, 393, 412, 415, 417, 419, 447, 451, 453, 506, 541, 543, 545, 552, 560, 561, 593, 596, 713, 802, 995, 998, 1002, 1006, 1047], "litsidi": [1052, 1053], "littl": [188, 189, 190, 191, 242, 375, 420, 466, 649, 805, 819, 953, 996, 1003, 1005, 1021, 1022, 1038, 1049, 1054], "lituiev": 1050, "liu": [0, 370, 391, 401, 568, 731, 761, 1006, 1012, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "liutong": 1045, "live": [50, 102, 188, 267, 306, 375, 380, 412, 503, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 1029], "livesei": 354, "livni": [412, 446], "lizao": 1045, "lizsz": 1043, "lj2017": 412, "lk": 1040, "lkjcalc": 1045, "lkubin": 1048, "ll": [50, 88, 143, 268, 286, 306, 380, 392, 537, 546, 998, 1009, 1022], "llcrnrlat": [50, 306], "llcrnrlon": [50, 306], "lle": [235, 236, 237, 239, 535, 694, 698, 1003, 1049], "lle_hessian": 235, "lle_ltsa": 235, "lle_method": 235, "lle_mod": 235, "lle_standard": 235, "lloyd": [412, 447, 451, 453, 463, 1051, 1052], "llvm": 378, "lm": 197, "lmbda": 317, "lmbda_bc": 317, "lmbda_yj": 317, "lml": [173, 174, 178, 422], "ln": [384, 1002, 1010, 1016], "loa": [171, 179, 185, 422, 501, 616, 620, 627, 628, 630, 1027], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 80, 86, 103, 104, 121, 131, 140, 142, 144, 146, 152, 153, 156, 157, 159, 167, 168, 177, 188, 189, 193, 197, 211, 212, 215, 223, 231, 244, 245, 249, 251, 252, 253, 254, 256, 263, 267, 269, 271, 273, 278, 280, 285, 287, 290, 293, 297, 302, 309, 310, 311, 323, 324, 326, 327, 329, 334, 335, 336, 359, 362, 367, 372, 375, 377, 383, 386, 393, 406, 415, 416, 417, 419, 486, 487, 488, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 537, 539, 548, 849, 850, 953, 1016, 1026, 1032, 1037, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "load_ames_h": 156, "load_boston": [1043, 1045, 1050], "load_breast_canc": [2, 170, 191, 335, 358, 385, 597, 600, 601, 603, 679, 680, 793, 1006, 1042, 1043, 1048], "load_cont": 508, "load_dataset": 354, "load_diabet": [2, 46, 149, 159, 161, 170, 184, 202, 203, 204, 211, 212, 253, 269, 327, 419, 563, 567, 573, 678, 706, 830, 831, 832, 918, 920, 1014, 1043, 1048, 1051], "load_digit": [2, 68, 84, 85, 91, 104, 105, 162, 168, 206, 222, 236, 246, 247, 271, 272, 275, 281, 295, 297, 302, 309, 311, 328, 332, 333, 386, 413, 424, 449, 450, 537, 538, 539, 540, 604, 605, 643, 644, 673, 693, 694, 695, 696, 698, 700, 1043, 1048], "load_fil": [2, 374, 375, 1039, 1051], "load_iri": [2, 66, 76, 106, 118, 125, 127, 129, 131, 144, 157, 163, 166, 174, 199, 208, 224, 256, 260, 266, 278, 279, 280, 282, 283, 296, 301, 304, 309, 322, 324, 327, 337, 339, 340, 343, 346, 359, 362, 393, 406, 412, 413, 416, 419, 421, 432, 566, 572, 606, 607, 615, 624, 625, 627, 628, 636, 663, 664, 716, 793, 805, 808, 809, 811, 819, 837, 858, 904, 905, 906, 917, 919, 921, 922, 923, 996, 1001, 1006, 1007, 1008, 1009, 1013, 1016, 1022, 1043, 1045, 1048], "load_lfw_pair": 1042, "load_linnerud": [2, 842, 1043, 1048], "load_mnist": [223, 293], "load_mtpl2": 233, "load_sample_imag": [2, 588, 589, 592, 1046], "load_svmlight_fil": [2, 374, 1037, 1038, 1043, 1044, 1045, 1052], "load_win": [2, 48, 255, 318, 853, 861, 1034, 1048], "loader": [2, 274, 336, 354, 373, 374, 375, 503, 504, 513, 1026, 1037, 1042, 1044, 1045, 1048], "loan": [419, 539, 1002, 1030], "loayza": 1051, "lobpcg": [80, 456, 466, 693, 696, 700, 1047, 1050, 1051, 1052], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 104, 107, 110, 111, 112, 115, 118, 123, 125, 128, 129, 130, 135, 137, 138, 139, 147, 148, 149, 150, 151, 153, 156, 158, 159, 166, 172, 173, 179, 181, 188, 189, 198, 203, 205, 209, 215, 216, 217, 218, 221, 222, 225, 228, 229, 232, 233, 238, 245, 246, 247, 248, 250, 252, 260, 261, 268, 271, 272, 273, 276, 277, 280, 283, 286, 287, 288, 296, 298, 299, 309, 314, 317, 318, 323, 326, 329, 334, 342, 345, 347, 349, 350, 354, 359, 361, 819, 886, 898], "loc_a": 317, "loc_b": 317, "local": [2, 43, 48, 51, 58, 74, 85, 90, 94, 121, 124, 140, 141, 153, 170, 177, 178, 185, 189, 216, 229, 234, 237, 239, 242, 246, 252, 294, 303, 342, 360, 361, 368, 377, 378, 380, 384, 386, 388, 398, 412, 417, 419, 420, 422, 451, 456, 466, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 507, 543, 545, 549, 552, 554, 564, 565, 568, 571, 615, 616, 693, 694, 695, 696, 697, 698, 700, 701, 763, 764, 852, 855, 858, 860, 870, 879, 902, 905, 913, 971, 1004, 1005, 1009, 1010, 1022, 1027, 1029, 1031, 1032, 1041, 1045, 1049, 1052, 1055, 1056], "local_filenam": 496, "localcach": 398, "locally_linear_embed": [2, 239, 1003, 1056], "locallylinearembed": [2, 51, 235, 236, 237, 326, 693, 695, 697, 1003, 1009, 1042, 1043, 1051, 1052, 1053, 1056], "localoutlierfactor": [2, 242, 252, 299, 300, 326, 394, 568, 913, 1012, 1044, 1045, 1047, 1051, 1052, 1053, 1054, 1056], "localoutlierfactor__n_neighbor": 252, "locat": [48, 62, 86, 87, 104, 111, 112, 209, 306, 324, 343, 373, 375, 378, 380, 384, 385, 388, 389, 398, 399, 412, 414, 418, 452, 464, 465, 473, 474, 475, 476, 477, 478, 479, 480, 492, 505, 506, 509, 510, 517, 520, 990, 996, 1002, 1007, 1012, 1016, 1022, 1045], "location_": [111, 112, 473, 474, 475, 476, 477, 478, 479, 480], "location_reweight": [473, 478], "lock": [383, 398, 405, 406, 971, 1055], "loev": 539, "lof": [2, 48, 185, 229, 242, 252, 294, 342, 568, 855, 913, 1012, 1027], "lof_kw": 252, "lofti": [1047, 1048], "log": [2, 43, 58, 62, 63, 64, 109, 121, 135, 146, 148, 156, 166, 170, 173, 174, 176, 177, 178, 181, 202, 204, 208, 215, 220, 225, 233, 246, 248, 262, 267, 303, 318, 354, 375, 377, 378, 380, 388, 389, 394, 409, 410, 412, 413, 414, 417, 419, 420, 422, 452, 455, 464, 469, 474, 475, 476, 477, 478, 479, 480, 537, 541, 546, 554, 555, 556, 558, 560, 562, 564, 567, 569, 595, 596, 598, 599, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 647, 650, 653, 663, 664, 674, 676, 681, 685, 727, 746, 760, 802, 803, 805, 808, 809, 819, 844, 845, 846, 847, 848, 849, 850, 854, 865, 866, 873, 874, 903, 906, 911, 914, 916, 917, 919, 951, 995, 998, 1000, 1002, 1003, 1008, 1009, 1011, 1014, 1016, 1020, 1022, 1025, 1026, 1039, 1040, 1041, 1046, 1047, 1048, 1051, 1054, 1055, 1056], "log10": [166, 178, 188, 208, 274, 343], "log1p": [107, 245, 873, 1006, 1016], "log2": [139, 225, 254, 562, 563, 564, 565, 569, 570, 917, 918, 919, 920, 1007], "log_": 1006, "log_2": [409, 568, 1012], "log_bas": 731, "log_den": 298, "log_dens": 854, "log_likelihood": [109, 615, 616, 802, 803], "log_likelihood_gradi": [615, 616], "log_logist": 1054, "log_loss": [2, 62, 63, 147, 150, 173, 318, 336, 354, 394, 410, 419, 562, 564, 566, 569, 651, 663, 681, 917, 919, 995, 1002, 1006, 1020, 1022, 1039, 1041, 1043, 1051, 1052, 1053, 1054], "log_marginal_likelihood": [173, 174, 176, 178, 181, 422, 615, 616, 1047], "log_marginal_likelihood_value_": [615, 616], "log_prob": [802, 803, 804, 827], "log_reg": [256, 326], "log_reg_input_featur": 326, "log_scal": 1053, "log_scale_transform": [215, 233], "log_scaled_numer": [215, 233], "log_y_prob": 866, "logaddexp": 1054, "logan": [1051, 1052, 1053], "logarithm": [2, 107, 156, 188, 219, 246, 274, 343, 394, 421, 464, 595, 663, 664, 681, 709, 731, 746, 756, 760, 761, 762, 796, 804, 827, 840, 849, 850, 951, 1022, 1044], "logcosh": [424, 538], "logdet": 951, "logged_in": 375, "logger": 1048, "logic": [133, 368, 381, 382, 387, 408, 419, 1022, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "logical_and": [53, 148], "logical_not": [57, 97, 130, 218], "logical_or": [217, 223, 282, 386], "logical_xor": [53, 176, 347], "loginov": 1043, "logist": [2, 62, 64, 66, 101, 103, 107, 118, 131, 140, 162, 168, 185, 194, 203, 210, 212, 213, 219, 221, 224, 226, 232, 243, 245, 256, 267, 281, 284, 286, 287, 292, 304, 310, 311, 318, 326, 339, 340, 350, 351, 354, 394, 395, 410, 413, 419, 421, 422, 441, 493, 501, 507, 509, 517, 546, 564, 566, 615, 636, 651, 662, 663, 664, 671, 673, 681, 746, 805, 819, 835, 838, 865, 866, 867, 869, 889, 916, 938, 940, 1006, 1010, 1011, 1020, 1021, 1027, 1028, 1030, 1032, 1041, 1044, 1045, 1047, 1048], "logistic__c": 105, "logistic_regress": [267, 828, 836], "logistic_regression_path": [1045, 1046], "logisticregress": [2, 62, 66, 103, 105, 140, 158, 162, 168, 169, 170, 199, 205, 206, 207, 208, 222, 230, 231, 243, 244, 254, 256, 267, 276, 282, 287, 311, 315, 322, 323, 324, 325, 326, 328, 330, 354, 367, 380, 382, 386, 388, 393, 403, 410, 411, 413, 419, 421, 432, 437, 442, 572, 574, 602, 636, 639, 648, 657, 664, 677, 678, 679, 680, 681, 692, 705, 793, 804, 819, 828, 834, 836, 840, 841, 843, 894, 895, 897, 898, 899, 900, 916, 947, 948, 949, 989, 1002, 1006, 1007, 1016, 1020, 1021, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "logisticregression__c": [267, 315], "logisticregressioncv": [2, 64, 318, 394, 403, 663, 1002, 1007, 1041, 1042, 1043, 1045, 1046, 1047, 1051, 1052, 1054, 1055, 1056], "logisticregressionifittedlogisticregress": 311, "logisticregressionlogisticregress": [103, 140, 243, 244, 254, 256, 267, 287, 323, 326], "logit": [2, 410, 422, 663, 664, 1002], "loglik_lw": 109, "loglik_oa": 109, "loglik_r": 109, "loglike_": 537, "loglog": [109, 246], "logloss": 1048, "lognorm": [148, 178, 197, 262, 317, 1016], "logo": [0, 416, 812], "logprob": 854, "logreg": [199, 843], "logspac": [43, 51, 64, 105, 109, 128, 161, 170, 173, 178, 188, 208, 219, 220, 246, 248, 262, 267, 274, 286, 297, 308, 315, 318, 343, 350, 828, 836, 1001, 1002], "logsumexp": [303, 1044], "loguniform": [45, 172, 281, 995, 1047], "logx": [219, 350], "lohit": 1054, "loic": [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "loki": [368, 1006, 1045, 1048], "lomp": 378, "lon": 769, "london": [413, 420, 470], "londschien": [1050, 1054], "lone": [1052, 1053], "long": [0, 30, 43, 50, 51, 79, 95, 148, 177, 184, 188, 190, 215, 249, 250, 252, 276, 306, 313, 323, 354, 355, 363, 368, 378, 380, 388, 392, 394, 395, 406, 412, 457, 503, 543, 681, 682, 683, 808, 809, 844, 845, 846, 847, 848, 866, 867, 877, 1006, 1012, 1016, 1017, 1019, 1020, 1024, 1039, 1043, 1049, 1051], "long_term_trend_kernel": 177, "long_titl": 347, "longer": [0, 43, 70, 86, 138, 188, 189, 203, 310, 325, 380, 382, 412, 416, 419, 420, 453, 541, 568, 1001, 1005, 1006, 1008, 1011, 1021, 1029, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "longest": 293, "longitud": [306, 313, 375, 503, 704, 769], "longpathsen": 398, "longstand": [1038, 1044], "loo": [394, 813, 1048], "look": [43, 44, 64, 86, 88, 121, 124, 126, 148, 149, 172, 177, 178, 184, 188, 189, 217, 235, 239, 242, 249, 264, 267, 268, 273, 275, 287, 310, 329, 354, 355, 363, 368, 369, 374, 375, 380, 381, 382, 384, 386, 388, 392, 393, 412, 415, 417, 418, 419, 420, 452, 492, 493, 562, 563, 564, 565, 569, 570, 607, 608, 636, 664, 697, 889, 917, 918, 919, 920, 1002, 1003, 1016, 1020, 1021, 1023, 1037, 1045, 1047], "lookup": [389, 970, 1046], "loop": [46, 47, 138, 148, 188, 268, 278, 354, 362, 367, 380, 381, 386, 412, 416, 421, 651, 652, 657, 658, 664, 665, 666, 667, 668, 995, 1019, 1020, 1040, 1041, 1044, 1049, 1050, 1053, 1054], "loopym": 1047, "loos": [264, 270, 1021, 1045], "looser": 208, "lopusz": 1048, "lorain": 327, "lorek": 1044, "lorentzen": [0, 401, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "lorenz": [215, 233, 1042, 1054], "lorenz_curv": [215, 233], "lose": [219, 232, 356, 375, 394, 415, 420, 422, 952, 953, 996, 1002], "losi": [0, 402, 1037], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 130, 141, 147, 148, 149, 150, 172, 173, 185, 194, 198, 205, 208, 217, 219, 220, 222, 223, 227, 233, 248, 267, 281, 309, 310, 318, 325, 329, 330, 336, 340, 341, 345, 347, 350, 354, 392, 394, 410, 417, 422, 468, 469, 501, 513, 514, 537, 543, 544, 545, 548, 552, 557, 558, 559, 563, 564, 565, 566, 567, 570, 648, 651, 654, 663, 664, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 708, 711, 714, 727, 728, 739, 740, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 795, 796, 801, 805, 808, 809, 819, 831, 832, 835, 866, 867, 869, 870, 873, 874, 882, 883, 884, 889, 909, 910, 915, 916, 918, 920, 953, 957, 999, 1002, 1010, 1014, 1019, 1020, 1021, 1022, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "loss_": [309, 866, 867, 1010, 1051], "loss_curve_": [309, 866, 867], "loss_func": 52, "loss_funct": 52, "loss_function_": 1054, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1046, "lossi": 412, "lossili": 394, "lost": [58, 90, 113, 375, 381, 392, 406, 1003, 1006], "lostanlen": 1047, "lostcoast": 1047, "lot": [43, 113, 151, 188, 219, 375, 380, 381, 382, 388, 417, 419, 808, 809, 901, 902, 995, 1018, 1020, 1021, 1025, 1026, 1030, 1037, 1042, 1044, 1045, 1046, 1047, 1049], "lot_area": 252, "lotan": 1030, "lotconfig": 145, "lotfrontag": 107, "loui": [327, 1042, 1043, 1047, 1049, 1051, 1053, 1054], "louib": [1045, 1046], "loupp": [0, 402, 419, 560, 561, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "lourida": 1043, "low": [2, 37, 43, 50, 51, 72, 83, 112, 116, 123, 125, 128, 135, 138, 152, 170, 190, 208, 210, 215, 217, 219, 229, 235, 237, 242, 246, 252, 258, 259, 261, 264, 266, 267, 273, 275, 279, 280, 299, 300, 310, 317, 319, 320, 328, 335, 342, 343, 354, 362, 376, 377, 380, 385, 388, 392, 394, 398, 409, 410, 411, 416, 417, 420, 446, 448, 453, 472, 526, 529, 540, 587, 594, 608, 684, 697, 701, 710, 731, 747, 794, 854, 883, 890, 907, 953, 970, 995, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1016, 1018, 1021, 1022, 1028, 1032, 1038, 1041, 1042, 1043, 1045, 1046, 1051, 1052], "low_cardin": 319, "low_cardinality_featur": 319, "low_cardinalityindex": 319, "low_i": 210, "low_x": 210, "lower": [37, 44, 52, 63, 64, 67, 69, 91, 110, 116, 118, 121, 123, 128, 135, 138, 141, 144, 148, 151, 152, 168, 172, 174, 176, 178, 180, 188, 189, 190, 200, 201, 203, 205, 215, 216, 217, 218, 228, 235, 239, 245, 246, 251, 260, 264, 267, 272, 273, 275, 276, 280, 281, 283, 286, 287, 296, 297, 299, 300, 315, 318, 326, 330, 335, 343, 354, 355, 356, 359, 375, 380, 394, 410, 411, 412, 415, 416, 417, 418, 419, 420, 423, 448, 452, 468, 471, 503, 514, 537, 539, 546, 549, 564, 565, 566, 567, 568, 593, 594, 596, 608, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 637, 638, 640, 642, 682, 684, 717, 721, 730, 733, 739, 744, 802, 803, 855, 857, 859, 860, 861, 863, 890, 909, 910, 911, 912, 913, 916, 939, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1021, 1022, 1039, 1040, 1045, 1052, 1054], "lower_bound": 272, "lower_bound_": [802, 803, 1045], "lowercas": [420, 428, 446, 447, 449, 451, 453, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 593, 594, 596, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 870, 875, 901, 902, 1050], "lowest": [2, 107, 116, 189, 200, 263, 374, 412, 416, 640, 642, 808, 809, 812, 916, 917, 1003, 1006, 1022, 1052], "loyal": 1042, "loyola": [0, 370, 1050, 1051], "lo\u00efc": [0, 401, 1045, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "lp_model": [332, 333], "lpgo": [416, 814], "lpo": 815, "lprun": 386, "lr": [62, 64, 140, 158, 159, 218, 244, 245, 269, 276, 393, 403, 419, 573, 574, 575, 717, 989], "lr_": 1006, "lr__c": 419, "lr_base": 276, "lrap": [744, 1006], "lrjball": [1047, 1048], "lrlinearregress": 159, "ls100": 337, "ls2010": 998, "ls30": 337, "ls50": 337, "ls_pipelin": 336, "lsa": [2, 417, 549, 1039], "lsa_vector": 355, "lshforest": [1041, 1044], "lsi": 417, "lsqr": [69, 320, 554, 677, 679, 692, 1000, 1038, 1044, 1051], "lstrip": [67, 79, 95, 242, 308, 315], "lstsq": [130, 380, 662, 675], "lsturtew": 1050, "lsvc": 421, "lsvm": 193, "lsvm_score": 193, "lsvm_time": 193, "lt": [103, 104, 140, 156, 188, 263, 271, 285, 380, 400], "ltd": [267, 375], "ltg": [170, 377, 506], "ltorgo": 375, "ltsa": [235, 236, 237, 694, 698, 1003, 1056], "lu": [546, 549, 952, 953, 1043, 1044, 1045, 1046, 1053, 1054, 1055], "luangkot": 1044, "luca": [1037, 1047, 1048, 1049, 1050], "lucca": 1050, "luce": 1040, "lucen": 420, "lucgiffon": 1048, "luci": [0, 370, 391, 401, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "luciano": [1045, 1052], "lucieclair": 1051, "lucija": 1045, "lucio": 1046, "lucki": 363, "lucyleeow": 1048, "ludwig": 1037, "luessi": 1039, "lui": [663, 1038, 1040, 1041, 1045, 1054], "luiz": 1051, "luk": 1046, "luka": [1041, 1048, 1054, 1055], "luke": 1045, "lukowski": 1052, "luk\u00e1\u0161": 1054, "luna": 1051, "lunt": 1040, "luo": 1041, "lupo": 1049, "luqi": 1046, "luqu": 1047, "lurk": 1037, "lustig": 1002, "lutz": [1043, 1047, 1050, 1054], "luxburg": [412, 456, 466, 696], "luzgin": 1047, "lv_ep": 247, "lvdmaaten": [697, 1044], "lw": [93, 109, 110, 112, 125, 129, 130, 209, 216, 218, 221, 225, 232, 238, 261, 268, 283, 298, 313, 334, 349], "lw_cov_": 113, "lw_mse": 110, "lw_prec_": 113, "lw_score": 128, "lw_shrinkag": 110, "lwda": 454, "lx": 1009, "ly": [247, 857, 859, 860, 861, 1041], "ly648499246": 1050, "lynch": [1038, 1044], "lyon": [1043, 1044], "lyra": [1038, 1041, 1042], "lyrl2004": [375, 502], "l\u00e9o": 1045, "l\u00e9on": [1020, 1051, 1052, 1053], "l\u00e9onard": [1047, 1052], "l\u00e9one": 1043, "l\u00e9oni": 1043, "l\u00f3pez": [1041, 1045, 1046, 1049], "l\u00f6fstedt": 1044, "l\u00f6ning": 1049, "m": [0, 43, 47, 50, 57, 63, 64, 79, 91, 92, 96, 97, 98, 111, 112, 121, 135, 159, 198, 215, 233, 273, 277, 306, 329, 336, 339, 349, 354, 367, 368, 374, 375, 377, 378, 380, 384, 386, 394, 398, 409, 410, 412, 414, 417, 419, 421, 423, 448, 449, 450, 454, 461, 477, 478, 505, 518, 533, 537, 539, 541, 546, 644, 650, 654, 669, 676, 690, 691, 694, 698, 713, 721, 731, 746, 761, 763, 764, 802, 803, 855, 880, 953, 984, 985, 996, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1020, 1022, 1030, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055], "m1": [378, 408], "m11": 375, "m2": 408, "m2012": 999, "m2019": 1013, "m_max": 174, "ma": [113, 319, 343, 1002, 1043, 1048], "maascha": 1052, "maaten": [697, 701, 1003], "mabel": [1045, 1049], "mabu": 1050, "mac": [57, 319, 336, 375, 380, 713, 1006], "macaulei": 319, "macbook": 1045, "macdonald": [1047, 1048], "mach": [278, 410, 416, 598, 599], "machado": [410, 728], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 96, 105, 141, 162, 166, 167, 170, 172, 177, 186, 190, 205, 210, 227, 255, 267, 273, 276, 279, 290, 307, 313, 318, 320, 324, 327, 330, 339, 344, 347, 350, 354, 356, 367, 368, 373, 374, 375, 377, 380, 383, 387, 392, 393, 394, 397, 400, 406, 410, 412, 416, 417, 419, 420, 422, 441, 443, 452, 475, 476, 482, 507, 509, 515, 521, 522, 523, 535, 537, 539, 546, 549, 560, 561, 562, 563, 564, 565, 569, 570, 571, 598, 599, 615, 616, 619, 624, 627, 639, 643, 644, 646, 648, 649, 650, 655, 656, 659, 660, 661, 662, 663, 664, 681, 687, 688, 697, 713, 718, 730, 740, 746, 748, 790, 793, 802, 834, 835, 849, 850, 855, 858, 865, 866, 867, 869, 887, 889, 895, 909, 910, 911, 912, 914, 915, 919, 920, 995, 996, 998, 999, 1002, 1003, 1004, 1006, 1007, 1009, 1012, 1013, 1014, 1016, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1037, 1039, 1049, 1050, 1051, 1052, 1054], "machineri": 958, "maciej": 1048, "maci\u00e0": [1006, 1050, 1052], "mackai": [649, 650, 1002], "mackenbach": 1048, "maco": [381, 383, 398, 408, 1045, 1049, 1051], "macosx": 1037, "macro": [45, 68, 102, 167, 271, 311, 322, 332, 333, 375, 416, 712, 718, 734, 735, 743, 788, 789, 792, 793, 827, 1006, 1037, 1045, 1053], "macro_roc_auc_ovo": 282, "macro_roc_auc_ovr": 282, "macroscop": 412, "macsween": [1046, 1047], "mad": [676, 1043], "madan": 1049, "made": [0, 52, 64, 102, 112, 126, 135, 141, 159, 179, 188, 189, 215, 233, 252, 264, 277, 319, 323, 343, 359, 367, 375, 377, 380, 384, 394, 395, 403, 412, 419, 420, 424, 447, 450, 451, 453, 463, 501, 508, 593, 594, 596, 635, 636, 661, 670, 684, 690, 691, 740, 788, 805, 808, 809, 819, 823, 824, 825, 846, 849, 850, 1007, 1012, 1022, 1025, 1030, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1050, 1051, 1055], "madelon": 520, "madhura": [1046, 1048, 1049, 1052, 1053], "madinak": 1052, "madsen": [1043, 1045], "mae": [43, 52, 156, 215, 217, 563, 570, 750, 918, 920, 1006, 1022, 1044, 1045, 1049, 1050], "mae_test": 188, "mae_train": 188, "maennel": 1052, "magali": 1051, "magazin": [112, 421], "magda": 1048, "magenta": [109, 150], "maggi": [1051, 1055], "maggiecheg": [1047, 1051], "maggio": [1048, 1049, 1050], "magic": [249, 381, 386, 422, 621, 626, 629], "magnesium": 377, "magnitud": [43, 130, 137, 173, 184, 188, 232, 252, 278, 313, 318, 325, 330, 367, 375, 386, 412, 419, 422, 618, 657, 709, 889, 1002, 1006, 1010, 1016, 1020, 1022, 1039, 1046, 1055], "mahajan": [1045, 1047, 1054], "mahal": 111, "mahal_emp_cov": 111, "mahal_robust_cov": 111, "mahalanobi": [108, 112, 185, 218, 412, 414, 454, 461, 473, 474, 475, 476, 477, 478, 479, 480, 704, 783, 784, 785, 1000, 1009, 1012, 1027, 1045, 1048, 1049], "mahalanobisdist": 704, "mahapatra": 1044, "mahdavi": 644, "maheshakya": [0, 1040, 1041, 1042], "mahieux": 1030, "mahimkar": 1055, "mahmood": 1055, "mahout": 846, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 80, 89, 103, 116, 121, 145, 146, 151, 170, 176, 178, 180, 188, 191, 193, 196, 200, 204, 219, 221, 240, 249, 252, 276, 278, 280, 281, 287, 308, 318, 333, 343, 347, 350, 354, 355, 356, 363, 367, 368, 369, 372, 374, 375, 376, 377, 379, 380, 382, 384, 385, 388, 392, 394, 395, 398, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 435, 443, 444, 445, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 463, 466, 469, 473, 476, 486, 487, 488, 491, 492, 493, 501, 513, 514, 520, 539, 540, 543, 545, 546, 549, 552, 553, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 579, 586, 599, 602, 607, 615, 616, 622, 625, 639, 640, 642, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 681, 682, 683, 684, 686, 689, 691, 693, 694, 696, 697, 698, 700, 702, 710, 716, 717, 720, 721, 723, 724, 726, 727, 728, 729, 731, 743, 761, 768, 790, 791, 805, 807, 808, 809, 810, 819, 820, 821, 824, 825, 830, 834, 837, 842, 843, 844, 845, 846, 848, 851, 852, 853, 855, 857, 859, 860, 861, 867, 868, 869, 872, 874, 884, 886, 887, 888, 889, 890, 892, 898, 901, 902, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 933, 935, 936, 942, 956, 957, 995, 996, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "maikia": [1045, 1046, 1048, 1049], "mail": [375, 380, 384, 388, 392, 395, 1045, 1046], "mailhot": 1037, "mailman": 388, "main": [2, 37, 48, 68, 95, 116, 125, 145, 185, 242, 282, 292, 321, 350, 354, 367, 368, 369, 373, 378, 380, 382, 384, 386, 388, 392, 393, 394, 397, 398, 410, 412, 417, 419, 420, 422, 508, 530, 535, 554, 555, 630, 718, 839, 909, 910, 995, 1003, 1005, 1006, 1013, 1018, 1026, 1029, 1037, 1040, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mainak": 1044, "maingret": 1048, "mainli": [64, 86, 135, 138, 172, 282, 290, 367, 382, 410, 616, 1008, 1013], "maint": 384, "maintain": [88, 220, 233, 235, 249, 273, 368, 379, 383, 386, 387, 388, 392, 394, 395, 398, 412, 419, 444, 446, 878, 879, 885, 886, 889, 894, 897, 898, 900, 1002, 1003, 1016, 1025, 1026, 1032, 1052, 1056], "mainten": [0, 380, 388, 392, 398, 405, 1002, 1026, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "mainy": 1049, "mair": 640, "mairal": [417, 536, 542], "maisonneuv": 1049, "maithreyi": 1047, "maj": 574, "major": [2, 49, 54, 70, 141, 267, 280, 313, 317, 322, 323, 324, 325, 326, 327, 328, 329, 347, 356, 367, 375, 379, 380, 384, 386, 392, 395, 406, 412, 416, 418, 420, 556, 574, 575, 699, 921, 923, 1006, 1009, 1020, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "majorfeatur": 384, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 89, 94, 95, 100, 105, 126, 135, 141, 145, 148, 151, 154, 167, 170, 172, 177, 180, 187, 188, 189, 190, 195, 200, 201, 204, 207, 208, 209, 211, 215, 216, 217, 219, 221, 233, 236, 244, 246, 248, 249, 250, 252, 258, 260, 263, 264, 267, 268, 273, 275, 276, 282, 283, 284, 287, 292, 302, 310, 313, 314, 319, 326, 328, 330, 343, 352, 354, 355, 356, 363, 367, 368, 369, 374, 375, 378, 379, 381, 382, 383, 384, 385, 386, 388, 392, 394, 398, 403, 406, 409, 410, 412, 413, 414, 416, 417, 419, 420, 421, 424, 444, 445, 446, 447, 449, 451, 453, 455, 456, 457, 462, 463, 464, 466, 492, 508, 519, 520, 527, 528, 532, 537, 539, 546, 556, 557, 560, 561, 566, 567, 588, 589, 612, 613, 636, 654, 660, 661, 676, 696, 700, 735, 742, 747, 773, 774, 786, 802, 803, 805, 807, 810, 816, 820, 821, 824, 825, 831, 832, 839, 840, 843, 876, 885, 888, 889, 893, 897, 899, 900, 901, 902, 915, 923, 928, 935, 936, 947, 953, 960, 966, 991, 996, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "make_": 1046, "make_biclust": [2, 59, 518, 1039], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 207, 227, 242, 261, 316, 323, 326, 341, 344, 345, 351, 376, 383, 419, 520, 701, 715, 797, 798, 925, 1045, 1048, 1051], "make_cbar": 284, "make_checkerboard": [2, 58, 516, 1039], "make_circl": [2, 67, 79, 95, 126, 154, 240, 308, 309, 315, 334, 376, 1038, 1045, 1048], "make_classif": [2, 62, 64, 67, 139, 140, 142, 167, 169, 270, 276, 284, 285, 303, 308, 315, 322, 324, 328, 330, 350, 363, 376, 383, 408, 411, 419, 441, 442, 491, 517, 558, 560, 562, 569, 610, 612, 671, 702, 703, 705, 707, 804, 827, 828, 833, 834, 836, 839, 866, 869, 909, 916, 995, 1006, 1007, 1016, 1021, 1043, 1044, 1045, 1047], "make_column_selector": [2, 103, 145, 156, 252, 413, 468, 471, 1047], "make_column_transform": [2, 145, 156, 188, 244, 323, 413, 468, 470, 1045], "make_data": [70, 94], "make_dataset": 1046, "make_default": 975, "make_ellips": 260, "make_estim": 252, "make_friedman1": [2, 376, 419, 544, 548, 598, 599, 637], "make_friedman2": [2, 376, 616, 618, 619, 620, 621, 622, 626, 629, 630], "make_friedman3": [2, 376], "make_gaussian_quantil": [2, 135, 137, 376, 474, 478, 479, 480, 485, 525], "make_hastie_10_2": [2, 150, 277, 376, 419, 564, 1013], "make_heatmap": 284, "make_low_rank_matrix": [2, 328, 330, 529], "make_ml_clf": 119, "make_moon": [2, 67, 79, 95, 242, 273, 308, 309, 315, 376, 995, 1044, 1048], "make_multilabel_classif": [2, 119, 250, 376, 520, 541, 793, 840, 841, 1006, 1039, 1040, 1042, 1048], "make_pipelin": [2, 43, 67, 91, 116, 140, 145, 156, 166, 167, 170, 183, 184, 188, 189, 193, 195, 202, 204, 215, 216, 221, 229, 233, 236, 242, 243, 244, 252, 253, 254, 256, 267, 270, 280, 287, 293, 302, 308, 315, 318, 319, 320, 322, 323, 324, 325, 326, 327, 355, 363, 393, 403, 413, 416, 572, 681, 683, 861, 869, 894, 895, 897, 898, 899, 900, 909, 910, 911, 912, 914, 915, 996, 1009, 1016, 1020, 1021, 1040, 1047, 1050], "make_plot": 313, "make_regress": [2, 49, 107, 195, 197, 198, 201, 218, 219, 286, 323, 329, 363, 376, 383, 393, 559, 561, 565, 570, 611, 613, 614, 640, 651, 652, 654, 656, 657, 658, 660, 665, 666, 667, 668, 669, 670, 672, 676, 684, 686, 687, 688, 690, 691, 692, 867, 910, 927, 1006, 1007, 1009], "make_s_curv": [2, 235, 240], "make_scor": [2, 52, 148, 151, 267, 277, 330, 403, 411, 416, 716, 805, 827, 831, 832, 1006, 1046, 1054, 1056], "make_sparse_coded_sign": [2, 214, 536, 542, 550, 551, 1051, 1053], "make_sparse_spd_matrix": [2, 113, 482, 534, 1054], "make_sparse_uncorrel": [2, 376], "make_spd_matrix": [2, 532], "make_subplot": 141, "make_swiss_rol": [2, 100, 239, 1051], "make_union": [2, 413, 868, 1040, 1044], "makedir": 1044, "maker": [187, 188], "makhija": 1052, "makoeppel": 1050, "maksym": 1052, "maladier": 1052, "maladi\u00e8r": [1052, 1053], "malcolm": 1045, "maldonado": [1047, 1050], "male": [103, 188, 327, 385, 882, 883, 1016], "malem": 1054, "malet": 1037, "malform": [55, 1041], "malic": [318, 377], "malic_acid": 48, "malici": 406, "malign": [170, 377, 505], "malik": [412, 456, 466, 696], "mallat": [669, 690, 691, 1002], "mallatpursuit93": [669, 690, 691], "mallow": [736, 1043], "maloo": [1045, 1046], "malt": [1050, 1051, 1052, 1054], "maltimor": 1047, "malu": 233, "malzer": 450, "mal\u00e9zieux": 1050, "mamba": 406, "mame": 1054, "mammal": 50, "mammalian": 417, "man": [417, 595, 774, 844, 848, 1004, 1006, 1008], "manag": [0, 2, 116, 256, 366, 374, 378, 381, 382, 384, 388, 392, 394, 395, 406, 419, 454, 472, 631, 907, 1000, 1022, 1025, 1026, 1030, 1032, 1050, 1053, 1056], "manaileng": 1050, "manasimj": 1055, "mandal": 1047, "mandatori": [380, 420], "mandatorili": 1044, "mandera": 1040, "mandi": [1048, 1051], "mandjev": 1051, "mandyam": 1047, "mangasarian": [170, 377], "mangipudi": 1043, "manh": 1045, "manhattan": [412, 445, 449, 454, 461, 704, 767, 776, 783, 784, 785, 856, 1004, 1009, 1041, 1046, 1053], "manhattan_dist": [2, 454, 461, 693, 767, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 1037, 1047, 1052, 1053], "manhattandist": 704, "mani": [43, 46, 49, 57, 88, 89, 106, 109, 113, 135, 141, 142, 143, 144, 149, 166, 170, 190, 215, 235, 246, 259, 266, 267, 273, 281, 285, 286, 293, 313, 318, 319, 322, 323, 324, 325, 326, 328, 329, 330, 354, 363, 367, 369, 375, 377, 379, 380, 382, 393, 394, 395, 398, 406, 409, 410, 412, 413, 414, 417, 419, 420, 421, 422, 424, 508, 546, 558, 559, 562, 563, 564, 565, 569, 570, 571, 611, 614, 632, 644, 655, 659, 663, 664, 671, 672, 673, 681, 682, 683, 697, 700, 779, 783, 805, 809, 819, 866, 867, 882, 887, 889, 909, 917, 918, 919, 920, 995, 996, 998, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1019, 1021, 1023, 1024, 1025, 1026, 1030, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1052, 1053], "manideep": 1055, "manifest": [388, 1003, 1009], "manifold": [2, 51, 74, 85, 100, 140, 238, 239, 240, 246, 293, 303, 322, 326, 327, 334, 373, 394, 412, 417, 419, 507, 530, 535, 549, 554, 571, 693, 694, 695, 696, 697, 698, 699, 700, 701, 858, 870, 879, 902, 938, 1009, 1027, 1031, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1054], "manimaran": [1046, 1048, 1049, 1050, 1051], "manipul": [2, 374, 408, 512, 1025, 1043], "manish": 1048, "maniteja": [1043, 1044, 1045], "mankoo": 1052, "mann": 1047, "mannbi": 1045, "manner": [43, 107, 121, 167, 189, 193, 260, 326, 327, 368, 380, 386, 412, 417, 419, 420, 714, 849, 850, 995, 1006, 1022, 1040, 1047], "mannila": 1018, "manning2008": 1006, "manoharan": [1044, 1045], "manoj": [0, 170, 402, 1040, 1041, 1042, 1043, 1044], "manraj": 1044, "mansi": 1052, "mansingh": 1051, "mansouri": 1053, "mantovani": 1052, "manu": 375, "manual": [2, 43, 80, 88, 188, 189, 191, 216, 226, 275, 293, 335, 341, 354, 356, 367, 368, 375, 380, 384, 385, 392, 393, 398, 406, 412, 416, 417, 418, 441, 453, 572, 804, 827, 859, 882, 888, 995, 1000, 1001, 1002, 1005, 1006, 1009, 1016, 1026, 1045, 1047, 1053, 1055], "manuel": [1037, 1041, 1045, 1046, 1049, 1050, 1055], "manufactur": [188, 419], "manvendra": [1043, 1044], "maocx": 1047, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 86, 116, 126, 139, 147, 150, 154, 172, 185, 193, 215, 233, 235, 237, 241, 249, 252, 274, 277, 282, 301, 304, 306, 312, 313, 336, 343, 347, 355, 356, 374, 375, 381, 392, 394, 403, 406, 410, 412, 413, 416, 417, 419, 420, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 501, 503, 507, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 767, 770, 802, 803, 804, 805, 808, 809, 816, 817, 819, 827, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 897, 898, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 959, 962, 963, 995, 998, 1003, 1006, 1008, 1018, 1021, 1022, 1027, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054], "mapd": 1006, "mape": [2, 52, 751, 1006], "mape_cv_mean": 145, "mape_cv_std": 145, "mapi": 52, "mar": 51, "marc": [1044, 1046, 1047, 1053, 1056], "march": [177, 731, 761, 1006, 1037, 1041, 1045, 1047, 1052], "marchand": 1051, "marchman": [1038, 1039], "marco": [1043, 1045, 1046, 1050, 1051, 1052, 1055], "marcofalk": 1044, "marcogorelli": [1045, 1046], "marcolini": 1050, "marcom": 1051, "marcu": [1045, 1054], "mare": 1054, "marek": [1037, 1054], "maren": [0, 370, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "margeta": 1045, "margin": [30, 43, 51, 62, 64, 137, 163, 173, 174, 175, 176, 177, 178, 185, 188, 189, 194, 225, 226, 228, 250, 252, 273, 290, 313, 316, 319, 338, 339, 341, 342, 343, 345, 347, 351, 352, 377, 410, 417, 419, 422, 517, 615, 616, 636, 650, 681, 740, 838, 886, 898, 911, 914, 1002, 1006, 1008, 1012, 1013, 1016, 1020, 1021, 1027, 1044, 1046], "marguli": 1047, "mari": [102, 1045, 1046, 1047, 1048, 1051], "maria": [170, 412, 1048, 1049, 1050, 1051, 1052], "mariam": 1049, "mariana": 1048, "mariangela": 1050, "mariano": 273, "mariel": 1048, "marielaraj": 1050, "marija": [1048, 1049, 1055], "marijn": 1049, "marin": [533, 1055], "marina": 412, "marinelm": 1046, "mario": [410, 1041, 1043, 1051, 1052, 1053], "marit": [329, 501], "mari\u00e9": [0, 370, 1046, 1047, 1048, 1049, 1050, 1051], "mark": [2, 70, 91, 119, 165, 184, 277, 284, 372, 380, 384, 388, 389, 394, 412, 540, 612, 613, 616, 637, 663, 862, 863, 904, 905, 922, 928, 943, 948, 953, 1002, 1030, 1032, 1037, 1038, 1043, 1045, 1046, 1053, 1054, 1055], "markdown": 383, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 85, 88, 91, 92, 93, 96, 97, 115, 119, 123, 141, 155, 179, 180, 193, 202, 208, 210, 212, 213, 215, 217, 218, 230, 232, 236, 258, 260, 261, 267, 268, 273, 275, 276, 277, 300, 313, 318, 334, 358, 383, 384, 420, 1045, 1047, 1048, 1053], "markeredgecolor": [82, 88, 94, 96, 97], "markeredgewidth": [111, 277], "markerfacecolor": [82, 88, 94, 96, 97], "markers": [82, 88, 91, 94, 96, 97, 148, 175, 179, 245, 267, 326], "markerstyl": 267, "market": [42, 80, 85, 151, 185, 235, 236, 412, 414, 458, 475, 476, 694, 1003, 1027, 1030], "marketplac": 1030, "markham": [1041, 1048, 1049], "markiwanchyshyn": 1045, "marko": [1037, 1046, 1047, 1053], "markou": 1050, "markov": [422, 616, 1011, 1025, 1037], "markovtsev": 1045, "marktab": 1042, "marku": [412, 454, 461, 1045, 1047, 1048, 1049], "marmo": [0, 371, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "maron": [412, 446], "marr": 188, "marr_unmarri": 188, "marreddi": 1051, "marri": 188, "marriott": 51, "marsgui": 1045, "marsh": 1048, "marshal": 377, "marsi": 1040, "marsland": 535, "marslast": 535, "marszalek": [763, 764, 1004], "mart": [51, 1047], "martel": 1051, "martha": 319, "martian": 1047, "martin": [0, 370, 726, 728, 729, 1002, 1006, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055], "martin1997": 1006, "martina": [1047, 1049], "martinbpr": [1042, 1043], "martinez": 1044, "martino": 1042, "martinosorb": 1042, "martinsson": [55, 540, 546, 953], "martynov": 1050, "mart\u00edn": [1050, 1051], "marufo": 1052, "marufur": 1044, "marvin": [1052, 1053], "marwaha": 1045, "marx": 1016, "maryanmorel": [1042, 1043], "marzinotto": [1045, 1046], "mar\u00eda": [1051, 1052, 1053], "mas_vnr_typ": 252, "masafumi": 1042, "masanori": [1052, 1053], "masashi": [1047, 1049], "masecchia": 1037, "mash": 420, "mask": [2, 53, 77, 99, 143, 215, 223, 252, 271, 272, 336, 389, 394, 413, 419, 468, 473, 478, 566, 567, 586, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 634, 635, 637, 638, 654, 676, 805, 808, 809, 819, 977, 996, 1013, 1037, 1040, 1042, 1043, 1045, 1047, 1055], "mask_al": 996, "mask_false_neg": 267, "mask_false_posit": 267, "mask_missing_values_onli": 996, "mask_out": 53, "mask_test": 233, "mask_train": [189, 233], "mask_true_neg": 267, "mask_true_posit": 267, "mask_y_pr": 66, "maskani": [1045, 1047, 1048, 1049], "masked_arrai": [343, 805, 819], "masked_equ": 113, "maskedarrai": [277, 1043], "mason": 1041, "mass": [170, 253, 377, 450, 802, 1002, 1013], "massachusett": 375, "massia": [0, 1048, 1050, 1051], "massich": [1044, 1045, 1046, 1047], "massil": 1043, "masstran": 1046, "master": [51, 293, 327, 380, 1030], "masurel": 1038, "masvnrarea": [107, 156], "masvnrtyp": [145, 156], "mat": [374, 420], "match": [2, 43, 58, 72, 87, 121, 122, 124, 127, 130, 141, 185, 193, 194, 215, 237, 245, 252, 347, 356, 375, 378, 382, 412, 417, 419, 420, 433, 453, 468, 470, 496, 513, 514, 520, 531, 536, 542, 547, 553, 556, 572, 573, 577, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 663, 669, 670, 690, 691, 704, 708, 709, 710, 718, 720, 724, 739, 783, 784, 785, 791, 849, 850, 854, 858, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 909, 916, 922, 939, 1003, 1005, 1006, 1008, 1009, 1027, 1028, 1032, 1037, 1043, 1044, 1045, 1047, 1049, 1050, 1053, 1055], "matchingdist": 704, "matchmak": 1030, "matcovici": 1047, "mate": 354, "matem\u00e1tica": 1002, "mateo": 1050, "materi": [53, 188, 329, 395, 546, 586, 899, 900], "matern": [2, 181, 422, 1048, 1052], "mateusz": [1041, 1048, 1049, 1054, 1055], "math": [82, 102, 151, 170, 252, 273, 274, 377, 398, 769], "mathbb": [121, 138, 175, 415, 1006, 1013, 1021], "mathbf": [175, 347, 417, 1002, 1006, 1010, 1011, 1020], "mathcal": [219, 350, 417, 419, 632, 701, 998, 1000, 1002, 1006, 1020, 1050], "mathemat": [37, 135, 188, 202, 232, 276, 372, 377, 380, 394, 397, 412, 414, 417, 418, 422, 554, 555, 562, 569, 640, 651, 661, 797, 798, 803, 867, 911, 914, 917, 919, 1002, 1006, 1010, 1016, 1018, 1028, 1030, 1032, 1051], "matheu": 1043, "mathew": 1052, "mathi": 1050, "mathia": 1051, "mathieu": [0, 402, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1050], "mathrm": [412, 414, 417, 421, 1002, 1022], "mathschi": 1049, "mathur": [1044, 1046, 1047, 1052, 1053, 1055], "mathurin": [0, 1048, 1050, 1051], "mathurinm": [1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "matjansen": 1051, "mato": 1049, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 191, 193, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 329, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 374, 376, 380, 387, 398, 405, 442, 507, 636, 637, 702, 703, 705, 706, 707, 811, 828, 923, 1001, 1025, 1034, 1046, 1049, 1050, 1051, 1052, 1055], "matric": [2, 37, 70, 74, 75, 111, 113, 121, 220, 259, 260, 262, 263, 264, 293, 306, 323, 329, 336, 354, 355, 372, 374, 382, 383, 392, 393, 394, 412, 413, 414, 415, 417, 420, 421, 427, 454, 455, 457, 468, 477, 485, 486, 487, 488, 531, 539, 540, 543, 545, 546, 549, 552, 554, 555, 560, 561, 568, 571, 586, 587, 594, 648, 651, 652, 657, 658, 663, 669, 677, 679, 692, 759, 765, 773, 779, 783, 784, 785, 786, 797, 802, 803, 835, 853, 856, 861, 872, 876, 878, 881, 884, 886, 887, 889, 892, 894, 896, 898, 899, 900, 901, 902, 911, 912, 914, 915, 931, 953, 960, 969, 976, 978, 979, 996, 998, 1000, 1003, 1004, 1005, 1007, 1009, 1010, 1018, 1020, 1021, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 87, 95, 102, 110, 111, 112, 113, 115, 121, 122, 123, 131, 179, 185, 191, 194, 201, 216, 220, 243, 246, 247, 249, 263, 265, 267, 280, 310, 326, 329, 332, 333, 347, 354, 355, 356, 362, 367, 375, 376, 377, 380, 382, 386, 389, 392, 393, 394, 409, 413, 414, 415, 420, 421, 422, 423, 424, 434, 435, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 458, 461, 463, 464, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 497, 501, 502, 505, 506, 507, 508, 509, 510, 513, 514, 515, 524, 526, 528, 529, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 598, 599, 608, 609, 610, 611, 612, 613, 614, 616, 625, 634, 635, 636, 638, 640, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 717, 718, 719, 720, 721, 723, 727, 734, 735, 736, 739, 743, 744, 745, 746, 759, 760, 763, 764, 765, 766, 768, 769, 771, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 792, 793, 797, 798, 801, 802, 803, 804, 805, 808, 809, 819, 827, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 873, 874, 875, 876, 878, 880, 881, 882, 884, 886, 887, 888, 889, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 931, 933, 934, 935, 936, 941, 950, 951, 952, 953, 954, 957, 959, 960, 968, 969, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 994, 996, 998, 1000, 1002, 1003, 1007, 1008, 1009, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "matrixorz": 1040, "matshow": [58, 59, 99, 143, 168, 310, 507], "matsubara": 1006, "matt": [1040, 1041, 1042, 1047, 1048, 1052, 1053], "matteo": [1041, 1043, 1051], "matter": [130, 264, 347, 363, 412, 413, 419, 572, 673, 681, 683, 1002, 1041], "matthew": [2, 379, 385, 541, 748, 1037, 1040, 1044, 1046, 1050, 1051, 1055], "matthews_corrcoef": [2, 1006, 1037, 1043, 1044, 1051], "matthia": [1037, 1039, 1040, 1043, 1044, 1045, 1049, 1052], "matthieu": [0, 402, 1037, 1041, 1052], "matti": [1038, 1041, 1042], "matur": [380, 1025, 1026], "mat\u00e9rn": 624, "mat\u00eda": 1051, "maud": 1040, "mauna": 177, "maura": 1048, "mauroantonioserrano": 1052, "mav": 1055, "mavani": 1045, "mavroforaki": [1041, 1043], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 85, 91, 95, 100, 104, 105, 108, 110, 113, 121, 124, 128, 131, 135, 137, 144, 150, 154, 161, 162, 163, 165, 166, 170, 174, 176, 177, 184, 185, 188, 198, 202, 204, 208, 210, 217, 218, 221, 229, 231, 233, 238, 246, 250, 271, 272, 273, 284, 292, 293, 295, 299, 300, 304, 306, 308, 310, 313, 315, 316, 318, 325, 330, 335, 337, 351, 367, 412, 414, 417, 473, 474, 475, 476, 477, 478, 479, 480, 481, 517, 541, 560, 561, 562, 563, 564, 565, 568, 569, 570, 611, 632, 636, 637, 653, 654, 674, 677, 679, 685, 696, 697, 701, 704, 709, 710, 762, 797, 798, 805, 866, 867, 878, 879, 881, 888, 895, 896, 917, 918, 919, 920, 1002, 1004, 1009, 1016, 1020, 1021, 1027, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "max_": [412, 1006], "max_abs_": 878, "max_abs_scal": 1016, "max_bin": [325, 326, 419, 566, 567, 1054], "max_categori": [319, 326, 328, 882, 883, 1016, 1051, 1053], "max_cluster_s": 450, "max_column": 233, "max_degre": [884, 1050], "max_depth": [46, 67, 136, 137, 140, 144, 145, 146, 147, 148, 149, 150, 154, 155, 157, 183, 236, 270, 285, 290, 324, 325, 358, 360, 361, 362, 393, 394, 411, 419, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 716, 808, 809, 833, 917, 918, 919, 920, 921, 922, 923, 995, 1013, 1022, 1046, 1048], "max_df": [54, 274, 336, 354, 355, 593, 596, 1048, 1055], "max_dist": 246, "max_doc_update_it": 541, "max_ep": [412, 454, 459, 460, 461], "max_error": [2, 408, 1006, 1046, 1056], "max_estim": 139, "max_featur": [54, 67, 139, 150, 251, 270, 285, 324, 419, 421, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 593, 596, 602, 917, 918, 919, 920, 995, 1002, 1037, 1039, 1040, 1044, 1045, 1048, 1051, 1054], "max_features_": [564, 565, 602, 917, 918, 919, 920, 1051], "max_fpr": [793, 1006, 1045], "max_fun": [866, 867, 1047], "max_i": [250, 1008], "max_idf": 1050, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 104, 105, 121, 124, 140, 141, 145, 151, 158, 161, 162, 183, 184, 188, 189, 195, 201, 207, 208, 222, 223, 224, 227, 228, 230, 235, 236, 237, 238, 240, 253, 254, 258, 259, 260, 261, 264, 286, 303, 308, 309, 310, 319, 324, 325, 326, 332, 333, 340, 354, 355, 386, 394, 419, 424, 444, 447, 451, 452, 453, 458, 463, 465, 475, 476, 482, 486, 487, 488, 536, 537, 538, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 566, 567, 632, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 677, 679, 681, 682, 683, 684, 685, 687, 688, 692, 693, 694, 695, 697, 698, 699, 802, 803, 819, 858, 866, 867, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 996, 998, 1002, 1009, 1010, 1019, 1020, 1038, 1041, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055], "max_iter": 333, "max_iter_list": 151, "max_iter_predict": 615, "max_j": [651, 657], "max_leaf_nod": [135, 141, 150, 215, 325, 362, 419, 562, 563, 564, 565, 566, 567, 569, 570, 571, 917, 918, 919, 920, 1040, 1046, 1048], "max_n": [593, 594, 596, 1037], "max_n_alpha": [656, 660], "max_nbyt": 971, "max_no_improv": [77, 94, 97, 453, 542, 543, 544, 551, 1051, 1052], "max_patch": [83, 420, 588, 589, 1045], "max_resourc": [148, 808, 809, 995], "max_resources_": [808, 809], "max_sampl": [152, 183, 419, 560, 561, 562, 563, 568, 569, 570, 639, 1047, 1050, 1053], "max_samples_": 568, "max_skip": 676, "max_subpopul": [232, 684, 1051], "max_thread": [368, 381], "max_train_s": [43, 52, 416, 826, 1044], "max_trial": [676, 1002], "max_val": 939, "max_valu": [632, 1048, 1049], "max_x": 250, "maxabs_scal": [2, 394, 878, 1045], "maxabsscal": [2, 369, 408, 873, 894, 996, 1016, 1042, 1045, 1046, 1047, 1048, 1053, 1054], "maxent": [2, 663, 664, 1002], "maxent_du": 663, "maxi": 1052, "maxim": [115, 116, 118, 121, 131, 148, 195, 263, 264, 267, 274, 278, 282, 283, 286, 287, 303, 318, 324, 343, 347, 358, 362, 377, 394, 409, 411, 412, 415, 417, 419, 421, 422, 554, 599, 615, 616, 649, 650, 653, 674, 684, 685, 725, 805, 808, 809, 819, 878, 884, 894, 1000, 1002, 1005, 1006, 1009, 1011, 1021, 1040, 1042, 1047, 1050, 1052, 1055], "maxima": 412, "maximesaur": [1052, 1053], "maximis": [161, 259, 301, 1000, 1009], "maximum": [2, 43, 47, 50, 64, 69, 72, 90, 109, 110, 111, 112, 113, 123, 135, 137, 140, 141, 144, 151, 173, 175, 178, 179, 185, 194, 202, 252, 267, 283, 295, 299, 300, 306, 313, 338, 339, 341, 342, 345, 355, 358, 360, 361, 367, 375, 385, 386, 393, 394, 409, 410, 412, 414, 415, 417, 419, 420, 422, 423, 424, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 458, 461, 463, 465, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 487, 488, 503, 514, 516, 517, 518, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 588, 589, 602, 615, 632, 636, 637, 640, 642, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 679, 681, 682, 683, 684, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 721, 749, 786, 802, 805, 808, 809, 811, 819, 826, 833, 858, 865, 866, 867, 873, 874, 878, 879, 881, 884, 885, 886, 888, 897, 898, 903, 904, 905, 906, 909, 910, 914, 917, 918, 919, 920, 921, 923, 932, 939, 995, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1020, 1021, 1022, 1027, 1044, 1045, 1047, 1048, 1051, 1052, 1054], "maxin": [1047, 1048], "maxsiz": 622, "maxval": [516, 518], "maxwel": [0, 370, 1047, 1050, 1051, 1052, 1053], "maxwelllzh": 1052, "may_share_memori": 1054, "mayb": [106, 310, 394, 420, 1021, 1026], "mayer": [419, 1049, 1051, 1054, 1055], "mayer2022": 419, "mayilvahanan": 412, "mayorov": [1040, 1041, 1042, 1043], "mayur": 1045, "mazari": 1045, "mb": [47, 246, 267, 354, 356, 375, 386, 501, 911, 912, 913, 914, 915, 1021, 1027, 1033], "mbilling": 1042, "mbillingr": 1047, "mbk": [77, 97], "mbk_means_cluster_cent": 97, "mbk_means_label": 97, "mbk_means_labels_uniqu": 77, "mblondel": [374, 513], "mbnmf": 54, "mc4229": 1048, "mc_clf": 1013, "mcar": 151, "mcc": [2, 748, 1006, 1051], "mccall": 102, "mccallum": [844, 1008], "mccarthi": [0, 364, 1037, 1045], "mcclish": [282, 793], "mcconaghi": 1030, "mccullagh": 1002, "mcculloh": [1042, 1043], "mcd": [2, 51, 111, 112, 414, 473, 478], "mcdermott": [1039, 1054], "mcdonald": 51, "mcdowel": 1045, "mcfadden": 1006, "mcfee": [1042, 1043], "mcgibbon": [1039, 1040, 1043], "mcgushion": 1046, "mcinn": [412, 1043, 1044, 1045, 1047, 1048, 1053], "mcivor": [1052, 1053], "mcm": [759, 1006], "mcm_": 759, "mcmahon": 1054, "mcsherri": [731, 761, 1006], "mctiernan": [1051, 1052], "mcve": [385, 392], "md": [2, 235, 236, 237, 238, 384, 693, 697, 699, 1031, 1032, 1037, 1049, 1052], "md5": 1049, "md5_checksum": 374, "md_scale": 235, "mdarii": 1053, "mdbecker": 1030, "mdi": [142, 149, 185, 186, 191, 419, 468, 501, 569, 635, 639, 835, 869, 883, 1014, 1027], "mdi_import": [190, 191], "mds_result": 699, "me": 354, "me1": 290, "me2": 290, "me3": 290, "mea": 91, "mean": [2, 43, 44, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 80, 82, 83, 86, 87, 88, 93, 103, 110, 111, 112, 113, 116, 119, 121, 124, 125, 126, 127, 128, 135, 137, 138, 141, 144, 145, 148, 149, 151, 156, 157, 158, 169, 170, 172, 177, 178, 179, 181, 183, 185, 188, 189, 196, 198, 204, 206, 208, 211, 215, 217, 221, 222, 224, 230, 231, 232, 233, 238, 240, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 267, 269, 270, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 304, 313, 316, 318, 319, 320, 322, 325, 328, 330, 335, 343, 346, 347, 350, 352, 353, 354, 356, 363, 367, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 403, 409, 410, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 435, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 506, 507, 517, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 593, 594, 595, 596, 599, 602, 607, 611, 612, 613, 614, 615, 616, 618, 627, 632, 633, 635, 637, 638, 639, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 689, 693, 694, 695, 696, 697, 698, 699, 700, 709, 710, 712, 714, 717, 718, 721, 722, 729, 731, 734, 735, 736, 741, 742, 743, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 779, 783, 784, 786, 788, 789, 790, 792, 793, 795, 796, 797, 798, 800, 802, 803, 804, 805, 808, 809, 811, 819, 823, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 859, 860, 862, 863, 865, 866, 867, 868, 870, 871, 873, 874, 878, 879, 881, 885, 887, 889, 890, 895, 897, 898, 900, 902, 904, 905, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 931, 935, 936, 938, 979, 980, 986, 990, 995, 996, 997, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1019, 1020, 1021, 1022, 1027, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "mean_": [122, 277, 537, 538, 539, 544, 546, 548, 889, 1016, 1045], "mean_absolute_error": [2, 52, 215, 217, 233, 408, 1006, 1038, 1040, 1056], "mean_absolute_percentage_error": [2, 52, 145, 408, 1006, 1049, 1051, 1056], "mean_auc": 283, "mean_change_tol": 541, "mean_fit_tim": [141, 295, 805, 819], "mean_fpr": 283, "mean_gamma_devi": [2, 408, 1006, 1047, 1056], "mean_impute_scor": 184, "mean_l1_ratio": 1040, "mean_pinball_loss": [2, 52, 148, 151, 325, 1002, 1006, 1050], "mean_pinball_loss_95p": 1006, "mean_poisson_devi": [2, 215, 408, 1006, 1047, 1056], "mean_precis": 271, "mean_precision_": 802, "mean_precision_prior": [258, 264, 802], "mean_precision_prior_": 802, "mean_predict": [52, 179], "mean_predictions_gpr": 172, "mean_prior": 802, "mean_prior_": 802, "mean_recal": 271, "mean_scor": [104, 282, 285, 355, 1050], "mean_score_tim": [141, 271, 274, 805, 819], "mean_shift": [2, 1042, 1045], "mean_square_error": 1038, "mean_squared_error": [2, 46, 146, 148, 149, 211, 215, 217, 219, 221, 233, 363, 408, 419, 757, 1006, 1038, 1040, 1047, 1048, 1054, 1056], "mean_squared_log_error": [2, 408, 716, 1006, 1044, 1050, 1054, 1056], "mean_test_": 277, "mean_test_precis": [271, 277], "mean_test_recal": 271, "mean_test_scor": [103, 104, 105, 113, 141, 161, 169, 263, 272, 273, 274, 281, 284, 285, 295, 343, 476, 599, 805, 819, 995, 1043, 1050], "mean_tim": 1043, "mean_tpr": [282, 283], "mean_train_precis": [805, 819], "mean_train_scor": [805, 819, 1043], "mean_tweedie_devi": [2, 233, 408, 1006, 1047, 1056], "mean_variance_axi": [2, 389, 1043, 1050], "mean_y_pr": 177, "meaning": [72, 191, 240, 302, 330, 356, 409, 411, 416, 420, 421, 553, 734, 735, 743, 788, 789, 792, 858, 1010, 1020, 1021, 1037, 1053], "meaningfulli": [215, 1006], "meaningless": [189, 420, 911, 914, 1040], "means_": [70, 258, 259, 260, 261, 263, 264, 554, 555, 802, 803], "means_init": [260, 261, 803], "meanshift": [2, 79, 326, 412, 444, 1040, 1041, 1042, 1045, 1047, 1048, 1051, 1052, 1053, 1055], "meant": [90, 151, 170, 252, 330, 375, 389, 478, 498, 682, 855, 928, 971, 972, 994, 996, 1010, 1012, 1016, 1038], "meanwhil": [392, 1021], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 82, 91, 93, 94, 122, 138, 139, 148, 152, 159, 170, 172, 177, 185, 187, 188, 189, 193, 204, 209, 214, 215, 219, 221, 233, 265, 271, 273, 279, 280, 318, 347, 354, 355, 367, 375, 377, 382, 386, 394, 409, 414, 416, 417, 418, 419, 420, 453, 456, 466, 503, 520, 543, 545, 552, 556, 562, 563, 564, 565, 568, 569, 570, 609, 612, 613, 616, 632, 636, 663, 695, 697, 703, 707, 709, 710, 712, 714, 717, 718, 721, 722, 725, 730, 731, 732, 734, 736, 741, 742, 744, 745, 748, 752, 760, 761, 762, 787, 788, 789, 791, 792, 793, 794, 797, 800, 830, 832, 835, 855, 886, 898, 917, 918, 919, 920, 926, 996, 1002, 1004, 1009, 1011, 1012, 1014, 1020, 1022, 1027, 1037, 1040, 1042, 1043, 1045, 1047], "mechan": [74, 249, 351, 354, 368, 380, 382, 406, 410, 412, 420, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 1004, 1022, 1030], "mecopur": 1054, "med": [57, 102, 282, 375, 1016], "meda": [107, 188, 1006], "media": [412, 1030], "median": [2, 43, 52, 72, 103, 107, 111, 112, 148, 183, 184, 188, 217, 221, 232, 244, 252, 313, 323, 325, 326, 375, 414, 419, 421, 444, 458, 462, 465, 478, 557, 559, 563, 570, 602, 632, 635, 640, 675, 676, 684, 726, 758, 856, 887, 899, 918, 920, 996, 1016, 1022, 1040, 1041], "median_absolute_error": [2, 107, 188, 1006, 1041, 1047, 1049], "median_predict": 52, "medic": [276, 416, 717, 1002, 1030], "medicin": [276, 717, 1006], "medina": [1037, 1039], "medinc": [313, 324, 375, 494], "medium": [42, 185, 248, 320, 343, 412, 648, 883, 999, 1002], "medoid": 450, "medoids_": 450, "medri": 1040, "meekail": [0, 401, 1051, 1052, 1053, 1054], "meer": [96, 412, 452], "meet": [380, 392, 395, 421, 577, 608, 866, 867, 906, 1006, 1019, 1030, 1045, 1046, 1047], "megabyt": 1051, "megasari": 1049, "meghann": [1045, 1047], "mehak": 1044, "mehdi": [1041, 1050], "mehgarg": 1052, "mehmet": [1044, 1050], "mehmetcanakbai": 1052, "mehrdad": 1051, "mehta": [1041, 1042, 1043, 1045, 1046, 1047, 1048, 1052, 1053], "mehul": 1044, "mei": [1042, 1047], "meier": 1044, "meila": 412, "mein": 420, "meinshausen": 200, "meirel": 1048, "meketon": 1044, "melani": [1030, 1044, 1045], "melderi": 1045, "melemo2": 1051, "meli": [1050, 1051, 1052], "melissa": 1045, "mellon": 904, "melnik": 1052, "melsyt": [1045, 1046], "mem": [87, 386, 513, 514, 1027], "member": [0, 354, 355, 375, 380, 383, 395, 412, 427, 446, 450, 452, 455, 457, 497, 560, 561, 562, 563, 568, 569, 570, 571, 586, 663, 664, 671, 672, 673, 681, 682, 683, 709, 710, 720, 722, 736, 741, 742, 762, 791, 800, 805, 909, 1002, 1009, 1037, 1049, 1052], "membership": [30, 89, 395, 409, 412, 516, 517, 518, 519, 520, 524, 527, 1021], "memit": 386, "memmap": [368, 375, 394, 417, 513, 539, 1045, 1054], "memoiz": [104, 375, 394], "memor": 190, "memori": [2, 47, 87, 103, 104, 125, 188, 189, 267, 295, 319, 322, 324, 326, 327, 330, 354, 355, 356, 368, 369, 374, 380, 383, 389, 392, 394, 406, 412, 413, 416, 417, 420, 423, 424, 445, 446, 447, 448, 449, 450, 451, 453, 454, 458, 461, 463, 472, 477, 483, 501, 508, 513, 514, 538, 539, 540, 543, 546, 560, 561, 562, 563, 568, 569, 570, 571, 586, 587, 593, 594, 596, 651, 652, 653, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 689, 783, 784, 785, 786, 805, 811, 819, 828, 830, 831, 832, 833, 836, 837, 838, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 869, 870, 887, 889, 899, 900, 902, 907, 909, 910, 917, 918, 919, 920, 936, 974, 990, 1002, 1008, 1009, 1016, 1018, 1019, 1021, 1022, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "memory_profil": [386, 398, 405], "memoryerror": [1045, 1049], "memoryview": 381, "memorywis": 406, "men": 377, "menes": 1052, "meng": [1037, 1038, 1041, 1043, 1044], "menoci": 1055, "menon": 410, "mensch": [1042, 1043, 1044, 1045], "mention": [88, 116, 135, 233, 287, 323, 363, 367, 380, 384, 385, 392, 412, 701, 901, 902, 995, 1000, 1002, 1026, 1029, 1030, 1044, 1045, 1046], "menu": 398, "menuet": 1046, "mercer": 998, "mere": [43, 273, 394, 836, 1020], "merg": [74, 76, 80, 84, 325, 378, 380, 383, 388, 392, 395, 412, 444, 445, 446, 449, 450, 467, 825, 1037, 1044], "merit": [380, 384, 395], "meritocrat": 395, "merritt": 1043, "mersenn": 1048, "merz": 410, "mesfer": 1050, "mesh": [91, 144, 154, 174, 247, 301, 308, 315, 337, 339], "meshgrid": [50, 63, 77, 91, 111, 144, 154, 173, 174, 175, 176, 178, 189, 226, 227, 228, 229, 240, 242, 262, 299, 306, 308, 315, 316, 337, 342, 343, 347, 348, 351, 352, 636], "meshulam": 1040, "meson": [378, 383, 398, 405, 1056], "mess": 1051, "messag": [73, 79, 95, 102, 121, 249, 354, 355, 375, 378, 379, 383, 384, 385, 388, 389, 412, 444, 458, 472, 544, 548, 553, 579, 632, 717, 805, 808, 809, 811, 819, 828, 833, 836, 838, 858, 866, 867, 907, 934, 935, 936, 939, 943, 968, 989, 994, 1006, 1016, 1037, 1041, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "met": [143, 249, 382, 421, 539, 546, 632, 676, 1002, 1006, 1045], "meta": [2, 7, 30, 31, 89, 102, 134, 159, 185, 215, 278, 282, 287, 289, 292, 328, 329, 361, 363, 374, 378, 382, 384, 392, 394, 403, 410, 421, 422, 432, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 501, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 580, 586, 587, 593, 595, 596, 602, 608, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 806, 807, 812, 814, 821, 823, 827, 832, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 926, 958, 965, 994, 995, 1007, 1026, 1027, 1028, 1032, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1054], "meta_clf_sample_weight": 249, "meta_est": 249, "meta_meta_est": 249, "metaclassifi": [249, 250], "metaclassifierifittedmetaclassifi": 249, "metadata": [2, 61, 133, 185, 197, 241, 267, 330, 355, 374, 375, 406, 426, 429, 432, 435, 436, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 493, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 961, 962, 963, 964, 965, 989, 1006, 1025, 1026, 1027, 1032, 1053], "metadata_rout": [2, 249, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 961, 962, 963, 964, 965], "metadatarequest": [2, 249, 426, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 473, 474, 475, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 562, 563, 564, 565, 566, 567, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 600, 601, 603, 604, 605, 608, 615, 616, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 657, 659, 661, 662, 663, 665, 667, 669, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 962, 964, 1054], "metadatarout": [2, 249, 441, 468, 469, 476, 560, 561, 568, 572, 573, 574, 575, 598, 599, 602, 607, 632, 652, 656, 658, 660, 664, 666, 668, 670, 676, 678, 680, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 868, 869, 906, 964, 1054], "metaestim": [2, 89, 394, 906, 926, 966, 1041, 1050, 1051, 1054], "metaestimatormixin": [2, 249], "metaireau": [1037, 1040], "metal": 408, "metaregressor": 249, "metatransfom": 1042, "meteorologi": 410, "meth_nam": 317, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 98, 101, 104, 110, 111, 114, 116, 121, 124, 126, 129, 130, 131, 133, 135, 140, 142, 143, 149, 156, 165, 166, 170, 183, 193, 203, 204, 216, 223, 232, 234, 236, 238, 239, 240, 242, 246, 248, 249, 250, 252, 256, 257, 260, 267, 275, 278, 280, 281, 282, 287, 290, 293, 299, 300, 302, 313, 317, 320, 322, 324, 325, 346, 354, 355, 356, 362, 363, 367, 368, 369, 372, 377, 378, 380, 381, 382, 386, 387, 389, 392, 393, 397, 403, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 429, 430, 431, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 463, 466, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 509, 517, 519, 527, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 710, 715, 716, 727, 736, 737, 740, 741, 746, 747, 768, 773, 774, 779, 783, 788, 793, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 897, 898, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 926, 929, 938, 942, 943, 953, 961, 962, 963, 964, 965, 966, 971, 974, 989, 990, 993, 994, 995, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1030, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "method_map": [249, 962], "method_max_it": [550, 551, 1047], "method_nam": [249, 962, 965], "methodmap": [2, 249, 962], "methodmetadatarequest": 961, "methodol": 1016, "methodolog": [416, 1029], "methodologi": [546, 882, 996, 1006, 1030], "methodpair": 963, "metric": [2, 13, 43, 45, 46, 50, 52, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 81, 82, 85, 91, 93, 97, 102, 107, 113, 135, 140, 146, 147, 149, 150, 151, 156, 167, 170, 173, 183, 185, 187, 188, 190, 200, 204, 210, 211, 215, 217, 219, 221, 233, 238, 243, 246, 247, 252, 255, 265, 266, 269, 270, 271, 273, 274, 276, 280, 282, 283, 287, 292, 293, 295, 303, 306, 311, 313, 318, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 354, 355, 363, 367, 372, 375, 380, 382, 392, 393, 394, 397, 403, 407, 410, 411, 417, 418, 419, 422, 423, 429, 441, 445, 448, 449, 450, 454, 458, 459, 460, 461, 466, 473, 525, 540, 554, 555, 556, 558, 560, 562, 563, 564, 566, 567, 569, 570, 572, 574, 583, 607, 615, 625, 633, 636, 639, 643, 644, 645, 646, 647, 648, 663, 664, 668, 671, 673, 679, 680, 681, 693, 695, 697, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 834, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 875, 881, 904, 905, 909, 911, 914, 917, 919, 926, 996, 998, 1001, 1003, 1007, 1009, 1012, 1014, 1025, 1026, 1027, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "metric_kwarg": [784, 785], "metric_obj": 704, "metric_param": [423, 448, 450, 454, 459, 460, 461, 693, 697, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 1041, 1044, 1051], "metsi": [844, 1008], "metzen": [0, 401, 1037, 1040, 1041, 1042, 1043], "mexican": 130, "meyer89": 1048, "mferrari3": [1045, 1046], "mgrid": [53, 163], "mhg": 1042, "mi": [64, 72, 165, 412, 612, 613, 709, 760, 762, 996, 1006, 1020], "mia": 1052, "miao": 1050, "mib": [367, 472, 907], "mic": [890, 1016], "micah": 1047, "micci": [890, 1016], "mice": [374, 632, 996], "miceprotein": 374, "michael": [377, 410, 412, 454, 633, 642, 696, 802, 996, 1002, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1054, 1055], "michal": [1041, 1044, 1050, 1051], "michali": 412, "michalkrawczyk": [1050, 1051], "micha\u0142": 1048, "micha\u0142owski": 1046, "michel": [0, 402, 1037, 1039, 1040, 1042, 1044, 1051, 1052], "michelbach": 1041, "michiaki": 1043, "micka\u00ebl": [1045, 1046], "micky774": [1051, 1052], "micro": [49, 306, 336, 367, 384, 712, 718, 734, 735, 743, 788, 789, 792, 793, 1006, 1037, 1045, 1046, 1052, 1055], "micro_roc_auc_ovr": 282, "microarrai": [409, 455, 518, 633, 996], "microcontrol": 1025, "microphon": 122, "microryzomi": [50, 306, 375, 503], "microryzomys_minutu": 503, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 378, 381, 398], "mid": [63, 343, 1006, 1008], "middl": [43, 61, 70, 93, 126, 200, 351, 377, 1013, 1016], "mideast": [57, 375], "midina": 1044, "midnight": 43, "midpoint": 343, "midpointnorm": 343, "midvidi": 1050, "midwest": [170, 377], "might": [0, 43, 44, 52, 67, 77, 79, 93, 95, 102, 144, 151, 154, 167, 178, 184, 188, 189, 190, 193, 215, 233, 242, 267, 273, 275, 287, 296, 309, 324, 330, 347, 352, 363, 367, 368, 374, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 398, 406, 410, 411, 413, 416, 417, 418, 419, 420, 422, 437, 447, 492, 501, 506, 508, 513, 520, 528, 541, 560, 561, 562, 566, 567, 569, 584, 585, 587, 615, 616, 632, 655, 659, 660, 661, 663, 664, 681, 683, 697, 762, 799, 807, 808, 809, 822, 825, 833, 858, 874, 889, 902, 921, 923, 925, 927, 931, 935, 936, 953, 974, 995, 996, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1013, 1014, 1016, 1021, 1022, 1038, 1040, 1045, 1046, 1048, 1051, 1052, 1053, 1054], "mignon": [1037, 1040, 1041, 1044], "migrat": [380, 1037], "miguel": [1047, 1055], "miguelbarao": 1047, "miguelcsilva": 1055, "mihael": [412, 454, 461], "mihevc": 1047, "mike": 1044, "mikebenfield": 1044, "miketip": [539, 546], "mikhail": [1038, 1039, 1040, 1043, 1044, 1052, 1053], "miki": [1054, 1055], "mikulski": 1048, "milajev": 1041, "milan": 1049, "milana2": 1051, "mileag": 367, "milen": 1044, "mileston": 384, "militari": 102, "mill": 1047, "millawel": 1051, "miller": [375, 1045, 1046, 1050], "million": [77, 89, 177, 193, 420, 697, 1003, 1021, 1030, 1051, 1052], "millman": [0, 402, 1046, 1053, 1054], "milman": 1045, "miln": 375, "miltenberg": 1052, "milton": 1054, "milutinov": 1046, "mimic": [183, 215, 354, 823], "mimicri": 354, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 85, 91, 107, 121, 124, 135, 137, 144, 147, 148, 154, 163, 170, 174, 176, 177, 178, 184, 188, 198, 202, 204, 210, 217, 218, 221, 236, 246, 247, 250, 292, 299, 300, 306, 308, 310, 313, 315, 316, 318, 330, 337, 351, 389, 412, 415, 417, 486, 487, 489, 517, 539, 540, 543, 545, 546, 554, 555, 568, 632, 636, 637, 659, 660, 661, 662, 687, 688, 709, 762, 785, 808, 809, 858, 866, 867, 879, 888, 895, 953, 970, 997, 1002, 1006, 1009, 1016, 1043, 1046, 1048, 1049, 1052], "min_": [325, 412, 419, 879, 1002, 1016, 1020, 1021, 1022], "min_arg": 52, "min_batch_s": 956, "min_bin_freq": [452, 465], "min_c": 1008, "min_categori": [845, 1049], "min_cluster_s": [79, 98, 328, 412, 450, 454, 460, 1046], "min_degre": [884, 1050], "min_df": [54, 57, 102, 274, 336, 354, 355, 420, 593, 596, 1037, 1039, 1048, 1055], "min_dist": 246, "min_estim": 139, "min_faces_per_person": [45, 375, 499], "min_features_to_select": [169, 599, 1045], "min_frequ": [326, 328, 882, 883, 1016, 1051, 1053], "min_grad_norm": [697, 1043], "min_i": 250, "min_idf": 1050, "min_impurity_decreas": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 1022, 1044], "min_impurity_split": 1044, "min_max_axi": 1046, "min_max_scal": 1016, "min_n": [593, 594, 596, 1037], "min_n_compon": 246, "min_po": [2, 389], "min_resourc": [148, 808, 809, 995], "min_resources_": [808, 809], "min_sampl": [79, 82, 98, 392, 394, 412, 423, 448, 450, 454, 459, 460, 461, 676, 1002, 1046, 1050], "min_sample_split": 1052, "min_samples_leaf": [141, 147, 148, 190, 322, 325, 358, 419, 562, 563, 564, 565, 566, 567, 569, 570, 571, 917, 918, 919, 920, 1022, 1043], "min_samples_split": [148, 149, 150, 277, 285, 314, 324, 419, 562, 563, 564, 565, 569, 570, 571, 808, 809, 917, 918, 919, 920, 995, 1022, 1043], "min_val": [932, 939], "min_valu": [632, 1048, 1049], "min_w": 1002, "min_weight_fraction_leaf": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 1022, 1040, 1043, 1044], "min_x": 250, "mina": [1047, 1048], "mincovdet": [2, 111, 112, 414, 473, 474, 477, 479, 480, 1012, 1037, 1044, 1056], "mind": [126, 151, 187, 188, 189, 233, 317, 318, 354, 355, 363, 380, 406, 414, 416, 419, 651, 652, 709, 1002, 1021, 1025], "minden": [412, 456, 466], "mine": [0, 273, 355, 375, 412, 423, 448, 516, 568, 725, 739, 745, 788, 1002, 1006, 1012, 1018], "ming": [568, 1012, 1041, 1045, 1046, 1047, 1051], "minghui": [1044, 1045], "mingw": 1040, "minh": 1045, "mini": [2, 47, 97, 121, 326, 369, 394, 420, 444, 446, 451, 453, 455, 457, 536, 538, 541, 542, 543, 544, 545, 547, 548, 550, 551, 1010, 1011, 1037, 1048, 1050], "mini_batch": [455, 457], "minibatch": [47, 79, 412, 417, 453, 539, 681, 865, 866, 867, 1037], "minibatch_iter": 47, "minibatch_kmean": 355, "minibatch_s": [47, 369], "minibatchdictionarylearn": [2, 121, 124, 369, 417, 536, 543, 547, 550, 551, 1038, 1040, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "minibatchkmean": [2, 57, 71, 73, 78, 79, 83, 91, 92, 94, 96, 185, 355, 369, 412, 417, 444, 446, 451, 517, 784, 1027, 1038, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "minibatchnmf": [2, 54, 369, 417, 1051, 1053, 1054, 1055], "minibatchsparsepca": [2, 536, 538, 542, 545, 547, 548, 550, 551, 1037, 1038, 1048, 1050, 1051, 1052, 1053, 1054], "miniforg": [378, 388, 398, 399], "miniforge3": [378, 388], "minim": [2, 43, 51, 52, 64, 90, 99, 109, 110, 148, 172, 180, 195, 211, 213, 215, 217, 219, 223, 233, 235, 245, 246, 258, 263, 267, 274, 282, 283, 313, 322, 325, 340, 347, 350, 358, 379, 380, 383, 388, 392, 394, 406, 410, 412, 414, 417, 419, 444, 445, 449, 450, 454, 467, 543, 545, 552, 562, 563, 564, 565, 569, 570, 614, 615, 616, 646, 651, 654, 662, 663, 672, 676, 677, 679, 683, 684, 692, 697, 699, 700, 753, 785, 856, 858, 867, 885, 897, 903, 917, 918, 919, 920, 1002, 1003, 1006, 1009, 1010, 1016, 1018, 1019, 1020, 1021, 1025, 1028, 1032, 1041, 1046, 1047], "minima": [178, 202, 417, 451, 697, 1003, 1045], "minimal_reproduc": 388, "minimalist": [385, 420, 1029], "minimis": [52, 272, 412, 416, 663, 664, 1022], "minimum": [2, 48, 88, 90, 111, 148, 149, 151, 169, 204, 225, 246, 252, 283, 299, 300, 382, 389, 398, 405, 409, 412, 419, 420, 445, 449, 450, 454, 458, 460, 473, 474, 477, 478, 479, 480, 516, 518, 546, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 599, 632, 636, 637, 640, 642, 673, 676, 681, 683, 684, 687, 688, 697, 710, 730, 784, 785, 808, 809, 830, 845, 866, 867, 878, 879, 882, 883, 884, 888, 902, 903, 916, 917, 918, 919, 920, 932, 935, 936, 939, 956, 1003, 1006, 1010, 1012, 1016, 1018, 1022, 1037, 1040, 1044, 1045, 1049, 1050, 1054], "minimum_cluster_s": 412, "minka": [128, 546, 1002], "minknowski": 1050, "minkowski": [423, 448, 454, 459, 460, 461, 693, 704, 783, 784, 785, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 1009, 1037, 1040, 1051, 1052, 1053], "minkowski_dist": [454, 461, 693, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863], "minkowskidist": [704, 1050], "minmax_scal": [2, 311, 313, 879, 1042, 1045], "minmaxscal": [2, 43, 44, 104, 166, 168, 193, 236, 252, 309, 324, 369, 408, 413, 468, 895, 996, 1016, 1039, 1042, 1045, 1047, 1048, 1049, 1053, 1054, 1056], "minmaxscalerminmaxscal": 104, "minnesota": 412, "minor": [252, 267, 276, 280, 375, 384, 395, 501, 1006, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "minu": [273, 765, 1006], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 375, 380, 1003, 1024], "minutu": [50, 306, 375, 503], "minval": [516, 518], "minwoo": 1037, "minyushkin": 1043, "miola": 1052, "miott": [1037, 1040], "miotto": 1048, "mir": 420, "miroslav": [1038, 1039, 1042], "mirror": [846, 995], "mirza": 1050, "misa": 1052, "misc": [57, 86, 124, 274, 336, 354, 355, 356, 375], "misc_featur": 252, "miscalibr": 64, "miscellan": [373, 374, 1027, 1043, 1044, 1051, 1052, 1054, 1055, 1056], "miscfeatur": 156, "misclassif": [46, 135, 267, 347, 801, 1020, 1021, 1022, 1038], "misclassifi": [70, 135, 266, 267, 347, 354, 1021], "misclassification_error": 135, "misdetect": 1054, "mish": 420, "mishra": [1049, 1050], "mislabel": [266, 419, 1008], "mislead": [72, 142, 143, 149, 188, 381, 397, 419, 558, 559, 562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 1032, 1050], "mismatch": [79, 1005, 1046], "misread": 240, "miss": [2, 20, 103, 156, 170, 190, 244, 254, 267, 273, 293, 323, 327, 330, 363, 367, 372, 375, 377, 379, 380, 385, 394, 408, 411, 412, 413, 414, 450, 476, 494, 501, 503, 506, 562, 563, 566, 567, 569, 570, 571, 632, 633, 634, 635, 644, 650, 677, 695, 699, 732, 774, 831, 852, 870, 878, 879, 883, 885, 886, 889, 890, 894, 897, 898, 900, 917, 918, 919, 920, 926, 1002, 1003, 1006, 1025, 1026, 1027, 1028, 1030, 1032, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "missclassif": 135, "missforest": [183, 996], "missing": [151, 419, 632, 633, 635, 1046], "missing_featur": [183, 184], "missing_fract": 151, "missing_fraction_list": 151, "missing_r": 184, "missing_sampl": [183, 184], "missing_valu": [183, 184, 254, 394, 632, 633, 634, 635, 774, 996, 1045, 1046], "missingind": [2, 632, 633, 635, 996, 1045, 1046, 1047, 1051, 1053], "mission": [0, 355, 1030], "misspecifi": 64, "misspel": 420, "mistak": [135, 167, 287, 333, 363, 412, 416, 740, 880, 894, 895, 897, 898, 899, 900, 1002, 1007], "misti": [43, 189], "mit": [290, 375, 386, 412, 422, 615, 616, 619, 624, 627, 648, 671, 672, 681, 846, 999], "mitar": 1046, "mitig": [64, 88, 151, 190, 320, 368, 369, 1003, 1022, 1049], "mitra": [1047, 1048, 1052], "mitrov": 1046, "mitzi": [1050, 1051], "miwojc": 1051, "mix": [2, 43, 95, 101, 102, 122, 123, 145, 185, 188, 215, 244, 254, 256, 274, 313, 319, 374, 382, 392, 394, 413, 417, 424, 468, 470, 471, 501, 538, 543, 545, 552, 605, 609, 635, 651, 652, 657, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 805, 819, 835, 869, 882, 883, 889, 890, 969, 976, 979, 1002, 1011, 1027, 1049, 1051, 1052], "mixed_encoded_preprocessor": 319, "mixed_pip": 319, "mixed_target": 319, "mixin": [2, 380, 394, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 606, 947, 1039, 1048, 1052], "mixing_": [122, 123, 538], "mixtur": [2, 46, 48, 70, 79, 88, 90, 98, 119, 175, 184, 202, 260, 261, 284, 303, 329, 375, 376, 394, 412, 417, 418, 422, 628, 802, 803, 805, 1026, 1027, 1031, 1032, 1037, 1041, 1042, 1043, 1044], "mizil": [62, 64, 410, 441, 443], "mizuki": 1051, "mk": 1022, "mkdir": [47, 386, 388], "mkdtemp": [87, 413], "mkl": [367, 368, 378, 388, 392, 1037], "mkl_num_thread": 368, "mksol": 102, "ml": [47, 170, 290, 374, 377, 385, 505, 507, 515, 1002, 1004, 1025, 1026, 1030], "ml_map": 400, "mlant": 1051, "mlb": [375, 880], "mlc": 377, "mlcomp": 1037, "mld": 47, "mldata": [1037, 1045], "mle": [111, 128, 546, 1045, 1048], "mlewis1729": 1044, "mlflow": 1025, "mlg": 1041, "mlinari\u0107": 1052, "mline": [48, 111, 229, 299, 342, 345], "mljar": 1025, "mlle": [694, 698, 1003], "mlliou112": 1044, "mlo": 177, "mlondschien": 1050, "mlop": 1025, "mlp": [185, 189, 253, 307, 309, 501, 835, 866, 867, 1010, 1027], "mlp_disp": 253, "mlp_model": 189, "mlp_preprocessor": 189, "mlpclassifi": [2, 67, 150, 162, 185, 307, 308, 310, 369, 507, 509, 519, 527, 865, 867, 879, 1007, 1010, 1027, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mlpregressor": [2, 43, 189, 253, 369, 865, 866, 1010, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "mlpregressormlpregressor": 253, "mlxtend": 1025, "mm": 193, "mm_bunch": 50, "mmap_mod": [406, 971], "mmm": 51, "mmse": [110, 414, 425, 479], "mn193": 1054, "mnb": 1008, "mnist": [185, 194, 206, 208, 223, 230, 293, 307, 309, 501, 663, 835, 866, 889, 938, 1002, 1010, 1027], "mnist_10000": 293, "mnist_20000": 293, "mnist_784": [223, 231, 293, 310], "mo": [327, 1048], "mobil": 388, "mock": 1047, "mockdatafram": 1047, "modal": [2, 242, 478, 955], "mode": [2, 48, 49, 80, 81, 111, 215, 242, 293, 295, 311, 322, 378, 380, 384, 388, 389, 392, 409, 415, 419, 423, 447, 448, 451, 453, 456, 463, 466, 475, 476, 482, 486, 491, 513, 514, 562, 566, 569, 597, 600, 601, 603, 604, 605, 615, 632, 649, 650, 663, 664, 671, 673, 678, 679, 680, 681, 684, 687, 688, 694, 698, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 865, 909, 911, 914, 917, 919, 941, 952, 953, 955, 1009, 1012, 1025, 1038, 1046, 1051, 1054], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 82, 87, 88, 89, 91, 94, 101, 103, 104, 105, 109, 113, 116, 120, 121, 130, 131, 134, 135, 136, 138, 140, 144, 147, 148, 150, 151, 153, 155, 156, 159, 161, 163, 164, 166, 167, 175, 176, 178, 179, 180, 181, 184, 186, 187, 191, 196, 198, 201, 203, 205, 206, 208, 210, 211, 212, 216, 217, 219, 220, 221, 223, 227, 228, 230, 231, 232, 242, 245, 250, 258, 260, 261, 262, 266, 268, 269, 271, 274, 276, 277, 278, 279, 281, 282, 287, 288, 290, 293, 295, 296, 297, 299, 302, 306, 314, 317, 319, 320, 322, 324, 326, 327, 328, 330, 332, 333, 340, 342, 343, 344, 345, 346, 348, 350, 352, 355, 356, 359, 360, 361, 363, 372, 374, 375, 383, 386, 394, 397, 403, 408, 409, 410, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 431, 435, 437, 441, 446, 453, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 493, 494, 501, 503, 505, 506, 507, 508, 514, 527, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 593, 594, 598, 599, 602, 607, 611, 614, 615, 616, 620, 632, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 706, 711, 716, 726, 727, 728, 729, 739, 740, 746, 755, 758, 790, 793, 794, 797, 802, 803, 804, 805, 808, 809, 810, 811, 819, 820, 821, 822, 826, 827, 828, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 852, 854, 855, 856, 858, 860, 865, 866, 867, 869, 870, 872, 874, 876, 881, 882, 884, 885, 886, 888, 889, 890, 894, 895, 897, 898, 899, 900, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 989, 996, 998, 999, 1000, 1003, 1004, 1007, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1056], "model_1": 273, "model_1_scor": 273, "model_2": 273, "model_2_scor": 273, "model__estimator__max_depth": 995, "model_coef": 187, "model_color": 349, "model_detail": 144, "model_displai": 140, "model_fixed_threshold": 267, "model_from_prevision_vers": 406, "model_i": 273, "model_i_scor": 273, "model_idx": 252, "model_k": 273, "model_k_scor": 273, "model_l1": 350, "model_l2": 350, "model_nam": [141, 252, 292], "model_no_cf": 320, "model_param": 230, "model_prop": 43, "model_scor": [273, 292], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 87, 103, 104, 105, 106, 107, 109, 116, 126, 128, 135, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 161, 166, 167, 169, 172, 183, 184, 185, 187, 188, 190, 191, 193, 200, 210, 215, 217, 222, 223, 230, 231, 233, 243, 248, 249, 252, 254, 255, 256, 260, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 301, 302, 308, 310, 311, 315, 317, 318, 319, 320, 322, 323, 324, 327, 328, 329, 330, 335, 336, 343, 346, 350, 358, 362, 363, 380, 382, 385, 393, 394, 403, 408, 411, 413, 416, 419, 441, 442, 563, 565, 572, 573, 584, 664, 702, 703, 705, 707, 747, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 858, 866, 867, 869, 917, 918, 919, 920, 995, 996, 1001, 1006, 1008, 1009, 1014, 1016, 1021, 1026, 1027, 1034, 1041, 1043, 1044], "model_selection_tut": 161, "model_step": 43, "model_titl": 144, "model_with_cf": 320, "moder": [273, 380, 422, 458, 1012], "modern": [43, 151, 420, 472, 508, 595, 695, 699, 735, 907, 1003, 1025, 1026, 1053], "modif": [380, 415, 419, 420, 450, 1019, 1054, 1055], "modifi": [107, 200, 225, 235, 236, 237, 249, 252, 328, 352, 380, 382, 394, 409, 412, 419, 422, 447, 451, 458, 463, 472, 486, 487, 488, 489, 500, 515, 586, 615, 616, 618, 624, 681, 683, 694, 698, 724, 734, 735, 773, 788, 789, 792, 933, 987, 988, 1002, 1019, 1020, 1026, 1031, 1032, 1037, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1056], "modified_fil": 380, "modified_hub": [46, 681, 1020], "modified_huber_loss": 225, "modified_tol": [694, 698], "modrak": [1052, 1053], "modroiu": 1006, "modul": [7, 11, 16, 30, 31, 71, 72, 82, 86, 108, 114, 117, 120, 121, 134, 164, 171, 182, 185, 186, 192, 194, 230, 234, 235, 257, 265, 289, 290, 291, 294, 307, 309, 310, 312, 331, 338, 353, 357, 360, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 394, 397, 398, 406, 410, 412, 415, 419, 420, 421, 423, 448, 508, 540, 584, 585, 664, 945, 995, 1000, 1002, 1004, 1006, 1007, 1010, 1012, 1013, 1016, 1018, 1020, 1022, 1023, 1030, 1038, 1039, 1040, 1042, 1043, 1047, 1051], "modulo": [420, 1048], "moeller": 1043, "mogavero": 1047, "moham": [1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "mohamedbsh": 1052, "mohammad": [1045, 1046], "mohit": [1051, 1054], "mohn": [1045, 1049], "mohr": 1043, "moin": 1049, "mois\u00e9": 1018, "moitra": [1037, 1038, 1039], "mojca": 1048, "mojdeh": 1054, "mola": [1048, 1054], "molden": 1039, "molecul": 1003, "molin": 1052, "molla": [1038, 1039], "molnar": [189, 1013], "moment": [367, 417, 422, 444, 620, 628, 866, 867, 969, 1010, 1011], "momentum": [309, 866, 867, 1010], "mon": [43, 151, 189], "mona": [171, 179, 185, 422, 501, 616, 620, 627, 628, 630, 1027], "monaf": 1052, "monei": [0, 233, 1030], "monitor": [146, 200, 223, 383, 394, 558, 559, 564, 565, 566, 567, 1010, 1029, 1040, 1045, 1047, 1049], "mono": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689], "monografia": 1002, "monomi": 216, "monotoinc": 323, "monoton": [2, 22, 43, 62, 134, 185, 189, 233, 245, 253, 323, 410, 562, 563, 564, 565, 566, 567, 569, 570, 637, 640, 641, 699, 711, 885, 897, 911, 914, 917, 918, 919, 920, 1003, 1007, 1016, 1021, 1027, 1044, 1048, 1052, 1054], "monotonic_cst": [151, 153, 323, 325, 329, 419, 562, 563, 566, 567, 569, 570, 917, 918, 919, 920, 1052, 1055], "mont": [247, 422, 616, 646, 647, 998, 1011], "montecchio": 1041, "montesel": 1055, "month": [0, 43, 177, 189, 319, 375, 380, 384, 395, 1037], "month_co": 43, "month_sin": 43, "monthli": [177, 395, 1006], "montoya": 1044, "montreal": 327, "moodi": 1042, "moon": [273, 309, 315, 354, 355, 527], "moonkyung94": 1051, "moor": [0, 740, 1006, 1030, 1054], "moosmann": 571, "moradizadeh": 1051, "morai": 1055, "moral": [57, 354, 663, 1045, 1049, 1050, 1055], "morawiec": [1044, 1045], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 80, 82, 85, 86, 88, 90, 93, 100, 107, 111, 118, 119, 121, 124, 127, 128, 135, 136, 138, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 156, 168, 170, 172, 178, 181, 184, 185, 188, 189, 191, 193, 195, 196, 200, 201, 204, 206, 209, 213, 215, 216, 217, 219, 230, 231, 232, 233, 235, 239, 242, 247, 248, 249, 250, 252, 254, 258, 260, 261, 263, 264, 266, 267, 271, 273, 274, 275, 276, 280, 282, 287, 290, 292, 293, 295, 296, 303, 308, 309, 311, 313, 314, 315, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 333, 340, 343, 347, 348, 350, 352, 354, 355, 356, 358, 359, 362, 363, 367, 368, 369, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 393, 394, 395, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 925, 927, 928, 949, 951, 953, 955, 968, 971, 989, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "moreau": [1043, 1044, 1045, 1046, 1047], "moreov": [161, 178, 315, 326, 363, 412, 416, 422, 902, 975, 1006, 1014, 1030, 1045, 1051, 1052], "moreyra": 1050, "morgan": [1018, 1022], "mori": 1052, "morikko": 1044, "morina": 1050, "moritz": [1050, 1052], "morn": 43, "moroz": 1043, "morril": 1037, "mors": 1048, "moslei": 1006, "mosley2013": 1006, "mosold": 156, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 85, 86, 88, 95, 109, 115, 116, 129, 135, 141, 142, 149, 151, 156, 165, 166, 167, 169, 170, 177, 184, 187, 188, 189, 190, 191, 193, 200, 215, 216, 233, 249, 253, 258, 264, 267, 270, 271, 276, 280, 281, 283, 287, 290, 292, 302, 313, 319, 320, 322, 325, 328, 330, 333, 343, 347, 354, 355, 356, 363, 367, 368, 369, 375, 376, 378, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 398, 403, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 447, 448, 450, 454, 460, 461, 464, 472, 501, 508, 526, 529, 537, 539, 544, 548, 554, 556, 566, 567, 571, 572, 593, 594, 596, 598, 609, 616, 632, 635, 654, 663, 677, 679, 681, 683, 692, 693, 697, 700, 730, 733, 763, 764, 768, 790, 799, 802, 803, 808, 809, 824, 837, 838, 851, 852, 853, 855, 857, 858, 859, 860, 861, 884, 886, 894, 895, 897, 898, 899, 900, 907, 926, 952, 953, 955, 968, 995, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1054, 1056], "most_common": 57, "most_frequ": [276, 556, 632, 635, 859, 996, 1006, 1045, 1047, 1049], "mostli": [0, 2, 80, 102, 215, 233, 318, 382, 388, 392, 394, 417, 419, 420, 526, 784, 785, 1021, 1025, 1030, 1045, 1046, 1047, 1053], "mother": 1003, "motiv": [130, 380, 382, 394, 998, 1006, 1016, 1030, 1050], "motmoti": 1047, "motoda": 412, "motor": 233, "motorcycl": [57, 375], "mottl": [1045, 1046], "moudgalya": [1053, 1054], "moufad": 1052, "moulavi": [412, 450], "mount": 388, "mountain": 1045, "mountford": [1053, 1054], "mous": 374, "mouseid": 374, "moussa": 1043, "move": [64, 144, 274, 311, 343, 379, 380, 386, 410, 412, 554, 555, 576, 577, 578, 580, 582, 583, 947, 948, 972, 1037, 1038, 1042, 1045, 1047, 1050, 1051, 1056], "moveabl": 413, "movelikeriv": 1046, "movement": 375, "movi": 420, "movie_entri": 420, "moya": 1049, "mp": 1002, "mpce": 57, "mpl": [70, 258, 259, 260, 264, 313], "mpl_toolkit": [50, 100, 118, 127, 189, 212, 235, 237, 306], "mplot3d": [100, 118, 127, 189, 212, 235, 237], "mpoemsl": 1051, "mppca": [539, 546], "mprun": 386, "mpy": 420, "mr": [327, 1038, 1041, 1051], "mrandrewandrad": 1043, "mrastgoo": [1052, 1054], "mrg": 388, "mridul": 1043, "mrinal": 1051, "mrinaltyagi": 1051, "mrl09": 417, "mrmjauh": 1044, "mro": [382, 429, 435, 1047, 1048], "mrs2008": 595, "msabati": 1051, "msc": 377, "mschaffenroth": 1047, "mse": [44, 46, 109, 110, 146, 148, 149, 183, 184, 215, 217, 219, 221, 288, 329, 652, 658, 1006, 1022, 1048, 1050], "mse_path_": [204, 652, 656, 658, 660, 666, 668], "mse_valu": 46, "mses_california": 184, "mses_diabet": 184, "msft": 51, "msg": [293, 989], "msle": 1006, "msm": [170, 377], "mssubclass": 156, "mst": 412, "msvc": 1040, "msvcp140": 1051, "mt19937": [280, 285, 938, 1048], "mthorrel": [1044, 1047], "mtrand": 363, "mtse": 684, "mu": [54, 111, 112, 273, 417, 425, 477, 479, 480, 483, 484, 485, 545, 552, 1000, 1002, 1044, 1047], "mu_i": 1008, "mu_j": 412, "mu_k": 1000, "muayyad": 1045, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 88, 111, 113, 119, 124, 130, 140, 148, 149, 156, 157, 158, 172, 183, 184, 188, 189, 190, 191, 193, 212, 213, 217, 246, 249, 252, 267, 273, 275, 276, 279, 284, 286, 310, 314, 318, 319, 320, 324, 325, 327, 343, 348, 354, 355, 363, 367, 368, 369, 375, 380, 381, 382, 385, 388, 392, 393, 398, 406, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 451, 452, 501, 539, 540, 541, 543, 564, 565, 566, 567, 663, 664, 671, 672, 673, 681, 682, 683, 697, 784, 785, 808, 809, 823, 884, 902, 909, 995, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1018, 1019, 1021, 1022, 1026, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "mudd": 1050, "mueller": [0, 401, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "muhammad": [1045, 1046, 1050], "mukherje": 1048, "mula": 1049, "multi": [2, 50, 67, 134, 136, 144, 154, 157, 159, 163, 174, 176, 185, 194, 200, 201, 204, 207, 214, 222, 231, 234, 237, 241, 242, 250, 253, 265, 270, 282, 292, 307, 314, 315, 316, 322, 327, 337, 348, 354, 357, 358, 359, 360, 362, 368, 375, 377, 383, 389, 394, 398, 412, 419, 420, 422, 429, 441, 456, 466, 473, 478, 500, 501, 509, 510, 515, 519, 520, 524, 525, 527, 546, 554, 555, 556, 558, 560, 562, 563, 564, 566, 569, 570, 572, 574, 615, 636, 638, 648, 651, 652, 657, 658, 662, 663, 665, 666, 667, 668, 671, 673, 677, 678, 679, 680, 681, 686, 689, 695, 708, 718, 725, 739, 745, 747, 788, 804, 805, 819, 827, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 856, 857, 859, 865, 866, 867, 870, 876, 889, 893, 904, 905, 909, 911, 914, 917, 918, 919, 921, 922, 923, 925, 929, 935, 938, 941, 995, 1007, 1009, 1013, 1016, 1020, 1025, 1026, 1027, 1028, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1055], "multi_class": [207, 282, 322, 615, 663, 664, 793, 909, 925, 1002, 1007, 1021, 1037, 1041, 1045, 1050, 1052, 1055], "multi_confus": 759, "multi_label": [925, 927], "multi_layer_regressor": 419, "multi_output": [389, 929, 935, 994], "multi_target_forest": 1007, "multialign": 285, "multiarch": 388, "multiclass": [2, 31, 63, 66, 141, 194, 207, 231, 243, 250, 252, 255, 265, 270, 278, 280, 283, 292, 311, 340, 351, 375, 376, 382, 383, 385, 394, 403, 412, 419, 441, 456, 466, 493, 501, 509, 562, 564, 566, 569, 572, 573, 599, 607, 615, 636, 637, 638, 663, 664, 671, 673, 678, 679, 680, 681, 707, 711, 713, 734, 735, 739, 740, 743, 748, 759, 788, 789, 792, 793, 794, 799, 805, 806, 808, 809, 810, 811, 819, 821, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 876, 890, 909, 911, 914, 917, 919, 967, 968, 969, 1000, 1002, 1016, 1017, 1021, 1022, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1052, 1053, 1054], "multicollinear": [115, 142, 143, 149, 185, 186, 190, 279, 335, 415, 505, 569, 639, 660, 835, 1002, 1014, 1027], "multicor": [1049, 1050], "multidimension": [2, 415, 693, 695, 697, 699, 1003, 1009], "multigrid": 466, "multiindex": 1051, "multilabel": [2, 30, 31, 115, 117, 185, 241, 280, 290, 291, 335, 375, 382, 383, 394, 407, 486, 491, 501, 502, 513, 514, 520, 528, 546, 562, 569, 572, 663, 679, 680, 708, 712, 718, 731, 734, 735, 739, 740, 743, 744, 759, 761, 788, 789, 792, 793, 799, 801, 835, 838, 840, 842, 866, 873, 876, 880, 882, 893, 914, 917, 919, 927, 941, 967, 968, 969, 1017, 1027, 1028, 1032, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055], "multilabel_": [838, 1042], "multilabel_confusion_matrix": [2, 718, 734, 735, 743, 789, 792, 1006, 1046], "multilabelbinar": [2, 394, 838, 873, 882, 1007, 1040, 1042, 1043, 1045, 1046], "multilay": [392, 1004], "multilearn": 1025, "multimetr": [716, 995, 1047, 1052, 1056], "multimetric_": [805, 808, 809, 819], "multimod": 242, "multinomi": [2, 47, 66, 185, 194, 206, 208, 224, 230, 250, 268, 282, 310, 351, 375, 376, 380, 417, 419, 501, 517, 528, 556, 558, 564, 566, 636, 663, 664, 746, 835, 838, 844, 845, 846, 847, 848, 889, 938, 1006, 1022, 1027, 1028, 1032, 1037, 1041, 1043, 1044, 1045, 1050, 1051, 1055], "multinomialdevi": 1048, "multinomialhmm": 1037, "multinomialnb": [2, 47, 369, 375, 420, 844, 845, 846, 847, 1008, 1039, 1041, 1044, 1045, 1049, 1050, 1052], "multiouput": 1047, "multioutput": [2, 41, 155, 282, 292, 394, 403, 435, 469, 486, 487, 488, 556, 559, 561, 562, 563, 565, 567, 569, 570, 573, 575, 616, 637, 638, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 793, 795, 796, 830, 838, 840, 841, 842, 843, 852, 860, 867, 876, 910, 912, 915, 917, 918, 919, 920, 941, 968, 969, 1006, 1027, 1028, 1032, 1037, 1038, 1039, 1043, 1044, 1050, 1051, 1056], "multioutput_arrai": 380, "multioutputclassifi": [2, 403, 793, 838, 840, 842, 1006, 1044, 1046, 1047, 1048, 1049, 1053, 1054], "multioutputregressor": [2, 155, 403, 435, 469, 486, 487, 488, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 841, 843, 852, 860, 867, 910, 912, 915, 918, 920, 1043, 1044, 1046, 1048, 1049, 1053, 1054], "multipl": [2, 25, 52, 80, 101, 104, 119, 130, 135, 141, 143, 144, 146, 166, 185, 188, 209, 247, 267, 273, 278, 281, 285, 290, 292, 295, 322, 328, 346, 367, 368, 369, 374, 376, 377, 380, 382, 383, 384, 385, 392, 394, 406, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 448, 464, 468, 470, 471, 473, 478, 492, 495, 497, 500, 501, 502, 508, 509, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 564, 565, 566, 567, 568, 586, 604, 612, 613, 615, 616, 632, 637, 639, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 662, 665, 666, 667, 668, 671, 672, 673, 676, 678, 681, 683, 684, 694, 695, 697, 698, 699, 716, 726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 793, 795, 796, 798, 802, 803, 805, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 831, 832, 833, 835, 839, 840, 841, 842, 843, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 871, 874, 886, 890, 898, 901, 902, 909, 910, 911, 914, 931, 947, 952, 953, 976, 979, 998, 1001, 1002, 1003, 1007, 1008, 1009, 1013, 1014, 1019, 1020, 1022, 1025, 1026, 1027, 1037, 1038, 1040, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "multipleloc": [235, 298], "multiplex": 1022, "multipli": [188, 219, 233, 273, 362, 367, 389, 394, 417, 419, 420, 425, 468, 479, 520, 543, 545, 546, 552, 562, 566, 569, 651, 653, 657, 659, 663, 664, 665, 667, 673, 674, 675, 677, 681, 682, 683, 685, 691, 692, 694, 698, 769, 911, 914, 917, 919, 941, 981, 982, 983, 995, 998, 1002, 1006, 1020, 1048], "multiprocess": [392, 394, 971, 1009, 1037, 1045, 1051], "multirespons": 1002, "multiscal": 466, "multisurfac": [170, 377], "multitarget": 389, "multitask": [292, 420, 1007], "multitaskelasticnet": [2, 651, 652, 657, 666, 667, 668, 686, 1002, 1007, 1037, 1044, 1045, 1048, 1050], "multitaskelasticnetcv": [2, 403, 651, 652, 657, 665, 667, 668, 686, 1002, 1007, 1040, 1047, 1048, 1050, 1054], "multitasklasso": [2, 209, 657, 665, 668, 1002, 1007, 1037, 1045, 1048, 1050], "multitasklassocv": [2, 403, 666, 667, 1007, 1040, 1047, 1048, 1050, 1054], "multithread": [367, 412, 779, 783, 909, 910, 911, 912, 913, 914, 915], "multivari": [2, 121, 188, 372, 414, 417, 420, 477, 521, 522, 523, 632, 633, 634, 635, 654, 676, 683, 684, 844, 845, 846, 847, 848, 1000, 1002, 1005, 1008, 1025, 1032], "multivariate_norm": [113, 116, 258, 425, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485], "multiwai": 1022, "muma": 112, "mungui": 1050, "munoz": [1043, 1049], "muoki": 1049, "murad": 1040, "murashkin": 1041, "murata": [1050, 1051], "murder": 354, "murezzda": 1053, "murmurhash": 389, "murmurhash3": [2, 420, 587, 594, 970], "murmurhash3_32": [2, 389], "murmurhash3_x86_32": [389, 970], "murphi": [410, 648, 999], "murrai": [1043, 1044], "music": 1030, "must": [88, 188, 189, 191, 197, 200, 232, 233, 242, 253, 268, 299, 314, 319, 354, 363, 375, 379, 380, 381, 382, 384, 386, 388, 394, 395, 403, 408, 410, 412, 413, 416, 417, 419, 420, 421, 422, 423, 433, 442, 445, 448, 449, 450, 451, 453, 454, 455, 459, 461, 463, 465, 466, 468, 470, 471, 473, 478, 491, 513, 514, 517, 528, 536, 542, 543, 544, 545, 546, 548, 549, 552, 558, 559, 564, 565, 566, 567, 572, 573, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 622, 625, 632, 633, 634, 635, 636, 637, 638, 643, 647, 648, 653, 654, 657, 663, 664, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 704, 708, 711, 714, 740, 751, 769, 776, 779, 783, 786, 793, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 814, 815, 817, 819, 820, 821, 823, 824, 826, 830, 833, 835, 836, 844, 845, 846, 847, 848, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 869, 872, 873, 874, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 909, 910, 911, 912, 913, 914, 915, 916, 922, 980, 989, 991, 994, 995, 996, 1002, 1003, 1004, 1006, 1009, 1010, 1012, 1013, 1020, 1021, 1022, 1037, 1040, 1044, 1048, 1050, 1051, 1054], "mutat": [363, 994, 1045], "mutual": [2, 72, 73, 82, 88, 91, 164, 185, 394, 419, 421, 450, 597, 600, 601, 604, 605, 611, 612, 613, 614, 709, 710, 720, 760, 762, 791, 800, 807, 822, 825, 995, 1002, 1006, 1007, 1027, 1037, 1043, 1053], "mutual_info_classif": [2, 104, 421, 597, 600, 601, 604, 605, 1043, 1049, 1052, 1055], "mutual_info_regress": [2, 165, 326, 421, 597, 600, 601, 604, 605, 614, 1043, 1044, 1049, 1051, 1052, 1053, 1055], "mutual_info_scor": [2, 72, 412, 709, 1006, 1045, 1048, 1049], "mu\u00f1oz": [1050, 1052], "mwestt": 1046, "my": [374, 380, 385, 388, 501], "my_custom_loss_func": 1006, "my_data": 385, "my_dataset": 491, "my_estim": [382, 413], "my_extra_param": 382, "my_featur": 380, "my_fil": 386, "my_func": [381, 386], "my_g": [424, 538], "my_group": [249, 403], "my_kernel": [339, 1021], "my_memb": [94, 96, 97], "my_other_weight": [249, 403], "my_pipelin": 1046, "my_script": 368, "my_test_script": 388, "my_token": 420, "my_weight": [249, 403], "myatt": [1046, 1047], "mycach": [513, 514], "mycluster": 430, "myenugula": 1055, "myer": [1040, 1044], "myestim": [382, 426, 428, 429, 431, 432, 433, 434, 435], "myestimator0": 428, "myestimator1": 428, "mymultioutputestim": 382, "mypi": [380, 384, 398, 405, 1048], "myself": 380, "mysvmlightfil": 513, "mytransform": [382, 436], "m\u00e9hault": [1045, 1046], "m\u00f6rtberg": 1043, "m\u00fcller": [0, 395, 417, 540, 875, 1010, 1016, 1020, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 91, 102, 107, 111, 115, 119, 121, 124, 126, 128, 130, 131, 135, 137, 138, 142, 158, 165, 168, 170, 172, 176, 181, 189, 191, 196, 200, 211, 215, 216, 219, 230, 232, 233, 235, 245, 246, 247, 250, 258, 260, 261, 271, 273, 276, 278, 279, 280, 282, 283, 286, 293, 296, 298, 311, 315, 317, 318, 324, 327, 329, 333, 347, 350, 362, 367, 374, 377, 378, 380, 384, 386, 388, 389, 394, 398, 399, 403, 409, 410, 412, 415, 416, 417, 418, 419, 420, 422, 423, 448, 449, 451, 452, 454, 473, 475, 478, 482, 493, 520, 521, 522, 523, 528, 533, 543, 545, 546, 552, 562, 563, 564, 565, 568, 569, 570, 571, 593, 594, 595, 596, 612, 613, 619, 632, 654, 676, 684, 697, 701, 704, 711, 712, 760, 810, 813, 815, 820, 821, 824, 845, 849, 850, 854, 874, 901, 903, 917, 918, 919, 920, 932, 951, 956, 957, 980, 984, 985, 995, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1018, 1020, 1021, 1022, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "n1": 124, "n2": 124, "n4": 124, "n_": [111, 112, 191, 273, 325, 412, 417, 419, 651, 657, 690, 701, 998, 1002, 1006, 1008, 1009, 1013, 1016, 1018, 1021, 1022], "n_alpha": [220, 476, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 678, 680, 686, 687, 688, 689, 1040], "n_atom": 1038, "n_averag": 69, "n_bar": 184, "n_batch_iter_": 541, "n_best": 455, "n_bin": [61, 62, 64, 86, 215, 233, 314, 316, 320, 442, 443, 874, 1016], "n_bins_": 874, "n_bootstrap": [276, 1038], "n_bulk_repeat": 49, "n_byte": 246, "n_c": [412, 664], "n_call": [849, 850], "n_candid": [808, 809, 995], "n_candidates_": [285, 808, 809, 995], "n_candidates_0": 995, "n_candidates_i": 995, "n_categori": [320, 845, 883, 1016], "n_categorical_featur": [145, 566, 567, 637, 638], "n_categories_": 845, "n_center": [77, 517], "n_channel": [588, 589, 592], "n_class": [2, 45, 72, 119, 135, 137, 142, 144, 167, 169, 230, 236, 247, 250, 260, 280, 281, 282, 302, 303, 322, 359, 362, 363, 376, 380, 382, 394, 419, 441, 492, 493, 507, 520, 524, 528, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 598, 599, 609, 615, 639, 644, 663, 664, 671, 672, 673, 679, 680, 681, 682, 702, 712, 721, 723, 727, 740, 743, 746, 759, 793, 799, 804, 805, 808, 809, 819, 827, 830, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 851, 856, 858, 859, 866, 869, 876, 877, 880, 883, 890, 893, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 919, 921, 922, 940, 941, 1002, 1006, 1007, 1010, 1017, 1020, 1021, 1042, 1043, 1044, 1046, 1047, 1048, 1054], "n_classes_": [556, 558, 560, 562, 564, 569, 615, 837, 838, 917, 919, 1038, 1047, 1049], "n_classes_pr": [719, 760], "n_classes_tru": [719, 760], "n_classifi": [66, 574, 575], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 121, 326, 355, 380, 394, 412, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 464, 465, 466, 467, 516, 518, 715, 797, 798, 1037, 1041, 1043, 1045, 1046, 1048, 1051], "n_clusters_": [73, 82, 88, 96, 445, 449], "n_clusters_list": 78, "n_clusters_per_class": [67, 139, 167, 169, 270, 303, 308, 315, 376, 385, 520, 610, 612], "n_clusters_rang": 72, "n_clusters_tru": 94, "n_col": [45, 57, 121, 251, 427, 455, 457, 516, 518, 637], "n_column": [409, 455, 457], "n_column_clust": [455, 457, 518], "n_comp": [131, 193], "n_comparison": 273, "n_compon": [43, 44, 45, 51, 54, 79, 85, 90, 91, 92, 102, 104, 105, 106, 115, 116, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 154, 193, 214, 235, 236, 237, 238, 239, 240, 242, 246, 247, 250, 254, 258, 259, 260, 261, 262, 263, 264, 272, 297, 302, 311, 318, 324, 326, 329, 330, 355, 382, 385, 386, 394, 413, 415, 417, 424, 455, 456, 466, 468, 486, 487, 488, 489, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 644, 645, 646, 647, 693, 694, 695, 696, 697, 698, 699, 700, 701, 802, 803, 858, 865, 868, 901, 902, 903, 953, 998, 1000, 1003, 1005, 1009, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1054, 1055, 1056], "n_components_": [105, 128, 394, 445, 449, 539, 543, 544, 545, 546, 547, 548, 901, 902, 1046, 1048], "n_components_fa": 128, "n_components_pca": 128, "n_components_pca_ml": 128, "n_components_rang": 246, "n_connected_compon": 467, "n_connected_components_": [445, 449, 1046], "n_core": 141, "n_core_sampl": [423, 448], "n_cpu": [368, 394], "n_cv": [416, 441], "n_cv_alpha": [656, 660], "n_cv_fold": [145, 319, 811, 828, 833, 836], "n_digit": 91, "n_dim": [482, 532, 534, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 1054], "n_dimens": [802, 803], "n_dimensions_of_x": [911, 912, 913, 914, 915], "n_dir": 53, "n_e": 412, "n_element": [422, 622], "n_encoded_featur": [882, 883], "n_error": 300, "n_error_outli": [229, 299, 342], "n_error_outliers_sgd": 229, "n_error_test": [229, 299, 342], "n_error_test_sgd": 229, "n_error_train": [229, 342], "n_error_train_sgd": 229, "n_estim": [46, 49, 63, 67, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 154, 155, 158, 183, 191, 236, 251, 255, 260, 270, 285, 315, 322, 324, 367, 393, 394, 419, 421, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 637, 808, 809, 995, 1012, 1013, 1034, 1045, 1053], "n_estimators_": [146, 564, 565], "n_estimators_ful": 146, "n_exampl": 47, "n_face": 251, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 85, 91, 93, 94, 109, 110, 111, 112, 113, 119, 121, 128, 135, 137, 139, 141, 142, 167, 169, 170, 183, 184, 193, 195, 198, 200, 201, 209, 210, 214, 218, 219, 230, 232, 236, 242, 246, 247, 249, 258, 263, 270, 276, 280, 282, 283, 285, 286, 303, 308, 315, 322, 323, 324, 326, 328, 329, 330, 350, 354, 355, 356, 363, 367, 373, 374, 376, 380, 382, 385, 392, 393, 394, 403, 412, 414, 415, 417, 419, 420, 423, 424, 425, 427, 429, 430, 431, 434, 435, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 494, 495, 497, 499, 506, 509, 513, 514, 517, 520, 521, 524, 526, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 715, 730, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 953, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 998, 1002, 1007, 1009, 1010, 1016, 1020, 1021, 1022, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "n_feature_influ": 49, "n_features_": [169, 598, 599, 1050, 1052], "n_features_a": 858, "n_features_b": 858, "n_features_in_": [382, 394, 433, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 994, 1048, 1050, 1052, 1055], "n_features_max": 69, "n_features_missing_ind": 635, "n_features_new": [436, 446, 449, 537, 539, 541, 542, 544, 547, 548, 554, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 635, 640, 643, 644, 645, 646, 647, 858, 865, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 901, 902], "n_features_opt": 104, "n_features_out": 635, "n_features_out_": 888, "n_features_rang": 69, "n_features_to_comput": 1045, "n_features_to_select": [168, 170, 324, 421, 598, 607, 1049, 1051], "n_features_to_select_": 607, "n_features_with_miss": 634, "n_features_with_missing_": 632, "n_fold": [161, 652, 656, 658, 660, 664, 666, 668, 1038, 1039, 1043], "n_gram_rang": 1037, "n_group": [416, 814, 1043], "n_i": [1008, 1016], "n_imag": 271, "n_index": [851, 852, 853, 855, 857, 859, 860], "n_inform": [62, 64, 67, 139, 142, 167, 169, 195, 200, 218, 219, 270, 276, 286, 303, 308, 315, 322, 350, 376, 385, 520, 529, 558, 559, 560, 561, 569, 570, 610, 611, 612, 613, 614, 651, 652, 657, 665, 666, 667, 670, 686, 687, 688, 839, 927, 1007, 1045], "n_init": [57, 77, 78, 83, 90, 91, 94, 97, 235, 236, 237, 238, 323, 326, 355, 412, 447, 451, 453, 455, 456, 457, 463, 466, 695, 699, 802, 803, 1037, 1045, 1051, 1052, 1053], "n_init_rang": 94, "n_inlier": 242, "n_input_features_": 1050, "n_instanc": [49, 638], "n_iter": [45, 55, 103, 151, 172, 223, 274, 281, 293, 311, 345, 382, 386, 393, 424, 458, 482, 537, 538, 549, 550, 551, 552, 651, 652, 657, 658, 665, 666, 667, 668, 686, 687, 688, 689, 690, 691, 692, 697, 699, 808, 809, 817, 819, 865, 867, 952, 953, 995, 1020, 1038, 1043, 1044, 1045, 1049, 1051, 1052, 1053, 1055], "n_iter_": [43, 124, 151, 223, 261, 394, 444, 451, 452, 453, 475, 476, 486, 487, 488, 536, 537, 538, 541, 542, 543, 544, 545, 548, 566, 567, 632, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 684, 685, 695, 697, 802, 803, 858, 866, 867, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 1041, 1044, 1045, 1047, 1050, 1051, 1053], "n_iter_no_chang": [46, 141, 146, 151, 223, 325, 354, 385, 394, 419, 564, 565, 566, 567, 671, 672, 673, 681, 682, 683, 866, 867, 1020, 1045, 1048], "n_iter_search": 281, "n_iter_without_progress": [236, 697, 1042, 1043], "n_iterations_": [285, 808, 809], "n_iters_": 1043, "n_job": [52, 87, 104, 105, 141, 142, 143, 148, 149, 156, 169, 170, 183, 188, 189, 190, 191, 236, 238, 254, 267, 272, 274, 275, 277, 286, 290, 293, 322, 323, 324, 327, 350, 368, 380, 394, 419, 423, 441, 448, 450, 452, 454, 456, 459, 460, 461, 462, 465, 468, 471, 476, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 868, 871, 904, 905, 971, 995, 1006, 1007, 1009, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1055], "n_k": [412, 555], "n_kernel": 617, "n_kernel_param": [615, 616], "n_knot": [43, 216, 325, 888, 1016, 1050], "n_l1_ratio": [652, 664, 666, 1040], "n_l1_ratios_": 664, "n_label": [51, 119, 250, 394, 491, 528, 718, 725, 731, 744, 745, 759, 761, 797, 798, 825, 1006, 1043, 1045], "n_labeled_point": [332, 333], "n_layer": [866, 867], "n_layers_": [866, 867], "n_leav": [467, 917, 918, 919, 920], "n_leaves_": [445, 449], "n_left": 568, "n_local_tri": 464, "n_m": 1022, "n_mask": 215, "n_missing_featur": 634, "n_missing_sampl": 184, "n_nearest_featur": [184, 632], "n_neighbor": [51, 79, 95, 100, 157, 183, 235, 236, 237, 239, 242, 252, 293, 295, 296, 299, 300, 301, 302, 305, 318, 322, 324, 354, 419, 456, 607, 612, 613, 633, 693, 694, 696, 698, 700, 701, 851, 852, 853, 855, 857, 858, 862, 904, 905, 996, 1003, 1009, 1012, 1019, 1044, 1051, 1053, 1054], "n_neighbors_": [696, 855], "n_neighbors_list": [252, 295], "n_neighbour": 1051, "n_node": [362, 445, 449, 467, 562, 563, 569, 570, 571, 917, 918, 919, 920, 959], "n_node_sampl": 362, "n_nodes_ptr": [562, 563, 569, 570, 571], "n_noise_": 82, "n_nonzero": 130, "n_nonzero_coef": [214, 531, 536, 542, 547, 550, 551, 553, 655, 669, 690, 691, 1055], "n_nonzero_coefs_": [669, 670, 1055], "n_nonzero_column": 356, "n_numerical_featur": 145, "n_order": 196, "n_original_featur": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "n_out": 571, "n_outlier": [111, 112, 152, 218, 242, 300], "n_output": [362, 394, 419, 429, 435, 436, 441, 446, 449, 469, 473, 486, 487, 488, 537, 539, 541, 542, 544, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 633, 635, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 726, 728, 733, 750, 751, 753, 755, 756, 758, 759, 790, 793, 795, 796, 804, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 856, 858, 859, 860, 865, 866, 867, 868, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 901, 902, 904, 905, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 941, 976, 1006, 1007, 1022, 1044, 1047], "n_output_featur": 633, "n_output_features_": 884, "n_outputs_": [556, 557, 562, 563, 569, 570, 571, 866, 867, 917, 918, 919, 920], "n_oversampl": [455, 457, 546, 549, 953, 1051], "n_pack": [2, 956, 957], "n_patch": [588, 589, 592], "n_permut": [279, 416, 834], "n_pixel": [251, 271], "n_point": [268, 849, 850], "n_points_per_clust": 98, "n_popul": [389, 974], "n_possible_iterations_": [808, 809], "n_predict": 49, "n_pt": 53, "n_q": 412, "n_quantil": [107, 189, 317, 886, 898, 1046], "n_quantiles_": 886, "n_queri": [693, 851, 852, 853, 855, 857, 859, 860, 861], "n_random_featur": 204, "n_redund": [62, 64, 67, 142, 167, 169, 270, 276, 303, 308, 315, 376, 385, 441, 520, 558, 560, 569, 839], "n_refin": 476, "n_region": 80, "n_regions_plu": 80, "n_regressor": 575, "n_relevant_featur": 209, "n_remaining_candidates_": [808, 809], "n_repeat": [138, 142, 149, 169, 188, 190, 191, 273, 287, 290, 322, 416, 520, 639, 820, 821, 1014], "n_required_iterations_": [808, 809], "n_resourc": 995, "n_resources_": [285, 808, 809, 995], "n_resources_0": 995, "n_resources_i": 995, "n_restarts_optim": [178, 179, 422, 615, 616], "n_retri": [492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 1051, 1055], "n_row": [45, 57, 121, 409, 427, 455, 457, 516, 518], "n_row_clust": [455, 457, 518], "n_run": [72, 94, 193, 355], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 107, 109, 110, 111, 112, 113, 116, 119, 121, 122, 126, 128, 135, 137, 138, 139, 140, 141, 142, 147, 148, 149, 150, 152, 153, 162, 163, 169, 170, 181, 183, 184, 187, 195, 197, 198, 200, 201, 202, 205, 207, 209, 210, 214, 215, 216, 218, 219, 223, 227, 230, 232, 233, 235, 236, 237, 238, 239, 240, 242, 246, 247, 249, 252, 259, 261, 262, 263, 264, 270, 271, 273, 276, 277, 280, 282, 283, 284, 285, 286, 288, 293, 303, 315, 316, 317, 320, 323, 324, 326, 328, 329, 330, 334, 341, 344, 345, 350, 354, 355, 363, 373, 377, 380, 382, 385, 389, 392, 393, 394, 403, 411, 412, 414, 415, 416, 417, 419, 423, 424, 425, 427, 429, 430, 431, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 499, 506, 509, 513, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 626, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 775, 776, 777, 778, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 925, 927, 940, 941, 953, 955, 957, 967, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 995, 998, 1002, 1006, 1007, 1009, 1010, 1016, 1017, 1018, 1020, 1021, 1022, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "n_samples1": 875, "n_samples2": 875, "n_samples_": 546, "n_samples_1": [345, 1021], "n_samples_2": [345, 1021], "n_samples_a": [797, 798], "n_samples_fit": [435, 469, 486, 487, 488, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 693, 842, 843, 851, 852, 853, 855, 857, 859, 860, 861, 867, 910, 912, 915, 918, 920], "n_samples_fit_": [293, 851, 852, 853, 855, 857, 859, 860, 861], "n_samples_i": [617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 779, 780, 781, 782, 783, 784, 785, 786], "n_samples_per_cent": 94, "n_samples_rang": [110, 246], "n_samples_seen": 889, "n_samples_seen_": [539, 878, 879, 889, 1045], "n_samples_test": [286, 911, 912, 913, 914, 915, 1009, 1016], "n_samples_train": [286, 911, 912, 913, 914, 915], "n_samples_transform": [293, 853, 861], "n_samples_x": [616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 779, 780, 781, 782, 783, 784, 785, 786], "n_seed": 465, "n_selected_featur": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "n_skips_": 1044, "n_skips_invalid_data_": 676, "n_skips_invalid_model_": 676, "n_skips_no_inliers_": 676, "n_spline": [43, 888], "n_split": [43, 52, 141, 147, 151, 183, 184, 188, 260, 268, 273, 275, 278, 283, 287, 290, 329, 335, 343, 350, 363, 416, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 832, 1043, 1045, 1055], "n_splits_": [805, 808, 809, 819], "n_steps_": [124, 453, 542, 543, 1050], "n_subpopulation_": 684, "n_subsampl": [684, 941], "n_subsets_of_featur": 599, "n_support_": [911, 912, 913, 914, 915, 1021, 1047], "n_support_vector": 46, "n_sv": [911, 912, 913, 914, 915, 1021, 1047], "n_svd_vec": [455, 457], "n_t": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "n_t_l": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "n_t_r": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "n_target": [394, 415, 486, 487, 488, 489, 529, 561, 616, 648, 651, 652, 655, 656, 657, 658, 659, 661, 662, 665, 666, 667, 668, 669, 670, 676, 677, 678, 679, 680, 686, 689, 690, 691, 692, 1007, 1049, 1051, 1053], "n_task": [209, 1002], "n_test": [47, 49, 69, 138, 273, 1037, 1040], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [640, 732, 787, 794], "n_tick": [811, 828, 833, 836], "n_top": 281, "n_top_word": 54, "n_topic": [385, 541, 1044], "n_tot": 704, "n_total_sampl": [332, 333], "n_train": [47, 49, 69, 138, 273, 1037, 1040], "n_train_po": 47, "n_transformed_featur": 869, "n_tree": 46, "n_trees_per_iter": 566, "n_trees_per_iteration_": [564, 565, 566, 567], "n_trials_": 676, "n_uncorrelated_featur": 279, "n_unequ": 704, "n_unique_categori": 319, "n_unique_label": [734, 735, 743, 788, 789, 792, 969], "n_unique_tick": [811, 833], "n_valu": [828, 836, 1045], "n_values_": 1045, "n_values_feature_j": 638, "n_x": [87, 590], "n_y": [87, 590, 1008, 1016], "n_z": 590, "na": [632, 633, 634, 635, 774, 783, 933, 935, 936, 1047, 1048, 1051, 1052, 1053, 1054], "nabarun": 1045, "nabla": 1010, "nabsolut": 221, "nacross": 287, "nada": 57, "nadeau": [273, 1045], "nadia": 1049, "nadim": 1050, "nadirhan": 1051, "nadya": 1043, "nagarajan": [650, 1002], "nagarjuna": [1044, 1045], "nagasaka": 1050, "naghshhnejad": [1047, 1048], "naipawat": [1051, 1052], "naiv": [2, 32, 64, 67, 154, 273, 275, 292, 354, 356, 375, 410, 419, 420, 441, 549, 844, 845, 846, 847, 848, 1000, 1001, 1009, 1014, 1028, 1032, 1037, 1038, 1039, 1040, 1045, 1047, 1050, 1052], "naive_bay": [2, 47, 61, 62, 64, 67, 154, 158, 274, 275, 354, 363, 369, 375, 419, 441, 574, 844, 845, 846, 847, 848, 870, 1000, 1007, 1008, 1038, 1039, 1041, 1042, 1043, 1044], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 369, "naivebayesna": 400, "naivelycalibratedlinearsvc": [62, 64], "najera": 1044, "najork": [731, 761, 1006], "naka": 1050, "nakamura": 1051, "nakano": [1044, 1045], "nalepa": 1044, "naman": 1054, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 91, 95, 103, 105, 107, 113, 122, 127, 138, 139, 140, 141, 145, 148, 151, 156, 188, 189, 190, 204, 213, 215, 217, 219, 221, 222, 230, 232, 233, 235, 236, 242, 248, 249, 251, 252, 256, 260, 267, 268, 270, 271, 274, 276, 277, 280, 282, 283, 287, 290, 293, 301, 302, 308, 309, 315, 317, 319, 326, 327, 330, 336, 348, 354, 355, 356, 368, 369, 374, 375, 378, 380, 382, 384, 385, 387, 388, 394, 398, 403, 409, 412, 416, 419, 420, 422, 426, 428, 433, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 702, 703, 704, 705, 707, 713, 714, 716, 718, 737, 738, 747, 784, 785, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 817, 819, 823, 827, 828, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 934, 935, 936, 939, 944, 945, 946, 948, 961, 962, 963, 965, 968, 975, 989, 993, 994, 995, 1000, 1002, 1006, 1007, 1013, 1014, 1016, 1022, 1026, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "name_to_color": 319, "named_estim": [572, 573, 574, 575], "named_estimators_": [572, 573, 574, 575, 1045, 1047], "named_step": [105, 116, 168, 413, 598, 599, 602, 869, 870, 909, 910, 1002, 1044, 1046], "named_transform": [868, 1052], "named_transformers_": 468, "namedtupl": [2, 622, 1053], "namespac": 408, "namiya": 1044, "nan": [2, 107, 145, 151, 183, 184, 188, 233, 252, 254, 256, 268, 276, 319, 322, 327, 328, 329, 330, 367, 372, 389, 394, 419, 450, 472, 501, 560, 561, 562, 566, 567, 569, 598, 599, 602, 608, 611, 614, 632, 633, 634, 635, 640, 717, 718, 719, 721, 726, 727, 728, 729, 733, 734, 735, 774, 783, 788, 789, 790, 792, 805, 808, 809, 811, 819, 828, 831, 832, 833, 836, 878, 879, 883, 885, 886, 889, 890, 894, 897, 898, 900, 926, 933, 934, 935, 936, 980, 995, 1006, 1016, 1022, 1032, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056], "nan_euclidean": [633, 767, 783], "nan_euclidean_dist": [2, 322, 767, 996, 1047], "nandana": [1043, 1044, 1045], "nandiyawar": 1056, "nanshan": 1050, "nanta": 1040, "nanxin": 1045, "nanyang": 377, "naois": [1052, 1054], "naoki": [1039, 1049], "naoya": [1043, 1044, 1045, 1046], "naozin555": 1050, "napa": 319, "narasimhan": 856, "nardelli": 1040, "narendra": [1048, 1054], "narendramukherje": 1048, "narendran": 1045, "narin": [1044, 1045], "narinek": [1044, 1045], "narr": [380, 394, 663, 909, 914, 1037, 1038], "narrai": 599, "narrow": [52, 138, 148, 313, 315, 385, 849, 850], "nartayxd": 1051, "nasa": [102, 354, 355, 377], "nasdaq": 51, "naser": 1047, "nasir": 1045, "nass": 1052, "nastegiano": 1051, "nat": [612, 613, 709, 760, 762, 1051], "natasha": 1047, "natchiappan": [1050, 1051], "nate": [1043, 1044, 1050], "nath": [1045, 1056], "nathan": [540, 1045, 1049, 1052, 1055], "nathaniel": [1044, 1045, 1047], "nathansquan": 1051, "nati": 1052, "nation": [50, 111, 306, 375, 856], "nativ": [43, 151, 155, 177, 183, 267, 368, 375, 394, 406, 419, 501, 566, 567, 841, 842, 1002, 1006, 1007, 1025, 1047, 1049], "native_result": 145, "natl": [694, 698, 1003], "natur": [43, 64, 67, 141, 148, 179, 188, 189, 193, 200, 215, 216, 232, 233, 239, 252, 258, 264, 282, 292, 354, 380, 382, 394, 417, 419, 420, 423, 448, 454, 461, 556, 595, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 697, 709, 746, 760, 762, 851, 852, 853, 855, 857, 859, 860, 861, 888, 951, 1002, 1003, 1005, 1006, 1009, 1011, 1016, 1020, 1025, 1037, 1045], "naul": [1042, 1043], "nav": 51, "navarret": [1045, 1046, 1047], "navarro": 1052, "navi": [69, 102, 110, 125, 129, 130, 155, 195, 218, 226, 238, 259, 260, 261, 264, 280, 282, 298, 305, 334, 361], "navig": [388, 1039], "navin": 905, "navistar": 51, "navkal": 1045, "navractil": 1006, "navratil2007": 1006, "nawazish": [1052, 1053], "naziya": 1055, "nb": [47, 128, 154, 363, 846, 1008], "nbclaim": 233, "nber": 49, "nbr": [857, 1009], "nbrown": 1055, "nbrs_": [693, 694], "nbsp": [148, 204], "nbviewer": [51, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362], "nbyte": [86, 246], "nca": [236, 301, 302, 303, 858, 1009], "nca_pip": 1009, "ncall": 386, "ncanip": 858, "nclass": 268, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 86, 90, 99, 121, 126, 131, 146, 189, 215, 216, 217, 223, 233, 235, 236, 245, 252, 267, 269, 275, 276, 284, 286, 287, 293, 296, 309, 314, 315, 317, 318, 327, 349, 350, 355, 376], "ncorrect": 273, "ncsu": [170, 377], "ncv": [455, 457], "nd": [1050, 1054], "ndarrai": [86, 91, 118, 215, 256, 271, 272, 273, 380, 381, 382, 386, 387, 408, 420, 423, 424, 427, 428, 430, 433, 434, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 720, 723, 726, 727, 728, 729, 732, 733, 743, 750, 751, 753, 756, 758, 759, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 794, 795, 796, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 932, 933, 934, 935, 940, 941, 950, 952, 953, 954, 955, 960, 967, 969, 970, 974, 977, 978, 980, 981, 982, 983, 986, 991, 992, 994, 1006, 1021, 1026, 1040, 1044, 1047, 1048, 1051, 1052, 1053, 1054], "ndata": 279, "ndataset": [230, 315], "ndbscan": 98, "ndcg": [731, 761, 1006, 1044], "ndcg_score": [2, 731, 1006, 1044, 1047, 1052, 1053], "ndenumer": 227, "ndepend": 189, "ndim": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 935, 936], "ndimag": [53, 80, 81, 87, 311], "ndingwal": 1044, "ndirangu": [1047, 1051], "ne": [1006, 1009], "neal": [1002, 1050], "near_uniqu": 320, "nearbi": [412, 1009], "nearer": [2, 853, 861, 1009], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 83, 84, 87, 91, 94, 99, 104, 109, 113, 121, 124, 152, 162, 176, 184, 197, 206, 227, 231, 237, 240, 251, 252, 266, 276, 297, 299, 302, 303, 310, 311, 318, 339, 343, 348, 352, 372, 377, 389, 392, 394, 412, 418, 419, 423, 426, 436, 448, 450, 452, 454, 456, 461, 465, 466, 501, 507, 509, 612, 613, 632, 633, 635, 636, 640, 693, 694, 696, 697, 701, 797, 798, 805, 835, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 869, 870, 874, 889, 979, 1003, 1012, 1021, 1026, 1027, 1028, 1032, 1037, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1049], "nearest_neighbor": [79, 456, 696], "nearest_neighbor_algorithm": [851, 859, 860], "nearest_neighbors_algorithm": [852, 857], "nearestcentroid": [2, 304, 354, 1007, 1009, 1037, 1041, 1044, 1049, 1052], "nearestneighbor": [2, 293, 326, 398, 412, 423, 448, 450, 452, 465, 693, 694, 698, 851, 852, 853, 855, 859, 860, 861, 1009, 1037, 1041, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "nearli": [37, 62, 276, 375, 394, 769, 1006, 1009, 1018], "neat": 1037, "necess": [1003, 1009], "necessari": [46, 53, 139, 200, 215, 220, 258, 267, 273, 274, 280, 295, 347, 360, 367, 375, 378, 379, 380, 381, 382, 383, 384, 388, 392, 412, 414, 419, 456, 466, 492, 493, 495, 497, 498, 499, 500, 502, 539, 649, 650, 651, 657, 661, 662, 665, 666, 667, 668, 669, 670, 676, 678, 680, 681, 696, 700, 800, 872, 881, 892, 896, 902, 995, 998, 1002, 1005, 1008, 1016, 1022, 1037, 1045], "necessarili": [43, 67, 104, 124, 188, 215, 223, 233, 247, 248, 259, 280, 315, 354, 355, 374, 406, 408, 410, 412, 419, 632, 857, 859, 860, 861, 1000, 1003, 1005, 1006], "need": [0, 30, 43, 48, 51, 68, 80, 86, 88, 90, 113, 123, 133, 141, 145, 147, 148, 149, 151, 156, 170, 172, 177, 183, 184, 188, 202, 217, 232, 233, 236, 242, 245, 247, 249, 252, 253, 258, 259, 263, 264, 267, 271, 273, 275, 276, 278, 290, 292, 293, 295, 318, 322, 329, 335, 343, 354, 355, 363, 367, 368, 369, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 393, 394, 395, 397, 398, 403, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 428, 441, 445, 449, 453, 468, 469, 471, 508, 546, 556, 577, 587, 588, 593, 594, 595, 596, 632, 640, 643, 644, 645, 647, 654, 671, 673, 676, 681, 684, 697, 716, 725, 726, 727, 728, 729, 786, 790, 802, 803, 805, 808, 809, 819, 820, 821, 830, 838, 841, 849, 850, 866, 869, 872, 876, 881, 882, 886, 904, 911, 914, 926, 962, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1026, 1030, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "needl": [170, 377], "needs_proba": [1046, 1054], "needs_threshold": 1054, "neeraj": 1044, "neg": [2, 42, 43, 45, 61, 93, 107, 109, 116, 141, 147, 148, 153, 185, 187, 188, 194, 205, 211, 213, 215, 233, 262, 263, 267, 270, 273, 276, 280, 282, 283, 287, 293, 313, 317, 326, 330, 354, 386, 394, 395, 412, 416, 419, 420, 421, 423, 424, 435, 444, 448, 456, 469, 473, 486, 487, 488, 492, 536, 538, 540, 541, 542, 543, 545, 547, 549, 552, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 593, 596, 597, 600, 601, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 682, 683, 684, 685, 692, 703, 704, 709, 710, 717, 718, 720, 721, 723, 724, 726, 727, 728, 729, 732, 734, 735, 736, 740, 743, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 787, 788, 789, 790, 792, 795, 796, 798, 802, 803, 811, 828, 830, 835, 842, 843, 852, 855, 860, 867, 876, 885, 887, 888, 893, 897, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 936, 951, 953, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1020, 1021, 1027, 1031, 1032, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056], "neg_": [811, 828, 1043], "neg_brier_scor": [1006, 1047], "neg_label": [267, 287, 876, 893], "neg_log_loss": [64, 267, 1006], "neg_lr": 276, "neg_lr_bas": 276, "neg_lr_base_std": 276, "neg_max_error": [1006, 1056], "neg_mean_absolute_error": [43, 156, 217, 1006], "neg_mean_absolute_percentage_error": [52, 145, 1006, 1014], "neg_mean_gamma_devi": 1006, "neg_mean_pinball_loss_05p_scor": 148, "neg_mean_pinball_loss_95p_scor": 148, "neg_mean_poisson_devi": 1006, "neg_mean_squared_error": [183, 184, 217, 248, 288, 329, 832, 1006, 1014, 1043], "neg_mean_squared_log_error": 1006, "neg_median_absolute_error": 1006, "neg_root_mean_squared_error": [43, 151, 319, 1006], "neg_root_mean_squared_log_error": 1006, "neg_root_mean_squared_log_error_scor": 1054, "negat": [394, 811, 828, 1006], "negate_scor": [248, 811, 828], "negative_class": 717, "negative_likelihood_ratio": [276, 717], "negative_linestyl": 242, "negative_loglik": 109, "negative_mahal_dist": 473, "negative_outlier_factor": 855, "negative_outlier_factor_": [252, 300, 855, 1012], "neglig": [188, 1009, 1040, 1054], "neigh": [786, 851, 852, 853, 855, 857, 859, 860, 861], "neigh_dist": [851, 852, 853, 855, 857, 859, 860, 861], "neigh_ind": [851, 852, 853, 855, 857, 859, 860, 861], "neighbor": [2, 51, 67, 74, 79, 81, 93, 99, 104, 151, 152, 154, 157, 162, 183, 184, 197, 236, 237, 239, 240, 242, 251, 252, 266, 276, 297, 298, 299, 300, 302, 303, 304, 306, 310, 324, 326, 327, 354, 372, 377, 389, 392, 394, 398, 412, 418, 419, 420, 423, 426, 436, 445, 448, 449, 450, 452, 454, 456, 461, 462, 465, 467, 501, 507, 509, 568, 575, 607, 612, 613, 632, 633, 636, 693, 694, 695, 696, 697, 698, 700, 701, 786, 805, 835, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 869, 870, 889, 905, 913, 979, 1007, 1012, 1026, 1027, 1028, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "neighbor_feat_idx": 632, "neighborhood": [2, 88, 113, 129, 162, 185, 235, 293, 294, 295, 296, 304, 305, 377, 394, 412, 417, 423, 448, 454, 461, 507, 509, 520, 546, 554, 633, 636, 701, 835, 851, 852, 855, 857, 858, 859, 860, 861, 863, 869, 870, 889, 1003, 1012, 1027, 1028, 1032, 1046], "neighborhoodcomponentanalysi": 302, "neighborhoodcomponentsanalysi": [2, 236, 301, 302, 303, 1009, 1046, 1051, 1055], "neighbors_algorithm": [693, 694], "neighborsbas": [1049, 1052], "neighborsclassifi": [857, 859, 860, 861, 1037], "neighborsregressor": 1037, "neighbour": [450, 466, 697, 1011], "neighbourhood": [858, 1009], "neighbourhood_components_analysi": 858, "neil": 1049, "neill": 1049, "neither": [184, 188, 322, 354, 363, 392, 410, 441, 599, 633, 939, 1009, 1022], "nelder": 1002, "nell": [0, 401, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049], "nelson": [0, 1043, 1044, 1049, 1055], "nemour": 51, "neo": 1045, "nep": 1047, "neptun": 1025, "neq": [412, 1006, 1008, 1016], "ness": [184, 233], "nest": [126, 135, 185, 204, 249, 265, 267, 268, 290, 329, 368, 386, 394, 398, 412, 416, 422, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 466, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 509, 524, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 810, 819, 827, 831, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 1006, 1009, 1027, 1037, 1038, 1041, 1043, 1044, 1045, 1051], "nested_lin": 278, "nested_scor": 278, "nesterov": [309, 866, 867, 1010, 1053, 1054], "nesterovs_momentum": [309, 866, 867], "nestor": 1052, "net": [2, 25, 67, 185, 194, 200, 201, 204, 206, 209, 226, 249, 286, 386, 416, 475, 476, 482, 506, 529, 562, 563, 564, 565, 569, 570, 571, 651, 652, 657, 662, 663, 664, 665, 666, 667, 668, 673, 681, 683, 686, 687, 689, 865, 917, 918, 919, 920, 995, 1006, 1011, 1020, 1027, 1028, 1030, 1032, 1037, 1042, 1046, 1047, 1049], "netbsd": 1037, "neto": [595, 735, 1055], "nettei": 1050, "network": [34, 45, 252, 310, 367, 368, 369, 374, 375, 384, 394, 395, 406, 412, 417, 419, 424, 501, 538, 540, 572, 573, 701, 746, 866, 867, 1002, 1004, 1006, 1020, 1022, 1025, 1028, 1031, 1032, 1037, 1051, 1055], "networkx": [55, 389], "neural": [34, 44, 45, 67, 273, 310, 394, 406, 416, 417, 419, 424, 538, 540, 543, 545, 552, 572, 573, 644, 650, 701, 746, 802, 858, 865, 866, 867, 875, 998, 1002, 1003, 1004, 1006, 1009, 1012, 1016, 1020, 1022, 1025, 1028, 1030, 1031, 1032, 1037, 1049], "neural_network": [2, 67, 185, 189, 253, 307, 308, 309, 310, 311, 369, 392, 865, 866, 867, 1007, 1010, 1027, 1039, 1054], "neuro": 1025, "neurodebian": 0, "neuroimag": [1024, 1030], "neuron": [866, 867, 1004, 1010], "neutral": 721, "nevalu": 156, "never": [141, 250, 330, 363, 380, 389, 392, 406, 411, 412, 413, 415, 416, 454, 461, 528, 560, 561, 562, 569, 869, 870, 994, 998, 1016, 1047, 1050], "nevertheless": [43, 191, 419], "new": [2, 43, 46, 47, 49, 83, 89, 91, 93, 102, 103, 118, 128, 135, 137, 139, 140, 141, 146, 148, 151, 155, 156, 167, 170, 172, 178, 184, 190, 191, 215, 221, 229, 242, 249, 256, 267, 272, 275, 280, 292, 297, 299, 319, 323, 326, 329, 330, 333, 336, 342, 347, 363, 368, 369, 374, 375, 377, 378, 379, 382, 383, 384, 386, 388, 389, 393, 394, 395, 398, 406, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 437, 441, 442, 444, 446, 447, 449, 451, 452, 453, 456, 466, 467, 468, 476, 486, 487, 488, 509, 513, 514, 539, 546, 549, 560, 561, 562, 563, 568, 569, 570, 571, 586, 607, 635, 636, 640, 645, 646, 647, 650, 651, 657, 693, 694, 695, 702, 703, 705, 706, 707, 793, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 839, 855, 878, 879, 884, 885, 886, 888, 889, 890, 897, 898, 906, 924, 933, 938, 975, 980, 995, 996, 998, 1002, 1006, 1007, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1021, 1026, 1030, 1032, 1035, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "new_data": [297, 382], "new_valu": [572, 573, 574, 575], "newaxi": [51, 53, 57, 61, 77, 113, 130, 136, 173, 197, 205, 211, 216, 217, 218, 220, 221, 232, 245, 247, 288, 298, 305, 360, 361, 409, 541, 1002], "newei": 1045, "newer": [172, 379, 398, 417], "newgroups20": 230, "newli": [378, 393, 419, 467, 1013, 1043, 1044, 1052], "newsgroup": [2, 46, 54, 57, 246, 274, 336, 355, 356, 373, 409, 420, 492, 493, 1032], "newsgroups_test": 375, "newsgroups_train": [375, 492], "newsgroups_vector": 493, "newsl": [890, 1016], "newslett": 374, "newswir": 375, "newton": [215, 233, 311, 615, 653, 663, 664, 674, 685, 866, 867, 1002, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "newton_cg": 1047, "next": [46, 62, 93, 111, 144, 145, 149, 159, 179, 187, 191, 208, 212, 215, 243, 249, 251, 255, 256, 260, 268, 279, 292, 318, 319, 320, 324, 333, 354, 358, 362, 363, 378, 380, 382, 384, 400, 406, 409, 412, 413, 416, 419, 513, 514, 615, 639, 697, 703, 705, 707, 786, 802, 803, 835, 971, 995, 999, 1005, 1006, 1016, 1030, 1034, 1037, 1050, 1051], "nezar": 1047, "nff": 704, "nfit": 333, "nfkd": [593, 594, 596, 1047], "nfor": 250, "nfrom": 177, "nft": 704, "ng": [412, 417, 696, 855, 1010, 1012, 1048], "ngiam": 1010, "ngo": 1049, "ngram_rang": [274, 336, 420, 593, 594, 596], "ngram_vector": 420, "ngroup": 268, "ngshya": 1048, "nguyen": [1047, 1048, 1051, 1052], "nguy\u1ec5n": 1052, "ni": [1043, 1048], "nic": 1050, "nice": [43, 100, 216, 249, 313, 367, 417], "nicer": 636, "nichol": 1041, "nichola": [1045, 1046, 1048], "nicholson": [1043, 1044, 1045], "nick": [170, 377, 1037, 1043, 1044, 1045, 1046], "nicki": 1051, "nickledav": 1043, "nicknam": 375, "nico": [1043, 1050], "nicol": 1044, "nicola": [0, 170, 401, 663, 1002, 1019, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "nicolashug": 1046, "nicolasservel": 1048, "nicolau": 1045, "nicula": [0, 121, 401, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046], "niculescu": [62, 64, 410, 441, 443], "nidhin": 1047, "niederb\u00fchl": 1045, "niederhut": [1045, 1047], "nielsen": [748, 1045], "nielsenmarkus11": [1044, 1045], "nigam": [844, 1008], "nigel": 1050, "night": 52, "nightli": [0, 368, 383, 384], "nightwalkx": 1053, "nihal": 1052, "nihar": 1045, "niket": 1051, "nikhil": 1051, "nikita": [1044, 1045, 1047, 1050, 1051, 1052], "nikla": [1047, 1048], "nikolai": [1040, 1041, 1042, 1043, 1045, 1046, 1051, 1053], "nil": 1049, "nilearn": 1025, "nilesh": 1045, "nilotp": [640, 642], "nima": 1052, "nima10khodaveisi": 1052, "ninertia": 97, "ningchi": 1043, "ninh": 193, "ninja": [378, 1030], "nip": [128, 377, 520, 546, 571, 646, 1006], "nipal": [415, 487, 488], "nipy_spectr": [51, 74, 80, 81, 84, 85, 93, 94, 127], "nirvan": [1045, 1049], "nishan": 1047, "nishihara": 1049, "nishu": 1053, "nist": [377, 1006], "nistir": 377, "nit": 380, "nithish": 1055, "nitinramvelraj": 1052, "nitish": 1044, "nitya": 1047, "niuk": 1053, "niyogi": 1003, "nizam": 1045, "nizhibitski": 1038, "nk": 701, "nkish": 1048, "nkmean": 79, "nl": [52, 386], "nl1_ratio": 206, "nlasso": 200, "nlathia": 1043, "nlearn": 309, "nlog": 178, "nlogn": 697, "nlp": [375, 417, 420, 844, 848, 1004, 1030], "nls_max_it": 1042, "nltk": [420, 1024, 1025], "nm": 367, "nmcd": 111, "nmd": 238, "nmean": 125, "nmf": [2, 11, 54, 104, 386, 420, 540, 543, 549, 552, 1031, 1032, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "nmf_estim": 121, "nmi": [72, 412, 722, 741, 742, 762], "nmixtur": 79, "nmle": 111, "nmse": [44, 288], "nmslib": 293, "nmslib_": 293, "nmslibtransform": 293, "nn": [251, 420, 700], "nn_candid": 285, "nn_compon": [246, 247], "nn_sampl": [246, 285], "nndsvd": [417, 543, 545, 552, 1046, 1049], "nndsvda": [54, 417, 543, 545, 552, 1046, 1049], "nndsvdar": [417, 543, 545, 552, 1046], "nneq": 704, "nnl": [210, 662], "nnlnr": [1052, 1053], "nnmf": [420, 1031, 1032, 1037], "nntp": [354, 375], "nnz": [201, 355, 375, 704], "no_chang": 906, "no_interact": [566, 567, 1052], "no_mathjax": 380, "no_structur": [79, 95], "no_valid": [928, 994], "no_weight": 228, "no_weights_handl": 228, "noa": [1048, 1054], "noah": 1002, "noc": 51, "noced": 663, "nodar": 1050, "node": [2, 51, 76, 145, 149, 200, 322, 328, 329, 358, 362, 388, 389, 412, 414, 417, 419, 445, 446, 449, 467, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 655, 659, 661, 687, 688, 697, 849, 850, 917, 918, 919, 920, 921, 923, 959, 1009, 1011, 1012, 1013, 1022, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1054, 1056], "node_count": [322, 358, 362, 917, 918, 919, 920], "node_depth": 362, "node_id": [362, 921, 923], "node_idx": 362, "node_ind": 362, "node_index": 362, "node_position_model": 51, "noel": [0, 402, 1037, 1038, 1039, 1040, 1041, 1049], "noelano": 1049, "nof": 152, "nogil": 381, "noinfo": 252, "noir": 319, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 82, 85, 87, 88, 94, 95, 100, 107, 116, 121, 122, 124, 126, 128, 136, 138, 148, 153, 154, 171, 172, 173, 177, 181, 185, 195, 197, 198, 200, 204, 205, 210, 213, 214, 217, 218, 219, 220, 232, 238, 240, 242, 244, 245, 248, 273, 281, 286, 288, 305, 308, 309, 315, 320, 323, 329, 349, 360, 361, 363, 376, 382, 385, 410, 412, 417, 419, 421, 422, 423, 448, 450, 456, 516, 518, 519, 520, 521, 522, 523, 527, 529, 530, 535, 537, 539, 546, 611, 612, 613, 614, 616, 618, 619, 620, 621, 622, 626, 627, 629, 630, 649, 650, 654, 655, 656, 658, 659, 660, 661, 668, 669, 670, 676, 684, 690, 691, 697, 886, 898, 904, 927, 999, 1001, 1002, 1003, 1006, 1009, 1019, 1027, 1038, 1043, 1048, 1050, 1051], "noise_coef": 87, "noise_kernel": 177, "noise_level": [172, 177, 178, 617, 630], "noise_level_bound": [177, 178, 630], "noise_level_grid": 178, "noise_std": 179, "noise_vari": [202, 537, 661, 1002, 1051], "noise_variance_": [121, 202, 537, 539, 546, 661, 1044, 1051], "noise_variance_init": 537, "noiseless": [124, 1004], "noisi": [44, 69, 82, 88, 95, 122, 135, 166, 172, 178, 200, 214, 217, 238, 245, 264, 274, 280, 282, 283, 286, 318, 360, 361, 363, 412, 420, 422, 423, 448, 450, 454, 526, 529, 953, 1001, 1003, 1009, 1021], "noisier": 1003, "noisili": 189, "noisy_circl": [79, 95], "noisy_moon": [79, 95], "noiz": 115, "nolan": 1054, "noll": [215, 233], "nomenclatur": [1002, 1043], "nomin": [189, 374, 394, 395, 419, 420, 586, 587, 721, 1016, 1026], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 82, 90, 95, 103, 107, 111, 113, 122, 123, 124, 126, 137, 145, 153, 154, 156, 166, 167, 169, 176, 178, 184, 185, 187, 188, 189, 190, 191, 194, 195, 200, 201, 203, 205, 208, 209, 211, 213, 214, 216, 217, 221, 229, 230, 231, 233, 238, 239, 243, 244, 245, 246, 248, 252, 258, 260, 264, 265, 266, 267, 268, 273, 282, 290, 293, 297, 299, 311, 313, 315, 317, 318, 323, 324, 325, 326, 328, 329, 336, 338, 340, 345, 346, 347, 350, 351, 354, 355, 356, 362, 363, 367, 368, 372, 375, 376, 380, 381, 382, 385, 386, 388, 389, 392, 394, 395, 406, 410, 412, 413, 416, 418, 419, 420, 421, 422, 424, 441, 445, 449, 450, 454, 456, 460, 466, 467, 468, 469, 471, 472, 492, 501, 502, 508, 509, 513, 531, 537, 540, 541, 543, 545, 549, 552, 554, 556, 557, 558, 562, 563, 564, 565, 566, 567, 569, 570, 571, 577, 593, 594, 596, 597, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 635, 636, 640, 643, 648, 655, 657, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 677, 681, 682, 683, 690, 691, 692, 693, 694, 695, 696, 697, 699, 703, 704, 707, 711, 712, 717, 720, 722, 724, 725, 731, 732, 733, 740, 742, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 783, 787, 790, 793, 794, 795, 796, 799, 802, 803, 805, 806, 810, 812, 813, 814, 815, 817, 823, 831, 835, 838, 857, 859, 860, 861, 864, 869, 870, 872, 873, 874, 877, 881, 882, 883, 884, 885, 886, 888, 889, 896, 897, 898, 899, 900, 902, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 934, 935, 936, 951, 953, 957, 960, 968, 995, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1027, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "non_determinist": [382, 928, 1051], "non_neg": [587, 1044], "non_negative_factor": [2, 1046, 1048, 1049, 1050, 1054], "non_nest": 278, "non_nested_scor": 278, "non_nested_scores_lin": 278, "non_noisy_label": 328, "non_outliers_mask": 313, "non_zero": [46, 51], "nonblasdotwarn": 1049, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 85, 87, 88, 89, 95, 123, 126, 130, 139, 144, 145, 147, 150, 151, 163, 170, 173, 179, 180, 191, 195, 215, 216, 223, 226, 233, 235, 248, 249, 250, 252, 266, 268, 273, 274, 285, 298, 300, 304, 317, 320, 324, 325, 333, 336, 341, 343, 344, 347, 348, 349, 354, 355, 375, 376, 377, 380, 382, 387, 389, 394, 403, 406, 412, 416, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 712, 713, 714, 716, 717, 718, 719, 721, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 739, 740, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 928, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 945, 947, 952, 953, 956, 957, 959, 960, 964, 965, 968, 971, 974, 976, 979, 980, 986, 989, 990, 992, 994, 995, 1002, 1006, 1016, 1019, 1022, 1032, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "nonecheck": 381, "nonetheless": [394, 1006], "nonexist": 637, "nonflavanoid": 377, "nonlinear": [288, 325, 649, 693, 694, 698, 701, 875, 1002, 1003, 1011, 1016], "nonmetr": [695, 699, 1003], "nonneg": [412, 417, 457, 543, 545, 552, 886], "nonner": 1048, "nono": 400, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 400, "nonoisomapisomapspectralembeddingspectr": 400, "nonojustlookingjust": 400, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 400, "nonolinearsvclinear": 400, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 400, "nonopredict": 400, "nonopredictingstructurepredict": 400, "nonosvcsvcensembleclassifiersensembl": 400, "nonosvr": 400, "nonotoughlucktough": 400, "nonoverlap": 377, "nonparametr": [421, 422, 612, 613], "nonzero": [55, 57, 130, 214, 246, 277, 356, 409, 423, 448, 528, 529, 536, 542, 547, 553, 593, 596, 690, 691, 704, 851, 852, 855, 857, 859, 860, 1006], "nonzero_coef": 1002, "noptic": 98, "noptimum": 178, "noqa": [100, 118, 127, 148, 170, 183, 184, 189, 212, 235, 237, 284, 285, 324, 354, 384, 584, 585, 632, 808, 809, 995, 1046], "nor": [148, 276, 354, 363, 367, 385, 392, 410, 420, 441, 450, 599, 939, 1010, 1022, 1048], "norbert": [0, 370, 1039, 1049, 1050, 1051], "nordbi": 1054, "nore\u00f1a": 1050, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 87, 124, 175, 178, 195, 200, 201, 206, 238, 258, 259, 260, 262, 264, 270, 274, 298, 313, 343, 355, 386, 389, 394, 412, 420, 421, 446, 447, 451, 463, 464, 468, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 493, 536, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 594, 595, 596, 602, 648, 651, 652, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 677, 679, 681, 683, 686, 689, 690, 691, 695, 697, 698, 699, 775, 846, 881, 896, 909, 911, 914, 987, 988, 999, 1002, 1004, 1006, 1016, 1020, 1040, 1042, 1044, 1048], "norm1": 468, "norm2": 468, "norm_diag": 532, "norm_laplacian": 700, "norm_ord": [602, 1044], "norm_y_weight": 1049, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 80, 90, 94, 95, 99, 105, 107, 109, 110, 111, 115, 116, 122, 135, 136, 138, 141, 147, 148, 151, 152, 153, 165, 175, 178, 179, 184, 185, 187, 188, 194, 195, 196, 197, 198, 200, 205, 208, 210, 213, 217, 218, 219, 221, 229, 233, 238, 252, 258, 263, 264, 266, 267, 270, 273, 279, 298, 299, 302, 312, 314, 318, 323, 326, 329, 330, 335, 343, 355, 356, 363, 372, 375, 376, 377, 380, 385, 389, 393, 394, 408, 409, 410, 412, 413, 415, 418, 419, 420, 424, 444, 453, 455, 456, 457, 466, 468, 469, 479, 486, 487, 488, 493, 501, 517, 520, 524, 531, 532, 538, 541, 546, 547, 549, 553, 554, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 571, 584, 585, 587, 593, 594, 595, 596, 616, 630, 632, 644, 663, 664, 674, 677, 681, 685, 692, 696, 700, 702, 708, 709, 711, 723, 729, 731, 739, 741, 746, 750, 754, 755, 757, 760, 761, 762, 766, 775, 799, 800, 801, 808, 809, 835, 837, 846, 848, 854, 855, 858, 869, 870, 873, 874, 877, 879, 882, 883, 884, 885, 886, 887, 889, 894, 895, 897, 898, 899, 900, 904, 905, 917, 918, 919, 920, 952, 953, 957, 981, 982, 987, 988, 998, 1000, 1002, 1003, 1004, 1005, 1008, 1012, 1017, 1019, 1021, 1022, 1027, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "normalis": [188, 616, 793], "normalization_": [644, 998], "normalize_compon": [1045, 1047], "normalize_i": [177, 181, 422, 616, 1051], "normalized_discounted_cumulative_gain": 761, "normalized_mutual_info_scor": [2, 72, 412, 741, 760, 800, 1006, 1045, 1051], "normalized_stress": [235, 695, 699, 1003, 1052], "normalized_weight": 197, "norms_squar": 691, "north": [377, 412], "northern": 319, "northrop": 51, "northwestern": 663, "norvan": 1047, "nose": [377, 1040, 1044], "nosetest": 1039, "not_memb": 188, "notabl": [249, 313, 374, 394, 411, 501, 733, 882, 1003, 1005, 1009, 1041, 1044, 1051], "notarstefano": [1045, 1046], "notat": [152, 394, 413, 417, 420, 595, 717, 1002, 1006, 1046, 1053], "notch": 1030, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 86, 99, 103, 104, 111, 113, 115, 116, 119, 124, 138, 139, 141, 144, 148, 149, 153, 170, 172, 179, 183, 187, 188, 189, 190, 191, 193, 202, 204, 208, 215, 216, 217, 219, 223, 229, 231, 233, 235, 236, 237, 239, 242, 243, 245, 247, 248, 249, 250, 252, 259, 267, 268, 269, 273, 276, 279, 281, 287, 292, 293, 295, 299, 300, 309, 313, 314, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 335, 337, 343, 347, 354, 362, 367, 368, 374, 377, 378, 380, 381, 382, 384, 386, 387, 392, 393, 394, 398, 403, 406, 407, 410, 412, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 437, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 491, 494, 501, 503, 514, 520, 524, 532, 535, 538, 539, 543, 544, 545, 546, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 602, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 640, 641, 643, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 704, 705, 712, 713, 718, 720, 725, 726, 727, 728, 729, 733, 734, 735, 737, 739, 743, 746, 751, 759, 760, 763, 768, 769, 773, 775, 779, 783, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 925, 926, 928, 931, 941, 943, 952, 953, 965, 968, 980, 989, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1032, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 381, 382, 386, 413, 472, 907, 1022, 1024, 1025, 1026, 1048, 1051], "notes_neighbor": 1037, "notfittederror": [2, 133, 394, 858, 989, 1041, 1043, 1046, 1047, 1053, 1054], "noth": [57, 102, 330, 354, 355, 385, 547, 719, 872, 881, 936, 1016], "nothman": [0, 395, 401, 420, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "notic": [46, 52, 62, 63, 70, 86, 90, 111, 138, 140, 141, 148, 151, 169, 195, 200, 242, 255, 270, 271, 273, 274, 276, 282, 283, 293, 318, 347, 354, 355, 356, 363, 382, 385, 395, 411, 416, 419, 501, 546, 568, 995, 1005, 1006, 1012, 1034, 1050], "notif": 384, "notifi": [2, 577, 578, 579, 1035, 1047], "notimplementederror": [558, 559, 896, 1044, 1054], "notin": 412, "notion": [282, 347, 355, 369, 392, 412, 417, 419, 1002, 1006], "notmatthancock": [1045, 1047], "noto": 1050, "notplancha": 1055, "noun": 394, "nouri": [367, 1038, 1040], "novak": 1040, "novarti": 51, "novaya": [1047, 1050], "novel": [229, 299, 342, 363, 410, 995], "novelti": [185, 229, 242, 252, 294, 300, 342, 855, 1027, 1028, 1031, 1032, 1037, 1045], "novemb": [170, 215, 233, 377, 384, 1042, 1043, 1045], "novic": 1039, "now": [43, 44, 46, 52, 55, 58, 86, 90, 103, 116, 126, 135, 136, 140, 142, 144, 145, 148, 149, 156, 159, 170, 172, 177, 178, 179, 184, 187, 188, 189, 190, 193, 195, 197, 201, 202, 204, 216, 217, 219, 239, 247, 249, 267, 269, 273, 276, 284, 285, 286, 287, 290, 296, 318, 323, 324, 326, 327, 328, 329, 330, 334, 343, 354, 355, 356, 363, 367, 369, 375, 380, 381, 382, 386, 392, 393, 394, 398, 409, 412, 416, 417, 419, 420, 424, 432, 498, 513, 514, 517, 541, 554, 584, 585, 587, 632, 635, 654, 658, 663, 668, 689, 731, 761, 802, 803, 808, 809, 841, 856, 868, 869, 980, 996, 1002, 1006, 1012, 1015, 1016, 1021, 1022, 1026, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "nowadai": 380, "nozawa": [1052, 1053], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 119, 122, 123, 124, 125, 127, 128, 130, 131, 136, 137, 138, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 163, 165, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 195, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 311, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 367, 374, 375, 380, 382, 385, 386, 389, 392, 394, 403, 409, 412, 413, 416, 417, 418, 419, 420, 422, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 489, 498, 501, 502, 505, 509, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 565, 566, 568, 569, 570, 571, 574, 575, 586, 587, 590, 591, 593, 594, 598, 599, 602, 606, 609, 611, 614, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 641, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 692, 696, 697, 699, 700, 704, 707, 708, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 748, 749, 753, 758, 759, 760, 761, 768, 774, 778, 783, 786, 787, 788, 789, 791, 792, 793, 794, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 831, 832, 833, 835, 836, 837, 838, 841, 842, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 859, 860, 861, 865, 866, 873, 874, 876, 877, 882, 883, 884, 885, 886, 888, 889, 890, 897, 898, 901, 902, 903, 904, 905, 906, 909, 911, 912, 914, 915, 917, 918, 919, 920, 926, 931, 932, 933, 934, 935, 936, 938, 940, 941, 951, 952, 953, 959, 960, 967, 968, 970, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 995, 996, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1016, 1017, 1018, 1020, 1021, 1022, 1038, 1040, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "npach": [1052, 1053], "npo": 238, "npolynomi": 43, "nprior": 258, "npropag": 79, "nqy18": 420, "nreceiv": 282, "nrow": [43, 44, 66, 68, 70, 90, 99, 105, 121, 151, 181, 189, 215, 217, 223, 233, 235, 236, 239, 252, 267, 275, 276, 293, 315, 317, 318, 327, 333, 349, 350, 376], "nsampl": [382, 802, 803], "nswdemand": 151, "nswprice": 151, "nt": 55, "nt_uri": 55, "ntest": 302, "ntf": 704, "nth": [280, 712, 1006], "nthe": [189, 271, 362], "ntime": [50, 284], "nto": [221, 282], "ntol": 170, "ntrain": 83, "ntree": 43, "ntrue": [45, 332, 333], "ntt": 704, "ntu": [193, 374, 491, 513, 514, 663], "ntwo": 376, "nu": [2, 46, 48, 50, 181, 229, 242, 342, 367, 419, 422, 624, 682, 911, 912, 913, 1012, 1020, 1021, 1048, 1052], "nuanc": 394, "nuc": 290, "nuclear": [170, 377], "nuclei": [170, 377], "nudge_dataset": 311, "nuff": 1044, "nugmanov": [1045, 1046], "nuisanc": 422, "nukariya": [1049, 1050], "null": [79, 103, 188, 189, 190, 267, 273, 279, 412, 416, 501, 653, 674, 685, 709, 736, 762, 800, 834, 1002, 1003, 1006, 1021, 1047], "null_count": 52, "nullabl": [632, 633, 634, 635, 1048, 1052], "nullformatt": [235, 237, 240, 293], "nullloc": 298, "num": [43, 51, 103, 170, 172, 177, 178, 179, 189, 190, 217, 280, 281, 326, 328, 329, 419, 501, 637], "num_col": 256, "num_cor": 386, "num_depend": 267, "num_featur": [1004, 1052], "num_linear_processor": 156, "num_missing_cel": 151, "num_pip": 256, "num_preprocess": 468, "num_proc": [244, 323], "num_sampl": [805, 819, 1052], "num_selector": 156, "num_sent": 102, "num_thread": 293, "num_tree_processor": 156, "num_trial": 278, "numba": [293, 1026], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 94, 95, 96, 100, 102, 103, 104, 105, 107, 113, 115, 116, 119, 121, 123, 125, 126, 128, 135, 136, 138, 141, 143, 144, 146, 147, 148, 149, 152, 156, 158, 166, 167, 168, 170, 180, 181, 184, 185, 188, 189, 193, 200, 204, 214, 215, 216, 217, 222, 223, 229, 230, 231, 232, 233, 235, 242, 246, 250, 252, 253, 258, 259, 261, 263, 264, 266, 267, 268, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 286, 290, 293, 295, 299, 300, 313, 315, 316, 319, 322, 323, 324, 325, 326, 327, 328, 330, 336, 343, 348, 350, 355, 356, 358, 362, 363, 368, 369, 372, 374, 375, 376, 377, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 586, 587, 588, 589, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 708, 709, 710, 712, 717, 718, 719, 721, 723, 725, 729, 733, 734, 735, 736, 739, 740, 743, 745, 757, 760, 779, 783, 786, 787, 788, 789, 790, 791, 792, 793, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 935, 936, 939, 952, 953, 956, 957, 974, 976, 979, 980, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 99, 103, 107, 143, 145, 156, 170, 177, 180, 189, 190, 204, 215, 233, 252, 254, 256, 280, 303, 319, 325, 329, 356, 374, 375, 377, 383, 385, 386, 392, 393, 394, 408, 412, 414, 419, 420, 421, 422, 424, 425, 444, 447, 451, 463, 475, 476, 479, 482, 493, 494, 495, 501, 505, 506, 507, 509, 510, 515, 536, 538, 540, 545, 546, 552, 566, 567, 572, 586, 595, 616, 622, 625, 632, 635, 637, 638, 651, 657, 659, 677, 692, 695, 699, 719, 783, 793, 799, 805, 808, 809, 811, 819, 828, 831, 832, 833, 836, 844, 845, 846, 847, 848, 866, 867, 872, 877, 882, 883, 890, 921, 922, 923, 935, 936, 952, 953, 995, 996, 1002, 1003, 1007, 1014, 1016, 1017, 1022, 1029, 1030, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "numeric_featur": [103, 326], "numeric_onli": 189, "numeric_preprocessor": 254, "numeric_transform": [103, 326], "numerical_column": [188, 190, 471], "numerical_columns_subset": 145, "numerical_featur": [189, 319], "numerical_pip": 190, "numerical_transform": 103, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 136, 137, 138, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 163, 165, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 195, 196, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 240, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 292, 293, 297, 298, 299, 300, 302, 303, 304, 305, 306, 308, 311, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 367, 373, 374, 375, 378, 380, 381, 382, 383, 386, 388, 389, 392, 393, 394, 398, 403, 405, 406, 408, 409, 412, 413, 416, 417, 418, 419, 420, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 443, 444, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 489, 494, 498, 499, 501, 508, 511, 513, 514, 526, 532, 536, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 574, 575, 586, 587, 590, 591, 593, 594, 596, 606, 609, 623, 632, 633, 634, 635, 636, 637, 638, 648, 651, 652, 654, 657, 658, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 677, 681, 682, 683, 689, 692, 693, 696, 697, 698, 699, 700, 704, 707, 708, 711, 712, 714, 717, 719, 731, 732, 734, 735, 737, 739, 740, 743, 744, 759, 761, 778, 784, 786, 787, 788, 789, 792, 793, 794, 799, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 832, 835, 836, 837, 838, 841, 842, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 909, 911, 912, 914, 915, 917, 931, 932, 933, 934, 938, 940, 950, 951, 952, 953, 957, 959, 960, 967, 968, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 995, 996, 1001, 1002, 1004, 1006, 1007, 1009, 1012, 1016, 1018, 1021, 1022, 1024, 1026, 1037, 1040, 1041, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "numpydoc": [380, 394, 398, 405], "nune": 1038, "nuniformli": 152, "nuniqu": 319, "nurseit": 1054, "nusvc": [2, 367, 441, 912, 1007, 1021, 1037, 1038, 1039, 1042, 1045, 1047, 1048, 1049, 1051], "nusvr": [2, 46, 367, 915, 1021, 1039, 1045, 1047, 1048, 1049, 1051, 1052], "nutshel": 1004, "nv": 51, "nvidia": [0, 392], "nvirginica": 282, "nwanna": 1052, "nweight": 158, "nwith": [72, 90, 94, 169, 355], "nx": [50, 306, 375, 503], "nxorabl": 1047, "ny": [50, 52, 272, 306, 375, 377, 503, 996, 1018], "nyc": [1024, 1030], "nymark": 1052, "nystroem": [2, 43, 183, 229, 242, 247, 372, 645, 646, 647, 682, 875, 914, 915, 1032, 1038, 1044, 1047, 1049, 1050, 1051], "nystroem_approx_svm": 247, "nystroem_scor": 247, "nystroem_tim": 247, "nystrom": [884, 1046, 1047], "nystr\u00f6m": [43, 998], "nyu": [0, 858], "nz": 535, "nzw": 1045, "n\u00e1jera": [1041, 1042, 1043, 1044], "n\u00e1pole": 1050, "o": [0, 55, 57, 64, 66, 73, 82, 88, 93, 94, 96, 97, 113, 115, 123, 153, 170, 180, 202, 208, 213, 215, 230, 248, 258, 267, 273, 275, 282, 313, 314, 318, 323, 326, 329, 336, 347, 358, 367, 375, 377, 380, 388, 398, 412, 414, 417, 419, 423, 425, 448, 451, 452, 454, 477, 479, 504, 539, 609, 632, 671, 672, 697, 837, 865, 880, 921, 974, 998, 1000, 1002, 1003, 1006, 1007, 1009, 1010, 1020, 1021, 1022, 1037, 1040, 1043, 1045, 1046, 1049, 1050, 1052, 1053, 1054], "oa": [2, 49, 65, 70, 108, 112, 113, 128, 150, 185, 302, 304, 414, 473, 474, 477, 478, 480, 481, 517, 554, 805, 1000, 1027], "oa_ms": 110, "oa_shrinkag": 110, "oak": 319, "oarc": 1002, "ob2019": 1006, "obaja": 1041, "obatin": 318, "obei": [394, 1004], "obj": [249, 406, 572, 573, 943, 962, 964, 965, 966, 971], "obj_func": [615, 616], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 83, 95, 99, 102, 103, 124, 133, 151, 156, 161, 169, 177, 185, 189, 200, 211, 215, 231, 233, 241, 249, 253, 255, 256, 267, 271, 280, 282, 283, 285, 306, 319, 325, 326, 328, 329, 332, 355, 356, 363, 373, 374, 375, 380, 381, 383, 385, 386, 387, 389, 393, 394, 395, 403, 406, 412, 413, 414, 417, 420, 421, 422, 426, 428, 433, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 716, 723, 737, 738, 747, 763, 764, 786, 787, 794, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 935, 936, 937, 938, 939, 942, 943, 947, 949, 958, 960, 961, 962, 963, 964, 965, 966, 968, 970, 971, 990, 991, 993, 1002, 1003, 1004, 1005, 1009, 1012, 1013, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "object_nam": [249, 962, 965], "obozinski": 417, "obscur": [1013, 1053], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 86, 95, 103, 109, 111, 112, 113, 122, 123, 126, 128, 135, 138, 139, 141, 142, 148, 151, 152, 155, 170, 172, 175, 177, 178, 179, 181, 188, 189, 190, 195, 196, 210, 211, 213, 215, 216, 217, 219, 229, 233, 239, 240, 245, 246, 252, 267, 269, 273, 275, 276, 280, 286, 287, 293, 296, 299, 306, 318, 328, 330, 335, 342, 343, 347, 348, 354, 355, 356, 360, 361, 375, 377, 394, 398, 410, 412, 414, 415, 416, 417, 418, 421, 422, 445, 447, 449, 450, 451, 453, 463, 464, 473, 474, 475, 476, 477, 478, 479, 480, 529, 537, 556, 557, 568, 615, 616, 651, 657, 662, 706, 721, 723, 763, 826, 847, 855, 888, 890, 1002, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1029, 1038, 1050, 1051, 1052, 1053], "observatori": 177, "obsolet": [1037, 1053], "obstruct": 1044, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 88, 90, 91, 103, 106, 107, 126, 128, 135, 145, 148, 149, 154, 161, 170, 174, 176, 188, 189, 200, 215, 217, 219, 229, 239, 252, 258, 259, 260, 267, 269, 273, 274, 275, 279, 282, 286, 296, 318, 325, 341, 347, 355, 356, 362, 363, 375, 377, 382, 394, 406, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 441, 446, 473, 501, 537, 538, 560, 561, 562, 563, 564, 565, 568, 569, 570, 598, 611, 619, 650, 664, 666, 671, 673, 677, 679, 681, 682, 692, 713, 717, 731, 744, 761, 798, 811, 828, 834, 837, 838, 841, 855, 866, 886, 898, 911, 914, 917, 918, 953, 995, 996, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1020, 1021, 1043, 1045, 1048, 1050, 1051, 1052, 1053, 1054], "obviat": 998, "obviou": [188, 347, 363, 367, 380, 409, 417], "obvious": [184, 367], "oc": 1052, "occas": 380, "occasion": [395, 732, 1046], "occup": [188, 313, 329, 501], "occupation_cler": 188, "occupation_manag": 188, "occupation_oth": 188, "occupation_profession": 188, "occupation_sal": 188, "occupation_servic": 188, "occupi": [412, 1006], "occur": [54, 102, 146, 215, 219, 233, 350, 363, 380, 388, 395, 409, 412, 414, 416, 420, 448, 513, 514, 577, 586, 595, 632, 676, 803, 805, 808, 809, 811, 819, 828, 831, 832, 833, 836, 879, 940, 1006, 1008, 1016, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "occurr": [2, 215, 319, 355, 356, 375, 380, 384, 412, 420, 574, 575, 586, 594, 595, 622, 632, 633, 634, 635, 788, 844, 872, 1008, 1038, 1043], "ocean": 306, "ocsvm": [48, 229], "oct": [697, 774, 1003, 1009], "octob": [110, 375, 1037, 1044, 1050, 1051, 1053], "od280": 377, "od315": 377, "odd": [276, 419, 519, 717, 1006, 1044, 1045], "ofcategoriesknownnumb": 400, "off": [44, 51, 53, 72, 74, 75, 81, 85, 86, 109, 113, 115, 121, 141, 151, 169, 170, 185, 219, 236, 247, 251, 265, 266, 272, 274, 275, 276, 286, 290, 313, 330, 333, 335, 337, 343, 352, 354, 375, 380, 382, 394, 411, 412, 414, 421, 446, 501, 558, 559, 564, 565, 593, 596, 639, 661, 663, 697, 720, 802, 803, 805, 808, 809, 819, 821, 827, 832, 870, 889, 957, 1005, 1011, 1021, 1026, 1027, 1037, 1041, 1042, 1044], "offer": [43, 141, 203, 382, 388, 392, 393, 394, 398, 406, 416, 417, 419, 420, 995, 996, 1007, 1010, 1022, 1025, 1026, 1030, 1043, 1055, 1056], "offic": 1030, "offici": [375, 382, 392, 394, 398, 498, 502, 1025, 1045, 1046, 1049], "offlin": [267, 367, 380], "offset": [138, 193, 392, 414, 417, 473, 513, 514, 568, 637, 638, 646, 647, 649, 650, 682, 733, 780, 782, 855, 913, 1006, 1020, 1045, 1056], "offset_": [473, 568, 682, 855, 913, 1045], "offset_init": 682, "offsetbox": 236, "offsetimag": 236, "ofmulticlass": 1021, "often": [43, 57, 61, 62, 64, 69, 102, 106, 141, 151, 154, 176, 183, 188, 189, 216, 233, 236, 252, 260, 275, 278, 313, 318, 343, 352, 354, 355, 356, 367, 368, 374, 375, 377, 380, 382, 385, 388, 392, 393, 394, 397, 400, 406, 410, 412, 413, 414, 416, 417, 419, 420, 422, 424, 472, 526, 529, 538, 541, 637, 651, 652, 657, 658, 665, 666, 667, 668, 677, 679, 692, 733, 879, 887, 895, 907, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1016, 1019, 1020, 1022, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "og": 420, "ogbonna": 1050, "ogordon100": 1050, "ogrid": 53, "ogu": 420, "ogura": 1052, "oh": [882, 1047], "ohad": 1051, "ohayon": [1045, 1046, 1053], "ohio": 375, "ohno": 410, "oj_lappi": 1049, "oja": [424, 538], "ojala": [279, 416, 834], "ojeda": 1051, "ok": [49, 380, 1012], "okal": 1041, "okbalefthand": 1043, "okhlopkov": [1043, 1044], "okon": 1051, "okroshiashvili": 1050, "ol": [195, 205, 210, 212, 213, 221, 232, 325, 661, 1002], "ol2001": 996, "olatunji": 1052, "old": [233, 380, 384, 386, 412, 472, 541, 651, 657, 907, 1003, 1026, 1037, 1042, 1043, 1045, 1050, 1051, 1052], "olden": 1045, "older": [249, 379, 384, 406, 468, 1029, 1035, 1040, 1047, 1049], "oldest": 501, "oldid": 1006, "oldja": 1049, "oleg": 1047, "oleggio": 1041, "olegovich": 1044, "oleh": [1049, 1051], "oleksandr": [1045, 1046, 1047, 1048, 1051], "oleksii": 1054, "olemiss": 684, "olga": [633, 996], "oli": 1044, "oliblum90": [1044, 1045], "olicairn": 1048, "olimpio": 1045, "oliph": 1037, "oliv": [1045, 1046, 1048, 1049, 1050], "oliveira": [1043, 1045, 1047, 1051], "olivetti": [2, 121, 143, 373, 417, 500, 1032, 1037, 1045], "olivetti_fac": 500, "olivi": [0, 395, 401, 905, 1019, 1024, 1026, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "oll": 1052, "olr": 195, "olsen": 1044, "olshen": [917, 918, 1022], "olson": 1043, "olszewski": 1050, "olvi": [170, 377], "om": 1044, "omar": [0, 401, 1047, 1052, 1053, 1054, 1055, 1056], "omarmanzoor": 1053, "omega": [350, 415, 1000], "omega_": 1000, "omega_k": [415, 1000], "omer": 1042, "omit": [142, 187, 188, 337, 385, 425, 479, 539, 671, 673, 681, 812, 814, 837, 838, 841, 844, 845, 846, 847, 848, 866, 1004, 1011], "omohundro": 1009, "omp": [2, 124, 130, 214, 417, 536, 542, 547, 553, 669, 670, 690, 691, 1028, 1032, 1037, 1045], "omp_cv": 214, "omp_get_max_thread": 381, "omp_num_thread": 368, "omtcyfz": 1044, "onc": [2, 43, 47, 83, 167, 170, 172, 177, 236, 249, 252, 267, 271, 274, 286, 287, 290, 293, 319, 322, 326, 354, 356, 362, 363, 367, 369, 374, 375, 378, 380, 384, 385, 386, 387, 388, 393, 394, 395, 406, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 453, 455, 457, 476, 513, 514, 543, 549, 556, 564, 565, 595, 596, 602, 616, 624, 632, 652, 656, 658, 660, 666, 668, 670, 671, 672, 673, 681, 682, 683, 702, 717, 721, 723, 741, 786, 806, 810, 813, 823, 827, 844, 845, 846, 847, 848, 921, 1002, 1003, 1009, 1016, 1020, 1021, 1022, 1034, 1037, 1045, 1047, 1048, 1049, 1050, 1054], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 81, 86, 88, 90, 91, 93, 94, 97, 99, 103, 112, 118, 121, 124, 126, 130, 140, 141, 146, 148, 151, 152, 156, 159, 169, 170, 172, 179, 180, 183, 187, 188, 189, 190, 191, 193, 195, 196, 200, 204, 205, 207, 208, 209, 211, 215, 217, 224, 225, 230, 233, 237, 242, 249, 250, 252, 256, 260, 263, 267, 269, 270, 271, 273, 274, 276, 277, 280, 281, 282, 283, 290, 292, 293, 298, 311, 314, 315, 318, 319, 322, 324, 325, 326, 330, 335, 342, 343, 351, 354, 355, 356, 358, 362, 363, 367, 368, 369, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 397, 398, 400, 403, 406, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 464, 466, 468, 473, 478, 491, 492, 494, 495, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 519, 539, 544, 545, 546, 548, 552, 556, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 586, 588, 589, 593, 594, 595, 596, 615, 616, 620, 621, 625, 632, 635, 637, 638, 639, 640, 648, 652, 653, 654, 655, 659, 662, 663, 664, 666, 671, 673, 674, 676, 678, 679, 680, 681, 683, 685, 693, 697, 700, 704, 708, 714, 716, 725, 734, 735, 739, 743, 755, 756, 759, 768, 776, 779, 783, 784, 785, 786, 788, 789, 792, 793, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 809, 811, 812, 813, 815, 817, 819, 823, 824, 827, 828, 830, 832, 833, 835, 836, 837, 838, 839, 841, 842, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 865, 869, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 888, 889, 890, 893, 895, 909, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 931, 941, 945, 955, 976, 995, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "one_class": 250, "one_d_arrai": 926, "one_d_label": 929, "one_hot": [319, 330], "one_hot_encod": [43, 145], "one_hot_encoder_": 571, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 145, "one_hot_tim": 43, "one_imag": [420, 589, 592], "one_vs_on": [422, 615, 1007], "one_vs_rest": [615, 1007], "oneclasssvm": [2, 48, 50, 229, 242, 325, 342, 568, 682, 855, 1012, 1020, 1021, 1039, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "oned": 398, "onehot": [254, 314, 315, 413, 874, 1016], "onehot_categor": [215, 233], "onehotencod": [2, 43, 103, 140, 145, 156, 188, 189, 215, 233, 244, 252, 254, 256, 319, 323, 325, 328, 329, 330, 374, 394, 413, 419, 470, 471, 571, 586, 587, 872, 876, 877, 880, 883, 890, 996, 1016, 1038, 1041, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "onehotencoderonehotencod": [103, 140, 156, 188, 189, 244, 254, 323, 326], "ones": [43, 50, 70, 78, 88, 103, 112, 146, 152, 172, 193, 200, 219, 220, 242, 245, 249, 273, 281, 284, 300, 317, 333, 352, 367, 368, 380, 388, 394, 412, 414, 416, 419, 427, 430, 434, 454, 537, 571, 586, 615, 616, 623, 649, 650, 663, 664, 675, 681, 708, 801, 807, 812, 823, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 884, 888, 959, 1002, 1006, 1011, 1012, 1016, 1021, 1037, 1045, 1046, 1047], "onetoonefeaturemixin": [2, 382, 436], "onevsoneclassifi": [2, 290, 403, 838, 839, 1038, 1040, 1041, 1043, 1044, 1046, 1049, 1051, 1054], "onevsrestclassifi": [2, 66, 207, 230, 250, 280, 282, 290, 403, 410, 663, 664, 837, 839, 909, 1038, 1039, 1041, 1043, 1044, 1050, 1051, 1054, 1055], "ong": 713, "ongari": 1054, "onggo": 1053, "ongo": [328, 381, 395], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 82, 86, 88, 91, 99, 102, 103, 104, 106, 107, 112, 118, 124, 125, 127, 131, 135, 137, 142, 143, 144, 145, 147, 155, 156, 165, 166, 167, 170, 172, 174, 179, 181, 184, 185, 187, 188, 189, 193, 194, 199, 200, 204, 211, 215, 216, 218, 221, 223, 224, 233, 235, 236, 242, 244, 246, 248, 249, 253, 256, 258, 259, 260, 263, 264, 267, 269, 271, 273, 275, 276, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 299, 301, 304, 306, 310, 313, 314, 318, 319, 324, 325, 332, 333, 335, 339, 340, 343, 347, 348, 350, 351, 354, 355, 356, 358, 359, 362, 363, 367, 368, 369, 373, 374, 375, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 392, 394, 395, 398, 403, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 432, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 493, 494, 495, 497, 499, 501, 502, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 521, 524, 528, 529, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 712, 714, 718, 731, 734, 735, 739, 741, 742, 743, 746, 748, 761, 763, 765, 779, 783, 784, 785, 786, 788, 789, 792, 793, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 819, 823, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 939, 941, 945, 953, 955, 959, 961, 966, 971, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "onlin": [2, 44, 45, 47, 54, 71, 84, 121, 124, 185, 194, 223, 229, 251, 267, 309, 369, 375, 379, 385, 394, 412, 417, 420, 422, 446, 450, 451, 453, 500, 507, 536, 541, 542, 543, 544, 550, 551, 587, 589, 663, 671, 672, 673, 681, 683, 835, 844, 845, 846, 847, 848, 851, 852, 857, 859, 860, 878, 879, 889, 909, 910, 998, 1002, 1010, 1012, 1024, 1027, 1028, 1030, 1032, 1037, 1041, 1042, 1044, 1052], "onlineldavb": 541, "only_non_neg": 1050, "only_physical_cor": 141, "onnx": [1025, 1026, 1032], "onnxruntim": 406, "onto": [116, 236, 237, 247, 313, 392, 417, 420, 424, 450, 452, 465, 538, 544, 548, 632, 633, 635, 693, 1000, 1004, 1009], "onward": [883, 1041, 1055, 1056], "onx": 406, "oob": [134, 147, 185, 419, 520, 569, 1026, 1027, 1039, 1050, 1054], "oob_best_it": 147, "oob_color": 147, "oob_decision_function_": [560, 562, 569], "oob_error": 139, "oob_improvement_": [147, 419, 564, 565, 1039], "oob_lin": 147, "oob_prediction_": [561, 563, 570], "oob_scor": [139, 419, 560, 561, 562, 563, 569, 570, 1042, 1044], "oob_score_": [139, 560, 561, 562, 563, 564, 565, 569, 570, 1039, 1053], "oob_scores_": [564, 565, 1053], "op": [384, 431, 663, 664, 671, 672, 673, 681, 682, 683, 866, 867, 909, 1016], "opaqu": 1014, "open": [0, 47, 51, 55, 237, 374, 375, 378, 379, 380, 384, 386, 392, 393, 395, 406, 413, 420, 491, 501, 513, 514, 996, 1025, 1030, 1040, 1044, 1045, 1047, 1053], "open_pric": 51, "openbla": [367, 368, 378, 388, 392, 1050, 1054, 1055], "openblas_num_thread": 368, "opencv": 375, "opengraph": [380, 398, 405], "openml": [2, 43, 52, 103, 156, 177, 188, 215, 223, 231, 233, 243, 267, 287, 290, 292, 310, 373, 398, 501, 1032, 1045, 1047, 1050], "openml1": 52, "openml100": 374, "openmp": [323, 378, 383, 392, 394, 412, 419, 1048, 1050, 1053, 1055], "opentsn": 697, "oper": [2, 19, 53, 170, 180, 185, 243, 248, 255, 265, 267, 268, 270, 275, 280, 356, 367, 368, 377, 378, 380, 383, 386, 392, 394, 395, 398, 406, 408, 411, 416, 417, 419, 420, 421, 425, 446, 452, 465, 472, 479, 486, 487, 488, 489, 509, 538, 539, 546, 556, 557, 571, 577, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 621, 626, 629, 635, 640, 648, 663, 694, 698, 707, 711, 712, 713, 732, 779, 786, 787, 793, 794, 824, 835, 838, 849, 850, 872, 876, 881, 892, 893, 907, 914, 917, 955, 978, 1002, 1009, 1016, 1021, 1025, 1027, 1030, 1041, 1043, 1044, 1045, 1047, 1048, 1053, 1056], "operand": 422, "operation": [233, 1030], "operatornam": [417, 746, 1002, 1006, 1022], "opinion": 395, "opitz": 1006, "opportun": [539, 1020], "oppos": [100, 249, 408, 412, 905, 1009, 1021, 1037, 1055], "opposit": [62, 86, 100, 126, 188, 189, 204, 267, 280, 394, 410, 414, 416, 421, 447, 451, 453, 473, 543, 545, 552, 568, 717, 735, 855, 913, 1037], "opposite_lof_scor": 855, "opt": [378, 382], "opta": 902, "optic": [2, 71, 79, 185, 326, 373, 423, 448, 450, 459, 460, 461, 507, 1027, 1031, 1032, 1046, 1050, 1051, 1052, 1053, 1054, 1055], "optim": [46, 52, 53, 64, 86, 87, 90, 93, 104, 109, 110, 121, 146, 147, 149, 151, 169, 170, 172, 173, 176, 177, 178, 179, 180, 200, 202, 204, 208, 223, 231, 248, 252, 267, 271, 278, 281, 286, 287, 290, 292, 297, 311, 313, 318, 326, 330, 335, 345, 350, 354, 355, 356, 363, 367, 374, 377, 380, 382, 383, 392, 394, 398, 407, 409, 411, 412, 414, 416, 417, 419, 421, 422, 423, 448, 451, 452, 453, 454, 456, 461, 465, 466, 476, 477, 483, 536, 539, 540, 542, 544, 548, 562, 563, 564, 565, 579, 615, 616, 624, 625, 640, 643, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 689, 692, 695, 697, 699, 700, 706, 724, 728, 735, 804, 805, 819, 827, 851, 852, 853, 855, 857, 858, 859, 860, 861, 866, 867, 885, 897, 901, 902, 909, 910, 911, 912, 913, 914, 915, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1020, 1021, 1022, 1025, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053], "optima": 422, "optimis": [382, 412, 1009, 1040, 1050, 1052], "optimist": [52, 204, 278, 354, 363, 712, 1002, 1006], "optimum": [94, 178, 188, 193, 267, 286, 411, 417, 476, 1002, 1005], "option": [2, 43, 66, 80, 85, 128, 141, 149, 178, 184, 197, 200, 216, 252, 267, 276, 282, 323, 330, 354, 358, 363, 369, 374, 375, 376, 378, 380, 381, 383, 385, 386, 388, 389, 392, 394, 395, 398, 406, 412, 413, 415, 416, 417, 419, 420, 423, 436, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 692, 693, 694, 695, 697, 699, 700, 716, 718, 722, 734, 735, 740, 741, 742, 762, 763, 764, 769, 771, 772, 776, 779, 780, 781, 782, 783, 786, 788, 789, 792, 797, 798, 800, 804, 806, 807, 808, 809, 811, 812, 814, 823, 827, 828, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 901, 902, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 943, 991, 995, 996, 1002, 1005, 1006, 1009, 1016, 1019, 1021, 1022, 1026, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "option_context": 233, "ora": 1050, "oracl": [2, 69, 215, 233, 425, 473, 474, 477, 478, 479, 480, 1000, 1037], "orallo": 1006, "orang": [46, 48, 86, 111, 119, 122, 123, 128, 135, 150, 151, 153, 179, 184, 202, 204, 225, 250, 261, 267, 304, 323, 329, 361, 1007, 1054], "orazbayev": 1051, "orbit": [354, 355], "order": [2, 43, 53, 58, 61, 64, 81, 88, 97, 98, 104, 109, 130, 143, 144, 145, 149, 151, 163, 177, 187, 188, 191, 193, 204, 208, 211, 215, 216, 221, 229, 233, 237, 246, 249, 252, 256, 260, 268, 271, 273, 280, 292, 311, 313, 318, 319, 320, 324, 325, 330, 350, 354, 356, 363, 367, 368, 375, 380, 381, 382, 384, 385, 386, 389, 394, 398, 399, 403, 406, 412, 413, 414, 416, 417, 418, 419, 420, 422, 424, 441, 444, 447, 450, 451, 453, 454, 459, 460, 461, 463, 468, 492, 493, 494, 500, 502, 520, 539, 540, 544, 545, 546, 548, 552, 556, 558, 560, 561, 562, 563, 564, 568, 569, 570, 571, 572, 586, 593, 596, 598, 599, 602, 611, 612, 613, 615, 627, 632, 636, 645, 663, 664, 670, 681, 690, 691, 693, 694, 698, 702, 704, 705, 707, 709, 717, 718, 723, 727, 731, 734, 735, 743, 745, 746, 747, 759, 761, 783, 787, 788, 789, 792, 793, 794, 799, 804, 805, 806, 808, 809, 810, 812, 816, 819, 823, 824, 827, 830, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 859, 866, 869, 880, 882, 883, 884, 888, 889, 890, 893, 894, 895, 897, 898, 899, 900, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 935, 936, 941, 953, 969, 974, 996, 1002, 1003, 1006, 1007, 1009, 1010, 1016, 1019, 1020, 1021, 1022, 1026, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "order_": [840, 843], "order_centroid": 355, "ordered_sampl": 233, "ordereddict": 139, "ordering_": [98, 412, 454, 459, 460, 461], "ordin": [43, 86, 103, 156, 252, 316, 319, 320, 324, 327, 374, 394, 419, 501, 572, 714, 874, 877, 882, 883, 890, 1002, 1003, 1016, 1026, 1045, 1051], "ordinal_encod": [145, 252], "ordinal_result": 145, "ordinalencod": [2, 145, 156, 189, 190, 215, 252, 319, 327, 374, 394, 586, 845, 877, 882, 890, 996, 1008, 1016, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054], "ordinalencoderordinalencod": [156, 189, 190, 319], "ordinari": [2, 123, 138, 185, 194, 195, 198, 200, 205, 211, 217, 218, 220, 232, 325, 640, 651, 657, 659, 660, 661, 662, 677, 683, 687, 688, 692, 1020, 1027, 1028, 1032], "ordinarili": [392, 394], "ordowski": 1006, "oregon": 319, "oren": 1045, "oresti": 1046, "orfano": [1050, 1051, 1052, 1053, 1054], "org": [43, 51, 52, 55, 61, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 193, 197, 215, 223, 231, 233, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 292, 310, 311, 319, 323, 324, 326, 327, 329, 334, 362, 368, 373, 378, 380, 383, 386, 388, 395, 416, 600, 641, 673, 676, 681, 700, 710, 774, 851, 852, 857, 858, 859, 860, 887, 903, 917, 918, 947, 948, 1002, 1006, 1022, 1032, 1045, 1049], "organ": [0, 50, 52, 102, 111, 354, 374, 379, 380, 395, 857, 1025], "ori": 1043, "orient": [66, 121, 188, 235, 313, 394, 921, 1003], "orig": [53, 300], "orig_coin": [80, 81], "orig_data_ax": 126, "origin": [43, 44, 53, 58, 59, 80, 81, 84, 89, 91, 106, 107, 118, 121, 123, 124, 130, 151, 154, 166, 167, 170, 172, 174, 176, 177, 183, 184, 189, 193, 202, 204, 219, 235, 236, 237, 239, 240, 246, 247, 248, 252, 264, 267, 270, 276, 286, 296, 301, 311, 314, 318, 328, 333, 347, 354, 356, 363, 368, 375, 377, 379, 380, 382, 384, 385, 392, 394, 406, 409, 412, 413, 416, 417, 419, 420, 422, 423, 424, 425, 437, 441, 445, 447, 448, 449, 450, 451, 453, 454, 463, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 498, 499, 500, 506, 524, 536, 538, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 581, 586, 587, 589, 593, 595, 596, 599, 612, 613, 615, 616, 619, 635, 637, 640, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 697, 701, 706, 733, 768, 774, 804, 806, 807, 812, 814, 823, 827, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 855, 856, 859, 860, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 889, 898, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 933, 935, 936, 940, 941, 964, 976, 979, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1012, 1017, 1018, 1019, 1020, 1023, 1025, 1030, 1040, 1041, 1043, 1045, 1047, 1049, 1051, 1053], "original_param": 150, "original_sklearn_vers": [406, 581], "original_space_centroid": 355, "orii": 1039, "orphan": [452, 465, 1037], "orr": [1010, 1020], "orr\u00f9": 1040, "orthogon": [2, 37, 87, 122, 123, 124, 130, 185, 194, 417, 531, 536, 542, 544, 547, 548, 553, 669, 670, 690, 691, 1018, 1027, 1028, 1032, 1037], "orthogonal_mp": [2, 553, 669, 670, 691, 1002], "orthogonal_mp_gram": [2, 669, 670, 690, 1051], "orthogonalmatchingpursuit": [2, 214, 670, 690, 691, 1002, 1007, 1037, 1039, 1042, 1045, 1050, 1055], "orthogonalmatchingpursuitcv": [2, 214, 403, 669, 1039, 1050, 1054], "orthonorm": [2, 45, 389, 952, 998], "orthotrop": 1009, "ortiz": [1047, 1053], "os": 1055, "osa": 1045, "osaid": 1045, "osborn": [1040, 1041], "oscar": [1040, 1044], "oscil": [153, 189, 220, 412, 444], "oscillatori": [216, 1016], "osei": 1051, "osendorf": [1037, 1038], "oserror": [398, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503], "osindero": [865, 1011], "osman": [1046, 1052], "osx": 367, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 85, 90, 99, 101, 103, 104, 116, 123, 124, 126, 128, 138, 140, 141, 144, 145, 148, 149, 151, 152, 158, 165, 183, 184, 185, 187, 188, 189, 190, 193, 195, 203, 208, 215, 219, 233, 235, 236, 237, 239, 242, 243, 244, 246, 248, 249, 252, 253, 260, 263, 267, 268, 270, 273, 274, 275, 282, 283, 287, 290, 298, 299, 300, 312, 313, 317, 318, 320, 322, 323, 325, 329, 330, 332, 343, 347, 349, 352, 354, 355, 358, 362, 363, 367, 372, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 393, 394, 395, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 441, 447, 448, 450, 451, 452, 453, 454, 456, 461, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 501, 502, 508, 538, 539, 540, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 602, 607, 615, 616, 617, 618, 625, 632, 633, 635, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 697, 701, 704, 709, 723, 768, 779, 783, 790, 797, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 819, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 864, 866, 867, 869, 870, 872, 874, 875, 876, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 897, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 947, 948, 962, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1029, 1030, 1032, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1056], "other_parti": 267, "other_payment_plan": 267, "other_scor": 385, "otherwis": [50, 89, 95, 137, 181, 184, 197, 217, 223, 267, 306, 347, 350, 363, 369, 382, 384, 386, 394, 403, 412, 414, 416, 420, 422, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 501, 532, 538, 539, 540, 541, 543, 545, 546, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 602, 607, 615, 616, 619, 636, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 695, 697, 701, 702, 703, 705, 707, 708, 712, 714, 718, 719, 729, 731, 732, 733, 734, 735, 743, 746, 757, 759, 760, 761, 771, 779, 783, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 819, 823, 824, 827, 828, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 866, 867, 869, 872, 873, 874, 875, 876, 880, 881, 888, 889, 890, 891, 894, 895, 896, 898, 899, 900, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 924, 935, 936, 938, 942, 952, 953, 964, 966, 989, 991, 994, 1001, 1002, 1003, 1006, 1009, 1010, 1012, 1013, 1016, 1018, 1020, 1021, 1025, 1030, 1039, 1045, 1046, 1047, 1050, 1053], "ott": 1041, "oudshoorn": [632, 996], "ought": 367, "our": [0, 43, 44, 46, 50, 51, 52, 77, 86, 89, 102, 103, 111, 112, 116, 121, 122, 135, 136, 142, 145, 146, 148, 149, 165, 170, 172, 177, 178, 179, 185, 187, 188, 189, 190, 191, 215, 219, 233, 237, 239, 249, 266, 267, 273, 276, 279, 280, 286, 296, 310, 313, 319, 323, 325, 330, 337, 340, 346, 348, 350, 354, 355, 356, 363, 368, 379, 384, 385, 388, 392, 393, 394, 395, 403, 412, 416, 419, 420, 422, 423, 448, 454, 568, 649, 697, 713, 725, 731, 743, 761, 851, 852, 853, 855, 857, 859, 860, 861, 995, 996, 1002, 1003, 1006, 1012, 1016, 1019, 1020, 1021, 1026, 1029, 1030, 1044, 1045, 1047, 1048, 1051, 1052, 1054], "our_rand_r": 1046, "oura": [1050, 1051, 1052], "ourselv": 1030, "ouss1508": [1052, 1053], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 83, 88, 102, 103, 128, 134, 139, 141, 142, 149, 150, 163, 185, 187, 188, 190, 200, 215, 217, 219, 223, 233, 252, 258, 260, 267, 271, 273, 276, 281, 285, 286, 290, 292, 318, 319, 325, 335, 337, 339, 340, 343, 350, 354, 366, 375, 377, 378, 380, 382, 383, 384, 386, 392, 394, 400, 406, 412, 415, 417, 419, 420, 422, 428, 438, 439, 440, 446, 447, 449, 450, 451, 453, 476, 486, 487, 488, 489, 504, 520, 521, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 593, 594, 596, 609, 612, 613, 639, 644, 645, 646, 647, 656, 660, 671, 673, 678, 680, 681, 693, 694, 697, 706, 732, 746, 805, 807, 808, 809, 810, 812, 813, 814, 815, 819, 835, 844, 845, 846, 847, 848, 853, 858, 861, 865, 866, 867, 875, 879, 886, 898, 901, 902, 924, 967, 969, 974, 994, 996, 1000, 1001, 1005, 1006, 1007, 1009, 1014, 1016, 1026, 1027, 1028, 1030, 1032, 1037, 1039, 1041, 1043, 1045, 1046, 1049, 1050, 1053, 1055], "out_activation_": [866, 867], "out_bounds_predict": 217, "out_fil": [921, 1022], "out_of_bound": [245, 640], "out_of_cluster_doc": 57, "outcom": [43, 141, 188, 286, 394, 400, 419, 574, 663, 714, 747, 799, 837, 904, 905, 906, 911, 914, 1002, 1006, 1022, 1029, 1041, 1045, 1047], "outdat": 383, "outer": [58, 126, 278, 334, 455, 519, 645, 655, 656, 659, 998, 1038], "outer_cv": [278, 329], "outer_numb": 334, "outermost": 347, "outli": [48, 111, 394, 473, 478, 1002, 1012], "outlier": [2, 42, 70, 79, 87, 111, 112, 148, 152, 172, 185, 194, 213, 217, 218, 219, 220, 221, 229, 241, 294, 312, 317, 320, 342, 352, 375, 394, 412, 414, 419, 434, 450, 468, 470, 473, 474, 477, 478, 479, 480, 494, 495, 497, 501, 515, 517, 527, 529, 568, 636, 644, 654, 675, 676, 677, 681, 682, 683, 684, 697, 707, 835, 855, 859, 870, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 894, 895, 896, 897, 898, 899, 900, 912, 913, 915, 1006, 1020, 1021, 1025, 1027, 1028, 1031, 1032, 1037, 1042, 1043, 1045, 1056], "outlier_detector": [252, 434], "outlier_label": [859, 1047], "outlier_label_": 859, "outlier_mask": 218, "outlier_plot": 111, "outliermixin": [2, 1054], "outliers_": 654, "outliers_cov": 111, "outliers_fract": 242, "outliers_index": 112, "outliers_offset": 112, "outlin": [99, 144, 380, 382, 394, 395, 397, 412, 995, 1032], "outlying": 1012, "outperform": [109, 116, 151, 156, 290, 318, 392, 416, 419, 456, 466, 1008, 1016], "output": [2, 30, 31, 51, 54, 62, 64, 72, 86, 92, 124, 134, 135, 136, 138, 144, 156, 159, 172, 180, 183, 184, 185, 188, 211, 241, 249, 253, 256, 261, 266, 267, 271, 273, 276, 280, 282, 283, 287, 290, 293, 314, 317, 319, 320, 322, 325, 326, 328, 330, 355, 356, 357, 358, 360, 362, 373, 374, 375, 377, 380, 382, 386, 388, 392, 393, 394, 410, 411, 412, 413, 415, 416, 419, 420, 421, 422, 428, 433, 436, 441, 445, 446, 447, 449, 450, 451, 453, 454, 456, 463, 464, 466, 467, 468, 469, 470, 471, 472, 486, 487, 488, 489, 492, 495, 497, 498, 499, 500, 501, 502, 508, 510, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 662, 663, 665, 666, 667, 668, 671, 672, 673, 676, 678, 679, 681, 683, 684, 686, 687, 688, 689, 693, 694, 695, 697, 699, 701, 704, 705, 718, 719, 726, 728, 729, 731, 733, 740, 750, 751, 753, 755, 756, 757, 758, 759, 761, 766, 772, 777, 790, 793, 795, 796, 802, 803, 804, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 827, 830, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 852, 853, 854, 858, 859, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 897, 898, 901, 902, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 930, 935, 936, 938, 941, 953, 954, 961, 962, 964, 972, 992, 995, 996, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1021, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "output_dict": [718, 1045, 1049], "output_distribut": [107, 313, 317, 413, 885, 886, 897, 898, 1016], "output_fil": 491, "output_indices_": [468, 1050], "output_label": 334, "output_label_arrai": 334, "outputcodeclassifi": [2, 290, 403, 837, 838, 1044, 1049, 1053, 1054], "outputs_2d_": [851, 859, 1047], "outreach": 395, "outsid": [45, 48, 57, 144, 216, 217, 245, 256, 406, 420, 450, 640, 888, 1012, 1045], "outward": 313, "outweigh": 1041, "ouvert": [763, 764, 1004], "ova": [224, 671, 673, 681, 1020], "ovb": [187, 188], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 83, 88, 89, 104, 105, 106, 121, 138, 141, 146, 151, 152, 165, 169, 172, 180, 183, 187, 189, 198, 209, 215, 223, 233, 242, 252, 267, 273, 274, 276, 278, 280, 281, 282, 285, 298, 306, 308, 309, 315, 325, 326, 328, 332, 354, 355, 367, 368, 369, 375, 376, 379, 380, 381, 382, 386, 393, 394, 408, 410, 412, 413, 416, 417, 418, 419, 420, 424, 450, 453, 468, 476, 514, 538, 539, 541, 542, 543, 544, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 593, 594, 596, 599, 607, 635, 637, 638, 639, 649, 650, 651, 652, 657, 658, 663, 665, 666, 667, 668, 670, 671, 672, 673, 681, 682, 683, 690, 691, 702, 721, 723, 744, 768, 793, 798, 802, 805, 808, 809, 811, 816, 817, 819, 828, 830, 831, 832, 833, 834, 836, 865, 866, 867, 868, 884, 888, 909, 917, 919, 926, 932, 941, 947, 948, 995, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "overal": [43, 78, 135, 138, 141, 146, 156, 177, 233, 267, 270, 293, 318, 319, 355, 367, 379, 380, 386, 409, 410, 419, 451, 453, 468, 475, 476, 482, 554, 890, 1003, 1006, 1022, 1030, 1047], "overallqu": 156, "overcom": [142, 219, 367, 420], "overcomplet": 417, "overconstrain": 151, "overestim": [128, 363, 416], "overfit": [43, 64, 140, 146, 148, 151, 185, 189, 190, 191, 195, 216, 219, 242, 260, 265, 267, 268, 274, 278, 286, 287, 308, 314, 315, 317, 318, 319, 320, 343, 350, 358, 360, 361, 375, 394, 410, 411, 416, 419, 441, 492, 493, 566, 567, 572, 573, 662, 805, 808, 809, 819, 827, 831, 832, 866, 867, 869, 884, 888, 1001, 1010, 1012, 1014, 1016, 1022, 1027, 1030, 1040], "overflow": [379, 388, 392, 408, 1029, 1040, 1044, 1045, 1046, 1047, 1048, 1050], "overflowerror": 1047, "overhead": [47, 293, 368, 369, 380, 386, 389, 392, 394, 419, 445, 449, 453, 539, 704, 841, 842, 844, 845, 846, 847, 848, 849, 850, 1008, 1009, 1040, 1045, 1046, 1049], "overlai": [388, 637], "overlaid": 1013, "overlap": [2, 51, 52, 72, 88, 118, 149, 169, 238, 260, 355, 409, 412, 416, 419, 420, 592, 797, 798, 806, 807, 810, 812, 813, 814, 815, 822, 823, 825, 1003, 1016, 1043], "overli": [52, 62, 63, 204, 278, 363, 417, 1006], "overlin": [273, 409], "overparameter": 1002, "overrid": [382, 420, 450, 454, 461, 547, 553, 593, 594, 596, 598, 599, 602, 661, 669, 690, 691, 811, 828, 851, 852, 853, 855, 857, 859, 860, 861, 1037, 1045, 1047, 1051, 1053], "overridden": [382, 394, 422, 547, 553, 621, 626, 629, 699, 1045, 1046, 1053], "oversampl": [549, 1037], "oversc": 1052, "overset": [417, 1013], "overst": 188, "oversubscript": [783, 1051], "overview": [107, 185, 278, 289, 292, 381, 383, 393, 394, 501, 739, 748, 805, 821, 832, 837, 838, 839, 917, 1008, 1020, 1027, 1031, 1032], "overwhelm": 380, "overwrit": [151, 450, 501, 636, 1037, 1048, 1053, 1054], "overwrite_": 1037, "overwritten": [446, 537, 538, 539, 541, 546, 553, 612, 613, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 677, 679, 684, 686, 687, 688, 689, 691, 975, 1050], "ovo": [290, 322, 793, 837, 911, 914, 1006, 1007, 1021], "ovo_tpr": 282, "ovo_tre": 290, "ovr": [2, 66, 207, 230, 290, 292, 322, 351, 663, 664, 793, 838, 909, 911, 914, 1006, 1007, 1021, 1037, 1042, 1043, 1045, 1046, 1047, 1051, 1052], "ovr_jaccard_scor": 292, "ovr_tre": 290, "ow": 93, "owen": [654, 1046, 1047], "own": [2, 16, 52, 70, 141, 233, 249, 263, 293, 295, 334, 355, 368, 374, 383, 385, 388, 389, 398, 411, 412, 424, 428, 444, 458, 538, 562, 569, 651, 802, 803, 851, 852, 853, 855, 857, 859, 860, 861, 883, 917, 919, 941, 947, 1002, 1008, 1009, 1012, 1016, 1021, 1025, 1030, 1044, 1045, 1047, 1054], "own_telephon": 267, "owner": [249, 375, 377, 961, 962], "ownership": 382, "oyamada": 1042, "oyindamola": 1052, "oywa": 1047, "ozga": 1045, "ozsvald": 1039, "p": [0, 2, 50, 53, 61, 63, 64, 76, 94, 111, 112, 115, 119, 128, 147, 166, 170, 175, 193, 227, 232, 233, 235, 237, 246, 273, 279, 280, 306, 374, 375, 377, 378, 385, 388, 409, 410, 411, 412, 414, 415, 417, 419, 421, 422, 423, 425, 446, 448, 450, 451, 454, 459, 460, 461, 473, 475, 478, 479, 482, 503, 533, 539, 543, 545, 546, 552, 554, 555, 556, 558, 560, 561, 562, 563, 564, 566, 569, 570, 571, 595, 597, 598, 599, 600, 601, 603, 604, 605, 609, 610, 611, 612, 613, 614, 620, 621, 632, 645, 648, 693, 695, 697, 699, 704, 710, 720, 729, 746, 757, 791, 793, 807, 813, 814, 815, 818, 834, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 865, 869, 870, 885, 897, 903, 919, 920, 921, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1020, 1021, 1037, 1038, 1040, 1043, 1045, 1052, 1053, 1054], "p0": 63, "p1": [63, 158], "p1d": 63, "p2": [63, 158, 233], "p3": 158, "p4": 158, "p5": 953, "p592": 139, "p_": [166, 1006, 1009, 1022], "p_c": [119, 528], "p_e": 721, "p_grid": 278, "p_i": [1006, 1009], "p_k": [280, 1006], "p_n": [280, 712, 1006], "p_o": 721, "p_val": 273, "p_val_uncorrect": 273, "p_valu": [609, 610, 611], "p_w": 119, "p_w_c": [119, 528], "pa": [671, 672, 906, 1002, 1006, 1019], "pab": [1052, 1053], "pablo": [1047, 1050, 1051], "pabloduque0": 1050, "pace": 375, "pacha": 1045, "pacif": 273, "pack": [389, 1045], "packag": [0, 80, 86, 183, 249, 293, 368, 373, 374, 377, 378, 380, 381, 382, 384, 388, 389, 392, 394, 398, 399, 406, 414, 419, 420, 456, 482, 651, 652, 996, 1002, 1005, 1009, 1016, 1022, 1030, 1037, 1043, 1045, 1046, 1047], "packet": 367, "packg": 398, "pacman": 398, "paczuski": [1045, 1046], "pad": [121, 144, 183, 189, 235, 252, 354, 359, 420, 593, 594, 596], "page": [0, 51, 55, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 170, 177, 188, 189, 190, 197, 235, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 367, 375, 377, 380, 382, 384, 386, 388, 395, 412, 414, 477, 521, 522, 523, 633, 649, 839, 904, 953, 996, 1002, 1006, 1007, 1035, 1037, 1041, 1042], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 953], "pagh": [193, 998], "pai": [0, 188, 233, 267, 380], "paid": 1002, "pain": 392, "paint": [921, 923], "pair": [2, 49, 52, 72, 79, 91, 97, 126, 137, 139, 144, 148, 163, 176, 180, 196, 199, 207, 224, 227, 233, 246, 268, 273, 280, 282, 337, 339, 341, 343, 344, 345, 347, 355, 359, 375, 392, 394, 409, 410, 413, 416, 420, 422, 441, 444, 445, 449, 454, 461, 467, 475, 476, 482, 498, 513, 514, 587, 597, 600, 601, 603, 604, 605, 615, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 637, 638, 648, 650, 697, 704, 705, 710, 711, 712, 720, 736, 745, 763, 764, 768, 771, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 791, 837, 849, 850, 924, 1006, 1007, 1008, 1009, 1016, 1022, 1037, 1049, 1050, 1052, 1053, 1054], "pair_confusion_matrix": [2, 412, 1049], "pair_list": 282, "pair_scor": 282, "paired_cosine_dist": [2, 408, 1056], "paired_dist": [2, 768, 774, 783, 1041], "paired_euclidean_dist": [2, 408, 1056], "paired_manhattan_dist": 2, "pairidx": 359, "pairplot": [187, 188], "pairwis": [2, 37, 97, 187, 188, 246, 252, 282, 322, 326, 327, 354, 367, 372, 394, 408, 412, 417, 422, 450, 458, 462, 465, 466, 472, 491, 513, 514, 540, 566, 567, 625, 643, 644, 645, 646, 647, 648, 693, 695, 697, 699, 701, 704, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 793, 797, 798, 837, 853, 857, 861, 875, 907, 926, 998, 1006, 1009, 1018, 1021, 1032, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1052, 1053, 1054, 1055, 1056], "pairwise_bayesian": 273, "pairwise_bayesian_df": 273, "pairwise_comp_df": 273, "pairwise_dist": [2, 75, 330, 394, 412, 423, 448, 450, 454, 461, 693, 701, 767, 776, 784, 785, 797, 798, 853, 855, 857, 861, 1004, 1037, 1041, 1043, 1045, 1046, 1048, 1049, 1054, 1055, 1056], "pairwise_dist_chunk_s": [472, 907], "pairwise_distance_funct": [697, 701, 783, 786, 1009], "pairwise_distances_argmin": [2, 97, 326, 785, 1045, 1051, 1052, 1053, 1054], "pairwise_distances_argmin_min": [2, 326, 784, 1040, 1045, 1051, 1052, 1053, 1054], "pairwise_distances_chunk": [2, 367, 783, 1045, 1048, 1054], "pairwise_indices_": 837, "pairwise_kernel": [2, 394, 422, 456, 466, 648, 770, 875, 1004, 1037, 1044, 1054], "pairwise_kernel_funct": [625, 648, 779], "pairwise_kernels_kwarg": 625, "pairwise_t_test": 273, "pairwisedistancesreduct": 368, "pairwisekernel": [2, 422], "paislei": [417, 541], "pakdd": 412, "pal": [1045, 1051], "palacio": 1050, "palafox": 1037, "palett": [188, 273], "palevioletr": [229, 299, 342], "palioura": [844, 1008], "paliw": 1045, "palladium": 1030, "palmol": 51, "pami": [377, 412, 730], "pamnani": 1045, "pan": 400, "panchal": 1049, "pancholi": 1044, "panda": [2, 43, 51, 62, 102, 103, 104, 135, 141, 142, 145, 148, 151, 153, 169, 177, 183, 187, 188, 189, 190, 191, 195, 200, 204, 215, 219, 223, 233, 252, 253, 256, 263, 267, 271, 273, 274, 276, 284, 285, 287, 290, 318, 319, 320, 322, 325, 326, 350, 354, 355, 374, 375, 378, 379, 380, 382, 383, 388, 394, 398, 405, 413, 436, 446, 447, 449, 451, 453, 468, 470, 472, 486, 487, 488, 489, 493, 494, 495, 497, 501, 505, 506, 507, 509, 510, 515, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 567, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 637, 638, 640, 643, 644, 645, 646, 647, 693, 694, 697, 805, 808, 809, 819, 835, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 907, 931, 995, 996, 1016, 1025, 1026, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "pandata": [1052, 1053], "pandei": [1044, 1049], "panel": [264, 298, 313, 418, 1025], "panga": [1052, 1053], "panico": [1045, 1049], "pankaj": 1049, "pano": 1043, "panpiort8": [1047, 1049], "paolo": [0, 402, 1037, 1041, 1047, 1055], "papadopoulo": [1050, 1051, 1052, 1053, 1054], "papapanagiot": 1044, "paper": [0, 170, 193, 267, 273, 377, 386, 392, 412, 414, 419, 446, 453, 482, 509, 539, 546, 568, 646, 663, 671, 672, 676, 681, 684, 697, 793, 846, 855, 858, 901, 902, 1002, 1006, 1009, 1012, 1021, 1037, 1044, 1045], "paper355": 676, "papier": [669, 690, 691], "par": 1016, "paraboloid": 1002, "paradi": 1052, "paradigm": 1002, "paragraph": [420, 508], "paralel": 1053, "parallel": [2, 53, 134, 139, 141, 142, 144, 185, 189, 190, 191, 217, 274, 323, 324, 326, 348, 362, 366, 372, 378, 380, 381, 383, 384, 392, 394, 413, 421, 423, 424, 441, 448, 450, 452, 453, 454, 456, 461, 462, 465, 468, 471, 476, 500, 536, 538, 539, 540, 542, 544, 546, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 594, 599, 607, 612, 613, 615, 637, 639, 644, 663, 693, 694, 695, 696, 697, 698, 699, 786, 805, 808, 809, 811, 816, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 868, 871, 904, 905, 972, 975, 1026, 1027, 1032, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1056], "parallel_backend": [2, 368, 423, 441, 448, 450, 452, 454, 456, 461, 462, 465, 468, 471, 476, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 855, 857, 859, 860, 862, 863, 868, 871, 904, 905, 1045, 1055], "parallel_batch_queri": 293, "parallel_coordin": 274, "parallel_help": 1047, "parallelbackendbas": 975, "parallelis": [274, 472, 907, 1044], "param": [79, 88, 94, 95, 103, 146, 147, 149, 150, 235, 248, 249, 271, 273, 281, 285, 297, 309, 329, 376, 380, 382, 394, 403, 419, 422, 426, 429, 435, 436, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 817, 819, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 961, 962, 965, 994, 995, 1043, 1047, 1048, 1050, 1051, 1054, 1055, 1056], "param1": 382, "param2": 382, "param3": 382, "param_": 141, "param_c": [284, 805], "param_classifier__c": 103, "param_covariance_typ": 263, "param_degre": 805, "param_dist": [281, 285, 324], "param_distribut": [103, 172, 274, 281, 285, 324, 393, 809, 817, 819, 1053], "param_gamma": [284, 805, 819], "param_grid": [43, 45, 103, 104, 105, 106, 141, 148, 248, 254, 263, 267, 271, 272, 273, 277, 278, 281, 284, 290, 295, 315, 329, 343, 394, 403, 413, 419, 747, 805, 808, 816, 817, 995, 1006], "param_kernel": [805, 819], "param_list": 817, "param_min_samples_split": 277, "param_n_compon": 263, "param_nam": [141, 274, 286, 328, 350, 403, 828, 836, 1001], "param_pca__n_compon": 105, "param_preprocessor__cat__selector__percentil": 103, "param_preprocessor__num__imputer__strategi": 103, "param_rang": [286, 328, 350, 828, 836, 1001, 1053], "param_reduce_dim__n_compon": 272, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 87, 88, 91, 93, 94, 95, 103, 104, 105, 110, 112, 113, 119, 121, 133, 135, 139, 141, 144, 145, 146, 149, 150, 151, 161, 167, 170, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 188, 189, 195, 196, 197, 198, 200, 202, 203, 204, 206, 215, 217, 219, 220, 223, 232, 233, 239, 240, 242, 244, 247, 248, 249, 258, 259, 260, 261, 263, 264, 266, 267, 272, 273, 274, 275, 277, 278, 281, 284, 285, 290, 293, 295, 296, 299, 300, 306, 308, 309, 311, 313, 314, 315, 317, 318, 322, 323, 325, 326, 327, 328, 336, 338, 340, 345, 347, 348, 349, 351, 352, 354, 355, 356, 358, 359, 360, 361, 363, 367, 368, 369, 372, 373, 375, 383, 385, 387, 388, 389, 392, 403, 407, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1022, 1025, 1026, 1027, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "parameter": [358, 422, 619, 620, 627, 628, 802, 803, 1002, 1003, 1011, 1016, 1022], "parameter_grid": 274, "parameter_nam": [572, 573, 574, 575], "parametergrid": [2, 805, 1039, 1045], "parameters_str": 88, "parametersampl": [2, 819, 1039, 1045, 1049], "parametr": [2, 48, 61, 62, 113, 245, 297, 317, 325, 410, 413, 418, 419, 441, 556, 558, 640, 690, 701, 885, 897, 947, 948, 1002, 1005, 1008, 1009, 1016, 1019, 1022, 1045, 1047, 1050], "parametrize_with_check": [2, 322, 382, 928, 947, 1047, 1048, 1056], "params_str": 285, "parcel": [87, 100, 412], "parch": [190, 327], "pardeep": 1049, "parel": 1041, "parent": [47, 187, 249, 362, 380, 384, 394, 412, 446, 467, 962, 963, 1037, 1054], "parent_hourly_wag": 187, "parenthes": 943, "parenthesi": [76, 380], "paresh": [1046, 1047], "pareto": 217, "pargent": 1016, "pari": [0, 377, 413, 470, 769, 877, 1017, 1051], "pariet": [1030, 1037], "parikh": [1046, 1051, 1052, 1053, 1054, 1055], "parimi": 1055, "paris_in_radian": 769, "paristech": 0, "pariti": 1022, "parizi": 1052, "park": [1042, 1047, 1049, 1052, 1053], "parmet": 1054, "parmind": 1044, "parquet": 52, "parra": 1045, "parri": [1042, 1043, 1044], "parrot": 354, "pars": [47, 55, 367, 374, 375, 381, 513], "parse_vers": [149, 191, 322, 675], "parser": [47, 151, 267, 287, 322, 326, 501, 1052, 1053], "parsifalxu": 1055, "parsimoni": [417, 1016], "parsing_tim": 47, "parson": [1048, 1050], "part": [0, 44, 45, 67, 71, 84, 94, 103, 113, 121, 124, 138, 141, 144, 148, 154, 161, 162, 163, 167, 177, 185, 195, 249, 251, 261, 267, 268, 270, 288, 308, 315, 318, 320, 356, 369, 375, 377, 380, 382, 386, 388, 393, 394, 398, 400, 408, 410, 411, 412, 416, 417, 419, 420, 422, 450, 453, 498, 499, 500, 526, 536, 542, 547, 579, 589, 590, 591, 618, 630, 798, 874, 892, 894, 895, 896, 897, 898, 899, 900, 995, 996, 998, 1003, 1007, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1037, 1045, 1046, 1048, 1050, 1052, 1056], "part3": 416, "part_of_speech": 420, "partev": [1051, 1052, 1053, 1054], "parthiv": 1049, "parti": [233, 290, 328, 368, 379, 382, 392, 406, 807, 814, 1037, 1048, 1053, 1054, 1056], "partial": [2, 43, 47, 51, 83, 114, 115, 153, 185, 186, 233, 241, 324, 327, 377, 380, 394, 397, 414, 415, 417, 419, 422, 468, 486, 487, 488, 489, 501, 506, 539, 541, 546, 567, 594, 637, 638, 662, 793, 835, 837, 838, 865, 866, 867, 870, 882, 883, 886, 889, 918, 1003, 1010, 1020, 1027, 1032, 1034, 1038, 1045, 1046, 1050, 1054], "partial_correl": 51, "partial_depend": [2, 189, 637, 1013, 1038, 1046, 1047, 1048, 1049, 1052, 1053], "partial_fit": [47, 83, 121, 326, 369, 382, 394, 412, 417, 446, 453, 539, 541, 542, 543, 594, 602, 663, 664, 671, 672, 673, 681, 682, 683, 837, 838, 841, 842, 844, 845, 846, 847, 848, 865, 866, 867, 878, 879, 889, 909, 994, 1002, 1008, 1010, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052, 1053, 1054], "partial_fit_": 1050, "partial_fit_classifi": 47, "partial_fit_param": [602, 837, 838, 841, 842], "partialdependencedisplai": [2, 151, 153, 189, 253, 323, 324, 325, 327, 329, 387, 638, 1013, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "particip": [379, 380, 395, 1030], "particl": 1011, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 93, 103, 109, 119, 126, 129, 145, 148, 151, 152, 176, 183, 188, 189, 215, 217, 223, 247, 267, 270, 274, 276, 282, 293, 302, 306, 313, 322, 323, 326, 355, 356, 363, 367, 368, 374, 375, 378, 379, 380, 382, 384, 385, 386, 388, 389, 393, 394, 398, 412, 413, 416, 417, 419, 420, 421, 422, 450, 473, 477, 501, 549, 568, 614, 658, 663, 668, 677, 679, 689, 692, 717, 733, 790, 841, 934, 936, 996, 998, 1000, 1002, 1006, 1009, 1010, 1011, 1012, 1014, 1016, 1026, 1030, 1037, 1040, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1054], "particularli": [58, 67, 102, 103, 106, 130, 154, 188, 216, 244, 273, 287, 315, 323, 330, 352, 363, 367, 380, 382, 389, 394, 412, 413, 415, 418, 420, 501, 811, 828, 846, 953, 974, 1002, 1003, 1006, 1008, 1014, 1026, 1030, 1037, 1042, 1044, 1045, 1051], "partit": [80, 99, 102, 152, 154, 273, 310, 394, 409, 410, 412, 416, 419, 453, 455, 457, 466, 516, 562, 563, 564, 565, 568, 569, 570, 709, 710, 720, 791, 857, 917, 918, 919, 920, 1005, 1009, 1012, 1016, 1022], "partli": [80, 406, 774], "partnership": 1030, "parvu": 377, "pasbi": [1044, 1045], "pascal": 1006, "pascual": 1040, "paskov": 1044, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 141, 151, 153, 167, 197, 200, 216, 243, 245, 246, 249, 252, 253, 255, 263, 267, 271, 274, 320, 322, 325, 330, 348, 356, 363, 367, 368, 369, 375, 380, 381, 382, 385, 386, 387, 388, 389, 392, 394, 403, 406, 408, 411, 412, 413, 416, 417, 419, 420, 422, 423, 424, 429, 430, 434, 435, 441, 442, 444, 446, 447, 448, 450, 451, 452, 453, 454, 456, 458, 461, 463, 464, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 495, 497, 500, 501, 502, 508, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 593, 594, 595, 596, 598, 599, 602, 607, 612, 613, 615, 616, 622, 625, 631, 636, 637, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 716, 737, 738, 747, 768, 779, 783, 784, 785, 786, 793, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 880, 881, 882, 883, 884, 886, 888, 889, 890, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 929, 934, 935, 936, 943, 947, 948, 952, 953, 955, 957, 960, 962, 965, 966, 975, 976, 979, 989, 994, 995, 996, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1019, 1020, 1021, 1026, 1030, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "passiv": [2, 47, 222, 671, 672, 1028, 1032, 1038], "passiveaggress": [369, 420], "passiveaggressiveclassifi": [2, 47, 222, 367, 369, 1002, 1007, 1038, 1041, 1042, 1044, 1045, 1048, 1050, 1055], "passiveaggressiveregressor": [2, 369, 1002, 1038, 1041, 1044, 1045, 1048, 1050, 1055], "passo": [0, 402, 1037, 1038], "passthrough": [43, 104, 145, 188, 189, 215, 233, 252, 319, 327, 413, 468, 471, 572, 573, 868, 869, 1016, 1046, 1048, 1051, 1052, 1054], "passthrough_numer": [215, 233], "passthroughpassthrough": [189, 319], "past": [50, 52, 384, 385, 388, 392, 395, 416, 417, 419, 543, 560, 561, 683, 1030, 1053], "pat": [633, 996], "patch": [2, 70, 83, 252, 258, 259, 260, 263, 264, 268, 375, 392, 417, 419, 560, 561, 588, 589, 592, 1037, 1045], "patch_height": [588, 589, 592], "patch_siz": [83, 124, 420, 588, 589, 592], "patch_width": [588, 589, 592], "patchextractor": [2, 420, 1053], "patel": [1045, 1047, 1048, 1049, 1051], "path": [2, 47, 55, 185, 194, 200, 201, 204, 206, 209, 219, 231, 286, 350, 358, 374, 378, 380, 384, 388, 389, 394, 406, 445, 449, 454, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 513, 514, 553, 562, 563, 568, 569, 570, 571, 598, 599, 602, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 686, 687, 688, 689, 690, 691, 693, 869, 870, 916, 917, 918, 919, 920, 959, 995, 1002, 1003, 1012, 1026, 1027, 1037, 1038, 1041, 1043, 1044, 1046, 1047, 1049, 1050, 1052, 1053], "path_length": 959, "path_method": [693, 1003], "pathak": [1052, 1053], "patheffect": 75, "pathlib": [47, 1052, 1053], "pathlik": [501, 1053], "patholog": [85, 1005, 1043], "pathwai": 381, "pati": 1039, "patienc": [388, 394], "patient": [46, 159, 170, 184, 377, 388, 411, 416, 1002], "patil": [1051, 1054], "paton": 1050, "patric": [1049, 1050], "patricio": 1051, "patrick": [1044, 1045, 1050, 1051, 1054, 1055], "patrini": [1042, 1043, 1044], "pattaniyil": 1047, "pattern": [43, 52, 58, 96, 113, 115, 118, 120, 128, 172, 183, 185, 189, 200, 219, 249, 252, 325, 347, 354, 355, 356, 363, 377, 380, 382, 395, 409, 412, 413, 417, 419, 420, 452, 468, 470, 509, 537, 539, 546, 560, 561, 643, 713, 730, 746, 774, 793, 794, 802, 889, 998, 1000, 1002, 1006, 1007, 1013, 1021, 1023, 1026, 1027, 1030, 1049], "patterson": [499, 1042], "paul": [375, 1040, 1043, 1044, 1045, 1046, 1050, 1051], "paula": [1047, 1048, 1055], "pauli": 1042, "paulo": [1044, 1050, 1052], "paus": 80, "pava": 640, "pavel": [1038, 1046], "pavlo": [1045, 1046], "pavlyk": [1045, 1046, 1047, 1048], "pawel": 1046, "pawe\u0142": [1040, 1044, 1049, 1050], "payn": 1047, "pazzani": 64, "pb_q": [325, 1002], "pbl": 148, "pc": [57, 336, 356, 375], "pca": [2, 11, 42, 45, 68, 69, 84, 101, 102, 104, 106, 107, 116, 120, 123, 130, 131, 162, 185, 212, 236, 238, 245, 247, 250, 254, 272, 281, 284, 293, 297, 302, 311, 325, 363, 372, 382, 394, 408, 412, 413, 418, 428, 477, 480, 488, 501, 507, 509, 519, 537, 538, 539, 540, 544, 545, 548, 549, 554, 648, 663, 693, 695, 697, 701, 805, 831, 835, 858, 865, 868, 869, 871, 879, 887, 889, 998, 1000, 1003, 1009, 1016, 1020, 1022, 1027, 1031, 1032, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1048, 1050, 1051, 1052, 1054, 1055], "pca0": 428, "pca1": [413, 428], "pca2": [413, 428], "pca_2": 116, "pca__n_compon": 105, "pca_back_proj_ax": 126, "pca_estim": 121, "pca_proj_ax": 126, "pca_scor": 128, "pcapca": [104, 254], "pcd": [865, 1011], "pchelintsev": 1049, "pclass": [103, 190, 256, 322, 326, 327], "pcolor": 173, "pcolormesh": [70, 154, 163, 199, 296, 301, 339, 343, 347, 636], "pcr": [116, 415], "pd": [43, 51, 62, 103, 104, 135, 141, 142, 148, 153, 169, 183, 187, 188, 189, 190, 191, 195, 200, 204, 215, 219, 223, 233, 253, 256, 263, 271, 273, 274, 276, 284, 285, 287, 290, 318, 319, 320, 325, 326, 350, 354, 355, 385, 394, 413, 468, 470, 632, 633, 634, 635, 637, 783, 933, 935, 936, 995, 996, 1013, 1016, 1048, 1050, 1051, 1052, 1054], "pd2000": 1006, "pd_": 1013, "pd_line_kw": 637, "pd_result": 637, "pdb": 388, "pdbcl": 388, "pdf": [170, 273, 298, 313, 377, 380, 412, 421, 446, 453, 536, 539, 542, 546, 646, 649, 654, 663, 669, 671, 672, 676, 681, 684, 687, 688, 690, 691, 697, 846, 858, 865, 902, 904, 1002, 1019, 1022, 1029, 1033, 1037], "pdist": [697, 783, 786], "pdp": [2, 637, 1013, 1051], "pdp_lim": 637, "pdp_line_kw": 637, "pe": 588, "pe_tran": 588, "peai": 1046, "peak": [43, 52, 64, 189, 410, 416, 1051], "pear": 1007, "pearson": [2, 611, 614, 1050], "pearu": 1037, "pedersen": [1041, 1053], "pedigo": [1049, 1050], "pedregosa": [0, 402, 1037, 1038, 1039, 1040, 1041, 1043], "pedro": [1038, 1040, 1041, 1045], "peek": [189, 380, 1013], "peer": 1030, "peev": [1045, 1048], "pegaso": 1020, "pei": [412, 1044], "peixinho": 1051, "pelennor": 1051, "penal": [2, 53, 66, 113, 156, 200, 204, 208, 215, 219, 231, 233, 286, 318, 350, 412, 414, 417, 419, 421, 473, 474, 475, 476, 477, 478, 479, 480, 482, 566, 567, 652, 657, 658, 666, 668, 681, 710, 720, 739, 791, 800, 882, 909, 910, 916, 1002, 1006, 1008, 1010, 1020, 1021], "penalis": [213, 230, 701], "penalti": [2, 25, 46, 49, 66, 113, 185, 194, 195, 200, 203, 204, 208, 215, 219, 222, 230, 231, 244, 281, 286, 308, 325, 336, 348, 354, 367, 388, 392, 414, 417, 421, 475, 476, 477, 478, 479, 480, 482, 507, 536, 542, 543, 544, 545, 547, 548, 552, 553, 602, 648, 651, 652, 653, 654, 657, 658, 659, 662, 663, 664, 665, 666, 667, 673, 674, 675, 677, 681, 683, 685, 686, 692, 819, 889, 909, 910, 912, 914, 915, 916, 995, 1002, 1005, 1010, 1016, 1020, 1021, 1027, 1039, 1042, 1044, 1046, 1047, 1049, 1050, 1052, 1053], "peng": [684, 1002, 1043, 1044, 1045, 1047, 1049], "peopl": [2, 45, 102, 188, 251, 276, 354, 355, 368, 369, 375, 377, 379, 380, 384, 395, 418, 498, 499, 646, 846, 1025], "pep": [51, 388, 1037], "pep073": 381, "pep257": 394, "pep440": 384, "pep8": [382, 384, 388], "pepsi": 51, "per": [43, 49, 58, 70, 86, 97, 140, 141, 145, 177, 179, 188, 189, 215, 230, 233, 252, 256, 259, 267, 269, 280, 282, 313, 319, 324, 329, 330, 350, 354, 356, 367, 375, 376, 380, 385, 386, 389, 392, 394, 410, 412, 416, 417, 418, 419, 420, 422, 450, 452, 454, 461, 465, 468, 472, 491, 501, 505, 507, 508, 509, 513, 515, 517, 520, 528, 537, 539, 540, 541, 544, 546, 548, 554, 555, 566, 567, 574, 588, 593, 596, 615, 616, 637, 638, 646, 647, 663, 664, 671, 672, 673, 676, 678, 679, 680, 681, 683, 697, 701, 718, 721, 725, 727, 746, 759, 763, 764, 786, 788, 802, 803, 830, 837, 838, 839, 841, 842, 845, 847, 865, 868, 874, 876, 878, 879, 882, 883, 889, 890, 907, 909, 910, 911, 912, 913, 914, 915, 940, 941, 953, 980, 995, 998, 1002, 1005, 1006, 1007, 1010, 1013, 1020, 1021, 1022, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1053, 1054], "perc": 268, "percal": 386, "percent": [135, 497, 605, 1019], "percent10": [252, 497], "percentag": [2, 52, 87, 129, 145, 206, 233, 268, 276, 279, 416, 421, 539, 546, 549, 554, 598, 599, 653, 674, 685, 708, 739, 751, 823, 824, 825, 839, 921, 923, 1007, 1022, 1039, 1043, 1049, 1050], "percentil": [2, 49, 52, 103, 148, 151, 252, 256, 313, 367, 597, 600, 601, 603, 604, 605, 608, 611, 637, 638, 753, 1016, 1042, 1050], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 268, "percept": [165, 189, 1013], "perceptron": [2, 47, 67, 144, 154, 163, 174, 176, 185, 222, 225, 231, 253, 307, 315, 316, 337, 348, 369, 392, 420, 519, 520, 527, 671, 681, 835, 865, 866, 867, 870, 889, 1004, 1007, 1011, 1020, 1027, 1028, 1032, 1041, 1043, 1044, 1045, 1049], "percol": 74, "perdisci": [412, 446], "perdok": 1052, "pere": 1054, "peredachi": [612, 613], "pereira": [1042, 1045, 1046, 1056], "peretti": 1052, "perez": [1045, 1052], "perf_count": 252, "perfect": [58, 63, 72, 102, 112, 124, 126, 211, 215, 354, 355, 380, 412, 416, 558, 559, 695, 699, 709, 710, 713, 722, 731, 733, 736, 742, 748, 761, 762, 790, 791, 800, 1002, 1006, 1009, 1021, 1030, 1051], "perfectli": [63, 64, 72, 276, 288, 347, 397, 412, 419, 442, 572, 611, 709, 710, 720, 722, 741, 742, 762, 791, 800, 882, 1001, 1003, 1006, 1021, 1050, 1051], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 82, 86, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 106, 109, 116, 124, 130, 133, 135, 141, 143, 145, 146, 147, 149, 150, 151, 155, 156, 161, 165, 168, 169, 170, 173, 181, 183, 184, 185, 188, 189, 190, 191, 193, 200, 204, 215, 217, 219, 221, 222, 223, 232, 233, 236, 237, 239, 242, 247, 250, 252, 259, 260, 263, 265, 267, 268, 269, 270, 271, 273, 274, 275, 278, 279, 281, 282, 284, 286, 287, 290, 292, 293, 306, 311, 313, 315, 317, 319, 320, 322, 328, 329, 331, 333, 334, 343, 346, 347, 350, 354, 356, 363, 366, 368, 369, 375, 377, 382, 383, 384, 386, 388, 389, 392, 393, 394, 397, 403, 406, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 430, 434, 444, 446, 447, 448, 450, 451, 452, 454, 456, 458, 459, 463, 465, 472, 473, 486, 487, 488, 489, 499, 507, 517, 520, 536, 537, 538, 540, 542, 547, 548, 549, 550, 551, 553, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 599, 606, 607, 608, 615, 616, 632, 635, 636, 643, 645, 650, 656, 659, 660, 661, 663, 669, 670, 671, 672, 673, 675, 678, 680, 681, 682, 683, 687, 688, 690, 692, 694, 695, 698, 699, 702, 708, 709, 710, 712, 713, 717, 718, 731, 734, 735, 743, 745, 747, 760, 761, 762, 783, 788, 789, 791, 792, 793, 799, 800, 801, 802, 803, 805, 808, 809, 816, 817, 819, 823, 830, 831, 832, 834, 835, 838, 841, 842, 844, 845, 846, 847, 848, 849, 850, 856, 858, 864, 865, 866, 867, 869, 870, 872, 875, 876, 878, 879, 881, 882, 883, 885, 886, 889, 890, 892, 894, 895, 896, 898, 899, 900, 904, 905, 907, 911, 912, 913, 914, 915, 917, 918, 919, 920, 935, 936, 978, 989, 994, 995, 996, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "performancetip": 386, "perhap": [102, 144, 377, 379, 388, 394, 418, 1026], "perimet": [170, 377], "period": [2, 52, 151, 172, 177, 181, 384, 394, 395, 410, 422, 620, 826, 888, 1045, 1050, 1052], "periodic_spline_transform": 43, "periodicity_bound": [172, 177, 181, 620], "peripheri": 412, "perla": 1040, "perm_scores_iri": 279, "perm_scores_rand": 279, "perm_sorted_idx": 191, "permalink": 384, "perman": 388, "permiss": [379, 384, 395, 398, 399, 1030, 1052], "permit": [413, 471, 593, 594, 596, 805, 808, 809, 819, 831, 870, 871, 1006, 1007, 1008, 1043], "permut": [2, 58, 59, 72, 112, 115, 143, 149, 163, 165, 185, 186, 231, 265, 273, 320, 335, 397, 407, 412, 419, 468, 501, 505, 509, 564, 565, 569, 570, 632, 635, 639, 684, 709, 710, 722, 741, 742, 760, 762, 800, 822, 824, 834, 835, 869, 883, 914, 917, 918, 953, 974, 976, 979, 1006, 1020, 1027, 1032, 1037, 1043, 1050, 1052], "permutation_import": [2, 142, 143, 149, 190, 191, 322, 419, 558, 559, 562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920, 1014, 1047, 1049, 1050, 1054], "permutation_scor": 834, "permutation_test_scor": [2, 279, 403, 416, 1037, 1044, 1049, 1056], "permuted_categori": 320, "perp_tol": 541, "perpendicular": [70, 348], "perperogl": 1016, "perplex": [185, 234, 235, 237, 239, 293, 519, 530, 541, 697, 1003, 1027, 1042, 1044, 1051], "perri": 1047, "perrin": 1043, "perrot": [0, 1037], "persian": 1025, "persist": [388, 392, 417, 450, 615, 616, 865, 1011, 1025, 1032, 1043, 1046], "persola": 1045, "person": [45, 188, 267, 276, 375, 379, 416, 420, 498, 499, 500, 1016, 1045], "personal_statu": 267, "perspect": [88, 93, 215, 287, 367, 375, 392, 395, 535, 648, 909, 999], "pertin": 215, "perturb": [188, 232, 311, 417, 419, 1005], "peru": [50, 306, 375, 503], "pervas": [363, 380], "pessimist": [147, 419], "pessoa": 1050, "pestrickland": 1043, "pet": [325, 329, 793, 1006], "pet_cat": 325, "pet_dog": 325, "pet_fish": 325, "petal": [118, 129, 131, 144, 256, 324, 327, 377, 413, 922, 1022], "petal_col": 327, "petar": 1052, "pete": [1044, 1048, 1049], "peter": [0, 96, 402, 412, 452, 454, 461, 654, 797, 798, 1002, 1006, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1054], "peterlongo": 1054, "peterson": [1037, 1039], "petfood": 1030, "petrov": [1044, 1045, 1053], "petrushev": 1046, "pe\u00f1a": 1041, "pfaffel": 1050, "pfahring": [840, 1007], "pfe": 51, "pfister": 1016, "pfizer": 51, "pft": 216, "pg": [51, 386, 654, 1002, 1042], "pg_i": 654, "pgithub": 1049, "ph": 1049, "pham": [193, 998, 1044], "phan": 417, "pharmaceut": 377, "phase": [43, 200, 209, 367, 632, 998, 1003, 1009, 1030, 1045, 1047], "phase_nois": 75, "phd": [0, 412, 419, 1026, 1030], "phenol": 377, "phenomena": 177, "phenomenon": [355, 1016], "phi": [75, 417, 419, 748, 875, 998, 1006, 1016, 1021], "phi_coeffici": 1006, "phil": [1042, 1053], "philipp": [1039, 1040, 1043, 1052], "phillip": [2, 50, 306, 375, 503], "phlypo": 1040, "phongpanagnam": 1050, "phongpanangam": 1050, "photogrammetr": 1002, "php": 1006, "phrase": 420, "phy": [612, 613], "phyo": 1051, "physic": [2, 102, 141, 368, 510, 970, 1002, 1053], "physician": 411, "physiolog": [276, 377], "pi": [43, 53, 70, 74, 75, 122, 130, 153, 155, 165, 172, 196, 200, 202, 209, 216, 237, 258, 259, 260, 263, 264, 288, 306, 323, 329, 361, 398, 418, 422, 521, 522, 523, 620, 647, 1000, 1001, 1002, 1008], "pianomania": 1042, "pick": [88, 93, 191, 250, 281, 326, 332, 375, 380, 384, 412, 419, 447, 464, 528, 678, 919, 920, 995, 1002, 1003, 1005, 1020, 1048], "pickl": [384, 394, 420, 594, 849, 850, 1025, 1026, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054], "pickleabl": [873, 1043], "pickup": 1045, "pico": [1040, 1041], "pict": [839, 1007], "pictur": [51, 55, 59, 71, 86, 99, 124, 185, 246, 264, 375, 395, 412, 417, 420, 466, 498, 499, 526, 1026, 1027], "piec": [70, 81, 216, 368, 1005], "piecewis": [130, 325, 409, 997, 1002, 1016, 1022], "pierr": [1037, 1045, 1046, 1048, 1050, 1052, 1054, 1055], "pierreablin": 1045, "pierreattard": [1050, 1051], "pierretallott": [1045, 1046, 1047], "pierron": 1040, "piet": [1051, 1052], "pieter": [55, 1043, 1044, 1051], "pietro": [1037, 1040, 1054], "pietruh": 1045, "pig": 788, "pillow": [380, 398, 405], "pim": 1046, "pin": [386, 406], "pinaki": 1045, "pinbal": [2, 52, 148, 151, 325, 419, 567, 675, 728, 753, 1002, 1050, 1051], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [902, 1018, 1043, 1044], "pink": 196, "pinki": 1051, "pinot": 319, "pinto": 1037, "pintor": 1048, "pinvh": [1044, 1046], "piontek": 1053, "piotr": [1045, 1046, 1055], "pip": [293, 322, 323, 324, 325, 326, 327, 328, 329, 330, 368, 378, 380, 384, 386, 388, 398, 406, 408, 1022], "pip3": [378, 398], "pipe": [104, 105, 145, 168, 249, 254, 272, 319, 324, 325, 393, 403, 413, 420, 595, 869, 894, 895, 897, 898, 899, 900, 995, 1016], "pipe_sgd": 229, "pipegraph": 392, "pipelin": [2, 7, 43, 67, 87, 91, 103, 106, 107, 116, 140, 141, 145, 162, 164, 166, 168, 169, 170, 183, 184, 189, 190, 193, 195, 202, 204, 215, 216, 221, 229, 233, 236, 241, 242, 243, 245, 247, 252, 253, 256, 265, 267, 270, 272, 273, 280, 281, 284, 287, 288, 293, 295, 296, 301, 302, 308, 311, 315, 318, 320, 322, 323, 324, 325, 326, 327, 328, 336, 354, 355, 363, 367, 372, 374, 375, 380, 383, 394, 403, 406, 416, 420, 422, 426, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 492, 507, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 612, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 702, 703, 705, 706, 707, 718, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 819, 823, 827, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 996, 998, 1002, 1009, 1010, 1015, 1016, 1020, 1021, 1025, 1026, 1027, 1028, 1030, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1054], "pipelineifittedpipelin": [103, 140, 167, 188, 190, 243, 253, 256, 280, 326], "pipelineinot": [156, 244, 254, 274, 287, 319, 323], "pipelinepipelin": [103, 104, 254, 267], "pita": 1054, "pitfal": [170, 185, 186, 187, 190, 211, 219, 220, 273, 324, 393, 394, 397, 416, 469, 471, 501, 658, 677, 678, 706, 758, 820, 832, 835, 870, 882, 889, 1002, 1027, 1032], "pitkin": [189, 1013], "pitt": 57, "pitter": 1052, "pivot": [80, 284, 285], "pivot_t": 284, "pixel": [2, 44, 45, 53, 58, 68, 81, 86, 121, 134, 142, 168, 185, 190, 191, 193, 246, 271, 310, 311, 377, 412, 417, 419, 420, 421, 498, 499, 500, 569, 590, 591, 612, 613, 639, 1009, 1011, 1022, 1027], "pixelwis": 121, "pixi": 406, "piyg": 315, "pkdd": 0, "pkg": 378, "pkgsrc": 398, "pkl": 406, "pl": [2, 52, 105, 116, 177, 329, 377, 415, 486, 487, 488, 489, 1042], "place": [2, 43, 93, 243, 253, 297, 367, 380, 381, 382, 385, 387, 395, 410, 420, 422, 445, 446, 449, 450, 486, 487, 488, 520, 586, 595, 633, 635, 636, 773, 786, 802, 892, 894, 895, 896, 897, 898, 899, 900, 984, 985, 1025, 1037, 1044, 1047, 1048, 1050, 1054, 1055, 1056], "placehold": [57, 384, 632, 633, 634, 635, 820, 821, 824, 825, 994, 996], "plagre": 1044, "plai": [122, 149, 174, 199, 224, 266, 304, 339, 340, 367], "plain": [345, 422, 662, 1020], "plan": [51, 374, 378, 380, 381, 395, 406, 1016, 1040], "planar": 412, "plane": [51, 170, 227, 247, 299, 345, 347, 348, 352, 377, 456, 466, 1000, 1002, 1021], "plant": [279, 282, 283, 373, 1006, 1032], "plasma": 313, "plasma_r": 313, "plateau": [141, 146, 169, 267, 271, 275], "platform": [383, 394, 395, 1025, 1029, 1030, 1042, 1045, 1046, 1048, 1050, 1051, 1054, 1055], "platt": [410, 441, 911, 912, 914, 915, 1021], "platypu": 354, "pldtc325": 1044, "pleas": [0, 2, 51, 55, 63, 103, 104, 140, 142, 143, 149, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 219, 243, 244, 245, 247, 249, 252, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 293, 303, 311, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 347, 362, 368, 374, 375, 378, 380, 381, 382, 384, 388, 392, 393, 394, 398, 403, 406, 408, 412, 419, 420, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 832, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 1006, 1010, 1016, 1020, 1021, 1025, 1026, 1029, 1037, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "pleasant": [379, 1030], "plenti": 62, "plgreenliru": 1048, "plo": [374, 612, 613], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 87, 88, 89, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 116, 117, 121, 124, 125, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 142, 146, 147, 148, 150, 151, 153, 154, 155, 163, 165, 166, 168, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 190, 191, 193, 194, 198, 199, 202, 203, 204, 205, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 227, 228, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 245, 246, 248, 250, 251, 256, 258, 259, 260, 262, 264, 265, 266, 267, 268, 273, 274, 276, 278, 279, 283, 284, 285, 286, 287, 288, 290, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 323, 326, 327, 328, 329, 333, 334, 335, 337, 338, 339, 343, 344, 345, 348, 349, 350, 351, 352, 355, 356, 357, 358, 360, 361, 362, 380, 383, 389, 392, 397, 398, 407, 410, 412, 414, 416, 418, 419, 442, 445, 450, 454, 460, 468, 475, 501, 506, 507, 509, 517, 528, 558, 562, 565, 567, 569, 570, 574, 575, 615, 627, 636, 637, 638, 662, 663, 677, 681, 702, 703, 705, 706, 707, 708, 723, 732, 740, 766, 787, 789, 792, 793, 794, 805, 811, 822, 828, 830, 831, 832, 833, 836, 838, 847, 851, 867, 870, 882, 883, 884, 886, 889, 909, 911, 914, 917, 918, 923, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1020, 1021, 1022, 1025, 1026, 1027, 1032, 1038, 1040, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "plot_": [325, 398], "plot_2d": [119, 235], "plot_3d": 235, "plot_accuraci": 47, "plot_adaboost_multiclass": [135, 1027], "plot_adaboost_regress": [136, 1027], "plot_adaboost_twoclass": [137, 1027], "plot_adjusted_for_chance_measur": [72, 1027], "plot_affinity_propag": [73, 444, 458, 1027], "plot_agglomerative_clust": [74, 1027], "plot_agglomerative_clustering_metr": [75, 1027], "plot_agglomerative_dendrogram": [76, 1027], "plot_all_sc": [313, 1027], "plot_anomaly_comparison": [242, 1027], "plot_ard": [195, 649, 1027], "plot_arg": 309, "plot_bayesian_ridge_curvefit": [196, 1027], "plot_benchmark_throughput": 49, "plot_bias_vari": [138, 1027], "plot_bicluster_newsgroup": [57, 1027], "plot_birch_vs_minibatchkmean": [77, 1027], "plot_bisect_kmean": [78, 1027], "plot_caching_nearest_neighbor": [295, 1027], "plot_calibr": [61, 380, 1027], "plot_calibration_curv": [62, 1027], "plot_calibration_multiclass": [63, 1027], "plot_causal_interpret": [187, 1027], "plot_chance_level": [252, 267, 280, 282, 283, 705, 707, 1053], "plot_classif": [296, 1027], "plot_classification_prob": [66, 1027], "plot_classifier_chain_yeast": [292, 1027], "plot_classifier_comparison": [67, 1027], "plot_clust": 85, "plot_cluster_comparison": [79, 1027], "plot_coin_segment": [80, 1027], "plot_coin_ward_segment": [81, 1027], "plot_color": [137, 359], "plot_column_transform": [102, 1027], "plot_column_transformer_mixed_typ": [103, 1027], "plot_compare_calibr": [64, 1027], "plot_compare_cross_decomposit": [115, 1027], "plot_compare_gpr_krr": [172, 1027], "plot_compare_method": [235, 1027], "plot_compare_reduct": [104, 1027], "plot_concentration_prior": [258, 1027], "plot_confusion_matrix": [266, 322, 1027, 1047, 1048, 1049, 1050], "plot_cost_complexity_prun": [358, 1027], "plot_cost_sensitive_learn": [267, 1027], "plot_covariance_estim": [109, 1027], "plot_custom_kernel": [339, 1027], "plot_cv_diabet": [161, 1027], "plot_cv_indic": [268, 1027], "plot_cv_predict": [269, 1027], "plot_cyclical_feature_engin": [43, 1027], "plot_dbscan": [82, 423, 448, 1027], "plot_decision_funct": 352, "plot_dendrogram": 76, "plot_det": [270, 1027], "plot_det_curv": [1049, 1050], "plot_dict_face_patch": [83, 1027], "plot_digit": 44, "plot_digits_agglomer": [84, 1027], "plot_digits_classif": [68, 1027], "plot_digits_classification_exercis": [162, 1027], "plot_digits_denois": [44, 1027], "plot_digits_kde_sampl": [297, 1027], "plot_digits_linkag": [85, 1027], "plot_digits_pip": [105, 1027], "plot_discret": [314, 1027], "plot_discretization_classif": [315, 1027], "plot_discretization_strategi": [316, 1027], "plot_display_object_visu": [243, 1027], "plot_distribut": 313, "plot_document_classification_20newsgroup": [354, 1027], "plot_document_clust": [355, 1027], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [197, 1027], "plot_ellips": [70, 258], "plot_embed": 236, "plot_ensemble_oob": [139, 1027], "plot_estimator_represent": [244, 1027], "plot_f_test_vs_mi": [165, 1027], "plot_face_compress": [86, 1027], "plot_face_recognit": [45, 1027], "plot_faces_decomposit": [121, 1027], "plot_feature_agglomeration_vs_univariate_select": [87, 1027], "plot_feature_effect": 354, "plot_feature_select": [166, 1027], "plot_feature_selection_pipelin": [167, 1027], "plot_feature_transform": [140, 1027], "plot_feature_union": [106, 1027], "plot_fig": 212, "plot_forest_hist_grad_boosting_comparison": [141, 1027], "plot_forest_import": [142, 1027], "plot_forest_importances_fac": [143, 1027], "plot_forest_iri": [144, 1027], "plot_galleri": [45, 121], "plot_gmm": [259, 1027], "plot_gmm_covari": [260, 1027], "plot_gmm_init": [261, 1027], "plot_gmm_pdf": [262, 1027], "plot_gmm_select": [263, 1027], "plot_gmm_sin": [264, 1027], "plot_gpc": [173, 1027], "plot_gpc_iri": [174, 1027], "plot_gpc_isoprob": [175, 1027], "plot_gpc_xor": [176, 1027], "plot_gpr_co2": [177, 1027], "plot_gpr_noisi": [178, 1027], "plot_gpr_noisy_target": [179, 1027], "plot_gpr_on_structured_data": [180, 1027], "plot_gpr_prior_posterior": [181, 1027], "plot_gpr_sampl": 181, "plot_gradient_boosting_categor": [145, 1027], "plot_gradient_boosting_early_stop": [146, 1027], "plot_gradient_boosting_oob": [147, 1027], "plot_gradient_boosting_quantil": [148, 1027], "plot_gradient_boosting_regress": [149, 1027], "plot_gradient_boosting_regular": [150, 1027], "plot_grid_search_digit": [271, 1027], "plot_grid_search_refit_cal": [272, 1027], "plot_grid_search_stat": [273, 1027], "plot_grid_search_text_feature_extract": [274, 1027], "plot_hashing_vs_dict_vector": [356, 1027], "plot_hdbscan": [88, 1027], "plot_hgbt_regress": [151, 1027], "plot_huber_vs_ridg": [198, 1027], "plot_hyperplan": [207, 224, 250], "plot_ica_blind_source_separ": [122, 1027], "plot_ica_vs_pca": [123, 1027], "plot_idx": 144, "plot_image_denois": [124, 1027], "plot_incremental_pca": [125, 1027], "plot_indic": 276, "plot_inductive_clust": [89, 1027], "plot_influ": 46, "plot_info": 145, "plot_iris_dataset": [118, 1027], "plot_iris_dtc": [359, 1027], "plot_iris_exercis": [163, 1027], "plot_iris_logist": [199, 1027], "plot_iris_svc": [340, 1027], "plot_isolation_forest": [152, 1027], "plot_isotonic_regress": [245, 1027], "plot_iterative_imputer_variants_comparison": [183, 1027], "plot_johnson_lindenstrauss_bound": [246, 1027], "plot_kde_1d": [298, 1027], "plot_kernel_approxim": [247, 1027], "plot_kernel_pca": [126, 1027], "plot_kernel_ridge_regress": [248, 1027], "plot_kind": 43, "plot_kmeans_assumpt": [90, 1027], "plot_kmeans_digit": [91, 1027], "plot_kmeans_plusplu": [92, 1027], "plot_kmeans_silhouette_analysi": [93, 1027], "plot_kmeans_stability_low_dim_dens": [94, 1027], "plot_label_propagation_digit": [332, 1027], "plot_label_propagation_digits_active_learn": [333, 1027], "plot_label_propagation_structur": [334, 1027], "plot_lasso_and_elasticnet": [200, 1027], "plot_lasso_dense_vs_sparse_data": [201, 1027], "plot_lasso_lars_": [202, 1027], "plot_lasso_lasso_lars_elasticnet_path": [203, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 1027], "plot_lasso_model_select": [204, 652, 658, 1027], "plot_lda": [69, 1027], "plot_lda_qda": [70, 1027], "plot_learning_curv": [275, 1027], "plot_likelihood_ratio": [276, 1027], "plot_linear_model_coefficient_interpret": [188, 1027], "plot_linearsvc_support_vector": [341, 1027], "plot_linkage_comparison": [95, 1027], "plot_lle_digit": [236, 1027], "plot_lof_novelty_detect": [299, 1027], "plot_lof_outlier_detect": [300, 1027], "plot_logist": [205, 1027], "plot_logistic_l1_l2_spars": [206, 1027], "plot_logistic_multinomi": [207, 1027], "plot_logistic_path": [208, 1027], "plot_lw_vs_oa": [110, 1027], "plot_mahalanobis_dist": [111, 1027], "plot_manifold_spher": [237, 1027], "plot_map_data_to_norm": [317, 1027], "plot_md": [238, 1027], "plot_mean_shift": [96, 1027], "plot_metadata_rout": [249, 1027], "plot_method": [48, 70, 199, 229, 296, 301, 339, 341, 342, 344, 345, 347, 636], "plot_mini_batch_kmean": [97, 1027], "plot_missing_valu": [184, 1027], "plot_mlp_alpha": [308, 1027], "plot_mlp_training_curv": [309, 1027], "plot_mnist_filt": [310, 1027], "plot_model_complexity_influ": [46, 1027], "plot_monotonic_constraint": [153, 1027], "plot_multi_metric_evalu": [277, 1027], "plot_multi_task_lasso_support": [209, 1027], "plot_multiclass_overview": [290, 1027], "plot_multilabel": [250, 1027], "plot_multioutput_face_complet": [251, 1027], "plot_n_features_influ": 49, "plot_nca_classif": [301, 1027], "plot_nca_dim_reduct": [302, 1027], "plot_nca_illustr": [303, 1027], "plot_nearest_centroid": [304, 1027], "plot_nested_cross_validation_iri": [278, 1027], "plot_nnl": [210, 1027], "plot_num": [79, 95, 242], "plot_obs_pr": 233, "plot_ol": [211, 1027], "plot_ols_3d": [212, 1027], "plot_ols_ridge_vari": [213, 1027], "plot_omp": [214, 1027], "plot_on_dataset": 309, "plot_oneclass": [342, 1027], "plot_opt": [98, 1027], "plot_out_of_core_classif": [47, 1027], "plot_outlier_detection_bench": [252, 1027], "plot_outlier_detection_win": [48, 1027], "plot_partial_depend": [189, 322, 323, 324, 1027, 1042, 1046, 1047, 1048, 1049, 1050, 1051], "plot_partial_dependence_visualization_api": [253, 1027], "plot_pca_iri": [127, 1027], "plot_pca_vs_fa_model_select": [128, 1027], "plot_pca_vs_lda": [129, 1027], "plot_pcr_vs_pl": [116, 1027], "plot_permutation_import": [190, 191, 1027], "plot_permutation_importance_multicollinear": [191, 1027], "plot_permutation_tests_for_classif": [279, 1027], "plot_pipeline_displai": [254, 1027], "plot_poisson_regression_non_normal_loss": [215, 1027], "plot_polynomial_interpol": [216, 884, 888, 1027], "plot_precision_recal": [280, 1027], "plot_precision_recall_curv": [322, 1047, 1049, 1050], "plot_prediction_lat": [49, 1027], "plot_quantile_regress": [217, 1027], "plot_random_forest_embed": [154, 1027], "plot_random_forest_regression_multioutput": [155, 1027], "plot_random_multilabel_dataset": [119, 1027], "plot_randomized_search": [281, 1027], "plot_rang": 137, "plot_ransac": [218, 1027], "plot_rbf_paramet": [343, 1027], "plot_rbm_logistic_classif": [311, 1027], "plot_regress": [305, 1027], "plot_release_highlights_0_22_0": [322, 1027], "plot_release_highlights_0_23_0": [323, 1027], "plot_release_highlights_0_24_0": [324, 1027], "plot_release_highlights_1_0_0": [325, 1027], "plot_release_highlights_1_1_0": [326, 1027], "plot_release_highlights_1_2_0": [327, 1027], "plot_release_highlights_1_3_0": [328, 1027], "plot_release_highlights_1_4_0": [329, 1027], "plot_release_highlights_1_5_0": [330, 1027], "plot_result": [70, 145, 258, 259, 264], "plot_rfe_digit": [168, 1027], "plot_rfe_with_cross_valid": [169, 1027], "plot_ridge_coeff": [219, 1027], "plot_ridge_path": [220, 1027], "plot_robust_fit": [221, 1027], "plot_robust_vs_empirical_covari": [112, 1027], "plot_roc": [282, 1027], "plot_roc_crossv": [283, 1027], "plot_roc_curv": [322, 1047, 1049], "plot_roc_curve_visualization_api": [255, 1027], "plot_roc_pr_curv": 267, "plot_sampl": [123, 264], "plot_scalable_poly_kernel": [193, 1027], "plot_scaling_import": [318, 1027], "plot_scatt": 89, "plot_segmentation_toi": [99, 1027], "plot_select_from_model_diabet": [170, 1027], "plot_self_training_varying_threshold": [335, 1027], "plot_semi_supervised_newsgroup": [336, 1027], "plot_semi_supervised_versus_svm_iri": [337, 1027], "plot_separating_hyperplan": [344, 1027], "plot_separating_hyperplane_unbalanc": [345, 1027], "plot_set_output": [256, 1027], "plot_sgd_comparison": [222, 1027], "plot_sgd_early_stop": [223, 1027], "plot_sgd_iri": [224, 1027], "plot_sgd_loss_funct": [225, 1027], "plot_sgd_penalti": [226, 1027], "plot_sgd_separating_hyperplan": [227, 1027], "plot_sgd_weighted_sampl": [228, 1027], "plot_sgdocsvm_vs_ocsvm": [229, 1027], "plot_sparse_cod": [130, 1027], "plot_sparse_cov": [113, 1027], "plot_sparse_logistic_regression_20newsgroup": [230, 1027], "plot_sparse_logistic_regression_mnist": [231, 1027], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1027], "plot_species_kd": [306, 1027], "plot_spectral_biclust": [58, 1027], "plot_spectral_coclust": [59, 1027], "plot_stack_predictor": [156, 1027], "plot_step": [137, 144, 359], "plot_step_coars": 144, "plot_stock_market": [51, 1027], "plot_subfigur": 250, "plot_successive_halving_heatmap": [284, 1027], "plot_successive_halving_iter": [285, 1027], "plot_surfac": [189, 212], "plot_svm_anova": [346, 1027], "plot_svm_kernel": [347, 1027], "plot_svm_margin": [348, 1027], "plot_svm_regress": [349, 1027], "plot_svm_scale_c": [350, 1027], "plot_svm_tie_break": [351, 1027], "plot_swissrol": [239, 1027], "plot_t_sne_perplex": [240, 1027], "plot_target_encod": [319, 1027], "plot_target_encoder_cross_v": [320, 1027], "plot_theilsen": [232, 1027], "plot_time_series_lagged_featur": [52, 1027], "plot_titl": 258, "plot_tomography_l1_reconstruct": [53, 1027], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1027], "plot_train_error_vs_test_error": [286, 1027], "plot_training_data_with_decision_boundari": 347, "plot_transformed_target": [107, 1027], "plot_tre": [2, 359, 362, 1022, 1046, 1048, 1049, 1050, 1052, 1053, 1055], "plot_tree_regress": [360, 1027], "plot_tree_regression_multioutput": [361, 1027], "plot_tuned_decision_threshold": [287, 1027], "plot_tweedie_regression_insurance_claim": [233, 1027], "plot_underfitting_overfit": [288, 1027], "plot_unveil_tree_structur": [362, 1027], "plot_varimax_fa": [131, 1027], "plot_voting_decision_region": [157, 1027], "plot_voting_proba": [158, 1027], "plot_voting_regressor": [159, 1027], "plot_ward_structured_vs_unstructur": [100, 1027], "plot_weighted_sampl": [352, 1027], "plotli": [141, 274, 380, 398, 405], "pls1": [415, 488], "pls2": [415, 488], "plsca": [115, 487], "plscanon": [2, 115, 486, 488, 489, 1007, 1028, 1032, 1041, 1045, 1047, 1049, 1051, 1055], "plsregress": [2, 115, 116, 1007, 1028, 1032, 1044, 1047, 1049, 1051, 1053, 1055, 1056], "plssvd": [2, 486, 487, 1028, 1032, 1049, 1051, 1055], "plsw2a": 415, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 191, 193, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 329, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 376, 387, 442, 507, 636, 637, 702, 703, 705, 706, 707, 811, 828, 923, 1013, 1034], "plu": [280, 377, 385, 684, 840, 843, 1007, 1020], "plug": [417, 1002, 1030], "plugin": 398, "plural": 1043, "pm": [181, 189, 283, 419, 1006], "pmlr": 701, "pmml": 1025, "png": [0, 68, 921], "pnucci": 1053, "po": [149, 238, 420], "podshumok": [1043, 1044], "poesio": 721, "poetri": 406, "poh": [1045, 1046], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 82, 85, 88, 91, 93, 97, 100, 111, 112, 115, 118, 119, 120, 122, 124, 126, 135, 137, 141, 144, 145, 146, 151, 154, 169, 170, 174, 179, 180, 185, 188, 189, 190, 195, 199, 204, 207, 209, 211, 213, 215, 216, 217, 219, 221, 224, 227, 228, 232, 233, 235, 236, 237, 238, 239, 242, 245, 247, 260, 264, 265, 266, 270, 274, 275, 276, 280, 282, 283, 290, 292, 293, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 314, 315, 317, 319, 330, 332, 333, 335, 337, 339, 343, 344, 345, 347, 348, 351, 352, 354, 355, 356, 359, 363, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 388, 392, 394, 395, 408, 411, 412, 417, 418, 419, 420, 423, 424, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 464, 465, 473, 476, 478, 501, 503, 509, 517, 519, 520, 524, 527, 530, 535, 538, 540, 546, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 615, 616, 633, 636, 637, 638, 642, 643, 644, 649, 650, 656, 660, 662, 663, 675, 676, 678, 680, 681, 683, 684, 687, 688, 693, 694, 695, 696, 697, 698, 699, 706, 711, 712, 715, 718, 722, 728, 730, 736, 741, 742, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 769, 784, 785, 795, 796, 802, 803, 805, 819, 821, 827, 830, 832, 839, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 866, 867, 870, 874, 879, 888, 889, 903, 904, 905, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 933, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1018, 1019, 1021, 1022, 1025, 1026, 1027, 1032, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "pointer": [380, 388, 446, 1046], "pointplot": 151, "points_color": 235, "pointwis": [138, 179, 423, 448], "poisson": [2, 43, 52, 185, 194, 250, 376, 419, 468, 469, 501, 528, 557, 563, 567, 570, 653, 674, 677, 685, 711, 729, 750, 754, 755, 757, 835, 869, 870, 873, 874, 882, 883, 884, 889, 918, 920, 957, 1002, 1022, 1027, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "poisson_gbrt": 215, "poisson_glm": 215, "poissonregressor": [2, 215, 233, 323, 326, 653, 685, 1002, 1048, 1051, 1052, 1056], "pokorni": 1052, "pola": 52, "polar": [105, 177, 380, 398, 405, 436, 446, 447, 449, 451, 453, 468, 472, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 566, 567, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 693, 694, 697, 853, 858, 861, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 907, 1054, 1055], "pole": 237, "poli": [43, 163, 193, 273, 340, 347, 349, 456, 540, 625, 770, 779, 805, 884, 911, 912, 913, 914, 915, 1002, 1016], "polici": [151, 187, 188, 215, 233, 267, 383, 394, 540, 546, 1002, 1052], "policyhold": [215, 233, 1002], "polit": [57, 354, 375, 379, 1002, 1007], "pollak": 1055, "polli": 354, "pollut": [354, 733, 790, 1006, 1012], "polmauri": 1044, "poloso": 1051, "polycollect": [811, 828], "polynomi": [2, 54, 183, 185, 192, 194, 215, 221, 247, 254, 273, 288, 298, 324, 325, 340, 349, 372, 376, 456, 495, 625, 644, 645, 646, 648, 650, 677, 770, 779, 780, 835, 870, 879, 881, 884, 888, 909, 911, 912, 913, 914, 915, 1001, 1021, 1027, 1028, 1032, 1049, 1050], "polynomial_featur": 288, "polynomial_kernel": [2, 408, 770, 1004, 1054, 1056], "polynomialcountsketch": [2, 193, 644, 646, 998, 1049, 1051, 1054], "polynomialfeatur": [2, 43, 195, 215, 216, 221, 254, 288, 324, 347, 888, 1002, 1016, 1041, 1045, 1046, 1047, 1050, 1051, 1053, 1054], "polynomialfeaturespolynomialfeatur": 254, "polysemi": 417, "polytop": 520, "pomegran": 1025, "ponc": [417, 536, 542], "poncho": 1030, "pone": 374, "ponnuthurai": 377, "ponzi": 319, "pooch": [86, 380, 398, 405], "pooja": [1052, 1053, 1054], "pool": [282, 392, 449, 640, 974, 1026, 1048], "pooling_func": [449, 1045], "poolqc": 145, "poolsawat": [1051, 1052], "poor": [189, 193, 279, 335, 410, 416, 417, 695, 699, 743, 846, 849, 850, 1000, 1001, 1003, 1008, 1026, 1044, 1045, 1046, 1048, 1050], "poor_scor": [925, 927], "poorer": [145, 363, 417], "poorest": 1008, "poorli": [62, 64, 95, 109, 116, 138, 150, 239, 368, 412, 419, 533, 635, 1002, 1003, 1043], "poorna": [1047, 1049], "pop": [362, 392, 924, 1045], "popa": [1047, 1048], "popitem": 924, "popo": 1040, "popul": [104, 109, 111, 151, 188, 215, 252, 276, 313, 375, 389, 394, 414, 444, 494, 717, 723, 851, 852, 853, 855, 857, 859, 860, 861, 974, 1006, 1012, 1016, 1022], "popular": [6, 10, 183, 239, 375, 378, 385, 388, 392, 394, 418, 419, 420, 422, 456, 466, 996, 998, 1002, 1004, 1011, 1020, 1026], "port": [378, 398, 1047], "portabl": [406, 1025], "portfolio": [215, 233, 1000], "portion": [45, 47, 112, 146, 170, 282, 367, 375, 377, 380, 386, 394, 793, 830, 847, 995, 1005, 1009], "portland": [412, 423, 448], "portnoi": [1002, 1054], "portrait": [45, 417], "pos_class": 47, "pos_label": [243, 252, 267, 287, 394, 411, 442, 443, 703, 705, 707, 711, 712, 714, 732, 734, 735, 743, 787, 788, 789, 792, 794, 804, 876, 893, 1006, 1045, 1049, 1051, 1055], "pos_lr": 276, "pos_lr_bas": 276, "pos_lr_base_std": 276, "pos_tagg": 420, "pos_vector": 420, "pos_window": 420, "pose": [219, 281, 1002], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 100, 131, 151, 153, 158, 168, 181, 187, 188, 200, 203, 210, 215, 216, 217, 219, 233, 238, 246, 252, 267, 270, 273, 276, 280, 282, 283, 286, 287, 313, 323, 324, 328, 330, 354, 362, 367, 375, 379, 380, 382, 387, 389, 394, 395, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 424, 442, 443, 446, 450, 451, 453, 468, 471, 499, 503, 505, 509, 513, 514, 515, 530, 532, 534, 535, 536, 538, 540, 541, 542, 547, 550, 551, 553, 554, 555, 562, 566, 567, 568, 569, 597, 598, 599, 600, 601, 603, 604, 605, 607, 611, 615, 616, 625, 636, 637, 648, 651, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 674, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 692, 695, 703, 705, 707, 712, 714, 717, 718, 720, 721, 723, 725, 727, 729, 732, 734, 735, 736, 740, 741, 743, 744, 745, 746, 748, 749, 757, 759, 763, 771, 787, 788, 789, 792, 793, 794, 802, 803, 804, 808, 809, 832, 849, 850, 851, 853, 855, 857, 859, 861, 862, 872, 873, 876, 882, 885, 888, 893, 897, 901, 902, 904, 905, 909, 910, 913, 914, 915, 917, 919, 926, 929, 932, 951, 953, 970, 972, 997, 998, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1016, 1021, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "position": 394, "positive_class": [47, 717], "positive_cod": [121, 536, 542, 547, 550, 551], "positive_dict": [121, 536, 542, 550, 551], "positive_featur": 385, "positive_likelihood_ratio": [276, 717], "positive_onli": [926, 929], "posix": [368, 392], "posixpath": 52, "possa": 1044, "possibl": [30, 43, 52, 55, 63, 64, 72, 82, 88, 103, 109, 121, 138, 141, 151, 153, 172, 188, 189, 190, 191, 215, 232, 233, 247, 249, 267, 273, 274, 275, 276, 278, 279, 280, 282, 283, 292, 322, 343, 350, 354, 355, 363, 367, 368, 369, 373, 374, 375, 380, 381, 382, 383, 384, 386, 388, 392, 393, 394, 398, 403, 406, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 426, 435, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 501, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 714, 726, 727, 728, 729, 733, 747, 761, 783, 788, 790, 793, 802, 803, 804, 805, 807, 808, 809, 811, 817, 818, 819, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 933, 935, 936, 939, 945, 976, 979, 995, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1014, 1016, 1021, 1022, 1026, 1030, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053], "possibli": [90, 116, 170, 215, 230, 347, 355, 377, 379, 388, 406, 412, 419, 420, 455, 457, 594, 844, 845, 846, 847, 848, 914, 915, 917, 918, 919, 920, 995, 998, 1003, 1009, 1016, 1052, 1056], "post": [2, 46, 54, 57, 102, 169, 170, 185, 243, 265, 277, 280, 290, 326, 330, 335, 354, 355, 356, 357, 362, 367, 375, 379, 380, 385, 393, 407, 412, 452, 492, 493, 501, 505, 556, 562, 563, 564, 565, 566, 569, 570, 663, 705, 707, 717, 723, 747, 789, 792, 804, 805, 821, 827, 832, 835, 870, 889, 907, 917, 918, 919, 920, 1006, 1022, 1027, 1029, 1030, 1032, 1048], "post1": [378, 398, 404, 405, 1035], "poster": [354, 379, 380], "posterior": [171, 172, 173, 178, 185, 195, 267, 273, 287, 417, 422, 554, 555, 557, 615, 616, 618, 619, 620, 624, 627, 628, 632, 649, 650, 713, 802, 804, 827, 1000, 1025, 1027, 1043, 1046], "posteriori": [1002, 1008], "postfit_hook": 46, "postiv": 280, "postpon": [382, 384], "postprocess": [61, 410, 540, 546], "postprocessor": 1048, "postscript": 921, "potenti": [2, 43, 64, 88, 109, 151, 184, 187, 189, 195, 267, 299, 300, 308, 328, 329, 347, 356, 367, 368, 378, 394, 398, 403, 411, 412, 416, 419, 420, 472, 486, 487, 488, 489, 501, 529, 554, 562, 563, 566, 567, 569, 570, 578, 611, 616, 639, 768, 827, 899, 900, 907, 917, 918, 919, 920, 1012, 1020, 1022, 1025, 1040, 1047, 1048, 1051, 1054, 1055], "poughon": 1044, "poundal": 102, "pour": 1006, "pourbozorg": [1045, 1046, 1047], "pow": [681, 682, 683, 866, 867], "powel": [45, 375], "power": [2, 43, 46, 55, 141, 146, 187, 216, 233, 264, 276, 281, 297, 313, 314, 317, 332, 340, 367, 368, 393, 410, 412, 415, 418, 419, 420, 423, 448, 486, 487, 488, 537, 540, 546, 549, 635, 685, 699, 729, 752, 754, 757, 851, 852, 859, 860, 862, 863, 884, 885, 886, 897, 898, 952, 953, 1002, 1003, 1006, 1014, 1016, 1020, 1021, 1030, 1040, 1043, 1045, 1047, 1048, 1050, 1054], "power_iteration_norm": [408, 546, 549, 952, 953, 1051], "power_t": [681, 682, 683, 866, 867, 1020], "power_transform": [2, 885, 898, 1045], "powers_": 884, "powershel": 378, "powertransform": [2, 317, 886, 897, 996, 1016, 1045, 1048, 1051, 1053, 1056], "pox": 290, "poznik": [1050, 1051, 1052], "pp": [0, 96, 170, 272, 377, 412, 414, 420, 423, 424, 448, 452, 456, 466, 516, 538, 539, 546, 595, 640, 648, 669, 690, 691, 725, 731, 735, 745, 761, 774, 788, 844, 846, 848, 865, 885, 897, 999, 1006, 1008, 1009, 1019], "pp2013": 998, "pp84": 422, "ppc64le": 388, "ppf": 273, "ppm": 177, "pprint": [55, 148, 249, 274, 375, 948], "pq": [52, 327], "pr": [0, 158, 368, 380, 383, 384, 388, 420, 746, 1006, 1029, 1047, 1049], "pr_displai": 243, "pr_number": 388, "prabakaran": [1045, 1046, 1049, 1051, 1052], "prabhakar": 417, "practic": [64, 86, 103, 111, 116, 124, 141, 145, 146, 151, 172, 187, 188, 193, 200, 217, 242, 248, 274, 281, 299, 300, 324, 330, 343, 347, 368, 380, 382, 383, 384, 386, 388, 393, 394, 412, 414, 416, 417, 418, 419, 420, 422, 451, 456, 466, 526, 529, 594, 637, 638, 675, 802, 848, 902, 909, 995, 996, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1025, 1026, 1028, 1030, 1031, 1032, 1039, 1043, 1045, 1047, 1049], "practicalswift": 1043, "practis": 220, "practition": [139, 219], "pradeep": [1045, 1046], "pragmat": 380, "prakash": [1042, 1044, 1050], "pramod": 1051, "pranayanchuri": 1050, "prang": 381, "prasanth": 1052, "pratama": 1048, "pratap": [1041, 1044, 1051], "prathmesh": 1046, "pratik": 1044, "pratiqu": 377, "pravar": 1045, "pravarmahajan": [1044, 1045], "pre": [44, 103, 188, 204, 286, 313, 356, 378, 380, 394, 398, 411, 414, 416, 417, 419, 420, 421, 423, 424, 447, 448, 451, 463, 538, 540, 695, 717, 768, 804, 872, 914, 1006, 1011, 1016, 1021, 1022, 1025, 1026, 1032, 1040, 1045, 1051, 1055, 1056], "pre_dispatch": [805, 811, 819, 828, 830, 831, 832, 833, 836, 971, 1040], "preambl": 88, "prec": [113, 243, 532, 1006], "prec_": 113, "prec_macro": 416, "preced": [368, 380, 384, 491, 1006, 1037], "precipit": 410, "precis": [2, 8, 45, 52, 62, 68, 102, 107, 113, 121, 167, 178, 179, 185, 193, 243, 265, 266, 267, 271, 311, 313, 332, 333, 380, 382, 394, 408, 409, 410, 411, 412, 414, 417, 419, 447, 473, 474, 475, 476, 477, 478, 479, 480, 482, 509, 528, 537, 539, 546, 549, 649, 650, 651, 653, 655, 656, 657, 659, 660, 661, 674, 677, 679, 685, 687, 688, 692, 704, 705, 711, 712, 713, 718, 732, 734, 735, 736, 744, 746, 768, 787, 788, 789, 792, 793, 802, 803, 827, 835, 838, 849, 850, 855, 870, 889, 893, 909, 914, 921, 923, 953, 1000, 1002, 1009, 1010, 1021, 1027, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "precision_": [51, 113, 473, 474, 475, 476, 477, 478, 479, 480], "precision_macro": 416, "precision_recall_curv": [2, 243, 280, 705, 711, 712, 732, 1006, 1038, 1039, 1043, 1050, 1051, 1053, 1055], "precision_recall_fscore_support": [2, 718, 734, 735, 789, 792, 1006, 1041, 1045, 1047, 1053], "precision_scor": [2, 62, 267, 280, 713, 792, 1006, 1037, 1039, 1040, 1041, 1042, 1047, 1053], "precision_threshold": 271, "precisionrecalldisplai": [2, 267, 280, 325, 787, 789, 792, 1006, 1047, 1050, 1053, 1054, 1055], "precisions_": [802, 803], "precisions_cholesky_": [802, 803, 1051], "precisions_init": [803, 1051, 1053], "precompil": 378, "precomput": [120, 121, 122, 185, 194, 214, 238, 249, 293, 295, 382, 389, 392, 394, 412, 420, 423, 435, 444, 445, 448, 449, 450, 454, 456, 461, 469, 475, 486, 487, 488, 529, 536, 540, 542, 545, 546, 547, 553, 559, 561, 563, 565, 567, 570, 573, 575, 615, 616, 625, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 686, 687, 689, 690, 693, 695, 696, 697, 701, 779, 783, 786, 797, 798, 805, 819, 842, 843, 851, 852, 853, 855, 856, 857, 859, 860, 861, 867, 910, 911, 912, 913, 914, 915, 918, 920, 926, 981, 982, 983, 998, 1002, 1004, 1009, 1021, 1026, 1027, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "precompute_dist": [1041, 1048], "precompute_gram": 1039, "precomputed_nearest_neighbor": [456, 696], "precondit": [412, 456, 466, 700, 1022, 1053], "pred": [43, 46, 50, 52, 68, 351, 354, 375, 653, 674, 685, 702, 707, 711, 723, 734, 735, 743, 788, 789, 792, 793, 1006], "pred1": 159, "pred2": 159, "pred3": 159, "pred4": 159, "pred_background": 50, "pred_decis": [740, 1006, 1050], "pred_entropi": [332, 333], "pred_nam": 45, "pred_ort": 406, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [135, 454, 459, 460, 461, 1054], "predecessor_": [454, 461], "predecessor_correct": [454, 460], "predefin": [2, 277, 818, 995, 1009, 1052, 1054], "predefinedsplit": [2, 416, 1041], "predetermin": [412, 1003], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 89, 90, 91, 95, 102, 103, 104, 105, 107, 115, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 188, 189, 190, 191, 193, 195, 198, 199, 200, 207, 210, 211, 212, 213, 216, 217, 218, 219, 221, 222, 223, 224, 229, 230, 232, 233, 242, 243, 245, 247, 249, 251, 259, 260, 261, 262, 263, 264, 265, 266, 271, 273, 275, 276, 279, 282, 283, 287, 288, 290, 292, 296, 299, 300, 301, 304, 305, 311, 313, 314, 318, 319, 322, 323, 324, 325, 326, 328, 329, 330, 333, 335, 336, 337, 339, 340, 342, 343, 347, 349, 350, 351, 354, 355, 359, 360, 361, 362, 363, 366, 368, 372, 375, 377, 380, 382, 387, 389, 394, 397, 403, 406, 407, 408, 410, 412, 413, 415, 417, 419, 420, 421, 426, 429, 434, 435, 441, 442, 443, 444, 446, 447, 448, 451, 452, 453, 469, 473, 486, 487, 488, 491, 506, 513, 529, 539, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 587, 598, 599, 607, 611, 615, 616, 618, 619, 620, 621, 627, 630, 632, 633, 635, 636, 637, 638, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 717, 719, 720, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 743, 746, 747, 748, 751, 753, 755, 757, 761, 787, 788, 789, 790, 791, 792, 793, 794, 798, 799, 801, 802, 803, 804, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 859, 860, 866, 867, 869, 876, 889, 890, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 979, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1030, 1032, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "predict_ecoc": 1041, "predict_joint_log_proba": [844, 845, 846, 847, 848, 1052], "predict_log_proba": [382, 394, 554, 555, 556, 558, 560, 562, 564, 569, 598, 599, 663, 664, 681, 804, 805, 808, 809, 819, 827, 830, 840, 844, 845, 846, 847, 848, 866, 869, 906, 911, 914, 917, 919, 1021, 1037, 1050, 1054, 1056], "predict_ovo": 1041, "predict_ovr": 1041, "predict_param": [249, 469, 572, 573, 598, 599, 1050], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 154, 158, 170, 173, 174, 175, 176, 267, 282, 287, 292, 308, 315, 318, 322, 324, 330, 354, 382, 387, 394, 410, 411, 419, 441, 442, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 598, 599, 615, 624, 625, 627, 628, 636, 637, 638, 663, 664, 681, 703, 705, 707, 727, 746, 747, 793, 802, 803, 804, 805, 808, 809, 819, 827, 830, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 851, 859, 866, 869, 876, 904, 905, 906, 911, 914, 917, 919, 928, 1002, 1006, 1008, 1010, 1013, 1019, 1020, 1021, 1022, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "predict_proba_ovr": 1041, "predicted_label": [332, 333], "prediction_df": 151, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 107, 156, 188, 269, 327, 1006, 1052, 1054], "predictions_kr": 172, "predictive_analyt": 1022, "predictive_word": 354, "predictor": [2, 107, 134, 145, 159, 183, 185, 215, 233, 244, 269, 382, 393, 394, 413, 415, 416, 419, 422, 470, 471, 486, 487, 488, 501, 521, 522, 523, 560, 561, 567, 570, 573, 607, 615, 635, 637, 638, 653, 658, 662, 674, 678, 685, 706, 830, 832, 841, 842, 869, 870, 882, 883, 889, 979, 1002, 1007, 1027, 1038, 1044, 1047], "predispatch": [811, 828, 833, 836], "predit": 116, "predomin": [382, 1038], "prefer": [73, 79, 88, 151, 264, 282, 313, 363, 367, 368, 369, 380, 381, 382, 394, 412, 416, 417, 419, 420, 444, 458, 475, 476, 482, 491, 513, 514, 632, 637, 638, 659, 663, 664, 706, 731, 733, 747, 762, 763, 840, 858, 884, 909, 910, 959, 971, 995, 998, 1000, 1002, 1006, 1011, 1021, 1022, 1025, 1029, 1038, 1044, 1046, 1050, 1051, 1054], "prefetch": 971, "prefit": [63, 267, 394, 410, 411, 421, 441, 572, 573, 602, 804, 827, 1026, 1049, 1050, 1051, 1056], "prefix": [2, 55, 102, 274, 295, 322, 380, 384, 386, 388, 422, 428, 446, 447, 449, 451, 453, 468, 471, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 644, 645, 646, 647, 693, 694, 697, 811, 833, 853, 858, 861, 865, 868, 869, 875, 901, 902, 1043, 1044, 1050, 1052, 1055], "prein": [0, 370, 1049, 1050, 1051], "preiss": 1050, "preliminari": 466, "prematur": 1050, "prepar": [216, 249, 354, 367, 384, 386, 388, 928, 1022, 1030, 1045, 1053], "prepend": [188, 1037], "preprint": 377, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 82, 86, 88, 91, 95, 102, 103, 104, 105, 107, 116, 121, 131, 140, 145, 166, 168, 170, 177, 190, 193, 195, 197, 202, 204, 206, 215, 216, 221, 231, 233, 236, 243, 244, 253, 256, 267, 270, 280, 282, 287, 288, 296, 301, 302, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 336, 343, 346, 355, 369, 372, 374, 377, 380, 385, 393, 394, 406, 408, 409, 412, 413, 416, 419, 420, 421, 468, 469, 470, 471, 493, 572, 586, 587, 593, 594, 596, 635, 663, 664, 677, 679, 681, 683, 692, 838, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 909, 910, 911, 912, 914, 915, 996, 1002, 1007, 1010, 1017, 1020, 1021, 1023, 1025, 1027, 1029, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "preprocessor": [103, 156, 188, 215, 244, 252, 254, 319, 323, 325, 326, 327, 329, 413, 420, 593, 594, 596, 1025, 1037, 1040, 1045, 1047], "preprocessor__cat__selector__percentil": 103, "preprocessor__num__imputer__strategi": 103, "preprocessor_list": 252, "prescrib": 394, "presenc": [2, 48, 93, 95, 111, 112, 133, 187, 191, 200, 219, 252, 313, 378, 381, 394, 414, 417, 717, 731, 761, 774, 838, 872, 880, 882, 889, 989, 996, 1002, 1006, 1007, 1020, 1029, 1040, 1041, 1043, 1047, 1049, 1051], "present": [0, 2, 43, 44, 52, 78, 82, 119, 121, 128, 140, 141, 148, 151, 152, 169, 170, 178, 181, 195, 198, 200, 204, 215, 242, 245, 249, 263, 267, 271, 276, 279, 282, 283, 293, 313, 316, 318, 355, 377, 378, 382, 385, 392, 394, 403, 410, 412, 414, 417, 419, 420, 430, 431, 434, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 493, 494, 495, 496, 497, 501, 505, 506, 507, 508, 509, 510, 515, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 554, 555, 566, 567, 568, 571, 574, 575, 586, 587, 588, 593, 594, 596, 622, 632, 633, 634, 635, 655, 659, 682, 693, 694, 695, 696, 717, 734, 735, 743, 774, 788, 789, 792, 802, 803, 805, 808, 809, 817, 819, 833, 851, 852, 853, 855, 857, 859, 860, 861, 868, 873, 881, 882, 883, 884, 885, 887, 890, 901, 902, 913, 921, 923, 924, 953, 989, 1005, 1006, 1007, 1008, 1013, 1016, 1024, 1026, 1040, 1045, 1047, 1048, 1049, 1051, 1052, 1054, 1056], "preserv": [37, 43, 126, 239, 246, 268, 383, 416, 417, 419, 420, 586, 593, 594, 596, 651, 657, 701, 779, 783, 823, 824, 825, 893, 930, 935, 936, 996, 1002, 1003, 1016, 1018, 1025, 1037, 1040, 1041, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056], "preserves_dtyp": 930, "preservs": 1051, "preset": [671, 673, 681, 1010], "presort": [1042, 1047], "press": [375, 412, 417, 422, 423, 448, 595, 615, 616, 619, 624, 627, 648, 844, 848, 999, 1002, 1004, 1008], "pressur": [170, 377], "preston": [1042, 1043, 1044], "presum": [188, 292, 412, 420, 844], "prettenhof": [0, 402, 1037, 1038, 1039, 1040, 1041, 1042], "pretti": [189, 239, 271, 354, 367, 380, 392, 866, 867, 1010, 1046], "preuss": 1053, "prev_scor": 55, "preval": [135, 322, 394, 705, 717, 1006], "prevalence_pos_label": [280, 705], "prevent": [43, 88, 146, 148, 167, 187, 216, 219, 313, 319, 320, 343, 354, 358, 363, 380, 382, 384, 392, 393, 406, 408, 412, 417, 420, 446, 453, 492, 493, 566, 567, 595, 596, 616, 733, 790, 866, 867, 894, 895, 897, 898, 899, 900, 1006, 1008, 1011, 1012, 1016, 1022, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "previou": [43, 78, 86, 103, 121, 138, 145, 146, 148, 156, 172, 177, 178, 187, 188, 189, 200, 201, 216, 246, 248, 249, 267, 273, 276, 280, 313, 318, 326, 354, 355, 356, 363, 367, 375, 380, 382, 384, 385, 386, 388, 392, 394, 395, 398, 411, 412, 419, 420, 472, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 635, 651, 653, 657, 658, 663, 665, 667, 671, 672, 673, 674, 681, 682, 683, 685, 712, 824, 840, 843, 858, 866, 867, 906, 923, 1002, 1006, 1010, 1016, 1026, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "previous": [46, 86, 90, 103, 135, 178, 188, 267, 271, 280, 287, 326, 375, 388, 392, 398, 412, 417, 420, 444, 447, 458, 529, 539, 546, 654, 663, 664, 671, 672, 673, 681, 682, 683, 909, 1002, 1016, 1025, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "previous_loss": [671, 672, 673, 682], "previs": 243, "price": [51, 107, 145, 146, 151, 156, 252, 319, 996, 1002, 1003, 1030], "priceless": 380, "prieur": 1050, "primal": [663, 664, 682, 909, 910, 1020, 1021], "primari": [394, 417, 520, 926, 1013, 1029, 1030], "primarili": [264, 278, 380, 394, 408, 412, 963, 1030, 1046, 1047], "primat": 354, "primdal": 1045, "primit": 1052, "princ": 1050, "princip": [2, 42, 114, 115, 118, 123, 125, 126, 127, 129, 154, 185, 235, 247, 250, 302, 318, 324, 372, 412, 415, 424, 488, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 555, 662, 693, 694, 695, 697, 698, 835, 858, 870, 889, 952, 953, 1003, 1009, 1027, 1031, 1032, 1037], "principl": [135, 179, 298, 356, 380, 392, 394, 395, 416, 419, 953, 995, 1005, 1009, 1020, 1044], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 96, 100, 102, 103, 105, 106, 107, 111, 115, 116, 119, 121, 124, 128, 129, 131, 135, 138, 141, 142, 143, 144, 145, 147, 149, 151, 161, 162, 166, 167, 169, 170, 172, 173, 175, 177, 181, 187, 189, 190, 191, 193, 200, 201, 203, 206, 207, 210, 211, 215, 217, 218, 219, 222, 223, 230, 231, 233, 236, 237, 240, 244, 246, 248, 249, 252, 256, 261, 266, 267, 271, 272, 273, 274, 276, 278, 281, 282, 286, 293, 297, 304, 306, 309, 310, 311, 315, 318, 320, 322, 323, 324, 326, 328, 329, 330, 332, 333, 336, 343, 354, 355, 356, 358, 362, 363, 367, 374, 375, 378, 381, 382, 388, 394, 403, 406, 413, 416, 419, 420, 422, 468, 471, 472, 476, 482, 494, 499, 507, 517, 518, 546, 549, 554, 555, 564, 565, 566, 567, 569, 570, 574, 575, 582, 588, 589, 590, 592, 593, 594, 596, 617, 622, 623, 635, 651, 652, 654, 655, 657, 658, 659, 661, 665, 666, 667, 668, 671, 672, 681, 682, 689, 701, 718, 722, 742, 800, 802, 803, 804, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 831, 832, 833, 834, 836, 838, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 866, 867, 868, 869, 870, 871, 879, 885, 889, 897, 907, 908, 909, 910, 911, 914, 916, 922, 934, 939, 966, 989, 996, 1006, 1007, 1008, 1009, 1014, 1022, 1037, 1039, 1045, 1046, 1048, 1052, 1056], "print_changed_onli": [472, 907, 1046, 1048, 1049], "print_datafram": 271, "print_progress": 971, "print_rout": 249, "printabl": 1029, "prior": [2, 42, 46, 55, 80, 81, 90, 98, 99, 100, 119, 171, 172, 178, 184, 185, 190, 195, 197, 200, 257, 259, 263, 264, 267, 273, 284, 303, 380, 382, 394, 398, 403, 412, 415, 417, 419, 422, 469, 528, 541, 553, 554, 555, 556, 564, 616, 618, 619, 620, 624, 627, 628, 635, 649, 650, 651, 652, 656, 657, 659, 660, 661, 665, 666, 667, 677, 683, 686, 721, 802, 844, 845, 846, 847, 848, 869, 870, 884, 911, 914, 972, 995, 998, 1000, 1002, 1005, 1006, 1008, 1014, 1022, 1023, 1027, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1053], "prior_k": 554, "priori": [215, 232, 282, 292, 313, 394, 412, 419, 593, 599, 1005, 1053], "priorit": [411, 1026, 1044], "prioriti": [379, 637, 837, 838, 1026, 1040], "priors_": [554, 555], "privaci": 1025, "privat": [0, 382, 384, 394, 395, 931, 1030, 1037, 1045, 1047, 1048, 1050, 1051, 1056], "privileg": [252, 388], "priyam": 1052, "priyank": 1055, "priyansh": 1055, "priyash": 1055, "prng": 113, "pro": [406, 1005], "proanthocyanin": 377, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [442, 443], "prob_tru": [442, 443], "proba": [62, 64, 158, 441, 917, 919], "proba_": [911, 914, 1048], "proba_map": 88, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 113, 120, 121, 130, 131, 171, 172, 175, 178, 179, 185, 248, 267, 354, 394, 410, 418, 419, 441, 477, 480, 537, 539, 540, 546, 564, 593, 594, 615, 627, 648, 650, 681, 708, 746, 805, 831, 876, 911, 912, 914, 915, 999, 1000, 1002, 1005, 1006, 1011, 1016, 1021, 1022, 1025, 1027, 1030, 1037, 1040, 1044], "probabilisticpca": [1037, 1040], "probabilities_": [88, 450], "probabilities_or_label": 574, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 88, 107, 119, 134, 149, 151, 157, 165, 171, 172, 173, 174, 185, 188, 191, 207, 227, 230, 231, 235, 239, 243, 245, 246, 267, 273, 275, 276, 279, 280, 283, 287, 290, 292, 311, 313, 317, 322, 324, 330, 335, 337, 349, 350, 367, 375, 376, 382, 386, 392, 394, 411, 412, 416, 417, 420, 421, 422, 438, 439, 440, 441, 442, 443, 450, 451, 453, 509, 517, 520, 528, 532, 554, 555, 556, 558, 560, 562, 564, 566, 569, 572, 574, 575, 598, 599, 615, 618, 619, 627, 632, 636, 637, 638, 663, 664, 676, 681, 697, 703, 705, 707, 708, 711, 712, 714, 717, 721, 725, 727, 731, 732, 734, 744, 745, 746, 761, 787, 789, 792, 793, 794, 799, 802, 803, 804, 805, 808, 809, 819, 827, 834, 835, 838, 840, 841, 844, 845, 846, 847, 848, 851, 854, 859, 865, 866, 890, 902, 903, 904, 905, 906, 909, 911, 914, 917, 919, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1022, 1026, 1027, 1028, 1032, 1037, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051], "probable_clust": 89, "probas_pr": [787, 1055], "probb_": [911, 914, 1048], "probe": 1014, "probinette4": 1049, "probl": [612, 613], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 87, 88, 90, 99, 121, 135, 138, 141, 143, 148, 149, 172, 185, 190, 193, 195, 200, 201, 204, 208, 209, 215, 217, 219, 232, 233, 237, 242, 243, 250, 252, 255, 271, 273, 278, 282, 283, 287, 288, 290, 292, 293, 298, 305, 317, 325, 329, 330, 340, 343, 347, 350, 351, 354, 355, 362, 363, 367, 375, 376, 377, 378, 379, 381, 382, 385, 386, 388, 389, 392, 394, 400, 410, 411, 412, 414, 416, 418, 419, 420, 421, 422, 423, 424, 448, 451, 453, 454, 456, 461, 466, 469, 482, 508, 513, 514, 520, 521, 522, 523, 528, 529, 533, 536, 538, 542, 544, 547, 548, 549, 550, 551, 552, 553, 556, 557, 562, 566, 569, 572, 576, 578, 594, 615, 636, 648, 653, 655, 657, 659, 660, 661, 662, 663, 664, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 690, 691, 692, 693, 694, 696, 698, 700, 713, 721, 724, 734, 735, 740, 743, 744, 788, 789, 792, 793, 802, 803, 806, 807, 808, 809, 810, 812, 813, 814, 815, 820, 821, 822, 823, 824, 825, 829, 837, 838, 839, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 875, 876, 882, 890, 893, 899, 900, 909, 910, 917, 919, 941, 953, 996, 997, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1020, 1023, 1026, 1028, 1030, 1031, 1032, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "problemat": [43, 188, 267, 269, 413, 996, 1045], "proc": [64, 110, 410, 420, 454, 694, 698, 844, 995, 1003, 1008, 1012], "proce": [83, 167, 197, 378, 384, 415, 416, 419, 444, 882, 1002], "procedur": [25, 80, 89, 141, 148, 170, 196, 202, 263, 275, 316, 320, 343, 354, 363, 380, 392, 393, 394, 395, 410, 414, 416, 417, 419, 421, 536, 542, 543, 545, 550, 551, 552, 558, 559, 560, 561, 564, 565, 598, 600, 607, 614, 649, 677, 679, 692, 733, 790, 866, 867, 886, 898, 926, 976, 995, 1002, 1008, 1016, 1019, 1020, 1021, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "proceed": [111, 170, 375, 377, 412, 423, 443, 448, 516, 701, 713, 731, 761, 856, 906, 1006, 1018, 1019, 1020], "process": [0, 2, 19, 37, 43, 44, 57, 63, 66, 67, 70, 80, 81, 83, 99, 102, 104, 106, 110, 112, 122, 123, 125, 135, 144, 146, 148, 153, 154, 163, 187, 195, 198, 217, 219, 225, 226, 227, 228, 248, 249, 250, 252, 258, 259, 262, 264, 267, 273, 275, 276, 285, 290, 308, 313, 316, 324, 328, 333, 337, 347, 348, 352, 355, 356, 358, 367, 368, 369, 375, 379, 380, 382, 384, 386, 389, 392, 393, 394, 406, 412, 413, 414, 416, 417, 418, 419, 420, 421, 425, 452, 453, 479, 501, 509, 528, 539, 540, 541, 542, 543, 566, 567, 568, 593, 594, 596, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 637, 638, 644, 648, 669, 677, 690, 691, 708, 728, 746, 786, 802, 804, 805, 808, 809, 819, 827, 830, 831, 832, 841, 842, 858, 872, 876, 878, 879, 880, 889, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 971, 995, 998, 1002, 1006, 1009, 1016, 1018, 1020, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1056], "process_rout": [2, 249, 1054], "processor": [103, 156, 188, 423, 441, 448, 450, 452, 454, 456, 461, 462, 465, 468, 471, 476, 536, 540, 541, 542, 544, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 637, 639, 644, 652, 656, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 851, 852, 855, 857, 859, 860, 862, 863, 868, 871, 904, 905], "procter": 51, "prod": [355, 626], "prod_": 1008, "prod_i": 998, "proding": 1053, "produc": [52, 53, 62, 63, 79, 90, 102, 124, 148, 149, 150, 152, 200, 279, 311, 335, 363, 368, 375, 376, 380, 382, 385, 394, 395, 412, 413, 416, 417, 419, 444, 447, 450, 456, 524, 541, 564, 568, 586, 593, 598, 599, 637, 638, 807, 808, 809, 817, 822, 825, 830, 874, 884, 911, 914, 997, 998, 1002, 1004, 1005, 1006, 1009, 1012, 1013, 1017, 1019, 1020, 1021, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "product": [2, 58, 103, 121, 157, 172, 177, 189, 347, 363, 367, 382, 383, 386, 389, 409, 417, 419, 455, 543, 545, 552, 587, 594, 595, 596, 618, 619, 638, 645, 669, 670, 690, 691, 766, 768, 780, 782, 881, 884, 901, 902, 954, 995, 998, 1002, 1004, 1016, 1018, 1020, 1021, 1025, 1030, 1032, 1045], "production": 1030, "prof": 386, "profession": 188, "professor": 1030, "profil": [215, 367, 380, 383, 526, 529, 1002, 1030], "profile_default": 386, "profit": [0, 267, 330, 1054], "prog": [170, 377], "prognosi": [170, 377], "program": [0, 83, 170, 355, 363, 368, 369, 377, 378, 380, 382, 386, 392, 513, 640, 675, 899, 900, 1002, 1021, 1022, 1025, 1026, 1029, 1037, 1039], "programmat": [382, 504, 1046], "progress": [43, 46, 47, 121, 159, 170, 184, 208, 298, 326, 377, 384, 385, 395, 403, 408, 412, 564, 565, 697, 838, 840, 843, 858, 866, 867, 1030, 1037, 1039, 1046, 1051], "prohibit": [187, 252, 416, 419, 632, 1011, 1019, 1044], "proj": [53, 654], "proj_gradi": 386, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 91, 100, 118, 120, 121, 123, 125, 127, 131, 176, 178, 180, 181, 185, 189, 212, 235, 236, 237, 239, 241, 243, 247, 250, 259, 297, 302, 306, 311, 340, 355, 367, 372, 374, 378, 379, 380, 385, 386, 389, 394, 395, 398, 409, 415, 417, 418, 424, 444, 450, 455, 456, 466, 478, 486, 487, 488, 489, 493, 507, 509, 536, 538, 539, 540, 542, 544, 546, 547, 548, 549, 553, 554, 578, 587, 594, 646, 647, 654, 677, 679, 693, 696, 700, 701, 839, 858, 886, 901, 902, 903, 952, 953, 1000, 1002, 1003, 1004, 1007, 1009, 1010, 1012, 1019, 1022, 1027, 1030, 1032, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "projected_data": 246, "projected_dist": 246, "projectedgradientnmf": 1042, "prokopi": [1042, 1045], "prolifer": 382, "prolin": [57, 318, 377], "promin": [124, 394], "promis": [394, 1026], "promot": [188, 446, 713, 1025, 1048, 1050, 1054], "prompt": [378, 380, 384, 398, 405, 420], "prone": [64, 215, 260, 317, 392, 410], "pronounc": [74, 75, 85, 177], "proof": [392, 419, 903, 1018], "prop": [105, 112, 221, 260, 299, 342, 362], "propag": [2, 58, 68, 71, 72, 82, 88, 96, 97, 168, 185, 331, 375, 444, 458, 507, 517, 519, 702, 709, 710, 718, 719, 722, 723, 742, 798, 800, 869, 883, 904, 905, 906, 971, 972, 1010, 1027, 1028, 1031, 1032, 1037, 1049, 1052], "proper": [64, 88, 204, 233, 267, 369, 382, 386, 410, 419, 453, 546, 558, 681, 953, 980, 1001, 1002, 1003, 1006, 1021, 1037, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "properli": [43, 52, 62, 88, 153, 177, 268, 286, 322, 369, 378, 380, 384, 388, 418, 909, 910, 911, 912, 913, 914, 915, 995, 1040, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "properti": [51, 62, 179, 180, 217, 232, 259, 295, 318, 362, 367, 373, 380, 382, 398, 409, 410, 412, 414, 417, 419, 421, 422, 427, 446, 449, 455, 456, 457, 468, 469, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 596, 598, 599, 602, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 637, 651, 657, 660, 665, 667, 679, 680, 704, 709, 710, 713, 804, 805, 808, 809, 819, 827, 837, 838, 868, 869, 882, 883, 884, 890, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1016, 1019, 1021, 1022, 1023, 1026, 1042, 1046, 1047, 1050, 1051, 1054, 1055], "property_magnitud": 267, "propon": 102, "proport": [54, 63, 75, 151, 169, 201, 215, 222, 228, 242, 252, 267, 276, 280, 296, 300, 303, 350, 352, 362, 367, 375, 410, 412, 414, 416, 417, 419, 420, 442, 443, 450, 473, 478, 520, 554, 555, 560, 562, 564, 565, 566, 567, 568, 569, 588, 589, 593, 596, 632, 637, 663, 664, 671, 672, 673, 679, 680, 681, 683, 701, 706, 717, 727, 806, 807, 808, 809, 822, 825, 835, 855, 866, 867, 883, 909, 910, 911, 914, 915, 917, 919, 921, 923, 941, 995, 1005, 1006, 1009, 1012, 1020, 1021, 1022, 1042, 1054], "propos": [90, 109, 110, 293, 375, 380, 382, 392, 394, 412, 414, 419, 424, 454, 540, 612, 613, 681, 682, 683, 866, 867, 1002, 1005, 1009, 1020, 1044], "proprietari": 1022, "propto": [418, 1008], "prorokovi\u0107": 1055, "protect": [381, 384, 971], "protein": 374, "protocol": [406, 1006, 1025, 1040, 1053, 1054], "protocol_typ": 252, "prototyp": 1030, "prove": [122, 1030], "proven": [273, 1000, 1004, 1030], "provenc": 319, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 88, 93, 112, 121, 142, 143, 151, 154, 156, 172, 178, 188, 189, 195, 201, 202, 204, 216, 219, 236, 240, 243, 244, 249, 263, 267, 273, 274, 275, 279, 303, 306, 310, 313, 317, 322, 323, 325, 327, 341, 347, 350, 354, 355, 358, 362, 363, 367, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 392, 393, 394, 397, 398, 403, 406, 408, 409, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 424, 426, 433, 441, 444, 446, 447, 448, 450, 451, 453, 454, 456, 463, 464, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 496, 498, 499, 501, 503, 506, 537, 538, 539, 540, 543, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 598, 599, 606, 610, 615, 616, 632, 637, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 695, 699, 704, 716, 727, 740, 746, 747, 769, 779, 783, 793, 797, 799, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 821, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 866, 867, 869, 872, 874, 875, 876, 879, 880, 881, 884, 886, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 925, 927, 941, 947, 958, 962, 964, 981, 982, 983, 994, 995, 996, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "provinc": 319, "provost": [793, 1006], "proxi": [187, 188, 417, 865, 1042], "prun": 386, "prune": [185, 357, 362, 421, 505, 562, 563, 564, 565, 569, 570, 598, 649, 835, 917, 918, 919, 920, 1009, 1027, 1028, 1032, 1037, 1040, 1047, 1048], "przybocki": 1006, "ps_lsvm_score": 193, "ps_lsvm_time": 193, "pseudo": [216, 311, 382, 416, 424, 444, 456, 458, 466, 473, 474, 475, 477, 478, 479, 480, 538, 566, 567, 568, 632, 639, 644, 646, 647, 651, 652, 657, 658, 665, 666, 667, 668, 682, 696, 700, 808, 809, 817, 819, 858, 865, 901, 902, 906, 909, 910, 911, 914, 952, 953, 1002, 1018, 1042, 1051], "pseudo_likelihood": 865, "pseudocount": [541, 1045], "psf": 380, "psi": 417, "psi_1": 417, "psi_2": 417, "psi_n": 417, "pspachtholz": [1047, 1048, 1049], "psycholog": [412, 710, 721], "psychometrica": 640, "psychometrika": [695, 699, 1003], "pt": [50, 375, 421, 885, 1016], "pt_i": 303, "pt_j": 303, "ptocca": 1047, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [240, 904], "public": [0, 110, 374, 380, 382, 384, 385, 392, 393, 394, 395, 416, 419, 472, 669, 676, 690, 691, 697, 907, 1002, 1010, 1037, 1042, 1043, 1048, 1049, 1050, 1053], "publicli": [380, 1047], "publish": [374, 375, 382, 384, 388, 394, 1018, 1026, 1049], "pubu": [229, 246, 299, 342], "pubu_r": 111, "puerta": 1052, "puggioni": 1041, "puhuk": [1051, 1052], "pujalt": 1051, "pulapakura": [1054, 1055], "pulchritud": 354, "pulido": 1050, "pulkit": [1045, 1046, 1048], "pull": [102, 325, 368, 378, 383, 394, 395, 1029, 1047], "puls": 377, "punctuat": [420, 593, 594, 596], "puneet": 1044, "puneeth": [1054, 1055], "puor": 124, "puor_r": 176, "pure": [111, 112, 116, 200, 215, 394, 412, 477, 483, 501, 562, 563, 564, 565, 569, 570, 571, 710, 720, 791, 800, 917, 918, 919, 920, 1016], "pure_emp_cov": 112, "pure_loc": 112, "pure_x": 112, "purepremium": 233, "puriti": [137, 921, 923], "purna": 1051, "purpl": [109, 119, 239], "purport": 1044, "purpos": [48, 51, 72, 116, 146, 151, 183, 229, 230, 231, 235, 237, 250, 261, 263, 267, 269, 270, 343, 344, 350, 354, 355, 363, 375, 380, 393, 394, 395, 398, 405, 409, 412, 413, 417, 419, 420, 421, 422, 831, 832, 869, 926, 1003, 1006, 1007, 1009, 1012, 1025, 1049, 1051, 1055], "pursu": 188, "pursuit": [2, 87, 122, 124, 130, 185, 194, 417, 478, 531, 536, 542, 547, 553, 669, 670, 690, 691, 1027, 1028, 1032, 1037], "push": [64, 380, 384, 410, 1029], "pushd": 388, "put": [75, 91, 163, 172, 174, 243, 247, 254, 258, 287, 308, 315, 326, 337, 348, 352, 369, 382, 384, 385, 388, 406, 422, 447, 451, 463, 520, 619, 652, 666, 802, 886, 890, 898, 911, 912, 913, 914, 915, 943, 996, 1003, 1005, 1006, 1007, 1013, 1016], "putnam": 1043, "putschblo": 1050, "pvalu": [2, 597, 600, 601, 603, 604, 605, 834], "pvalue_iri": 279, "pvalue_rand": 279, "pvalues_": [166, 597, 600, 601, 603, 604, 605, 1037], "pvnguyen": 1041, "pwalchessen": 1049, "pwd": 388, "px": [141, 274], "pxd": 380, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 368, 380, 381, 384, 386, 388, 394, 398, 412, 420, 423, 444, 448, 451, 458, 535, 649, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 884, 888, 948, 1006, 1025, 1027, 1037, 1039, 1043, 1047, 1051], "py3": 398, "py39": 398, "pyamg": [80, 398, 405, 412, 456, 466, 696, 700], "pyarrow": [398, 405], "pybrain": 1037, "pycon": [406, 1024], "pyd": 381, "pydata": [43, 380, 388, 398, 405, 406, 1024, 1030], "pydata_2013": 1030, "pydebug": 386, "pyflak": 382, "pyfunc": [704, 1009], "pyfuncdist": 704, "pymc": 1025, "pynndesc": 293, "pynndescenttransform": 293, "pyodid": 380, "pyoxid": 1050, "pypi": [368, 378, 382, 384, 386, 398, 1022, 1045, 1049, 1051, 1052, 1054], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 191, 193, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 329, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 376, 380, 387, 442, 507, 636, 637, 702, 703, 705, 706, 707, 811, 828, 1034, 1051], "pyplpt": 374, "pypy3": 1045, "pysniak": 1040, "pystruct": 392, "pytabl": 374, "pytb": 388, "pytest": [2, 322, 368, 378, 380, 382, 383, 398, 405, 408, 928, 947, 948, 1047, 1050], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 367, 369, 374, 378, 380, 381, 382, 383, 384, 385, 388, 389, 392, 394, 398, 399, 405, 406, 408, 413, 420, 501, 513, 514, 586, 704, 816, 883, 1006, 1016, 1021, 1022, 1026, 1029, 1030, 1032, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054], "python2": 1045, "python3": [378, 398], "python37": 398, "pythonsoftwarefound": 398, "pythonx": 378, "pytorch": [45, 330, 392, 1025, 1026, 1053, 1054], "pytorch_enable_mps_fallback": 408, "pyx": [380, 381, 386, 388], "p\u00e9rez": 1045, "p\u00f6lsterl": [1044, 1047, 1050], "q": [51, 103, 115, 148, 215, 325, 409, 412, 417, 952, 1002, 1021], "q1": 514, "q327": 377, "q_": 1021, "q_m": 1022, "q_max": [887, 899], "q_min": [887, 899], "qaiser": 1054, "qda": [67, 377, 554, 555, 1028, 1032, 1042], "qdeffens": [1047, 1050], "qemu": 388, "qi": [514, 1049], "qian": [1043, 1048], "qiang": 1041, "qianm": 1049, "qid": [491, 513, 514, 1038, 1043], "qimu": 1043, "qin": [0, 377, 401, 420, 1044, 1045, 1046, 1047, 1048, 1056], "qingi": 1045, "qizhi": 1048, "qmarcou": 1054, "qn": 514, "qodari": [1055, 1056], "qp": 1021, "qr": [80, 217, 408, 539, 546, 549, 952, 953, 1003, 1043, 1054], "qt": [317, 886], "qtconsol": 386, "quad": [422, 1009, 1020], "quadcontourset": 636, "quadmesh": 636, "quadrant": 313, "quadrat": [2, 12, 43, 48, 65, 69, 111, 112, 113, 177, 185, 229, 252, 263, 275, 325, 444, 462, 465, 554, 555, 628, 636, 653, 663, 664, 674, 681, 685, 721, 914, 915, 1002, 1003, 1006, 1009, 1012, 1016, 1020, 1021, 1027, 1028, 1032, 1038], "quadraticdiscriminantanalysi": [2, 67, 70, 554, 1000, 1007, 1009, 1037, 1042, 1044, 1052, 1056], "quadro": 1050, "quadv": 1051, "qualifi": 385, "qualit": [44, 45, 86, 88, 94, 141, 148, 215, 327, 375, 412, 443, 706, 1052], "qualiti": [0, 13, 27, 45, 58, 61, 72, 80, 82, 91, 124, 144, 151, 188, 221, 266, 271, 280, 281, 282, 347, 380, 388, 392, 394, 407, 412, 414, 417, 456, 466, 473, 478, 562, 563, 564, 565, 569, 570, 748, 819, 901, 902, 917, 918, 919, 920, 953, 1001, 1003, 1011, 1018, 1022, 1025, 1026, 1030, 1032], "quang": 1048, "quansight": 0, "quantifi": [13, 27, 43, 72, 82, 109, 177, 233, 267, 280, 330, 382, 394, 407, 578, 872, 1001, 1014, 1016, 1032], "quantil": [2, 79, 86, 96, 135, 137, 185, 194, 313, 316, 317, 376, 392, 419, 442, 443, 462, 524, 557, 558, 565, 567, 662, 675, 728, 750, 753, 755, 832, 874, 886, 887, 888, 898, 899, 1006, 1016, 1027, 1028, 1032, 1037, 1041, 1044, 1046, 1050, 1051, 1053, 1055], "quantile_list": 52, "quantile_rang": [313, 887, 899, 1043], "quantile_regress": 217, "quantile_transform": [2, 107, 886, 897, 1016, 1044, 1045, 1046, 1055], "quantileregressor": [2, 325, 1002, 1006, 1050, 1051, 1052], "quantiles_": [886, 1016, 1047], "quantiletransform": [2, 107, 189, 317, 413, 469, 885, 898, 996, 1016, 1044, 1045, 1046, 1047, 1048, 1053, 1055], "quantiletransformerquantiletransform": 189, "quantit": [43, 44, 45, 52, 62, 94, 148, 151, 159, 170, 269, 288, 377], "quantiti": [51, 145, 273, 324, 367, 394, 412, 419, 726, 727, 728, 729, 790, 865, 995, 997, 1000, 1002, 1042], "quantiz": [71, 124, 185, 375, 447, 451, 453, 874, 1016, 1027], "quantum": 1004, "quartil": 887, "quartimax": [537, 1049], "quasi": [382, 866, 867, 1002], "quazi": [1044, 1045], "queensland": 377, "quentin": [1044, 1045, 1046, 1053, 1054], "queqichao": 1041, "queri": [195, 296, 306, 367, 418, 423, 448, 450, 454, 461, 557, 615, 616, 633, 649, 650, 731, 761, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 1006, 1009, 1022, 1025, 1029, 1039, 1041, 1042, 1045], "query_id": [491, 513, 514], "query_radiu": [849, 850], "question": [0, 161, 187, 267, 273, 350, 379, 380, 385, 388, 406, 416, 419, 838, 911, 914, 1002, 1005, 1006, 1012, 1030], "queue": [47, 1009, 1040], "quick": [43, 126, 255, 380, 382, 386, 398, 611, 835, 1006, 1007, 1016, 1030, 1034], "quicker": 1005, "quickest": 378, "quickli": [74, 253, 309, 322, 377, 380, 381, 416, 419, 697, 783, 1002, 1009, 1010, 1030, 1048], "quinlan": 1022, "quinonez": 1045, "quintana": 1006, "quit": [43, 52, 64, 86, 90, 116, 138, 161, 170, 188, 189, 213, 233, 267, 281, 290, 325, 354, 367, 385, 393, 412, 420, 1001, 1003, 1008, 1030, 1045], "quiver": 123, "quot": [37, 51, 52, 54, 102, 274, 354, 355, 368, 374, 375, 378, 380, 384, 398, 399, 408, 492, 493, 501, 1006, 1018, 1021, 1052], "quota": [1050, 1051], "quotat": 375, "quotient": 1006, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 98, 107, 109, 110, 111, 112, 116, 121, 128, 131, 135, 138, 139, 144, 148, 149, 150, 159, 166, 173, 174, 175, 179, 180, 181, 183, 184, 188, 198, 200, 203, 204, 215, 222, 225, 233, 240, 245, 248, 258, 261, 264, 272, 273, 276, 278, 279, 280, 283, 286, 292, 295, 296, 300, 304, 306, 319, 326, 345, 347, 356, 363, 375, 377, 381, 384, 392, 394, 406, 409, 410, 412, 414, 415, 416, 417, 419, 420, 429, 435, 441, 450, 455, 457, 469, 473, 478, 482, 486, 487, 488, 503, 509, 518, 525, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 593, 594, 595, 596, 599, 611, 614, 615, 616, 632, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 690, 691, 697, 701, 721, 726, 727, 728, 729, 733, 735, 786, 790, 793, 804, 805, 819, 822, 827, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 866, 867, 880, 885, 897, 904, 905, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 922, 971, 996, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1037, 1041, 1044, 1047, 1048, 1049, 1050, 1052, 1054], "r0": [808, 809], "r1": 575, "r11": [215, 233], "r2": [107, 136, 141, 156, 187, 189, 210, 248, 286, 413, 419, 559, 575, 678, 832, 867, 927, 1006, 1014, 1046], "r2007": 419, "r22": 215, "r25": 233, "r26": 215, "r2_score": [2, 107, 187, 200, 210, 211, 408, 419, 435, 469, 486, 487, 488, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 729, 733, 842, 843, 852, 860, 867, 910, 912, 915, 918, 920, 995, 1006, 1038, 1040, 1046, 1050, 1051, 1055], "r2_score_ard": 200, "r2_score_enet": 200, "r2_score_lasso": 200, "r2_score_nnl": 210, "r2_score_ol": 210, "r2_with_abl": 187, "r2_without_": 187, "r3": 575, "r72": 215, "r73": 233, "r82": 215, "r93": 215, "r_": [50, 130, 228, 229, 259, 280, 299, 300, 342, 348, 352, 412, 712, 1006, 1022], "r_0": 995, "r_k": 280, "r_multi": 1014, "r_n": [280, 712, 1006], "r_regress": [2, 421, 611, 1050, 1051, 1054], "r_squar": 393, "raamana": [1045, 1046], "rabbit": [326, 328, 1016], "raccoon": [86, 124, 417], "raccoon_fac": [86, 124], "race": [188, 329, 375, 501, 1040], "race_hispan": 188, "race_oth": 188, "race_whit": 188, "rachel": [1049, 1052], "rachelcjordan": 1048, "rachez": [1042, 1043], "rachit": [1043, 1049, 1052], "rachum": 1049, "radar": 1030, "radford": 1002, "radhakrishnan": 1045, "radial": [2, 44, 126, 172, 177, 179, 343, 347, 372, 456, 627, 696, 1004, 1021, 1032], "radian": [306, 704, 769], "radii": [849, 850], "radiu": [2, 170, 300, 343, 377, 412, 446, 454, 693, 769, 786, 849, 850, 851, 852, 853, 857, 859, 860, 861, 863, 1009, 1039, 1041, 1051, 1054], "radius1": 99, "radius2": 99, "radius3": 99, "radius4": 99, "radius_neighbor": [326, 857, 859, 860, 861, 1041, 1046, 1047, 1049, 1050, 1051, 1052], "radius_neighbors_graph": [2, 412, 423, 448, 851, 852, 853, 855, 857, 859, 860, 861, 862, 1009, 1041, 1046, 1049], "radiusneighborsclassifi": [2, 326, 851, 852, 857, 860, 1007, 1009, 1037, 1039, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "radiusneighborsregressor": [2, 326, 851, 852, 857, 859, 1007, 1009, 1037, 1039, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "radiusneighborstransform": [2, 322, 853, 1009, 1047, 1049, 1051, 1052], "radostin": [1045, 1046], "raduspaimoc": 1048, "raf": 1046, "rafael": [1030, 1038, 1039, 1041, 1044], "rafal": [1052, 1053], "rafei": 1049, "raff": 1040, "raffaello": 1046, "rafiqu": [1045, 1046], "raghav": [0, 402, 1041, 1042, 1043, 1044, 1045, 1049], "raghavan": [417, 595, 844, 848, 1004, 1006, 1008], "raghu": [412, 446], "raghunathan": [1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "raghuv": [1052, 1053], "raghuwanshi": 1051, "rah": 646, "rahiel": 1041, "rahil": [1051, 1052, 1053, 1054, 1055], "rahimi": [646, 998], "rahmaan": 1047, "rahman": [1044, 1045, 1049], "rahn": [1044, 1047], "rahul": [1049, 1054], "rai": [0, 402, 1006, 1037, 1047, 1049, 1050], "raimundo": 1045, "rain": [43, 52, 189, 411, 1002], "rainbow": [61, 237], "rainfal": 1002, "rais": [2, 133, 216, 249, 250, 267, 276, 317, 325, 380, 382, 384, 385, 386, 389, 392, 394, 403, 406, 413, 416, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 514, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 581, 582, 586, 587, 593, 594, 595, 596, 608, 615, 616, 622, 634, 637, 640, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 701, 703, 707, 714, 716, 717, 718, 719, 721, 732, 734, 735, 743, 783, 787, 788, 789, 792, 793, 794, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 814, 819, 823, 827, 828, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 858, 859, 860, 864, 866, 867, 868, 869, 872, 873, 874, 875, 876, 881, 882, 883, 887, 888, 889, 896, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 928, 933, 935, 936, 938, 939, 957, 962, 966, 989, 990, 991, 992, 994, 995, 1006, 1016, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "raisadz": 1055, "raise_exc": [716, 1056], "raise_except": 991, "raise_warn": [276, 717, 991], "raj": [1054, 1055], "rajagopalan": [0, 402, 1045, 1049], "rajaona": [1043, 1044], "rajat": [1040, 1047], "rajdeep": 1046, "rajendra": 1045, "raji": [1052, 1053], "rakotoarison": [1044, 1045, 1047], "ralf": [1040, 1043, 1044, 1052, 1053, 1055], "ralph": 1055, "ram": [55, 86, 369, 406, 419, 901, 902, 1008, 1021, 1043, 1049, 1052, 1053], "ramakrishnan": [412, 446], "ramana": [1043, 1044], "ramanath": 1042, "ramesh": [375, 1030, 1040, 1043, 1047], "rameshwar": [1044, 1045], "ramil": [1045, 1046], "rammig": [1030, 1043], "ramo": 1052, "rampin": 1044, "ramyanp": [1049, 1050], "ramzi": 1049, "ram\u00edrez": 1006, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 82, 91, 95, 128, 138, 153, 155, 165, 195, 200, 237, 238, 242, 248, 249, 288, 305, 323, 324, 329, 336, 337, 349, 355, 360, 361, 389, 403, 549, 709, 710, 720, 762, 786, 791, 901, 902, 904, 905, 906, 1018, 1037, 1048, 1049], "rand_index": 710, "rand_scor": [2, 72, 412, 720, 1006, 1049], "randal": [889, 1041, 1051], "randi": 1043, "randint": [50, 72, 112, 119, 147, 184, 190, 238, 245, 249, 251, 285, 324, 329, 382, 385, 393, 403, 809, 826, 844, 845, 846, 848, 995, 996], "randn": [53, 69, 70, 74, 87, 98, 99, 111, 112, 124, 128, 152, 165, 172, 176, 187, 190, 204, 209, 210, 214, 228, 229, 232, 259, 262, 263, 268, 280, 282, 283, 288, 299, 300, 320, 323, 324, 329, 342, 347, 348, 352, 382, 385, 648, 675, 677, 683, 692, 826, 912, 915], "randolf": 1055, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 83, 85, 87, 90, 91, 93, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 119, 122, 123, 124, 127, 128, 134, 136, 138, 140, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 156, 159, 163, 165, 166, 169, 172, 173, 176, 178, 179, 181, 183, 184, 185, 186, 187, 195, 196, 197, 198, 200, 204, 205, 209, 210, 213, 214, 215, 216, 217, 218, 221, 222, 224, 228, 229, 232, 233, 235, 236, 238, 239, 240, 241, 242, 247, 248, 249, 251, 252, 258, 259, 261, 262, 263, 264, 265, 268, 270, 271, 272, 273, 274, 276, 278, 280, 282, 283, 284, 285, 288, 292, 293, 298, 299, 300, 305, 308, 314, 316, 317, 320, 323, 324, 326, 328, 330, 332, 333, 336, 337, 342, 343, 345, 346, 347, 348, 349, 352, 354, 355, 360, 361, 367, 368, 372, 376, 383, 385, 392, 393, 394, 403, 407, 408, 410, 412, 420, 421, 425, 437, 444, 447, 451, 453, 455, 456, 457, 458, 462, 463, 464, 466, 468, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 492, 493, 494, 495, 497, 500, 501, 502, 507, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 543, 544, 545, 546, 549, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 587, 588, 589, 594, 612, 613, 615, 616, 632, 635, 637, 639, 644, 645, 646, 647, 648, 651, 652, 654, 655, 657, 658, 659, 663, 665, 666, 667, 668, 675, 676, 677, 681, 682, 683, 684, 692, 694, 695, 696, 697, 698, 699, 700, 706, 709, 710, 713, 736, 748, 786, 793, 798, 802, 803, 805, 807, 808, 809, 810, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 834, 835, 840, 842, 843, 844, 845, 846, 848, 849, 850, 854, 858, 865, 866, 867, 869, 872, 874, 883, 886, 890, 898, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 938, 950, 952, 953, 974, 976, 979, 996, 998, 1001, 1003, 1005, 1006, 1010, 1011, 1012, 1014, 1016, 1021, 1022, 1026, 1027, 1028, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "random_": 204, "random_02": 204, "random_05": 204, "random_08": 204, "random_11": 204, "random_cat": [190, 1014], "random_choice_csc": 1047, "random_forest": 140, "random_from_data": [261, 802, 803, 1005], "random_label": 72, "random_num": [190, 1014], "random_offset_": [646, 647], "random_project": [2, 236, 246, 901, 902, 903, 1018, 1023, 1038, 1043, 1053, 1054], "random_sampl": [200, 849, 850, 854], "random_se": [49, 119, 144], "random_search": [274, 281], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 107, 113, 116, 119, 121, 123, 126, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 161, 166, 167, 169, 172, 178, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 197, 198, 201, 207, 214, 215, 218, 219, 221, 222, 223, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 247, 250, 251, 252, 253, 255, 256, 258, 260, 261, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 290, 292, 293, 296, 297, 301, 302, 303, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 341, 343, 344, 345, 350, 351, 354, 355, 358, 362, 363, 376, 382, 385, 389, 393, 394, 408, 411, 412, 413, 416, 417, 419, 420, 424, 437, 441, 442, 444, 447, 451, 453, 455, 456, 457, 458, 462, 463, 464, 466, 473, 478, 482, 491, 492, 495, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 588, 589, 598, 599, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 637, 638, 639, 640, 643, 644, 645, 646, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 679, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 715, 740, 793, 797, 798, 802, 803, 804, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 854, 858, 865, 866, 867, 869, 874, 886, 890, 898, 901, 902, 909, 910, 911, 914, 916, 917, 918, 919, 920, 922, 923, 925, 927, 928, 950, 952, 953, 974, 976, 979, 995, 996, 998, 1001, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1021, 1022, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "random_state_": [382, 541, 632, 858, 1051], "random_tre": 571, "random_tree_embed": 140, "random_unlabeled_point": [324, 904, 905, 906], "random_weights_": [646, 647], "randomforest": [49, 144, 367, 419, 917, 918, 1042], "randomforestclassifi": [2, 63, 64, 67, 89, 139, 140, 141, 142, 143, 144, 158, 190, 191, 254, 255, 270, 285, 322, 324, 329, 354, 363, 393, 394, 410, 419, 421, 562, 563, 564, 566, 571, 572, 574, 808, 809, 827, 839, 919, 995, 996, 1007, 1014, 1030, 1034, 1041, 1042, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054], "randomforestclassifierifittedrandomforestclassifi": [63, 142, 143, 329], "randomforestclassifierinot": 329, "randomforestclassifierrandomforestclassifi": [63, 190, 254, 285], "randomforestregressor": [2, 49, 141, 155, 156, 159, 183, 184, 324, 329, 393, 419, 562, 563, 565, 567, 571, 573, 575, 637, 638, 919, 996, 1007, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054], "randomforestregressorrandomforestregressor": [156, 159], "randomgeek78": 1051, "randomized_range_find": [2, 389, 1038, 1043], "randomized_svd": [2, 55, 389, 455, 457, 537, 546, 549, 551, 1037, 1038, 1043, 1050, 1051, 1052], "randomized_svd_low_rank": 1044, "randomizedlasso": 1044, "randomizedlogisticregress": 1044, "randomizedpca": [1030, 1037, 1039, 1040, 1042, 1043, 1044], "randomizedsearchcv": [2, 45, 103, 172, 274, 281, 324, 363, 393, 403, 408, 580, 995, 1006, 1020, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1056], "randomizedsearchcvinot": 103, "randomli": [2, 52, 72, 83, 94, 103, 117, 138, 151, 152, 183, 185, 189, 232, 246, 250, 263, 268, 279, 290, 292, 332, 335, 363, 368, 389, 392, 393, 412, 416, 419, 422, 453, 462, 520, 528, 536, 542, 550, 551, 556, 564, 565, 566, 567, 568, 569, 570, 615, 616, 676, 684, 695, 699, 721, 802, 803, 865, 903, 917, 918, 919, 920, 1005, 1007, 1009, 1012, 1014, 1018, 1022, 1027, 1048, 1052, 1054, 1056], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 83, 94, 95, 112, 113, 116, 121, 123, 128, 136, 147, 148, 151, 152, 153, 155, 166, 172, 173, 176, 178, 179, 181, 183, 184, 187, 190, 195, 196, 197, 198, 200, 204, 209, 216, 217, 222, 229, 238, 242, 248, 249, 258, 261, 268, 276, 279, 280, 282, 283, 284, 285, 305, 308, 314, 316, 317, 320, 323, 324, 326, 328, 329, 332, 333, 337, 346, 360, 361, 382, 385, 389, 394, 403, 417, 424, 425, 444, 447, 451, 453, 455, 456, 457, 458, 462, 463, 464, 466, 473, 474, 478, 479, 480, 482, 483, 484, 485, 492, 495, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 588, 589, 612, 613, 615, 616, 632, 637, 639, 644, 645, 646, 647, 648, 651, 652, 654, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 679, 681, 682, 683, 684, 692, 694, 695, 696, 697, 698, 699, 700, 706, 786, 798, 802, 803, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 827, 833, 834, 835, 839, 840, 843, 844, 845, 846, 848, 849, 850, 854, 858, 865, 866, 867, 874, 886, 890, 898, 901, 902, 904, 905, 906, 909, 910, 911, 914, 915, 917, 918, 919, 920, 938, 952, 953, 974, 976, 979, 1016, 1032], "randomtreesembed": [2, 140, 154, 236, 419, 919, 996, 1038, 1045, 1046, 1050, 1051, 1052], "randomtreesembedding_": 571, "randomtreesembeddingrandomtreesembed": 140, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 80, 81, 83, 84, 88, 93, 94, 96, 97, 109, 110, 112, 113, 135, 137, 138, 139, 142, 148, 151, 155, 165, 168, 169, 173, 188, 189, 193, 200, 204, 205, 209, 213, 215, 216, 219, 222, 223, 231, 233, 236, 238, 245, 246, 251, 252, 258, 260, 263, 264, 267, 268, 272, 273, 274, 276, 277, 278, 280, 281, 282, 284, 285, 286, 288, 292, 297, 303, 305, 306, 311, 313, 318, 319, 322, 326, 327, 333, 343, 350, 354, 355, 359, 362, 368, 374, 375, 377, 380, 382, 386, 389, 394, 406, 412, 416, 419, 422, 444, 465, 473, 475, 476, 477, 478, 479, 480, 482, 485, 495, 499, 500, 519, 532, 546, 558, 559, 564, 565, 568, 593, 594, 596, 634, 637, 643, 645, 653, 654, 674, 676, 681, 682, 683, 685, 697, 717, 736, 751, 793, 835, 841, 855, 857, 859, 860, 865, 879, 886, 887, 888, 894, 895, 898, 899, 902, 903, 952, 953, 995, 1002, 1006, 1010, 1020, 1026, 1030, 1042, 1043, 1044, 1045, 1047, 1050, 1053], "range_n_clust": 93, "range_n_outli": 112, "rangeindex": [188, 267, 501], "rangl": [998, 1006, 1020, 1021], "ranjanikrishnan": 1050, "rank": [2, 43, 55, 62, 111, 125, 128, 142, 168, 190, 191, 233, 271, 273, 281, 376, 407, 409, 410, 414, 415, 417, 419, 420, 513, 514, 526, 529, 554, 555, 598, 599, 611, 653, 662, 674, 685, 701, 725, 731, 732, 744, 745, 761, 793, 799, 808, 809, 953, 995, 997, 998, 1003, 1014, 1016, 1030, 1032, 1038, 1043, 1046, 1047, 1051, 1052, 1055], "rank_": 662, "rank_t": 805, "rank_test_": 277, "rank_test_precis": [271, 277], "rank_test_recal": 271, "rank_test_scor": [273, 281, 805, 819, 1043], "rankdata": 1044, "ranked_exposur": [215, 233], "ranked_frequ": 215, "ranked_pure_premium": 233, "ranking_": [168, 598, 599], "rankylau": 1045, "ransac": [2, 185, 194, 221, 232, 529, 654, 662, 676, 683, 684, 1027], "ransacregressor": [2, 218, 221, 232, 403, 654, 683, 684, 1002, 1007, 1040, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1055], "rao": [416, 1049, 1052], "raphael": 1054, "rapha\u00ebl": 1047, "raphson": [653, 674, 685], "rapid": 1030, "rapidli": [219, 275, 1021, 1030], "rare": [64, 189, 319, 363, 384, 392, 394, 397, 410, 412, 416, 594, 653, 663, 664, 674, 685, 909, 940, 1002, 1016, 1030, 1044, 1045, 1046, 1050, 1052, 1055], "rarer": [354, 356, 420], "raschka": [1042, 1043, 1044, 1045, 1046, 1049], "rashchedrin": 1044, "rasmu": [193, 1044], "rasmussen": [177, 422, 615, 616, 619, 624, 627], "raspberri": 398, "raster": 102, "rastgoo": 1054, "rastogi": 1045, "rastrojo": [412, 710], "rasul": [1042, 1044, 1045], "rat": [50, 306, 375, 503], "rate": [2, 43, 135, 139, 145, 151, 165, 189, 215, 222, 233, 246, 252, 267, 270, 273, 282, 283, 309, 310, 311, 369, 380, 411, 412, 413, 417, 421, 450, 470, 541, 558, 559, 564, 565, 566, 567, 597, 600, 601, 603, 604, 605, 611, 649, 650, 673, 681, 682, 683, 697, 703, 707, 732, 787, 794, 865, 866, 867, 903, 995, 1002, 1003, 1006, 1009, 1010, 1020, 1022, 1030, 1041, 1045, 1046], "rather": [51, 64, 86, 113, 135, 138, 151, 183, 188, 215, 216, 229, 252, 287, 317, 318, 354, 355, 363, 368, 376, 378, 380, 382, 385, 386, 388, 392, 393, 394, 395, 412, 416, 417, 419, 420, 422, 452, 465, 467, 468, 471, 570, 586, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 634, 651, 652, 657, 658, 665, 666, 667, 668, 786, 819, 840, 842, 843, 872, 909, 910, 921, 926, 953, 1000, 1002, 1003, 1006, 1008, 1009, 1013, 1026, 1037, 1038, 1039, 1040, 1044, 1045, 1046, 1047, 1052, 1053, 1055, 1056], "ratio": [2, 46, 86, 99, 105, 129, 185, 246, 248, 261, 265, 367, 380, 412, 414, 416, 419, 454, 460, 498, 499, 520, 546, 554, 555, 556, 636, 663, 715, 717, 721, 730, 735, 741, 744, 787, 788, 789, 792, 800, 832, 835, 855, 902, 974, 1000, 1012, 1022, 1027, 1052, 1054], "ration": [2, 177, 267, 628, 1004], "rationalquadrat": [2, 177, 181, 422, 621], "raton": 1002, "raul": [1039, 1040], "rausch": [1045, 1046, 1049], "rauwuckl": 1049, "ravel": [2, 44, 53, 55, 57, 63, 77, 86, 87, 91, 111, 130, 136, 138, 144, 148, 154, 155, 156, 163, 172, 174, 176, 177, 178, 179, 188, 195, 205, 206, 208, 215, 228, 229, 236, 240, 242, 246, 248, 252, 256, 260, 262, 267, 276, 280, 282, 287, 293, 298, 299, 305, 306, 308, 309, 310, 311, 315, 316, 326, 330, 337, 343, 348, 349, 351, 352, 354, 360, 361, 469, 498, 499, 500, 636, 723, 992, 1006, 1053], "ravi": [1049, 1052], "raw": [2, 17, 43, 51, 52, 54, 72, 112, 123, 156, 177, 188, 193, 311, 320, 334, 356, 367, 375, 382, 388, 394, 410, 412, 414, 417, 420, 473, 478, 506, 507, 508, 564, 565, 566, 568, 587, 593, 594, 595, 596, 639, 682, 695, 699, 710, 791, 855, 913, 1003, 1006, 1010, 1012, 1013, 1016, 1019, 1038, 1042, 1045, 1048, 1054], "raw_coef_": [909, 910], "raw_covariance_": [414, 473, 478], "raw_data": 356, "raw_docu": [593, 596], "raw_location_": [414, 473, 478], "raw_model": 320, "raw_pixel_classifi": 311, "raw_support_": [473, 478], "raw_target_regr": 413, "raw_valu": [726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 795, 796, 1006, 1045, 1048], "raw_x": [420, 587], "raytheon": 51, "raz": 1051, "ra\u00fal": 1046, "rb": [47, 406], "rbf": [2, 44, 45, 46, 49, 50, 66, 67, 126, 157, 163, 172, 173, 174, 176, 177, 178, 179, 180, 181, 185, 193, 229, 241, 242, 248, 271, 273, 275, 278, 299, 337, 338, 340, 349, 372, 400, 413, 417, 419, 456, 466, 507, 509, 540, 546, 615, 616, 617, 618, 621, 623, 624, 625, 626, 628, 629, 636, 644, 645, 646, 647, 648, 681, 696, 770, 779, 781, 805, 816, 819, 825, 869, 889, 904, 905, 909, 911, 912, 913, 914, 915, 995, 998, 999, 1003, 1006, 1012, 1016, 1019, 1027, 1032, 1043, 1048], "rbf_featur": [646, 998], "rbf_kernel": [2, 408, 770, 1004, 1041, 1056], "rbf_svc": [337, 1021], "rbfsampler": [2, 247, 644, 645, 647, 998, 1041, 1051, 1052], "rbm": [2, 311, 865, 866, 867, 1011], "rbm_features_classifi": 311, "rc": [229, 384], "rceil": [409, 1012], "rcond": 130, "rcparam": [47, 242, 247, 320], "rcv1": [2, 373, 502, 1032, 1042], "rcwoolston": 1048, "rd": 420, "rd9e56ef97513": 2, "rda": 377, "rdbu": [67, 70, 121, 231, 308, 343, 348], "rdbu_r": [87, 113, 131, 343], "rdownload": 47, "rdylbu": [144, 359], "re": [43, 47, 53, 63, 64, 89, 102, 103, 135, 145, 175, 187, 188, 233, 249, 259, 263, 276, 278, 282, 323, 354, 356, 368, 380, 381, 388, 393, 395, 403, 410, 416, 420, 473, 474, 475, 476, 477, 478, 479, 480, 496, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 651, 657, 665, 667, 807, 822, 825, 917, 918, 919, 920, 1002, 1007, 1009, 1016, 1021, 1026, 1030, 1037, 1041, 1042, 1044, 1046, 1056], "reach": [94, 141, 146, 170, 178, 215, 217, 231, 233, 267, 275, 326, 343, 362, 385, 395, 398, 412, 417, 421, 454, 461, 513, 514, 598, 599, 632, 649, 650, 651, 652, 657, 658, 659, 660, 661, 665, 666, 667, 668, 671, 672, 673, 681, 682, 683, 684, 686, 687, 688, 689, 734, 735, 788, 802, 803, 866, 867, 906, 995, 1006, 1010, 1020, 1022, 1030, 1048, 1052, 1053, 1054], "reachability_": [98, 412, 454, 459, 460, 461], "reachabl": [2, 88, 98, 450, 454, 459, 460, 461, 855, 959], "react": 305, "reactiv": 386, "read": [47, 52, 55, 121, 235, 280, 322, 323, 324, 326, 328, 367, 374, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 400, 406, 412, 423, 424, 425, 426, 429, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 949, 995, 1002, 1006, 1007, 1025, 1030, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1054, 1055], "read_byt": 47, "read_csv": [51, 385, 501, 1052], "read_csv_kwarg": [501, 1053], "read_parquet": 52, "readabl": [113, 274, 325, 385, 386, 388, 539, 1046, 1049, 1050, 1051, 1052], "reader": [45, 77, 325, 369, 380], "readi": [43, 46, 177, 216, 267, 375, 380, 384, 388, 468], "readili": [326, 417, 1022, 1030], "readm": [388, 420, 498], "readonli": [909, 910, 1050, 1052, 1053], "readonly_memmap": 1054, "readthedoc": 394, "real": [52, 67, 70, 88, 90, 102, 106, 109, 111, 112, 135, 151, 175, 188, 219, 239, 242, 252, 266, 267, 279, 288, 297, 300, 314, 315, 342, 347, 356, 367, 373, 374, 377, 384, 386, 389, 392, 393, 394, 409, 410, 412, 414, 416, 417, 419, 420, 473, 493, 494, 498, 499, 500, 501, 502, 505, 506, 509, 515, 556, 557, 560, 561, 562, 563, 564, 565, 569, 570, 597, 599, 600, 601, 602, 603, 604, 605, 636, 704, 709, 729, 733, 757, 760, 762, 790, 800, 834, 866, 867, 911, 912, 913, 914, 915, 918, 920, 996, 997, 998, 1003, 1006, 1008, 1010, 1011, 1012, 1022, 1024, 1027, 1032, 1037, 1050, 1054], "real_cov": [109, 110, 425, 474, 477, 478, 479, 480, 483, 484, 485], "real_data": 297, "realist": [43, 47, 275, 282, 283, 340, 375, 1006], "realiti": 376, "realiz": [215, 1030], "realli": [109, 190, 204, 384, 385, 386, 1006, 1012, 1030, 1051], "reappli": 419, "rearrang": [58, 59, 409], "reason": [43, 47, 51, 64, 77, 86, 102, 148, 151, 170, 188, 189, 193, 215, 216, 223, 233, 242, 246, 247, 249, 252, 267, 270, 273, 274, 279, 286, 290, 293, 314, 318, 347, 355, 356, 363, 367, 368, 369, 375, 379, 380, 381, 382, 384, 388, 392, 393, 394, 395, 411, 412, 413, 414, 417, 419, 420, 513, 537, 579, 643, 651, 657, 659, 677, 692, 697, 768, 805, 819, 853, 858, 865, 884, 906, 925, 927, 928, 995, 996, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1012, 1016, 1020, 1021, 1022, 1030, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "reassign": [83, 380, 451, 453, 1038, 1042], "reassignment_ratio": 453, "rebalanc": 394, "rebas": 384, "rebecca": 1044, "rebekah": [1045, 1046, 1047], "reboul": 1047, "rebuild": [367, 378, 406, 420, 446], "rebuilt": [68, 378, 849, 850], "rec": [57, 356, 375, 646], "rec_l1": 53, "rec_l2": 53, "rec_macro": 416, "recal": [2, 45, 62, 68, 102, 113, 126, 167, 185, 243, 252, 265, 267, 271, 290, 311, 332, 333, 380, 394, 411, 412, 509, 609, 705, 711, 712, 713, 717, 718, 732, 734, 735, 736, 787, 788, 789, 792, 793, 827, 835, 838, 870, 889, 893, 909, 1002, 1022, 1027, 1040, 1041, 1044, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "recalcul": [253, 255, 412, 1034, 1037], "recall_macro": [416, 1006], "recall_scor": [2, 62, 267, 280, 416, 713, 789, 1006, 1037, 1039, 1040, 1041, 1042, 1047, 1053], "recant": 395, "receiv": [0, 2, 57, 161, 185, 243, 249, 255, 265, 267, 268, 270, 275, 356, 363, 380, 382, 388, 394, 411, 416, 419, 509, 663, 707, 711, 713, 732, 787, 793, 794, 824, 835, 837, 838, 876, 914, 1007, 1010, 1011, 1020, 1027, 1047, 1048], "recent": [52, 249, 378, 385, 388, 394, 412, 472, 543, 570, 1020, 1030, 1040, 1049], "recht": [646, 998], "recip": [384, 406, 1003, 1030], "reciproc": [376, 1006], "reckon": 375, "recogn": [43, 44, 65, 84, 86, 116, 124, 143, 168, 185, 216, 266, 297, 325, 332, 333, 386, 403, 412, 420, 507, 702, 718, 835, 914, 1006, 1027, 1054], "recognit": [42, 48, 54, 121, 185, 251, 311, 318, 373, 385, 417, 419, 421, 499, 507, 537, 539, 546, 702, 713, 718, 746, 774, 793, 794, 802, 819, 835, 889, 914, 998, 1002, 1006, 1007, 1011, 1021, 1023, 1027, 1032, 1037], "recommend": [116, 143, 183, 232, 243, 249, 269, 282, 317, 324, 347, 367, 368, 374, 375, 378, 380, 382, 386, 388, 392, 398, 406, 415, 416, 417, 419, 421, 442, 451, 453, 455, 464, 501, 513, 540, 543, 549, 554, 566, 567, 574, 587, 588, 594, 611, 616, 636, 637, 643, 663, 664, 675, 681, 697, 702, 703, 705, 707, 811, 817, 819, 828, 865, 872, 874, 881, 888, 889, 894, 895, 897, 898, 899, 900, 902, 911, 914, 953, 994, 995, 1003, 1006, 1008, 1010, 1013, 1016, 1018, 1020, 1021, 1022, 1024, 1030, 1032, 1039, 1040, 1046, 1047, 1048, 1049, 1051, 1053], "recompil": [381, 386, 398], "recomput": [88, 89, 253, 255, 295, 322, 473, 478, 1002, 1018, 1042, 1053], "reconstruct": [2, 42, 55, 58, 99, 121, 122, 126, 185, 214, 238, 239, 326, 406, 417, 420, 486, 487, 488, 536, 538, 540, 542, 543, 544, 545, 547, 548, 550, 551, 553, 588, 592, 657, 677, 693, 694, 698, 901, 902, 1002, 1003, 1027, 1051], "reconstruct_from_patches_2d": [2, 124, 420, 588], "reconstruction_err_": [543, 545], "reconstruction_error": 693, "reconstruction_error_": 694, "record": [2, 50, 122, 139, 151, 190, 249, 267, 319, 356, 367, 380, 406, 412, 414, 454, 461, 503, 625, 648, 697, 776, 779, 783, 784, 785, 786, 832, 855, 1050, 1051], "recov": [75, 98, 113, 122, 123, 128, 145, 172, 187, 200, 214, 215, 219, 235, 286, 356, 414, 418, 421, 424, 464, 538, 564, 1002, 1003, 1005, 1026, 1043], "recoveri": [51, 113, 200, 214, 414, 421], "recreat": 253, "rect": [47, 85, 195], "rect_colorbar": 313, "rect_histi": 313, "rect_histx": 313, "rect_scatt": 313, "rectangl": 47, "rectangular": [375, 394, 953, 1026], "rectifi": [866, 867], "recurs": [2, 18, 52, 152, 161, 164, 167, 170, 185, 268, 271, 272, 278, 287, 297, 358, 382, 412, 416, 444, 445, 446, 449, 467, 507, 520, 568, 598, 599, 602, 607, 637, 638, 663, 824, 869, 879, 1006, 1009, 1012, 1013, 1022, 1027, 1028, 1032, 1037, 1047, 1048], "recursionerror": 1055, "red": [48, 49, 50, 63, 69, 70, 93, 111, 119, 121, 122, 123, 138, 156, 159, 181, 193, 195, 196, 205, 213, 240, 253, 268, 279, 306, 309, 314, 318, 319, 334, 343, 361, 378, 394, 412, 417, 1007], "reda": 1043, "redden": 1048, "reddi": [1044, 1045, 1046, 1051, 1054], "redefin": [58, 148, 188], "redesign": [392, 1037], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 446, "redo": 355, "reduc": [2, 37, 43, 46, 77, 80, 81, 86, 103, 104, 109, 138, 148, 150, 151, 154, 167, 188, 195, 196, 200, 213, 219, 220, 223, 244, 246, 249, 252, 274, 280, 290, 302, 315, 318, 319, 327, 355, 356, 363, 372, 374, 377, 380, 386, 392, 394, 406, 410, 411, 412, 414, 416, 417, 419, 420, 421, 423, 448, 449, 454, 461, 464, 498, 539, 549, 554, 560, 561, 562, 563, 568, 569, 570, 571, 578, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 615, 632, 648, 657, 677, 678, 679, 680, 692, 697, 700, 786, 805, 808, 809, 811, 819, 828, 830, 831, 832, 833, 836, 878, 879, 886, 898, 901, 902, 909, 910, 917, 918, 919, 920, 995, 998, 1000, 1001, 1002, 1003, 1006, 1009, 1018, 1019, 1021, 1023, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1055], "reduce_dim": [104, 254, 272, 413], "reduce_dim__k": 104, "reduce_dim__n_compon": [104, 272, 413], "reduce_func": [786, 1048], "reduced_data": 91, "reducer_label": 104, "reduct": [2, 11, 45, 57, 87, 90, 101, 105, 116, 121, 129, 138, 154, 185, 234, 236, 237, 240, 246, 250, 294, 301, 303, 326, 340, 363, 367, 372, 412, 413, 415, 417, 419, 421, 472, 486, 487, 488, 489, 507, 535, 537, 539, 540, 543, 544, 545, 546, 549, 552, 554, 558, 559, 562, 563, 564, 565, 569, 570, 571, 604, 612, 693, 694, 695, 696, 697, 698, 786, 805, 835, 851, 858, 865, 869, 870, 879, 889, 907, 909, 917, 918, 919, 920, 998, 1003, 1018, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1038, 1039, 1040, 1043, 1051, 1052, 1053], "redund": [62, 64, 131, 169, 259, 264, 329, 363, 376, 379, 380, 385, 394, 410, 520, 639, 1026, 1049], "redundantli": 394, "ref": [380, 388, 996, 1043], "ref_lin": 442, "refactor": [326, 432, 1037, 1039, 1040, 1041, 1047, 1050, 1051, 1052], "refer": [43, 44, 72, 73, 93, 96, 103, 111, 118, 135, 149, 151, 156, 170, 177, 181, 190, 202, 233, 249, 252, 267, 273, 278, 279, 280, 287, 296, 303, 313, 322, 323, 324, 325, 326, 327, 328, 329, 330, 355, 368, 374, 375, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 392, 393, 394, 395, 398, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 461, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 503, 508, 516, 518, 520, 521, 522, 523, 524, 525, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 549, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 595, 598, 599, 600, 607, 612, 613, 615, 616, 619, 624, 627, 628, 632, 633, 636, 637, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 652, 654, 656, 658, 660, 661, 663, 666, 668, 670, 671, 672, 673, 676, 678, 680, 681, 683, 684, 687, 688, 693, 694, 695, 696, 697, 698, 699, 700, 701, 706, 709, 710, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 739, 740, 741, 742, 743, 745, 746, 748, 761, 763, 764, 774, 788, 790, 791, 793, 794, 797, 798, 800, 802, 803, 805, 806, 807, 808, 809, 810, 811, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 844, 845, 846, 848, 851, 854, 855, 856, 858, 865, 866, 867, 869, 874, 875, 876, 878, 879, 881, 882, 883, 885, 886, 887, 889, 890, 897, 902, 903, 904, 905, 906, 907, 909, 911, 912, 914, 915, 917, 918, 919, 920, 940, 947, 948, 953, 971, 995, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1029, 1037, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "referenc": [377, 380, 382, 388, 394, 901, 902, 1009, 1044, 1050], "references_": 886, "refin": [62, 113, 476, 714, 1006], "refit": [142, 161, 167, 169, 185, 265, 272, 274, 277, 280, 281, 285, 394, 411, 416, 422, 507, 572, 573, 632, 664, 670, 718, 805, 808, 809, 819, 827, 835, 914, 995, 1002, 1006, 1027, 1044, 1045, 1046, 1055], "refit_strategi": 271, "refit_time_": [805, 808, 809, 819, 1045], "reflect": [51, 75, 80, 81, 111, 119, 122, 145, 189, 190, 215, 233, 282, 297, 355, 376, 379, 380, 384, 394, 397, 409, 454, 460, 1003, 1006, 1012, 1014, 1038, 1046, 1055], "reformul": 379, "refrain": [216, 380], "refurbish": 7, "refus": [267, 392, 899, 900], "reg": [149, 188, 196, 249, 314, 323, 348, 419, 563, 565, 573, 655, 656, 658, 659, 660, 661, 662, 668, 669, 670, 675, 676, 683, 684, 694, 698, 920, 1002, 1042], "reg1": [159, 419], "reg2": [159, 419], "reg3": [159, 419], "reg_covar": [258, 802, 803], "reg_nnl": 210, "reg_ol": 210, "reg_param": [555, 1056], "regard": [0, 11, 44, 46, 50, 52, 86, 88, 103, 118, 126, 162, 172, 177, 189, 190, 204, 212, 217, 237, 248, 252, 275, 282, 283, 296, 355, 375, 380, 381, 385, 392, 394, 400, 406, 412, 417, 419, 420, 422, 447, 451, 456, 463, 466, 506, 619, 624, 661, 663, 706, 748, 803, 811, 827, 828, 833, 851, 852, 999, 1002, 1006, 1008, 1009, 1011, 1013, 1020, 1021, 1022, 1044, 1047], "regardless": [233, 274, 275, 276, 368, 380, 412, 540, 637, 638, 663, 709, 720, 1006, 1018, 1045, 1052, 1053], "regedit": 398, "regener": 874, "regex": [273, 356, 468, 470], "regexp": [593, 594, 596], "regim": [43, 394, 909, 910, 1005], "region": [51, 55, 59, 62, 71, 81, 82, 86, 89, 99, 124, 157, 179, 185, 188, 215, 233, 242, 246, 247, 264, 305, 316, 343, 350, 377, 387, 394, 412, 419, 422, 452, 454, 460, 466, 592, 1003, 1006, 1009, 1012, 1016, 1020, 1022, 1027], "region_1": 319, "region_2": 319, "regist": [2, 200, 354, 386, 975], "register_parallel_backend": [2, 1045, 1055], "registri": [378, 398, 1025], "regr": [211, 413, 559, 561, 570, 651, 652, 672, 842, 867, 910, 912, 915, 1021], "regr_1": [136, 360, 361], "regr_2": [136, 360, 361], "regr_3": 361, "regr_multirf": 155, "regr_rf": 155, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 87, 101, 103, 111, 112, 114, 118, 122, 123, 124, 131, 134, 135, 138, 140, 141, 142, 143, 146, 147, 150, 151, 155, 156, 162, 168, 170, 171, 173, 181, 183, 184, 185, 187, 188, 189, 191, 194, 197, 198, 200, 201, 203, 205, 209, 210, 212, 216, 218, 219, 220, 221, 224, 226, 231, 238, 241, 243, 251, 252, 253, 256, 267, 269, 281, 284, 286, 287, 288, 292, 294, 296, 304, 310, 311, 313, 314, 318, 324, 325, 326, 327, 329, 338, 339, 340, 350, 351, 354, 357, 358, 362, 368, 369, 372, 373, 375, 377, 380, 382, 385, 388, 389, 392, 393, 394, 407, 410, 414, 415, 416, 417, 419, 421, 435, 441, 468, 469, 478, 488, 493, 494, 497, 501, 506, 507, 509, 510, 517, 521, 522, 523, 529, 533, 536, 540, 542, 544, 546, 547, 548, 550, 551, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 571, 572, 575, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 611, 614, 615, 616, 619, 620, 627, 628, 630, 636, 637, 638, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 699, 706, 711, 726, 728, 729, 733, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 790, 795, 796, 805, 808, 809, 811, 819, 828, 832, 833, 835, 836, 838, 840, 842, 843, 851, 852, 857, 859, 860, 866, 867, 869, 870, 873, 874, 876, 882, 883, 884, 886, 889, 890, 893, 898, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 923, 927, 929, 935, 938, 940, 957, 995, 996, 998, 1001, 1003, 1013, 1014, 1016, 1017, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "regression_data": 46, "regression_model": 1044, "regression_test": 388, "regressioncriterion": 1045, "regressionregressionramdomizedpcaramdom": 400, "regressor": [2, 30, 43, 107, 116, 149, 155, 156, 159, 172, 177, 184, 185, 188, 194, 196, 198, 200, 215, 216, 218, 221, 232, 233, 249, 276, 288, 298, 318, 323, 324, 367, 380, 382, 392, 394, 410, 413, 422, 435, 438, 439, 440, 469, 486, 487, 488, 489, 529, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 570, 571, 572, 573, 574, 575, 610, 611, 614, 616, 637, 638, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 706, 837, 838, 841, 842, 843, 852, 860, 865, 866, 867, 870, 876, 884, 889, 890, 910, 912, 915, 917, 918, 919, 920, 923, 927, 928, 929, 942, 945, 947, 995, 996, 1002, 1006, 1007, 1009, 1014, 1020, 1025, 1027, 1028, 1032, 1037, 1038, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1052, 1054, 1056], "regressor_": [188, 469, 598, 599, 602], "regressor__sample_weight": 215, "regressor_tag": [928, 942], "regressor_with_": 187, "regressor_without_": 187, "regressorchain": [2, 403, 840, 842, 1045, 1048, 1052], "regressormixin": [2, 249, 382, 394, 469, 929, 1048], "regressortag": [2, 928, 942], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 90, 91, 92, 93, 94, 103, 105, 110, 126, 134, 144, 146, 147, 149, 154, 161, 163, 172, 173, 174, 176, 179, 181, 183, 185, 187, 194, 195, 196, 198, 200, 202, 203, 204, 206, 210, 211, 213, 215, 222, 229, 231, 233, 248, 259, 265, 266, 269, 274, 275, 277, 298, 299, 307, 309, 310, 311, 315, 316, 317, 318, 319, 320, 337, 338, 340, 342, 343, 344, 347, 348, 354, 356, 358, 367, 380, 392, 393, 410, 412, 414, 415, 417, 418, 419, 422, 441, 447, 451, 475, 476, 480, 482, 483, 484, 485, 509, 517, 519, 520, 525, 527, 529, 533, 543, 544, 545, 548, 552, 553, 555, 564, 566, 567, 593, 594, 596, 643, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 698, 740, 746, 755, 802, 803, 822, 828, 835, 836, 866, 867, 870, 889, 909, 910, 911, 912, 914, 915, 916, 995, 996, 998, 999, 1000, 1001, 1003, 1005, 1011, 1012, 1016, 1019, 1020, 1021, 1027, 1028, 1030, 1032, 1037, 1038, 1039, 1041, 1042, 1046, 1047, 1049, 1050, 1055], "regularis": [219, 425, 477, 479], "regularli": [144, 290, 392, 1008], "regulatori": 151, "rehan": 1052, "rehman": 1045, "reiichiro": [1044, 1045], "reilli": 1054, "reimburs": 267, "reimplement": [386, 392, 394, 1043, 1047], "reinforc": 1026, "reinit": 388, "reiniti": 392, "reinstal": 398, "reintroduc": 1053, "reitsam": 1049, "reject": [250, 267, 394, 395, 528, 676, 732, 935, 936, 1002, 1006, 1045], "rel": [43, 45, 47, 55, 58, 64, 88, 94, 126, 142, 177, 191, 193, 196, 215, 233, 261, 286, 299, 300, 314, 323, 326, 343, 347, 354, 355, 375, 379, 382, 388, 394, 410, 412, 416, 419, 420, 422, 444, 447, 451, 453, 463, 526, 529, 536, 539, 542, 546, 550, 551, 562, 563, 564, 565, 569, 570, 571, 609, 654, 663, 664, 676, 677, 679, 695, 699, 734, 751, 752, 805, 808, 809, 811, 819, 828, 833, 836, 849, 850, 854, 866, 867, 878, 879, 889, 905, 909, 910, 911, 914, 916, 917, 918, 919, 920, 1002, 1003, 1006, 1008, 1009, 1010, 1012], "relabel": [379, 823, 824, 906], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 374, 375, 376, 379, 380, 384, 385, 387, 388, 389, 392, 394, 395, 397, 403, 406, 411, 412, 413, 414, 415, 416, 417, 419, 422, 454, 468, 473, 501, 554, 555, 567, 568, 644, 678, 682, 697, 706, 728, 748, 826, 832, 867, 868, 870, 873, 874, 879, 882, 884, 885, 888, 897, 913, 995, 998, 1000, 1006, 1007, 1009, 1010, 1013, 1016, 1021, 1022, 1023, 1026, 1027, 1029, 1032, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1053], "relate_point": 303, "relationship": [2, 43, 52, 58, 135, 136, 151, 178, 187, 188, 195, 200, 203, 215, 217, 218, 280, 287, 292, 314, 320, 329, 394, 412, 414, 416, 466, 501, 641, 719, 1003, 1006, 1008, 1009, 1013, 1014, 1042], "relative_tim": 261, "relax": [46, 412, 420, 457, 1019, 1044], "releas": [0, 54, 88, 103, 133, 139, 140, 153, 170, 183, 184, 189, 190, 193, 215, 216, 217, 244, 249, 254, 255, 256, 267, 268, 285, 287, 295, 319, 335, 362, 368, 378, 380, 381, 383, 388, 392, 394, 420, 447, 450, 451, 468, 471, 494, 495, 501, 506, 507, 509, 517, 520, 526, 529, 543, 546, 566, 567, 569, 570, 572, 604, 607, 633, 635, 637, 639, 645, 651, 653, 657, 663, 674, 685, 693, 702, 706, 707, 722, 723, 737, 747, 753, 783, 793, 800, 804, 805, 806, 808, 809, 811, 819, 827, 828, 831, 832, 835, 851, 853, 870, 874, 879, 882, 883, 884, 888, 889, 890, 906, 907, 909, 914, 917, 918, 948, 1022, 1027, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "release_highlight": 1027, "relev": [46, 48, 57, 108, 112, 170, 185, 195, 209, 218, 273, 274, 280, 363, 367, 369, 375, 377, 379, 380, 382, 385, 386, 394, 395, 403, 414, 415, 421, 422, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 731, 745, 761, 804, 806, 807, 808, 809, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 887, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 1006, 1007, 1012, 1023, 1026, 1027, 1040, 1045, 1051], "reli": [126, 141, 145, 170, 191, 202, 204, 290, 293, 323, 327, 354, 367, 368, 382, 385, 388, 389, 392, 394, 408, 409, 412, 417, 419, 420, 554, 598, 602, 612, 613, 783, 833, 836, 874, 958, 971, 995, 998, 1000, 1002, 1006, 1009, 1014, 1016, 1021, 1030, 1045, 1046, 1047, 1051, 1053, 1054], "reliabl": [2, 62, 64, 410, 416, 442, 443, 651, 1022, 1030], "relianc": [126, 219], "religion": [57, 274, 354, 355, 356, 375, 1007], "reloc": 1046, "relova": 1050, "relu": [866, 867], "remain": [47, 62, 64, 103, 135, 142, 147, 149, 169, 188, 215, 219, 231, 258, 271, 275, 279, 282, 409, 412, 413, 414, 416, 420, 450, 468, 471, 520, 521, 526, 533, 539, 575, 615, 616, 768, 774, 808, 809, 810, 813, 815, 844, 845, 846, 848, 957, 995, 996, 998, 1005, 1006, 1010, 1016, 1022, 1026, 1039, 1045, 1051, 1054], "remaind": [43, 145, 188, 204, 215, 217, 233, 252, 327, 358, 413, 468, 471, 1037, 1044, 1045, 1046, 1049, 1050, 1053, 1055], "remaining_column": 468, "remark": [88, 116, 170, 267, 369, 380, 1016], "remedi": 232, "rememb": [88, 382, 384, 385, 398, 420, 1009, 1013, 1022], "remi": 1044, "remind": [249, 395], "reminisc": 124, "remot": [193, 333, 380, 383], "remov": [1, 2, 44, 54, 55, 87, 88, 102, 107, 168, 170, 183, 184, 188, 191, 274, 313, 320, 322, 323, 324, 329, 354, 355, 358, 363, 372, 375, 379, 380, 381, 382, 384, 385, 389, 394, 398, 405, 412, 413, 416, 419, 420, 422, 423, 432, 446, 448, 449, 454, 461, 486, 487, 488, 489, 492, 493, 532, 539, 540, 543, 545, 546, 558, 572, 573, 574, 575, 584, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 635, 649, 659, 660, 661, 663, 664, 678, 680, 684, 697, 714, 747, 783, 784, 785, 787, 805, 808, 809, 811, 819, 828, 833, 834, 836, 856, 868, 869, 873, 874, 886, 887, 889, 898, 906, 924, 933, 935, 936, 947, 948, 996, 1003, 1009, 1022, 1028, 1032, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "remove_zero_eig": [540, 1039, 1046], "rempfler": 1048, "renaissance0n": 1055, "renam": [149, 191, 263, 274, 322, 380, 384, 412, 451, 463, 468, 475, 476, 482, 532, 541, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 783, 882, 933, 935, 936, 1037, 1038, 1039, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "rename_axi": 273, "render": [51, 63, 86, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 210, 219, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 380, 382, 384, 385, 386, 394, 556, 594, 636, 705, 707, 886, 898, 921, 923, 1005, 1022, 1050, 1054], "rene": 1050, "renni": [2, 844, 846, 1008, 1045], "renorm": 63, "rent": 43, "rental": [43, 52, 189, 1013], "reorder": [58, 127, 394, 702, 723, 1026, 1045], "reordered_data": 58, "reordered_row": 58, "reorgan": 1043, "rep": 377, "reparameter": 1021, "reparametr": 350, "repartit": 43, "repeat": [2, 49, 69, 99, 110, 112, 147, 170, 172, 178, 179, 189, 193, 217, 267, 268, 273, 274, 285, 290, 333, 355, 356, 382, 389, 394, 395, 409, 410, 412, 417, 420, 421, 593, 598, 612, 613, 620, 632, 639, 664, 810, 820, 821, 824, 941, 996, 1005, 1022, 1032, 1045, 1047], "repeatedkfold": [2, 188, 416, 810, 821, 1044], "repeatedli": [135, 326, 363, 394, 412, 419, 422, 513, 551, 671, 672, 681, 682, 683, 786, 996, 1010], "repeatedstratifiedkfold": [2, 273, 287, 290, 416, 820, 824, 1044, 1056], "repercuss": 318, "repetit": [273, 287, 290, 385, 416, 820, 821, 1014, 1051], "replac": [2, 43, 62, 111, 125, 135, 151, 172, 177, 179, 183, 189, 201, 216, 256, 276, 293, 315, 320, 324, 345, 378, 380, 384, 386, 389, 394, 406, 413, 416, 419, 420, 445, 449, 468, 508, 520, 560, 561, 568, 587, 593, 594, 595, 596, 612, 613, 632, 635, 639, 644, 646, 733, 790, 811, 817, 819, 828, 868, 869, 872, 892, 905, 906, 912, 925, 927, 974, 976, 979, 995, 996, 998, 1002, 1006, 1016, 1021, 1022, 1025, 1026, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056], "replai": [808, 809], "repli": [54, 354, 379, 380, 383], "replic": [273, 379, 382, 1032], "repo": [380, 384, 1026, 1029], "report": [0, 2, 43, 47, 52, 68, 102, 107, 167, 180, 202, 267, 271, 281, 287, 290, 322, 332, 363, 375, 379, 381, 382, 383, 386, 388, 392, 394, 398, 406, 412, 416, 616, 654, 663, 669, 690, 691, 705, 718, 734, 735, 743, 788, 789, 792, 838, 847, 866, 867, 904, 922, 947, 1002, 1009, 1014, 1025, 1026, 1029, 1038, 1041, 1044, 1045, 1047, 1048, 1050, 1052, 1053], "reporthook": 47, "repositori": [43, 47, 52, 193, 267, 328, 373, 375, 377, 378, 380, 382, 384, 388, 392, 395, 398, 509, 1025, 1029, 1032], "repr": [582, 1048, 1049, 1051], "repreat": 273, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 82, 83, 86, 121, 123, 129, 130, 142, 143, 152, 188, 195, 207, 217, 219, 220, 224, 237, 239, 247, 252, 261, 266, 267, 270, 273, 276, 280, 298, 315, 347, 354, 356, 362, 369, 372, 375, 377, 382, 392, 393, 394, 395, 406, 410, 412, 416, 417, 418, 419, 420, 421, 442, 446, 450, 456, 467, 468, 474, 475, 476, 477, 478, 479, 480, 492, 494, 495, 497, 499, 501, 503, 505, 506, 507, 509, 510, 515, 532, 539, 541, 543, 545, 546, 552, 555, 560, 568, 586, 593, 596, 599, 634, 637, 639, 645, 681, 683, 702, 704, 706, 716, 735, 748, 794, 805, 807, 818, 819, 822, 825, 827, 832, 834, 835, 838, 839, 845, 851, 852, 853, 855, 856, 857, 859, 860, 861, 866, 867, 876, 882, 883, 906, 909, 910, 935, 936, 957, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1019, 1020, 1022, 1043, 1045, 1048, 1049, 1052, 1055], "represent": [2, 43, 51, 55, 58, 63, 86, 103, 104, 121, 124, 140, 142, 143, 152, 153, 154, 156, 159, 167, 177, 188, 190, 193, 197, 200, 235, 236, 237, 243, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 290, 303, 311, 319, 324, 326, 327, 329, 334, 355, 356, 362, 363, 372, 374, 383, 394, 406, 412, 413, 417, 418, 419, 426, 467, 536, 540, 542, 545, 547, 553, 571, 593, 595, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 635, 648, 651, 657, 663, 664, 665, 667, 671, 672, 673, 681, 682, 683, 774, 802, 803, 811, 828, 865, 878, 882, 883, 887, 889, 902, 909, 921, 923, 926, 932, 949, 971, 998, 1003, 1005, 1007, 1009, 1010, 1011, 1013, 1016, 1021, 1026, 1037, 1038, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "reproduc": [44, 51, 93, 135, 188, 193, 202, 282, 290, 311, 368, 379, 380, 382, 383, 388, 392, 394, 412, 416, 417, 420, 424, 444, 458, 464, 473, 478, 492, 495, 497, 500, 502, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 556, 558, 559, 560, 561, 564, 565, 566, 567, 568, 612, 613, 615, 616, 639, 644, 645, 646, 647, 651, 652, 655, 657, 658, 659, 665, 666, 667, 668, 671, 672, 673, 676, 681, 683, 684, 694, 695, 697, 698, 699, 798, 802, 803, 807, 808, 809, 810, 811, 817, 819, 820, 821, 822, 823, 824, 825, 833, 834, 835, 839, 840, 843, 854, 858, 865, 866, 867, 874, 886, 890, 898, 901, 902, 909, 910, 911, 914, 952, 953, 976, 979, 998, 1025, 1029, 1037, 1045, 1050, 1051], "reproduct": [392, 1002], "request": [2, 47, 55, 80, 215, 233, 249, 325, 368, 374, 378, 379, 383, 394, 395, 403, 406, 417, 420, 421, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 593, 595, 596, 604, 605, 615, 616, 637, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 704, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 961, 962, 964, 1006, 1009, 1029, 1043, 1044, 1045, 1054, 1055], "request_rout": 249, "requir": [30, 31, 43, 46, 53, 62, 80, 86, 88, 90, 91, 100, 102, 118, 125, 127, 140, 141, 145, 146, 149, 151, 152, 156, 170, 189, 200, 204, 212, 215, 235, 237, 243, 246, 249, 252, 256, 267, 274, 282, 284, 287, 293, 295, 313, 318, 324, 325, 354, 355, 356, 374, 377, 378, 380, 381, 382, 386, 388, 392, 394, 395, 398, 399, 403, 406, 408, 412, 413, 414, 416, 417, 419, 420, 421, 423, 429, 435, 441, 442, 443, 448, 450, 454, 456, 461, 466, 468, 471, 473, 486, 487, 488, 501, 513, 526, 529, 540, 546, 554, 555, 556, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 577, 584, 585, 586, 607, 615, 616, 624, 632, 637, 638, 639, 648, 651, 652, 657, 658, 663, 664, 671, 672, 673, 676, 679, 680, 681, 682, 683, 691, 694, 696, 697, 698, 700, 704, 729, 734, 735, 752, 754, 757, 768, 788, 789, 792, 804, 805, 808, 809, 812, 814, 819, 827, 832, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 866, 869, 870, 871, 873, 883, 884, 885, 889, 897, 901, 902, 904, 905, 909, 910, 911, 914, 917, 918, 919, 920, 926, 928, 929, 935, 936, 942, 947, 948, 962, 965, 971, 991, 994, 995, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1020, 1021, 1022, 1026, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "requires_fit": [928, 989, 1056], "requires_i": [429, 435, 994, 1048], "requires_positive_x": [1047, 1052], "requires_vector_input": [617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "requisit": 382, "rerais": 1054, "rerun": [51, 63, 77, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 197, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 388], "resampl": [2, 85, 148, 188, 233, 297, 389, 392, 394, 560, 561, 979, 1026, 1046, 1050], "resampled_arrai": 976, "rescal": [43, 80, 81, 88, 126, 197, 202, 238, 252, 313, 352, 414, 419, 424, 473, 474, 475, 476, 477, 478, 479, 480, 538, 543, 651, 654, 657, 881, 887, 911, 912, 913, 914, 915, 1006, 1016, 1041, 1042, 1056], "rescaled_coin": [80, 81], "rescu": [406, 420], "research": [0, 170, 187, 267, 273, 279, 290, 375, 377, 392, 412, 506, 518, 640, 650, 697, 740, 834, 839, 995, 1003, 1007, 1009, 1021, 1026, 1030], "resembl": [74, 219, 249], "reserv": [267, 319, 380, 566, 567, 1030], "reserva": 319, "reservoir": 974, "reservoir_sampl": 974, "reset": [256, 363, 388, 539, 681, 682, 683, 849, 850, 878, 879, 889, 994, 1039], "reset_n_cal": [849, 850], "reshama": [0, 365, 370, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1055], "reshap": [2, 43, 44, 45, 53, 61, 68, 80, 81, 83, 84, 86, 87, 91, 104, 111, 115, 121, 124, 130, 138, 143, 144, 154, 163, 168, 172, 174, 175, 176, 177, 178, 179, 181, 195, 206, 212, 228, 229, 231, 232, 236, 238, 240, 242, 247, 251, 262, 271, 297, 299, 306, 308, 310, 311, 314, 315, 316, 320, 322, 325, 326, 328, 329, 337, 342, 343, 348, 351, 352, 392, 409, 417, 419, 420, 449, 469, 589, 636, 737, 835, 884, 888, 1002, 1016, 1022, 1042], "resid": 375, "residence_sinc": 267, "residenti": 156, "residu": [2, 107, 211, 217, 269, 435, 469, 486, 487, 488, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 676, 677, 678, 679, 683, 684, 690, 691, 706, 749, 790, 842, 843, 852, 860, 867, 910, 912, 915, 918, 920, 1002, 1006, 1049, 1050, 1052], "residual_metr": 1043, "residual_threshold": [232, 676, 1002, 1050], "residual_vs_predict": [43, 52, 107, 269, 327, 706], "residues_": 1042, "resign": 395, "resili": 420, "resist": [111, 112, 380], "resiz": [45, 80, 81, 253, 375, 498, 499], "resolut": [43, 50, 55, 130, 189, 305, 306, 343, 395, 410, 1047], "resolv": [55, 379, 380, 384, 388, 395, 420, 450, 456, 466, 696, 700, 953, 996, 1006, 1044, 1046, 1047, 1050, 1055], "resort": [275, 375, 406, 560, 1047], "resourc": [55, 77, 148, 151, 183, 215, 310, 324, 366, 383, 392, 394, 411, 419, 808, 809, 995, 1007, 1026, 1030, 1032, 1045, 1050, 1051, 1056], "resourcewarn": 1040, "resp": [375, 419, 602, 802, 803, 1020, 1045], "respect": [64, 88, 100, 118, 126, 135, 139, 141, 144, 153, 180, 193, 195, 200, 204, 217, 229, 232, 235, 237, 243, 246, 248, 252, 263, 267, 282, 299, 300, 311, 318, 326, 340, 347, 362, 367, 368, 375, 376, 380, 410, 412, 415, 417, 419, 420, 422, 450, 468, 471, 474, 475, 476, 477, 478, 479, 480, 539, 545, 546, 552, 558, 566, 567, 602, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 633, 641, 648, 676, 695, 699, 717, 733, 787, 790, 802, 803, 845, 855, 866, 867, 921, 923, 994, 995, 999, 1000, 1002, 1003, 1006, 1009, 1010, 1011, 1012, 1016, 1021, 1025, 1029, 1030, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "respond": [188, 380, 412], "respons": [0, 25, 170, 189, 211, 215, 218, 249, 283, 286, 354, 377, 380, 394, 412, 413, 419, 450, 468, 486, 487, 488, 572, 573, 636, 637, 638, 679, 680, 703, 705, 707, 747, 802, 803, 1007, 1013, 1054], "response_method": [48, 66, 70, 89, 137, 152, 157, 199, 207, 224, 229, 267, 276, 296, 301, 304, 318, 330, 339, 340, 342, 347, 359, 636, 637, 638, 703, 705, 707, 747, 804, 827, 1006, 1054, 1056], "rest": [2, 30, 62, 66, 145, 149, 185, 194, 200, 224, 230, 249, 252, 261, 290, 322, 336, 340, 351, 386, 394, 422, 517, 615, 636, 649, 663, 664, 681, 759, 793, 837, 838, 839, 858, 909, 911, 914, 1002, 1006, 1007, 1010, 1013, 1021, 1027, 1030, 1041, 1042, 1051, 1052, 1053, 1055], "restart": [90, 178, 383, 388, 451, 536, 542, 543, 548, 550, 551, 615, 616, 1003, 1050], "restor": [1040, 1045, 1046, 1047, 1048, 1052], "restrict": [2, 64, 99, 100, 105, 162, 183, 185, 205, 232, 307, 382, 386, 392, 410, 412, 419, 420, 469, 498, 507, 537, 586, 615, 658, 659, 660, 661, 663, 687, 688, 718, 787, 793, 794, 835, 857, 859, 860, 861, 863, 865, 866, 867, 869, 895, 1006, 1022, 1027, 1031, 1032, 1037, 1039, 1047, 1049, 1054], "restructuredtext": 380, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 80, 86, 87, 88, 93, 95, 99, 103, 105, 107, 112, 116, 121, 124, 126, 127, 131, 138, 139, 140, 142, 145, 146, 148, 149, 152, 154, 155, 163, 169, 170, 172, 174, 176, 178, 180, 183, 188, 189, 190, 191, 196, 201, 203, 204, 205, 210, 216, 217, 219, 223, 229, 230, 233, 235, 236, 239, 242, 245, 247, 253, 258, 263, 264, 266, 267, 268, 271, 273, 274, 276, 279, 280, 281, 282, 284, 285, 287, 290, 293, 295, 299, 308, 309, 310, 313, 314, 315, 318, 322, 324, 326, 327, 328, 329, 330, 332, 335, 337, 343, 347, 348, 350, 354, 356, 360, 361, 362, 367, 368, 369, 374, 375, 377, 380, 382, 384, 385, 386, 388, 392, 393, 394, 395, 406, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 437, 444, 445, 447, 449, 450, 451, 454, 455, 456, 457, 458, 459, 461, 463, 466, 468, 471, 473, 474, 475, 476, 477, 478, 479, 480, 483, 493, 513, 514, 516, 518, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 584, 585, 586, 587, 589, 593, 594, 596, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 639, 641, 645, 648, 657, 658, 663, 669, 670, 671, 672, 680, 681, 682, 683, 691, 694, 695, 696, 697, 698, 699, 700, 713, 715, 716, 717, 722, 730, 731, 733, 734, 735, 736, 737, 741, 742, 743, 759, 761, 762, 769, 776, 779, 783, 784, 785, 786, 788, 789, 790, 792, 798, 799, 802, 803, 805, 807, 808, 809, 810, 815, 819, 820, 821, 824, 825, 830, 836, 837, 838, 840, 841, 842, 843, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 873, 874, 882, 883, 886, 887, 890, 898, 902, 906, 909, 911, 914, 917, 918, 919, 920, 921, 922, 935, 936, 952, 953, 955, 960, 970, 971, 976, 979, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1025, 1026, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "results_df": [223, 273, 319], "results_for_preval": 276, "results_sc": 350, "retail": 1030, "retain": [2, 195, 394, 412, 415, 416, 420, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 499, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 700, 701, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 882, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 1019, 1037], "retbin": 1016, "retent": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "retrac": 249, "retract": 380, "retrain": [406, 1026, 1053, 1055], "retri": [190, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 1045, 1051, 1055, 1056], "retriev": [2, 116, 188, 219, 280, 355, 362, 384, 394, 417, 420, 421, 472, 501, 595, 598, 599, 631, 658, 668, 689, 704, 731, 735, 737, 738, 761, 786, 844, 848, 881, 907, 1002, 1004, 1006, 1008, 1025, 1026, 1042, 1047, 1049, 1051, 1054], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 86, 89, 94, 102, 107, 119, 128, 130, 133, 135, 138, 140, 147, 148, 151, 152, 156, 170, 175, 178, 180, 184, 191, 195, 196, 202, 204, 207, 215, 216, 223, 224, 225, 233, 249, 252, 255, 256, 261, 263, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 288, 293, 298, 303, 306, 311, 313, 315, 318, 322, 330, 339, 343, 354, 356, 358, 362, 367, 373, 374, 375, 380, 381, 382, 386, 387, 389, 392, 394, 410, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 931, 932, 933, 935, 936, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 986, 989, 990, 991, 992, 993, 994, 996, 1006, 1009, 1013, 1014, 1021, 1022, 1026, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "return_a": [590, 591, 971, 1040], "return_cent": [517, 1048], "return_cod": 551, "return_cost": [475, 476, 482], "return_count": [335, 355, 861], "return_cov": [394, 572, 573, 616, 869], "return_dist": [87, 467, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 1009, 1041], "return_distribut": [119, 528], "return_estim": [43, 188, 287, 329, 416, 832, 1045], "return_ind": 528, "return_indic": [416, 832, 1053], "return_inner_stat": 1051, "return_intercept": [692, 1046], "return_invers": [150, 382], "return_log": [849, 850], "return_model": [1039, 1041], "return_n_it": [424, 458, 463, 482, 550, 551, 651, 652, 657, 658, 665, 666, 667, 668, 686, 687, 688, 689, 690, 691, 692, 699, 1051], "return_norm": [896, 1044], "return_path": [687, 688, 690, 691], "return_std": [172, 177, 178, 179, 181, 195, 196, 394, 557, 572, 573, 616, 618, 619, 620, 621, 630, 632, 649, 650, 869, 1044, 1045, 1049, 1054], "return_sum_weight": 986, "return_tim": [275, 833, 1047], "return_train_scor": [141, 277, 287, 319, 416, 805, 808, 809, 819, 832, 1043, 1044, 1046], "return_x_i": [44, 46, 54, 91, 102, 103, 104, 105, 121, 141, 145, 159, 161, 162, 166, 183, 184, 190, 191, 193, 202, 203, 204, 206, 211, 212, 222, 230, 231, 243, 251, 252, 255, 256, 269, 272, 275, 280, 281, 290, 292, 295, 302, 309, 310, 311, 318, 322, 324, 326, 327, 328, 329, 335, 346, 356, 358, 373, 385, 386, 393, 406, 412, 413, 416, 419, 421, 424, 432, 450, 492, 493, 494, 495, 497, 499, 500, 501, 502, 505, 506, 507, 509, 510, 515, 537, 538, 539, 540, 563, 566, 567, 572, 573, 597, 600, 601, 603, 604, 605, 606, 607, 615, 624, 625, 627, 628, 643, 644, 663, 664, 673, 678, 679, 680, 693, 694, 695, 696, 698, 700, 706, 716, 793, 808, 809, 811, 837, 842, 853, 858, 861, 918, 919, 920, 996, 1001, 1006, 1007, 1008, 1009, 1016, 1034, 1043, 1045, 1047, 1050], "return_x_mean": 424, "reuben": 1037, "reus": [52, 172, 208, 267, 274, 322, 356, 382, 394, 412, 413, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 639, 651, 653, 654, 657, 663, 665, 667, 671, 672, 673, 674, 681, 682, 683, 685, 866, 867, 1014, 1018, 1030, 1044, 1054], "reuter": [367, 375], "reuters21578": 47, "reuterspars": 47, "rev": [380, 612, 613], "revamp": [382, 1047], "reveal": [43, 52, 188, 190, 354, 386, 409, 1003, 1053], "revers": [107, 170, 220, 273, 539, 546, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 794, 869, 1006, 1037, 1038, 1047, 1049, 1053], "revert": [122, 408, 635, 637, 638, 1044, 1049, 1054], "review": [290, 319, 367, 375, 382, 383, 385, 386, 392, 395, 416, 417, 540, 546, 1006, 1016], "revillet": 1037, "revis": [395, 675], "revisit": [412, 423, 448], "revolv": 1003, "reward": 380, "reweight": [135, 355, 394, 414, 419, 595, 596, 653, 674, 685], "reweight_covari": [473, 478], "rewrit": [386, 392, 1022, 1037], "rewritten": [380, 654, 1039, 1041], "rey": 1052, "reza": 1047, "rezazadeh": 1050, "rf": [140, 141, 155, 158, 159, 190, 322, 363, 419, 572, 574, 575], "rf_123": 363, "rf__n_estim": 419, "rf_appli": 140, "rf_applyfunctiontransform": 140, "rf_cst": 329, "rf_inst": 363, "rf_leaves_yield": 140, "rf_model": 140, "rf_no_cst": 329, "rf_pipelin": 156, "rfc": [64, 255, 322, 1034], "rfc_disp": [255, 322, 1034], "rfe": [2, 168, 169, 403, 421, 599, 602, 607, 1037, 1041, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056], "rfecv": [2, 169, 403, 421, 598, 602, 607, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056], "rfrandomforestregressor": 159, "rgb": [375, 420, 498, 499, 588, 589, 592], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1044, "rho": [226, 417, 682, 1002, 1020, 1038], "rho_k": 418, "ri": [412, 710, 791], "ribeiro": [595, 735, 1050], "ricardo": [1040, 1050, 1051, 1054], "ricardojnf": 1050, "riccadonna": 748, "riccardo": [1048, 1054], "rice": [50, 306, 375, 503, 1050], "rich": [85, 151, 388, 392, 412, 443, 1030, 1048, 1051], "richard": [375, 421, 663, 1038, 1047, 1049, 1051, 1052, 1055], "richardscottoz": 1050, "richer": [85, 130, 412], "richi": 1045, "rick": 1048, "ricker": 130, "ricker_funct": 130, "ricker_matrix": 130, "rickiepark": 1044, "rid": [48, 1020], "riddel": [1040, 1042, 1044], "ridg": [2, 24, 44, 49, 53, 87, 107, 122, 123, 138, 156, 161, 170, 171, 177, 178, 179, 183, 185, 187, 188, 189, 194, 195, 200, 205, 208, 211, 215, 216, 241, 251, 286, 314, 349, 350, 354, 367, 392, 408, 417, 419, 422, 529, 540, 544, 548, 616, 620, 627, 630, 648, 649, 650, 652, 654, 662, 666, 678, 679, 680, 683, 692, 706, 755, 805, 811, 819, 842, 915, 1006, 1007, 1014, 1016, 1020, 1021, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1050, 1051, 1052, 1053, 1055], "ridge_alpha": [544, 548, 1044], "ridge_cv": 107, "ridge_cv_with_trans_target": 107, "ridge_glm": 215, "ridge_regress": [2, 1045, 1046, 1052], "ridgeclassifi": [2, 354, 367, 677, 678, 680, 1002, 1007, 1042, 1046, 1050, 1051, 1052, 1055], "ridgeclassifiercv": [2, 403, 678, 679, 793, 1002, 1006, 1007, 1045, 1047, 1048, 1050, 1051, 1055, 1056], "ridgecv": [2, 43, 107, 156, 170, 188, 251, 394, 403, 419, 573, 648, 677, 680, 1002, 1007, 1037, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1056], "ridgecvridgecv": [156, 188], "ridgeridg": 188, "ridgewai": [147, 419], "riedmann": 1049, "ries": 1051, "rifkin": 1002, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 84, 86, 93, 95, 97, 110, 111, 113, 118, 119, 123, 124, 126, 128, 130, 135, 137, 138, 139, 148, 149, 150, 151, 158, 166, 172, 175, 184, 191, 203, 205, 216, 217, 218, 219, 221, 222, 225, 226, 242, 245, 246, 258, 260, 261, 263, 264, 267, 268, 269, 273, 276, 280, 283, 284, 286, 287, 298, 306, 308, 311, 313, 315, 318, 328, 329, 333, 343, 345, 347, 350, 352, 354, 359, 362, 363, 380, 382, 388, 392, 393, 395, 409, 411, 412, 415, 417, 418, 419, 422, 468, 486, 487, 488, 489, 539, 546, 549, 562, 563, 564, 565, 566, 567, 569, 570, 571, 592, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 640, 681, 683, 874, 917, 918, 919, 920, 921, 939, 953, 995, 998, 1000, 1002, 1004, 1006, 1008, 1009, 1013, 1018, 1020, 1021, 1022, 1026, 1030, 1032, 1039, 1045, 1051, 1053, 1054, 1056], "right_impur": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "rightarrow": [422, 624, 1010], "rijn": [374, 1045], "rileran": 1051, "rio": [1047, 1049, 1050, 1051], "ripe": 319, "rise": 177, "rishabh": 1051, "rishi": 1049, "rishikesh": 1044, "risk": [16, 48, 88, 151, 215, 219, 233, 314, 350, 363, 379, 380, 394, 406, 411, 416, 419, 572, 573, 894, 895, 897, 898, 899, 900, 1002, 1006, 1030, 1044], "riski": 233, "riskiest": [215, 233], "ritchi": 1048, "rithvik": 1049, "ritter": [1051, 1052], "ritual": 354, "rival": [43, 906, 1019], "rk": 98, "rkf": [416, 820], "rl2007": 1002, "rlm": 1047, "rm": [111, 175, 384, 388, 414], "rmse": [43, 52, 112, 151, 319, 1006, 1048], "rmse_": 319, "rmse_test_mean": 319, "rmse_test_scor": 319, "rmse_test_std": 319, "rmse_train_mean": 319, "rmse_train_scor": 319, "rmse_train_std": 319, "rmsle": 1006, "rmtree": [87, 104, 413], "rna": 392, "rnd": 314, "rng": [44, 58, 59, 67, 70, 72, 79, 83, 95, 112, 116, 121, 123, 128, 136, 148, 151, 152, 153, 155, 172, 173, 176, 178, 179, 181, 183, 184, 187, 190, 195, 196, 197, 198, 200, 204, 209, 216, 217, 222, 229, 242, 248, 249, 251, 258, 268, 276, 279, 284, 285, 305, 308, 317, 320, 323, 324, 326, 328, 329, 332, 333, 337, 346, 360, 361, 363, 368, 382, 385, 403, 425, 474, 478, 479, 480, 482, 483, 484, 485, 648, 654, 675, 677, 683, 692, 817, 844, 845, 846, 848, 849, 850, 854, 857, 859, 860, 861, 886, 898, 901, 902, 904, 905, 906, 915], "ro": 63, "road": 392, "rob": [1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1049, 1052], "robert": [0, 170, 202, 290, 377, 402, 417, 533, 540, 633, 661, 726, 728, 729, 740, 875, 996, 1002, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1052, 1055], "roberto": [412, 446, 1055], "robertson": 1050, "robin": [183, 184, 632, 996, 1043, 1046, 1051, 1052], "robinson": 1050, "robl": 1044, "robson": 1047, "robust": [2, 48, 70, 94, 96, 108, 110, 146, 148, 170, 184, 185, 188, 189, 194, 205, 217, 219, 232, 242, 252, 288, 313, 328, 369, 377, 388, 412, 419, 420, 450, 452, 473, 474, 477, 478, 479, 480, 529, 539, 564, 565, 654, 662, 675, 676, 683, 684, 755, 839, 870, 884, 886, 887, 898, 904, 951, 1006, 1010, 1012, 1016, 1019, 1020, 1025, 1027, 1028, 1030, 1031, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1053], "robust_contour": 111, "robust_cov": 111, "robust_mah": 111, "robust_scal": [2, 887, 898, 1045], "robustli": [8, 218], "robustscal": [2, 252, 886, 899, 996, 1016, 1042, 1043, 1045, 1047, 1048, 1049, 1053], "roc": [2, 50, 62, 140, 170, 185, 241, 243, 252, 253, 265, 267, 268, 275, 329, 330, 387, 410, 411, 416, 509, 515, 569, 663, 707, 711, 712, 713, 732, 787, 793, 794, 824, 835, 838, 876, 914, 1012, 1027, 1034, 1039, 1040, 1042, 1043, 1047, 1049, 1053], "roc_auc": [50, 170, 273, 277, 282, 283, 387, 639, 707, 738, 1006, 1034], "roc_auc_ovo": [1006, 1047], "roc_auc_ovo_weight": [1006, 1047], "roc_auc_ovr": [1006, 1047], "roc_auc_ovr_weight": [1006, 1047], "roc_auc_scor": [2, 62, 170, 273, 282, 322, 329, 707, 711, 712, 713, 794, 1006, 1039, 1040, 1045, 1047, 1051, 1052, 1056], "roc_curv": [2, 50, 243, 270, 282, 707, 711, 732, 787, 793, 1006, 1037, 1038, 1039, 1042, 1043, 1045, 1050, 1053, 1055], "roc_displai": 243, "rocchio": [354, 856], "rocco": [1050, 1051, 1052], "roccurvedisplai": [2, 140, 252, 255, 267, 270, 282, 283, 322, 387, 793, 794, 1012, 1034, 1047, 1053, 1054, 1055], "rock": 112, "rocklin": [379, 385], "roddi": [1046, 1047], "rodent": [50, 306, 375, 503], "roderick": 996, "rodion": 1050, "rodrigo": [1045, 1055], "rodrigu": [1044, 1045, 1050], "rodr\u00edguez": 319, "roeder": 1047, "roehr": [1053, 1054], "roei": 1049, "roeschk": 1046, "roger": [728, 1044, 1045, 1049], "rogerstanimoto": [454, 461, 704, 783, 784, 785, 1009], "rogerstanimotodist": 704, "rohan": [1042, 1043, 1045, 1046, 1050], "rohit": [1040, 1041, 1045, 1046], "roi": [1037, 1051], "roi_siz": 87, "roic": 1052, "rok": 1047, "rokem": [1037, 1043], "rokhlin": [540, 546, 953], "roland": [1039, 1040], "rolando": [1038, 1039], "role": [0, 282, 367, 379, 417], "roll": [2, 100, 185, 234, 235, 240, 383, 412, 535, 697, 698, 947, 1027, 1030, 1047, 1052], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1044, 1049], "roman": [0, 401, 632, 923, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "roman4oo": 1052, "romaniuk": 1041, "romero": 1055, "romijnd": 1049, "romuald": 1046, "ron": [0, 402, 1037], "ronald": [375, 1010, 1040, 1050], "ronan": [1037, 1040, 1045], "ronchetti": [654, 1002], "rong": 1021, "ronrubin": [669, 690, 691, 1002], "ronsin": [1045, 1046, 1054], "room": [313, 375, 385, 412, 1029], "roopam": [1045, 1046], "root": [2, 43, 111, 151, 170, 197, 362, 377, 380, 388, 412, 446, 506, 546, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 644, 795, 796, 917, 918, 919, 920, 921, 923, 1006, 1012, 1022, 1039, 1045, 1046, 1047, 1048, 1051, 1052, 1056], "root_": 446, "root_mean_squared_error": [2, 52, 151, 408, 1006, 1054, 1056], "root_mean_squared_log_error": [2, 408, 1006, 1054, 1056], "rope": 273, "rope_interv": 273, "rope_prob": 273, "rori": 1048, "rosa": 1052, "rosal": 416, "rosati": 1055, "rose": 375, "rosenberg": [412, 722, 742, 800], "rosenfeld": 1045, "ross": [539, 612, 613, 1022, 1051, 1052], "rosset": [135, 419, 524, 558], "rossi": 1040, "rosslimlinyang_ijcv": 539, "rostamizadeh": 995, "rostomyan": 1045, "rotat": [47, 75, 115, 120, 123, 126, 128, 147, 158, 185, 191, 238, 284, 285, 292, 343, 349, 415, 417, 422, 424, 509, 537, 546, 555, 619, 702, 889, 921, 1002, 1027, 1048, 1049], "rotation_mod": 284, "rotations_": 555, "roth": [1042, 1045, 1052], "rough": [25, 400, 1012], "roughli": [135, 148, 204, 264, 283, 293, 318, 367, 394, 417, 420, 524, 1003, 1037], "rouli": 1040, "round": [46, 48, 62, 115, 141, 151, 183, 184, 222, 233, 273, 279, 315, 317, 354, 394, 454, 460, 461, 569, 570, 598, 599, 602, 632, 697, 718, 807, 817, 874, 906, 921, 923, 996, 1010, 1022, 1039, 1041, 1043, 1045, 1046, 1048, 1050, 1051, 1053, 1054], "rounded_list": 817, "rouseeuw1984": 478, "rousseeuw": [111, 112, 412, 414, 473, 478, 797, 798, 1012], "rousseuw": [111, 112], "rout": [2, 61, 133, 185, 197, 241, 267, 330, 426, 429, 432, 435, 436, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 962, 963, 964, 965, 989, 1027, 1032, 1051, 1053], "route_param": [249, 962], "routed_param": [249, 965], "routemappingpair": 962, "router": [2, 249, 394, 403, 962, 963, 964, 965], "routerconsumerclassifi": 249, "routerconsumerclassifierifittedrouterconsumerclassifi": 249, "routin": [329, 369, 374, 377, 380, 381, 382, 383, 388, 392, 394, 421, 677, 679, 692, 852, 911, 912, 913, 914, 915, 1003, 1009, 1016, 1017, 1020, 1030, 1037, 1051, 1052, 1053], "routing_info": 962, "routlei": 1043, "rouvinen": 1042, "roux": [663, 1002, 1019], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 93, 107, 118, 119, 141, 144, 154, 157, 183, 215, 216, 217, 243, 246, 252, 253, 267, 315, 362, 367, 375, 382, 389, 393, 394, 409, 412, 415, 420, 427, 446, 447, 451, 453, 454, 455, 457, 460, 461, 463, 468, 472, 492, 494, 495, 497, 498, 499, 500, 505, 506, 507, 509, 510, 515, 516, 518, 531, 539, 547, 553, 556, 595, 596, 625, 633, 637, 648, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 697, 701, 702, 715, 723, 724, 730, 763, 764, 768, 771, 773, 774, 775, 776, 778, 779, 781, 783, 784, 785, 786, 802, 803, 838, 844, 845, 846, 847, 848, 854, 857, 858, 859, 860, 861, 864, 875, 879, 881, 882, 884, 894, 895, 896, 899, 900, 903, 907, 926, 931, 935, 936, 953, 976, 979, 983, 985, 987, 988, 991, 992, 995, 996, 998, 1000, 1002, 1004, 1006, 1007, 1009, 1016, 1017, 1020, 1021, 1026, 1044, 1045, 1046, 1047, 1052], "row_compl": 57, "row_id_attribut": 374, "row_idx": [59, 215], "row_idx_shuffl": 58, "row_ind": [427, 455, 457], "row_indic": 151, "row_labels_": [57, 58, 59, 409, 455, 457], "row_norm": 261, "rowan": 1052, "rowei": [694, 698, 858, 1003, 1009], "rows_": [57, 409, 427, 455, 457], "royal": [546, 632, 885, 897, 1020], "rp": 246, "rpath": 378, "rr2007": 998, "rragundez": 1045, "rsalakhu": 649, "rsh": [285, 324], "rskf": 821, "rsme": 1006, "rsnegrin": 1051, "rsplit": [45, 55, 274], "rst": [368, 380, 388, 1037], "rstride": 189, "rt": 140, "rt_model": 140, "rtn": 51, "rtol": [382, 849, 850, 854], "ruben": 1052, "rubi": 1049, "rubia": 1040, "rubial": 1050, "rubin": 996, "rubinstein": [669, 690, 691], "rubric": 1003, "ruchitagard": 1047, "rudi": 1043, "rudresh": 1052, "ruff": [380, 398, 405], "ruifeng": [1043, 1044, 1049], "ruin": 380, "ruiter": 1052, "rule": [2, 13, 27, 43, 64, 141, 193, 267, 359, 362, 363, 367, 377, 380, 381, 382, 392, 394, 395, 407, 410, 411, 412, 416, 417, 419, 421, 541, 554, 555, 556, 557, 558, 566, 567, 574, 575, 599, 607, 639, 650, 663, 664, 671, 672, 673, 678, 680, 681, 682, 683, 711, 712, 716, 805, 808, 809, 811, 819, 827, 828, 831, 832, 833, 834, 836, 858, 909, 922, 995, 1000, 1008, 1009, 1020, 1022, 1026, 1032, 1039, 1042, 1049, 1054], "ruleset": 1022, "rumelhart": 1010, "rumsfeld": [45, 375], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 378, 380, 381, 382, 384, 385, 386, 387, 388, 392, 394, 395, 398, 399, 406, 408, 412, 414, 416, 419, 422, 423, 424, 441, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 468, 471, 472, 475, 476, 536, 537, 538, 539, 540, 542, 544, 546, 547, 548, 550, 551, 553, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 587, 597, 599, 600, 601, 603, 604, 605, 607, 615, 616, 635, 639, 645, 651, 652, 654, 656, 657, 658, 660, 661, 665, 666, 667, 668, 687, 688, 693, 694, 695, 696, 697, 698, 699, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 841, 842, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 866, 867, 868, 871, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 926, 928, 947, 948, 976, 979, 995, 1005, 1007, 1010, 1019, 1021, 1022, 1025, 1026, 1030, 1037, 1040, 1042, 1044, 1045, 1046, 1047, 1051, 1052, 1053, 1056], "run_histori": 47, "run_id": 94, "run_tim": [230, 231], "rung": 1016, "runnabl": [54, 384, 385], "runtim": [30, 47, 49, 91, 135, 201, 230, 232, 247, 311, 315, 368, 382, 383, 392, 394, 406, 412, 419, 454, 568, 684, 819, 909, 910, 911, 912, 913, 914, 915, 1020, 1021, 1040, 1044, 1045, 1051, 1052, 1054, 1055, 1056], "runtime_histori": 47, "runtimewarn": 181, "runxfail": 388, "rupesh": 1040, "rush": [43, 52, 380], "rushabh": 1048, "rushil": [1052, 1053], "russ": [633, 996], "russel": [1043, 1044], "russellrao": [454, 461, 704, 783, 784, 785, 1009], "russellraodist": 704, "russian": 420, "ruth": 1047, "rutter": 1050, "ruusmann": 1043, "rv": [0, 809, 817, 819, 995, 1037, 1038, 1041, 1042, 1043, 1044, 1045], "rv_discrete_frozen": 285, "rvd": [473, 478], "rvdriessen": [473, 478], "rw2006": [422, 615, 616], "rwelsch427": 1055, "ryad": 1043, "ryan": [1040, 1043, 1045, 1046], "ryb": 359, "ryder": 51, "ryotaro": 1049, "r\u00e9my": 1043, "r\u00fcdiger": [1045, 1046, 1048], "s1": [122, 170, 180, 202, 204, 377], "s2": [122, 170, 180, 202, 204, 377, 555], "s22": 503, "s3": [57, 122, 170, 202, 204, 377], "s4": [170, 202, 204, 377], "s5": [170, 202, 204, 377, 1014], "s6": [170, 202, 204, 377], "s_": [122, 277, 1002, 1003, 1014, 1016], "s__p": 869, "s_color": 235, "s_hessian": 235, "s_i": [412, 1002, 1016], "s_ica_": 123, "s_isomap": 235, "s_j": 412, "s_ltsa": 235, "s_mod": 235, "s_pca_": 123, "s_point": 235, "s_scale": 235, "s_spectral": 235, "s_standard": 235, "s_t_sne": 235, "sa": [375, 497], "saaba": 1042, "saad": 1055, "sabharw": 1047, "sabri": 1052, "sach": 51, "sachdev": 1052, "sachdeva": 1044, "sachin": [1044, 1045, 1051], "sackei": 1047, "saclai": 0, "sacr": 1025, "sad": [823, 824], "sadak": 1049, "sadhana": 1045, "sadli": 148, "sadra": 1053, "sad\u0142ocha": 1050, "saeed": 1006, "saeger": [1042, 1043, 1044], "safari": 1016, "safe": [2, 72, 188, 204, 267, 355, 380, 382, 412, 413, 437, 469, 513, 514, 572, 573, 598, 602, 779, 783, 833, 834, 836, 868, 903, 971, 977, 1009, 1043, 1044, 1045, 1050, 1051], "safe_copi": 1044, "safe_index": [389, 1047], "safe_mask": [2, 389], "safe_realloc": 1040, "safe_sparse_dot": [2, 389, 1047], "safe_sqr": [2, 389], "safeguard": 406, "safer": [355, 363, 378, 412, 416, 1037], "safest": [215, 233, 363, 374], "safeti": [102, 392, 413, 971, 1026, 1047], "safikh": 1052, "safiuddin": 1052, "sag": [207, 222, 663, 664, 677, 679, 692, 1002, 1020, 1042, 1043, 1044, 1046, 1047], "sag_solv": 1046, "saga": [66, 206, 230, 231, 663, 664, 677, 679, 692, 819, 1002, 1044, 1046], "sagar": 1047, "sagnik": 1045, "saha": 1051, "sahil": 1053, "sahin": 1047, "sahu": 1049, "sai": [201, 242, 350, 354, 355, 380, 410, 412, 413, 417, 419, 420, 450, 451, 505, 509, 515, 682, 995, 1012, 1019, 1030, 1054, 1055], "said": [151, 188, 242, 274, 375, 380, 797, 1004, 1012], "saihttam": 1043, "sailesh": [1044, 1045], "saint": 1043, "saito": [417, 543, 545, 552, 1044], "saiw": 1043, "sake": [43, 64, 148, 151, 184, 188, 215, 318, 347, 354, 356, 388, 392, 675], "saket": [1041, 1042, 1049], "sakinaouisrani": 1051, "salahuddin": 1052, "salakhutdinov": [649, 858, 1009], "salamin": 1041, "sale": [145, 252, 273, 1006, 1030], "saleem": 1047, "salerno": 377, "salim": [1054, 1055], "sallisaw": [413, 470], "salman": [0, 401, 1052, 1053, 1054, 1055, 1056], "salt": [67, 247, 315, 1051], "salvator": [1037, 1051, 1052, 1054, 1055], "salz": 1044, "salzmann": [215, 233], "sam": [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "sambhav": 1048, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 86, 88, 90, 91, 97, 102, 103, 104, 119, 121, 123, 126, 128, 130, 136, 138, 142, 145, 148, 149, 151, 154, 170, 172, 188, 189, 191, 201, 202, 204, 209, 215, 216, 217, 223, 233, 249, 253, 263, 267, 268, 269, 270, 271, 273, 274, 276, 278, 279, 281, 286, 287, 293, 296, 298, 310, 313, 314, 316, 318, 319, 322, 324, 335, 343, 354, 355, 356, 362, 363, 367, 368, 369, 374, 375, 377, 379, 380, 382, 384, 386, 388, 389, 392, 393, 394, 395, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 433, 437, 442, 443, 450, 454, 460, 469, 473, 474, 475, 476, 477, 478, 479, 480, 482, 498, 500, 501, 503, 509, 513, 514, 536, 537, 540, 541, 542, 543, 544, 545, 548, 552, 554, 556, 557, 558, 559, 562, 564, 565, 566, 567, 569, 570, 572, 573, 594, 595, 607, 608, 611, 615, 616, 618, 627, 632, 633, 634, 637, 638, 651, 654, 657, 658, 660, 663, 664, 668, 671, 672, 673, 677, 678, 679, 680, 681, 682, 683, 689, 692, 704, 709, 710, 717, 718, 720, 722, 731, 736, 737, 741, 760, 761, 762, 783, 784, 785, 791, 793, 797, 799, 800, 802, 803, 805, 806, 808, 809, 811, 813, 814, 819, 823, 824, 827, 828, 830, 831, 832, 833, 834, 835, 836, 851, 852, 853, 857, 859, 860, 861, 872, 873, 874, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 891, 898, 909, 910, 917, 919, 930, 937, 941, 953, 971, 976, 979, 980, 990, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1026, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "same_kind": 1054, "samesh": [1047, 1048], "samm": [135, 419, 558, 1053, 1054], "samoocha": 1045, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 80, 82, 86, 89, 90, 91, 92, 93, 98, 111, 112, 113, 116, 118, 119, 121, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 141, 144, 145, 147, 148, 149, 151, 152, 157, 158, 159, 167, 169, 170, 172, 176, 177, 178, 179, 181, 183, 185, 188, 189, 193, 194, 200, 201, 202, 204, 215, 217, 219, 222, 223, 225, 226, 227, 229, 231, 232, 233, 235, 242, 246, 247, 249, 250, 252, 258, 259, 261, 262, 263, 264, 265, 267, 268, 272, 273, 275, 276, 277, 279, 281, 285, 287, 288, 292, 293, 297, 298, 299, 300, 302, 303, 304, 306, 311, 313, 315, 316, 317, 318, 320, 322, 324, 325, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 343, 345, 347, 348, 350, 351, 354, 355, 359, 362, 367, 373, 375, 376, 379, 380, 382, 383, 392, 393, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 429, 430, 431, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 460, 461, 462, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 615, 616, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 692, 693, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 766, 768, 769, 773, 774, 775, 776, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 931, 935, 936, 940, 941, 953, 957, 974, 976, 979, 980, 983, 986, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "sample_i": [181, 422, 616, 1051], "sample_id": [362, 375, 502], "sample_interv": 643, "sample_interval_": 1053, "sample_posterior": [184, 632, 996], "sample_s": [91, 247, 355, 798], "sample_score_mean": 277, "sample_score_std": 277, "sample_silhouette_valu": 93, "sample_step": 643, "sample_weight": [61, 197, 215, 228, 233, 249, 323, 328, 329, 352, 380, 394, 403, 412, 419, 423, 429, 435, 441, 447, 448, 451, 453, 463, 464, 469, 473, 486, 487, 488, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 615, 616, 637, 638, 639, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 702, 703, 705, 707, 708, 712, 713, 714, 717, 718, 721, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 739, 740, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 801, 804, 805, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 874, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 965, 993, 1006, 1020, 1021, 1022, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "sample_weight1": 249, "sample_weight2": 249, "sample_weight_const": 352, "sample_weight_last_ten": 352, "sample_weight_vect": 941, "sample_without_replac": [2, 389, 1043], "samples_weight": 228, "samplewis": [759, 1006], "samson": 1044, "samuel": [701, 1030, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "samuela": 1040, "samu\u00ebl": 1044, "san": [170, 377, 420, 1018], "sanchez": [1045, 1046], "sandbox": 406, "sandeep": 1049, "sander": [412, 423, 448, 450, 454, 461, 855, 1012, 1046, 1047], "sandi": 1050, "sandip": [1054, 1055], "sandra": [1046, 1052], "sandro": [1045, 1052], "sandrocasagrand": [1045, 1046], "sandrovskii": 1044, "sangam": 1052, "sangamswadik": 1052, "sangeeth": 1046, "saniti": [383, 873, 1006, 1037, 1038], "sanjabi": 1047, "sanjai": 1051, "sanjai_3": [1052, 1053], "sanjoi": [903, 1018], "sano": 1051, "sanofi": 51, "santa": [180, 1052], "santana": [1048, 1051], "santhanam": 1045, "santhosh": 1048, "santhoshbala18": 1048, "santi": [1042, 1044, 1045], "santiago": 1048, "sap": 51, "sapiro": [417, 536, 542], "saqib": 1045, "sara": 1050, "sarah": [1044, 1046, 1049], "sarahremu": [1052, 1055], "sarajpoor": 1052, "sarat": 1048, "sarawagi": 788, "sarra": 1047, "sartaj": 1043, "sasank": 1043, "sashka": [1052, 1053], "sass": [380, 398, 405], "sassenhagen": [1049, 1054], "sat": [43, 151, 189, 420], "satellit": 1009, "satisfi": [412, 655, 659, 704, 722, 741, 742, 849, 850], "satish": 1045, "sato": 1040, "satrajit": [0, 402, 1037, 1038], "satur": [72, 188, 313], "sauerbrei": 1016, "sauerkraut": 420, "saul": [694, 698, 1003, 1044, 1045, 1047], "saurabh": [1041, 1042, 1043, 1044, 1045, 1049], "sauvignon": 319, "saval": 1046, "savard": 1037, "save": [86, 102, 104, 252, 311, 379, 380, 384, 386, 387, 388, 394, 406, 416, 424, 472, 496, 539, 540, 632, 849, 850, 907, 1002, 1006, 1016, 1022, 1030, 1037, 1040, 1044, 1047, 1055], "savings_statu": 267, "savkomax": 1052, "saw": [122, 216, 219], "sawtooth": 122, "say_hello": 966, "sc": [374, 412], "scaja": 1054, "scala": 1026, "scalabl": [77, 79, 95, 185, 192, 247, 265, 327, 355, 380, 412, 419, 420, 452, 495, 507, 594, 645, 811, 822, 833, 835, 847, 870, 879, 881, 909, 911, 914, 915, 998, 1001, 1003, 1006, 1019, 1021, 1027, 1030, 1037, 1040, 1041, 1047, 1048, 1051, 1052], "scalar": [2, 121, 325, 330, 386, 394, 408, 413, 422, 424, 468, 471, 529, 538, 620, 621, 622, 627, 628, 632, 633, 635, 743, 747, 931, 939, 998, 1010, 1012, 1016, 1020, 1025, 1047, 1048, 1051, 1053, 1056], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 80, 81, 89, 91, 94, 103, 104, 110, 113, 116, 123, 126, 146, 153, 170, 172, 173, 174, 177, 178, 179, 185, 189, 193, 196, 197, 202, 206, 215, 217, 219, 229, 230, 231, 233, 234, 237, 242, 248, 252, 263, 270, 273, 274, 275, 276, 280, 296, 298, 309, 310, 311, 312, 313, 317, 323, 326, 328, 329, 337, 338, 340, 343, 347, 363, 366, 367, 372, 373, 374, 377, 380, 385, 389, 392, 393, 394, 412, 413, 417, 419, 420, 421, 422, 450, 451, 454, 455, 461, 468, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 506, 515, 519, 520, 529, 539, 543, 545, 546, 552, 554, 555, 566, 567, 587, 595, 596, 602, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 646, 649, 650, 651, 652, 654, 657, 663, 664, 665, 666, 667, 677, 679, 681, 682, 683, 686, 692, 693, 694, 695, 697, 699, 704, 708, 721, 746, 752, 762, 764, 774, 780, 782, 819, 822, 835, 836, 837, 849, 850, 851, 866, 867, 870, 873, 878, 879, 881, 884, 886, 887, 889, 894, 895, 896, 898, 899, 901, 902, 909, 910, 911, 912, 913, 914, 915, 980, 981, 982, 983, 986, 995, 998, 999, 1002, 1006, 1007, 1008, 1009, 1010, 1014, 1020, 1021, 1026, 1027, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "scale_": [654, 878, 879, 887, 889, 899, 1016, 1042], "scaled_clf": 318, "scaled_pca": 318, "scaled_x_train": 318, "scaler": [45, 103, 105, 152, 168, 185, 231, 232, 247, 252, 254, 256, 287, 296, 301, 312, 317, 318, 327, 343, 346, 363, 385, 413, 416, 494, 663, 664, 677, 679, 692, 869, 878, 879, 881, 885, 886, 887, 889, 894, 895, 896, 897, 898, 899, 900, 1010, 1016, 1020, 1027, 1037, 1042, 1045, 1050], "scaler2": 256, "scalewai": 388, "scaling_": 555, "scalings_": [554, 555], "scanpi": 1054, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 82, 85, 89, 90, 91, 92, 93, 95, 100, 111, 116, 119, 123, 125, 126, 127, 129, 136, 137, 141, 144, 152, 154, 155, 157, 163, 165, 172, 173, 174, 176, 178, 179, 180, 181, 187, 188, 193, 196, 199, 205, 207, 211, 212, 213, 216, 217, 218, 224, 227, 228, 229, 232, 235, 236, 237, 238, 239, 240, 242, 247, 248, 250, 258, 259, 260, 261, 262, 263, 264, 268, 274, 276, 288, 293, 296, 299, 300, 301, 302, 303, 304, 305, 308, 313, 315, 316, 318, 326, 334, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 354, 359, 360, 361, 376, 414, 636, 706, 1000, 1002], "scatter_": 706, "scatter_fig": 141, "scatter_kwarg": [43, 52, 107, 156, 188, 706], "scatter_trac": 141, "scatterplot": [115, 195, 273], "scatterpoint": [125, 129, 238, 260, 334], "scenario": [90, 102, 151, 172, 193, 219, 276, 363, 387, 398, 411, 416, 419, 542, 548, 550, 551, 1000, 1006, 1016, 1047], "scene": [377, 388, 1009, 1011, 1050], "schapir": [50, 290, 306, 375, 419, 503, 558, 559], "schedul": [151, 309, 368, 384, 681, 682, 683, 866, 867, 1020, 1030, 1044], "scheidegg": 1037, "scheme": [282, 298, 319, 320, 375, 384, 394, 412, 416, 418, 420, 571, 595, 663, 664, 710, 818, 852, 876, 877, 880, 882, 886, 890, 893, 898, 909, 914, 995, 1002, 1016, 1020, 1037, 1045, 1048, 1049, 1054, 1055], "scherer": 1043, "scheubrein": 1049, "schloss": 1006, "schl\u00fcter": [1037, 1045], "schmerler": 1052, "schmid": [763, 764, 1004], "schmidt": [663, 1002, 1040], "schmitt": [1047, 1048], "schmitz": 1054, "schneider": [354, 1050, 1055], "schoelkopf": 905, "schoentgen": [1045, 1046], "schofield": 1037, "schole": 1049, "scholkopf1997": 417, "scholkopf1998": 1016, "scholz": 1055, "school": [102, 177, 188, 377, 412, 793, 1006], "schreiber": [0, 402, 1042, 1043, 1044], "schroeder": [45, 375], "schubert": [412, 423, 448, 454, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1055], "schucker": 1043, "schuder": [1045, 1046, 1047], "schuetz": [844, 848], "schuldt": 1041, "schult": 55, "schulz": 1037, "schumach": [1040, 1041, 1042], "schut": 1037, "schwardt": 1037, "schwartz": [1037, 1039, 1051], "schwetlick": [1048, 1049], "sch\u00f6lkopf": [44, 417, 540, 875, 1012, 1016, 1021], "sch\u00f6nberger": [1039, 1040], "sch\u00fctze": [417, 595, 1004, 1006, 1008], "sci": [57, 102, 354, 355, 356, 375, 392, 492, 694, 698, 880, 1003, 1016], "scibol": 1048, "scienc": [0, 73, 111, 170, 180, 188, 290, 374, 377, 392, 412, 444, 458, 543, 545, 552, 693, 694, 698, 856, 996, 998, 1002, 1003, 1006, 1009, 1018, 1026, 1030, 1045], "scientif": [0, 68, 247, 374, 378, 392, 398, 412, 456, 466, 506, 1030, 1032], "scientist": [996, 1030], "scikera": 1025, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 368, 369, 372, 374, 375, 376, 377, 379, 380, 383, 386, 387, 388, 389, 393, 394, 399, 400, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 426, 427, 429, 430, 431, 432, 434, 435, 436, 442, 447, 450, 451, 454, 461, 468, 469, 471, 472, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 517, 520, 526, 529, 543, 546, 566, 567, 569, 570, 572, 581, 586, 587, 588, 594, 604, 607, 616, 631, 633, 635, 637, 639, 643, 645, 651, 653, 657, 663, 674, 685, 693, 702, 705, 706, 707, 722, 723, 737, 747, 753, 783, 784, 785, 793, 800, 804, 805, 806, 807, 808, 809, 810, 811, 819, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 837, 838, 851, 853, 869, 870, 872, 874, 876, 879, 881, 882, 883, 884, 888, 889, 890, 893, 906, 907, 909, 914, 917, 918, 925, 927, 947, 948, 958, 971, 972, 995, 996, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1019, 1020, 1021, 1022, 1024, 1027, 1029, 1032, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "scikit_learn": 1025, "scikit_learn_data": [52, 375, 490, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504], "scipi": [0, 2, 45, 53, 55, 57, 76, 80, 81, 86, 87, 109, 110, 113, 122, 124, 128, 147, 172, 188, 191, 201, 205, 259, 263, 264, 270, 273, 281, 285, 293, 298, 303, 311, 323, 324, 329, 330, 332, 333, 367, 374, 375, 378, 380, 382, 386, 388, 389, 392, 393, 394, 398, 405, 406, 408, 409, 412, 417, 420, 454, 455, 456, 457, 461, 466, 467, 501, 508, 513, 537, 539, 540, 546, 549, 586, 587, 590, 591, 593, 594, 615, 616, 653, 654, 658, 662, 663, 664, 668, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 685, 689, 692, 696, 697, 700, 724, 765, 768, 783, 784, 785, 786, 797, 798, 809, 817, 819, 835, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 866, 872, 881, 882, 887, 888, 889, 892, 896, 899, 900, 909, 911, 912, 914, 915, 950, 954, 955, 960, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 995, 996, 1002, 1004, 1007, 1009, 1010, 1016, 1020, 1021, 1024, 1026, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1056], "sckit": 1053, "scls19fr": 1042, "scognamiglio": 419, "scope": [45, 57, 267, 367, 369, 380, 392, 420, 1025, 1026], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 91, 93, 102, 103, 104, 105, 106, 107, 109, 113, 116, 128, 133, 135, 137, 144, 145, 146, 147, 148, 151, 152, 155, 156, 162, 165, 166, 167, 170, 183, 185, 187, 188, 189, 190, 191, 193, 200, 206, 207, 210, 215, 217, 221, 223, 231, 233, 242, 247, 248, 249, 252, 256, 262, 265, 267, 271, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 287, 288, 290, 292, 300, 301, 302, 308, 309, 310, 311, 315, 318, 319, 320, 322, 323, 324, 325, 329, 330, 332, 333, 335, 336, 343, 350, 354, 355, 358, 363, 375, 380, 382, 385, 393, 394, 406, 407, 408, 409, 410, 411, 413, 415, 417, 419, 421, 429, 431, 435, 441, 447, 451, 453, 456, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 507, 509, 537, 541, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 614, 615, 616, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 747, 760, 761, 762, 787, 788, 789, 790, 791, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 819, 824, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 855, 856, 858, 859, 860, 865, 866, 867, 869, 889, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 925, 927, 955, 995, 998, 1002, 1004, 1009, 1012, 1014, 1016, 1020, 1026, 1027, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 278, "score_estim": [215, 233], "score_full_data": 183, "score_func": [72, 103, 104, 421, 597, 600, 601, 603, 604, 605, 747, 1037, 1039, 1054], "score_iri": 279, "score_iterative_imput": 183, "score_label": [233, 279], "score_mean": 346, "score_nam": [62, 72, 248, 275, 328, 355, 811, 828], "score_param": [598, 599, 664, 1054], "score_rand": 279, "score_sampl": [262, 298, 299, 300, 306, 394, 418, 473, 537, 546, 568, 682, 802, 803, 805, 808, 809, 819, 854, 855, 865, 869, 913, 1012, 1040, 1045, 1047, 1049], "score_simple_imput": 183, "score_std": 346, "score_tim": [275, 416, 832, 833], "score_times_nb": 275, "score_times_svm": 275, "score_typ": [248, 275, 286, 328, 811, 828, 1053], "score_valu": 355, "scorer": [2, 151, 156, 233, 249, 267, 277, 329, 382, 394, 403, 411, 416, 419, 421, 566, 567, 599, 607, 639, 664, 678, 680, 716, 737, 738, 747, 805, 808, 809, 811, 819, 827, 828, 831, 832, 833, 834, 836, 963, 995, 1002, 1006, 1014, 1026, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "scorer1_nam": 416, "scorer2_nam": 416, "scorer_": [805, 808, 809, 819], "scorer_nam": [277, 805, 819], "scores_": [195, 196, 597, 600, 601, 603, 604, 605, 649, 650, 664, 1037, 1047], "scores_df": 52, "scores_glm_pure_premium": 233, "scores_matrix": 284, "scores_max": 55, "scores_product_model": 233, "scores_std": 161, "scoring_cal": 716, "scoring_inner_cv": 329, "scoring_on_bootstrap": 276, "scoring_weight": 403, "scott": [418, 854, 1037, 1038, 1043, 1045, 1046, 1047, 1052, 1053], "scottlog": 1055, "scratch": [381, 446, 1006, 1039], "screen": [48, 1050], "screenporch": 145, "screenshot": 378, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 368, 380, 381, 382, 383, 384, 386, 392, 394, 398, 406, 420, 1026, 1029], "scroll": 400, "scrollbar": 385, "scrutin": 282, "scsi": 57, "scullei": 412, "sdenton4": 1040, "sdg_param": 336, "se": [170, 237, 377, 398], "seabold": [1040, 1042, 1043], "seaborn": [72, 136, 151, 187, 188, 195, 200, 263, 273, 380, 398, 405, 1025], "seagreen": 209, "seal": 1043, "seamu": 1039, "sean": [1049, 1050, 1052], "seanpwilliam": 1044, "sear": 1043, "search": [2, 45, 52, 64, 80, 87, 103, 104, 105, 106, 148, 165, 167, 169, 170, 172, 185, 233, 248, 249, 263, 265, 267, 272, 274, 277, 278, 280, 285, 292, 293, 295, 297, 311, 315, 327, 343, 349, 354, 363, 377, 378, 380, 382, 392, 394, 407, 412, 413, 416, 419, 420, 421, 423, 447, 452, 454, 456, 461, 462, 465, 468, 475, 476, 482, 507, 520, 527, 562, 563, 564, 565, 569, 570, 571, 584, 604, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 633, 658, 681, 693, 694, 697, 698, 718, 733, 790, 793, 805, 808, 809, 816, 817, 819, 821, 835, 836, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 869, 914, 917, 918, 919, 920, 959, 993, 999, 1001, 1003, 1006, 1009, 1010, 1020, 1022, 1026, 1027, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049, 1051, 1052, 1054, 1056], "search_05p": 148, "search_95p": 148, "search_cv": 103, "searchcv": [393, 1052], "searchforpass": 1053, "searchgrid": 1026, "searchsort": 50, "season": [43, 52, 177, 189, 216, 379], "seasonal_kernel": 177, "seasoncountcatu32": 52, "sebastian": [1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054], "sebastien": 1045, "sebastin": [1044, 1045], "sebasti\u00e1n": 1043, "seberg": 1038, "sec": [49, 223, 237, 240, 293], "sec65": 1052, "secant": 647, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 375, 382, 386, 394, 409, 411, 412, 416, 417, 419, 420, 422, 468, 471, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 509, 515, 558, 588, 593, 594, 595, 596, 626, 629, 636, 637, 704, 717, 721, 763, 764, 768, 769, 771, 772, 779, 780, 781, 782, 783, 786, 805, 808, 809, 819, 833, 839, 840, 843, 846, 857, 859, 860, 861, 866, 867, 995, 996, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1022, 1052], "secondari": [640, 1041], "secondli": [378, 392, 412, 419, 662, 1002], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 121, 126, 138, 146, 151, 156, 161, 162, 163, 177, 181, 187, 188, 189, 191, 195, 200, 202, 204, 217, 239, 243, 249, 252, 254, 267, 271, 273, 276, 282, 318, 319, 320, 324, 354, 355, 356, 363, 373, 375, 378, 380, 381, 382, 384, 385, 386, 387, 388, 395, 403, 410, 411, 413, 415, 416, 417, 419, 420, 421, 422, 443, 447, 463, 539, 619, 624, 627, 642, 650, 793, 803, 911, 914, 995, 1000, 1002, 1006, 1007, 1009, 1010, 1012, 1013, 1020, 1021, 1022, 1023, 1037, 1039, 1040, 1041, 1044], "sector": 188, "sector_construct": 188, "sector_manufactur": 188, "sector_oth": 188, "secur": [384, 394, 1025, 1026, 1030, 1032], "sed": [384, 1037], "sedamaki": 1051, "sedykh": 1052, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 82, 83, 86, 88, 90, 91, 95, 97, 98, 100, 101, 111, 116, 118, 121, 126, 127, 131, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 156, 161, 166, 167, 168, 170, 172, 177, 178, 179, 183, 185, 188, 189, 191, 193, 195, 196, 197, 200, 206, 216, 217, 218, 219, 221, 232, 233, 235, 237, 244, 246, 249, 252, 253, 254, 256, 259, 260, 261, 266, 267, 268, 270, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 287, 288, 290, 293, 299, 300, 302, 306, 313, 319, 320, 322, 323, 324, 325, 326, 327, 328, 334, 343, 347, 350, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 372, 373, 374, 375, 377, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 400, 406, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 495, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 614, 615, 616, 619, 624, 627, 628, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 706, 711, 713, 716, 718, 748, 768, 779, 783, 784, 785, 786, 793, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 952, 953, 974, 976, 979, 989, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 85, 87, 90, 92, 93, 97, 98, 103, 109, 110, 111, 119, 122, 127, 138, 144, 163, 165, 190, 205, 210, 213, 218, 221, 224, 228, 232, 238, 259, 261, 262, 263, 264, 276, 279, 288, 298, 299, 300, 347, 348, 352, 355, 363, 368, 382, 389, 392, 394, 412, 416, 417, 447, 451, 452, 454, 456, 461, 463, 464, 465, 466, 475, 476, 477, 541, 549, 558, 559, 560, 561, 564, 565, 632, 651, 652, 657, 658, 665, 666, 667, 668, 682, 694, 696, 698, 700, 802, 803, 809, 840, 843, 858, 912, 938, 952, 953, 970, 974, 995, 996, 1001, 1003, 1041, 1042, 1046, 1047, 1053], "seeger": [644, 998], "seek": [235, 237, 239, 379, 380, 392, 395, 513, 514, 1003], "seel": 1051, "seem": [43, 48, 52, 80, 88, 148, 151, 178, 189, 215, 239, 242, 274, 290, 309, 317, 350, 354, 355, 379, 380, 385, 411, 416, 506, 1002, 1006], "seemingli": [233, 363, 392], "seen": [55, 62, 75, 88, 99, 113, 124, 130, 142, 148, 151, 188, 189, 211, 239, 245, 249, 309, 313, 343, 354, 375, 382, 384, 393, 394, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 428, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 526, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 628, 632, 633, 634, 635, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 980, 986, 995, 1001, 1006, 1009, 1010, 1016, 1022, 1030, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "segfault": [368, 381, 1037, 1045, 1050], "segment": [51, 53, 55, 59, 71, 81, 86, 124, 185, 238, 245, 375, 388, 412, 420, 456, 466, 513, 514, 696, 865, 1006, 1027, 1030, 1045, 1047, 1049], "seguin": 1042, "sei": 420, "seismic_r": [195, 200], "sejourn": 1046, "sel": [403, 421], "seladu": 1053, "seldom": 909, "sele": [1051, 1052], "selecci\u00f3n": 319, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 84, 88, 90, 95, 101, 103, 106, 113, 119, 120, 121, 130, 131, 135, 137, 143, 145, 148, 151, 156, 165, 167, 177, 179, 188, 189, 191, 193, 194, 196, 198, 200, 201, 203, 214, 219, 223, 230, 233, 236, 242, 246, 248, 252, 257, 258, 259, 260, 267, 271, 272, 273, 274, 278, 286, 287, 297, 313, 318, 319, 324, 328, 330, 332, 333, 336, 338, 343, 350, 354, 355, 356, 363, 367, 375, 377, 378, 380, 382, 384, 388, 393, 394, 409, 412, 413, 414, 417, 419, 420, 422, 447, 449, 450, 451, 453, 455, 457, 462, 463, 464, 468, 470, 471, 476, 477, 480, 492, 493, 497, 498, 501, 502, 505, 506, 507, 509, 517, 520, 537, 539, 540, 545, 546, 549, 554, 556, 563, 564, 565, 568, 570, 586, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 632, 636, 637, 650, 651, 652, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 676, 678, 681, 683, 687, 688, 696, 697, 702, 717, 721, 723, 759, 793, 797, 798, 802, 803, 805, 808, 809, 810, 811, 819, 831, 832, 833, 835, 837, 851, 852, 853, 855, 857, 859, 860, 861, 869, 870, 874, 879, 885, 889, 906, 909, 910, 914, 917, 918, 919, 920, 931, 974, 975, 1000, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1016, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "select__k": 995, "select_dtyp": [107, 145, 327, 470], "selected_featur": 191, "selected_features_nam": 191, "selectfdr": [2, 421, 597, 601, 603, 604, 605, 611, 1041, 1043, 1044, 1053], "selectfpr": [2, 380, 421, 597, 600, 603, 604, 605, 611, 1053], "selectfrommodel": [2, 170, 394, 403, 598, 607, 608, 1028, 1032, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1053, 1054], "selectfw": [2, 421, 597, 600, 601, 604, 605, 611, 1053], "selectkbest": [2, 104, 106, 166, 167, 326, 363, 380, 403, 413, 421, 586, 597, 600, 601, 603, 605, 611, 995, 1038, 1043, 1053, 1054], "selectkbestselectkbest": [167, 326], "selector": [2, 52, 103, 166, 167, 252, 350, 388, 420, 421, 470, 586, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1039, 1047, 1049, 1053], "selectormixin": [2, 1048], "selectpercentil": [2, 87, 103, 256, 346, 421, 597, 600, 601, 603, 604, 608, 611, 1038, 1043, 1053, 1054], "selectpercentileselectpercentil": [103, 256], "self": [2, 47, 57, 62, 64, 89, 98, 119, 133, 180, 185, 249, 287, 293, 331, 337, 343, 354, 374, 380, 381, 382, 385, 386, 387, 388, 412, 420, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 505, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 708, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 819, 823, 824, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 958, 962, 963, 965, 966, 971, 979, 994, 1009, 1026, 1027, 1028, 1030, 1032, 1039, 1044, 1051], "self_request": 249, "self_training_clf": 335, "self_training_model": [324, 906], "selftrain": 336, "selftrainingclassifi": [2, 324, 335, 336, 337, 403, 1019, 1049, 1054, 1056], "selftrainingclassifierifittedselftrainingclassifi": 324, "seljak": 1052, "sell": 107, "selvan": 1049, "semant": [54, 354, 355, 394, 549, 1031, 1032, 1039], "semi": [2, 38, 57, 67, 154, 163, 174, 247, 250, 315, 324, 340, 343, 347, 375, 394, 492, 509, 540, 593, 595, 681, 734, 835, 869, 873, 904, 905, 906, 914, 1004, 1009, 1012, 1027, 1028, 1032, 1037, 1049, 1052], "semi_supervis": [2, 185, 324, 326, 331, 332, 333, 334, 335, 336, 337, 403, 904, 905, 906, 1007, 1019, 1027, 1038, 1043, 1044, 1051, 1052], "semiconductor": 1030, "semidefinit": [181, 1016, 1021], "semilogi": [203, 246], "semilogx": [161, 203, 204], "semin": 419, "seminar": 1006, "semisupervis": [332, 394], "sen": [2, 185, 194, 218, 221, 313, 654, 662, 676, 683, 684, 1027], "send": [380, 384, 395, 412, 424, 538], "sender": [354, 375], "sendyk": 1046, "seng": 1049, "senger": [0, 1053, 1054, 1055, 1056], "senior": [1016, 1030], "sens": [42, 43, 52, 55, 62, 88, 99, 178, 185, 188, 193, 246, 313, 319, 333, 343, 354, 363, 367, 380, 381, 394, 412, 414, 416, 421, 466, 473, 474, 475, 476, 477, 478, 479, 480, 657, 660, 661, 677, 806, 816, 906, 1000, 1002, 1009, 1010, 1012, 1016, 1019, 1027], "sensibl": [85, 183, 286, 290, 355, 382, 1002, 1016], "sensit": [43, 79, 88, 111, 112, 138, 148, 185, 189, 217, 218, 219, 242, 243, 252, 265, 277, 280, 287, 313, 330, 343, 368, 369, 395, 411, 414, 419, 456, 466, 501, 556, 566, 663, 697, 705, 707, 717, 718, 723, 747, 789, 792, 793, 804, 805, 827, 835, 870, 889, 907, 1001, 1002, 1003, 1005, 1006, 1010, 1012, 1020, 1021, 1027, 1041, 1055], "sensor": 200, "sent": [151, 412, 838, 1022], "sentenc": [102, 354, 356, 375, 395, 420], "seoeun": 1053, "sep": [119, 282], "sepal": [118, 129, 131, 144, 174, 199, 256, 296, 324, 327, 340, 377, 1016], "sepal_col": 327, "separ": [52, 53, 61, 62, 66, 67, 75, 88, 93, 95, 99, 105, 111, 120, 121, 123, 126, 135, 137, 140, 143, 154, 170, 175, 184, 185, 189, 190, 193, 194, 214, 216, 236, 250, 260, 273, 276, 282, 283, 313, 315, 318, 324, 335, 338, 339, 341, 342, 343, 347, 348, 354, 363, 367, 376, 377, 382, 385, 388, 392, 394, 406, 410, 412, 413, 414, 417, 419, 420, 422, 468, 517, 524, 538, 543, 545, 546, 552, 554, 586, 593, 594, 596, 615, 636, 643, 651, 652, 678, 681, 682, 695, 699, 730, 737, 750, 751, 753, 758, 797, 824, 841, 842, 868, 869, 911, 913, 914, 919, 920, 995, 996, 998, 1000, 1002, 1003, 1005, 1012, 1013, 1016, 1020, 1021, 1027, 1037, 1040, 1042, 1043, 1047, 1049, 1050, 1053, 1054], "seper": 558, "septemb": [739, 1006, 1037, 1040, 1043, 1045, 1050, 1053, 1055], "seq": 638, "seq_dataset": [1037, 1047], "seqlearn": 392, "sequenc": [2, 51, 135, 144, 202, 238, 382, 394, 413, 416, 417, 419, 420, 508, 517, 558, 559, 566, 567, 574, 575, 586, 587, 593, 594, 596, 651, 805, 808, 816, 835, 869, 893, 956, 957, 968, 976, 979, 1037, 1040, 1042, 1043], "sequencekernel": 180, "sequenti": [2, 52, 144, 164, 167, 185, 209, 274, 324, 378, 417, 419, 420, 505, 506, 539, 598, 602, 607, 608, 610, 611, 651, 652, 657, 658, 663, 665, 666, 667, 668, 678, 793, 869, 870, 889, 996, 1014, 1020, 1027, 1028, 1032, 1037, 1046, 1049], "sequentialfeatureselector": [2, 170, 403, 421, 598, 602, 608, 1049, 1050, 1051, 1052, 1053, 1056], "sergei": [412, 1039, 1043, 1044, 1045, 1046, 1047], "sergeyf": 1039, "sergio": [1037, 1039, 1040, 1049, 1052], "sergiodsr": 1048, "sergul": [1044, 1045, 1048], "seri": [2, 42, 43, 51, 58, 113, 142, 148, 151, 185, 187, 190, 191, 198, 215, 217, 219, 235, 256, 278, 287, 320, 326, 332, 372, 375, 385, 394, 412, 493, 494, 495, 496, 497, 501, 505, 506, 507, 509, 510, 515, 546, 567, 695, 699, 706, 747, 750, 751, 753, 795, 826, 831, 832, 835, 931, 997, 1002, 1003, 1007, 1009, 1020, 1025, 1027, 1040, 1043, 1044, 1045, 1049, 1052, 1054, 1055], "serial": [394, 406, 426, 961, 1025, 1026, 1037, 1045, 1049, 1054], "serializetostr": 406, "serious": 1008, "serum": [170, 377], "serv": [102, 125, 135, 178, 267, 276, 347, 413, 556, 998, 1032, 1051], "server": [0, 170, 367, 377, 378, 380, 501, 1029, 1045], "servic": [0, 43, 243, 252, 380, 384, 406, 1030, 1045], "sess": 406, "session": [382, 386, 392, 398, 1024, 1030], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 102, 103, 105, 111, 112, 113, 116, 118, 120, 121, 125, 126, 129, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 158, 161, 166, 167, 170, 172, 178, 179, 180, 185, 187, 188, 189, 190, 191, 195, 200, 202, 203, 204, 206, 208, 210, 211, 212, 214, 215, 216, 217, 220, 223, 228, 229, 233, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 252, 256, 258, 260, 262, 263, 266, 268, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 286, 288, 290, 292, 295, 299, 300, 301, 302, 303, 306, 309, 310, 311, 313, 315, 317, 318, 319, 320, 322, 324, 325, 329, 332, 333, 336, 337, 340, 342, 345, 347, 350, 354, 355, 356, 360, 361, 362, 363, 367, 368, 369, 372, 373, 375, 377, 378, 380, 382, 384, 385, 387, 388, 393, 394, 395, 398, 403, 406, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 429, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 492, 493, 498, 500, 501, 502, 504, 507, 508, 509, 513, 514, 515, 520, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 702, 703, 704, 705, 706, 707, 708, 716, 718, 719, 721, 724, 726, 728, 731, 732, 733, 734, 735, 736, 739, 743, 745, 750, 751, 753, 755, 756, 758, 761, 784, 785, 787, 788, 789, 790, 792, 794, 795, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 935, 936, 942, 947, 948, 953, 957, 961, 962, 974, 975, 976, 979, 980, 986, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "set1": [273, 302, 303], "set_": [249, 403, 1055], "set_alpha": [70, 258, 259, 260, 263, 264], "set_arrai": [51, 238, 245], "set_aspect": [43, 123, 175, 226, 260, 351], "set_autoscaley_on": 77, "set_axis_bgcolor": 113, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 297, "set_clip_box": [70, 258, 259, 260, 263, 264], "set_color": [46, 226], "set_config": [2, 249, 254, 256, 267, 320, 323, 329, 367, 368, 403, 413, 441, 447, 448, 451, 453, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 598, 599, 602, 607, 615, 616, 631, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 806, 807, 812, 814, 823, 827, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 1046, 1048, 1051, 1053], "set_constrained_layout_pad": 121, "set_edgecolor": 121, "set_facecolor": [113, 258], "set_fit_request": [249, 329, 403, 441, 447, 448, 451, 453, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 593, 596, 640, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 695, 841, 842, 844, 845, 846, 847, 848, 854, 874, 875, 888, 889, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920], "set_fmt_str_length": 52, "set_i": 90, "set_index": [62, 135, 148, 204, 233, 273, 319, 355], "set_inverse_transform_request": [538, 586, 876, 889], "set_label": [75, 175, 246], "set_label_posit": 46, "set_linewidth": [51, 238, 245], "set_major_formatt": [235, 237, 240, 293, 298], "set_major_loc": [235, 298], "set_output": [185, 189, 241, 254, 318, 319, 383, 436, 446, 447, 449, 451, 453, 468, 472, 486, 487, 488, 489, 501, 509, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 693, 694, 697, 835, 853, 858, 861, 865, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 907, 1027, 1052, 1053, 1054, 1056], "set_param": [124, 131, 139, 145, 148, 189, 190, 196, 202, 204, 208, 219, 223, 247, 252, 256, 267, 286, 296, 322, 346, 355, 383, 394, 412, 413, 419, 422, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 996, 1012, 1037, 1043, 1044, 1045, 1050, 1051], "set_partial_fit_request": [453, 539, 671, 672, 673, 681, 682, 683, 837, 838, 841, 842, 844, 845, 846, 847, 848, 866, 889], "set_path_effect": 75, "set_posit": [100, 127, 226, 313], "set_predict_proba_request": [917, 919], "set_predict_request": [249, 486, 487, 488, 557, 616, 640, 649, 650, 917, 918, 919, 920], "set_printopt": 266, "set_prop_cycl": 216, "set_score_request": [249, 267, 329, 403, 441, 447, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 804, 827, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 851, 852, 856, 859, 860, 866, 867, 869, 904, 905, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 1006], "set_siz": 300, "set_size_inch": [93, 161, 253], "set_split_request": [806, 807, 812, 814, 823], "set_start_method": 392, "set_stat": 995, "set_tick_param": 258, "set_ticklabel": [118, 127, 212, 354], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 86, 88, 90, 93, 97, 98, 104, 107, 111, 118, 119, 126, 131, 135, 140, 142, 146, 152, 154, 156, 157, 181, 183, 184, 187, 188, 189, 190, 191, 195, 196, 204, 206, 213, 215, 216, 217, 223, 235, 236, 239, 240, 245, 247, 248, 252, 253, 258, 266, 267, 268, 269, 270, 273, 275, 276, 280, 284, 285, 287, 290, 292, 293, 296, 297, 298, 303, 308, 309, 313, 314, 315, 316, 317, 318, 322, 326, 332, 333, 340, 347, 350, 351, 352, 354, 358, 376], "set_transform_request": [249, 486, 487, 488, 538, 587, 593, 595, 596, 640, 872, 875, 881, 889], "set_vis": [54, 70, 297, 303, 313], "set_xlabel": [46, 49, 86, 93, 104, 105, 107, 118, 119, 126, 146, 181, 183, 184, 187, 189, 190, 191, 193, 204, 210, 212, 213, 215, 217, 230, 231, 247, 267, 273, 275, 279, 284, 285, 287, 290, 298, 313, 314, 318, 335, 355, 356, 358], "set_xlim": [67, 77, 93, 107, 111, 119, 140, 154, 184, 189, 213, 215, 220, 247, 258, 277, 279, 290, 298, 308, 313, 315, 316, 317, 318, 323, 329, 351], "set_xscal": [204, 220], "set_xtick": [43, 47, 49, 67, 78, 93, 97, 131, 154, 158, 189, 191, 206, 231, 247, 258, 284, 285, 292, 308, 310, 315, 316, 340], "set_xticklabel": [47, 49, 111, 131, 158, 175, 189, 191, 284, 285, 292], "set_ylabel": [46, 47, 49, 66, 70, 86, 93, 98, 104, 105, 107, 111, 118, 119, 126, 131, 135, 142, 146, 181, 189, 193, 204, 206, 210, 212, 213, 215, 217, 219, 230, 247, 258, 267, 273, 275, 279, 284, 285, 287, 292, 298, 313, 314, 318, 322, 335, 350, 355, 358], "set_ylim": [47, 49, 67, 77, 93, 104, 119, 140, 153, 154, 181, 189, 196, 213, 215, 216, 247, 258, 277, 292, 298, 308, 313, 315, 316, 318, 323, 329, 335, 351], "set_yscal": [146, 215], "set_ytick": [43, 67, 78, 93, 97, 131, 154, 183, 184, 191, 206, 231, 258, 284, 308, 310, 315, 316, 340, 356], "set_yticklabel": [131, 175, 183, 184, 191, 284, 356], "set_zlabel": [118, 212], "set_zord": 123, "setattr": 382, "setdefault": [55, 924], "setdiff1d": 349, "seth": 1043, "sethdandridg": 1041, "setminu": 1022, "setosa": [118, 127, 129, 282, 283, 377, 509], "setp": [47, 49, 284, 288], "settabl": 1006, "settingwithcopywarn": 189, "setup": [280, 282, 367, 378, 382, 386, 388, 1009], "setuptool": 1055, "seuclidean": [454, 461, 704, 783, 784, 785, 1009, 1045, 1048, 1049], "seuclideandist": 704, "seung": 417, "seven": [375, 999], "seventh": [516, 1018], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 88, 89, 90, 94, 106, 138, 151, 154, 156, 159, 167, 170, 172, 177, 178, 185, 188, 193, 200, 204, 215, 219, 234, 235, 238, 239, 240, 246, 260, 268, 273, 278, 287, 293, 295, 309, 313, 325, 350, 354, 355, 367, 374, 375, 377, 380, 382, 385, 388, 392, 394, 409, 412, 413, 416, 418, 419, 420, 422, 451, 453, 468, 491, 504, 513, 514, 543, 560, 561, 564, 565, 568, 569, 570, 575, 593, 594, 596, 615, 650, 651, 657, 693, 694, 695, 696, 697, 698, 802, 803, 805, 808, 809, 819, 837, 838, 844, 845, 846, 847, 848, 868, 869, 876, 893, 917, 918, 919, 920, 938, 995, 998, 1003, 1006, 1007, 1009, 1014, 1016, 1020, 1022, 1023, 1024, 1025, 1027, 1029, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1050, 1053, 1054], "sevin": 1045, "sewook": 1047, "sex": [103, 170, 188, 190, 202, 204, 256, 327, 329, 377, 501, 1014], "sex_mal": 188, "seyedsaman": 1051, "sf": [170, 273, 324, 375, 421, 497, 607], "sfm": 170, "sfs_backward": 170, "sfs_forward": 170, "sfu": [412, 446], "sgd": [2, 46, 47, 50, 130, 137, 147, 148, 157, 175, 176, 185, 194, 197, 206, 207, 222, 229, 242, 249, 262, 281, 306, 309, 310, 325, 344, 345, 348, 352, 354, 359, 363, 369, 509, 517, 636, 654, 671, 672, 673, 676, 681, 682, 683, 684, 866, 867, 995, 1010, 1027, 1028, 1032, 1037, 1040, 1041, 1042, 1044, 1048, 1050], "sgdclassifi": [2, 25, 46, 47, 222, 223, 224, 225, 226, 227, 228, 247, 281, 336, 345, 354, 363, 367, 369, 386, 394, 410, 420, 643, 645, 646, 647, 651, 663, 671, 673, 909, 914, 998, 1002, 1007, 1020, 1021, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "sgdoneclasssvm": [2, 229, 242, 325, 913, 1012, 1020, 1050, 1052, 1053, 1054, 1055], "sgdregressor": [2, 25, 49, 226, 367, 369, 392, 651, 654, 672, 676, 681, 684, 867, 910, 915, 1002, 1020, 1039, 1041, 1043, 1044, 1045, 1048, 1050, 1051, 1052, 1053, 1055], "sgi": 354, "sgkf": [416, 823], "sgm": 47, "sgml": [47, 367], "sh": [284, 388, 995], "sh_color": 239, "sh_err": 239, "sh_lle": 239, "sh_point": 239, "sh_tsne": 239, "sha256": [47, 52, 496, 1052, 1056], "shack": [1047, 1048, 1049], "shade": [58, 86, 168, 199, 296, 301, 339, 417], "shader": 408, "shadi": [1052, 1053], "shadow": [125, 129, 130, 238, 334, 349, 356, 420], "shafer": 102, "shagun": 1043, "shah": [1041, 1042, 1043, 1049, 1055], "shaharyar": 1055, "shahebaz": 1045, "shahriar": 1039, "shaikh": [0, 365, 370, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1055], "shail": 1049, "shakerimoff": 1051, "shalev": [671, 672, 1002, 1020], "shalil": 1045, "shall": 177, "shallow": [386, 419, 566, 567, 924], "shamsi": 1045, "shandeng123": 1051, "shane": [1046, 1049, 1052], "shanghai": [694, 698, 1003], "shangwu": [1045, 1046], "shankar": 1047, "shanmuga": 1043, "shanno": 1002, "shannon": [562, 569, 917, 919, 1003, 1022], "shantanu": 788, "shao": [1049, 1050, 1051], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 80, 81, 84, 85, 86, 87, 88, 91, 93, 94, 99, 102, 106, 107, 111, 121, 122, 124, 136, 141, 142, 143, 144, 145, 148, 149, 150, 151, 154, 155, 163, 166, 168, 173, 174, 176, 177, 178, 179, 183, 184, 185, 189, 190, 202, 204, 215, 217, 222, 224, 227, 228, 229, 230, 231, 234, 236, 237, 238, 242, 245, 246, 247, 248, 249, 251, 252, 258, 260, 262, 263, 264, 271, 273, 275, 276, 279, 280, 282, 283, 293, 298, 299, 303, 306, 308, 310, 315, 316, 322, 324, 327, 328, 329, 334, 335, 337, 340, 343, 346, 347, 348, 351, 352, 354, 355, 362, 367, 373, 374, 375, 380, 382, 394, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 932, 937, 940, 941, 947, 951, 953, 955, 959, 960, 967, 969, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 994, 996, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1027, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1053, 1054], "shape_fit_": [911, 912, 913, 914, 915], "shape_img": 590, "sharad": 1045, "sharan": [1044, 1045], "share": [70, 115, 154, 188, 263, 354, 362, 363, 367, 368, 382, 388, 406, 412, 417, 420, 554, 673, 709, 713, 802, 803, 808, 809, 1000, 1013, 1029, 1037, 1039, 1045, 1047, 1049, 1052], "shared_yax": 141, "sharedmem": 1045, "sharei": [43, 52, 70, 107, 119, 126, 131, 157, 181, 189, 215, 217, 223, 275, 284, 286, 287, 298, 314, 319, 349, 350, 355, 376], "sharex": [43, 46, 54, 70, 105, 119, 126, 157, 181, 189, 217, 275, 286, 287, 298, 335, 376], "sharma": [1041, 1043, 1045, 1046, 1048, 1049, 1051, 1054, 1055], "sharmadharmp": 1051, "sharon": [45, 375], "sharova": 1044, "sharp": [43, 189, 1013, 1016], "sharper": 731, "shashank": [1043, 1049], "shaun": 1038, "shawpan": 1043, "shaymernaturalint": 1051, "she": [380, 899, 900, 1047], "shea": [1045, 1046], "shebanov": [1045, 1046], "sheep": 1030, "sheer": [380, 1030], "sheerman": 1037, "sheet": 1039, "sheetscikit": 400, "shekhar": 1043, "shell": [381, 388, 392], "shellyfung": 1052, "shen": 1050, "sheng": 1047, "shengxiduan": 1043, "shenhanc78": 1045, "sheni": 1049, "shenk": 1045, "shenoi": 1044, "sherlock": [633, 996], "sheth": 1045, "shetti": 1050, "shi": [412, 456, 466, 696], "shibata": 1047, "shiebler": 1043, "shield": 394, "shift": [2, 52, 71, 73, 79, 82, 97, 185, 195, 238, 263, 298, 311, 313, 347, 414, 418, 444, 452, 462, 465, 473, 517, 520, 694, 698, 855, 878, 1016, 1027, 1031, 1032, 1037, 1041, 1045], "shifted_gaussian": 262, "shifted_opposite_lof_scor": 855, "shih": [846, 1008], "shiki": 1048, "shilt": 1040, "shinehid": 1050, "shinitski": 1054, "shinnar": 1050, "shinsuk": 1052, "ship": [57, 156, 184, 359, 368, 378, 398, 420, 1002, 1037, 1046], "shiqiao": [0, 402, 1037, 1038], "shirsat": 1052, "shiva": [1052, 1053], "shivam": [1045, 1046, 1047], "shivamgargsya": [1044, 1048, 1050], "shivan": 1042, "shivram": 1045, "shiyu": 1046, "shleifer": [1043, 1044], "shmelkov": 1042, "shoaib": 1052, "shoemak": 1048, "shogo": [1052, 1053], "shooter23": [1049, 1050], "shop": 1030, "short": [44, 118, 145, 152, 206, 271, 310, 354, 380, 388, 416, 420, 424, 1002, 1003, 1009, 1029, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "short_nam": 55, "shortcom": 1002, "shortcut": [388, 406, 422], "shorten": [380, 1021, 1050], "shorten_param": 274, "shorter": [43, 178, 261, 392, 412, 417, 454, 461, 568, 702, 1008, 1012, 1048], "shortest": [2, 74, 385, 389, 693, 959, 1003, 1050], "shortest_path": 1050, "shorthand": [91, 394, 413, 471, 566, 567, 870, 871, 1040], "shortlog": 384, "shortname_slic": 55, "shota": 1043, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 86, 133, 135, 138, 141, 145, 148, 151, 170, 183, 188, 193, 195, 196, 200, 215, 233, 242, 247, 248, 249, 252, 267, 273, 276, 279, 280, 282, 287, 290, 293, 314, 315, 320, 334, 343, 350, 355, 363, 367, 368, 369, 375, 378, 379, 380, 382, 384, 385, 387, 388, 389, 393, 394, 398, 403, 406, 408, 410, 411, 412, 414, 416, 417, 419, 420, 421, 422, 423, 424, 426, 429, 435, 441, 444, 446, 447, 448, 449, 451, 453, 454, 456, 458, 461, 462, 463, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 501, 508, 513, 514, 521, 526, 528, 529, 532, 537, 538, 539, 541, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 598, 599, 602, 607, 612, 613, 615, 616, 625, 632, 633, 634, 636, 637, 638, 640, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 692, 694, 695, 696, 697, 698, 699, 700, 701, 706, 714, 732, 733, 747, 771, 776, 779, 783, 784, 785, 786, 787, 790, 793, 794, 797, 804, 806, 807, 812, 813, 814, 815, 822, 823, 824, 825, 827, 831, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 888, 889, 890, 892, 896, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 935, 939, 941, 945, 953, 958, 962, 966, 971, 974, 976, 979, 980, 981, 982, 983, 984, 985, 986, 994, 995, 996, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1012, 1013, 1016, 1019, 1020, 1021, 1022, 1026, 1029, 1030, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "shouldn": [259, 264, 380], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 329, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 368, 369, 376, 380, 386, 392, 393, 398, 399, 403, 409, 410, 411, 414, 416, 417, 418, 419, 421, 422, 442, 507, 564, 598, 599, 636, 637, 702, 703, 705, 706, 707, 718, 811, 828, 851, 869, 921, 922, 923, 995, 998, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1020, 1021, 1026, 1039, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056], "show_top10": 375, "show_vers": [2, 367, 378, 380, 388, 398, 399, 1045], "show_weight": 922, "show_with_diff": 124, "showcas": [133, 136, 141, 145, 148, 149, 151, 185, 382], "shown": [62, 90, 133, 137, 141, 148, 181, 187, 189, 200, 205, 213, 233, 240, 242, 247, 252, 260, 273, 276, 279, 282, 290, 298, 309, 310, 313, 314, 315, 332, 350, 354, 355, 380, 385, 395, 410, 412, 413, 416, 417, 418, 420, 422, 442, 464, 637, 703, 705, 706, 707, 718, 805, 819, 921, 923, 1002, 1003, 1006, 1009, 1016, 1020, 1021, 1022, 1041, 1046, 1047, 1048, 1051], "shown_imag": 236, "shrankhla": 1052, "shreekant": 1056, "shreesha": [1053, 1054], "shreya": 1047, "shrink": [63, 113, 121, 149, 189, 200, 210, 213, 219, 235, 262, 286, 313, 350, 417, 564, 565, 681, 683, 856, 866, 867, 911, 912, 913, 914, 915, 1009, 1021], "shrink_threshold": [304, 856, 1009, 1037, 1049], "shrinkag": [2, 69, 108, 110, 113, 128, 150, 185, 304, 425, 473, 474, 477, 478, 479, 480, 481, 483, 484, 485, 544, 548, 554, 566, 567, 805, 1002, 1016, 1027, 1028, 1032, 1037, 1041, 1042, 1044], "shrinkage_": [109, 110, 477, 479], "shrinkage_coeffici": 484, "shroff": 1055, "shrunk": [2, 109, 128, 313, 320, 328, 425, 477, 479, 480, 483, 484, 485, 554, 890, 1000, 1020, 1031, 1032], "shrunk_cov": [425, 483, 485], "shrunk_cov_scor": 128, "shrunk_covari": [2, 414, 1054], "shrunkcovari": [2, 109, 128, 414, 473, 474, 477, 478, 479], "shrunken": [856, 1037], "shruti": 1056, "shu": [1038, 1041, 1045], "shuangchi": [1051, 1052], "shubernetskii": 1039, "shubh": 1048, "shubhal": 1054, "shubham": [1044, 1047, 1055], "shubhanshu": 1049, "shubhraneel": 1051, "shuckle16": 1043, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 93, 94, 121, 141, 142, 144, 151, 156, 184, 200, 223, 224, 229, 242, 274, 278, 279, 286, 293, 320, 332, 333, 334, 335, 345, 354, 355, 363, 375, 389, 394, 407, 473, 478, 492, 493, 495, 497, 500, 502, 508, 516, 517, 518, 519, 520, 524, 527, 529, 536, 542, 544, 545, 551, 552, 558, 559, 560, 561, 569, 570, 572, 573, 607, 610, 612, 663, 664, 671, 672, 673, 677, 679, 681, 682, 683, 692, 805, 807, 808, 809, 810, 811, 819, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 866, 867, 890, 909, 910, 911, 914, 952, 953, 974, 976, 1001, 1002, 1007, 1014, 1020, 1021, 1032, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "shuffle_param": 350, "shuffled_arrai": 979, "shufflesplit": [2, 268, 275, 350, 416, 807, 813, 815, 825, 835, 1037, 1038, 1040, 1042, 1043], "shuhei": 1050, "shuhua": 1049, "shutil": [87, 104, 413], "shuttl": 355, "shuzh": 1047, "shwartz": [671, 672, 1002, 1020], "shwed": 1045, "shyam": 1050, "si": 102, "siam": [412, 416, 456, 464, 466, 540, 546], "siang": 1040, "siavash": 1050, "siavrez": 1051, "sibsp": [190, 327], "sid": 1044, "siddharth": [1044, 1048], "siddiqui": 1055, "side": [43, 64, 92, 148, 208, 219, 233, 237, 245, 267, 313, 347, 354, 363, 375, 392, 410, 413, 416, 417, 420, 429, 435, 520, 805, 819, 1002, 1003, 1006, 1008, 1021, 1046], "sidebar": 380, "sidhpura": 1052, "siebert": 1045, "sierra": [536, 542], "sievert": 1047, "siftikha": 1045, "sig": 122, "sigh": 354, "sigkdd": [374, 375, 516, 681, 890, 1016, 1018], "sigma": [53, 80, 81, 87, 111, 128, 148, 271, 273, 409, 414, 417, 419, 619, 654, 1000, 1002, 1004, 1008, 1011], "sigma2": [539, 546], "sigma_": [414, 649, 650, 1050, 1054], "sigma_0": [175, 176, 181, 422, 619], "sigma_0_bound": [181, 619], "sigma_i": [1008, 1016], "sigma_k": [417, 1000], "sigmod": [412, 454, 461, 855, 1012], "sigmoid": [2, 61, 62, 63, 64, 372, 419, 441, 456, 540, 566, 625, 644, 648, 770, 779, 782, 866, 867, 911, 912, 913, 914, 915, 1011, 1021, 1032, 1050, 1054], "sigmoid_kernel": [2, 408, 770, 1004, 1056], "sign": [75, 110, 116, 122, 125, 137, 200, 263, 308, 350, 380, 412, 417, 420, 549, 587, 594, 611, 640, 641, 663, 664, 671, 673, 679, 680, 681, 682, 740, 747, 909, 913, 951, 953, 970, 1002, 1006, 1011, 1016, 1020, 1021, 1037, 1041, 1046, 1050, 1052, 1055], "signal": [2, 11, 53, 112, 121, 122, 123, 130, 146, 148, 172, 177, 178, 185, 194, 195, 201, 202, 203, 204, 209, 214, 216, 264, 286, 325, 412, 414, 420, 421, 422, 425, 479, 508, 526, 531, 536, 539, 542, 546, 550, 551, 630, 649, 650, 651, 652, 657, 658, 668, 669, 677, 689, 690, 691, 790, 826, 835, 883, 1002, 1006, 1023, 1027, 1030, 1031, 1032], "signatur": [249, 354, 355, 375, 492, 493, 562, 563, 569, 570, 599, 615, 616, 664, 678, 680, 716, 747, 811, 828, 831, 833, 836, 882, 965, 995, 1044, 1050, 1054], "signif": [45, 998], "signifi": [412, 586, 816, 1011], "signific": [2, 43, 88, 141, 148, 165, 166, 168, 185, 219, 233, 265, 273, 292, 293, 354, 363, 374, 375, 392, 412, 415, 416, 419, 509, 537, 539, 554, 632, 663, 664, 671, 672, 673, 681, 682, 683, 824, 834, 909, 911, 912, 913, 914, 915, 995, 1005, 1006, 1009, 1027, 1037, 1039, 1040, 1041, 1045], "significantli": [43, 61, 62, 64, 72, 109, 110, 135, 141, 146, 148, 151, 170, 188, 189, 190, 215, 219, 223, 231, 233, 267, 273, 293, 323, 324, 355, 356, 363, 368, 384, 412, 417, 419, 420, 425, 473, 478, 483, 484, 543, 545, 552, 563, 570, 651, 652, 657, 658, 665, 666, 667, 668, 689, 697, 849, 850, 998, 1002, 1003, 1009, 1014, 1021, 1037, 1039, 1040, 1044, 1045, 1050, 1051, 1052], "sijaranamu": 1043, "silenc": [249, 1056], "silent": [249, 420, 586, 865, 1016, 1042, 1043, 1045, 1046, 1050, 1051], "silhouett": [2, 58, 71, 73, 82, 90, 91, 185, 355, 451, 517, 797, 798, 1027, 1037, 1041], "silhouette_avg": 93, "silhouette_sampl": [2, 93, 798, 1041, 1043, 1045, 1053], "silhouette_scor": [2, 73, 82, 91, 93, 355, 380, 412, 1037, 1041, 1043, 1045, 1047, 1051], "silicon": 378, "silk": 1051, "sillanp\u00e4\u00e4": 1037, "silva": [410, 693, 1003, 1048, 1050, 1055], "silverman": [418, 854, 1052], "silverthorn": 1037, "silvestrin": 1054, "sim": 417, "sim4n6": 1052, "simd": [394, 1052], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 82, 84, 90, 93, 107, 116, 121, 125, 135, 148, 169, 172, 179, 187, 188, 189, 190, 200, 215, 217, 229, 235, 237, 238, 239, 242, 248, 249, 264, 267, 270, 273, 276, 279, 280, 281, 290, 292, 293, 313, 325, 342, 347, 350, 355, 356, 363, 367, 372, 374, 376, 379, 380, 382, 385, 386, 388, 389, 392, 394, 406, 409, 410, 412, 415, 416, 417, 419, 420, 421, 422, 423, 444, 447, 448, 454, 456, 458, 459, 508, 513, 514, 541, 587, 594, 595, 596, 615, 682, 697, 700, 708, 710, 720, 724, 730, 733, 734, 736, 739, 743, 745, 760, 765, 766, 791, 797, 798, 801, 802, 803, 831, 836, 881, 902, 905, 909, 910, 911, 912, 926, 936, 995, 998, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1032, 1037, 1041, 1042, 1043, 1045, 1049, 1050], "similarli": [43, 51, 72, 88, 119, 152, 189, 191, 200, 204, 215, 243, 252, 267, 273, 308, 313, 328, 330, 343, 363, 368, 376, 378, 382, 385, 394, 406, 408, 409, 415, 416, 420, 734, 735, 743, 788, 789, 792, 827, 1001, 1003, 1004, 1006, 1013, 1020, 1021, 1023, 1045, 1051, 1053], "simmon": 1030, "simon": [1002, 1030, 1040, 1041, 1050, 1051, 1052, 1053], "simona": [1048, 1049, 1050], "simonamaggio": [1048, 1049, 1050], "simoncw": 1047, "simonpl": 1042, "simpl": [2, 13, 37, 43, 64, 88, 103, 107, 109, 115, 116, 121, 141, 146, 179, 185, 189, 200, 216, 232, 255, 274, 290, 294, 297, 306, 326, 339, 354, 356, 359, 363, 378, 380, 382, 383, 384, 385, 387, 392, 393, 394, 395, 403, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 426, 433, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 519, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 791, 793, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 961, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1016, 1018, 1020, 1022, 1026, 1027, 1030, 1034, 1037], "simplefilt": 406, "simpleimput": [2, 103, 156, 183, 184, 190, 244, 254, 256, 323, 326, 363, 394, 632, 633, 634, 996, 1016, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "simpleimputersimpleimput": [103, 156, 190, 244, 254, 323, 326], "simplepipelin": 249, "simpler": [149, 191, 233, 322, 343, 367, 379, 412, 417, 1002, 1007, 1042], "simplest": [86, 416, 1003], "simplex": [63, 675, 802, 884], "simpli": [74, 116, 154, 172, 180, 239, 250, 252, 282, 306, 324, 325, 367, 375, 380, 382, 385, 392, 394, 414, 415, 416, 417, 419, 420, 489, 700, 767, 770, 876, 928, 955, 998, 1006, 1007, 1008, 1009, 1020, 1044, 1045, 1046], "simplic": [43, 53, 67, 200, 347, 354, 356, 394, 418, 1009, 1010, 1011, 1021], "simplif": [376, 379, 385, 1037, 1043], "simplifi": [43, 103, 202, 249, 343, 379, 381, 385, 412, 415, 520, 567, 868, 869, 1006, 1008, 1016], "simplist": [215, 420], "simul": [110, 123, 151, 188, 209, 250, 273, 1030], "simultan": [58, 88, 122, 277, 281, 328, 350, 361, 372, 409, 412, 995, 1006, 1007, 1022, 1030, 1044], "sin": [43, 53, 57, 74, 122, 136, 147, 148, 153, 155, 165, 172, 178, 179, 181, 195, 196, 200, 209, 216, 221, 237, 248, 264, 305, 314, 323, 329, 349, 360, 361, 422, 521, 620, 704, 769], "sin_transform": 43, "sina": 1050, "sinayev": 1039, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 82, 86, 88, 99, 102, 103, 104, 122, 145, 161, 167, 170, 172, 177, 188, 189, 191, 193, 198, 215, 217, 219, 232, 243, 247, 248, 249, 260, 263, 267, 269, 273, 275, 276, 282, 283, 286, 287, 290, 292, 293, 295, 296, 319, 325, 326, 337, 340, 343, 350, 354, 355, 356, 363, 368, 375, 378, 380, 381, 382, 384, 385, 388, 392, 393, 394, 398, 403, 406, 410, 412, 413, 414, 415, 416, 417, 419, 420, 422, 429, 432, 441, 446, 449, 450, 454, 457, 460, 473, 486, 487, 488, 489, 501, 532, 541, 543, 545, 552, 554, 555, 556, 557, 558, 560, 562, 564, 566, 567, 568, 569, 572, 574, 593, 594, 596, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 637, 638, 643, 656, 660, 663, 664, 671, 673, 678, 679, 680, 681, 684, 697, 712, 714, 740, 747, 783, 787, 794, 804, 805, 808, 809, 819, 827, 833, 834, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 856, 859, 866, 867, 869, 874, 899, 900, 904, 905, 906, 909, 911, 914, 917, 919, 933, 935, 936, 953, 962, 995, 998, 999, 1000, 1002, 1003, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1020, 1021, 1022, 1030, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "sinclert": 1045, "sind": 420, "sine": [2, 43, 172, 177, 178, 185, 209, 221, 257, 258, 259, 260, 262, 263, 360, 376, 620, 802, 803, 1005, 1022, 1027], "singer": [290, 671, 672, 740, 1002, 1006, 1020, 1021], "singh": [1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "singl": [2, 30, 31, 70, 74, 85, 86, 88, 91, 94, 95, 104, 123, 134, 135, 136, 144, 145, 155, 170, 172, 178, 183, 185, 189, 191, 193, 200, 215, 217, 219, 253, 255, 263, 267, 269, 282, 290, 310, 326, 328, 343, 354, 355, 356, 359, 361, 363, 367, 368, 374, 375, 380, 385, 387, 388, 389, 392, 393, 394, 403, 410, 411, 413, 415, 416, 417, 419, 420, 421, 437, 441, 444, 445, 449, 450, 451, 453, 458, 468, 470, 471, 498, 499, 501, 511, 514, 539, 558, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 587, 597, 604, 605, 607, 611, 632, 637, 639, 648, 671, 672, 678, 681, 682, 683, 695, 697, 699, 715, 716, 726, 727, 728, 729, 730, 741, 742, 743, 746, 779, 790, 802, 803, 805, 808, 809, 819, 826, 827, 831, 832, 834, 835, 838, 846, 849, 850, 854, 866, 867, 868, 878, 879, 882, 883, 884, 889, 890, 904, 905, 917, 918, 919, 920, 929, 931, 969, 992, 995, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1027, 1030, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "single_output": [382, 929], "single_prior": 181, "single_source_shortest_path_length": [2, 389], "singleton": [368, 813, 938, 1050, 1053], "singular": [2, 121, 389, 409, 412, 415, 455, 457, 486, 487, 488, 489, 526, 529, 539, 543, 545, 546, 549, 552, 554, 555, 662, 677, 678, 679, 692, 953, 1002, 1003, 1005, 1031, 1032, 1043, 1044, 1055], "singular_": 662, "singular_values_": [539, 546, 549, 1044], "sinha": [1045, 1054, 1055], "sinhrk": [1041, 1042], "sink": [646, 998], "sinoisoid": 148, "sinusoid": [122, 136, 148, 200, 248, 650, 999], "sio": 406, "siola": [1052, 1053], "sip\u0151cz": [1047, 1048, 1049, 1053, 1055], "siqi": 1051, "siqueira": 1047, "sir": 377, "sister": 1025, "site": [378, 380, 388, 398, 419, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 1030, 1045], "situat": [62, 79, 90, 104, 187, 188, 221, 242, 276, 380, 388, 406, 414, 416, 417, 419, 472, 533, 539, 587, 882, 885, 897, 907, 1000, 1002, 1008, 1009, 1019, 1022, 1045], "situp": 377, "sivamani": 1047, "sivaprasad": [1040, 1041], "six": [170, 216, 236, 317, 377, 1046], "sixteenth": 1018, "sixth": 375, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 94, 95, 99, 100, 105, 109, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 124, 125, 128, 130, 138, 147, 148, 151, 152, 153, 166, 172, 174, 175, 178, 179, 185, 187, 189, 190, 195, 196, 197, 198, 201, 205, 210, 213, 216, 217, 218, 221, 228, 229, 235, 240, 242, 245, 246, 247, 248, 249, 251, 252, 260, 266, 269, 271, 273, 275, 276, 278, 279, 280, 290, 299, 300, 301, 308, 311, 314, 315, 316, 317, 320, 323, 326, 328, 329, 333, 337, 339, 341, 342, 343, 350, 352, 354, 355, 356, 358, 367, 368, 369, 375, 376, 380, 385, 389, 392, 393, 394, 398, 403, 409, 410, 412, 414, 416, 417, 420, 422, 423, 425, 448, 449, 450, 452, 453, 454, 461, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 498, 499, 500, 520, 532, 539, 541, 543, 545, 552, 562, 563, 564, 565, 566, 567, 569, 570, 588, 592, 593, 599, 637, 638, 648, 662, 671, 672, 684, 688, 697, 700, 710, 724, 743, 745, 748, 786, 798, 807, 810, 811, 815, 822, 825, 826, 827, 830, 833, 835, 844, 845, 846, 848, 851, 852, 853, 854, 855, 857, 859, 860, 861, 866, 867, 884, 886, 898, 903, 907, 911, 912, 913, 914, 915, 917, 918, 919, 920, 923, 952, 956, 957, 968, 969, 971, 974, 980, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1018, 1020, 1021, 1022, 1029, 1030, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1052, 1053, 1055, 1056], "size_cluster_i": 93, "size_mb": 354, "sizeabl": [807, 822, 825], "sk": 555, "skaft": 1051, "skeleton": 1040, "sketch": [2, 23, 193, 369, 372, 389, 644, 645, 646, 970, 1032, 1049], "skew": [2, 48, 148, 218, 246, 252, 313, 328, 372, 410, 416, 644, 645, 646, 647, 885, 897, 1002, 1016, 1032, 1040, 1044, 1053], "skewed": [647, 1044], "skewedchi2sampl": [2, 643, 644, 645, 646, 998, 1044, 1051, 1052], "skf": [260, 416, 824], "skfold": 335, "skforecast": 1025, "skill": 1006, "skimag": [80, 81, 374], "skip": [368, 380, 389, 408, 420, 472, 651, 652, 657, 665, 666, 667, 676, 686, 907, 928, 1041, 1044, 1047, 1049, 1051, 1053, 1056], "skip_check_arrai": 994, "skip_complet": 632, "skip_comput": 1047, "skip_parameter_valid": [472, 907, 1053], "skipper": [1040, 1042, 1043], "skiptestwarn": 928, "skl2onnx": 406, "sklear": 381, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 369, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 394, 397, 398, 399, 403, 406, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sklearn2pmml": 1025, "sklearn_api": 0, "sklearn_assume_finit": 367, "sklearn_cache_": 322, "sklearn_enable_debug_cython_direct": 381, "sklearn_fail_no_openmp": 378, "sklearn_graph_cache_": 295, "sklearn_is_fit": [133, 1027], "sklearn_run_float32_test": 380, "sklearn_site_joblib": 1045, "sklearn_warning_as_error": 368, "sklearnex": 398, "skop": [1025, 1032], "skorch": 1025, "sktime": [52, 1025], "sl": 215, "slack": 1020, "slai": 354, "slama": [1047, 1049], "slep": [380, 394], "slep000": 395, "slep009": [1048, 1050, 1051], "slep010": [382, 1048], "slep011": 1026, "slep018": [256, 382, 1052], "slep020": 395, "slice": [2, 43, 52, 55, 144, 151, 224, 237, 247, 301, 304, 325, 326, 339, 375, 381, 389, 413, 468, 471, 498, 499, 513, 551, 644, 779, 783, 786, 926, 931, 956, 957, 976, 1049, 1051, 1055], "slice_": [498, 499, 1052], "sliceabl": 960, "slide": [274, 649, 1002, 1024], "slight": [145, 220, 324, 406, 419, 453, 1047], "slightli": [43, 62, 64, 97, 113, 138, 141, 145, 148, 152, 156, 170, 172, 173, 174, 190, 195, 215, 233, 238, 240, 249, 252, 281, 287, 293, 322, 340, 356, 379, 380, 410, 412, 419, 420, 422, 424, 450, 593, 594, 596, 643, 663, 808, 809, 909, 911, 914, 952, 953, 995, 1002, 1016, 1020, 1021, 1022, 1046, 1050, 1051, 1053, 1055, 1056], "slishak": 1051, "sloan": 0, "slogdet": 951, "slope": [189, 213, 217, 232, 412, 495, 728, 753, 1004, 1006], "sloppili": 420, "sloth": [50, 306, 375, 503], "slow": [295, 313, 354, 367, 374, 378, 380, 417, 420, 451, 704, 883, 884, 888, 911, 914, 953, 1003, 1009, 1026, 1044], "slower": [104, 124, 141, 145, 183, 248, 282, 356, 394, 419, 420, 421, 450, 455, 457, 543, 545, 552, 560, 561, 562, 563, 568, 569, 570, 571, 593, 594, 596, 636, 637, 638, 648, 664, 677, 679, 692, 697, 709, 837, 841, 842, 999, 1003, 1004, 1005, 1007, 1009, 1022, 1041, 1048], "slowest": [145, 952, 953], "slowli": [392, 394, 549, 953], "slug": 102, "smacof": [2, 695, 1052], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 82, 86, 88, 102, 109, 113, 116, 126, 136, 138, 145, 147, 148, 177, 179, 188, 189, 196, 201, 205, 206, 216, 219, 221, 230, 232, 233, 260, 267, 273, 280, 285, 287, 295, 306, 309, 311, 313, 315, 317, 324, 332, 337, 343, 348, 350, 354, 355, 369, 373, 375, 377, 380, 383, 389, 392, 394, 406, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 425, 445, 447, 449, 450, 451, 453, 462, 463, 467, 479, 501, 503, 543, 545, 546, 552, 560, 561, 562, 566, 567, 568, 569, 587, 594, 595, 607, 612, 613, 655, 659, 660, 661, 663, 664, 684, 687, 688, 808, 809, 823, 834, 837, 866, 867, 874, 902, 911, 914, 953, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1019, 1022, 1025, 1026, 1030, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "smaller": [2, 37, 47, 61, 75, 80, 88, 113, 135, 151, 170, 177, 178, 183, 203, 204, 206, 219, 246, 290, 299, 300, 308, 313, 330, 343, 350, 355, 380, 409, 412, 414, 416, 417, 419, 421, 443, 444, 450, 454, 458, 460, 519, 539, 540, 562, 563, 564, 565, 566, 567, 569, 570, 598, 615, 624, 638, 651, 652, 654, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 677, 679, 687, 688, 697, 714, 802, 808, 809, 855, 858, 882, 883, 901, 902, 909, 917, 918, 919, 920, 953, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1016, 1018, 1020, 1021, 1022, 1026, 1045, 1050, 1054], "smallest": [111, 112, 215, 293, 330, 358, 375, 412, 414, 421, 532, 546, 635, 659, 660, 661, 687, 688, 695, 699, 700, 805, 808, 809, 819, 824, 879, 932, 1022, 1050], "smallest_ab": 330, "smallest_coef": [113, 532], "smari": [1046, 1047, 1048], "smart": [249, 447, 463, 464, 595], "smartphon": 1030, "smedbergm": 1043, "smedemark": 1047, "smile": [107, 375, 1051], "sminchisescu": [647, 998], "smirnov": 1049, "smith": [1043, 1044, 1045, 1046, 1047, 1049], "sml": [865, 1011], "smo": [909, 910], "smola": [417, 420, 540, 875, 1016, 1021], "smolskii": 1052, "smooth": [43, 80, 81, 87, 170, 177, 208, 216, 231, 319, 343, 377, 395, 412, 418, 419, 422, 452, 453, 542, 543, 544, 551, 562, 563, 564, 565, 569, 570, 571, 595, 596, 624, 627, 681, 844, 845, 846, 848, 886, 890, 898, 917, 918, 919, 920, 1002, 1008, 1016, 1020, 1021, 1022], "smooth_idf": [420, 595, 596], "smoothened_coin": [80, 81], "smoother": [43, 44, 148, 189, 310, 418], "smoothli": 374, "smt": 1053, "smtp": [375, 497], "smujjiga": 1047, "sn": [72, 136, 151, 187, 188, 195, 200, 263, 273], "snake": [326, 328, 587, 890, 1016], "snapshot": [406, 564, 565, 1026], "sne": [51, 185, 234, 235, 236, 237, 239, 293, 519, 530, 697, 1027, 1031, 1032], "snippet": [133, 363, 380, 385, 388, 392, 408, 419, 420, 421, 996, 1016, 1029, 1050], "snowhit": 1048, "snr": 87, "snuderl": 1041, "sny": 51, "snyder": [697, 1003], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 88, 89, 94, 98, 112, 141, 144, 145, 146, 147, 151, 155, 172, 177, 188, 190, 193, 196, 215, 216, 242, 249, 252, 267, 273, 286, 290, 293, 299, 300, 303, 309, 310, 314, 319, 320, 323, 335, 343, 354, 356, 362, 363, 367, 368, 369, 374, 375, 378, 379, 380, 382, 384, 385, 386, 388, 389, 394, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 501, 513, 514, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 710, 713, 721, 731, 761, 783, 793, 802, 803, 804, 805, 808, 809, 811, 812, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 899, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 953, 971, 980, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1018, 1019, 1020, 1021, 1025, 1026, 1030, 1037, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054], "soar": 1052, "sobkevich": 1049, "sobolev": 1041, "soc": [57, 375], "socastro": [1047, 1053, 1056], "socg2006": 451, "social": [188, 384, 395, 412, 1030], "societi": [170, 377, 412, 414, 473, 478, 546, 632, 885, 897, 1002, 1020], "sodhani": 1043, "soft": [2, 130, 157, 158, 380, 394, 574, 575, 905, 913, 1020, 1030, 1042], "softmax": [419, 566, 663, 664, 1002, 1009, 1010], "softw": 1002, "softwar": [0, 170, 367, 377, 380, 388, 392, 394, 406, 420, 632, 640, 663, 996, 1030], "soil_typ": 252, "sokalmichen": [454, 461, 704, 783, 784, 785, 1009], "sokalmichenerdist": 704, "sokalsneath": [454, 461, 704, 783, 784, 785, 1009], "sokalsneathdist": 704, "sok\u00f3\u0142": [1054, 1055], "sole": [100, 380, 392, 412], "soledad": 1049, "soler": [0, 402], "solid": [50, 67, 69, 147, 175, 227, 228, 242, 252, 306, 315, 1030], "solntz": 354, "solosil": 1050, "solut": [80, 195, 200, 204, 206, 220, 229, 242, 248, 286, 325, 343, 378, 394, 406, 409, 411, 412, 414, 416, 417, 420, 421, 453, 455, 457, 536, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 615, 651, 653, 655, 657, 659, 660, 661, 663, 665, 667, 669, 670, 671, 672, 673, 674, 677, 679, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 802, 803, 819, 858, 866, 867, 999, 1000, 1002, 1003, 1005, 1010, 1012, 1020, 1021, 1024, 1030, 1037, 1040, 1050, 1051, 1052], "solutu": 1045, "solutusimmensu": 1045, "solv": [2, 44, 45, 99, 172, 204, 247, 273, 292, 379, 380, 381, 382, 385, 392, 400, 412, 414, 416, 417, 422, 451, 457, 466, 482, 536, 542, 543, 544, 548, 550, 551, 552, 553, 640, 642, 651, 657, 659, 660, 669, 670, 675, 677, 679, 682, 690, 691, 692, 724, 839, 909, 910, 913, 953, 997, 1000, 1002, 1003, 1006, 1007, 1020, 1021, 1022, 1024, 1025, 1030, 1043, 1047, 1050], "solvabl": 412, "solver": [54, 66, 69, 70, 80, 99, 185, 194, 204, 206, 207, 208, 215, 223, 230, 231, 233, 308, 309, 310, 311, 320, 329, 330, 354, 386, 392, 394, 398, 408, 412, 424, 456, 466, 475, 476, 482, 507, 538, 540, 545, 546, 549, 552, 554, 651, 652, 653, 657, 658, 663, 664, 665, 666, 667, 668, 671, 673, 674, 675, 677, 679, 681, 685, 686, 689, 692, 693, 694, 696, 698, 700, 793, 819, 835, 840, 843, 866, 867, 911, 912, 913, 914, 915, 1000, 1003, 1006, 1007, 1010, 1020, 1021, 1027, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "solver_": [677, 679], "solver_opt": 675, "somani": 1049, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 83, 86, 88, 89, 91, 95, 100, 103, 106, 109, 111, 112, 116, 121, 136, 137, 141, 145, 148, 149, 151, 152, 153, 156, 157, 166, 172, 174, 177, 178, 179, 180, 181, 183, 184, 185, 188, 189, 190, 191, 193, 195, 197, 199, 200, 202, 203, 204, 205, 209, 210, 215, 216, 219, 223, 224, 229, 232, 233, 235, 237, 242, 246, 249, 252, 259, 260, 261, 266, 267, 268, 273, 274, 275, 276, 279, 281, 287, 290, 292, 296, 299, 304, 309, 310, 313, 318, 323, 324, 325, 326, 327, 328, 329, 330, 339, 340, 342, 343, 350, 352, 354, 355, 356, 362, 363, 367, 368, 369, 373, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 398, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 441, 447, 448, 451, 453, 455, 457, 463, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 501, 504, 513, 514, 520, 528, 529, 538, 539, 541, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 586, 587, 593, 595, 596, 611, 614, 615, 616, 637, 638, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 694, 695, 697, 698, 702, 703, 705, 706, 707, 712, 713, 720, 725, 731, 732, 743, 744, 745, 751, 759, 761, 762, 768, 787, 789, 792, 793, 794, 799, 802, 804, 806, 807, 812, 814, 823, 824, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 935, 936, 962, 995, 996, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1030, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "some_funct": [380, 943], "some_integ": 416, "some_iter": 380, "some_param": 380, "somebodi": 395, "someestim": 379, "somehow": 189, "someon": [380, 384, 394, 1037], "someth": [188, 236, 290, 354, 380, 383, 384, 388, 420, 925, 927, 1006, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "sometim": [104, 156, 187, 267, 273, 310, 355, 363, 368, 369, 380, 382, 386, 393, 394, 412, 414, 417, 419, 420, 453, 539, 540, 543, 545, 546, 874, 875, 876, 924, 1001, 1002, 1003, 1006, 1011, 1016, 1017, 1021, 1034, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053], "somewhat": [350, 363, 369, 380, 417, 419, 911, 914, 1002, 1021, 1022], "somewher": [386, 1006], "sommer": 1055, "somya": 1045, "son": [377, 996], "song": 1003, "soni": [51, 1047, 1049], "sonni": 1042, "sonniv": [1052, 1053], "sonoiya": 1047, "sonoma": 319, "soon": [112, 394, 1056], "sooner": 1054, "sophist": [996, 1008], "sorbaro": 1042, "sorensen": 417, "soriano": 1046, "sornarajah": 1042, "sorri": 1045, "sorro": 1046, "sorski": [1051, 1052], "sort": [2, 43, 47, 49, 51, 58, 61, 93, 102, 105, 133, 138, 145, 148, 155, 170, 177, 195, 200, 215, 216, 233, 251, 273, 274, 277, 288, 305, 349, 354, 360, 361, 380, 384, 388, 389, 394, 416, 419, 420, 422, 539, 546, 560, 571, 586, 599, 615, 622, 702, 717, 723, 734, 735, 743, 759, 788, 789, 792, 794, 805, 832, 844, 845, 846, 847, 848, 849, 850, 857, 859, 860, 861, 864, 874, 880, 882, 883, 886, 888, 890, 898, 911, 914, 953, 959, 1002, 1009, 1012, 1016, 1030, 1037, 1041, 1047, 1048, 1049, 1051, 1052, 1055], "sort_graph_by_row_valu": [2, 389, 1052], "sort_index": 290, "sort_result": [849, 850, 857, 859, 860, 861, 1049], "sort_valu": [103, 190, 191, 256, 263, 273, 284, 319, 320], "sorted_idx": [149, 322], "sorted_importances_idx": 190, "sortofamudkip": [1052, 1053], "sought": 786, "soumirai": 1047, "sound": [170, 363], "sounder": 1043, "sourav": [1044, 1047], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 374, 377, 379, 380, 381, 383, 384, 386, 388, 389, 392, 393, 398, 406, 409, 413, 417, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 991, 992, 993, 994, 1003, 1016, 1022, 1025, 1027, 1030, 1047, 1051, 1055, 1056], "south": [50, 151, 188, 306, 375, 418], "south_y": 188, "sp": [43, 188, 329, 996], "sp_version": 675, "space": [2, 37, 43, 47, 49, 57, 67, 80, 86, 90, 91, 93, 94, 96, 98, 102, 103, 106, 116, 121, 123, 129, 131, 140, 144, 148, 154, 167, 170, 172, 178, 193, 200, 216, 235, 236, 237, 239, 246, 247, 248, 252, 253, 259, 264, 281, 284, 285, 293, 302, 303, 315, 324, 347, 354, 355, 356, 362, 363, 367, 372, 375, 376, 377, 380, 387, 392, 393, 394, 409, 412, 415, 417, 418, 419, 420, 422, 447, 451, 452, 453, 456, 466, 468, 469, 470, 471, 486, 487, 488, 492, 503, 537, 539, 540, 543, 544, 545, 546, 548, 549, 554, 578, 587, 593, 594, 596, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 643, 645, 646, 647, 648, 693, 694, 695, 697, 698, 699, 701, 704, 805, 808, 809, 811, 819, 828, 839, 849, 850, 857, 858, 859, 860, 869, 874, 875, 881, 886, 901, 902, 903, 922, 957, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1031, 1032, 1037, 1038, 1040, 1045, 1046, 1047, 1051, 1052, 1053], "spacek": 1042, "spain": 319, "spam": [586, 714, 746, 844, 1006, 1008, 1030], "span": [52, 88, 109, 148, 247, 267, 270, 375, 412, 420, 554, 641, 805, 808, 1006], "spanish": 1025, "spannbauer": 1049, "sparciti": 355, "spare": [374, 679, 680], "spark": [375, 1026], "sparrai": 1054, "spars": [2, 25, 45, 46, 47, 51, 53, 55, 57, 66, 74, 75, 87, 88, 90, 102, 108, 109, 110, 120, 122, 140, 154, 185, 194, 195, 202, 203, 204, 207, 209, 210, 214, 231, 246, 248, 274, 280, 286, 293, 311, 323, 327, 330, 336, 353, 356, 362, 367, 372, 374, 375, 376, 380, 382, 383, 384, 385, 392, 393, 394, 406, 412, 413, 419, 420, 422, 423, 427, 434, 442, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 461, 463, 464, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 491, 492, 493, 501, 502, 508, 513, 528, 529, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 590, 591, 593, 594, 595, 596, 598, 599, 608, 609, 610, 611, 612, 613, 614, 634, 635, 636, 638, 643, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 717, 718, 719, 734, 735, 736, 739, 743, 744, 745, 759, 760, 765, 766, 768, 769, 771, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 792, 797, 798, 801, 804, 805, 808, 809, 819, 826, 827, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 873, 874, 876, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 931, 933, 934, 935, 936, 941, 950, 953, 954, 957, 959, 960, 968, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 994, 996, 999, 1002, 1003, 1004, 1006, 1007, 1009, 1019, 1021, 1022, 1026, 1027, 1028, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "sparse_cg": [354, 677, 679, 692, 1002, 1038, 1044, 1046, 1047, 1051, 1053], "sparse_coef_": [651, 657, 665, 667, 1037], "sparse_encod": [2, 547, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 687, 688, 689, 690, 691, 1037, 1044, 1045, 1047, 1051], "sparse_encode_parallel": 1037, "sparse_format": [532, 1054], "sparse_func": [1043, 1049], "sparse_input_": 876, "sparse_lasso": 201, "sparse_output": [43, 145, 256, 319, 326, 329, 571, 876, 880, 882, 888, 893, 1016, 1052, 1053], "sparse_output_": [468, 556], "sparse_symmetric_arrai": 991, "sparse_threshold": [189, 468, 471, 1045], "sparsearrai": 1048, "sparsecod": [2, 130, 417, 536, 542, 545, 553, 1044, 1045, 1047, 1049, 1051], "sparsecodingmixin": 1037, "sparsefunc": [2, 389, 980, 981, 982, 983, 984, 985, 986, 1050], "sparsefuncs_fast": [2, 389, 987, 988], "sparsepca": [2, 121, 536, 538, 539, 540, 542, 544, 545, 546, 547, 550, 551, 1037, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1055], "sparser": [88, 195, 206, 286, 417, 475, 482, 544, 548, 1002, 1009, 1020], "sparserandomproject": [2, 236, 246, 901, 1018, 1038, 1043, 1051, 1053, 1054], "sparsetool": 1044, "sparsifi": [46, 200, 367, 663, 664, 671, 672, 673, 681, 682, 683, 909, 989, 1039], "sparsiti": [2, 53, 66, 113, 127, 185, 194, 200, 203, 208, 226, 230, 231, 248, 350, 355, 367, 394, 414, 417, 419, 421, 506, 507, 532, 536, 542, 543, 544, 545, 548, 550, 551, 552, 651, 657, 662, 663, 681, 683, 726, 728, 729, 878, 884, 889, 894, 999, 1002, 1009, 1016, 1027, 1039], "sparsity_en_lr": 206, "sparsity_l1_lr": 206, "sparsity_l2_lr": 206, "sparsity_ratio": 367, "spatial": [81, 82, 88, 191, 200, 232, 310, 375, 394, 412, 423, 448, 450, 454, 456, 461, 684, 697, 765, 768, 783, 784, 785, 786, 797, 798, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 1002, 1009, 1016, 1039, 1043, 1050, 1053], "spawn": [367, 392, 805, 819, 830, 831, 832, 1048], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362], "speak": [355, 367, 380, 1020], "spearman": [191, 640, 641, 997], "spearmanr": 191, "spec": [1052, 1053], "speci": [2, 42, 118, 185, 252, 294, 354, 373, 418, 503, 711, 794, 854, 913, 924, 1006, 1012, 1027, 1032, 1037], "special": [147, 188, 205, 233, 290, 303, 319, 343, 374, 376, 382, 386, 392, 394, 412, 415, 417, 468, 471, 558, 560, 564, 830, 921, 995, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1022, 1044, 1047, 1049, 1051, 1056], "special_charact": [921, 1022], "species_nam": [50, 306], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 88, 95, 98, 102, 104, 141, 151, 156, 177, 180, 185, 188, 189, 193, 219, 233, 267, 268, 273, 290, 313, 322, 323, 327, 330, 347, 354, 355, 356, 363, 367, 368, 375, 380, 383, 385, 386, 388, 392, 394, 398, 406, 408, 412, 413, 416, 417, 419, 420, 421, 422, 436, 501, 508, 539, 556, 562, 569, 572, 573, 574, 575, 579, 593, 596, 598, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 645, 648, 651, 652, 657, 663, 677, 692, 702, 704, 717, 718, 805, 806, 807, 812, 813, 814, 819, 832, 845, 926, 945, 947, 948, 968, 981, 982, 983, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1011, 1013, 1014, 1016, 1020, 1022, 1023, 1024, 1029, 1037, 1041, 1045, 1046, 1047, 1048, 1051, 1052, 1054], "specifi": [2, 43, 58, 64, 88, 121, 145, 146, 151, 173, 176, 178, 179, 180, 204, 216, 223, 258, 267, 281, 367, 368, 374, 380, 382, 388, 389, 393, 394, 403, 406, 410, 412, 413, 416, 417, 419, 421, 422, 424, 426, 441, 445, 449, 454, 456, 467, 468, 471, 473, 474, 476, 477, 478, 479, 480, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 508, 520, 532, 536, 538, 542, 543, 545, 546, 551, 552, 557, 562, 564, 565, 566, 567, 569, 572, 573, 588, 589, 598, 599, 602, 607, 615, 616, 625, 636, 637, 638, 643, 648, 651, 652, 653, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 668, 670, 673, 674, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 692, 696, 703, 705, 707, 714, 716, 734, 735, 743, 747, 759, 776, 784, 785, 788, 789, 792, 805, 808, 809, 811, 812, 814, 818, 819, 822, 827, 828, 829, 830, 831, 832, 833, 834, 836, 840, 843, 844, 845, 847, 848, 849, 850, 854, 859, 882, 883, 884, 887, 888, 890, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 948, 955, 989, 996, 1002, 1003, 1005, 1006, 1009, 1013, 1014, 1016, 1019, 1020, 1021, 1037, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "spector": 416, "spectral": [2, 53, 56, 71, 79, 80, 82, 88, 102, 185, 236, 237, 334, 336, 354, 355, 356, 380, 420, 453, 455, 456, 457, 466, 473, 474, 475, 476, 477, 478, 479, 480, 492, 516, 518, 596, 693, 694, 695, 696, 697, 700, 724, 800, 1009, 1019, 1027, 1031, 1032, 1037, 1038], "spectral_clust": [2, 80, 99, 1045, 1047, 1049, 1050, 1051, 1052, 1054], "spectral_embed": [2, 394, 1003, 1038, 1041, 1043, 1045, 1047, 1050, 1051, 1052, 1054], "spectralbiclust": [2, 409, 457, 1039, 1043, 1044, 1048], "spectralclust": [2, 79, 326, 412, 444, 1009, 1037, 1038, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "spectralcoclust": [2, 57, 59, 409, 455, 1039, 1044, 1048], "spectralembed": [2, 85, 235, 236, 237, 693, 694, 695, 697, 1003, 1038, 1043, 1047, 1051, 1052, 1054], "spectrum": [105, 529, 549, 700, 953, 1030, 1045], "speech": [420, 1006], "speed": [80, 81, 90, 102, 124, 133, 141, 184, 189, 201, 204, 208, 252, 293, 324, 333, 354, 356, 369, 380, 383, 389, 392, 394, 408, 410, 412, 417, 419, 420, 423, 447, 448, 451, 452, 453, 454, 456, 461, 463, 464, 465, 466, 536, 537, 615, 632, 637, 638, 639, 644, 651, 652, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 686, 689, 697, 802, 803, 811, 833, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 884, 953, 995, 998, 1003, 1005, 1007, 1020, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "speedi": 367, "speedup": [329, 367, 417, 419, 655, 659, 662, 1037, 1038, 1039, 1040, 1052, 1056], "speer": 1039, "spell": 420, "spend": 420, "spent": [293, 319, 381, 386, 833, 1052], "sperret6": 1055, "sphere": [135, 185, 234, 235, 238, 239, 240, 293, 355, 418, 524, 594, 693, 694, 695, 696, 697, 769, 938, 1000, 1004, 1009, 1027], "sphere_data": 237, "spheric": [70, 90, 115, 152, 237, 260, 262, 263, 306, 376, 769, 802, 803, 1002, 1005, 1009], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 368, 384, 394, 398, 405, 1037, 1044], "sphinxcontrib": [380, 398, 405], "sphinxext": [380, 398, 405], "sphx_glr_auto_examples_cluster_plot_cluster_iri": [412, 451], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1037, "spidlen": [697, 1003], "spie": [170, 377], "spielman": 1047, "spike": 189, "spikebh": 1051, "spikhalskii": 1042, "spiki": 43, "spin": 388, "spine": [46, 54, 70, 226, 313], "spirit": 417, "spite": 1008, "spline": [2, 185, 194, 195, 288, 298, 521, 522, 523, 677, 870, 884, 888, 1025, 1027, 1050], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 216, 252, 325, 884, 1016, 1050, 1052, 1053], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 102, 126, 135, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 161, 166, 187, 188, 191, 200, 210, 211, 215, 218, 223, 233, 243, 252, 259, 260, 266, 267, 268, 271, 273, 278, 280, 283, 287, 290, 296, 302, 308, 310, 314, 315, 320, 326, 328, 335, 343, 354, 356, 362, 375, 387, 393, 394, 398, 403, 410, 411, 412, 417, 419, 420, 421, 441, 446, 447, 476, 477, 483, 484, 502, 536, 542, 544, 547, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 593, 594, 596, 599, 607, 652, 656, 658, 660, 666, 668, 670, 678, 680, 700, 709, 710, 722, 736, 742, 762, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 843, 849, 850, 866, 867, 890, 894, 895, 897, 898, 899, 900, 917, 918, 919, 920, 976, 995, 998, 1002, 1003, 1009, 1012, 1013, 1014, 1016, 1020, 1022, 1026, 1032, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "split0_test_precis": [805, 819], "split0_test_scor": [805, 819, 1043], "split0_train_scor": [805, 819, 1043], "split1_test_scor": [805, 819], "split1_train_scor": [805, 819], "split2_test_scor": 805, "split_cod": 417, "split_sign": [536, 542, 547], "splitter": [43, 249, 328, 329, 394, 403, 416, 441, 476, 569, 570, 572, 573, 599, 607, 652, 656, 658, 660, 664, 666, 668, 670, 678, 680, 805, 807, 808, 809, 810, 811, 819, 820, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 836, 840, 843, 917, 918, 919, 920, 1022, 1026, 1043, 1044, 1045, 1046, 1053, 1054, 1055, 1056], "splot": [259, 264], "splt": 216, "sply88": 1051, "spmatrix": 1054, "spolski": 420, "sport": [57, 375], "spot": [86, 244, 412], "spottabl": 386, "spread": [43, 75, 237, 274, 313, 332, 333, 334, 337, 350, 367, 380, 412, 456, 466, 520, 886, 898, 906, 1006], "spring": [43, 52, 189], "springboard": 1025, "springer": [138, 139, 150, 177, 272, 410, 412, 416, 417, 419, 525, 540, 564, 565, 695, 699, 701, 710, 725, 731, 745, 746, 761, 802, 917, 918, 1003, 1006, 1007, 1013, 1022], "sprint": [379, 380, 1037], "spuriou": [343, 388, 1016, 1050, 1051, 1052], "spy": 209, "sq": 774, "sqeuclidean": [73, 454, 461, 783, 784, 785], "sqft": 252, "sql": 374, "sqr": 75, "sqrt": [51, 111, 112, 113, 124, 130, 139, 161, 191, 195, 197, 238, 240, 254, 258, 259, 260, 263, 264, 273, 348, 350, 412, 419, 420, 422, 467, 473, 474, 475, 476, 477, 478, 479, 480, 543, 545, 552, 562, 563, 564, 565, 569, 570, 624, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 704, 736, 768, 769, 774, 889, 902, 917, 918, 919, 920, 998, 1002, 1003, 1006, 1008, 1018, 1051], "squar": [2, 43, 44, 52, 94, 103, 110, 111, 112, 114, 115, 122, 123, 131, 138, 149, 151, 152, 170, 172, 177, 185, 187, 188, 194, 195, 197, 198, 200, 204, 205, 211, 215, 217, 220, 225, 232, 233, 245, 246, 248, 261, 288, 317, 324, 325, 327, 340, 354, 372, 377, 380, 386, 389, 394, 412, 414, 415, 417, 418, 419, 423, 424, 435, 444, 446, 447, 448, 450, 451, 453, 454, 458, 461, 463, 464, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 506, 536, 542, 544, 546, 548, 550, 551, 552, 554, 557, 559, 561, 563, 564, 565, 567, 570, 573, 575, 595, 596, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 616, 620, 627, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 690, 691, 692, 693, 695, 697, 699, 701, 714, 726, 727, 728, 729, 755, 756, 763, 764, 768, 774, 775, 790, 795, 796, 835, 842, 843, 851, 852, 855, 856, 857, 859, 860, 867, 870, 889, 909, 910, 912, 914, 915, 916, 918, 920, 951, 978, 991, 997, 999, 1000, 1009, 1010, 1014, 1020, 1022, 1027, 1028, 1032, 1037, 1040, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056], "square_dist": 1049, "squared_epsilon_insensit": [672, 681, 683, 910, 1002, 1043], "squared_error": [46, 52, 130, 148, 149, 325, 419, 563, 564, 565, 567, 570, 676, 681, 683, 698, 918, 920, 1020, 1022, 1050, 1053, 1054], "squared_hing": [222, 350, 671, 681, 909, 916, 1002, 1021], "squared_loss": [392, 1050], "squareform": 191, "squash": [252, 384, 422, 536, 542, 547, 553], "squeez": [107, 178, 179, 252, 293, 313, 1056], "sr": 1030, "sr_color": 239, "sr_err": 239, "sr_lle": 239, "sr_point": 239, "sr_tsne": 239, "srajan": 1045, "sre": 1052, "srebro": 1020, "srep30750": 412, "sri": [676, 1002, 1044, 1045], "sridharan": 1042, "sriharsha": [1045, 1046], "srikantan": 1002, "srimukh": 1049, "srinath": [1051, 1052], "srinivasan": [1045, 1048], "sripada": 1049, "srivastava": [1040, 1052, 1055], "srivatsan": [1043, 1044, 1047], "srvanrel": 1043, "sr\u0161e\u0148": 1055, "ss": 416, "sse": 447, "sseg": 1042, "ssrn": [215, 233], "sss": 825, "ssvm": 392, "st": [81, 100, 273, 327, 1040, 1043, 1045], "st30": 337, "st50": 337, "st_pipelin": 336, "sta4273": 649, "stabil": [72, 139, 146, 188, 236, 278, 313, 350, 355, 394, 409, 450, 655, 659, 675, 847, 866, 867, 885, 897, 952, 996, 1002, 1005, 1016, 1026, 1037, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "stabilis": 195, "stabl": [43, 64, 188, 209, 213, 217, 293, 323, 350, 355, 378, 380, 384, 389, 394, 398, 416, 420, 424, 475, 476, 482, 538, 546, 660, 677, 679, 692, 697, 729, 757, 952, 953, 1002, 1008, 1009, 1016, 1026, 1033, 1037, 1038, 1043, 1048, 1050, 1054], "stack": [2, 14, 107, 134, 145, 159, 183, 185, 215, 244, 269, 298, 362, 379, 388, 392, 394, 418, 468, 470, 471, 501, 520, 567, 570, 572, 573, 617, 632, 633, 635, 658, 678, 706, 830, 832, 870, 874, 882, 883, 889, 979, 996, 1026, 1027, 1028, 1029, 1032, 1037, 1040, 1044, 1045, 1046, 1047, 1048], "stack_method": [419, 572], "stack_method_": [419, 572, 573], "stacking_regressor": 156, "stackingclassifi": [2, 322, 363, 394, 403, 419, 573, 996, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056], "stackingregressor": [2, 156, 322, 394, 403, 419, 572, 996, 1047, 1048, 1049, 1050, 1051, 1054, 1056], "stackingregressorinot": 156, "stackoverflow": [385, 388, 392], "stade": 1041, "stage": [0, 46, 63, 104, 135, 140, 146, 149, 267, 384, 394, 408, 412, 419, 452, 558, 559, 564, 565, 566, 567, 593, 594, 596, 607, 1003, 1016, 1024, 1045, 1049], "staged_decision_funct": [558, 564, 566], "staged_predict": [135, 146, 149, 419, 558, 559, 564, 565, 566, 567, 1037, 1049], "staged_predict_proba": [147, 150, 558, 564, 566, 1037], "staged_scor": [558, 559], "stagewis": 135, "stagg": 1050, "stai": [43, 52, 63, 72, 130, 188, 355, 379, 380, 384, 394, 395, 1011, 1029, 1043], "stairstep": 280, "stalei": [1046, 1047], "stall": [379, 383], "stallei": 1049, "stan": [847, 1054], "stand": [276, 356, 384, 392, 417, 536, 542, 550, 551, 601, 614, 683, 710, 722, 741, 742, 762, 791, 793, 800, 1005, 1006, 1012], "standalon": [386, 663, 909], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 88, 94, 102, 103, 105, 111, 112, 116, 122, 135, 138, 140, 141, 142, 143, 144, 152, 156, 170, 172, 177, 179, 181, 188, 195, 203, 204, 213, 215, 224, 235, 236, 237, 247, 252, 263, 267, 268, 271, 272, 273, 274, 276, 313, 318, 341, 354, 367, 368, 372, 373, 374, 376, 377, 378, 380, 382, 383, 385, 386, 389, 392, 394, 398, 406, 408, 412, 414, 415, 416, 420, 422, 450, 468, 472, 476, 492, 501, 506, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 529, 530, 535, 537, 540, 546, 557, 595, 599, 616, 639, 649, 650, 677, 678, 679, 680, 681, 683, 692, 694, 698, 793, 811, 826, 828, 846, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 873, 878, 879, 882, 885, 886, 887, 889, 897, 898, 899, 900, 907, 909, 910, 935, 995, 998, 1002, 1003, 1006, 1008, 1009, 1010, 1012, 1020, 1021, 1026, 1030, 1032, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1055], "standard_coef_": 1048, "standard_intercept_": 1048, "standard_norm": [363, 692], "standard_scal": 254, "standard_t": 123, "standardscal": [2, 45, 49, 67, 79, 82, 88, 91, 95, 103, 105, 116, 131, 156, 170, 188, 195, 202, 204, 206, 215, 231, 233, 243, 244, 252, 253, 254, 256, 267, 270, 280, 287, 296, 301, 302, 308, 315, 318, 322, 323, 325, 326, 327, 329, 330, 343, 346, 363, 369, 380, 382, 385, 389, 393, 413, 416, 433, 470, 471, 572, 681, 683, 869, 870, 873, 886, 900, 909, 910, 911, 912, 914, 915, 996, 1003, 1010, 1016, 1020, 1021, 1023, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "standardscalerifittedstandardscal": 256, "standardscalerstandardscal": [103, 156, 188, 243, 244, 253, 254, 256, 267, 280, 287, 323, 326], "standpoint": 83, "stanford": [170, 377, 654, 687, 688, 844, 847, 848, 902, 1004], "stanislav": [1052, 1053], "stanlei": [1051, 1052, 1053], "stap": 1045, "stapl": 1041, "star": [70, 119, 159, 380], "stareh": 1048, "start": [0, 43, 46, 49, 51, 52, 58, 63, 86, 91, 97, 100, 106, 116, 124, 140, 146, 148, 167, 170, 177, 179, 189, 193, 196, 197, 204, 215, 216, 217, 223, 233, 235, 239, 243, 247, 249, 261, 267, 273, 281, 293, 326, 328, 333, 354, 362, 363, 367, 368, 369, 380, 381, 382, 384, 385, 386, 392, 394, 398, 409, 412, 416, 417, 421, 422, 444, 446, 454, 458, 460, 543, 615, 622, 637, 650, 658, 664, 671, 672, 673, 681, 682, 683, 695, 699, 786, 787, 794, 802, 803, 805, 808, 809, 819, 851, 852, 853, 855, 857, 865, 959, 989, 995, 1002, 1005, 1010, 1011, 1020, 1026, 1030, 1040, 1042, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 238], "start_reut": 47, "start_tim": [46, 49, 57, 142, 143, 146, 156, 172, 204, 236], "start_titl": 47, "start_top": 47, "startstart": 400, "startswith": [52, 102, 236, 306], "startup": 1030, "stat": [2, 45, 47, 49, 102, 111, 170, 172, 191, 270, 273, 281, 285, 298, 324, 332, 333, 377, 389, 393, 414, 478, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 687, 688, 809, 817, 819, 917, 918, 955, 995, 1002, 1016, 1044, 1046, 1050], "stat_learn_tut_index": [161, 162, 163], "state": [37, 86, 90, 102, 104, 111, 151, 217, 246, 254, 259, 267, 279, 324, 363, 368, 369, 380, 382, 386, 388, 392, 394, 395, 411, 419, 420, 425, 444, 447, 451, 453, 458, 463, 479, 549, 594, 684, 808, 809, 817, 819, 821, 849, 850, 856, 904, 905, 938, 995, 996, 1002, 1008, 1011, 1018, 1026, 1030, 1039, 1041, 1043, 1045, 1047, 1050, 1053], "state_to_print": 381, "stateless": [102, 355, 369, 394, 420, 587, 588, 594, 643, 872, 873, 881, 928, 989, 1016, 1053, 1056], "statement": [188, 382, 385, 388, 392, 394, 417], "static": [380, 382, 386, 388, 651, 652, 657, 658, 665, 666, 667, 668], "station": 177, "stationari": [176, 422, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630], "statist": [2, 47, 52, 112, 135, 138, 139, 150, 165, 169, 170, 185, 187, 188, 189, 190, 200, 202, 219, 265, 267, 270, 272, 275, 282, 290, 292, 313, 319, 324, 363, 373, 375, 377, 386, 394, 410, 411, 412, 413, 414, 416, 417, 419, 421, 437, 473, 478, 498, 499, 521, 522, 523, 525, 527, 546, 558, 564, 565, 567, 609, 610, 611, 614, 632, 635, 639, 640, 649, 654, 661, 695, 699, 701, 715, 721, 726, 728, 729, 736, 748, 793, 805, 821, 839, 866, 867, 885, 886, 887, 889, 894, 897, 898, 900, 914, 917, 918, 980, 995, 996, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1013, 1014, 1016, 1020, 1021, 1022, 1023, 1024, 1027, 1042, 1045, 1048, 1049, 1051, 1052, 1055], "statistician": [394, 889], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 635, "statlearnspars": [726, 728, 729], "statlib": 375, "statnikov": 1006, "statsmodel": [1002, 1025], "statu": [52, 133, 329, 374, 398, 501, 849, 850, 1055], "statweb": [654, 687, 688], "staub": 1043, "staubda": 1040, "std": [43, 50, 51, 52, 72, 80, 83, 87, 94, 99, 110, 112, 113, 122, 123, 124, 142, 144, 145, 151, 156, 178, 181, 183, 184, 188, 196, 203, 224, 246, 271, 272, 273, 275, 276, 278, 281, 283, 287, 288, 319, 335, 346, 355, 363, 394, 412, 416, 419, 520, 611, 614, 834, 889, 900, 1016, 1045, 1049], "std_": [277, 1042], "std_auc": 283, "std_display_styl": [248, 275, 811, 828], "std_error": 161, "std_fit_tim": [141, 295, 805, 819], "std_i": 188, "std_precis": 271, "std_predict": 179, "std_predictions_gpr": 172, "std_recal": 271, "std_scaler": 330, "std_score": [355, 1050], "std_score_tim": [141, 274, 805, 819], "std_test_precis": 271, "std_test_recal": 271, "std_test_scor": [103, 105, 141, 161, 169, 272, 273, 274, 281, 295, 476, 599, 805, 819, 1043, 1050], "std_time": 1043, "std_tpr": 283, "std_train_scor": [805, 819, 1043], "std_y_pr": 177, "stderr": [51, 838], "stdin": 388, "stdout": [47, 121, 223, 838, 858, 866, 867], "stds_california": 184, "stds_diabet": 184, "steadi": [904, 905], "steelblu": [122, 123, 158], "steep": [2, 173, 189, 282, 283, 412, 416, 422, 454, 460], "stef": [632, 996], "stefan": [1040, 1041, 1045, 1047], "stefani": [0, 1050, 1052, 1053, 1054, 1055, 1056], "stefanini": 1051, "stefano": 1039, "steffen": 1055, "stehl": [1051, 1052], "stein": 1043, "steinbach": [412, 1052, 1054], "steinfurt": [1047, 1049], "steingold": [1044, 1045], "steinlei": [412, 710], "steinley2004": 710, "stella": [412, 456, 466], "stellalin7": 1052, "stem": [138, 146, 190, 214, 264, 286, 416, 420, 998, 1008], "step": [52, 58, 63, 69, 77, 87, 88, 91, 100, 102, 103, 104, 105, 106, 112, 116, 124, 128, 135, 140, 144, 145, 146, 156, 167, 168, 169, 174, 177, 188, 190, 215, 223, 233, 243, 244, 247, 253, 256, 264, 267, 271, 274, 280, 282, 287, 293, 295, 296, 301, 308, 311, 315, 318, 319, 323, 326, 337, 339, 343, 355, 356, 358, 363, 367, 375, 378, 379, 380, 382, 383, 385, 388, 392, 394, 406, 409, 410, 412, 414, 415, 417, 419, 420, 421, 446, 451, 453, 541, 542, 543, 544, 551, 568, 593, 594, 596, 598, 599, 602, 611, 632, 649, 653, 671, 672, 674, 681, 683, 684, 685, 699, 705, 802, 803, 805, 808, 809, 819, 840, 841, 842, 843, 865, 866, 867, 869, 870, 872, 909, 910, 911, 912, 914, 915, 952, 953, 976, 980, 996, 1002, 1005, 1010, 1011, 1016, 1020, 1022, 1023, 1025, 1029, 1037, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1053, 1055], "stephan": [713, 1040, 1046, 1047, 1049], "stephani": 1048, "stephen": [1030, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050], "stepwis": [151, 640, 659, 660, 661, 687, 688, 1002], "stern": [793, 1006], "steve": [1039, 1041, 1045, 1050, 1052], "steven": [1039, 1040, 1042, 1044, 1045, 1050, 1052, 1053, 1055], "steward": 1044, "stewart": [1042, 1047, 1050, 1052, 1055], "stick": [48, 802, 1005], "stijn": 1044, "stikhin": 1047, "still": [43, 52, 64, 68, 79, 86, 88, 90, 95, 113, 118, 125, 143, 148, 151, 156, 172, 178, 187, 188, 190, 191, 195, 200, 203, 215, 217, 233, 247, 276, 282, 286, 313, 324, 325, 328, 354, 355, 363, 369, 374, 379, 380, 384, 385, 386, 388, 394, 412, 416, 419, 420, 423, 444, 448, 458, 478, 501, 632, 637, 640, 642, 663, 664, 722, 761, 783, 786, 797, 798, 807, 808, 809, 822, 825, 887, 889, 909, 933, 958, 995, 996, 1000, 1002, 1005, 1006, 1009, 1012, 1014, 1021, 1022, 1024, 1026, 1029, 1030, 1037, 1039, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1056], "stine": [1045, 1046], "stochast": [2, 46, 91, 146, 147, 150, 162, 185, 193, 194, 202, 237, 239, 242, 247, 299, 301, 302, 307, 310, 325, 342, 412, 417, 419, 466, 492, 501, 507, 508, 509, 519, 527, 541, 549, 564, 565, 609, 632, 636, 644, 663, 664, 673, 677, 679, 681, 682, 683, 684, 692, 693, 694, 695, 697, 835, 858, 865, 866, 867, 870, 879, 913, 952, 953, 979, 995, 1009, 1010, 1012, 1027, 1028, 1031, 1032, 1037, 1038, 1041, 1042, 1044, 1046, 1048], "stochastic_gradi": [1039, 1040, 1046], "stock": [42, 80, 85, 185, 235, 236, 412, 414, 458, 475, 476, 694, 1003, 1027], "stogbauer": [612, 613], "stojanov": [1051, 1052], "stolbunov": 1042, "stone": [380, 917, 918, 1022], "stop": [43, 51, 55, 79, 95, 134, 135, 141, 177, 179, 185, 189, 194, 202, 217, 317, 323, 380, 382, 388, 389, 394, 412, 417, 419, 421, 444, 445, 447, 449, 451, 453, 456, 458, 466, 467, 475, 476, 482, 486, 487, 488, 494, 501, 513, 514, 537, 541, 542, 543, 544, 545, 548, 550, 551, 552, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 593, 594, 596, 607, 622, 632, 649, 650, 651, 653, 654, 657, 661, 663, 664, 671, 672, 673, 674, 676, 681, 682, 683, 685, 696, 697, 700, 719, 755, 802, 803, 835, 866, 867, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 959, 979, 995, 1002, 1010, 1011, 1021, 1022, 1026, 1027, 1028, 1030, 1032, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054], "stop_n_inli": [676, 1002], "stop_prob": 676, "stop_scor": [676, 1002], "stop_word": [54, 57, 354, 355, 420, 593, 594, 596], "stop_words_": 1055, "stopiter": 1049, "stopword": 493, "storag": [0, 356, 394, 663, 664, 671, 672, 673, 681, 682, 683, 909, 1009, 1021, 1040, 1045], "storch": 1046, "store": [2, 68, 86, 87, 102, 104, 112, 118, 167, 180, 193, 201, 204, 219, 236, 243, 253, 263, 267, 278, 282, 332, 356, 362, 367, 374, 375, 380, 382, 387, 388, 389, 392, 394, 406, 408, 413, 415, 417, 419, 420, 422, 423, 442, 444, 448, 450, 454, 461, 468, 471, 473, 474, 477, 478, 479, 480, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 508, 513, 539, 540, 546, 554, 555, 560, 561, 562, 563, 568, 569, 570, 571, 574, 575, 590, 594, 615, 616, 632, 636, 637, 640, 654, 655, 659, 665, 666, 667, 668, 671, 672, 678, 680, 681, 682, 683, 693, 694, 695, 697, 702, 703, 705, 706, 707, 786, 802, 803, 805, 811, 819, 827, 828, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 880, 887, 889, 890, 904, 905, 906, 935, 936, 962, 963, 976, 979, 991, 996, 998, 1002, 1007, 1009, 1018, 1021, 1022, 1025, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "store_cent": [450, 1054], "store_covari": [70, 554, 555, 1042, 1044], "store_cv_result": [267, 678, 680, 827, 1055], "store_cv_valu": [678, 680, 1045, 1048, 1055], "store_precis": [69, 110, 473, 474, 477, 478, 479, 480], "stori": [187, 273, 290, 375, 1005], "stork": 1000, "stott": 1045, "stoyanov": [1045, 1046], "str": [47, 49, 52, 91, 93, 129, 131, 144, 168, 233, 252, 273, 285, 293, 303, 341, 354, 374, 375, 389, 420, 423, 424, 428, 433, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 461, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 622, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 697, 701, 702, 703, 704, 705, 707, 712, 714, 716, 718, 732, 734, 735, 737, 738, 743, 747, 776, 779, 783, 784, 785, 786, 787, 788, 789, 792, 794, 797, 798, 804, 805, 806, 807, 808, 809, 811, 812, 814, 816, 817, 819, 823, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 928, 930, 931, 934, 935, 936, 939, 943, 945, 949, 961, 962, 963, 965, 968, 989, 990, 993, 1052], "str_": [51, 282, 498, 505, 509, 515, 877], "strai": 1011, "straight": [126, 205, 211, 213, 270, 347, 367], "straightforward": [314, 379, 411, 417, 1030], "straka": 1049, "strateg": 395, "strategi": [2, 30, 43, 52, 85, 87, 91, 94, 103, 145, 150, 151, 156, 162, 167, 169, 183, 184, 185, 190, 200, 204, 215, 223, 233, 244, 252, 254, 265, 267, 272, 274, 276, 277, 278, 280, 281, 282, 283, 285, 287, 292, 307, 310, 312, 314, 315, 319, 320, 322, 323, 326, 356, 366, 382, 386, 393, 394, 406, 411, 416, 419, 420, 421, 424, 441, 442, 443, 449, 451, 456, 466, 476, 507, 509, 517, 519, 527, 538, 543, 556, 557, 566, 567, 569, 570, 572, 573, 593, 594, 596, 597, 599, 607, 632, 633, 635, 639, 650, 652, 656, 658, 660, 666, 668, 670, 678, 680, 696, 700, 709, 716, 718, 737, 760, 762, 800, 805, 807, 808, 809, 811, 819, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 866, 867, 874, 879, 890, 904, 909, 911, 914, 917, 918, 919, 920, 976, 995, 996, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1020, 1021, 1022, 1027, 1032, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "stratif": [806, 807, 813, 814, 821, 823, 824, 825, 976, 1046], "stratifi": [2, 44, 126, 142, 152, 166, 190, 230, 243, 252, 256, 267, 268, 273, 276, 282, 296, 301, 302, 322, 382, 394, 411, 556, 564, 572, 573, 607, 664, 671, 673, 681, 804, 805, 808, 809, 811, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 843, 858, 866, 976, 1006, 1009, 1042, 1043, 1044, 1046, 1047, 1050], "stratifiedgroupkfold": [2, 268, 1050], "stratifiedkfold": [2, 169, 260, 268, 279, 283, 335, 416, 441, 572, 573, 599, 607, 664, 678, 805, 806, 808, 809, 810, 811, 813, 815, 819, 823, 825, 828, 829, 830, 831, 832, 833, 834, 836, 890, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1050], "stratifiedshufflesplit": [2, 268, 343, 416, 1037, 1038, 1043, 1044, 1050], "stream": [47, 412, 417, 420, 466, 594, 878, 879, 889, 998, 1045, 1048], "stream_reuters_docu": 47, "streamhandl": 1048, "streamlin": 1002, "street": [156, 170, 377], "strehl": 412, "strength": [51, 156, 179, 203, 215, 219, 274, 286, 322, 367, 415, 419, 450, 572, 573, 648, 653, 654, 657, 663, 664, 674, 677, 678, 679, 680, 681, 683, 685, 692, 788, 866, 867, 909, 910, 914, 915, 995, 1002, 1009, 1012, 1020, 1021], "stress": [695, 699, 1003, 1052], "stress_": 695, "stretch": [239, 262], "stretched_gaussian": 262, "strickland": 1043, "strict": [363, 378, 394, 408, 417, 508, 540, 593, 594, 596, 1002, 1037, 1046, 1049, 1055], "stricter": 183, "strictli": [64, 215, 233, 249, 313, 328, 355, 385, 394, 410, 415, 417, 419, 420, 513, 514, 540, 546, 549, 566, 567, 593, 596, 607, 647, 675, 676, 678, 680, 700, 705, 744, 771, 805, 808, 809, 815, 819, 832, 858, 885, 897, 901, 902, 904, 905, 909, 910, 914, 915, 951, 995, 997, 1002, 1006, 1016, 1020, 1038, 1048, 1053], "striebel": [1043, 1044], "strife": 1003, "strike": [146, 189, 219], "string": [2, 47, 103, 144, 180, 233, 244, 267, 277, 325, 330, 356, 367, 374, 375, 380, 381, 382, 386, 394, 413, 416, 419, 420, 421, 423, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 493, 494, 501, 510, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 622, 625, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 704, 714, 716, 724, 737, 767, 770, 776, 779, 783, 784, 785, 786, 797, 798, 802, 803, 805, 808, 809, 811, 819, 827, 828, 832, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 926, 933, 935, 936, 944, 945, 946, 969, 989, 990, 995, 996, 1006, 1019, 1021, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "strip": [54, 233, 355, 367, 374, 375, 501], "strip_acc": [593, 594, 596], "strip_accents_unicod": 1047, "stripe": 316, "stripplot": 188, "strive": [379, 395, 1030], "strong": [32, 43, 52, 87, 172, 185, 187, 188, 194, 208, 212, 213, 219, 220, 221, 248, 292, 320, 350, 410, 417, 419, 529, 654, 677, 999, 1000, 1002, 1003, 1005, 1013, 1021, 1027], "stronger": [274, 648, 657, 663, 664, 677, 678, 679, 680, 681, 683, 692], "strongest": [55, 208], "strongli": [62, 64, 113, 116, 124, 145, 149, 188, 198, 230, 249, 279, 354, 380, 397, 398, 410, 419, 663, 741, 800, 1002, 1003, 1032, 1046, 1053], "stroudsburg": [906, 1019], "strubel": 1050, "struct": [378, 394, 1040], "structur": [0, 2, 42, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 80, 85, 86, 87, 88, 89, 95, 99, 113, 131, 152, 171, 185, 212, 235, 236, 239, 244, 249, 264, 268, 279, 298, 318, 323, 326, 331, 343, 347, 357, 358, 359, 367, 375, 377, 380, 382, 385, 392, 394, 395, 398, 409, 412, 414, 415, 416, 417, 419, 420, 421, 422, 445, 446, 449, 450, 454, 455, 456, 457, 458, 461, 466, 467, 475, 476, 501, 508, 509, 513, 516, 518, 519, 526, 535, 540, 546, 549, 568, 615, 616, 617, 621, 622, 623, 694, 701, 714, 718, 835, 857, 862, 889, 901, 902, 905, 917, 918, 919, 920, 923, 952, 953, 976, 979, 1003, 1005, 1006, 1009, 1011, 1012, 1016, 1019, 1022, 1025, 1026, 1027, 1037, 1038, 1040, 1041, 1043, 1047], "struggl": [379, 395, 412], "stuck": [94, 697, 1003], "student": [0, 123, 273, 1003, 1026, 1030], "studi": [43, 64, 93, 148, 215, 233, 276, 279, 280, 287, 354, 375, 377, 416, 421, 701, 713, 763, 764, 834, 1004, 1006, 1020], "studio": [378, 1030], "study_135": 374, "study_14": 374, "study_34": 374, "study_98": 374, "study_99": 374, "stuff": 1030, "stump": [137, 419, 564, 1048], "stupp": [1043, 1044], "stupperich": 1049, "sturla": 1039, "style": [112, 148, 204, 223, 233, 277, 380, 387, 412, 420, 447, 451, 463, 705, 811, 828, 935, 936, 949, 1037, 1040, 1051], "st\u00e9fan": 381, "st\u00e9phan": 1047, "st\u00e9phane": [1046, 1047, 1051, 1052], "su": [726, 728, 729], "sub": [47, 72, 86, 88, 90, 93, 102, 130, 249, 251, 258, 324, 332, 333, 340, 343, 351, 375, 380, 382, 386, 394, 413, 419, 420, 441, 447, 448, 451, 453, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 541, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 593, 595, 596, 602, 615, 616, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 868, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 926, 963, 1002, 1006, 1020, 1047, 1051, 1053, 1054], "sub_sampl": 541, "subclass": [133, 382, 422, 579, 971, 1042, 1045, 1050, 1054], "subclust": [412, 446], "subcluster_centers_": [77, 446], "subcluster_labels_": 446, "subcompon": [121, 417], "subdirectori": 380, "subdivid": [375, 422], "subestim": 382, "subestimator__c": 382, "subestimator__class_weight": 382, "subestimator__du": 382, "subestimator__fit_intercept": 382, "subestimator__intercept_sc": 382, "subestimator__l1_ratio": 382, "subestimator__max_it": 382, "subestimator__multi_class": 382, "subestimator__n_job": 382, "subestimator__penalti": 382, "subestimator__random_st": 382, "subestimator__solv": 382, "subestimator__tol": 382, "subestimator__verbos": 382, "subestimator__warm_start": 382, "subexpress": 52, "subfold": [2, 378, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 508, 1050], "subgraph": 409, "subhash": 1051, "subhodeep": [1037, 1038, 1039], "subi": [1046, 1047, 1052], "subject": [16, 102, 153, 264, 276, 354, 375, 380, 382, 384, 392, 394, 395, 410, 414, 416, 417, 500, 663, 664, 690, 827, 872, 928, 975, 997, 1002, 1021, 1024, 1046, 1047, 1050, 1052], "subject_body_extractor": 102, "subject_body_transform": 102, "subjectbodi": 102, "subjectbodyextractor": 102, "sublinear": [417, 595, 596], "sublinear_tf": [354, 417, 420, 595, 596], "submatric": 409, "submatrix": [409, 427, 455, 457], "submiss": 380, "submit": [377, 378, 379, 382, 383, 384, 385, 388, 394, 395, 398], "submitt": 379, "submodel": 416, "submodul": [384, 998, 1004, 1037], "subobject": [426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 808, 809, 819, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920], "suboptim": [416, 705, 707, 787, 794, 1009, 1045, 1053], "subpackag": [380, 384, 1041, 1046], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 99, 105, 107, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 126, 130, 131, 135, 137, 138, 140, 141, 142, 144, 145, 146, 149, 151, 153, 154, 156, 157, 158, 165, 174, 176, 181, 183, 184, 188, 189, 191, 193, 196, 199, 206, 207, 209, 210, 213, 214, 215, 216, 217, 219, 223, 228, 229, 231, 233, 235, 236, 239, 240, 242, 243, 245, 247, 248, 250, 251, 252, 253, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 273, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 295, 296, 297, 298, 301, 302, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 326, 327, 335, 337, 340, 341, 342, 343, 347, 349, 350, 351, 352, 354, 355, 356, 358, 359, 376, 387], "subplot_kw": [235, 297], "subplot_spec": 387, "subplot_titl": 141, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 83, 84, 87, 95, 97, 111, 113, 119, 123, 124, 130, 137, 138, 156, 188, 214, 215, 230, 233, 242, 250, 258, 260, 261, 264, 268, 284, 298, 306, 308, 311, 315, 324, 333, 340, 343], "subpopul": [232, 684, 1002], "subproblem": 1042, "subrahmanyam": [1037, 1040], "subramaniam": [1052, 1053, 1054], "subramaniyan": 1049, "subramanyam": 1044, "subrat": 1049, "subrat93": 1049, "subsampl": [130, 147, 150, 189, 232, 269, 320, 324, 462, 564, 565, 566, 567, 568, 637, 684, 706, 808, 809, 835, 874, 886, 898, 931, 941, 998, 1002, 1026, 1037, 1047, 1051, 1053, 1054, 1055], "subscrib": 1035, "subscript": [368, 1050], "subsect": [25, 368, 380], "subsequ": [46, 68, 91, 107, 124, 135, 167, 202, 217, 275, 278, 293, 295, 343, 363, 380, 382, 384, 386, 394, 408, 412, 413, 419, 422, 441, 501, 513, 558, 559, 564, 566, 567, 671, 673, 681, 808, 809, 837, 838, 841, 844, 845, 846, 847, 848, 866, 884, 888, 996, 1005, 1007, 1046, 1047, 1051, 1053, 1055], "subset": [2, 46, 57, 58, 63, 64, 68, 102, 103, 111, 112, 142, 144, 145, 146, 161, 167, 170, 189, 191, 204, 216, 230, 231, 232, 233, 245, 247, 251, 252, 267, 271, 274, 276, 282, 283, 285, 290, 318, 319, 324, 332, 336, 354, 355, 356, 363, 375, 380, 388, 392, 394, 409, 410, 412, 413, 416, 419, 420, 422, 429, 441, 453, 468, 470, 471, 473, 492, 493, 497, 498, 502, 513, 554, 555, 556, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 607, 615, 634, 644, 645, 646, 647, 656, 660, 663, 671, 672, 673, 676, 679, 680, 681, 682, 683, 684, 702, 708, 709, 716, 718, 721, 723, 736, 739, 760, 762, 798, 801, 804, 807, 827, 833, 835, 837, 838, 839, 840, 844, 845, 846, 847, 848, 851, 856, 859, 866, 875, 904, 905, 909, 911, 914, 917, 919, 931, 974, 995, 1002, 1006, 1007, 1017, 1019, 1021, 1022, 1040, 1045, 1046, 1048, 1050, 1055, 1056], "subset_featur": 103, "subset_label": 233, "subsidi": 188, "subspac": [128, 415, 419, 456, 520, 560, 561, 696, 700, 953, 1000, 1009, 1012, 1018, 1030], "substanti": [161, 295, 299, 300, 314, 380, 855, 1012, 1041, 1044], "substitut": [403, 989, 1026, 1043], "subtl": [352, 363, 1005, 1026], "subtleti": 1032, "subtract": [177, 188, 252, 415, 417, 447, 451, 463, 539, 649, 650, 1044, 1054], "subtre": [562, 563, 564, 565, 569, 570, 917, 918, 919, 920, 1022], "subwindow": 1022, "succe": [128, 151, 200, 287], "succeed": 380, "success": [2, 83, 165, 185, 265, 277, 280, 281, 349, 363, 407, 412, 416, 417, 419, 520, 569, 584, 805, 808, 809, 826, 914, 1009, 1027, 1030, 1032, 1049], "successfulli": [43, 53, 317, 379, 384, 406, 412, 420, 1020], "successor": [454, 460, 1022, 1025], "suchak": 1050, "sudo": [378, 398], "suen": 1010, "suffer": [116, 143, 190, 293, 313, 355, 367, 412, 419, 549, 768, 1001, 1002, 1006, 1009, 1046], "suffic": [90, 91, 382], "suffici": [2, 64, 88, 156, 223, 288, 343, 367, 394, 412, 421, 537, 662, 687, 688, 821, 824, 825, 1007, 1009, 1026, 1046, 1052, 1053], "suffix": [398, 832, 1006, 1047], "suganthan": 377, "sugar": [170, 377], "suggest": [111, 124, 138, 142, 188, 191, 273, 343, 367, 379, 380, 387, 394, 416, 417, 419, 473, 478, 570, 650, 834, 1000, 1002, 1003, 1011, 1014, 1021, 1041, 1048, 1051, 1054], "suh": 1045, "suha": 1055, "suit": [58, 121, 154, 188, 215, 216, 242, 263, 325, 326, 328, 354, 368, 380, 382, 385, 386, 388, 398, 400, 406, 415, 417, 419, 454, 456, 508, 682, 846, 890, 947, 995, 998, 1003, 1006, 1008, 1009, 1020, 1025, 1026, 1030, 1044, 1051], "suitabl": [139, 148, 200, 201, 219, 309, 356, 374, 375, 386, 389, 406, 412, 417, 420, 456, 466, 472, 491, 510, 513, 632, 640, 844, 845, 848, 883, 884, 907, 970, 974, 1000, 1002, 1005, 1016, 1018, 1020, 1025, 1051, 1052], "sullivan": [1040, 1041, 1042], "sultan": 1051, "sum": [2, 30, 47, 55, 57, 63, 94, 112, 119, 124, 130, 147, 148, 166, 170, 180, 188, 197, 211, 215, 219, 230, 233, 236, 238, 252, 267, 282, 293, 300, 303, 326, 330, 336, 347, 348, 350, 354, 355, 356, 362, 377, 386, 394, 409, 410, 412, 414, 415, 417, 418, 419, 420, 422, 435, 446, 447, 451, 453, 463, 468, 469, 486, 487, 488, 520, 525, 528, 536, 539, 541, 542, 546, 549, 550, 551, 554, 555, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 574, 575, 595, 596, 616, 618, 628, 630, 640, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 681, 682, 683, 684, 686, 689, 695, 699, 701, 704, 714, 715, 724, 731, 746, 761, 763, 764, 768, 793, 837, 838, 842, 843, 852, 856, 860, 867, 868, 888, 889, 909, 910, 912, 915, 917, 918, 919, 920, 955, 980, 986, 991, 1002, 1006, 1007, 1008, 1009, 1021, 1022, 1040, 1041, 1043, 1045, 1046, 1048, 1053, 1054], "sum_": [273, 282, 350, 409, 410, 412, 417, 418, 419, 543, 545, 552, 701, 760, 1000, 1002, 1003, 1006, 1008, 1010, 1011, 1013, 1014, 1016, 1020, 1021, 1022], "sum_gradi": 419, "sum_h": 1011, "sum_hessian": 419, "sum_i": [325, 419, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 997, 998, 1002, 1004, 1006, 1011], "sum_j": [651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 1002, 1006, 1011], "sum_k": [419, 554, 1022], "sum_m": 419, "sum_n": [280, 712, 1006], "sum_n_compon": [468, 868], "sum_over_featur": [1037, 1052], "sum_weight": 986, "sumit": 1051, "summar": [215, 264, 280, 282, 356, 380, 382, 397, 419, 526, 663, 699, 711, 712, 1002, 1003, 1006, 1012, 1032], "summari": [52, 170, 326, 362, 363, 377, 392, 566, 567, 697, 718, 793, 922, 1004, 1007, 1025, 1056], "summaris": [244, 323], "summat": [1008, 1010], "summer": [0, 43, 52, 177, 1037], "sun": [43, 151, 189, 1045, 1050, 1051], "sundai": 43, "sundaramahalingam": 1054, "sung": 1048, "sunglok": 1002, "sunita": 788, "sunitha": 1049, "sunmi": 1048, "super": [57, 62, 64, 382, 420, 1045], "superflu": 417, "superimpos": 417, "superior": 419, "superposit": 200, "supersed": [379, 1042], "superset": [416, 826, 1006], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 82, 87, 91, 116, 129, 140, 151, 154, 163, 174, 236, 247, 250, 260, 273, 302, 315, 324, 335, 340, 343, 347, 355, 367, 375, 382, 393, 394, 410, 412, 415, 416, 417, 419, 420, 422, 441, 443, 468, 492, 508, 509, 558, 593, 595, 598, 599, 639, 681, 734, 806, 807, 810, 812, 813, 814, 815, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 835, 858, 868, 869, 873, 883, 890, 904, 905, 906, 914, 1000, 1003, 1006, 1008, 1009, 1012, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1027, 1029, 1032, 1037, 1043, 1049], "supervised_learning_tut": [162, 163], "supp": 388, "suppli": [151, 392, 412, 651, 935, 936, 1009, 1030, 1041, 1043, 1045, 1050], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 80, 102, 103, 104, 134, 139, 155, 156, 166, 167, 177, 189, 216, 225, 226, 227, 233, 247, 248, 249, 255, 266, 271, 278, 280, 290, 293, 311, 313, 317, 326, 330, 332, 333, 336, 337, 339, 340, 343, 344, 345, 346, 347, 348, 350, 367, 368, 369, 374, 378, 380, 382, 384, 385, 386, 387, 389, 390, 393, 394, 395, 406, 412, 416, 417, 420, 421, 422, 441, 444, 454, 456, 457, 468, 470, 471, 473, 478, 491, 501, 517, 543, 545, 546, 549, 552, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 618, 619, 620, 622, 624, 625, 627, 628, 630, 632, 636, 637, 638, 648, 650, 662, 663, 664, 675, 676, 677, 679, 680, 681, 682, 683, 692, 695, 699, 704, 712, 718, 734, 735, 743, 748, 783, 784, 785, 788, 789, 792, 793, 805, 808, 809, 811, 819, 827, 832, 833, 841, 842, 847, 849, 850, 853, 855, 861, 869, 870, 874, 880, 882, 883, 885, 889, 897, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 941, 947, 948, 993, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1020, 1025, 1026, 1027, 1028, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "support_": [248, 349, 473, 478, 598, 599, 607, 911, 912, 913, 914, 915, 1021], "support_fract": [48, 473, 478], "support_reweight": [473, 478], "support_vector": [341, 347], "support_vector_indic": 341, "support_vectors_": [46, 49, 344, 347, 348, 911, 912, 913, 914, 915, 1021], "suppos": [249, 276, 332, 367, 368, 380, 382, 384, 386, 414, 419, 420, 421, 562, 566, 569, 663, 664, 671, 673, 679, 680, 681, 855, 909, 911, 914, 917, 919, 941, 1010, 1046, 1048, 1054], "suppress": [188, 367, 388, 697, 1009, 1044], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 83, 86, 90, 93, 100, 107, 121, 124, 131, 135, 144, 145, 153, 156, 181, 188, 189, 191, 209, 214, 230, 231, 235, 236, 237, 251, 261, 267, 269, 286, 287, 311, 313, 315, 322, 324, 332, 333, 337, 349, 350, 359], "surac": 1047, "sure": [2, 63, 89, 208, 221, 249, 250, 267, 363, 367, 368, 374, 378, 379, 380, 381, 382, 384, 385, 388, 392, 398, 410, 413, 420, 498, 528, 654, 935, 936, 947, 958, 991, 996, 1003, 1020, 1025, 1026, 1044, 1045, 1047, 1052, 1056], "suresh": 1051, "surf": 189, "surfac": [67, 118, 125, 134, 135, 136, 137, 139, 157, 185, 199, 207, 224, 279, 296, 339, 340, 357, 358, 360, 361, 362, 419, 509, 558, 562, 569, 636, 769, 917, 923, 1000, 1005, 1020, 1021, 1022, 1027], "surface_": 636, "surgan12": 1046, "surpass": [135, 347, 866, 867], "surplu": 416, "surpris": [86, 189, 378, 1002, 1025, 1039], "surprisingli": [233, 375, 420], "surrend": 57, "surrog": 1030, "surround": [250, 380, 855, 1012], "survei": [188, 415], "surviv": [103, 190, 995, 1025], "surya": [1050, 1051], "suscept": 406, "susik": 1041, "suspect": 43, "suspici": 375, "sustain": 0, "sutherland": [1039, 1041, 1042, 1044, 1045, 1046, 1047], "sutiono": 1048, "suzuki": [1048, 1049], "sv": 1021, "sv_ind": 248, "sv_ratio": 248, "svc": [2, 45, 62, 64, 66, 67, 68, 102, 106, 146, 157, 163, 173, 185, 193, 206, 247, 250, 254, 266, 271, 273, 275, 278, 279, 280, 283, 284, 315, 317, 318, 322, 324, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 351, 352, 354, 367, 382, 386, 394, 410, 413, 416, 419, 438, 439, 440, 441, 472, 520, 560, 702, 703, 705, 707, 805, 822, 836, 838, 869, 906, 907, 909, 911, 912, 915, 993, 995, 1001, 1004, 1006, 1007, 1016, 1027, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055], "svc__c": [315, 869], "svc_disp": [255, 322, 1034], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 255, "svcsvc": [254, 271, 273, 324], "svd": [2, 70, 128, 154, 236, 355, 389, 408, 415, 424, 455, 457, 486, 487, 489, 526, 537, 538, 539, 540, 544, 545, 546, 549, 551, 554, 555, 669, 677, 678, 679, 690, 691, 692, 868, 953, 1000, 1039, 1043, 1044, 1050, 1052, 1055], "svd__n_compon": 868, "svd_lapack_driv": 953, "svd_method": [57, 455, 457, 537, 1040], "svd_solver": [45, 102, 121, 128, 329, 330, 408, 417, 540, 546, 1043, 1055], "sven": [1051, 1052], "svg": [0, 400], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 102, 104, 106, 121, 133, 144, 154, 157, 160, 164, 169, 170, 174, 176, 180, 185, 194, 197, 199, 207, 208, 225, 226, 227, 228, 242, 248, 250, 251, 254, 255, 266, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 288, 299, 304, 305, 308, 315, 316, 322, 324, 331, 335, 336, 338, 341, 349, 350, 354, 367, 375, 382, 386, 394, 413, 416, 417, 419, 421, 438, 439, 440, 441, 499, 509, 517, 520, 546, 560, 561, 568, 572, 573, 582, 598, 599, 604, 605, 610, 636, 644, 648, 673, 681, 682, 683, 694, 702, 703, 705, 707, 718, 740, 747, 766, 805, 819, 825, 831, 832, 835, 837, 838, 855, 869, 870, 882, 884, 889, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 993, 995, 998, 1001, 1003, 1004, 1006, 1007, 1011, 1019, 1021, 1023, 1027, 1028, 1032, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "svm1": 413, "svm2": 413, "svm__c": 106, "svm_weight": 166, "svm_weights_select": 166, "svmlight": [2, 373, 491, 513, 514, 1032, 1037, 1038, 1044, 1046], "svmlight_file_test": 514, "svmlight_file_train": 514, "svmsgd": 1020, "svr": [2, 46, 49, 185, 241, 322, 338, 367, 400, 438, 439, 440, 561, 572, 573, 598, 599, 648, 683, 805, 811, 910, 912, 914, 999, 1027, 1037, 1039, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "svr_fit": 248, "svr_lin": 349, "svr_poli": 349, "svr_predict": 248, "svr_rbf": 349, "sw": 293, "sw_test": [61, 323], "sw_train": [61, 323], "swap": [2, 412, 417, 721, 741, 984, 985, 1037], "swapnil": 1051, "swart": 55, "sweep": 865, "swier": [1048, 1049], "swiss": [2, 100, 185, 234, 235, 240, 412, 535, 697, 698, 1027, 1051], "switch": [366, 683, 709, 722, 742, 760, 762, 800, 849, 850, 952, 953, 1006, 1009, 1032, 1037], "swpeas": 1050, "swu": 1041, "sy": [47, 51, 57, 223, 246, 293, 336, 356, 375, 392, 622], "syd": 1052, "sydnei": 0, "syhw": [1038, 1039], "sylvain": [0, 370, 1041, 1046, 1047, 1048, 1049, 1050, 1051], "sylvainlan": [1045, 1046, 1047, 1048, 1049], "symbol": [51, 356, 368, 382, 386, 414, 420, 504, 587, 593, 594, 596, 921, 923, 1025], "symbol_dict": 51, "symlink": 384, "symlognorm": [195, 200], "symmetr": [2, 79, 148, 181, 191, 217, 394, 410, 412, 456, 466, 467, 478, 524, 532, 534, 695, 699, 700, 709, 710, 720, 721, 722, 727, 729, 733, 741, 742, 760, 762, 768, 790, 800, 802, 803, 991, 995, 1002, 1006, 1009, 1053], "symmetri": [170, 377, 704, 882, 885, 897, 1004], "symmetric_arrai": 991, "symposium": [170, 377, 412, 464], "symptomat": 267, "synchron": [380, 420], "syndrom": 374, "synonym": [394, 851, 852, 853, 859, 860, 861], "synonymi": 417, "syntax": [368, 380, 385, 388, 413, 472, 868, 869, 907, 995, 1048, 1050], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 82, 142, 148, 154, 172, 177, 179, 189, 205, 217, 232, 308, 315, 350, 363, 367, 373, 383, 395, 412, 414, 421, 663, 664, 909, 910, 916, 1000, 1043], "synthetic_feature_weight": [663, 664], "syonekura": 1045, "system": [44, 126, 200, 273, 280, 330, 363, 367, 368, 369, 375, 377, 380, 381, 382, 383, 388, 392, 398, 406, 412, 417, 419, 423, 448, 475, 476, 482, 540, 544, 548, 555, 644, 650, 655, 656, 659, 660, 661, 687, 688, 731, 761, 774, 802, 858, 904, 905, 1002, 1006, 1009, 1018, 1025, 1026, 1030, 1037, 1045, 1046], "systemat": [43, 151, 273, 717, 733, 925, 927, 1006, 1052], "sysuresh": 1051, "szabo": [1039, 1040], "szepieniec": 1043, "szlam": [417, 952, 953], "szpak": [1044, 1047], "szyma\u0144ski": [1045, 1046], "s\u00e1nchez": 1049, "s\u00e3o": 1055, "s\u00e4ger": [1040, 1043], "s\u00e9bastien": [1030, 1043, 1045], "s\u00e9rgio": 1056, "s\u00f6nke": 1047, "s\u00f8ren": 1054, "s\u0142apek": 1048, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 85, 87, 91, 102, 104, 109, 110, 111, 113, 115, 119, 122, 123, 128, 130, 131, 135, 138, 139, 147, 148, 149, 150, 151, 155, 156, 170, 173, 175, 176, 177, 180, 181, 185, 188, 189, 190, 191, 195, 197, 200, 209, 212, 213, 214, 215, 216, 233, 234, 236, 237, 238, 239, 249, 250, 259, 262, 264, 267, 272, 273, 286, 287, 292, 293, 306, 310, 322, 325, 326, 328, 332, 333, 335, 339, 340, 343, 344, 348, 354, 355, 356, 361, 362, 363, 367, 368, 374, 375, 377, 380, 382, 384, 386, 388, 393, 394, 398, 403, 406, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 425, 429, 432, 435, 437, 441, 451, 452, 454, 460, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 500, 501, 518, 519, 520, 524, 525, 530, 535, 537, 539, 546, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 595, 596, 599, 612, 613, 615, 616, 632, 633, 635, 636, 637, 638, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 700, 701, 709, 715, 721, 722, 731, 741, 742, 760, 761, 762, 772, 793, 794, 799, 800, 804, 805, 808, 809, 819, 827, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 859, 860, 865, 866, 867, 875, 878, 879, 880, 882, 883, 889, 890, 902, 904, 905, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 928, 953, 954, 969, 995, 998, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1020, 1021, 1022, 1027, 1031, 1032, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 80, 83, 85, 91, 95, 97, 124, 200, 201, 230, 231, 232, 237, 240, 242, 246, 248, 274, 329, 354, 355, 356, 681, 682, 683], "t1": [79, 80, 95, 230, 237, 240, 242], "t15h": 1044, "t_": [671, 672, 673, 681, 682, 683, 866, 867, 1020], "t_0": 1020, "t_batch": 97, "t_i": 1008, "t_k": [419, 1006, 1022], "t_m": 1022, "t_mini_batch": [77, 97], "t_p": 280, "t_post": 273, "t_sne": [235, 1045], "t_stat": 273, "t_stat_uncorrect": 273, "t_t": 1022, "taa": 180, "taac": 180, "tab": [46, 48, 70, 86, 111, 135, 151, 153, 156, 172, 177, 179, 202, 204, 267, 323, 329, 413, 1044], "tab10": [247, 263], "tab20b": 43, "taba": 1056, "tabea": [1052, 1053], "tabibian": 1043, "tabl": [91, 233, 273, 380, 381, 389, 412, 420, 587, 663, 685, 805, 819, 846, 970, 1002, 1006, 1007, 1012, 1025, 1038], "tabular": [43, 52, 189, 382, 419, 1014, 1025], "tacit": 394, "tacitli": 1039, "tackl": [149, 273, 368, 380, 412, 846, 1008, 1030], "tadej": [1038, 1039], "tae": 1049, "taehoon": [1044, 1045], "taemin": 1002, "tag": [2, 47, 82, 103, 242, 334, 374, 379, 383, 384, 388, 392, 394, 408, 420, 429, 435, 501, 837, 925, 926, 927, 929, 930, 942, 958, 989, 994, 1026, 1029, 1042, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1056], "tahar": 1044, "tahiri": 1049, "taifi": 1043, "tail": [52, 148, 184, 188, 215, 217, 273, 313, 526, 529, 1002], "tail_strength": [330, 526, 529], "takanori": 1045, "take": [2, 44, 47, 52, 58, 66, 80, 86, 88, 90, 99, 107, 111, 119, 121, 135, 144, 172, 174, 177, 181, 188, 193, 199, 219, 223, 224, 239, 249, 260, 261, 267, 268, 274, 278, 282, 283, 292, 293, 296, 299, 300, 301, 303, 304, 313, 326, 330, 335, 339, 340, 343, 352, 355, 356, 359, 367, 368, 369, 374, 375, 378, 380, 382, 385, 386, 387, 388, 392, 394, 395, 403, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 424, 441, 447, 450, 451, 453, 454, 456, 461, 462, 463, 465, 467, 473, 524, 538, 543, 544, 545, 551, 552, 586, 597, 600, 601, 603, 604, 605, 615, 616, 621, 625, 626, 629, 637, 648, 654, 676, 678, 679, 680, 681, 684, 696, 697, 704, 710, 712, 714, 724, 734, 735, 743, 748, 761, 776, 779, 783, 784, 785, 786, 788, 789, 792, 793, 805, 806, 810, 811, 819, 823, 833, 851, 852, 853, 855, 857, 858, 859, 860, 861, 873, 883, 904, 905, 909, 910, 911, 912, 913, 914, 915, 939, 975, 995, 998, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1016, 1021, 1022, 1030, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "takeawai": 292, "taken": [37, 43, 46, 67, 77, 86, 88, 150, 170, 177, 188, 246, 247, 261, 279, 290, 315, 375, 377, 379, 380, 384, 394, 412, 416, 420, 424, 444, 538, 566, 567, 588, 589, 651, 652, 655, 657, 658, 659, 663, 664, 665, 666, 667, 668, 682, 684, 686, 689, 700, 882, 883, 903, 906, 912, 913, 964, 1006, 1008, 1016, 1018, 1043, 1046, 1049, 1050], "takeshi": [1045, 1050, 1051, 1052], "takeuchi": 375, "takingitcasu": [1045, 1046], "talbot": 278, "talgatomarov": 1048, "talk": [57, 102, 274, 354, 355, 356, 375, 394, 406, 1030, 1032], "talli": 418, "tallott": 1045, "talwalkar": 995, "tamara": [375, 1054, 1056], "tamer": 1052, "tami": 91, "tamir": [1048, 1051], "tamirlan1": 1048, "tamper": 47, "tampermonkei": 388, "tan": [866, 867, 1010, 1044], "tandfonlin": 412, "tang": [377, 1047, 1048, 1049], "tangent": [235, 347, 694, 698, 1004, 1031, 1032], "tanh": [347, 782, 866, 867, 1004, 1021], "tanjina": 1054, "tann": [1045, 1050], "tao": [1053, 1054], "tar": [47, 384], "taranjeet": 1043, "tarashanski": 1054, "tarbal": [384, 1052], "tarcusx": 1045, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 85, 101, 103, 105, 106, 116, 118, 125, 127, 129, 136, 143, 144, 145, 146, 148, 149, 151, 153, 155, 156, 157, 159, 163, 165, 168, 170, 172, 174, 177, 178, 184, 185, 187, 188, 189, 190, 195, 199, 200, 208, 211, 215, 217, 219, 220, 223, 224, 236, 243, 245, 246, 247, 248, 251, 252, 253, 260, 266, 267, 269, 271, 274, 276, 278, 279, 282, 283, 287, 290, 292, 293, 296, 301, 304, 305, 309, 312, 313, 323, 324, 326, 328, 332, 333, 336, 337, 339, 340, 343, 347, 349, 354, 355, 359, 360, 361, 362, 363, 367, 369, 372, 373, 374, 375, 376, 377, 380, 382, 384, 385, 388, 389, 393, 397, 406, 412, 415, 416, 419, 422, 436, 441, 442, 443, 446, 449, 468, 469, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 513, 515, 525, 529, 536, 537, 539, 541, 542, 544, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 578, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 702, 703, 705, 706, 707, 712, 713, 714, 717, 718, 723, 725, 726, 728, 729, 731, 732, 733, 734, 735, 740, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 856, 858, 859, 860, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 890, 893, 898, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 928, 929, 935, 967, 968, 969, 994, 997, 998, 999, 1002, 1003, 1006, 1010, 1013, 1014, 1020, 1021, 1022, 1026, 1027, 1029, 1030, 1032, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "target_class": 318, "target_column": [493, 494, 501], "target_encod": 320, "target_filenam": [506, 510], "target_gener": 178, "target_idx": 637, "target_mean_": [890, 1016], "target_nam": [45, 57, 66, 85, 118, 125, 129, 187, 224, 236, 260, 266, 274, 282, 283, 296, 319, 336, 354, 359, 373, 375, 492, 493, 495, 497, 498, 499, 501, 502, 505, 507, 508, 509, 510, 515, 718, 1006, 1022, 1047], "target_opset": 406, "target_tag": [382, 928, 942], "target_test": [267, 514], "target_train": [267, 514], "target_typ": [319, 890, 939, 968, 1054], "target_type_": 890, "targetencod": [2, 319, 320, 394, 882, 883, 996, 1016, 1025, 1053, 1054], "targetencodertargetencod": 319, "targets_test": 247, "targets_train": 247, "targettag": [2, 928], "tari": 91, "tashai": [1045, 1046], "task": [2, 38, 43, 46, 124, 142, 143, 149, 151, 169, 180, 185, 194, 200, 201, 204, 214, 215, 231, 235, 252, 267, 270, 287, 292, 347, 356, 367, 369, 375, 377, 379, 380, 385, 386, 389, 392, 393, 394, 417, 419, 420, 421, 422, 452, 465, 498, 510, 520, 597, 600, 601, 603, 604, 605, 609, 610, 611, 614, 637, 638, 651, 652, 657, 658, 665, 666, 667, 668, 679, 686, 689, 732, 734, 735, 759, 787, 789, 792, 794, 806, 810, 823, 829, 971, 972, 1003, 1006, 1007, 1008, 1009, 1017, 1019, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1032, 1037, 1042, 1046, 1052], "tast": 1037, "tata": 1054, "tau": 1016, "tau_0": 541, "tavenard": 1049, "tax": 0, "taxonom": 377, "taylor": [419, 1045, 1047, 1048, 1051], "tb": 388, "tc": [170, 377, 395], "tcg": 180, "tch": [170, 377], "tcompl": 91, "tcpdump": 375, "tda": 1025, "teach": 380, "teacher": 102, "teal": [216, 225, 280], "team": [375, 383, 392, 394, 395, 1025, 1030, 1037], "teas": 188, "tech": [51, 377, 847], "technic": [180, 188, 216, 236, 326, 375, 377, 380, 394, 419, 657, 669, 690, 691, 904, 995, 1002, 1003, 1009], "technion": [669, 690, 691, 1002], "techniqu": [11, 26, 51, 56, 102, 104, 123, 131, 136, 146, 162, 169, 170, 184, 185, 187, 223, 237, 239, 278, 290, 297, 325, 333, 347, 358, 369, 377, 392, 394, 406, 410, 412, 416, 417, 418, 419, 420, 421, 451, 452, 453, 454, 539, 559, 682, 694, 695, 698, 699, 731, 761, 998, 1002, 1003, 1005, 1006, 1009, 1012, 1014, 1018, 1020, 1022, 1026, 1030, 1050], "technolog": 377, "technologi": [170, 377, 412, 1025, 1030], "technometr": [377, 414, 473, 478, 1012], "tediou": [156, 267], "teen": 1016, "teevan": [846, 1008], "teh": [865, 1011], "tejesh95": 1041, "telecom": 1030, "telenczuk": [170, 1046, 1049, 1050, 1052], "tell": [172, 188, 189, 249, 273, 343, 348, 368, 375, 412, 420, 568, 584, 995, 1000, 1013], "temp": [43, 189], "temp_fold": 971, "temperatur": [189, 420, 1013], "tempfil": [87, 295, 322, 413, 1009], "templat": [380, 384, 385, 394, 395, 562, 563, 568, 569, 570, 571, 1025], "templateclassifi": 382, "tempor": [52, 151, 200, 1025, 1026], "temporari": [87, 102, 104, 367, 472, 692, 786, 907, 1009, 1040, 1041, 1044, 1050, 1051], "temporarili": [412, 1042], "temporarydirectori": [295, 322], "tempt": 188, "temptat": [363, 380], "ten": [54, 57, 135, 141, 151, 170, 236, 264, 375, 377, 419, 525, 914, 1046], "tenavi": 1051, "tend": [43, 51, 64, 72, 74, 78, 85, 88, 90, 168, 170, 188, 189, 204, 215, 220, 233, 252, 258, 261, 270, 274, 286, 292, 311, 347, 356, 367, 369, 380, 382, 394, 410, 412, 414, 417, 419, 421, 441, 452, 658, 855, 886, 898, 953, 1002, 1003, 1009, 1022], "tendenc": [151, 240, 1002, 1003, 1005, 1008, 1011], "tenenbaum": [693, 1003], "tenenhau": 377, "tensor": [2, 193, 372, 408, 417, 543, 545, 552, 644, 645, 646, 1032, 1049, 1055], "tensorflow": [45, 392], "tensorsketch": 998, "tent": 386, "tenur": 1030, "teon": 1049, "terenc": [1049, 1050], "term": [2, 43, 53, 54, 62, 68, 91, 126, 138, 141, 145, 148, 177, 187, 200, 202, 203, 204, 215, 217, 219, 229, 232, 233, 252, 267, 271, 275, 293, 308, 325, 347, 350, 354, 356, 369, 380, 382, 392, 410, 412, 414, 416, 417, 419, 447, 451, 453, 456, 463, 466, 529, 540, 543, 545, 549, 552, 554, 593, 594, 595, 596, 609, 612, 613, 637, 638, 645, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 679, 680, 681, 683, 685, 692, 700, 735, 743, 788, 789, 792, 866, 867, 884, 888, 891, 909, 910, 911, 912, 913, 914, 915, 995, 997, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1016, 1020, 1021, 1045, 1051, 1052, 1053], "term1": 420, "term2": 420, "term3": 420, "termin": [368, 385, 386, 388, 398, 412, 426, 452, 465, 558, 559, 563, 564, 565, 568, 570, 671, 672, 673, 681, 683, 866, 867, 918, 920, 1012, 1022], "terminalipythonapp": 386, "terminalpdb": 388, "termination_condition_": 906, "terminologi": [394, 1045], "terraza": 1049, "terri": 1041, "terrycojon": 1041, "tesson": 412, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 102, 103, 115, 126, 135, 138, 140, 141, 142, 143, 147, 148, 149, 150, 151, 161, 163, 164, 166, 169, 172, 173, 185, 187, 188, 189, 190, 191, 193, 200, 204, 208, 210, 211, 215, 216, 217, 219, 220, 222, 223, 230, 231, 233, 239, 243, 248, 249, 251, 260, 265, 266, 267, 268, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 287, 292, 296, 301, 302, 308, 310, 315, 318, 319, 320, 329, 336, 343, 350, 356, 363, 367, 368, 374, 375, 377, 383, 384, 385, 386, 392, 393, 394, 397, 398, 405, 407, 408, 410, 411, 413, 414, 417, 419, 420, 421, 422, 429, 431, 432, 435, 438, 439, 440, 441, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 492, 493, 498, 502, 503, 507, 509, 529, 536, 542, 544, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 597, 599, 600, 601, 603, 604, 605, 607, 609, 610, 611, 613, 614, 615, 616, 632, 633, 635, 640, 641, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 717, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 856, 859, 860, 866, 867, 869, 894, 895, 897, 898, 899, 900, 904, 905, 907, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 925, 926, 927, 928, 934, 945, 947, 948, 1001, 1002, 1005, 1006, 1009, 1010, 1014, 1016, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1030, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056], "test_": [52, 156, 416], "test_0": 43, "test_4": 43, "test_accuraci": [260, 274, 287], "test_auc": 832, "test_ax": 126, "test_balanced_accuraci": 287, "test_best_it": 147, "test_check_estim": 948, "test_color": 147, "test_common": [380, 388], "test_dataset": 374, "test_devi": 150, "test_enable_hist_gradient_boost": 384, "test_fn": 1006, "test_fold": [416, 818], "test_fract": 1037, "test_idx": [52, 394], "test_import": 190, "test_index": [260, 335, 416, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826], "test_indx": 416, "test_lin": 147, "test_logist": [380, 388], "test_ms": 329, "test_neg_mean_absolute_error": [43, 217], "test_neg_mean_squared_error": [217, 832], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 276, "test_positive_likelihood_ratio": 276, "test_prec_macro": 416, "test_precision_macro": 416, "test_r2": 832, "test_rec_macro": 416, "test_recall_macro": 416, "test_requiring_mpl_fixtur": 380, "test_result": 190, "test_scor": [145, 147, 149, 151, 223, 272, 275, 286, 290, 319, 350, 358, 393, 416, 811, 828, 832, 833, 836], "test_scores_mean": 286, "test_scores_nb": 275, "test_scores_svm": 275, "test_set": 410, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 103, 140, 146, 147, 149, 150, 151, 155, 187, 193, 200, 210, 215, 222, 223, 230, 231, 267, 270, 271, 275, 280, 282, 286, 292, 301, 302, 308, 310, 311, 315, 317, 318, 324, 343, 350, 363, 385, 416, 703, 807, 822, 825, 826, 835, 837, 858, 996, 1008, 1009, 1037, 1038, 1043, 1044, 1049], "test_sklearn_compatible_estim": [322, 948], "test_sparsifi": 388, "test_stat": 47, "test_tim": [248, 354], "test_tp": 1006, "test_val": 381, "test_your_test_nam": 368, "tested_neg": 287, "tested_posit": 287, "testpypi": 384, "teunp": 1051, "texa": [51, 102], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 86, 90, 91, 93, 94, 95, 97, 102, 111, 112, 141, 146, 168, 191, 196, 209, 210, 242, 246, 253, 254, 258, 260, 265, 272, 273, 279, 280, 284, 298, 301, 303, 308, 315, 325, 331, 333, 349, 358, 367, 369, 372, 373, 374, 380, 385, 392, 394, 400, 410, 412, 413, 415, 416, 417, 419, 422, 451, 453, 468, 472, 491, 492, 493, 504, 508, 513, 526, 541, 549, 569, 593, 594, 595, 596, 620, 630, 657, 663, 671, 673, 679, 681, 702, 708, 710, 712, 718, 722, 734, 735, 742, 798, 800, 805, 819, 835, 844, 846, 848, 851, 856, 869, 870, 872, 873, 881, 905, 906, 907, 909, 921, 922, 923, 950, 995, 998, 1002, 1004, 1006, 1007, 1008, 1010, 1013, 1016, 1018, 1020, 1021, 1024, 1026, 1027, 1030, 1032, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "text1": 420, "text2": 420, "text2d": 239, "text3": 420, "text3d": 127, "text_": 702, "text_kw": [702, 1052], "text_preprocess": 468, "text_stat": 102, "text_stats_transform": 102, "textbook": [420, 595], "textcoord": [48, 193], "textrm": 1021, "texttt": 1006, "textual": [417, 426, 1022, 1046], "textur": [170, 377, 763, 764, 1004], "tf": [2, 54, 57, 246, 354, 355, 356, 375, 417, 526, 549, 593, 594, 595, 596, 848, 856, 881, 995, 1004, 1008, 1016, 1025], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 595, "tfidf": [54, 102, 336, 420, 596], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 336, 355, 356, 420, 493, 596, 1044, 1045, 1051, 1053, 1054, 1055], "tfidfvector": [2, 54, 57, 102, 274, 354, 375, 417, 420, 493, 593, 594, 595, 1037, 1039, 1045, 1046, 1047, 1050, 1051, 1055, 1056], "tfidfvectorizertfidfvector": 274, "tfifi": 1050, "tfrac": 422, "tgct": 180, "tgz": 45, "th": [135, 325, 362, 393, 412, 416, 419, 427, 445, 449, 450, 455, 457, 463, 467, 476, 555, 562, 563, 564, 565, 566, 567, 569, 570, 571, 598, 599, 637, 653, 654, 674, 676, 685, 701, 723, 785, 826, 890, 940, 996, 1002, 1006, 1010, 1013, 1020, 1021, 1052], "th0rwa": [1047, 1048], "thakur": [1040, 1041], "thaler": 1043, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 81, 86, 88, 104, 107, 111, 113, 116, 119, 121, 124, 126, 128, 135, 137, 138, 140, 141, 142, 144, 145, 148, 151, 168, 170, 172, 178, 183, 188, 189, 190, 193, 195, 200, 201, 204, 215, 217, 221, 231, 232, 233, 239, 242, 248, 249, 250, 252, 259, 267, 270, 271, 273, 274, 275, 276, 279, 282, 287, 290, 292, 293, 299, 300, 311, 313, 317, 318, 319, 320, 324, 326, 328, 330, 333, 347, 354, 355, 356, 363, 367, 368, 369, 374, 375, 376, 378, 379, 380, 382, 385, 386, 388, 394, 395, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 458, 461, 464, 467, 468, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 498, 499, 501, 514, 519, 520, 528, 536, 539, 540, 541, 542, 543, 545, 546, 547, 549, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 635, 639, 645, 647, 648, 649, 651, 652, 657, 658, 660, 663, 664, 665, 666, 667, 668, 671, 672, 673, 676, 677, 679, 681, 682, 683, 684, 687, 692, 697, 699, 701, 709, 710, 717, 725, 726, 727, 728, 729, 740, 741, 744, 769, 784, 785, 786, 788, 790, 800, 802, 803, 805, 808, 809, 815, 819, 824, 826, 827, 830, 831, 832, 833, 834, 837, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 863, 866, 867, 872, 882, 883, 884, 886, 887, 889, 892, 898, 899, 903, 906, 909, 910, 911, 914, 915, 917, 918, 919, 920, 921, 926, 941, 953, 955, 956, 962, 968, 974, 976, 979, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1026, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "thanh": 1055, "thank": [0, 43, 55, 62, 88, 116, 190, 193, 215, 282, 354, 355, 379, 388, 1025, 1030, 1037, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "tharak": 1054, "thebabush": [1054, 1055], "thedevpanda": 1052, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 83, 90, 113, 123, 133, 136, 142, 143, 145, 147, 149, 151, 152, 166, 169, 170, 172, 173, 177, 188, 189, 200, 201, 204, 210, 215, 216, 233, 236, 239, 242, 248, 249, 252, 266, 270, 273, 274, 276, 282, 287, 290, 293, 295, 309, 313, 318, 324, 326, 347, 354, 355, 360, 361, 363, 367, 368, 369, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 388, 389, 392, 393, 394, 395, 403, 406, 409, 411, 412, 413, 414, 415, 417, 419, 421, 422, 424, 444, 446, 450, 457, 458, 471, 501, 513, 514, 538, 540, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 602, 615, 624, 634, 648, 651, 652, 657, 663, 664, 665, 666, 667, 675, 677, 681, 683, 686, 692, 767, 768, 770, 773, 779, 794, 805, 819, 838, 844, 845, 846, 847, 848, 866, 869, 871, 877, 888, 889, 911, 914, 917, 918, 919, 920, 924, 995, 996, 998, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1030, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "theil": [2, 185, 194, 218, 221, 313, 654, 662, 676, 683, 684, 1027], "theilsen": 221, "theilsenregressor": [2, 221, 232, 654, 676, 683, 1002, 1041, 1049, 1051, 1056], "theirs": 354, "them": [16, 43, 44, 47, 68, 74, 75, 82, 86, 88, 89, 93, 98, 99, 102, 103, 116, 121, 123, 126, 136, 152, 165, 170, 172, 183, 184, 188, 189, 190, 193, 195, 200, 203, 210, 216, 217, 219, 233, 246, 249, 252, 253, 267, 271, 273, 274, 276, 282, 286, 290, 295, 313, 318, 320, 325, 336, 343, 356, 362, 367, 369, 375, 380, 381, 382, 383, 384, 388, 392, 394, 395, 397, 403, 406, 410, 411, 412, 413, 416, 417, 419, 420, 422, 448, 451, 453, 454, 461, 468, 471, 498, 499, 513, 572, 573, 574, 575, 612, 613, 621, 625, 626, 629, 637, 644, 669, 697, 773, 776, 779, 783, 784, 785, 786, 794, 805, 819, 826, 834, 869, 873, 878, 879, 883, 887, 889, 890, 899, 900, 906, 917, 918, 947, 948, 962, 971, 995, 996, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1016, 1021, 1022, 1024, 1025, 1029, 1030, 1037, 1038, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "themat": 394, "theme": [375, 380, 398, 405, 1037], "themrmax": [1043, 1044], "themselv": [64, 188, 313, 376, 382, 388, 394, 403, 409, 412, 419, 420, 422, 450, 620, 797, 1022, 1047], "theodor": 1042, "theofilo": 1044, "theoptip": [1047, 1048], "theorem": [32, 172, 350, 1008], "theoret": [37, 72, 90, 172, 267, 412, 419, 558, 559, 644, 709, 731, 761, 909, 995, 1002, 1003, 1005, 1006, 1008, 1018, 1020, 1021, 1030], "theori": [8, 145, 248, 263, 350, 377, 412, 416, 419, 695, 699, 731, 761, 901, 902, 953, 995, 1002, 1003, 1005, 1006, 1007, 1021, 1022], "theotheo": 1047, "thereaft": [188, 195], "therebi": [43, 188, 416, 419, 998, 1047], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 85, 86, 103, 104, 107, 111, 116, 126, 130, 135, 138, 140, 148, 151, 154, 156, 169, 187, 190, 215, 219, 231, 232, 258, 263, 264, 267, 274, 276, 286, 287, 290, 292, 296, 310, 313, 318, 332, 343, 350, 351, 354, 355, 362, 367, 374, 378, 382, 385, 392, 403, 406, 408, 412, 413, 414, 416, 417, 419, 420, 441, 540, 546, 554, 556, 558, 559, 564, 565, 569, 570, 609, 611, 663, 664, 670, 673, 676, 681, 683, 684, 706, 717, 740, 762, 802, 869, 870, 882, 886, 890, 898, 925, 996, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1014, 1016, 1021, 1022, 1026, 1046, 1047, 1050, 1051, 1052, 1053, 1054], "therein": 673, "thereof": 394, "theriley106": 1045, "thesi": [0, 377, 412, 419], "theta": [173, 174, 176, 178, 180, 181, 250, 417, 422, 528, 541, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 697, 1008, 1022], "theta0": 173, "theta1": 173, "theta_": [847, 1008], "theta_c": [250, 528], "theta_d": 417, "theta_i": 1008, "theta_l": 422, "theta_opt": [615, 616], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 487, 488, 489, 491, 493, 494, 498, 499, 501, 502, 503, 504, 506, 507, 508, 510, 513, 514, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 711, 712, 714, 716, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 741, 742, 743, 744, 745, 746, 748, 753, 759, 760, 761, 762, 763, 764, 766, 767, 768, 770, 773, 774, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 925, 926, 928, 929, 930, 931, 935, 936, 941, 942, 943, 945, 947, 948, 953, 955, 958, 961, 962, 963, 964, 965, 966, 968, 971, 972, 975, 976, 979, 980, 989, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "thibault": 1046, "thibaut": 1051, "thibsej": 1046, "thick": [93, 303, 1009], "thierno": 1047, "thierri": [0, 1030, 1043, 1044, 1051], "thij": [1049, 1052, 1053], "thin": [237, 625], "thing": [48, 70, 236, 268, 354, 368, 369, 375, 379, 380, 382, 392, 395, 412, 414, 420, 564, 565, 1002, 1016, 1030, 1043], "think": [44, 72, 188, 189, 354, 355, 380, 388, 418, 1005, 1026, 1030], "thinner": 100, "third": [70, 144, 149, 165, 170, 180, 233, 242, 264, 290, 298, 315, 328, 368, 375, 379, 382, 392, 395, 406, 420, 539, 593, 594, 595, 596, 807, 808, 809, 814, 851, 852, 853, 855, 857, 887, 899, 995, 1017, 1037, 1048, 1053, 1054, 1056], "thirion": [0, 401, 1037, 1043, 1044, 1050], "thirteen": 377, "thirti": 1024, "thiruvenkadam": 1051, "this_centroid": 77, "this_cov": 113, "this_cv": 268, "this_di": 51, "this_dx": 51, "this_i": [61, 221], "this_max_it": 230, "this_p": 63, "this_prec": 113, "this_scor": 346, "this_sw": 61, "this_x": [61, 213, 221], "thoma": [0, 128, 368, 370, 395, 401, 905, 1002, 1016, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "thomas9292": 1049, "thomaz": 1048, "thomo": 91, "thompson": [1040, 1052, 1053], "thorben": 1049, "thorough": 1030, "thoroughli": 1011, "thorsten": 1030, "those": [43, 46, 51, 55, 57, 88, 93, 103, 136, 148, 151, 168, 170, 187, 188, 189, 190, 191, 215, 217, 219, 233, 240, 246, 249, 251, 252, 264, 266, 267, 273, 276, 279, 290, 309, 313, 318, 330, 340, 343, 354, 355, 356, 367, 368, 374, 380, 382, 384, 385, 386, 387, 392, 394, 395, 398, 409, 410, 411, 412, 416, 417, 419, 420, 422, 452, 454, 465, 468, 472, 499, 500, 501, 508, 562, 563, 569, 570, 574, 575, 586, 697, 702, 717, 723, 741, 805, 808, 809, 817, 819, 826, 851, 852, 853, 855, 857, 858, 859, 860, 861, 909, 910, 911, 914, 917, 918, 919, 920, 965, 995, 998, 1002, 1005, 1006, 1008, 1009, 1010, 1013, 1016, 1022, 1024, 1025, 1030, 1037, 1040, 1043, 1044, 1045, 1050, 1051, 1052, 1053, 1054, 1055], "though": [88, 141, 170, 193, 195, 252, 279, 298, 315, 317, 355, 356, 363, 367, 374, 377, 380, 384, 393, 394, 412, 417, 418, 419, 420, 421, 704, 812, 814, 909, 995, 996, 998, 1003, 1006, 1009, 1014, 1016, 1020, 1045], "thought": [235, 298, 394, 412, 450, 1003, 1007], "thoui": [0, 402, 1037], "thousand": [77, 141, 151, 246, 248, 317, 355, 375, 412, 419, 866, 867, 914, 1003, 1046, 1048], "thread": [293, 323, 326, 378, 380, 392, 394, 412, 419, 568, 841, 842, 971, 972, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054], "threadpoolctl": [41, 368, 378, 398, 405], "threadsaf": 1050, "three": [43, 46, 63, 70, 75, 76, 80, 88, 91, 109, 118, 135, 140, 142, 145, 146, 147, 157, 158, 159, 167, 170, 180, 188, 200, 207, 212, 215, 217, 224, 226, 248, 249, 258, 261, 292, 319, 320, 323, 368, 373, 376, 377, 384, 398, 406, 409, 412, 416, 417, 418, 420, 455, 466, 503, 714, 955, 999, 1001, 1002, 1003, 1006, 1009, 1016, 1020, 1021, 1024, 1037], "three_d_arrai": 926, "thresh": 1041, "threshold": [2, 50, 62, 77, 98, 119, 124, 130, 170, 185, 189, 191, 210, 243, 245, 265, 270, 271, 272, 277, 280, 292, 328, 329, 331, 359, 362, 394, 407, 412, 417, 419, 421, 445, 446, 449, 450, 473, 501, 505, 513, 514, 536, 542, 547, 553, 554, 555, 556, 566, 568, 593, 596, 598, 602, 607, 608, 649, 663, 672, 676, 681, 683, 697, 703, 705, 707, 708, 711, 712, 723, 725, 731, 732, 744, 745, 747, 761, 787, 789, 792, 793, 794, 799, 802, 803, 804, 805, 824, 827, 835, 844, 855, 856, 870, 872, 874, 876, 889, 892, 904, 905, 906, 907, 914, 921, 923, 979, 1002, 1006, 1009, 1010, 1012, 1016, 1019, 1021, 1022, 1026, 1027, 1032, 1037, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "threshold_": [602, 1044], "threshold_lambda": 649, "threshold_sign": 362, "thriller": [420, 880], "thrive": [0, 380], "throat": [50, 306, 375, 503], "through": [0, 2, 46, 52, 70, 140, 170, 180, 188, 219, 235, 247, 268, 273, 276, 298, 317, 318, 341, 348, 356, 362, 377, 380, 382, 387, 389, 394, 395, 398, 403, 411, 412, 415, 417, 419, 421, 422, 429, 435, 450, 468, 471, 476, 540, 546, 562, 563, 566, 569, 570, 571, 586, 598, 599, 602, 652, 656, 658, 660, 663, 664, 666, 668, 670, 673, 681, 682, 693, 696, 725, 811, 828, 885, 897, 901, 902, 917, 918, 919, 920, 960, 963, 995, 996, 1003, 1006, 1008, 1009, 1010, 1012, 1014, 1016, 1020, 1021, 1022, 1030, 1037, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "throughout": [328, 363, 394, 632, 806, 866, 867, 1040, 1045], "throughput": [366, 1025, 1032, 1040], "throw": [2, 310, 389, 934, 1041, 1044, 1045, 1046, 1047, 1051], "thrown": [716, 1046, 1047], "thu": [43, 44, 61, 62, 63, 64, 75, 86, 88, 93, 109, 113, 124, 126, 138, 140, 141, 143, 145, 151, 166, 172, 177, 178, 189, 200, 202, 204, 215, 217, 233, 242, 248, 253, 260, 267, 271, 273, 278, 279, 280, 286, 287, 296, 320, 322, 325, 358, 363, 367, 368, 375, 382, 386, 392, 394, 403, 410, 411, 412, 416, 417, 419, 420, 422, 423, 441, 443, 467, 520, 532, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 608, 611, 615, 627, 632, 637, 638, 648, 650, 663, 682, 710, 723, 730, 751, 793, 800, 805, 807, 812, 814, 819, 826, 840, 843, 878, 909, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1026, 1030, 1037, 1039, 1043, 1045, 1046, 1047, 1049, 1053], "thuan": 1048, "thukarama": 1052, "thumb": [13, 141, 193, 367, 380, 381, 392, 412, 663, 664, 671, 672, 673, 681, 682, 683, 909, 1006], "thumbnail": 1037, "th\u00e9ophil": 1053, "ti": [102, 215, 260, 263, 271, 351, 367, 388, 410, 412, 604, 605, 640, 725, 731, 761, 802, 803, 911, 914, 917, 1005, 1006, 1021, 1038, 1040, 1041, 1045, 1047, 1051, 1052, 1053], "tiago": [1038, 1042], "tialo": [1054, 1055, 1056], "tian": [412, 446, 1042, 1043, 1044], "tianqi": 419, "tiao": [1042, 1043], "tib": [687, 688], "tibshirani": [138, 139, 150, 170, 202, 272, 377, 416, 419, 525, 564, 565, 633, 661, 726, 728, 729, 839, 856, 917, 918, 996, 1000, 1002, 1007, 1013, 1022], "tic": [170, 189, 252, 284, 1008], "tic_bwd": 170, "tic_fwd": 170, "ticconi": 1043, "tick": [47, 78, 93, 175, 253, 284, 380, 637, 833], "tick_bottom": 313, "tick_label": [149, 191, 322], "tick_labels_dict": [149, 191, 322], "tick_labels_parameter_nam": [149, 191, 322], "tick_left": 313, "tick_param": [46, 54, 159, 258, 273, 317, 335], "tick_right": 46, "ticker": [235, 237, 240, 293], "ticket": [327, 380], "tidelift": 0, "tie": [185, 207, 338, 392, 419, 517, 837, 914, 1007, 1021, 1022, 1027, 1038, 1053], "tieleman": [865, 1011], "tien": 1042, "tiernei": [1045, 1046, 1047], "tight": [75, 130, 137, 144, 163, 166, 203, 207, 208, 209, 220, 224, 227, 232, 237, 240, 262, 293, 299, 300, 304, 305, 339, 343, 346, 348, 359, 587, 697, 1049], "tight_layout": [45, 47, 62, 64, 67, 75, 85, 88, 98, 105, 107, 116, 121, 122, 123, 131, 135, 137, 142, 144, 146, 149, 154, 156, 158, 174, 176, 181, 183, 187, 188, 190, 191, 195, 196, 200, 205, 213, 215, 223, 226, 230, 233, 235, 247, 252, 268, 269, 285, 292, 293, 295, 305, 314, 315, 316, 317, 318, 322, 326, 341, 355, 358, 359, 376], "tijanajovanov": 1049, "tikhonov": [179, 422, 677], "tild": [875, 1014, 1016], "tilen": 1047, "till": [412, 446, 793, 1006], "tim": [0, 401, 1037, 1042, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 392, 394, 395, 403, 406, 408, 409, 410, 412, 414, 415, 417, 419, 420, 423, 441, 445, 447, 448, 449, 450, 451, 454, 456, 459, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 476, 496, 501, 504, 506, 524, 528, 539, 541, 543, 545, 546, 552, 567, 572, 573, 574, 575, 595, 615, 624, 632, 633, 634, 635, 639, 644, 645, 648, 651, 655, 657, 659, 665, 667, 669, 671, 672, 677, 678, 679, 681, 682, 683, 690, 691, 695, 697, 699, 706, 747, 750, 751, 753, 795, 799, 802, 803, 805, 807, 808, 809, 810, 812, 814, 819, 820, 821, 824, 826, 830, 831, 832, 833, 834, 835, 837, 839, 844, 845, 846, 847, 848, 849, 850, 857, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 879, 882, 884, 888, 893, 901, 902, 906, 907, 911, 914, 915, 923, 947, 948, 955, 971, 995, 996, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1030, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "time_dens": 329, "time_spars": 329, "time_step": [200, 867], "timeit": [230, 261, 386], "timeout": [501, 971, 1051], "timer": [261, 386], "times_init": 261, "timescal": 247, "timeseri": 43, "timeseriessplit": [2, 43, 52, 151, 200, 268, 416, 1043, 1044, 1049], "timo": 1049, "timofei": 1052, "timotheemathieu": 1050, "timothi": [1042, 1050], "timsaur": 1047, "tinertia": 91, "ting": [568, 1012, 1045, 1046], "tingshan": 1050, "tini": [1039, 1052, 1055], "tinoco": 1054, "tinta": 319, "tip": [363, 366, 380, 383, 386, 407, 420, 539, 546, 650, 697, 1002, 1028, 1029, 1031, 1032, 1040], "tiphain": 1048, "tirth": [1047, 1048], "titan": [103, 190, 256, 322, 326, 327, 1014], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 109, 110, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 128, 129, 130, 136, 137, 138, 141, 143, 144, 145, 148, 149, 151, 152, 155, 158, 159, 163, 165, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 188, 195, 196, 198, 200, 202, 203, 204, 207, 208, 214, 215, 217, 219, 220, 221, 223, 224, 229, 232, 233, 235, 236, 237, 242, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 272, 273, 274, 276, 277, 278, 282, 283, 286, 288, 295, 296, 299, 300, 301, 302, 304, 305, 306, 313, 317, 318, 319, 320, 334, 337, 339, 340, 341, 342, 343, 346, 347, 351, 352, 354, 359, 360, 361, 376, 379, 380, 384, 388, 413, 1006, 1029], "title_bow": 413, "titles_opt": 266, "titov": [1045, 1047, 1050, 1051], "titu": 1048, "tiwari": 1049, "tiziano": 1037, "tjoa": 1041, "tkammi": 1043, "tkdd": 568, "tliu68": 1050, "tm": [51, 1009], "tmp": 384, "tmpdir": [295, 322], "tn": [267, 330, 717, 723, 1006], "tn_c": 282, "tnr": 267, "tnwei": 1049, "to_british": 420, "to_fram": 107, "to_list": 191, "to_numpi": [177, 267], "to_onnx": 406, "to_replac": [43, 189], "toarrai": [46, 329, 336, 362, 413, 420, 571, 587, 593, 595, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 882, 899, 900, 954, 976, 977, 979, 987, 988, 996, 1009, 1016, 1054], "toastedcornflak": [1043, 1044], "toastedyeast": [1051, 1052], "tobia": [1045, 1050, 1052], "tobychees": [1044, 1045], "toc": [170, 252], "toc_bwd": 170, "toc_fwd": 170, "toccac": 1047, "tocsc": 201, "tocsr": 55, "toctre": [380, 398, 405], "tod": [412, 423, 448], "todai": 177, "todens": [980, 981, 982, 983, 984, 985, 986], "todo": [80, 246, 384, 388, 412, 1056], "toeplitz": 110, "togeth": [43, 51, 84, 93, 103, 144, 156, 172, 178, 188, 197, 236, 239, 252, 269, 319, 326, 346, 359, 363, 382, 392, 393, 394, 412, 419, 420, 421, 427, 455, 457, 572, 573, 599, 694, 720, 805, 819, 869, 870, 883, 1002, 1003, 1006, 1007, 1013, 1016, 1022, 1023, 1030, 1043, 1054], "toi": [48, 58, 71, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 100, 111, 116, 125, 138, 152, 157, 158, 185, 198, 205, 219, 229, 241, 252, 258, 299, 300, 309, 340, 349, 373, 386, 392, 412, 419, 420, 444, 445, 446, 448, 450, 452, 453, 454, 456, 462, 473, 517, 519, 527, 568, 644, 682, 731, 761, 803, 855, 862, 870, 889, 913, 1003, 1005, 1006, 1012, 1016, 1027, 1032], "tok": [356, 420], "token": [2, 57, 356, 367, 375, 384, 420, 541, 593, 594, 595, 596, 1037, 1045, 1049, 1055], "token_featur": 420, "token_freq": 356, "token_pattern": [356, 420, 593, 594, 596], "tokoroten": 1042, "tokyo": [877, 1017], "tol": [46, 49, 55, 105, 121, 146, 151, 170, 183, 196, 206, 208, 222, 223, 229, 231, 242, 253, 259, 261, 311, 325, 350, 354, 382, 386, 419, 424, 447, 451, 453, 456, 463, 466, 475, 476, 482, 486, 487, 488, 536, 537, 538, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 564, 565, 566, 567, 607, 632, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 679, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 696, 698, 700, 802, 803, 819, 858, 866, 867, 904, 905, 909, 910, 911, 912, 913, 914, 915, 991, 1002, 1020, 1021, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055], "tola": 1047, "told": 420, "toledano": 1045, "toler": [80, 105, 151, 183, 206, 208, 231, 232, 347, 356, 375, 382, 389, 412, 424, 447, 451, 456, 463, 466, 475, 476, 482, 486, 487, 488, 536, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 552, 553, 564, 565, 566, 567, 632, 651, 652, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 681, 683, 684, 686, 687, 688, 689, 693, 694, 695, 696, 698, 699, 700, 849, 850, 854, 858, 866, 867, 904, 905, 909, 910, 911, 912, 913, 914, 915, 991, 1002, 1006, 1020, 1021, 1049, 1050, 1051, 1052], "toleranbc": 1046, "tolist": [43, 147, 183, 272, 324, 375], "tom": [0, 401, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tom1092": 1050, "toma": 1041, "tomasz": 1050, "tomato": 216, "tomatti": 1052, "tomdlt": 1043, "tomiock": [1052, 1053], "tommaso": 1050, "tommi": [1044, 1045, 1046], "tomographi": [42, 55, 99, 185, 657, 677, 1002, 1027], "tomohiro": 1050, "tomorrow": 411, "tom\u00e1": [1050, 1051], "tongyu": 1054, "toni": [45, 375, 568, 889, 1012, 1050, 1051], "tonk": 1044, "too": [43, 46, 51, 52, 55, 64, 79, 83, 88, 90, 95, 102, 106, 113, 125, 148, 151, 183, 188, 190, 200, 216, 219, 236, 246, 252, 259, 266, 267, 271, 280, 286, 310, 319, 343, 354, 360, 361, 367, 377, 380, 386, 388, 392, 394, 410, 412, 414, 416, 419, 420, 421, 424, 441, 453, 543, 684, 697, 712, 844, 845, 846, 847, 848, 874, 887, 889, 1001, 1003, 1005, 1006, 1008, 1009, 1013, 1038, 1041, 1044, 1045, 1046, 1047, 1049, 1055], "took": [0, 43, 77, 281], "tool": [21, 29, 41, 48, 50, 52, 146, 188, 249, 267, 271, 276, 363, 373, 374, 375, 378, 380, 382, 383, 385, 386, 387, 388, 393, 394, 395, 397, 398, 403, 406, 412, 413, 414, 491, 697, 706, 995, 1001, 1002, 1006, 1012, 1016, 1021, 1023, 1025, 1026, 1030, 1044, 1047, 1050, 1051, 1052], "toolbox": [392, 1025, 1030], "toolchain": 378, "toolkit": [367, 1025, 1030], "toolset": 1030, "tooth": 122, "tootoonian": 1050, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 84, 95, 97, 103, 123, 133, 140, 141, 144, 151, 156, 159, 188, 215, 217, 226, 230, 242, 252, 253, 258, 260, 261, 264, 270, 274, 282, 283, 298, 313, 315, 319, 323, 329, 332, 333, 343, 347, 354, 363, 380, 382, 386, 392, 409, 410, 412, 417, 418, 419, 491, 592, 593, 596, 604, 731, 761, 799, 921, 923, 995, 998, 1002, 1004, 1014, 1025, 1030, 1051, 1056], "top10": 375, "top5": 354, "top_featur": 54, "top_features_ind": 54, "top_indic": 354, "top_k_accuraci": 1006, "top_k_accuracy_scor": [2, 1006, 1049, 1051], "tophat": [298, 418, 849, 850, 854], "topic": [42, 45, 46, 47, 102, 185, 354, 355, 356, 375, 376, 416, 417, 420, 492, 502, 541, 543, 545, 552, 593, 596, 1002, 1007, 1025, 1026, 1027, 1042, 1044], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [417, 541], "topic_word_prior_": 541, "topisan": 1047, "toplak": 1053, "topolog": [467, 1025], "topologi": [239, 240], "torch": [408, 1055], "torgo": 374, "toro": 319, "toronto": [539, 649, 865], "torr": [1046, 1055], "torrella": [1046, 1047, 1053, 1056], "tortois": 1002, "tosequ": 1055, "toshihiro": [1043, 1044, 1050], "toshniw": 1049, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 368, 374, 375, 377, 386, 394, 409, 412, 418, 420, 423, 435, 448, 469, 486, 487, 488, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 515, 517, 519, 520, 524, 527, 528, 541, 549, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 575, 588, 589, 595, 599, 601, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 681, 682, 683, 684, 702, 709, 710, 718, 734, 735, 736, 739, 743, 744, 762, 774, 788, 789, 792, 799, 800, 801, 805, 819, 830, 831, 832, 842, 843, 844, 845, 852, 854, 860, 867, 884, 888, 910, 912, 915, 917, 918, 919, 920, 953, 995, 1002, 1003, 1006, 1007, 1008, 1009, 1016, 1020, 1021, 1022, 1027, 1038, 1043, 1045, 1053, 1054], "total_cel": 151, "total_fit_tim": 47, "total_sampl": [335, 541], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 156, "totrmsabvgrd": 145, "tottim": 386, "tour": [0, 401, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tournament": 995, "toward": [0, 63, 64, 96, 113, 142, 148, 155, 172, 190, 195, 219, 220, 240, 252, 286, 350, 380, 394, 412, 452, 456, 466, 681, 683, 700, 883, 1005, 1020, 1022, 1024, 1026], "toyota": 51, "tp": [330, 412, 717, 723, 734, 735, 736, 787, 788, 789, 792, 921, 1006], "tp_c": 282, "tpng": 921, "tpot": 1025, "tpr": [50, 243, 252, 267, 270, 282, 283, 387, 707, 711, 794, 1006, 1034, 1037, 1053], "tpr_a": 282, "tpr_b": 282, "tpr_score": 267, "tprs_lower": 283, "tprs_upper": 283, "tr": [268, 377, 384, 412, 414, 473, 474, 475, 476, 477, 478, 479, 480], "trace": [388, 412, 425, 477, 479, 480, 483, 484, 485, 694, 698, 1003, 1048], "traceback": [380, 385, 388, 392, 472, 716, 1029, 1054], "traceord": 141, "tracer0tong": 1043, "trach": 1037, "track": [133, 139, 147, 333, 380, 383, 384, 408, 539, 974, 1007, 1025, 1026, 1044, 1047], "tracker": [379, 383, 388, 392, 395, 398, 406, 1026], "tracking_select": 974, "tractabl": [43, 416, 546, 639, 1025, 1050], "trade": [37, 94, 109, 141, 151, 190, 219, 272, 274, 275, 286, 343, 354, 394, 411, 412, 414, 558, 559, 564, 565, 639, 661, 697, 805, 808, 809, 819, 832, 1003, 1010, 1018, 1020, 1021, 1026], "tradeoff": [88, 138, 185, 247, 255, 265, 280, 281, 282, 283, 354, 367, 380, 388, 418, 520, 569, 703, 707, 732, 794, 835, 870, 889, 909, 1003, 1027, 1046, 1049], "tradit": [55, 88, 215, 230, 355, 369, 410, 419, 420, 637, 699, 1002, 1005, 1016, 1025, 1030], "tradition": 1022, "traffic": 1030, "trail": [382, 989], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 97, 98, 102, 103, 107, 115, 116, 118, 119, 121, 124, 125, 126, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 156, 157, 158, 161, 167, 172, 173, 174, 177, 178, 179, 180, 181, 185, 187, 188, 189, 190, 191, 193, 199, 200, 201, 202, 204, 206, 207, 208, 210, 211, 215, 216, 217, 220, 222, 223, 224, 227, 229, 230, 233, 242, 245, 247, 251, 260, 262, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 293, 296, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 313, 315, 317, 318, 322, 325, 329, 331, 332, 333, 336, 337, 339, 342, 349, 350, 356, 357, 360, 361, 363, 367, 368, 369, 372, 375, 377, 382, 385, 392, 393, 394, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 424, 441, 444, 445, 447, 448, 451, 453, 455, 456, 457, 458, 463, 469, 473, 474, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 492, 493, 498, 501, 502, 503, 505, 509, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 632, 633, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 696, 697, 701, 708, 746, 793, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 869, 874, 875, 878, 879, 882, 883, 887, 888, 889, 890, 894, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 979, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1032, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "train_0": 43, "train_4": 43, "train_accuraci": [260, 287], "train_auc": 832, "train_ax": 126, "train_balanced_accuraci": 287, "train_cover_std": 50, "train_dataset": [188, 374], "train_errors_with": 146, "train_errors_without": 146, "train_fract": 1037, "train_idx": [52, 188, 394], "train_import": 190, "train_index": [260, 335, 416, 806, 807, 810, 812, 813, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826], "train_indx": 416, "train_pr": 146, "train_prec_macro": 416, "train_r2": 832, "train_rec_macro": 416, "train_result": 190, "train_sampl": [64, 230, 231], "train_scor": [223, 319, 350, 358, 811, 828, 832, 833, 836, 1001], "train_score_": [149, 419, 564, 565, 566, 567], "train_set": 410, "train_siz": [44, 46, 49, 135, 155, 173, 193, 231, 248, 252, 275, 286, 324, 327, 350, 807, 811, 822, 825, 833, 835, 1001, 1037, 1038, 1043, 1044], "train_size_ab": 833, "train_size_idx": 350, "train_sizes_ab": 833, "train_test_s": 248, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 103, 107, 116, 126, 135, 140, 142, 146, 147, 148, 149, 150, 151, 152, 155, 166, 167, 187, 188, 190, 191, 193, 200, 210, 215, 222, 223, 230, 231, 233, 243, 252, 255, 256, 266, 267, 270, 271, 276, 280, 282, 286, 292, 296, 301, 302, 308, 310, 311, 315, 317, 318, 320, 322, 323, 324, 329, 330, 336, 358, 362, 363, 385, 393, 408, 413, 416, 419, 441, 442, 563, 565, 572, 573, 702, 703, 705, 707, 804, 805, 827, 837, 840, 858, 866, 867, 869, 919, 920, 995, 996, 1006, 1008, 1009, 1014, 1016, 1021, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1054, 1055], "train_tim": [230, 248, 354, 355], "trainabl": 382, "traine": 1030, "training_data": 172, "training_data_": 1047, "training_idx": 180, "training_indic": 179, "training_noisy_target": 172, "training_sample_indic": 172, "training_tim": [146, 354], "training_time_early_stop": 146, "training_time_ful": 146, "trajectori": 139, "tran": 110, "trans_data": 237, "transact": [96, 267, 330, 377, 412, 414, 423, 425, 448, 452, 479, 539, 543, 545, 552, 568, 649, 669, 690, 691, 730, 731, 761, 774, 1002, 1006], "transax": [79, 95, 239, 242, 260, 301, 315], "transcript": 380, "transcriptom": 697, "transduc": 333, "transduct": [394, 412, 904, 905, 1026], "transduction_": [332, 333, 334, 904, 905, 906], "transfer": [151, 403, 408, 1002, 1026], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 80, 81, 84, 87, 90, 95, 101, 105, 106, 116, 118, 123, 124, 126, 127, 129, 130, 134, 139, 141, 145, 155, 156, 167, 178, 184, 185, 188, 189, 190, 193, 207, 215, 216, 223, 229, 231, 233, 236, 239, 242, 244, 245, 247, 249, 250, 252, 256, 260, 269, 270, 271, 274, 282, 292, 293, 295, 301, 302, 303, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 327, 329, 330, 343, 346, 347, 354, 356, 363, 374, 375, 376, 377, 380, 382, 385, 389, 394, 403, 406, 408, 410, 412, 414, 415, 416, 417, 419, 420, 421, 422, 428, 433, 436, 441, 445, 446, 447, 449, 451, 453, 456, 468, 469, 470, 471, 472, 486, 487, 488, 489, 492, 493, 501, 508, 513, 514, 519, 520, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 562, 564, 566, 569, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 641, 643, 644, 645, 646, 647, 658, 663, 668, 678, 681, 689, 693, 694, 695, 696, 697, 699, 706, 707, 718, 758, 759, 790, 805, 808, 809, 819, 835, 838, 844, 853, 858, 861, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 907, 909, 911, 914, 915, 928, 930, 942, 945, 947, 995, 996, 998, 1000, 1002, 1003, 1006, 1007, 1010, 1020, 1021, 1023, 1025, 1026, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "transform_algorithm": [124, 130, 536, 542, 547, 1053], "transform_alpha": [124, 130, 536, 542, 547, 1050], "transform_dur": 293, "transform_func": 274, "transform_list": 868, "transform_max_it": [536, 542, 543, 547, 1047], "transform_method": 417, "transform_n_nonzero_coef": [124, 130, 536, 542, 547], "transform_n_nozero_coef": 130, "transform_output": [256, 267, 320, 472, 907, 1052, 1053], "transformed_grid": 154, "transformedtargetregressor": [2, 107, 188, 215, 392, 403, 413, 598, 599, 602, 1007, 1045, 1047, 1050, 1055, 1056], "transformedtargetregressortransformedtargetregressor": 188, "transformer_": [249, 469], "transformer_list": [106, 413, 868, 871, 996, 1048, 1049], "transformer_nam": [293, 468], "transformer_tag": [928, 942], "transformer_weight": [102, 468, 471, 868, 1042, 1049], "transformermixin": [2, 249, 293, 382, 394, 469, 1045, 1052, 1053, 1054], "transformers_": [468, 471, 1054, 1055], "transformertag": [2, 928, 942], "transfus": 243, "transit": [55, 350, 384, 406, 1048], "transitive_target": 55, "translat": [107, 382, 422, 532, 619, 878, 879, 895, 1003, 1006, 1030], "transluc": 161, "transpar": [67, 315, 990, 1030], "transpos": [62, 273, 424, 543, 545, 552, 665, 666, 667, 668, 793, 953, 991, 998, 1006, 1018, 1037, 1051], "transposit": 953, "trapezoid": [2, 280, 711, 712, 1006], "travel": 0, "travers": [362, 1009, 1013, 1055, 1056], "travi": [1037, 1045], "treat": [43, 45, 103, 145, 156, 183, 188, 215, 282, 319, 324, 329, 335, 363, 380, 392, 394, 409, 419, 420, 446, 566, 567, 593, 594, 596, 612, 613, 637, 643, 650, 676, 679, 734, 735, 743, 759, 788, 789, 792, 793, 878, 879, 885, 886, 889, 890, 894, 897, 898, 900, 909, 910, 962, 996, 998, 1002, 1006, 1007, 1013, 1016, 1020, 1022, 1041, 1049, 1053, 1054], "treatment": [112, 187, 374, 411, 417, 473, 478, 1022], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 88, 95, 118, 125, 134, 137, 138, 139, 141, 145, 146, 147, 148, 149, 152, 153, 155, 156, 157, 159, 170, 180, 183, 189, 191, 199, 223, 224, 236, 249, 251, 252, 253, 270, 277, 279, 290, 292, 293, 296, 298, 306, 313, 314, 318, 323, 324, 326, 363, 367, 375, 377, 386, 393, 394, 397, 410, 411, 412, 418, 423, 441, 445, 446, 447, 448, 449, 450, 452, 454, 461, 467, 500, 501, 505, 509, 519, 520, 524, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 636, 637, 638, 639, 663, 693, 697, 707, 708, 716, 747, 753, 793, 795, 811, 826, 832, 833, 835, 844, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 870, 873, 882, 917, 918, 919, 920, 921, 922, 923, 948, 996, 1003, 1006, 1007, 1012, 1013, 1025, 1026, 1027, 1028, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tree_": [322, 358, 362, 854, 917, 918, 919, 920, 1054], "tree_copi": [849, 850], "tree_disp": 253, "tree_importance_sorted_idx": 191, "tree_optim": 290, "tree_preprocessor": [156, 215], "tree_stat": [849, 850], "treelit": 1025, "trein": 1040, "tremend": [319, 419], "trend": [153, 177, 189, 245, 309, 1030, 1044], "trent": [1030, 1043], "trevor": [170, 202, 327, 377, 633, 661, 726, 728, 729, 996, 1002, 1018, 1041, 1042, 1045, 1046, 1047, 1049], "trevorstephen": [1041, 1043], "tri": [99, 129, 235, 286, 302, 347, 368, 382, 385, 392, 395, 410, 453, 455, 457, 636, 637, 638, 675, 697, 703, 705, 707, 819, 1011, 1039, 1045, 1049, 1055], "triag": [0, 380, 383, 395], "trial": [43, 278, 451, 453, 464, 676, 802, 803, 1002, 1043], "triangl": [394, 417, 447, 451, 463, 704, 1004, 1009], "triangular": [412, 467, 616, 1003], "tribe": 375, "trick": [2, 172, 248, 303, 347, 356, 366, 369, 383, 392, 413, 587, 594, 648, 677, 998, 999, 1010, 1020, 1021, 1032, 1038, 1046, 1054], "tricki": [410, 1003], "trickiest": 380, "trigg": 571, "trigger": [103, 104, 380, 384, 394, 406, 413, 866, 867, 869, 870, 935, 936, 953, 1002, 1045, 1051, 1052], "triglycerid": [170, 377], "trim": [230, 412, 849, 850], "trimeta": 1048, "trinh": 1052, "tripl": 385, "triplet": 514, "tripramudya": 1053, "trishnendu": 1045, "tristan": 1002, "triu": 51, "trivial": [48, 217, 267, 358, 380, 412, 823, 911, 914, 1003, 1026, 1037], "troillard": [1053, 1054], "tropp": [540, 546], "troubl": [66, 420], "troubleshoot": 420, "troyanskaya": [633, 996], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 82, 83, 86, 87, 88, 90, 91, 93, 96, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 119, 121, 122, 123, 124, 126, 131, 133, 135, 139, 141, 145, 147, 148, 150, 151, 152, 153, 156, 157, 159, 161, 162, 166, 169, 172, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 200, 202, 203, 204, 206, 208, 210, 211, 212, 215, 217, 218, 219, 222, 223, 229, 230, 231, 233, 235, 238, 239, 242, 243, 246, 248, 249, 250, 251, 252, 255, 256, 258, 261, 263, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 298, 299, 302, 306, 308, 309, 310, 311, 314, 318, 319, 320, 322, 324, 326, 327, 328, 329, 330, 333, 335, 336, 337, 346, 347, 349, 350, 351, 354, 355, 356, 358, 359, 362, 363, 367, 368, 373, 375, 376, 378, 380, 381, 382, 385, 386, 387, 389, 393, 394, 397, 403, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 429, 431, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 723, 724, 725, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 743, 744, 745, 746, 747, 748, 757, 759, 761, 766, 772, 774, 783, 787, 788, 789, 790, 791, 792, 793, 794, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 819, 823, 824, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 928, 929, 933, 934, 935, 936, 942, 947, 948, 953, 954, 966, 967, 970, 971, 975, 976, 977, 978, 986, 991, 993, 994, 995, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1025, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "true_": [202, 542, 641], "true_coef": [187, 200, 210, 286, 651, 652, 657, 665, 666, 667, 686, 687, 688], "true_cov": [473, 475, 476, 482], "true_den": 298, "true_fac": 251, "true_fun": 288, "true_h": 326, "true_k": 355, "true_label": [328, 332, 333], "true_nam": 45, "true_relev": [731, 761], "true_w": 326, "true_weight": 195, "trujillo": [1051, 1052], "truli": [276, 369, 717, 1006], "truncat": [2, 105, 154, 236, 389, 539, 540, 544, 545, 546, 549, 681, 683, 731, 761, 802, 858, 922, 953, 995, 1005, 1006, 1020, 1031, 1032, 1043, 1045], "truncate_mod": 76, "truncatedsvd": [2, 154, 236, 355, 417, 539, 540, 544, 545, 546, 697, 868, 871, 1039, 1044, 1048, 1049, 1051, 1055], "truong": 1043, "trust": [0, 51, 63, 103, 104, 112, 135, 140, 142, 143, 152, 153, 156, 159, 167, 177, 188, 189, 190, 191, 197, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 395, 406, 410, 1051], "trustworthi": [2, 326, 1045, 1046, 1051, 1052, 1053, 1054], "truth": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 124, 128, 152, 180, 200, 209, 215, 216, 252, 264, 276, 355, 394, 412, 708, 709, 710, 713, 717, 718, 719, 720, 722, 723, 726, 728, 729, 731, 733, 734, 735, 739, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 788, 789, 790, 791, 792, 795, 796, 800, 801, 1006, 1045, 1051], "truthi": [2, 966], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 86, 103, 104, 124, 135, 140, 141, 142, 143, 144, 151, 152, 153, 156, 159, 167, 172, 177, 178, 184, 187, 188, 189, 190, 193, 195, 197, 204, 243, 244, 245, 249, 253, 254, 255, 256, 259, 260, 263, 267, 271, 273, 274, 280, 285, 287, 290, 293, 306, 311, 319, 323, 324, 326, 327, 329, 334, 345, 350, 354, 355, 362, 375, 378, 379, 380, 382, 385, 386, 388, 392, 394, 398, 400, 403, 406, 412, 415, 416, 419, 420, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 508, 572, 582, 594, 663, 678, 680, 694, 698, 804, 805, 808, 809, 817, 819, 827, 830, 831, 832, 834, 887, 889, 892, 894, 895, 896, 897, 898, 899, 900, 909, 928, 934, 989, 995, 1002, 1003, 1012, 1021, 1022, 1026, 1029, 1030, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "tr\u00e9segni": [0, 1039], "ts_cv": [43, 52, 151], "tscv": [416, 826], "tseng": 412, "tsetogl": 1052, "tsilhouett": 91, "tslearn": 1025, "tsne": [2, 185, 235, 236, 237, 239, 240, 294, 295, 326, 394, 426, 436, 501, 693, 694, 695, 853, 857, 870, 979, 1003, 1009, 1027, 1040, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tsne_param": 293, "tsoumaka": [725, 739, 745, 1006], "tspeng": [1052, 1053], "tsuga": 1050, "tsujii": 1020, "tsukada": 1049, "tsuruoka": 1020, "tsutomu": 1048, "tt": [157, 268, 469], "ttang131": 1047, "ttime": 91, "tttthomasssss": 1041, "tube": [915, 1021], "tue": [43, 52, 151, 189, 1043], "tuft": 453, "tuhin": 1055, "tuk": 1055, "tulio": [1045, 1046], "tulken": 1047, "tulloch": [1040, 1041], "tumor": [170, 377, 411], "tune": [2, 43, 64, 79, 88, 103, 126, 135, 141, 151, 169, 170, 172, 183, 185, 189, 204, 219, 220, 232, 239, 243, 252, 265, 266, 276, 277, 278, 280, 290, 295, 314, 335, 343, 347, 350, 354, 363, 367, 368, 369, 393, 394, 407, 410, 412, 416, 419, 421, 422, 456, 466, 501, 556, 564, 565, 566, 599, 618, 619, 620, 622, 624, 625, 627, 628, 630, 648, 663, 664, 695, 699, 705, 707, 723, 747, 789, 792, 804, 805, 821, 827, 832, 835, 865, 870, 889, 907, 914, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1020, 1021, 1025, 1027, 1032, 1037, 1051, 1053, 1055, 1056], "tuned_classifi": 330, "tuned_model": [267, 287], "tuned_model_coef": 287, "tuned_param": 46, "tuned_paramet": [109, 161, 271], "tunedthresholdclassifiercv": [2, 267, 287, 411, 804, 1055], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 267, "tupl": [47, 82, 88, 130, 189, 233, 373, 374, 375, 394, 416, 424, 437, 455, 457, 468, 471, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 513, 515, 516, 517, 518, 519, 527, 538, 566, 567, 572, 573, 574, 575, 587, 588, 589, 592, 593, 594, 596, 632, 637, 638, 639, 716, 717, 724, 747, 786, 788, 802, 805, 819, 832, 849, 850, 868, 869, 879, 880, 884, 887, 895, 899, 911, 912, 913, 914, 915, 924, 936, 937, 939, 944, 945, 946, 947, 971, 972, 989, 994, 1013, 1043, 1044, 1048, 1049, 1050, 1055], "tur": 1055, "turn": [2, 30, 43, 68, 109, 183, 184, 188, 200, 230, 231, 247, 273, 297, 330, 356, 367, 368, 369, 375, 392, 394, 395, 412, 413, 415, 417, 420, 421, 422, 586, 587, 594, 612, 613, 838, 842, 911, 914, 938, 996, 1000, 1008, 1011, 1016, 1030, 1042, 1044, 1045, 1050], "turquois": [125, 129, 130, 150, 221, 232, 238, 260, 261, 280], "tushar": 1055, "tutori": [112, 161, 162, 163, 204, 217, 233, 273, 380, 381, 386, 388, 406, 412, 456, 466, 696, 1021, 1032, 1040], "tuveri": 1052, "tuzova": 1045, "tv": 91, "tw": [193, 374, 491, 513, 514, 663, 1021], "tweak": [2, 113, 249, 416, 971, 1005, 1048], "tweedi": [2, 185, 194, 215, 468, 501, 557, 653, 674, 685, 711, 729, 750, 752, 754, 755, 757, 835, 870, 873, 874, 882, 889, 1002, 1027, 1047, 1048, 1050], "tweedie_pow": 233, "tweedieregressor": [2, 43, 323, 326, 653, 674, 1002, 1048, 1051, 1052, 1056], "tweet": 1030, "twelfth": 701, "twenti": [57, 246, 377, 409, 412], "twice": [64, 267, 285, 287, 354, 356, 382, 422, 624, 735, 737, 955, 1046, 1054], "twine": 384, "twinx": 335, "twister": 1048, "twitter": 384, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 88, 93, 97, 102, 103, 107, 111, 115, 116, 118, 119, 121, 123, 124, 126, 129, 134, 135, 136, 143, 144, 145, 146, 148, 151, 152, 153, 154, 157, 167, 170, 172, 173, 174, 175, 178, 179, 183, 184, 185, 188, 189, 190, 195, 199, 200, 202, 204, 205, 206, 211, 215, 216, 217, 223, 224, 227, 232, 233, 237, 239, 240, 242, 247, 249, 250, 252, 258, 259, 260, 262, 263, 264, 267, 268, 270, 274, 280, 290, 296, 298, 301, 302, 304, 306, 313, 315, 318, 322, 323, 325, 326, 330, 334, 339, 340, 343, 344, 345, 347, 351, 354, 355, 356, 359, 363, 373, 374, 375, 376, 377, 378, 380, 382, 384, 386, 387, 388, 392, 394, 395, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 445, 446, 447, 448, 449, 451, 454, 455, 456, 457, 461, 463, 468, 473, 474, 475, 476, 477, 478, 479, 480, 492, 494, 495, 497, 498, 499, 501, 503, 505, 506, 507, 508, 509, 510, 512, 515, 519, 524, 527, 541, 543, 545, 549, 552, 554, 555, 558, 565, 575, 586, 589, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 611, 612, 613, 615, 616, 625, 626, 629, 633, 636, 637, 644, 648, 650, 675, 676, 678, 697, 704, 708, 709, 710, 717, 720, 721, 724, 726, 727, 728, 729, 736, 737, 740, 741, 743, 746, 748, 759, 760, 762, 768, 769, 776, 779, 782, 783, 784, 785, 786, 790, 791, 799, 800, 801, 802, 838, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 866, 867, 873, 874, 881, 882, 883, 884, 903, 904, 905, 909, 910, 917, 919, 920, 968, 984, 985, 991, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "two_d_arrai": 926, "two_d_label": 929, "two_mean": 79, "two_point_correl": [849, 850], "twoclass_output": 137, "twosigmajab": 1045, "twx": 51, "tx": 415, "tx_k": [415, 1000], "txn": 51, "txt": [354, 374, 498, 508], "ty": 415, "ty_k": 415, "tyagi": 1051, "tygert": [540, 546, 953], "tyler": [1044, 1050, 1051, 1052], "type": [2, 46, 52, 86, 87, 98, 101, 102, 112, 118, 119, 130, 144, 145, 147, 177, 184, 185, 187, 188, 189, 193, 200, 215, 217, 244, 249, 254, 256, 257, 259, 260, 263, 264, 267, 268, 274, 279, 280, 282, 283, 284, 286, 287, 290, 303, 319, 329, 347, 354, 356, 362, 363, 368, 373, 374, 375, 377, 380, 383, 384, 385, 386, 392, 393, 398, 400, 406, 409, 413, 420, 436, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 501, 513, 514, 520, 572, 577, 586, 587, 593, 594, 596, 605, 609, 622, 632, 634, 635, 643, 661, 663, 677, 679, 684, 692, 694, 697, 698, 704, 706, 712, 719, 721, 734, 735, 738, 743, 788, 789, 792, 793, 802, 803, 805, 811, 819, 828, 833, 835, 836, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 869, 870, 871, 874, 876, 882, 883, 889, 890, 907, 911, 912, 913, 914, 915, 930, 931, 933, 935, 936, 939, 944, 945, 968, 969, 992, 996, 998, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1018, 1022, 1027, 1029, 1030, 1037, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "type_check": 384, "type_filt": 945, "type_of_target": [2, 394, 876, 890, 1007, 1051, 1052, 1054, 1055], "type_of_target_": 890, "typed_ndarrai": 380, "typeerror": [249, 325, 385, 716, 939, 962, 989, 1044, 1045, 1048, 1050, 1054], "typic": [25, 62, 64, 125, 133, 146, 193, 200, 215, 219, 233, 248, 275, 276, 280, 282, 283, 299, 300, 324, 343, 355, 367, 373, 374, 375, 378, 382, 383, 389, 393, 394, 406, 408, 410, 412, 413, 416, 417, 419, 420, 422, 447, 451, 453, 501, 546, 556, 560, 561, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 634, 643, 645, 648, 659, 660, 661, 676, 687, 688, 717, 876, 883, 887, 890, 952, 953, 958, 962, 965, 990, 995, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1014, 1030, 1046, 1050, 1053, 1054], "typo": [380, 395, 403, 1037], "tzu": 1041, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 83, 85, 89, 118, 121, 128, 145, 146, 151, 172, 181, 187, 188, 189, 212, 216, 219, 223, 233, 236, 239, 246, 249, 255, 256, 259, 260, 264, 267, 268, 273, 276, 280, 286, 287, 319, 347, 354, 362, 368, 375, 380, 384, 386, 388, 392, 398, 403, 409, 412, 415, 417, 419, 420, 435, 467, 469, 486, 487, 488, 536, 542, 550, 551, 555, 557, 559, 561, 563, 565, 567, 570, 573, 575, 593, 594, 596, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 686, 689, 694, 698, 709, 725, 745, 760, 842, 843, 852, 860, 867, 889, 903, 910, 912, 915, 918, 920, 953, 998, 1000, 1005, 1006, 1013, 1016, 1030, 1034, 1047], "u2uwz2": [170, 377], "u_": [409, 486, 487, 488], "u_1": [409, 998], "u_2": [409, 998], "u_i": [412, 486, 487, 488, 760], "u_init": 548, "u_k": [415, 417], "uai": 1018, "ubuntu": [367, 378, 386, 388], "uchida": 1047, "uci": [47, 170, 267, 318, 374, 377, 505, 507, 509, 515], "ucl": 1019, "ucla": 1002, "udi": 1037, "udit": 1051, "ufmay": 1049, "ufunc": [188, 1054], "ugli": [224, 301, 304, 339], "ugo": 1051, "ugurcaliskan": 1041, "ugurthemast": [1040, 1041], "uhmann": 1050, "uieda": 1050, "uint": 1048, "uint32": [375, 502], "uint8": [86, 124, 374, 502, 511, 512, 1049], "uk": 1019, "ulloa": 1043, "ulrik": [412, 456, 466, 696], "ulterior": 52, "ultim": [88, 239, 381], "umar": [1045, 1046], "umass": [45, 57, 375], "umberto": 1049, "umbrella": 411, "umpi": 420, "un": [51, 380, 410, 420, 424, 538, 594, 800, 872, 881, 892, 896, 1046], "unabl": [51, 63, 103, 104, 140, 142, 143, 152, 153, 156, 159, 167, 177, 187, 188, 189, 190, 197, 200, 215, 243, 244, 245, 249, 253, 254, 255, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 327, 329, 334, 362, 369, 889, 1016, 1046], "unadjust": [412, 1006, 1049], "unaffect": 1009, "unalt": 1006, "unambigu": [282, 1007, 1043], "unanim": 395, "unavail": [394, 663, 664, 966, 1044, 1050], "unbalanc": [2, 185, 276, 338, 341, 344, 416, 517, 636, 914, 940, 941, 995, 1020, 1027], "unbias": [109, 410, 414, 417, 441, 555, 661, 677, 679, 692, 1002], "unbound": [72, 1005, 1051, 1055], "uncalibr": [61, 62, 63, 441], "uncent": 197, "uncertain": [273, 333, 379], "uncertainti": [62, 151, 172, 179, 195, 275, 410, 412, 572, 573, 648, 869, 996, 1018], "uncertainty_index": [332, 333], "unchang": [178, 188, 233, 280, 419, 436, 441, 446, 447, 448, 449, 450, 451, 453, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 697, 768, 804, 806, 807, 812, 814, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 856, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 994, 1009, 1045, 1051, 1053], "unclaim": 383, "unclear": [379, 380, 506], "unclust": 450, "uncommon": [414, 663, 909, 1021], "uncompress": [47, 513, 514], "unconstrain": [151, 153, 189, 323, 329, 375, 1020], "uncorrect": [273, 600, 603], "uncorrel": [2, 279, 376, 533, 539, 546, 1006], "uncorrupt": 44, "uncov": [131, 700], "undefin": [52, 276, 394, 717, 734, 743, 788, 974, 1006, 1045, 1049, 1053, 1056], "undefinedmetricwarn": [2, 311, 734, 735, 788, 789, 792, 1046], "under": [2, 43, 46, 50, 61, 62, 64, 76, 100, 109, 110, 128, 145, 148, 189, 203, 215, 242, 252, 273, 280, 282, 283, 314, 328, 374, 380, 382, 384, 386, 388, 394, 398, 406, 410, 412, 414, 416, 417, 420, 421, 450, 455, 457, 474, 475, 476, 477, 478, 479, 480, 496, 537, 544, 546, 548, 659, 660, 661, 707, 711, 712, 713, 720, 759, 793, 794, 802, 803, 854, 961, 1002, 1003, 1004, 1006, 1009, 1016, 1020, 1021, 1022, 1025, 1026, 1037, 1039, 1040, 1042, 1045, 1049], "underdetermin": 200, "underestim": [52, 148, 189, 215, 233, 273, 380], "underfit": [43, 70, 148, 172, 185, 190, 216, 219, 265, 286, 308, 319, 350, 419, 662, 805, 808, 809, 819, 831, 832, 869, 884, 1001, 1002, 1027], "underflow": [1045, 1050], "undergo": 279, "undergrad": 1030, "underli": [64, 89, 111, 155, 170, 188, 191, 216, 218, 219, 249, 267, 278, 297, 298, 347, 361, 368, 380, 392, 394, 397, 403, 408, 410, 412, 414, 416, 417, 418, 419, 421, 422, 441, 455, 456, 457, 466, 468, 469, 475, 476, 482, 529, 560, 561, 569, 570, 572, 573, 574, 575, 598, 599, 602, 607, 663, 664, 670, 673, 678, 680, 685, 696, 700, 804, 805, 808, 809, 819, 827, 830, 831, 832, 837, 838, 839, 840, 841, 842, 843, 852, 854, 906, 909, 917, 918, 919, 920, 970, 994, 1002, 1003, 1007, 1012, 1019, 1021, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1055, 1056], "underrepres": 380, "underscor": [243, 356, 382, 394, 989, 1037, 1047, 1050], "underset": [417, 1002, 1009, 1022], "understand": [43, 48, 52, 76, 135, 177, 185, 189, 249, 267, 268, 271, 287, 324, 325, 340, 347, 354, 357, 358, 363, 379, 380, 381, 386, 392, 397, 412, 419, 420, 509, 835, 866, 867, 917, 918, 919, 920, 923, 995, 996, 1003, 1005, 1022, 1024, 1025, 1027, 1030, 1037, 1051], "understood": [274, 380, 412, 962], "undertak": 392, "undesir": [90, 173, 422, 827], "undistinguish": 416, "undistort": 124, "undo": [274, 879, 1041], "undocu": 1044, "unequ": [90, 1045], "uneth": 187, "uneven": [85, 268, 412, 416], "unevenli": [90, 215, 268], "unexpect": [90, 249, 363, 380, 385, 388, 398, 406, 540, 701, 1006, 1021, 1039, 1045, 1046, 1049, 1051, 1053, 1055], "unexpectedli": [394, 1045], "unfair": 363, "unfinish": [379, 380], "unfit": [2, 89, 413, 437, 468, 574, 575, 607, 616, 1045, 1047, 1054], "unfold": [126, 383, 1003], "unfortun": [148, 187, 188, 233, 388, 392, 419, 513, 514], "unhandl": 1046, "unhelp": 380, "unicod": [356, 420, 491, 508, 587, 593, 594, 596, 970, 1037, 1045, 1049], "unicodedata": [593, 594, 596], "unicodedecodeerror": [420, 593, 594, 596], "unifi": [290, 381, 389, 392, 393, 419, 642, 1025, 1037], "unifom": 296, "uniform": [2, 58, 67, 72, 86, 147, 148, 152, 166, 173, 178, 181, 195, 196, 229, 240, 242, 245, 281, 296, 299, 300, 305, 308, 314, 316, 317, 320, 326, 328, 342, 382, 385, 406, 412, 442, 443, 556, 574, 575, 615, 616, 633, 644, 654, 655, 659, 673, 681, 682, 683, 704, 726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 795, 796, 809, 817, 819, 844, 845, 848, 851, 852, 859, 860, 874, 886, 888, 898, 940, 955, 995, 996, 1005, 1006, 1009, 1043, 1045, 1047, 1051, 1053, 1056], "uniform_averag": [435, 469, 486, 487, 488, 559, 561, 563, 565, 567, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 726, 728, 733, 750, 751, 753, 755, 756, 758, 790, 795, 796, 842, 843, 852, 860, 867, 910, 912, 915, 918, 920, 1006, 1046, 1056], "uniform_labelings_scor": 72, "uniformli": [72, 141, 148, 165, 242, 258, 322, 382, 521, 522, 523, 556, 647, 809, 817, 819, 888, 995, 996, 1006, 1009, 1016, 1041, 1046], "unigram": [274, 375, 420, 593, 594, 596, 1044], "unilev": 51, "unimod": [242, 478], "unimport": [421, 1014], "uninform": [62, 64, 320, 376, 385, 420, 995, 1002, 1045], "uniniti": 388, "uninstal": 378, "unintention": 1016, "unintuit": 90, "union": [102, 188, 413, 743, 759, 868, 1044], "union_not_memb": 188, "uniqu": [2, 43, 61, 66, 77, 81, 90, 91, 96, 100, 105, 142, 143, 149, 150, 151, 188, 190, 200, 230, 233, 260, 282, 302, 319, 320, 328, 335, 354, 355, 356, 374, 382, 389, 394, 412, 413, 416, 419, 420, 444, 454, 458, 460, 468, 471, 501, 554, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 615, 638, 639, 640, 671, 673, 681, 702, 714, 716, 759, 787, 805, 807, 819, 832, 837, 838, 841, 847, 856, 859, 861, 866, 868, 880, 882, 883, 890, 893, 909, 911, 917, 918, 919, 920, 940, 953, 968, 969, 1002, 1007, 1016, 1030, 1045, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "unique_label": [2, 82, 88, 355, 382, 389], "unit": [2, 63, 102, 111, 188, 193, 215, 233, 298, 310, 313, 330, 355, 375, 380, 382, 386, 388, 389, 417, 420, 424, 468, 493, 494, 524, 529, 537, 538, 539, 546, 547, 594, 595, 596, 612, 613, 616, 663, 664, 681, 690, 704, 775, 856, 865, 866, 867, 873, 879, 881, 885, 887, 889, 895, 896, 897, 899, 900, 909, 910, 1002, 1004, 1005, 1006, 1011, 1016, 1022, 1041, 1045, 1051, 1052], "unit_eig_vec": 258, "unit_vari": [887, 899, 1049], "unitari": 953, "uniti": 30, "univ": [694, 698, 1003], "univ_select": 106, "univari": [2, 18, 48, 49, 71, 84, 104, 106, 164, 165, 167, 185, 198, 214, 230, 338, 372, 412, 413, 420, 449, 509, 530, 535, 597, 600, 601, 603, 604, 605, 607, 610, 611, 612, 613, 614, 632, 633, 634, 635, 650, 805, 810, 831, 835, 869, 870, 879, 884, 888, 889, 909, 914, 1002, 1021, 1023, 1027, 1028, 1032, 1037, 1043], "univers": [0, 180, 188, 354, 375, 377, 383, 412, 417, 420, 595, 793, 844, 848, 904, 1002, 1004, 1006, 1008], "unix": 420, "unknown": [52, 89, 188, 249, 273, 332, 334, 369, 375, 394, 406, 409, 420, 876, 882, 883, 968, 1005, 1016, 1041, 1045, 1049, 1050], "unknown_typ": 406, "unknown_v": 156, "unknown_valu": [145, 156, 190, 252, 319, 883, 1016, 1049, 1051, 1052], "unlabel": [38, 45, 250, 324, 332, 333, 334, 336, 337, 394, 412, 904, 905, 906, 1005, 1049], "unlabeled_indic": 333, "unlabeled_set": 332, "unless": [187, 249, 259, 264, 380, 383, 392, 394, 406, 410, 412, 415, 423, 441, 448, 450, 452, 454, 456, 461, 462, 465, 468, 471, 476, 493, 501, 513, 514, 536, 540, 541, 542, 544, 547, 548, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 599, 607, 612, 613, 615, 616, 637, 639, 644, 651, 652, 656, 657, 658, 660, 662, 663, 664, 666, 668, 670, 671, 673, 681, 684, 693, 694, 695, 696, 697, 698, 699, 714, 719, 779, 783, 786, 805, 808, 809, 811, 819, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 842, 851, 852, 855, 857, 859, 860, 862, 863, 866, 867, 868, 871, 890, 894, 895, 897, 898, 899, 900, 904, 905, 917, 918, 919, 920, 928, 931, 935, 936, 953, 1002, 1005, 1007, 1037, 1039, 1043, 1045, 1048, 1049, 1054, 1055], "unlik": [88, 89, 141, 188, 189, 235, 237, 263, 313, 341, 380, 382, 386, 392, 394, 403, 406, 414, 416, 417, 420, 450, 454, 540, 655, 656, 659, 660, 661, 687, 688, 790, 826, 849, 850, 889, 900, 912, 1002, 1005, 1006, 1013, 1021, 1037, 1043], "unlimit": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "unlucki": 363, "unmaintain": 1037, "unmarri": 188, "unmeaning": 1044, "unmix": [122, 424, 538], "unmixing_matrix": 538, "unmodifi": [382, 394], "unnecessari": [141, 258, 385, 432, 447, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 710, 1009, 1016, 1026, 1030, 1040, 1042, 1047, 1048, 1050, 1053], "unnecessarili": [239, 1044, 1047], "unnorm": [394, 541, 1003, 1043, 1044], "unobserv": [151, 187, 188, 417], "unord": [412, 419, 1016], "unpack": 382, "unpen": [410, 653, 674, 685, 1002], "unpickl": [2, 394, 581, 849, 850, 1043, 1049, 1053], "unpleas": 1039, "unpract": 1005, "unprefix": 1043, "unprocess": [454, 593, 594, 596], "unprotect": 971, "unprun": [562, 563, 569, 570, 917, 918, 919, 920], "unquot": 233, "unrealist": 375, "unreason": [233, 416], "unreg": 348, "unregular": [882, 905, 1046], "unrel": [319, 368, 380, 385, 388, 420, 520], "unreli": [267, 413], "unrepresent": 924, "unrestrict": 498, "unrol": 239, "unrot": 131, "unsaf": 539, "unsampl": 998, "unscal": [313, 318, 1002, 1006, 1045, 1051], "unscaled_clf": 318, "unseen": [109, 146, 167, 204, 219, 223, 299, 347, 369, 372, 382, 393, 394, 412, 416, 855, 886, 898, 997, 1006, 1012, 1014, 1016, 1022, 1040, 1045, 1049], "unseen_featur": [420, 586], "unset": [368, 394, 1045], "unsetmetadatapassederror": [403, 1056], "unshad": 417, "unshifft": 682, "unshift": 913, "unsign": [86, 125, 375, 587, 970], "unsmooth": 418, "unsort": [1009, 1038, 1041, 1045], "unspecifi": [604, 605, 1003], "unstabl": [74, 99, 188, 408, 412, 414, 415, 694, 698, 952, 953, 1022, 1041, 1042, 1044, 1049, 1051, 1053, 1056], "unstack": [233, 276], "unstructur": [53, 71, 74, 75, 76, 81, 185, 212, 239, 310, 412, 445, 449, 467, 508, 535, 862, 1018, 1027, 1030, 1041], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 82, 104, 105, 116, 121, 140, 154, 242, 250, 299, 300, 342, 354, 355, 363, 372, 375, 382, 393, 394, 412, 415, 417, 418, 419, 420, 421, 436, 446, 449, 537, 539, 541, 542, 544, 547, 548, 554, 568, 571, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 635, 639, 640, 643, 644, 645, 646, 647, 682, 805, 808, 809, 811, 819, 828, 833, 836, 851, 852, 855, 857, 858, 859, 860, 865, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 890, 901, 902, 906, 913, 1003, 1006, 1012, 1019, 1028, 1032, 1037, 1040, 1050, 1054], "unsupport": [403, 406, 498, 1045, 1050], "unsur": 910, "untangl": 126, "untar": 47, "unterthin": [1040, 1041, 1042], "until": [88, 170, 223, 285, 324, 326, 385, 394, 395, 409, 412, 416, 421, 513, 514, 562, 563, 564, 565, 569, 570, 571, 598, 651, 652, 657, 658, 663, 664, 665, 666, 667, 668, 671, 672, 673, 676, 681, 682, 683, 699, 802, 803, 808, 809, 866, 867, 906, 909, 917, 918, 919, 920, 980, 995, 1002, 1003, 1011, 1019, 1022, 1040, 1044, 1045, 1051, 1056], "untransform": [347, 468, 471, 1017], "untru": 1006, "untrust": 406, "untun": [148, 330], "unus": [118, 127, 189, 212, 235, 237, 467, 584, 768, 776, 995, 1003, 1037, 1045, 1047, 1048, 1050, 1052], "unusu": [64, 409, 1012, 1016, 1045], "unveil": 1043, "unvendor": 1045, "unwant": [216, 354], "unweight": [184, 228, 467, 652, 658, 683, 712, 718, 734, 735, 743, 788, 789, 792, 793, 844, 845, 846, 847, 848, 996], "unwieldi": 880, "uoa": 902, "up": [2, 47, 50, 72, 79, 80, 81, 85, 88, 90, 95, 102, 111, 112, 119, 133, 140, 151, 184, 188, 189, 195, 200, 208, 216, 231, 232, 260, 267, 275, 278, 293, 306, 311, 314, 319, 326, 330, 333, 340, 347, 350, 354, 356, 369, 374, 375, 380, 384, 386, 387, 388, 389, 392, 394, 395, 410, 412, 417, 419, 420, 447, 451, 452, 453, 454, 456, 460, 463, 464, 465, 513, 514, 541, 554, 555, 562, 563, 564, 565, 566, 567, 569, 570, 571, 615, 632, 637, 638, 644, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 665, 666, 667, 668, 669, 686, 687, 688, 689, 697, 710, 774, 802, 803, 807, 808, 809, 811, 833, 883, 884, 887, 899, 917, 918, 919, 920, 923, 953, 956, 957, 995, 998, 1002, 1003, 1006, 1009, 1016, 1020, 1021, 1026, 1029, 1030, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "upadhyai": [1043, 1044, 1045, 1046], "upcast": [1047, 1051], "upcom": [177, 378], "updat": [47, 79, 95, 135, 141, 150, 247, 322, 356, 379, 380, 383, 388, 394, 406, 412, 417, 419, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 819, 823, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 980, 1002, 1009, 1010, 1011, 1020, 1029, 1030, 1038, 1044, 1045, 1046, 1048, 1050, 1052, 1053, 1055, 1056], "update_environments_and_lock_fil": 380, "update_from": 300, "update_func": 300, "update_h": 552, "update_layout": [141, 274], "update_legend_marker_s": 300, "update_terminal_region": 1046, "upgrad": [322, 323, 324, 325, 326, 327, 328, 329, 330, 398, 1026, 1037, 1042, 1045], "upload": [374, 378, 384, 392, 676], "upload_d": 374, "upon": [233, 240, 249, 306, 375, 380, 392, 394, 406, 566, 567, 632, 635, 676, 794, 802, 803, 849, 850, 995, 1002, 1022, 1051], "upper": [43, 46, 48, 61, 104, 107, 110, 111, 112, 123, 137, 138, 139, 147, 148, 149, 150, 156, 158, 166, 176, 178, 181, 188, 209, 215, 221, 222, 225, 229, 232, 233, 246, 250, 251, 272, 273, 274, 287, 298, 299, 309, 318, 335, 342, 345, 347, 349, 412, 418, 467, 593, 594, 596, 600, 618, 619, 620, 622, 624, 625, 627, 628, 630, 637, 638, 640, 642, 655, 659, 682, 740, 793, 882, 883, 911, 912, 913, 939, 1005, 1006, 1009, 1016, 1020, 1021, 1022, 1045], "upperbound": 739, "uppercas": [394, 1050], "uppercase_initi": 420, "upperlimit": 709, "upright": 375, "upstream": [367, 380, 384, 388, 392, 1016, 1046], "upward": [454, 460], "ur": 1048, "urbanowicz": 1006, "urbanowicz2015": 1006, "urcrnrlat": [50, 306], "urcrnrlon": [50, 306], "uri": 55, "url": [51, 52, 55, 170, 374, 377, 382, 384, 496], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1055, "urvang": [1045, 1047], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 116, 118, 119, 120, 123, 125, 126, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 211, 213, 214, 215, 216, 217, 219, 220, 221, 223, 224, 227, 230, 232, 233, 235, 236, 237, 238, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 353, 356, 358, 360, 361, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 389, 393, 394, 395, 397, 398, 399, 400, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 498, 499, 501, 503, 504, 508, 513, 514, 516, 519, 520, 521, 524, 525, 527, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 731, 732, 733, 734, 735, 737, 740, 741, 742, 743, 744, 746, 747, 748, 750, 751, 753, 755, 756, 758, 760, 761, 762, 763, 764, 768, 769, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 931, 934, 935, 936, 938, 941, 943, 948, 950, 952, 953, 957, 958, 961, 962, 963, 965, 968, 972, 974, 976, 977, 979, 981, 982, 983, 989, 994, 995, 996, 998, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "usa": [272, 375, 906, 996, 1003, 1018, 1019], "usabl": [151, 374, 380, 382, 394, 406, 420, 805, 1037, 1044, 1051, 1052], "usag": [41, 77, 86, 103, 106, 115, 125, 133, 167, 188, 189, 243, 247, 249, 266, 267, 302, 304, 310, 339, 356, 367, 375, 379, 380, 383, 387, 388, 390, 394, 395, 398, 406, 412, 416, 417, 422, 423, 448, 450, 454, 465, 468, 475, 493, 499, 501, 528, 539, 540, 546, 554, 566, 567, 596, 614, 645, 653, 663, 664, 665, 671, 672, 673, 674, 681, 682, 683, 684, 685, 695, 783, 786, 797, 798, 865, 866, 868, 909, 917, 918, 919, 920, 928, 953, 995, 996, 998, 1005, 1006, 1007, 1009, 1021, 1028, 1029, 1032, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "usd": 252, "use_encoded_valu": [145, 156, 190, 252, 319, 883, 1016, 1049], "use_group": 268, "use_idf": [417, 420, 595, 596], "usecas": [323, 326, 328, 412, 567], "useless": [54, 144, 276, 386, 421, 520, 533, 663, 717, 1002, 1016, 1046], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 88, 101, 121, 141, 149, 181, 185, 188, 191, 202, 235, 249, 263, 270, 280, 282, 290, 293, 299, 300, 303, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 363, 367, 368, 374, 378, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 398, 400, 403, 406, 410, 412, 413, 414, 416, 417, 419, 420, 421, 423, 424, 425, 426, 429, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 923, 949, 953, 995, 996, 1002, 1003, 1005, 1006, 1007, 1009, 1016, 1020, 1025, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "user_guid": 43, "user_r": 413, "userguid": 1044, "usernam": 398, "userscript": 388, "userwarn": [79, 95, 243, 385, 717, 1016, 1043, 1045, 1050, 1055], "ushtanit": [1049, 1050], "using_kernels_tut": 163, "usp": 44, "usr": 378, "usual": [43, 52, 75, 109, 110, 112, 147, 148, 150, 156, 187, 189, 201, 215, 216, 266, 267, 270, 273, 282, 283, 287, 314, 325, 343, 363, 367, 368, 378, 380, 382, 384, 388, 392, 393, 394, 398, 403, 409, 412, 413, 416, 417, 419, 420, 421, 454, 460, 543, 545, 547, 552, 564, 565, 612, 613, 635, 645, 663, 664, 671, 672, 673, 681, 682, 683, 697, 731, 763, 811, 833, 837, 909, 926, 953, 995, 996, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1016, 1020, 1021, 1022, 1052], "utc": 1006, "utf": [354, 356, 420, 491, 508, 587, 593, 594, 596], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 88, 89, 94, 133, 135, 149, 156, 191, 215, 223, 231, 237, 245, 249, 251, 261, 279, 281, 293, 315, 322, 335, 343, 347, 354, 368, 374, 375, 380, 381, 382, 383, 392, 393, 394, 408, 411, 412, 413, 416, 417, 420, 441, 447, 448, 451, 453, 457, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 538, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 586, 587, 593, 595, 596, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 804, 805, 806, 807, 812, 814, 823, 827, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 856, 859, 860, 866, 867, 869, 872, 874, 875, 876, 881, 888, 889, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 1001, 1004, 1006, 1007, 1016, 1017, 1025, 1030, 1032, 1037, 1038, 1040, 1041, 1043, 1044], "utilis": 1043, "utkarsh": [1043, 1044, 1045, 1046], "utl": 421, "utstat": 649, "uttam": 1050, "uv": [121, 417], "uw": [170, 377, 1049], "uwha": [1050, 1051], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 88, 91, 102, 107, 108, 111, 113, 114, 115, 121, 123, 124, 128, 139, 141, 142, 143, 148, 150, 166, 172, 185, 186, 191, 194, 204, 212, 213, 214, 215, 216, 219, 220, 224, 230, 239, 246, 259, 260, 263, 264, 265, 269, 290, 304, 320, 322, 340, 351, 355, 363, 368, 372, 377, 380, 386, 388, 394, 408, 409, 410, 414, 415, 417, 420, 435, 445, 449, 456, 466, 467, 468, 469, 474, 477, 478, 479, 480, 481, 486, 487, 488, 501, 517, 529, 535, 536, 542, 546, 550, 551, 555, 557, 559, 561, 563, 565, 567, 569, 570, 573, 575, 586, 594, 598, 599, 605, 611, 616, 635, 636, 639, 640, 644, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 681, 683, 684, 693, 700, 704, 706, 709, 722, 741, 742, 744, 759, 760, 762, 793, 800, 805, 810, 817, 819, 831, 835, 837, 838, 839, 842, 843, 844, 852, 860, 862, 865, 867, 869, 870, 873, 876, 882, 883, 884, 889, 890, 893, 903, 909, 910, 911, 912, 914, 915, 918, 920, 924, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1014, 1016, 1020, 1021, 1023, 1027, 1032, 1037, 1040, 1041, 1042, 1045, 1047, 1048, 1051, 1052, 1055], "v0": [475, 476, 482, 517, 593, 594, 596, 805, 819, 868, 871, 1038, 1045, 1046, 1047], "v1": [267, 327, 374, 398, 802, 803, 1049, 1052, 1053, 1054, 1055], "v10": 267, "v11": 267, "v12": 267, "v13": 267, "v14": 267, "v15": 267, "v16": 267, "v17": 267, "v18": 267, "v19": 267, "v2": [267, 375, 502, 669, 690, 691, 1002], "v20": 267, "v21": 267, "v22": 267, "v23": 267, "v24": 267, "v25": 267, "v26": 267, "v27": 267, "v28": 267, "v3": 267, "v4": 267, "v5": [267, 1045], "v6": 267, "v7": 267, "v8": 267, "v9": 267, "v_": [409, 420], "v_1": 409, "v_2": 409, "v_i": 1011, "v_ih_j": 1011, "v_init": 548, "v_j": [412, 760, 1011], "v_k": [415, 417, 536, 542, 550, 551], "v_measur": [741, 800], "v_measure_scor": [2, 57, 72, 73, 82, 91, 328, 355, 412, 722, 741, 742, 762, 1006, 1046], "v_new": 865, "va": [47, 146, 168, 284, 301, 303, 349], "vac": 290, "vacaliuc": [1045, 1046], "vacat": 375, "vachan": 1048, "vadim": [1045, 1049, 1050], "vaerenbergh": [1052, 1053], "vaggi": [1039, 1040], "vaillant": 1049, "val": [105, 227, 273, 955], "val_errors_with": 146, "val_errors_without": 146, "val_pr": 146, "val_scor": 147, "vale": 1047, "valencia": [1051, 1053], "valentin": [1040, 1042, 1052, 1053], "valero": 51, "valgrind": 383, "valid": [2, 47, 52, 53, 63, 64, 87, 88, 89, 90, 103, 104, 106, 107, 109, 113, 128, 133, 139, 141, 144, 145, 146, 147, 148, 151, 160, 164, 167, 168, 170, 180, 185, 188, 190, 194, 200, 201, 202, 203, 209, 215, 217, 223, 233, 249, 251, 255, 260, 263, 265, 270, 273, 274, 275, 277, 279, 280, 281, 282, 285, 286, 287, 288, 290, 297, 311, 314, 319, 322, 324, 329, 335, 343, 350, 358, 368, 375, 380, 383, 392, 393, 394, 406, 407, 410, 412, 413, 414, 417, 418, 419, 420, 421, 426, 428, 441, 446, 447, 449, 450, 451, 453, 454, 461, 467, 468, 472, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 498, 506, 507, 509, 520, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 580, 582, 587, 588, 594, 598, 599, 602, 607, 637, 639, 643, 644, 645, 646, 647, 648, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 697, 704, 706, 707, 711, 718, 733, 767, 770, 779, 783, 784, 785, 790, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 843, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 872, 873, 875, 881, 889, 901, 902, 904, 905, 907, 909, 911, 914, 916, 917, 918, 919, 920, 926, 928, 935, 936, 937, 938, 939, 947, 960, 962, 965, 989, 990, 991, 992, 993, 994, 996, 1005, 1006, 1007, 1009, 1010, 1014, 1016, 1018, 1020, 1021, 1022, 1026, 1027, 1030, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "valid_metr": [849, 850, 1009, 1053], "valid_scor": 1001, "validate_data": [2, 1056], "validate_metadata": [249, 962], "validate_separ": 994, "validation_curv": [2, 328, 350, 403, 828, 1001, 1044, 1045, 1046, 1049, 1053, 1056], "validation_fract": [146, 151, 223, 325, 419, 564, 565, 566, 567, 671, 672, 673, 681, 683, 866, 867, 1020, 1045, 1051], "validation_score_": [151, 566, 567], "validation_scores_": [866, 867, 1052], "validationcurvedisplai": [2, 286, 1001, 1053], "validationerror": 1051, "vallei": 319, "vall\u00e9": 1044, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 80, 86, 88, 93, 94, 95, 99, 103, 105, 107, 109, 111, 113, 121, 124, 131, 133, 135, 137, 139, 140, 141, 142, 143, 145, 148, 149, 152, 153, 155, 156, 165, 166, 168, 169, 172, 175, 176, 178, 180, 187, 188, 189, 190, 191, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 208, 213, 215, 216, 217, 219, 221, 230, 233, 234, 237, 238, 242, 243, 244, 245, 246, 247, 248, 252, 255, 256, 258, 264, 266, 267, 269, 271, 273, 274, 276, 278, 279, 280, 282, 284, 285, 286, 287, 293, 296, 305, 306, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 324, 330, 335, 343, 347, 348, 350, 354, 355, 356, 358, 363, 367, 368, 369, 372, 373, 374, 375, 377, 381, 382, 383, 385, 386, 387, 389, 392, 393, 394, 397, 398, 403, 409, 410, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 426, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 494, 495, 498, 501, 502, 503, 506, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 774, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 817, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 930, 932, 933, 934, 935, 936, 939, 940, 941, 943, 945, 953, 955, 962, 965, 966, 967, 968, 969, 981, 982, 983, 995, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020, 1021, 1027, 1028, 1030, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "valuabl": [146, 267, 380, 996, 1030], "valuat": 419, "value_count": [43, 52, 189, 267, 287, 290], "value_kei": [392, 924], "value_typ": [422, 622], "valueerror": [2, 249, 250, 382, 386, 403, 472, 582, 608, 622, 640, 676, 719, 841, 859, 868, 874, 888, 934, 936, 938, 939, 990, 991, 992, 1016, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "values_format": [702, 1047], "vamsi": 1052, "van": [0, 374, 401, 414, 473, 478, 539, 632, 697, 701, 996, 1003, 1006, 1012, 1030, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053], "vandana": 1048, "vander": 196, "vandermond": [216, 1016], "vanderpla": [0, 402, 1024, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "vang": 1050, "vanilla": [215, 408, 411, 412, 451, 453, 464, 634], "vanilla_model": 267, "vanilla_model_coef": 287, "vanrel": 1043, "vanschoren": [374, 1049], "vapnik": [598, 599], "var": [115, 116, 138, 170, 196, 273, 377, 381, 421, 646, 650, 911, 912, 913, 914, 915, 1006, 1045], "var_": [539, 847, 889, 1050], "var_smooth": [847, 1045], "varanasi": [1037, 1040], "vardhan": 1041, "varepsilon": [412, 1020, 1021], "vari": [46, 52, 64, 67, 70, 79, 80, 88, 95, 98, 107, 119, 141, 142, 144, 154, 163, 169, 174, 176, 185, 188, 189, 203, 204, 206, 209, 213, 222, 240, 247, 252, 263, 269, 273, 276, 287, 307, 313, 315, 316, 318, 328, 331, 337, 343, 346, 348, 363, 367, 369, 375, 394, 406, 445, 449, 450, 505, 513, 519, 520, 527, 564, 565, 569, 570, 651, 652, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 686, 689, 708, 768, 824, 828, 833, 835, 836, 866, 870, 874, 889, 906, 914, 917, 918, 979, 998, 1001, 1002, 1006, 1009, 1010, 1019, 1022, 1027, 1030, 1044, 1045, 1053], "variabl": [2, 43, 48, 50, 51, 52, 72, 102, 138, 142, 145, 148, 149, 151, 165, 170, 179, 180, 183, 184, 189, 190, 193, 200, 204, 215, 219, 220, 233, 237, 249, 252, 264, 267, 273, 276, 283, 290, 292, 318, 319, 320, 363, 367, 369, 375, 377, 378, 380, 382, 384, 385, 388, 394, 403, 408, 412, 413, 414, 415, 417, 419, 420, 421, 454, 486, 487, 488, 491, 504, 506, 513, 520, 537, 539, 541, 546, 549, 558, 564, 565, 609, 611, 612, 613, 645, 655, 656, 659, 660, 666, 687, 688, 700, 714, 752, 806, 807, 810, 812, 813, 814, 815, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 837, 841, 842, 872, 883, 886, 890, 898, 910, 995, 996, 998, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1016, 1020, 1022, 1025, 1026, 1037, 1042, 1045, 1047, 1050, 1052, 1056], "varianc": [2, 37, 43, 44, 52, 64, 79, 88, 90, 95, 105, 109, 111, 115, 116, 118, 121, 122, 123, 126, 128, 129, 131, 134, 150, 151, 179, 185, 188, 194, 196, 198, 200, 204, 205, 211, 215, 217, 220, 233, 263, 267, 270, 273, 276, 282, 283, 287, 302, 308, 313, 318, 330, 355, 363, 372, 376, 389, 409, 410, 412, 414, 415, 416, 417, 418, 419, 424, 445, 449, 453, 467, 526, 529, 537, 538, 539, 546, 549, 554, 555, 560, 561, 563, 564, 565, 570, 608, 612, 613, 616, 630, 648, 649, 650, 657, 661, 662, 665, 667, 677, 678, 679, 680, 681, 692, 715, 733, 790, 802, 803, 847, 858, 873, 879, 885, 887, 889, 895, 897, 899, 900, 918, 920, 980, 981, 982, 986, 1000, 1001, 1002, 1004, 1009, 1010, 1011, 1014, 1018, 1020, 1021, 1022, 1023, 1027, 1028, 1032, 1037, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "variance_weight": [733, 790, 1006], "variances_": 608, "variancethreshold": [2, 421, 874, 996, 1040, 1047, 1050, 1053], "variant": [2, 64, 78, 121, 182, 184, 185, 273, 325, 326, 355, 356, 386, 412, 415, 417, 420, 422, 453, 464, 494, 498, 499, 517, 520, 548, 564, 565, 570, 620, 624, 627, 628, 632, 635, 643, 644, 646, 650, 677, 709, 806, 810, 812, 813, 814, 823, 831, 852, 870, 906, 996, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1020, 1026, 1027, 1037, 1045], "variat": [2, 43, 46, 51, 72, 98, 119, 153, 170, 177, 178, 184, 185, 188, 220, 257, 259, 264, 270, 284, 292, 303, 323, 343, 377, 406, 416, 417, 447, 451, 463, 541, 648, 677, 679, 680, 802, 803, 823, 824, 826, 995, 1006, 1016, 1019, 1022, 1025, 1027, 1031, 1032, 1040, 1042, 1043], "variegatu": [50, 306, 375, 503], "variet": 319, "varieti": [25, 62, 183, 260, 319, 343, 388, 412, 414, 420, 648, 1009, 1022, 1025, 1030, 1039, 1052, 1053], "varimax": [131, 417, 537, 1049], "variou": [4, 41, 43, 51, 71, 72, 74, 88, 89, 91, 93, 94, 95, 112, 115, 124, 185, 188, 194, 223, 225, 234, 235, 236, 237, 246, 290, 293, 309, 317, 323, 332, 333, 354, 356, 362, 363, 367, 374, 375, 376, 377, 380, 382, 385, 393, 395, 410, 412, 414, 441, 445, 476, 507, 519, 520, 530, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 599, 607, 652, 656, 658, 660, 663, 666, 668, 670, 671, 673, 678, 680, 681, 696, 697, 704, 805, 808, 809, 811, 819, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 869, 909, 910, 995, 996, 1003, 1006, 1009, 1013, 1016, 1020, 1022, 1025, 1027, 1029, 1030, 1037, 1040, 1041, 1054], "varma": [1046, 1056], "varoquaux": [0, 395, 401, 1024, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "varun": [1043, 1044, 1045, 1051, 1052], "varunchaduvula": 1055, "vasani": 1048, "vasilei": [1030, 1044], "vasileva": 1051, "vasiloudi": 1042, "vassard": 1051, "vassilvitskii": [412, 451, 464], "vast": [267, 380], "vastli": 318, "vathsala": [1044, 1045, 1046, 1047], "vatsan": 1043, "vavrova": 1044, "vazelh": [1045, 1046, 1047], "vazirgianni": 412, "vb": 541, "vbgmm": [1037, 1041, 1043], "vc": 378, "vcvarsal": 378, "vd": 1055, "ve": [355, 380, 420, 1030, 1044], "veal": 57, "veb2009": 412, "veb2010": 412, "vec": [121, 420, 543, 545, 552], "veclib": [367, 392], "vect": [47, 102, 274, 336, 420], "vect__": 274, "vect__max_df": 274, "vect__min_df": 274, "vect__ngram_rang": 274, "vect__norm": 274, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 104, 121, 123, 124, 166, 172, 180, 197, 219, 220, 227, 231, 247, 248, 255, 271, 273, 274, 278, 299, 311, 313, 330, 337, 339, 340, 343, 344, 345, 346, 347, 348, 350, 352, 355, 367, 369, 375, 385, 386, 389, 392, 394, 409, 410, 412, 414, 415, 416, 417, 419, 422, 423, 424, 441, 447, 448, 449, 451, 453, 454, 455, 457, 468, 469, 471, 472, 486, 487, 488, 489, 491, 493, 502, 514, 517, 526, 529, 536, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 557, 572, 573, 574, 575, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 627, 628, 630, 636, 643, 645, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 696, 697, 698, 700, 704, 724, 740, 768, 773, 774, 775, 776, 778, 779, 780, 782, 783, 804, 805, 808, 809, 819, 827, 833, 836, 837, 838, 844, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 859, 860, 861, 866, 867, 874, 876, 881, 889, 893, 896, 907, 909, 910, 911, 912, 913, 914, 915, 916, 935, 950, 952, 953, 968, 974, 995, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1016, 1020, 1022, 1027, 1028, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1048, 1050, 1055], "vectori": [394, 1047], "vectorizer2": 593, "vectorizer_param": 336, "vectorizermixin": 1047, "vectorizing_tim": 47, "vectors_test": 375, "ved": 1054, "vedaldi": [643, 998], "veenhui": [1052, 1053, 1054, 1055, 1056], "veerkhar": 1052, "veerlosar": 1047, "veghit": 1053, "vehag": [215, 233], "vehbrand": [215, 233], "vehga": [215, 233], "vehicl": [215, 233], "vehpow": [215, 233], "vel": 377, "velkov": 1039, "veloc": 380, "vembu": 410, "vempati": 998, "vendor": [249, 1042, 1045, 1046], "venezuela": [50, 306, 375, 503], "venkat": [0, 402], "venkatachalam": [1047, 1048, 1049, 1050, 1051, 1054, 1055], "venkatesh": 1047, "venna": 701, "venthur": 1045, "venu": [0, 394], "venv": [378, 398], "vera": [1051, 1052], "verbos": [49, 77, 83, 87, 97, 102, 104, 106, 156, 274, 310, 311, 313, 325, 336, 354, 378, 384, 394, 444, 447, 451, 453, 456, 458, 463, 466, 468, 471, 475, 476, 482, 536, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 598, 599, 632, 637, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 697, 699, 770, 783, 802, 803, 805, 808, 809, 811, 819, 828, 830, 831, 832, 833, 834, 836, 838, 840, 843, 858, 865, 866, 867, 868, 869, 870, 871, 906, 909, 910, 911, 912, 913, 914, 915, 971, 1026, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1055, 1056], "verbose_feature_names_out": [145, 188, 189, 190, 256, 319, 325, 326, 327, 329, 413, 468, 471, 868, 1050, 1054, 1055, 1056], "verbose_interv": [802, 803], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 83, 85, 93, 95, 111, 112, 113, 115, 119, 124, 148, 154, 161, 177, 183, 188, 189, 190, 204, 215, 216, 217, 220, 223, 233, 239, 242, 248, 249, 252, 258, 267, 275, 276, 279, 280, 282, 283, 293, 310, 313, 325, 332, 335, 343, 347, 352, 354, 356, 363, 367, 375, 379, 380, 385, 386, 388, 392, 393, 394, 406, 410, 411, 412, 414, 416, 417, 418, 419, 420, 421, 422, 446, 451, 456, 466, 475, 476, 482, 505, 509, 515, 546, 562, 563, 566, 567, 569, 570, 572, 573, 594, 595, 627, 655, 656, 659, 660, 661, 669, 687, 688, 690, 696, 697, 700, 710, 748, 751, 797, 802, 805, 807, 813, 815, 819, 822, 825, 849, 850, 874, 878, 879, 880, 889, 901, 902, 911, 914, 917, 918, 919, 920, 928, 953, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1037, 1042, 1043, 1045, 1048, 1050, 1052, 1053, 1054], "verif": [375, 1006, 1030], "verifi": [86, 93, 133, 151, 188, 215, 380, 385, 406, 408, 496, 989, 1009], "verlag": 701, "vermeil": 1045, "veronda": 1038, "verrier": 1052, "versa": [188, 270, 354, 412, 422, 446, 612, 613, 838, 1041], "versatil": [422, 1021, 1030], "versicolor": [118, 282, 283, 509], "versicolour": [118, 127, 129, 377], "version": [2, 7, 43, 66, 80, 86, 88, 103, 121, 126, 135, 151, 174, 184, 189, 190, 193, 200, 213, 216, 223, 229, 231, 249, 252, 256, 292, 310, 318, 322, 323, 324, 325, 327, 328, 329, 330, 343, 354, 367, 375, 379, 381, 382, 383, 384, 386, 388, 389, 392, 394, 395, 398, 399, 403, 405, 406, 412, 413, 415, 417, 419, 420, 422, 423, 424, 430, 432, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 513, 514, 515, 517, 519, 527, 528, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 709, 712, 713, 714, 716, 718, 719, 721, 723, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 739, 744, 745, 746, 747, 748, 751, 758, 759, 762, 763, 764, 766, 771, 772, 774, 783, 787, 788, 789, 790, 792, 794, 795, 796, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 818, 819, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 895, 897, 898, 899, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 933, 935, 936, 947, 948, 952, 953, 961, 962, 963, 964, 965, 968, 971, 972, 975, 980, 986, 991, 992, 994, 995, 998, 1000, 1003, 1006, 1008, 1010, 1012, 1014, 1019, 1020, 1022, 1025, 1026, 1029, 1033, 1035], "versionchang": 380, "versionwarn": 384, "versu": [67, 123, 134, 154, 156, 163, 174, 185, 188, 194, 224, 230, 242, 247, 248, 250, 261, 265, 268, 290, 299, 301, 315, 331, 336, 340, 342, 343, 347, 412, 416, 419, 422, 509, 539, 561, 615, 636, 644, 663, 664, 671, 673, 679, 680, 681, 682, 788, 805, 810, 831, 841, 870, 905, 906, 913, 914, 918, 995, 1002, 1006, 1007, 1012, 1019, 1020, 1021, 1027, 1045], "vert": [149, 190, 191, 322, 1020], "vertex": [55, 63, 412, 457, 1050], "vertic": [45, 55, 93, 147, 191, 204, 246, 247, 277, 292, 313, 316, 348, 349, 394, 409, 412, 417, 520, 702, 786], "verticalalign": [51, 63, 74, 75], "vese": 1049, "vesteghem": 1047, "veto": 395, "vettigli": 1046, "vga": 57, "vh": 953, "vi": [45, 47, 375, 704, 1045, 1048], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 372, 377, 378, 381, 382, 384, 388, 392, 393, 394, 395, 398, 403, 409, 410, 412, 413, 415, 416, 417, 421, 422, 441, 506, 540, 544, 546, 548, 551, 564, 565, 572, 573, 602, 616, 621, 626, 629, 632, 643, 644, 645, 646, 661, 671, 673, 676, 678, 681, 692, 694, 697, 698, 714, 805, 819, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 847, 855, 866, 868, 869, 870, 889, 890, 995, 1000, 1002, 1003, 1005, 1006, 1007, 1013, 1014, 1020, 1021, 1026, 1027, 1030, 1032, 1037, 1041, 1042, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "viacheslav": 1043, "viard": 1048, "vibrantabhi19": 1044, "vicdemand": 151, "vice": [188, 270, 354, 412, 422, 446, 612, 613, 838, 1041], "vicent": [1050, 1051, 1052], "vicpric": 151, "victoireloui": 1051, "victor": [412, 456, 466, 1044, 1047], "victoria": 151, "video": [327, 374, 383, 508, 1007, 1030, 1032], "vie": 1043, "viega": 1006, "view": [43, 77, 80, 109, 123, 151, 189, 212, 254, 367, 369, 380, 412, 420, 541, 650, 662, 849, 850, 924, 1002, 1003], "view_init": [189, 235, 237, 239], "viewabl": 380, "vighnesh": [1042, 1043, 1045], "vignesh": 1053, "vigni": 1054, "vijai": [1030, 1040], "vijalapuram": 1045, "vijeth": [1053, 1054], "vijitbenjaronk": [1044, 1045], "vika": [1049, 1051], "vikram": [1043, 1052, 1053], "vikrant": 1051, "vila": [1047, 1049], "vilhelm": [1044, 1045], "villalba": [1042, 1045, 1049], "villanova": [1049, 1050], "villaz\u00f3n": 1049, "villu": 1043, "vil\u00e9m": 1050, "vinayak": [1041, 1042, 1043, 1045, 1046, 1052, 1053], "vincent": [0, 402, 1030, 1037, 1039, 1041, 1042, 1044, 1047, 1052, 1053, 1054], "vineet": 1055, "vineyard": 319, "vinh": [412, 709], "vinh10a": 412, "viniciu": [1049, 1050], "vinit": 1045, "vink": [1048, 1050], "vinod": 1045, "vin\u00edciu": 1045, "viola": [375, 1045], "violat": [62, 343, 388, 392, 394, 640, 939, 1013, 1020, 1022], "violet": [128, 1053], "violeta": 1049, "vipin": 412, "viraj": 1045, "virchan": 1055, "virgil": [0, 402, 1037, 1038, 1040, 1056], "virgilefritsch": 1037, "virginica": [118, 127, 129, 282, 283, 377, 509, 1006], "viridi": [66, 73, 293, 702], "viridis_r": 274, "virshup": 1054, "virtanen": 1042, "virtual": [381, 398, 416, 1030], "virtualenv": [378, 380], "visag": 1030, "visconti": 1041, "vishaal": [1045, 1046], "vishal": 1052, "vishwakarma": 1051, "visibl": [52, 188, 189, 217, 352, 374, 380, 412, 865, 1011, 1042, 1052], "vision": [539, 763, 764, 998, 1002, 1004, 1022, 1025, 1030, 1038], "visit": [362, 380, 1013, 1029], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 80, 82, 85, 90, 93, 94, 111, 115, 120, 123, 125, 128, 130, 140, 141, 149, 151, 152, 154, 158, 159, 168, 180, 184, 185, 189, 191, 200, 206, 215, 217, 233, 235, 236, 240, 241, 244, 247, 253, 254, 263, 265, 266, 269, 270, 274, 275, 278, 280, 282, 283, 298, 302, 303, 305, 307, 309, 313, 317, 318, 322, 324, 333, 347, 372, 376, 378, 386, 387, 409, 414, 416, 417, 418, 419, 442, 445, 449, 450, 458, 475, 476, 501, 507, 509, 512, 515, 519, 527, 537, 539, 546, 569, 571, 636, 638, 650, 663, 694, 697, 702, 703, 705, 706, 707, 723, 732, 787, 794, 806, 807, 810, 811, 822, 823, 824, 825, 826, 828, 835, 866, 870, 874, 878, 879, 881, 885, 886, 887, 889, 909, 911, 912, 914, 915, 923, 949, 1001, 1003, 1004, 1009, 1010, 1012, 1013, 1016, 1022, 1025, 1027, 1032, 1040, 1047, 1048, 1049, 1051], "visualis": [121, 124, 131, 250, 549, 806, 807, 810, 822, 823, 824, 825, 826, 1009, 1026], "visualize_group": 268, "vitor": 1052, "vivek": [1044, 1045, 1046, 1054], "viz": [283, 387], "vjacheslav": 1041, "vlad": [0, 121, 401, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046], "vladimir": [540, 953, 1002, 1047, 1051, 1054], "vlahava": [725, 745, 1006], "vlajic": [1048, 1049, 1055], "vlasio": [1030, 1044], "vlasovet": 1050, "vlb": 57, "vliet": 1049, "vline": [109, 123, 202, 204, 216, 273, 286, 314], "vlines_": 637, "vlo": 51, "vmax": [66, 84, 113, 121, 124, 131, 175, 178, 195, 200, 206, 231, 247, 262, 268, 310, 343], "vmin": [66, 75, 113, 121, 124, 131, 175, 178, 195, 200, 206, 231, 247, 262, 268, 310, 343], "vnherdeiro": 1047, "vo": [1043, 1051], "voc": 1006, "vocabulari": [119, 230, 354, 355, 392, 420, 593, 594, 595, 596, 1008, 1037, 1039, 1042, 1045, 1048, 1050], "vocabulary_": [356, 420, 586, 593, 596, 1037], "void": 381, "vol": [64, 180, 200, 267, 279, 377, 412, 478, 564, 565, 633, 640, 650, 669, 690, 691, 802, 834, 846, 996, 1008, 1009], "volgen": [409, 724], "voltag": 57, "volum": [0, 99, 110, 170, 177, 375, 377, 412, 414, 477, 539, 774, 1002, 1021, 1030], "volume11": 412, "volume2": 681, "volume7": [671, 672], "volunt": 388, "voluntari": 354, "von": [412, 456, 466, 696, 1044, 1045], "voronoi": [80, 99, 412], "voss": 1045, "vote": [2, 14, 134, 136, 141, 156, 157, 158, 185, 292, 347, 394, 395, 506, 560, 561, 562, 565, 569, 570, 574, 575, 662, 837, 851, 852, 857, 859, 1007, 1009, 1027, 1028, 1032, 1037, 1040, 1042, 1047], "votingclassifi": [2, 63, 64, 134, 185, 224, 403, 419, 509, 569, 575, 636, 663, 847, 851, 914, 917, 995, 996, 1027, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1054, 1055], "votingregressor": [2, 159, 403, 419, 574, 996, 1046, 1047, 1048, 1051, 1054, 1055], "votingregressorifittedvotingregressor": 159, "voxel": [80, 99, 590], "vp": 1030, "vq": 91, "vqean3": [1045, 1046], "vredevoogd": [1039, 1040], "vrigazov": 1052, "vrishank": [1044, 1045], "vs_buildtool": 378, "vstack": [51, 63, 90, 98, 175, 176, 198, 258, 262, 293, 306, 348, 636, 1007, 1045], "vstolbunov": 1042, "vt": 555, "vufg": 1045, "vukolov": [1045, 1046], "vulner": 406, "vuw": 535, "vvz2010": 998, "vx": 72, "vya": [1045, 1046, 1047], "vyom": [1052, 1053], "vz2010": 998, "v\u00e1zquez": 1040, "v\u0103n": 1052, "w": [2, 45, 51, 53, 66, 70, 75, 77, 91, 97, 127, 130, 170, 183, 214, 219, 232, 249, 250, 258, 259, 260, 263, 264, 284, 311, 325, 326, 347, 348, 350, 356, 363, 368, 375, 377, 386, 406, 412, 413, 417, 419, 420, 424, 429, 435, 441, 469, 473, 476, 478, 486, 487, 488, 528, 543, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 593, 594, 596, 599, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 698, 704, 730, 731, 761, 804, 805, 819, 827, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 859, 860, 866, 867, 902, 904, 905, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 950, 955, 1002, 1006, 1010, 1011, 1016, 1018, 1020, 1021, 1047, 1051, 1052, 1053, 1054], "w0": 119, "w1": [119, 419, 662], "w1992": 419, "w2": 419, "w3": 419, "w_": [417, 651, 652, 657, 658, 665, 666, 667, 668, 686, 689, 1002, 1006, 1008, 1011], "w_0": 1002, "w_1": [419, 1002, 1010], "w_1x_1": 1010, "w_2": [419, 1002, 1010], "w_2x_2": 1010, "w_3": 1002, "w_4": 1002, "w_5": 1002, "w_i": [419, 997, 1006], "w_ij": 665, "w_init": [424, 538], "w_intercept": [909, 910], "w_j": [651, 657, 1006, 1020], "w_k": [412, 419, 1002], "w_l": 1002, "w_mx_m": 1010, "w_n": 419, "w_new": 417, "w_p": 1002, "w_pad": [121, 144, 359], "w_x_1": [909, 910], "w_x_n": [909, 910], "wa": [0, 43, 47, 53, 64, 75, 102, 103, 111, 116, 119, 153, 156, 170, 181, 188, 193, 219, 239, 249, 252, 264, 266, 267, 269, 271, 273, 279, 280, 287, 290, 310, 318, 322, 323, 327, 334, 335, 354, 356, 362, 363, 367, 375, 377, 378, 380, 384, 385, 394, 398, 403, 406, 408, 409, 411, 412, 415, 416, 420, 424, 436, 444, 445, 446, 447, 449, 450, 451, 453, 454, 458, 461, 464, 468, 472, 473, 478, 486, 487, 488, 489, 520, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 558, 559, 560, 561, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 663, 664, 669, 677, 679, 684, 690, 691, 693, 694, 697, 718, 734, 735, 783, 788, 789, 792, 802, 803, 805, 808, 809, 819, 832, 834, 846, 853, 856, 858, 861, 865, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 898, 901, 902, 906, 907, 933, 935, 936, 947, 948, 972, 993, 994, 995, 996, 1005, 1006, 1009, 1012, 1016, 1019, 1022, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "wadawson": 1041, "wadsworth": [917, 918, 1022], "waelbenamara": 1048, "wagner": 1051, "wai": [0, 2, 37, 43, 55, 64, 83, 93, 103, 106, 140, 147, 152, 154, 170, 179, 188, 190, 191, 216, 219, 220, 230, 233, 244, 245, 248, 249, 252, 253, 268, 273, 280, 282, 313, 314, 325, 327, 328, 363, 367, 368, 369, 374, 376, 378, 379, 382, 383, 384, 388, 389, 394, 395, 398, 403, 406, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 427, 447, 448, 455, 456, 457, 463, 464, 466, 467, 473, 501, 560, 561, 568, 577, 594, 604, 605, 616, 637, 671, 672, 681, 682, 683, 704, 709, 711, 722, 741, 742, 759, 760, 762, 768, 779, 783, 793, 800, 830, 838, 855, 876, 882, 887, 893, 919, 920, 976, 979, 995, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1022, 1025, 1026, 1029, 1030, 1037, 1039, 1045, 1050, 1051, 1055, 1056], "waijean": 1050, "wainwright": [726, 728, 729], "waist": 377, "wait": [55, 378, 380, 384, 394, 671, 672, 673, 681, 683, 1049], "waithera": 1047, "wal": 51, "waldo": 327, "wale": 151, "walk": [412, 418, 1040], "walker": 1041, "wall": 412, "wallach": [1041, 1042], "walli": 1045, "wallygauz": 1045, "walsh": [1049, 1051], "walt": [1040, 1041, 1045], "walter": 1043, "walton": 327, "wan": 1045, "wang": [417, 541, 684, 694, 698, 731, 761, 1002, 1003, 1006, 1040, 1042, 1043, 1044, 1045, 1049, 1052, 1053, 1055], "wangz10": 1042, "want": [0, 30, 43, 51, 58, 61, 62, 63, 88, 97, 103, 170, 184, 188, 215, 216, 217, 249, 252, 264, 267, 273, 288, 290, 296, 310, 337, 340, 354, 363, 367, 368, 369, 378, 379, 380, 381, 382, 384, 385, 386, 392, 393, 394, 395, 398, 403, 406, 410, 411, 412, 413, 414, 419, 420, 421, 505, 508, 509, 515, 540, 554, 659, 660, 661, 663, 664, 671, 673, 679, 680, 681, 769, 804, 827, 855, 858, 874, 881, 902, 909, 995, 1002, 1005, 1006, 1007, 1010, 1012, 1016, 1017, 1021, 1025, 1026, 1037, 1051, 1055], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 80, 85, 86, 87, 89, 95, 185, 191, 212, 239, 402, 420, 445, 449, 467, 535, 862, 1027, 1037, 1040, 1042], "ward__n_clust": 87, "ward_tre": [2, 87, 445, 449, 1037, 1041], "wardagglom": 1042, "wardagglomer": 1040, "wardclust": 1040, "wareh": 739, "warm": [383, 394, 536, 542, 548, 550, 551, 615, 658, 664, 671, 672, 673, 681, 682, 683, 1002, 1026, 1047, 1049, 1051], "warm_start": [139, 176, 208, 325, 382, 386, 394, 419, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 615, 651, 653, 654, 657, 663, 665, 667, 671, 672, 673, 674, 681, 682, 683, 685, 802, 803, 858, 866, 867, 1012, 1028, 1032, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1051, 1053], "warn": [2, 15, 79, 95, 104, 178, 215, 230, 249, 276, 293, 309, 310, 317, 367, 368, 380, 383, 384, 385, 394, 406, 420, 501, 555, 558, 559, 562, 563, 564, 565, 569, 570, 571, 576, 577, 578, 579, 580, 581, 583, 607, 641, 698, 717, 718, 721, 734, 735, 743, 788, 789, 792, 859, 873, 874, 882, 912, 913, 914, 915, 917, 918, 919, 920, 935, 936, 943, 953, 962, 975, 991, 992, 1006, 1016, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "warn_for": 788, "warn_on_dtyp": 1046, "warn_when_not_sort": 864, "warner": [51, 1052, 1053], "warshal": [693, 1003], "warshaw": 1043, "warut": [1044, 1045], "wase": [1054, 1055], "wasn": [102, 249, 1046], "waspa": 543, "wast": [141, 386, 416, 417, 995], "watanab": [1054, 1055], "watch": [52, 368], "watchtheblur": 1049, "water": 50, "waterburi": [1045, 1046], "waterland": 1040, "waterponei": [1043, 1044], "watson": [319, 413], "wattai": 1052, "wav": 374, "wave": [209, 380, 1005], "waveform": 75, "wavelet": [53, 130, 417], "wavfil": 374, "waweru": 1054, "wa\u00ebl": 1055, "wb": [55, 406], "wchathura": 1052, "wclf": 345, "wconnel": 1048, "wdbc": [170, 377], "wderos": 1048, "wdevazelh": 1045, "wdisp": 345, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 86, 88, 89, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 113, 116, 118, 119, 121, 122, 123, 124, 126, 128, 129, 131, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 156, 158, 159, 161, 165, 166, 167, 169, 170, 172, 174, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 204, 206, 208, 210, 212, 215, 216, 217, 218, 219, 221, 223, 224, 227, 228, 229, 230, 231, 233, 235, 236, 239, 240, 242, 243, 245, 246, 247, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 263, 264, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 298, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 392, 393, 394, 395, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 454, 473, 474, 475, 476, 477, 478, 479, 480, 506, 528, 536, 537, 539, 542, 550, 551, 554, 566, 567, 568, 574, 575, 587, 588, 594, 616, 622, 632, 637, 638, 643, 645, 656, 660, 663, 664, 671, 673, 678, 679, 680, 681, 682, 697, 723, 725, 731, 751, 761, 769, 786, 804, 811, 827, 828, 830, 851, 852, 853, 855, 857, 858, 859, 860, 861, 872, 881, 882, 883, 889, 894, 895, 897, 898, 899, 900, 902, 905, 909, 913, 928, 947, 948, 958, 969, 971, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1055], "wea": 410, "weak": [115, 146, 149, 219, 233, 279, 416, 559, 564, 565, 635, 1009, 1030, 1053], "weak_learn": 135, "weak_learners_info": 135, "weak_learners_misclassification_error": 135, "weaker": [107, 566, 567], "weakest": [358, 1022], "weaklearn": 558, "weakli": 99, "weather": [43, 52, 177, 189, 411, 1002, 1006], "web": [2, 170, 374, 375, 377, 380, 388, 406, 412, 420, 496, 526, 902, 953, 1006, 1016, 1033, 1037, 1056], "weber": 1044, "weblog": 412, "webpag": [55, 193, 380], "websit": [374, 375, 377, 380, 383, 395, 398, 1010, 1020, 1029, 1030, 1038, 1039, 1040], "wed": [43, 151, 189], "weed": 609, "week": [43, 52, 151, 329, 379, 380, 395, 501, 1030, 1051], "weekdai": [43, 189], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 151], "weezel": [1052, 1053], "wegelin": 415, "wehenkel": [419, 562, 563, 570, 571, 919, 920], "wei": [0, 402, 1020, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1050, 1053], "weibul": 317, "weidemann": 1051, "weigh": [416, 1044], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 87, 102, 131, 148, 157, 158, 166, 167, 176, 177, 184, 185, 188, 194, 200, 204, 206, 215, 219, 220, 222, 225, 226, 227, 229, 230, 231, 233, 249, 254, 258, 262, 267, 271, 276, 280, 282, 296, 305, 306, 307, 308, 309, 311, 318, 320, 322, 325, 329, 330, 332, 333, 338, 343, 345, 347, 348, 350, 351, 354, 355, 356, 362, 363, 376, 377, 389, 392, 394, 411, 412, 414, 415, 417, 418, 421, 423, 429, 435, 441, 444, 447, 448, 450, 451, 453, 457, 463, 464, 467, 468, 469, 471, 473, 478, 486, 487, 488, 501, 520, 529, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 591, 594, 595, 596, 598, 602, 607, 608, 615, 616, 633, 637, 638, 639, 640, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 694, 698, 702, 703, 705, 707, 708, 712, 713, 714, 717, 718, 721, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 739, 740, 741, 743, 744, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 774, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 827, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 871, 874, 888, 889, 890, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 940, 941, 955, 980, 986, 996, 997, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1016, 1019, 1020, 1021, 1022, 1026, 1027, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "weight_concentration_": 802, "weight_concentration_prior": [258, 264, 802, 1005], "weight_concentration_prior_": 802, "weight_concentration_prior_typ": [258, 264, 802, 1005, 1043], "weight_vector": [1037, 1047], "weighted_acc": 403, "weighted_mod": [2, 389], "weighted_n_node_sampl": 362, "weightedmetaregressor": 249, "weights_": [258, 802, 803, 1051], "weights_handl": 228, "weights_init": 803, "weijiadu": 1051, "weinberg": 420, "weinsberg": 1037, "weinstein": 1038, "weisberg": 1002, "weiss": [0, 402, 412, 696, 1037], "weitzenfeld": 1030, "weka": 846, "welch": 1043, "welcom": [379, 380, 388, 395, 1026], "welind": 1037, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 86, 90, 91, 95, 102, 109, 116, 135, 136, 138, 141, 146, 148, 154, 156, 170, 177, 179, 187, 188, 189, 190, 193, 200, 202, 213, 215, 216, 217, 219, 223, 235, 236, 237, 240, 242, 246, 249, 252, 260, 267, 273, 280, 282, 284, 290, 293, 296, 298, 299, 300, 320, 323, 324, 325, 326, 327, 328, 329, 330, 347, 350, 354, 355, 356, 363, 375, 377, 379, 380, 384, 386, 388, 389, 392, 393, 394, 395, 406, 410, 412, 414, 416, 417, 419, 421, 423, 426, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 463, 464, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 705, 726, 727, 728, 729, 790, 793, 797, 800, 802, 803, 804, 805, 808, 809, 819, 827, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 951, 952, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1019, 1020, 1022, 1023, 1025, 1026, 1030, 1037, 1038, 1041, 1043, 1044, 1045, 1048, 1055], "wellcom": 0, "wen": 1052, "wenbo": [1047, 1049], "wendi": 1047, "wendling": 1044, "weng": 1021, "wenhao": [1045, 1046], "wenhua": 1043, "wenjian": 1043, "wenliwyan": 1048, "went": [384, 1006], "were": [0, 43, 68, 102, 103, 106, 111, 112, 141, 145, 148, 151, 167, 170, 177, 184, 215, 216, 219, 243, 252, 280, 282, 284, 310, 311, 318, 323, 324, 326, 327, 328, 329, 330, 335, 347, 354, 356, 362, 363, 374, 375, 377, 380, 381, 382, 384, 388, 392, 394, 403, 409, 413, 419, 420, 468, 471, 472, 501, 566, 567, 607, 808, 809, 824, 833, 856, 906, 907, 995, 998, 1006, 1007, 1022, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "weren": [354, 883, 1046], "werman": 1049, "werneck": 1045, "werner": [1044, 1049], "werror": 388, "wersd\u00f6rfer": 1039, "weslei": [595, 735], "westermann": [0, 370, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "western": 420, "weston": [44, 417, 540, 598, 599, 905], "westov": 1045, "wetter": 189, "weyb": 1055, "wfc": 51, "wget": 388, "wh": [417, 543, 545, 552], "wh_i": 417, "what": [0, 2, 43, 48, 51, 52, 75, 85, 86, 116, 122, 126, 144, 187, 188, 204, 221, 223, 231, 244, 249, 256, 310, 354, 356, 358, 363, 368, 375, 378, 380, 381, 382, 384, 386, 388, 393, 394, 395, 397, 411, 412, 418, 419, 420, 508, 541, 593, 594, 596, 651, 657, 701, 894, 895, 897, 898, 899, 900, 917, 918, 919, 920, 1005, 1006, 1007, 1009, 1022, 1026, 1037, 1044, 1055], "whatnot": 354, "whats_new": [384, 388], "wheel": [378, 380, 384, 398, 400, 1047, 1049, 1051], "wheeler": [1048, 1049], "wheelhouse_upload": 384, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 89, 93, 100, 102, 103, 104, 109, 111, 112, 116, 121, 124, 125, 126, 128, 138, 141, 144, 145, 146, 148, 151, 152, 156, 157, 158, 167, 172, 183, 187, 188, 189, 190, 191, 195, 196, 200, 204, 206, 208, 212, 215, 217, 219, 220, 231, 242, 243, 244, 248, 249, 256, 259, 261, 269, 272, 273, 274, 275, 276, 280, 282, 283, 286, 287, 290, 293, 295, 296, 299, 300, 301, 313, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 329, 330, 334, 335, 337, 343, 346, 347, 350, 354, 355, 356, 358, 362, 363, 367, 368, 369, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 398, 403, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 428, 435, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 513, 514, 515, 517, 520, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 583, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 706, 707, 709, 710, 712, 713, 717, 718, 721, 732, 733, 734, 735, 737, 739, 740, 743, 751, 753, 756, 759, 760, 762, 766, 768, 772, 773, 774, 776, 779, 783, 786, 787, 788, 789, 790, 792, 793, 794, 796, 797, 798, 800, 802, 803, 804, 805, 808, 809, 810, 811, 819, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 895, 896, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 928, 930, 931, 934, 935, 936, 943, 947, 951, 952, 953, 954, 956, 957, 958, 963, 966, 974, 994, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1026, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "whenev": [179, 187, 267, 363, 374, 388, 394, 398, 410, 486, 487, 488, 501, 633, 635, 997, 1005, 1026, 1047, 1056], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 86, 88, 90, 111, 116, 119, 121, 124, 130, 131, 135, 137, 139, 141, 145, 146, 148, 151, 153, 167, 168, 170, 172, 178, 181, 184, 188, 195, 200, 207, 216, 219, 224, 225, 226, 228, 232, 233, 235, 237, 238, 242, 243, 246, 249, 250, 252, 254, 264, 267, 269, 270, 273, 275, 279, 280, 282, 284, 285, 287, 290, 292, 311, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 330, 333, 334, 341, 347, 350, 351, 352, 354, 358, 359, 363, 367, 368, 369, 374, 376, 377, 379, 380, 382, 384, 386, 387, 388, 392, 393, 394, 395, 398, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 435, 441, 448, 451, 452, 456, 465, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 491, 501, 531, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 587, 588, 589, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 614, 615, 616, 618, 620, 624, 627, 628, 630, 632, 633, 634, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 693, 696, 697, 698, 701, 712, 716, 717, 721, 730, 734, 735, 736, 744, 746, 760, 768, 773, 774, 775, 778, 786, 787, 788, 789, 792, 793, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 852, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 879, 882, 884, 885, 888, 889, 895, 897, 903, 904, 905, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 926, 944, 945, 946, 947, 953, 958, 962, 965, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1026, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "wherea": [52, 70, 86, 100, 111, 152, 229, 252, 274, 275, 276, 282, 296, 318, 347, 350, 351, 369, 395, 416, 419, 448, 450, 570, 663, 664, 807, 823, 837, 998, 1005, 1007, 1009, 1016, 1022, 1050, 1055], "wherein": 394, "whether": [2, 47, 49, 52, 103, 133, 152, 175, 180, 188, 189, 215, 219, 233, 236, 243, 249, 267, 271, 313, 362, 363, 368, 375, 378, 379, 380, 382, 384, 385, 386, 394, 403, 411, 412, 413, 414, 416, 417, 419, 421, 424, 444, 446, 455, 457, 458, 463, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 482, 486, 487, 488, 489, 491, 492, 495, 497, 501, 502, 508, 513, 514, 519, 527, 532, 536, 537, 542, 543, 544, 545, 547, 550, 551, 553, 557, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 586, 593, 594, 595, 596, 602, 607, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 636, 637, 638, 640, 641, 642, 643, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 695, 699, 700, 702, 703, 705, 707, 709, 716, 717, 747, 766, 772, 779, 783, 787, 794, 804, 805, 808, 809, 810, 811, 819, 823, 824, 827, 828, 829, 832, 833, 835, 838, 840, 843, 844, 845, 846, 848, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 866, 867, 873, 890, 896, 909, 910, 911, 912, 913, 914, 915, 921, 923, 925, 926, 927, 928, 929, 933, 935, 936, 937, 939, 947, 948, 952, 953, 961, 962, 978, 989, 993, 994, 995, 996, 1001, 1002, 1006, 1011, 1012, 1018, 1020, 1021, 1030, 1044, 1045, 1046, 1054, 1056], "whi": [188, 190], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 98, 100, 102, 103, 104, 107, 109, 111, 112, 116, 118, 119, 123, 125, 126, 131, 135, 138, 139, 140, 141, 145, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 161, 165, 167, 169, 170, 172, 173, 177, 178, 179, 183, 184, 187, 188, 189, 191, 193, 195, 196, 200, 204, 208, 215, 216, 217, 219, 221, 223, 229, 231, 232, 233, 235, 236, 237, 239, 242, 243, 246, 247, 248, 249, 250, 252, 253, 258, 259, 263, 264, 266, 267, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 290, 292, 293, 298, 299, 300, 309, 313, 315, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 343, 347, 350, 352, 354, 355, 356, 358, 362, 363, 367, 368, 369, 372, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 397, 398, 400, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 491, 528, 536, 537, 538, 539, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 584, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 615, 616, 617, 618, 619, 620, 622, 624, 627, 632, 633, 634, 635, 637, 638, 639, 645, 647, 648, 649, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 666, 668, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 714, 721, 722, 724, 725, 728, 730, 731, 739, 740, 741, 742, 747, 748, 761, 763, 783, 784, 785, 786, 787, 788, 794, 802, 803, 804, 805, 808, 809, 810, 811, 813, 815, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 866, 869, 873, 876, 880, 882, 883, 884, 887, 888, 889, 890, 891, 893, 901, 902, 904, 905, 906, 909, 911, 914, 915, 917, 918, 919, 920, 921, 925, 927, 930, 931, 935, 936, 942, 945, 947, 948, 952, 953, 955, 958, 961, 962, 963, 965, 974, 977, 980, 986, 989, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "whichev": [412, 419, 450, 549, 566, 567, 638, 655, 659, 661, 669, 687, 688, 702], "whidou": 1050, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 88, 95, 99, 102, 105, 107, 119, 125, 126, 135, 138, 141, 142, 146, 151, 153, 156, 170, 173, 178, 180, 181, 183, 187, 188, 189, 190, 193, 195, 197, 200, 203, 204, 209, 215, 217, 219, 231, 242, 245, 246, 249, 250, 259, 260, 264, 266, 267, 268, 272, 273, 274, 276, 280, 281, 282, 283, 284, 286, 295, 313, 314, 315, 318, 319, 320, 322, 325, 328, 329, 340, 343, 354, 356, 362, 363, 368, 372, 373, 374, 375, 376, 379, 380, 382, 384, 385, 386, 388, 389, 392, 394, 395, 406, 410, 411, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 448, 468, 471, 472, 487, 489, 501, 526, 537, 557, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 580, 587, 593, 594, 595, 596, 599, 602, 607, 611, 639, 648, 651, 652, 654, 661, 662, 663, 664, 681, 682, 683, 684, 713, 735, 759, 779, 783, 793, 799, 802, 805, 806, 807, 810, 811, 812, 813, 814, 815, 819, 820, 821, 823, 828, 830, 831, 832, 833, 834, 836, 844, 855, 857, 859, 860, 861, 868, 869, 870, 871, 872, 885, 897, 902, 907, 909, 910, 917, 918, 919, 920, 931, 957, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1018, 1021, 1022, 1025, 1026, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whilst": [139, 237], "whisker": 49, "white": [2, 91, 93, 121, 177, 188, 229, 235, 299, 311, 315, 337, 342, 417, 420, 630, 1022, 1037, 1040, 1043, 1047, 1051], "whitekernel": [2, 172, 177, 178, 422, 616, 617, 619, 1048], "whiten": [45, 121, 122, 123, 297, 417, 424, 538, 539, 546, 887, 889, 1016, 1041, 1043, 1051, 1052, 1055], "whiten_solv": [424, 538, 1052, 1055], "whitening_": 538, "whitespac": 420, "whl": 384, "who": [0, 102, 188, 368, 375, 380, 387, 395, 398, 851, 852, 853, 855, 857, 859, 860, 861, 1025, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "whole": [49, 83, 106, 151, 159, 184, 216, 252, 270, 277, 305, 343, 347, 358, 367, 380, 392, 393, 413, 415, 419, 422, 453, 487, 543, 560, 561, 562, 563, 568, 569, 570, 571, 575, 690, 691, 805, 808, 809, 819, 833, 844, 845, 846, 847, 848, 995, 1006, 1016, 1045, 1047], "whose": [2, 88, 110, 111, 112, 170, 177, 215, 243, 341, 375, 388, 389, 394, 410, 412, 414, 419, 421, 422, 425, 441, 442, 443, 452, 465, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 520, 539, 543, 545, 546, 549, 552, 554, 577, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 645, 676, 700, 723, 805, 812, 819, 834, 855, 874, 901, 902, 952, 984, 985, 1000, 1007, 1011, 1012, 1013, 1021, 1040, 1045, 1046, 1048, 1051], "why": [64, 72, 85, 121, 135, 141, 151, 188, 190, 193, 204, 267, 270, 273, 290, 354, 355, 380, 388, 394, 412, 414, 417, 423, 448, 451, 455, 1006, 1008, 1021, 1040], "wick": 1049, "wide": [64, 93, 94, 118, 138, 246, 314, 392, 412, 417, 420, 995, 1002, 1025, 1030, 1037, 1039, 1053], "widehat": 175, "wider": [52, 217, 420, 922, 1002], "widetild": 1022, "width": [47, 49, 52, 86, 111, 118, 123, 124, 129, 130, 131, 138, 144, 145, 148, 158, 166, 174, 180, 199, 256, 258, 272, 296, 313, 315, 316, 319, 324, 327, 340, 377, 413, 442, 443, 456, 468, 498, 499, 511, 526, 591, 874, 922, 1016, 1020, 1022, 1045], "wiesel": [414, 425, 479], "wignal": [1040, 1041, 1047, 1048], "wijewardena": [0, 1040, 1041, 1042], "wiki": [55, 61, 386, 388, 600, 641, 673, 676, 700, 710, 851, 852, 857, 858, 859, 860, 887, 903, 917, 918, 1002, 1006, 1022], "wikic": 998, "wikipedia": [37, 42, 61, 185, 388, 412, 600, 612, 613, 641, 661, 673, 676, 687, 688, 700, 709, 710, 712, 714, 717, 721, 723, 731, 734, 735, 736, 739, 740, 743, 748, 761, 788, 790, 791, 793, 794, 797, 798, 851, 852, 857, 858, 859, 860, 887, 903, 917, 918, 953, 998, 1002, 1006, 1009, 1018, 1022, 1027, 1037, 1044], "wikipedia_principal_eigenvector": [55, 1027], "wikipediadet2017": 1006, "wikipediamcc2021": 1006, "wil": 1049, "wild": [2, 45, 373, 498, 499, 513, 514, 1032, 1037], "wilderness_area": 252, "wildli": [298, 1005], "wilei": [377, 996], "wilhelm": [1041, 1043, 1047], "wilk": 410, "wilksch": 1052, "willamett": 319, "willard": 1049, "willdarnel": 1047, "willduan": 1044, "william": [170, 375, 377, 422, 615, 616, 619, 624, 627, 644, 998, 1006, 1010, 1044, 1045, 1046, 1047, 1052, 1053], "williamson": 1047, "willing": [187, 270, 411], "willocx": 1047, "willpeppo": 1049, "wilson": [111, 377, 1037, 1040], "wiman": 1037, "wimld": 1051, "win": [52, 267], "winata": [1047, 1049], "wind": [189, 1007], "windber": 1048, "windiana42": 1053, "window": [57, 336, 375, 380, 382, 383, 388, 420, 1037, 1040, 1044, 1048, 1050, 1051, 1055], "windowsapp": 398, "windowserror": 1053, "windspe": [43, 189], "wine": [2, 48, 255, 318, 319, 373, 515, 1032], "wine_review": 319, "wineri": 319, "winn": 1006, "winter": [43, 52], "winterman": 1038, "wip": [388, 398], "wipf": [650, 1002], "wire": [386, 539, 546], "wiryadi": [1049, 1055], "wisc": [170, 377, 904], "wisconsin": [2, 170, 191, 373, 505, 1014, 1032, 1042], "wise": [2, 46, 63, 180, 216, 242, 283, 313, 355, 367, 394, 410, 412, 416, 417, 421, 462, 536, 539, 542, 546, 550, 551, 554, 555, 558, 560, 561, 564, 565, 597, 600, 601, 603, 604, 605, 611, 645, 657, 705, 759, 837, 856, 886, 899, 900, 903, 978, 980, 981, 982, 983, 986, 998, 1000, 1002, 1006, 1007, 1020, 1026, 1037, 1042, 1045, 1046, 1047], "wish": [374, 380, 382, 387, 389, 398, 412, 953, 1044], "wishart": 802, "wissen": 454, "with_cent": [887, 899], "with_error": 706, "with_mean": [385, 889, 900, 1016, 1045, 1050], "with_scal": [887, 899], "with_std": [889, 900, 1016, 1045], "withheld": 416, "within": [2, 41, 43, 58, 93, 140, 142, 143, 146, 151, 155, 167, 169, 170, 211, 216, 217, 227, 233, 249, 253, 271, 272, 276, 313, 314, 324, 341, 344, 347, 350, 356, 363, 367, 375, 380, 384, 389, 392, 394, 395, 403, 408, 409, 410, 412, 413, 416, 418, 419, 423, 448, 452, 465, 467, 468, 470, 473, 478, 520, 554, 572, 573, 574, 575, 598, 599, 637, 697, 701, 704, 715, 730, 786, 802, 803, 810, 811, 823, 824, 833, 834, 849, 850, 851, 852, 857, 859, 860, 861, 868, 869, 870, 882, 890, 894, 895, 897, 898, 899, 900, 911, 912, 913, 914, 915, 917, 918, 919, 920, 995, 1000, 1002, 1003, 1009, 1012, 1016, 1019, 1021, 1022, 1026, 1030, 1039, 1040, 1044, 1045, 1050, 1051, 1053, 1054, 1055, 1056], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 81, 85, 88, 89, 95, 99, 100, 107, 126, 141, 146, 147, 150, 151, 153, 156, 162, 166, 170, 179, 185, 187, 188, 189, 200, 204, 223, 242, 246, 249, 250, 252, 253, 255, 266, 267, 274, 278, 280, 290, 293, 294, 295, 296, 302, 303, 304, 305, 313, 314, 318, 320, 322, 347, 350, 355, 369, 375, 376, 378, 380, 381, 382, 384, 385, 386, 389, 392, 393, 394, 403, 406, 412, 413, 417, 419, 420, 421, 422, 437, 443, 445, 450, 462, 473, 478, 496, 501, 509, 520, 537, 539, 560, 561, 568, 584, 585, 616, 632, 636, 639, 644, 664, 697, 705, 786, 808, 809, 810, 817, 819, 834, 835, 851, 858, 862, 868, 869, 872, 875, 878, 879, 881, 885, 886, 887, 889, 894, 909, 931, 974, 995, 996, 998, 1000, 1002, 1003, 1006, 1009, 1012, 1016, 1020, 1021, 1022, 1025, 1026, 1027, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056], "withstrok": 75, "witten": 416, "wittenau": 1042, "wk": 710, "wl": 378, "wminkowski": [1049, 1051], "wmt": 51, "wnl": 420, "wo": 420, "wojdyla": [1052, 1053], "wolberg": [170, 377], "wolf": [2, 49, 65, 70, 108, 109, 112, 113, 185, 302, 477, 479, 483, 484, 517, 554, 1000, 1027, 1044], "wolframalpha": 1047, "wolodzko": 1050, "wolosonovich": 1045, "wolpert": [419, 572, 573], "wolsza": 1055, "wompner": 1045, "won": [156, 310, 355, 384, 388, 412, 472, 501, 632, 633, 635, 692, 709, 722, 741, 742, 760, 762, 800, 1005, 1016, 1042, 1043, 1048], "wonder": [354, 378], "wonpil": 1002, "wood": 1046, "woolam": 1037, "word": [47, 54, 57, 102, 172, 203, 246, 250, 343, 355, 356, 367, 375, 376, 380, 382, 385, 394, 409, 411, 412, 414, 415, 416, 417, 457, 516, 528, 539, 541, 546, 593, 594, 596, 701, 838, 848, 906, 1000, 1004, 1008, 1011, 1016, 1019, 1020, 1030, 1037, 1045], "word_col": 57, "word_scor": 57, "word_token": 420, "wordnetlemmat": 420, "work": [0, 3, 43, 48, 52, 55, 68, 79, 85, 100, 109, 138, 145, 159, 170, 178, 179, 187, 188, 189, 204, 219, 232, 249, 271, 290, 299, 300, 319, 323, 325, 326, 328, 345, 347, 355, 356, 363, 368, 369, 374, 375, 378, 380, 381, 382, 383, 384, 385, 386, 388, 393, 394, 395, 406, 408, 409, 410, 412, 413, 414, 417, 419, 420, 421, 424, 425, 426, 427, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 464, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 509, 513, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 700, 713, 779, 783, 784, 785, 786, 793, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 953, 957, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1013, 1016, 1019, 1020, 1025, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "workabl": 385, "workaround": [319, 380, 805, 819], "workclass": [329, 501], "worker": [368, 394, 420, 971, 972, 1052], "workflow": [380, 383, 384, 393, 416, 1029, 1032], "working_memori": [367, 368, 472, 786, 907, 1045], "workingdai": [43, 189], "workload": 1025, "workshop": [0, 412, 420, 844, 1008, 1024], "workstat": 388, "world": [0, 88, 102, 106, 188, 219, 239, 252, 267, 354, 367, 373, 377, 412, 417, 420, 970, 996, 1006, 1008, 1024, 1026, 1030, 1032, 1037], "worldwid": 1030, "wornbb": 1048, "worri": [87, 1003], "wors": [43, 116, 135, 173, 189, 221, 273, 281, 292, 318, 363, 410, 412, 422, 435, 469, 486, 487, 488, 557, 559, 561, 563, 565, 567, 570, 573, 575, 615, 616, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 683, 684, 685, 710, 726, 727, 728, 729, 733, 790, 842, 843, 852, 860, 867, 910, 912, 915, 918, 920, 1006, 1016, 1046], "worse_prob": 273, "worsen": 146, "worst": [170, 215, 319, 377, 412, 448, 451, 713, 734, 735, 788, 789, 792, 797, 798, 834, 1006, 1030, 1037, 1050], "worth": [88, 144, 189, 215, 380, 388, 1030], "worthwhil": [104, 394], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 86, 88, 91, 102, 109, 111, 112, 116, 119, 126, 135, 148, 170, 172, 177, 178, 188, 189, 190, 191, 193, 200, 205, 215, 216, 217, 230, 233, 242, 249, 252, 260, 267, 269, 273, 274, 279, 281, 283, 287, 290, 293, 299, 305, 310, 313, 314, 318, 319, 325, 328, 335, 343, 347, 350, 351, 354, 356, 362, 363, 367, 375, 376, 380, 381, 382, 386, 388, 389, 392, 393, 394, 395, 403, 406, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 435, 450, 469, 472, 486, 487, 488, 493, 532, 537, 539, 541, 546, 549, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 575, 588, 589, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 705, 707, 713, 717, 718, 725, 761, 783, 787, 790, 794, 805, 807, 819, 834, 842, 843, 852, 860, 867, 894, 895, 897, 898, 899, 900, 901, 902, 907, 909, 910, 912, 915, 917, 918, 919, 920, 962, 965, 995, 996, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1021, 1025, 1026, 1030, 1034, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "wp": [420, 662, 676], "wpd": 354, "wprd": 420, "wrap": [121, 140, 148, 293, 330, 374, 382, 394, 406, 436, 513, 662, 663, 664, 681, 835, 893, 996, 1006, 1009, 1021, 1025, 1037, 1042, 1045, 1047, 1048, 1050, 1052], "wraparound": 381, "wrapper": [2, 64, 293, 386, 389, 416, 422, 549, 625, 673, 676, 747, 909, 1002, 1022, 1025, 1041, 1049, 1056], "wrath": 413, "write": [47, 55, 149, 184, 191, 249, 322, 354, 367, 368, 374, 378, 379, 380, 384, 385, 386, 388, 389, 392, 394, 406, 408, 413, 417, 420, 1017, 1026, 1038, 1050, 1054], "writeabl": [935, 936, 1055], "writer": 354, "written": [41, 44, 46, 65, 84, 86, 124, 168, 185, 222, 266, 297, 325, 332, 333, 368, 377, 380, 381, 382, 386, 388, 392, 394, 413, 418, 491, 507, 513, 702, 718, 835, 914, 921, 1000, 1002, 1006, 1010, 1011, 1020, 1027, 1046], "wrong": [93, 215, 267, 299, 354, 363, 377, 380, 382, 420, 509, 731, 761, 798, 1006, 1012, 1021, 1040, 1042, 1044, 1045, 1046, 1047, 1050, 1054, 1055], "wrongli": [215, 343, 1055], "wrote": [156, 375], "ws2001": 998, "wspace": [53, 54, 74, 79, 95, 111, 121, 137, 215, 233, 242, 258, 260, 261, 264, 298, 306, 333, 340], "wstate": 1050, "wtv": 386, "wtw": 386, "wu": [1021, 1041, 1049], "wurp": [1051, 1052], "wuthrich": [215, 233], "ww": 417, "www": [45, 103, 193, 215, 231, 233, 287, 292, 310, 374, 375, 380, 388, 412, 416, 446, 453, 491, 513, 514, 536, 539, 542, 546, 649, 663, 669, 676, 690, 691, 858, 865, 917, 918, 1002, 1019], "www4": [170, 377], "wyseguy7": 1043, "w\u00fcthrich": 410, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 235, 236, 237, 240, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 373, 374, 375, 376, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 403, 406, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 498, 499, 500, 503, 505, 506, 507, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 715, 716, 730, 737, 740, 747, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 793, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 928, 930, 931, 932, 933, 934, 935, 936, 939, 950, 952, 953, 954, 955, 965, 966, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1026, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "x0": [51, 207, 224, 238, 256, 313, 340, 394, 433, 468, 572, 573, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "x00": 420, "x006": 1038, "x00a": 420, "x00b": 420, "x00c": 420, "x00d": 420, "x00e": 420, "x00f": 420, "x00g": 420, "x00h": 420, "x00i": 420, "x00l": 420, "x00n": 420, "x00o": 420, "x00r": 420, "x00t": 420, "x00u": 420, "x00z": 420, "x0_cat": [326, 1016], "x0_infrequent_sklearn": [326, 1016], "x0_label": 313, "x0_rabbit": [326, 1016], "x0_str_femal": 882, "x0_str_male": 882, "x0l": 1041, "x1": [51, 115, 137, 147, 175, 227, 238, 313, 340, 382, 394, 433, 468, 514, 572, 573, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 632, 633, 634, 635, 704, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "x110": 1052, "x1_int_1": 882, "x1_int_2": 882, "x1_int_3": 882, "x1_label": 313, "x2": [115, 137, 147, 175, 227, 256, 382, 413, 593, 634, 704], "x27": [63, 103, 104, 140, 156, 159, 167, 188, 189, 190, 243, 244, 253, 254, 256, 263, 267, 271, 273, 274, 280, 285, 287, 311, 319, 323, 324, 326, 334], "x2_tr": 634, "x3": [147, 256, 413], "x64": 378, "x8": 86, "x86": 378, "x86_64": [383, 398], "x9ft": 420, "x_": [165, 173, 264, 273, 322, 382, 412, 415, 417, 632, 640, 769, 864, 904, 905, 1002, 1008, 1013, 1043], "x_0": [216, 662], "x_1": [121, 165, 175, 212, 216, 415, 417, 419, 422, 618, 630, 662, 882, 909, 910, 1002, 1008, 1010, 1016, 1020], "x_1d": 326, "x_1x_2": 1016, "x_1x_2x_3": 1016, "x_1x_3": 1016, "x_2": [165, 175, 212, 417, 419, 420, 422, 618, 630, 1002, 1010, 1016], "x_20": 336, "x_2d": 343, "x_2x_3": 1016, "x_3": [165, 1016], "x_6": 882, "x_7": 882, "x_a": 317, "x_adult": 329, "x_aniso": [79, 90, 95], "x_axi": [123, 223, 277], "x_b": 317, "x_bimod": 317, "x_bin": 314, "x_bound": [422, 622], "x_c": [486, 487, 489, 1013], "x_calib": 441, "x_california": 184, "x_cardiotocographi": 252, "x_center": 197, "x_check": 936, "x_chisq": 317, "x_cluster": 861, "x_convert": 935, "x_copi": 1048, "x_cu": 408, "x_d": [422, 619], "x_dens": [329, 549], "x_df": 153, "x_diabet": 184, "x_different_covari": 70, "x_digit": [105, 162, 309, 413], "x_dist_graph": 853, "x_embed": [302, 303, 697, 701, 858, 1009], "x_error": 221, "x_errors_larg": 221, "x_featur": [106, 645, 646, 647, 998], "x_filter": 90, "x_fit": 693, "x_fit_": [540, 648], "x_forestcov": 252, "x_full": [183, 184, 313], "x_full_train": 140, "x_gaussian": 317, "x_hashed_lsa": 355, "x_hat": [536, 542, 550, 551], "x_hetero": 128, "x_homo": 128, "x_i": [52, 111, 139, 165, 188, 216, 325, 350, 412, 417, 418, 419, 422, 619, 620, 624, 627, 628, 630, 844, 845, 848, 997, 998, 1002, 1008, 1009, 1010, 1016, 1020, 1021, 1022], "x_idx_sort": 1049, "x_imput": 635, "x_indic": 166, "x_inform": 320, "x_inlier": 300, "x_inv": [593, 596], "x_ipca": 125, "x_iri": 278, "x_isotropic_covari": 70, "x_j": [412, 422, 619, 620, 624, 627, 628, 630, 997, 998, 1002, 1009, 1021, 1022], "x_k": [415, 417, 1000, 1009], "x_label": 184, "x_leav": [562, 563, 564, 565, 569, 570, 571, 917, 918, 919, 920], "x_left_lower_corn": [50, 306, 375, 503], "x_legend": 47, "x_list": 316, "x_loadings_": [486, 487, 488], "x_lognorm": [317, 1016], "x_lsa": 355, "x_m": 1010, "x_max": [67, 85, 91, 137, 144, 154, 163, 174, 247, 308, 315, 337, 347, 348], "x_max_": 640, "x_mean": 424, "x_mean_": 1049, "x_min": [67, 85, 91, 137, 144, 148, 154, 163, 174, 204, 247, 308, 315, 337, 347, 348], "x_min_": 640, "x_miss": [151, 183, 184], "x_miss_california": 184, "x_miss_diabet": 184, "x_n": [121, 417, 909, 910, 1008, 1010, 1020], "x_near_unique_categori": 320, "x_new": [89, 413, 417, 421, 436, 446, 447, 449, 451, 453, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 554, 572, 574, 575, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 635, 640, 643, 644, 645, 646, 647, 693, 694, 695, 696, 697, 858, 865, 872, 873, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 901, 902, 1018], "x_new_again": 1018, "x_new_invers": 1018, "x_norm_squar": [768, 1042, 1054], "x_normal": 1016, "x_np": 408, "x_offset": 197, "x_offset_": [649, 650, 1049], "x_origin": [539, 544, 546, 548, 549, 635, 901, 902], "x_out": [327, 873, 882, 883], "x_outlier": [198, 229, 299, 300, 342], "x_p": [412, 450, 1002], "x_pca": 125, "x_plot": [195, 216, 221, 248, 276, 298, 318], "x_plot_ext": 216, "x_plot_scal": 318, "x_po": 292, "x_q": 412, "x_r": [129, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "x_r2": 129, "x_rand": 279, "x_random": 204, "x_reconstruct": [326, 486, 487, 488, 588], "x_reconstructed_kernel_pca": [44, 126], "x_reconstructed_pca": [44, 126], "x_red": 85, "x_reduc": [84, 118, 154, 449], "x_restor": 84, "x_right": 70, "x_rope": 273, "x_rotations_": [415, 486, 487, 488], "x_scale": [197, 879, 895, 1016], "x_scale_": [649, 650, 1049], "x_scaler": 49, "x_score": [300, 486, 487, 488, 489], "x_scores_": [488, 1049], "x_select": 363, "x_shared_covari": 70, "x_shuffl": 320, "x_size": 112, "x_sp": 201, "x_spars": [329, 539, 976, 979], "x_sparse_embed": 571, "x_squared_norm": [261, 464], "x_src": 298, "x_std": [879, 895, 1016], "x_std_": 1049, "x_t": [468, 632, 868], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 126, 135, 138, 140, 142, 147, 148, 149, 150, 151, 152, 155, 162, 163, 166, 167, 177, 180, 187, 188, 189, 190, 191, 193, 196, 200, 205, 210, 212, 213, 221, 222, 223, 229, 230, 231, 233, 243, 245, 251, 255, 256, 260, 266, 267, 270, 271, 276, 280, 282, 286, 288, 292, 296, 299, 301, 302, 305, 308, 310, 311, 315, 317, 318, 320, 322, 323, 324, 329, 330, 335, 336, 342, 354, 358, 360, 361, 362, 363, 367, 374, 382, 385, 393, 406, 413, 416, 419, 442, 474, 475, 476, 477, 478, 479, 480, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 804, 827, 835, 837, 840, 858, 866, 867, 869, 883, 919, 920, 996, 1006, 1008, 1009, 1010, 1012, 1016, 1020, 1021, 1022, 1034, 1037], "x_test_df": 256, "x_test_kernel_pca": 126, "x_test_maxab": 1016, "x_test_minmax": 1016, "x_test_miss": 151, "x_test_no_cf_encod": 320, "x_test_noisi": 44, "x_test_np": 256, "x_test_pca": [45, 126], "x_test_r": 115, "x_test_scal": 256, "x_test_sel": 191, "x_test_select": 363, "x_test_text": 47, "x_test_tran": 1016, "x_test_transform": [363, 416], "x_text": 47, "x_tfidf": 355, "x_thresholds_": [245, 640, 1049], "x_torch": 408, "x_tr": [872, 878, 881, 882, 883, 887, 889, 892, 894, 895, 899, 900], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 126, 135, 138, 142, 146, 147, 148, 149, 150, 151, 152, 155, 162, 163, 166, 167, 178, 179, 180, 181, 187, 188, 189, 190, 191, 193, 196, 200, 210, 212, 213, 216, 222, 223, 229, 230, 231, 233, 243, 251, 255, 256, 260, 262, 266, 267, 270, 271, 276, 280, 282, 286, 292, 296, 299, 301, 302, 305, 308, 310, 311, 315, 317, 318, 320, 322, 323, 324, 329, 330, 335, 336, 342, 354, 358, 362, 363, 367, 374, 382, 385, 393, 413, 416, 419, 441, 442, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 804, 827, 835, 837, 840, 858, 866, 867, 869, 883, 919, 920, 996, 1006, 1008, 1009, 1010, 1012, 1014, 1016, 1020, 1021, 1034], "x_train_": 616, "x_train_ensembl": 140, "x_train_linear": 140, "x_train_maxab": 1016, "x_train_minmax": 1016, "x_train_miss": 151, "x_train_no_cf_encod": 320, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 188, "x_train_r": 115, "x_train_sel": 191, "x_train_select": 363, "x_train_std_transform": 318, "x_train_text": 47, "x_train_tran": 1016, "x_train_transform": [318, 363, 416], "x_train_valid": 63, "x_tran": [317, 328, 408, 446, 468, 885, 890, 897, 930, 1016], "x_trans_bc": 317, "x_trans_qt": 317, "x_trans_yj": 317, "x_transform": [125, 154, 249, 489, 536, 537, 538, 539, 540, 542, 544, 548, 571, 643, 644, 693, 694, 695, 696], "x_transformed_fit_": 540, "x_true": 238, "x_uniform": 317, "x_val": [146, 1014], "x_valid": 63, "x_valu": 335, "x_vari": 90, "x_weibul": 317, "x_weights_": [415, 486, 487, 488, 489], "x_wrong": 70, "xa": 586, "xanchor": 274, "xarg": 1037, "xavier": [866, 867, 1045, 1046, 1047, 1049, 1050, 1055], "xaxi": [118, 127, 141, 212, 235, 237, 240, 293, 298, 354], "xaxis2": 141, "xb": [115, 888], "xbar_": 554, "xbc": 420, "xc3": 420, "xcjason": 1047, "xcode": 378, "xd": 531, "xdang": 684, "xerox": 51, "xerr": [183, 184, 355], "xethan": 1049, "xfail": [388, 928], "xfc": 420, "xfcche": 420, "xfea": 420, "xff": 420, "xgamma": 690, "xgboost": [151, 153, 419, 1025], "xgrid": [50, 306], "xhan": 1046, "xhy": 1044, "xi": [2, 79, 98, 377, 412, 415, 420, 454, 460, 514, 1020, 1048], "xi_i": 1020, "xi_k": 415, "xiang": 1055, "xiangyin": 1050, "xiao": [0, 391, 401, 1045, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "xiaojin": 904, "xiaoyu": 1049, "xiaoyuchai": 1050, "xin": [684, 1002, 1045], "xinfan": [1037, 1038, 1041], "xing": [1045, 1046], "xinv": 874, "xinyu": 412, "xinyuliu12": 1046, "xiong": [1045, 1046, 1051], "xj": 410, "xk": [98, 555], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 94, 109, 110, 112, 113, 115, 116, 118, 123, 128, 136, 137, 139, 145, 147, 148, 149, 150, 151, 155, 159, 161, 165, 166, 169, 172, 173, 174, 175, 177, 178, 179, 188, 195, 198, 199, 200, 202, 203, 204, 205, 208, 209, 215, 217, 218, 220, 222, 224, 225, 229, 233, 246, 248, 250, 252, 268, 272, 273, 277, 278, 282, 283, 286, 288, 295, 296, 299, 300, 319, 320, 340, 342, 343, 346, 354, 359, 360, 361, 636], "xlim": [51, 63, 79, 91, 95, 105, 109, 110, 111, 123, 137, 138, 139, 155, 161, 173, 174, 188, 195, 205, 207, 214, 221, 224, 229, 242, 250, 259, 264, 268, 282, 288, 299, 300, 342, 347, 348, 351, 361], "xm": [51, 238], "xmax": [50, 109, 205, 207, 224, 225, 306], "xmin": [50, 109, 205, 207, 224, 225, 306], "xn": 514, "xom": 51, "xor": [171, 173, 174, 175, 185, 225, 226, 228, 262, 316, 348, 352, 615, 619, 627, 1002, 1022, 1027, 1044], "xp": [415, 884], "xpreprocessor": 378, "xrang": 1043, "xred": [449, 1053], "xrot": 53, "xrx": 51, "xs_sp": 201, "xsat": 1047, "xscale": [173, 178, 248], "xt": [159, 293, 394, 449, 543, 545, 632, 634, 805, 808, 809, 819, 853, 861, 869, 874, 879, 886, 898, 933, 1053, 1055], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 124, 145, 147, 151, 174, 175, 176, 180, 199, 205, 211, 228, 242, 250, 259, 260, 261, 264, 272, 273, 288, 297, 306, 311, 319, 332, 343, 346, 348, 702], "xtick_period": 189, "xtick_start": 189, "xticklabel": [43, 49, 145, 151, 189, 319], "xticks_label": 147, "xticks_po": 147, "xticks_rot": [45, 702], "xtrain": 306, "xu": [412, 415, 423, 448, 1020, 1050, 1051, 1054, 1055, 1056], "xue": [0, 1041, 1042, 1043, 1045, 1046, 1049], "xuefeng": [1054, 1055, 1056], "xueqin": [684, 1002], "xun": [1047, 1049], "xuniu": 1052, "xval": 184, "xw": [214, 325, 651, 652, 654, 657, 658, 659, 660, 661, 665, 666, 667, 668, 677, 686, 687, 688, 689, 1002], "xx": [77, 91, 111, 144, 148, 154, 163, 174, 175, 176, 189, 222, 225, 226, 227, 228, 229, 240, 242, 250, 262, 299, 308, 315, 316, 337, 342, 343, 347, 348, 351, 352], "xx0": [137, 636], "xx1": [137, 636], "xx_coarser": 144, "xxx": 394, "xy": [48, 63, 82, 280, 306, 348, 398, 651, 652, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 669, 686, 687, 688, 689, 691], "xycoord": [48, 63], "xyguo": [1043, 1045], "xytext": [48, 63, 193], "xyz": 379, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 85, 87, 89, 90, 93, 94, 95, 98, 99, 103, 104, 106, 107, 112, 115, 116, 119, 123, 125, 126, 127, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 233, 235, 236, 237, 240, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 292, 293, 295, 296, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358, 359, 360, 361, 362, 363, 372, 373, 374, 375, 376, 378, 380, 382, 384, 385, 387, 388, 389, 393, 394, 403, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 489, 491, 503, 505, 507, 510, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 711, 716, 731, 737, 740, 746, 747, 761, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 793, 794, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 928, 929, 935, 940, 941, 965, 967, 968, 969, 976, 979, 992, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1020, 1021, 1022, 1026, 1032, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "y0": [51, 238], "y1": [51, 137, 238, 514, 721, 1007, 1008], "y1_label": 46, "y2": [137, 721, 1007], "y2_label": 46, "y3": 1007, "y_": [245, 259, 263, 264, 305, 382, 415, 417, 642, 653, 674, 685, 734, 735, 743, 769, 788, 789, 792, 1002, 1006, 1043], "y_1": [136, 360, 361, 415, 1006, 1010, 1020], "y_2": [136, 360, 361, 1010], "y_20": 336, "y_2d": 343, "y_3": 361, "y_30": 337, "y_50": 337, "y_adult": 329, "y_all": [671, 673, 681, 837, 838, 866], "y_ard": 195, "y_ard_std": 195, "y_axi": [123, 223], "y_bia": 138, "y_brr": 195, "y_brr_std": 195, "y_c": [486, 487, 489], "y_calib": 441, "y_california": 184, "y_coclust": 57, "y_convert": 935, "y_cov": 616, "y_cu": 408, "y_decis": [329, 840], "y_dens": 1007, "y_diabet": 184, "y_different_covari": 70, "y_digit": [105, 162, 309, 413], "y_error": [138, 221], "y_errors_larg": 221, "y_filter": 90, "y_full": [183, 184, 313], "y_full_train": 140, "y_grid_pr": 154, "y_hat": 469, "y_high": 148, "y_i": [139, 325, 350, 410, 419, 997, 998, 1002, 1006, 1010, 1020, 1021, 1022], "y_indic": 880, "y_iri": 278, "y_isotropic_covari": 70, "y_j": [998, 1006, 1008, 1016, 1021], "y_k": [415, 1016], "y_kmean": 57, "y_kr": 248, "y_l": 1006, "y_label": 233, "y_left_lower_corn": [50, 306, 375, 503], "y_limit": 145, "y_loadings_": [486, 487, 488], "y_loc": 354, "y_log_prob": 840, "y_log_proba": 869, "y_low": 148, "y_lower": [93, 148], "y_mask": 336, "y_max": [67, 91, 137, 144, 154, 163, 174, 233, 247, 308, 315, 337, 347, 348, 640, 642], "y_mean": [177, 178, 181, 616, 649, 650], "y_mean_": 1049, "y_med": 148, "y_min": [67, 91, 137, 144, 154, 163, 174, 247, 308, 315, 337, 347, 348, 640, 642], "y_miss": [183, 184], "y_miss_california": 184, "y_miss_diabet": 184, "y_multirf": 155, "y_n": [1006, 1010, 1020], "y_new": 89, "y_nois": 138, "y_noisi": 214, "y_norm_squar": 768, "y_normal": 217, "y_np": 408, "y_numer": [935, 994], "y_observ": 330, "y_onehot_test": 282, "y_org": 940, "y_outlier": 198, "y_pareto": 217, "y_plot": [195, 216, 221, 276], "y_plot_ext": 216, "y_po": 356, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 90, 95, 102, 107, 135, 148, 149, 151, 156, 167, 188, 215, 217, 222, 225, 230, 232, 233, 242, 243, 252, 267, 269, 271, 276, 300, 304, 311, 318, 330, 335, 336, 363, 380, 387, 394, 419, 435, 443, 469, 486, 487, 488, 554, 557, 559, 561, 562, 563, 565, 567, 569, 570, 572, 573, 575, 616, 636, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 702, 703, 705, 706, 707, 708, 713, 717, 718, 723, 726, 727, 728, 729, 733, 734, 735, 739, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 788, 789, 790, 792, 793, 795, 796, 801, 805, 808, 809, 819, 830, 840, 842, 843, 852, 860, 867, 869, 909, 910, 911, 912, 913, 914, 915, 918, 920, 1006, 1008, 1043, 1044, 1046, 1048, 1052, 1053, 1054], "y_pred_ard": 200, "y_pred_bin": 215, "y_pred_chain": 292, "y_pred_empti": [734, 735], "y_pred_enet": 200, "y_pred_ensembl": 292, "y_pred_lasso": 200, "y_pred_lr": 217, "y_pred_nnl": 210, "y_pred_ol": 210, "y_pred_outli": [229, 299, 342], "y_pred_outliers_sgd": 229, "y_pred_ovr": 292, "y_pred_product": 233, "y_pred_qr": 217, "y_pred_ridg": 107, "y_pred_ridge_with_trans_target": 107, "y_pred_scal": 318, "y_pred_seg": 215, "y_pred_test": [229, 299, 342], "y_pred_test_sgd": 229, "y_pred_tot": 233, "y_pred_train": [229, 342], "y_pred_train_sgd": 229, "y_pred_with_": 187, "y_pred_without_": 187, "y_predict": [138, 382, 1037], "y_prob": [62, 64, 175, 442, 443, 714, 840, 866, 1006, 1051, 1055], "y_proba": [147, 150, 318, 394, 714, 869, 1055], "y_proba_sc": 318, "y_rand": 337, "y_reconstruct": [486, 487, 488], "y_rf": 155, "y_right": 70, "y_rotations_": [415, 486, 487, 488], "y_sampl": [181, 616], "y_scaler": 49, "y_score": [243, 280, 282, 394, 486, 487, 488, 712, 725, 731, 732, 744, 745, 761, 787, 793, 794, 799, 805, 808, 809, 819, 869, 1006, 1043, 1051, 1053, 1055], "y_scores_": [488, 1049], "y_shared_covari": 70, "y_spars": 1007, "y_std": [178, 181, 557, 616, 649, 650, 1050], "y_std_": 1049, "y_svr": 248, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 126, 135, 138, 140, 142, 147, 148, 149, 150, 151, 152, 155, 162, 163, 166, 167, 180, 187, 188, 189, 190, 191, 193, 200, 210, 212, 215, 221, 222, 223, 230, 231, 233, 243, 251, 255, 256, 260, 266, 267, 270, 271, 276, 280, 282, 286, 292, 296, 301, 302, 308, 310, 311, 315, 318, 320, 322, 323, 324, 329, 330, 335, 336, 354, 358, 362, 363, 374, 385, 393, 413, 416, 419, 442, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 804, 827, 835, 837, 840, 858, 866, 867, 869, 919, 920, 1006, 1008, 1009, 1016, 1021, 1034, 1037], "y_test_pr": 260, "y_test_predict": 251, "y_test_r": 115, "y_test_tru": 335, "y_thresholds_": [245, 640, 1049], "y_torch": 408, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 126, 135, 138, 142, 146, 147, 148, 149, 150, 151, 152, 155, 162, 163, 166, 167, 178, 179, 180, 181, 187, 188, 189, 190, 191, 193, 196, 200, 210, 212, 213, 216, 222, 223, 230, 231, 243, 251, 255, 256, 260, 266, 267, 270, 271, 276, 280, 282, 286, 292, 296, 301, 302, 308, 310, 311, 315, 318, 320, 322, 323, 324, 329, 330, 332, 333, 335, 336, 337, 354, 358, 362, 363, 367, 374, 382, 385, 393, 413, 416, 419, 441, 442, 514, 563, 564, 565, 572, 573, 702, 703, 705, 707, 804, 827, 835, 837, 840, 858, 866, 867, 869, 919, 920, 996, 1006, 1008, 1009, 1014, 1016, 1021, 1034], "y_train_": 616, "y_train_ensembl": 140, "y_train_linear": 140, "y_train_noisi": 179, "y_train_pr": 260, "y_train_r": 115, "y_train_valid": 63, "y_tran": 107, "y_transform": 489, "y_true": [43, 52, 57, 68, 92, 107, 135, 156, 175, 215, 225, 233, 252, 261, 267, 335, 380, 435, 442, 443, 469, 486, 487, 488, 557, 559, 561, 562, 563, 565, 567, 569, 570, 573, 575, 616, 640, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 677, 678, 683, 684, 702, 703, 705, 706, 707, 708, 712, 713, 714, 717, 718, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 801, 804, 842, 843, 852, 860, 867, 910, 912, 915, 918, 920, 1006, 1038, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1054], "y_true_bin": 215, "y_true_categor": [714, 1006], "y_true_empti": 734, "y_true_mean": 217, "y_true_seg": 215, "y_type_": 876, "y_uniqu": 61, "y_upper": [93, 148], "y_val": [146, 1014], "y_valid": 63, "y_var": 138, "y_vari": 90, "y_weights_": [415, 486, 487, 488, 489], "y_wrong": 70, "yacin": 1045, "yadav": 1051, "yagi": 1049, "yahoo": 51, "yair": [412, 696], "yakov": 1049, "yalburgi": [1044, 1045], "yaman": 1052, "yamanishi": 375, "yamin": 1037, "yaml": [384, 388], "yan": [1041, 1049], "yanchor": 274, "yang": [375, 412, 417, 539, 644, 1043, 1044, 1047, 1049, 1050, 1051, 1053, 1054], "yangarbit": 1044, "yanhong": 1052, "yanlend": 1043, "yann": [1037, 1039], "yanni": 412, "yannick": [1037, 1039], "yao": [0, 377, 391, 401, 1043, 1044, 1045, 1046, 1053, 1054, 1055, 1056], "yap": 1044, "yar": 1051, "yareyaredesuyo": 1055, "yaroslav": [0, 401, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1053, 1054, 1055, 1056], "yarowski": [324, 906, 1019], "yashika": 1049, "yasmeen": 1050, "yat2016": 412, "yate": [595, 735], "yates2011": 595, "yau": [1040, 1041, 1042, 1043, 1044], "yaxi": [46, 49, 93, 118, 127, 141, 212, 235, 237, 240, 258, 293, 298, 354], "ye": [354, 388, 394, 406, 663, 664, 876, 893, 1002], "year": [0, 43, 159, 170, 177, 187, 188, 189, 215, 216, 233, 330, 377, 379, 384, 392, 416, 420, 807, 812, 814, 888, 1002, 1006, 1026, 1030], "yearli": [43, 395], "yearremodadd": 156, "yeast": [292, 840], "yee": [1044, 1045], "yegelwel": 1049, "yeh": 1050, "yelit": 1043, "yellow": [70, 119, 343, 1007], "yellowbrick": 1025, "yellowgreen": [216, 218, 225, 360], "yen": [1043, 1044], "yenchen": [0, 1043], "yenchenlin": 1043, "yenugula": 1055, "yeo": [313, 317, 885, 897, 1016, 1045, 1051, 1053], "yep": 383, "yerr": [105, 110, 112, 142, 145, 169, 295, 319, 335], "yesy": 400, "yesyesclassificationclassificationnumb": 400, "yesyesdo": 400, "yesyesfew": 400, "yesyesllel": 400, "yesyespredict": 400, "yesyessgdclassifiersgd": 400, "yesyessgdregressorsgd": 400, "yesyestextdatatext": 400, "yet": [48, 90, 200, 233, 263, 274, 356, 369, 375, 379, 384, 392, 397, 398, 403, 416, 417, 419, 420, 422, 452, 456, 465, 466, 558, 559, 582, 783, 989, 995, 1002, 1006, 1012, 1020, 1026, 1046, 1054], "yeung": 1043, "ygrid": [50, 306], "yhoo": 51, "yi": [514, 1008, 1041, 1045, 1046, 1049], "yichuan": [1043, 1044], "yield": [47, 48, 62, 88, 109, 110, 111, 112, 148, 200, 210, 215, 230, 233, 278, 292, 308, 313, 340, 345, 354, 355, 363, 367, 369, 374, 385, 394, 409, 412, 414, 416, 417, 419, 420, 421, 441, 453, 472, 476, 513, 514, 542, 543, 544, 546, 551, 558, 559, 564, 565, 566, 567, 572, 573, 599, 607, 652, 656, 657, 658, 660, 666, 668, 670, 678, 680, 691, 731, 786, 793, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 840, 843, 901, 902, 947, 954, 956, 957, 963, 998, 1000, 1002, 1003, 1006, 1021, 1022, 1042, 1043, 1045, 1048, 1050], "yifan": 1010, "yime": 1045, "ying": [412, 456, 466, 1051], "yinglr": 1047, "yisheng": 1054, "yiyangq": 1051, "yj": [115, 317], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 94, 109, 110, 112, 113, 115, 116, 118, 123, 128, 136, 137, 139, 147, 148, 149, 150, 151, 155, 159, 161, 165, 166, 169, 172, 173, 174, 175, 177, 178, 179, 188, 195, 198, 199, 200, 202, 203, 204, 205, 208, 209, 215, 217, 218, 220, 222, 224, 225, 233, 246, 248, 250, 268, 272, 273, 276, 277, 278, 282, 283, 286, 288, 296, 320, 340, 343, 346, 354, 359, 360, 361, 636], "ylim": [51, 61, 63, 69, 72, 79, 91, 95, 109, 110, 111, 123, 137, 138, 145, 148, 155, 158, 173, 174, 188, 204, 205, 207, 208, 209, 221, 224, 225, 229, 242, 250, 259, 264, 268, 272, 276, 282, 288, 299, 300, 342, 347, 348, 351, 354, 361], "ylorbr_r": 111, "ym": [51, 238], "ymax": [47, 49, 50, 109, 204, 207, 208, 216, 224, 273, 306], "ymazari": 1045, "ymean": 196, "ymin": [50, 109, 204, 207, 208, 216, 224, 273, 306], "yml": 388, "yn": [514, 1007, 1008], "yoav": 1043, "yoch": 1050, "yogendrasingh": 1052, "yojana": 1052, "yokasr": 1047, "yoni": 1040, "yoon": 1048, "yoram": [290, 740], "york": [272, 793, 802, 996, 1006, 1018], "yoshihiro": 1047, "yoshiki": [1040, 1043], "yoshizawa": 1045, "yoshua": [866, 867, 1019], "yosshi999": 1051, "yosuk": [1049, 1050], "yotam": 1053, "you": [0, 30, 54, 58, 61, 103, 118, 143, 144, 147, 149, 167, 170, 184, 189, 191, 202, 216, 219, 244, 249, 256, 261, 268, 273, 274, 280, 299, 322, 323, 326, 328, 329, 333, 336, 347, 354, 363, 367, 368, 369, 374, 375, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 393, 394, 398, 399, 400, 403, 406, 408, 410, 411, 412, 413, 414, 416, 419, 420, 421, 423, 424, 429, 441, 447, 448, 450, 451, 453, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 486, 487, 488, 505, 508, 509, 514, 515, 537, 538, 539, 541, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 587, 593, 594, 595, 596, 612, 613, 615, 616, 632, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 695, 704, 705, 790, 803, 804, 806, 807, 808, 809, 810, 812, 814, 820, 821, 823, 824, 825, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 859, 860, 866, 867, 868, 869, 872, 873, 874, 875, 876, 881, 882, 883, 888, 889, 894, 895, 897, 898, 899, 900, 902, 904, 905, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 928, 953, 971, 995, 996, 1001, 1002, 1006, 1007, 1010, 1012, 1013, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1029, 1030, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "youden": 1006, "younger": 233, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 368, 369, 374, 378, 379, 380, 381, 383, 384, 386, 388, 389, 392, 393, 394, 398, 399, 400, 406, 408, 411, 412, 413, 414, 419, 420, 423, 424, 448, 450, 508, 538, 566, 567, 607, 639, 651, 692, 716, 805, 808, 809, 811, 819, 828, 832, 834, 928, 947, 1003, 1010, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "yourlogin": 380, "yourself": [103, 379, 380, 381, 385, 388, 1010], "ypred": 1044, "yrsold": 156, "yscale": [173, 178, 215, 248, 354], "ystd": 196, "yt": 880, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 124, 149, 166, 174, 175, 176, 180, 199, 205, 211, 228, 242, 250, 259, 260, 261, 264, 268, 288, 297, 306, 311, 332, 343, 348, 354], "yticklabel": [268, 354], "ytrain": 306, "ytrue": 1044, "yu": [200, 412, 456, 466, 663, 1002, 1010, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "yuan": [1051, 1052, 1053, 1054, 1055], "yuchen": [1053, 1054], "yucheng": 1042, "yue": [1049, 1055], "yufeng": 1045, "yuichi": 1044, "yuki": 1051, "yule": [454, 461, 783, 784, 785], "yulia": 1047, "yum": 378, "yun": [1052, 1053], "yung": [1040, 1043], "yunqian": 1002, "yurchak": [0, 401, 420, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "yuri": [1040, 1042], "yusuf": [1052, 1053], "yusuk": 1050, "yusukenagasaka": 1050, "yutaro": 1049, "yuusuk": 1054, "yuval": [409, 455], "yv": 415, "yve": 1050, "yy": [77, 91, 111, 144, 154, 163, 174, 176, 189, 222, 226, 227, 228, 229, 240, 242, 250, 299, 308, 315, 316, 337, 342, 343, 347, 348, 351, 352], "yy_": 222, "yy_coars": 144, "yy_down": 348, "yy_up": 348, "yzhenman": 1050, "z": [50, 91, 144, 163, 174, 176, 189, 225, 227, 228, 235, 237, 242, 247, 262, 299, 306, 308, 315, 318, 337, 343, 348, 352, 377, 384, 409, 417, 419, 558, 559, 590, 644, 669, 676, 690, 691, 694, 698, 704, 729, 790, 889, 1002, 1003, 1010, 1011, 1052], "z_": 417, "z_1": 1002, "z_2": 1002, "z_3": 1002, "z_4": 1002, "z_5": 1002, "z_i": [139, 1010], "z_l": 1010, "z_points_coars": 144, "zablit": 1052, "zac": 1042, "zacchari": 1049, "zach": [1045, 1046, 1051], "zachariah": 1045, "zadrozni": [64, 410, 441, 681], "zaffalon": 273, "zahlii": 1050, "zain": [0, 401, 1051, 1052, 1053, 1054], "zalkow": 1042, "zambelli": 1040, "zamrii": 1047, "zanouda": 1044, "zaxi": [118, 127, 212, 235], "zayd": 1046, "zaytsev": 1040, "zdzieblo": 1054, "zebra": 717, "zedan": 1053, "zeel": 1051, "zeeshan": [1052, 1053], "zempleni": 1051, "zen": 940, "zenin": 1043, "zentrum": 1006, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 85, 87, 110, 112, 113, 121, 124, 126, 137, 138, 147, 149, 150, 155, 167, 170, 184, 195, 200, 201, 203, 206, 208, 209, 214, 215, 216, 219, 220, 221, 225, 230, 233, 246, 249, 250, 252, 258, 262, 264, 270, 273, 278, 282, 283, 286, 298, 313, 323, 324, 347, 350, 355, 356, 358, 362, 367, 368, 375, 382, 386, 394, 410, 412, 414, 417, 419, 420, 421, 422, 425, 450, 456, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 491, 502, 513, 514, 528, 531, 532, 536, 537, 540, 542, 543, 544, 545, 547, 548, 552, 553, 557, 562, 563, 564, 565, 566, 567, 569, 570, 571, 586, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 616, 641, 644, 648, 649, 650, 655, 663, 664, 669, 670, 671, 672, 673, 676, 681, 682, 683, 690, 691, 708, 714, 717, 718, 720, 721, 730, 734, 735, 739, 743, 745, 751, 788, 789, 790, 792, 801, 802, 820, 821, 824, 825, 838, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 879, 881, 882, 884, 885, 886, 888, 889, 895, 896, 897, 898, 902, 909, 917, 918, 919, 920, 951, 980, 991, 996, 1002, 1004, 1005, 1008, 1009, 1010, 1016, 1017, 1018, 1020, 1021, 1022, 1037, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "zero_bas": [491, 513, 514], "zero_class": 250, "zero_divis": [311, 718, 721, 734, 735, 743, 788, 789, 792, 1006, 1047, 1049, 1053, 1056], "zero_impute_scor": 184, "zero_on": [380, 1038], "zero_one_loss": [2, 380, 408, 708, 739, 1006, 1038, 1039, 1040, 1054, 1055], "zero_one_scor": 1038, "zerodivisionerror": [1044, 1047, 1053], "zeros_lik": [82, 217, 282], "zeta": 1021, "zeta_i": 1021, "zev": [1043, 1044, 1045, 1046], "zeyusun": 1050, "zha": [694, 698, 1003], "zhai_pro": 1042, "zhan": 1052, "zhang": [412, 446, 669, 684, 690, 691, 694, 698, 763, 764, 1002, 1003, 1004, 1008, 1020, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1053, 1054, 1055], "zhang02c": 681, "zhang96": [412, 446], "zhao": [1047, 1049, 1050, 1051, 1052], "zhaowei": 1049, "zhaoweiwang": 1050, "zhauniarovich": 1042, "zhdanovich": 1045, "zhechev": 1052, "zhehao": [1050, 1051, 1052, 1053, 1055], "zhenfish": 1051, "zheng": [1043, 1044, 1049], "zhenq": 1045, "zhi": [568, 1012], "zhiqe": 1045, "zhou": [568, 644, 905, 1012, 1045, 1053, 1054], "zht2007": 202, "zhu": [135, 419, 524, 558, 663, 904], "zhuyi": [1045, 1046], "zhuzhunashvili": [412, 466], "ziad": 1055, "zibulevski": [669, 690, 691], "zichen": 1042, "zielinska": 1048, "zihna": [1050, 1056], "ziji": [1045, 1046], "zijlstra": 1040, "zike": 1043, "zimek": 450, "zimmer": [1041, 1051], "zinkov": [1037, 1038, 1039, 1041, 1042], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 360, 361, 362, 378, 419, 833, 1016, 1033], "zisserman": [643, 998, 1006], "zito": [1037, 1050], "ziv": 1043, "zivori": 1043, "zj": [1045, 1046], "zoj613": 1049, "zolisa": 1049, "zoom": [43, 140, 313, 400], "zoom_in_percentile_rang": 313, "zorder": [51, 91, 123, 153, 163, 173, 181, 205, 213, 236, 238, 245, 248, 258, 323, 329, 348], "zou": [135, 202, 419, 524, 558, 661, 1002, 1020], "zou_et_al_criterion_resc": 202, "zoubin": 904, "zoubir": 112, "zouhar": 1050, "zsh": 368, "zuckerberg": 0, "zwinck": 1039, "zxcvbniu": 1044, "zz": 111, "zzrh2009": 419, "z\u00e9": 1045, "\u00e4yr\u00e4m\u00f6": 1002, "\u00f3scar": [1041, 1042, 1043, 1044], "\u00f6zer": 1050, "\u0142ukasz": 1052, "\u015fahin": 1051, "\u0161t\u011bp\u00e1n": 1055, "\u675c\u4e16\u6a4b": [0, 402], "\u8d75\u4e30": 1051}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Iris Dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [190, 318, 320, 383, 392, 419, 1006], "0": [184, 322, 323, 324, 325, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "1": [189, 212, 325, 326, 327, 328, 329, 330, 392, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "10": [100, 1037], "11": 1037, "12": 1037, "13": 1038, "14": 1039, "15": 1040, "16": 1041, "17": 1042, "18": 1043, "19": 1044, "1d": 298, "2": [212, 327, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "20": [102, 354, 375, 1045], "2018": 1026, "20newgroup": 230, "21": 1046, "22": [322, 1047], "23": [323, 1048], "24": [324, 1049], "2d": [51, 85, 123, 129, 189], "3": [63, 199, 328, 1045, 1046, 1051, 1053], "3d": 189, "4": [329, 1037, 1045, 1054], "5": [330, 1022, 1037, 1055], "6": [1037, 1056], "7": 1037, "8": 1037, "9": 1037, "99": 375, "A": [52, 58, 59, 81, 91, 96, 215, 325, 379, 386, 416], "And": [239, 395], "In": 280, "NOT": 385, "One": [207, 229, 282, 325, 342, 416, 1012, 1020], "The": [0, 116, 118, 187, 188, 215, 240, 246, 267, 271, 280, 287, 290, 375, 384, 388, 416, 420, 1005, 1006, 1018], "Will": 392, "With": 253, "__sklearn_is_fitted__": 133, "_safe_index": 931, "abil": 178, "ablat": 252, "about": [0, 188, 392], "absolut": 1006, "access": 413, "accuraci": [190, 247, 354, 358, 1006], "accuracy_scor": 708, "across": 363, "action": 380, "activ": [0, 333], "ad": 412, "adaboost": [135, 136, 137, 419], "adaboostclassifi": [135, 558], "adaboostregressor": 559, "add": [329, 392], "add_dummy_featur": 891, "addit": [419, 998], "additive_chi2_kernel": 763, "additivechi2sampl": 643, "address": 267, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 709, "adjusted_rand_scor": 710, "advanc": 253, "advantag": 412, "affin": [51, 73, 412, 1004], "affinity_propag": 458, "affinitypropag": 444, "agglom": [74, 75, 85], "agglomer": [84, 87, 1023], "agglomerativeclust": 445, "aggress": [995, 1002], "aic": [204, 1002], "algebra": [367, 389], "algorithm": [57, 58, 59, 73, 79, 82, 88, 96, 97, 98, 235, 242, 386, 392, 1000, 1002, 1007, 1009, 1010, 1014, 1022], "alias": 388, "align": 1003, "all": [273, 282, 326, 398, 1052, 1053, 1054], "all_displai": 944, "all_estim": 945, "all_funct": 946, "alloc": [54, 417], "alpha": [161, 358], "alpin": 398, "alreadi": 55, "altern": 995, "am": [145, 252], "amount": 285, "an": [81, 92, 133, 184, 197, 204, 303, 322, 326, 388, 392, 420, 995, 1012], "anaconda": 398, "analysi": [43, 64, 69, 70, 93, 121, 128, 131, 135, 148, 189, 200, 258, 275, 276, 283, 301, 302, 303, 354, 415, 417, 1000, 1009, 1023], "analyz": [52, 995], "angl": [204, 1002], "ani": 392, "anomali": 242, "anova": [167, 346], "api": [2, 41, 133, 255, 256, 322, 325, 327, 368, 382, 387, 394, 403, 408, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1054, 1055, 1056], "appli": 161, "applic": 420, "approach": [109, 204, 273], "approxim": [185, 192, 193, 247, 293, 324, 414, 998], "ar": [100, 267, 325, 392], "arch": 398, "architectur": 1026, "ard": [200, 1002], "ardregress": 649, "arff": 374, "argument": [325, 382, 1048, 1050], "arm64": 388, "arrai": [41, 327, 330, 362, 389, 408, 1054, 1055, 1056], "artifact": 406, "artwork": 0, "as_float_arrai": 933, "ask": 392, "assert": 382, "assert_all_finit": 934, "assign": 412, "assumpt": 90, "atom": [49, 367], "attent": 392, "attribut": [382, 394, 408, 995], "auc": [322, 711], "author": [384, 1037], "autom": 380, "automat": [200, 393, 1002], "auxiliari": 41, "avail": [326, 1033, 1034], "available_if": 966, "averag": [280, 282, 412, 419, 1006], "average_precision_scor": 712, "avoid": [363, 413], "aweb": 1030, "ax": 387, "b": 115, "backend": 388, "backward": 380, "bag": [138, 147, 354, 419, 420, 995], "baggingclassifi": 560, "baggingregressor": 561, "balanc": [272, 1006], "balanced_accuracy_scor": 713, "ball": 1009, "balltre": [849, 1009], "base": [4, 41, 42, 43, 115, 142, 143, 170, 185, 200, 248, 322, 323, 325, 327, 328, 329, 380, 412, 416, 419, 421, 1002, 1014, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "baseestim": [382, 426], "baselin": [193, 215], "basi": [44, 181, 422, 998, 1002], "basic": [179, 233, 393, 414, 422], "batch": [412, 417], "bay": [61, 62, 1008], "bayesian": [25, 195, 196, 258, 273, 1002, 1005], "bayesiangaussianmixtur": 802, "bayesianridg": 650, "befor": 184, "behavior": 268, "behind": 0, "being": 188, "benchmark": [46, 49, 91, 354], "bernoulli": [1008, 1011], "bernoullinb": 844, "bernoullirbm": 865, "best": [263, 381, 392], "bestofmedia": 1030, "beta": 417, "betawork": 1030, "between": [97, 284, 1002], "bia": 138, "bic": [204, 263, 1002], "biclust": [27, 56, 57, 58, 185, 376, 409], "biclustermixin": 427, "bigger": 369, "bike": [43, 52, 189], "bin": 1016, "binar": [872, 892, 1016, 1017], "binari": [280, 292, 330, 1002, 1006], "birch": [77, 412, 446], "birchbox": 1030, "bisect": [78, 412], "bisectingkmean": [326, 447], "blind": 122, "bnp": 1030, "boil": 385, "boltzmann": [311, 1011], "bonu": 161, "book": 1030, "boost": [43, 141, 145, 146, 147, 148, 149, 150, 151, 189, 215, 322, 323, 325, 327, 328, 419], "bouldin": 412, "bound": 246, "boundari": [152, 157, 296, 337, 347], "branch": 388, "break": 351, "breast": [191, 377], "brier": 1006, "brier_score_loss": 714, "brute": [995, 1009], "bug": [379, 380, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "build": [177, 184, 378, 380, 388, 413, 1055, 1056], "bulk": [49, 367], "bunch": [392, 924], "busi": 267, "c": 386, "c4": 1022, "c5": 1022, "cach": [104, 295, 413], "calcul": [146, 158], "calibr": [5, 60, 61, 62, 63, 64, 148, 185, 215, 410, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "calibratedclassifiercv": 441, "calibration_curv": 443, "calibrationdisplai": 442, "california": 375, "calinski": 412, "calinski_harabasz_scor": 715, "call": [363, 379], "callgrind": 386, "can": [161, 392], "cancer": [191, 377], "candid": [285, 995], "canon": [115, 415], "card": 267, "cardif": 1030, "cardiotocographi": 252, "cart": 1022, "case": [350, 1002, 1006], "categor": [145, 319, 324, 329, 392, 419, 1008, 1016], "categori": [43, 326, 328, 1016], "categoricalnb": 845, "caus": 398, "causal": [187, 188], "cautiou": 188, "cca": [115, 486], "center": [121, 1016], "central": 55, "centroid": [304, 1009], "chain": [105, 254, 292, 393, 413], "chanc": 72, "chang": [249, 380, 395, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "changelog": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "characterist": [282, 283, 1006], "check": [188, 275, 322, 388, 408, 1045, 1046, 1047], "check_arrai": 936, "check_consistent_length": 937, "check_cv": 829, "check_estim": [947, 1056], "check_increas": 641, "check_is_fit": [382, 989], "check_memori": 990, "check_random_st": 938, "check_scalar": 939, "check_scor": 716, "check_symmetr": 991, "check_x_i": 935, "checker": 41, "checklist": 380, "chi": [998, 1004], "chi2": 609, "chi2_kernel": 764, "choic": 417, "choos": [46, 400], "ci": [380, 388], "circl": 99, "cite": 0, "claim": [215, 233], "class": [41, 63, 72, 135, 137, 158, 199, 224, 229, 276, 280, 282, 325, 342, 345, 394, 411, 416, 419, 420, 1006, 1009, 1012, 1020, 1021, 1037, 1038], "class_likelihood_ratio": 717, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 102, 162, 173, 174, 175, 176, 180, 185, 231, 250, 276, 279, 280, 283, 292, 296, 304, 311, 322, 331, 336, 347, 354, 376, 422, 1002, 1006, 1007, 1009, 1010, 1020, 1021, 1022], "classifi": [25, 41, 61, 62, 64, 67, 133, 159, 199, 254, 270, 287, 292, 296, 322, 330, 337, 340, 343, 354, 362, 410, 419, 1000, 1009], "classification_report": 718, "classifierchain": [840, 1007], "classifiermixin": 429, "classifiertag": 925, "classnameprefixfeaturesoutmixin": 428, "clear": 1047, "clear_data_hom": 490, "clone": [382, 437], "close": [379, 388], "cloud": 123, "cloudpickl": 406, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 121, 185, 326, 328, 355, 376, 409, 412, 417, 1006, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "cluster_optics_dbscan": 459, "cluster_optics_xi": 460, "clustermixin": 430, "co": [57, 59, 409], "co2": 177, "code": [0, 46, 121, 130, 380, 382, 385, 386, 388, 417, 1041, 1042, 1043, 1044, 1045], "coeffici": [170, 188, 195, 219, 220, 286, 412, 1006], "cohen": 1006, "cohen_kappa_scor": 721, "coin": [80, 81], "column": [102, 103, 254], "column_or_1d": 992, "columntransform": [330, 413, 468], "com": 1030, "combin": [156, 243], "comment": 385, "commit": 380, "committe": 395, "common": [188, 363, 394, 408, 420, 1006], "commun": [0, 380], "compact": 244, "compar": [63, 77, 79, 95, 109, 115, 141, 155, 166, 193, 195, 201, 217, 222, 242, 248, 273, 281, 301, 309, 313, 319, 392], "comparison": [64, 67, 70, 78, 97, 111, 129, 145, 146, 165, 172, 235, 236, 248, 273, 284, 286, 290, 356, 1002], "compat": [41, 322, 380, 382, 408], "compil": [378, 386], "complement": 1008, "complementnb": 846, "complet": [251, 412], "completeness_scor": 722, "complex": [46, 244, 254, 272, 275, 334, 358, 367, 1002, 1009, 1010, 1020, 1021, 1022], "compon": [116, 121, 301, 302, 303, 417, 1009, 1023], "compos": [7, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "composit": [101, 185, 413, 995], "compoundkernel": 617, "compress": [53, 86, 367], "comput": [41, 55, 73, 81, 82, 96, 97, 100, 109, 141, 208, 220, 366, 367, 413, 416, 1013, 1027], "computation": 369, "compute_class_weight": 940, "compute_optics_graph": 461, "compute_sample_weight": 941, "concaten": 106, "concentr": 258, "concept": [394, 1002], "conclud": [43, 239], "conclus": [46, 52, 172, 200, 204, 290, 296, 320, 347], "conda": 378, "condit": [189, 324, 1013], "confid": 148, "config_context": 472, "configur": [367, 368], "confus": [266, 412, 1006], "confusion_matrix": 723, "confusionmatrixdisplai": [243, 702], "connect": [412, 420], "consensu": 1002, "consensus_scor": 724, "consider": 267, "constant": [215, 267, 996], "constantkernel": 618, "constraint": [151, 153, 327, 329, 412, 419], "construct": 248, "consum": 249, "content": 392, "conting": 412, "contingency_matrix": 719, "continu": [314, 380], "contribut": [380, 392], "contributor": [0, 379, 380, 395, 1041, 1042, 1043, 1044, 1045], "control": [363, 419, 1010], "convent": 381, "converg": 135, "convergencewarn": 576, "convex": 225, "cookbook": 181, "coordin": 204, "core": [0, 47, 369, 379, 386, 392, 395, 1008], "corpu": 420, "correl": [188, 191, 415, 1006, 1014], "cosin": 1004, "cosine_dist": 765, "cosine_similar": 766, "cost": [267, 358, 1022], "countvector": 593, "covari": [8, 70, 108, 109, 111, 112, 113, 185, 260, 414, 1000, 1045, 1049, 1050, 1051, 1053, 1054, 1056], "coverag": [380, 388, 1006], "coverage_error": 725, "covertyp": [252, 375], "craft": 385, "crash": 392, "creat": [102, 128, 135, 219, 243, 280, 320, 346, 347, 392], "credit": 267, "criteria": [202, 392, 1002, 1022], "criterion": [204, 324, 995, 1020], "cross": [43, 114, 115, 161, 169, 185, 204, 267, 268, 269, 271, 272, 276, 278, 283, 320, 346, 363, 411, 415, 416, 995, 1002], "cross_decomposit": [9, 1047, 1049, 1051, 1053, 1055, 1056], "cross_val_predict": 830, "cross_val_scor": [277, 831], "cross_valid": [416, 832], "cubic": 196, "cumul": 1006, "curat": 379, "curv": [62, 64, 196, 248, 255, 264, 270, 275, 280, 282, 410, 1001], "custom": [133, 271, 330, 339, 420, 1016, 1021], "cut": [267, 287], "cv": [268, 363], "cv_results_": 995, "cython": [381, 386, 388], "d": [416, 1009], "d2_absolute_error_scor": 726, "d2_log_loss_scor": 727, "d2_pinball_scor": 728, "d2_tweedie_scor": 729, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 81, 82, 83, 88, 90, 91, 96, 97, 99, 100, 102, 107, 109, 111, 113, 115, 116, 122, 123, 126, 127, 128, 136, 142, 143, 146, 149, 151, 152, 156, 166, 169, 170, 178, 180, 184, 187, 190, 191, 193, 196, 201, 208, 209, 219, 243, 248, 255, 263, 268, 270, 274, 279, 280, 282, 283, 286, 296, 300, 305, 311, 313, 317, 318, 319, 329, 332, 343, 346, 349, 350, 355, 356, 363, 367, 369, 385, 392, 394, 412, 413, 416, 421, 1016, 1020, 1030], "dataconversionwarn": 577, "datadimensionalitywarn": 578, "datafram": [322, 329, 392, 1054], "dataiku": 1030, "datarobot": 1030, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 91, 95, 102, 115, 117, 118, 119, 121, 129, 135, 141, 144, 145, 156, 161, 172, 174, 176, 177, 179, 181, 185, 187, 188, 189, 195, 198, 200, 204, 215, 217, 224, 233, 235, 236, 242, 247, 252, 253, 267, 271, 279, 280, 287, 290, 292, 320, 336, 337, 340, 347, 354, 359, 372, 373, 374, 375, 376, 377, 385, 392, 422, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "davi": 412, "davies_bouldin_scor": 730, "dbscan": [82, 412, 423, 448], "dbscan_clust": 88, "dcg_score": 731, "deal": [41, 392], "debian": 398, "debug": 388, "debugg": 386, "decis": [135, 136, 144, 152, 157, 185, 247, 267, 287, 296, 328, 330, 337, 347, 357, 358, 359, 360, 361, 362, 392, 395, 411, 1022], "decisionboundarydisplai": 636, "decisiontre": 136, "decisiontreeclassifi": 917, "decisiontreeregressor": [324, 918], "decod": 420, "decompos": 417, "decomposit": [11, 114, 115, 120, 121, 138, 185, 376, 415, 417, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "decreas": [142, 143, 190], "deep": 392, "default": [249, 300, 380], "default_tag": 942, "defin": [72, 81, 91, 100, 235, 268, 270, 271, 356, 1006], "definit": [233, 286, 311, 1013, 1047], "deflat": 115, "delai": 972, "demand": [43, 52], "demo": [58, 59, 73, 81, 82, 88, 91, 96, 98], "demonstr": [90, 277, 316, 332], "dendrogram": 76, "denois": [44, 124], "dens": 201, "densiti": [262, 297, 298, 306, 328, 418, 950, 1021], "densitymixin": 431, "depend": [189, 249, 253, 378, 1013, 1037, 1050, 1051], "deploi": 392, "deploy": 398, "deprec": [1, 249, 380, 943, 1047], "descent": [204, 223, 229, 1002, 1020], "descript": 187, "design": 177, "det": [270, 1006], "det_curv": 732, "detail": [998, 1020, 1021], "detcurvedisplai": 703, "detect": [48, 242, 252, 270, 299, 300, 1006, 1012, 1021], "determin": [112, 200, 414, 1002, 1006], "develop": [132, 133, 185, 249, 378, 381, 382, 383, 387, 388, 389, 995, 1032, 1053], "devianc": [149, 1006], "devic": 408, "diabet": [161, 253, 287, 377], "diagnost": 377, "dict": 420, "dict_learn": 550, "dict_learning_onlin": 551, "dictionari": [83, 121, 124, 130, 417], "dictionarylearn": 536, "dictvector": [356, 586], "did": 392, "diff": 388, "differ": [75, 79, 95, 109, 181, 189, 313, 316, 319, 340, 347, 382, 392, 403, 412, 1002], "digit": [68, 85, 91, 162, 236, 311, 332, 333, 377], "dimension": [104, 235, 238, 254, 302, 318, 355, 1000, 1003, 1009, 1023], "direct": 232, "directli": 392, "dirichlet": [54, 417, 1005], "discount": 1006, "discov": 41, "discret": [152, 180, 314, 315, 1016], "discrimin": [69, 70, 1000], "discriminant_analysi": [12, 1045, 1046, 1049, 1051, 1052, 1053, 1056], "discuss": 379, "disk": 55, "dispatch": 390, "displai": [124, 220, 243, 244, 254, 327, 328, 329, 388, 1034, 1053], "distanc": [27, 111, 330], "distance_metr": 767, "distancemetr": 704, "distort": 124, "distribut": [50, 233, 235, 306, 317, 375, 398, 1003, 1016], "diverg": 417, "divid": 326, "do": [385, 392], "document": [0, 47, 57, 185, 324, 325, 353, 354, 355, 380, 1025, 1026, 1029, 1033, 1037, 1040, 1041, 1044, 1045], "doe": 392, "domain": 1025, "donat": 0, "dot": [181, 422], "dotproduct": 619, "down": 385, "download": [55, 156, 184, 374], "drawback": 412, "drop": [145, 1056], "dtype": 329, "dummi": [13, 1006, 1045, 1046, 1047, 1050, 1051, 1055], "dummyclassifi": 556, "dummyregressor": 557, "dump_svmlight_fil": 491, "dure": 363, "d\u00b2": 1006, "each": [280, 285, 354], "earli": [146, 151, 223], "earlier": 1037, "eas": 381, "effect": [107, 151, 187, 240, 286, 313, 318, 335, 358], "effici": [327, 329, 389], "efficiencywarn": 579, "eigenfac": [45, 121], "eigenmap": 1003, "eigenvector": 55, "elast": [197, 203, 1002], "elasticnet": [200, 323, 651], "elasticnetcv": 652, "element": 394, "elimin": [168, 169, 421, 995], "ellipsoid": [70, 259], "ellipt": 1012, "ellipticenvelop": 473, "embed": [51, 85, 235, 236, 246, 303, 419, 1003], "emeritu": 0, "empir": [94, 112, 246, 414], "empirical_covari": 481, "empiricalcovari": 474, "enable_halving_search_cv": 584, "enable_iterative_imput": 585, "encod": [86, 145, 319, 320, 328, 1016, 1017], "enet_path": 686, "enforc": [1048, 1050], "engin": [43, 52, 190, 1025, 1030], "enhanc": [327, 395, 1025, 1040, 1041, 1042, 1043, 1044], "enrich": 329, "ensembl": [14, 134, 140, 144, 185, 419, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "enthought": 398, "entir": 392, "entri": 1019, "envelop": 1012, "environ": [368, 388, 406], "equival": 273, "error": [135, 139, 146, 148, 161, 195, 219, 270, 286, 388, 398, 1002, 1006], "establish": [97, 193], "estim": [41, 101, 108, 109, 110, 111, 112, 113, 132, 133, 138, 145, 147, 155, 178, 184, 185, 195, 218, 221, 244, 249, 251, 252, 262, 281, 290, 297, 298, 306, 322, 323, 324, 327, 329, 363, 382, 392, 393, 394, 400, 408, 413, 414, 416, 418, 419, 995, 996, 1000, 1002, 1006, 1021, 1025, 1038, 1045, 1046, 1047], "estimate_bandwidth": 462, "estimator_html_repr": 949, "euclidean_dist": 768, "evalu": [52, 72, 91, 94, 112, 215, 252, 267, 274, 277, 286, 311, 319, 355, 393, 407, 409, 412, 416, 419, 995, 1001, 1006], "evernot": 1030, "exact": 417, "exampl": [42, 45, 48, 86, 92, 107, 117, 127, 133, 152, 179, 185, 211, 212, 219, 348, 351, 369, 385, 392, 403, 408, 411, 420, 422, 426, 429, 432, 435, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 509, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 589, 592, 593, 594, 595, 596, 598, 599, 602, 604, 605, 607, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 633, 635, 636, 637, 638, 639, 640, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 693, 694, 695, 696, 697, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 722, 723, 724, 732, 734, 737, 739, 740, 742, 743, 746, 747, 750, 751, 753, 754, 755, 757, 758, 760, 762, 766, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 862, 865, 866, 867, 868, 869, 870, 873, 874, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 895, 898, 902, 903, 905, 906, 907, 909, 912, 913, 914, 915, 916, 917, 918, 923, 924, 938, 948, 950, 957, 962, 963, 964, 965, 966, 979, 989, 1037], "except": [15, 389, 1049, 1053], "execut": [363, 392], "exercis": [160, 161, 162, 163, 185], "exhaust": 995, "exist": 380, "exp": [181, 422], "expans": 195, "expect": [189, 324, 1013], "experi": [0, 72, 379], "experiment": [16, 327, 384, 408, 1053], "explain": 1006, "explained_variance_scor": 733, "explicit": 247, "explor": 43, "exponenti": 621, "export": [40, 392], "export_graphviz": 921, "export_text": 922, "expsinesquar": 620, "extend": 1002, "extens": [386, 398], "extern": [374, 1024, 1037, 1046], "extract": [54, 106, 124, 233, 274, 355, 367, 369, 420], "extract_patches_2d": 589, "extrapol": 177, "extratreeclassifi": 919, "extratreeregressor": 920, "extratreesclassifi": 562, "extratreesregressor": 563, "extrem": [385, 419], "f": [165, 1006], "f1": 280, "f1_score": 734, "f_classif": 610, "f_regress": 611, "fa": [121, 128], "face": [45, 83, 121, 251, 375, 1030], "factor": [54, 121, 128, 131, 299, 300, 417, 1012], "factoranalysi": 537, "fail": 385, "failur": [187, 995], "fast_logdet": 951, "faster": [327, 419], "fastica": [121, 122, 123, 424, 538], "fbeta_scor": 735, "featur": [43, 52, 84, 87, 106, 126, 140, 142, 143, 145, 149, 151, 153, 154, 164, 166, 168, 169, 170, 185, 190, 191, 193, 195, 209, 212, 233, 247, 253, 274, 311, 314, 315, 318, 319, 322, 324, 325, 346, 354, 355, 367, 369, 380, 384, 403, 413, 419, 420, 421, 996, 1014, 1016, 1023, 1040, 1041, 1042, 1043, 1044], "feature_extract": [17, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "feature_select": [18, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "featureagglomer": [412, 449], "featurehash": [356, 587], "featureunion": [413, 868], "fedora": 398, "fetch_20newsgroup": 492, "fetch_20newsgroups_vector": 493, "fetch_california_h": 494, "fetch_covtyp": 495, "fetch_fil": 496, "fetch_kddcup99": 497, "fetch_lfw_pair": 498, "fetch_lfw_peopl": 499, "fetch_olivetti_fac": 500, "fetch_openml": [327, 501], "fetch_rcv1": 502, "fetch_species_distribut": 503, "file": [55, 380, 388, 398, 420], "final": [90, 172], "find": 1009, "first": [48, 72], "fit": [29, 58, 63, 90, 122, 128, 142, 143, 148, 149, 177, 195, 196, 197, 209, 212, 217, 221, 280, 292, 300, 305, 320, 349, 363, 382, 393, 403, 408, 419, 1008, 1012], "fitfailedwarn": 580, "fix": [72, 1037, 1040, 1041, 1042, 1043, 1044, 1050], "fixedthresholdclassifi": [330, 804], "flag": 388, "flexibl": [325, 996], "float64": 408, "fold": [388, 416], "footprint": 86, "forc": [995, 1009], "forecast": [52, 177], "forest": [139, 141, 142, 143, 155, 190, 191, 252, 255, 329, 375, 419, 1012], "forg": 378, "format": [374, 385, 392, 1007], "formul": [409, 419, 1000, 1009, 1020, 1021, 1022], "four": 99, "fowlk": 412, "fowlkes_mallows_scor": 736, "framework": 1025, "free": 179, "freebsd": 378, "freez": 392, "french": 215, "frequenc": 233, "frequent": 392, "frequentist": 273, "frobeniu": 417, "from": [17, 51, 124, 170, 190, 319, 322, 368, 374, 378, 392, 420, 1006, 1047], "fruit": 379, "fulli": 187, "function": [41, 49, 70, 181, 205, 219, 220, 225, 236, 268, 287, 324, 346, 356, 389, 416, 419, 422, 998, 1002, 1006, 1021, 1054], "functiontransform": 873, "fund": 0, "futur": 392, "futurewarn": 1047, "gain": [267, 1006], "galleri": [426, 429, 432, 435, 436, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 486, 487, 488, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 509, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 586, 587, 589, 592, 593, 594, 595, 596, 598, 599, 602, 604, 605, 607, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 622, 623, 624, 627, 628, 630, 632, 633, 635, 636, 637, 638, 639, 640, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 693, 694, 695, 696, 697, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 718, 722, 723, 724, 732, 734, 737, 739, 740, 742, 743, 746, 747, 750, 751, 753, 754, 755, 757, 758, 760, 762, 766, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 862, 865, 866, 867, 868, 869, 870, 873, 874, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 895, 898, 902, 903, 905, 906, 907, 909, 912, 913, 914, 915, 916, 917, 918, 923, 924, 938, 948, 950, 957, 962, 963, 964, 965, 966, 979, 989], "gamma": [233, 328, 1006], "gammaregressor": 653, "gaussian": [61, 62, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 257, 258, 259, 262, 263, 264, 313, 422, 1005, 1008, 1016, 1018], "gaussian_process": [19, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaussianmixtur": 803, "gaussiannb": 847, "gaussianprocessclassifi": 615, "gaussianprocessregressor": 616, "gaussianrandomproject": 901, "gdb": 386, "gen_batch": 956, "gen_even_slic": 957, "gener": [10, 25, 52, 58, 61, 70, 73, 81, 82, 88, 90, 96, 97, 99, 100, 109, 111, 113, 119, 122, 123, 124, 142, 152, 166, 169, 172, 178, 179, 181, 185, 194, 195, 196, 200, 209, 215, 217, 248, 263, 270, 286, 300, 305, 311, 323, 332, 349, 350, 363, 376, 380, 394, 417, 419, 1002, 1016, 1026], "genericunivariateselect": 597, "german": 267, "get": [363, 388, 392, 393], "get_config": 631, "get_data_hom": 504, "get_feature_names_out": 326, "get_param": 382, "get_routing_for_object": 964, "get_scor": 737, "get_scorer_nam": 738, "get_tag": 958, "git": 380, "github": 380, "gitter": 1029, "glm": 25, "glossari": 394, "gmm": [260, 261], "goal": 1026, "good": [380, 385], "govern": [0, 395], "gpc": [173, 174, 175, 176, 422], "gperftool": 386, "gpr": [177, 178, 422], "gprof": 386, "gpu": 392, "gradient": [43, 141, 145, 146, 147, 148, 149, 150, 151, 189, 215, 223, 229, 322, 323, 325, 327, 328, 419, 1002, 1020], "gradientboostingclassifi": [419, 564], "gradientboostingregressor": [419, 565], "gram": 197, "graph": [41, 51, 322, 389, 392, 412, 420], "graphic": [392, 1011], "graphical_lasso": 482, "graphicallasso": 475, "graphicallassocv": 476, "greek": 80, "grid": [254, 271, 273, 281, 284, 995], "grid_to_graph": 590, "gridsearchcv": [104, 161, 277, 805], "ground": [72, 195], "group": [326, 328, 416, 1030], "groupkfold": 806, "groupshufflesplit": 807, "grow": 72, "guid": [383, 1032], "guidelin": [380, 382], "halv": [284, 285, 324, 995], "halvinggridsearchcv": 808, "halvingrandomsearchcv": 809, "ham": 1006, "hamming_loss": 739, "hand": 68, "handl": [41, 191, 996], "handwritten": [91, 236, 377], "harabasz": 412, "hard": 419, "has_fit_paramet": 993, "hash": [154, 389, 420], "hashingvector": [355, 594], "haversine_dist": 769, "hdbscan": [88, 328, 412, 450], "help": [379, 392], "helper": [49, 181, 236, 389], "here": 362, "hessian": 1003, "heterogen": [102, 413], "hierarch": [76, 81, 95, 100, 328, 412], "hierarchi": 412, "higher": 368, "highlight": [185, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 1037, 1040, 1041, 1044, 1045], "hing": 1006, "hinge_loss": 740, "histgradientboost": [324, 329], "histgradientboostingclassifi": [419, 566], "histgradientboostingregressor": [326, 567], "histogram": [141, 151, 323, 325, 327, 418, 419], "histori": [0, 1035], "hmm": 392, "hoc": 287, "hole": 239, "home": 273, "homebrew": 378, "homogen": 412, "homogeneity_completeness_v_measur": 741, "homogeneity_scor": 742, "hot": 145, "hour": 52, "hourli": 187, "hous": [145, 252, 375], "how": [161, 363, 380, 386, 392], "howaboutw": 1030, "html": [244, 382], "huber": 1002, "huberregressor": [198, 654], "hug": 1030, "hyper": [29, 148, 271, 324, 995], "hyperparamet": [88, 177, 178, 274, 281, 290, 622], "hyperplan": [227, 344, 345], "i": [330, 362, 385, 392, 416, 1030], "ic": [189, 1013], "ica": [122, 417], "id3": 1022, "idf": 420, "illustr": [104, 176, 181, 303, 422], "imag": [17, 44, 81, 83, 86, 99, 124, 374, 392, 420], "img_to_graph": 591, "impact": [43, 94, 286, 1052, 1053, 1054, 1055, 1056], "implement": [133, 201, 392, 1006, 1009, 1020, 1021], "import": [142, 143, 149, 170, 190, 191, 247, 290, 318, 322, 411, 419, 1014], "improv": [323, 324, 325, 326, 327, 329, 330, 379, 380, 1040, 1041], "impur": [142, 143, 190, 358, 1014], "imput": [20, 182, 183, 184, 185, 322, 330, 996, 1016, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "includ": 392, "inclus": 392, "incom": 187, "inconsist": 363, "inconsistentversionwarn": 581, "incr_mean_variance_axi": 980, "increment": [125, 369, 417], "incrementalpca": 539, "independ": [121, 417], "index": [412, 960], "indic": 268, "individu": [159, 189, 324, 1013], "induct": 89, "infer": 187, "influenc": [46, 49, 367], "infonea": 1030, "inform": [165, 184, 202, 204, 384, 412, 995, 1002], "infrastructur": 0, "infrequ": [326, 328, 1016], "init": 382, "initi": [92, 94, 261], "inplace_column_scal": 981, "inplace_csr_column_scal": 982, "inplace_csr_row_normalize_l1": 987, "inplace_csr_row_normalize_l2": 988, "inplace_row_scal": 983, "inplace_swap_column": 984, "inplace_swap_row": 985, "input": [41, 367, 382, 408, 412, 1016], "inputtag": 926, "inria": 1030, "inspect": [21, 185, 186, 397, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "instal": [378, 398], "instanc": [363, 369], "instanti": 382, "instead": 267, "instruct": 378, "insur": 233, "integr": 380, "intel": 398, "interact": [43, 189, 327, 419], "interfac": [27, 403], "intern": [320, 411], "internet": 51, "interoper": 1025, "interpol": 216, "interpret": [177, 188, 219, 252, 292, 417, 419], "interv": 148, "introduc": 256, "introduct": 1003, "introductori": 179, "invari": [88, 276], "invers": [113, 414, 1018], "io": 406, "iri": [118, 127, 129, 144, 174, 224, 337, 340, 359, 377, 422], "is_classifi": 438, "is_cluster": 439, "is_multilabel": 967, "is_regressor": 440, "iso": [175, 280], "isol": 1012, "isolationforest": [152, 568], "isomap": [235, 236, 693, 1003], "isoton": [22, 245, 410, 997, 1045, 1046, 1047, 1049, 1051, 1052], "isotonic_regress": 642, "isotonicregress": 640, "issu": [379, 380, 388], "iter": [184, 285, 416], "iterativeimput": [183, 632, 996], "j": 1030, "jaccard": 1006, "jaccard_scor": 743, "job": 392, "joblib": [368, 386, 406], "johnson": [246, 1018], "johnson_lindenstrauss_min_dim": 903, "joint": 209, "k": [78, 90, 91, 92, 94, 97, 100, 115, 296, 318, 355, 412, 416, 1006, 1009, 1016], "k_mean": 463, "kappa": 1006, "kbinsdiscret": [314, 316, 874], "kcachegrind": 386, "kddcup": 375, "kddcup99": 252, "kdtree": [850, 1009], "keep": 996, "kei": 406, "kernel": [19, 43, 44, 126, 172, 177, 178, 180, 181, 185, 192, 193, 247, 248, 297, 298, 306, 324, 339, 342, 347, 349, 417, 418, 422, 623, 998, 999, 1004, 1016, 1021], "kernel_approxim": [23, 1047, 1049, 1050, 1051, 1052, 1053], "kernel_metr": 770, "kernel_ridg": [24, 1054], "kernelcenter": 875, "kerneldens": 854, "kernelpca": [126, 540], "kernelridg": 648, "keyword": [325, 1048, 1050], "kfold": 810, "kmean": [93, 97, 323, 451], "kmeans_plusplu": 464, "kneighbors_graph": 862, "kneighborsclassifi": 851, "kneighborsregressor": 852, "kneighborstransform": 853, "knn": [184, 322], "knnimput": 633, "knowledg": 381, "known": [1045, 1046], "kpca": 417, "l": 196, "l1": [53, 200, 206, 208, 231, 350, 421], "l1_min_c": 916, "l2": [219, 350], "label": [41, 72, 280, 332, 333, 334, 375, 376, 412, 416, 419, 1006, 1017, 1019], "label_binar": 893, "label_ranking_average_precision_scor": 744, "label_ranking_loss": 745, "labelbinar": [876, 1017], "labelencod": 877, "labelpropag": 904, "labelspread": 905, "lag": 52, "laplacian": 1004, "laplacian_kernel": 771, "lar": [203, 655, 1002], "larg": 420, "lars_path": 687, "lars_path_gram": 688, "larscv": 656, "lasso": [53, 200, 201, 202, 203, 204, 209, 323, 657, 1002], "lasso_path": 689, "lassocv": 658, "lassolar": 659, "lassolars": 661, "lassolarscv": 660, "latenc": [49, 367], "latent": [54, 115, 417], "latentdirichletalloc": 541, "latest": 398, "layer": [189, 308, 1010], "lda": [70, 129, 417, 1000], "leakag": 363, "learn": [0, 41, 44, 51, 83, 121, 124, 171, 185, 187, 188, 189, 193, 234, 235, 236, 237, 248, 249, 267, 268, 275, 303, 309, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 366, 367, 369, 376, 378, 380, 381, 382, 384, 385, 392, 395, 398, 417, 419, 1001, 1003, 1011, 1019, 1025, 1026, 1028, 1030, 1031, 1033], "learner": [135, 419], "learning_curv": 833, "learningcurvedisplai": 811, "least": [116, 148, 204, 210, 213, 1002], "leav": [358, 416, 1002], "leaveonegroupout": 812, "leaveoneout": 813, "leavepgroupsout": 814, "leavepout": 815, "ledoit": [69, 110, 414], "ledoit_wolf": 483, "ledoit_wolf_shrinkag": 484, "ledoitwolf": [109, 477], "lemma": 1018, "length": [152, 398], "lesson": [187, 188], "level": [177, 178, 368, 412, 419], "liabil": 215, "librari": [367, 368], "libsvm": 374, "likelihood": [109, 195, 196, 276, 1006, 1011], "limit": [145, 172, 367, 398, 406, 420], "lindenstrauss": [246, 1018], "line": [161, 175], "linear": [25, 43, 62, 69, 70, 148, 172, 185, 188, 194, 195, 211, 215, 218, 221, 235, 236, 247, 323, 342, 347, 349, 367, 389, 392, 1000, 1002, 1003, 1004, 1016], "linear_kernel": 772, "linear_model": [25, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "lineardiscriminantanalysi": [327, 554], "linearregress": [217, 662], "linearsvc": [341, 909], "linearsvr": 910, "link": [367, 1006], "linkag": [95, 412], "linnerrud": 377, "linux": [378, 392, 398], "list": [72, 384, 1029], "loa": 177, "load": [44, 46, 55, 83, 91, 118, 141, 143, 145, 149, 161, 170, 190, 208, 233, 236, 243, 247, 255, 274, 282, 283, 292, 296, 318, 319, 343, 346, 354, 355, 356, 373, 374, 385, 392, 420], "load_breast_canc": 505, "load_diabet": 506, "load_digit": 507, "load_fil": 508, "load_iri": 509, "load_linnerud": 510, "load_sample_imag": [511, 512], "load_svmlight_fil": [513, 514], "load_win": 515, "loader": 10, "local": [235, 236, 299, 300, 1003, 1012], "locally_linear_embed": 698, "locallylinearembed": 694, "localoutlierfactor": 855, "lock": [380, 388], "lof": [299, 300], "log": [195, 196, 1006], "log_loss": 746, "logarithm": 1006, "logist": [105, 199, 205, 206, 207, 208, 230, 231, 1002], "logisticregress": [292, 663], "logisticregressioncv": 664, "loo": 416, "look": [52, 248, 349], "loss": [151, 215, 225, 323, 326, 328, 419, 1006, 1054], "lot": 392, "love": 1030, "low": [412, 419, 421], "lower": 368, "lpo": 416, "lsa": 355, "mac": 398, "machin": [171, 185, 187, 188, 189, 311, 338, 388, 1011, 1021], "machinali": 1030, "maco": 378, "macport": 398, "macro": 282, "mahalanobi": 111, "mail": 1029, "main": [47, 215], "maintain": [0, 380, 384, 406], "major": [419, 1045, 1046], "make": [156, 159, 184, 380, 395], "make_biclust": 516, "make_blob": [385, 517], "make_checkerboard": 518, "make_circl": 519, "make_classif": [385, 520], "make_column_selector": 470, "make_column_transform": 471, "make_friedman1": 521, "make_friedman2": 522, "make_friedman3": 523, "make_gaussian_quantil": 524, "make_hastie_10_2": 525, "make_low_rank_matrix": 526, "make_moon": 527, "make_multilabel_classif": 528, "make_pipelin": 870, "make_regress": [385, 529], "make_s_curv": 530, "make_scor": 747, "make_sparse_coded_sign": 531, "make_sparse_spd_matrix": 532, "make_sparse_uncorrel": 533, "make_spd_matrix": 534, "make_swiss_rol": 535, "make_union": 871, "mallow": 412, "manag": [368, 398], "manhattan_dist": 773, "mani": [268, 327, 368, 392, 1054, 1055, 1056], "manifold": [26, 185, 234, 235, 236, 237, 376, 1003, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "manual": [267, 411], "map": [247, 317, 1016], "mar": 1030, "margin": [195, 196, 227, 344, 348], "mark": 996, "markdown": 385, "marker": 380, "market": 51, "match": [214, 1002], "matern": 624, "mathemat": [41, 409, 419, 998, 1000, 1009, 1013, 1020, 1021, 1022], "matric": [41, 389, 1016], "matrix": [54, 55, 180, 197, 266, 412, 417, 1006], "matter": 188, "matthew": 1006, "matthews_corrcoef": 748, "mat\u00e9rn": [181, 422], "max": [109, 1006], "max_error": 749, "maxabs_scal": 894, "maxabsscal": [313, 878], "maximum": [227, 344, 1011], "md": [695, 1003], "mdi": [143, 190], "mean": [78, 90, 91, 92, 94, 96, 97, 142, 143, 184, 190, 219, 355, 412, 1006, 1016], "mean_absolute_error": 750, "mean_absolute_percentage_error": 751, "mean_gamma_devi": 752, "mean_pinball_loss": 753, "mean_poisson_devi": 754, "mean_shift": 465, "mean_squared_error": 755, "mean_squared_log_error": 756, "mean_tweedie_devi": 757, "mean_variance_axi": 986, "meanshift": [96, 452], "measur": [156, 276, 412, 1006], "media": 1029, "median": [1002, 1006], "median_absolute_error": 758, "member": 379, "memori": [86, 329, 367, 386, 388], "merg": 384, "meson": [388, 1055], "messag": [273, 380], "meta": [41, 155, 249, 290, 324, 408, 419], "metadata": [41, 249, 328, 329, 354, 394, 403, 1054, 1055, 1056], "metadatarequest": 961, "metadatarout": 962, "metaestimatormixin": 432, "method": [95, 106, 115, 134, 172, 185, 235, 237, 261, 289, 291, 394, 406, 412, 998, 1012, 1013], "methodmap": 963, "metric": [27, 72, 75, 148, 267, 277, 408, 412, 416, 995, 1004, 1006, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "micro": [280, 282], "min_cluster_s": 88, "min_po": 932, "min_sampl": 88, "mincovdet": 478, "mini": [412, 417], "minibatchdictionarylearn": 542, "minibatchkmean": [77, 97, 121, 453], "minibatchnmf": [326, 543], "minibatchsparsepca": [121, 417, 544], "minim": [385, 1022, 1050, 1051], "minimum": [112, 414], "minmax_scal": 895, "minmaxscal": [313, 879], "misc": 1037, "miscellan": [25, 185, 241, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "mislead": 1014, "miss": [151, 182, 183, 184, 185, 322, 328, 329, 419, 996, 1016, 1022], "missingind": 634, "mix": 103, "mixin": 382, "mixtur": [28, 185, 257, 258, 259, 262, 263, 264, 1005, 1045, 1046, 1050, 1051, 1053, 1055], "mlp": 310, "mlpclassifi": [309, 866], "mlpregressor": 867, "mnist": [231, 310], "mode": [115, 367], "model": [25, 27, 29, 43, 46, 50, 52, 90, 107, 115, 122, 128, 141, 142, 143, 145, 146, 149, 152, 169, 170, 172, 177, 185, 188, 189, 190, 193, 194, 195, 200, 202, 204, 209, 215, 218, 233, 243, 248, 252, 253, 257, 259, 263, 264, 265, 267, 272, 273, 275, 280, 286, 292, 300, 305, 311, 318, 323, 325, 329, 347, 349, 354, 367, 382, 392, 393, 395, 406, 407, 416, 995, 1001, 1002, 1005, 1006, 1008, 1010, 1011, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "model_select": [29, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "modifi": 1003, "modul": [1037, 1045, 1046, 1052, 1053, 1054, 1055, 1056], "mona": 177, "monitor": 380, "monoton": [151, 153, 329, 419], "more": [325, 392, 1010], "morgan": 1030, "most": 332, "motor": 215, "mp": 408, "much": 161, "multi": [25, 88, 135, 155, 189, 209, 224, 238, 251, 277, 280, 308, 361, 386, 1002, 1003, 1006, 1010, 1021, 1022], "multiclass": [30, 41, 185, 230, 282, 289, 290, 322, 389, 410, 1006, 1007, 1046, 1049, 1050, 1051], "multicollinear": 191, "multidimension": 235, "multilabel": [27, 119, 250, 292, 376, 389, 1006, 1007], "multilabel_confusion_matrix": 759, "multilabelbinar": [880, 1017], "multinomi": [207, 231, 1002, 1008], "multinomialnb": 848, "multioutput": [31, 185, 291, 1007, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055], "multioutputclassifi": [841, 1007], "multioutputregressor": [842, 1007], "multipl": [106, 254, 277, 363, 387, 416, 995, 996, 1006, 1045, 1046], "multitaskelasticnet": 665, "multitaskelasticnetcv": 666, "multitasklasso": 667, "multitasklassocv": 668, "multivari": [115, 996], "murmurhash3_32": 970, "mutual": [165, 412], "mutual_info_classif": 612, "mutual_info_regress": 613, "mutual_info_scor": 760, "my": 392, "n_featur": 49, "n_job": 392, "naiv": [43, 52, 61, 62, 1008], "naive_bay": [32, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "name": [153, 325, 392, 413], "nan": 996, "nan_euclidean_dist": 774, "nativ": [145, 319, 322, 324, 329], "ndcg_score": 761, "nearest": [100, 185, 293, 294, 295, 296, 301, 304, 305, 322, 996, 1009], "nearestcentroid": 856, "nearestneighbor": 857, "necessari": 385, "need": 392, "neg": [54, 121, 170, 210, 417, 1002], "neighbor": [33, 100, 185, 235, 293, 294, 295, 296, 301, 305, 318, 322, 996, 1003, 1009, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "neighborhood": [301, 302, 303, 1009], "neighborhoodcomponentsanalysi": 858, "nest": [278, 413], "net": [197, 203, 1002], "netbsd": 398, "network": [185, 189, 307, 1010, 1011], "neural": [185, 189, 307, 1010, 1011], "neural_network": [34, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "new": [322, 324, 325, 327, 328, 380, 392, 1024, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "newsgroup": [102, 354, 375], "next": [52, 393], "nightli": 378, "nmf": [121, 326, 417, 545], "nnmf": 417, "nois": [178, 179, 196], "noisi": [124, 179, 219], "non": [43, 54, 121, 148, 210, 215, 219, 235, 278, 330, 342, 349, 417, 1002, 1016], "non_negative_factor": 552, "none": 363, "norm": 417, "normal": [69, 193, 215, 313, 317, 881, 896, 1006, 1016], "normalized_mutual_info_scor": 762, "note": [369, 408, 411, 416], "notfittederror": 582, "novelti": [299, 1012, 1021], "now": [322, 325, 1047], "number": [72, 93, 145, 151, 169, 285, 367, 382, 996], "numer": [188, 330, 368, 382], "numpi": [368, 385], "nusvc": 911, "nusvr": 912, "nystroem": [644, 998], "oa": [69, 109, 110, 425, 479], "object": [41, 243, 268, 382, 392, 995, 1006, 1034], "observ": 187, "obtain": [392, 416], "off": [267, 287, 1002], "offici": 1056, "okcupid": 1030, "older": 1037, "olivetti": 375, "omp": 1002, "one": [116, 145, 253, 1002, 1006], "oneclasssvm": 913, "onehotencod": [326, 882], "onetoonefeaturemixin": 433, "onevsoneclassifi": [837, 1007], "onevsrestclassifi": [292, 838, 1007], "onli": [212, 232, 1048, 1050], "onlin": [83, 222, 325, 326, 1020], "onnx": 406, "oob": 139, "openml": [44, 319, 322, 374], "openmp": [368, 381], "oper": [41, 282, 283, 379, 389, 422, 1006], "optic": [98, 377, 412, 454], "optim": [29, 41, 386, 995], "optimis": 178, "option": [382, 411], "oracl": 414, "ordin": 145, "ordinalencod": [328, 883], "ordinari": [213, 1002], "org": [374, 384, 1030], "origin": [86, 126, 279, 303, 313], "orthogon": [214, 1002], "orthogonal_mp": 690, "orthogonal_mp_gram": 691, "orthogonalmatchingpursuit": 669, "orthogonalmatchingpursuitcv": 670, "osx": [392, 398], "other": [319, 374, 392, 419, 1025, 1037], "otto": 1030, "our": [91, 268, 271, 287, 380], "out": [47, 147, 369, 388, 416, 995, 1002, 1008], "outdat": 388, "outlier": [25, 48, 198, 232, 242, 252, 299, 300, 313, 1002, 1012, 1016], "outliermixin": 434, "outlin": 1014, "output": [155, 251, 313, 327, 329, 361, 1022], "outputcodeclassifi": [839, 1007], "over": 254, "overfit": 288, "overhead": 367, "oversubscript": 368, "overview": [290, 387, 406, 412, 1012], "ovo": 282, "ovr": 282, "own": [382, 392, 1006], "p": [416, 1030], "packag": [247, 1025, 1049], "pair": 412, "pair_confusion_matrix": 720, "paired_cosine_dist": 775, "paired_dist": 776, "paired_euclidean_dist": 777, "paired_manhattan_dist": 778, "pairwis": [27, 43, 273, 330, 1004], "pairwise_dist": 783, "pairwise_distances_argmin": 784, "pairwise_distances_argmin_min": 785, "pairwise_distances_chunk": 786, "pairwise_kernel": 779, "pairwisekernel": 625, "panda": [327, 385, 392], "parallel": [41, 143, 368, 386, 412, 419, 971, 995], "parallel_backend": 973, "paramet": [29, 41, 46, 109, 148, 271, 286, 324, 343, 350, 380, 382, 393, 394, 413, 419, 995, 1002, 1006, 1021], "parametergrid": 816, "parametersampl": 817, "parametr": 1011, "parametrize_with_check": 948, "pariba": 1030, "paristech": 1030, "pariti": 97, "parser": [327, 374], "part": [83, 421], "parti": [215, 249, 398], "partial": [116, 187, 189, 253, 1013], "partial_depend": 638, "partialdependencedisplai": 637, "partit": 193, "passiv": 1002, "passiveaggressiveclassifi": 671, "passiveaggressiveregressor": 672, "past": 0, "patch": [124, 420], "patchextractor": 588, "path": [152, 203, 208, 220, 362, 398], "pattern": 131, "pca": [44, 91, 105, 118, 121, 122, 125, 126, 127, 128, 129, 318, 329, 330, 417, 546, 1023], "pdp": 189, "peerindex": 1030, "penalti": [206, 226, 350], "peopl": [0, 392, 1037, 1038, 1039, 1040], "per": 355, "percentag": 1006, "percentil": 346, "perceptron": [189, 308, 673, 1002, 1010], "perform": [72, 78, 276, 318, 324, 326, 330, 332, 355, 367, 380, 381, 412, 416], "period": [43, 216], "permiss": 392, "permut": [142, 190, 191, 279, 322, 416, 1014], "permutation_import": 639, "permutation_test_scor": 834, "perplex": 240, "persist": 406, "phimeca": 1030, "pickl": 406, "pictur": 80, "pinbal": 1006, "pipelin": [35, 101, 102, 104, 105, 156, 167, 185, 188, 244, 249, 254, 274, 319, 346, 382, 392, 393, 413, 421, 869, 1023, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "pitfal": [188, 363], "pixel": 143, "pl": 115, "plai": 346, "plan": 392, "plant": 377, "platform": [378, 388, 398], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 81, 82, 83, 90, 96, 97, 99, 100, 109, 113, 115, 118, 119, 122, 123, 136, 141, 144, 149, 152, 156, 157, 158, 159, 161, 169, 184, 189, 195, 196, 200, 207, 208, 209, 219, 220, 224, 236, 243, 247, 252, 253, 255, 263, 269, 270, 275, 277, 280, 282, 292, 300, 311, 319, 322, 324, 325, 332, 340, 341, 346, 347, 354, 359, 387, 1001, 1013, 1034], "plot_tre": 923, "pls1": 115, "pls2": 115, "plscanon": [415, 487], "plsregress": [415, 488], "plssvd": [415, 489], "point": [123, 267, 287, 303, 406], "poisson": [215, 233, 323, 324, 1006], "poissonregressor": 674, "polar": [52, 329], "polici": 380, "polynomi": [43, 193, 195, 196, 216, 347, 998, 1002, 1004, 1016], "polynomial_kernel": 780, "polynomialcountsketch": [324, 645], "polynomialfeatur": 884, "posit": [121, 325], "possibl": [90, 385], "post": [29, 267, 276, 287, 358, 411], "post1": 1047, "posterior": 181, "power": [116, 215], "power_transform": 897, "powertransform": [313, 885], "pr": 379, "practic": [273, 363, 381, 385, 1003, 1010, 1020, 1021, 1022], "pre": [276, 363, 393], "precis": [280, 1006], "precision_recall_curv": 787, "precision_recall_fscore_support": 788, "precision_scor": 789, "precisionrecalldisplai": [243, 705], "precomput": [130, 197, 322, 417], "predefin": [416, 1006], "predefinedsplit": 818, "predict": [43, 49, 52, 61, 116, 136, 148, 159, 173, 187, 196, 215, 248, 267, 269, 280, 332, 367, 392, 393, 411, 416, 422, 1006, 1017], "predictionerrordisplai": 706, "predictor": 156, "premium": 233, "prepar": [121, 136, 146, 151, 193, 235, 282, 283, 318, 343], "preprocess": [36, 149, 156, 185, 188, 189, 252, 254, 312, 356, 363, 392, 1016, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "preprocessor": 189, "preserv": 388, "preval": 276, "princip": [55, 116, 417, 1023], "prior": [53, 181, 258], "privat": 1054, "probabilist": [128, 173, 417, 422], "probabl": [61, 62, 63, 66, 158, 175, 410, 419, 1021], "problem": [188, 267, 417, 1021, 1022], "process": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 188, 363, 395, 422, 1005], "process_rout": 965, "processor": 393, "product": [181, 233, 388, 392, 406, 422, 626], "profil": 386, "project": [0, 116, 126, 129, 246, 382, 392, 1018, 1023, 1025], "pronounc": 392, "propag": [51, 73, 332, 333, 334, 412, 1019], "proper": [52, 177], "properti": 394, "propos": 395, "provid": 385, "prune": [322, 358, 1022], "public": 1047, "publica": 1030, "pull": [380, 384, 388, 392], "pure": 233, "purpos": [219, 356, 1026], "pursuit": [214, 1002], "pypi": [392, 1056], "pytest": 388, "python": [247, 368, 386, 1024, 1025], "pytorch": 408, "qda": [70, 1000], "quadrat": [70, 181, 422, 1000], "quadraticdiscriminantanalysi": 555, "qualit": [43, 52], "qualiti": [355, 1006], "quantifi": [355, 1006], "quantil": [52, 148, 151, 217, 325, 326, 1002], "quantile_transform": 898, "quantileregressor": [217, 675], "quantiletransform": [313, 886], "quantiz": 86, "question": [392, 1029], "r2_score": 790, "r_regress": 614, "radial": [181, 422, 998], "radius_neighbors_graph": 863, "radiusneighborsclassifi": 859, "radiusneighborsregressor": 860, "radiusneighborstransform": 861, "rand": 412, "rand_scor": 791, "random": [41, 55, 121, 139, 141, 154, 155, 190, 191, 246, 255, 279, 281, 329, 363, 382, 389, 416, 417, 419, 995, 1002, 1018, 1023], "random_project": [37, 1051], "random_st": 392, "randomforestclassifi": 569, "randomforestregressor": 570, "randomized_range_find": 952, "randomized_svd": 953, "randomizedsearchcv": 819, "randomli": 119, "randomst": 363, "randomtreesembed": 571, "rang": 1016, "rangespan": 1030, "rank": [27, 215, 1006], "ransac": [218, 1002], "ransacregressor": 676, "rate": 419, "ratio": [276, 1006], "ration": [181, 422], "rationalquadrat": 628, "rbf": [247, 342, 343, 347, 422, 627, 1004, 1021], "rbf_kernel": 781, "rbfsampler": 646, "rcv1": 375, "reachabl": 412, "read": 380, "real": [42, 48, 107, 185, 375], "recal": [280, 1006], "recall_scor": 792, "receiv": [282, 283, 1006], "recent": 1, "recogn": 68, "recognit": [45, 375, 377], "recommend": [363, 1025], "reconstruct": [44, 53, 124], "reconstruct_from_patches_2d": 592, "recov": 195, "recurs": [168, 169, 421], "redirect": 55, "reduc": [91, 367], "reduct": [104, 235, 239, 254, 302, 318, 355, 1000, 1009, 1023], "refer": [2, 50, 62, 64, 112, 124, 138, 193, 200, 290, 306, 384, 422, 996], "refit": [267, 271], "regard": [267, 411], "region": [80, 273], "register_parallel_backend": 975, "regress": [25, 27, 43, 52, 105, 107, 115, 116, 136, 148, 149, 159, 172, 177, 178, 179, 180, 195, 196, 199, 204, 206, 207, 208, 211, 213, 215, 217, 230, 232, 233, 245, 248, 305, 349, 360, 361, 376, 413, 422, 997, 999, 1002, 1006, 1007, 1009, 1010, 1020, 1021, 1022], "regressor": [25, 49, 136, 148, 195, 219, 320, 322, 325, 419], "regressorchain": [843, 1007], "regressormixin": 435, "regressortag": 927, "regular": [78, 109, 150, 188, 208, 219, 220, 286, 308, 350, 1002, 1010], "reinforc": 392, "relat": [43, 47, 1014, 1025, 1044], "releas": [185, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 384, 398, 1035], "relev": [111, 200, 1002], "remark": [43, 90, 239, 246], "remot": 388, "remov": [392, 421, 1016, 1037], "repeat": [363, 413, 416], "repeatedkfold": 820, "repeatedstratifiedkfold": 821, "replac": 184, "repli": 388, "replic": 406, "report": [380, 385, 1006], "repositori": 374, "represent": [118, 189, 244, 323, 367, 382, 420], "reproduc": [363, 385], "request": [380, 384, 388, 392], "resampl": 976, "rescal": 318, "reshap": 367, "resourc": [285, 368, 380, 1024, 1029], "respect": 276, "respons": [115, 395], "rest": [207, 282], "restart": 386, "restrict": [311, 1011], "result": [46, 47, 58, 64, 73, 81, 82, 83, 90, 91, 96, 97, 100, 109, 111, 113, 122, 123, 136, 141, 156, 159, 184, 193, 200, 220, 248, 252, 277, 292, 300, 319, 349, 355, 363, 995], "retriev": [51, 322], "return": 408, "reuter": 47, "review": [379, 380, 388], "rfe": 598, "rfecv": 599, "rich": [244, 323], "ridg": [172, 196, 198, 213, 219, 220, 248, 320, 677, 999, 1002], "ridge_regress": 692, "ridgeclassifi": 679, "ridgeclassifiercv": 680, "ridgecv": 678, "right": 400, "roadmap": 1026, "robust": [25, 88, 111, 112, 195, 218, 221, 363, 414, 995, 1002], "robust_scal": 899, "robustscal": [313, 887], "roc": [255, 270, 282, 283, 322, 1006], "roc_auc_scor": 793, "roc_curv": 794, "roccurvedisplai": [243, 707], "role": 395, "roll": [239, 382], "root_mean_squared_error": 795, "root_mean_squared_log_error": 796, "rotat": 131, "rout": [41, 249, 328, 329, 394, 403, 1054, 1055, 1056], "routin": [47, 368, 389], "rule": 1006, "run": [46, 91, 277], "runtim": [329, 378], "r\u00b2": 1006, "sa": 252, "safe_mask": 977, "safe_sparse_dot": 954, "safe_sqr": 978, "sampl": [10, 41, 58, 73, 88, 96, 109, 122, 123, 166, 197, 228, 248, 274, 286, 305, 323, 349, 352, 374, 389, 394, 419, 1002], "sample_without_replac": 974, "saniti": 388, "save": 392, "scalabl": [193, 275, 323], "scale": [88, 188, 235, 238, 318, 350, 369, 900, 1003, 1012, 1016, 1023], "scaler": 313, "scatter": [115, 118], "scenario": 1002, "scientif": 1024, "scikit": [0, 41, 249, 268, 322, 323, 324, 325, 326, 327, 328, 329, 330, 366, 367, 378, 381, 382, 384, 385, 392, 395, 398, 1025, 1026, 1030, 1033], "scipi": [368, 1054], "score": [55, 115, 141, 161, 169, 184, 195, 263, 272, 279, 280, 346, 403, 412, 416, 1001, 1006, 1021], "script": 385, "search": [254, 271, 273, 281, 284, 290, 393, 995], "second": [48, 72], "secur": [406, 1055], "segment": [80, 99], "select": [25, 27, 87, 93, 104, 128, 161, 164, 166, 169, 170, 185, 202, 204, 209, 263, 265, 346, 392, 403, 407, 416, 421, 995, 1002, 1043], "selectfdr": 600, "selectfpr": 601, "selectfrommodel": [421, 602], "selectfw": 603, "selectkbest": 604, "selectormixin": 606, "selectpercentil": 605, "self": [324, 335, 1019], "selftrainingclassifi": 906, "semant": 417, "semi": [185, 331, 332, 336, 337, 1019], "semi_supervis": [38, 1047, 1048, 1049, 1053, 1056], "sen": [232, 1002], "sens": 53, "sensit": 267, "separ": [122, 227, 344, 345], "sequenc": [180, 392], "sequenti": [170, 421], "sequentialfeatureselector": [324, 607], "seri": [52, 209, 416], "serv": 406, "set": [48, 107, 109, 127, 156, 184, 219, 267, 280, 330, 343, 358, 392, 411, 416, 1002], "set_config": 907, "set_output": [256, 327, 329, 382], "set_param": 382, "setuptool": 1056, "sever": [233, 237], "sgd": [224, 225, 226, 227, 228, 1002, 1020], "sgdclassifi": 681, "sgdoneclasssvm": 682, "sgdregressor": 683, "shape": 240, "share": [43, 52, 189], "shift": [96, 412], "should": 392, "show": [161, 282], "show_vers": 908, "shrinkag": [109, 414, 419, 1000], "shrunk": 414, "shrunk_covari": 485, "shrunkcovari": 480, "shrunken": 1009, "shuffl": [416, 979], "shufflesplit": 822, "sigmoid": [347, 410, 1004], "sigmoid_kernel": 782, "signal": [200, 417], "signific": 279, "silhouett": [93, 412], "silhouette_sampl": 797, "silhouette_scor": 798, "similar": [180, 1004, 1006], "simpl": [133, 172, 249, 298, 386], "simpleimput": [330, 635], "simul": 187, "sine": [181, 264, 422], "singl": [138, 156, 233, 243, 376, 412, 996], "single_source_shortest_path_length": 959, "singular": [55, 417], "sinusoid": 196, "size": 419, "sketch": 998, "skew": 998, "skewedchi2sampl": 647, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "sklearn_assume_finit": 368, "sklearn_build_enable_debug_symbol": 368, "sklearn_enable_debug_cython_direct": 368, "sklearn_pairwise_dist_chunk_s": 368, "sklearn_run_float32_test": 368, "sklearn_se": 368, "sklearn_skip_network_test": 368, "sklearn_tests_global_random_se": 368, "sklearn_warnings_as_error": 368, "sklearn_working_memori": 368, "skop": 406, "slep": 395, "smacof": 699, "small": 385, "sne": [240, 1003], "so": 392, "social": 1029, "soft": 419, "solido": 1030, "solut": 90, "solver": [222, 417, 1002], "some": 346, "someth": 385, "sometim": 392, "sort_graph_by_row_valu": 864, "sourc": [102, 122, 378], "space": [51, 126, 413, 995, 1003], "spars": [41, 113, 121, 130, 188, 200, 201, 230, 322, 329, 354, 355, 389, 414, 417, 421, 1016, 1018, 1020, 1054], "sparse_encod": 553, "sparsecod": 547, "sparsefunc": 1046, "sparsepca": [417, 548], "sparserandomproject": 902, "sparsiti": [206, 212, 420], "spawn": 368, "speci": [50, 306, 375], "special": 356, "specif": [282, 378, 382, 995, 1025, 1026], "specifi": [153, 392, 995], "spectral": [57, 58, 59, 99, 235, 409, 412, 1003], "spectral_clust": 466, "spectral_embed": 700, "spectralbiclust": [58, 455], "spectralclust": 456, "spectralcoclust": 457, "spectralembed": 696, "speed": [49, 386], "sphere": 237, "sphinx": 380, "spline": [43, 216, 325, 1016], "splinetransform": 888, "split": [145, 324, 363, 416], "splitter": [29, 363], "sponsor": 0, "spotifi": 1030, "sprint": 0, "squar": [116, 148, 181, 210, 213, 219, 422, 998, 1002, 1004, 1006], "stabil": 323, "stabl": 325, "stack": [156, 322, 419], "stackingclassifi": 572, "stackingregressor": 573, "stall": 380, "standard": [388, 1016], "standardscal": [313, 889], "start": 393, "statement": 1026, "statist": [273, 1025], "statlog": 267, "statu": 403, "std": [161, 195], "step": [43, 254, 384, 393, 413], "stochast": [223, 229, 235, 309, 1002, 1003, 1011, 1020], "stock": 51, "stop": [146, 151, 223, 420, 1020], "strategi": [86, 271, 290, 309, 316, 328, 330, 369, 412, 1006], "stratif": 416, "stratifi": 416, "stratifiedgroupkfold": [416, 823], "stratifiedkfold": 824, "stratifiedshufflesplit": 825, "stream": 369, "string": 392, "strip": 354, "strong": 198, "strongli": 1014, "structur": [51, 74, 81, 100, 180, 334, 362], "studi": 252, "submit": 380, "subpackag": 1026, "subsampl": 419, "subscript": 330, "subtleti": 363, "success": [284, 285, 324, 995], "sum": 629, "summar": 406, "summari": [62, 146, 204, 355, 356, 406, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "supervis": [185, 331, 332, 336, 337, 1010, 1019, 1028], "support": [0, 62, 145, 151, 185, 209, 319, 322, 323, 324, 325, 327, 328, 329, 338, 341, 349, 392, 398, 403, 408, 410, 419, 1021, 1022, 1029, 1054, 1055, 1056], "surfac": [144, 247, 359], "svc": [255, 347, 350, 914, 1021], "svd": [55, 121, 417], "svm": [39, 45, 163, 166, 167, 193, 229, 247, 325, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 351, 352, 1002, 1012, 1020, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "svmlight": 374, "svr": [248, 349, 915, 1021], "swiss": 239, "switch": 368, "symmetr": 115, "synthet": [61, 107, 195, 200, 270, 320, 385], "system": 378, "t": [235, 240, 1003], "tabl": 392, "tag": [378, 380, 382, 928], "take": 273, "takeawai": 215, "talk": 1024, "tangent": 1003, "target": [41, 107, 179, 233, 319, 320, 392, 394, 413, 1007, 1016, 1017], "targetencod": [328, 890], "targettag": 929, "task": [25, 209, 1002, 1025], "team": [0, 379], "technic": 395, "techniqu": 236, "templat": 382, "tensor": 998, "term": [355, 394, 420], "test": [44, 109, 165, 276, 279, 286, 354, 358, 378, 380, 382, 388, 389, 416], "text": [17, 47, 185, 244, 274, 336, 353, 354, 355, 356, 375, 420, 1056], "tf": 420, "tfidftransform": 595, "tfidfvector": [355, 356, 596], "than": 392, "theil": [232, 1002], "theilsenregressor": 684, "them": [124, 379], "theoret": 246, "thi": [219, 1026], "third": [215, 249, 398], "thread": 368, "threshold": [267, 287, 330, 335, 411], "throughput": [49, 367], "tie": 351, "time": [43, 52, 141, 209, 247, 248, 354, 416, 1027], "timeseriessplit": 826, "tip": [367, 381, 388, 995, 1003, 1010, 1020, 1021, 1022], "togeth": [253, 282], "toi": [79, 95, 242, 377], "toler": 170, "tomographi": 53, "too": 368, "tool": [389, 392, 408], "top": [355, 1006], "top_k_accuracy_scor": 799, "topic": 54, "total": [154, 358, 419], "tough": 379, "track": [388, 413], "tracker": [380, 1029], "trade": 1002, "tradeoff": [270, 1006], "train": [135, 136, 146, 149, 152, 159, 169, 219, 243, 248, 252, 253, 255, 263, 286, 290, 311, 319, 320, 324, 335, 343, 347, 354, 358, 359, 362, 406, 416, 1009, 1019], "train_test_split": 835, "transform": [102, 103, 104, 107, 115, 140, 154, 254, 324, 325, 326, 372, 392, 393, 413, 1009, 1016, 1017, 1018], "transformedtargetregressor": 469, "transformermixin": 436, "transformertag": 930, "translat": 1025, "tree": [40, 135, 136, 140, 142, 143, 144, 151, 154, 185, 190, 215, 322, 327, 328, 329, 357, 358, 359, 360, 361, 362, 392, 419, 421, 1009, 1014, 1022, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "triag": 379, "trick": [367, 386, 388, 420], "trigonometr": 43, "troubleshoot": 398, "true": [195, 196], "truncat": 417, "truncatedsvd": 549, "trust": 161, "trustworthi": 701, "truth": [72, 195], "tsne": [293, 697], "tune": [29, 148, 267, 271, 274, 287, 324, 330, 411, 995], "tunedthresholdclassifiercv": [330, 827], "tutori": [160, 185, 1024], "tweedi": [233, 1006], "tweedieregressor": [233, 685], "two": [99, 137, 201, 253, 273], "type": [103, 258, 381, 382, 394, 408, 412], "type_of_target": 968, "typic": 379, "t\u00e9l\u00e9com": 1030, "u": 0, "ubuntu": 398, "uci": 290, "unbalanc": [345, 1021], "uncertain": 332, "uncertainti": 52, "unclaim": 380, "undefinedmetricwarn": 583, "under": [180, 392, 1032, 1053], "underfit": 288, "understand": 362, "unfold": 388, "uniform": [313, 1016], "unique_label": 969, "univari": [87, 115, 166, 346, 421, 996], "univers": 382, "unlabel": 1019, "unless": 385, "unstructur": 100, "unsupervis": [1009, 1011, 1023, 1031], "unweight": 403, "up": 1012, "updat": [384, 1047], "us": [44, 45, 51, 55, 121, 122, 124, 153, 154, 156, 170, 177, 218, 229, 231, 273, 277, 282, 292, 314, 349, 354, 355, 362, 363, 369, 381, 385, 386, 388, 392, 416, 417, 420, 421, 1000, 1002, 1003, 1006, 1010, 1020, 1021, 1022, 1030, 1047], "usabl": 392, "usag": [386, 392, 403, 408, 410, 413, 419, 420, 1002], "user": [1029, 1032], "util": [41, 373, 385, 389, 1034, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "v": [87, 100, 109, 110, 112, 116, 126, 169, 189, 190, 198, 207, 233, 276, 282, 288, 358, 412, 419, 996], "v_measure_scor": 800, "valgrind": [386, 388], "valid": [29, 41, 43, 161, 169, 204, 246, 267, 268, 269, 271, 272, 276, 278, 283, 346, 363, 367, 382, 389, 411, 416, 995, 1001, 1002], "validate_data": 994, "validation_curv": 836, "validationcurvedisplai": [328, 828], "valu": [151, 170, 182, 183, 184, 185, 240, 249, 322, 328, 329, 362, 380, 408, 417, 419, 996, 1006, 1014, 1016, 1022], "vanilla": [267, 287], "vari": [72, 308, 335, 412], "variabl": [25, 115, 187, 188, 368, 392], "varianc": [138, 213, 421, 1006, 1016], "variancethreshold": 608, "variant": 183, "variat": [258, 1005], "variou": [49, 85, 222, 240], "vector": [55, 62, 86, 185, 338, 341, 349, 354, 356, 420, 1021], "version": [326, 374, 378, 380, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "versu": [138, 229, 278, 337, 367], "via": [44, 52, 86, 202, 204, 233, 419, 998], "video": [380, 1024], "visual": [5, 29, 51, 91, 131, 146, 243, 248, 255, 268, 310, 323, 343, 412, 413, 1006, 1034], "vote": [159, 419], "votingclassifi": [157, 158, 574], "votingregressor": 575, "wage": [187, 188], "wai": [189, 380, 392], "ward": [81, 100, 412], "ward_tre": 467, "warm": 386, "warm_start": 1010, "warn": 389, "we": 100, "weak": [135, 419], "websit": [384, 1047], "weight": [41, 135, 195, 197, 228, 310, 323, 352, 403, 419, 420], "weighted_mod": 955, "what": [362, 392], "when": 267, "which": 1002, "whitekernel": 630, "who": 1030, "why": [392, 419], "wikipedia": 55, "wild": 375, "window": [378, 398], "wine": 377, "winpython": 398, "wisconsin": 377, "within": 104, "without": [74, 301, 354], "wolf": [69, 110, 414], "word": [354, 420], "work": [41, 185, 353, 367, 379, 392], "workflow": [379, 406], "world": [42, 107, 185, 375], "wrap": 292, "written": 68, "wrong": [188, 392], "x": 232, "x86_64": 388, "xor": [176, 347, 422], "y": [232, 392, 1017, 1019], "yeast": 290, "yep": 386, "yhat": 1030, "you": [161, 392], "your": [382, 385, 1006], "zero": 1006, "zero_one_loss": 801, "zopa": 1030}})