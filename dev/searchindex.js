Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_beta_divergence", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_beta_divergence.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Beta-divergence loss functions", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_hist_gradient_boosting", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.if_delegate_has_method", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 410, 411, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 464, 466, 467, 470, 473, 474, 475, 476, 478, 479, 480, 482, 485, 486, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 711, 712, 713, 714, 715, 716, 717, 718, 723, 729, 730, 731, 732, 733, 734, 736, 737, 738, 740, 743, 744, 749, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 785, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 892, 893, 898, 899, 901, 903, 904, 909, 911, 916, 917, 919, 922, 924, 925, 928, 929, 938, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 980, 983, 984, 985, 986, 987, 988, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "wa": [0, 4, 8, 13, 16, 40, 69, 70, 79, 85, 91, 121, 123, 124, 126, 129, 158, 166, 172, 204, 221, 247, 250, 254, 256, 258, 262, 263, 276, 294, 306, 307, 310, 315, 316, 338, 340, 347, 349, 353, 361, 363, 364, 366, 369, 370, 378, 381, 384, 386, 387, 390, 393, 394, 398, 402, 419, 420, 424, 428, 432, 435, 447, 452, 492, 500, 512, 513, 515, 517, 530, 531, 532, 533, 534, 535, 536, 537, 541, 542, 544, 545, 546, 547, 562, 563, 565, 567, 568, 579, 604, 607, 618, 627, 628, 631, 632, 633, 635, 641, 642, 653, 662, 663, 743, 770, 771, 772, 775, 776, 785, 796, 798, 810, 820, 846, 865, 869, 875, 876, 878, 880, 881, 882, 883, 903, 904, 942, 943, 944, 953, 954, 957, 960, 964, 967, 970, 974, 980, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "start": [0, 4, 7, 10, 12, 26, 53, 57, 63, 66, 73, 85, 98, 109, 115, 120, 122, 143, 146, 154, 156, 172, 176, 177, 185, 196, 197, 198, 204, 214, 217, 221, 230, 244, 256, 264, 276, 310, 314, 338, 347, 349, 353, 354, 355, 356, 359, 366, 367, 370, 371, 376, 378, 381, 387, 390, 394, 395, 399, 400, 402, 419, 421, 428, 432, 434, 510, 515, 587, 594, 609, 622, 636, 643, 645, 653, 654, 655, 667, 671, 756, 757, 770, 771, 772, 775, 776, 785, 815, 816, 817, 819, 821, 829, 914, 938, 943, 950, 953, 958, 959, 968, 975, 978, 980, 988, 989, 999, 1001, 1004, 1006, 1008, 1009, 1010, 1011], "2007": [0, 38, 184, 361, 390, 399, 419, 430, 432, 438, 440, 543, 633, 668, 693, 709, 712, 733, 734, 768, 946, 950, 952, 954], "googl": [0, 17, 376, 390, 421, 973, 985, 996], "summer": [0, 4, 48, 996], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 360, 364, 365, 368, 369, 374, 376, 378, 379, 381, 384, 386, 389, 390, 397, 398, 421, 422, 425, 427, 437, 473, 503, 507, 508, 514, 515, 519, 520, 522, 523, 525, 543, 549, 556, 558, 559, 562, 563, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 659, 660, 662, 663, 803, 840, 847, 922, 951, 955, 964, 966, 968, 969, 974, 975, 977, 978, 981, 989, 996, 998, 999], "david": [0, 2, 37, 80, 175, 198, 257, 259, 338, 339, 340, 361, 390, 397, 400, 440, 509, 513, 544, 545, 599, 600, 605, 700, 770, 869, 944, 950, 958, 967, 978, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "cournapeau": [0, 2, 996, 999], "later": [0, 11, 53, 115, 123, 149, 172, 175, 204, 289, 340, 349, 371, 376, 377, 381, 384, 819, 842, 843, 851, 853, 964, 984, 989, 999, 1002, 1004, 1008], "year": [0, 4, 132, 146, 154, 166, 196, 197, 214, 363, 365, 376, 394, 398, 400, 774, 778, 780, 852, 950, 954, 975, 978, 987], "matthieu": [0, 2, 996, 1000, 1011], "brucher": [0, 2, 996], "work": [0, 4, 9, 17, 27, 32, 44, 45, 48, 52, 56, 66, 77, 84, 95, 112, 113, 119, 121, 123, 124, 129, 132, 146, 153, 155, 156, 157, 158, 166, 167, 185, 188, 204, 205, 213, 218, 219, 220, 241, 243, 254, 267, 282, 283, 307, 309, 310, 327, 330, 333, 339, 340, 344, 349, 354, 355, 356, 360, 361, 364, 366, 367, 368, 369, 370, 371, 373, 377, 378, 379, 381, 386, 387, 388, 390, 391, 392, 395, 397, 398, 399, 402, 403, 404, 405, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 439, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 485, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 672, 684, 717, 749, 753, 754, 755, 756, 763, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 909, 913, 943, 944, 946, 948, 949, 950, 951, 953, 954, 956, 957, 960, 961, 964, 967, 968, 974, 975, 978, 980, 981, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "part": [0, 31, 36, 60, 67, 70, 81, 113, 118, 122, 127, 135, 136, 137, 138, 143, 154, 164, 175, 244, 251, 253, 270, 292, 300, 340, 355, 361, 363, 366, 367, 371, 373, 377, 378, 381, 390, 394, 395, 397, 398, 400, 427, 470, 471, 472, 498, 508, 514, 519, 551, 561, 562, 563, 590, 602, 766, 838, 855, 857, 858, 859, 860, 861, 862, 863, 943, 944, 946, 951, 955, 973, 974, 975, 976, 978, 982, 989, 991, 996, 1004, 1005, 1007, 1009, 1011], "hi": [0, 391, 954, 989], "thesi": [0, 363, 390, 397], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 56, 57, 59, 65, 66, 70, 73, 74, 77, 79, 80, 81, 85, 88, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 122, 124, 127, 129, 132, 142, 143, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 184, 185, 187, 191, 196, 197, 198, 199, 200, 201, 204, 213, 214, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 244, 246, 250, 253, 254, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 270, 271, 274, 276, 282, 283, 285, 295, 298, 299, 300, 303, 306, 307, 308, 310, 315, 317, 325, 333, 338, 339, 340, 343, 347, 349, 353, 354, 355, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 416, 419, 420, 421, 422, 423, 425, 426, 427, 430, 440, 441, 442, 447, 450, 453, 470, 473, 480, 485, 486, 488, 500, 511, 513, 515, 517, 518, 519, 521, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 579, 583, 586, 587, 588, 607, 609, 610, 611, 613, 620, 621, 622, 624, 625, 626, 628, 630, 632, 635, 636, 638, 640, 642, 643, 645, 646, 651, 652, 653, 656, 657, 661, 662, 663, 673, 676, 679, 688, 694, 696, 701, 703, 704, 709, 710, 713, 715, 717, 729, 731, 732, 756, 758, 760, 763, 767, 769, 770, 771, 772, 775, 776, 785, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 830, 838, 840, 846, 847, 851, 852, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 877, 880, 882, 887, 891, 893, 909, 922, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 975, 977, 978, 980, 987, 988, 989, 993, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "2010": [0, 47, 66, 78, 261, 262, 387, 390, 392, 394, 395, 453, 513, 680, 684, 695, 696, 715, 798, 830, 831, 946, 950, 954, 958, 968, 973, 996], "fabian": [0, 2, 183, 201, 218, 288, 996, 997, 998, 999, 1000, 1002, 1003, 1005], "pedregosa": [0, 2, 183, 201, 218, 288, 996, 997, 998, 999, 1000, 1002], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 65, 66, 81, 97, 101, 185, 186, 218, 230, 243, 973, 975, 978, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 65, 66, 72, 81, 88, 89, 97, 101, 102, 179, 185, 186, 193, 194, 218, 220, 228, 230, 243, 300, 329, 330, 379, 973, 978, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 379, 978, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 379, 978, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "vincent": [0, 2, 47, 66, 152, 156, 978, 996, 998, 1000, 1001, 1003, 1006, 1011], "michel": [0, 2, 47, 66, 996, 998, 999, 1001, 1003, 1010], "inria": [0, 5, 9, 30, 37, 52, 54, 74, 81, 155, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 333, 338, 339, 340, 635, 972, 996], "took": [0, 42, 264], "leadership": 0, "made": [0, 69, 80, 88, 100, 132, 156, 196, 214, 247, 260, 307, 325, 344, 353, 361, 363, 366, 369, 378, 379, 390, 398, 402, 422, 425, 427, 437, 473, 480, 565, 566, 568, 607, 608, 633, 642, 662, 663, 710, 758, 772, 775, 776, 785, 789, 790, 791, 810, 813, 814, 955, 960, 970, 978, 986, 988, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1009, 1010], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 56, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 79, 84, 85, 88, 89, 90, 100, 104, 111, 115, 116, 117, 118, 119, 121, 123, 126, 129, 130, 131, 132, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 169, 172, 175, 177, 179, 185, 192, 193, 194, 197, 198, 205, 210, 218, 221, 229, 230, 232, 233, 235, 237, 238, 243, 247, 251, 256, 258, 259, 263, 265, 267, 268, 274, 278, 279, 281, 285, 286, 287, 292, 294, 298, 300, 303, 307, 308, 314, 317, 321, 322, 325, 327, 333, 338, 339, 340, 343, 344, 347, 349, 354, 355, 360, 361, 363, 364, 365, 367, 369, 370, 371, 373, 376, 378, 387, 388, 390, 393, 394, 395, 397, 398, 399, 400, 402, 422, 425, 428, 437, 438, 442, 450, 460, 464, 465, 467, 468, 469, 471, 474, 477, 479, 481, 485, 486, 487, 505, 510, 511, 515, 518, 530, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 559, 561, 565, 566, 567, 568, 570, 587, 588, 594, 598, 601, 608, 609, 610, 611, 623, 629, 636, 643, 645, 651, 653, 665, 672, 675, 676, 677, 678, 688, 692, 711, 738, 739, 757, 767, 770, 771, 775, 776, 777, 778, 783, 785, 792, 801, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 818, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 838, 846, 850, 851, 852, 854, 861, 862, 874, 877, 880, 881, 882, 883, 885, 887, 892, 893, 894, 911, 913, 917, 925, 928, 940, 943, 944, 948, 949, 950, 951, 953, 954, 955, 956, 957, 961, 964, 965, 968, 969, 970, 978, 980, 986, 987, 988, 989, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "public": [0, 78, 360, 366, 367, 369, 370, 376, 377, 378, 379, 394, 397, 641, 648, 662, 663, 669, 950, 958, 996, 1001, 1002, 1007, 1008, 1009], "releas": [0, 204, 311, 354, 356, 364, 366, 368, 373, 376, 378, 398, 422, 425, 442, 445, 467, 468, 473, 481, 489, 492, 501, 515, 538, 539, 541, 542, 544, 576, 579, 605, 607, 611, 617, 623, 625, 629, 635, 646, 657, 665, 693, 723, 763, 772, 775, 776, 785, 799, 815, 817, 834, 843, 846, 848, 852, 853, 869, 870, 872, 877, 881, 904, 922, 970, 972, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "februari": [0, 392, 451, 954, 997, 1001], "1st": [0, 4, 59, 89, 157, 197, 303, 851, 852], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 65, 69, 70, 71, 96, 119, 125, 135, 143, 146, 149, 154, 166, 167, 172, 178, 196, 198, 213, 226, 230, 231, 243, 246, 256, 259, 265, 266, 276, 278, 309, 310, 318, 322, 325, 333, 338, 339, 340, 349, 354, 361, 364, 366, 367, 369, 370, 371, 373, 376, 377, 378, 381, 390, 391, 392, 393, 394, 395, 397, 398, 400, 402, 407, 416, 418, 420, 424, 428, 431, 434, 447, 473, 510, 513, 514, 515, 516, 517, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 565, 566, 568, 579, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 615, 625, 627, 628, 631, 632, 633, 635, 636, 641, 642, 643, 645, 646, 648, 651, 652, 653, 656, 657, 669, 676, 683, 685, 710, 743, 764, 775, 776, 801, 802, 803, 804, 808, 809, 810, 811, 812, 815, 820, 823, 830, 831, 838, 846, 862, 863, 867, 868, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 903, 906, 909, 917, 943, 946, 947, 948, 950, 951, 955, 956, 957, 958, 960, 962, 964, 968, 969, 970, 978, 980, 989, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 60, 73, 90, 113, 120, 127, 129, 132, 143, 149, 154, 155, 164, 166, 172, 185, 196, 216, 217, 223, 229, 243, 251, 256, 261, 278, 293, 298, 309, 333, 338, 339, 353, 360, 361, 363, 366, 367, 370, 376, 378, 387, 389, 390, 391, 394, 396, 397, 398, 400, 425, 427, 442, 464, 476, 485, 486, 515, 532, 533, 536, 537, 540, 541, 542, 547, 565, 566, 568, 587, 622, 623, 629, 665, 666, 667, 668, 669, 670, 770, 771, 772, 775, 776, 785, 801, 802, 808, 809, 810, 811, 812, 832, 833, 840, 856, 880, 881, 882, 883, 895, 922, 943, 946, 951, 954, 955, 957, 962, 964, 968, 970, 971, 973, 974, 977, 978, 980, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1009], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 45, 46, 47, 50, 53, 59, 61, 63, 64, 69, 70, 77, 79, 84, 85, 88, 90, 91, 100, 102, 110, 116, 118, 119, 120, 122, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 172, 175, 196, 197, 198, 214, 221, 225, 227, 232, 234, 235, 242, 243, 244, 246, 250, 256, 257, 258, 259, 262, 263, 270, 278, 282, 283, 298, 303, 306, 308, 309, 314, 315, 316, 322, 328, 330, 338, 339, 347, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 469, 471, 472, 473, 485, 486, 491, 500, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 664, 665, 666, 667, 668, 669, 676, 680, 681, 688, 691, 696, 701, 706, 711, 717, 731, 732, 733, 734, 757, 760, 761, 765, 768, 770, 771, 772, 775, 776, 777, 782, 785, 789, 794, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 892, 894, 896, 898, 909, 929, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 974, 975, 978, 980, 981, 984, 985, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "appear": [0, 8, 46, 48, 113, 166, 251, 253, 254, 282, 283, 292, 294, 299, 314, 338, 339, 340, 361, 364, 366, 370, 378, 392, 395, 465, 466, 532, 544, 545, 555, 587, 604, 605, 607, 674, 678, 688, 692, 694, 764, 773, 789, 808, 809, 810, 811, 812, 874, 877, 911, 950, 956, 960, 996, 1004, 1008, 1009], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 62, 66, 70, 71, 91, 95, 105, 110, 113, 122, 126, 141, 154, 161, 166, 167, 168, 175, 177, 184, 185, 194, 196, 197, 211, 214, 226, 232, 234, 247, 256, 265, 266, 298, 306, 307, 309, 310, 322, 333, 338, 339, 340, 343, 347, 349, 353, 354, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 410, 412, 420, 422, 424, 425, 427, 431, 441, 442, 443, 446, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 492, 511, 515, 517, 518, 534, 535, 536, 537, 540, 541, 542, 543, 547, 558, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 608, 610, 611, 623, 629, 635, 636, 647, 648, 657, 669, 671, 676, 681, 685, 689, 694, 790, 810, 815, 816, 817, 819, 821, 823, 824, 825, 832, 836, 837, 838, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 861, 870, 872, 873, 880, 881, 882, 883, 887, 888, 908, 922, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 980, 989, 993, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 141, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 172, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 229, 230, 231, 232, 234, 235, 236, 238, 241, 242, 243, 245, 246, 247, 251, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 316, 317, 318, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 344, 345, 347, 349, 354, 355, 360, 361, 363, 364, 366, 367, 369, 370, 371, 376, 377, 378, 381, 382, 383, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 440, 442, 444, 445, 447, 448, 449, 450, 452, 453, 454, 459, 460, 461, 462, 470, 471, 473, 474, 481, 482, 483, 484, 487, 489, 493, 494, 495, 496, 502, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 553, 558, 560, 561, 564, 570, 571, 579, 580, 584, 585, 587, 589, 594, 604, 605, 606, 607, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 669, 670, 671, 676, 679, 680, 681, 685, 689, 692, 693, 697, 698, 699, 701, 703, 706, 709, 710, 711, 712, 716, 718, 719, 720, 721, 723, 725, 726, 727, 728, 729, 731, 732, 743, 744, 750, 756, 758, 760, 761, 763, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 837, 838, 839, 844, 845, 846, 847, 848, 849, 851, 852, 853, 860, 864, 865, 866, 867, 868, 869, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 898, 903, 907, 908, 909, 911, 912, 913, 914, 917, 919, 920, 922, 928, 943, 944, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 960, 961, 964, 965, 967, 969, 970, 972, 973, 980, 981, 984, 985, 987, 988, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1011], "month": [0, 4, 154, 361, 366, 369, 379, 996], "cycl": [0, 4, 42, 44, 50, 61, 95, 181, 242, 247, 263, 265, 309, 310, 366, 369, 389, 395, 555, 557, 604, 775, 776, 888, 943, 944, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "thrive": [0, 366], "intern": [0, 26, 70, 81, 100, 123, 135, 150, 161, 196, 276, 278, 315, 340, 349, 354, 361, 363, 367, 371, 374, 376, 378, 384, 387, 390, 394, 395, 397, 398, 400, 401, 416, 418, 423, 443, 446, 488, 511, 512, 514, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 570, 571, 587, 588, 617, 620, 623, 629, 645, 653, 655, 673, 684, 706, 709, 733, 734, 758, 813, 814, 829, 830, 831, 852, 867, 868, 870, 872, 873, 874, 877, 880, 881, 882, 883, 922, 950, 951, 952, 954, 957, 960, 966, 969, 970, 978, 996, 999, 1005, 1007, 1008, 1009, 1010, 1011], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 59, 73, 79, 80, 84, 85, 95, 115, 118, 120, 122, 131, 149, 154, 155, 156, 162, 166, 167, 168, 172, 189, 193, 196, 197, 198, 202, 213, 214, 217, 225, 229, 231, 235, 241, 242, 244, 246, 247, 251, 254, 255, 256, 258, 259, 260, 262, 267, 268, 274, 282, 283, 284, 286, 294, 298, 299, 301, 303, 306, 307, 308, 309, 310, 313, 316, 325, 330, 332, 338, 347, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 367, 369, 370, 373, 374, 376, 377, 378, 379, 384, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 413, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 440, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 470, 471, 474, 475, 485, 486, 493, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 596, 604, 605, 606, 607, 610, 611, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 664, 665, 666, 667, 668, 669, 672, 687, 689, 696, 716, 738, 749, 753, 766, 770, 771, 772, 773, 775, 776, 777, 778, 785, 789, 792, 797, 798, 801, 802, 804, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 887, 891, 892, 893, 911, 917, 923, 939, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 964, 966, 967, 968, 969, 970, 975, 978, 980, 984, 987, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "been": [0, 4, 9, 16, 26, 44, 53, 59, 80, 100, 146, 149, 154, 156, 166, 221, 225, 227, 232, 254, 256, 262, 306, 307, 308, 309, 310, 315, 338, 349, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 376, 377, 378, 379, 384, 387, 388, 390, 392, 394, 395, 397, 400, 413, 416, 447, 449, 450, 452, 456, 464, 500, 511, 513, 514, 526, 527, 544, 545, 558, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 610, 611, 635, 636, 643, 645, 650, 652, 653, 654, 655, 696, 766, 772, 775, 776, 785, 797, 798, 822, 869, 872, 944, 946, 947, 949, 950, 951, 954, 955, 957, 960, 964, 966, 968, 969, 975, 978, 980, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lead": [0, 7, 25, 31, 37, 52, 60, 71, 119, 122, 146, 166, 167, 168, 175, 185, 187, 196, 200, 230, 256, 257, 259, 263, 281, 282, 294, 298, 300, 308, 325, 339, 343, 349, 353, 354, 360, 365, 373, 374, 377, 378, 384, 387, 390, 392, 394, 395, 396, 397, 399, 430, 440, 443, 446, 473, 492, 504, 512, 515, 516, 517, 520, 524, 528, 534, 535, 536, 537, 540, 541, 542, 543, 583, 607, 623, 624, 627, 629, 630, 631, 637, 638, 639, 640, 656, 668, 672, 721, 770, 775, 776, 801, 813, 814, 818, 837, 844, 864, 865, 870, 872, 880, 881, 882, 883, 943, 948, 950, 951, 953, 954, 955, 957, 958, 960, 962, 964, 967, 968, 970, 978, 980, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 90, 91, 92, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 172, 175, 177, 178, 179, 181, 184, 185, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 204, 205, 213, 214, 216, 218, 219, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 246, 247, 250, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 281, 282, 283, 284, 285, 286, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 315, 316, 322, 323, 325, 329, 330, 331, 333, 334, 335, 338, 339, 340, 343, 345, 346, 347, 349, 353, 354, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 411, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 727, 728, 729, 730, 731, 732, 733, 734, 737, 739, 740, 741, 742, 745, 746, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 895, 896, 897, 898, 899, 903, 904, 905, 906, 907, 908, 909, 911, 912, 919, 921, 922, 923, 924, 925, 928, 938, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 980, 981, 982, 984, 985, 986, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "decis": [0, 4, 16, 25, 27, 31, 34, 55, 57, 59, 108, 109, 112, 113, 115, 125, 127, 133, 153, 166, 178, 179, 188, 205, 206, 209, 210, 225, 226, 228, 235, 259, 279, 284, 287, 292, 298, 299, 300, 312, 319, 321, 322, 323, 324, 325, 326, 327, 331, 334, 335, 338, 348, 353, 356, 362, 363, 366, 378, 388, 390, 397, 416, 447, 477, 481, 496, 513, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 570, 571, 608, 609, 610, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 675, 677, 678, 679, 683, 696, 701, 702, 710, 714, 715, 717, 731, 757, 763, 764, 767, 772, 775, 776, 785, 799, 801, 802, 804, 815, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 948, 954, 955, 956, 957, 958, 960, 961, 962, 967, 968, 969, 972, 974, 975, 976, 978, 987, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 55, 56, 60, 61, 66, 72, 100, 119, 122, 127, 143, 146, 149, 154, 157, 166, 167, 168, 175, 182, 185, 188, 189, 190, 192, 196, 197, 198, 202, 214, 218, 227, 229, 231, 232, 241, 243, 246, 247, 251, 256, 259, 265, 266, 267, 285, 294, 298, 299, 303, 310, 325, 335, 338, 339, 340, 349, 353, 354, 355, 356, 360, 361, 364, 365, 367, 368, 370, 371, 373, 376, 378, 381, 384, 387, 388, 390, 391, 392, 394, 395, 397, 398, 399, 400, 402, 419, 420, 421, 422, 424, 425, 427, 429, 430, 431, 436, 437, 438, 440, 465, 480, 491, 492, 499, 500, 504, 509, 511, 518, 528, 529, 532, 533, 560, 561, 584, 585, 608, 626, 632, 633, 648, 668, 672, 712, 717, 743, 744, 756, 770, 771, 772, 774, 777, 782, 786, 787, 788, 790, 791, 795, 796, 803, 804, 807, 840, 849, 852, 853, 856, 860, 862, 863, 864, 865, 878, 886, 892, 893, 903, 909, 915, 916, 917, 940, 943, 944, 946, 948, 950, 951, 953, 954, 955, 956, 957, 959, 960, 961, 962, 964, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 980, 985, 987, 989, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "process": [0, 4, 5, 26, 30, 31, 45, 46, 47, 48, 50, 65, 69, 71, 73, 78, 80, 96, 97, 99, 119, 126, 135, 136, 137, 138, 159, 175, 198, 232, 241, 242, 247, 256, 259, 268, 298, 308, 314, 339, 340, 343, 353, 354, 355, 356, 361, 365, 366, 367, 369, 371, 374, 376, 377, 378, 384, 390, 391, 392, 394, 395, 396, 397, 398, 399, 426, 427, 473, 481, 500, 511, 512, 513, 514, 515, 538, 539, 540, 565, 566, 568, 587, 588, 590, 591, 592, 594, 595, 596, 599, 600, 602, 604, 609, 610, 616, 620, 641, 649, 662, 663, 679, 698, 716, 756, 770, 772, 775, 776, 785, 794, 795, 796, 805, 806, 822, 836, 840, 842, 843, 844, 853, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 922, 943, 946, 950, 954, 957, 964, 966, 968, 970, 972, 973, 974, 975, 976, 978, 980, 981, 988, 989, 991, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 44, 67, 81, 106, 125, 148, 159, 164, 217, 221, 227, 247, 251, 262, 281, 307, 310, 312, 319, 325, 342, 344, 348, 353, 361, 363, 366, 367, 370, 376, 378, 379, 381, 387, 390, 392, 393, 394, 395, 397, 398, 399, 400, 420, 421, 424, 428, 429, 430, 431, 432, 435, 440, 441, 450, 473, 480, 481, 485, 488, 490, 491, 498, 507, 512, 518, 521, 540, 587, 588, 589, 593, 594, 595, 666, 673, 685, 689, 799, 821, 826, 853, 864, 865, 868, 880, 881, 882, 883, 886, 908, 909, 925, 928, 951, 953, 957, 959, 960, 964, 967, 970, 974, 975, 983, 988, 989, 996, 997, 999, 1000, 1002, 1006], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 323, 324, 325, 330, 331, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 377, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 911, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 928, 929, 935, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 980, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "laid": [0, 366], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 69, 70, 103, 108, 114, 116, 123, 133, 138, 164, 168, 196, 198, 204, 214, 241, 243, 254, 256, 259, 264, 268, 274, 309, 316, 318, 321, 322, 325, 338, 352, 361, 363, 364, 366, 367, 368, 369, 371, 376, 378, 390, 393, 395, 397, 400, 406, 414, 415, 421, 422, 424, 425, 427, 450, 459, 460, 461, 462, 476, 492, 493, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 565, 566, 568, 581, 584, 585, 611, 616, 617, 618, 619, 628, 632, 643, 645, 650, 652, 653, 665, 666, 702, 717, 772, 774, 775, 776, 777, 778, 779, 780, 781, 785, 799, 808, 809, 810, 811, 812, 817, 822, 825, 829, 839, 843, 850, 861, 864, 865, 887, 918, 920, 923, 944, 948, 949, 953, 954, 955, 957, 962, 964, 975, 976, 977, 978, 984, 987, 989, 991, 996, 998, 1000, 1002, 1004, 1005, 1008, 1009], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 70, 72, 88, 89, 91, 95, 126, 177, 179, 193, 194, 211, 229, 232, 238, 257, 258, 294, 317, 330, 340, 341, 353, 354, 355, 356, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 373, 376, 378, 379, 381, 384, 387, 389, 390, 395, 398, 401, 423, 425, 426, 427, 428, 431, 435, 442, 465, 466, 476, 478, 488, 498, 500, 513, 521, 541, 565, 566, 567, 568, 571, 581, 608, 616, 620, 635, 636, 643, 645, 650, 651, 652, 653, 673, 679, 681, 687, 693, 712, 733, 734, 744, 753, 754, 755, 766, 768, 772, 775, 776, 785, 795, 797, 800, 803, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 834, 845, 872, 877, 888, 891, 893, 906, 943, 950, 952, 954, 955, 956, 957, 958, 962, 968, 971, 972, 973, 978, 982, 987, 989, 997, 998, 1002], "peopl": [0, 6, 69, 233, 259, 338, 339, 354, 355, 361, 363, 365, 366, 396, 470, 471, 618, 810, 974, 985], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 65, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 142, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 200, 205, 207, 214, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 242, 243, 244, 246, 250, 251, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 281, 282, 286, 289, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 310, 313, 315, 316, 317, 318, 323, 325, 327, 329, 333, 334, 338, 339, 340, 343, 347, 349, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 410, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 465, 466, 470, 472, 473, 475, 477, 478, 479, 480, 481, 485, 486, 487, 489, 492, 493, 494, 495, 496, 497, 500, 501, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 683, 685, 688, 689, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 715, 716, 718, 720, 721, 723, 725, 726, 728, 729, 731, 732, 736, 737, 738, 740, 742, 743, 744, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 778, 783, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 896, 897, 898, 901, 903, 908, 909, 910, 913, 914, 917, 919, 920, 922, 925, 928, 929, 933, 934, 935, 938, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "current": [0, 8, 46, 84, 154, 166, 214, 298, 306, 354, 355, 361, 364, 366, 367, 370, 374, 376, 378, 379, 386, 387, 389, 390, 394, 397, 398, 399, 400, 419, 428, 446, 447, 448, 449, 450, 451, 452, 453, 454, 509, 512, 518, 530, 531, 534, 535, 536, 537, 539, 541, 542, 543, 568, 570, 587, 594, 603, 604, 623, 635, 644, 648, 652, 653, 654, 655, 763, 770, 771, 818, 822, 830, 831, 849, 860, 870, 880, 881, 882, 883, 886, 929, 943, 948, 950, 954, 957, 958, 964, 975, 987, 1004, 1008, 1010, 1011], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 74, 77, 78, 81, 84, 89, 90, 91, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 118, 119, 121, 122, 123, 125, 127, 128, 130, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 166, 167, 169, 172, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 194, 196, 198, 202, 203, 205, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 231, 232, 234, 241, 243, 244, 246, 251, 256, 257, 259, 260, 263, 267, 269, 270, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 301, 303, 306, 308, 309, 310, 314, 315, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 338, 339, 340, 344, 345, 346, 347, 349, 353, 354, 355, 356, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 378, 379, 380, 381, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 400, 402, 404, 410, 413, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 466, 473, 475, 477, 481, 487, 488, 496, 502, 503, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 549, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 664, 665, 666, 667, 668, 669, 670, 677, 678, 684, 687, 692, 696, 710, 716, 717, 733, 734, 754, 755, 770, 771, 772, 774, 775, 776, 780, 785, 789, 790, 795, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 887, 890, 892, 893, 896, 909, 911, 938, 942, 943, 945, 946, 948, 950, 951, 952, 955, 956, 957, 958, 959, 961, 962, 964, 966, 967, 968, 969, 970, 974, 975, 978, 980, 984, 985, 987, 988, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mainten": [0, 366, 373, 376, 381, 383, 950, 975, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "j\u00e9r\u00e9mie": [0, 1, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "du": [0, 1, 2, 996, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "boisberrang": [0, 1, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "jori": [0, 1, 1003, 1004, 1005, 1008, 1009], "van": [0, 1, 360, 392, 447, 452, 511, 604, 669, 673, 944, 951, 954, 960, 978, 997, 998, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1009], "den": [0, 1, 997, 998, 1003, 1004, 1005, 1008, 1009], "bossch": [0, 1, 1003, 1004, 1005, 1009], "lo\u00efc": [0, 1, 1004, 1007, 1009, 1010, 1011], "est\u00e8v": [0, 1, 1004, 1007, 1009, 1010, 1011], "thoma": [0, 1, 103, 225, 298, 357, 379, 868, 950, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "j": [0, 1, 11, 17, 37, 38, 40, 43, 60, 69, 78, 79, 80, 94, 109, 113, 114, 124, 129, 150, 162, 167, 208, 220, 233, 241, 255, 256, 261, 267, 280, 286, 289, 302, 347, 360, 361, 363, 369, 376, 387, 388, 390, 392, 394, 395, 397, 398, 400, 401, 416, 419, 423, 431, 432, 447, 452, 475, 490, 493, 494, 495, 497, 505, 508, 511, 513, 514, 515, 517, 518, 524, 536, 537, 570, 571, 609, 610, 614, 621, 622, 625, 626, 643, 644, 646, 657, 665, 666, 667, 669, 670, 671, 673, 681, 684, 686, 690, 692, 694, 697, 698, 699, 701, 730, 731, 733, 734, 749, 753, 763, 764, 765, 766, 802, 803, 810, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 844, 853, 880, 881, 943, 944, 948, 950, 951, 952, 954, 955, 956, 957, 958, 960, 961, 962, 966, 968, 969, 970, 972, 989, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "fan": [0, 1, 379, 969, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "olivi": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 338, 339, 340, 379, 868, 967, 973, 975, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "grisel": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 338, 339, 340, 379, 973, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "yaroslav": [0, 1, 996, 997, 998, 999, 1002, 1003, 1004, 1005], "halchenko": [0, 1, 996, 997, 998, 999, 1002, 1003, 1004, 1005], "nicola": [0, 1, 146, 302, 635, 950, 967, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "hug": [0, 1, 146, 302, 972, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "adrin": [0, 1, 64, 334, 379, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "jalali": [0, 1, 64, 334, 379, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "julien": [0, 1, 635, 950, 978, 996, 999, 1003, 1004, 1008, 1009, 1010, 1011], "jerphanion": [0, 1, 1008, 1009, 1010, 1011], "guillaum": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 184, 185, 198, 218, 298, 978, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lemaitr": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 184, 185, 198, 218, 298, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "christian": [0, 1, 19, 196, 197, 198, 214, 338, 339, 361, 978, 989, 996, 997, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "lorentzen": [0, 1, 196, 197, 198, 214, 1006, 1007, 1008, 1009, 1010, 1011], "jan": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 197, 231, 852, 996, 999, 1000, 1001, 1002, 1004, 1005, 1008], "hendrik": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 996, 999, 1000, 1001, 1002], "metzen": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 996, 999, 1000, 1001, 1002], "andrea": [0, 1, 31, 73, 100, 114, 187, 230, 299, 300, 315, 333, 334, 379, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mueller": [0, 1, 73, 100, 114, 187, 230, 315, 333, 334, 978, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "vlad": [0, 1, 95, 232, 295, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005], "nicula": [0, 1, 95, 232, 295, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005], "joel": [0, 1, 71, 379, 398, 512, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "nothman": [0, 1, 71, 379, 398, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "hanmin": [0, 1, 299, 1003, 1004, 1005, 1006, 1007], "qin": [0, 1, 299, 363, 398, 1003, 1004, 1005, 1006, 1007], "bertrand": [0, 1, 996, 1002, 1003, 1008, 1009], "thirion": [0, 1, 996, 1002, 1003, 1009], "tom": [0, 1, 188, 204, 276, 278, 300, 301, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dupr\u00e9": [0, 1, 300, 301, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "la": [0, 1, 188, 204, 276, 278, 300, 301, 363, 978, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "tour": [0, 1, 188, 204, 276, 278, 300, 301, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "nell": [0, 1, 39, 220, 228, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008], "roman": [0, 1, 196, 214, 379, 604, 886, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "yurchak": [0, 1, 196, 214, 379, 398, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "meekail": [0, 1, 1010, 1011], "zain": [0, 1, 1010, 1011], "pleas": [0, 12, 17, 26, 70, 109, 115, 116, 117, 123, 129, 132, 143, 154, 166, 168, 177, 200, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 286, 295, 306, 307, 308, 309, 310, 315, 347, 354, 360, 361, 364, 366, 367, 369, 373, 376, 377, 378, 381, 384, 386, 389, 390, 397, 398, 428, 473, 544, 545, 608, 609, 610, 627, 628, 631, 632, 633, 641, 642, 775, 776, 796, 850, 861, 874, 877, 880, 881, 882, 883, 943, 954, 958, 964, 968, 969, 974, 975, 977, 980, 987, 989, 996, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "do": [0, 4, 10, 25, 42, 60, 66, 73, 89, 99, 101, 102, 105, 114, 116, 118, 120, 122, 123, 129, 136, 143, 154, 161, 166, 167, 168, 193, 196, 214, 217, 219, 232, 247, 251, 254, 257, 258, 259, 274, 276, 278, 282, 309, 318, 322, 325, 330, 333, 338, 339, 340, 347, 349, 353, 354, 355, 361, 363, 365, 366, 367, 368, 369, 372, 373, 378, 379, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 428, 439, 480, 513, 515, 519, 521, 529, 532, 558, 559, 560, 565, 566, 568, 622, 623, 629, 632, 633, 636, 643, 645, 653, 712, 738, 753, 757, 788, 791, 805, 806, 810, 836, 837, 838, 840, 845, 851, 853, 857, 858, 860, 861, 862, 863, 880, 881, 882, 883, 891, 928, 943, 946, 948, 950, 951, 954, 955, 957, 958, 962, 964, 969, 970, 974, 975, 978, 980, 987, 989, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "email": [0, 338, 366, 376, 398, 808, 956, 978], "directli": [0, 6, 19, 27, 45, 46, 55, 70, 115, 146, 157, 184, 196, 202, 214, 226, 261, 295, 298, 310, 340, 349, 353, 364, 366, 367, 369, 371, 377, 378, 387, 388, 390, 391, 392, 393, 394, 398, 400, 421, 430, 440, 442, 447, 452, 504, 544, 545, 546, 547, 574, 588, 597, 609, 620, 623, 624, 629, 630, 637, 638, 639, 640, 641, 654, 658, 661, 667, 749, 753, 756, 765, 766, 772, 775, 776, 785, 818, 832, 833, 834, 840, 850, 852, 854, 861, 922, 943, 950, 952, 957, 959, 961, 964, 969, 970, 975, 981, 984, 985, 996, 1004, 1005, 1007, 1008, 1009], "ask": [0, 161, 162, 256, 356, 365, 366, 369, 370, 373, 378, 379, 399, 815, 816, 817, 819, 821, 823, 824, 825, 972, 977], "assist": [0, 366, 376, 964, 978], "report": [0, 4, 8, 32, 69, 74, 143, 157, 184, 254, 264, 276, 306, 313, 349, 361, 365, 367, 368, 371, 373, 376, 378, 381, 390, 394, 588, 626, 635, 641, 662, 663, 677, 689, 704, 705, 713, 758, 759, 762, 802, 811, 867, 885, 903, 950, 957, 974, 975, 977, 997, 1000, 1003, 1004, 1006, 1007, 1009, 1011], "issu": [0, 4, 25, 78, 85, 196, 214, 261, 354, 356, 360, 368, 369, 370, 373, 374, 376, 378, 379, 380, 381, 384, 386, 390, 392, 393, 398, 400, 427, 430, 440, 451, 453, 459, 460, 461, 511, 516, 520, 550, 562, 563, 565, 566, 568, 588, 604, 668, 672, 744, 844, 849, 860, 899, 943, 944, 951, 957, 962, 964, 969, 974, 975, 977, 988, 989, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011], "instead": [0, 4, 5, 6, 48, 53, 55, 70, 100, 113, 117, 126, 143, 146, 149, 196, 198, 211, 214, 221, 247, 253, 257, 274, 281, 298, 306, 307, 308, 309, 310, 325, 327, 338, 340, 349, 353, 354, 360, 361, 364, 365, 366, 367, 369, 370, 373, 374, 376, 377, 378, 384, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 411, 416, 419, 420, 421, 423, 424, 425, 428, 434, 437, 443, 445, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 486, 487, 510, 512, 514, 516, 517, 518, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 537, 539, 541, 542, 545, 547, 567, 584, 585, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 609, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 647, 648, 649, 650, 653, 655, 656, 664, 667, 671, 676, 683, 721, 749, 753, 758, 770, 771, 772, 776, 783, 785, 790, 791, 806, 807, 816, 824, 831, 834, 835, 846, 851, 853, 862, 863, 866, 873, 875, 877, 878, 880, 881, 882, 883, 886, 898, 904, 909, 917, 929, 943, 944, 946, 950, 951, 953, 954, 955, 958, 959, 964, 968, 969, 970, 974, 977, 985, 987, 989, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 57, 61, 63, 64, 66, 68, 79, 85, 88, 89, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 121, 123, 129, 135, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 166, 167, 169, 172, 175, 176, 177, 187, 197, 198, 199, 202, 213, 214, 217, 219, 227, 229, 235, 236, 238, 242, 243, 244, 250, 251, 253, 255, 256, 257, 258, 259, 263, 265, 266, 267, 270, 271, 276, 282, 283, 285, 289, 298, 306, 307, 308, 309, 310, 315, 325, 338, 339, 340, 343, 344, 345, 346, 349, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 376, 377, 378, 381, 388, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 459, 460, 461, 462, 464, 465, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 586, 587, 588, 591, 596, 599, 600, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 682, 684, 687, 689, 718, 738, 749, 753, 754, 755, 756, 763, 765, 766, 770, 771, 772, 774, 775, 776, 777, 782, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 908, 909, 923, 925, 928, 943, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 978, 980, 982, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "what": [0, 4, 9, 12, 40, 45, 52, 53, 85, 96, 100, 118, 166, 185, 202, 204, 212, 227, 294, 338, 340, 343, 349, 354, 361, 366, 367, 369, 371, 373, 377, 378, 379, 380, 390, 396, 397, 398, 480, 513, 565, 566, 568, 623, 629, 673, 857, 858, 860, 861, 862, 863, 880, 881, 882, 883, 953, 954, 955, 957, 970, 975, 977, 980, 996, 1003], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 60, 69, 70, 71, 72, 77, 84, 95, 99, 103, 104, 105, 113, 119, 120, 121, 122, 123, 129, 132, 146, 149, 150, 155, 161, 166, 175, 180, 184, 185, 192, 210, 211, 212, 217, 220, 225, 230, 231, 234, 243, 247, 250, 254, 255, 256, 257, 258, 260, 263, 264, 267, 268, 270, 271, 274, 280, 285, 299, 308, 309, 325, 328, 333, 338, 339, 340, 346, 353, 360, 363, 365, 366, 371, 377, 378, 381, 387, 388, 390, 394, 395, 397, 398, 399, 400, 411, 422, 425, 427, 429, 430, 431, 437, 440, 443, 450, 459, 460, 461, 515, 522, 523, 529, 531, 533, 534, 535, 536, 537, 539, 541, 542, 543, 545, 547, 570, 571, 574, 579, 587, 588, 612, 614, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 652, 653, 655, 656, 657, 665, 666, 667, 670, 671, 679, 684, 695, 696, 697, 698, 699, 703, 704, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 758, 759, 760, 762, 765, 766, 767, 769, 770, 771, 772, 775, 776, 785, 796, 798, 801, 806, 807, 816, 824, 831, 873, 875, 878, 880, 881, 882, 883, 943, 948, 949, 950, 951, 954, 957, 958, 960, 968, 970, 974, 975, 978, 980, 985, 989, 996, 999, 1002, 1004, 1005, 1006, 1009, 1010], "wai": [0, 4, 17, 27, 50, 59, 70, 73, 115, 121, 127, 146, 156, 166, 168, 169, 197, 201, 211, 227, 228, 231, 235, 251, 256, 263, 265, 298, 299, 309, 349, 353, 354, 355, 360, 362, 364, 365, 367, 368, 369, 373, 374, 378, 379, 381, 384, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 405, 422, 423, 429, 430, 431, 437, 438, 440, 441, 447, 473, 532, 533, 540, 549, 566, 576, 577, 588, 609, 643, 644, 653, 654, 655, 680, 682, 693, 711, 712, 729, 730, 732, 738, 749, 753, 763, 768, 794, 802, 819, 840, 846, 851, 856, 882, 883, 925, 928, 943, 944, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 962, 964, 966, 968, 969, 970, 974, 975, 977, 978, 980, 988, 989, 996, 998, 1004, 1009, 1010], "question": [0, 135, 256, 333, 356, 365, 366, 370, 373, 394, 397, 802, 874, 877, 950, 953, 954, 960, 972, 978], "faq": [0, 373, 394, 669, 951, 964], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 59, 68, 69, 70, 73, 77, 79, 85, 101, 105, 110, 111, 114, 117, 118, 119, 120, 122, 123, 127, 129, 143, 154, 156, 164, 166, 167, 168, 169, 172, 177, 185, 186, 192, 197, 198, 199, 200, 203, 204, 210, 214, 221, 222, 227, 230, 233, 234, 235, 237, 247, 251, 252, 254, 256, 257, 258, 263, 265, 266, 268, 269, 270, 276, 278, 280, 282, 283, 294, 307, 308, 309, 322, 323, 325, 328, 333, 338, 339, 343, 347, 353, 354, 355, 356, 361, 364, 365, 367, 368, 370, 373, 377, 378, 379, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 412, 416, 421, 422, 423, 424, 425, 427, 430, 442, 446, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 536, 543, 544, 545, 546, 547, 558, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 599, 600, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 665, 666, 668, 669, 680, 696, 732, 765, 772, 775, 776, 785, 796, 817, 819, 822, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 877, 943, 944, 948, 949, 950, 951, 953, 954, 960, 961, 962, 964, 966, 967, 969, 970, 973, 975, 977, 978, 980, 982, 984, 989, 991, 996, 998, 1001, 1007, 1010, 1011], "you": [0, 14, 16, 24, 70, 117, 118, 121, 123, 143, 146, 157, 162, 167, 184, 197, 198, 227, 244, 251, 256, 257, 263, 271, 282, 306, 307, 310, 314, 317, 338, 349, 353, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 373, 374, 377, 378, 381, 384, 388, 389, 390, 391, 392, 394, 397, 398, 399, 401, 402, 407, 416, 423, 427, 442, 445, 447, 473, 477, 480, 481, 486, 487, 509, 510, 513, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 545, 546, 547, 555, 557, 565, 566, 568, 584, 585, 587, 604, 623, 624, 627, 628, 629, 631, 632, 633, 635, 636, 641, 642, 643, 645, 649, 651, 652, 653, 654, 655, 664, 677, 760, 771, 774, 775, 776, 777, 786, 787, 788, 790, 791, 801, 802, 803, 804, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 830, 832, 833, 837, 838, 845, 846, 847, 857, 858, 860, 861, 862, 863, 865, 867, 868, 872, 874, 877, 880, 881, 882, 883, 909, 943, 944, 949, 950, 954, 955, 958, 960, 961, 964, 965, 968, 969, 970, 973, 974, 977, 978, 980, 981, 984, 987, 989, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 57, 59, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 79, 80, 81, 85, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 141, 142, 143, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 181, 184, 185, 187, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 212, 213, 214, 217, 218, 219, 225, 226, 227, 228, 229, 231, 235, 238, 241, 242, 243, 244, 246, 247, 250, 251, 253, 254, 256, 257, 258, 259, 260, 263, 265, 267, 268, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 293, 294, 295, 298, 299, 300, 302, 303, 306, 307, 308, 309, 310, 314, 315, 317, 318, 322, 323, 325, 328, 333, 338, 339, 340, 345, 346, 347, 349, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 377, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 411, 413, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 434, 435, 437, 439, 440, 442, 443, 444, 445, 446, 450, 459, 460, 461, 464, 473, 476, 480, 485, 486, 489, 498, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 555, 556, 557, 558, 559, 560, 561, 565, 566, 568, 569, 571, 574, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 609, 611, 612, 615, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 666, 668, 669, 670, 671, 672, 675, 676, 677, 678, 680, 683, 685, 687, 688, 694, 696, 697, 698, 699, 701, 702, 704, 705, 707, 708, 712, 713, 714, 715, 717, 718, 721, 727, 730, 731, 732, 733, 734, 738, 754, 755, 757, 758, 759, 760, 762, 763, 764, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 830, 831, 832, 833, 836, 837, 838, 840, 841, 842, 846, 847, 848, 851, 852, 853, 857, 864, 865, 870, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 888, 890, 892, 896, 898, 903, 908, 909, 915, 917, 919, 922, 924, 925, 928, 935, 938, 939, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "contribut": [0, 13, 123, 154, 265, 356, 363, 364, 367, 368, 369, 373, 378, 379, 381, 395, 396, 397, 400, 425, 427, 530, 531, 536, 537, 701, 704, 731, 948, 954, 957, 962, 969, 972, 974, 975, 978, 987, 996, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "activ": [0, 164, 204, 241, 247, 257, 312, 319, 340, 360, 361, 364, 366, 373, 376, 378, 379, 381, 391, 473, 479, 503, 609, 612, 614, 627, 628, 630, 631, 632, 640, 641, 642, 659, 660, 661, 662, 663, 689, 694, 770, 829, 830, 831, 868, 950, 951, 952, 953, 957, 958, 959, 967], "who": [0, 69, 354, 356, 361, 366, 372, 379, 381, 815, 816, 817, 819, 821, 823, 824, 825, 972, 974, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 57, 59, 63, 69, 70, 77, 79, 84, 85, 95, 103, 105, 113, 117, 119, 121, 122, 123, 127, 129, 142, 143, 144, 146, 149, 151, 154, 162, 166, 167, 168, 169, 172, 176, 177, 179, 185, 188, 189, 192, 196, 197, 198, 201, 205, 213, 214, 217, 228, 230, 235, 247, 254, 256, 257, 259, 262, 263, 265, 266, 267, 276, 279, 284, 287, 289, 292, 298, 299, 300, 302, 306, 307, 308, 309, 318, 321, 322, 323, 325, 327, 338, 339, 340, 343, 344, 347, 349, 353, 354, 355, 359, 360, 361, 363, 364, 365, 366, 367, 369, 371, 373, 374, 376, 377, 378, 381, 384, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 416, 417, 418, 420, 421, 424, 425, 426, 428, 430, 440, 441, 443, 445, 459, 461, 469, 473, 475, 480, 485, 509, 510, 512, 513, 518, 523, 526, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 584, 585, 586, 587, 588, 599, 609, 610, 612, 620, 621, 622, 623, 624, 627, 629, 630, 631, 633, 637, 638, 639, 640, 649, 653, 655, 658, 661, 664, 668, 671, 672, 676, 686, 689, 698, 704, 705, 713, 718, 738, 754, 755, 758, 759, 762, 770, 771, 772, 775, 776, 785, 788, 791, 795, 796, 798, 799, 800, 802, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 829, 830, 831, 833, 835, 836, 841, 842, 846, 850, 853, 857, 861, 874, 877, 880, 881, 882, 883, 892, 911, 920, 922, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 967, 968, 969, 970, 974, 975, 977, 978, 980, 985, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "help": [0, 4, 9, 11, 16, 69, 73, 100, 106, 214, 217, 257, 259, 295, 322, 325, 339, 340, 349, 353, 354, 367, 368, 369, 370, 371, 373, 374, 378, 379, 380, 384, 390, 391, 394, 398, 400, 412, 513, 553, 604, 627, 631, 642, 662, 663, 669, 690, 809, 880, 881, 882, 883, 944, 948, 949, 951, 953, 954, 956, 958, 965, 970, 973, 974, 975, 977, 978, 989, 1002, 1003, 1004, 1007, 1010], "triag": [0, 356, 366, 368], "pr": [0, 131, 354, 366, 368, 373, 398, 716, 954, 1006, 1008], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 69, 70, 71, 72, 73, 74, 78, 80, 84, 85, 87, 88, 89, 92, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 143, 144, 145, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 172, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 306, 308, 309, 310, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 353, 354, 356, 358, 359, 361, 363, 367, 368, 369, 370, 371, 373, 374, 376, 377, 384, 387, 388, 390, 394, 396, 398, 399, 400, 402, 406, 410, 411, 416, 419, 422, 425, 427, 430, 432, 436, 437, 438, 440, 442, 443, 445, 447, 450, 452, 459, 460, 461, 465, 468, 469, 472, 473, 474, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 591, 592, 595, 596, 597, 599, 600, 604, 605, 606, 607, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 662, 663, 666, 667, 668, 669, 670, 671, 672, 680, 682, 693, 697, 698, 699, 712, 718, 732, 753, 756, 760, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 803, 804, 805, 806, 807, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 829, 830, 831, 833, 836, 837, 838, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 872, 873, 874, 875, 877, 878, 881, 883, 884, 885, 886, 903, 904, 908, 909, 912, 913, 921, 923, 925, 928, 943, 944, 946, 948, 949, 951, 953, 954, 955, 957, 959, 960, 961, 962, 966, 967, 969, 970, 972, 974, 976, 977, 978, 980, 983, 987, 988, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "juan": [0, 357, 996, 1007, 1008, 1009, 1010, 1011], "carlo": [0, 230, 357, 397, 400, 588, 618, 619, 946, 959, 996, 1007, 1008, 1009, 1010, 1011], "alfaro": [0, 357, 1007, 1008, 1009, 1010], "jim\u00e9nez": [0, 357, 1004, 1007, 1008, 1009, 1010], "arturo": [0, 37, 175, 257, 259, 338, 339, 340, 357, 1010, 1011], "amor": [0, 37, 175, 257, 259, 338, 339, 340, 357, 1010, 1011], "luci": [0, 262, 357, 1007, 1008, 1009, 1010, 1011], "liu": [0, 262, 357, 540, 701, 731, 954, 960, 999, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011], "maxwel": [0, 357, 1006, 1009, 1010], "martin": [0, 357, 697, 698, 699, 950, 954, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "loyola": [0, 357, 1009, 1010], "sylvain": [0, 357, 1000, 1005, 1006, 1007, 1008, 1009, 1010], "mari\u00e9": [0, 357, 1005, 1006, 1007, 1008, 1009, 1010], "chiara": [0, 357, 1006, 1007, 1008, 1009, 1010, 1011], "marmo": [0, 357, 1006, 1007, 1008, 1009, 1010, 1011], "norbert": [0, 357, 998, 1008, 1009, 1010], "prein": [0, 357, 1008, 1009, 1010], "reshama": [0, 351, 357, 1004, 1005, 1007, 1008, 1009, 1010], "shaikh": [0, 351, 357, 1004, 1005, 1007, 1008, 1009, 1010], "albert": [0, 225, 357, 1003, 1004, 1005, 1008, 1009], "around": [0, 4, 26, 37, 52, 84, 113, 122, 155, 172, 258, 259, 295, 313, 315, 316, 325, 328, 338, 339, 340, 349, 361, 363, 366, 371, 376, 390, 394, 395, 398, 400, 449, 450, 492, 521, 597, 617, 626, 680, 770, 819, 821, 823, 824, 825, 853, 950, 951, 953, 960, 964, 968, 974, 975, 978, 987, 989, 1000, 1001], "lauren": [0, 350, 669, 673, 951, 1008], "burk": [0, 350], "francoisgoupil": [0, 350, 1010], "longer": [0, 4, 53, 113, 181, 294, 309, 366, 367, 394, 397, 398, 400, 427, 513, 949, 953, 954, 956, 959, 969, 978, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mathieu": [0, 2, 24, 48, 100, 187, 197, 218, 232, 257, 338, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009], "blondel": [0, 2, 24, 48, 100, 187, 197, 218, 232, 257, 338, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009], "lar": [0, 2, 14, 98, 146, 164, 174, 185, 215, 338, 339, 340, 363, 449, 450, 456, 478, 508, 514, 516, 519, 520, 522, 523, 525, 628, 629, 630, 631, 632, 633, 640, 641, 642, 655, 659, 660, 661, 662, 663, 976, 987, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009], "buitinck": [0, 2, 14, 338, 339, 340, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "noel": [0, 2, 109, 110, 111, 112, 996, 997, 998, 999, 1000, 1008], "daw": [0, 2, 109, 110, 111, 112, 996, 997, 998, 999, 1000], "dubourg": [0, 2, 152, 156, 978, 996, 1000], "edouard": [0, 2, 996], "duchesnai": [0, 2, 996], "alexand": [0, 2, 390, 395, 512, 839, 998, 999, 1000, 1002, 1003, 1004, 1008, 1009, 1010], "fabisch": [0, 2, 998, 999, 1000, 1002], "virgil": [0, 2, 9, 996, 997, 999], "fritsch": [0, 2, 9, 996, 997, 999], "satrajit": [0, 2, 996, 997], "ghosh": [0, 2, 390, 996, 997], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 996, 999, 1004, 1005, 1006, 1007, 1010], "gorgolewski": [0, 2, 996, 999], "jaqu": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 179, 192, 193, 194, 219, 330, 333, 996, 997, 998, 999], "grobler": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 179, 192, 193, 194, 219, 330, 333, 996, 997, 998, 999], "brian": [0, 2, 46, 684, 954, 996, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010], "holt": [0, 2, 996], "arnaud": [0, 2, 997, 998, 999, 1000, 1001, 1002], "joli": [0, 2, 997, 998, 999, 1000, 1001, 1002], "thoui": [0, 2, 996], "rai": [0, 2, 922, 954, 996, 1006, 1008, 1009], "jone": [0, 2, 361, 996], "kyle": [0, 2, 99, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008], "kastner": [0, 2, 99, 998, 999, 1000, 1007, 1008], "manoj": [0, 2, 42, 146, 178, 999, 1000, 1001, 1002, 1003], "kumar": [0, 2, 42, 146, 178, 361, 390, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "robert": [0, 2, 48, 71, 146, 184, 363, 395, 505, 512, 605, 633, 697, 698, 699, 710, 839, 944, 950, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006], "layton": [0, 2, 48, 996, 997, 998, 999, 1001], "wei": [0, 2, 968, 996, 997, 1000, 1001, 1002, 1003, 1005, 1009], "li": [0, 2, 316, 361, 616, 619, 673, 701, 731, 865, 943, 946, 954, 957, 964, 966, 969, 996, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "paolo": [0, 2, 996, 1000, 1006], "losi": [0, 2, 996], "gill": [0, 2, 113, 114, 996, 997, 998, 999, 1000, 1001, 1002], "loupp": [0, 2, 113, 114, 397, 532, 533, 996, 997, 998, 999, 1000, 1001, 1002], "jarrod": [0, 2, 1005], "millman": [0, 2, 1005], "passo": [0, 2, 996, 997], "peter": [0, 2, 11, 16, 62, 109, 121, 123, 124, 257, 338, 339, 390, 426, 428, 435, 626, 765, 766, 950, 954, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "prettenhof": [0, 2, 11, 16, 109, 121, 123, 124, 257, 338, 339, 996, 997, 998, 999, 1000, 1001], "venkat": [0, 2], "raghav": [0, 2, 120, 260, 298, 1000, 1001, 1002, 1003, 1004, 1008], "rajagopalan": [0, 2, 1004, 1008], "jacob": [0, 2, 1001, 1002, 1003], "schreiber": [0, 2, 1001, 1002, 1003], "shiqiao": [0, 2, 996, 997], "jake": [0, 2, 11, 156, 197, 217, 244, 281, 289, 973, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1010], "vanderpla": [0, 2, 11, 156, 197, 217, 244, 281, 289, 973, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004], "ward": [0, 2, 36, 39, 44, 52, 54, 55, 61, 67, 164, 169, 398, 420, 424, 441, 507, 826, 996, 999, 1001], "farlei": [0, 2, 996], "ron": [0, 2, 243, 996], "weiss": [0, 2, 243, 390, 668, 996], "respons": [0, 146, 192, 196, 199, 266, 338, 363, 371, 378, 389, 390, 391, 397, 400, 442, 459, 460, 461, 608, 609, 610, 651, 652, 675, 677, 678, 770, 771, 955, 961, 972, 980], "If": [0, 4, 11, 16, 27, 32, 42, 49, 70, 81, 98, 117, 122, 129, 158, 162, 166, 177, 196, 211, 213, 256, 258, 263, 271, 281, 289, 298, 303, 325, 333, 334, 338, 339, 340, 347, 349, 353, 354, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 384, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 410, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 491, 492, 496, 499, 500, 501, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 692, 693, 694, 701, 702, 703, 704, 705, 706, 707, 711, 713, 716, 717, 720, 721, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 741, 742, 743, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 783, 785, 788, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 901, 907, 909, 911, 913, 917, 919, 922, 923, 925, 928, 929, 935, 938, 939, 940, 941, 943, 944, 946, 948, 949, 950, 951, 952, 954, 957, 958, 960, 961, 964, 966, 968, 969, 970, 971, 974, 975, 977, 980, 981, 987, 988, 989, 996, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1010], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 93, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 145, 146, 149, 150, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 208, 211, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 294, 295, 297, 298, 300, 302, 303, 304, 306, 307, 308, 309, 310, 313, 314, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 337, 340, 341, 343, 345, 346, 347, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 374, 377, 378, 379, 380, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 396, 400, 401, 402, 403, 406, 408, 409, 410, 411, 417, 418, 434, 435, 437, 439, 441, 446, 449, 456, 458, 462, 470, 480, 485, 486, 493, 508, 520, 522, 523, 524, 525, 532, 549, 551, 552, 553, 554, 556, 560, 562, 563, 569, 572, 573, 575, 578, 580, 584, 586, 593, 597, 598, 601, 606, 608, 613, 615, 619, 624, 627, 628, 631, 636, 637, 638, 640, 644, 652, 660, 662, 663, 664, 671, 672, 673, 675, 676, 687, 690, 691, 692, 697, 698, 699, 701, 703, 705, 707, 710, 711, 714, 718, 721, 726, 731, 733, 734, 738, 739, 741, 742, 743, 744, 746, 749, 750, 751, 752, 755, 756, 758, 767, 778, 779, 780, 781, 782, 783, 784, 793, 801, 803, 805, 807, 809, 813, 814, 821, 823, 824, 825, 827, 835, 836, 839, 841, 844, 854, 855, 857, 859, 860, 862, 863, 864, 867, 871, 873, 882, 883, 884, 885, 888, 891, 892, 893, 898, 899, 908, 909, 917, 919, 922, 923, 925, 926, 930, 931, 932, 936, 937, 943, 944, 946, 947, 949, 952, 953, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 971, 972, 973, 974, 975, 976, 977, 980, 981, 983, 984, 985, 986, 988, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "scientif": [0, 32, 135, 136, 137, 138, 230, 356, 360, 364, 376, 381, 390, 430, 440, 478, 978, 981], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 57, 61, 63, 64, 65, 69, 70, 71, 72, 74, 77, 79, 80, 81, 85, 88, 89, 91, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 129, 131, 132, 135, 141, 142, 143, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 179, 182, 184, 185, 187, 189, 191, 193, 196, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 212, 214, 217, 218, 221, 222, 225, 226, 228, 229, 230, 232, 235, 237, 238, 241, 242, 243, 244, 246, 247, 251, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 281, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 321, 322, 323, 325, 326, 327, 328, 330, 333, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 376, 377, 378, 379, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 428, 447, 448, 449, 450, 451, 452, 453, 454, 478, 500, 508, 509, 511, 514, 526, 538, 539, 540, 546, 547, 588, 594, 604, 609, 610, 617, 628, 632, 635, 636, 643, 645, 650, 651, 652, 653, 654, 669, 687, 694, 696, 701, 721, 731, 739, 756, 794, 815, 816, 817, 819, 821, 822, 823, 824, 825, 846, 847, 853, 857, 858, 860, 861, 862, 863, 865, 868, 872, 876, 920, 943, 944, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 971, 973, 974, 975, 978, 980, 984, 985, 986, 987, 988, 989, 993, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "would": [0, 4, 6, 9, 26, 32, 45, 53, 57, 69, 77, 79, 80, 85, 91, 100, 101, 122, 146, 149, 154, 155, 166, 167, 168, 169, 172, 186, 196, 197, 198, 211, 214, 225, 243, 256, 257, 262, 264, 266, 282, 294, 298, 299, 309, 316, 325, 334, 338, 340, 349, 353, 361, 362, 366, 367, 369, 371, 373, 374, 376, 377, 378, 379, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 411, 443, 446, 459, 460, 461, 466, 509, 511, 513, 518, 521, 529, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 547, 560, 561, 564, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 649, 650, 651, 652, 653, 655, 656, 678, 684, 688, 689, 696, 731, 760, 764, 772, 774, 785, 798, 806, 807, 816, 824, 831, 857, 858, 860, 861, 862, 863, 864, 865, 870, 872, 873, 875, 878, 880, 881, 882, 883, 943, 944, 947, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 964, 969, 975, 978, 980, 985, 987, 989, 993, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "appreci": [0, 366], "citat": [0, 360, 363, 376], "paper": [0, 146, 172, 256, 363, 371, 376, 390, 392, 421, 427, 456, 481, 511, 518, 540, 618, 635, 643, 644, 648, 653, 656, 669, 763, 810, 819, 822, 864, 865, 950, 954, 957, 960, 969, 989, 996, 1003, 1004], "machin": [0, 4, 6, 8, 9, 27, 62, 142, 143, 149, 154, 167, 168, 208, 237, 256, 259, 262, 291, 296, 298, 303, 308, 321, 326, 333, 338, 340, 353, 354, 356, 359, 360, 361, 363, 364, 366, 368, 371, 372, 376, 377, 378, 380, 384, 388, 390, 394, 395, 397, 398, 400, 416, 418, 426, 456, 479, 481, 487, 493, 494, 495, 507, 509, 511, 518, 521, 532, 533, 534, 535, 536, 537, 541, 542, 543, 570, 571, 587, 588, 591, 596, 599, 611, 615, 616, 618, 620, 621, 622, 627, 628, 631, 632, 633, 635, 636, 653, 659, 660, 669, 684, 689, 700, 710, 716, 718, 763, 770, 798, 799, 813, 814, 819, 822, 829, 830, 831, 833, 851, 853, 858, 872, 873, 874, 875, 877, 878, 882, 883, 943, 946, 947, 950, 951, 952, 954, 955, 957, 960, 961, 962, 964, 968, 970, 973, 974, 975, 976, 977, 978, 981, 982, 983, 985, 989, 990, 991, 993, 996, 998, 1008, 1009, 1010, 1011], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 353, 355, 360, 364, 366, 367, 368, 369, 370, 373, 374, 376, 378, 379, 381, 391, 398, 473, 485, 486, 558, 676, 782, 922, 954, 964, 970, 972, 975, 977, 978, 980, 981, 983, 989, 991, 996, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "et": [0, 11, 77, 78, 109, 110, 124, 184, 289, 363, 387, 390, 392, 395, 397, 398, 399, 429, 453, 475, 496, 497, 505, 512, 518, 521, 540, 659, 660, 695, 696, 808, 810, 830, 831, 865, 908, 909, 950, 951, 954, 960, 964, 966, 969, 970, 1004], "al": [0, 11, 77, 78, 109, 110, 124, 184, 289, 363, 387, 390, 392, 395, 397, 398, 399, 429, 453, 475, 496, 497, 505, 512, 518, 521, 540, 659, 660, 695, 696, 808, 810, 830, 831, 865, 908, 909, 950, 951, 954, 960, 964, 966, 969, 970, 1004, 1009], "jmlr": [0, 390, 643, 644, 653, 680, 950, 969], "12": [0, 4, 6, 10, 13, 15, 33, 40, 42, 53, 55, 56, 72, 73, 74, 84, 98, 118, 119, 122, 123, 133, 152, 153, 154, 162, 166, 169, 176, 182, 196, 214, 217, 220, 221, 225, 226, 228, 235, 238, 243, 244, 255, 256, 259, 262, 268, 295, 302, 340, 363, 364, 370, 377, 379, 390, 394, 398, 422, 425, 427, 459, 460, 461, 462, 509, 511, 518, 547, 641, 646, 648, 662, 663, 666, 669, 670, 770, 771, 773, 789, 792, 804, 825, 841, 943, 944, 950, 952, 955, 964, 968, 969, 972, 980, 985, 994, 997, 999, 1003, 1004, 1006, 1007], "pp": [0, 62, 255, 363, 390, 392, 398, 401, 402, 423, 426, 430, 440, 488, 510, 511, 518, 567, 612, 620, 641, 662, 663, 696, 701, 705, 715, 731, 744, 758, 808, 810, 812, 829, 849, 860, 947, 954, 956, 957, 967], "2825": 0, "2830": 0, "2011": [0, 47, 218, 371, 395, 398, 512, 515, 517, 518, 524, 567, 604, 615, 635, 705, 944, 958, 968, 973, 996], "bibtex": 0, "entri": [0, 16, 70, 74, 129, 162, 166, 252, 306, 339, 349, 369, 371, 373, 377, 378, 387, 388, 390, 395, 397, 400, 441, 450, 508, 509, 514, 522, 523, 538, 539, 565, 568, 571, 588, 597, 609, 615, 617, 624, 628, 630, 632, 633, 636, 638, 640, 641, 642, 650, 652, 659, 660, 662, 663, 676, 680, 683, 685, 688, 691, 692, 694, 701, 704, 705, 706, 709, 710, 713, 718, 731, 733, 734, 758, 760, 763, 764, 765, 766, 784, 797, 813, 814, 821, 822, 823, 824, 825, 844, 850, 861, 940, 943, 944, 950, 954, 957, 964, 969, 975, 980, 1003, 1006, 1007, 1009], "articl": [0, 17, 69, 338, 361, 365, 366, 373, 394, 403, 453, 681, 950, 954, 989, 1009], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 71, 77, 78, 80, 81, 84, 85, 90, 94, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 117, 118, 119, 122, 123, 125, 128, 129, 131, 132, 138, 141, 142, 144, 146, 149, 150, 151, 153, 154, 155, 156, 157, 166, 175, 176, 178, 180, 181, 183, 184, 185, 188, 189, 195, 196, 198, 200, 201, 202, 204, 205, 210, 213, 214, 217, 218, 219, 225, 229, 230, 231, 232, 233, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 258, 259, 260, 261, 265, 266, 270, 271, 278, 279, 282, 283, 284, 285, 287, 288, 289, 298, 302, 315, 318, 321, 322, 323, 324, 325, 328, 334, 335, 338, 344, 345, 346, 365, 366, 369, 373, 391, 954, 977, 985], "p": [0, 11, 13, 24, 26, 27, 41, 60, 79, 80, 84, 91, 103, 121, 142, 152, 172, 208, 213, 214, 217, 219, 229, 244, 256, 262, 263, 289, 360, 361, 363, 364, 370, 373, 387, 388, 390, 392, 393, 395, 397, 399, 400, 401, 421, 423, 425, 428, 435, 447, 449, 452, 453, 456, 475, 505, 511, 515, 517, 518, 524, 526, 527, 528, 530, 532, 533, 534, 535, 536, 538, 541, 542, 543, 567, 569, 570, 571, 572, 573, 575, 576, 577, 581, 582, 583, 584, 585, 586, 592, 593, 604, 617, 620, 665, 667, 669, 671, 676, 681, 691, 699, 716, 727, 761, 763, 774, 779, 780, 781, 784, 798, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 829, 833, 834, 849, 860, 866, 882, 883, 884, 947, 948, 950, 951, 952, 954, 956, 957, 958, 959, 960, 961, 964, 968, 969, 972, 984, 987, 996, 997, 999, 1002, 1004, 1011], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 57, 63, 66, 70, 74, 85, 98, 113, 116, 117, 119, 122, 130, 137, 140, 142, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 172, 180, 182, 185, 196, 197, 198, 206, 214, 218, 229, 231, 234, 238, 246, 254, 256, 257, 259, 262, 263, 265, 266, 268, 292, 293, 294, 300, 303, 306, 308, 310, 313, 314, 333, 338, 339, 340, 349, 361, 366, 367, 371, 376, 388, 391, 395, 397, 398, 399, 400, 464, 485, 486, 508, 509, 514, 515, 543, 558, 559, 569, 572, 573, 575, 576, 577, 581, 582, 583, 584, 585, 586, 594, 604, 609, 612, 635, 689, 698, 701, 704, 705, 731, 758, 759, 762, 763, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 797, 830, 831, 835, 844, 848, 852, 853, 887, 892, 893, 946, 949, 958, 961, 962, 964, 968, 998, 1004, 1005, 1006, 1008, 1010], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 64, 69, 72, 81, 85, 103, 113, 114, 121, 122, 129, 136, 149, 150, 151, 152, 154, 156, 157, 158, 162, 167, 178, 181, 196, 197, 198, 214, 218, 222, 231, 241, 256, 258, 260, 261, 267, 274, 282, 298, 303, 316, 332, 340, 349, 353, 358, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 376, 378, 384, 388, 389, 390, 392, 394, 395, 397, 398, 399, 400, 402, 480, 505, 508, 510, 511, 514, 518, 532, 533, 534, 535, 536, 541, 542, 544, 545, 546, 547, 558, 559, 565, 566, 568, 570, 571, 574, 581, 588, 594, 599, 600, 607, 610, 611, 641, 651, 654, 657, 663, 669, 674, 696, 703, 713, 715, 738, 760, 772, 775, 776, 785, 789, 794, 795, 796, 797, 800, 803, 808, 812, 815, 816, 817, 820, 822, 823, 824, 825, 829, 836, 838, 843, 846, 849, 851, 853, 855, 857, 858, 859, 860, 861, 862, 863, 872, 880, 881, 882, 883, 908, 909, 922, 943, 944, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 964, 968, 969, 970, 975, 977, 978, 989, 996, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 59, 67, 74, 77, 80, 85, 91, 94, 96, 97, 98, 103, 111, 112, 116, 117, 119, 128, 132, 135, 136, 137, 138, 143, 144, 145, 149, 152, 154, 156, 157, 158, 164, 166, 167, 184, 197, 206, 210, 211, 214, 218, 256, 257, 258, 259, 263, 270, 292, 298, 300, 306, 308, 314, 316, 318, 325, 330, 338, 339, 340, 345, 347, 349, 353, 355, 356, 360, 361, 363, 364, 366, 367, 368, 370, 373, 376, 377, 378, 379, 380, 385, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 411, 416, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 465, 467, 468, 469, 471, 474, 477, 478, 479, 480, 481, 485, 487, 488, 489, 490, 491, 497, 499, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 558, 565, 566, 567, 568, 570, 571, 574, 579, 584, 585, 588, 594, 597, 604, 607, 609, 610, 612, 614, 615, 616, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 649, 650, 652, 653, 654, 655, 656, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 680, 681, 686, 687, 688, 692, 693, 695, 697, 698, 699, 700, 701, 706, 711, 712, 715, 718, 719, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 739, 741, 742, 749, 750, 751, 752, 753, 756, 763, 766, 768, 770, 771, 772, 775, 776, 782, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 840, 844, 849, 853, 856, 857, 858, 860, 861, 862, 863, 868, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 885, 907, 908, 909, 939, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 967, 968, 969, 970, 973, 974, 975, 980, 981, 987, 988, 989, 991, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 57, 67, 69, 74, 76, 79, 82, 83, 84, 86, 95, 97, 98, 101, 114, 122, 129, 145, 164, 165, 169, 170, 174, 185, 196, 211, 215, 229, 242, 243, 246, 247, 249, 258, 271, 272, 303, 306, 322, 339, 349, 354, 358, 363, 366, 371, 373, 378, 387, 389, 392, 393, 395, 397, 398, 411, 420, 424, 430, 440, 441, 442, 443, 448, 451, 452, 453, 454, 455, 459, 460, 461, 473, 489, 501, 507, 508, 514, 518, 522, 523, 527, 529, 531, 533, 535, 537, 539, 541, 542, 545, 547, 558, 566, 570, 571, 577, 583, 588, 607, 611, 612, 616, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 647, 649, 650, 653, 655, 656, 665, 672, 676, 680, 693, 711, 712, 714, 729, 730, 732, 763, 768, 772, 777, 783, 785, 795, 799, 801, 802, 803, 806, 807, 808, 816, 824, 826, 829, 831, 833, 834, 837, 840, 846, 847, 848, 853, 856, 866, 872, 873, 874, 875, 877, 878, 881, 883, 887, 948, 949, 950, 951, 954, 955, 956, 959, 962, 968, 969, 971, 991, 996, 999, 1000, 1001, 1004, 1006, 1007, 1010, 1011], "b": [0, 8, 9, 10, 24, 26, 58, 64, 79, 101, 103, 110, 112, 113, 118, 122, 123, 132, 135, 136, 150, 151, 152, 157, 162, 178, 181, 196, 197, 202, 214, 232, 234, 255, 259, 261, 266, 270, 274, 309, 316, 349, 361, 363, 366, 369, 370, 371, 387, 388, 390, 393, 394, 395, 398, 416, 459, 477, 514, 518, 523, 543, 565, 566, 567, 568, 584, 585, 587, 588, 605, 623, 624, 625, 626, 635, 646, 649, 651, 653, 657, 664, 665, 681, 695, 705, 706, 765, 766, 782, 783, 820, 846, 848, 849, 852, 853, 860, 887, 909, 910, 919, 944, 946, 950, 951, 952, 954, 957, 959, 964, 968, 969, 984, 996, 1004, 1007, 1009, 1010, 1011], "o": [0, 17, 19, 27, 30, 38, 49, 59, 60, 62, 63, 81, 84, 90, 97, 126, 157, 184, 189, 194, 196, 211, 231, 241, 256, 258, 265, 298, 299, 303, 307, 310, 317, 343, 353, 361, 363, 366, 381, 390, 392, 395, 397, 401, 423, 425, 426, 427, 428, 451, 511, 581, 604, 643, 644, 669, 801, 829, 844, 884, 922, 923, 946, 948, 950, 951, 954, 955, 957, 958, 968, 969, 970, 996, 999, 1002, 1004, 1005, 1008, 1009], "m": [0, 8, 9, 11, 19, 26, 27, 44, 57, 58, 62, 63, 64, 79, 80, 95, 132, 154, 178, 180, 196, 214, 256, 260, 289, 317, 321, 332, 338, 353, 360, 361, 363, 364, 369, 371, 381, 387, 388, 390, 392, 395, 397, 399, 401, 423, 424, 428, 435, 451, 452, 477, 490, 505, 509, 511, 513, 518, 616, 622, 626, 641, 648, 662, 663, 666, 670, 684, 692, 701, 716, 731, 733, 734, 770, 771, 819, 844, 909, 933, 934, 944, 946, 948, 950, 951, 952, 954, 955, 956, 957, 958, 962, 964, 968, 970, 978, 1004, 1005, 1006, 1007, 1010], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 64, 74, 77, 78, 79, 80, 85, 95, 103, 106, 110, 113, 114, 118, 122, 123, 124, 129, 132, 142, 150, 151, 152, 156, 157, 158, 161, 162, 166, 167, 178, 180, 181, 185, 196, 203, 206, 214, 222, 228, 231, 241, 244, 247, 255, 256, 258, 259, 261, 262, 263, 266, 269, 271, 274, 278, 283, 287, 289, 310, 327, 340, 349, 361, 363, 369, 376, 378, 387, 388, 390, 392, 393, 394, 395, 397, 398, 411, 416, 429, 431, 443, 447, 452, 456, 459, 460, 461, 475, 481, 490, 497, 511, 529, 530, 531, 533, 535, 536, 537, 538, 539, 542, 545, 547, 565, 566, 567, 568, 583, 586, 588, 604, 612, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 655, 656, 657, 662, 663, 669, 673, 692, 697, 698, 699, 703, 705, 756, 760, 763, 772, 785, 788, 803, 806, 807, 810, 813, 814, 816, 819, 820, 822, 824, 831, 844, 849, 860, 873, 875, 878, 880, 881, 883, 885, 944, 946, 948, 950, 951, 954, 955, 956, 957, 958, 961, 962, 964, 968, 969, 970, 974, 989, 996, 1000, 1003, 1006, 1007, 1008, 1009, 1011], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 59, 60, 62, 69, 70, 81, 88, 91, 95, 98, 103, 105, 120, 145, 149, 157, 196, 204, 210, 212, 214, 222, 226, 228, 229, 230, 231, 244, 255, 256, 264, 274, 282, 283, 289, 294, 313, 314, 317, 324, 325, 330, 340, 360, 361, 363, 367, 371, 376, 388, 390, 392, 393, 395, 397, 398, 400, 401, 423, 425, 430, 438, 441, 465, 470, 480, 503, 511, 513, 534, 535, 542, 543, 558, 559, 567, 591, 592, 596, 599, 600, 621, 622, 625, 646, 647, 648, 657, 665, 666, 669, 670, 674, 676, 681, 684, 697, 698, 699, 701, 731, 739, 743, 753, 756, 763, 783, 808, 810, 812, 813, 814, 829, 840, 844, 846, 849, 860, 865, 882, 883, 887, 946, 948, 950, 951, 952, 953, 954, 956, 962, 964, 966, 969, 970, 977, 985, 986, 987, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "perrot": [0, 996], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 60, 69, 77, 79, 80, 81, 84, 85, 98, 100, 101, 113, 119, 121, 122, 129, 135, 142, 146, 157, 166, 167, 172, 176, 185, 186, 196, 197, 198, 214, 217, 218, 231, 256, 257, 258, 259, 261, 262, 270, 271, 282, 289, 300, 303, 306, 308, 333, 340, 345, 346, 347, 349, 353, 355, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 376, 377, 378, 381, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 416, 418, 420, 423, 424, 425, 428, 432, 441, 447, 448, 449, 450, 451, 453, 454, 473, 475, 477, 478, 479, 480, 501, 510, 512, 513, 515, 517, 518, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 553, 558, 559, 565, 566, 567, 568, 570, 571, 574, 580, 581, 583, 584, 585, 586, 587, 588, 594, 599, 600, 607, 610, 611, 612, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 664, 665, 667, 669, 671, 674, 676, 680, 681, 684, 685, 703, 704, 705, 706, 713, 716, 717, 730, 738, 742, 760, 763, 770, 771, 772, 775, 776, 784, 785, 789, 794, 795, 796, 797, 798, 800, 812, 813, 814, 815, 816, 817, 819, 823, 824, 825, 829, 830, 831, 836, 838, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 872, 873, 879, 880, 881, 882, 883, 887, 903, 908, 909, 911, 914, 915, 922, 929, 940, 943, 944, 946, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 965, 968, 969, 970, 975, 977, 978, 987, 988, 989, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "journal": [0, 80, 167, 256, 262, 360, 361, 363, 390, 392, 397, 430, 440, 451, 511, 518, 604, 612, 622, 666, 669, 670, 681, 691, 706, 709, 710, 733, 734, 761, 798, 803, 849, 860, 943, 944, 948, 950, 951, 952, 955, 961, 966, 968, 969], "research": [0, 256, 262, 361, 363, 376, 390, 478, 490, 612, 622, 669, 710, 798, 803, 943, 951, 955, 957, 969, 974, 975, 978], "volum": [0, 65, 78, 154, 361, 363, 390, 392, 400, 451, 453, 511, 744, 950, 969, 978], "page": [0, 12, 17, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 217, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 353, 361, 363, 366, 367, 369, 371, 373, 379, 389, 390, 392, 451, 493, 494, 495, 605, 621, 803, 867, 909, 944, 954, 955, 980, 989, 994, 996, 1000, 1001], "want": [0, 4, 12, 24, 25, 26, 63, 70, 146, 162, 166, 196, 197, 198, 247, 256, 270, 294, 318, 322, 338, 339, 349, 353, 354, 355, 364, 365, 367, 369, 370, 371, 376, 377, 378, 379, 381, 384, 388, 389, 390, 391, 392, 397, 398, 399, 477, 480, 481, 487, 512, 526, 631, 632, 633, 635, 636, 643, 645, 651, 652, 653, 739, 819, 822, 838, 845, 865, 872, 943, 950, 953, 954, 955, 958, 960, 964, 965, 969, 974, 975, 980, 988, 996, 1010], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 64, 65, 77, 79, 81, 85, 90, 91, 100, 118, 122, 135, 146, 149, 154, 156, 166, 167, 169, 172, 175, 185, 209, 213, 214, 219, 225, 233, 236, 238, 241, 246, 247, 255, 259, 261, 263, 265, 276, 278, 282, 283, 300, 309, 310, 316, 322, 335, 338, 339, 343, 347, 349, 354, 355, 359, 360, 361, 362, 366, 367, 369, 370, 373, 376, 377, 378, 379, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 406, 419, 420, 421, 423, 424, 428, 432, 434, 441, 442, 443, 445, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 474, 480, 500, 508, 510, 511, 514, 515, 517, 518, 519, 521, 527, 532, 533, 534, 535, 536, 537, 541, 542, 543, 560, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 621, 622, 648, 649, 651, 662, 663, 664, 665, 669, 673, 684, 700, 704, 705, 711, 712, 716, 753, 756, 758, 770, 771, 772, 794, 801, 802, 815, 816, 817, 819, 820, 821, 823, 824, 825, 832, 833, 837, 842, 845, 846, 848, 864, 865, 868, 872, 873, 880, 882, 892, 893, 898, 904, 922, 924, 943, 949, 950, 951, 953, 954, 955, 956, 957, 960, 961, 962, 967, 968, 969, 970, 974, 978, 980, 982, 984, 987, 988, 989, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "api": [0, 12, 50, 164, 224, 226, 235, 239, 339, 340, 355, 356, 359, 360, 366, 368, 374, 375, 376, 377, 379, 381, 395, 397, 398, 408, 409, 412, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 473, 481, 485, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 540, 541, 543, 544, 545, 546, 547, 555, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 588, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 635, 654, 665, 666, 667, 668, 770, 771, 775, 776, 799, 817, 819, 821, 822, 825, 829, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 876, 877, 922, 943, 952, 953, 954, 957, 964, 968, 974, 975, 978, 980, 984, 986, 991, 993, 994, 995, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "design": [0, 13, 79, 129, 152, 166, 177, 246, 298, 347, 355, 360, 366, 370, 376, 377, 378, 379, 380, 390, 397, 399, 400, 492, 505, 609, 610, 625, 642, 646, 653, 657, 662, 772, 789, 790, 808, 810, 944, 950, 951, 954, 955, 964, 974, 975, 978, 982, 998, 1005], "mai": [0, 8, 19, 25, 39, 44, 46, 55, 70, 85, 95, 109, 119, 146, 153, 155, 157, 158, 166, 172, 176, 185, 202, 222, 259, 261, 263, 264, 292, 314, 325, 338, 339, 340, 349, 353, 354, 355, 358, 360, 361, 362, 363, 365, 366, 367, 369, 370, 373, 376, 378, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 411, 418, 419, 420, 422, 423, 424, 425, 427, 429, 430, 431, 432, 437, 440, 443, 447, 450, 459, 460, 461, 464, 465, 466, 473, 485, 486, 492, 511, 512, 515, 517, 521, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 551, 558, 571, 574, 579, 587, 588, 594, 597, 611, 612, 614, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 649, 650, 651, 653, 654, 655, 656, 658, 661, 663, 665, 666, 668, 669, 670, 672, 674, 681, 688, 691, 692, 694, 695, 697, 698, 699, 701, 713, 731, 738, 760, 761, 772, 774, 775, 776, 777, 785, 786, 787, 788, 790, 791, 794, 798, 801, 806, 807, 808, 809, 810, 812, 815, 816, 817, 819, 821, 823, 824, 825, 831, 832, 833, 836, 838, 848, 850, 851, 852, 853, 855, 861, 864, 865, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 890, 912, 913, 922, 943, 944, 946, 948, 950, 951, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 975, 980, 986, 987, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "consid": [0, 4, 12, 13, 25, 39, 65, 70, 80, 95, 99, 119, 120, 122, 141, 145, 146, 162, 196, 198, 256, 259, 263, 267, 276, 282, 283, 298, 303, 308, 322, 330, 333, 338, 349, 353, 354, 355, 358, 365, 366, 367, 371, 373, 376, 378, 386, 390, 395, 396, 397, 398, 399, 400, 401, 402, 417, 423, 428, 435, 452, 485, 486, 498, 510, 526, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 562, 563, 565, 566, 568, 570, 584, 585, 597, 623, 629, 635, 636, 637, 639, 648, 656, 665, 666, 667, 669, 670, 671, 673, 677, 678, 681, 683, 685, 691, 701, 705, 709, 731, 761, 763, 767, 815, 816, 817, 819, 821, 823, 824, 825, 828, 830, 831, 836, 846, 867, 868, 877, 878, 880, 881, 882, 883, 938, 943, 949, 950, 951, 952, 954, 955, 957, 960, 961, 962, 964, 968, 969, 970, 975, 980, 987, 999, 1000, 1004, 1008, 1009, 1011], "softwar": [0, 339, 353, 363, 366, 373, 376, 378, 398, 604, 612, 635, 944, 978], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 355, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 411, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 481, 483, 484, 485, 486, 487, 489, 492, 496, 498, 500, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 738, 739, 743, 744, 746, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 901, 902, 903, 904, 907, 909, 911, 912, 913, 914, 916, 918, 919, 920, 921, 922, 923, 925, 928, 942, 943, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 978, 981, 983, 984, 985, 986, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "2013": [0, 172, 363, 394, 395, 513, 701, 731, 946, 954, 973, 997, 998], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 65, 66, 80, 113, 166, 168, 188, 191, 205, 206, 261, 262, 263, 293, 302, 333, 363, 364, 371, 373, 387, 388, 390, 394, 395, 397, 400, 452, 493, 494, 495, 515, 517, 524, 532, 533, 534, 535, 542, 543, 567, 584, 585, 587, 588, 592, 596, 599, 600, 611, 625, 626, 635, 646, 649, 651, 657, 664, 666, 669, 670, 681, 691, 700, 701, 706, 731, 761, 810, 844, 880, 881, 882, 883, 943, 948, 950, 951, 954, 956, 957, 958, 962, 966, 968, 970, 988, 999, 1004, 1008, 1009, 1010, 1011], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 398, 808, 956, 973], "languag": [0, 340, 370, 384, 395, 398, 968, 974, 975, 978, 981], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 56, 58, 59, 61, 64, 67, 68, 70, 71, 73, 75, 78, 80, 89, 91, 93, 95, 98, 99, 104, 106, 107, 112, 113, 115, 118, 119, 120, 121, 122, 125, 127, 128, 130, 132, 135, 136, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 159, 161, 164, 166, 174, 175, 178, 179, 181, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 225, 228, 229, 230, 233, 235, 238, 241, 242, 243, 244, 245, 247, 250, 254, 256, 258, 259, 260, 261, 264, 270, 274, 276, 279, 280, 282, 283, 284, 285, 286, 287, 289, 293, 294, 297, 299, 300, 301, 303, 304, 306, 308, 310, 314, 315, 317, 318, 321, 322, 324, 329, 330, 333, 338, 344, 345, 346, 347, 352, 354, 356, 358, 359, 360, 362, 363, 366, 367, 368, 371, 372, 373, 374, 377, 381, 384, 386, 387, 388, 389, 392, 395, 396, 397, 398, 401, 402, 403, 405, 407, 408, 409, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 437, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 497, 498, 499, 500, 501, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 592, 594, 595, 599, 600, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 686, 687, 689, 693, 694, 696, 700, 702, 703, 704, 705, 706, 709, 711, 712, 713, 715, 716, 717, 729, 730, 732, 736, 738, 739, 744, 758, 759, 760, 762, 763, 764, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 896, 897, 898, 908, 909, 919, 925, 926, 928, 929, 930, 931, 932, 935, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 981, 982, 984, 985, 987, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mine": [0, 256, 339, 361, 390, 401, 423, 488, 540, 696, 709, 715, 758, 950, 954, 960, 966], "108": [0, 339, 997], "122": [0, 8, 41, 67, 112, 154, 162, 167, 180, 200, 215, 230, 371, 955], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 61, 64, 69, 73, 79, 80, 97, 98, 113, 115, 116, 117, 122, 123, 125, 127, 137, 138, 146, 149, 155, 162, 168, 169, 191, 197, 198, 210, 217, 218, 219, 225, 229, 241, 247, 254, 258, 262, 263, 271, 282, 283, 292, 294, 300, 302, 316, 322, 324, 325, 338, 339, 345, 346, 353, 361, 363, 366, 370, 373, 374, 376, 377, 387, 388, 389, 390, 394, 396, 397, 398, 399, 400, 423, 425, 427, 428, 430, 447, 459, 460, 461, 530, 531, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 621, 647, 648, 656, 666, 669, 670, 701, 706, 717, 721, 731, 764, 765, 779, 781, 813, 814, 818, 848, 852, 874, 876, 877, 880, 881, 882, 883, 923, 943, 948, 949, 950, 951, 953, 954, 957, 958, 960, 962, 964, 966, 969, 970, 971, 974, 975, 980, 981, 983, 989, 996, 997, 999, 1000, 1004, 1007, 1008, 1009, 1010, 1011], "qualiti": [0, 6, 24, 37, 46, 48, 49, 57, 98, 118, 166, 202, 250, 254, 263, 264, 265, 366, 373, 376, 378, 384, 385, 389, 390, 392, 395, 430, 440, 447, 452, 534, 535, 536, 537, 541, 542, 718, 785, 864, 865, 880, 881, 882, 883, 909, 949, 951, 959, 966, 970, 974, 975, 978, 984, 985, 991], "png": [0, 32, 884], "svg": 0, "logo": [0, 394, 778], "avail": [0, 5, 11, 12, 13, 41, 55, 98, 117, 120, 121, 146, 149, 154, 158, 166, 185, 196, 204, 214, 218, 234, 253, 254, 259, 260, 263, 281, 282, 283, 289, 303, 306, 307, 308, 309, 316, 318, 349, 353, 360, 361, 363, 364, 365, 366, 370, 371, 374, 377, 378, 381, 384, 387, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 425, 428, 429, 430, 431, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 485, 512, 526, 532, 533, 534, 535, 536, 537, 541, 542, 565, 568, 570, 571, 587, 588, 609, 610, 634, 642, 647, 649, 650, 651, 653, 666, 673, 676, 707, 708, 772, 775, 776, 785, 795, 796, 801, 802, 804, 805, 806, 807, 819, 840, 849, 856, 860, 865, 916, 917, 922, 944, 948, 951, 953, 954, 955, 956, 957, 960, 964, 967, 968, 969, 973, 974, 975, 978, 980, 984, 989, 991, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010], "doc": [0, 4, 8, 19, 338, 340, 354, 364, 366, 369, 370, 371, 373, 378, 381, 383, 398, 565, 566, 568, 753, 756, 765, 766, 796, 989, 996, 1000, 1010], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 360, 363, 365, 366, 368, 369, 371, 373, 374, 376, 377, 381, 384, 387, 391, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 951, 964, 970, 974, 978, 988, 989, 1006, 1010], "directori": [0, 8, 278, 360, 364, 366, 367, 371, 373, 378, 381, 391, 420, 424, 428, 463, 476, 833, 834, 1010], "driven": [0, 974, 978], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 59, 71, 74, 77, 81, 84, 100, 103, 113, 115, 119, 122, 123, 129, 143, 146, 149, 154, 155, 167, 168, 177, 185, 196, 218, 221, 222, 225, 231, 256, 258, 263, 270, 274, 281, 293, 298, 308, 333, 338, 339, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 367, 371, 373, 376, 378, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 419, 422, 425, 427, 429, 432, 437, 473, 485, 509, 528, 544, 558, 566, 583, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 607, 609, 610, 620, 632, 633, 649, 664, 669, 672, 677, 738, 740, 772, 775, 776, 785, 796, 800, 801, 812, 830, 831, 846, 851, 874, 875, 877, 888, 923, 943, 944, 947, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 961, 962, 964, 968, 969, 970, 980, 984, 987, 1005, 1006, 1008, 1009], "institut": [0, 363, 957], "privat": [0, 369, 378, 379, 888, 978, 996, 1004, 1006, 1007, 1009, 1010], "grant": [0, 366], "assur": [0, 378, 770, 771, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "sustain": 0, "like": [0, 4, 12, 19, 52, 57, 59, 69, 88, 91, 98, 103, 105, 112, 116, 122, 125, 149, 155, 166, 176, 196, 247, 256, 258, 259, 260, 263, 264, 270, 285, 295, 298, 306, 316, 325, 338, 339, 349, 353, 355, 358, 360, 361, 364, 365, 366, 367, 369, 372, 373, 374, 376, 377, 378, 384, 386, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 555, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 743, 744, 745, 747, 748, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 887, 888, 890, 897, 898, 906, 911, 919, 920, 922, 925, 926, 927, 939, 941, 943, 946, 948, 949, 950, 951, 954, 956, 957, 958, 960, 961, 964, 969, 970, 974, 975, 977, 978, 980, 987, 989, 993, 996, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1010, 1011], "thank": [0, 4, 17, 25, 85, 168, 172, 196, 265, 338, 339, 354, 365, 373, 978, 996, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "funder": 0, "member": [0, 338, 339, 361, 366, 368, 369, 379, 390, 405, 421, 426, 429, 431, 469, 532, 533, 540, 558, 635, 636, 643, 645, 653, 654, 655, 680, 681, 691, 693, 706, 711, 712, 732, 761, 768, 772, 872, 950, 957, 980, 996, 1008, 1011], "consortium": [0, 978], "foundat": [0, 129, 366, 957], "face": [0, 3, 15, 36, 53, 67, 93, 98, 107, 117, 164, 224, 239, 359, 366, 369, 390, 395, 397, 399, 427, 450, 470, 471, 472, 498, 509, 510, 514, 516, 517, 518, 535, 561, 634, 650, 689, 785, 799, 816, 853, 877, 895, 957, 970, 971, 972, 983, 988, 991, 996, 1004], "2022": [0, 397, 681, 1010], "microsoft": [0, 12, 364, 381], "m\u00fcller": [0, 31, 299, 300, 379, 395, 512, 839, 958, 964, 968, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010], "2020": [0, 361, 1006, 1007, 1008, 1009], "quansight": 0, "lab": [0, 361, 446, 513, 870, 978, 1007], "2021": [0, 364, 366, 381, 648, 1008, 1009], "columbia": 0, "univers": [0, 157, 338, 361, 363, 368, 390, 395, 398, 567, 763, 808, 812, 867, 950, 952, 954, 956], "2016": [0, 222, 360, 390, 943, 1001, 1002], "sydnei": 0, "2017": [0, 256, 360, 388, 390, 401, 423, 954, 1002, 1003], "receiv": [0, 19, 135, 164, 249, 253, 272, 340, 349, 366, 367, 373, 378, 394, 397, 481, 635, 678, 682, 684, 702, 757, 763, 764, 790, 799, 801, 802, 840, 877, 955, 958, 959, 968, 1006, 1007], "improv": [0, 4, 24, 25, 33, 77, 78, 81, 100, 106, 110, 111, 118, 120, 121, 122, 124, 129, 142, 162, 166, 172, 182, 196, 204, 214, 257, 259, 295, 328, 339, 349, 354, 364, 368, 370, 371, 373, 374, 376, 378, 379, 384, 389, 395, 397, 399, 427, 428, 508, 509, 511, 514, 515, 516, 518, 519, 520, 523, 531, 534, 535, 536, 537, 538, 539, 541, 542, 579, 587, 588, 620, 629, 641, 643, 644, 645, 649, 650, 651, 652, 653, 655, 662, 664, 669, 704, 705, 759, 762, 763, 822, 830, 831, 849, 860, 880, 881, 883, 909, 948, 950, 951, 954, 957, 958, 968, 969, 970, 973, 974, 975, 978, 987, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 66, 106, 126, 131, 166, 181, 191, 196, 197, 198, 214, 220, 229, 234, 253, 256, 259, 263, 265, 266, 298, 307, 308, 338, 347, 353, 361, 365, 366, 367, 372, 374, 378, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 402, 417, 418, 421, 425, 427, 442, 445, 471, 475, 477, 481, 485, 486, 487, 502, 504, 506, 507, 508, 510, 512, 513, 514, 519, 522, 523, 525, 526, 527, 538, 540, 569, 570, 571, 572, 573, 575, 576, 577, 583, 587, 588, 597, 609, 620, 623, 624, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 646, 649, 650, 651, 652, 654, 657, 658, 659, 660, 661, 664, 667, 675, 677, 678, 683, 685, 688, 689, 691, 694, 696, 699, 702, 704, 705, 706, 710, 711, 713, 714, 715, 716, 717, 718, 719, 727, 729, 733, 757, 758, 759, 762, 763, 764, 770, 771, 775, 776, 813, 814, 819, 836, 837, 840, 846, 849, 852, 856, 860, 864, 865, 867, 868, 872, 873, 876, 877, 878, 889, 907, 909, 921, 945, 946, 950, 952, 954, 955, 957, 958, 959, 961, 964, 969, 985, 987, 989, 997, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 45, 53, 57, 71, 77, 79, 81, 95, 98, 99, 105, 113, 115, 118, 122, 129, 146, 154, 155, 156, 161, 162, 166, 167, 168, 176, 184, 185, 193, 196, 210, 213, 214, 217, 218, 225, 230, 251, 254, 256, 257, 259, 262, 263, 276, 279, 282, 283, 284, 286, 287, 289, 298, 302, 303, 306, 321, 325, 333, 338, 339, 340, 347, 349, 353, 354, 355, 359, 361, 363, 364, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 381, 384, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 413, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 430, 437, 440, 445, 447, 452, 456, 462, 464, 473, 485, 492, 501, 510, 512, 513, 515, 517, 518, 526, 527, 530, 531, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 556, 559, 566, 573, 583, 584, 585, 588, 591, 592, 596, 597, 599, 600, 604, 607, 608, 609, 610, 618, 619, 620, 623, 624, 627, 629, 630, 631, 632, 635, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 651, 653, 654, 655, 658, 659, 660, 661, 664, 666, 668, 669, 670, 672, 673, 674, 675, 677, 678, 680, 684, 685, 686, 692, 698, 709, 717, 718, 722, 733, 734, 737, 740, 756, 758, 772, 774, 775, 776, 783, 784, 785, 809, 810, 815, 816, 817, 819, 822, 823, 824, 825, 829, 830, 831, 835, 836, 837, 841, 842, 843, 847, 850, 852, 861, 864, 865, 869, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 896, 909, 922, 925, 928, 930, 931, 932, 933, 934, 935, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 967, 968, 969, 970, 974, 978, 980, 986, 987, 988, 989, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 59, 80, 95, 112, 116, 117, 127, 129, 149, 155, 166, 167, 175, 182, 184, 185, 188, 197, 205, 218, 222, 226, 227, 246, 256, 257, 262, 286, 289, 294, 298, 302, 306, 307, 309, 323, 330, 338, 339, 343, 344, 349, 353, 355, 358, 360, 361, 362, 364, 365, 366, 367, 368, 371, 373, 374, 376, 377, 378, 380, 381, 386, 387, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 410, 416, 419, 421, 422, 423, 425, 427, 428, 430, 470, 471, 473, 475, 478, 509, 510, 511, 528, 529, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 565, 568, 570, 571, 578, 582, 588, 604, 609, 610, 611, 620, 623, 624, 629, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 648, 650, 653, 654, 655, 658, 671, 676, 687, 710, 716, 739, 749, 753, 763, 767, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 790, 791, 792, 802, 804, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 843, 844, 848, 850, 868, 872, 873, 876, 877, 880, 881, 882, 883, 887, 898, 903, 917, 930, 931, 932, 943, 944, 946, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 971, 974, 975, 978, 980, 984, 987, 989, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "2012": [0, 80, 388, 397, 532, 533, 540, 616, 718, 943, 947, 954, 973, 996], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 376, 378, 379, 381, 386, 387, 388, 389, 390, 392, 393, 395, 397, 398, 400, 401, 416, 420, 422, 423, 424, 425, 428, 430, 433, 435, 436, 437, 439, 440, 441, 442, 443, 445, 446, 450, 473, 476, 478, 496, 500, 511, 513, 515, 517, 524, 539, 544, 545, 546, 547, 567, 587, 596, 604, 605, 606, 607, 611, 616, 617, 620, 623, 625, 627, 629, 631, 637, 639, 641, 643, 644, 646, 650, 653, 654, 655, 657, 662, 663, 667, 669, 671, 767, 770, 771, 772, 774, 775, 776, 777, 778, 780, 785, 786, 787, 790, 792, 794, 795, 796, 797, 798, 801, 803, 808, 809, 810, 811, 812, 813, 814, 821, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 843, 846, 847, 848, 852, 856, 864, 865, 869, 870, 874, 877, 878, 886, 911, 943, 944, 946, 947, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 962, 964, 966, 967, 968, 969, 970, 974, 978, 980, 985, 987, 988, 989, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "host": [0, 338, 361, 366, 369, 373, 374, 865, 922, 989], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 65, 68, 71, 84, 85, 97, 98, 100, 103, 113, 115, 118, 119, 123, 131, 141, 161, 162, 164, 166, 167, 168, 172, 175, 189, 196, 214, 217, 218, 219, 221, 225, 226, 227, 229, 231, 235, 238, 243, 246, 251, 253, 256, 257, 265, 266, 281, 282, 283, 298, 302, 303, 306, 307, 309, 313, 325, 332, 335, 338, 339, 343, 347, 349, 353, 358, 359, 361, 362, 363, 366, 367, 369, 370, 371, 373, 374, 377, 378, 379, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 423, 426, 428, 430, 435, 447, 465, 474, 480, 511, 512, 518, 526, 528, 529, 537, 538, 539, 544, 545, 558, 565, 566, 568, 574, 579, 587, 588, 589, 590, 597, 604, 605, 607, 616, 620, 629, 635, 636, 648, 649, 650, 651, 652, 653, 656, 664, 669, 673, 676, 680, 694, 738, 749, 753, 760, 765, 772, 775, 776, 777, 778, 780, 785, 788, 790, 793, 794, 795, 796, 797, 798, 800, 802, 820, 828, 833, 845, 849, 853, 860, 872, 873, 874, 875, 876, 877, 878, 903, 943, 944, 946, 947, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 972, 975, 977, 978, 980, 984, 987, 988, 991, 997, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1011], "event": [0, 4, 16, 196, 214, 259, 390, 565, 566, 613, 808, 897, 950, 955, 956, 974, 978, 1002], "pari": [0, 363, 391, 444, 739, 841, 965, 1010], "saclai": 0, "center": [0, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 58, 59, 60, 62, 63, 74, 80, 90, 100, 102, 105, 120, 121, 122, 123, 146, 162, 167, 177, 188, 190, 196, 197, 207, 208, 220, 221, 225, 226, 241, 244, 245, 251, 257, 267, 281, 284, 286, 293, 298, 300, 301, 310, 315, 323, 325, 326, 327, 332, 339, 340, 361, 362, 363, 370, 389, 390, 392, 393, 395, 396, 397, 403, 419, 421, 422, 425, 426, 427, 430, 432, 437, 438, 439, 440, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 478, 489, 501, 511, 512, 518, 521, 527, 583, 586, 587, 588, 609, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 655, 667, 671, 770, 838, 839, 842, 851, 853, 862, 863, 872, 873, 948, 950, 951, 953, 961, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "scienc": [0, 38, 79, 157, 360, 363, 376, 390, 419, 432, 515, 517, 524, 665, 666, 670, 820, 944, 946, 950, 951, 954, 957, 966, 975, 978, 983, 1004], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 57, 59, 60, 63, 65, 70, 80, 88, 90, 95, 98, 100, 101, 105, 110, 115, 122, 129, 132, 146, 149, 156, 157, 161, 166, 167, 168, 169, 172, 175, 176, 185, 186, 188, 189, 190, 192, 196, 198, 200, 205, 206, 211, 214, 219, 225, 232, 243, 246, 253, 254, 256, 257, 258, 259, 260, 263, 264, 265, 266, 274, 276, 281, 295, 299, 300, 303, 306, 308, 309, 310, 316, 324, 325, 334, 338, 339, 340, 343, 347, 349, 353, 354, 355, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 418, 420, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 435, 438, 440, 442, 447, 452, 453, 464, 465, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 491, 511, 516, 517, 520, 524, 528, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 546, 558, 560, 561, 565, 566, 567, 568, 587, 588, 592, 593, 597, 604, 607, 609, 610, 611, 612, 620, 624, 625, 626, 627, 631, 634, 635, 636, 638, 643, 645, 646, 648, 650, 651, 652, 653, 655, 657, 665, 669, 672, 676, 679, 685, 696, 709, 725, 726, 729, 738, 746, 749, 753, 754, 755, 756, 758, 763, 765, 766, 769, 770, 771, 772, 775, 776, 778, 779, 781, 783, 785, 789, 790, 794, 796, 797, 799, 800, 801, 802, 803, 805, 806, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 829, 833, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 852, 853, 856, 858, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 888, 898, 901, 911, 925, 943, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 968, 969, 970, 971, 973, 974, 978, 980, 984, 986, 987, 988, 989, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "2014": [0, 52, 360, 395, 397, 400, 507, 584, 585, 599, 600, 635, 669, 830, 831, 908, 909, 951, 958, 978, 999], "2015": [0, 167, 360, 400, 684, 697, 698, 699, 830, 831, 954, 961, 978, 1000, 1001], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 58, 59, 64, 65, 69, 84, 91, 95, 98, 105, 113, 122, 125, 127, 128, 150, 152, 153, 154, 155, 166, 167, 176, 180, 191, 196, 199, 203, 204, 208, 210, 212, 214, 217, 221, 222, 228, 229, 231, 238, 251, 256, 258, 259, 269, 295, 298, 302, 308, 310, 314, 316, 318, 323, 332, 333, 339, 361, 363, 366, 370, 394, 397, 398, 399, 402, 421, 451, 477, 481, 500, 510, 516, 521, 530, 531, 546, 570, 571, 592, 594, 635, 636, 643, 645, 647, 653, 654, 655, 669, 689, 772, 785, 802, 822, 872, 881, 949, 950, 954, 955, 957, 960, 964, 996], "2018": [0, 196, 214, 398, 428, 943, 954, 972, 978, 1003, 1004], "nyu": [0, 120, 178, 822], "moor": [0, 710, 954, 978], "environ": [0, 12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 353, 361, 363, 364, 366, 371, 373, 376, 381, 384, 391, 476, 974, 975, 978, 1003, 1004], "student": [0, 97, 256, 951, 975, 978], "t\u00e9l\u00e9com": [0, 972], "paristech": [0, 24, 25, 42, 225, 972], "rv": [0, 120, 260, 298, 776, 783, 785, 943, 996, 997, 1000, 1001, 1002, 1003, 1004], "thierri": [0, 241, 243, 978, 1002, 1003, 1010], "guillemot": [0, 241, 243, 1002, 1003], "labex": 0, "digicosm": 0, "goix": [0, 1000, 1002, 1003, 1004, 1005], "mathurin": [0, 1007, 1009, 1010], "massia": [0, 1007, 1009, 1010], "2019": [0, 354, 364, 390, 430, 440, 669, 951, 961, 964, 1004, 1005, 1006], "dure": [0, 4, 5, 12, 50, 57, 71, 74, 85, 100, 114, 119, 126, 143, 149, 154, 166, 169, 185, 197, 204, 254, 308, 309, 353, 355, 364, 366, 367, 370, 378, 379, 390, 391, 395, 397, 398, 400, 401, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 590, 591, 592, 594, 596, 597, 599, 600, 602, 604, 605, 606, 607, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 764, 770, 771, 772, 775, 776, 785, 794, 795, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 944, 946, 950, 951, 957, 964, 966, 984, 989, 991, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "phd": [0, 390, 397, 975, 978], "chan": [0, 811, 853], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 59, 63, 67, 80, 123, 130, 131, 132, 150, 155, 164, 166, 167, 176, 189, 211, 217, 218, 222, 240, 243, 248, 256, 308, 315, 325, 339, 349, 354, 361, 366, 367, 373, 374, 376, 378, 390, 395, 397, 399, 400, 402, 421, 422, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 456, 489, 492, 508, 509, 510, 514, 515, 517, 520, 522, 523, 524, 525, 530, 531, 536, 537, 570, 584, 585, 587, 588, 596, 597, 604, 617, 622, 623, 624, 625, 629, 630, 635, 637, 638, 639, 640, 643, 644, 645, 646, 648, 653, 654, 655, 657, 658, 661, 667, 668, 669, 671, 672, 770, 771, 803, 822, 829, 830, 831, 868, 895, 908, 909, 923, 928, 929, 946, 950, 951, 958, 959, 960, 968, 970, 974, 986, 988, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "were": [0, 4, 32, 69, 70, 73, 79, 80, 119, 122, 143, 146, 154, 162, 196, 197, 226, 265, 267, 294, 295, 307, 308, 310, 316, 338, 340, 347, 349, 360, 361, 363, 366, 369, 376, 378, 387, 391, 397, 398, 442, 445, 446, 473, 538, 539, 556, 565, 568, 579, 775, 776, 790, 797, 869, 870, 906, 943, 954, 955, 970, 977, 988, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "through": [0, 7, 115, 119, 157, 166, 217, 230, 251, 256, 259, 281, 302, 303, 323, 330, 340, 347, 363, 366, 367, 372, 374, 378, 379, 381, 390, 393, 395, 397, 399, 400, 442, 445, 450, 512, 534, 535, 538, 541, 542, 543, 558, 570, 571, 574, 624, 628, 630, 632, 635, 636, 638, 640, 642, 645, 653, 654, 665, 668, 696, 849, 860, 864, 865, 880, 881, 882, 883, 915, 943, 944, 951, 954, 956, 957, 958, 960, 962, 964, 968, 969, 970, 978, 980, 987, 989, 996, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011], "program": [0, 50, 339, 349, 354, 355, 363, 364, 366, 371, 376, 485, 612, 647, 862, 863, 950, 969, 970, 974, 975, 996, 998], "immanuel": [0, 996, 997, 1001], "bayer": [0, 996, 997, 1001], "kemal": [0, 20, 21, 998, 999], "eren": [0, 20, 21, 998, 999], "tr\u00e9segni": [0, 998], "hamzeh": [0, 999, 1000], "alsalhi": [0, 999, 1000], "issam": [0, 292, 1002], "laradji": [0, 292, 1002], "maheshakya": [0, 999, 1000, 1001], "wijewardena": [0, 999, 1000, 1001], "xue": [0, 1000, 1001, 1002, 1004, 1005, 1008], "nelson": [0, 1002, 1003, 1008], "yenchen": [0, 1002], "lin": [0, 511, 635, 969, 1001, 1002, 1003, 1004], "neurodebian": 0, "debian": [0, 353, 364, 371], "packag": [0, 19, 46, 53, 161, 257, 276, 354, 359, 360, 363, 364, 366, 367, 369, 371, 374, 376, 378, 381, 392, 397, 398, 430, 456, 623, 624, 922, 944, 950, 953, 957, 964, 970, 978, 983, 996, 1002, 1004, 1005, 1006], "dr": [0, 363, 390, 1010], "jame": [0, 363, 394, 803, 955, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "haxbi": 0, "dartmouth": 0, "colleg": 0, "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 57, 61, 66, 70, 73, 77, 79, 80, 85, 89, 95, 111, 112, 122, 125, 126, 129, 130, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 177, 179, 184, 185, 186, 190, 191, 196, 197, 204, 205, 210, 213, 214, 217, 219, 225, 229, 234, 242, 243, 244, 250, 251, 256, 257, 259, 262, 264, 279, 282, 283, 287, 293, 294, 298, 307, 308, 309, 310, 321, 322, 324, 325, 335, 338, 339, 340, 347, 349, 353, 354, 355, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 411, 422, 425, 427, 429, 431, 437, 441, 443, 459, 460, 461, 476, 485, 486, 492, 500, 501, 511, 513, 518, 525, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 547, 549, 551, 565, 583, 586, 588, 609, 610, 612, 616, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 659, 660, 666, 669, 670, 674, 675, 677, 678, 683, 684, 691, 696, 701, 702, 713, 714, 715, 721, 729, 731, 732, 738, 757, 759, 762, 763, 764, 767, 770, 789, 790, 806, 807, 808, 809, 810, 811, 812, 816, 824, 831, 833, 840, 873, 875, 878, 880, 881, 882, 883, 892, 893, 922, 943, 944, 946, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 961, 964, 967, 968, 969, 970, 973, 974, 975, 977, 978, 980, 985, 987, 988, 989, 993, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "particip": [0, 365, 366, 379, 978], "could": [0, 4, 9, 13, 27, 37, 42, 53, 70, 71, 95, 98, 111, 112, 119, 122, 143, 149, 154, 162, 166, 167, 196, 197, 205, 214, 221, 230, 231, 250, 256, 258, 279, 284, 287, 309, 321, 322, 338, 343, 355, 366, 371, 373, 378, 381, 384, 388, 394, 397, 398, 402, 452, 510, 515, 584, 585, 606, 648, 774, 778, 780, 943, 950, 951, 961, 962, 964, 969, 975, 988, 993, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "attend": 0, "psf": [0, 366], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 70, 77, 95, 113, 149, 166, 167, 168, 196, 200, 213, 214, 230, 256, 257, 258, 259, 261, 262, 263, 265, 266, 274, 306, 325, 333, 338, 339, 349, 353, 354, 355, 359, 360, 361, 364, 366, 367, 368, 369, 371, 373, 376, 377, 378, 381, 384, 387, 388, 389, 390, 391, 393, 394, 395, 397, 398, 400, 402, 404, 411, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 473, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 668, 669, 680, 685, 697, 698, 699, 703, 731, 732, 753, 758, 760, 763, 770, 771, 772, 774, 775, 776, 783, 784, 785, 789, 790, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 890, 892, 893, 896, 901, 922, 925, 928, 943, 946, 949, 950, 951, 953, 954, 955, 956, 957, 962, 964, 969, 970, 975, 978, 980, 987, 988, 989, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011], "tinyclu": 0, "french": [0, 214], "associ": [0, 11, 24, 25, 79, 149, 244, 313, 315, 338, 373, 390, 392, 394, 395, 397, 398, 427, 447, 448, 449, 450, 451, 452, 453, 454, 470, 471, 472, 501, 534, 538, 541, 582, 583, 607, 622, 635, 636, 643, 645, 651, 652, 653, 666, 672, 676, 706, 714, 816, 824, 850, 861, 869, 878, 880, 882, 898, 953, 954, 957, 964, 967, 978, 988, 996, 1008], "fond": [0, 978], "de": [0, 12, 24, 25, 26, 27, 73, 114, 129, 149, 150, 152, 153, 154, 155, 156, 158, 187, 230, 231, 315, 333, 363, 612, 665, 739, 950, 951, 975, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 61, 65, 71, 117, 122, 129, 143, 146, 154, 161, 167, 168, 185, 196, 197, 198, 214, 218, 230, 250, 253, 256, 257, 259, 265, 303, 325, 333, 339, 347, 353, 361, 363, 366, 370, 371, 373, 376, 379, 390, 392, 395, 398, 400, 470, 471, 477, 481, 487, 623, 624, 872, 944, 950, 951, 954, 959, 960, 961, 975, 978, 985, 987, 988, 996], "our": [0, 4, 5, 7, 11, 12, 42, 53, 55, 69, 70, 79, 80, 85, 95, 96, 109, 111, 116, 119, 122, 123, 125, 141, 146, 149, 154, 156, 166, 168, 169, 196, 214, 219, 221, 250, 256, 259, 262, 263, 294, 298, 307, 309, 318, 322, 328, 329, 330, 333, 338, 339, 340, 349, 354, 365, 369, 370, 373, 376, 377, 378, 379, 390, 394, 397, 398, 401, 423, 428, 540, 621, 669, 684, 696, 701, 713, 731, 815, 816, 817, 819, 821, 823, 824, 825, 943, 944, 950, 951, 954, 960, 964, 967, 968, 969, 975, 978, 980, 987, 988, 989, 1003, 1004, 1006, 1007, 1010, 1011], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 358, 363, 364, 367, 369, 373, 376, 377, 378, 379, 381, 387, 388, 390, 391, 393, 394, 395, 399, 400, 416, 478, 512, 516, 518, 520, 523, 536, 537, 588, 593, 598, 601, 615, 616, 617, 618, 633, 643, 645, 650, 653, 664, 666, 669, 670, 676, 685, 772, 793, 801, 802, 803, 805, 811, 819, 830, 834, 853, 867, 868, 943, 948, 950, 951, 953, 954, 955, 961, 962, 968, 969, 975, 978, 980, 991, 996, 1000, 1001, 1004, 1008, 1009, 1010, 1011], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 48, 52, 53, 54, 59, 63, 74, 81, 90, 95, 97, 98, 110, 115, 117, 118, 122, 131, 132, 146, 154, 155, 157, 164, 166, 167, 175, 182, 188, 189, 190, 196, 197, 198, 199, 205, 207, 211, 213, 214, 217, 218, 225, 231, 235, 238, 242, 244, 246, 254, 257, 258, 259, 260, 262, 263, 264, 266, 268, 274, 281, 294, 298, 299, 303, 306, 307, 308, 309, 313, 315, 316, 317, 322, 325, 330, 334, 338, 339, 340, 344, 347, 349, 353, 354, 355, 359, 361, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 379, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 411, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 485, 486, 492, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 677, 678, 681, 685, 689, 690, 691, 692, 693, 694, 696, 697, 698, 701, 703, 704, 705, 707, 708, 710, 711, 712, 713, 720, 721, 723, 725, 726, 728, 731, 736, 744, 749, 753, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 778, 780, 781, 783, 785, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 898, 900, 901, 902, 903, 914, 919, 922, 929, 938, 943, 944, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 964, 967, 968, 969, 970, 974, 975, 978, 980, 981, 983, 984, 986, 987, 988, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "handl": [0, 4, 70, 119, 129, 172, 263, 265, 276, 306, 338, 340, 353, 358, 360, 366, 367, 374, 376, 378, 398, 473, 521, 553, 558, 559, 562, 563, 565, 566, 568, 587, 612, 623, 624, 629, 635, 636, 637, 638, 639, 645, 652, 653, 655, 658, 696, 763, 846, 872, 877, 884, 910, 951, 954, 955, 956, 957, 960, 962, 969, 970, 974, 975, 978, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 61, 70, 74, 79, 81, 96, 97, 98, 100, 109, 112, 119, 126, 127, 129, 142, 143, 153, 155, 162, 164, 166, 167, 168, 174, 175, 182, 189, 190, 195, 197, 198, 200, 202, 211, 212, 214, 215, 220, 221, 226, 227, 228, 229, 231, 241, 243, 247, 249, 250, 256, 265, 272, 276, 280, 295, 298, 300, 302, 307, 308, 309, 310, 317, 320, 322, 327, 328, 333, 334, 336, 338, 339, 340, 347, 349, 353, 354, 358, 361, 362, 366, 367, 370, 371, 373, 374, 376, 378, 379, 388, 389, 390, 391, 394, 396, 397, 398, 399, 400, 402, 416, 420, 424, 428, 430, 434, 440, 441, 442, 443, 445, 446, 465, 473, 474, 480, 481, 485, 503, 509, 512, 513, 515, 517, 521, 524, 526, 528, 529, 530, 534, 535, 536, 537, 538, 539, 541, 542, 543, 549, 565, 566, 568, 569, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 612, 615, 620, 627, 629, 634, 635, 636, 637, 641, 642, 643, 645, 646, 649, 653, 654, 655, 662, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 678, 682, 683, 688, 691, 693, 695, 696, 701, 702, 703, 710, 712, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 757, 760, 763, 764, 767, 770, 771, 772, 773, 777, 778, 779, 780, 781, 783, 789, 795, 799, 802, 821, 823, 824, 825, 828, 833, 834, 836, 837, 838, 841, 845, 846, 847, 848, 849, 850, 852, 853, 859, 860, 861, 862, 863, 865, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 892, 893, 907, 909, 913, 915, 919, 943, 944, 945, 946, 947, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 965, 966, 967, 968, 969, 970, 975, 987, 988, 989, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "profit": 0, "organ": [0, 11, 69, 79, 338, 360, 365, 366, 379, 821, 974], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 44, 46, 49, 53, 55, 57, 64, 66, 69, 70, 71, 74, 77, 79, 80, 85, 91, 97, 99, 100, 101, 106, 113, 114, 115, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 135, 141, 143, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 169, 172, 175, 176, 185, 189, 196, 197, 198, 202, 204, 210, 212, 213, 214, 217, 218, 219, 221, 225, 226, 229, 230, 231, 232, 234, 235, 241, 242, 246, 247, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 276, 281, 282, 283, 293, 298, 300, 301, 302, 303, 306, 308, 309, 310, 313, 315, 316, 317, 325, 333, 335, 338, 339, 340, 343, 347, 349, 353, 354, 355, 358, 360, 361, 363, 364, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 438, 440, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 500, 508, 509, 510, 511, 514, 518, 519, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 555, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 587, 588, 589, 590, 591, 592, 594, 596, 599, 604, 605, 606, 607, 609, 610, 611, 617, 619, 620, 621, 624, 625, 626, 631, 632, 633, 635, 636, 638, 643, 645, 646, 648, 650, 651, 652, 653, 654, 655, 657, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 692, 693, 695, 696, 698, 700, 701, 709, 710, 711, 712, 718, 721, 731, 733, 753, 754, 755, 756, 757, 758, 764, 770, 771, 772, 775, 776, 777, 779, 781, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 830, 833, 837, 840, 844, 846, 848, 851, 852, 853, 854, 856, 864, 865, 867, 868, 869, 872, 874, 877, 878, 880, 881, 882, 883, 884, 888, 901, 904, 908, 909, 911, 922, 923, 926, 929, 935, 938, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 973, 974, 975, 978, 980, 982, 984, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "manag": [0, 85, 352, 360, 364, 367, 369, 373, 376, 378, 379, 397, 428, 446, 603, 870, 948, 970, 975, 978, 989, 991, 1009], "board": [0, 19], "scipi": [0, 13, 17, 19, 34, 41, 46, 47, 53, 54, 77, 78, 81, 96, 98, 101, 103, 121, 166, 169, 182, 186, 198, 242, 246, 247, 253, 256, 264, 268, 276, 281, 286, 295, 307, 308, 313, 314, 353, 354, 360, 361, 364, 366, 367, 369, 371, 374, 376, 377, 378, 381, 383, 390, 395, 398, 428, 429, 430, 431, 435, 440, 441, 473, 480, 485, 509, 511, 512, 518, 521, 558, 559, 562, 563, 565, 566, 587, 588, 625, 626, 630, 634, 635, 636, 640, 643, 645, 646, 647, 649, 651, 653, 654, 655, 657, 661, 664, 668, 669, 672, 676, 735, 738, 753, 754, 755, 756, 765, 766, 776, 783, 785, 799, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 836, 845, 851, 852, 853, 855, 859, 862, 863, 872, 874, 875, 877, 878, 911, 925, 928, 943, 944, 950, 952, 955, 957, 958, 964, 968, 969, 973, 975, 983, 988, 989, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "mission": [0, 339, 978], "foster": [0, 1004], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 57, 59, 60, 69, 71, 78, 79, 80, 81, 96, 105, 109, 113, 116, 117, 121, 122, 123, 124, 145, 149, 154, 156, 157, 161, 166, 167, 168, 169, 172, 176, 177, 181, 182, 183, 184, 185, 196, 198, 204, 210, 213, 214, 218, 221, 226, 228, 229, 231, 234, 235, 237, 254, 256, 257, 259, 263, 265, 267, 276, 278, 280, 282, 283, 285, 286, 289, 298, 306, 310, 314, 316, 325, 338, 339, 340, 347, 354, 355, 356, 360, 361, 363, 366, 370, 371, 372, 374, 376, 377, 378, 380, 381, 384, 385, 387, 388, 389, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 435, 437, 439, 440, 441, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 493, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 559, 562, 563, 566, 567, 568, 570, 571, 580, 581, 582, 583, 586, 587, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 700, 701, 702, 704, 705, 706, 709, 711, 713, 714, 715, 717, 718, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 838, 839, 842, 843, 848, 849, 850, 851, 852, 853, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 906, 907, 908, 909, 921, 927, 929, 935, 943, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 966, 967, 968, 969, 970, 974, 975, 978, 984, 985, 988, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "particular": [0, 4, 11, 13, 37, 39, 40, 59, 70, 77, 91, 100, 104, 119, 122, 125, 153, 161, 166, 196, 198, 204, 230, 234, 253, 257, 259, 265, 285, 289, 298, 306, 307, 310, 339, 340, 349, 353, 360, 361, 364, 365, 366, 367, 369, 370, 371, 373, 374, 377, 378, 381, 390, 394, 395, 397, 398, 399, 400, 447, 451, 453, 473, 521, 540, 586, 630, 635, 640, 649, 651, 661, 664, 688, 703, 760, 805, 820, 891, 893, 944, 946, 948, 950, 954, 957, 958, 959, 960, 962, 964, 975, 978, 988, 996, 999, 1003, 1004, 1005, 1007, 1009, 1010, 1011], "As": [0, 4, 7, 25, 27, 30, 40, 53, 57, 65, 81, 85, 100, 110, 111, 116, 119, 121, 123, 128, 141, 149, 154, 162, 166, 168, 172, 175, 178, 185, 187, 196, 200, 204, 214, 222, 244, 251, 253, 254, 256, 257, 259, 269, 274, 276, 281, 299, 303, 309, 316, 325, 339, 340, 343, 345, 346, 349, 353, 354, 361, 364, 365, 366, 367, 369, 370, 377, 378, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 470, 531, 539, 543, 596, 609, 632, 633, 649, 651, 664, 710, 733, 739, 815, 816, 817, 819, 821, 852, 943, 948, 950, 951, 953, 954, 955, 957, 961, 964, 968, 969, 970, 975, 978, 980, 984, 987, 988, 989, 996, 1002, 1007], "fiscal": 0, "home": [0, 8, 12, 27, 50, 56, 84, 95, 112, 121, 123, 124, 129, 153, 155, 157, 158, 188, 204, 205, 218, 219, 220, 257, 267, 307, 310, 330, 344, 361, 364, 373, 381, 389, 463, 476, 656, 978], "ensur": [0, 41, 81, 91, 116, 169, 196, 218, 251, 259, 294, 347, 349, 353, 354, 366, 367, 369, 370, 371, 379, 381, 388, 390, 391, 394, 402, 447, 510, 511, 518, 588, 604, 625, 646, 657, 673, 681, 757, 764, 794, 865, 892, 893, 909, 915, 950, 951, 954, 964, 970, 984, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "monei": [0, 214, 978], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 55, 59, 66, 69, 70, 71, 77, 79, 80, 85, 95, 98, 99, 100, 103, 113, 118, 119, 120, 122, 125, 129, 130, 131, 143, 149, 161, 166, 167, 168, 169, 175, 176, 185, 187, 189, 193, 196, 198, 201, 212, 225, 226, 227, 231, 238, 242, 244, 255, 256, 257, 259, 263, 265, 266, 267, 276, 278, 282, 283, 284, 298, 300, 302, 303, 306, 307, 308, 309, 310, 315, 316, 318, 325, 328, 329, 333, 338, 339, 340, 343, 349, 353, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 381, 384, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 406, 411, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 466, 467, 468, 469, 473, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 492, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 554, 556, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 680, 681, 683, 684, 688, 689, 692, 702, 703, 704, 705, 707, 709, 710, 713, 717, 721, 723, 726, 729, 730, 732, 736, 738, 742, 743, 744, 746, 749, 753, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 768, 770, 771, 772, 775, 776, 777, 785, 789, 790, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 891, 892, 893, 899, 903, 907, 908, 909, 910, 912, 913, 916, 922, 923, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 975, 978, 980, 986, 987, 988, 989, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "need": [0, 4, 9, 12, 32, 46, 48, 53, 81, 97, 119, 121, 122, 123, 129, 146, 149, 154, 161, 162, 166, 184, 198, 213, 214, 218, 225, 228, 230, 235, 241, 242, 246, 247, 254, 256, 259, 261, 278, 306, 316, 325, 333, 338, 339, 349, 353, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 384, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 406, 416, 418, 420, 424, 427, 443, 480, 518, 528, 549, 559, 565, 566, 567, 568, 604, 612, 616, 617, 619, 626, 643, 645, 648, 653, 656, 669, 696, 697, 698, 699, 756, 760, 770, 771, 772, 775, 776, 785, 786, 787, 794, 802, 805, 813, 814, 830, 833, 840, 846, 850, 867, 874, 877, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 967, 968, 969, 970, 975, 978, 986, 987, 988, 989, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "keep": [0, 6, 42, 74, 98, 100, 161, 166, 168, 169, 196, 197, 198, 204, 214, 246, 251, 254, 302, 309, 314, 325, 338, 339, 343, 349, 353, 354, 366, 369, 377, 378, 390, 391, 392, 393, 394, 395, 411, 428, 443, 459, 460, 461, 462, 470, 471, 511, 514, 517, 518, 521, 524, 531, 533, 535, 537, 539, 542, 545, 547, 572, 575, 577, 579, 580, 588, 611, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 653, 654, 655, 656, 684, 789, 806, 807, 816, 824, 830, 831, 868, 873, 875, 878, 881, 883, 950, 955, 959, 962, 964, 975, 978, 980, 985, 987, 989, 996, 1001, 1004, 1005, 1009, 1010], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 61, 65, 69, 72, 74, 91, 99, 100, 110, 113, 116, 129, 146, 150, 155, 157, 158, 161, 166, 167, 168, 172, 175, 177, 185, 190, 196, 198, 212, 225, 228, 229, 232, 242, 243, 247, 250, 251, 255, 256, 257, 259, 263, 264, 265, 266, 267, 269, 278, 298, 299, 300, 303, 306, 309, 322, 325, 333, 338, 340, 347, 349, 354, 358, 359, 360, 361, 362, 365, 366, 367, 369, 370, 371, 373, 374, 376, 378, 379, 384, 388, 389, 390, 393, 394, 395, 397, 398, 399, 400, 401, 402, 423, 442, 445, 446, 460, 462, 473, 498, 509, 529, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 552, 559, 565, 566, 567, 568, 571, 574, 583, 611, 620, 623, 624, 626, 633, 634, 635, 636, 653, 654, 655, 656, 684, 704, 705, 713, 729, 749, 753, 758, 759, 762, 763, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 800, 808, 819, 821, 823, 824, 825, 832, 833, 834, 835, 836, 849, 860, 865, 870, 872, 873, 880, 881, 882, 883, 888, 913, 943, 947, 948, 950, 951, 953, 954, 955, 956, 957, 960, 961, 964, 966, 969, 970, 975, 980, 986, 987, 989, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 69, 196, 214, 373, 376, 378, 395, 397, 398, 498, 754, 755, 953, 969, 978, 1004, 1005, 1006], "go": [0, 26, 129, 146, 162, 166, 184, 256, 309, 338, 347, 361, 366, 367, 370, 374, 381, 391, 395, 397, 399, 422, 538, 539, 562, 563, 696, 912, 913, 964, 974, 975, 980, 989, 1007], "toward": [0, 26, 27, 62, 81, 116, 122, 128, 149, 168, 175, 200, 201, 222, 366, 378, 390, 426, 430, 440, 653, 655, 672, 847, 953, 968, 970, 973, 975], "cover": [0, 52, 172, 196, 214, 349, 358, 361, 366, 377, 612, 696, 767, 954, 955, 973], "travel": 0, "expens": [0, 55, 129, 149, 167, 226, 253, 258, 265, 325, 338, 339, 340, 355, 371, 378, 390, 391, 394, 397, 398, 427, 446, 485, 772, 775, 776, 785, 796, 870, 872, 951, 953, 969, 974, 978, 989, 1000], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 57, 61, 69, 77, 85, 111, 113, 120, 122, 127, 129, 146, 154, 156, 166, 167, 168, 172, 184, 194, 196, 197, 198, 200, 204, 217, 218, 219, 222, 225, 229, 234, 243, 256, 263, 265, 267, 271, 281, 282, 283, 307, 308, 309, 310, 333, 338, 339, 340, 349, 361, 363, 365, 366, 369, 371, 373, 374, 376, 377, 378, 379, 388, 390, 392, 394, 395, 397, 400, 401, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 437, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 677, 697, 698, 699, 760, 763, 765, 768, 770, 771, 772, 775, 776, 785, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 907, 908, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 964, 967, 968, 970, 971, 974, 975, 978, 988, 989, 996, 997, 1000, 1002, 1003, 1004, 1007], "budget": [0, 119, 808, 809, 810, 811, 812, 943], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 377, 378, 379, 381, 382, 383, 384, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 410, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 466, 468, 470, 472, 473, 474, 477, 478, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 738, 739, 741, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 898, 903, 906, 907, 909, 911, 913, 914, 916, 917, 918, 919, 920, 921, 922, 925, 928, 929, 935, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 977, 978, 980, 981, 984, 985, 986, 987, 988, 992, 994, 998], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 65, 70, 71, 79, 81, 84, 85, 91, 98, 113, 114, 118, 122, 123, 146, 149, 156, 161, 166, 167, 168, 172, 184, 185, 189, 196, 197, 198, 200, 204, 210, 212, 214, 217, 218, 219, 221, 225, 226, 228, 230, 231, 232, 242, 251, 256, 258, 259, 262, 263, 264, 274, 276, 278, 282, 283, 293, 298, 299, 302, 303, 306, 307, 308, 309, 310, 314, 316, 318, 325, 338, 347, 353, 354, 360, 363, 366, 367, 369, 371, 372, 376, 377, 378, 381, 385, 388, 389, 390, 392, 393, 395, 397, 398, 400, 401, 402, 403, 404, 405, 411, 413, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 442, 443, 446, 447, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 464, 467, 473, 475, 481, 486, 492, 496, 504, 507, 511, 515, 516, 517, 518, 520, 521, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 562, 563, 565, 567, 568, 570, 571, 574, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 606, 607, 609, 610, 612, 613, 615, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 672, 673, 676, 677, 679, 683, 684, 689, 691, 696, 697, 698, 699, 703, 704, 705, 707, 709, 713, 716, 717, 721, 729, 730, 733, 738, 739, 743, 745, 749, 753, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 781, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 798, 800, 802, 805, 806, 807, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 840, 842, 843, 845, 846, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 888, 898, 899, 908, 909, 919, 922, 929, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 971, 973, 975, 977, 980, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "regard": [0, 5, 7, 11, 53, 70, 100, 137, 149, 154, 168, 185, 193, 198, 219, 231, 258, 265, 266, 339, 362, 366, 370, 376, 378, 384, 389, 390, 395, 397, 398, 400, 422, 425, 430, 437, 440, 478, 591, 596, 633, 635, 718, 771, 797, 815, 816, 947, 950, 954, 956, 957, 959, 961, 968, 969, 970, 982, 989, 1003, 1006], "might": [0, 4, 5, 31, 42, 44, 59, 61, 69, 110, 118, 127, 143, 155, 162, 166, 167, 168, 172, 196, 214, 225, 256, 293, 303, 308, 335, 349, 353, 354, 360, 364, 366, 367, 369, 370, 373, 376, 378, 381, 384, 391, 394, 395, 396, 397, 398, 400, 413, 422, 465, 473, 478, 480, 485, 492, 500, 513, 532, 533, 534, 541, 555, 557, 559, 587, 588, 604, 627, 631, 632, 633, 635, 636, 653, 655, 669, 732, 767, 775, 776, 797, 822, 838, 853, 865, 884, 886, 888, 892, 893, 909, 923, 943, 944, 946, 948, 950, 951, 953, 954, 956, 957, 961, 962, 964, 969, 970, 989, 997, 999, 1004, 1005, 1007, 1010, 1011], "pai": [0, 214, 366, 950], "dn": [0, 957], "continu": [0, 17, 19, 42, 119, 120, 149, 164, 197, 204, 214, 218, 221, 237, 242, 246, 247, 294, 297, 303, 304, 308, 309, 347, 361, 364, 367, 368, 369, 370, 373, 376, 378, 379, 381, 390, 395, 397, 469, 569, 573, 576, 577, 584, 585, 586, 623, 624, 629, 630, 634, 637, 638, 639, 640, 701, 717, 731, 783, 785, 836, 838, 840, 842, 843, 852, 853, 869, 881, 919, 943, 950, 951, 954, 955, 957, 958, 964, 970, 975, 977, 978, 980, 987, 993, 996, 998, 999, 1004, 1009, 1010], "integr": [0, 42, 70, 143, 157, 185, 294, 308, 364, 367, 368, 369, 371, 373, 378, 381, 395, 400, 691, 761, 929, 953, 961, 978, 983, 997, 999, 1000, 1008, 1009], "servic": [0, 4, 226, 366, 369, 978, 1004], "azur": [0, 366], "travi": [0, 368, 996, 1004], "cl": [0, 8, 12, 16, 372, 378, 882], "circlecl": 0, "free": [0, 5, 154, 155, 162, 195, 246, 298, 360, 365, 366, 373, 376, 381, 398, 400, 430, 586, 648, 829, 878, 943, 946, 950, 954, 975, 1004], "cpu": [0, 60, 257, 353, 354, 364, 371, 378, 381, 398, 473, 609, 624, 628, 630, 632, 635, 636, 638, 640, 642, 643, 645, 653, 656, 772, 785, 794, 795, 796, 817, 825, 865, 922, 954, 980, 984, 989, 1001, 1010, 1011], "server": [0, 353, 363, 364, 473, 1004], "anaconda": [0, 354, 364, 369], "inc": [0, 69, 255, 944, 966, 978], "storag": [0, 340, 378, 635, 636, 643, 645, 653, 654, 655, 872, 957, 969, 999, 1004], "thei": [0, 4, 26, 27, 37, 50, 81, 97, 111, 116, 117, 119, 121, 123, 125, 142, 149, 150, 154, 166, 167, 182, 185, 191, 196, 197, 214, 218, 221, 225, 231, 250, 253, 256, 257, 259, 265, 278, 293, 298, 303, 308, 310, 338, 339, 345, 346, 349, 353, 354, 355, 359, 361, 362, 363, 364, 365, 366, 367, 369, 373, 374, 376, 377, 378, 379, 387, 389, 390, 391, 392, 393, 395, 397, 399, 400, 402, 419, 421, 425, 431, 432, 437, 445, 473, 485, 486, 510, 512, 514, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 556, 565, 568, 587, 596, 606, 620, 623, 624, 629, 635, 636, 637, 638, 639, 647, 649, 653, 655, 658, 664, 737, 738, 740, 743, 749, 764, 772, 785, 802, 808, 809, 810, 811, 812, 830, 833, 835, 841, 852, 853, 874, 877, 880, 881, 882, 883, 887, 943, 944, 946, 948, 950, 953, 954, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 978, 980, 984, 986, 987, 989, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "stage": [0, 7, 26, 71, 115, 120, 123, 369, 386, 390, 397, 426, 530, 531, 536, 537, 538, 539, 565, 566, 568, 579, 951, 964, 973, 1004, 1008], "nightli": [0, 354, 368, 369], "build": [0, 4, 7, 17, 32, 43, 66, 73, 99, 118, 120, 126, 132, 143, 145, 160, 161, 163, 164, 166, 204, 261, 264, 276, 294, 295, 299, 340, 349, 353, 354, 355, 362, 367, 368, 369, 370, 371, 378, 381, 383, 389, 390, 391, 394, 397, 398, 421, 467, 478, 480, 501, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 562, 563, 565, 566, 568, 604, 605, 607, 668, 689, 690, 773, 777, 780, 789, 793, 795, 834, 851, 853, 880, 881, 882, 883, 885, 905, 943, 944, 951, 954, 958, 960, 964, 969, 970, 974, 975, 978, 981, 983, 987, 988, 996, 999, 1001, 1002, 1003, 1005, 1008], "applic": [3, 5, 19, 49, 79, 164, 172, 196, 213, 219, 250, 259, 298, 353, 355, 361, 363, 366, 367, 371, 373, 374, 376, 378, 390, 394, 395, 396, 397, 400, 402, 423, 430, 473, 475, 509, 510, 511, 530, 531, 606, 665, 666, 667, 671, 688, 704, 705, 713, 758, 759, 762, 799, 943, 950, 951, 952, 953, 954, 958, 960, 966, 970, 974, 975, 978, 987, 989, 996, 997, 1002, 1004, 1007], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 65, 95, 110, 113, 117, 122, 123, 149, 164, 168, 172, 175, 182, 185, 189, 190, 196, 198, 213, 214, 219, 225, 226, 232, 237, 254, 256, 261, 265, 266, 270, 281, 288, 302, 309, 322, 325, 333, 334, 338, 339, 349, 353, 361, 362, 363, 364, 365, 367, 370, 371, 374, 376, 378, 388, 389, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 423, 425, 427, 428, 430, 435, 440, 443, 456, 480, 485, 486, 492, 493, 494, 495, 500, 501, 505, 508, 510, 514, 516, 519, 520, 521, 522, 523, 524, 525, 528, 529, 534, 538, 541, 544, 548, 550, 566, 587, 608, 620, 625, 627, 629, 631, 632, 633, 634, 635, 636, 641, 642, 643, 645, 646, 649, 650, 651, 652, 653, 654, 656, 657, 662, 663, 664, 665, 666, 668, 670, 672, 684, 692, 704, 705, 710, 714, 759, 762, 763, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 786, 787, 788, 789, 790, 791, 793, 801, 802, 803, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 839, 840, 846, 856, 862, 863, 872, 873, 880, 882, 898, 909, 944, 945, 949, 950, 951, 953, 954, 955, 956, 957, 958, 962, 964, 968, 971, 975, 976, 978, 981, 982, 983, 989, 990, 991, 996, 997, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011], "medium": [3, 164, 231, 271, 325, 390, 395, 400, 620, 947, 950], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 56, 57, 59, 60, 61, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 98, 99, 101, 103, 105, 113, 121, 122, 125, 126, 142, 149, 151, 152, 155, 156, 164, 167, 168, 175, 176, 177, 178, 180, 182, 186, 191, 194, 197, 198, 199, 202, 209, 210, 217, 222, 225, 228, 229, 230, 231, 233, 234, 243, 250, 252, 254, 256, 258, 259, 261, 262, 282, 283, 284, 292, 295, 299, 300, 301, 302, 303, 307, 310, 314, 318, 321, 323, 324, 325, 335, 338, 339, 340, 343, 353, 354, 355, 361, 362, 366, 370, 374, 376, 377, 378, 381, 387, 388, 389, 392, 394, 395, 398, 400, 401, 423, 424, 426, 427, 428, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 470, 471, 472, 492, 504, 511, 513, 515, 517, 524, 534, 535, 536, 537, 538, 539, 541, 542, 564, 565, 568, 571, 609, 610, 620, 634, 643, 644, 656, 660, 669, 672, 681, 695, 713, 715, 718, 756, 766, 774, 777, 781, 788, 791, 792, 794, 797, 799, 808, 809, 810, 812, 815, 816, 817, 818, 819, 821, 823, 824, 825, 830, 831, 848, 850, 861, 866, 870, 874, 875, 876, 877, 878, 880, 881, 882, 883, 886, 908, 912, 913, 919, 920, 923, 929, 944, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 961, 964, 966, 968, 969, 970, 978, 983, 985, 987, 988, 999, 1000, 1001, 1002, 1003, 1004, 1006], "interact": [3, 89, 123, 164, 196, 222, 227, 257, 307, 365, 367, 371, 376, 378, 379, 391, 536, 537, 538, 539, 609, 610, 848, 852, 943, 946, 950, 951, 952, 959, 961, 964, 973, 975, 998, 1003, 1010, 1011], "user": [3, 25, 68, 95, 158, 164, 166, 184, 217, 246, 253, 258, 263, 265, 282, 283, 286, 306, 307, 308, 309, 310, 349, 353, 354, 356, 360, 364, 365, 366, 367, 369, 371, 372, 373, 376, 377, 378, 381, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 401, 402, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 905, 909, 943, 944, 950, 951, 953, 954, 955, 957, 964, 968, 972, 975, 978, 982, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "interfac": [3, 109, 164, 359, 360, 367, 374, 376, 378, 394, 400, 401, 420, 424, 428, 473, 676, 772, 775, 776, 785, 833, 834, 858, 939, 943, 957, 969, 974, 975, 978, 996, 998, 1001, 1002, 1004, 1005, 1010], "compress": [3, 11, 15, 19, 48, 164, 298, 361, 390, 395, 398, 629, 649, 669, 803, 925, 928, 950, 964, 988, 996, 1005], "sens": [3, 4, 15, 25, 155, 164, 172, 229, 298, 314, 325, 338, 349, 353, 369, 378, 390, 392, 394, 440, 447, 448, 449, 450, 451, 452, 453, 454, 629, 632, 633, 649, 773, 782, 869, 948, 950, 957, 958, 960, 964, 967], "tomographi": [3, 15, 164, 629, 649, 950], "reconstruct": [3, 15, 95, 96, 100, 164, 195, 220, 221, 310, 395, 398, 459, 460, 461, 508, 510, 512, 514, 515, 516, 517, 519, 520, 525, 560, 564, 629, 649, 665, 666, 670, 864, 865, 950, 951, 1010], "l1": [3, 7, 15, 30, 40, 81, 84, 164, 174, 181, 185, 207, 211, 215, 227, 257, 276, 309, 374, 376, 389, 390, 392, 395, 420, 424, 428, 435, 442, 447, 448, 449, 450, 451, 452, 453, 454, 456, 473, 479, 481, 508, 514, 515, 516, 517, 519, 520, 524, 525, 535, 542, 566, 567, 568, 574, 623, 624, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 647, 649, 653, 654, 655, 656, 658, 665, 710, 737, 743, 748, 753, 754, 755, 785, 799, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 845, 853, 859, 872, 873, 879, 881, 883, 895, 936, 950, 952, 954, 957, 964, 968, 969, 970, 987, 1001, 1003, 1009], "prior": [3, 15, 46, 47, 66, 148, 149, 159, 164, 168, 175, 177, 240, 242, 246, 247, 248, 256, 366, 367, 369, 378, 381, 390, 393, 395, 397, 400, 443, 500, 513, 525, 526, 527, 528, 536, 562, 563, 588, 590, 591, 592, 596, 599, 600, 607, 621, 622, 623, 624, 628, 629, 631, 632, 633, 637, 638, 639, 649, 655, 658, 692, 770, 808, 809, 810, 811, 812, 833, 834, 848, 874, 877, 943, 946, 948, 950, 953, 954, 956, 962, 970, 971, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "lasso": [3, 15, 105, 129, 135, 164, 166, 174, 215, 309, 353, 376, 392, 393, 395, 397, 398, 399, 449, 450, 456, 478, 501, 508, 514, 516, 519, 520, 522, 523, 525, 574, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 655, 658, 659, 660, 661, 662, 663, 697, 698, 699, 760, 794, 795, 796, 834, 853, 943, 954, 968, 976, 984, 987, 991, 996, 1000, 1001, 1002, 1004, 1005, 1007, 1009, 1010], "recognit": [3, 9, 15, 164, 295, 359, 370, 395, 397, 399, 471, 479, 509, 511, 518, 684, 689, 716, 744, 763, 764, 770, 785, 799, 853, 877, 946, 950, 954, 955, 959, 969, 971, 980, 983, 991, 996], "eigenfac": [3, 15, 164, 361, 395, 471, 518, 689, 785, 799, 853, 877, 971, 983, 996], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 69, 71, 73, 130, 134, 136, 139, 140, 144, 145, 147, 164, 174, 189, 215, 225, 231, 232, 236, 237, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 271, 300, 303, 306, 308, 312, 316, 319, 320, 323, 332, 333, 336, 338, 353, 356, 361, 367, 371, 378, 384, 391, 394, 395, 397, 399, 416, 471, 481, 489, 492, 518, 532, 533, 540, 544, 545, 553, 570, 571, 576, 577, 581, 582, 616, 620, 645, 653, 654, 655, 666, 674, 675, 677, 678, 689, 710, 717, 772, 785, 791, 795, 796, 799, 801, 802, 819, 833, 834, 846, 853, 868, 869, 942, 943, 946, 949, 951, 952, 954, 955, 959, 967, 969, 971, 976, 980, 983, 984, 985, 989, 991, 993, 996, 997, 998, 1000, 1001, 1002, 1003], "imag": [3, 6, 13, 15, 19, 32, 36, 46, 48, 51, 54, 57, 67, 69, 88, 93, 95, 107, 117, 144, 153, 164, 187, 218, 227, 230, 233, 254, 285, 294, 295, 307, 313, 314, 338, 339, 358, 359, 361, 363, 366, 370, 373, 376, 378, 381, 383, 390, 395, 420, 424, 430, 440, 470, 471, 472, 473, 479, 480, 483, 484, 511, 512, 514, 518, 584, 585, 668, 674, 713, 799, 843, 950, 954, 955, 957, 959, 966, 970, 974, 978, 980, 985, 986, 988, 989, 991, 996, 999, 1004, 1005, 1009], "denois": [3, 15, 93, 107, 164, 395, 473, 512, 514, 518, 561, 564, 799, 843], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 73, 93, 105, 107, 130, 136, 138, 144, 145, 148, 150, 151, 152, 153, 156, 157, 159, 161, 173, 197, 210, 224, 225, 232, 236, 239, 250, 254, 256, 258, 261, 262, 266, 271, 277, 290, 309, 315, 318, 320, 322, 325, 326, 327, 330, 331, 334, 336, 349, 353, 356, 358, 367, 376, 378, 388, 390, 391, 394, 397, 398, 411, 419, 426, 430, 439, 440, 443, 459, 460, 461, 468, 473, 475, 479, 481, 491, 510, 511, 512, 518, 521, 531, 533, 535, 537, 539, 542, 545, 547, 570, 571, 587, 588, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 653, 654, 655, 656, 665, 667, 668, 669, 672, 710, 733, 734, 736, 741, 742, 749, 750, 751, 752, 772, 782, 785, 797, 799, 801, 806, 807, 813, 814, 816, 818, 824, 831, 833, 834, 839, 843, 845, 846, 853, 867, 868, 872, 873, 874, 875, 876, 877, 878, 881, 883, 943, 949, 950, 951, 954, 955, 957, 960, 967, 968, 974, 976, 980, 984, 985, 990, 991, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "pca": [3, 6, 15, 68, 71, 73, 75, 85, 89, 93, 97, 106, 107, 164, 218, 220, 230, 232, 236, 255, 276, 280, 285, 303, 309, 349, 358, 367, 378, 389, 390, 391, 396, 406, 451, 454, 473, 479, 481, 491, 509, 510, 511, 512, 516, 517, 520, 521, 526, 620, 635, 665, 667, 669, 772, 795, 799, 822, 829, 832, 833, 835, 843, 851, 853, 946, 948, 951, 957, 964, 968, 970, 985, 990, 991, 996, 998, 999, 1000, 1002, 1003, 1004, 1007, 1009, 1010, 1011], "libsvm": [3, 15, 164, 172, 323, 359, 371, 464, 485, 540, 872, 873, 874, 875, 876, 877, 878, 969, 974, 991, 996, 998, 1004, 1007, 1010], "gui": [3, 15, 164, 464, 876, 877, 987, 996, 997, 1007], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 57, 60, 68, 70, 75, 77, 81, 85, 93, 95, 107, 110, 113, 115, 118, 120, 121, 122, 124, 125, 128, 129, 132, 135, 136, 138, 140, 142, 147, 152, 153, 155, 156, 157, 158, 162, 165, 169, 170, 176, 178, 180, 182, 186, 187, 189, 191, 192, 193, 197, 198, 200, 202, 204, 208, 209, 211, 212, 213, 215, 225, 228, 232, 241, 243, 244, 245, 248, 250, 251, 254, 257, 258, 259, 261, 262, 264, 265, 269, 270, 272, 274, 276, 278, 280, 282, 283, 285, 289, 299, 302, 306, 308, 310, 313, 314, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 339, 340, 344, 345, 346, 349, 356, 358, 360, 361, 368, 371, 378, 379, 380, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 399, 400, 409, 411, 413, 416, 421, 427, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 465, 466, 473, 475, 478, 479, 480, 486, 499, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 565, 566, 568, 570, 571, 574, 579, 583, 586, 587, 588, 592, 604, 611, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 682, 687, 697, 698, 699, 709, 710, 716, 717, 725, 728, 760, 763, 764, 765, 770, 771, 772, 775, 776, 785, 786, 787, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 818, 819, 820, 822, 824, 829, 830, 831, 833, 834, 836, 838, 840, 845, 846, 848, 849, 850, 852, 853, 857, 858, 860, 861, 862, 863, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 887, 944, 946, 947, 948, 951, 952, 955, 957, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 974, 975, 976, 978, 981, 983, 985, 989, 990, 991, 996, 997, 998, 999, 1000, 1001], "complex": [3, 9, 14, 15, 16, 149, 154, 161, 164, 210, 213, 224, 231, 239, 249, 258, 265, 272, 299, 306, 309, 310, 312, 319, 325, 340, 342, 348, 362, 366, 370, 376, 391, 395, 397, 400, 401, 419, 423, 425, 426, 428, 445, 466, 477, 478, 479, 491, 511, 518, 528, 534, 535, 536, 537, 539, 541, 542, 581, 607, 615, 633, 635, 653, 654, 709, 725, 772, 799, 801, 829, 833, 834, 838, 846, 853, 868, 872, 875, 878, 880, 881, 882, 883, 943, 946, 947, 949, 953, 955, 960, 964, 967, 975, 976, 978, 991, 997, 999, 1005, 1006, 1009], "influenc": [3, 9, 15, 79, 80, 164, 166, 167, 178, 241, 264, 298, 325, 333, 349, 355, 392, 395, 397, 411, 419, 432, 443, 459, 460, 461, 466, 478, 531, 533, 535, 537, 539, 542, 545, 547, 588, 605, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 653, 655, 656, 709, 725, 799, 806, 807, 815, 816, 823, 824, 831, 850, 851, 861, 873, 875, 878, 881, 883, 892, 943, 948, 949, 957, 960, 964, 968, 969, 978, 999, 1004, 1005], "core": [3, 15, 49, 64, 70, 117, 118, 164, 166, 352, 354, 356, 364, 366, 368, 373, 378, 381, 390, 395, 397, 401, 423, 427, 428, 433, 435, 476, 515, 566, 571, 635, 636, 643, 645, 653, 808, 809, 810, 811, 812, 817, 825, 950, 957, 960, 969, 972, 975, 976, 978, 987, 989, 991, 998, 1000, 1001, 1003, 1006, 1010, 1011], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 35, 45, 70, 71, 72, 87, 92, 98, 109, 110, 112, 114, 116, 117, 118, 120, 123, 127, 134, 139, 142, 143, 144, 145, 148, 157, 159, 166, 167, 172, 174, 188, 189, 196, 204, 215, 224, 226, 230, 234, 237, 239, 244, 249, 253, 254, 255, 256, 257, 258, 265, 271, 272, 277, 278, 284, 286, 289, 290, 291, 296, 300, 313, 319, 321, 325, 328, 331, 333, 334, 337, 339, 340, 341, 349, 353, 355, 356, 359, 360, 361, 363, 367, 370, 374, 377, 378, 385, 388, 390, 391, 394, 395, 398, 399, 407, 416, 447, 453, 459, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 487, 489, 491, 492, 496, 497, 499, 500, 518, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 546, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582, 583, 586, 587, 588, 590, 591, 599, 609, 610, 620, 635, 636, 643, 645, 651, 652, 653, 674, 679, 681, 683, 684, 688, 689, 691, 692, 694, 701, 702, 704, 705, 709, 713, 716, 717, 718, 729, 731, 733, 734, 757, 758, 759, 761, 762, 763, 764, 767, 769, 772, 773, 775, 776, 777, 785, 789, 790, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 815, 820, 822, 823, 829, 830, 831, 833, 837, 840, 845, 846, 853, 856, 858, 867, 868, 869, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 895, 898, 906, 943, 944, 946, 947, 948, 951, 952, 956, 959, 961, 962, 964, 965, 967, 973, 974, 976, 977, 978, 980, 981, 985, 986, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 59, 61, 63, 69, 74, 79, 80, 120, 166, 176, 190, 191, 225, 229, 235, 236, 241, 243, 249, 262, 263, 267, 272, 281, 284, 286, 292, 300, 309, 312, 314, 319, 332, 341, 343, 353, 355, 356, 358, 359, 360, 366, 370, 376, 378, 390, 391, 393, 394, 395, 397, 400, 425, 427, 446, 464, 465, 466, 476, 480, 485, 498, 513, 521, 541, 592, 602, 635, 643, 645, 651, 653, 674, 679, 681, 683, 689, 693, 704, 712, 766, 768, 772, 785, 799, 808, 810, 812, 815, 820, 833, 834, 836, 837, 845, 868, 869, 870, 872, 884, 885, 886, 906, 943, 946, 950, 952, 954, 955, 956, 958, 961, 964, 966, 968, 969, 973, 975, 978, 981, 991, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "outlier": [3, 15, 44, 79, 80, 122, 164, 174, 198, 199, 202, 215, 224, 239, 277, 290, 297, 304, 335, 361, 378, 390, 392, 397, 447, 448, 451, 452, 453, 454, 467, 468, 469, 473, 487, 489, 499, 501, 540, 616, 626, 647, 648, 649, 653, 654, 655, 656, 669, 678, 819, 823, 834, 840, 842, 843, 845, 849, 850, 851, 853, 858, 861, 875, 876, 878, 954, 968, 969, 974, 976, 990, 991, 996, 1001, 1002, 1004], "detect": [3, 8, 10, 15, 62, 64, 79, 81, 116, 125, 164, 177, 224, 239, 249, 256, 259, 272, 277, 290, 324, 361, 364, 366, 369, 376, 378, 389, 390, 392, 394, 398, 427, 447, 448, 451, 452, 453, 454, 465, 466, 468, 469, 473, 487, 489, 492, 499, 514, 515, 516, 523, 540, 541, 565, 568, 573, 616, 654, 678, 702, 764, 799, 819, 823, 834, 840, 853, 872, 876, 946, 950, 975, 976, 978, 984, 989, 990, 991, 996, 999, 1002, 1003, 1004, 1006, 1008, 1009, 1011], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 56, 57, 59, 61, 63, 64, 65, 69, 70, 72, 79, 80, 81, 85, 89, 93, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 131, 135, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 175, 180, 181, 184, 185, 187, 189, 191, 192, 195, 196, 197, 198, 200, 201, 204, 209, 210, 214, 217, 218, 219, 220, 225, 226, 227, 228, 230, 231, 238, 241, 243, 245, 246, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 274, 278, 282, 283, 284, 285, 286, 289, 293, 294, 295, 298, 300, 302, 303, 306, 307, 308, 309, 310, 313, 314, 317, 318, 322, 324, 327, 333, 338, 339, 340, 345, 346, 349, 353, 354, 355, 358, 359, 361, 363, 364, 366, 367, 369, 370, 372, 373, 377, 378, 379, 381, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 407, 412, 413, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 465, 466, 470, 472, 473, 474, 476, 479, 480, 481, 485, 486, 487, 492, 500, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 677, 678, 679, 689, 690, 695, 697, 698, 701, 702, 703, 704, 705, 706, 709, 713, 715, 716, 720, 721, 723, 725, 726, 728, 731, 754, 755, 757, 758, 759, 760, 762, 764, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 892, 893, 903, 904, 909, 913, 922, 923, 924, 925, 928, 929, 935, 938, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 981, 983, 984, 985, 988, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 55, 57, 61, 69, 70, 71, 72, 74, 84, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 123, 125, 127, 128, 129, 130, 131, 133, 137, 138, 143, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 172, 175, 178, 179, 180, 188, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 210, 211, 213, 214, 225, 226, 228, 230, 233, 242, 243, 244, 245, 246, 247, 249, 250, 254, 256, 258, 259, 262, 265, 266, 270, 272, 274, 276, 279, 282, 283, 284, 287, 288, 295, 298, 299, 303, 306, 307, 308, 309, 310, 314, 316, 317, 318, 321, 322, 324, 325, 331, 332, 333, 334, 338, 339, 344, 345, 346, 347, 349, 352, 356, 358, 361, 363, 366, 367, 372, 374, 378, 380, 384, 385, 386, 388, 389, 390, 391, 395, 397, 398, 399, 407, 411, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 443, 447, 459, 460, 461, 464, 478, 485, 501, 511, 518, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 559, 570, 571, 579, 583, 587, 588, 590, 591, 592, 593, 599, 602, 604, 605, 607, 608, 609, 610, 611, 612, 614, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 674, 675, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 690, 691, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 713, 716, 717, 718, 721, 723, 725, 727, 731, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 775, 776, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 820, 823, 824, 830, 831, 833, 840, 853, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 928, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 955, 956, 957, 958, 960, 961, 962, 967, 968, 969, 970, 973, 974, 975, 977, 978, 981, 983, 984, 985, 989, 991, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "latenc": [3, 7, 15, 120, 164, 352, 501, 542, 649, 655, 799, 853, 878, 921, 928, 974, 991, 999], "speci": [3, 15, 164, 277, 290, 338, 361, 396, 475, 682, 764, 818, 876, 887, 954, 960, 996], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 56, 61, 74, 78, 79, 80, 91, 110, 112, 122, 141, 149, 158, 164, 166, 172, 175, 196, 198, 200, 219, 221, 225, 229, 241, 246, 247, 256, 262, 264, 277, 281, 290, 297, 298, 300, 303, 304, 313, 314, 330, 333, 338, 353, 354, 361, 362, 363, 364, 366, 369, 370, 371, 378, 384, 388, 389, 390, 392, 394, 395, 396, 400, 402, 425, 427, 447, 448, 449, 450, 451, 452, 453, 454, 465, 475, 480, 492, 493, 494, 495, 496, 500, 509, 510, 513, 527, 528, 529, 540, 588, 602, 617, 619, 621, 622, 625, 635, 636, 646, 656, 657, 665, 666, 667, 669, 682, 684, 699, 727, 764, 770, 771, 776, 777, 783, 785, 789, 790, 799, 809, 812, 818, 822, 829, 836, 849, 850, 851, 852, 853, 860, 861, 862, 867, 868, 876, 887, 911, 922, 943, 948, 950, 952, 953, 954, 956, 957, 959, 960, 966, 967, 972, 974, 975, 980, 984, 988, 990, 991, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "relat": [3, 7, 12, 15, 17, 44, 61, 96, 98, 100, 164, 165, 166, 191, 234, 249, 263, 338, 347, 356, 361, 362, 365, 368, 369, 370, 372, 373, 374, 376, 378, 379, 380, 389, 390, 391, 392, 393, 394, 395, 397, 400, 428, 442, 447, 473, 526, 527, 539, 540, 616, 650, 654, 669, 698, 718, 792, 796, 831, 832, 834, 837, 838, 843, 846, 847, 848, 849, 852, 860, 876, 943, 948, 954, 955, 957, 958, 964, 969, 970, 971, 972, 975, 991, 996, 1000, 1001, 1002, 1004, 1005, 1008, 1009], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 57, 59, 62, 67, 68, 69, 70, 71, 75, 79, 80, 85, 88, 89, 90, 91, 95, 97, 99, 103, 104, 106, 108, 109, 118, 124, 125, 126, 128, 129, 130, 132, 133, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 170, 174, 179, 182, 183, 185, 192, 196, 197, 198, 200, 201, 205, 211, 212, 213, 215, 224, 227, 229, 237, 238, 239, 249, 253, 256, 258, 262, 263, 265, 266, 270, 272, 274, 279, 284, 285, 287, 291, 294, 296, 297, 298, 301, 304, 305, 307, 310, 320, 321, 322, 325, 333, 336, 337, 340, 341, 344, 346, 347, 349, 356, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 388, 390, 392, 393, 394, 395, 396, 400, 401, 402, 406, 410, 411, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 555, 557, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 595, 596, 597, 599, 600, 602, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 679, 689, 697, 698, 699, 733, 734, 738, 739, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 756, 760, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 893, 906, 921, 929, 930, 931, 935, 943, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 980, 981, 985, 986, 987, 991, 993, 994, 995, 996, 997, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "engin": [3, 15, 19, 40, 115, 154, 164, 353, 360, 363, 390, 396, 398, 400, 442, 473, 539, 616, 650, 792, 796, 831, 832, 834, 837, 838, 843, 846, 847, 848, 852, 944, 954, 964, 972, 1002], "topic": [3, 7, 8, 15, 69, 164, 338, 339, 340, 361, 362, 394, 395, 398, 465, 474, 513, 515, 517, 524, 565, 568, 950, 955, 974, 975, 989, 1001, 1003], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 68, 69, 70, 75, 84, 95, 164, 200, 211, 249, 272, 295, 303, 338, 340, 349, 356, 358, 361, 363, 367, 371, 374, 376, 390, 391, 394, 395, 428, 430, 433, 434, 440, 442, 465, 466, 470, 471, 480, 481, 508, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 560, 561, 565, 566, 568, 570, 571, 574, 576, 608, 694, 763, 772, 785, 810, 832, 833, 877, 909, 920, 943, 951, 955, 959, 964, 968, 974, 978, 981, 985, 986, 991, 996, 997, 1005, 1008], "neg": [3, 4, 15, 16, 24, 59, 74, 77, 85, 121, 122, 126, 164, 166, 174, 196, 214, 215, 245, 246, 253, 256, 259, 263, 265, 266, 298, 302, 310, 338, 371, 378, 390, 394, 397, 398, 401, 402, 411, 419, 423, 430, 443, 447, 459, 460, 461, 465, 508, 510, 512, 513, 514, 515, 517, 519, 521, 524, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 565, 568, 569, 572, 573, 575, 576, 577, 581, 582, 583, 584, 585, 586, 588, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 647, 649, 650, 654, 655, 656, 657, 664, 675, 676, 680, 681, 688, 689, 691, 694, 695, 697, 698, 699, 702, 704, 705, 706, 710, 713, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 757, 758, 759, 760, 762, 766, 770, 771, 794, 799, 806, 807, 816, 819, 824, 831, 840, 849, 851, 852, 856, 860, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 907, 909, 922, 952, 954, 955, 957, 958, 959, 960, 968, 969, 989, 990, 991, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 61, 69, 78, 79, 80, 81, 84, 95, 96, 97, 106, 156, 157, 164, 169, 174, 182, 197, 201, 215, 226, 229, 230, 246, 249, 263, 272, 294, 310, 313, 314, 338, 339, 340, 347, 353, 356, 361, 362, 363, 366, 367, 371, 374, 376, 377, 378, 387, 391, 392, 393, 398, 399, 400, 401, 402, 411, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 432, 435, 437, 438, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 473, 474, 477, 478, 479, 480, 481, 482, 485, 486, 487, 496, 498, 500, 501, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 562, 563, 565, 566, 567, 568, 570, 571, 580, 581, 582, 583, 584, 585, 586, 588, 597, 606, 607, 608, 612, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 683, 688, 689, 690, 691, 692, 694, 704, 705, 706, 709, 713, 714, 715, 716, 729, 730, 733, 734, 735, 736, 738, 739, 741, 742, 743, 747, 749, 750, 752, 753, 754, 755, 756, 758, 759, 762, 763, 769, 770, 771, 772, 775, 776, 785, 799, 802, 804, 805, 806, 807, 808, 809, 810, 812, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 837, 838, 839, 840, 842, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 888, 890, 891, 892, 893, 898, 907, 908, 909, 910, 913, 914, 915, 919, 920, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 940, 944, 946, 948, 950, 951, 955, 956, 957, 958, 964, 965, 966, 967, 968, 970, 971, 988, 989, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "factor": [3, 15, 26, 31, 44, 46, 53, 61, 93, 100, 105, 107, 127, 164, 166, 222, 225, 234, 267, 268, 277, 290, 292, 293, 298, 300, 308, 310, 353, 354, 371, 374, 378, 387, 389, 390, 397, 398, 400, 419, 421, 432, 447, 451, 452, 454, 456, 465, 481, 491, 492, 504, 509, 512, 513, 515, 517, 518, 521, 522, 523, 524, 526, 527, 538, 539, 540, 565, 568, 574, 590, 626, 627, 628, 631, 632, 633, 659, 660, 669, 695, 758, 772, 775, 776, 795, 819, 853, 866, 868, 876, 908, 909, 943, 950, 951, 957, 967, 971, 974, 990, 991, 996, 997, 999, 1000, 1002, 1010], "latent": [3, 15, 17, 106, 164, 295, 339, 393, 398, 400, 465, 509, 513, 515, 516, 517, 520, 521, 565, 568, 829, 953, 974, 989, 990, 991, 998, 1001], "dirichlet": [3, 15, 164, 241, 242, 247, 251, 398, 465, 513, 515, 517, 565, 568, 770, 974, 990, 991, 996, 1001, 1002], "alloc": [3, 15, 25, 60, 164, 268, 308, 362, 366, 390, 398, 422, 425, 437, 465, 513, 515, 517, 561, 565, 568, 623, 629, 637, 639, 775, 776, 797, 800, 943, 964, 974, 990, 991, 1000, 1001, 1006, 1007], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 59, 60, 79, 90, 93, 97, 99, 105, 107, 123, 127, 131, 132, 157, 162, 164, 167, 169, 180, 187, 196, 198, 214, 222, 224, 227, 230, 235, 236, 239, 246, 249, 250, 252, 253, 257, 266, 272, 281, 285, 286, 291, 293, 296, 298, 302, 303, 306, 308, 314, 356, 358, 362, 364, 371, 372, 387, 389, 392, 394, 395, 396, 397, 417, 420, 424, 432, 450, 473, 479, 481, 484, 487, 491, 499, 509, 511, 518, 541, 543, 548, 608, 610, 635, 666, 669, 674, 675, 677, 678, 694, 702, 757, 764, 773, 774, 777, 788, 789, 790, 791, 792, 799, 830, 834, 853, 877, 886, 905, 949, 951, 952, 954, 957, 958, 960, 961, 964, 970, 974, 980, 991, 999, 1006, 1007, 1008, 1010], "stock": [3, 15, 164, 390, 392, 432, 450, 666, 983], "market": [3, 15, 164, 390, 392, 432, 450, 666, 978, 983], "wikipedia": [3, 15, 24, 164, 373, 389, 390, 572, 584, 585, 613, 633, 645, 648, 659, 660, 672, 680, 681, 683, 685, 688, 692, 694, 701, 704, 705, 706, 709, 710, 713, 718, 731, 758, 760, 761, 763, 764, 765, 766, 815, 816, 821, 822, 823, 824, 851, 866, 880, 881, 946, 950, 954, 957, 966, 970, 989, 996, 1003], "princip": [3, 15, 83, 86, 93, 97, 99, 100, 102, 104, 107, 127, 164, 217, 230, 232, 285, 303, 308, 358, 390, 393, 402, 461, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 527, 634, 665, 666, 667, 669, 670, 799, 822, 834, 853, 908, 909, 951, 957, 990, 991, 996], "eigenvector": [3, 15, 46, 85, 89, 164, 241, 390, 430, 440, 511, 512, 518, 527, 665, 666, 668, 672, 951, 996, 1000, 1010], "click": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 366, 373, 978, 980, 982], "here": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 373, 376, 377, 384, 386, 387, 390, 391, 393, 394, 395, 396, 397, 398, 401, 416, 419, 420, 421, 422, 423, 424, 425, 427, 430, 442, 450, 453, 513, 515, 516, 520, 521, 544, 545, 546, 547, 558, 559, 561, 565, 568, 571, 579, 605, 607, 624, 628, 630, 632, 638, 640, 642, 650, 652, 666, 668, 672, 676, 688, 701, 721, 731, 767, 772, 775, 776, 785, 793, 794, 795, 796, 797, 798, 800, 809, 813, 814, 837, 845, 848, 851, 864, 865, 875, 943, 946, 950, 951, 952, 953, 954, 957, 960, 964, 966, 967, 968, 969, 974, 975, 977, 978, 980, 981, 987, 996, 1004, 1009], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 359, 361, 363, 364, 369, 370, 373, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 487, 970, 985, 987, 989, 991, 1000, 1001, 1004, 1008, 1009, 1010], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 353, 354, 356, 363, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378, 381, 383, 384, 389, 401, 402, 406, 417, 418, 434, 439, 446, 449, 462, 484, 485, 508, 520, 524, 532, 549, 550, 553, 560, 569, 572, 573, 575, 578, 580, 584, 589, 593, 597, 598, 601, 606, 608, 615, 619, 624, 627, 628, 631, 636, 637, 638, 640, 644, 652, 675, 676, 684, 691, 697, 698, 699, 701, 703, 705, 706, 710, 714, 718, 719, 721, 722, 726, 729, 731, 738, 739, 743, 744, 746, 748, 756, 758, 767, 778, 779, 780, 781, 782, 783, 784, 801, 803, 805, 807, 809, 813, 814, 821, 823, 824, 825, 827, 835, 836, 839, 841, 844, 854, 857, 859, 860, 862, 863, 864, 867, 873, 882, 883, 884, 885, 898, 907, 909, 911, 912, 914, 918, 919, 920, 925, 942, 944, 952, 975, 976, 978, 981, 984, 985, 989, 991, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1009, 1011], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 364, 366, 367, 369, 370, 371, 372, 373, 376, 378, 379, 381, 386, 390, 392, 394, 397, 400, 401, 402, 416, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 442, 445, 449, 450, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 559, 569, 571, 572, 573, 575, 576, 577, 579, 587, 588, 611, 617, 623, 624, 626, 628, 629, 630, 632, 633, 637, 638, 639, 640, 659, 660, 665, 666, 667, 668, 669, 670, 671, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 805, 806, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 830, 831, 832, 835, 867, 868, 872, 873, 874, 875, 876, 877, 878, 880, 881, 903, 904, 922, 925, 928, 943, 953, 955, 958, 967, 969, 970, 974, 975, 978, 980, 987, 989, 996, 999, 1001, 1003, 1004, 1005, 1006, 1010], "yourbrowser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 366, 373, 964], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 371, 391, 446, 870, 970, 973, 975, 1007, 1010], "introduc": [4, 77, 79, 80, 100, 164, 168, 175, 224, 229, 239, 263, 340, 359, 362, 364, 366, 367, 369, 370, 373, 376, 378, 381, 388, 390, 392, 394, 395, 397, 398, 412, 420, 421, 422, 424, 425, 427, 437, 442, 446, 459, 460, 461, 462, 473, 481, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 532, 533, 543, 544, 545, 546, 547, 558, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 635, 641, 662, 663, 665, 666, 799, 817, 822, 825, 829, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 866, 870, 948, 950, 953, 956, 957, 960, 964, 966, 968, 969, 980, 987, 996, 997, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 118, 119, 122, 124, 129, 130, 131, 132, 135, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 168, 172, 175, 176, 182, 183, 184, 185, 187, 193, 196, 197, 198, 200, 201, 202, 203, 204, 214, 217, 218, 219, 222, 225, 227, 230, 231, 234, 241, 243, 244, 245, 246, 247, 251, 253, 254, 256, 257, 259, 261, 262, 263, 264, 265, 266, 270, 271, 282, 283, 285, 292, 293, 297, 302, 303, 304, 306, 320, 324, 325, 329, 333, 334, 336, 338, 339, 340, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 368, 370, 372, 374, 377, 378, 381, 384, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 413, 416, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 436, 437, 440, 442, 456, 467, 470, 471, 473, 480, 481, 485, 486, 489, 491, 499, 514, 515, 516, 517, 523, 524, 526, 527, 532, 533, 540, 565, 566, 567, 568, 571, 588, 590, 591, 592, 596, 599, 600, 604, 609, 610, 611, 615, 620, 621, 624, 626, 628, 632, 635, 638, 643, 644, 645, 653, 654, 655, 657, 667, 669, 671, 675, 676, 677, 680, 681, 682, 683, 685, 691, 693, 694, 702, 703, 704, 705, 706, 709, 712, 718, 732, 733, 734, 743, 753, 757, 758, 759, 761, 762, 764, 765, 766, 768, 771, 772, 774, 775, 776, 777, 780, 785, 786, 787, 788, 789, 790, 791, 794, 796, 797, 800, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 826, 829, 833, 838, 842, 843, 845, 849, 850, 851, 853, 857, 858, 859, 860, 861, 862, 863, 872, 874, 877, 880, 881, 882, 883, 920, 943, 944, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 971, 975, 978, 980, 982, 983, 984, 988, 989, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "strategi": [4, 52, 54, 57, 60, 70, 119, 124, 129, 161, 162, 164, 168, 185, 196, 204, 214, 227, 236, 249, 257, 258, 259, 261, 265, 266, 272, 291, 296, 297, 304, 306, 307, 310, 340, 352, 367, 371, 377, 378, 394, 397, 398, 399, 402, 416, 417, 418, 430, 440, 450, 479, 481, 489, 491, 499, 510, 515, 528, 529, 538, 539, 544, 545, 548, 565, 566, 568, 569, 571, 579, 604, 605, 607, 611, 622, 624, 628, 630, 632, 638, 640, 642, 650, 652, 668, 672, 680, 689, 730, 732, 768, 772, 775, 776, 785, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 830, 838, 843, 867, 872, 874, 877, 880, 881, 882, 883, 925, 943, 944, 953, 955, 956, 957, 958, 960, 962, 964, 968, 969, 970, 974, 984, 989, 991, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "leverag": [4, 8, 37, 49, 85, 214, 338, 339, 353, 364, 394, 397, 848, 943, 950, 980, 999, 1011], "task": [4, 7, 98, 109, 116, 117, 123, 144, 145, 157, 164, 174, 196, 212, 215, 217, 253, 340, 353, 355, 361, 363, 364, 365, 366, 369, 370, 371, 374, 376, 377, 378, 395, 397, 398, 399, 400, 470, 482, 492, 569, 572, 573, 575, 576, 577, 581, 582, 583, 586, 609, 610, 623, 624, 629, 630, 637, 638, 639, 640, 651, 658, 661, 683, 702, 704, 705, 729, 757, 759, 762, 764, 773, 777, 789, 793, 951, 954, 955, 956, 957, 965, 967, 969, 970, 972, 973, 975, 976, 977, 978, 980, 987, 988, 989, 991, 996, 1001, 1005], "highli": [4, 9, 71, 79, 80, 97, 106, 125, 191, 201, 256, 259, 265, 293, 339, 353, 354, 366, 367, 371, 388, 390, 394, 397, 398, 430, 440, 473, 540, 648, 669, 783, 785, 829, 950, 954, 957, 958, 960, 968, 969, 973], "depend": [4, 5, 7, 37, 53, 74, 99, 119, 122, 123, 126, 129, 141, 155, 161, 164, 165, 166, 170, 172, 176, 200, 214, 218, 224, 225, 231, 239, 246, 256, 257, 261, 262, 263, 276, 293, 298, 308, 322, 333, 339, 340, 349, 353, 354, 355, 359, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 389, 390, 392, 394, 395, 397, 398, 399, 400, 401, 417, 418, 419, 423, 428, 430, 432, 435, 438, 440, 442, 447, 461, 466, 467, 468, 470, 473, 477, 478, 479, 481, 482, 487, 511, 512, 518, 521, 528, 536, 537, 539, 565, 566, 567, 568, 569, 579, 581, 584, 585, 588, 604, 609, 610, 615, 617, 625, 635, 636, 646, 648, 650, 653, 654, 655, 657, 664, 667, 668, 671, 672, 704, 716, 753, 756, 765, 766, 770, 771, 790, 798, 799, 815, 816, 817, 819, 821, 822, 823, 824, 825, 831, 832, 834, 846, 850, 853, 866, 873, 874, 877, 881, 890, 943, 944, 946, 947, 948, 950, 951, 953, 954, 956, 957, 958, 959, 962, 966, 968, 969, 970, 980, 987, 989, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1011], "busi": [4, 196, 256, 373, 376, 763, 950, 954, 978], "dai": [4, 12, 154, 197, 354, 363, 366, 852, 978, 1002, 1003, 1010], "week": [4, 365, 366, 379, 978, 1010], "yearli": 4, "season": [4, 154, 197, 365, 400], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 61, 63, 65, 66, 67, 69, 70, 73, 77, 85, 98, 105, 109, 110, 117, 119, 121, 123, 124, 128, 129, 135, 146, 150, 161, 162, 164, 166, 167, 168, 169, 172, 185, 196, 198, 202, 203, 204, 213, 214, 218, 219, 221, 225, 230, 232, 234, 243, 246, 249, 251, 253, 254, 256, 257, 258, 261, 262, 264, 265, 267, 269, 271, 272, 274, 276, 289, 295, 298, 300, 302, 303, 306, 312, 319, 325, 328, 331, 338, 340, 349, 352, 354, 355, 361, 363, 367, 368, 373, 374, 376, 377, 378, 380, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 408, 419, 421, 422, 423, 425, 426, 428, 430, 432, 433, 437, 439, 446, 447, 459, 460, 461, 462, 479, 489, 492, 508, 509, 510, 512, 514, 516, 519, 520, 521, 522, 523, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 565, 566, 567, 568, 578, 579, 580, 587, 588, 604, 607, 617, 622, 628, 631, 632, 633, 635, 641, 642, 643, 644, 645, 647, 650, 652, 653, 654, 655, 659, 660, 662, 664, 666, 667, 670, 671, 679, 680, 681, 683, 684, 688, 689, 701, 704, 705, 713, 715, 717, 730, 731, 732, 753, 758, 759, 761, 762, 763, 767, 768, 769, 770, 771, 772, 775, 776, 782, 783, 785, 789, 794, 795, 796, 798, 799, 802, 805, 806, 808, 809, 810, 811, 812, 813, 814, 820, 822, 828, 829, 830, 831, 833, 834, 836, 839, 840, 842, 843, 845, 846, 847, 849, 850, 853, 855, 857, 858, 859, 860, 861, 862, 863, 867, 868, 870, 874, 875, 876, 877, 878, 880, 881, 882, 883, 892, 893, 927, 938, 943, 944, 946, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 974, 975, 978, 980, 981, 984, 987, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "sklearnpreprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 57, 61, 69, 70, 72, 74, 85, 95, 106, 115, 119, 142, 154, 158, 168, 172, 175, 177, 184, 185, 187, 196, 197, 202, 212, 214, 218, 226, 227, 235, 238, 253, 263, 265, 270, 284, 285, 292, 293, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 317, 325, 328, 339, 355, 356, 358, 360, 363, 366, 370, 377, 378, 387, 390, 391, 394, 398, 399, 442, 443, 444, 445, 466, 544, 558, 559, 565, 566, 567, 568, 607, 635, 636, 649, 651, 653, 655, 664, 716, 802, 833, 834, 872, 873, 874, 875, 877, 878, 944, 950, 955, 958, 965, 968, 969, 971, 974, 977, 978, 980, 985, 986, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "splinetransform": [4, 197, 309, 848, 964, 1009], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 57, 70, 71, 90, 91, 100, 104, 108, 109, 117, 130, 133, 149, 150, 153, 157, 158, 161, 164, 166, 172, 174, 186, 187, 188, 204, 208, 211, 212, 215, 218, 225, 232, 234, 241, 242, 243, 249, 250, 251, 256, 258, 262, 266, 267, 272, 274, 276, 279, 281, 284, 285, 286, 287, 303, 306, 310, 313, 315, 316, 320, 321, 325, 326, 334, 336, 338, 339, 340, 355, 356, 358, 360, 361, 362, 363, 366, 367, 369, 370, 371, 372, 374, 376, 377, 381, 386, 388, 390, 391, 393, 395, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 485, 486, 487, 489, 491, 492, 496, 499, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 696, 702, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 729, 730, 732, 757, 758, 759, 761, 762, 763, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 897, 898, 899, 900, 901, 903, 904, 916, 922, 924, 925, 938, 943, 944, 945, 946, 948, 950, 951, 955, 956, 958, 961, 962, 964, 965, 967, 970, 975, 976, 978, 980, 984, 987, 989, 991, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "extrapol": [4, 149, 175, 197, 228, 259, 852, 954, 964, 970, 1009], "option": [4, 30, 46, 52, 103, 123, 155, 162, 167, 177, 197, 259, 265, 307, 338, 343, 349, 355, 360, 361, 362, 366, 368, 370, 371, 373, 374, 376, 378, 379, 381, 384, 390, 391, 393, 394, 395, 397, 398, 401, 412, 420, 421, 423, 424, 425, 426, 427, 430, 437, 439, 440, 441, 473, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 526, 534, 535, 539, 541, 542, 544, 545, 559, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 605, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 623, 629, 634, 635, 636, 647, 650, 652, 653, 654, 655, 657, 659, 660, 664, 665, 666, 669, 671, 672, 680, 687, 689, 693, 697, 698, 699, 710, 711, 712, 732, 733, 734, 739, 741, 742, 746, 749, 750, 751, 752, 753, 756, 765, 766, 768, 775, 776, 797, 799, 800, 804, 805, 806, 807, 813, 814, 817, 822, 825, 829, 832, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 864, 865, 872, 880, 881, 882, 883, 884, 886, 899, 940, 943, 950, 953, 954, 957, 964, 967, 969, 970, 975, 977, 987, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 70, 71, 88, 95, 106, 109, 115, 116, 118, 129, 130, 132, 143, 144, 154, 166, 172, 177, 192, 193, 196, 204, 212, 227, 228, 233, 234, 235, 236, 238, 246, 254, 256, 261, 263, 268, 274, 276, 280, 285, 293, 294, 295, 307, 308, 310, 315, 316, 317, 344, 347, 353, 356, 358, 361, 363, 368, 371, 377, 384, 389, 393, 394, 395, 397, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 509, 511, 520, 813, 814, 909, 964, 975, 981, 983, 985, 991, 996, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "openml": [4, 70, 129, 154, 166, 196, 204, 212, 214, 226, 274, 294, 359, 381, 473, 991, 1004, 1006, 1009], "repositori": [4, 8, 172, 359, 361, 363, 364, 366, 367, 369, 373, 379, 381, 481, 974, 977, 991], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 461, 462, 465, 472, 473, 477, 479, 480, 481, 483, 484, 485, 487, 489, 492, 498, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 665, 666, 667, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 691, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 738, 739, 743, 744, 746, 748, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 860, 861, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 899, 904, 907, 909, 911, 912, 913, 914, 916, 918, 919, 920, 922, 925, 928, 942, 943, 944, 946, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 966, 967, 968, 969, 970, 975, 978, 980, 983, 984, 985, 986, 987, 988, 989, 991, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "fetch_openml": [4, 5, 70, 74, 119, 129, 154, 166, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 306, 310, 360, 369, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "bike_shar": 4, "bike_sharing_demand": 4, "version": [4, 46, 53, 70, 84, 95, 100, 121, 123, 124, 129, 151, 162, 167, 168, 172, 194, 197, 198, 204, 210, 212, 218, 219, 220, 234, 238, 257, 267, 274, 294, 303, 306, 307, 308, 309, 325, 338, 353, 356, 361, 365, 366, 367, 368, 371, 373, 374, 376, 378, 379, 381, 383, 384, 389, 390, 393, 395, 397, 398, 400, 401, 402, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 477, 478, 479, 481, 482, 485, 486, 487, 489, 491, 499, 500, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 689, 690, 694, 697, 698, 699, 700, 702, 703, 704, 705, 706, 709, 714, 715, 716, 718, 721, 728, 729, 731, 732, 733, 734, 736, 741, 742, 743, 744, 753, 759, 760, 762, 764, 770, 771, 772, 773, 774, 775, 776, 777, 784, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 890, 892, 893, 903, 904, 906, 908, 909, 917, 919, 922, 924, 929, 935, 940, 941, 943, 946, 948, 951, 954, 956, 958, 960, 962, 967, 968, 970, 972, 975, 977, 988, 992, 994], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 135, 138, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 354, 355, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 381, 382, 383, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 411, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 437, 438, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 456, 459, 460, 461, 462, 470, 473, 477, 478, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 558, 559, 560, 561, 562, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 580, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 684, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 738, 739, 743, 744, 746, 748, 751, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 856, 860, 865, 866, 868, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 887, 892, 893, 898, 906, 907, 908, 909, 911, 912, 913, 914, 916, 918, 919, 920, 921, 922, 925, 927, 928, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 977, 980, 981, 984, 985, 986, 987, 988, 992, 993, 994, 996, 997, 998, 1000, 1001], "as_fram": [4, 5, 70, 74, 119, 129, 154, 166, 168, 184, 185, 196, 204, 212, 214, 234, 238, 276, 294, 306, 308, 310, 360, 361, 466, 467, 468, 469, 473, 477, 478, 479, 481, 482, 487, 1006, 1007, 1008, 1009], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 57, 59, 62, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 91, 95, 96, 97, 98, 100, 106, 109, 114, 119, 120, 121, 122, 124, 129, 130, 132, 135, 136, 137, 142, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 172, 180, 181, 183, 184, 185, 187, 189, 191, 192, 193, 195, 196, 198, 199, 200, 203, 204, 210, 211, 212, 214, 217, 220, 221, 225, 226, 229, 232, 233, 234, 237, 238, 241, 244, 246, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 281, 282, 285, 289, 292, 293, 294, 295, 299, 303, 306, 308, 310, 314, 316, 317, 318, 328, 332, 333, 334, 338, 339, 340, 343, 344, 347, 349, 353, 354, 359, 361, 362, 366, 367, 370, 371, 372, 374, 377, 378, 380, 384, 386, 387, 388, 390, 391, 392, 394, 395, 397, 398, 399, 400, 402, 403, 404, 407, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 496, 499, 500, 501, 503, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 688, 689, 690, 691, 694, 696, 699, 701, 702, 703, 704, 705, 706, 709, 710, 713, 714, 715, 716, 717, 718, 725, 726, 727, 729, 731, 736, 742, 743, 744, 753, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 771, 772, 775, 776, 777, 782, 783, 785, 789, 790, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 903, 909, 910, 916, 917, 918, 921, 924, 925, 927, 935, 940, 942, 943, 944, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 974, 980, 984, 985, 987, 988, 989, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "parser": [4, 5, 8, 70, 74, 119, 129, 154, 166, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 306, 310, 473, 1011], "panda": [4, 5, 12, 25, 69, 70, 72, 74, 116, 119, 122, 129, 154, 161, 166, 167, 168, 175, 185, 196, 204, 212, 214, 226, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 274, 276, 294, 306, 309, 310, 338, 339, 360, 361, 364, 365, 366, 367, 368, 378, 381, 383, 391, 412, 421, 422, 424, 425, 427, 442, 444, 446, 459, 460, 461, 462, 466, 467, 468, 469, 473, 477, 478, 479, 481, 482, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 609, 612, 615, 616, 617, 618, 619, 665, 666, 772, 775, 776, 785, 799, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 888, 943, 944, 964, 974, 975, 989, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "df": [4, 25, 27, 129, 175, 196, 214, 246, 256, 302, 339, 370, 398, 567, 568, 943, 944], "frame": [4, 16, 70, 154, 166, 196, 361, 366, 376, 379, 466, 467, 468, 469, 473, 477, 478, 479, 481, 482, 487, 974, 985, 1008], "To": [4, 8, 16, 26, 27, 32, 46, 77, 79, 81, 85, 89, 100, 119, 122, 123, 129, 131, 135, 146, 154, 155, 158, 161, 162, 166, 172, 177, 184, 196, 197, 198, 204, 214, 218, 219, 220, 229, 230, 236, 238, 246, 251, 253, 254, 256, 259, 261, 263, 274, 294, 298, 303, 306, 307, 308, 309, 310, 333, 335, 339, 343, 349, 353, 359, 360, 366, 367, 369, 370, 371, 373, 376, 378, 384, 387, 390, 391, 392, 393, 394, 395, 397, 398, 426, 427, 428, 439, 442, 445, 469, 473, 479, 480, 484, 485, 508, 514, 515, 516, 518, 520, 521, 522, 523, 534, 535, 536, 537, 541, 542, 546, 574, 579, 604, 609, 623, 624, 629, 630, 633, 635, 636, 637, 638, 639, 640, 661, 677, 688, 703, 738, 760, 766, 775, 776, 795, 802, 844, 862, 863, 872, 873, 880, 881, 882, 883, 899, 909, 922, 941, 943, 944, 949, 950, 951, 952, 954, 955, 956, 957, 960, 964, 968, 969, 970, 977, 978, 980, 984, 986, 987, 989, 996, 999, 1001, 1002, 1003, 1005, 1007], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 55, 96, 100, 122, 129, 131, 143, 146, 149, 154, 155, 161, 166, 167, 168, 169, 189, 198, 211, 214, 217, 232, 254, 257, 258, 260, 264, 267, 274, 281, 289, 299, 306, 314, 317, 322, 325, 327, 330, 333, 335, 338, 340, 343, 356, 359, 360, 361, 364, 366, 367, 369, 370, 371, 372, 373, 378, 381, 386, 390, 391, 392, 394, 395, 397, 398, 399, 400, 404, 405, 406, 410, 411, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 672, 676, 697, 698, 699, 701, 707, 708, 717, 731, 738, 739, 744, 760, 763, 770, 771, 772, 775, 776, 785, 794, 795, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 887, 900, 901, 902, 908, 909, 943, 949, 950, 951, 953, 954, 964, 967, 968, 969, 970, 975, 977, 984, 987, 988, 989, 993, 996, 999, 1002, 1004, 1007, 1009, 1010], "quick": [4, 100, 237, 366, 367, 371, 381, 583, 799, 954, 955, 964, 978, 987, 993], "understand": [4, 9, 89, 154, 164, 251, 254, 308, 309, 322, 338, 342, 348, 349, 365, 366, 369, 371, 376, 380, 390, 397, 398, 481, 799, 830, 831, 880, 881, 882, 883, 886, 943, 944, 951, 953, 970, 973, 974, 978, 996, 1010], "pattern": [4, 16, 62, 81, 93, 107, 149, 161, 164, 309, 338, 339, 340, 349, 363, 366, 367, 387, 390, 391, 395, 397, 398, 426, 442, 444, 481, 509, 511, 518, 532, 533, 615, 684, 700, 716, 744, 763, 764, 770, 853, 946, 948, 950, 954, 955, 969, 971, 975, 978, 1008], "let": [4, 5, 53, 63, 70, 95, 100, 109, 116, 119, 122, 123, 149, 155, 156, 162, 166, 167, 168, 177, 185, 196, 198, 214, 217, 221, 251, 256, 259, 263, 338, 340, 347, 349, 361, 366, 367, 371, 376, 387, 390, 394, 397, 398, 477, 481, 487, 511, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 658, 661, 839, 846, 847, 950, 951, 952, 953, 954, 961, 962, 964, 969, 970, 978, 987, 989, 1006], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 55, 95, 103, 119, 120, 149, 158, 166, 167, 193, 197, 204, 214, 218, 221, 229, 237, 238, 242, 243, 247, 251, 256, 259, 263, 302, 338, 347, 354, 356, 361, 366, 369, 371, 373, 376, 381, 387, 390, 393, 395, 397, 398, 411, 441, 443, 459, 460, 461, 508, 514, 522, 523, 527, 529, 531, 533, 535, 537, 539, 542, 545, 547, 565, 566, 568, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 658, 661, 666, 670, 680, 696, 715, 730, 806, 807, 816, 824, 831, 853, 866, 873, 875, 878, 881, 883, 909, 948, 953, 954, 961, 964, 972, 978, 989, 993, 1006], "look": [4, 5, 53, 95, 98, 100, 122, 123, 149, 154, 155, 162, 166, 167, 198, 217, 221, 225, 247, 251, 256, 294, 338, 339, 349, 355, 360, 361, 364, 366, 367, 369, 371, 373, 376, 377, 390, 393, 395, 396, 397, 398, 426, 465, 466, 534, 535, 536, 537, 541, 542, 579, 580, 608, 636, 669, 853, 880, 881, 882, 883, 950, 951, 964, 968, 969, 971, 989, 996, 1004, 1006], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 59, 61, 113, 114, 118, 122, 125, 130, 131, 132, 146, 154, 167, 177, 185, 196, 203, 214, 234, 259, 261, 264, 266, 274, 298, 306, 317, 338, 349, 353, 361, 363, 367, 387, 388, 392, 394, 398, 400, 401, 402, 416, 417, 420, 423, 424, 425, 427, 467, 470, 471, 500, 508, 509, 510, 514, 515, 517, 518, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 564, 609, 610, 625, 635, 636, 643, 644, 646, 649, 651, 653, 654, 655, 657, 664, 677, 679, 680, 682, 683, 684, 689, 696, 697, 698, 700, 701, 703, 704, 705, 709, 710, 711, 713, 714, 715, 718, 720, 721, 723, 725, 726, 728, 731, 739, 756, 757, 758, 759, 760, 762, 763, 768, 769, 770, 771, 797, 819, 839, 940, 944, 949, 950, 955, 958, 960, 961, 968, 969, 970, 987, 989, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011], "per": [4, 10, 48, 53, 63, 90, 115, 119, 154, 156, 166, 167, 196, 211, 214, 238, 242, 263, 265, 298, 308, 333, 338, 340, 353, 361, 362, 366, 370, 371, 374, 376, 378, 388, 390, 394, 395, 396, 397, 398, 400, 426, 428, 435, 439, 442, 446, 464, 477, 479, 480, 481, 485, 487, 489, 492, 500, 509, 511, 512, 513, 516, 518, 520, 526, 527, 538, 539, 546, 560, 565, 568, 587, 588, 609, 610, 618, 619, 635, 636, 643, 645, 648, 650, 651, 652, 653, 655, 669, 673, 689, 692, 696, 716, 729, 733, 734, 756, 758, 770, 771, 794, 801, 802, 803, 805, 806, 809, 811, 829, 832, 838, 840, 842, 843, 846, 847, 853, 870, 872, 873, 874, 875, 876, 877, 878, 897, 898, 909, 929, 943, 946, 950, 953, 954, 955, 958, 961, 968, 969, 970, 974, 975, 987, 989, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010], "hour": [4, 166, 366, 369, 371, 951, 973], "sundai": 4, "weekend": 4, "clearli": [4, 59, 98, 167, 230, 258, 303, 365, 366, 376, 378, 395, 397, 955, 961], "distinguish": [4, 40, 79, 91, 100, 198, 253, 361, 367, 378, 397, 400, 943, 954, 957, 960], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 74, 85, 98, 122, 155, 166, 167, 168, 185, 196, 197, 204, 214, 221, 222, 231, 242, 262, 298, 300, 302, 318, 338, 339, 340, 349, 355, 361, 365, 366, 367, 369, 370, 373, 376, 378, 388, 389, 390, 392, 394, 395, 397, 398, 400, 420, 422, 424, 425, 426, 427, 437, 439, 509, 512, 534, 535, 536, 537, 541, 542, 559, 566, 571, 604, 605, 607, 616, 635, 636, 672, 681, 688, 718, 736, 742, 749, 753, 756, 761, 763, 796, 864, 865, 880, 881, 882, 883, 909, 923, 943, 944, 946, 948, 950, 953, 954, 957, 959, 960, 962, 964, 966, 968, 969, 970, 978, 989, 1003, 1004, 1005, 1008, 1010], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 44, 46, 49, 52, 53, 59, 66, 74, 79, 88, 89, 91, 95, 98, 102, 103, 111, 113, 116, 117, 119, 121, 122, 123, 124, 129, 146, 149, 155, 158, 162, 166, 167, 172, 175, 176, 182, 185, 187, 190, 194, 196, 197, 198, 211, 212, 213, 214, 217, 221, 225, 230, 231, 232, 236, 241, 243, 244, 246, 247, 250, 254, 256, 257, 258, 259, 263, 265, 276, 278, 286, 292, 293, 295, 298, 299, 300, 303, 306, 307, 308, 310, 314, 322, 325, 330, 333, 335, 338, 339, 340, 343, 344, 349, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 377, 378, 379, 381, 384, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 905, 907, 909, 911, 919, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 974, 975, 976, 977, 978, 980, 984, 985, 986, 987, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "spread": [4, 40, 219, 257, 298, 313, 314, 315, 318, 353, 366, 390, 430, 440, 492, 850, 861, 869, 954], "peak": [4, 27, 388, 394, 1010], "middl": [4, 24, 59, 100, 110, 167, 334, 363, 961, 964], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 360, 368, 372, 381, 383, 417, 479, 608, 609, 674, 675, 677, 678, 886, 974, 983, 985, 986, 987, 993, 1005, 1008, 1009, 1010, 1011], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 366, 372, 417, 479, 608, 609, 674, 675, 677, 678, 985, 986, 987, 993, 1010], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 372, 417, 479, 608, 609, 674, 675, 677, 678, 886, 961, 985, 986, 987, 993], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 59, 63, 65, 72, 77, 79, 85, 89, 95, 100, 101, 102, 106, 109, 115, 116, 119, 122, 123, 126, 127, 129, 131, 152, 158, 161, 166, 167, 169, 172, 176, 184, 187, 190, 191, 193, 194, 196, 197, 204, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 228, 234, 235, 246, 251, 252, 253, 256, 257, 258, 259, 262, 265, 266, 267, 274, 276, 278, 280, 281, 289, 293, 294, 298, 299, 300, 302, 303, 306, 310, 322, 332, 333, 334, 335, 338, 339, 340, 343, 372, 985], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 63, 65, 72, 79, 81, 85, 89, 91, 95, 101, 102, 106, 109, 112, 115, 116, 119, 126, 127, 129, 130, 131, 152, 153, 158, 161, 166, 167, 168, 169, 172, 175, 176, 179, 185, 187, 188, 191, 193, 194, 196, 197, 198, 200, 201, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 234, 235, 237, 241, 243, 246, 251, 252, 253, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 280, 281, 284, 286, 287, 292, 293, 294, 298, 300, 301, 302, 303, 306, 307, 310, 321, 322, 323, 326, 327, 332, 333, 334, 335, 338, 339, 340, 343, 344, 367, 368, 395, 400, 417, 511, 518, 527, 608, 609, 674, 675, 677, 678, 694, 886, 954, 957, 961, 993, 1006], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 59, 61, 64, 65, 72, 74, 78, 79, 80, 81, 84, 85, 90, 91, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 118, 119, 123, 126, 127, 129, 130, 131, 141, 151, 153, 158, 161, 162, 166, 167, 169, 172, 176, 179, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 204, 209, 212, 214, 217, 218, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 241, 242, 243, 244, 246, 247, 251, 252, 253, 256, 258, 259, 261, 262, 263, 265, 266, 267, 269, 270, 274, 276, 278, 279, 280, 281, 284, 285, 287, 288, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 310, 316, 318, 322, 323, 325, 332, 333, 334, 335, 338, 339, 340, 343, 344, 372, 985], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 72, 74, 79, 81, 84, 85, 88, 89, 90, 91, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 119, 120, 121, 122, 123, 127, 129, 130, 141, 151, 153, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 179, 186, 190, 193, 194, 195, 196, 197, 198, 200, 202, 204, 207, 210, 212, 214, 217, 218, 219, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 241, 243, 244, 247, 251, 253, 258, 259, 260, 263, 265, 266, 270, 274, 276, 278, 292, 293, 295, 298, 299, 300, 301, 302, 303, 310, 313, 315, 323, 325, 329, 330, 332, 333, 334, 335, 338, 339, 340, 886, 985], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 63, 64, 65, 70, 71, 72, 73, 80, 81, 84, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 114, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 142, 144, 149, 151, 152, 154, 155, 157, 158, 161, 162, 166, 167, 172, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 202, 203, 204, 206, 209, 210, 214, 217, 218, 219, 220, 222, 225, 229, 230, 231, 232, 233, 234, 236, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 267, 270, 274, 276, 278, 280, 281, 282, 283, 286, 289, 292, 294, 295, 298, 299, 300, 301, 302, 306, 307, 309, 310, 313, 314, 315, 316, 317, 322, 324, 328, 329, 330, 333, 334, 335, 338, 339, 340, 347, 349, 354, 360, 361, 363, 364, 366, 370, 371, 374, 376, 377, 378, 381, 382, 383, 388, 390, 391, 392, 394, 395, 397, 398, 399, 400, 402, 416, 418, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 437, 438, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 473, 481, 489, 490, 493, 494, 495, 505, 509, 510, 511, 512, 514, 515, 516, 517, 521, 523, 524, 526, 527, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 547, 553, 558, 559, 566, 567, 568, 570, 571, 580, 584, 585, 591, 594, 596, 599, 604, 605, 606, 607, 610, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 654, 656, 657, 661, 664, 666, 667, 669, 670, 675, 676, 678, 682, 683, 691, 692, 701, 702, 709, 718, 719, 721, 722, 723, 724, 726, 727, 731, 743, 744, 756, 757, 763, 764, 767, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 797, 799, 802, 803, 804, 807, 808, 809, 810, 812, 821, 830, 831, 832, 838, 839, 840, 845, 846, 848, 849, 851, 856, 860, 866, 872, 873, 875, 876, 878, 880, 881, 882, 898, 906, 908, 909, 911, 913, 914, 920, 922, 925, 943, 944, 947, 948, 949, 950, 952, 954, 955, 956, 957, 964, 965, 968, 969, 972, 980, 984, 985, 986, 987, 989, 992, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1009, 1010, 1011], "average_week_demand": 4, "groupbi": [4, 72, 204, 214], "weekdai": 4, "count": [4, 14, 25, 27, 41, 49, 53, 69, 70, 91, 130, 131, 166, 196, 198, 229, 265, 276, 307, 308, 339, 340, 361, 363, 369, 374, 378, 388, 389, 390, 395, 397, 398, 427, 466, 513, 521, 558, 565, 566, 567, 568, 571, 581, 594, 617, 674, 681, 691, 694, 704, 705, 713, 729, 758, 759, 761, 762, 808, 812, 813, 814, 822, 825, 836, 884, 886, 911, 921, 943, 946, 950, 954, 956, 957, 964, 970, 978, 989, 996, 999, 1001, 1004, 1005, 1007, 1008], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 67, 70, 78, 79, 80, 81, 85, 91, 95, 98, 99, 100, 102, 103, 112, 113, 118, 119, 122, 123, 129, 130, 131, 136, 146, 149, 154, 156, 158, 161, 164, 166, 167, 176, 178, 185, 187, 189, 192, 196, 198, 200, 202, 203, 205, 211, 212, 213, 214, 220, 222, 225, 228, 229, 230, 231, 232, 234, 235, 236, 238, 241, 242, 243, 244, 246, 247, 253, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 274, 287, 298, 301, 303, 306, 309, 316, 325, 328, 335, 337, 338, 340, 341, 349, 353, 358, 360, 361, 363, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 387, 388, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 411, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 465, 478, 479, 481, 483, 489, 496, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 565, 566, 567, 568, 571, 574, 579, 583, 584, 585, 586, 587, 588, 590, 599, 604, 605, 607, 609, 611, 612, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 661, 665, 666, 667, 668, 669, 670, 671, 672, 680, 681, 683, 685, 688, 689, 692, 693, 699, 701, 704, 705, 706, 711, 712, 713, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 749, 753, 754, 756, 758, 759, 760, 762, 763, 765, 766, 768, 770, 771, 772, 775, 776, 785, 789, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 826, 827, 829, 830, 831, 832, 834, 835, 837, 838, 842, 843, 845, 849, 851, 853, 858, 860, 861, 863, 865, 867, 868, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 888, 892, 893, 895, 928, 929, 935, 939, 943, 944, 945, 948, 950, 951, 953, 956, 957, 958, 959, 961, 962, 967, 968, 969, 970, 974, 978, 984, 987, 989, 990, 991, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 72, 74, 78, 79, 80, 85, 87, 89, 92, 94, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 121, 122, 124, 125, 126, 127, 128, 133, 136, 138, 141, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 168, 169, 170, 172, 174, 178, 179, 181, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 220, 221, 222, 224, 225, 228, 229, 231, 232, 233, 238, 239, 241, 242, 243, 245, 247, 249, 250, 251, 256, 257, 259, 261, 262, 266, 267, 268, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 298, 299, 300, 301, 302, 307, 310, 314, 315, 318, 320, 321, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 345, 346, 347, 348, 356, 366, 368, 374, 376, 380, 381, 385, 388, 390, 392, 394, 396, 397, 417, 420, 428, 434, 449, 467, 478, 479, 481, 489, 492, 496, 500, 501, 530, 534, 537, 539, 541, 542, 546, 547, 587, 599, 608, 609, 610, 634, 635, 649, 653, 674, 675, 677, 678, 679, 694, 702, 725, 757, 759, 762, 763, 764, 788, 794, 797, 799, 800, 811, 815, 831, 834, 850, 853, 872, 877, 880, 881, 886, 947, 948, 950, 951, 953, 954, 957, 958, 960, 968, 969, 970, 975, 984, 985, 987, 991, 997, 999, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 57, 62, 66, 69, 81, 91, 95, 100, 101, 103, 105, 113, 114, 115, 141, 149, 154, 155, 156, 166, 167, 172, 175, 179, 180, 181, 183, 184, 185, 188, 193, 194, 196, 198, 209, 213, 218, 221, 226, 231, 238, 251, 256, 258, 259, 260, 262, 263, 265, 279, 284, 287, 295, 300, 307, 310, 314, 315, 338, 340, 344, 367, 371, 378, 395, 397, 398, 509, 510, 511, 512, 513, 515, 516, 517, 520, 524, 543, 574, 630, 640, 661, 665, 666, 667, 668, 673, 675, 677, 739, 772, 785, 817, 825, 944, 950, 951, 954, 956, 957, 958, 961, 962, 964, 969, 970, 987, 1003], "hourli": 4, "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 71, 81, 84, 89, 98, 119, 120, 121, 151, 152, 153, 157, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 255, 256, 270, 280, 289, 295, 313, 325, 328, 329, 330, 331, 674, 985], "24": [4, 5, 15, 19, 65, 164, 167, 305, 306, 310, 311, 313, 314, 339, 341, 364, 369, 381, 382, 383, 390, 397, 398, 416, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 438, 440, 442, 447, 448, 449, 450, 451, 452, 453, 454, 466, 467, 468, 469, 473, 481, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 521, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 558, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 590, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 675, 677, 678, 684, 690, 702, 721, 728, 770, 771, 772, 775, 776, 785, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 834, 836, 837, 838, 839, 842, 843, 845, 847, 848, 849, 850, 851, 853, 862, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 903, 904, 929, 935, 943, 961, 964, 972, 992, 994, 996, 1004, 1005, 1006, 1007, 1009], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 59, 60, 62, 63, 64, 77, 78, 80, 81, 110, 112, 113, 114, 116, 122, 128, 141, 145, 150, 166, 167, 172, 185, 186, 190, 194, 196, 197, 203, 204, 212, 214, 218, 220, 228, 229, 233, 241, 243, 246, 247, 251, 255, 256, 257, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 274, 276, 280, 286, 289, 295, 298, 303, 306, 310, 314, 325, 338, 339, 344, 347, 354, 360, 361, 363, 366, 367, 371, 374, 378, 384, 390, 394, 397, 400, 419, 447, 449, 450, 451, 452, 453, 454, 456, 458, 468, 471, 472, 491, 504, 518, 530, 531, 536, 537, 540, 565, 566, 568, 606, 609, 615, 617, 625, 626, 646, 648, 653, 657, 669, 688, 706, 721, 763, 799, 805, 819, 821, 823, 824, 829, 843, 850, 851, 852, 857, 858, 861, 862, 865, 866, 908, 909, 922, 943, 950, 954, 958, 961, 968, 975, 978, 983, 984, 985, 987, 1001, 1002, 1003, 1004, 1006, 1009], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 59, 63, 64, 66, 71, 73, 79, 81, 84, 98, 109, 110, 113, 122, 129, 130, 158, 166, 169, 172, 177, 178, 180, 189, 195, 196, 197, 198, 210, 214, 217, 219, 225, 230, 231, 236, 238, 241, 242, 245, 246, 251, 256, 258, 260, 262, 263, 267, 269, 274, 278, 281, 282, 284, 294, 295, 298, 302, 303, 306, 309, 310, 313, 314, 316, 317, 322, 324, 329, 333, 334, 339, 340, 349, 361, 363, 364, 366, 369, 370, 371, 381, 382, 383, 394, 395, 397, 398, 399, 400, 418, 423, 426, 428, 429, 430, 431, 440, 449, 450, 468, 509, 510, 511, 512, 513, 515, 521, 538, 539, 565, 568, 577, 604, 605, 607, 624, 626, 635, 638, 669, 697, 698, 699, 701, 703, 719, 720, 721, 725, 726, 728, 760, 767, 770, 773, 774, 778, 781, 788, 789, 792, 796, 799, 803, 813, 814, 822, 831, 832, 845, 867, 868, 909, 912, 913, 920, 943, 944, 949, 950, 952, 954, 955, 957, 958, 960, 964, 968, 969, 972, 980, 984, 987, 992, 994, 997, 998, 999, 1002, 1003, 1004, 1005, 1009], "xticklabel": [4, 10, 119], "sun": [4, 1004, 1009, 1010], "mon": 4, "tue": [4, 1002], "wed": 4, "thu": [4, 5, 24, 25, 26, 27, 40, 53, 59, 77, 81, 98, 100, 113, 115, 117, 119, 142, 149, 154, 155, 167, 184, 185, 196, 198, 214, 225, 231, 235, 243, 254, 256, 261, 262, 263, 306, 309, 343, 349, 353, 354, 361, 367, 371, 376, 378, 388, 390, 394, 395, 397, 398, 400, 401, 416, 418, 441, 492, 504, 530, 531, 532, 533, 534, 535, 540, 541, 542, 580, 583, 587, 599, 604, 609, 610, 620, 622, 635, 646, 654, 657, 681, 694, 700, 763, 768, 774, 778, 780, 792, 804, 807, 842, 872, 945, 946, 947, 948, 949, 950, 951, 954, 955, 960, 961, 962, 964, 966, 967, 968, 969, 975, 977, 978, 996, 998, 1002, 1004, 1005, 1006, 1008], "fri": [4, 361], "sat": [4, 398], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 60, 71, 77, 78, 80, 81, 84, 85, 89, 94, 97, 103, 110, 111, 112, 114, 119, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 210, 214, 229, 231, 232, 251, 255, 256, 260, 261, 265, 266, 269, 270, 271, 278, 279, 282, 283, 322, 324, 325, 328, 338, 344, 345, 346, 608], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 60, 71, 77, 78, 80, 81, 84, 85, 89, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 214, 229, 231, 232, 251, 255, 256, 259, 260, 261, 265, 266, 269, 270, 271, 279, 322, 325, 328, 338, 344, 345, 346, 608], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 60, 61, 62, 66, 67, 69, 71, 72, 74, 81, 84, 85, 90, 91, 95, 97, 99, 100, 103, 109, 110, 111, 113, 117, 118, 120, 121, 122, 123, 125, 129, 131, 142, 143, 145, 146, 157, 158, 162, 164, 166, 167, 172, 185, 195, 196, 197, 198, 203, 204, 210, 211, 212, 213, 214, 217, 225, 229, 232, 235, 241, 242, 244, 246, 247, 250, 251, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 276, 278, 282, 283, 298, 300, 301, 306, 307, 308, 309, 310, 317, 325, 329, 330, 333, 339, 340, 343, 347, 349, 354, 355, 360, 361, 362, 363, 364, 366, 368, 369, 371, 372, 373, 374, 376, 377, 378, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 558, 559, 560, 561, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 683, 688, 689, 690, 692, 694, 696, 699, 703, 704, 705, 706, 709, 710, 713, 715, 727, 730, 749, 753, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 893, 896, 908, 909, 912, 913, 922, 923, 925, 928, 929, 944, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 964, 966, 968, 969, 970, 971, 974, 975, 977, 980, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "rental": 4, "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 68, 73, 75, 85, 89, 99, 102, 104, 109, 111, 117, 118, 119, 122, 123, 126, 128, 129, 130, 132, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 175, 179, 189, 192, 196, 198, 201, 204, 205, 218, 226, 228, 229, 230, 231, 233, 234, 235, 243, 250, 254, 257, 258, 259, 261, 262, 265, 266, 276, 279, 284, 287, 288, 293, 298, 303, 307, 308, 310, 313, 314, 317, 318, 321, 322, 325, 329, 331, 332, 338, 339, 344, 345, 346, 347, 349, 353, 355, 356, 358, 359, 360, 361, 362, 363, 367, 369, 370, 373, 374, 377, 380, 390, 394, 397, 400, 412, 416, 417, 418, 421, 424, 442, 443, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 485, 487, 497, 501, 508, 509, 511, 513, 514, 516, 519, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 550, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 674, 675, 677, 678, 683, 684, 685, 688, 689, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 710, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 757, 758, 759, 760, 762, 763, 764, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 822, 823, 824, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 856, 861, 864, 865, 867, 868, 869, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 918, 919, 920, 945, 946, 947, 950, 951, 954, 958, 961, 962, 968, 969, 970, 975, 977, 978, 980, 985, 987, 989, 991, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "absolut": [4, 74, 99, 119, 146, 166, 196, 198, 202, 214, 258, 367, 390, 392, 394, 395, 397, 398, 399, 400, 401, 423, 428, 434, 435, 508, 514, 519, 522, 523, 525, 526, 527, 535, 537, 538, 539, 542, 565, 567, 568, 570, 574, 579, 596, 604, 609, 623, 626, 627, 629, 631, 633, 648, 653, 655, 659, 660, 676, 680, 693, 697, 711, 712, 720, 721, 723, 728, 730, 732, 743, 768, 774, 788, 791, 797, 799, 811, 813, 814, 818, 837, 842, 845, 857, 881, 883, 940, 950, 951, 964, 968, 970, 987, 988, 997, 1002, 1007, 1008, 1009, 1010], "basi": [4, 6, 13, 100, 149, 154, 156, 197, 294, 309, 325, 358, 364, 390, 395, 397, 430, 511, 599, 609, 616, 668, 852, 952, 964, 969, 976, 984, 985, 988, 991, 1004, 1006, 1009], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 57, 61, 66, 71, 76, 81, 82, 89, 95, 98, 106, 110, 112, 118, 127, 129, 135, 137, 138, 141, 142, 151, 153, 154, 162, 164, 166, 178, 183, 184, 185, 189, 191, 198, 199, 202, 210, 212, 214, 220, 229, 232, 252, 254, 255, 256, 267, 269, 274, 276, 278, 282, 283, 289, 292, 294, 298, 300, 301, 309, 316, 318, 324, 331, 334, 353, 390, 392, 395, 447, 448, 449, 450, 451, 452, 453, 454, 455, 489, 513, 532, 533, 534, 535, 536, 537, 540, 541, 542, 583, 604, 608, 609, 625, 626, 646, 657, 668, 669, 673, 676, 680, 681, 716, 732, 764, 765, 766, 772, 830, 831, 842, 843, 845, 852, 858, 859, 880, 881, 882, 883, 922, 950, 952, 957, 964, 968, 969, 987, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "977": [4, 394], "rescal": [4, 46, 47, 100, 177, 184, 220, 298, 303, 335, 392, 402, 447, 448, 449, 450, 451, 452, 453, 454, 510, 515, 623, 626, 629, 845, 851, 874, 875, 876, 877, 878, 954, 964, 988, 1000, 1001], "variabl": [4, 9, 11, 12, 16, 37, 69, 113, 116, 119, 122, 123, 137, 138, 141, 146, 156, 157, 161, 162, 167, 168, 172, 185, 196, 200, 201, 214, 219, 247, 256, 259, 266, 349, 353, 355, 361, 363, 364, 366, 367, 369, 370, 373, 378, 390, 391, 392, 393, 395, 397, 398, 399, 428, 459, 460, 461, 464, 476, 478, 485, 492, 509, 511, 513, 518, 521, 530, 536, 537, 581, 583, 584, 585, 617, 627, 628, 631, 632, 638, 659, 660, 672, 685, 722, 773, 774, 777, 778, 779, 780, 781, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 801, 805, 806, 836, 850, 861, 873, 943, 944, 946, 950, 953, 954, 955, 956, 957, 959, 961, 962, 964, 968, 970, 974, 975, 977, 980, 981, 983, 985, 996, 1001, 1004, 1006, 1009, 1011], "rel": [4, 6, 8, 17, 27, 60, 100, 116, 154, 172, 176, 196, 214, 244, 258, 282, 283, 299, 307, 310, 325, 338, 339, 361, 365, 367, 373, 378, 388, 390, 394, 397, 398, 400, 419, 422, 425, 427, 437, 498, 501, 508, 511, 514, 518, 534, 535, 536, 537, 541, 542, 543, 581, 626, 635, 636, 648, 667, 671, 704, 722, 772, 775, 776, 785, 797, 800, 813, 814, 818, 830, 831, 842, 843, 853, 868, 872, 873, 874, 877, 879, 880, 881, 882, 883, 950, 951, 954, 956, 957, 958, 960, 977, 985], "so": [4, 9, 12, 16, 17, 42, 48, 55, 60, 64, 80, 118, 121, 128, 149, 154, 166, 167, 168, 172, 176, 196, 197, 225, 256, 258, 282, 283, 286, 293, 294, 299, 307, 316, 325, 338, 340, 347, 349, 353, 354, 355, 360, 361, 365, 366, 367, 369, 370, 371, 373, 374, 378, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 473, 485, 486, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 672, 681, 684, 692, 701, 716, 731, 763, 770, 771, 772, 775, 776, 778, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 862, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 909, 929, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 964, 966, 967, 968, 969, 975, 978, 987, 988, 989, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "error": [4, 5, 7, 13, 17, 27, 74, 77, 78, 80, 99, 105, 108, 109, 110, 113, 116, 119, 123, 133, 149, 161, 164, 166, 185, 192, 196, 198, 200, 202, 203, 210, 214, 228, 231, 247, 249, 252, 256, 257, 261, 270, 272, 282, 283, 310, 324, 333, 338, 339, 363, 364, 366, 367, 368, 369, 370, 374, 376, 378, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 422, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 473, 480, 492, 501, 508, 514, 519, 520, 522, 525, 530, 531, 532, 533, 535, 536, 537, 538, 539, 541, 542, 544, 552, 569, 572, 573, 575, 576, 577, 583, 606, 609, 620, 623, 624, 625, 628, 630, 632, 638, 640, 642, 646, 648, 650, 652, 654, 655, 657, 662, 665, 666, 669, 670, 673, 675, 678, 685, 688, 696, 697, 698, 702, 715, 718, 719, 720, 721, 722, 723, 725, 726, 728, 731, 739, 753, 757, 763, 764, 772, 775, 776, 785, 795, 796, 797, 799, 800, 803, 808, 809, 810, 812, 813, 814, 820, 821, 823, 824, 825, 828, 831, 834, 846, 847, 852, 853, 870, 872, 874, 875, 876, 881, 883, 890, 891, 892, 893, 896, 919, 938, 941, 943, 944, 945, 947, 948, 949, 951, 955, 958, 962, 964, 968, 969, 970, 976, 987, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "easili": [4, 9, 31, 143, 169, 199, 212, 230, 235, 238, 256, 265, 281, 300, 366, 367, 378, 379, 391, 397, 398, 400, 427, 948, 950, 951, 964, 968, 969, 970, 981, 984, 989, 1002], "interpret": [4, 27, 146, 156, 164, 165, 167, 170, 196, 197, 212, 214, 250, 256, 258, 259, 295, 299, 302, 308, 338, 340, 353, 364, 366, 371, 373, 374, 378, 380, 388, 390, 391, 396, 398, 430, 442, 443, 445, 473, 518, 549, 588, 616, 620, 630, 649, 650, 668, 669, 672, 704, 728, 733, 734, 758, 765, 766, 786, 796, 797, 799, 802, 834, 846, 853, 922, 948, 950, 954, 955, 961, 964, 970, 974, 980, 988, 996, 997, 1001, 1004, 1009, 1011], "fraction": [4, 25, 27, 120, 122, 196, 204, 214, 258, 333, 339, 388, 394, 397, 417, 418, 427, 428, 434, 435, 492, 504, 534, 535, 536, 537, 541, 542, 543, 567, 570, 579, 643, 644, 645, 648, 653, 654, 655, 679, 697, 698, 699, 709, 767, 769, 774, 797, 798, 812, 840, 874, 875, 876, 880, 881, 882, 883, 950, 954, 957, 961, 962, 964, 969, 970, 975, 997, 998, 999, 1010], "maximum": [4, 8, 11, 27, 33, 37, 77, 78, 79, 80, 81, 97, 115, 118, 120, 125, 150, 156, 164, 174, 184, 215, 258, 266, 278, 282, 283, 289, 298, 320, 336, 339, 343, 345, 346, 353, 370, 371, 377, 378, 387, 388, 390, 392, 393, 395, 397, 398, 400, 401, 402, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 435, 437, 439, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 475, 486, 488, 489, 490, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 560, 561, 574, 587, 604, 608, 609, 612, 614, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 651, 653, 654, 655, 656, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 692, 719, 756, 770, 772, 775, 776, 785, 792, 797, 822, 829, 830, 831, 837, 838, 842, 843, 845, 848, 849, 850, 852, 860, 861, 866, 867, 868, 869, 872, 873, 877, 880, 881, 882, 883, 884, 886, 889, 896, 943, 949, 950, 951, 953, 954, 956, 957, 958, 960, 964, 968, 969, 970, 988, 1003, 1004, 1006, 1007, 1010, 1011], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 169, 172, 174, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 220, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 335, 338, 339, 343, 344, 345, 346, 347, 353, 355, 356, 358, 361, 363, 366, 368, 370, 371, 374, 376, 378, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 406, 411, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 478, 486, 487, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 671, 674, 675, 677, 678, 687, 698, 710, 725, 763, 770, 771, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 901, 938, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 961, 962, 964, 965, 966, 967, 968, 969, 970, 974, 975, 976, 978, 984, 985, 986, 987, 988, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 55, 57, 60, 64, 67, 68, 75, 78, 79, 83, 86, 95, 98, 100, 104, 105, 106, 115, 116, 117, 123, 129, 141, 146, 161, 167, 172, 183, 185, 197, 204, 213, 216, 218, 223, 225, 231, 238, 240, 248, 258, 263, 265, 276, 282, 283, 285, 298, 302, 306, 308, 309, 338, 339, 340, 347, 349, 353, 355, 356, 358, 363, 364, 366, 367, 371, 372, 374, 376, 377, 380, 384, 386, 387, 388, 391, 392, 393, 394, 395, 396, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 437, 440, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 481, 489, 491, 499, 502, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 686, 687, 706, 707, 710, 711, 716, 717, 738, 743, 744, 749, 753, 758, 763, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 861, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 887, 895, 909, 916, 917, 923, 938, 939, 942, 943, 944, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 962, 964, 966, 967, 968, 969, 970, 971, 974, 976, 978, 980, 984, 986, 987, 989, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "minim": [4, 12, 65, 77, 78, 122, 149, 157, 175, 192, 194, 196, 198, 204, 214, 217, 228, 229, 241, 246, 257, 265, 266, 298, 306, 309, 322, 333, 343, 356, 365, 366, 368, 373, 376, 378, 388, 390, 392, 395, 397, 419, 420, 424, 428, 441, 515, 517, 524, 534, 535, 536, 537, 541, 542, 586, 587, 588, 618, 623, 626, 634, 635, 644, 648, 649, 651, 655, 656, 664, 669, 671, 672, 723, 755, 820, 822, 831, 849, 860, 866, 880, 881, 882, 883, 945, 950, 951, 954, 957, 958, 964, 966, 967, 968, 969, 974, 976, 987, 988, 991, 1000, 1005, 1006], "squar": [4, 5, 60, 78, 79, 80, 83, 86, 96, 106, 113, 123, 146, 149, 154, 164, 166, 174, 175, 177, 185, 192, 196, 198, 200, 201, 206, 213, 214, 215, 228, 229, 231, 244, 265, 266, 270, 302, 308, 309, 322, 338, 358, 363, 366, 371, 374, 378, 388, 390, 392, 393, 395, 396, 397, 401, 402, 411, 419, 421, 422, 423, 425, 427, 428, 435, 437, 438, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 478, 508, 514, 516, 518, 520, 524, 526, 529, 531, 533, 535, 536, 537, 539, 542, 545, 547, 567, 568, 569, 572, 573, 575, 576, 577, 581, 582, 583, 586, 588, 592, 599, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 660, 663, 664, 665, 667, 669, 671, 673, 676, 685, 697, 698, 699, 725, 726, 733, 734, 738, 744, 745, 760, 799, 806, 807, 815, 816, 819, 821, 823, 824, 831, 834, 853, 872, 873, 875, 877, 878, 879, 881, 883, 907, 927, 940, 945, 947, 948, 957, 958, 962, 968, 970, 976, 987, 988, 991, 996, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 57, 60, 62, 70, 71, 73, 82, 84, 85, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 118, 120, 122, 126, 129, 130, 131, 132, 133, 135, 136, 144, 145, 146, 148, 149, 154, 156, 159, 160, 161, 163, 166, 167, 174, 177, 180, 184, 185, 191, 196, 198, 200, 201, 203, 204, 213, 214, 215, 224, 225, 226, 231, 236, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 272, 277, 283, 290, 298, 300, 309, 310, 328, 333, 339, 340, 344, 353, 354, 355, 356, 358, 364, 366, 368, 369, 372, 373, 374, 375, 381, 384, 385, 388, 390, 393, 395, 398, 399, 401, 402, 403, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 472, 473, 475, 478, 479, 501, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 664, 665, 666, 667, 668, 669, 674, 675, 677, 678, 683, 684, 687, 688, 689, 692, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 757, 758, 759, 760, 762, 763, 764, 767, 770, 771, 772, 775, 776, 777, 782, 783, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 857, 858, 860, 861, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 891, 892, 893, 895, 897, 898, 901, 903, 904, 905, 917, 938, 942, 949, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 975, 976, 978, 980, 981, 983, 985, 987, 988, 989, 990, 991, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011], "condit": [4, 12, 25, 27, 81, 117, 122, 164, 165, 166, 170, 185, 198, 201, 214, 259, 309, 347, 371, 376, 380, 387, 390, 392, 395, 397, 399, 429, 450, 451, 456, 467, 490, 500, 501, 513, 516, 517, 518, 520, 522, 524, 526, 527, 539, 604, 609, 610, 620, 627, 628, 629, 631, 632, 633, 647, 649, 650, 651, 652, 659, 660, 664, 674, 688, 693, 694, 711, 712, 768, 799, 808, 809, 810, 811, 812, 831, 834, 837, 850, 909, 948, 950, 951, 952, 954, 956, 957, 959, 964, 970, 974, 987, 991, 997, 999, 1000, 1001, 1003, 1004, 1006, 1008, 1010, 1011], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 57, 59, 60, 65, 67, 69, 70, 71, 72, 74, 77, 78, 79, 80, 88, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 132, 136, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 167, 168, 172, 174, 175, 176, 179, 180, 184, 191, 196, 197, 198, 201, 203, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 232, 238, 241, 242, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 271, 274, 279, 282, 283, 284, 287, 289, 298, 303, 307, 308, 309, 314, 318, 321, 322, 324, 325, 327, 328, 333, 338, 339, 340, 343, 346, 347, 349, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 410, 412, 413, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 587, 588, 589, 596, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 685, 687, 688, 694, 696, 697, 702, 704, 705, 709, 710, 712, 717, 718, 720, 721, 723, 725, 726, 728, 731, 733, 734, 738, 739, 741, 742, 743, 744, 745, 748, 750, 751, 752, 753, 756, 757, 758, 759, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 864, 865, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 887, 889, 890, 892, 893, 895, 896, 899, 903, 904, 905, 907, 908, 909, 911, 913, 916, 917, 919, 920, 921, 922, 924, 925, 928, 929, 935, 938, 940, 941, 942, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 978, 981, 983, 984, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "median": [4, 37, 70, 74, 79, 80, 122, 161, 162, 166, 167, 198, 202, 213, 227, 298, 307, 309, 310, 361, 392, 397, 399, 419, 432, 436, 439, 452, 529, 531, 535, 542, 574, 604, 607, 612, 647, 648, 656, 697, 728, 820, 851, 862, 881, 883, 944, 961, 964, 970, 999, 1000], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 57, 59, 60, 96, 113, 114, 122, 125, 132, 146, 149, 154, 164, 166, 172, 185, 190, 195, 196, 202, 214, 249, 252, 254, 256, 262, 263, 269, 272, 303, 338, 339, 353, 361, 363, 367, 371, 378, 387, 388, 389, 392, 394, 395, 396, 397, 398, 427, 430, 440, 475, 492, 515, 517, 524, 528, 534, 535, 536, 537, 540, 541, 542, 581, 584, 585, 588, 604, 635, 667, 669, 675, 676, 678, 680, 681, 683, 685, 688, 689, 692, 693, 696, 700, 701, 702, 704, 706, 711, 712, 714, 715, 718, 722, 730, 731, 732, 757, 758, 759, 761, 762, 764, 765, 768, 794, 796, 799, 819, 850, 861, 880, 881, 882, 883, 944, 950, 952, 957, 959, 960, 962, 968, 970, 984, 987, 996, 999, 1001, 1002, 1004, 1006], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 69, 70, 84, 100, 109, 110, 113, 115, 116, 117, 120, 121, 122, 123, 124, 135, 138, 140, 142, 147, 149, 150, 164, 166, 167, 168, 169, 172, 180, 185, 191, 192, 196, 197, 198, 203, 204, 211, 212, 214, 221, 226, 231, 233, 243, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 267, 268, 272, 274, 276, 284, 285, 292, 294, 300, 303, 317, 325, 333, 340, 349, 353, 354, 360, 361, 363, 368, 369, 370, 371, 376, 377, 378, 380, 381, 383, 385, 388, 391, 392, 395, 397, 398, 399, 400, 407, 409, 411, 414, 415, 416, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 465, 466, 470, 474, 475, 479, 481, 501, 508, 514, 516, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 569, 571, 572, 573, 575, 576, 577, 579, 581, 582, 583, 585, 586, 587, 588, 604, 605, 607, 612, 613, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 676, 688, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 823, 824, 830, 831, 833, 857, 858, 860, 861, 862, 863, 867, 868, 870, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 901, 903, 904, 949, 950, 953, 954, 957, 958, 962, 964, 968, 969, 970, 974, 975, 977, 978, 981, 984, 985, 991, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "discuss": [4, 53, 57, 166, 185, 217, 222, 259, 338, 349, 355, 361, 363, 366, 370, 371, 373, 376, 378, 379, 390, 392, 396, 397, 400, 475, 659, 660, 815, 816, 821, 823, 824, 944, 948, 950, 951, 954, 957, 964, 971, 975, 999], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 59, 61, 65, 77, 101, 102, 118, 129, 135, 136, 146, 166, 169, 189, 232, 234, 251, 261, 268, 343, 349, 353, 354, 355, 356, 367, 370, 373, 378, 390, 392, 394, 397, 398, 400, 401, 422, 423, 425, 427, 437, 500, 509, 515, 536, 537, 559, 579, 635, 636, 649, 651, 656, 664, 665, 666, 670, 701, 731, 772, 775, 776, 785, 840, 880, 881, 882, 883, 944, 945, 949, 950, 951, 952, 953, 957, 964, 967, 968, 969, 981, 983, 987, 988, 998, 999, 1003, 1005, 1007], "focu": [4, 9, 27, 95, 149, 247, 286, 353, 370, 388, 397, 530, 531, 536, 538, 539, 655, 951, 957, 964, 974, 975], "intuit": [4, 31, 44, 52, 56, 61, 100, 113, 119, 141, 149, 166, 197, 198, 219, 225, 257, 281, 300, 303, 322, 325, 339, 366, 378, 388, 390, 392, 394, 396, 757, 758, 759, 762, 844, 946, 950, 951, 954, 955, 961, 964, 965, 969, 978, 987, 989, 996], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 71, 74, 79, 81, 85, 91, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 118, 119, 122, 146, 149, 155, 158, 161, 166, 167, 168, 172, 175, 182, 185, 196, 198, 202, 212, 213, 214, 221, 225, 231, 232, 242, 253, 254, 256, 257, 259, 262, 265, 274, 282, 283, 295, 298, 302, 303, 308, 310, 314, 338, 339, 340, 349, 353, 354, 355, 360, 361, 362, 365, 366, 367, 370, 371, 373, 378, 379, 384, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 432, 435, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 470, 471, 473, 486, 491, 492, 500, 508, 511, 512, 513, 514, 515, 517, 518, 519, 521, 524, 525, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 604, 605, 607, 611, 617, 619, 620, 621, 622, 623, 624, 629, 630, 632, 635, 636, 637, 638, 639, 640, 643, 644, 645, 648, 649, 651, 653, 654, 655, 656, 659, 664, 669, 671, 673, 680, 681, 688, 696, 697, 698, 699, 710, 711, 714, 739, 754, 755, 756, 758, 760, 768, 770, 771, 772, 775, 776, 781, 785, 790, 792, 794, 795, 796, 797, 798, 801, 803, 804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 827, 830, 831, 836, 846, 848, 850, 851, 853, 855, 861, 862, 866, 869, 872, 873, 874, 877, 878, 880, 881, 882, 883, 884, 898, 909, 911, 912, 919, 923, 925, 928, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 968, 969, 970, 974, 975, 980, 984, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "root": [4, 16, 79, 125, 146, 177, 347, 363, 366, 373, 390, 421, 478, 518, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 616, 726, 880, 881, 882, 883, 884, 886, 960, 970, 998, 1004, 1005, 1006, 1007, 1010], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 57, 59, 63, 67, 69, 74, 81, 109, 110, 115, 123, 143, 150, 161, 164, 166, 168, 180, 185, 191, 192, 196, 198, 200, 202, 214, 220, 226, 229, 230, 234, 237, 249, 250, 253, 254, 256, 257, 259, 263, 265, 266, 272, 274, 276, 278, 286, 289, 295, 298, 303, 306, 307, 309, 310, 313, 314, 316, 317, 338, 339, 349, 353, 356, 358, 361, 366, 367, 376, 377, 378, 380, 385, 388, 395, 396, 397, 400, 401, 407, 416, 420, 423, 424, 428, 435, 447, 497, 512, 526, 527, 528, 530, 532, 534, 536, 538, 539, 541, 544, 546, 554, 579, 587, 597, 605, 611, 615, 616, 617, 618, 619, 620, 635, 636, 640, 643, 645, 651, 652, 653, 665, 667, 669, 671, 673, 772, 775, 776, 785, 794, 795, 796, 798, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 839, 845, 867, 868, 872, 874, 877, 880, 882, 944, 946, 949, 955, 960, 962, 974, 975, 984, 985, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "studi": [4, 59, 122, 196, 214, 259, 262, 263, 338, 361, 363, 394, 399, 673, 684, 733, 734, 798, 952, 954, 968, 980], "yhist": [4, 25, 27, 53, 74, 112, 196, 198, 229, 262, 281, 298, 302, 310], "bin": [4, 24, 25, 27, 53, 74, 112, 196, 229, 262, 281, 298, 299, 300, 301, 302, 364, 373, 381, 388, 396, 397, 417, 418, 426, 439, 538, 539, 836, 838, 852, 911, 988, 1004, 1005, 1006, 1010], "30": [4, 6, 8, 10, 14, 15, 39, 40, 54, 59, 72, 77, 101, 103, 118, 122, 128, 135, 149, 150, 153, 155, 167, 172, 175, 190, 194, 196, 214, 217, 218, 222, 230, 233, 245, 256, 261, 270, 276, 285, 286, 302, 303, 313, 314, 318, 323, 326, 328, 331, 353, 361, 363, 370, 371, 394, 398, 401, 423, 428, 435, 477, 512, 515, 516, 518, 520, 547, 569, 572, 573, 575, 625, 669, 710, 758, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 868, 881, 943, 948, 954, 955, 957, 962, 985, 996, 997, 1003, 1004, 1005], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 56, 72, 95, 99, 109, 118, 122, 123, 155, 156, 157, 166, 167, 172, 175, 196, 199, 200, 204, 211, 214, 228, 229, 231, 238, 251, 258, 280, 281, 294, 299, 300, 301, 302, 306, 309, 325, 331, 334, 340, 360, 363, 366, 368, 370, 374, 375, 376, 377, 378, 387, 388, 391, 394, 395, 396, 397, 398, 399, 400, 402, 408, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 424, 426, 427, 428, 432, 435, 436, 439, 442, 443, 445, 446, 447, 450, 459, 460, 461, 466, 480, 486, 493, 494, 495, 497, 501, 505, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 588, 597, 599, 604, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 662, 663, 664, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 697, 698, 699, 703, 720, 721, 723, 725, 726, 728, 729, 736, 742, 743, 746, 747, 749, 753, 754, 755, 756, 760, 770, 771, 772, 775, 776, 785, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 889, 890, 891, 892, 893, 894, 898, 903, 908, 920, 927, 929, 935, 940, 941, 944, 946, 948, 950, 951, 952, 953, 954, 956, 957, 958, 959, 961, 962, 966, 967, 968, 969, 970, 974, 975, 978, 980, 984, 985, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "annot": [4, 9, 26, 131, 172, 218, 260, 263, 338, 366, 367, 390, 692, 886, 954, 970, 1005], "log": [4, 20, 25, 26, 27, 77, 95, 122, 129, 142, 146, 150, 151, 153, 154, 155, 158, 181, 184, 185, 189, 196, 200, 201, 206, 214, 229, 231, 245, 286, 338, 361, 363, 364, 366, 369, 373, 374, 378, 387, 388, 390, 391, 392, 395, 397, 398, 400, 425, 426, 427, 429, 438, 443, 448, 449, 450, 451, 452, 453, 454, 509, 513, 518, 526, 527, 528, 530, 532, 534, 536, 539, 541, 567, 568, 570, 571, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 619, 622, 625, 635, 636, 646, 648, 653, 657, 716, 726, 730, 770, 771, 772, 775, 776, 785, 808, 809, 810, 811, 812, 813, 814, 818, 829, 830, 837, 838, 866, 869, 874, 877, 879, 880, 882, 907, 943, 946, 948, 950, 951, 956, 957, 959, 962, 964, 968, 970, 974, 975, 987, 998, 999, 1000, 1005, 1006, 1007, 1010], "describ": [4, 55, 129, 166, 214, 230, 256, 265, 349, 353, 354, 359, 361, 363, 365, 366, 367, 370, 373, 378, 379, 387, 390, 392, 393, 394, 395, 397, 398, 440, 447, 451, 452, 453, 468, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482, 487, 493, 494, 495, 505, 584, 585, 622, 636, 690, 770, 771, 808, 810, 848, 909, 943, 946, 949, 950, 953, 954, 956, 960, 968, 969, 970, 977, 980, 986, 987, 1004, 1006], "weather": [4, 154, 400, 950, 954], "includ": [4, 32, 79, 119, 121, 166, 168, 196, 214, 257, 276, 293, 298, 309, 310, 325, 330, 338, 340, 349, 353, 354, 360, 362, 364, 366, 367, 369, 370, 371, 373, 374, 378, 379, 381, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 423, 428, 434, 444, 447, 448, 449, 450, 451, 452, 453, 454, 466, 467, 468, 473, 477, 478, 479, 481, 482, 487, 511, 518, 534, 541, 551, 609, 615, 623, 624, 629, 637, 638, 639, 642, 658, 665, 666, 674, 689, 704, 705, 710, 712, 713, 746, 758, 759, 762, 768, 772, 774, 775, 776, 784, 785, 788, 791, 796, 799, 821, 823, 824, 825, 846, 847, 848, 852, 869, 880, 882, 884, 886, 892, 893, 896, 898, 901, 943, 950, 953, 954, 955, 957, 958, 964, 968, 969, 970, 974, 975, 977, 978, 987, 989, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 63, 70, 74, 77, 79, 84, 85, 100, 103, 109, 113, 116, 119, 128, 129, 132, 141, 142, 146, 149, 156, 158, 166, 167, 168, 175, 182, 184, 185, 196, 197, 198, 201, 202, 204, 214, 221, 231, 232, 241, 242, 243, 244, 245, 246, 256, 257, 258, 259, 263, 265, 267, 271, 288, 298, 302, 306, 308, 315, 316, 322, 327, 338, 339, 340, 347, 349, 353, 354, 355, 359, 360, 361, 362, 364, 366, 367, 371, 372, 374, 376, 377, 378, 379, 381, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 416, 425, 430, 437, 440, 446, 453, 459, 460, 461, 462, 465, 466, 473, 474, 477, 479, 482, 484, 485, 486, 511, 524, 528, 532, 533, 534, 540, 541, 542, 543, 544, 553, 565, 566, 568, 574, 584, 585, 604, 609, 610, 620, 634, 635, 636, 649, 651, 653, 655, 664, 676, 680, 688, 692, 706, 711, 732, 736, 742, 749, 753, 758, 763, 764, 768, 775, 776, 802, 830, 831, 845, 849, 860, 865, 870, 872, 873, 880, 882, 896, 910, 919, 929, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 974, 975, 977, 978, 984, 987, 988, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "numer": [4, 19, 65, 70, 74, 117, 119, 129, 146, 154, 157, 167, 168, 185, 196, 214, 236, 238, 267, 286, 309, 340, 360, 361, 363, 368, 370, 371, 376, 377, 378, 390, 392, 397, 398, 399, 400, 402, 419, 422, 425, 437, 449, 450, 453, 456, 466, 467, 468, 473, 477, 478, 479, 481, 482, 487, 508, 510, 512, 517, 524, 544, 558, 567, 588, 594, 597, 607, 609, 623, 629, 631, 649, 664, 667, 671, 690, 763, 767, 772, 775, 776, 785, 795, 796, 797, 800, 808, 809, 810, 811, 812, 830, 831, 836, 841, 846, 847, 884, 886, 892, 893, 908, 909, 943, 944, 950, 951, 955, 962, 964, 965, 970, 977, 978, 980, 989, 996, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "categor": [4, 70, 108, 115, 129, 133, 164, 166, 168, 196, 214, 236, 238, 309, 355, 358, 360, 361, 367, 370, 378, 391, 398, 444, 445, 466, 467, 473, 482, 538, 539, 558, 559, 584, 585, 625, 635, 636, 646, 657, 685, 796, 808, 809, 810, 811, 812, 834, 836, 840, 841, 844, 846, 847, 867, 868, 944, 950, 962, 970, 974, 975, 976, 977, 978, 989, 991, 996, 997, 1000, 1001, 1004, 1006, 1008, 1011], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 57, 65, 66, 69, 70, 85, 88, 89, 90, 102, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 166, 169, 172, 174, 175, 176, 197, 211, 213, 214, 215, 235, 243, 244, 246, 251, 253, 256, 257, 261, 263, 265, 282, 283, 286, 309, 328, 333, 338, 339, 340, 344, 347, 349, 353, 356, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 373, 376, 377, 378, 379, 384, 387, 394, 395, 397, 398, 399, 400, 430, 440, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 487, 492, 501, 505, 511, 512, 515, 516, 518, 520, 534, 538, 539, 541, 564, 566, 567, 569, 570, 571, 572, 573, 576, 577, 583, 584, 585, 586, 616, 617, 633, 635, 664, 668, 672, 674, 680, 681, 691, 701, 705, 718, 730, 731, 732, 761, 763, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 789, 796, 808, 812, 813, 814, 818, 822, 834, 845, 850, 853, 857, 858, 860, 861, 862, 863, 868, 871, 874, 877, 880, 882, 884, 886, 944, 946, 951, 952, 953, 954, 955, 956, 957, 958, 960, 965, 968, 970, 975, 978, 986, 987, 988, 989, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "alreadi": [4, 6, 10, 16, 57, 100, 129, 146, 166, 226, 232, 237, 257, 263, 309, 366, 370, 371, 376, 378, 388, 392, 394, 396, 397, 402, 416, 476, 500, 510, 544, 545, 611, 623, 626, 641, 642, 643, 644, 645, 651, 653, 654, 655, 662, 663, 676, 743, 808, 828, 836, 842, 843, 845, 850, 855, 857, 858, 859, 861, 862, 863, 869, 872, 873, 895, 943, 960, 964, 965, 975, 980, 985, 989, 993, 997, 1001, 1004, 1008, 1009, 1010], "expand": [4, 16, 49, 64, 227, 307, 349, 358, 397, 423, 428, 476, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 954, 997, 1004, 1005], "complementari": [4, 398], "column": [4, 20, 21, 59, 68, 74, 75, 89, 116, 118, 119, 122, 129, 146, 154, 161, 164, 166, 167, 168, 185, 196, 197, 204, 214, 233, 235, 246, 256, 257, 258, 267, 268, 294, 308, 309, 310, 338, 339, 340, 353, 360, 361, 363, 366, 367, 371, 374, 376, 377, 378, 387, 390, 391, 393, 395, 397, 398, 399, 402, 405, 429, 431, 442, 444, 445, 449, 450, 456, 464, 465, 466, 467, 468, 469, 471, 473, 477, 478, 479, 481, 482, 485, 486, 487, 488, 490, 492, 503, 508, 511, 514, 519, 521, 525, 532, 534, 535, 541, 542, 543, 544, 558, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 604, 607, 609, 611, 623, 625, 629, 635, 637, 639, 641, 642, 646, 657, 662, 663, 674, 689, 694, 695, 704, 705, 713, 729, 738, 743, 744, 745, 748, 758, 759, 762, 763, 772, 775, 776, 785, 794, 799, 804, 807, 808, 809, 810, 811, 812, 813, 814, 833, 837, 838, 839, 840, 846, 847, 848, 852, 853, 854, 856, 872, 874, 877, 880, 882, 888, 892, 893, 898, 909, 919, 930, 931, 933, 941, 943, 944, 950, 952, 954, 955, 962, 964, 969, 975, 996, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 217, 218, 219, 222, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 353, 359, 360, 361, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 384, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 470, 471, 472, 475, 477, 478, 479, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 682, 686, 687, 700, 710, 717, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 763, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 896, 908, 909, 911, 916, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 975, 980, 984, 985, 987, 988, 989, 993, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "drop": [4, 5, 70, 74, 85, 154, 166, 167, 169, 196, 214, 238, 266, 308, 339, 373, 391, 395, 397, 442, 445, 544, 545, 546, 547, 672, 678, 764, 832, 846, 852, 950, 954, 962, 964, 974, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 60, 70, 71, 74, 81, 85, 90, 91, 94, 95, 96, 97, 98, 99, 105, 110, 112, 113, 116, 118, 125, 128, 132, 138, 142, 153, 154, 158, 161, 166, 167, 177, 181, 183, 185, 188, 189, 190, 196, 200, 201, 205, 208, 210, 211, 213, 214, 218, 219, 222, 225, 229, 230, 233, 234, 241, 243, 245, 246, 253, 257, 258, 263, 265, 266, 271, 274, 276, 281, 282, 283, 286, 287, 288, 295, 298, 302, 303, 314, 316, 318, 321, 324, 325, 328, 329, 330, 331, 332, 333, 335, 338, 339, 344, 345, 346, 347, 367, 374, 378, 388, 390, 398, 402, 417, 424, 442, 445, 508, 510, 513, 514, 516, 518, 520, 527, 562, 589, 608, 609, 662, 663, 738, 754, 755, 756, 757, 801, 842, 843, 850, 851, 853, 855, 857, 858, 859, 861, 862, 863, 886, 888, 892, 893, 911, 929, 935, 944, 954, 961, 964, 969, 986, 988, 1004, 1006, 1008], "holidai": 4, "workingdai": 4, "temp": 4, "feel_temp": 4, "humid": 4, "windspe": 4, "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 353, 354, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 381, 382, 383, 384, 386, 387, 388, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 734, 735, 736, 738, 739, 741, 742, 743, 744, 746, 748, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 898, 903, 904, 906, 908, 909, 911, 912, 913, 914, 916, 918, 919, 921, 922, 923, 924, 925, 928, 929, 935, 943, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 972, 975, 976, 980, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994], "spring": 4, "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 63, 66, 69, 70, 71, 72, 78, 80, 91, 99, 101, 104, 105, 109, 116, 119, 122, 123, 129, 132, 135, 149, 154, 155, 156, 157, 166, 168, 169, 175, 176, 182, 196, 197, 201, 202, 204, 212, 214, 217, 220, 232, 234, 238, 241, 253, 254, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 276, 280, 286, 289, 293, 294, 298, 299, 306, 308, 309, 310, 315, 325, 327, 333, 334, 338, 339, 360, 366, 367, 370, 378, 388, 390, 391, 392, 394, 395, 397, 398, 399, 400, 402, 403, 413, 414, 415, 416, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 492, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 614, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 671, 672, 674, 675, 676, 678, 679, 684, 685, 687, 688, 689, 690, 691, 694, 701, 702, 703, 704, 705, 706, 713, 717, 718, 725, 726, 729, 731, 736, 738, 742, 743, 744, 749, 753, 757, 758, 759, 760, 762, 764, 767, 769, 770, 771, 772, 775, 776, 777, 782, 785, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 884, 885, 886, 890, 891, 892, 893, 903, 910, 916, 918, 921, 924, 925, 928, 935, 940, 941, 943, 944, 950, 954, 957, 964, 968, 969, 988, 989, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "6": [4, 6, 9, 10, 11, 12, 16, 26, 31, 32, 33, 40, 44, 46, 49, 50, 52, 55, 59, 60, 61, 62, 63, 64, 66, 70, 72, 73, 74, 77, 78, 79, 81, 89, 95, 97, 105, 111, 122, 123, 126, 128, 135, 136, 138, 141, 146, 149, 152, 154, 156, 157, 161, 162, 166, 168, 172, 175, 176, 177, 185, 189, 194, 196, 197, 198, 200, 204, 210, 211, 214, 217, 218, 221, 225, 228, 229, 232, 235, 236, 241, 242, 243, 244, 246, 247, 250, 251, 255, 256, 257, 259, 261, 265, 266, 267, 268, 271, 274, 278, 281, 289, 292, 294, 295, 298, 300, 302, 303, 306, 309, 310, 313, 314, 317, 318, 325, 326, 328, 330, 335, 339, 340, 346, 349, 360, 361, 363, 364, 370, 371, 377, 381, 382, 383, 388, 390, 391, 394, 395, 397, 398, 399, 400, 422, 426, 427, 428, 429, 430, 431, 440, 459, 460, 461, 462, 482, 507, 515, 517, 518, 524, 540, 546, 547, 570, 571, 588, 591, 592, 602, 604, 605, 607, 621, 622, 647, 666, 670, 697, 703, 713, 720, 721, 725, 726, 728, 744, 760, 763, 770, 771, 773, 774, 778, 780, 781, 783, 788, 789, 792, 797, 799, 808, 809, 810, 812, 813, 814, 821, 823, 824, 825, 840, 841, 843, 848, 851, 852, 856, 887, 909, 912, 914, 919, 943, 944, 948, 950, 951, 954, 964, 965, 968, 969, 972, 980, 984, 985, 987, 992, 994, 997, 998, 999, 1004, 1009], "clear": [4, 16, 59, 71, 166, 303, 361, 365, 366, 367, 376, 377, 378, 391, 396, 886, 887, 943, 948, 1007, 1008, 1009], "9": [4, 7, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 57, 61, 63, 73, 74, 81, 84, 90, 109, 118, 119, 120, 121, 122, 127, 129, 137, 138, 152, 156, 158, 162, 166, 167, 177, 178, 187, 196, 209, 210, 213, 214, 217, 219, 220, 229, 230, 234, 238, 241, 242, 243, 244, 250, 257, 259, 263, 265, 267, 274, 278, 280, 281, 284, 285, 286, 292, 293, 295, 298, 300, 301, 302, 313, 314, 316, 317, 318, 325, 329, 333, 335, 338, 339, 340, 349, 363, 364, 371, 377, 381, 382, 383, 388, 391, 392, 394, 397, 398, 418, 459, 460, 461, 462, 467, 497, 504, 511, 515, 516, 517, 524, 537, 544, 547, 560, 568, 584, 585, 604, 607, 611, 616, 624, 635, 638, 669, 685, 698, 701, 716, 723, 744, 770, 773, 775, 776, 789, 792, 797, 799, 802, 810, 811, 815, 816, 821, 824, 830, 831, 839, 845, 848, 909, 913, 943, 950, 954, 958, 964, 968, 969, 972, 980, 984, 989, 994, 997, 998, 999, 1001, 1010], "84": [4, 6, 8, 69, 98, 143, 187, 214, 295, 300, 313, 349, 363, 397, 398, 763, 785, 949, 954, 964, 985], "14": [4, 11, 15, 38, 49, 59, 61, 62, 65, 73, 75, 80, 100, 141, 185, 187, 214, 215, 217, 219, 223, 225, 229, 230, 239, 255, 261, 262, 270, 274, 301, 302, 332, 335, 354, 361, 363, 377, 381, 390, 394, 475, 487, 530, 531, 562, 563, 612, 620, 669, 785, 789, 839, 947, 950, 954, 964, 969, 972, 980, 994, 996, 997, 999, 1000, 1004, 1009], "395": [4, 328, 336], "81": [4, 6, 19, 50, 238, 303, 313, 314, 390, 763, 772, 785, 954, 955, 957, 964], "0000": 4, "02": [4, 12, 15, 35, 44, 50, 57, 61, 63, 67, 75, 81, 82, 84, 95, 98, 107, 112, 118, 147, 151, 156, 159, 166, 170, 177, 214, 215, 225, 229, 232, 239, 251, 257, 263, 272, 281, 292, 295, 296, 298, 300, 303, 304, 311, 318, 321, 339, 344, 360, 363, 370, 394, 420, 424, 574, 635, 653, 772, 785, 852, 867, 881, 950], "13": [4, 6, 10, 11, 14, 15, 19, 44, 73, 100, 105, 118, 120, 121, 123, 139, 161, 163, 166, 172, 182, 205, 219, 229, 250, 254, 257, 260, 262, 272, 298, 302, 303, 325, 361, 363, 366, 371, 377, 394, 402, 487, 490, 509, 510, 528, 529, 559, 612, 616, 709, 789, 817, 832, 839, 864, 865, 950, 954, 955, 960, 961, 964, 969, 972, 980, 994, 996, 998, 999, 1002, 1003, 1004, 1005, 1008], "635": [4, 593], "80": [4, 6, 11, 16, 27, 66, 80, 101, 129, 138, 143, 175, 232, 295, 300, 313, 328, 329, 330, 338, 345, 349, 361, 363, 366, 388, 394, 399, 423, 487, 518, 689, 772, 785, 866, 885, 943, 949, 950, 954, 967, 970, 989], "75": [4, 7, 10, 33, 44, 81, 113, 143, 156, 157, 162, 166, 172, 175, 178, 187, 203, 214, 238, 243, 244, 256, 265, 269, 281, 295, 298, 309, 335, 338, 349, 528, 635, 682, 688, 709, 714, 720, 728, 731, 767, 772, 851, 862, 869, 885, 954, 956, 964, 970, 973, 985, 998], "17374": 4, "19": [4, 8, 9, 154, 166, 218, 222, 223, 246, 296, 302, 314, 319, 363, 369, 378, 390, 391, 398, 401, 423, 469, 493, 494, 495, 513, 517, 518, 524, 526, 527, 534, 535, 536, 537, 541, 542, 543, 559, 566, 625, 635, 636, 643, 644, 645, 648, 649, 651, 653, 655, 664, 683, 756, 760, 772, 785, 796, 801, 802, 804, 805, 819, 820, 839, 850, 870, 874, 877, 880, 881, 882, 883, 943, 954, 964, 972, 992, 994, 996, 997, 998, 999, 1001, 1004], "misti": 4, "10": [4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 19, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 71, 73, 77, 78, 79, 80, 81, 84, 85, 91, 95, 97, 98, 99, 100, 101, 105, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 126, 127, 129, 130, 132, 133, 136, 138, 143, 146, 150, 151, 153, 154, 155, 156, 158, 159, 161, 162, 166, 167, 168, 169, 172, 175, 180, 186, 187, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 212, 213, 214, 215, 218, 219, 225, 228, 229, 230, 231, 233, 234, 235, 237, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 267, 270, 274, 275, 276, 281, 283, 292, 293, 294, 295, 298, 299, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 317, 323, 325, 327, 328, 329, 330, 332, 333, 335, 338, 339, 340, 349, 353, 360, 361, 362, 363, 364, 366, 367, 370, 371, 376, 377, 378, 381, 382, 383, 387, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 417, 422, 425, 427, 429, 430, 431, 437, 438, 440, 453, 469, 470, 477, 478, 479, 481, 487, 488, 489, 490, 493, 497, 498, 501, 505, 508, 512, 513, 514, 515, 516, 518, 519, 521, 523, 525, 529, 532, 533, 534, 535, 538, 539, 541, 542, 543, 544, 545, 547, 559, 570, 571, 576, 577, 588, 594, 596, 604, 607, 609, 611, 612, 617, 619, 620, 621, 626, 636, 641, 642, 643, 644, 646, 647, 649, 650, 652, 653, 654, 655, 662, 663, 668, 669, 681, 691, 701, 717, 731, 744, 770, 771, 772, 773, 774, 775, 776, 782, 785, 786, 787, 788, 789, 791, 792, 797, 799, 801, 802, 808, 809, 810, 812, 813, 814, 820, 829, 830, 831, 839, 843, 846, 850, 861, 869, 875, 878, 880, 881, 885, 909, 913, 920, 922, 924, 940, 943, 944, 950, 951, 952, 954, 955, 957, 958, 960, 961, 964, 968, 969, 972, 980, 984, 985, 987, 988, 989, 993, 994, 997, 998, 999, 1004, 1006, 1007, 1008, 1010, 1011], "66": [4, 91, 221, 363, 390, 509, 609, 688, 758, 759, 768, 852, 954, 966], "880": 4, "60": [4, 6, 16, 58, 72, 81, 196, 208, 214, 217, 218, 238, 244, 264, 269, 295, 314, 328, 338, 360, 390, 394, 428, 435, 689, 772, 954, 964, 985, 996, 999], "11": [4, 9, 19, 35, 73, 80, 97, 146, 152, 166, 196, 197, 198, 201, 231, 239, 253, 261, 262, 268, 280, 282, 302, 303, 308, 324, 328, 360, 363, 364, 371, 377, 390, 393, 394, 397, 459, 460, 461, 462, 478, 494, 495, 589, 627, 633, 647, 691, 697, 698, 699, 773, 776, 789, 792, 798, 825, 881, 920, 950, 952, 964, 968, 969, 972, 980, 987, 989, 994, 998, 1002, 1004, 1005, 1007, 1010], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 60, 66, 77, 81, 91, 95, 101, 103, 105, 110, 112, 118, 119, 122, 125, 129, 130, 132, 138, 141, 142, 143, 155, 166, 167, 168, 178, 185, 186, 188, 192, 193, 195, 196, 197, 200, 205, 208, 209, 210, 211, 213, 220, 229, 234, 243, 245, 246, 256, 257, 258, 259, 260, 262, 267, 268, 270, 280, 281, 282, 283, 284, 287, 295, 302, 307, 308, 309, 310, 313, 314, 317, 322, 324, 328, 330, 335, 339, 340, 345, 346, 359, 363, 366, 367, 369, 370, 371, 381, 390, 397, 398, 420, 425, 427, 442, 443, 447, 449, 450, 456, 465, 466, 467, 468, 469, 471, 473, 474, 477, 479, 481, 482, 489, 492, 493, 500, 508, 513, 514, 519, 522, 523, 525, 529, 532, 533, 536, 537, 538, 539, 540, 546, 547, 559, 566, 569, 571, 574, 576, 606, 607, 622, 626, 635, 643, 644, 645, 653, 655, 673, 680, 684, 689, 692, 700, 701, 714, 731, 732, 742, 765, 766, 770, 771, 772, 785, 795, 796, 797, 800, 802, 805, 806, 807, 810, 811, 818, 819, 830, 831, 832, 833, 835, 837, 838, 846, 847, 848, 849, 867, 868, 870, 871, 876, 884, 890, 892, 893, 943, 950, 954, 957, 960, 964, 967, 972, 977, 978, 981, 987, 991, 992, 994, 996, 1002, 1005, 1008, 1010, 1011], "17376": 4, "21": [4, 166, 170, 185, 197, 214, 246, 295, 300, 302, 336, 363, 364, 367, 369, 381, 387, 397, 398, 420, 424, 452, 509, 538, 539, 540, 546, 547, 565, 566, 568, 604, 646, 664, 729, 772, 774, 785, 796, 839, 846, 848, 870, 886, 950, 955, 964, 972, 992, 994, 996, 997, 999, 1003, 1004, 1006], "17377": 4, "22": [4, 42, 164, 166, 167, 213, 221, 223, 246, 295, 298, 302, 305, 311, 314, 340, 364, 366, 369, 370, 381, 382, 383, 387, 416, 426, 450, 465, 466, 472, 473, 481, 492, 508, 514, 519, 522, 523, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 571, 604, 605, 609, 611, 622, 624, 628, 630, 632, 635, 636, 638, 640, 642, 646, 665, 669, 680, 689, 732, 744, 753, 758, 759, 763, 772, 773, 777, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 817, 819, 821, 823, 824, 825, 830, 831, 832, 834, 837, 853, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 903, 904, 954, 964, 972, 992, 994, 996, 999, 1004, 1007, 1009], "56": [4, 214, 229, 371, 689, 710, 954, 964, 992, 996], "8": [4, 5, 6, 7, 8, 9, 12, 13, 25, 26, 27, 31, 32, 34, 37, 44, 45, 48, 50, 53, 59, 61, 63, 64, 69, 71, 73, 74, 80, 84, 89, 90, 91, 95, 96, 99, 100, 104, 106, 113, 115, 118, 119, 121, 122, 124, 127, 130, 131, 135, 145, 146, 150, 152, 154, 155, 157, 158, 162, 166, 167, 169, 172, 175, 176, 181, 182, 187, 190, 196, 197, 204, 206, 212, 214, 217, 218, 219, 221, 222, 226, 230, 231, 232, 234, 236, 237, 238, 241, 242, 243, 245, 246, 247, 251, 254, 255, 256, 257, 259, 260, 261, 263, 266, 267, 274, 278, 280, 284, 288, 292, 294, 295, 298, 300, 301, 302, 303, 306, 313, 314, 315, 317, 318, 322, 325, 329, 330, 332, 334, 338, 339, 340, 346, 349, 354, 360, 361, 363, 364, 366, 370, 371, 381, 382, 383, 388, 390, 394, 395, 397, 398, 399, 400, 418, 422, 423, 425, 427, 428, 430, 440, 447, 448, 449, 450, 451, 452, 453, 454, 460, 461, 462, 464, 467, 479, 480, 491, 508, 511, 515, 517, 520, 522, 524, 526, 527, 532, 533, 542, 547, 559, 565, 566, 567, 568, 605, 606, 625, 635, 647, 653, 666, 669, 670, 671, 672, 676, 678, 682, 683, 685, 691, 697, 702, 703, 704, 716, 720, 721, 725, 726, 728, 757, 758, 760, 763, 764, 768, 770, 773, 774, 778, 781, 788, 789, 792, 799, 802, 811, 813, 814, 820, 830, 831, 832, 838, 845, 874, 877, 907, 909, 913, 943, 944, 950, 951, 952, 954, 957, 962, 964, 968, 972, 978, 980, 984, 985, 986, 987, 988, 992, 993, 994, 997, 998, 999, 1003, 1004, 1009, 1010], "9981": 4, "17378": 4, "23": [4, 7, 15, 19, 26, 34, 50, 91, 98, 164, 222, 238, 246, 295, 302, 303, 305, 308, 309, 311, 314, 363, 371, 381, 397, 411, 419, 425, 430, 432, 440, 443, 445, 446, 453, 459, 460, 461, 467, 469, 477, 478, 479, 481, 482, 487, 489, 491, 499, 501, 515, 516, 517, 520, 524, 531, 533, 535, 537, 538, 539, 542, 545, 546, 547, 584, 585, 588, 604, 607, 609, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 646, 647, 649, 650, 652, 655, 656, 657, 693, 705, 753, 799, 805, 806, 807, 816, 824, 831, 834, 846, 853, 860, 861, 870, 873, 875, 878, 881, 883, 890, 892, 893, 903, 904, 909, 954, 972, 992, 994, 996, 997, 1003, 1004, 1005, 1008], "65": [4, 167, 172, 196, 265, 390, 418, 479, 574, 716, 765, 766, 961, 985, 996, 997, 998], "17379": [4, 1008], "row": [4, 19, 20, 21, 25, 27, 44, 59, 74, 89, 91, 118, 127, 130, 161, 196, 197, 198, 226, 229, 234, 235, 258, 300, 347, 353, 361, 367, 374, 377, 378, 387, 390, 393, 398, 405, 421, 422, 425, 427, 428, 429, 431, 434, 435, 437, 442, 446, 465, 467, 468, 469, 470, 471, 472, 477, 478, 479, 481, 482, 487, 488, 490, 511, 519, 525, 528, 567, 568, 597, 609, 620, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 669, 673, 674, 686, 694, 695, 700, 733, 734, 738, 741, 743, 744, 745, 746, 748, 749, 751, 753, 754, 755, 756, 770, 771, 802, 808, 809, 810, 811, 812, 818, 821, 822, 823, 824, 825, 828, 839, 843, 845, 848, 859, 862, 863, 866, 870, 888, 892, 893, 909, 925, 928, 932, 934, 936, 937, 941, 943, 944, 948, 950, 952, 954, 955, 957, 964, 965, 968, 969, 975, 1003, 1004, 1005, 1006, 1011], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 57, 65, 69, 70, 71, 73, 74, 80, 89, 98, 99, 106, 110, 112, 116, 117, 118, 119, 121, 128, 129, 141, 142, 143, 146, 149, 151, 154, 156, 158, 162, 164, 166, 167, 172, 174, 179, 185, 192, 196, 197, 199, 202, 204, 205, 214, 215, 217, 218, 225, 227, 229, 231, 235, 241, 242, 243, 246, 247, 254, 256, 259, 262, 263, 264, 265, 267, 268, 276, 279, 282, 284, 287, 289, 294, 298, 299, 308, 309, 313, 314, 316, 321, 322, 325, 330, 333, 334, 338, 339, 340, 343, 344, 347, 349, 353, 354, 355, 359, 360, 361, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 466, 467, 468, 469, 471, 473, 474, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 493, 496, 500, 501, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 676, 683, 685, 689, 701, 704, 705, 709, 711, 712, 713, 716, 717, 718, 731, 733, 735, 749, 753, 754, 755, 756, 758, 759, 762, 763, 765, 766, 767, 770, 771, 772, 774, 775, 776, 785, 789, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 896, 898, 901, 909, 911, 914, 916, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 974, 975, 978, 987, 988, 989, 993, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011], "present": [4, 5, 49, 91, 95, 103, 115, 122, 155, 158, 175, 178, 185, 196, 225, 228, 246, 254, 259, 262, 265, 266, 276, 298, 301, 339, 363, 364, 367, 370, 376, 378, 390, 392, 395, 397, 398, 408, 409, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 446, 447, 448, 449, 450, 451, 452, 453, 454, 466, 467, 468, 469, 473, 477, 478, 479, 480, 481, 482, 487, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 526, 527, 540, 543, 546, 547, 558, 559, 560, 565, 566, 568, 594, 604, 605, 606, 607, 627, 631, 654, 665, 666, 667, 668, 688, 704, 705, 713, 717, 744, 758, 759, 762, 770, 771, 772, 775, 776, 783, 785, 797, 815, 816, 817, 819, 821, 823, 824, 825, 832, 837, 845, 846, 847, 848, 849, 851, 864, 865, 876, 884, 886, 887, 909, 938, 953, 954, 955, 956, 961, 964, 973, 975, 999, 1004, 1006, 1007, 1008, 1010], "date": [4, 69, 154, 361, 363, 366, 369, 379, 391, 975], "datetim": [4, 17, 154], "http": [4, 6, 7, 8, 12, 17, 24, 50, 70, 123, 129, 146, 158, 162, 172, 196, 204, 212, 214, 222, 226, 234, 274, 276, 294, 360, 361, 363, 364, 366, 369, 370, 371, 373, 376, 378, 381, 390, 394, 399, 421, 427, 430, 440, 464, 469, 473, 477, 479, 485, 486, 487, 507, 508, 511, 513, 514, 518, 572, 613, 618, 621, 626, 635, 641, 643, 644, 645, 648, 653, 656, 659, 660, 662, 663, 668, 669, 672, 681, 697, 698, 699, 733, 734, 744, 808, 810, 811, 812, 815, 816, 821, 822, 823, 824, 829, 851, 865, 866, 867, 880, 881, 950, 952, 954, 957, 967, 970, 977, 978, 985, 1001, 1006], "pydata": [4, 973, 978], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 60, 65, 70, 109, 115, 116, 117, 129, 132, 143, 154, 158, 166, 168, 172, 177, 187, 188, 196, 204, 212, 214, 218, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 259, 263, 268, 274, 294, 295, 307, 308, 310, 313, 314, 315, 318, 338, 339, 340, 347, 354, 359, 364, 366, 368, 371, 373, 379, 381, 394, 572, 613, 645, 648, 653, 672, 681, 744, 815, 816, 821, 822, 823, 824, 851, 866, 880, 881, 950, 954, 970, 972, 991, 1004, 1008], "stabl": [4, 158, 166, 190, 194, 198, 307, 339, 364, 366, 369, 371, 374, 378, 381, 394, 398, 402, 449, 450, 456, 510, 556, 632, 649, 651, 664, 669, 699, 727, 908, 909, 950, 956, 957, 964, 975, 992, 996, 997, 1002, 1007, 1009], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 146, 154, 158, 166, 168, 172, 177, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 361, 363, 366, 369, 371, 373, 391, 394, 398, 464, 485, 486, 635, 808, 812, 905, 952, 975, 1007, 1008, 1009, 1010, 1011], "compon": [4, 5, 17, 44, 57, 61, 69, 72, 83, 84, 86, 93, 96, 97, 99, 100, 102, 103, 104, 106, 107, 127, 154, 164, 217, 229, 230, 232, 241, 242, 245, 246, 247, 255, 257, 277, 290, 295, 303, 308, 353, 354, 358, 361, 366, 367, 371, 374, 376, 389, 390, 391, 393, 398, 400, 402, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 479, 481, 492, 498, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 672, 704, 705, 713, 758, 759, 762, 770, 771, 772, 775, 776, 785, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 908, 909, 946, 951, 964, 966, 969, 974, 975, 976, 978, 983, 989, 990, 991, 996, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "now": [4, 5, 7, 17, 53, 70, 85, 100, 109, 111, 115, 116, 118, 119, 122, 123, 129, 132, 146, 149, 154, 155, 156, 162, 166, 167, 168, 172, 175, 177, 182, 184, 185, 197, 198, 221, 230, 256, 259, 267, 268, 307, 308, 310, 315, 325, 338, 339, 340, 349, 353, 355, 361, 366, 367, 371, 376, 377, 378, 387, 394, 395, 397, 398, 402, 470, 485, 486, 489, 513, 526, 555, 556, 557, 559, 604, 607, 626, 630, 635, 640, 661, 701, 731, 770, 771, 775, 776, 805, 820, 929, 943, 944, 950, 954, 960, 963, 964, 969, 970, 973, 975, 980, 987, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "introspect": [4, 6, 70, 371, 536, 537, 565, 566, 568, 964, 985], "value_count": 4, "11413": 4, "4544": 4, "rain": [4, 950], "1419": 4, "heavy_rain": 4, "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 57, 61, 70, 72, 74, 81, 94, 96, 102, 113, 114, 115, 119, 120, 122, 129, 166, 168, 185, 194, 196, 198, 202, 203, 211, 213, 214, 217, 218, 225, 231, 233, 234, 238, 243, 251, 253, 254, 257, 259, 260, 263, 265, 266, 276, 284, 285, 292, 293, 300, 302, 310, 317, 330, 333, 338, 339, 340, 355, 360, 361, 364, 366, 367, 369, 370, 372, 373, 378, 381, 384, 387, 390, 391, 394, 397, 398, 400, 404, 406, 410, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 668, 669, 674, 675, 676, 677, 678, 684, 685, 689, 707, 708, 754, 755, 770, 771, 772, 775, 776, 783, 785, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 891, 892, 893, 896, 900, 901, 902, 904, 917, 919, 924, 938, 942, 943, 948, 950, 954, 955, 961, 962, 964, 970, 975, 984, 985, 987, 989, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 64, 69, 70, 121, 123, 124, 129, 150, 151, 152, 162, 166, 198, 214, 234, 238, 241, 254, 258, 260, 264, 267, 276, 283, 289, 309, 310, 314, 347, 360, 361, 366, 367, 376, 378, 391, 394, 405, 408, 421, 422, 425, 426, 427, 428, 429, 431, 442, 444, 445, 447, 450, 452, 465, 466, 467, 468, 473, 474, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 491, 499, 519, 534, 535, 536, 537, 540, 541, 542, 543, 558, 559, 562, 563, 565, 566, 568, 570, 571, 579, 583, 604, 605, 606, 607, 609, 617, 618, 621, 622, 623, 629, 633, 634, 637, 638, 639, 640, 641, 642, 648, 650, 652, 674, 690, 691, 713, 716, 761, 794, 797, 809, 813, 814, 816, 824, 838, 844, 846, 847, 853, 866, 874, 875, 876, 877, 878, 880, 881, 882, 883, 889, 890, 892, 893, 921, 929, 930, 931, 932, 935, 941, 944, 964, 967, 969, 980, 997, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "int64": [4, 13, 54, 70, 166, 347, 378, 398, 408, 421, 426, 428, 565, 617, 690, 691, 809, 1004, 1007, 1009], "cannot": [4, 40, 55, 74, 81, 95, 100, 117, 166, 167, 196, 214, 298, 325, 355, 365, 369, 371, 378, 379, 390, 391, 392, 394, 395, 397, 398, 400, 443, 498, 515, 516, 517, 520, 524, 587, 590, 591, 592, 594, 596, 597, 599, 600, 602, 628, 632, 659, 669, 687, 693, 753, 775, 776, 820, 821, 823, 824, 825, 833, 834, 843, 844, 854, 890, 892, 893, 943, 944, 948, 950, 951, 955, 960, 964, 969, 970, 975, 978, 984, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 55, 57, 63, 69, 70, 74, 84, 85, 89, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 129, 130, 131, 135, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 172, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 196, 197, 198, 200, 203, 204, 205, 208, 210, 211, 214, 225, 228, 230, 233, 234, 243, 245, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 276, 279, 282, 283, 284, 285, 287, 289, 292, 293, 294, 298, 300, 302, 303, 306, 309, 312, 313, 314, 317, 318, 319, 321, 324, 332, 333, 340, 342, 345, 346, 348, 349, 353, 355, 358, 363, 367, 370, 376, 377, 378, 384, 386, 388, 390, 391, 392, 393, 395, 397, 398, 399, 400, 402, 416, 419, 420, 422, 423, 425, 427, 429, 430, 431, 432, 437, 443, 447, 448, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 466, 470, 474, 475, 477, 481, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 604, 605, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 664, 665, 666, 668, 669, 673, 679, 716, 763, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 838, 839, 842, 843, 846, 847, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 928, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 964, 968, 969, 970, 974, 975, 976, 978, 981, 984, 985, 991, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 55, 56, 66, 67, 69, 74, 80, 81, 84, 93, 100, 105, 107, 109, 112, 113, 114, 115, 117, 118, 121, 123, 124, 126, 127, 128, 129, 135, 136, 137, 138, 143, 146, 149, 152, 153, 154, 155, 157, 158, 161, 162, 167, 168, 171, 173, 182, 184, 185, 188, 204, 205, 210, 214, 220, 221, 223, 224, 225, 230, 232, 237, 238, 249, 253, 255, 256, 259, 261, 262, 264, 267, 270, 272, 276, 280, 281, 282, 283, 284, 289, 291, 294, 295, 296, 298, 299, 303, 305, 311, 312, 316, 318, 319, 324, 330, 331, 333, 338, 339, 340, 343, 344, 345, 346, 349, 354, 356, 358, 359, 360, 361, 363, 365, 368, 371, 372, 373, 374, 377, 378, 380, 384, 385, 386, 387, 388, 390, 391, 392, 394, 396, 398, 399, 400, 404, 405, 407, 408, 409, 411, 412, 416, 417, 418, 421, 422, 425, 427, 428, 435, 437, 442, 443, 445, 446, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 487, 489, 491, 492, 493, 494, 495, 497, 499, 501, 502, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 548, 558, 559, 561, 562, 563, 564, 565, 567, 568, 570, 571, 576, 579, 580, 587, 588, 591, 596, 599, 603, 605, 607, 611, 617, 618, 620, 621, 622, 623, 625, 629, 635, 645, 646, 653, 654, 655, 657, 665, 666, 667, 668, 669, 673, 677, 684, 689, 693, 694, 697, 698, 699, 701, 710, 716, 718, 723, 731, 753, 754, 755, 763, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 815, 817, 822, 829, 830, 831, 832, 834, 840, 843, 845, 846, 848, 851, 852, 853, 856, 864, 865, 867, 868, 869, 870, 872, 873, 874, 877, 880, 881, 882, 883, 895, 903, 904, 943, 944, 946, 947, 948, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 968, 969, 970, 971, 973, 977, 982, 984, 985, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "simplifi": [4, 70, 184, 325, 365, 370, 393, 492, 539, 832, 833, 954, 956, 964], "represent": [4, 12, 17, 20, 26, 53, 70, 95, 98, 109, 115, 116, 117, 127, 129, 132, 143, 154, 166, 168, 172, 177, 217, 218, 219, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 286, 295, 308, 310, 315, 339, 340, 347, 349, 358, 360, 367, 378, 384, 390, 391, 395, 396, 397, 441, 508, 512, 514, 517, 519, 525, 543, 565, 567, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 607, 620, 623, 629, 635, 636, 637, 639, 643, 645, 653, 654, 655, 744, 770, 771, 829, 842, 846, 847, 851, 853, 865, 872, 884, 886, 889, 905, 946, 951, 953, 955, 957, 958, 959, 964, 969, 975, 980, 981, 983, 987, 989, 996, 997, 1000, 1007, 1008, 1009, 1010, 1011], "collaps": [4, 298, 325, 376], "those": [4, 7, 12, 17, 19, 59, 70, 111, 122, 146, 158, 168, 169, 196, 198, 214, 222, 229, 233, 234, 247, 250, 256, 259, 262, 293, 298, 303, 322, 325, 338, 339, 340, 353, 360, 366, 367, 369, 370, 371, 372, 376, 378, 381, 387, 388, 390, 394, 395, 397, 398, 400, 426, 428, 439, 442, 446, 471, 472, 473, 480, 534, 535, 541, 542, 546, 547, 558, 669, 674, 688, 694, 711, 772, 775, 776, 783, 785, 792, 815, 816, 817, 819, 821, 822, 823, 824, 825, 874, 877, 880, 881, 882, 883, 943, 946, 950, 953, 954, 956, 957, 958, 961, 964, 970, 973, 974, 978, 980, 989, 996, 999, 1002, 1003, 1004, 1009, 1010, 1011], "replac": [4, 25, 79, 99, 149, 156, 161, 182, 197, 234, 259, 276, 300, 308, 327, 364, 366, 367, 369, 371, 374, 378, 384, 391, 394, 397, 398, 420, 424, 480, 492, 532, 533, 540, 559, 565, 566, 567, 568, 584, 585, 607, 611, 616, 618, 703, 760, 783, 785, 832, 833, 836, 855, 868, 875, 923, 925, 928, 943, 944, 950, 954, 964, 969, 970, 974, 975, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011], "to_replac": 4, "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 56, 59, 60, 61, 65, 70, 72, 74, 77, 79, 81, 95, 98, 106, 112, 114, 115, 116, 117, 119, 122, 123, 125, 126, 128, 129, 141, 142, 146, 149, 152, 153, 155, 157, 158, 163, 166, 167, 168, 169, 172, 175, 176, 178, 182, 184, 185, 186, 187, 189, 194, 196, 197, 198, 200, 202, 211, 214, 216, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 231, 234, 237, 238, 241, 247, 250, 254, 256, 257, 258, 259, 261, 262, 263, 265, 267, 268, 269, 271, 289, 292, 293, 295, 298, 299, 300, 301, 302, 307, 308, 310, 316, 325, 330, 333, 338, 339, 340, 343, 347, 349, 353, 354, 355, 356, 358, 359, 360, 361, 363, 367, 368, 370, 371, 372, 374, 376, 377, 378, 380, 381, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 400, 401, 402, 404, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 467, 468, 470, 473, 474, 475, 478, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 744, 746, 749, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 780, 782, 783, 785, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 893, 896, 897, 898, 899, 901, 909, 911, 916, 918, 919, 920, 922, 930, 931, 932, 943, 946, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 965, 967, 968, 969, 970, 978, 980, 985, 987, 988, 989, 990, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "inplac": [4, 214, 268, 432, 459, 460, 461, 462, 828, 836, 839, 842, 843, 845, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 863, 927, 930, 931, 932, 936, 937, 1005], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 85, 91, 100, 113, 115, 116, 119, 122, 143, 149, 155, 164, 165, 168, 170, 182, 187, 196, 197, 198, 204, 214, 229, 235, 242, 243, 246, 247, 263, 338, 339, 349, 353, 354, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 386, 388, 390, 391, 392, 394, 397, 398, 399, 411, 442, 443, 445, 446, 447, 459, 460, 461, 467, 500, 509, 513, 515, 518, 529, 531, 532, 533, 535, 537, 539, 540, 542, 544, 545, 547, 549, 562, 563, 565, 566, 568, 572, 574, 583, 588, 604, 609, 610, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 651, 652, 655, 656, 672, 680, 681, 692, 710, 763, 767, 799, 806, 807, 808, 809, 810, 811, 812, 816, 819, 824, 831, 834, 839, 846, 847, 850, 853, 862, 863, 870, 872, 873, 874, 875, 876, 877, 878, 881, 883, 919, 943, 950, 954, 956, 960, 964, 968, 969, 970, 977, 985, 989, 991, 996, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "balanc": [4, 6, 53, 65, 164, 201, 249, 259, 272, 298, 355, 376, 378, 394, 395, 397, 479, 492, 511, 517, 518, 524, 534, 538, 541, 617, 635, 636, 643, 645, 651, 652, 653, 679, 684, 704, 718, 757, 762, 772, 773, 789, 833, 872, 874, 877, 880, 882, 897, 898, 943, 969, 970, 985, 996, 998, 1001, 1002, 1005, 1006, 1010], "fall": [4, 122, 156, 255, 256, 366, 367, 389, 390, 398, 413, 425, 485, 486, 702, 703, 767, 850, 861, 953, 954, 964, 980, 988, 1005], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 63, 64, 71, 77, 88, 105, 117, 118, 119, 123, 138, 154, 166, 169, 172, 185, 189, 192, 196, 197, 202, 210, 214, 219, 229, 243, 251, 254, 256, 263, 274, 295, 298, 303, 308, 309, 333, 338, 340, 349, 353, 354, 361, 366, 367, 369, 370, 371, 374, 378, 381, 384, 390, 391, 392, 394, 395, 396, 397, 398, 400, 402, 419, 422, 425, 427, 428, 433, 434, 435, 437, 442, 465, 466, 467, 472, 474, 492, 511, 512, 516, 517, 518, 520, 524, 528, 530, 532, 533, 534, 536, 540, 541, 544, 558, 565, 568, 570, 571, 574, 583, 584, 585, 587, 599, 604, 608, 617, 635, 636, 642, 653, 662, 663, 665, 666, 670, 674, 676, 678, 680, 688, 689, 694, 701, 704, 705, 713, 715, 716, 729, 731, 753, 758, 759, 762, 763, 764, 767, 772, 773, 775, 776, 777, 778, 782, 785, 789, 790, 794, 801, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 823, 830, 833, 844, 846, 847, 848, 852, 853, 856, 857, 858, 860, 861, 862, 863, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 892, 893, 898, 909, 920, 923, 944, 950, 951, 954, 955, 957, 958, 964, 967, 968, 969, 970, 975, 984, 986, 987, 989, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "sensit": [4, 44, 79, 80, 113, 122, 167, 198, 199, 225, 298, 325, 354, 355, 379, 392, 397, 430, 440, 669, 688, 689, 763, 949, 950, 951, 953, 954, 958, 960, 968, 969, 980, 988, 1000], "splitter": [4, 258, 378, 394, 416, 450, 544, 545, 571, 579, 624, 628, 630, 632, 638, 640, 642, 650, 652, 772, 774, 775, 776, 777, 785, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 800, 804, 807, 880, 881, 882, 883, 975, 1002, 1003, 1004, 1005], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 67, 70, 71, 98, 109, 116, 117, 119, 120, 122, 129, 142, 152, 164, 169, 172, 176, 185, 198, 203, 214, 224, 239, 249, 250, 253, 254, 256, 258, 259, 261, 262, 263, 265, 267, 268, 270, 272, 274, 285, 289, 308, 325, 338, 349, 356, 359, 361, 367, 371, 378, 380, 389, 391, 398, 399, 400, 425, 427, 465, 468, 469, 470, 473, 486, 497, 513, 528, 538, 539, 540, 544, 545, 568, 571, 579, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 608, 609, 610, 611, 624, 630, 636, 650, 652, 674, 676, 678, 679, 680, 681, 687, 689, 690, 691, 693, 694, 701, 702, 711, 712, 717, 729, 730, 731, 732, 761, 768, 770, 771, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 804, 810, 813, 814, 819, 831, 833, 840, 857, 858, 860, 861, 862, 863, 874, 877, 880, 895, 903, 928, 946, 950, 952, 956, 957, 960, 961, 962, 965, 968, 970, 974, 978, 980, 981, 984, 985, 987, 990, 991, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "forecast": [4, 256, 388, 954, 974], "realist": [4, 8, 265, 266, 322], "gap": [4, 338, 361, 394, 449, 450, 456, 565, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 792, 880, 881, 882, 883, 950, 951, 1004, 1008, 1010], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 59, 60, 65, 84, 98, 100, 104, 109, 113, 119, 122, 125, 141, 149, 154, 155, 157, 164, 166, 167, 168, 175, 182, 187, 191, 192, 196, 197, 198, 200, 201, 204, 214, 217, 225, 230, 234, 249, 255, 256, 257, 259, 261, 262, 263, 265, 272, 278, 282, 283, 285, 286, 298, 309, 316, 325, 333, 338, 339, 340, 347, 349, 353, 354, 361, 366, 367, 374, 376, 377, 378, 384, 387, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 410, 419, 420, 423, 424, 428, 430, 431, 432, 434, 435, 436, 441, 447, 448, 449, 450, 451, 452, 453, 454, 468, 470, 471, 472, 473, 474, 475, 479, 491, 492, 498, 501, 504, 511, 513, 514, 515, 516, 517, 518, 523, 524, 526, 530, 531, 536, 537, 539, 540, 561, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 597, 604, 609, 610, 611, 616, 619, 622, 623, 624, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 653, 655, 656, 658, 661, 665, 667, 669, 671, 672, 673, 676, 679, 680, 681, 683, 685, 686, 690, 691, 692, 693, 695, 699, 700, 701, 704, 705, 706, 709, 711, 712, 718, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 765, 766, 768, 769, 770, 771, 772, 774, 775, 780, 788, 789, 791, 798, 799, 801, 803, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 830, 831, 837, 840, 841, 843, 844, 846, 847, 850, 851, 852, 858, 861, 862, 866, 877, 880, 881, 882, 883, 885, 906, 923, 943, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 971, 975, 987, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "side": [4, 16, 27, 58, 122, 189, 214, 219, 228, 298, 338, 349, 361, 376, 388, 391, 394, 395, 398, 492, 950, 951, 954, 956, 969, 1005], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 69, 100, 109, 115, 116, 118, 121, 122, 123, 124, 125, 135, 142, 166, 180, 191, 192, 196, 199, 204, 214, 226, 242, 243, 250, 251, 254, 256, 258, 261, 263, 266, 285, 292, 294, 299, 300, 303, 310, 316, 325, 338, 340, 347, 361, 372, 377, 378, 381, 388, 390, 395, 397, 398, 416, 421, 422, 450, 451, 457, 474, 508, 514, 516, 519, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 565, 566, 568, 571, 579, 624, 628, 630, 632, 638, 640, 642, 650, 652, 672, 680, 681, 693, 706, 712, 732, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 813, 814, 830, 831, 857, 858, 860, 861, 862, 863, 880, 881, 882, 883, 925, 943, 950, 951, 957, 960, 961, 962, 968, 970, 975, 980, 984, 985, 987, 988, 989, 991, 996, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "limit": [4, 8, 17, 37, 42, 65, 81, 116, 117, 123, 129, 161, 166, 167, 168, 175, 196, 197, 213, 229, 263, 300, 309, 340, 349, 354, 367, 370, 376, 378, 379, 390, 393, 395, 399, 441, 446, 536, 537, 538, 539, 609, 627, 635, 636, 656, 659, 660, 665, 753, 792, 821, 823, 824, 825, 846, 870, 874, 875, 876, 877, 878, 922, 943, 950, 951, 953, 954, 961, 962, 964, 975, 980, 991, 1004, 1006, 1009, 1010], "cv": [4, 12, 24, 25, 26, 54, 70, 71, 72, 73, 77, 103, 119, 121, 135, 136, 145, 161, 162, 166, 185, 195, 198, 231, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 270, 325, 333, 377, 378, 388, 394, 397, 416, 450, 544, 545, 571, 579, 624, 628, 630, 632, 636, 638, 640, 642, 650, 652, 772, 774, 775, 776, 777, 785, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 800, 804, 807, 880, 881, 943, 946, 949, 950, 954, 975, 984, 985, 989, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1010], "fold": [4, 66, 73, 77, 118, 121, 135, 166, 185, 243, 251, 254, 256, 257, 258, 259, 266, 316, 333, 349, 361, 368, 369, 377, 378, 390, 399, 416, 450, 470, 513, 544, 545, 571, 579, 624, 628, 630, 632, 636, 638, 640, 642, 650, 652, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 804, 807, 874, 877, 943, 950, 954, 969, 984, 996, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008], "1000": [4, 7, 8, 14, 26, 31, 37, 43, 50, 71, 84, 94, 105, 113, 115, 116, 121, 122, 131, 137, 141, 145, 155, 172, 182, 188, 199, 219, 228, 229, 231, 241, 245, 254, 256, 262, 265, 267, 281, 283, 299, 302, 307, 308, 310, 326, 327, 334, 338, 339, 370, 371, 377, 388, 398, 416, 451, 457, 508, 509, 514, 519, 520, 522, 523, 525, 530, 541, 609, 623, 624, 628, 629, 630, 632, 637, 638, 639, 640, 643, 644, 645, 649, 653, 654, 655, 664, 669, 675, 739, 850, 861, 867, 872, 873, 943, 947, 969, 984, 987, 1003, 1005], "datapoint": [4, 42, 52, 55, 153, 156, 179, 230, 231, 251, 256, 274, 331, 400, 479, 534, 535, 536, 537, 541, 542, 543, 588, 880, 881, 882, 883, 947], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 113, 119, 122, 146, 161, 166, 172, 175, 176, 196, 198, 214, 225, 230, 231, 256, 259, 262, 263, 265, 276, 299, 300, 315, 325, 333, 339, 349, 353, 354, 355, 361, 364, 365, 366, 367, 369, 370, 372, 373, 374, 377, 378, 381, 384, 388, 390, 392, 394, 395, 397, 398, 399, 400, 401, 402, 404, 419, 421, 422, 423, 424, 425, 427, 428, 430, 432, 435, 436, 437, 440, 441, 442, 445, 452, 459, 460, 461, 462, 464, 473, 480, 485, 486, 493, 498, 500, 501, 504, 509, 510, 513, 526, 534, 535, 538, 539, 540, 541, 542, 544, 558, 559, 562, 563, 565, 566, 568, 570, 571, 574, 579, 584, 585, 597, 604, 605, 606, 608, 609, 610, 612, 615, 616, 617, 620, 622, 623, 624, 625, 626, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 661, 664, 666, 667, 668, 669, 670, 671, 672, 673, 685, 702, 703, 746, 749, 753, 754, 755, 756, 757, 760, 763, 764, 774, 779, 781, 788, 789, 790, 791, 795, 799, 801, 802, 813, 814, 815, 816, 817, 818, 819, 821, 823, 830, 831, 836, 837, 840, 841, 842, 844, 845, 846, 847, 855, 859, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 892, 896, 898, 901, 909, 916, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 943, 944, 948, 949, 950, 951, 954, 955, 957, 959, 960, 961, 964, 967, 968, 969, 970, 975, 977, 978, 985, 989, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "enough": [4, 37, 44, 61, 118, 149, 161, 167, 168, 185, 196, 230, 232, 258, 302, 338, 340, 349, 364, 366, 369, 371, 379, 388, 389, 390, 392, 394, 397, 544, 545, 566, 772, 775, 776, 785, 797, 909, 943, 948, 951, 953, 960, 964, 969, 974, 978, 1002], "quantifi": [4, 37, 49, 77, 154, 214, 263, 367, 378, 385, 389, 550, 836, 949, 962, 964, 991], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 90, 95, 97, 104, 105, 116, 117, 125, 166, 167, 175, 183, 188, 198, 200, 201, 205, 219, 221, 230, 234, 244, 250, 253, 256, 259, 263, 281, 300, 338, 340, 347, 355, 358, 361, 363, 367, 376, 377, 378, 379, 384, 388, 390, 394, 395, 396, 397, 398, 399, 417, 421, 430, 441, 448, 449, 450, 451, 452, 453, 454, 465, 467, 468, 469, 471, 473, 475, 477, 478, 479, 481, 482, 487, 511, 513, 515, 517, 518, 524, 532, 540, 558, 565, 568, 606, 609, 611, 617, 653, 655, 674, 718, 764, 772, 774, 784, 785, 788, 791, 796, 798, 799, 802, 803, 809, 815, 816, 817, 819, 820, 821, 823, 824, 825, 830, 831, 840, 846, 869, 892, 893, 913, 944, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 965, 967, 968, 970, 980, 985, 986, 988, 1002, 1004, 1007, 1008, 1011], "bit": [4, 48, 53, 77, 98, 194, 198, 298, 325, 339, 349, 353, 361, 364, 397, 398, 559, 566, 635, 803, 892, 893, 951, 955, 973, 982, 989, 996, 999, 1002, 1004, 1005, 1008, 1009, 1010], "less": [4, 5, 8, 52, 53, 59, 91, 95, 98, 106, 116, 122, 123, 149, 156, 166, 167, 178, 196, 198, 200, 231, 242, 244, 256, 257, 265, 267, 270, 299, 302, 303, 308, 310, 333, 338, 339, 349, 353, 355, 361, 366, 367, 376, 378, 390, 394, 395, 397, 398, 402, 418, 420, 422, 424, 426, 428, 430, 435, 440, 441, 459, 460, 461, 473, 492, 508, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 567, 573, 596, 604, 611, 624, 638, 653, 655, 669, 697, 698, 699, 700, 711, 727, 739, 754, 755, 760, 768, 770, 771, 774, 775, 776, 781, 797, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 836, 848, 850, 851, 853, 855, 861, 862, 872, 873, 880, 881, 882, 883, 898, 912, 943, 944, 946, 947, 948, 951, 953, 954, 957, 959, 961, 964, 968, 969, 970, 974, 987, 989, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1010, 1011], "half": [4, 24, 98, 230, 233, 254, 256, 268, 361, 362, 395, 441, 499, 539, 570, 574, 579, 745, 832, 840, 954, 957, 970], "contigu": [4, 21, 367, 376, 387, 394, 398, 422, 425, 427, 437, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 756, 790, 813, 814, 872, 874, 875, 876, 877, 878, 969, 999, 1006, 1010], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 70, 71, 72, 73, 74, 77, 85, 100, 103, 109, 115, 116, 119, 120, 121, 122, 123, 124, 128, 129, 135, 136, 142, 143, 145, 149, 161, 162, 164, 166, 167, 168, 169, 172, 191, 196, 198, 203, 204, 211, 212, 214, 226, 231, 236, 237, 238, 243, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 278, 280, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 316, 317, 325, 328, 333, 343, 347, 349, 356, 366, 367, 370, 377, 378, 391, 394, 397, 416, 417, 535, 537, 544, 545, 555, 636, 674, 675, 677, 678, 717, 801, 804, 822, 830, 831, 833, 880, 881, 882, 883, 943, 944, 949, 954, 956, 957, 962, 964, 969, 975, 984, 985, 989, 993, 1002, 1003], "timeseriessplit": [4, 251, 394, 1002, 1003, 1008], "ts_cv": 4, "n_split": [4, 110, 121, 161, 162, 166, 243, 251, 256, 258, 261, 266, 316, 325, 333, 349, 394, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 796, 984, 1002, 1004], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 135, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 316, 317, 318, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 361, 363, 364, 366, 367, 370, 371, 376, 377, 378, 381, 382, 383, 388, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 416, 417, 418, 419, 421, 423, 426, 427, 428, 429, 430, 431, 432, 436, 440, 442, 444, 447, 450, 459, 460, 461, 462, 467, 470, 471, 481, 493, 494, 498, 500, 501, 505, 508, 510, 511, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 529, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 559, 569, 570, 571, 574, 579, 587, 590, 591, 592, 593, 596, 597, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 615, 618, 620, 623, 624, 628, 629, 630, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 647, 649, 653, 654, 655, 657, 658, 661, 665, 666, 668, 669, 672, 673, 676, 679, 681, 685, 688, 689, 697, 698, 699, 701, 702, 703, 705, 710, 713, 714, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 744, 756, 757, 759, 760, 762, 763, 764, 767, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 830, 831, 832, 833, 838, 839, 840, 842, 843, 845, 846, 848, 849, 850, 852, 853, 860, 861, 866, 872, 873, 874, 875, 876, 877, 878, 880, 882, 898, 907, 908, 909, 911, 913, 914, 919, 920, 922, 925, 943, 944, 946, 949, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 966, 968, 969, 972, 976, 980, 984, 985, 987, 988, 989, 991, 992, 994, 997, 998, 999, 1001, 1003, 1004, 1006, 1010, 1011], "48": [4, 15, 45, 102, 107, 154, 238, 303, 363, 371, 390, 487, 574, 721, 797, 808, 943, 956, 964, 992], "max_train_s": [4, 394, 792, 1003], "10000": [4, 11, 30, 62, 71, 72, 74, 123, 135, 182, 189, 196, 204, 212, 229, 231, 269, 276, 308, 322, 349, 355, 397, 398, 538, 539, 621, 656, 850, 878, 966, 985, 989], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 70, 109, 115, 120, 121, 123, 124, 128, 167, 172, 191, 196, 203, 204, 211, 212, 253, 254, 258, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 308, 325, 333, 349, 370, 394, 675, 774, 788, 791, 792, 799, 801, 822, 944, 956, 957, 984, 985, 996, 997, 1002, 1003, 1008], "manual": [4, 46, 166, 169, 180, 197, 207, 218, 219, 220, 276, 316, 323, 338, 340, 353, 354, 361, 366, 369, 370, 377, 381, 390, 394, 395, 396, 416, 427, 544, 823, 846, 852, 943, 948, 950, 953, 954, 957, 964, 975, 980, 981, 989, 1004, 1006], "inspect": [4, 31, 55, 60, 112, 116, 123, 126, 130, 143, 149, 154, 155, 166, 167, 168, 169, 179, 188, 205, 235, 256, 259, 268, 279, 284, 287, 306, 307, 308, 309, 321, 322, 323, 326, 327, 338, 344, 356, 367, 378, 390, 391, 397, 398, 442, 530, 531, 534, 535, 536, 537, 541, 542, 543, 802, 833, 834, 880, 881, 882, 883, 942, 955, 958, 961, 962, 969, 974, 989, 991, 999], "variou": [4, 12, 36, 37, 57, 59, 60, 67, 80, 84, 94, 98, 164, 166, 174, 206, 215, 216, 217, 218, 223, 229, 258, 302, 307, 338, 340, 347, 349, 353, 360, 361, 362, 363, 366, 367, 370, 377, 379, 388, 389, 390, 392, 416, 420, 450, 479, 491, 492, 502, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 571, 579, 624, 628, 630, 632, 635, 638, 640, 642, 643, 645, 650, 652, 653, 668, 669, 676, 772, 775, 776, 785, 793, 794, 795, 796, 797, 798, 799, 800, 833, 872, 873, 943, 944, 951, 954, 957, 961, 964, 968, 970, 974, 978, 988, 989, 996, 999, 1000], "check": [4, 5, 8, 17, 46, 53, 55, 99, 129, 149, 167, 168, 182, 184, 185, 196, 218, 265, 309, 315, 347, 353, 354, 364, 365, 366, 367, 368, 369, 371, 372, 374, 376, 378, 381, 384, 391, 422, 429, 430, 443, 485, 486, 508, 513, 514, 525, 538, 539, 623, 624, 629, 630, 637, 638, 639, 640, 653, 655, 658, 664, 666, 669, 670, 829, 837, 877, 880, 881, 882, 883, 892, 893, 894, 903, 904, 915, 916, 918, 938, 939, 940, 942, 950, 951, 954, 969, 975, 978, 996, 997, 999, 1003, 1007, 1008, 1009, 1010, 1011], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 61, 69, 105, 106, 114, 121, 136, 167, 169, 235, 251, 254, 256, 257, 259, 260, 265, 269, 285, 300, 306, 307, 308, 309, 310, 317, 328, 339, 340, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 388, 389, 390, 391, 394, 396, 397, 398, 411, 413, 416, 428, 434, 435, 442, 443, 444, 450, 456, 459, 460, 461, 465, 466, 467, 468, 469, 473, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 500, 509, 527, 528, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 565, 566, 568, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 609, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 658, 661, 669, 673, 674, 676, 686, 688, 689, 692, 694, 700, 708, 721, 729, 753, 756, 763, 767, 770, 771, 772, 775, 776, 782, 783, 785, 794, 795, 796, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 837, 841, 844, 846, 847, 852, 869, 873, 875, 878, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 894, 898, 900, 901, 902, 904, 912, 913, 915, 917, 925, 928, 938, 943, 944, 950, 954, 956, 957, 958, 962, 965, 970, 972, 974, 975, 978, 980, 984, 986, 989, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "train_0": 4, "test_0": 4, "iloc": [4, 129, 166, 214, 256], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 79, 84, 90, 101, 103, 105, 110, 114, 122, 142, 143, 145, 150, 161, 166, 167, 176, 186, 211, 225, 243, 256, 289, 292, 295, 298, 300, 313, 314, 338, 346, 349, 353, 371, 394, 397, 398, 423, 455, 478, 481, 547, 574, 655, 709, 769, 788, 799, 825, 843, 848, 850, 851, 861, 862, 864, 865, 949, 950, 954, 955, 957, 964, 985, 996, 998, 1004, 1007], "760": 4, "68": [4, 8, 187, 267, 295, 313, 390, 512, 518, 567, 996], "27": [4, 6, 8, 19, 31, 46, 47, 54, 166, 222, 313, 314, 334, 363, 390, 398, 400, 689, 763, 764, 873, 954, 988, 996, 998], "9993": [4, 630, 632, 1004], "12380": 4, "32": [4, 5, 51, 98, 107, 168, 222, 233, 310, 314, 360, 364, 370, 378, 387, 397, 398, 424, 541, 542, 559, 566, 611, 653, 852, 892, 893, 921, 962, 988, 996, 999, 1002, 1004, 1005, 1008, 1009, 1010], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 73, 150, 168, 172, 229, 254, 256, 276, 290, 309, 338, 339, 349, 361, 371, 397, 398, 467, 538, 539, 621, 654, 968, 989, 1007], "77": [4, 6, 44, 172, 265, 295, 314, 360, 363, 511], "0028": 4, "12381": 4, "72": [4, 6, 7, 152, 370, 797], "9995": 4, "12382": 4, "240": [4, 44, 962, 996], "82": [4, 8, 30, 53, 57, 91, 143, 167, 199, 287, 295, 313, 763, 772, 785, 954, 957, 985, 996], "9980": [4, 1004], "12383": 4, "13374": 4, "34": [4, 91, 122, 149, 281, 295, 313, 314, 363, 394, 400, 497, 547, 574, 626, 644, 692, 739, 985, 996], "44": [4, 84, 98, 154, 166, 167, 280, 400, 756, 873, 876, 954, 961, 996], "40": [4, 14, 54, 65, 77, 89, 95, 101, 131, 149, 187, 188, 190, 213, 219, 221, 232, 245, 257, 282, 288, 294, 300, 313, 314, 323, 324, 326, 328, 330, 332, 347, 354, 361, 394, 472, 494, 495, 813, 814, 818, 830, 831, 943, 955, 964, 996, 997], "150": [4, 6, 89, 91, 114, 122, 135, 218, 222, 225, 269, 363, 394, 399, 481, 579, 794, 795, 796, 954, 984, 985, 986], "53": [4, 6, 53, 74, 390, 397, 512, 518, 765, 766], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 43, 44, 53, 54, 60, 61, 65, 72, 73, 79, 81, 91, 105, 110, 114, 118, 119, 122, 141, 143, 149, 153, 161, 166, 167, 185, 193, 198, 210, 214, 219, 222, 225, 243, 244, 251, 258, 259, 261, 264, 267, 268, 270, 276, 279, 280, 284, 287, 292, 293, 298, 300, 302, 303, 314, 317, 323, 325, 328, 332, 335, 344, 360, 361, 366, 377, 394, 397, 398, 419, 432, 467, 474, 508, 514, 532, 533, 575, 621, 629, 638, 640, 645, 653, 655, 669, 716, 789, 802, 825, 943, 949, 950, 951, 954, 957, 958, 964, 969, 972, 980, 985, 992, 994, 998, 1008, 1010, 1011], "0013": 4, "13375": 4, "39": [4, 8, 204, 215, 234, 238, 303, 361, 363, 364, 369, 390, 398, 472, 881], "49": [4, 91, 360, 361, 363, 370, 390, 428, 435, 689, 701, 731, 739, 770, 772, 949, 954, 964, 999], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 155, 166, 214, 257, 272, 308, 311, 328, 363, 371, 397, 398, 532, 533, 547, 710, 954, 989, 996], "08": [4, 44, 50, 98, 133, 147, 166, 215, 272, 295, 296, 341, 363, 508, 520, 522, 540, 618, 635, 772, 830, 831, 852, 960], "910": 4, "42": [4, 6, 24, 25, 26, 27, 31, 46, 55, 77, 91, 97, 103, 116, 117, 119, 122, 123, 125, 129, 142, 143, 162, 166, 168, 169, 172, 175, 180, 185, 188, 190, 191, 198, 202, 203, 204, 210, 211, 213, 218, 225, 231, 234, 237, 255, 257, 260, 276, 282, 283, 284, 292, 299, 300, 301, 303, 306, 308, 310, 316, 323, 325, 338, 339, 349, 354, 367, 370, 371, 378, 390, 394, 397, 398, 401, 416, 423, 465, 469, 508, 514, 521, 534, 535, 542, 543, 544, 545, 547, 654, 770, 774, 797, 799, 813, 814, 818, 822, 825, 864, 865, 867, 868, 869, 882, 883, 957, 964, 985, 989, 992, 993, 996], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 70, 91, 98, 112, 131, 166, 172, 175, 184, 222, 225, 313, 314, 521, 625, 626, 633, 678, 682, 683, 702, 716, 731, 757, 764, 806, 943, 950, 954, 960, 964, 985, 989, 996, 998], "26": [4, 8, 46, 54, 79, 97, 129, 133, 154, 166, 233, 269, 303, 314, 371, 547, 625, 704, 758, 849, 860, 909, 954, 964, 996, 999, 1000, 1008], "47": [4, 67, 84, 192, 361, 470, 471, 512, 518, 949], "16": [4, 5, 19, 27, 50, 51, 54, 65, 73, 79, 95, 98, 141, 158, 172, 173, 189, 195, 196, 197, 214, 217, 218, 230, 233, 259, 260, 276, 280, 295, 298, 302, 303, 306, 339, 345, 361, 363, 364, 371, 377, 381, 382, 383, 394, 395, 398, 421, 456, 474, 479, 511, 512, 547, 566, 572, 573, 584, 585, 616, 627, 628, 631, 632, 633, 634, 659, 660, 784, 789, 799, 848, 873, 881, 943, 950, 954, 964, 969, 972, 980, 989, 992, 994, 996, 997, 1001, 1002, 1004, 1005], "9979": 4, "2331": 4, "31": [4, 69, 78, 214, 281, 309, 313, 314, 387, 398, 477, 538, 539, 574, 626, 648, 656, 921, 955, 996], "060": [4, 179, 215, 726], "0032": 4, "2332": 4, "2333": 4, "78": [4, 6, 53, 172, 214, 295, 300, 314, 470, 471, 630, 632, 641, 642, 772, 797, 954, 975, 985], "275": [4, 314, 999], "2334": 4, "96": [4, 32, 48, 61, 156, 225, 254, 295, 300, 313, 314, 363, 394, 943, 949, 954, 964, 996], "515": [4, 248], "64": [4, 32, 48, 53, 57, 88, 95, 154, 166, 218, 229, 230, 233, 254, 265, 280, 285, 344, 353, 354, 363, 364, 371, 395, 472, 479, 576, 577, 623, 635, 665, 666, 667, 668, 873, 957, 986, 992, 996, 998, 1004, 1005, 1008, 1009, 1010], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1005], "12329": 4, "46": [4, 53, 188, 196, 349, 371, 570, 571, 692, 876, 881, 949, 964, 992], "12330": [4, 1004], "52": [4, 154, 196, 610, 770, 949, 996], "last": [4, 44, 56, 57, 88, 120, 122, 175, 196, 197, 204, 209, 225, 247, 259, 267, 268, 308, 310, 316, 343, 353, 361, 364, 367, 369, 370, 373, 378, 381, 390, 391, 398, 402, 417, 421, 425, 437, 442, 446, 492, 510, 538, 539, 560, 561, 564, 570, 571, 574, 587, 659, 660, 662, 663, 674, 675, 677, 678, 683, 757, 770, 771, 775, 776, 790, 813, 814, 818, 833, 838, 846, 852, 887, 912, 929, 943, 949, 950, 951, 953, 954, 955, 958, 968, 975, 980, 987, 996, 1003, 1004, 1005, 1010], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 97, 118, 195, 232, 269, 295, 300, 313, 314, 397, 640, 763, 949, 954, 955, 964, 989, 996], "665": 4, "16380": 4, "71": [4, 214, 363, 487, 705, 954, 987, 998], "16381": 4, "76": [4, 196, 314, 338, 349, 363, 371, 756, 987], "16382": 4, "16383": 4, "18": [4, 5, 7, 8, 15, 19, 22, 40, 44, 49, 53, 59, 61, 73, 91, 103, 110, 122, 158, 166, 207, 219, 222, 225, 230, 256, 302, 304, 314, 338, 339, 340, 366, 371, 391, 394, 395, 398, 425, 437, 469, 477, 478, 479, 481, 482, 487, 512, 513, 515, 517, 518, 534, 535, 536, 537, 540, 541, 542, 543, 546, 548, 549, 550, 551, 552, 553, 554, 566, 571, 576, 577, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 623, 626, 635, 636, 648, 690, 694, 706, 709, 710, 716, 718, 770, 771, 792, 806, 829, 830, 831, 837, 843, 851, 852, 862, 872, 873, 880, 881, 882, 883, 884, 908, 909, 943, 952, 954, 964, 972, 992, 994, 996, 997, 1000, 1001, 1003, 1004, 1006, 1007], "940": 4, "6331": 4, "28": [4, 65, 122, 159, 166, 212, 265, 294, 303, 313, 314, 363, 371, 390, 394, 400, 428, 435, 964, 985, 996, 999, 1002], "790": [4, 69, 70], "89": [4, 6, 32, 154, 187, 295, 313, 314, 954, 964, 989, 996, 999, 1007], "6332": 4, "6333": 4, "88": [4, 32, 187, 255, 295, 313, 314, 343, 361, 363, 392, 451, 833, 985, 996], "820": [4, 138, 139, 813, 814], "79": [4, 30, 32, 79, 80, 98, 129, 172, 295, 314, 363, 370, 392, 452, 574, 811, 996, 998], "6334": 4, "6335": 4, "70": [4, 6, 11, 65, 72, 98, 241, 256, 314, 361, 363, 394, 470, 471, 689, 701, 731, 772, 785, 943, 964, 985], "33": [4, 79, 172, 196, 215, 257, 303, 314, 361, 363, 369, 370, 371, 398, 509, 625, 688, 689, 704, 705, 713, 718, 758, 759, 762, 797, 799, 801, 883, 950, 954, 964, 985, 996, 1004], "335": 4, "74": [4, 112, 212, 313, 314, 363, 567, 772, 785, 852], "16326": [4, 1008], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 154, 197, 361, 369, 373], "tree": [4, 7, 26, 27, 31, 41, 44, 61, 108, 109, 112, 113, 114, 119, 120, 121, 122, 123, 125, 129, 130, 133, 157, 161, 167, 169, 218, 233, 235, 260, 276, 281, 289, 298, 299, 308, 348, 349, 353, 356, 361, 363, 371, 377, 378, 380, 388, 390, 396, 401, 416, 420, 421, 422, 423, 424, 426, 428, 435, 441, 472, 477, 481, 491, 492, 496, 521, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 608, 609, 610, 611, 635, 665, 669, 679, 763, 797, 799, 808, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 834, 837, 846, 904, 944, 951, 954, 955, 960, 961, 974, 975, 976, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "often": [4, 19, 24, 25, 33, 69, 73, 127, 153, 161, 166, 167, 197, 214, 218, 243, 258, 261, 298, 325, 335, 338, 339, 340, 353, 354, 360, 361, 363, 366, 367, 370, 373, 376, 377, 378, 380, 384, 388, 390, 391, 392, 394, 395, 397, 398, 400, 402, 446, 498, 501, 510, 513, 609, 623, 624, 629, 630, 637, 638, 639, 640, 649, 651, 664, 703, 843, 851, 858, 870, 943, 944, 946, 949, 950, 951, 952, 953, 954, 956, 957, 959, 960, 961, 964, 967, 968, 970, 980, 982, 987, 988, 989, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "flexibl": [4, 25, 119, 161, 196, 299, 322, 340, 367, 372, 394, 400, 651, 872, 873, 943, 948, 950, 954, 958, 964, 975, 978, 1005, 1009], "effici": [4, 5, 12, 13, 42, 46, 53, 95, 127, 167, 172, 185, 189, 198, 204, 281, 338, 353, 358, 360, 366, 367, 368, 370, 371, 376, 378, 384, 387, 389, 390, 395, 396, 397, 400, 402, 421, 422, 425, 427, 428, 430, 432, 435, 437, 439, 440, 473, 510, 511, 512, 515, 517, 518, 521, 540, 543, 551, 565, 568, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 615, 617, 632, 635, 636, 641, 643, 645, 650, 652, 653, 654, 655, 656, 662, 663, 665, 676, 701, 731, 738, 754, 755, 770, 771, 772, 785, 802, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 838, 850, 861, 865, 872, 881, 883, 909, 922, 943, 946, 948, 950, 951, 953, 954, 955, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 974, 978, 980, 984, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "heteorogen": 4, "tabular": [4, 167, 367, 962], "mix": [4, 61, 68, 75, 96, 97, 164, 196, 298, 360, 367, 376, 378, 391, 395, 402, 442, 444, 445, 473, 510, 515, 517, 524, 607, 623, 624, 629, 635, 636, 637, 638, 639, 640, 645, 653, 655, 658, 772, 799, 833, 846, 847, 853, 920, 925, 928, 950, 959, 988, 1008, 1010], "long": [4, 11, 12, 44, 61, 110, 122, 154, 162, 166, 168, 196, 232, 259, 289, 298, 307, 338, 339, 349, 354, 366, 373, 376, 378, 379, 384, 389, 390, 400, 431, 475, 515, 653, 654, 655, 775, 776, 808, 809, 810, 811, 812, 830, 831, 841, 954, 960, 964, 965, 967, 968, 973, 977, 998, 1002, 1008, 1010], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 55, 57, 58, 59, 64, 79, 80, 81, 85, 89, 91, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 130, 131, 132, 143, 149, 154, 155, 156, 158, 161, 164, 166, 167, 172, 174, 182, 184, 185, 196, 198, 200, 204, 210, 212, 213, 214, 215, 217, 225, 229, 230, 232, 234, 241, 242, 244, 245, 246, 247, 249, 251, 256, 258, 259, 260, 262, 264, 268, 270, 272, 274, 276, 279, 280, 281, 282, 283, 285, 286, 287, 298, 300, 301, 302, 306, 308, 309, 313, 315, 316, 317, 318, 320, 321, 323, 325, 327, 333, 336, 338, 339, 344, 347, 353, 356, 359, 361, 362, 365, 366, 367, 368, 376, 377, 387, 388, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 407, 409, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 434, 435, 436, 439, 440, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 664, 665, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 738, 739, 743, 744, 745, 746, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 897, 898, 909, 913, 923, 925, 928, 929, 932, 935, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 974, 975, 977, 980, 986, 987, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "larg": [4, 12, 13, 21, 26, 37, 39, 47, 49, 50, 52, 53, 72, 74, 95, 99, 113, 115, 122, 127, 142, 154, 155, 168, 175, 176, 185, 187, 196, 198, 201, 202, 214, 230, 253, 259, 262, 265, 278, 285, 294, 298, 300, 309, 310, 325, 330, 333, 339, 340, 353, 361, 366, 371, 374, 376, 377, 378, 381, 384, 389, 392, 394, 395, 396, 397, 399, 400, 401, 421, 423, 425, 428, 429, 430, 431, 436, 440, 451, 453, 476, 491, 511, 513, 515, 517, 521, 524, 526, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 559, 565, 566, 568, 611, 618, 620, 627, 631, 634, 635, 636, 641, 648, 649, 651, 654, 656, 662, 664, 666, 668, 669, 670, 672, 721, 754, 755, 772, 779, 781, 785, 789, 798, 808, 809, 810, 811, 812, 813, 814, 819, 830, 831, 838, 842, 843, 851, 853, 864, 865, 872, 873, 877, 878, 880, 881, 882, 883, 908, 909, 943, 946, 948, 950, 951, 953, 956, 957, 958, 962, 967, 968, 969, 970, 974, 975, 978, 985, 987, 988, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "ordin": [4, 53, 70, 129, 301, 308, 360, 378, 397, 473, 544, 685, 838, 841, 846, 847, 950, 951, 964, 975, 1004, 1010], "encod": [4, 8, 11, 48, 70, 95, 115, 129, 166, 168, 195, 196, 265, 299, 300, 301, 308, 310, 325, 338, 340, 358, 360, 362, 367, 370, 376, 378, 391, 394, 395, 397, 398, 400, 464, 473, 480, 503, 508, 514, 516, 517, 519, 521, 522, 523, 525, 528, 538, 539, 543, 544, 546, 558, 565, 566, 568, 607, 625, 635, 636, 646, 657, 710, 774, 778, 780, 836, 838, 840, 841, 844, 846, 847, 856, 943, 944, 950, 951, 954, 956, 957, 959, 968, 974, 975, 991, 997, 998, 1004, 1008, 1010, 1011], "know": [4, 53, 65, 119, 143, 146, 149, 158, 214, 232, 256, 274, 310, 313, 333, 339, 353, 366, 376, 384, 390, 393, 394, 395, 398, 477, 481, 487, 623, 629, 635, 636, 701, 731, 772, 785, 857, 858, 860, 861, 862, 863, 880, 881, 882, 883, 943, 953, 954, 955, 957, 966, 1002, 1003, 1006, 1008], "treat": [4, 6, 70, 119, 129, 161, 166, 196, 265, 308, 316, 349, 366, 376, 378, 387, 397, 398, 421, 538, 539, 565, 566, 568, 584, 585, 609, 615, 622, 648, 651, 729, 763, 842, 843, 849, 850, 853, 857, 860, 861, 863, 944, 946, 950, 954, 955, 961, 964, 968, 970, 985, 1000, 1008], "dedic": [4, 254, 335, 364, 371, 376, 379, 381, 386, 390, 561, 649, 651, 664, 943, 974, 980, 1004], "rule": [4, 172, 344, 347, 349, 353, 363, 366, 367, 376, 378, 379, 385, 389, 390, 394, 395, 397, 399, 513, 526, 527, 528, 529, 530, 538, 539, 546, 547, 579, 611, 622, 635, 636, 643, 645, 653, 654, 655, 682, 683, 772, 775, 776, 785, 796, 798, 822, 872, 885, 943, 948, 956, 957, 968, 970, 975, 980, 987, 991, 998, 1001, 1008], "pass": [4, 7, 8, 20, 21, 38, 119, 143, 157, 167, 177, 197, 226, 228, 229, 235, 237, 246, 254, 257, 267, 306, 309, 330, 340, 349, 353, 354, 355, 361, 366, 367, 370, 371, 372, 373, 374, 376, 378, 390, 391, 394, 395, 397, 398, 400, 401, 402, 416, 417, 419, 422, 423, 425, 427, 428, 430, 432, 435, 437, 438, 440, 442, 443, 445, 447, 450, 452, 465, 468, 469, 472, 474, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 558, 559, 565, 566, 568, 570, 571, 574, 584, 585, 587, 588, 594, 597, 603, 608, 609, 611, 616, 617, 618, 619, 620, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 653, 654, 655, 656, 658, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 707, 708, 717, 738, 749, 753, 754, 755, 756, 763, 765, 766, 770, 771, 772, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 837, 838, 840, 844, 846, 847, 848, 850, 853, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 892, 893, 899, 903, 904, 908, 909, 911, 913, 915, 916, 922, 924, 925, 928, 943, 944, 950, 952, 954, 955, 956, 957, 958, 961, 964, 967, 968, 969, 975, 978, 980, 984, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "explicitli": [4, 46, 56, 95, 116, 149, 156, 161, 162, 197, 228, 307, 310, 340, 349, 360, 362, 366, 367, 369, 376, 378, 386, 394, 398, 400, 418, 526, 527, 555, 557, 574, 604, 625, 635, 636, 646, 657, 685, 702, 757, 763, 764, 775, 776, 804, 807, 813, 814, 839, 862, 863, 922, 943, 944, 946, 948, 950, 951, 954, 956, 957, 964, 978, 989, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010], "logic": [4, 367, 372, 386, 397, 970, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "integ": [4, 17, 48, 53, 70, 129, 166, 196, 214, 258, 307, 308, 349, 353, 360, 361, 363, 367, 370, 374, 377, 378, 390, 391, 394, 395, 397, 398, 413, 416, 440, 442, 445, 450, 464, 473, 475, 478, 479, 480, 482, 485, 486, 489, 491, 492, 496, 499, 527, 536, 537, 538, 539, 540, 544, 545, 549, 559, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 609, 621, 628, 632, 636, 642, 650, 652, 653, 676, 690, 710, 772, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 790, 791, 793, 804, 807, 809, 812, 813, 814, 838, 846, 847, 852, 853, 856, 866, 868, 880, 881, 882, 883, 888, 919, 920, 921, 923, 944, 950, 955, 957, 964, 967, 969, 970, 980, 987, 989, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "lexicograph": [4, 378, 544, 763, 767, 815, 823], "ad": [4, 13, 74, 103, 105, 109, 120, 142, 149, 155, 156, 175, 198, 221, 231, 256, 257, 298, 307, 308, 309, 310, 317, 339, 365, 366, 369, 371, 376, 378, 379, 395, 397, 398, 399, 400, 420, 421, 422, 424, 425, 427, 430, 437, 440, 442, 491, 499, 509, 512, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 559, 566, 567, 568, 570, 579, 584, 585, 588, 590, 604, 606, 618, 619, 625, 627, 631, 635, 636, 646, 653, 655, 657, 672, 690, 750, 752, 770, 771, 772, 785, 794, 801, 811, 830, 831, 832, 846, 852, 854, 869, 880, 881, 882, 883, 899, 943, 947, 949, 950, 951, 955, 957, 958, 960, 975, 978, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "benefit": [4, 55, 73, 74, 166, 210, 221, 228, 230, 278, 310, 353, 366, 374, 378, 388, 390, 446, 485, 544, 545, 635, 636, 643, 645, 653, 654, 655, 870, 872, 943, 949, 957, 962, 964, 975, 978, 996, 999, 1000, 1001, 1008, 1009, 1010, 1011], "prevent": [4, 110, 122, 143, 197, 298, 325, 338, 343, 349, 366, 367, 376, 377, 390, 395, 398, 421, 427, 465, 466, 567, 568, 588, 703, 760, 830, 831, 857, 858, 860, 861, 862, 863, 954, 956, 959, 960, 970, 987, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 66, 126, 141, 146, 154, 155, 156, 166, 167, 168, 185, 196, 214, 225, 228, 229, 242, 246, 247, 256, 257, 259, 262, 265, 289, 298, 299, 302, 306, 308, 309, 325, 340, 349, 353, 354, 355, 360, 361, 363, 364, 366, 367, 369, 370, 371, 373, 377, 378, 379, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 413, 419, 426, 427, 428, 430, 432, 434, 435, 439, 442, 445, 465, 466, 485, 486, 500, 511, 514, 516, 523, 528, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 547, 555, 557, 559, 565, 566, 568, 570, 580, 587, 588, 597, 604, 609, 610, 625, 635, 636, 643, 645, 646, 653, 654, 655, 656, 657, 669, 673, 676, 677, 680, 692, 693, 695, 699, 711, 712, 727, 730, 732, 749, 753, 754, 755, 756, 765, 766, 768, 772, 775, 776, 783, 784, 802, 805, 819, 823, 832, 833, 838, 842, 844, 846, 847, 862, 863, 866, 869, 872, 880, 881, 882, 883, 884, 886, 888, 892, 893, 924, 938, 943, 944, 946, 949, 950, 951, 954, 955, 956, 957, 960, 961, 962, 964, 966, 967, 968, 969, 970, 974, 980, 982, 986, 987, 989, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "unknown": [4, 16, 55, 166, 256, 313, 315, 355, 361, 378, 387, 398, 840, 846, 847, 919, 953, 964, 980, 1000, 1004, 1008, 1009], "sake": [4, 122, 162, 166, 196, 338, 340, 373, 376, 647, 676], "simplic": [4, 13, 31, 338, 340, 378, 396, 957, 958, 959, 969], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 70, 98, 109, 115, 116, 117, 118, 129, 132, 143, 149, 154, 162, 166, 168, 172, 175, 177, 185, 226, 227, 228, 235, 236, 237, 238, 242, 243, 246, 254, 256, 257, 263, 268, 276, 289, 295, 307, 308, 310, 315, 327, 338, 339, 347, 354, 361, 364, 365, 366, 367, 370, 371, 373, 376, 378, 390, 393, 394, 398, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 480, 544, 553, 566, 635, 650, 652, 666, 670, 772, 775, 776, 783, 785, 794, 795, 796, 798, 851, 853, 872, 943, 950, 951, 960, 969, 970, 975, 977, 978, 980, 982, 985, 987, 988, 989, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 56, 58, 95, 142, 149, 161, 167, 175, 176, 185, 196, 197, 214, 218, 219, 220, 227, 229, 236, 238, 244, 251, 258, 259, 265, 274, 283, 298, 302, 306, 307, 310, 334, 338, 339, 340, 343, 349, 353, 354, 360, 361, 364, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 381, 388, 390, 391, 394, 395, 397, 398, 399, 401, 402, 403, 404, 406, 407, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 683, 684, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 709, 710, 711, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 896, 898, 899, 901, 903, 908, 909, 910, 911, 912, 913, 914, 919, 921, 922, 923, 924, 925, 927, 928, 929, 935, 938, 940, 941, 943, 944, 946, 948, 950, 953, 954, 955, 957, 958, 960, 961, 964, 966, 968, 969, 980, 984, 987, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "hyper": [4, 70, 250, 256, 261, 295, 325, 349, 367, 376, 377, 378, 385, 394, 397, 399, 621, 622, 776, 783, 785, 829, 949, 950, 954, 957, 968, 969, 980, 991, 996, 1010], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 57, 59, 60, 61, 70, 71, 72, 78, 80, 81, 91, 95, 112, 114, 118, 123, 124, 135, 136, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 175, 176, 177, 178, 181, 183, 184, 185, 187, 188, 196, 198, 200, 201, 204, 205, 213, 214, 221, 222, 225, 227, 230, 231, 234, 241, 243, 244, 246, 247, 250, 255, 256, 257, 258, 260, 261, 264, 267, 268, 269, 271, 276, 278, 282, 283, 289, 292, 293, 295, 298, 299, 300, 306, 307, 309, 310, 317, 320, 322, 327, 330, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 349, 353, 354, 355, 356, 358, 359, 361, 368, 370, 371, 372, 373, 374, 376, 385, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 951, 953, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 970, 974, 975, 981, 983, 985, 986, 987, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "pipelin": [4, 31, 54, 57, 70, 73, 75, 85, 115, 119, 140, 142, 147, 161, 162, 167, 168, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 224, 225, 226, 230, 235, 238, 239, 249, 253, 255, 263, 270, 272, 276, 278, 284, 285, 292, 295, 300, 303, 306, 307, 308, 309, 310, 317, 338, 339, 349, 353, 356, 358, 360, 361, 366, 368, 378, 394, 398, 400, 404, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 465, 479, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 587, 588, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 674, 675, 677, 678, 689, 770, 771, 772, 775, 776, 785, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 944, 950, 957, 958, 963, 964, 968, 969, 974, 975, 976, 978, 981, 983, 991, 996, 997, 999, 1000, 1001, 1002, 1003], "make_pipelin": [4, 31, 57, 85, 115, 119, 129, 142, 143, 161, 162, 166, 167, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 225, 226, 227, 235, 236, 238, 253, 263, 276, 285, 292, 300, 303, 306, 307, 308, 309, 310, 339, 349, 377, 391, 394, 544, 653, 655, 825, 833, 857, 858, 860, 861, 862, 863, 872, 873, 874, 875, 877, 878, 944, 957, 964, 968, 969, 999, 1006, 1009], "ordinalencod": [4, 119, 129, 168, 196, 360, 378, 397, 558, 809, 841, 846, 956, 964, 1004, 1005, 1008, 1009, 1010], "compos": [4, 5, 25, 68, 69, 70, 74, 85, 112, 119, 129, 164, 166, 168, 196, 198, 214, 227, 236, 238, 307, 309, 310, 356, 377, 379, 390, 391, 394, 400, 492, 589, 953, 996, 1011], "columntransform": [4, 69, 70, 129, 166, 168, 196, 214, 227, 236, 238, 307, 309, 310, 358, 360, 376, 377, 444, 445, 606, 838, 943, 944, 975, 991, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ensembl": [4, 7, 10, 26, 27, 31, 55, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 161, 162, 167, 168, 169, 196, 218, 225, 233, 234, 236, 237, 253, 268, 274, 300, 306, 307, 308, 309, 338, 349, 353, 356, 369, 370, 377, 378, 388, 390, 394, 399, 416, 481, 492, 556, 609, 610, 612, 635, 775, 776, 799, 803, 834, 837, 846, 876, 880, 882, 883, 943, 954, 955, 960, 961, 970, 974, 975, 976, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "histgradientboostingregressor": [4, 7, 119, 122, 123, 126, 129, 161, 167, 196, 306, 307, 308, 309, 369, 397, 537, 556, 609, 610, 612, 944, 961, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "cross_valid": [4, 119, 129, 166, 198, 258, 259, 366, 377, 552, 794, 795, 954, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "categorical_column": [4, 119, 166, 168, 445], "ordinal_encod": [4, 119], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 56, 61, 68, 73, 75, 85, 88, 97, 98, 100, 102, 104, 105, 108, 119, 129, 133, 143, 155, 162, 164, 166, 167, 168, 172, 188, 196, 197, 204, 210, 212, 214, 218, 221, 225, 227, 230, 232, 238, 243, 253, 254, 257, 265, 276, 278, 284, 285, 286, 298, 299, 300, 301, 302, 303, 306, 307, 325, 328, 338, 340, 349, 356, 360, 361, 362, 363, 366, 367, 370, 374, 378, 386, 388, 389, 390, 392, 395, 397, 398, 399, 400, 406, 410, 412, 416, 420, 421, 422, 424, 425, 427, 430, 442, 443, 444, 445, 446, 459, 460, 461, 462, 465, 466, 473, 480, 485, 486, 491, 492, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 534, 536, 538, 541, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 613, 615, 616, 617, 618, 619, 630, 635, 640, 650, 653, 661, 665, 666, 667, 668, 669, 671, 689, 728, 729, 760, 772, 775, 776, 785, 799, 802, 808, 817, 822, 825, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 872, 874, 877, 878, 901, 903, 943, 944, 946, 948, 950, 951, 954, 955, 958, 968, 969, 971, 974, 975, 976, 980, 985, 986, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "remaind": [4, 119, 166, 185, 196, 198, 214, 343, 391, 442, 445, 996, 1003, 1004, 1005, 1008, 1009], "passthrough": [4, 71, 119, 166, 196, 214, 391, 442, 445, 544, 545, 832, 833, 964, 1005, 1007, 1010, 1011], "short": [4, 5, 119, 187, 254, 294, 338, 366, 373, 394, 398, 402, 950, 951, 957, 1001, 1006, 1007, 1008, 1009, 1010], "easier": [4, 44, 61, 65, 81, 119, 175, 181, 227, 253, 254, 298, 325, 338, 349, 361, 366, 367, 370, 373, 376, 381, 392, 394, 446, 492, 870, 903, 954, 961, 970, 975, 978, 989, 1005, 1010], "specifi": [4, 95, 119, 120, 150, 153, 155, 156, 157, 158, 185, 197, 204, 241, 258, 264, 353, 360, 366, 367, 374, 377, 378, 390, 391, 394, 395, 397, 399, 400, 402, 404, 416, 420, 424, 428, 430, 441, 442, 445, 447, 448, 450, 451, 452, 453, 454, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 492, 508, 510, 514, 518, 523, 529, 534, 536, 537, 538, 539, 541, 544, 545, 560, 561, 570, 571, 574, 579, 587, 588, 597, 608, 609, 610, 615, 620, 623, 624, 625, 628, 629, 630, 632, 633, 635, 636, 637, 638, 639, 640, 642, 645, 646, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 664, 668, 675, 676, 677, 678, 685, 687, 704, 705, 713, 729, 746, 754, 755, 758, 759, 762, 772, 774, 775, 776, 778, 780, 784, 785, 788, 793, 794, 795, 796, 797, 798, 800, 804, 807, 808, 809, 811, 812, 813, 814, 818, 846, 848, 851, 852, 868, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 904, 911, 938, 944, 950, 951, 953, 954, 957, 961, 962, 964, 967, 968, 969, 984, 988, 996, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011], "next": [4, 7, 25, 45, 59, 79, 118, 119, 123, 132, 156, 169, 189, 193, 196, 226, 233, 237, 238, 243, 251, 262, 274, 308, 314, 338, 343, 347, 349, 356, 364, 366, 367, 369, 387, 390, 391, 394, 397, 485, 486, 587, 611, 669, 675, 677, 678, 756, 770, 771, 799, 943, 947, 953, 954, 964, 978, 993, 996, 1009, 1010], "verbose_feature_names_out": [4, 119, 166, 168, 238, 309, 310, 391, 442, 445, 1009], "categorical_featur": [4, 70, 119, 308, 309, 310, 370, 397, 538, 539, 1004, 1008, 1011], "set_output": [4, 119, 164, 224, 239, 368, 412, 421, 422, 424, 425, 427, 442, 446, 459, 460, 461, 462, 473, 481, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 635, 665, 666, 799, 817, 822, 825, 829, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 1011], "across": [4, 60, 66, 84, 135, 166, 185, 190, 218, 251, 253, 256, 276, 298, 303, 367, 374, 378, 384, 389, 390, 394, 398, 402, 416, 419, 428, 430, 432, 435, 438, 440, 447, 450, 452, 465, 468, 469, 472, 474, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544, 545, 565, 568, 571, 579, 584, 585, 587, 588, 609, 610, 611, 616, 617, 618, 619, 623, 624, 627, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 653, 655, 656, 662, 663, 666, 667, 668, 669, 670, 671, 672, 680, 681, 693, 706, 732, 763, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 818, 822, 829, 830, 831, 838, 842, 843, 850, 851, 853, 861, 864, 865, 867, 868, 872, 873, 874, 877, 880, 881, 908, 909, 925, 928, 943, 950, 952, 954, 964, 968, 970, 975, 978, 989, 996, 999, 1002, 1003, 1004, 1005, 1006], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 57, 60, 69, 91, 95, 97, 98, 101, 103, 105, 113, 115, 119, 120, 121, 122, 129, 152, 155, 157, 158, 162, 176, 184, 185, 188, 193, 196, 197, 204, 205, 206, 214, 217, 218, 232, 234, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 258, 259, 264, 267, 270, 276, 281, 286, 289, 293, 295, 298, 300, 306, 317, 321, 325, 335, 338, 339, 340, 353, 361, 366, 367, 371, 372, 376, 391, 394, 398, 402, 485, 510, 574, 587, 588, 756, 899, 904, 916, 954, 961, 969, 985], "cv_result": [4, 70, 254, 255, 257, 259, 785, 796, 954], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 57, 59, 69, 70, 71, 72, 73, 77, 81, 85, 103, 109, 112, 118, 119, 121, 122, 128, 129, 136, 137, 142, 143, 145, 146, 161, 164, 167, 168, 169, 172, 187, 188, 191, 196, 198, 202, 204, 212, 214, 225, 230, 231, 234, 238, 245, 249, 254, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 274, 283, 284, 285, 292, 293, 294, 295, 300, 303, 306, 307, 308, 309, 313, 314, 316, 317, 325, 333, 338, 339, 343, 349, 361, 366, 367, 370, 377, 378, 384, 385, 387, 388, 389, 391, 393, 395, 397, 399, 407, 409, 411, 416, 422, 425, 427, 430, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 479, 481, 509, 513, 518, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 586, 587, 588, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 717, 730, 731, 732, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 770, 771, 772, 775, 776, 785, 790, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 818, 819, 820, 822, 823, 824, 829, 830, 831, 833, 853, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 911, 943, 946, 950, 952, 957, 960, 962, 964, 968, 975, 983, 985, 987, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "neg_mean_absolute_error": [4, 129, 198, 954], "neg_root_mean_squared_error": [4, 954], "mae": [4, 74, 129, 166, 196, 198, 535, 542, 720, 881, 883, 954, 970, 1003, 1004, 1008, 1009], "test_neg_mean_absolute_error": [4, 129, 198], "rmse": [4, 80, 725, 1007], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 57, 59, 60, 62, 66, 69, 70, 72, 73, 79, 84, 85, 91, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 121, 123, 135, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 167, 168, 169, 172, 180, 181, 182, 183, 187, 188, 191, 192, 196, 198, 199, 203, 204, 211, 212, 214, 218, 219, 222, 227, 229, 231, 234, 238, 244, 250, 254, 255, 256, 257, 259, 261, 264, 265, 269, 276, 280, 287, 289, 293, 294, 295, 300, 303, 306, 307, 308, 310, 313, 314, 317, 325, 338, 339, 340, 343, 347, 349, 353, 360, 361, 364, 367, 373, 378, 391, 394, 397, 398, 400, 442, 445, 446, 450, 456, 479, 489, 518, 521, 526, 527, 536, 537, 538, 539, 541, 542, 546, 547, 553, 560, 561, 565, 566, 568, 589, 594, 607, 623, 624, 626, 627, 629, 630, 631, 633, 637, 638, 639, 640, 643, 644, 653, 654, 661, 689, 693, 712, 768, 770, 771, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 802, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 830, 831, 832, 833, 834, 835, 843, 849, 853, 860, 870, 871, 872, 873, 874, 877, 885, 896, 916, 922, 944, 954, 955, 956, 957, 962, 970, 980, 984, 985, 987, 988, 989, 996, 998, 1004, 1005, 1007], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 57, 70, 72, 85, 116, 117, 142, 146, 149, 150, 151, 153, 158, 167, 168, 176, 180, 182, 188, 196, 198, 202, 211, 212, 214, 218, 229, 231, 254, 256, 257, 259, 262, 264, 267, 276, 292, 317, 338, 339, 340, 962, 985], "std": [4, 11, 12, 37, 46, 50, 54, 60, 65, 78, 80, 81, 96, 97, 98, 116, 118, 119, 129, 136, 158, 161, 162, 166, 176, 181, 205, 229, 254, 255, 256, 258, 259, 261, 264, 266, 270, 271, 316, 328, 339, 349, 378, 390, 394, 397, 492, 583, 586, 853, 863, 964, 988, 1004, 1008], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 57, 69, 74, 79, 84, 91, 95, 98, 100, 103, 105, 106, 112, 113, 116, 120, 129, 131, 141, 146, 149, 153, 158, 167, 176, 192, 196, 197, 211, 213, 214, 217, 228, 229, 230, 232, 241, 243, 244, 254, 256, 259, 261, 262, 263, 265, 266, 276, 281, 295, 300, 302, 303, 308, 314, 333, 347, 353, 360, 363, 364, 366, 369, 374, 381, 387, 388, 390, 393, 394, 395, 396, 397, 398, 400, 401, 423, 424, 425, 426, 428, 447, 449, 452, 456, 466, 492, 493, 494, 495, 500, 505, 515, 517, 518, 524, 534, 535, 536, 537, 540, 541, 542, 543, 565, 566, 567, 568, 584, 585, 591, 604, 626, 648, 656, 669, 673, 676, 682, 683, 730, 777, 779, 781, 786, 787, 790, 809, 813, 814, 818, 838, 864, 866, 880, 881, 882, 883, 907, 912, 913, 929, 933, 934, 943, 946, 948, 950, 951, 954, 955, 956, 957, 958, 960, 961, 964, 966, 968, 969, 970, 980, 987, 989, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "044": [4, 254, 726, 954], "003": 4, "068": [4, 88, 92, 256], "005": [4, 256, 260, 281, 298, 339, 371], "quit": [4, 53, 85, 113, 135, 146, 166, 194, 214, 264, 309, 338, 353, 370, 377, 390, 398, 949, 951, 956, 978, 1004], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 57, 73, 80, 85, 105, 118, 121, 122, 150, 154, 161, 166, 185, 196, 197, 202, 211, 222, 225, 229, 234, 242, 244, 250, 256, 258, 262, 271, 295, 308, 313, 318, 325, 338, 339, 349, 353, 354, 355, 365, 367, 368, 371, 376, 378, 384, 387, 388, 390, 392, 394, 395, 397, 398, 399, 400, 416, 418, 423, 511, 536, 538, 539, 567, 607, 617, 624, 625, 633, 635, 636, 638, 646, 657, 667, 671, 698, 706, 717, 739, 798, 866, 909, 943, 949, 950, 951, 954, 955, 957, 958, 959, 961, 962, 964, 968, 969, 970, 975, 978, 980, 984, 987, 989, 1002], "trial": [4, 261, 438, 648, 770, 771, 950, 1002], "without": [4, 5, 13, 24, 36, 42, 55, 66, 67, 74, 100, 121, 124, 126, 129, 142, 146, 156, 164, 166, 167, 185, 204, 225, 229, 232, 235, 237, 250, 257, 261, 263, 277, 290, 298, 299, 303, 306, 339, 355, 361, 362, 364, 366, 367, 369, 370, 371, 374, 376, 377, 378, 384, 390, 391, 395, 397, 398, 399, 400, 413, 418, 420, 447, 452, 473, 481, 492, 509, 511, 532, 533, 540, 555, 557, 588, 604, 611, 616, 636, 669, 677, 756, 775, 776, 777, 783, 785, 798, 799, 815, 822, 826, 832, 833, 836, 839, 842, 843, 845, 849, 850, 851, 853, 857, 872, 888, 922, 923, 943, 944, 948, 950, 951, 954, 957, 960, 964, 968, 969, 970, 974, 975, 980, 981, 989, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011], "tune": [4, 44, 70, 100, 145, 149, 161, 167, 185, 201, 213, 221, 250, 261, 278, 299, 325, 338, 349, 353, 355, 377, 378, 385, 389, 390, 394, 397, 399, 400, 430, 440, 536, 537, 571, 590, 591, 592, 594, 596, 597, 599, 600, 602, 620, 636, 667, 671, 829, 948, 949, 950, 951, 953, 954, 957, 958, 960, 968, 981, 991, 996, 1010], "just": [4, 31, 69, 85, 95, 119, 146, 186, 193, 218, 230, 256, 263, 267, 292, 325, 338, 339, 349, 361, 365, 366, 367, 369, 370, 371, 373, 376, 377, 378, 387, 390, 391, 394, 397, 399, 400, 402, 446, 510, 519, 523, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 555, 560, 561, 566, 587, 588, 623, 629, 634, 635, 637, 639, 643, 644, 645, 653, 654, 655, 822, 830, 831, 836, 845, 943, 950, 953, 954, 955, 958, 962, 964, 968, 975, 987, 996, 1000, 1002, 1004, 1008], "had": [4, 9, 47, 122, 154, 298, 309, 349, 366, 398, 401, 423, 944, 954, 978, 980, 996, 997, 1003, 1004, 1005, 1006, 1007, 1011], "explicit": [4, 164, 172, 224, 239, 353, 354, 355, 365, 376, 378, 379, 391, 398, 404, 450, 476, 478, 479, 518, 528, 529, 615, 616, 618, 653, 772, 773, 779, 817, 825, 833, 872, 877, 920, 922, 946, 948, 950, 954, 964, 970, 974, 996, 1000, 1005, 1006, 1009], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 59, 64, 65, 69, 70, 85, 95, 97, 100, 109, 110, 111, 141, 146, 149, 161, 162, 166, 167, 168, 172, 175, 191, 197, 198, 214, 229, 235, 254, 256, 257, 259, 265, 278, 298, 309, 317, 325, 340, 347, 353, 355, 361, 366, 367, 368, 369, 373, 376, 378, 379, 380, 384, 388, 389, 390, 391, 394, 395, 397, 398, 400, 423, 428, 435, 442, 445, 470, 471, 485, 514, 523, 544, 545, 546, 547, 584, 585, 593, 597, 598, 601, 609, 616, 641, 669, 743, 746, 749, 753, 754, 755, 756, 764, 772, 785, 792, 798, 837, 847, 851, 853, 862, 863, 869, 880, 881, 943, 944, 950, 953, 954, 955, 957, 958, 959, 961, 964, 969, 970, 973, 974, 977, 978, 980, 987, 988, 989, 996, 997, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "But": [4, 9, 53, 197, 198, 256, 298, 366, 376, 390, 393, 396, 397, 440, 721, 880, 881, 943, 954, 969, 975], "much": [4, 6, 7, 9, 19, 25, 39, 40, 79, 81, 91, 98, 105, 115, 122, 123, 129, 130, 131, 149, 161, 162, 166, 167, 168, 169, 172, 193, 194, 198, 229, 256, 258, 259, 262, 267, 294, 299, 303, 308, 309, 325, 330, 338, 339, 349, 353, 355, 361, 366, 367, 370, 373, 376, 377, 381, 389, 392, 393, 394, 395, 396, 397, 398, 399, 425, 426, 473, 511, 512, 513, 515, 536, 537, 538, 539, 635, 636, 643, 645, 653, 654, 655, 669, 754, 755, 775, 776, 789, 848, 865, 872, 943, 946, 949, 950, 951, 953, 954, 955, 957, 958, 960, 962, 966, 967, 969, 970, 975, 978, 984, 985, 987, 988, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "monoton": [4, 25, 108, 133, 164, 167, 214, 228, 307, 388, 538, 539, 612, 613, 671, 682, 849, 860, 874, 877, 951, 955, 964, 969, 1003, 1007], "relationship": [4, 111, 155, 166, 167, 175, 196, 198, 199, 263, 299, 378, 390, 392, 394, 400, 440, 613, 690, 951, 954, 956, 957, 961, 962, 987, 1001], "case": [4, 7, 8, 25, 27, 37, 49, 52, 60, 65, 70, 71, 80, 85, 100, 103, 113, 115, 122, 123, 129, 143, 146, 149, 156, 166, 167, 182, 185, 187, 196, 197, 198, 201, 204, 210, 212, 213, 214, 225, 229, 230, 231, 235, 246, 250, 253, 255, 256, 257, 259, 262, 263, 265, 283, 294, 298, 300, 306, 309, 338, 339, 340, 347, 349, 353, 354, 355, 360, 361, 364, 366, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 416, 419, 422, 423, 425, 429, 431, 441, 442, 445, 452, 473, 485, 486, 492, 516, 518, 519, 520, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 559, 570, 571, 574, 579, 583, 586, 587, 588, 602, 605, 607, 609, 624, 625, 630, 633, 634, 635, 636, 638, 640, 643, 645, 646, 649, 651, 652, 653, 657, 659, 660, 661, 662, 663, 664, 676, 679, 684, 685, 688, 694, 696, 697, 698, 701, 703, 704, 709, 710, 713, 717, 718, 720, 721, 723, 725, 728, 729, 731, 738, 753, 756, 758, 760, 763, 767, 769, 771, 772, 775, 776, 785, 789, 793, 794, 795, 796, 797, 798, 800, 802, 810, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 833, 840, 842, 843, 846, 847, 848, 851, 852, 853, 856, 862, 863, 864, 865, 872, 874, 877, 880, 881, 887, 888, 898, 909, 910, 922, 943, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 960, 961, 964, 968, 969, 970, 975, 977, 978, 980, 989, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "usual": [4, 40, 77, 78, 80, 121, 122, 124, 129, 167, 182, 196, 197, 250, 253, 256, 258, 265, 266, 299, 309, 325, 349, 353, 354, 364, 366, 367, 369, 373, 376, 377, 378, 387, 390, 391, 394, 395, 397, 398, 399, 428, 434, 515, 517, 519, 524, 536, 537, 560, 584, 585, 607, 617, 635, 636, 643, 645, 653, 654, 655, 669, 701, 733, 797, 801, 836, 845, 872, 909, 943, 944, 946, 949, 950, 951, 953, 954, 955, 958, 959, 960, 961, 964, 968, 969, 970, 980, 986, 987, 1011], "hot": [4, 70, 115, 117, 129, 166, 196, 265, 299, 300, 308, 325, 378, 397, 398, 528, 543, 558, 625, 635, 636, 646, 657, 836, 838, 840, 841, 844, 846, 847, 950, 964, 1004, 1010, 1011], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 57, 59, 66, 72, 79, 85, 90, 96, 113, 115, 117, 122, 123, 127, 142, 143, 146, 149, 151, 156, 161, 162, 166, 167, 184, 185, 196, 197, 200, 201, 204, 213, 214, 217, 219, 222, 225, 226, 228, 229, 230, 238, 246, 253, 256, 257, 258, 263, 271, 274, 276, 286, 292, 294, 295, 300, 302, 306, 307, 308, 309, 310, 316, 318, 325, 327, 333, 338, 339, 340, 343, 344, 347, 349, 353, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 384, 386, 387, 388, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 406, 411, 416, 419, 421, 422, 423, 424, 425, 427, 428, 429, 432, 434, 435, 436, 438, 439, 440, 443, 444, 446, 450, 452, 459, 460, 461, 462, 466, 473, 475, 480, 491, 492, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 558, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 574, 579, 584, 585, 586, 587, 588, 591, 596, 599, 600, 604, 605, 606, 607, 608, 609, 610, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 664, 665, 666, 669, 670, 672, 676, 680, 682, 683, 704, 705, 713, 716, 717, 738, 744, 753, 758, 759, 762, 763, 772, 773, 774, 775, 776, 778, 779, 780, 781, 785, 793, 794, 795, 796, 797, 798, 800, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 839, 842, 843, 845, 846, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 892, 898, 919, 938, 943, 944, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 968, 969, 970, 973, 977, 978, 980, 987, 988, 989, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "consist": [4, 7, 26, 32, 37, 55, 69, 79, 84, 89, 91, 95, 119, 129, 132, 146, 152, 154, 157, 162, 196, 214, 231, 262, 265, 294, 306, 309, 333, 339, 349, 353, 359, 361, 363, 366, 367, 371, 372, 373, 374, 377, 378, 379, 388, 390, 392, 396, 397, 398, 400, 408, 409, 411, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 467, 474, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 568, 588, 604, 605, 606, 607, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 651, 654, 655, 656, 664, 665, 666, 667, 668, 676, 677, 710, 770, 771, 778, 801, 802, 803, 805, 806, 807, 808, 816, 817, 819, 821, 824, 825, 831, 837, 838, 840, 844, 845, 848, 849, 851, 852, 864, 865, 868, 872, 873, 875, 876, 878, 881, 883, 892, 894, 915, 925, 928, 943, 946, 947, 948, 950, 951, 953, 954, 955, 957, 958, 964, 967, 969, 970, 973, 974, 975, 978, 980, 987, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "scale": [4, 5, 12, 25, 27, 37, 40, 46, 47, 55, 57, 60, 70, 78, 81, 85, 97, 100, 101, 126, 146, 149, 150, 151, 154, 155, 156, 158, 164, 167, 172, 176, 177, 184, 196, 198, 210, 211, 212, 214, 216, 219, 223, 225, 231, 246, 253, 256, 257, 263, 293, 294, 295, 297, 298, 304, 307, 310, 318, 320, 322, 325, 336, 349, 352, 353, 358, 359, 360, 363, 366, 370, 374, 376, 377, 378, 389, 390, 391, 395, 397, 399, 400, 425, 428, 429, 435, 442, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 478, 487, 491, 492, 501, 511, 515, 517, 518, 524, 526, 527, 538, 539, 559, 567, 568, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 609, 618, 621, 622, 623, 624, 626, 629, 635, 636, 637, 638, 639, 649, 651, 653, 654, 655, 658, 664, 665, 666, 667, 669, 671, 676, 679, 692, 722, 732, 734, 744, 750, 752, 772, 785, 788, 799, 801, 811, 813, 814, 830, 831, 834, 837, 842, 843, 845, 848, 850, 851, 853, 857, 858, 859, 861, 862, 864, 865, 872, 873, 874, 875, 876, 877, 878, 895, 930, 931, 932, 943, 946, 947, 950, 954, 955, 956, 957, 958, 962, 968, 969, 975, 978, 980, 987, 988, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 57, 63, 69, 70, 71, 74, 91, 95, 97, 100, 103, 105, 111, 113, 116, 119, 120, 122, 123, 127, 146, 149, 166, 167, 169, 182, 184, 185, 190, 196, 197, 198, 204, 214, 234, 235, 246, 251, 252, 253, 254, 256, 257, 259, 261, 262, 264, 269, 276, 281, 294, 298, 299, 301, 303, 306, 308, 316, 325, 338, 339, 340, 347, 349, 353, 354, 355, 360, 361, 363, 365, 366, 367, 369, 371, 374, 376, 377, 378, 379, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 410, 413, 417, 418, 428, 434, 443, 447, 448, 449, 450, 451, 452, 453, 454, 456, 470, 472, 473, 475, 481, 485, 486, 508, 509, 513, 514, 515, 516, 517, 520, 524, 526, 528, 529, 530, 531, 534, 536, 537, 538, 539, 541, 542, 544, 545, 566, 567, 579, 580, 583, 587, 588, 590, 599, 604, 605, 606, 609, 610, 623, 626, 629, 630, 632, 635, 636, 640, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 661, 664, 676, 680, 681, 688, 689, 691, 693, 701, 706, 707, 711, 730, 731, 732, 753, 754, 755, 761, 763, 765, 767, 768, 770, 771, 772, 773, 775, 776, 779, 780, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 815, 816, 817, 821, 823, 824, 825, 836, 837, 838, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 861, 872, 873, 880, 882, 894, 898, 909, 917, 925, 928, 929, 939, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 968, 969, 970, 975, 984, 989, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "minmaxscal": [4, 5, 142, 172, 218, 293, 308, 355, 391, 442, 858, 944, 964, 998, 1001, 1004, 1006, 1007, 1008], "although": [4, 9, 25, 116, 129, 167, 193, 214, 225, 243, 274, 349, 355, 367, 378, 390, 391, 395, 398, 473, 788, 791, 844, 953, 955, 956, 957, 960, 970, 980, 987, 988, 989, 996, 1004, 1011], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 56, 69, 71, 72, 85, 106, 115, 118, 124, 129, 146, 155, 166, 167, 193, 196, 202, 214, 217, 218, 219, 222, 225, 228, 229, 230, 232, 243, 244, 251, 256, 259, 263, 265, 266, 274, 289, 298, 300, 302, 309, 310, 316, 317, 323, 325, 333, 335, 338, 339, 340, 353, 360, 364, 366, 367, 369, 373, 377, 378, 384, 388, 389, 390, 391, 394, 395, 397, 398, 399, 400, 413, 419, 421, 425, 427, 428, 432, 434, 445, 451, 453, 457, 464, 476, 480, 485, 504, 512, 514, 515, 516, 518, 521, 523, 526, 527, 534, 535, 536, 537, 538, 539, 541, 542, 558, 565, 566, 568, 570, 571, 574, 579, 583, 587, 609, 626, 627, 628, 631, 632, 633, 636, 648, 659, 660, 675, 677, 678, 683, 703, 704, 705, 709, 711, 713, 718, 721, 753, 758, 759, 762, 763, 767, 772, 775, 776, 785, 830, 834, 835, 836, 838, 840, 842, 845, 846, 847, 850, 853, 861, 864, 865, 869, 872, 873, 880, 881, 882, 883, 887, 892, 896, 909, 912, 913, 922, 938, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 962, 964, 968, 969, 970, 989, 996, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 44, 45, 46, 48, 53, 54, 56, 59, 61, 65, 70, 72, 74, 80, 85, 95, 98, 100, 102, 106, 113, 114, 115, 116, 119, 122, 123, 127, 128, 138, 146, 149, 151, 153, 157, 161, 166, 168, 169, 176, 181, 182, 185, 186, 191, 197, 198, 200, 204, 210, 211, 214, 217, 218, 221, 225, 228, 230, 235, 241, 246, 247, 250, 251, 254, 256, 257, 259, 262, 263, 264, 265, 267, 268, 271, 276, 278, 282, 292, 293, 294, 298, 299, 300, 303, 306, 308, 310, 313, 316, 318, 325, 329, 330, 333, 338, 340, 345, 346, 353, 354, 355, 360, 361, 363, 366, 367, 369, 370, 371, 373, 376, 377, 378, 379, 384, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 413, 419, 420, 422, 424, 425, 428, 429, 430, 431, 432, 433, 435, 437, 440, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 457, 466, 485, 486, 488, 490, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 555, 557, 558, 559, 561, 565, 566, 568, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 607, 608, 609, 611, 613, 617, 620, 635, 641, 642, 643, 644, 653, 654, 655, 663, 666, 667, 668, 669, 670, 671, 672, 684, 686, 688, 693, 700, 701, 703, 704, 705, 706, 707, 711, 712, 713, 729, 731, 732, 739, 746, 749, 753, 754, 755, 756, 758, 759, 760, 762, 766, 767, 770, 771, 772, 774, 775, 776, 777, 781, 785, 786, 787, 788, 790, 791, 794, 800, 801, 802, 804, 805, 806, 807, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 837, 838, 846, 847, 850, 851, 861, 865, 869, 872, 874, 877, 880, 881, 882, 883, 884, 885, 892, 893, 908, 909, 911, 915, 921, 925, 928, 944, 946, 948, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 968, 969, 970, 975, 977, 980, 984, 985, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 70, 81, 85, 115, 117, 122, 146, 150, 153, 156, 166, 169, 176, 182, 189, 196, 202, 204, 214, 231, 242, 253, 256, 257, 262, 274, 276, 293, 294, 295, 298, 302, 303, 315, 325, 333, 338, 339, 340, 343, 349, 353, 354, 361, 367, 370, 373, 376, 377, 378, 384, 387, 388, 390, 394, 395, 396, 397, 398, 400, 411, 425, 426, 439, 443, 453, 459, 460, 461, 511, 513, 529, 531, 533, 535, 537, 539, 542, 545, 547, 565, 568, 584, 585, 588, 609, 610, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 650, 653, 654, 655, 656, 657, 666, 676, 685, 688, 689, 697, 698, 699, 721, 738, 760, 763, 767, 772, 785, 797, 801, 806, 807, 816, 819, 821, 823, 824, 825, 831, 842, 843, 851, 853, 857, 858, 860, 861, 862, 863, 873, 875, 878, 881, 883, 920, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 957, 959, 961, 964, 969, 970, 978, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 57, 63, 67, 71, 80, 83, 85, 86, 94, 98, 103, 105, 108, 110, 111, 113, 118, 119, 122, 127, 129, 133, 146, 153, 161, 162, 164, 166, 167, 168, 169, 174, 178, 180, 184, 185, 191, 193, 196, 199, 202, 204, 206, 213, 214, 215, 217, 218, 221, 224, 227, 230, 235, 237, 239, 243, 244, 249, 251, 253, 261, 263, 265, 267, 272, 277, 281, 285, 286, 290, 291, 296, 297, 299, 303, 304, 308, 338, 339, 340, 347, 349, 355, 361, 363, 366, 367, 387, 388, 390, 392, 393, 394, 395, 397, 399, 400, 403, 419, 420, 421, 423, 424, 426, 427, 428, 430, 436, 441, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 467, 479, 481, 489, 491, 499, 501, 505, 508, 514, 528, 529, 538, 539, 540, 542, 548, 616, 621, 622, 630, 632, 634, 635, 640, 643, 645, 653, 654, 661, 672, 681, 688, 691, 706, 713, 718, 761, 771, 772, 785, 799, 806, 815, 819, 822, 826, 830, 833, 834, 841, 842, 843, 845, 848, 849, 850, 851, 853, 858, 861, 874, 876, 877, 943, 946, 947, 948, 950, 951, 953, 954, 955, 956, 957, 958, 960, 964, 965, 968, 969, 970, 973, 974, 987, 988, 996, 998, 1003, 1004, 1009], "onehotencod": [4, 70, 115, 119, 129, 166, 196, 214, 227, 236, 238, 307, 309, 360, 378, 391, 397, 444, 445, 543, 558, 559, 836, 840, 841, 844, 847, 964, 997, 1000, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 70, 72, 74, 85, 115, 129, 131, 132, 135, 137, 146, 149, 161, 164, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 225, 226, 227, 228, 233, 236, 238, 252, 259, 264, 265, 269, 270, 274, 295, 299, 300, 306, 307, 308, 309, 310, 317, 338, 349, 353, 355, 356, 365, 366, 367, 371, 373, 374, 377, 378, 391, 397, 417, 443, 514, 516, 519, 520, 522, 523, 525, 544, 545, 546, 547, 574, 608, 609, 611, 612, 615, 617, 618, 619, 620, 677, 763, 785, 794, 795, 796, 804, 805, 806, 807, 831, 848, 852, 872, 873, 876, 879, 904, 946, 949, 950, 954, 955, 960, 962, 964, 968, 984, 985, 987, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "ridgecv": [4, 74, 129, 146, 166, 233, 378, 397, 545, 620, 649, 652, 950, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 344, 345, 346, 347, 349, 353, 359, 360, 361, 364, 366, 367, 368, 369, 371, 373, 374, 376, 377, 378, 381, 383, 384, 386, 387, 390, 391, 394, 395, 396, 397, 398, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 438, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 462, 467, 470, 471, 473, 480, 483, 485, 486, 508, 511, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 546, 547, 558, 559, 565, 566, 568, 604, 605, 606, 607, 608, 609, 620, 623, 624, 626, 629, 630, 634, 635, 636, 637, 638, 639, 640, 643, 645, 647, 649, 653, 654, 655, 661, 665, 668, 669, 670, 672, 676, 678, 679, 682, 683, 685, 688, 690, 701, 702, 709, 710, 713, 714, 729, 731, 748, 754, 756, 757, 758, 763, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 799, 801, 802, 805, 806, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 836, 837, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 874, 875, 877, 878, 880, 895, 907, 909, 913, 914, 915, 918, 919, 923, 925, 928, 941, 943, 944, 949, 950, 952, 954, 955, 957, 960, 964, 966, 969, 973, 975, 977, 980, 983, 984, 985, 987, 988, 989, 996, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 91, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 344, 345, 346, 347, 349, 353, 360, 361, 366, 367, 370, 371, 374, 376, 378, 387, 390, 391, 394, 395, 396, 397, 398, 400, 403, 405, 408, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 438, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 462, 473, 474, 485, 486, 497, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 534, 535, 536, 537, 538, 540, 541, 542, 543, 546, 547, 558, 559, 562, 563, 565, 566, 570, 571, 574, 583, 586, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 647, 648, 649, 651, 652, 653, 654, 655, 658, 659, 660, 661, 668, 669, 672, 678, 679, 682, 683, 685, 688, 690, 691, 701, 702, 709, 710, 713, 714, 716, 729, 731, 738, 744, 748, 753, 756, 757, 758, 763, 764, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 799, 800, 801, 802, 805, 806, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 821, 823, 824, 825, 829, 830, 837, 838, 840, 846, 847, 848, 849, 850, 852, 853, 860, 861, 864, 865, 867, 868, 869, 872, 874, 875, 877, 878, 880, 881, 882, 883, 890, 892, 893, 895, 897, 898, 907, 909, 914, 918, 919, 921, 923, 925, 928, 930, 931, 932, 943, 944, 949, 950, 952, 954, 955, 957, 958, 960, 964, 965, 966, 968, 969, 970, 980, 984, 985, 987, 988, 989, 997, 999, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "one_hot_encod": [4, 119], "handle_unknown": [4, 70, 115, 119, 129, 168, 227, 236, 238, 307, 310, 846, 847, 964, 1000, 1004, 1008, 1009], "ignor": [4, 6, 8, 17, 44, 49, 61, 70, 112, 115, 119, 129, 157, 184, 188, 196, 205, 211, 227, 236, 238, 247, 293, 294, 307, 310, 330, 339, 344, 366, 367, 369, 371, 378, 381, 390, 391, 397, 398, 408, 409, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 460, 461, 465, 480, 485, 486, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 528, 534, 535, 536, 537, 540, 541, 542, 543, 555, 558, 559, 560, 565, 566, 567, 568, 579, 580, 604, 605, 606, 607, 609, 610, 612, 616, 620, 626, 627, 628, 631, 632, 633, 635, 641, 642, 653, 654, 655, 665, 666, 667, 668, 669, 683, 689, 690, 701, 704, 705, 713, 730, 731, 738, 744, 749, 753, 758, 759, 762, 763, 770, 771, 773, 774, 775, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 817, 818, 819, 821, 822, 825, 832, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 906, 929, 950, 951, 954, 956, 960, 964, 969, 985, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "sparse_output": [4, 119, 238, 310, 543, 840, 844, 846, 856, 964, 1011], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 55, 59, 64, 81, 85, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 118, 122, 126, 128, 129, 130, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 166, 167, 175, 176, 177, 178, 180, 181, 182, 184, 185, 190, 191, 193, 194, 196, 197, 198, 200, 201, 205, 208, 209, 214, 217, 218, 221, 231, 237, 241, 256, 257, 258, 259, 260, 263, 264, 266, 268, 269, 271, 274, 276, 279, 281, 284, 286, 292, 294, 298, 299, 300, 301, 303, 307, 309, 310, 315, 317, 322, 323, 326, 327, 330, 334, 335, 338, 353, 361, 367, 371, 376, 392, 393, 395, 397, 399, 400, 402, 449, 450, 456, 504, 508, 510, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 537, 572, 573, 575, 588, 590, 592, 593, 600, 608, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 664, 698, 723, 808, 809, 810, 812, 830, 831, 868, 880, 881, 882, 883, 943, 949, 950, 954, 956, 958, 962, 967, 968, 969, 970, 984, 987, 989, 993, 996, 998, 999, 1000, 1001, 1003, 1004, 1008, 1009, 1010, 1011], "logspac": [4, 12, 72, 77, 103, 135, 136, 146, 150, 155, 166, 189, 200, 201, 229, 231, 245, 257, 269, 271, 280, 292, 300, 325, 333, 943, 949, 950, 984, 985, 987], "naive_linear_pipelin": 4, "142": [4, 57, 397], "014": [4, 264, 339, 371], "184": [4, 89, 92, 137, 139, 196, 231, 295, 371, 987], "020": [4, 19, 22, 962], "three": [4, 7, 26, 40, 41, 45, 46, 56, 57, 77, 89, 90, 110, 115, 116, 119, 121, 130, 131, 132, 143, 157, 166, 167, 188, 193, 196, 198, 205, 207, 231, 241, 244, 307, 329, 359, 363, 381, 387, 390, 394, 395, 396, 398, 429, 440, 475, 685, 911, 947, 949, 950, 951, 954, 957, 964, 968, 969, 973, 980, 988, 996], "higher": [4, 79, 98, 103, 113, 115, 122, 149, 151, 156, 157, 167, 168, 172, 196, 197, 214, 221, 222, 247, 250, 254, 256, 259, 270, 281, 325, 338, 339, 340, 349, 353, 361, 364, 367, 387, 390, 392, 397, 399, 400, 401, 423, 426, 427, 449, 456, 486, 509, 516, 520, 525, 530, 531, 534, 535, 536, 537, 538, 539, 541, 542, 543, 550, 565, 568, 584, 585, 596, 604, 608, 612, 614, 623, 624, 629, 630, 637, 638, 639, 640, 653, 655, 656, 680, 699, 703, 727, 760, 770, 772, 775, 776, 785, 792, 797, 800, 819, 822, 848, 864, 865, 866, 874, 875, 876, 877, 878, 885, 946, 950, 951, 953, 954, 957, 964, 968, 969, 987, 989, 997, 1002, 1004, 1011], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 55, 57, 73, 74, 95, 97, 98, 105, 127, 142, 143, 149, 151, 153, 154, 161, 162, 172, 184, 185, 217, 218, 219, 221, 222, 229, 230, 231, 247, 253, 259, 284, 295, 299, 314, 331, 338, 340, 349, 361, 363, 365, 366, 367, 369, 370, 376, 378, 387, 391, 394, 395, 397, 398, 400, 401, 402, 413, 420, 422, 423, 424, 425, 428, 437, 441, 442, 443, 453, 459, 460, 461, 470, 471, 472, 478, 496, 508, 511, 512, 514, 515, 516, 517, 518, 520, 521, 530, 531, 532, 533, 536, 538, 539, 540, 542, 544, 545, 546, 547, 550, 558, 561, 571, 584, 585, 591, 607, 609, 615, 618, 619, 620, 626, 648, 669, 673, 703, 738, 744, 798, 819, 833, 837, 838, 841, 842, 846, 847, 849, 850, 851, 853, 861, 864, 865, 866, 869, 874, 877, 890, 892, 893, 897, 898, 925, 928, 947, 948, 950, 951, 953, 954, 957, 960, 965, 966, 967, 968, 971, 974, 978, 980, 989, 999, 1000, 1002, 1004, 1006, 1008, 1010], "mere": [4, 256, 378, 800, 968], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 57, 74, 89, 95, 98, 112, 118, 121, 122, 127, 129, 138, 151, 153, 154, 155, 162, 166, 178, 184, 185, 191, 198, 199, 202, 210, 218, 229, 230, 232, 252, 274, 282, 283, 289, 292, 294, 298, 300, 301, 318, 324, 331, 334, 374, 390, 393, 395, 459, 460, 461, 462, 489, 511, 512, 515, 517, 518, 526, 527, 540, 604, 608, 609, 631, 632, 633, 634, 659, 660, 680, 716, 732, 755, 775, 776, 822, 830, 831, 843, 852, 858, 909, 921, 950, 954, 957, 964, 1002, 1005, 1007, 1008, 1011], "properli": [4, 25, 126, 154, 251, 306, 355, 364, 366, 369, 373, 381, 396, 872, 873, 874, 875, 876, 877, 878, 943, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "automat": [4, 8, 12, 46, 62, 64, 70, 103, 135, 145, 175, 199, 241, 242, 254, 257, 298, 307, 317, 327, 356, 361, 364, 366, 367, 369, 373, 378, 381, 386, 390, 391, 392, 395, 397, 398, 399, 412, 428, 430, 434, 440, 442, 443, 445, 473, 476, 492, 518, 526, 528, 534, 538, 541, 565, 568, 571, 579, 620, 622, 623, 624, 629, 630, 635, 636, 637, 638, 639, 640, 643, 644, 645, 649, 651, 652, 653, 655, 658, 661, 664, 665, 668, 672, 774, 788, 791, 799, 809, 830, 831, 834, 835, 837, 846, 847, 864, 865, 872, 874, 877, 880, 882, 886, 898, 925, 928, 943, 945, 948, 953, 958, 964, 968, 970, 974, 975, 984, 996, 999, 1000, 1001, 1007, 1010, 1011], "term": [4, 13, 14, 25, 32, 57, 100, 113, 119, 122, 154, 184, 185, 196, 198, 200, 210, 213, 214, 254, 258, 292, 309, 333, 338, 340, 355, 356, 366, 367, 369, 376, 384, 389, 390, 392, 394, 395, 397, 400, 422, 425, 427, 430, 437, 440, 501, 512, 515, 517, 521, 524, 526, 565, 566, 567, 568, 581, 584, 585, 609, 610, 617, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 649, 650, 651, 652, 653, 655, 657, 664, 672, 801, 802, 830, 831, 848, 852, 854, 872, 873, 874, 875, 876, 877, 878, 943, 945, 948, 949, 950, 951, 954, 955, 956, 958, 959, 964, 968, 969, 980, 989, 1004, 1010, 1011], "raw": [4, 12, 14, 37, 80, 97, 129, 154, 166, 172, 295, 315, 340, 353, 361, 373, 378, 388, 389, 390, 392, 395, 398, 447, 452, 478, 479, 480, 536, 537, 538, 540, 559, 565, 566, 567, 568, 611, 654, 667, 671, 681, 761, 819, 876, 951, 954, 958, 960, 961, 964, 967, 986, 988, 997, 1001, 1004, 1007], "recogn": [4, 29, 35, 85, 117, 164, 197, 309, 371, 390, 398, 479, 674, 689, 799, 877, 954, 980], "increas": [4, 7, 14, 26, 37, 43, 57, 60, 74, 98, 111, 113, 118, 126, 142, 149, 153, 154, 155, 158, 166, 167, 172, 176, 178, 196, 197, 198, 200, 214, 222, 229, 243, 256, 257, 258, 263, 269, 292, 299, 300, 308, 314, 325, 333, 339, 340, 343, 353, 354, 355, 365, 373, 374, 378, 388, 390, 392, 395, 397, 398, 401, 419, 423, 430, 441, 456, 509, 513, 530, 531, 536, 537, 538, 539, 544, 545, 565, 568, 604, 612, 613, 614, 622, 627, 628, 631, 632, 633, 635, 636, 643, 645, 653, 654, 655, 659, 660, 662, 663, 669, 682, 683, 688, 757, 764, 775, 776, 802, 821, 823, 824, 825, 828, 830, 831, 872, 873, 909, 943, 945, 949, 950, 951, 953, 954, 957, 968, 969, 970, 978, 996, 998, 1001, 1005, 1007, 1008, 1011], "strong": [4, 164, 166, 167, 174, 189, 193, 200, 202, 215, 231, 389, 395, 397, 400, 501, 626, 649, 947, 948, 950, 951, 953, 961, 969, 987], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 59, 74, 85, 95, 99, 122, 149, 156, 157, 166, 167, 168, 196, 198, 210, 217, 219, 220, 221, 225, 231, 247, 253, 256, 259, 262, 263, 264, 274, 276, 298, 309, 324, 339, 340, 349, 353, 358, 360, 362, 364, 365, 366, 367, 370, 371, 374, 376, 378, 384, 387, 388, 390, 393, 394, 395, 397, 398, 399, 400, 401, 419, 420, 422, 423, 424, 428, 430, 432, 433, 480, 485, 486, 513, 559, 566, 567, 568, 587, 654, 669, 672, 679, 681, 691, 695, 700, 703, 704, 706, 709, 713, 715, 730, 735, 736, 761, 765, 766, 769, 770, 771, 795, 800, 845, 865, 868, 872, 873, 874, 875, 893, 943, 946, 947, 949, 950, 951, 953, 955, 957, 958, 960, 961, 964, 966, 967, 968, 969, 970, 974, 975, 980, 988, 991, 996, 1000, 1001, 1002, 1004, 1008, 1009], "magnitud": [4, 105, 112, 150, 162, 166, 213, 261, 298, 303, 309, 353, 361, 371, 390, 397, 400, 590, 680, 853, 950, 954, 958, 964, 968, 970, 998, 1005], "discret": [4, 46, 105, 108, 133, 148, 159, 164, 167, 196, 214, 297, 301, 304, 355, 358, 361, 362, 369, 377, 378, 390, 395, 397, 398, 400, 417, 418, 426, 430, 438, 439, 440, 469, 491, 492, 497, 499, 530, 536, 548, 565, 566, 569, 572, 573, 576, 577, 584, 585, 587, 588, 589, 593, 594, 595, 634, 635, 717, 769, 772, 782, 799, 808, 809, 812, 834, 838, 846, 847, 850, 853, 861, 872, 877, 880, 881, 919, 943, 950, 951, 952, 954, 955, 957, 970, 974, 980, 991, 998, 1001, 1009, 1010], "manner": [4, 74, 95, 143, 167, 172, 243, 310, 354, 366, 371, 390, 395, 397, 398, 685, 813, 814, 943, 970, 999, 1006], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 62, 66, 116, 117, 123, 124, 166, 168, 211, 214, 243, 265, 285, 316, 338, 339, 340, 360, 367, 374, 378, 390, 391, 394, 397, 398, 419, 428, 432, 434, 442, 445, 473, 526, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 541, 542, 543, 587, 610, 611, 612, 643, 645, 653, 674, 685, 729, 757, 772, 774, 785, 796, 801, 802, 805, 811, 820, 825, 830, 844, 846, 847, 856, 872, 874, 880, 881, 882, 883, 897, 909, 919, 920, 950, 955, 978, 987, 1004, 1007, 1008, 1010], "decid": [4, 11, 59, 70, 247, 253, 256, 263, 361, 366, 379, 398, 400, 428, 435, 536, 537, 612, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 648, 658, 661, 770, 815, 816, 817, 819, 821, 823, 824, 825, 836, 953, 960, 978, 1009], "therebi": [4, 394, 397, 946, 1006], "assumpt": [4, 9, 25, 27, 36, 67, 77, 78, 98, 154, 164, 196, 225, 298, 371, 376, 377, 380, 388, 389, 390, 392, 394, 395, 398, 400, 425, 429, 431, 465, 480, 489, 509, 511, 518, 627, 631, 772, 775, 776, 785, 810, 864, 865, 948, 950, 954, 955, 956, 957, 959, 960, 961, 964, 967, 970, 1003, 1009], "impli": [4, 149, 338, 339, 340, 395, 397, 400, 452, 550, 559, 587, 588, 599, 710, 896, 950, 951, 989, 1007], "give": [4, 12, 13, 24, 25, 39, 44, 49, 59, 61, 63, 69, 70, 74, 97, 121, 149, 154, 158, 161, 166, 185, 187, 193, 196, 197, 198, 225, 247, 253, 265, 276, 278, 282, 285, 295, 309, 310, 317, 353, 355, 361, 363, 365, 366, 367, 371, 373, 376, 377, 378, 379, 384, 387, 388, 389, 390, 391, 392, 395, 397, 398, 402, 413, 425, 427, 429, 437, 450, 473, 476, 480, 510, 515, 526, 527, 528, 529, 534, 535, 541, 542, 543, 570, 571, 574, 584, 585, 615, 624, 638, 642, 653, 696, 711, 714, 767, 772, 775, 776, 785, 794, 795, 796, 798, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 850, 851, 853, 861, 950, 954, 957, 958, 959, 961, 962, 964, 968, 969, 970, 974, 978, 980, 982, 987, 988, 989, 996, 1000, 1003, 1004, 1006, 1007, 1008, 1010], "lot": [4, 81, 166, 361, 366, 367, 373, 395, 397, 775, 776, 864, 865, 943, 966, 968, 969, 974, 975, 978, 988, 989, 996, 1001, 1003, 1004, 1005, 1006, 1008], "addit": [4, 5, 7, 12, 13, 14, 65, 70, 81, 95, 98, 110, 114, 116, 119, 120, 154, 155, 156, 162, 166, 167, 175, 180, 185, 197, 198, 221, 235, 265, 270, 274, 298, 307, 308, 315, 340, 345, 349, 353, 354, 358, 359, 360, 361, 362, 364, 365, 366, 367, 370, 371, 373, 376, 377, 379, 381, 384, 389, 390, 392, 394, 395, 398, 399, 400, 401, 412, 420, 421, 423, 424, 428, 435, 447, 452, 473, 480, 508, 509, 511, 513, 514, 516, 518, 519, 520, 526, 530, 531, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 588, 589, 596, 605, 607, 608, 612, 615, 616, 617, 618, 619, 620, 621, 622, 647, 664, 665, 669, 675, 676, 678, 717, 733, 734, 763, 770, 771, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 854, 864, 865, 872, 873, 903, 909, 922, 943, 948, 950, 954, 955, 957, 958, 964, 966, 967, 968, 969, 970, 974, 980, 991, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 118, 138, 146, 148, 153, 154, 156, 159, 164, 207, 208, 209, 210, 211, 214, 225, 229, 245, 256, 259, 265, 266, 282, 289, 323, 324, 326, 327, 329, 331, 339, 347, 353, 361, 363, 364, 366, 371, 378, 380, 381, 388, 395, 398, 404, 432, 470, 471, 480, 498, 508, 513, 514, 524, 538, 539, 544, 545, 588, 599, 602, 643, 644, 645, 653, 654, 655, 664, 667, 669, 671, 692, 698, 703, 760, 794, 795, 796, 798, 801, 802, 829, 830, 831, 885, 943, 950, 954, 955, 957, 962, 968, 970, 974, 975, 989, 999, 1007, 1010, 1011], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 14], "011": [4, 6, 264, 371], "131": [4, 13, 55, 110, 371, 954, 997], "rate": [4, 109, 114, 119, 141, 167, 196, 203, 214, 229, 234, 253, 256, 263, 265, 266, 293, 294, 295, 355, 366, 390, 391, 395, 399, 444, 513, 530, 531, 536, 537, 538, 539, 569, 572, 573, 575, 576, 577, 583, 621, 622, 645, 653, 654, 655, 669, 675, 678, 702, 757, 764, 829, 830, 831, 866, 943, 950, 951, 954, 957, 958, 968, 970, 978, 1000, 1004, 1005], "better": [4, 5, 9, 19, 24, 31, 50, 73, 74, 77, 78, 79, 80, 85, 89, 95, 98, 113, 121, 122, 129, 141, 153, 154, 155, 157, 158, 161, 167, 168, 176, 182, 185, 196, 197, 198, 204, 211, 213, 214, 221, 230, 231, 246, 250, 256, 259, 262, 265, 266, 295, 302, 310, 325, 333, 338, 339, 340, 343, 349, 353, 361, 365, 366, 367, 370, 371, 373, 378, 380, 384, 388, 390, 392, 394, 395, 396, 397, 398, 400, 427, 428, 515, 517, 524, 536, 537, 538, 539, 584, 585, 607, 648, 654, 669, 685, 700, 709, 714, 717, 738, 771, 798, 808, 809, 810, 811, 812, 813, 814, 819, 830, 831, 850, 851, 861, 864, 865, 872, 873, 922, 943, 944, 946, 947, 948, 950, 951, 953, 954, 956, 957, 958, 962, 964, 967, 968, 970, 975, 977, 978, 982, 984, 989, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "confirm": [4, 85, 113, 119, 122, 168, 196, 198, 259, 262, 265, 340, 369, 943, 964, 1004], "progress": [4, 7, 8, 95, 132, 146, 162, 189, 281, 310, 363, 366, 369, 370, 379, 381, 386, 390, 536, 537, 669, 802, 804, 807, 822, 830, 831, 978, 987, 989, 996, 998, 1005, 1010], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 59, 61, 79, 80, 81, 84, 91, 98, 101, 122, 127, 135, 154, 161, 166, 167, 168, 185, 196, 197, 198, 201, 204, 214, 221, 225, 231, 241, 258, 259, 262, 263, 265, 266, 271, 276, 294, 298, 309, 313, 316, 325, 335, 338, 340, 349, 353, 361, 365, 366, 367, 370, 371, 373, 376, 377, 378, 388, 390, 392, 394, 395, 396, 397, 398, 399, 400, 421, 425, 430, 440, 449, 450, 456, 477, 481, 487, 534, 535, 538, 539, 541, 542, 544, 545, 566, 567, 599, 627, 628, 631, 632, 633, 641, 659, 660, 662, 668, 669, 672, 681, 718, 721, 765, 770, 772, 779, 781, 785, 788, 791, 813, 814, 838, 842, 843, 844, 853, 864, 865, 874, 877, 880, 881, 882, 883, 909, 943, 946, 947, 949, 950, 951, 952, 953, 954, 957, 958, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 987, 988, 996, 1001, 1002, 1004, 1007, 1009, 1011], "new": [4, 7, 8, 10, 50, 55, 57, 59, 69, 70, 103, 109, 112, 114, 115, 122, 125, 128, 129, 143, 146, 149, 155, 162, 168, 169, 196, 202, 210, 225, 255, 263, 280, 282, 307, 310, 314, 317, 324, 349, 354, 355, 360, 361, 363, 364, 365, 367, 368, 369, 371, 373, 374, 377, 378, 379, 381, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 477, 478, 479, 481, 482, 485, 486, 487, 489, 500, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 558, 559, 560, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 680, 684, 689, 690, 694, 697, 698, 699, 700, 702, 703, 706, 709, 714, 715, 716, 718, 721, 728, 729, 732, 736, 741, 742, 744, 753, 760, 763, 764, 770, 771, 772, 775, 776, 784, 785, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 890, 892, 893, 895, 903, 904, 908, 909, 919, 922, 924, 929, 935, 941, 943, 944, 946, 950, 954, 955, 957, 958, 959, 960, 964, 966, 967, 968, 969, 975, 978, 980, 981, 984, 987, 989, 994, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 361, 366, 951, 973], "1440": 4, "caus": [4, 25, 27, 122, 150, 167, 194, 196, 201, 214, 340, 349, 364, 370, 388, 390, 395, 396, 398, 400, 422, 425, 427, 437, 486, 509, 559, 566, 587, 588, 808, 809, 810, 812, 837, 846, 848, 851, 852, 892, 893, 943, 944, 950, 954, 962, 964, 967, 975, 980, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "signific": [4, 122, 142, 164, 214, 249, 256, 272, 274, 338, 349, 360, 361, 376, 390, 393, 394, 397, 481, 509, 511, 526, 527, 604, 635, 636, 643, 645, 653, 654, 655, 790, 798, 872, 874, 875, 876, 877, 878, 953, 954, 957, 996, 998, 999, 1000, 1004], "overfit": [4, 115, 122, 164, 168, 175, 225, 243, 249, 251, 257, 261, 271, 272, 292, 299, 300, 302, 325, 343, 345, 346, 361, 378, 388, 394, 397, 416, 465, 466, 544, 545, 634, 772, 775, 776, 785, 795, 796, 830, 831, 833, 848, 852, 949, 958, 960, 962, 970, 978, 987, 999], "avoid": [4, 7, 12, 44, 61, 71, 115, 166, 167, 198, 205, 214, 220, 238, 251, 257, 261, 279, 284, 286, 287, 302, 321, 322, 339, 354, 364, 366, 367, 369, 370, 371, 378, 379, 381, 388, 390, 392, 394, 397, 398, 401, 419, 421, 423, 430, 440, 446, 470, 471, 472, 476, 485, 486, 511, 514, 516, 520, 523, 562, 563, 611, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 666, 668, 670, 672, 688, 772, 773, 777, 782, 785, 794, 795, 796, 833, 836, 842, 843, 845, 850, 851, 852, 853, 855, 857, 858, 859, 861, 862, 863, 865, 870, 909, 948, 951, 953, 954, 957, 958, 960, 962, 964, 969, 970, 975, 989, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "kbinsdiscret": [4, 53, 164, 196, 214, 297, 300, 304, 489, 634, 836, 852, 881, 964, 1004, 1008, 1009, 1010], "re": [4, 8, 13, 26, 55, 69, 70, 119, 152, 214, 242, 246, 259, 261, 265, 307, 338, 340, 354, 366, 369, 373, 377, 379, 394, 398, 447, 448, 449, 450, 451, 452, 453, 454, 532, 533, 538, 539, 540, 623, 629, 637, 639, 774, 788, 791, 880, 881, 882, 883, 950, 955, 957, 964, 969, 975, 978, 989, 996, 1000, 1001, 1003, 1005], "fine": [4, 37, 118, 212, 247, 254, 345, 346, 363, 369, 378, 398, 909, 957, 960, 975, 1006], "grain": [4, 31, 37, 230, 247, 300, 371, 398, 975], "still": [4, 32, 44, 53, 61, 81, 99, 117, 119, 122, 129, 149, 155, 166, 168, 175, 196, 198, 214, 230, 258, 259, 265, 298, 308, 309, 338, 339, 349, 355, 360, 365, 366, 367, 369, 370, 371, 373, 376, 378, 390, 394, 397, 398, 401, 419, 423, 432, 452, 473, 556, 604, 609, 612, 614, 693, 731, 753, 756, 765, 766, 775, 776, 788, 791, 851, 853, 872, 890, 943, 944, 948, 950, 953, 957, 960, 962, 969, 970, 973, 975, 978, 996, 998, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011], "express": [4, 7, 12, 149, 154, 166, 256, 257, 308, 322, 340, 360, 361, 366, 371, 390, 395, 398, 428, 434, 435, 565, 566, 568, 692, 772, 785, 794, 795, 796, 797, 800, 820, 950, 954, 958, 964, 965, 970, 1004], "advantag": [4, 5, 39, 95, 100, 196, 197, 225, 242, 257, 310, 349, 378, 388, 394, 395, 398, 400, 420, 424, 438, 511, 566, 626, 651, 652, 738, 801, 802, 803, 833, 834, 872, 873, 874, 875, 876, 877, 878, 943, 946, 949, 950, 951, 954, 955, 957, 958, 964, 968, 969, 970, 999], "final": [4, 26, 40, 42, 45, 69, 70, 79, 81, 85, 90, 100, 109, 111, 113, 115, 119, 120, 123, 129, 132, 143, 154, 162, 172, 175, 184, 185, 193, 196, 198, 213, 214, 218, 225, 238, 245, 254, 262, 306, 307, 325, 353, 355, 364, 366, 369, 377, 378, 387, 388, 390, 391, 394, 397, 398, 416, 421, 425, 426, 430, 437, 440, 442, 513, 532, 533, 544, 545, 547, 604, 624, 630, 636, 656, 667, 671, 695, 772, 801, 802, 833, 834, 869, 872, 943, 944, 950, 951, 954, 957, 960, 961, 964, 967, 978, 987, 1001, 1004, 1005, 1006, 1007, 1009], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 61, 70, 77, 79, 80, 81, 96, 97, 100, 103, 109, 113, 114, 116, 122, 125, 128, 137, 138, 146, 149, 152, 154, 155, 156, 158, 166, 167, 168, 175, 176, 191, 192, 194, 196, 197, 198, 200, 210, 214, 221, 222, 228, 229, 256, 259, 263, 282, 289, 303, 316, 324, 325, 330, 338, 339, 340, 345, 346, 361, 363, 378, 388, 390, 391, 392, 393, 394, 395, 396, 399, 400, 420, 422, 424, 425, 427, 437, 447, 448, 449, 450, 451, 452, 453, 454, 501, 509, 528, 529, 540, 587, 588, 623, 629, 634, 692, 694, 733, 792, 811, 819, 852, 950, 953, 954, 958, 959, 960, 961, 967, 968, 969, 970, 977, 981, 983, 984, 986, 997, 1009, 1010, 1011], "complet": [4, 37, 38, 39, 44, 49, 52, 57, 61, 85, 127, 141, 143, 146, 164, 168, 169, 202, 224, 225, 239, 254, 306, 339, 349, 361, 366, 369, 370, 373, 376, 391, 394, 395, 397, 398, 420, 424, 427, 430, 440, 441, 442, 445, 472, 513, 514, 515, 516, 521, 523, 535, 546, 547, 558, 564, 565, 566, 568, 604, 605, 606, 607, 626, 634, 648, 650, 680, 681, 691, 692, 693, 706, 711, 712, 732, 761, 768, 801, 804, 807, 816, 832, 833, 834, 835, 895, 939, 943, 948, 950, 954, 955, 957, 969, 970, 980, 989, 996, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "induct": [4, 36, 67, 122, 164, 378, 390, 397, 404, 420, 489, 541, 604, 867, 868, 916, 938, 950, 967, 998], "bia": [4, 27, 77, 108, 116, 117, 122, 133, 164, 167, 168, 175, 176, 178, 200, 261, 292, 333, 349, 361, 367, 378, 388, 392, 396, 397, 400, 501, 533, 536, 537, 584, 585, 591, 619, 625, 626, 635, 636, 646, 647, 657, 830, 831, 846, 848, 852, 857, 858, 860, 861, 862, 863, 881, 949, 950, 953, 954, 958, 959, 962, 968, 987], "preserv": [4, 48, 100, 221, 229, 251, 367, 368, 389, 394, 395, 398, 558, 565, 566, 568, 623, 629, 673, 676, 749, 753, 789, 790, 791, 856, 892, 893, 944, 950, 951, 964, 966, 984, 996, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "smooth": [4, 46, 47, 54, 154, 189, 197, 212, 325, 363, 379, 390, 396, 400, 426, 427, 514, 515, 516, 523, 534, 535, 536, 537, 541, 542, 543, 567, 568, 596, 599, 653, 808, 809, 810, 812, 850, 861, 880, 881, 882, 883, 950, 956, 964, 968, 969, 970, 989], "local": [4, 39, 60, 95, 98, 154, 155, 164, 197, 216, 219, 221, 223, 225, 234, 277, 290, 345, 346, 354, 363, 364, 366, 369, 371, 373, 381, 390, 395, 397, 398, 400, 425, 430, 440, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 479, 515, 517, 521, 524, 526, 536, 537, 540, 543, 587, 588, 665, 666, 667, 668, 669, 670, 672, 673, 733, 734, 816, 819, 822, 824, 834, 843, 865, 868, 876, 952, 953, 957, 958, 970, 988, 990, 991, 1000, 1004, 1008], "attempt": [4, 54, 192, 202, 251, 338, 353, 365, 378, 390, 402, 428, 435, 446, 608, 665, 666, 670, 789, 815, 816, 817, 819, 821, 823, 824, 825, 851, 853, 870, 892, 893, 950, 951, 957, 970, 980, 1003, 1008], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 57, 59, 60, 69, 70, 72, 73, 74, 84, 85, 88, 90, 91, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 127, 128, 129, 130, 131, 132, 142, 144, 146, 151, 153, 158, 161, 162, 166, 167, 169, 172, 175, 182, 183, 185, 190, 194, 196, 197, 198, 200, 201, 204, 211, 214, 218, 225, 226, 229, 230, 231, 232, 235, 236, 238, 241, 244, 246, 250, 251, 252, 254, 256, 257, 258, 259, 261, 262, 265, 266, 274, 276, 279, 281, 285, 287, 289, 292, 293, 295, 298, 299, 300, 301, 306, 308, 309, 310, 313, 314, 315, 318, 325, 331, 333, 339, 340, 343, 344, 347, 349, 353, 354, 355, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 376, 377, 378, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 407, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 438, 439, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 496, 499, 500, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 683, 684, 686, 689, 695, 700, 703, 704, 705, 713, 714, 720, 721, 723, 725, 726, 728, 729, 733, 734, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 751, 753, 754, 755, 756, 758, 759, 760, 762, 763, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 898, 903, 904, 909, 911, 912, 922, 930, 931, 932, 935, 944, 946, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 978, 980, 984, 986, 987, 988, 989, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "sine": [4, 149, 154, 155, 164, 190, 202, 240, 248, 345, 362, 592, 770, 771, 953, 970], "cosin": [4, 40, 270, 276, 281, 358, 361, 378, 390, 395, 396, 420, 424, 428, 435, 512, 567, 568, 597, 673, 735, 736, 737, 740, 745, 746, 749, 753, 754, 755, 813, 814, 818, 845, 957, 970, 991, 1006], "match": [4, 37, 45, 95, 98, 102, 164, 172, 174, 196, 215, 219, 228, 267, 340, 361, 364, 367, 369, 390, 395, 397, 398, 410, 427, 442, 444, 485, 486, 492, 503, 508, 514, 519, 525, 528, 544, 545, 549, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 635, 641, 642, 662, 663, 676, 679, 680, 681, 689, 691, 695, 709, 761, 813, 814, 818, 822, 836, 837, 838, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 872, 879, 896, 922, 951, 953, 954, 956, 957, 976, 980, 989, 991, 996, 1002, 1003, 1004, 1006, 1008, 1009], "togeth": [4, 12, 51, 59, 70, 118, 129, 149, 155, 166, 177, 218, 221, 310, 328, 344, 349, 367, 369, 376, 377, 378, 384, 390, 397, 398, 405, 429, 431, 544, 545, 666, 691, 772, 785, 833, 834, 950, 951, 955, 961, 964, 970, 971, 978, 981, 983, 1002], "equival": [4, 14, 119, 125, 149, 154, 166, 214, 246, 265, 340, 349, 353, 364, 371, 374, 377, 378, 390, 391, 392, 393, 394, 395, 397, 399, 400, 420, 422, 423, 424, 425, 427, 428, 435, 447, 452, 486, 511, 518, 535, 536, 538, 539, 540, 542, 565, 568, 590, 593, 596, 598, 601, 623, 624, 625, 629, 631, 635, 636, 643, 644, 645, 646, 649, 653, 654, 657, 660, 664, 665, 670, 684, 685, 698, 709, 716, 722, 723, 724, 736, 745, 754, 755, 770, 771, 775, 776, 779, 781, 804, 807, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 830, 836, 842, 843, 845, 848, 849, 850, 851, 853, 860, 862, 863, 896, 907, 940, 943, 948, 950, 951, 952, 954, 960, 964, 968, 969, 970, 1004, 1005, 1006, 1007, 1009, 1010], "importantli": [4, 13, 96, 167, 172, 298, 390], "jump": [4, 197, 298, 363, 366, 398, 852], "functiontransform": [4, 69, 115, 196, 214, 317, 443, 964, 1001, 1002, 1004, 1009, 1010, 1011], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 55, 56, 60, 69, 91, 101, 103, 105, 113, 115, 121, 122, 129, 152, 155, 157, 162, 175, 176, 184, 185, 188, 196, 197, 204, 205, 206, 214, 234, 237, 238, 244, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 270, 276, 281, 286, 289, 295, 298, 300, 306, 321, 325, 338, 340, 343, 347, 353, 359, 360, 361, 366, 367, 371, 372, 374, 376, 378, 388, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 928, 929, 935, 938, 939, 940, 941, 942, 944, 954, 957, 961, 962, 969, 970, 975, 980, 985, 987, 989, 993, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lambda": [4, 7, 8, 10, 19, 55, 72, 121, 136, 176, 214, 256, 257, 302, 317, 386, 390, 395, 397, 398, 621, 622, 623, 624, 837, 849, 950, 964, 984, 1004, 1010], "sin": [4, 13, 19, 39, 96, 111, 121, 122, 126, 128, 141, 149, 155, 156, 158, 175, 176, 190, 197, 202, 219, 231, 247, 288, 299, 307, 332, 345, 346, 400, 493, 592, 676, 739, 988], "pi": [4, 13, 34, 39, 40, 96, 105, 126, 128, 141, 149, 176, 184, 190, 197, 219, 241, 242, 243, 246, 247, 270, 289, 307, 346, 381, 396, 400, 493, 494, 495, 592, 619, 948, 949, 950, 956, 988], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 126, 128, 154, 164, 166, 197, 219, 256, 270, 310, 346, 369, 396, 398, 427, 429, 431, 465, 488, 568, 676, 695, 739, 768, 949, 964, 978, 990, 991], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 61, 68, 75, 85, 98, 100, 122, 124, 126, 149, 150, 154, 156, 164, 166, 167, 169, 196, 197, 198, 201, 202, 216, 221, 223, 242, 246, 256, 257, 261, 264, 265, 295, 297, 299, 304, 307, 312, 319, 325, 330, 333, 334, 335, 338, 339, 340, 349, 364, 366, 367, 370, 376, 378, 388, 390, 391, 395, 396, 397, 398, 400, 401, 428, 443, 467, 473, 477, 491, 501, 502, 534, 535, 536, 537, 541, 542, 543, 565, 566, 567, 568, 583, 586, 626, 635, 636, 649, 650, 651, 664, 668, 669, 679, 728, 760, 770, 777, 782, 790, 799, 819, 830, 831, 837, 842, 843, 845, 849, 850, 851, 853, 858, 861, 869, 872, 873, 877, 880, 881, 882, 883, 892, 893, 909, 928, 943, 948, 950, 951, 953, 954, 955, 961, 964, 967, 969, 970, 985, 987, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "expans": [4, 161, 308, 428, 848, 1005], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 116, 122, 127, 149, 154, 156, 167, 186, 198, 213, 292, 300, 349, 353, 359, 368, 379, 390, 392, 399, 635, 636, 872, 873, 879, 948, 987, 1002], "beyond": [4, 27, 197, 198, 353, 355, 365, 366, 376, 388, 397, 877, 951, 955, 964, 969, 975, 1004], "pd": [4, 12, 25, 70, 72, 116, 122, 154, 161, 166, 167, 168, 175, 185, 196, 204, 214, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 309, 310, 338, 339, 370, 378, 391, 442, 444, 604, 605, 606, 607, 609, 753, 890, 892, 893, 943, 944, 961, 964, 1007, 1009, 1010], "hour_df": 4, "datafram": [4, 25, 69, 70, 72, 119, 122, 154, 161, 166, 167, 168, 175, 185, 204, 214, 235, 238, 246, 254, 256, 257, 259, 267, 268, 309, 310, 338, 339, 360, 361, 366, 367, 370, 378, 391, 412, 421, 422, 424, 425, 427, 442, 444, 445, 446, 459, 460, 461, 462, 466, 467, 468, 469, 473, 477, 478, 479, 481, 482, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 665, 666, 772, 775, 776, 785, 799, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 888, 915, 925, 928, 943, 944, 975, 989, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "arang": [4, 11, 13, 16, 40, 57, 59, 64, 71, 72, 78, 79, 103, 106, 109, 118, 119, 120, 121, 123, 124, 127, 131, 142, 149, 151, 156, 157, 161, 162, 169, 180, 196, 199, 201, 205, 220, 228, 230, 251, 256, 259, 264, 267, 274, 276, 289, 292, 300, 309, 313, 314, 316, 318, 325, 332, 338, 340, 345, 346, 347, 349, 376, 387, 394, 398, 443, 521, 799, 848, 852, 949, 950, 958, 964, 968, 985], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 57, 71, 79, 84, 95, 98, 105, 113, 117, 118, 125, 127, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 175, 187, 193, 209, 210, 212, 213, 218, 220, 222, 225, 230, 233, 245, 254, 280, 282, 289, 292, 294, 295, 299, 300, 301, 306, 309, 310, 318, 324, 325, 329, 330, 331, 334, 335, 376, 387, 395, 397, 398, 424, 443, 561, 608, 799, 848, 852, 950, 964, 985, 988, 1001], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 57, 61, 89, 96, 99, 106, 127, 172, 187, 212, 214, 217, 218, 219, 220, 221, 222, 228, 229, 232, 234, 276, 280, 293, 298, 299, 306, 309, 325, 338, 339, 340, 349, 358, 361, 367, 370, 371, 378, 386, 391, 395, 398, 399, 406, 412, 421, 422, 424, 425, 427, 442, 444, 446, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 665, 666, 667, 668, 669, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 944, 946, 950, 955, 957, 964, 965, 966, 980, 985, 988, 989, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1010], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 60, 61, 67, 93, 107, 127, 164, 190, 197, 202, 217, 219, 222, 225, 228, 229, 322, 325, 360, 362, 366, 367, 374, 378, 390, 391, 395, 398, 400, 420, 430, 440, 442, 445, 465, 467, 468, 469, 470, 471, 477, 478, 479, 481, 487, 491, 510, 518, 526, 561, 563, 612, 620, 634, 649, 668, 713, 754, 794, 798, 802, 840, 888, 892, 893, 908, 919, 940, 941, 948, 950, 951, 954, 961, 965, 970, 980, 986, 996, 1000, 1003, 1004, 1005, 1008, 1010], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 55, 56, 57, 58, 59, 61, 66, 74, 79, 85, 89, 90, 91, 97, 99, 100, 101, 102, 104, 111, 112, 118, 125, 127, 128, 129, 130, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 172, 176, 179, 186, 188, 192, 193, 194, 197, 198, 199, 205, 208, 209, 210, 213, 217, 218, 219, 220, 221, 222, 225, 230, 231, 232, 241, 242, 243, 244, 245, 246, 247, 251, 252, 257, 259, 270, 276, 282, 283, 284, 285, 286, 287, 288, 292, 298, 300, 301, 303, 310, 315, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 338, 344, 345, 346, 392, 608, 948, 950, 987], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 71, 77, 78, 79, 80, 81, 85, 90, 91, 94, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 118, 119, 120, 121, 124, 126, 127, 131, 135, 138, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 166, 167, 168, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 213, 214, 218, 219, 220, 222, 225, 229, 230, 231, 232, 235, 241, 242, 243, 244, 245, 246, 247, 251, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 274, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 298, 299, 300, 302, 303, 307, 315, 316, 318, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 344, 345, 360, 361, 363, 373, 390, 397, 398, 425, 470, 471, 483, 560, 561, 754, 928, 968, 970, 1001, 1006, 1008], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 121, 124, 127, 136, 149, 164, 172, 196, 217, 219, 224, 239, 257, 260, 265, 279, 284, 287, 289, 297, 298, 304, 317, 325, 331, 339, 340, 360, 376, 378, 388, 389, 390, 391, 394, 395, 397, 398, 404, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 473, 475, 479, 486, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 737, 740, 770, 771, 772, 775, 776, 782, 783, 785, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 861, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 914, 943, 946, 951, 954, 956, 966, 969, 1004, 1005, 1006, 1008, 1009, 1010], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 59, 60, 62, 64, 69, 73, 85, 95, 97, 104, 106, 115, 118, 122, 127, 143, 149, 155, 172, 197, 217, 218, 219, 221, 229, 230, 231, 234, 235, 242, 247, 264, 267, 268, 276, 285, 286, 300, 308, 338, 339, 340, 347, 349, 353, 358, 361, 362, 363, 366, 372, 376, 377, 378, 387, 389, 390, 393, 395, 396, 397, 398, 400, 422, 425, 426, 427, 430, 440, 442, 443, 444, 445, 459, 460, 461, 475, 509, 511, 512, 515, 516, 517, 518, 520, 521, 526, 550, 559, 565, 566, 568, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 615, 617, 618, 619, 620, 665, 666, 667, 669, 670, 671, 673, 676, 772, 775, 776, 785, 803, 813, 814, 821, 822, 823, 824, 833, 838, 839, 845, 850, 864, 865, 866, 885, 913, 946, 947, 948, 949, 950, 952, 954, 955, 957, 958, 959, 960, 964, 965, 966, 967, 968, 969, 970, 974, 975, 980, 987, 989, 990, 991, 996, 997, 999, 1004, 1005, 1006, 1010], "akin": [4, 197, 378], "sort": [4, 8, 10, 12, 19, 20, 24, 59, 69, 113, 119, 122, 128, 146, 175, 196, 197, 214, 233, 256, 257, 260, 270, 288, 332, 338, 345, 346, 366, 369, 373, 374, 378, 394, 397, 398, 400, 511, 518, 532, 543, 558, 587, 594, 674, 688, 694, 704, 705, 713, 729, 758, 759, 762, 764, 772, 796, 808, 809, 810, 811, 812, 813, 814, 821, 823, 824, 825, 828, 838, 844, 846, 847, 850, 852, 861, 874, 877, 909, 914, 950, 957, 960, 964, 978, 989, 996, 1000, 1006, 1007, 1008, 1010, 1011], "analog": [4, 124, 371, 397, 954, 955, 969, 1005], "clock": 4, "25th": [4, 851], "back": [4, 100, 236, 354, 366, 367, 379, 384, 391, 398, 413, 422, 425, 437, 459, 460, 461, 485, 486, 510, 511, 512, 515, 517, 518, 521, 558, 607, 635, 636, 643, 645, 653, 654, 655, 703, 838, 840, 841, 842, 846, 847, 848, 850, 851, 853, 864, 865, 872, 950, 954, 958, 975, 980, 989, 999, 1004, 1006, 1007, 1010], "natur": [4, 31, 122, 156, 166, 167, 172, 196, 197, 213, 214, 221, 241, 247, 265, 338, 366, 367, 378, 395, 397, 398, 401, 423, 428, 435, 528, 567, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 669, 680, 716, 730, 732, 815, 816, 817, 819, 821, 823, 824, 825, 852, 907, 950, 951, 953, 954, 957, 959, 964, 968, 974, 977, 996, 1004], "sp": [4, 166, 944, 988], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 55, 56, 58, 59, 60, 64, 70, 71, 73, 85, 89, 90, 91, 100, 101, 102, 110, 112, 113, 118, 119, 125, 127, 128, 130, 131, 136, 138, 144, 150, 151, 152, 153, 157, 166, 172, 179, 181, 186, 187, 188, 189, 191, 193, 194, 200, 203, 205, 207, 208, 209, 210, 212, 213, 217, 218, 219, 221, 222, 230, 231, 232, 236, 242, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 259, 261, 265, 267, 276, 279, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 299, 300, 306, 307, 308, 309, 310, 315, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 338, 344, 345, 346, 353, 354, 360, 361, 363, 364, 366, 367, 368, 370, 373, 374, 376, 381, 387, 388, 390, 391, 393, 394, 395, 397, 399, 416, 421, 422, 425, 427, 437, 446, 500, 505, 511, 515, 517, 518, 524, 526, 527, 567, 584, 585, 587, 608, 616, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 650, 656, 662, 663, 665, 666, 669, 670, 684, 690, 691, 694, 706, 710, 716, 717, 733, 734, 772, 785, 798, 808, 809, 810, 811, 812, 813, 814, 820, 822, 829, 844, 846, 848, 852, 867, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 887, 892, 893, 919, 943, 946, 947, 950, 951, 952, 954, 956, 957, 959, 961, 964, 966, 968, 969, 970, 974, 978, 980, 984, 985, 987, 988, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "colorbar": [4, 11, 30, 40, 95, 106, 117, 144, 150, 152, 153, 155, 167, 217, 229, 245, 267, 298, 325, 674, 1008], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 79, 309, 427, 511, 943, 954, 964], "166": [4, 295, 371, 954, 996], "simpl": [4, 16, 27, 70, 74, 77, 84, 85, 95, 120, 156, 164, 197, 213, 237, 257, 277, 290, 310, 321, 338, 340, 344, 349, 364, 366, 367, 368, 369, 370, 372, 376, 377, 378, 379, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 404, 410, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 491, 499, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 761, 763, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 946, 948, 949, 950, 951, 953, 954, 957, 964, 966, 968, 970, 975, 978, 980, 989, 993, 996], "wors": [4, 85, 150, 202, 256, 264, 349, 390, 400, 411, 443, 459, 460, 461, 529, 531, 533, 535, 537, 539, 542, 545, 547, 587, 588, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 647, 649, 650, 655, 656, 657, 681, 697, 698, 699, 703, 760, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 954, 964, 1005], "further": [4, 25, 42, 77, 85, 95, 113, 118, 120, 149, 154, 166, 168, 175, 217, 222, 253, 256, 257, 263, 325, 339, 347, 353, 366, 376, 378, 389, 390, 392, 395, 397, 398, 400, 430, 440, 492, 509, 512, 559, 591, 599, 605, 635, 636, 643, 645, 653, 654, 655, 668, 672, 712, 749, 753, 756, 765, 766, 809, 815, 816, 823, 824, 851, 853, 872, 874, 877, 909, 953, 954, 956, 957, 958, 960, 964, 968, 969, 987, 989, 1005, 1009], "analyz": [4, 7, 17, 265, 338, 340, 370, 371, 390, 398, 480, 565, 566, 568, 763, 951, 954, 961, 962, 970, 989, 996, 1005], "reason": [4, 8, 12, 42, 53, 69, 122, 146, 166, 167, 172, 196, 197, 204, 214, 225, 229, 230, 234, 253, 256, 257, 262, 276, 299, 333, 339, 340, 349, 353, 354, 355, 361, 365, 366, 367, 369, 373, 376, 377, 378, 379, 390, 391, 392, 395, 397, 398, 400, 485, 509, 551, 615, 623, 629, 631, 649, 664, 669, 738, 772, 785, 817, 822, 829, 848, 869, 943, 944, 949, 950, 951, 954, 956, 957, 958, 960, 964, 968, 969, 978, 989, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "disappoint": 4, "outcom": [4, 166, 378, 546, 635, 685, 717, 767, 801, 867, 868, 869, 874, 877, 950, 954, 970, 977, 989, 1000, 1004, 1006], "end": [4, 11, 26, 52, 73, 80, 85, 115, 129, 201, 204, 244, 251, 256, 258, 260, 308, 309, 313, 316, 317, 339, 364, 366, 367, 369, 376, 378, 381, 387, 390, 391, 393, 397, 428, 434, 446, 465, 466, 485, 486, 514, 523, 534, 535, 536, 537, 541, 542, 543, 622, 623, 624, 627, 628, 629, 630, 631, 632, 637, 638, 639, 640, 658, 659, 660, 661, 772, 775, 776, 785, 792, 794, 831, 833, 870, 880, 881, 882, 883, 913, 914, 938, 943, 950, 951, 953, 954, 964, 966, 968, 978, 986, 989, 1001, 1003, 1006, 1009, 1010], "altern": [4, 26, 70, 85, 116, 117, 123, 129, 168, 180, 196, 214, 226, 244, 247, 265, 306, 338, 339, 340, 349, 361, 364, 369, 371, 376, 378, 381, 385, 387, 388, 390, 391, 392, 394, 395, 397, 398, 400, 420, 421, 424, 425, 430, 441, 476, 515, 517, 518, 524, 530, 531, 534, 535, 536, 537, 541, 542, 543, 559, 565, 566, 568, 594, 597, 620, 669, 682, 684, 746, 749, 753, 756, 774, 802, 837, 843, 846, 858, 865, 867, 880, 881, 882, 883, 922, 948, 950, 951, 953, 954, 957, 958, 962, 964, 966, 967, 969, 970, 975, 984, 989, 991, 1001, 1003, 1009, 1010], "larger": [4, 7, 27, 37, 39, 42, 47, 79, 81, 91, 105, 113, 123, 150, 155, 156, 162, 166, 167, 172, 176, 211, 212, 213, 222, 229, 231, 241, 247, 257, 259, 265, 266, 278, 292, 293, 295, 298, 325, 339, 340, 359, 361, 366, 371, 376, 378, 387, 388, 390, 391, 392, 394, 395, 397, 398, 400, 419, 422, 427, 428, 430, 432, 434, 492, 504, 518, 521, 538, 539, 540, 544, 545, 559, 566, 620, 629, 649, 650, 651, 652, 656, 664, 669, 680, 695, 711, 770, 818, 819, 850, 852, 853, 861, 866, 908, 909, 925, 928, 946, 947, 950, 951, 953, 954, 957, 958, 962, 964, 968, 969, 987, 989, 1000, 1001, 1004, 1005, 1006, 1009, 1010], "periodic_spline_transform": 4, "n_spline": [4, 852], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 54, 55, 61, 97, 100, 105, 114, 118, 119, 121, 124, 129, 138, 150, 156, 157, 169, 175, 196, 197, 204, 207, 214, 217, 231, 232, 250, 256, 257, 258, 268, 276, 281, 283, 287, 302, 308, 309, 314, 317, 323, 325, 326, 329, 330, 332, 338, 339, 361, 363, 366, 367, 372, 374, 378, 390, 394, 397, 400, 401, 402, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 683, 684, 685, 687, 688, 689, 690, 692, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 710, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 861, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 895, 896, 897, 898, 901, 903, 908, 909, 912, 913, 914, 915, 919, 922, 923, 925, 928, 929, 935, 938, 939, 941, 943, 950, 954, 964, 967, 970, 980, 984, 989, 991, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "degre": [4, 16, 34, 97, 112, 154, 161, 172, 175, 184, 185, 197, 231, 236, 241, 242, 243, 246, 247, 256, 270, 295, 308, 309, 322, 332, 395, 399, 430, 475, 512, 518, 616, 617, 620, 633, 750, 770, 772, 819, 848, 852, 874, 875, 876, 877, 878, 946, 947, 949, 950, 951, 952, 954, 955, 957, 960, 964, 967, 969, 987, 999, 1005, 1009, 1010], "n_knot": [4, 197, 309, 852, 964, 1009], "include_bia": [4, 175, 270, 848, 852, 1010], "knot": [4, 197, 309, 852, 964, 1009], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 79, 80, 94, 96, 105, 111, 120, 122, 125, 149, 150, 152, 153, 154, 155, 156, 158, 175, 176, 178, 186, 190, 196, 197, 198, 202, 206, 207, 208, 209, 210, 214, 222, 225, 228, 229, 231, 232, 245, 256, 258, 259, 263, 264, 265, 266, 270, 281, 282, 288, 289, 299, 301, 310, 324, 325, 328, 330, 331, 333, 334, 335, 608, 609, 797, 813, 814, 988], "again": [4, 66, 71, 122, 153, 155, 157, 158, 166, 167, 221, 257, 338, 349, 369, 374, 378, 379, 390, 391, 392, 397, 398, 450, 544, 545, 611, 624, 628, 630, 632, 638, 640, 642, 669, 943, 950, 954, 968, 993, 996, 1004], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 57, 59, 60, 65, 69, 73, 74, 79, 84, 94, 95, 96, 98, 101, 111, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 138, 142, 144, 150, 151, 153, 155, 156, 161, 162, 164, 167, 168, 180, 184, 185, 196, 198, 203, 205, 208, 209, 210, 211, 212, 216, 218, 220, 223, 225, 228, 229, 230, 231, 233, 234, 241, 243, 245, 246, 247, 254, 256, 258, 259, 262, 263, 265, 266, 276, 281, 282, 286, 289, 292, 294, 300, 301, 306, 308, 315, 316, 318, 322, 324, 325, 328, 329, 330, 331, 334, 335, 338, 339, 347, 353, 359, 360, 361, 366, 367, 378, 387, 388, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 894, 897, 898, 903, 907, 909, 911, 914, 918, 920, 923, 925, 929, 930, 931, 932, 933, 934, 935, 944, 949, 950, 954, 955, 956, 957, 958, 960, 964, 965, 966, 967, 968, 969, 970, 985, 986, 988, 989, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1010], "concat": [4, 161, 185, 214], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 57, 79, 81, 88, 89, 95, 98, 102, 106, 112, 117, 118, 125, 138, 144, 152, 153, 167, 175, 179, 187, 188, 205, 208, 209, 210, 212, 218, 219, 220, 229, 230, 233, 250, 251, 276, 279, 280, 282, 284, 285, 287, 289, 292, 294, 295, 298, 300, 313, 314, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 335, 344, 674, 985, 986], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 25, 27, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 66, 79, 81, 88, 89, 95, 98, 102, 112, 117, 118, 125, 138, 144, 152, 153, 167, 179, 188, 205, 208, 209, 210, 212, 218, 219, 220, 226, 229, 230, 233, 238, 250, 251, 276, 280, 282, 286, 289, 292, 294, 295, 298, 300, 308, 313, 314, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 335, 344, 363, 391, 674, 885, 954, 964, 970, 985, 986], "tab20b": 4, "stai": [4, 26, 37, 105, 166, 339, 365, 366, 369, 378, 379, 959, 1002], "midnight": 4, "fewer": [4, 13, 26, 110, 118, 120, 196, 353, 399, 400, 426, 439, 530, 571, 673, 803, 913, 950, 955, 957, 1001, 1002, 1003], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 61, 77, 84, 85, 104, 116, 123, 129, 141, 142, 143, 146, 154, 162, 166, 167, 168, 169, 172, 196, 197, 214, 235, 241, 247, 253, 254, 259, 263, 264, 266, 285, 298, 306, 309, 314, 325, 338, 339, 340, 349, 353, 355, 361, 362, 364, 366, 367, 369, 370, 371, 373, 376, 378, 379, 381, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 422, 423, 428, 434, 435, 438, 446, 473, 480, 498, 501, 509, 511, 516, 520, 526, 528, 538, 539, 543, 544, 565, 566, 568, 570, 581, 588, 604, 607, 626, 635, 649, 651, 653, 655, 664, 665, 669, 672, 700, 703, 721, 733, 734, 738, 760, 767, 770, 771, 775, 776, 790, 801, 802, 815, 816, 817, 819, 821, 822, 823, 824, 825, 848, 850, 857, 858, 860, 861, 862, 863, 870, 908, 909, 911, 919, 922, 943, 944, 948, 949, 950, 951, 952, 953, 954, 955, 957, 960, 961, 962, 967, 968, 969, 970, 973, 975, 978, 985, 987, 989, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 330, 336, 363], "132": [4, 13, 55, 110, 397], "013": [4, 339], "successfulli": [4, 13, 302, 365, 369, 398, 968], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 77, 113, 120, 122, 124, 127, 143, 166, 175, 176, 194, 201, 204, 227, 229, 234, 257, 263, 285, 300, 333, 339, 340, 349, 358, 360, 363, 366, 371, 376, 378, 388, 389, 390, 392, 394, 395, 397, 398, 399, 401, 423, 424, 428, 435, 438, 470, 511, 521, 526, 532, 533, 534, 535, 540, 541, 542, 550, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 604, 620, 629, 649, 650, 651, 652, 664, 669, 672, 756, 772, 775, 776, 785, 794, 795, 796, 797, 800, 850, 861, 864, 865, 880, 881, 882, 883, 943, 946, 948, 949, 950, 951, 954, 957, 966, 967, 971, 980, 988, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1010], "choic": [4, 7, 40, 46, 64, 69, 77, 103, 149, 150, 156, 161, 185, 197, 234, 250, 254, 256, 259, 281, 308, 338, 339, 349, 353, 364, 367, 370, 376, 381, 390, 392, 394, 396, 397, 399, 400, 430, 440, 449, 450, 451, 452, 453, 454, 456, 515, 517, 518, 524, 536, 615, 624, 625, 633, 635, 636, 638, 646, 657, 669, 681, 802, 815, 816, 821, 823, 824, 850, 853, 861, 863, 872, 873, 896, 943, 948, 950, 951, 952, 954, 955, 960, 962, 967, 968, 969, 970, 1003, 1006, 1007, 1011], "arbitrari": [4, 85, 95, 96, 97, 115, 156, 175, 196, 213, 214, 254, 298, 302, 308, 338, 347, 354, 366, 376, 378, 391, 394, 395, 397, 398, 402, 428, 433, 435, 443, 509, 510, 536, 537, 558, 616, 625, 646, 657, 665, 773, 774, 778, 780, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 837, 839, 852, 943, 945, 946, 950, 951, 954, 957, 964, 975, 989, 996, 997, 1000, 1002, 1003, 1004, 1006, 1010], "held": [4, 8, 70, 103, 123, 168, 204, 243, 259, 264, 274, 397, 536, 537, 538, 539, 772, 775, 776, 785, 843, 943, 944, 953, 962, 989], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 57, 59, 63, 66, 79, 80, 84, 89, 90, 91, 93, 98, 100, 101, 107, 112, 118, 119, 127, 151, 156, 157, 164, 166, 168, 175, 179, 185, 188, 190, 192, 194, 196, 197, 198, 202, 205, 208, 209, 213, 214, 217, 218, 219, 220, 221, 225, 228, 230, 234, 243, 247, 250, 253, 257, 263, 265, 266, 274, 276, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 299, 300, 302, 313, 314, 318, 321, 324, 325, 326, 327, 329, 330, 334, 335, 338, 339, 340, 344, 349, 353, 355, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 376, 378, 379, 389, 390, 395, 396, 397, 398, 401, 402, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 438, 439, 447, 450, 452, 475, 481, 489, 491, 492, 496, 499, 502, 507, 510, 512, 518, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 587, 588, 605, 608, 609, 610, 614, 615, 616, 621, 622, 628, 632, 634, 647, 648, 650, 652, 653, 655, 656, 659, 660, 665, 666, 667, 668, 669, 670, 671, 676, 682, 683, 686, 689, 693, 698, 700, 706, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 739, 754, 755, 770, 771, 772, 785, 794, 803, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 830, 831, 838, 852, 866, 867, 868, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 890, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 966, 967, 969, 970, 974, 975, 984, 987, 988, 989, 996, 997, 998, 1000, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 298], "insight": [4, 7, 166, 197, 198, 214, 294, 298, 338, 347, 388, 772, 775, 776, 785, 796, 961, 970, 978], "last_hour": 4, "slice": [4, 17, 118, 205, 219, 222, 230, 279, 284, 287, 309, 310, 321, 361, 367, 374, 391, 442, 445, 470, 471, 485, 523, 616, 749, 753, 756, 888, 912, 913, 925, 1008, 1010], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 59, 66, 74, 95, 98, 106, 118, 119, 126, 129, 158, 166, 167, 190, 195, 211, 212, 217, 218, 219, 233, 244, 295, 298, 300, 306, 308, 313, 314, 318, 332, 344], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 57, 59, 62, 63, 64, 65, 66, 71, 72, 77, 78, 79, 80, 84, 85, 90, 91, 94, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 126, 128, 129, 132, 136, 142, 149, 150, 154, 155, 156, 157, 158, 161, 164, 169, 172, 175, 176, 178, 179, 180, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 211, 213, 214, 218, 219, 220, 225, 230, 231, 232, 234, 235, 243, 250, 251, 254, 255, 257, 258, 259, 260, 262, 265, 266, 267, 268, 269, 270, 271, 274, 281, 283, 285, 288, 293, 295, 298, 299, 303, 306, 307, 310, 312, 316, 317, 318, 319, 332, 333, 338, 339, 343, 344, 345, 346, 355, 358, 359, 360, 365, 366, 367, 370, 374, 378, 379, 387, 388, 389, 400, 401, 407, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 440, 443, 447, 464, 465, 466, 470, 471, 472, 473, 479, 480, 485, 486, 489, 491, 492, 496, 499, 500, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 547, 569, 570, 571, 572, 573, 575, 576, 577, 581, 582, 583, 586, 587, 608, 635, 636, 643, 644, 645, 650, 651, 652, 653, 654, 655, 674, 675, 677, 678, 679, 680, 681, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 700, 701, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 729, 730, 731, 732, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 819, 820, 822, 823, 830, 831, 833, 837, 840, 841, 844, 846, 847, 856, 867, 868, 869, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 892, 897, 898, 919, 920, 925, 943, 950, 951, 955, 956, 957, 958, 960, 961, 964, 968, 969, 970, 974, 976, 980, 985, 987, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "actual": [4, 27, 46, 59, 85, 110, 172, 185, 196, 204, 243, 259, 340, 349, 353, 355, 363, 364, 366, 367, 370, 371, 376, 377, 378, 388, 390, 395, 398, 399, 413, 486, 492, 493, 504, 515, 517, 524, 539, 540, 622, 625, 635, 636, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 657, 664, 668, 672, 680, 685, 691, 697, 698, 699, 760, 770, 775, 776, 790, 791, 819, 850, 872, 878, 900, 901, 902, 929, 946, 953, 954, 957, 961, 962, 1003, 1004, 1010], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 79, 80, 91, 95, 110, 118, 141, 149, 150, 154, 155, 158, 162, 167, 175, 184, 185, 186, 188, 192, 196, 197, 198, 202, 205, 208, 209, 214, 225, 241, 244, 279, 281, 292, 293, 295, 318, 335, 344, 345, 346, 366, 381, 383, 390, 397, 400, 532, 533, 608, 960, 961, 970, 974, 980], "One": [4, 9, 12, 24, 30, 49, 90, 100, 103, 117, 119, 122, 164, 169, 174, 211, 215, 225, 235, 246, 256, 263, 266, 285, 299, 320, 322, 336, 339, 353, 363, 366, 377, 378, 390, 393, 395, 396, 397, 398, 401, 423, 427, 450, 452, 456, 489, 543, 616, 635, 643, 645, 650, 652, 653, 654, 763, 778, 779, 801, 802, 803, 834, 835, 846, 876, 919, 944, 946, 950, 951, 952, 953, 954, 955, 957, 958, 961, 962, 964, 969, 976, 991, 1000, 1002, 1009, 1011], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 60, 71, 72, 77, 78, 79, 80, 84, 85, 94, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 142, 149, 150, 154, 155, 156, 157, 158, 172, 175, 176, 178, 180, 181, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 220, 228, 229, 230, 231, 232, 235, 243, 251, 253, 255, 256, 258, 259, 260, 261, 263, 265, 266, 268, 269, 270, 271, 281, 282, 283, 288, 293, 299, 303, 307, 310, 315, 324, 327, 332, 333, 338, 343, 344, 345, 346, 677], "draw": [4, 7, 16, 59, 158, 166, 192, 235, 263, 325, 372, 393, 395, 396, 397, 532, 533, 534, 535, 540, 541, 542, 543, 588, 611, 884, 886, 953, 974, 983, 1009, 1010], "conclus": [4, 100, 166, 167, 168, 196, 198, 256, 349, 397, 983], "abov": [4, 25, 26, 37, 44, 65, 69, 112, 115, 120, 122, 132, 146, 166, 167, 169, 182, 196, 198, 202, 207, 229, 232, 256, 262, 281, 300, 303, 307, 309, 339, 340, 347, 349, 353, 354, 355, 360, 361, 363, 364, 365, 366, 367, 369, 371, 376, 378, 379, 390, 391, 392, 394, 395, 396, 398, 400, 420, 424, 442, 445, 466, 472, 473, 474, 500, 567, 611, 680, 730, 772, 783, 785, 794, 836, 837, 850, 855, 861, 869, 919, 943, 944, 946, 948, 950, 951, 954, 957, 959, 961, 964, 968, 969, 970, 975, 980, 981, 987, 988, 989, 1002], "problemat": [4, 391, 1004], "captur": [4, 9, 12, 37, 39, 85, 122, 141, 154, 175, 196, 247, 307, 325, 373, 397, 398, 399, 548, 565, 566, 568, 819, 954, 959, 967, 971, 987, 1008], "big": [4, 44, 59, 61, 200, 201, 218, 247, 258, 354, 366, 371, 379, 392, 398, 402, 515, 538, 539, 797, 808, 809, 810, 811, 812, 975, 978, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "goe": [4, 37, 115, 347, 366, 397, 449, 450, 456, 534, 535, 541, 542, 543, 880, 881, 882, 883, 964, 968], "artifact": [4, 13, 46, 47, 298, 355, 369], "discontinu": [4, 376], "fail": [4, 54, 65, 96, 103, 157, 158, 175, 256, 306, 354, 364, 366, 367, 368, 369, 373, 379, 381, 393, 394, 419, 450, 452, 653, 654, 655, 830, 831, 903, 943, 951, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "intra": [4, 565, 568, 765, 766], "variat": [4, 12, 37, 126, 154, 155, 164, 166, 167, 201, 240, 242, 247, 248, 253, 274, 307, 325, 363, 394, 395, 400, 422, 425, 437, 513, 620, 649, 651, 652, 770, 771, 789, 790, 792, 943, 954, 964, 967, 970, 974, 985, 987, 990, 991, 999, 1001, 1002], "harmon": [4, 37, 263, 339, 390, 512, 518, 704, 705, 711, 758, 768, 954], "phase": [4, 190, 353, 604, 946, 951, 957, 978, 1004, 1006], "potenti": [4, 77, 162, 167, 175, 282, 283, 292, 340, 353, 378, 381, 390, 394, 397, 398, 446, 459, 460, 461, 462, 473, 501, 526, 534, 535, 538, 539, 541, 542, 550, 583, 588, 611, 738, 862, 863, 870, 880, 881, 882, 883, 922, 960, 968, 989, 999, 1006, 1007, 1010], "fix": [4, 6, 8, 25, 34, 46, 105, 115, 118, 149, 150, 154, 157, 166, 198, 214, 247, 259, 264, 292, 306, 307, 308, 309, 310, 339, 353, 354, 360, 362, 364, 365, 366, 367, 369, 373, 376, 378, 379, 391, 394, 395, 397, 398, 400, 430, 440, 450, 481, 489, 508, 514, 517, 519, 525, 526, 536, 537, 541, 542, 565, 568, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 607, 630, 640, 647, 661, 664, 668, 672, 683, 760, 770, 785, 792, 815, 816, 818, 821, 823, 824, 840, 856, 880, 881, 909, 943, 950, 953, 954, 957, 964, 975, 977, 985, 989, 994, 995, 997, 998, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "two": [4, 7, 9, 11, 14, 24, 26, 30, 37, 39, 40, 59, 63, 69, 70, 74, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 104, 108, 111, 117, 118, 119, 122, 127, 130, 133, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 166, 167, 168, 175, 179, 184, 185, 186, 187, 192, 196, 197, 198, 204, 205, 208, 213, 214, 219, 221, 222, 225, 230, 232, 234, 241, 242, 243, 245, 246, 247, 251, 253, 257, 263, 279, 281, 284, 285, 287, 289, 298, 300, 303, 306, 307, 309, 310, 315, 321, 322, 325, 326, 327, 333, 334, 338, 339, 340, 344, 349, 359, 360, 361, 362, 363, 364, 366, 367, 369, 371, 372, 373, 376, 378, 379, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 435, 437, 442, 447, 448, 449, 450, 451, 452, 453, 454, 465, 467, 468, 469, 470, 471, 473, 475, 477, 478, 479, 480, 481, 482, 484, 487, 491, 496, 499, 513, 515, 517, 521, 524, 526, 527, 530, 537, 547, 558, 561, 567, 568, 569, 572, 573, 575, 576, 577, 579, 580, 583, 584, 585, 587, 588, 597, 598, 601, 605, 609, 616, 620, 622, 647, 648, 650, 669, 676, 679, 680, 681, 688, 691, 692, 695, 697, 698, 699, 706, 707, 710, 711, 713, 716, 718, 729, 730, 732, 738, 739, 746, 749, 752, 753, 754, 755, 756, 760, 761, 767, 768, 769, 770, 802, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 830, 831, 837, 838, 845, 846, 847, 848, 866, 867, 868, 872, 880, 882, 883, 919, 933, 934, 940, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 980, 984, 987, 988, 989, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "onc": [4, 8, 50, 143, 146, 149, 218, 254, 257, 306, 310, 338, 340, 347, 349, 353, 355, 360, 361, 366, 369, 370, 371, 372, 373, 377, 378, 379, 390, 391, 393, 394, 395, 397, 398, 399, 400, 427, 429, 431, 450, 485, 486, 515, 521, 528, 536, 537, 567, 568, 574, 596, 604, 624, 628, 630, 632, 638, 640, 642, 643, 644, 645, 653, 654, 655, 674, 688, 692, 694, 711, 756, 773, 777, 779, 789, 808, 809, 810, 811, 812, 884, 950, 951, 957, 964, 968, 969, 970, 980, 989, 993, 996, 1004, 1006, 1007, 1008, 1009], "specif": [4, 11, 12, 27, 44, 61, 64, 69, 71, 129, 154, 157, 166, 172, 214, 251, 256, 298, 306, 307, 338, 339, 340, 349, 353, 354, 361, 366, 368, 369, 370, 371, 373, 376, 378, 381, 386, 389, 390, 391, 394, 395, 397, 398, 399, 400, 473, 480, 511, 528, 534, 541, 544, 545, 546, 547, 551, 565, 568, 570, 574, 589, 590, 591, 592, 594, 595, 596, 597, 599, 600, 602, 617, 620, 623, 624, 629, 635, 649, 664, 674, 688, 689, 721, 772, 773, 774, 778, 779, 780, 785, 796, 809, 901, 903, 904, 919, 930, 931, 932, 948, 950, 951, 953, 954, 956, 957, 959, 961, 964, 968, 970, 971, 972, 973, 989, 991, 996, 1000, 1004, 1005, 1006, 1007, 1010, 1011], "furthermor": [4, 37, 155, 168, 235, 237, 338, 339, 353, 355, 372, 390, 395, 397, 398, 539, 567, 583, 596, 680, 711, 721, 730, 732, 768, 872, 950, 962, 999, 1003], "enforc": [4, 12, 53, 95, 154, 190, 285, 353, 366, 392, 395, 397, 400, 485, 504, 508, 514, 516, 519, 520, 522, 523, 525, 538, 539, 852, 892, 893, 944, 951, 998, 1004, 1006, 1008], "behav": [4, 12, 48, 52, 251, 298, 308, 325, 349, 366, 371, 376, 377, 390, 394, 853, 950, 964, 969, 971, 975, 989, 996, 1003, 1005, 1009, 1010], "similarli": [4, 12, 37, 91, 167, 185, 196, 226, 256, 292, 298, 325, 349, 354, 362, 364, 367, 369, 370, 378, 379, 387, 393, 394, 398, 951, 952, 954, 961, 968, 969, 971, 980, 984, 1004, 1010], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 55, 57, 113, 143, 146, 162, 168, 179, 227, 254, 258, 265, 267, 268, 279, 287, 306, 318, 321, 322, 328, 338, 339, 340, 352, 353, 354, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 376, 378, 381, 387, 388, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 404, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 440, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 465, 468, 469, 472, 473, 474, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 597, 604, 605, 606, 607, 609, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 683, 696, 704, 705, 713, 746, 749, 753, 754, 755, 756, 758, 759, 762, 763, 764, 765, 766, 770, 771, 772, 774, 775, 776, 777, 778, 780, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 861, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 892, 893, 895, 903, 904, 908, 909, 922, 923, 924, 925, 928, 938, 939, 943, 944, 950, 951, 954, 956, 957, 960, 962, 964, 968, 969, 970, 975, 977, 980, 987, 988, 989, 991, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "shorter": [4, 125, 155, 244, 376, 390, 395, 400, 428, 435, 540, 674, 956, 960, 989, 1007], "necessarili": [4, 31, 71, 98, 196, 204, 214, 230, 231, 242, 276, 300, 338, 339, 360, 369, 388, 390, 397, 604, 821, 823, 824, 825, 948, 951, 953, 954], "59": [4, 19, 214, 338, 363, 371, 391, 487, 954, 992, 996], "37": [4, 222, 259, 313, 361, 397, 692, 853, 996], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 44, 46, 49, 52, 57, 59, 61, 70, 71, 79, 85, 97, 100, 112, 115, 118, 119, 122, 128, 144, 145, 149, 151, 154, 155, 156, 158, 162, 167, 175, 177, 179, 182, 192, 197, 198, 208, 209, 219, 230, 235, 237, 246, 251, 254, 256, 266, 274, 279, 284, 286, 287, 300, 302, 306, 309, 310, 318, 321, 322, 326, 327, 330, 334, 335, 340, 343, 345, 346, 349, 354, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 381, 388, 390, 391, 394, 396, 397, 398, 400, 417, 429, 431, 443, 444, 476, 492, 493, 494, 495, 523, 530, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 565, 566, 568, 574, 605, 607, 608, 609, 610, 674, 675, 677, 678, 764, 772, 774, 781, 785, 789, 794, 795, 796, 803, 834, 846, 874, 877, 880, 881, 882, 883, 887, 890, 912, 913, 917, 927, 939, 944, 950, 953, 954, 955, 957, 961, 964, 965, 966, 968, 969, 970, 974, 975, 978, 985, 987, 988, 993, 996, 997, 999, 1002, 1006, 1009, 1010, 1011], "turn": [4, 32, 77, 161, 162, 166, 187, 211, 212, 230, 256, 280, 340, 353, 355, 361, 376, 378, 379, 389, 390, 391, 393, 395, 398, 399, 400, 558, 559, 566, 584, 585, 802, 806, 874, 877, 895, 944, 948, 956, 959, 964, 978, 989, 1001, 1003, 1004, 1009], "downstream": [4, 79, 340, 398, 508, 511, 514, 518, 519, 583, 846, 964, 1006], "freedom": [4, 97, 154, 184, 185, 187, 256, 518, 633, 770, 950, 999], "underfit": [4, 122, 149, 164, 168, 249, 271, 272, 292, 634, 772, 775, 776, 785, 795, 796, 833, 848, 949, 950], "approxim": [4, 5, 27, 33, 46, 79, 99, 100, 105, 114, 121, 122, 150, 166, 173, 176, 192, 196, 197, 210, 214, 224, 225, 228, 231, 239, 247, 256, 261, 270, 277, 285, 290, 298, 300, 301, 306, 309, 338, 340, 345, 346, 349, 356, 358, 363, 374, 376, 378, 387, 388, 391, 393, 394, 395, 397, 400, 402, 403, 404, 412, 427, 447, 448, 451, 452, 453, 454, 459, 460, 461, 468, 473, 479, 498, 501, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 536, 537, 559, 566, 587, 588, 596, 615, 616, 617, 618, 619, 634, 635, 636, 649, 651, 653, 654, 656, 664, 669, 733, 734, 739, 770, 773, 789, 794, 798, 799, 813, 814, 817, 821, 823, 824, 825, 829, 833, 834, 839, 843, 845, 846, 850, 861, 872, 877, 908, 909, 928, 947, 948, 949, 950, 951, 953, 957, 958, 959, 960, 961, 962, 966, 968, 969, 970, 974, 975, 989, 991, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "especi": [4, 8, 55, 119, 122, 196, 329, 339, 349, 360, 366, 373, 376, 378, 388, 390, 398, 422, 427, 478, 515, 534, 535, 536, 537, 541, 542, 543, 623, 624, 625, 627, 629, 630, 631, 635, 636, 637, 638, 639, 640, 646, 657, 672, 681, 721, 808, 809, 810, 811, 812, 880, 881, 882, 883, 950, 956, 957, 962, 964, 978, 999, 1004, 1008, 1009, 1010], "sharp": [4, 964], "rush": [4, 366], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 79, 95, 124, 149, 156, 166, 167, 211, 214, 256, 263, 267, 310, 338, 339, 349, 365, 388, 390, 392, 395, 397, 398, 399, 416, 422, 425, 429, 431, 437, 508, 515, 517, 519, 520, 522, 523, 524, 584, 585, 611, 775, 776, 813, 814, 908, 909, 946, 951, 954, 970, 1010], "tend": [4, 12, 27, 37, 39, 52, 167, 185, 196, 200, 201, 214, 241, 244, 253, 257, 274, 295, 340, 353, 355, 366, 367, 378, 388, 390, 392, 395, 397, 399, 416, 426, 819, 850, 861, 909, 950, 951, 957, 970, 989], "under": [4, 7, 11, 24, 25, 27, 41, 66, 77, 78, 103, 119, 122, 157, 196, 225, 234, 256, 263, 265, 266, 299, 333, 360, 366, 367, 369, 371, 373, 378, 381, 384, 388, 390, 392, 394, 395, 398, 399, 429, 431, 448, 449, 450, 451, 452, 453, 454, 509, 516, 518, 520, 631, 632, 633, 678, 682, 683, 684, 691, 717, 729, 763, 764, 770, 771, 818, 950, 951, 952, 954, 957, 964, 968, 969, 970, 974, 975, 989, 996, 998, 999, 1001, 1004, 1008], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 118, 164, 185, 196, 197, 198, 200, 226, 263, 274, 276, 280, 295, 298, 305, 310, 314, 316, 349, 353, 354, 359, 362, 363, 366, 367, 369, 372, 374, 376, 378, 381, 384, 387, 388, 389, 390, 393, 395, 397, 398, 399, 400, 421, 426, 475, 485, 486, 492, 515, 544, 545, 579, 580, 645, 653, 654, 682, 708, 731, 753, 767, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 818, 819, 838, 943, 945, 948, 950, 951, 954, 955, 965, 967, 969, 974, 980, 984, 989, 996, 1002, 1004, 1005, 1006, 1009], "systemat": [4, 256, 367, 688, 703, 954, 1011], "reveal": [4, 166, 168, 338, 371, 387, 951], "form": [4, 9, 19, 32, 42, 59, 66, 95, 132, 156, 157, 166, 231, 247, 256, 313, 349, 360, 363, 366, 367, 369, 378, 379, 387, 389, 390, 393, 394, 395, 396, 397, 398, 400, 402, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 437, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 676, 770, 771, 772, 775, 776, 777, 779, 781, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 898, 943, 945, 947, 948, 950, 951, 954, 955, 958, 959, 960, 964, 969, 974, 980, 987, 1002, 1006, 1008], "explain": [4, 5, 12, 55, 72, 84, 85, 104, 122, 149, 154, 155, 167, 168, 196, 214, 225, 247, 266, 269, 338, 339, 364, 366, 369, 386, 393, 395, 400, 470, 498, 501, 511, 518, 521, 526, 602, 625, 633, 646, 657, 697, 698, 699, 703, 760, 950, 957, 970, 973, 974, 985, 987, 988, 1007, 1009, 1010], "lack": [4, 366, 367, 376, 394, 798, 887, 969, 1010], "deriv": [4, 19, 105, 106, 121, 154, 157, 168, 184, 185, 189, 197, 354, 361, 367, 388, 392, 394, 396, 397, 398, 400, 402, 420, 424, 443, 510, 583, 594, 599, 625, 646, 653, 657, 830, 831, 846, 852, 872, 873, 948, 950, 951, 954, 958, 960, 969, 996, 997, 998, 1003, 1004, 1005, 1011], "address": [4, 48, 338, 361, 366, 390, 398, 634, 950, 951, 956, 957, 958, 959, 960, 964, 978, 987, 1004], "section": [4, 37, 95, 100, 113, 129, 135, 136, 137, 138, 154, 158, 166, 167, 175, 184, 185, 198, 221, 226, 236, 254, 256, 259, 265, 308, 338, 339, 340, 349, 359, 361, 364, 366, 367, 369, 370, 371, 372, 373, 384, 388, 389, 391, 393, 394, 395, 397, 398, 399, 400, 418, 422, 437, 511, 591, 596, 599, 614, 622, 763, 771, 874, 877, 943, 948, 950, 954, 955, 957, 958, 960, 961, 968, 969, 971, 973, 987, 989, 996, 998, 999, 1000, 1003], "margin": [4, 12, 25, 27, 150, 151, 153, 154, 155, 164, 166, 167, 174, 215, 256, 298, 320, 323, 325, 327, 336, 363, 388, 389, 395, 397, 400, 489, 587, 588, 622, 653, 710, 802, 850, 861, 874, 877, 950, 954, 956, 960, 961, 964, 968, 969, 987, 1003, 1005], "construct": [4, 11, 69, 71, 110, 112, 114, 117, 129, 214, 226, 236, 274, 289, 299, 301, 307, 310, 360, 363, 367, 374, 378, 390, 394, 395, 397, 398, 401, 413, 420, 421, 423, 424, 428, 430, 435, 441, 443, 445, 496, 512, 518, 521, 532, 533, 558, 564, 616, 665, 667, 668, 785, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 832, 833, 834, 835, 837, 877, 891, 893, 908, 909, 919, 943, 944, 946, 950, 951, 954, 955, 957, 964, 967, 969, 970, 975, 980, 984, 1001, 1003, 1004, 1007, 1010], "polynomialfeatur": [4, 175, 196, 197, 202, 236, 270, 308, 852, 950, 964, 1000, 1004, 1005, 1006, 1009, 1010], "coars": [4, 118, 371, 426, 439], "too": [4, 7, 12, 17, 44, 50, 61, 69, 73, 81, 99, 122, 161, 168, 197, 218, 229, 242, 250, 254, 263, 271, 294, 325, 338, 345, 346, 353, 363, 366, 371, 373, 376, 378, 390, 392, 394, 397, 398, 399, 402, 416, 427, 515, 565, 568, 656, 669, 683, 808, 809, 810, 811, 812, 838, 851, 853, 949, 951, 953, 954, 956, 957, 961, 987, 997, 1000, 1003, 1004, 1005, 1006, 1008], "mani": [4, 7, 10, 19, 55, 73, 77, 81, 116, 117, 118, 120, 123, 142, 146, 168, 196, 217, 229, 242, 250, 256, 263, 264, 268, 298, 303, 306, 307, 308, 309, 310, 338, 349, 353, 355, 361, 363, 365, 366, 377, 378, 379, 387, 390, 391, 392, 395, 397, 398, 399, 400, 402, 480, 530, 531, 534, 535, 536, 537, 541, 542, 543, 565, 568, 583, 586, 604, 616, 627, 631, 635, 636, 643, 645, 653, 654, 655, 669, 672, 676, 749, 753, 772, 776, 785, 830, 831, 846, 851, 853, 872, 880, 881, 882, 883, 943, 944, 946, 950, 951, 953, 954, 955, 956, 957, 960, 961, 962, 964, 967, 969, 971, 973, 974, 975, 978, 987, 989, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011], "featureunion": [4, 73, 358, 378, 389, 442, 606, 835, 944, 975, 978, 991, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "hour_workday_interact": 4, "interaction_onli": [4, 848, 950, 964], "combin": [4, 12, 25, 27, 60, 69, 70, 72, 73, 95, 104, 105, 108, 120, 124, 133, 149, 155, 162, 164, 166, 167, 196, 213, 214, 221, 225, 230, 256, 257, 265, 267, 268, 285, 293, 308, 309, 328, 340, 344, 353, 358, 362, 363, 366, 370, 377, 378, 387, 388, 390, 391, 394, 395, 396, 397, 398, 399, 400, 402, 403, 424, 442, 444, 445, 451, 453, 454, 457, 458, 466, 473, 485, 486, 492, 498, 501, 503, 508, 514, 515, 517, 519, 524, 526, 537, 539, 542, 544, 545, 587, 591, 593, 598, 601, 607, 611, 620, 623, 624, 629, 630, 635, 636, 637, 638, 639, 640, 643, 645, 649, 650, 651, 652, 653, 655, 656, 658, 661, 705, 763, 772, 775, 776, 782, 783, 794, 796, 800, 832, 834, 838, 846, 847, 848, 853, 872, 928, 943, 946, 947, 950, 954, 955, 957, 960, 964, 967, 968, 971, 978, 985, 987, 989, 996, 1001, 1004, 1007, 1008, 1009, 1011], "ones": [4, 11, 34, 43, 70, 80, 149, 172, 201, 225, 228, 256, 264, 267, 283, 302, 314, 335, 353, 366, 373, 390, 392, 394, 397, 428, 509, 543, 558, 587, 588, 621, 622, 635, 636, 647, 653, 679, 769, 774, 778, 789, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 848, 852, 914, 950, 954, 959, 960, 964, 969, 987, 996, 1004, 1005, 1006], "previou": [4, 43, 53, 70, 95, 113, 119, 122, 129, 149, 154, 155, 166, 182, 197, 229, 231, 256, 259, 263, 298, 310, 338, 339, 340, 349, 353, 361, 366, 367, 370, 371, 373, 376, 378, 381, 390, 397, 398, 446, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 607, 623, 625, 629, 635, 637, 639, 643, 644, 645, 646, 653, 654, 655, 657, 683, 790, 804, 807, 822, 830, 831, 869, 886, 950, 954, 958, 964, 975, 980, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "nice": [4, 66, 197, 298, 333, 353, 369, 395, 989], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 116, 264, 339, 371], "104": [4, 24], "highlight": [4, 79, 91, 149, 150, 155, 167, 214, 302, 311, 338, 340, 356, 366, 369, 370, 371, 373, 376, 400, 422, 425, 442, 445, 467, 468, 473, 481, 489, 492, 501, 515, 538, 539, 541, 542, 544, 576, 579, 605, 607, 611, 617, 623, 625, 629, 635, 646, 657, 665, 693, 723, 763, 772, 775, 776, 785, 799, 815, 817, 834, 843, 846, 848, 852, 853, 869, 870, 872, 877, 881, 904, 951, 954, 962, 964, 969, 1006, 1007, 1008, 1009, 1010], "anoth": [4, 37, 95, 100, 124, 146, 149, 157, 162, 166, 167, 185, 204, 222, 225, 235, 242, 256, 259, 262, 266, 286, 303, 338, 340, 343, 349, 353, 355, 360, 361, 364, 366, 367, 371, 376, 378, 384, 387, 390, 394, 395, 397, 398, 399, 401, 421, 423, 430, 433, 440, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 485, 515, 517, 524, 650, 653, 669, 685, 695, 832, 833, 943, 949, 950, 951, 954, 955, 957, 960, 964, 968, 969, 980, 987, 988, 989, 1005, 1006], "either": [4, 10, 30, 70, 118, 119, 166, 184, 186, 226, 251, 260, 265, 281, 338, 347, 353, 358, 361, 364, 366, 367, 371, 378, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 421, 425, 430, 464, 473, 489, 501, 510, 511, 513, 514, 521, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 559, 560, 561, 565, 566, 567, 568, 570, 571, 574, 579, 584, 585, 587, 588, 599, 604, 607, 609, 610, 627, 631, 633, 641, 653, 655, 659, 660, 667, 674, 675, 678, 682, 683, 687, 688, 696, 699, 701, 702, 703, 710, 714, 715, 717, 727, 731, 744, 749, 753, 757, 760, 763, 764, 767, 772, 775, 776, 785, 793, 794, 795, 796, 797, 798, 800, 803, 862, 863, 869, 872, 873, 880, 881, 882, 883, 887, 916, 943, 950, 954, 955, 956, 957, 958, 959, 962, 964, 968, 969, 980, 988, 989, 996, 999, 1005, 1006, 1007, 1010], "after": [4, 17, 20, 21, 26, 46, 53, 69, 70, 74, 80, 97, 110, 120, 127, 129, 132, 142, 146, 154, 156, 158, 161, 166, 172, 189, 196, 234, 235, 238, 244, 256, 265, 284, 286, 298, 299, 302, 303, 338, 339, 355, 361, 363, 364, 365, 366, 367, 369, 371, 372, 373, 376, 378, 379, 384, 386, 387, 390, 391, 394, 395, 398, 399, 400, 402, 421, 425, 428, 429, 430, 431, 434, 440, 492, 509, 513, 530, 531, 536, 537, 538, 539, 574, 604, 607, 635, 636, 643, 644, 645, 650, 652, 653, 654, 655, 669, 688, 701, 731, 767, 770, 771, 775, 776, 822, 829, 833, 852, 872, 877, 878, 943, 948, 950, 954, 958, 959, 964, 966, 968, 969, 970, 975, 980, 987, 989, 996, 999, 1003, 1004, 1007, 1008], "quadrat": [4, 29, 35, 154, 158, 164, 210, 309, 389, 419, 436, 439, 526, 527, 600, 625, 635, 636, 646, 653, 657, 692, 877, 878, 950, 951, 954, 957, 960, 964, 968, 969, 976, 991, 997], "tractabl": [4, 394, 611, 974, 1009], "nystr\u00f6m": 4, "latter": [4, 14, 246, 256, 265, 266, 284, 333, 355, 363, 366, 378, 394, 397, 398, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 717, 770, 771, 772, 775, 776, 780, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 957, 1005], "kernel_approxim": [4, 161, 164, 171, 172, 210, 225, 230, 308, 356, 654, 733, 734, 839, 946, 980, 997, 1003], "nystroem": [4, 161, 210, 225, 230, 358, 617, 618, 619, 654, 839, 877, 878, 991, 997, 1003, 1006, 1008, 1009, 1010], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 138, 172, 256, 322, 329, 332, 430, 512, 597, 740, 749, 772, 848, 874, 875, 876, 877, 878, 950, 964, 987], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 69, 72, 73, 84, 85, 89, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 127, 172, 195, 217, 218, 219, 220, 221, 222, 225, 229, 230, 232, 236, 241, 242, 243, 244, 245, 246, 247, 255, 280, 285, 295, 303, 308, 310, 339, 367, 370, 371, 378, 393, 395, 402, 429, 430, 440, 442, 459, 460, 461, 462, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 616, 617, 618, 619, 665, 666, 667, 668, 669, 670, 671, 672, 673, 770, 771, 822, 829, 832, 864, 865, 866, 909, 946, 948, 951, 953, 957, 985, 988, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "300": [4, 20, 21, 34, 38, 50, 57, 98, 110, 111, 112, 162, 186, 222, 225, 229, 245, 259, 286, 301, 308, 313, 331, 333, 367, 422, 425, 426, 437, 439, 616, 621, 622, 656, 667, 669, 671, 830, 950, 1006], "random_stalmost": [4, 120, 121, 198, 204, 270, 316, 349, 359, 361, 369, 371, 376, 377, 378, 390, 394, 395, 448, 449, 450, 451, 453, 454, 455, 770, 943, 949, 950, 953, 954, 969, 988, 989, 1004, 1009], "rival": [4, 869, 967], "intermedi": [4, 7, 52, 115, 122, 325, 398, 536, 537, 596, 833, 954, 1008], "compound": [4, 214, 398, 587, 589, 657, 699, 727, 950, 989], "one_hot_poly_pipelin": 4, "082": 4, "006": [4, 339, 371], "111": [4, 7, 8, 16, 66, 89, 101, 102, 109, 193, 211, 221, 256, 825, 999], "competit": [4, 122, 338, 621, 957], "low": [4, 11, 12, 37, 50, 80, 85, 97, 99, 103, 113, 125, 146, 168, 189, 191, 196, 198, 210, 217, 219, 225, 229, 234, 241, 242, 244, 247, 250, 256, 258, 262, 263, 271, 282, 283, 294, 302, 316, 324, 325, 338, 347, 362, 363, 366, 370, 373, 378, 381, 387, 388, 389, 394, 395, 398, 421, 427, 498, 501, 512, 559, 566, 580, 656, 669, 673, 681, 701, 717, 764, 818, 909, 921, 922, 943, 946, 949, 950, 951, 953, 954, 957, 959, 960, 961, 962, 964, 966, 969, 970, 976, 991, 997, 1000, 1001, 1002, 1004, 1005, 1010, 1011], "rank": [4, 17, 25, 79, 99, 103, 116, 144, 168, 169, 214, 254, 256, 264, 362, 385, 387, 388, 392, 393, 395, 397, 398, 485, 486, 498, 501, 526, 527, 570, 571, 583, 625, 634, 646, 657, 673, 676, 696, 701, 702, 714, 715, 731, 767, 775, 776, 909, 943, 945, 946, 951, 962, 964, 978, 991, 997, 1002, 1005, 1006, 1010, 1011], "fact": [4, 11, 19, 25, 80, 85, 122, 168, 229, 238, 338, 360, 372, 376, 378, 393, 395, 396, 397, 398, 566, 626, 645, 647, 680, 948, 950, 957, 964, 968, 969, 975, 978, 1010], "smoother": [4, 5, 122, 167, 258, 294, 396], "allow": [4, 55, 57, 73, 74, 99, 100, 113, 114, 127, 149, 154, 156, 158, 167, 190, 196, 214, 218, 226, 229, 235, 237, 238, 241, 256, 274, 306, 307, 308, 309, 330, 338, 347, 349, 353, 360, 364, 366, 367, 369, 372, 374, 378, 379, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 401, 420, 423, 424, 442, 444, 445, 500, 501, 511, 530, 531, 536, 537, 538, 539, 544, 545, 570, 571, 574, 580, 587, 588, 592, 604, 605, 607, 611, 620, 623, 624, 629, 630, 635, 637, 638, 639, 640, 653, 655, 658, 659, 660, 661, 665, 669, 737, 740, 749, 753, 756, 765, 766, 770, 771, 772, 774, 775, 776, 778, 780, 782, 785, 792, 799, 819, 828, 835, 839, 840, 856, 865, 867, 868, 869, 872, 873, 880, 881, 882, 883, 890, 892, 893, 903, 904, 920, 943, 944, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 964, 966, 967, 968, 969, 970, 974, 975, 978, 980, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 64, 72, 79, 80, 95, 97, 99, 100, 106, 120, 129, 149, 153, 155, 157, 158, 184, 185, 198, 204, 217, 219, 221, 222, 228, 246, 255, 256, 257, 267, 284, 285, 286, 306, 327, 328, 333, 338, 339, 343, 354, 363, 364, 366, 367, 370, 371, 374, 376, 377, 378, 379, 387, 390, 392, 393, 395, 397, 398, 399, 401, 420, 423, 424, 428, 429, 430, 431, 440, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 535, 542, 559, 566, 587, 588, 624, 627, 630, 631, 632, 633, 635, 636, 648, 665, 683, 704, 705, 713, 757, 758, 759, 762, 763, 767, 772, 785, 815, 816, 817, 819, 821, 823, 824, 825, 846, 847, 852, 864, 865, 866, 880, 881, 883, 889, 908, 909, 911, 943, 944, 946, 949, 950, 951, 953, 954, 955, 958, 960, 964, 968, 969, 970, 973, 975, 978, 980, 982, 984, 985, 987, 988, 989, 996, 1003, 1004, 1005, 1006, 1008, 1010], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 58, 65, 69, 74, 93, 95, 98, 100, 107, 109, 115, 119, 121, 122, 123, 124, 125, 129, 142, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 174, 175, 178, 183, 194, 196, 197, 202, 204, 209, 210, 212, 214, 215, 217, 226, 228, 231, 235, 237, 246, 254, 256, 257, 258, 259, 264, 265, 270, 292, 298, 306, 307, 309, 310, 318, 322, 323, 324, 325, 326, 327, 331, 333, 335, 338, 339, 344, 349, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 376, 377, 378, 381, 384, 388, 390, 391, 392, 393, 395, 396, 398, 399, 401, 402, 416, 419, 422, 423, 424, 425, 426, 428, 430, 432, 435, 436, 437, 438, 439, 442, 443, 447, 449, 450, 452, 456, 465, 466, 468, 469, 472, 474, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 549, 552, 558, 559, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 581, 584, 585, 586, 587, 588, 592, 594, 596, 597, 599, 600, 604, 605, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 675, 676, 677, 678, 679, 680, 682, 687, 688, 692, 695, 697, 698, 699, 703, 707, 709, 710, 713, 715, 716, 717, 725, 730, 732, 736, 737, 738, 740, 743, 746, 749, 753, 754, 755, 756, 757, 758, 760, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 782, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 842, 843, 845, 849, 850, 851, 852, 853, 856, 858, 861, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 890, 899, 901, 902, 903, 908, 909, 922, 924, 925, 928, 929, 938, 943, 944, 945, 947, 949, 951, 952, 955, 957, 958, 959, 960, 961, 962, 964, 967, 968, 970, 974, 975, 976, 980, 983, 984, 985, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "abl": [4, 5, 9, 24, 47, 60, 81, 85, 99, 100, 126, 155, 185, 196, 212, 214, 221, 262, 267, 325, 349, 353, 354, 355, 360, 366, 367, 369, 370, 376, 392, 394, 398, 462, 480, 511, 798, 845, 943, 944, 950, 953, 954, 955, 960, 964, 967, 970, 971, 975, 980, 988, 989, 1002, 1003, 1007], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 172, 278, 333, 340, 353, 386, 392, 398, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 781, 813, 814, 880, 881, 882, 883, 943, 957, 970, 978, 983, 987, 999, 1000], "depth": [4, 109, 115, 119, 123, 130, 343, 345, 346, 347, 353, 364, 366, 369, 377, 397, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 813, 814, 818, 880, 881, 882, 883, 884, 886, 914, 959, 960, 970, 998, 999, 1007], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 69, 71, 72, 110, 116, 120, 121, 127, 142, 143, 145, 150, 169, 172, 196, 204, 211, 212, 243, 254, 255, 256, 257, 258, 260, 262, 271, 278, 284, 285, 286, 295, 300, 303, 313, 314, 316, 325, 328, 349, 353, 367, 377, 378, 389, 390, 394, 397, 398, 399, 407, 416, 427, 447, 449, 450, 456, 509, 511, 518, 526, 527, 528, 530, 532, 534, 535, 536, 538, 541, 542, 544, 546, 587, 611, 635, 636, 643, 645, 648, 651, 652, 653, 669, 674, 679, 684, 689, 694, 709, 713, 718, 729, 738, 762, 767, 769, 797, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 815, 820, 822, 823, 830, 867, 868, 872, 874, 877, 880, 882, 908, 909, 943, 948, 949, 950, 951, 955, 957, 958, 962, 966, 968, 970, 984, 989, 1004, 1005], "On": [4, 12, 17, 26, 66, 70, 84, 85, 100, 109, 113, 115, 116, 117, 122, 129, 132, 141, 143, 153, 154, 166, 167, 168, 177, 184, 185, 198, 226, 227, 228, 229, 231, 235, 236, 237, 238, 241, 243, 246, 251, 253, 254, 256, 257, 259, 261, 263, 268, 295, 298, 300, 302, 307, 308, 310, 315, 325, 347, 353, 364, 367, 369, 376, 378, 384, 388, 390, 394, 395, 397, 399, 400, 620, 633, 668, 710, 736, 943, 947, 950, 953, 954, 956, 960, 967, 969, 984, 987], "contrari": [4, 13, 166, 218, 222, 241, 259, 298, 338, 360, 390, 473, 521, 583, 788, 950, 956, 960], "significantli": [4, 24, 25, 37, 77, 78, 120, 146, 166, 167, 168, 196, 204, 212, 214, 256, 307, 308, 339, 340, 349, 354, 390, 395, 397, 398, 403, 447, 452, 457, 515, 517, 524, 535, 542, 623, 624, 629, 630, 637, 638, 639, 640, 661, 669, 813, 814, 946, 950, 951, 957, 962, 969, 996, 998, 999, 1003, 1004, 1009, 1010, 1011], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 71, 73, 95, 113, 125, 141, 149, 157, 161, 167, 178, 190, 196, 204, 214, 225, 256, 257, 259, 261, 263, 264, 265, 268, 281, 289, 292, 293, 300, 309, 310, 313, 338, 339, 353, 354, 355, 361, 362, 365, 366, 367, 371, 377, 378, 386, 388, 389, 390, 391, 394, 395, 396, 397, 398, 400, 402, 427, 442, 450, 486, 510, 511, 513, 514, 515, 516, 523, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 565, 566, 568, 571, 579, 609, 610, 611, 621, 622, 623, 624, 629, 630, 635, 637, 638, 639, 640, 642, 643, 644, 645, 653, 654, 655, 662, 663, 674, 692, 694, 714, 738, 763, 766, 770, 772, 775, 776, 782, 783, 785, 794, 795, 796, 797, 798, 800, 829, 830, 831, 832, 848, 852, 872, 889, 898, 922, 943, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 974, 975, 978, 985, 988, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "compet": 4, "access": [4, 49, 77, 242, 247, 338, 347, 353, 354, 366, 367, 373, 376, 378, 379, 390, 392, 393, 397, 398, 400, 428, 435, 442, 513, 544, 545, 546, 547, 594, 676, 832, 833, 887, 917, 950, 953, 954, 960, 961, 962, 968, 969, 975, 978, 980, 988, 989, 996, 998, 1002, 1003, 1004, 1005, 1008, 1010, 1011], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 57, 66, 69, 89, 99, 101, 102, 115, 119, 123, 125, 129, 146, 167, 185, 193, 196, 214, 217, 219, 226, 229, 238, 257, 258, 265, 267, 276, 278, 298, 303, 308, 309, 338, 339, 340, 360, 363, 364, 366, 367, 369, 371, 373, 376, 378, 379, 381, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 407, 416, 417, 418, 423, 428, 430, 435, 440, 442, 445, 447, 459, 460, 461, 473, 485, 498, 501, 512, 518, 526, 527, 528, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 555, 557, 558, 587, 588, 596, 604, 609, 610, 611, 620, 635, 636, 643, 645, 648, 651, 652, 653, 654, 655, 663, 666, 668, 669, 670, 672, 676, 699, 704, 705, 717, 722, 724, 727, 738, 759, 762, 772, 775, 776, 778, 780, 785, 796, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 830, 833, 834, 835, 837, 847, 848, 849, 851, 853, 860, 864, 865, 867, 868, 872, 873, 874, 877, 880, 881, 882, 883, 940, 943, 948, 949, 950, 951, 954, 955, 956, 957, 958, 960, 961, 964, 968, 969, 970, 975, 980, 987, 989, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "geograph": [4, 11, 289, 361, 475], "repartit": 4, "immobil": 4, "quant": 4, "ncol": [4, 5, 32, 53, 65, 95, 100, 106, 167, 196, 197, 198, 204, 214, 217, 218, 228, 259, 267, 276, 293, 299, 300, 302, 303, 332, 339], "sharei": [4, 74, 91, 100, 106, 130, 158, 196, 198, 267, 281, 299, 332, 333, 339], "pred": [4, 7, 11, 32, 334, 338, 361, 625, 646, 657, 674, 678, 682, 694, 704, 705, 713, 758, 759, 762, 763, 954], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 49, 62, 63, 64, 71, 85, 91, 95, 96, 99, 104, 105, 106, 110, 112, 114, 129, 130, 155, 161, 164, 166, 168, 181, 187, 188, 196, 204, 205, 217, 229, 242, 246, 247, 254, 259, 260, 263, 265, 276, 281, 284, 292, 293, 294, 300, 302, 303, 317, 322, 333, 334, 344, 364, 397, 797, 989, 992], "perfect": [4, 26, 37, 69, 80, 98, 100, 192, 196, 338, 339, 366, 369, 390, 394, 530, 531, 667, 671, 680, 681, 684, 693, 701, 703, 706, 712, 718, 731, 732, 760, 761, 768, 950, 954, 957, 969, 978, 987, 1010], "xlim": [4, 9, 12, 26, 34, 44, 57, 61, 72, 77, 78, 79, 89, 97, 110, 112, 113, 114, 125, 128, 135, 150, 151, 166, 175, 186, 188, 195, 202, 205, 210, 225, 232, 242, 247, 251, 266, 270, 282, 283, 324, 329, 330, 334, 346], "ylim": [4, 9, 12, 24, 26, 34, 37, 44, 57, 61, 71, 77, 78, 79, 89, 97, 110, 112, 113, 119, 120, 122, 125, 128, 131, 136, 150, 151, 166, 183, 185, 186, 188, 189, 190, 202, 205, 206, 210, 225, 232, 242, 247, 251, 255, 258, 259, 266, 269, 270, 271, 282, 283, 324, 329, 330, 334, 338, 346], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 157, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 346, 347, 355, 366, 371, 376, 377, 379, 381, 387, 388, 392, 394, 395, 396, 397, 399, 400, 417, 479, 536, 570, 571, 608, 609, 674, 675, 677, 678, 689, 884, 885, 886, 943, 948, 949, 951, 953, 954, 956, 957, 958, 960, 961, 964, 968, 969, 975, 984, 985, 989, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1010], "seem": [4, 9, 46, 122, 167, 196, 221, 225, 257, 293, 302, 338, 339, 365, 366, 370, 394, 478, 950, 954], "regim": [4, 378, 872, 873, 953], "overal": [4, 48, 113, 129, 154, 214, 253, 339, 353, 365, 366, 371, 387, 388, 397, 400, 425, 427, 442, 449, 450, 456, 526, 951, 954, 970, 978, 1006], "closer": [4, 27, 37, 98, 100, 128, 149, 175, 340, 388, 390, 395, 427, 530, 605, 688, 815, 816, 821, 823, 824, 825, 969, 1003], "diagon": [4, 25, 40, 81, 84, 214, 234, 243, 246, 247, 250, 325, 387, 390, 392, 400, 431, 456, 458, 488, 490, 504, 509, 527, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 627, 628, 631, 632, 633, 659, 660, 691, 765, 770, 771, 817, 825, 948, 950, 953, 957, 964, 1002, 1004, 1005, 1006], "obtain": [4, 7, 9, 12, 27, 48, 57, 70, 73, 74, 100, 103, 119, 122, 123, 127, 135, 146, 151, 153, 166, 167, 196, 198, 210, 221, 241, 242, 243, 252, 256, 257, 262, 265, 276, 309, 323, 339, 340, 347, 349, 361, 363, 376, 384, 388, 390, 392, 393, 395, 397, 398, 399, 400, 416, 421, 447, 473, 509, 510, 532, 533, 534, 535, 536, 537, 540, 541, 542, 570, 583, 591, 622, 636, 638, 643, 645, 649, 651, 653, 654, 664, 684, 688, 701, 714, 731, 766, 798, 801, 802, 805, 819, 830, 850, 861, 874, 877, 880, 881, 909, 944, 946, 948, 950, 951, 953, 954, 955, 957, 958, 960, 961, 964, 968, 969, 1002, 1004, 1007, 1009, 1010], "slightli": [4, 25, 63, 81, 113, 119, 122, 129, 146, 149, 150, 151, 167, 168, 175, 196, 220, 222, 264, 306, 322, 340, 365, 366, 376, 388, 390, 397, 398, 400, 402, 403, 565, 566, 568, 615, 635, 775, 776, 872, 874, 877, 908, 909, 943, 950, 964, 968, 969, 1005, 1009, 1010], "cost": [4, 39, 98, 149, 164, 172, 217, 230, 265, 306, 325, 339, 340, 342, 348, 366, 371, 373, 376, 388, 390, 397, 456, 477, 514, 515, 516, 523, 534, 535, 536, 537, 541, 542, 587, 596, 604, 623, 624, 629, 630, 637, 638, 639, 640, 645, 649, 651, 653, 655, 664, 665, 669, 799, 872, 873, 874, 877, 880, 881, 882, 883, 909, 946, 950, 951, 954, 957, 967, 968, 969, 976, 991, 1002, 1005, 1006], "durat": [4, 8, 196, 214, 276, 278, 340, 354, 950], "regressor": [4, 74, 85, 123, 128, 129, 132, 149, 154, 162, 164, 166, 174, 176, 178, 196, 199, 213, 214, 215, 307, 308, 333, 353, 366, 367, 376, 378, 388, 391, 400, 411, 415, 443, 459, 460, 461, 462, 501, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 542, 543, 544, 545, 546, 547, 582, 583, 586, 588, 609, 610, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 644, 646, 647, 649, 650, 655, 656, 801, 802, 805, 806, 807, 816, 824, 829, 830, 831, 834, 840, 848, 853, 873, 875, 878, 880, 881, 882, 883, 886, 901, 903, 943, 944, 950, 954, 955, 957, 962, 968, 976, 984, 991, 996, 997, 1001, 1002, 1003, 1005, 1006, 1009, 1010], "mlpregressor": [4, 167, 235, 355, 829, 830, 958, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "hidden": [4, 294, 295, 373, 387, 395, 829, 830, 831, 958, 959, 974, 996, 1007], "layer": [4, 164, 212, 235, 291, 294, 295, 296, 353, 373, 397, 491, 492, 499, 544, 799, 829, 830, 831, 834, 853, 959, 976, 991, 1002], "cyclic": [4, 623, 624, 629, 630, 637, 638, 639, 640, 1008], "within": [4, 59, 115, 116, 117, 128, 143, 146, 192, 197, 198, 208, 214, 235, 254, 255, 258, 259, 269, 298, 299, 308, 323, 326, 333, 340, 349, 353, 361, 366, 369, 374, 376, 378, 379, 387, 390, 391, 394, 396, 397, 401, 423, 426, 439, 441, 442, 447, 452, 492, 526, 544, 545, 546, 547, 570, 571, 609, 669, 673, 676, 686, 700, 756, 770, 771, 777, 789, 790, 797, 798, 813, 814, 815, 816, 821, 823, 824, 825, 832, 833, 834, 846, 857, 858, 860, 861, 862, 863, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 948, 950, 951, 957, 960, 964, 967, 969, 970, 975, 978, 980, 984, 987, 989, 998, 999, 1003, 1004, 1009, 1010], "finer": [4, 37, 278, 325, 354, 390, 394, 943, 957, 1006], "resolut": [4, 11, 17, 105, 288, 289, 325, 379, 980, 1006], "taken": [4, 7, 31, 42, 53, 124, 154, 166, 167, 229, 230, 244, 262, 300, 361, 363, 365, 366, 369, 378, 384, 389, 390, 394, 398, 400, 402, 419, 510, 560, 561, 623, 624, 627, 629, 630, 631, 635, 636, 637, 638, 639, 640, 654, 656, 658, 661, 672, 846, 847, 866, 869, 875, 876, 954, 956, 964, 966, 1002, 1005, 1008, 1009], "everi": [4, 95, 161, 194, 197, 218, 231, 242, 247, 265, 309, 349, 361, 364, 366, 367, 369, 373, 378, 379, 390, 392, 394, 395, 398, 419, 432, 485, 513, 516, 522, 534, 536, 537, 541, 567, 568, 580, 623, 624, 626, 629, 630, 636, 637, 638, 639, 640, 641, 642, 643, 645, 649, 650, 651, 652, 653, 662, 663, 664, 669, 673, 729, 746, 754, 755, 784, 822, 880, 882, 884, 886, 898, 947, 949, 954, 955, 956, 964, 970, 978, 984, 996, 1000, 1002, 1005, 1009], "offer": [4, 367, 373, 376, 377, 381, 394, 395, 397, 398, 943, 955, 958, 970, 974, 975, 978, 1002], "view": [4, 16, 30, 42, 46, 77, 97, 167, 193, 198, 236, 353, 355, 366, 390, 398, 513, 622, 634, 813, 814, 887, 950, 951], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 60, 77, 78, 79, 80, 81, 90, 96, 97, 98, 105, 111, 112, 122, 159, 162, 175, 186, 225, 229, 243, 244, 248, 281, 289, 302, 322, 356, 358, 362, 367, 370, 378, 390, 392, 395, 396, 402, 430, 447, 448, 449, 450, 451, 452, 453, 454, 473, 481, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 507, 509, 521, 526, 527, 540, 587, 588, 590, 591, 592, 594, 595, 596, 599, 600, 602, 604, 620, 621, 649, 654, 657, 679, 699, 716, 727, 751, 770, 771, 772, 785, 808, 809, 810, 811, 812, 813, 814, 818, 849, 853, 860, 864, 865, 866, 948, 950, 951, 952, 960, 976, 978, 988, 990, 991, 996, 997, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1010], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 59, 60, 61, 63, 64, 65, 70, 74, 77, 78, 79, 80, 81, 84, 85, 91, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 116, 117, 118, 121, 122, 124, 125, 126, 129, 132, 133, 138, 141, 142, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 170, 175, 176, 177, 178, 180, 185, 186, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 209, 210, 213, 214, 217, 218, 220, 221, 222, 224, 225, 230, 231, 233, 234, 239, 241, 242, 244, 245, 246, 247, 249, 251, 253, 256, 257, 259, 261, 263, 265, 266, 267, 268, 270, 272, 274, 276, 281, 282, 283, 288, 292, 299, 301, 302, 307, 308, 310, 313, 314, 317, 318, 324, 325, 327, 328, 330, 331, 332, 335, 338, 339, 345, 346, 353, 354, 356, 358, 362, 368, 370, 376, 377, 378, 385, 388, 390, 398, 399, 413, 419, 422, 425, 427, 429, 430, 431, 432, 436, 437, 438, 440, 442, 447, 448, 449, 450, 451, 452, 453, 454, 465, 466, 468, 469, 472, 473, 474, 479, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 512, 513, 514, 515, 516, 517, 518, 521, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550, 559, 560, 561, 566, 584, 585, 587, 588, 604, 607, 609, 611, 616, 617, 618, 619, 620, 623, 624, 626, 627, 629, 630, 631, 635, 637, 638, 639, 640, 647, 648, 649, 653, 654, 655, 656, 666, 667, 668, 669, 670, 671, 672, 680, 681, 684, 706, 718, 756, 766, 770, 771, 772, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 792, 798, 799, 804, 806, 807, 808, 809, 810, 812, 813, 814, 818, 822, 829, 830, 831, 833, 836, 838, 847, 850, 861, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 895, 908, 909, 925, 928, 944, 946, 949, 951, 953, 954, 958, 959, 960, 962, 964, 969, 970, 974, 975, 976, 980, 984, 985, 987, 988, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "constant": [4, 105, 113, 152, 156, 162, 166, 167, 184, 197, 198, 200, 214, 227, 236, 259, 288, 293, 295, 299, 301, 307, 333, 335, 349, 367, 374, 378, 387, 397, 400, 411, 443, 459, 460, 461, 488, 490, 511, 515, 517, 524, 526, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 547, 567, 583, 586, 588, 590, 604, 607, 609, 610, 612, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 653, 654, 655, 656, 657, 664, 666, 670, 672, 697, 698, 699, 703, 750, 752, 760, 806, 807, 816, 824, 830, 831, 838, 849, 852, 860, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 944, 948, 950, 951, 954, 956, 957, 961, 964, 968, 970, 999, 1004, 1006, 1008, 1009, 1010], "varianc": [4, 5, 27, 44, 56, 61, 72, 77, 79, 84, 85, 95, 96, 97, 100, 103, 104, 106, 108, 124, 133, 156, 158, 164, 166, 174, 176, 185, 196, 198, 201, 214, 215, 246, 253, 256, 259, 265, 266, 269, 285, 292, 298, 303, 333, 339, 349, 358, 362, 374, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 400, 402, 420, 424, 427, 441, 498, 501, 509, 510, 511, 518, 521, 526, 527, 532, 533, 535, 536, 537, 542, 580, 584, 585, 588, 602, 620, 621, 622, 629, 633, 634, 637, 639, 649, 650, 651, 652, 653, 664, 686, 703, 760, 770, 771, 811, 822, 837, 843, 849, 851, 853, 858, 860, 862, 863, 881, 883, 929, 930, 931, 935, 948, 949, 950, 952, 957, 958, 959, 966, 968, 969, 970, 971, 976, 985, 987, 988, 991, 996, 1004, 1006, 1007, 1008, 1009, 1010], "poisson": [4, 164, 174, 215, 232, 362, 397, 442, 443, 473, 500, 529, 535, 539, 542, 625, 646, 649, 657, 682, 699, 720, 724, 725, 727, 799, 833, 834, 837, 838, 846, 847, 848, 853, 881, 883, 913, 950, 970, 1006, 1007, 1008, 1009, 1010], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 130, 138, 172, 210, 225, 230, 231, 254, 256, 258, 261, 267, 271, 308, 313, 314, 316, 318, 322, 324, 325, 328, 329, 331, 332, 335, 393, 395, 400, 430, 512, 596, 597, 616, 617, 618, 620, 621, 622, 625, 657, 662, 668, 699, 722, 727, 734, 741, 750, 751, 752, 770, 782, 785, 867, 868, 869, 874, 875, 876, 877, 878, 943, 946, 949, 950, 952, 967, 969, 980, 984, 985, 987, 996, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1010, 1011], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 118, 120, 127, 157, 172, 196, 204, 253, 256, 263, 316, 325, 328, 333, 338, 349, 353, 355, 360, 361, 363, 367, 371, 376, 378, 387, 388, 390, 394, 395, 397, 398, 530, 535, 542, 617, 626, 653, 655, 683, 715, 738, 775, 776, 809, 853, 943, 944, 946, 950, 954, 964, 967, 969, 977, 989, 1009], "gridsearchcv": [4, 54, 68, 70, 72, 73, 75, 77, 103, 164, 231, 236, 246, 249, 254, 255, 256, 257, 261, 264, 267, 272, 278, 280, 295, 300, 308, 325, 333, 349, 354, 367, 376, 378, 391, 394, 479, 497, 517, 518, 552, 576, 581, 679, 717, 782, 785, 833, 872, 880, 943, 950, 954, 958, 968, 969, 974, 975, 984, 985, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "tweedieregressor": [4, 307, 310, 625, 646, 950, 1007, 1010, 1011], "power": [4, 7, 17, 120, 197, 214, 247, 259, 264, 280, 298, 299, 302, 313, 322, 353, 377, 388, 390, 393, 396, 397, 398, 401, 423, 459, 460, 461, 509, 512, 518, 521, 607, 657, 671, 676, 699, 722, 724, 727, 815, 816, 823, 824, 826, 827, 848, 849, 850, 860, 861, 908, 909, 950, 951, 954, 962, 964, 968, 969, 978, 999, 1002, 1004, 1006, 1007, 1009], "param_grid": [4, 6, 70, 71, 72, 73, 122, 231, 236, 246, 254, 255, 256, 260, 261, 264, 267, 278, 300, 325, 333, 378, 391, 397, 717, 772, 775, 782, 783, 943, 954, 984, 985], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 348, 354, 360, 361, 363, 371, 387, 390, 396, 398, 401, 411, 423, 443, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 481, 482, 487, 489, 491, 492, 496, 499, 500, 513, 514, 521, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 547, 560, 561, 567, 571, 573, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 655, 656, 674, 680, 681, 689, 704, 705, 706, 709, 713, 714, 732, 744, 758, 759, 762, 767, 768, 769, 772, 785, 794, 795, 796, 806, 807, 808, 809, 816, 818, 824, 831, 848, 852, 873, 875, 878, 880, 881, 882, 883, 909, 943, 950, 951, 954, 955, 956, 957, 964, 968, 969, 970, 985, 989, 997, 1002, 1004], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 349, 366, 367, 368, 369, 371, 376, 378, 381, 398, 975, 977, 989], "283": [4, 15], "secondplot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 354, 364, 366, 369, 371, 373, 378, 381, 398, 401, 419, 423, 432, 439, 443, 475, 507, 621, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 842, 843, 845, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 904, 954, 974, 987, 989, 996, 998, 1002, 1006, 1010], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 391, 446, 870, 970, 975, 1007, 1010], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 361, 366, 367, 378, 381, 383, 985, 996, 1000, 1003], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 366, 369, 378, 381, 383, 989, 996, 1003], "kernelpca": [5, 391, 395, 510, 511, 518, 521, 665, 667, 669, 839, 964, 997, 998, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "take": [5, 8, 27, 30, 46, 53, 65, 74, 79, 89, 91, 95, 110, 118, 149, 151, 154, 158, 166, 167, 172, 179, 204, 205, 221, 243, 244, 251, 257, 261, 265, 266, 274, 276, 279, 282, 283, 284, 286, 287, 298, 310, 316, 321, 322, 325, 335, 339, 340, 344, 353, 354, 355, 360, 361, 364, 366, 367, 370, 371, 372, 373, 376, 378, 379, 388, 390, 391, 393, 394, 395, 397, 398, 399, 400, 402, 416, 422, 425, 427, 428, 430, 435, 436, 437, 439, 441, 447, 496, 510, 515, 516, 517, 523, 524, 558, 569, 572, 573, 575, 576, 577, 587, 588, 593, 597, 598, 601, 609, 620, 626, 648, 650, 651, 652, 653, 656, 668, 669, 676, 681, 683, 685, 695, 704, 705, 713, 717, 718, 731, 746, 749, 753, 754, 755, 756, 758, 759, 762, 763, 772, 773, 777, 785, 789, 797, 815, 816, 817, 819, 821, 822, 823, 824, 825, 837, 867, 868, 872, 873, 874, 875, 876, 877, 878, 896, 924, 943, 946, 950, 951, 953, 954, 955, 957, 959, 960, 964, 969, 970, 978, 980, 984, 986, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "exact": [5, 7, 81, 100, 154, 200, 230, 349, 353, 354, 360, 366, 367, 374, 376, 377, 378, 390, 399, 400, 413, 459, 460, 461, 465, 473, 511, 512, 518, 538, 539, 615, 619, 623, 669, 772, 785, 794, 795, 796, 874, 877, 943, 946, 950, 951, 960, 964, 968, 969, 1003, 1004, 1006], "usp": 5, "digit": [5, 29, 35, 36, 51, 67, 71, 87, 92, 134, 139, 144, 164, 187, 203, 212, 216, 221, 223, 229, 230, 254, 255, 258, 280, 285, 291, 293, 294, 296, 312, 319, 359, 366, 371, 390, 396, 397, 399, 420, 424, 425, 479, 518, 521, 526, 543, 635, 665, 666, 667, 668, 669, 680, 681, 689, 693, 694, 712, 766, 768, 795, 799, 815, 822, 829, 833, 834, 843, 853, 858, 865, 868, 877, 884, 885, 886, 943, 949, 951, 954, 957, 959, 967, 980, 984, 987, 988, 991, 1000], "reproduc": [5, 12, 59, 110, 166, 172, 184, 265, 295, 354, 356, 365, 366, 367, 368, 373, 376, 378, 384, 390, 394, 395, 398, 402, 418, 419, 432, 438, 447, 452, 465, 468, 469, 472, 474, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 530, 531, 532, 533, 536, 537, 538, 539, 540, 584, 585, 587, 588, 611, 616, 617, 618, 619, 623, 624, 627, 629, 630, 631, 637, 638, 639, 640, 643, 644, 645, 648, 653, 655, 656, 666, 667, 669, 670, 671, 766, 770, 771, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 797, 798, 799, 803, 804, 807, 818, 822, 829, 830, 831, 838, 850, 861, 864, 865, 872, 873, 874, 877, 908, 909, 925, 928, 946, 974, 977, 996, 1004, 1009, 1010], "sect": 5, "bak\u0131r": [5, 395, 512], "g\u00f6khan": [5, 395, 512], "h": [5, 6, 48, 57, 95, 96, 109, 110, 111, 127, 151, 166, 243, 281, 284, 292, 300, 310, 318, 321, 340, 363, 371, 390, 392, 395, 396, 397, 398, 401, 423, 496, 509, 512, 515, 517, 524, 530, 544, 545, 559, 567, 584, 585, 666, 670, 680, 684, 732, 808, 812, 813, 814, 819, 829, 844, 853, 946, 948, 950, 951, 952, 954, 956, 958, 959, 968, 970, 985, 1002, 1007], "jason": [5, 395, 512, 868, 1002, 1004, 1008], "weston": [5, 395, 512, 570, 571, 868], "bernhard": [5, 395, 512, 804, 839, 868, 955, 960, 969, 1002], "sch\u00f6lkopf": [5, 395, 512, 839, 960, 964, 969], "pre": [5, 70, 119, 166, 185, 298, 340, 356, 364, 366, 378, 381, 392, 394, 395, 397, 398, 399, 401, 402, 422, 423, 425, 437, 510, 512, 667, 688, 738, 836, 877, 954, 959, 964, 969, 970, 974, 975, 991, 999, 1004, 1010], "advanc": [5, 164, 224, 226, 239, 256, 355, 390, 395, 466, 478, 512, 609, 616, 758, 770, 822, 831, 834, 853, 881, 946, 957, 964, 978, 993, 998], "neural": [5, 6, 31, 167, 256, 294, 356, 376, 378, 384, 394, 395, 397, 402, 510, 512, 515, 517, 524, 544, 545, 616, 622, 673, 716, 770, 822, 829, 830, 831, 839, 946, 950, 951, 952, 954, 957, 960, 964, 968, 970, 974, 976, 978, 985, 990, 991, 996, 1008], "system": [5, 100, 256, 263, 349, 353, 355, 361, 363, 366, 367, 368, 373, 376, 381, 390, 395, 397, 401, 423, 456, 512, 516, 520, 527, 616, 622, 627, 628, 631, 632, 633, 659, 660, 701, 731, 744, 770, 822, 867, 868, 922, 950, 954, 957, 966, 974, 975, 978, 989, 996, 1004, 1005], "2004": [5, 8, 146, 256, 361, 363, 390, 392, 395, 451, 512, 584, 585, 666, 670, 681, 718, 758, 868, 948, 950, 951, 956, 969, 987], "449": [5, 167, 204, 215, 395, 512], "456": [5, 395, 512], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 55, 56, 60, 64, 65, 66, 69, 70, 71, 73, 74, 81, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 175, 176, 178, 181, 183, 184, 185, 187, 188, 189, 190, 196, 197, 198, 200, 201, 203, 204, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 244, 255, 257, 259, 260, 262, 269, 274, 276, 278, 281, 288, 289, 292, 295, 298, 299, 301, 302, 313, 314, 315, 316, 318, 333, 338, 339, 340, 360, 366, 369, 373, 376, 378, 394, 429, 511, 840, 946, 972, 974, 999], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 74, 81, 155, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 333, 338, 339, 340, 508, 514, 635, 641, 662, 663, 733, 734, 952, 954], "licenc": [5, 360], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 313, 314, 315, 316, 318, 329, 330, 333, 334, 338, 339, 340, 371], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 225, 230, 231, 232, 234, 241, 243, 257, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 298, 299, 300, 301, 302, 303, 329, 330, 333, 334, 338, 339, 340], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 60, 61, 65, 72, 74, 77, 78, 79, 84, 85, 96, 101, 110, 111, 113, 121, 122, 125, 126, 141, 152, 155, 156, 162, 164, 166, 174, 175, 176, 177, 178, 180, 186, 189, 191, 194, 198, 199, 200, 202, 210, 215, 220, 234, 241, 246, 247, 250, 253, 256, 262, 281, 282, 297, 299, 303, 304, 307, 310, 316, 325, 339, 340, 349, 356, 358, 361, 362, 363, 366, 370, 374, 377, 378, 387, 388, 390, 391, 393, 396, 397, 398, 402, 418, 419, 427, 429, 430, 431, 440, 442, 443, 453, 459, 460, 461, 466, 473, 489, 492, 496, 503, 504, 510, 513, 518, 519, 521, 525, 526, 529, 530, 531, 534, 535, 536, 537, 539, 540, 541, 542, 543, 555, 556, 557, 559, 565, 566, 567, 568, 588, 602, 604, 616, 627, 628, 631, 632, 633, 635, 636, 641, 642, 646, 649, 653, 657, 664, 668, 672, 674, 679, 680, 682, 694, 699, 701, 709, 711, 716, 720, 724, 725, 727, 730, 731, 732, 736, 745, 767, 768, 769, 775, 776, 799, 801, 810, 812, 818, 819, 822, 833, 834, 837, 838, 841, 842, 843, 846, 847, 848, 849, 850, 851, 853, 857, 858, 860, 861, 862, 863, 867, 868, 880, 881, 882, 883, 908, 909, 913, 930, 931, 936, 937, 943, 948, 950, 951, 952, 953, 956, 960, 965, 967, 969, 970, 985, 987, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "pixel": [5, 6, 13, 32, 47, 48, 53, 95, 108, 133, 144, 164, 172, 229, 254, 294, 295, 363, 390, 395, 397, 398, 399, 470, 471, 472, 541, 562, 563, 584, 585, 611, 957, 959, 970, 985, 988], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 70, 74, 85, 100, 109, 115, 116, 120, 121, 122, 123, 124, 128, 142, 143, 166, 167, 168, 169, 172, 191, 196, 203, 204, 211, 212, 214, 226, 237, 238, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 317, 343, 347, 349, 370, 377, 391, 394, 397, 416, 417, 535, 537, 544, 545, 674, 675, 677, 678, 772, 801, 804, 822, 830, 831, 833, 882, 883, 943, 944, 954, 956, 957, 962, 964, 969, 985, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1009], "data_id": [5, 119, 154, 166, 196, 214, 226, 360, 473], "41082": 5, "return_x_i": [5, 7, 14, 57, 69, 70, 71, 72, 95, 119, 120, 132, 135, 136, 137, 142, 161, 162, 168, 172, 181, 183, 184, 185, 187, 192, 193, 203, 211, 212, 226, 233, 237, 238, 252, 255, 258, 263, 264, 271, 274, 278, 285, 293, 294, 295, 303, 306, 308, 310, 316, 328, 340, 343, 359, 370, 371, 377, 384, 390, 391, 394, 397, 399, 465, 466, 467, 468, 469, 471, 472, 473, 474, 477, 478, 479, 481, 482, 487, 509, 510, 511, 512, 535, 538, 539, 544, 545, 569, 572, 573, 575, 576, 577, 579, 587, 596, 597, 599, 600, 615, 616, 635, 636, 645, 650, 651, 652, 665, 666, 667, 668, 763, 775, 776, 801, 806, 817, 822, 825, 881, 882, 883, 944, 949, 954, 955, 956, 957, 964, 980, 984, 985, 987, 988, 993, 1002, 1004, 1006, 1009], "idea": [5, 53, 79, 80, 146, 154, 166, 197, 217, 281, 325, 343, 353, 354, 366, 370, 371, 392, 393, 394, 395, 396, 397, 399, 584, 585, 950, 951, 954, 957, 960, 973, 978, 989], "noisi": [5, 33, 49, 61, 96, 142, 149, 155, 195, 198, 200, 220, 228, 247, 257, 263, 265, 266, 345, 346, 349, 390, 398, 401, 423, 428, 498, 501, 909, 949, 951, 957, 969, 974], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 56, 60, 65, 70, 71, 74, 78, 79, 95, 97, 98, 105, 111, 114, 125, 128, 131, 133, 150, 154, 157, 158, 166, 169, 172, 175, 176, 178, 180, 182, 186, 187, 188, 190, 195, 196, 197, 198, 205, 206, 207, 209, 211, 212, 214, 219, 220, 222, 228, 229, 230, 231, 235, 241, 243, 247, 251, 254, 256, 259, 261, 266, 267, 270, 281, 282, 283, 295, 299, 300, 302, 309, 317, 318, 323, 324, 326, 327, 328, 332, 333, 335, 338, 339, 343, 346, 347, 353, 355, 361, 363, 366, 367, 370, 371, 387, 390, 391, 394, 395, 396, 397, 398, 416, 420, 424, 427, 449, 450, 456, 467, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 505, 507, 508, 511, 513, 514, 516, 521, 522, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 587, 608, 609, 610, 616, 617, 618, 619, 623, 624, 625, 626, 629, 630, 635, 636, 637, 638, 639, 640, 642, 644, 646, 648, 657, 658, 661, 665, 666, 667, 668, 670, 721, 770, 771, 774, 797, 798, 803, 808, 809, 810, 812, 813, 814, 818, 830, 831, 849, 851, 862, 943, 944, 947, 951, 954, 955, 961, 964, 966, 980, 984, 988, 989, 1004, 1005, 1006, 1009, 1010], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 60, 61, 66, 74, 85, 95, 96, 98, 100, 103, 111, 113, 122, 126, 127, 148, 149, 154, 159, 164, 175, 177, 178, 180, 185, 186, 191, 194, 195, 198, 199, 201, 213, 220, 222, 225, 227, 228, 231, 256, 264, 269, 270, 288, 292, 293, 300, 307, 332, 345, 346, 349, 362, 367, 370, 388, 390, 395, 397, 399, 401, 423, 430, 488, 490, 491, 492, 493, 494, 495, 499, 501, 502, 507, 509, 511, 518, 584, 585, 588, 590, 591, 592, 593, 594, 598, 599, 601, 602, 621, 622, 626, 627, 628, 630, 631, 632, 633, 640, 641, 642, 648, 656, 669, 850, 861, 867, 947, 949, 950, 951, 954, 957, 967, 987, 988, 997, 1002, 1007, 1009, 1010], "approach": [5, 8, 57, 62, 65, 99, 146, 149, 161, 166, 169, 178, 184, 196, 198, 204, 214, 217, 338, 339, 340, 355, 365, 366, 371, 374, 378, 381, 384, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 416, 422, 426, 430, 440, 497, 509, 559, 566, 612, 635, 636, 651, 652, 802, 818, 909, 943, 944, 950, 951, 954, 955, 957, 958, 964, 968, 969, 973, 974, 978, 982, 987, 988, 1000], "copi": [5, 12, 17, 44, 61, 74, 98, 113, 161, 162, 166, 168, 182, 189, 202, 212, 214, 218, 313, 314, 316, 318, 339, 344, 354, 363, 366, 367, 369, 370, 371, 376, 378, 413, 416, 419, 421, 422, 423, 425, 427, 432, 437, 459, 460, 461, 462, 477, 479, 487, 509, 510, 511, 512, 518, 525, 530, 531, 536, 538, 539, 549, 567, 574, 584, 585, 587, 588, 605, 607, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 642, 648, 649, 651, 656, 658, 661, 662, 663, 707, 744, 772, 785, 813, 814, 828, 836, 839, 842, 843, 844, 845, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 863, 867, 868, 872, 874, 875, 876, 877, 878, 887, 890, 892, 893, 925, 927, 928, 964, 969, 970, 975, 981, 984, 989, 996, 999, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 79, 80, 85, 96, 118, 121, 142, 146, 149, 154, 155, 156, 161, 162, 178, 180, 185, 191, 197, 199, 211, 220, 225, 229, 231, 263, 265, 266, 276, 288, 300, 302, 306, 308, 309, 328, 332, 333, 339, 353, 364, 365, 366, 367, 369, 371, 373, 378, 381, 388, 394, 397, 398, 399, 492, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 579, 604, 605, 607, 609, 635, 636, 671, 674, 792, 813, 814, 869, 899, 922, 943, 944, 953, 960, 964, 967, 968, 975, 987, 988, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "corrupt": [5, 103, 180, 202, 213, 376, 829, 950, 962], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 55, 57, 66, 69, 70, 74, 79, 95, 96, 109, 111, 121, 122, 123, 127, 129, 132, 140, 143, 147, 149, 154, 155, 157, 167, 168, 169, 185, 196, 197, 204, 213, 214, 217, 225, 232, 253, 254, 259, 276, 289, 295, 298, 299, 301, 308, 310, 318, 323, 339, 343, 353, 356, 360, 361, 362, 363, 364, 367, 368, 373, 378, 379, 380, 388, 391, 395, 396, 398, 400, 401, 402, 416, 423, 425, 426, 427, 428, 430, 434, 435, 439, 441, 442, 443, 444, 445, 464, 478, 485, 486, 509, 510, 512, 513, 514, 515, 516, 518, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 584, 585, 587, 588, 593, 594, 595, 598, 601, 609, 610, 612, 613, 622, 623, 625, 627, 628, 629, 631, 632, 633, 641, 646, 648, 649, 650, 651, 652, 657, 659, 660, 662, 663, 664, 667, 669, 680, 693, 701, 710, 711, 712, 714, 716, 730, 731, 732, 768, 772, 774, 775, 776, 778, 780, 785, 789, 790, 791, 797, 803, 804, 807, 815, 816, 817, 819, 821, 823, 824, 825, 830, 831, 835, 838, 845, 846, 848, 852, 861, 864, 865, 867, 868, 869, 874, 875, 876, 877, 878, 880, 881, 882, 883, 895, 903, 917, 922, 923, 943, 945, 946, 948, 949, 951, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 973, 974, 975, 976, 978, 984, 991, 992, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007], "solv": [5, 6, 65, 149, 185, 230, 256, 365, 366, 367, 370, 376, 390, 392, 394, 395, 400, 425, 431, 440, 456, 508, 514, 515, 516, 520, 522, 523, 524, 525, 612, 614, 623, 629, 631, 632, 641, 642, 647, 649, 651, 654, 662, 663, 664, 803, 872, 873, 876, 909, 945, 948, 950, 951, 954, 955, 968, 969, 970, 973, 974, 978, 982, 985, 989, 1002, 1006, 1009], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 210, 211, 212, 214, 226, 233, 237, 238, 243, 245, 250, 253, 254, 259, 263, 265, 269, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 316, 317, 324, 338, 343, 347, 349, 353, 360, 367, 370, 377, 391, 394, 397, 416, 417, 486, 535, 536, 537, 544, 545, 674, 675, 677, 678, 799, 801, 804, 822, 830, 831, 833, 882, 883, 944, 954, 956, 957, 958, 960, 962, 964, 968, 969, 984, 985, 993], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 172, 176, 180, 186, 191, 193, 194, 202, 203, 204, 210, 211, 212, 214, 226, 228, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 270, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 316, 317, 324, 338, 343, 345, 346, 347, 349, 353, 360, 367, 370, 377, 391, 394, 397, 417, 448, 449, 450, 451, 452, 453, 454, 486, 535, 536, 537, 544, 545, 674, 675, 677, 678, 799, 801, 804, 822, 830, 831, 833, 882, 883, 944, 954, 956, 957, 958, 960, 964, 968, 969, 984, 985, 987, 993, 996], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 211, 212, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 306, 307, 308, 313, 314, 316, 317, 318, 338, 343, 347, 349, 353, 360, 367, 370, 377, 391, 394, 397, 416, 417, 535, 536, 537, 544, 545, 674, 675, 677, 678, 799, 801, 804, 822, 830, 831, 833, 882, 883, 944, 954, 956, 957, 962, 964, 969, 984, 985, 993], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 128, 137, 138, 142, 143, 157, 166, 167, 168, 169, 172, 180, 191, 193, 196, 202, 203, 204, 211, 212, 214, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 306, 307, 308, 316, 317, 338, 343, 347, 349, 360, 370, 377, 391, 394, 397, 417, 535, 536, 537, 544, 545, 674, 675, 677, 678, 799, 801, 804, 822, 830, 831, 833, 882, 883, 954, 956, 957, 964, 969, 984, 985, 993, 996], "stratifi": [5, 100, 116, 142, 168, 211, 226, 238, 251, 256, 259, 265, 284, 285, 306, 367, 378, 528, 536, 544, 545, 579, 636, 643, 645, 653, 772, 775, 776, 785, 786, 787, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 822, 830, 925, 954, 957, 984, 1001, 1002, 1003, 1005, 1006, 1009], "train_siz": [5, 7, 10, 128, 150, 172, 212, 231, 258, 269, 308, 333, 774, 788, 791, 797, 799, 949, 984, 996, 997, 1002, 1003], "1_000": [5, 48, 100, 149, 154, 156, 229, 253], "rng": [5, 20, 21, 31, 37, 50, 80, 85, 95, 97, 103, 111, 122, 125, 126, 128, 149, 150, 153, 155, 156, 158, 161, 162, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 225, 231, 233, 234, 241, 251, 259, 262, 267, 268, 292, 302, 307, 308, 310, 313, 314, 318, 328, 345, 346, 349, 354, 367, 370, 448, 452, 453, 454, 620, 626, 647, 649, 655, 783, 808, 809, 810, 812, 813, 814, 818, 821, 823, 824, 825, 850, 861, 864, 865, 867, 868, 869, 878, 980], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 60, 80, 81, 85, 95, 97, 103, 111, 121, 122, 125, 126, 128, 142, 149, 150, 153, 155, 156, 158, 161, 162, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 220, 225, 231, 234, 241, 244, 251, 259, 262, 263, 265, 266, 267, 268, 276, 292, 299, 301, 302, 307, 308, 310, 313, 314, 318, 328, 345, 346, 367, 370, 374, 378, 395, 402, 419, 422, 425, 427, 429, 430, 431, 432, 436, 437, 438, 440, 447, 448, 452, 453, 454, 465, 468, 469, 472, 474, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 560, 561, 584, 585, 587, 588, 604, 609, 611, 616, 617, 618, 619, 620, 623, 624, 626, 627, 629, 630, 631, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 651, 653, 654, 655, 656, 664, 666, 667, 668, 669, 670, 671, 672, 756, 766, 770, 771, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 797, 798, 799, 803, 804, 807, 808, 809, 810, 812, 813, 814, 818, 822, 829, 830, 831, 838, 850, 861, 864, 865, 867, 868, 869, 872, 873, 874, 877, 878, 880, 881, 882, 883, 895, 908, 909, 923, 925, 928, 964, 980, 991], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 214, 267, 359, 367, 368, 371, 377, 378, 394, 552, 984, 985, 996, 1003, 1004, 1005, 1009], "qualit": [5, 6, 53, 60, 122, 196, 361, 390, 418, 985], "assess": [5, 37, 59, 120, 122, 196, 214, 234, 253, 255, 259, 388, 397, 718, 953, 954, 960, 975], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 69, 77, 81, 85, 90, 100, 111, 113, 119, 121, 122, 154, 156, 166, 167, 176, 182, 186, 187, 197, 202, 211, 213, 214, 243, 256, 263, 268, 278, 289, 293, 295, 298, 300, 302, 308, 313, 318, 325, 330, 338, 339, 355, 359, 361, 363, 366, 368, 374, 378, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 420, 422, 424, 425, 427, 436, 437, 441, 453, 473, 475, 515, 517, 524, 532, 533, 534, 538, 539, 541, 559, 566, 567, 584, 585, 627, 631, 632, 633, 635, 636, 656, 659, 660, 721, 775, 776, 789, 798, 801, 830, 831, 838, 865, 874, 877, 909, 943, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 962, 964, 966, 967, 970, 975, 978, 987, 988, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011], "nrow": [5, 32, 65, 72, 95, 158, 196, 198, 204, 214, 217, 218, 221, 259, 276, 300, 302, 314, 332, 333, 985], "img": [5, 50, 65, 483, 563], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 57, 79, 105, 111, 113, 118, 122, 125, 127, 128, 129, 138, 149, 151, 153, 154, 155, 156, 166, 175, 186, 187, 189, 196, 204, 209, 210, 218, 222, 225, 229, 231, 238, 243, 245, 259, 263, 265, 276, 281, 282, 288, 289, 292, 293, 294, 295, 300, 301, 310, 318, 324, 325, 329, 330, 331, 332, 334, 335, 338, 345, 346, 443, 470, 471, 472, 608, 694, 941, 954], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 57, 81, 88, 95, 98, 106, 151, 152, 153, 157, 169, 187, 212, 218, 233, 267, 280, 295, 313, 314, 325, 331, 334, 360, 674, 985, 986, 1010], "grei": [5, 34, 266, 298, 361], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 77, 81, 84, 95, 218, 230, 233, 250, 255, 257, 298, 314, 318, 325, 335, 338, 361, 366, 367, 390, 392, 397, 399, 421, 530, 531, 536, 537, 565, 568, 611, 633, 669, 691, 770, 771, 772, 775, 776, 785, 796, 913, 953, 959, 969, 975, 996, 1000, 1001, 1003], "fontsiz": [5, 8, 10, 14, 34, 50, 59, 74, 90, 98, 118, 141, 152, 153, 155, 158, 176, 186, 195, 207, 218, 219, 244, 251, 260, 261, 262, 267, 268, 295, 302, 332, 886], "mse": [5, 7, 77, 78, 122, 123, 161, 162, 196, 198, 202, 270, 624, 630, 725, 954, 970, 1007, 1009], "quantit": [5, 6, 25, 60, 122, 132, 146, 270, 363, 985], "nmse": [5, 270], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 61, 63, 66, 74, 84, 91, 98, 105, 122, 128, 129, 141, 166, 167, 169, 172, 176, 185, 187, 192, 196, 211, 212, 213, 214, 225, 229, 255, 259, 260, 262, 264, 265, 266, 284, 285, 292, 300, 310, 325, 333, 338, 339, 349, 391, 394, 397, 797], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 73, 74, 84, 85, 95, 100, 104, 109, 113, 115, 127, 129, 132, 135, 136, 138, 141, 144, 145, 146, 153, 155, 161, 162, 165, 167, 170, 172, 178, 182, 184, 185, 186, 191, 193, 194, 197, 198, 204, 208, 210, 212, 213, 214, 215, 216, 219, 221, 223, 228, 231, 232, 233, 236, 250, 253, 254, 256, 259, 261, 262, 263, 264, 265, 266, 270, 281, 284, 285, 295, 298, 299, 300, 308, 309, 320, 322, 325, 326, 327, 329, 330, 334, 336, 338, 345, 346, 354, 356, 358, 362, 363, 364, 367, 368, 370, 378, 380, 388, 390, 393, 394, 395, 396, 397, 398, 399, 400, 402, 421, 433, 443, 445, 453, 459, 460, 461, 473, 478, 479, 489, 492, 498, 501, 509, 510, 511, 512, 513, 516, 518, 520, 521, 525, 526, 527, 531, 543, 559, 566, 570, 571, 583, 586, 591, 597, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 664, 665, 666, 667, 668, 669, 670, 683, 692, 725, 728, 740, 742, 749, 760, 772, 782, 786, 796, 799, 813, 814, 818, 822, 829, 830, 831, 834, 839, 840, 843, 846, 848, 850, 851, 852, 853, 861, 865, 872, 873, 874, 875, 876, 877, 878, 943, 945, 946, 947, 949, 954, 957, 958, 959, 960, 961, 962, 968, 969, 974, 976, 978, 980, 983, 984, 989, 990, 991, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "radial": [5, 100, 149, 154, 156, 325, 358, 430, 599, 668, 952, 969, 991], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 130, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 210, 224, 225, 231, 239, 254, 256, 258, 261, 318, 320, 322, 329, 331, 332, 336, 358, 391, 395, 397, 426, 430, 479, 481, 512, 518, 587, 588, 589, 590, 593, 596, 597, 598, 600, 601, 616, 617, 618, 619, 620, 653, 668, 740, 749, 751, 772, 782, 785, 791, 833, 853, 867, 868, 872, 874, 875, 876, 877, 878, 943, 946, 947, 951, 954, 960, 964, 967, 980, 985, 991, 1002, 1007], "decomposit": [5, 6, 14, 17, 57, 69, 71, 72, 73, 85, 86, 89, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 133, 217, 218, 220, 230, 232, 236, 255, 280, 285, 303, 310, 339, 355, 356, 359, 371, 374, 378, 387, 391, 397, 427, 429, 430, 431, 440, 459, 460, 461, 472, 526, 533, 588, 627, 628, 629, 630, 631, 632, 633, 640, 641, 642, 649, 650, 651, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 770, 771, 822, 829, 832, 835, 851, 881, 908, 909, 950, 951, 954, 971, 974, 976, 983, 985, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "kernel_pca": [5, 100, 391], "400": [5, 26, 50, 95, 109, 124, 128, 149, 162, 202, 222, 268, 276, 293, 339, 361, 395, 472, 989], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 154, 155, 156, 157, 158, 161, 166, 176, 189, 196, 197, 203, 210, 214, 220, 225, 231, 235, 241, 244, 247, 254, 264, 267, 294, 309, 317, 323, 325, 333, 338, 371, 402, 422, 425, 430, 437, 440, 449, 450, 456, 459, 460, 461, 508, 509, 510, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 536, 537, 538, 539, 569, 574, 588, 590, 591, 592, 596, 597, 599, 600, 602, 604, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 629, 630, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 664, 666, 667, 668, 669, 670, 671, 672, 703, 716, 760, 770, 771, 785, 808, 809, 810, 811, 812, 813, 814, 822, 830, 831, 838, 867, 868, 872, 873, 874, 875, 876, 877, 878, 940, 943, 954, 958, 962, 964, 968, 985, 989, 1004, 1009, 1010, 1011], "fit_inverse_transform": [5, 100, 512, 1005], "5e": [5, 95, 181, 572, 573, 575], "inde": [5, 7, 25, 39, 40, 53, 57, 81, 85, 100, 113, 146, 149, 166, 168, 175, 184, 185, 196, 198, 259, 263, 265, 298, 339, 349, 353, 365, 370, 377, 378, 379, 392, 397, 544, 545, 950, 964, 968, 1010], "least": [5, 14, 79, 80, 83, 86, 98, 120, 123, 146, 157, 164, 174, 175, 189, 196, 198, 201, 204, 213, 214, 215, 229, 256, 258, 274, 308, 309, 325, 339, 340, 353, 359, 361, 363, 365, 366, 371, 373, 376, 378, 379, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 423, 426, 428, 434, 435, 436, 439, 452, 459, 460, 461, 462, 471, 493, 508, 514, 516, 518, 519, 520, 522, 523, 524, 525, 526, 534, 535, 536, 537, 539, 541, 542, 543, 570, 579, 612, 620, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 674, 688, 692, 694, 760, 773, 777, 783, 785, 786, 787, 789, 790, 792, 794, 797, 798, 799, 830, 831, 834, 845, 853, 877, 880, 881, 882, 883, 901, 919, 944, 947, 951, 957, 966, 968, 969, 970, 975, 976, 978, 987, 991, 996, 998, 999, 1002, 1003, 1007], "hope": [5, 214, 378, 389, 1005], "remov": [5, 14, 16, 17, 54, 69, 74, 121, 123, 124, 146, 161, 162, 166, 169, 204, 257, 298, 306, 307, 308, 310, 338, 339, 343, 349, 358, 361, 365, 366, 369, 370, 374, 378, 390, 391, 394, 397, 398, 400, 401, 416, 418, 421, 423, 425, 437, 465, 466, 511, 512, 514, 516, 518, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 555, 556, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 588, 607, 609, 621, 625, 627, 628, 631, 632, 633, 635, 641, 642, 646, 648, 653, 657, 669, 676, 743, 797, 820, 832, 833, 837, 838, 846, 850, 851, 853, 861, 875, 876, 878, 880, 881, 882, 883, 887, 903, 904, 906, 917, 944, 951, 957, 970, 976, 981, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "think": [5, 37, 167, 303, 338, 339, 366, 396, 953, 975, 977, 978, 980], "happen": [5, 115, 184, 298, 339, 349, 353, 354, 365, 366, 369, 370, 371, 376, 378, 379, 381, 390, 392, 394, 397, 416, 492, 549, 635, 760, 851, 853, 872, 950, 954, 955, 969, 975, 989, 1004, 1008, 1009], "ridg": [5, 10, 13, 54, 74, 129, 146, 148, 159, 161, 164, 166, 174, 175, 196, 197, 215, 224, 233, 239, 338, 353, 356, 376, 395, 397, 501, 512, 516, 520, 588, 592, 599, 602, 620, 621, 622, 624, 626, 634, 638, 650, 651, 652, 655, 664, 725, 772, 785, 797, 806, 878, 949, 962, 964, 968, 969, 976, 987, 991, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1009, 1010, 1011], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 143, 280, 339, 395, 398, 424, 443, 459, 460, 461, 510, 511, 512, 515, 516, 517, 518, 520, 521, 558, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 607, 772, 775, 776, 785, 833, 837, 838, 840, 841, 842, 843, 844, 846, 847, 849, 850, 851, 853, 864, 865, 964, 965, 966, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 57, 78, 85, 95, 97, 103, 109, 110, 113, 118, 122, 149, 151, 153, 155, 157, 168, 181, 182, 186, 196, 197, 198, 199, 209, 217, 221, 228, 229, 233, 243, 247, 255, 256, 258, 259, 263, 264, 266, 269, 280, 282, 283, 300, 310, 316, 325, 331, 338, 339, 340, 344, 361, 366, 388, 389, 390, 393, 394, 395, 396, 397, 398, 401, 423, 426, 442, 445, 475, 486, 509, 511, 518, 521, 530, 536, 537, 538, 539, 540, 565, 566, 568, 580, 588, 590, 591, 592, 594, 596, 597, 599, 600, 602, 609, 610, 612, 614, 654, 656, 688, 692, 700, 703, 709, 714, 770, 771, 819, 821, 823, 824, 825, 827, 874, 875, 876, 879, 896, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 962, 966, 968, 969, 970, 987, 998, 999, 1004, 1011], "analysi": [5, 7, 9, 25, 29, 35, 36, 62, 67, 93, 96, 97, 99, 100, 102, 104, 107, 119, 164, 166, 185, 218, 240, 248, 253, 256, 257, 261, 277, 290, 298, 303, 339, 356, 358, 361, 363, 366, 367, 379, 387, 390, 392, 397, 398, 402, 418, 425, 426, 451, 453, 454, 459, 460, 462, 479, 481, 489, 492, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 532, 533, 615, 665, 667, 668, 669, 670, 686, 695, 700, 701, 731, 763, 764, 765, 766, 770, 772, 795, 799, 815, 822, 833, 834, 839, 849, 853, 860, 908, 909, 944, 950, 951, 953, 954, 964, 973, 974, 976, 978, 981, 990, 991, 996, 997, 998, 1000, 1005], "favor": [5, 81, 157, 241, 247, 376, 392, 397, 705, 779, 781, 832, 903, 943, 962, 998, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1011], "background": [5, 11, 47, 65, 295, 300, 361, 366, 373, 390, 470, 471, 951, 959, 968, 1006], "842": [5, 8, 15], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 66, 67, 70, 71, 72, 73, 74, 79, 80, 81, 85, 92, 93, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 148, 157, 159, 161, 162, 167, 168, 169, 172, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 195, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 215, 219, 221, 222, 224, 226, 229, 231, 232, 233, 234, 237, 238, 239, 241, 243, 244, 245, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 274, 276, 278, 279, 280, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 319, 320, 321, 323, 325, 326, 327, 328, 329, 333, 334, 335, 336, 339, 340, 342, 343, 345, 346, 347, 348, 349, 354, 355, 356, 367, 368, 369, 371, 377, 378, 380, 381, 384, 386, 387, 388, 390, 391, 394, 395, 396, 397, 398, 399, 405, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 447, 448, 451, 452, 453, 454, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 523, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 560, 561, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 608, 609, 610, 611, 612, 615, 616, 617, 620, 623, 624, 626, 628, 629, 630, 632, 634, 635, 636, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 665, 666, 667, 668, 669, 674, 675, 677, 678, 679, 680, 684, 704, 730, 732, 762, 763, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 829, 830, 831, 833, 834, 837, 838, 846, 847, 851, 853, 854, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 892, 893, 897, 898, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 974, 975, 977, 978, 981, 983, 984, 985, 988, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "excerpt": [6, 966, 985], "wild": [6, 359, 470, 471, 485, 486, 985, 991, 996], "aka": [6, 292, 338, 376, 398, 430, 513, 515, 517, 521, 524, 558, 559, 592, 599, 628, 629, 631, 632, 633, 635, 636, 639, 643, 644, 645, 647, 653, 654, 655, 716, 840, 844, 846, 950, 958, 968, 980, 985, 998, 1010], "lfw": [6, 361, 470, 471, 985, 996], "vi": [6, 8, 361, 676, 985, 1004, 1007], "www": [6, 70, 172, 196, 212, 214, 226, 274, 294, 360, 361, 366, 369, 371, 373, 381, 390, 394, 421, 427, 464, 485, 486, 508, 511, 514, 518, 621, 635, 641, 648, 662, 663, 822, 829, 880, 881, 950, 967, 985], "umass": [6, 361, 985], "edu": [6, 8, 11, 17, 46, 120, 146, 156, 172, 178, 217, 244, 255, 281, 289, 302, 338, 360, 361, 363, 390, 427, 464, 479, 485, 486, 487, 511, 618, 621, 626, 635, 643, 644, 653, 656, 659, 660, 808, 810, 811, 812, 822, 829, 865, 867, 880, 881, 950, 952, 985], "funnel": [6, 470, 471, 985], "tgz": [6, 985], "233mb": [6, 985], "randomizedsearchcv": [6, 149, 257, 264, 308, 349, 377, 552, 943, 954, 968, 974, 985, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "fetch_lfw_peopl": [6, 361, 985], "classification_report": [6, 32, 69, 143, 254, 295, 313, 314, 954, 985, 989, 998, 1000, 1004, 1005, 1006, 1008], "confusionmatrixdisplai": [6, 32, 250, 309, 313, 338, 608, 694, 954, 985, 1006, 1007, 1009, 1010, 1011], "standardscal": [6, 10, 31, 44, 49, 57, 61, 70, 72, 85, 106, 129, 166, 175, 184, 185, 187, 196, 212, 214, 226, 227, 235, 236, 238, 253, 263, 284, 285, 292, 300, 303, 306, 307, 309, 310, 325, 328, 349, 355, 366, 367, 370, 374, 377, 391, 394, 410, 444, 445, 544, 627, 628, 631, 632, 633, 641, 642, 653, 655, 833, 834, 837, 850, 863, 872, 873, 874, 875, 877, 878, 944, 951, 958, 964, 968, 969, 971, 985, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009], "svc": [6, 16, 25, 27, 30, 31, 32, 69, 73, 130, 136, 138, 144, 145, 164, 172, 230, 232, 236, 250, 254, 256, 258, 261, 262, 263, 266, 267, 271, 300, 306, 308, 316, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 338, 353, 367, 371, 378, 384, 391, 394, 397, 446, 492, 532, 674, 675, 677, 678, 772, 788, 802, 833, 869, 870, 872, 874, 895, 942, 943, 949, 952, 954, 955, 964, 980, 984, 985, 987, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "util": [6, 8, 10, 11, 48, 55, 60, 88, 121, 123, 124, 129, 149, 196, 198, 204, 212, 219, 228, 233, 244, 262, 264, 276, 300, 306, 316, 325, 333, 338, 354, 356, 360, 361, 364, 366, 367, 368, 369, 371, 376, 377, 378, 386, 390, 391, 394, 395, 398, 431, 446, 548, 549, 550, 553, 647, 676, 772, 793, 799, 800, 840, 943, 952, 954, 955, 964, 965, 974, 978, 981, 985, 991, 996, 997, 999, 1000, 1002, 1003], "loguniform": [6, 149, 264, 943, 985, 1006], "disk": [6, 13, 361, 364, 366, 370, 378, 384, 985], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 60, 61, 63, 69, 71, 80, 84, 91, 96, 97, 110, 121, 123, 128, 131, 136, 143, 146, 150, 151, 152, 157, 166, 175, 177, 189, 190, 193, 196, 197, 203, 213, 218, 219, 225, 229, 235, 238, 241, 242, 243, 245, 246, 251, 252, 254, 256, 257, 258, 260, 261, 265, 274, 289, 301, 306, 309, 310, 314, 321, 328, 338, 346, 347, 349, 353, 354, 359, 360, 361, 366, 367, 368, 370, 371, 373, 375, 376, 377, 378, 384, 387, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 558, 559, 560, 561, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 888, 889, 890, 892, 893, 894, 897, 898, 906, 907, 908, 909, 910, 911, 913, 914, 915, 918, 919, 920, 925, 926, 927, 928, 929, 930, 931, 932, 940, 941, 944, 949, 950, 952, 954, 955, 957, 958, 960, 961, 964, 965, 966, 968, 969, 970, 973, 978, 984, 985, 986, 987, 988, 989, 991, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lfw_peopl": [6, 361, 985], "min_faces_per_person": [6, 361, 471, 985], "resiz": [6, 46, 47, 235, 361, 470, 471, 985], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 69, 74, 77, 78, 79, 80, 81, 85, 91, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 126, 137, 138, 145, 146, 158, 161, 162, 175, 177, 178, 180, 182, 184, 186, 188, 190, 191, 195, 196, 197, 199, 200, 204, 208, 211, 213, 214, 217, 218, 219, 220, 221, 222, 225, 229, 230, 242, 244, 245, 246, 247, 253, 254, 256, 258, 259, 260, 263, 265, 266, 267, 268, 269, 270, 276, 286, 300, 301, 302, 307, 308, 310, 315, 323, 326, 327, 333, 338, 339, 349, 359, 363, 366, 367, 370, 374, 376, 377, 378, 390, 392, 393, 394, 395, 397, 401, 402, 403, 405, 407, 408, 409, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 478, 481, 485, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 598, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 745, 746, 747, 748, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 897, 898, 909, 911, 913, 918, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 943, 946, 950, 954, 955, 957, 958, 964, 965, 966, 968, 969, 970, 980, 985, 986, 987, 988, 989, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 57, 63, 102, 105, 129, 161, 180, 195, 200, 213, 232, 241, 242, 243, 246, 247, 267, 295, 309, 310, 330, 333, 340, 349, 361, 363, 371, 390, 391, 395, 397, 398, 402, 447, 450, 452, 500, 515, 517, 524, 538, 539, 565, 566, 568, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 648, 649, 654, 657, 658, 659, 660, 661, 670, 676, 700, 701, 731, 772, 785, 819, 865, 906, 911, 950, 954, 958, 959, 964, 966, 968, 969, 985, 989, 1006, 1010, 1011], "info": [6, 42, 70, 95, 166, 254, 363, 365, 369, 378, 398, 985], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 57, 59, 60, 77, 78, 79, 80, 81, 84, 90, 91, 95, 103, 110, 112, 114, 116, 143, 145, 146, 161, 162, 172, 175, 178, 180, 182, 190, 191, 195, 199, 200, 211, 213, 218, 225, 229, 230, 241, 246, 253, 258, 259, 263, 265, 266, 268, 269, 286, 292, 300, 306, 307, 308, 310, 333, 338, 339, 340, 349, 353, 359, 360, 366, 367, 370, 376, 377, 378, 390, 392, 393, 395, 397, 398, 401, 402, 403, 405, 407, 408, 409, 411, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 471, 478, 481, 485, 486, 489, 492, 493, 496, 498, 500, 501, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 686, 700, 733, 734, 735, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 909, 929, 930, 931, 932, 933, 934, 935, 946, 950, 955, 957, 958, 964, 968, 969, 970, 980, 985, 986, 988, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "id": [6, 214, 289, 347, 360, 361, 366, 373, 392, 394, 398, 471, 472, 473, 884, 886, 904, 985, 989, 1004, 1005, 1008], "person": [6, 259, 361, 365, 394, 398, 470, 471, 472, 961, 964, 985, 1004], "target_nam": [6, 19, 52, 99, 104, 205, 218, 243, 250, 257, 265, 266, 279, 317, 338, 344, 359, 361, 465, 466, 468, 469, 470, 471, 473, 474, 477, 479, 480, 481, 482, 487, 689, 954, 970, 980, 985, 989, 1006], "n_class": [6, 30, 37, 90, 91, 110, 112, 116, 118, 143, 145, 211, 218, 230, 232, 243, 263, 264, 265, 285, 286, 306, 344, 349, 366, 367, 378, 397, 416, 465, 466, 479, 492, 496, 500, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 546, 570, 571, 581, 587, 611, 616, 635, 636, 643, 644, 645, 651, 652, 653, 654, 674, 683, 692, 694, 710, 713, 716, 729, 763, 767, 772, 775, 776, 785, 794, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 815, 820, 822, 823, 830, 833, 840, 841, 844, 847, 856, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 882, 897, 898, 950, 954, 955, 958, 965, 968, 969, 977, 985, 1001, 1002, 1003, 1005, 1006, 1007], "1288": [6, 361], "1850": [6, 361], "scaler": [6, 70, 72, 164, 212, 230, 236, 238, 284, 297, 303, 304, 325, 328, 333, 349, 370, 391, 394, 467, 635, 636, 649, 651, 664, 833, 842, 843, 845, 849, 850, 851, 853, 857, 858, 859, 860, 861, 862, 863, 958, 964, 968, 985, 996, 1001, 1004, 1009], "unlabel": [6, 232, 308, 313, 314, 315, 317, 318, 378, 389, 390, 867, 868, 869, 953, 980, 983, 985, 987, 1008], "unsupervis": [6, 12, 37, 49, 71, 72, 85, 95, 115, 127, 225, 232, 258, 282, 283, 324, 338, 339, 349, 356, 358, 361, 367, 377, 378, 389, 390, 395, 396, 397, 398, 412, 421, 424, 508, 509, 511, 513, 514, 516, 519, 520, 526, 540, 543, 544, 545, 546, 547, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 605, 607, 611, 612, 615, 616, 617, 618, 619, 654, 717, 772, 775, 776, 785, 797, 800, 815, 816, 819, 821, 822, 823, 829, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 864, 865, 869, 876, 951, 954, 960, 967, 976, 980, 981, 983, 985, 991, 996, 999, 1009], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 57, 61, 68, 72, 73, 75, 84, 85, 91, 95, 103, 110, 115, 127, 137, 138, 149, 151, 152, 156, 164, 192, 197, 213, 216, 218, 219, 221, 223, 225, 229, 230, 232, 242, 243, 277, 280, 290, 300, 322, 338, 349, 353, 358, 361, 362, 363, 366, 374, 378, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 424, 425, 427, 443, 447, 451, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 481, 482, 487, 492, 496, 509, 511, 512, 515, 516, 517, 518, 521, 524, 526, 540, 543, 550, 576, 581, 608, 617, 618, 619, 665, 666, 667, 668, 669, 670, 671, 673, 676, 686, 700, 770, 771, 772, 799, 813, 814, 815, 818, 821, 822, 829, 833, 834, 837, 848, 853, 864, 865, 866, 872, 876, 909, 940, 945, 946, 949, 950, 955, 956, 960, 966, 967, 968, 969, 970, 976, 978, 980, 981, 983, 985, 986, 988, 989, 990, 991, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1008], "reduct": [6, 19, 54, 68, 72, 75, 85, 95, 113, 127, 164, 216, 218, 219, 223, 229, 232, 277, 290, 310, 322, 349, 353, 358, 389, 390, 391, 393, 395, 397, 399, 446, 459, 460, 461, 462, 479, 507, 509, 511, 512, 515, 516, 517, 518, 521, 524, 526, 530, 531, 534, 535, 536, 537, 541, 542, 543, 576, 581, 635, 636, 665, 666, 667, 668, 669, 670, 756, 772, 799, 815, 822, 829, 833, 834, 853, 870, 872, 880, 881, 882, 883, 946, 951, 966, 970, 975, 976, 978, 985, 991, 997, 998, 999, 1002, 1010, 1011], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 51, 61, 63, 70, 90, 97, 115, 118, 129, 132, 166, 167, 196, 198, 207, 211, 225, 234, 235, 241, 243, 244, 247, 253, 257, 265, 266, 281, 298, 300, 307, 313, 314, 325, 338, 349, 364, 366, 369, 371, 376, 387, 388, 390, 395, 396, 397, 464, 564, 565, 568, 576, 701, 731, 767, 884, 886, 943, 946, 950, 952, 962, 978, 985, 988, 989, 1010], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 57, 61, 63, 98, 182, 211, 212, 213, 219, 222, 225, 229, 231, 257, 338, 339, 340, 653, 654, 655, 985], "svd_solver": [6, 95, 103, 395, 512, 518, 985, 1002], "whiten": [6, 95, 96, 97, 280, 395, 402, 510, 511, 518, 851, 853, 985, 1000, 1002, 1010, 1011], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 143, 146, 154, 166, 167, 172, 175, 182, 213, 231, 246, 254, 257, 260, 265, 301, 308, 338, 339, 340, 349, 360, 364, 366, 367, 369, 371, 372, 373, 374, 376, 378, 390, 392, 394, 395, 397, 420, 421, 424, 428, 430, 450, 459, 460, 461, 462, 466, 512, 538, 539, 559, 583, 605, 607, 609, 611, 620, 621, 622, 636, 716, 770, 771, 772, 785, 790, 791, 837, 851, 939, 943, 944, 947, 950, 951, 954, 956, 957, 958, 964, 967, 968, 969, 970, 975, 980, 984, 985, 987, 989, 996, 998, 1003, 1006, 1008], "components_": [6, 14, 57, 85, 95, 97, 98, 101, 106, 229, 230, 295, 303, 310, 378, 391, 395, 423, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 520, 521, 616, 822, 829, 864, 865, 966, 985, 1000, 1002, 1008, 1011], "project": [6, 8, 11, 13, 17, 45, 57, 66, 89, 93, 95, 97, 99, 101, 102, 107, 164, 167, 193, 217, 218, 219, 221, 224, 230, 232, 239, 280, 285, 289, 322, 339, 353, 356, 358, 360, 364, 365, 369, 370, 371, 374, 378, 379, 381, 387, 393, 395, 396, 402, 419, 429, 430, 440, 452, 459, 460, 461, 462, 466, 479, 481, 508, 510, 511, 512, 514, 516, 518, 519, 520, 521, 525, 526, 550, 559, 566, 618, 619, 626, 665, 668, 672, 673, 803, 822, 850, 864, 865, 866, 908, 909, 948, 950, 951, 952, 955, 957, 958, 960, 967, 970, 972, 977, 978, 980, 985, 988, 991, 996, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "orthonorm": [6, 374, 908, 985], "x_train_pca": [6, 985], "x_test_pca": [6, 100, 985], "966": [6, 8, 15], "094": [6, 450], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 55, 69, 70, 71, 72, 100, 109, 111, 112, 114, 116, 117, 118, 121, 127, 130, 131, 142, 143, 164, 168, 172, 174, 186, 187, 188, 194, 203, 205, 208, 211, 215, 225, 230, 237, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 273, 275, 278, 279, 284, 285, 287, 292, 295, 300, 303, 308, 309, 312, 313, 314, 316, 317, 319, 320, 321, 324, 326, 327, 328, 334, 335, 336, 340, 361, 363, 366, 367, 370, 376, 378, 390, 391, 394, 398, 399, 400, 407, 414, 416, 417, 418, 465, 466, 473, 481, 489, 491, 492, 499, 508, 513, 514, 519, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 570, 571, 579, 583, 587, 599, 606, 608, 609, 610, 626, 635, 636, 643, 645, 648, 649, 650, 651, 652, 653, 674, 675, 677, 678, 679, 683, 684, 685, 688, 689, 694, 696, 701, 702, 704, 705, 709, 710, 713, 714, 715, 716, 717, 718, 729, 731, 757, 758, 759, 762, 763, 764, 767, 769, 772, 775, 776, 785, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 821, 823, 824, 829, 830, 831, 833, 834, 840, 853, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 901, 903, 943, 944, 946, 949, 950, 951, 954, 955, 956, 959, 962, 964, 967, 968, 969, 970, 974, 975, 976, 978, 980, 981, 983, 984, 985, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "1e3": [6, 7, 10, 149, 155, 161, 231, 267, 943, 985], "1e5": [6, 154, 177, 179, 186, 267, 590, 591, 592, 596, 597, 599, 600, 602, 861, 866, 966, 985, 987], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 57, 62, 70, 89, 101, 102, 114, 121, 124, 125, 130, 135, 138, 142, 143, 151, 153, 169, 186, 188, 189, 193, 194, 200, 203, 205, 208, 209, 210, 212, 220, 226, 227, 230, 232, 234, 238, 245, 253, 257, 261, 262, 264, 267, 268, 279, 282, 283, 284, 287, 292, 300, 306, 307, 308, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 338, 343, 344, 347, 353, 361, 377, 378, 384, 391, 394, 397, 399, 417, 526, 527, 530, 532, 534, 536, 538, 540, 541, 544, 570, 571, 574, 609, 611, 615, 616, 617, 618, 619, 621, 622, 625, 629, 635, 636, 637, 638, 639, 643, 645, 646, 649, 650, 651, 652, 653, 654, 657, 674, 675, 677, 678, 763, 772, 775, 776, 785, 801, 802, 803, 805, 808, 809, 810, 811, 812, 819, 820, 830, 872, 874, 876, 877, 880, 884, 886, 944, 946, 950, 954, 955, 957, 958, 960, 961, 968, 969, 970, 980, 984, 985, 989], "class_weight": [6, 327, 378, 534, 538, 541, 635, 636, 643, 645, 651, 652, 653, 654, 872, 874, 875, 876, 877, 878, 879, 880, 882, 943, 968, 969, 985, 996, 997, 999, 1000, 1001, 1002, 1004, 1010, 1011], "n_iter": [6, 17, 149, 175, 204, 217, 218, 222, 257, 264, 276, 295, 327, 367, 371, 377, 402, 432, 456, 509, 510, 514, 516, 521, 522, 523, 524, 621, 622, 623, 624, 629, 630, 637, 638, 639, 640, 658, 659, 660, 661, 662, 663, 664, 669, 671, 775, 776, 783, 785, 829, 831, 908, 909, 943, 968, 985, 997, 1002, 1003, 1004, 1008, 1010, 1011], "found": [6, 19, 20, 21, 106, 116, 149, 153, 155, 157, 158, 200, 232, 254, 257, 258, 259, 306, 309, 325, 340, 353, 355, 360, 363, 365, 366, 367, 371, 376, 378, 379, 387, 390, 393, 394, 395, 397, 398, 400, 413, 420, 423, 424, 437, 450, 534, 535, 536, 537, 541, 542, 565, 567, 587, 588, 605, 613, 624, 628, 630, 632, 638, 640, 642, 648, 649, 651, 653, 655, 664, 665, 688, 695, 772, 775, 776, 785, 810, 815, 816, 822, 844, 846, 847, 880, 881, 882, 883, 887, 938, 942, 943, 946, 950, 951, 953, 955, 956, 957, 958, 964, 968, 969, 975, 977, 980, 985, 989, 996, 999, 1000, 1003, 1004, 1006, 1010], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 60, 70, 71, 73, 77, 81, 118, 120, 127, 153, 164, 166, 185, 214, 222, 230, 231, 235, 241, 246, 249, 253, 255, 257, 258, 260, 261, 272, 274, 278, 280, 281, 289, 295, 300, 301, 303, 322, 325, 331, 333, 338, 367, 372, 376, 378, 385, 391, 394, 396, 397, 398, 400, 426, 439, 442, 450, 475, 479, 492, 499, 608, 609, 610, 624, 627, 630, 631, 633, 636, 638, 640, 653, 689, 703, 717, 760, 763, 772, 775, 776, 782, 785, 787, 799, 800, 877, 947, 949, 954, 957, 961, 975, 980, 981, 983, 985, 987, 991, 996, 999, 1000, 1001, 1003, 1004, 1010], "search": [6, 46, 54, 70, 71, 72, 73, 122, 143, 149, 164, 214, 231, 246, 249, 257, 260, 261, 268, 272, 278, 280, 295, 300, 325, 338, 349, 356, 363, 364, 366, 367, 376, 378, 385, 390, 391, 394, 397, 398, 399, 400, 401, 422, 428, 430, 435, 436, 442, 449, 450, 456, 479, 492, 499, 534, 535, 536, 537, 541, 542, 543, 555, 576, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 605, 653, 665, 666, 669, 670, 689, 703, 760, 763, 772, 775, 776, 782, 783, 785, 787, 799, 800, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 877, 880, 881, 882, 883, 914, 942, 947, 949, 951, 954, 957, 958, 968, 970, 974, 975, 980, 981, 983, 985, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1010], "best_estimator_": [6, 54, 72, 73, 77, 103, 231, 246, 257, 260, 280, 772, 775, 776, 785, 943, 984, 985, 1003], "850": 6, "76823": 6, "03433306453": 6, "003418945823095797": 6, "y_pred": [6, 7, 25, 30, 32, 34, 44, 56, 61, 69, 74, 109, 121, 122, 123, 124, 129, 143, 166, 196, 198, 203, 206, 211, 213, 214, 225, 226, 234, 254, 259, 283, 287, 295, 316, 317, 349, 366, 372, 378, 397, 411, 418, 443, 459, 460, 461, 526, 529, 531, 533, 535, 537, 539, 542, 544, 545, 547, 588, 608, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 674, 675, 677, 678, 679, 684, 688, 689, 694, 697, 698, 699, 703, 704, 705, 709, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 758, 759, 760, 762, 763, 769, 772, 775, 776, 785, 794, 804, 806, 807, 816, 824, 831, 833, 872, 873, 874, 875, 876, 877, 878, 881, 883, 954, 956, 985, 1002, 1003, 1005, 1007, 1011], "from_estim": [6, 25, 27, 31, 55, 112, 115, 126, 130, 167, 179, 188, 205, 235, 237, 250, 253, 259, 263, 266, 279, 284, 287, 306, 307, 308, 309, 321, 322, 323, 326, 327, 344, 372, 388, 417, 608, 609, 610, 674, 675, 677, 678, 694, 702, 757, 759, 762, 763, 764, 954, 961, 985, 993, 1009, 1010, 1011], "display_label": [6, 250, 674, 985, 1008], "xticks_rot": [6, 674, 985], "vertic": [6, 17, 59, 121, 169, 185, 229, 230, 260, 274, 298, 301, 330, 332, 378, 387, 390, 395, 492, 674, 756, 985], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 64, 72, 74, 85, 95, 96, 106, 112, 116, 118, 123, 127, 129, 131, 151, 153, 158, 161, 168, 169, 175, 176, 186, 194, 196, 204, 207, 211, 214, 217, 230, 234, 251, 268, 274, 276, 278, 288, 299, 300, 301, 302, 303, 306, 310, 323, 339, 343, 344, 985], "054": 6, "precis": [6, 25, 32, 69, 74, 81, 95, 143, 155, 156, 164, 167, 172, 226, 249, 250, 254, 272, 295, 298, 313, 314, 366, 367, 378, 387, 389, 390, 392, 395, 397, 422, 447, 448, 449, 450, 451, 452, 453, 454, 456, 481, 500, 509, 511, 518, 521, 621, 622, 623, 625, 627, 628, 629, 631, 632, 633, 646, 649, 651, 657, 659, 660, 664, 677, 682, 683, 684, 689, 702, 704, 705, 706, 714, 738, 757, 758, 759, 762, 763, 770, 771, 799, 802, 813, 814, 819, 834, 853, 856, 872, 877, 884, 886, 909, 948, 950, 957, 958, 969, 985, 989, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "recal": [6, 25, 32, 69, 100, 143, 164, 226, 249, 254, 272, 295, 313, 314, 366, 378, 390, 481, 581, 677, 682, 683, 684, 688, 689, 702, 704, 705, 706, 757, 758, 759, 762, 763, 799, 802, 834, 853, 856, 872, 950, 970, 985, 989, 999, 1000, 1003, 1005, 1006, 1008, 1009, 1010], "f1": [6, 25, 32, 69, 143, 254, 295, 313, 314, 317, 394, 689, 704, 705, 713, 758, 954, 955, 985, 989, 1000], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 69, 71, 94, 108, 114, 120, 128, 133, 142, 143, 167, 197, 206, 207, 208, 214, 230, 231, 237, 250, 254, 261, 263, 276, 295, 298, 302, 310, 313, 314, 317, 318, 321, 322, 325, 326, 328, 330, 333, 336, 353, 354, 355, 356, 360, 364, 366, 367, 369, 370, 372, 374, 375, 377, 378, 379, 390, 394, 395, 398, 400, 416, 419, 428, 430, 431, 442, 444, 445, 447, 452, 464, 473, 489, 515, 517, 518, 521, 524, 526, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 590, 591, 592, 594, 596, 597, 599, 600, 602, 604, 609, 610, 620, 622, 634, 635, 636, 647, 648, 649, 651, 652, 653, 654, 655, 664, 667, 671, 683, 689, 704, 705, 713, 718, 743, 753, 754, 755, 758, 759, 762, 763, 772, 775, 776, 785, 796, 797, 805, 806, 811, 813, 814, 817, 819, 820, 825, 833, 834, 838, 844, 846, 847, 849, 853, 860, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 898, 903, 904, 942, 943, 944, 946, 947, 948, 950, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 968, 970, 972, 974, 975, 976, 978, 980, 983, 985, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ariel": [6, 361, 996, 1002], "sharon": [6, 361], "83": [6, 8, 30, 34, 39, 69, 295, 313, 363, 367, 400, 683, 761, 954, 985, 989, 999], "colin": [6, 361, 1002], "powel": [6, 361], "87": [6, 32, 69, 158, 254, 295, 314, 574, 644, 763, 772, 849, 860, 954, 989], "90": [6, 10, 14, 32, 73, 105, 106, 121, 122, 123, 143, 154, 169, 176, 187, 193, 195, 198, 203, 214, 241, 265, 267, 295, 300, 313, 314, 349, 353, 366, 371, 394, 540, 756, 772, 797, 802, 949, 954, 985, 989], "donald": [6, 361, 390, 700, 944], "rumsfeld": [6, 361], "67": [6, 8, 65, 166, 214, 363, 493, 494, 495, 604, 644, 689, 785, 944, 954, 968, 992, 996], "69": [6, 187, 219, 314, 390, 449, 450, 584, 585, 731, 954, 964, 987], "georg": [6, 361, 390, 1002, 1008, 1009, 1010], "bush": [6, 361], "95": [6, 14, 30, 32, 44, 52, 66, 74, 90, 101, 102, 118, 122, 156, 166, 175, 196, 198, 203, 214, 243, 244, 247, 256, 257, 281, 289, 295, 300, 310, 314, 325, 349, 397, 504, 609, 610, 613, 624, 638, 723, 869, 950, 954, 955, 967, 989, 999], "93": [6, 32, 196, 238, 254, 295, 314, 338, 363, 763, 772, 797, 880, 949, 954, 985, 989], "146": [6, 397], "gerhard": [6, 361], "schroeder": [6, 361], "hugo": [6, 361, 1002, 1007, 1008, 1009, 1010], "chavez": [6, 361], "00": [6, 15, 22, 28, 32, 35, 67, 75, 79, 82, 86, 92, 98, 107, 133, 139, 147, 154, 159, 163, 166, 170, 173, 187, 214, 215, 223, 239, 248, 254, 257, 272, 275, 290, 295, 296, 303, 304, 311, 313, 314, 319, 336, 339, 341, 348, 360, 363, 371, 390, 397, 398, 689, 691, 763, 772, 785, 797, 881, 950, 954, 964, 966, 968, 988], "toni": [6, 361, 540, 853, 960, 1009, 1010], "blair": [6, 361], "85": [6, 16, 17, 32, 50, 69, 98, 143, 167, 211, 214, 267, 295, 314, 349, 397, 418, 477, 532, 533, 574, 629, 635, 720, 728, 763, 772, 797, 954, 955, 985, 996], "322": [6, 90, 449, 450], "macro": [6, 32, 69, 143, 254, 295, 306, 313, 314, 361, 394, 683, 689, 704, 705, 713, 758, 759, 762, 763, 954, 989, 996, 1004], "avg": [6, 32, 69, 143, 254, 295, 313, 314, 546, 680, 689, 954, 985, 989], "weight": [6, 13, 14, 19, 24, 32, 54, 69, 106, 110, 122, 130, 131, 142, 143, 154, 162, 164, 166, 174, 185, 187, 196, 200, 201, 210, 211, 212, 214, 215, 236, 241, 254, 259, 263, 265, 279, 288, 291, 292, 295, 296, 303, 306, 309, 313, 314, 320, 327, 336, 338, 339, 340, 349, 362, 363, 374, 376, 378, 390, 392, 393, 395, 396, 399, 401, 407, 411, 416, 419, 422, 423, 425, 427, 431, 437, 441, 442, 443, 445, 447, 452, 459, 460, 461, 473, 492, 501, 515, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 563, 566, 567, 568, 570, 574, 579, 580, 587, 588, 605, 611, 612, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 666, 670, 674, 675, 676, 677, 678, 679, 683, 684, 685, 688, 689, 692, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 710, 711, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 744, 757, 758, 759, 760, 762, 763, 764, 767, 768, 769, 770, 771, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 835, 852, 853, 867, 868, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 897, 898, 911, 929, 935, 944, 945, 950, 951, 953, 954, 956, 957, 958, 959, 961, 967, 968, 969, 970, 975, 980, 987, 989, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "86": [6, 32, 69, 143, 187, 300, 313, 314, 763, 880, 954, 985], "plot_galleri": [6, 95, 985], "n_row": [6, 19, 95, 387, 405, 429, 431, 488, 490, 985], "n_col": [6, 19, 95, 233, 405, 429, 431, 488, 490, 609, 985], "portrait": [6, 395, 985], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 71, 77, 81, 84, 88, 89, 90, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 127, 128, 132, 135, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 166, 167, 168, 175, 181, 186, 189, 190, 193, 195, 197, 198, 200, 202, 207, 210, 211, 212, 213, 219, 220, 221, 225, 229, 230, 231, 232, 233, 235, 241, 243, 244, 247, 250, 255, 260, 261, 270, 281, 285, 286, 289, 292, 295, 298, 300, 301, 306, 308, 313, 314, 315, 323, 325, 329, 330, 333, 344, 345, 346, 366, 390, 396, 397, 398, 400, 417, 608, 609, 674, 675, 677, 678, 886, 943, 947, 950, 953, 954, 957, 958, 961, 968, 969, 970, 985, 987, 1009], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 61, 63, 79, 81, 90, 91, 97, 98, 105, 110, 112, 113, 129, 166, 167, 195, 196, 211, 214, 225, 232, 241, 243, 244, 247, 251, 267, 269, 281, 289, 292, 295, 300, 308, 314, 322, 325, 985], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 51, 53, 61, 63, 90, 91, 120, 127, 129, 132, 167, 196, 207, 225, 241, 243, 244, 247, 253, 256, 267, 281, 298, 314, 316, 325, 366, 388, 390, 396, 564, 884, 948, 950, 954, 975, 985, 988], "left": [6, 7, 12, 13, 14, 16, 24, 39, 42, 44, 51, 61, 63, 71, 80, 81, 90, 91, 97, 98, 110, 113, 115, 116, 119, 122, 125, 129, 131, 152, 158, 162, 166, 167, 181, 189, 196, 197, 198, 200, 207, 209, 210, 213, 214, 225, 229, 232, 234, 235, 241, 243, 244, 247, 253, 254, 255, 257, 265, 266, 268, 281, 282, 283, 289, 292, 295, 298, 310, 314, 324, 325, 347, 366, 367, 369, 387, 390, 393, 394, 396, 397, 398, 400, 450, 459, 460, 461, 462, 470, 475, 526, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 564, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 607, 612, 616, 620, 628, 632, 770, 771, 772, 775, 776, 778, 785, 846, 853, 880, 881, 882, 883, 884, 896, 909, 925, 928, 943, 946, 948, 950, 952, 954, 956, 961, 966, 968, 970, 984, 985, 987, 1003, 1005, 1010], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 61, 67, 75, 84, 95, 97, 98, 113, 120, 121, 123, 126, 127, 133, 146, 154, 158, 159, 166, 167, 170, 177, 180, 187, 203, 208, 209, 214, 215, 217, 218, 223, 225, 229, 231, 235, 239, 243, 247, 248, 250, 255, 256, 257, 258, 261, 263, 272, 281, 290, 293, 298, 303, 307, 311, 319, 327, 336, 339, 345, 346, 348, 361, 363, 370, 390, 399, 427, 449, 492, 509, 516, 520, 572, 573, 575, 619, 623, 631, 635, 655, 673, 691, 772, 785, 866, 923, 950, 954, 958, 964, 966, 968, 985, 989], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 51, 53, 59, 61, 63, 78, 79, 81, 90, 91, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 122, 123, 124, 129, 131, 142, 149, 152, 162, 167, 186, 197, 198, 199, 200, 202, 203, 206, 207, 225, 228, 229, 241, 243, 244, 246, 247, 251, 256, 259, 263, 266, 267, 269, 281, 289, 292, 295, 298, 300, 303, 314, 325, 327, 333, 335, 338, 339, 344, 347, 349, 356, 366, 376, 379, 387, 390, 393, 395, 396, 397, 400, 442, 459, 460, 461, 462, 511, 518, 521, 534, 535, 536, 537, 538, 539, 541, 542, 543, 564, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 612, 653, 655, 838, 880, 881, 882, 883, 884, 896, 909, 943, 946, 948, 950, 952, 954, 956, 957, 961, 966, 968, 969, 970, 974, 975, 978, 981, 985, 987, 988, 998, 1004, 1010], "99": [6, 25, 32, 44, 51, 61, 95, 214, 225, 229, 241, 243, 254, 257, 295, 298, 314, 354, 359, 363, 369, 394, 397, 398, 469, 624, 638, 648, 763, 820, 923, 949, 954, 964, 968, 985, 991, 998], "hspace": [6, 13, 14, 44, 45, 61, 95, 167, 214, 225, 241, 243, 244, 247, 281, 308, 314, 322, 985], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 124, 194, 196, 214, 229, 232, 233, 263, 294, 363, 395, 470, 471, 479, 498, 985, 988, 1007], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 98, 120, 123, 136, 142, 151, 152, 153, 157, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 251, 270, 280, 289, 295, 313, 325, 329, 330, 331, 338, 985], "portion": [6, 8, 80, 265, 353, 361, 363, 366, 371, 378, 763, 794, 811, 943, 953, 957, 985, 989], "pred_nam": [6, 985], "rsplit": [6, 17, 257, 985], "true_nam": [6, 985], "ntrue": [6, 313, 314, 985], "prediction_titl": [6, 985], "signif": [6, 985], "eigenface_titl": [6, 985], "convolut": [6, 157, 985], "network": [6, 167, 294, 353, 354, 355, 356, 360, 361, 376, 378, 379, 384, 390, 395, 397, 402, 473, 510, 512, 544, 545, 673, 716, 830, 831, 922, 950, 952, 954, 968, 970, 974, 976, 985, 990, 991, 996, 1010], "famili": [6, 353, 355, 378, 390, 393, 395, 397, 398, 399, 569, 572, 573, 575, 576, 577, 583, 625, 646, 657, 830, 831, 849, 860, 950, 964, 968, 985, 987, 1000, 1010], "outsid": [6, 9, 19, 118, 197, 198, 228, 376, 398, 612, 852, 960, 985, 1004], "scope": [6, 353, 355, 366, 376, 398, 974, 975, 985], "scikit": [6, 8, 10, 12, 16, 17, 27, 31, 32, 50, 56, 69, 84, 95, 112, 115, 121, 123, 124, 129, 143, 146, 153, 155, 157, 158, 162, 164, 166, 184, 185, 188, 204, 205, 214, 218, 219, 220, 224, 237, 238, 249, 253, 267, 272, 276, 281, 283, 305, 311, 330, 338, 339, 343, 344, 349, 354, 355, 356, 358, 360, 361, 362, 363, 365, 366, 368, 371, 372, 373, 374, 377, 378, 383, 384, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 404, 405, 407, 408, 409, 411, 412, 417, 422, 425, 428, 435, 437, 442, 443, 445, 446, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 481, 489, 492, 501, 515, 538, 539, 541, 542, 544, 558, 559, 562, 563, 576, 579, 588, 603, 605, 607, 611, 617, 623, 625, 629, 635, 646, 657, 665, 677, 693, 723, 753, 754, 755, 763, 772, 773, 774, 775, 776, 777, 785, 788, 789, 790, 791, 792, 799, 801, 802, 815, 817, 834, 840, 843, 846, 848, 852, 853, 856, 869, 870, 872, 877, 881, 903, 904, 943, 944, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 964, 967, 968, 969, 970, 973, 977, 983, 984, 985, 987, 988, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "librari": [6, 256, 309, 345, 349, 358, 360, 361, 364, 365, 366, 371, 376, 377, 378, 381, 386, 635, 872, 873, 874, 875, 877, 878, 922, 950, 954, 969, 970, 974, 975, 978, 985, 989, 994, 999, 1003, 1004, 1005, 1006, 1007, 1009], "reader": [6, 42, 309, 355, 366, 985], "pytorch": [6, 376, 974, 975, 985], "tensorflow": [6, 376, 974, 985], "implement": [6, 7, 13, 16, 17, 46, 55, 80, 95, 162, 172, 181, 185, 210, 214, 217, 225, 231, 254, 256, 258, 265, 278, 281, 301, 306, 307, 308, 309, 310, 338, 340, 353, 354, 355, 360, 361, 363, 364, 366, 367, 370, 371, 373, 374, 378, 381, 384, 386, 387, 389, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 416, 421, 422, 423, 425, 426, 427, 428, 470, 473, 485, 509, 510, 511, 512, 513, 515, 518, 519, 520, 530, 531, 532, 534, 535, 538, 539, 540, 544, 549, 559, 560, 565, 566, 568, 570, 574, 578, 587, 588, 609, 610, 617, 618, 622, 623, 630, 634, 635, 636, 640, 641, 645, 648, 649, 651, 652, 653, 654, 655, 661, 662, 663, 664, 665, 668, 669, 672, 683, 687, 696, 710, 713, 753, 757, 763, 764, 770, 772, 775, 776, 785, 789, 790, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 808, 809, 810, 811, 812, 815, 816, 818, 821, 823, 829, 830, 831, 833, 836, 845, 854, 862, 863, 869, 872, 873, 874, 875, 876, 877, 878, 908, 909, 921, 922, 923, 925, 943, 944, 946, 948, 950, 951, 952, 953, 955, 956, 958, 959, 960, 964, 966, 967, 970, 971, 972, 974, 975, 976, 978, 980, 985, 986, 987, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "017": [6, 15, 371, 449, 450], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 60, 67, 69, 71, 114, 123, 143, 157, 164, 197, 237, 238, 243, 247, 249, 259, 262, 265, 270, 272, 278, 281, 288, 297, 300, 302, 304, 308, 312, 314, 315, 318, 319, 323, 338, 340, 349, 355, 361, 362, 366, 370, 376, 386, 390, 394, 397, 425, 479, 489, 497, 679, 689, 717, 772, 838, 868, 880, 943, 944, 948, 954, 955, 956, 957, 964, 967, 970, 973], "diabet": [7, 123, 132, 134, 139, 146, 162, 164, 183, 184, 185, 192, 193, 359, 397, 478, 629, 630, 772, 777, 794, 795, 796, 962, 980, 984, 991], "regress": [7, 10, 13, 25, 27, 30, 54, 68, 70, 75, 79, 80, 83, 86, 98, 108, 113, 115, 120, 128, 133, 146, 148, 157, 159, 161, 162, 164, 166, 167, 174, 178, 180, 182, 186, 190, 191, 193, 197, 199, 200, 201, 212, 215, 224, 226, 233, 238, 239, 258, 269, 270, 274, 277, 290, 295, 299, 303, 308, 309, 310, 320, 336, 338, 342, 348, 354, 355, 356, 358, 359, 361, 363, 366, 367, 370, 373, 374, 376, 377, 378, 385, 392, 393, 394, 395, 399, 411, 416, 442, 443, 452, 461, 466, 467, 469, 473, 478, 479, 481, 482, 489, 493, 494, 495, 501, 505, 508, 512, 514, 516, 518, 519, 520, 522, 523, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 547, 548, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582, 583, 586, 587, 588, 591, 592, 599, 600, 602, 609, 610, 611, 612, 614, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 671, 682, 697, 698, 699, 703, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 760, 772, 775, 776, 785, 796, 797, 799, 800, 804, 806, 807, 815, 816, 821, 823, 824, 830, 831, 833, 834, 837, 838, 840, 846, 847, 848, 850, 853, 856, 861, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 886, 892, 895, 897, 913, 943, 944, 946, 949, 951, 961, 962, 964, 965, 974, 975, 976, 977, 978, 980, 983, 986, 991, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "patient": [7, 132, 146, 162, 363, 373, 394, 950, 987], "diseas": [7, 132, 146, 162, 259, 363, 688, 954, 987], "newsgroup": [7, 14, 19, 229, 257, 317, 339, 340, 359, 387, 398, 465, 466, 981, 991], "post": [7, 14, 19, 69, 164, 310, 338, 339, 340, 342, 348, 353, 361, 365, 366, 369, 370, 377, 390, 426, 465, 466, 477, 688, 799, 880, 954, 970, 978, 989, 1007], "written": [7, 29, 35, 88, 164, 203, 309, 354, 363, 366, 367, 371, 373, 376, 378, 391, 396, 464, 479, 485, 689, 799, 877, 884, 948, 950, 954, 958, 959, 968, 973, 980, 981, 986, 989, 1005], "about": [7, 11, 29, 44, 53, 61, 69, 85, 88, 118, 143, 158, 164, 166, 169, 213, 225, 253, 254, 256, 263, 281, 306, 308, 309, 310, 314, 338, 340, 347, 349, 353, 354, 356, 359, 361, 365, 366, 369, 370, 377, 378, 379, 384, 394, 395, 398, 400, 417, 469, 471, 472, 473, 474, 477, 478, 479, 481, 482, 487, 492, 538, 539, 570, 571, 584, 585, 591, 617, 653, 655, 718, 772, 785, 802, 893, 944, 950, 951, 953, 955, 957, 960, 961, 964, 965, 967, 969, 970, 972, 974, 978, 980, 981, 987, 989, 1001, 1002], "sgdclassifi": [7, 8, 203, 204, 205, 206, 207, 208, 209, 230, 264, 317, 327, 338, 349, 353, 355, 371, 378, 388, 389, 398, 615, 617, 618, 619, 623, 635, 643, 645, 872, 877, 946, 950, 955, 968, 969, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011], "stochast": [7, 57, 121, 124, 164, 172, 174, 215, 219, 221, 225, 230, 284, 285, 291, 296, 309, 390, 395, 397, 440, 465, 473, 479, 480, 481, 491, 499, 513, 521, 536, 537, 548, 581, 604, 616, 635, 636, 645, 649, 651, 653, 654, 655, 656, 664, 665, 666, 667, 669, 799, 822, 829, 830, 831, 834, 843, 876, 908, 909, 928, 943, 957, 958, 960, 976, 990, 991, 996, 997, 1000, 1001, 1003, 1005, 1007], "gradient": [7, 46, 65, 108, 115, 126, 129, 132, 133, 154, 155, 164, 174, 215, 225, 230, 298, 378, 390, 400, 430, 440, 444, 445, 465, 473, 478, 480, 481, 492, 497, 530, 531, 536, 537, 538, 539, 548, 563, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 611, 612, 616, 625, 626, 635, 636, 645, 646, 649, 651, 653, 654, 655, 657, 664, 669, 671, 672, 717, 723, 725, 775, 776, 777, 796, 799, 829, 830, 831, 834, 846, 847, 876, 928, 951, 954, 957, 958, 959, 960, 974, 976, 991, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1011], "descent": [7, 13, 164, 174, 181, 215, 225, 230, 309, 395, 397, 449, 450, 456, 465, 473, 480, 508, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 548, 616, 623, 624, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 645, 649, 651, 653, 654, 655, 658, 659, 660, 661, 664, 671, 799, 830, 831, 834, 872, 876, 928, 951, 958, 960, 969, 976, 987, 991, 996, 999, 1000, 1001, 1003, 1005, 1007, 1009, 1010], "nusvr": [7, 353, 878, 969, 998, 1004, 1006, 1007, 1008, 1010, 1011], "nu": [7, 9, 11, 158, 210, 225, 324, 353, 397, 400, 596, 654, 874, 875, 876, 960, 968, 969, 1007, 1011], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 67, 71, 88, 95, 97, 125, 142, 149, 157, 177, 183, 200, 201, 208, 212, 230, 231, 234, 237, 254, 256, 257, 258, 261, 282, 295, 298, 318, 321, 322, 324, 325, 326, 328, 329, 330, 333, 335, 336, 339, 353, 355, 356, 370, 371, 374, 376, 378, 387, 388, 390, 392, 393, 394, 395, 397, 400, 401, 402, 416, 422, 423, 424, 425, 427, 428, 429, 431, 442, 443, 445, 446, 459, 460, 461, 462, 464, 466, 474, 486, 489, 498, 501, 508, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 528, 529, 544, 545, 546, 547, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 597, 599, 600, 602, 615, 617, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 649, 650, 651, 652, 653, 654, 655, 663, 664, 665, 666, 668, 669, 670, 672, 676, 695, 710, 738, 743, 744, 745, 746, 748, 749, 750, 752, 753, 772, 775, 776, 785, 797, 800, 801, 802, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 830, 831, 838, 840, 845, 853, 856, 859, 870, 872, 873, 874, 875, 876, 877, 878, 879, 892, 906, 908, 909, 919, 923, 943, 946, 947, 948, 950, 951, 952, 954, 955, 956, 958, 959, 960, 964, 968, 970, 976, 980, 983, 986, 989, 991, 993, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1007, 1009], "gradientboostingregressor": [7, 122, 123, 129, 132, 353, 370, 376, 397, 531, 539, 609, 610, 950, 954, 955, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "forward": [7, 146, 308, 353, 366, 399, 485, 486, 516, 520, 530, 536, 537, 562, 563, 579, 662, 663, 837, 950, 975, 1008], "wise": [7, 26, 48, 157, 197, 225, 266, 298, 339, 353, 378, 388, 390, 394, 395, 399, 436, 508, 511, 514, 518, 522, 523, 526, 527, 530, 532, 533, 536, 537, 569, 572, 573, 575, 576, 577, 583, 617, 677, 729, 801, 850, 862, 863, 866, 927, 929, 930, 931, 932, 935, 946, 948, 954, 955, 968, 975, 996, 1001, 1004, 1005, 1006], "fashion": [7, 115, 120, 204, 265, 354, 378, 387, 388, 395, 397, 530, 534, 535, 536, 537, 541, 542, 543, 579, 604, 799, 822, 837, 840, 846, 856, 880, 881, 882, 883, 925, 944, 950, 964, 1005], "notic": [7, 25, 26, 53, 79, 113, 115, 122, 125, 175, 225, 237, 253, 254, 256, 257, 259, 265, 266, 338, 339, 340, 349, 370, 394, 473, 518, 540, 943, 953, 954, 960, 989, 993, 1009], "faster": [7, 19, 39, 63, 72, 95, 110, 115, 119, 122, 146, 167, 172, 182, 196, 198, 211, 212, 214, 231, 276, 278, 294, 307, 309, 310, 338, 339, 340, 353, 354, 360, 366, 373, 374, 378, 389, 390, 395, 399, 400, 402, 422, 425, 427, 429, 430, 431, 440, 485, 508, 509, 510, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 530, 536, 537, 538, 539, 620, 623, 624, 629, 630, 635, 636, 637, 638, 639, 640, 649, 651, 661, 664, 668, 672, 676, 701, 731, 753, 754, 755, 813, 814, 818, 830, 831, 848, 850, 852, 861, 865, 909, 923, 943, 947, 950, 955, 957, 958, 961, 966, 968, 969, 970, 974, 977, 985, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "10_000": [7, 25, 115, 122, 172, 229, 259, 536, 537, 850], "vari": [7, 34, 44, 46, 61, 74, 116, 118, 164, 166, 167, 185, 187, 190, 194, 222, 230, 246, 256, 259, 291, 296, 298, 303, 312, 319, 325, 328, 349, 353, 355, 361, 378, 420, 424, 477, 485, 491, 492, 499, 536, 537, 541, 542, 623, 624, 627, 628, 629, 630, 631, 632, 637, 638, 639, 640, 658, 661, 679, 738, 790, 797, 799, 800, 830, 834, 838, 853, 869, 877, 880, 881, 928, 946, 949, 950, 954, 957, 958, 967, 970, 978, 1003, 1004], "relev": [7, 9, 19, 76, 82, 144, 164, 175, 190, 256, 257, 263, 349, 353, 355, 361, 363, 365, 366, 367, 369, 370, 371, 378, 392, 393, 399, 400, 448, 452, 511, 518, 622, 632, 701, 715, 731, 775, 776, 802, 851, 853, 884, 886, 954, 955, 960, 971, 975, 999, 1004, 1008, 1010], "select": [7, 9, 36, 44, 61, 67, 68, 70, 73, 75, 81, 91, 93, 107, 112, 117, 119, 122, 125, 129, 136, 143, 145, 147, 154, 156, 166, 169, 172, 174, 176, 204, 211, 214, 215, 218, 225, 229, 231, 240, 241, 248, 254, 255, 256, 257, 258, 261, 280, 298, 308, 313, 314, 317, 320, 325, 333, 336, 338, 339, 340, 349, 353, 354, 356, 361, 363, 364, 366, 367, 369, 373, 377, 378, 387, 390, 391, 392, 395, 397, 398, 400, 422, 424, 425, 427, 429, 431, 436, 437, 438, 442, 444, 445, 450, 451, 454, 465, 466, 469, 470, 473, 474, 478, 479, 481, 489, 492, 509, 511, 512, 517, 518, 521, 526, 528, 535, 536, 537, 540, 542, 558, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 604, 608, 609, 622, 623, 624, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 648, 650, 653, 655, 659, 660, 668, 669, 674, 688, 692, 694, 729, 765, 766, 770, 771, 772, 775, 776, 777, 785, 795, 796, 797, 799, 801, 815, 816, 817, 819, 821, 823, 824, 825, 833, 834, 838, 843, 849, 853, 869, 872, 873, 877, 880, 881, 882, 883, 888, 923, 924, 948, 949, 951, 954, 955, 957, 958, 960, 964, 967, 968, 969, 970, 971, 974, 975, 976, 978, 980, 981, 983, 987, 988, 989, 991, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "ham": [7, 428, 435, 558, 676, 679, 685, 709, 716, 753, 754, 755, 769], "loss": [7, 24, 25, 26, 27, 93, 107, 120, 121, 122, 123, 124, 149, 150, 164, 174, 178, 186, 189, 198, 201, 203, 204, 208, 214, 215, 231, 264, 293, 294, 309, 317, 322, 323, 327, 333, 338, 376, 378, 388, 389, 395, 400, 442, 443, 473, 485, 486, 509, 515, 516, 517, 520, 524, 529, 530, 531, 535, 536, 537, 538, 539, 542, 620, 623, 626, 635, 636, 643, 644, 645, 646, 647, 648, 649, 653, 654, 655, 656, 679, 682, 685, 698, 709, 710, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 769, 772, 775, 776, 785, 795, 796, 799, 830, 831, 833, 834, 837, 838, 846, 847, 848, 853, 872, 873, 878, 879, 881, 883, 909, 913, 947, 950, 958, 962, 967, 968, 969, 970, 989, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "eustach": [7, 8, 10, 978, 998, 999], "diemert": [7, 8, 10, 978, 998, 999], "maria": [7, 123, 129, 146, 162, 390, 1007, 1008, 1009, 1010], "telenczuk": [7, 123, 129, 146, 162, 1005, 1008, 1009], "github": [7, 8, 12, 26, 70, 109, 115, 116, 117, 123, 129, 132, 143, 154, 162, 166, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 295, 307, 308, 310, 315, 347, 360, 364, 365, 368, 369, 370, 371, 373, 376, 378, 379, 381, 384, 386, 430, 440, 485, 513, 668, 669, 672, 957, 973, 974, 977, 978, 989, 1001, 1006], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 50, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 162, 176, 196, 198, 203, 213, 214, 218, 220, 222, 228, 241, 243, 244, 257, 260, 276, 298, 299, 302, 303, 338, 339, 360, 361, 364, 366, 369, 370, 371, 373, 376, 381, 390, 421, 430, 440, 485, 511, 513, 518, 648, 668, 672, 681, 957, 972, 977, 1001, 1003, 1006], "maikia": [7, 123, 129, 162, 1004, 1005, 1007, 1008], "lemaitre58": [7, 129, 149, 154, 156, 158, 218, 298], "gmail": [7, 11, 14, 16, 24, 42, 48, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 176, 196, 198, 213, 214, 218, 220, 228, 241, 243, 244, 257, 260, 298, 303, 338, 339], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 313, 314, 315, 316, 318, 329, 330, 333, 334, 338, 339, 340, 360, 378, 384, 970, 978], "mean_squared_error": [7, 122, 123, 192, 196, 198, 200, 202, 214, 349, 397, 717, 727, 954, 997, 999, 1006, 1007], "hamming_loss": [7, 679, 769, 954, 998, 1002, 1005], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 58, 59, 61, 63, 64, 70, 77, 78, 79, 91, 96, 101, 102, 113, 118, 138, 141, 168, 180, 186, 191, 194, 199, 202, 205, 209, 213, 220, 242, 244, 245, 246, 247, 259, 262, 270, 281, 282, 283, 288, 330, 331, 335, 339, 349, 354, 367, 374, 376, 378, 390, 394, 395, 422, 425, 426, 428, 430, 435, 437, 438, 439, 440, 449, 450, 451, 513, 514, 521, 530, 531, 532, 533, 536, 537, 604, 623, 624, 629, 630, 637, 638, 639, 640, 654, 666, 668, 670, 672, 770, 771, 776, 804, 807, 822, 875, 895, 908, 909, 921, 923, 943, 944, 949, 951, 987, 1000, 1001, 1005, 1006], "fetch_20newsgroups_vector": [7, 211, 229, 361, 996, 1006, 1008], "spars": [7, 12, 13, 17, 39, 40, 54, 76, 82, 93, 107, 115, 127, 164, 174, 191, 195, 212, 215, 229, 231, 257, 276, 307, 310, 333, 337, 340, 341, 347, 353, 358, 360, 361, 362, 366, 367, 368, 369, 370, 376, 377, 378, 389, 390, 391, 397, 398, 400, 401, 405, 417, 419, 421, 422, 423, 425, 427, 428, 429, 430, 431, 435, 437, 438, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 464, 465, 466, 473, 474, 480, 485, 500, 501, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 558, 559, 562, 563, 565, 566, 567, 568, 570, 571, 580, 581, 582, 583, 584, 585, 586, 606, 607, 608, 615, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 688, 689, 690, 704, 705, 706, 709, 713, 714, 715, 729, 730, 735, 736, 738, 742, 743, 753, 754, 755, 756, 758, 759, 760, 762, 769, 772, 775, 776, 785, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 837, 838, 840, 842, 843, 844, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 888, 890, 891, 892, 893, 898, 906, 909, 910, 913, 914, 915, 919, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 940, 944, 947, 950, 951, 952, 954, 955, 957, 967, 969, 970, 975, 976, 987, 988, 989, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "generate_data": [7, 33], "load_diabet": [7, 123, 132, 135, 146, 162, 181, 183, 184, 185, 192, 193, 235, 252, 397, 535, 539, 545, 650, 794, 795, 796, 881, 883, 962, 984, 987, 1002, 1007, 1010], "elif": [7, 8, 16, 34, 176, 198, 232, 234, 243, 281, 849], "subset": [7, 19, 26, 27, 32, 69, 70, 79, 80, 116, 118, 119, 135, 143, 185, 197, 211, 212, 213, 214, 228, 230, 233, 234, 254, 257, 259, 265, 266, 268, 308, 313, 317, 338, 339, 340, 349, 361, 366, 373, 376, 378, 387, 388, 390, 391, 394, 397, 398, 400, 407, 416, 427, 442, 444, 445, 447, 465, 466, 469, 470, 474, 485, 526, 527, 528, 530, 532, 533, 534, 536, 538, 539, 540, 541, 544, 546, 579, 587, 606, 616, 617, 618, 619, 628, 632, 635, 643, 645, 648, 651, 652, 653, 654, 655, 656, 674, 679, 680, 689, 692, 694, 706, 709, 730, 732, 766, 769, 774, 797, 799, 801, 802, 803, 804, 808, 809, 810, 811, 812, 815, 820, 823, 830, 839, 867, 868, 872, 874, 877, 880, 882, 888, 923, 943, 950, 954, 955, 965, 967, 969, 970, 989, 999, 1004, 1005, 1007, 1009], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 58, 79, 108, 114, 130, 133, 162, 164, 169, 192, 201, 213, 255, 256, 262, 266, 270, 274, 323, 330, 349, 353, 372, 378, 387, 388, 390, 394, 395, 397, 401, 417, 420, 422, 423, 424, 426, 428, 429, 431, 433, 434, 449, 450, 456, 458, 513, 530, 541, 546, 574, 588, 597, 609, 610, 611, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 649, 650, 651, 652, 656, 658, 661, 665, 667, 669, 671, 683, 692, 704, 705, 710, 711, 713, 719, 729, 739, 744, 746, 747, 748, 749, 753, 756, 758, 759, 762, 763, 764, 765, 766, 768, 778, 780, 794, 798, 811, 813, 814, 851, 852, 853, 858, 862, 872, 873, 898, 911, 946, 948, 950, 951, 952, 954, 956, 957, 958, 962, 964, 967, 969, 984, 987, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "given": [7, 10, 11, 27, 37, 49, 57, 59, 77, 84, 96, 100, 127, 129, 149, 156, 166, 167, 196, 197, 214, 218, 225, 229, 230, 233, 235, 256, 257, 259, 265, 282, 283, 284, 300, 309, 333, 338, 339, 340, 346, 353, 355, 361, 365, 366, 367, 369, 371, 373, 374, 376, 378, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 407, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 436, 437, 438, 439, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 464, 473, 478, 480, 482, 500, 513, 515, 516, 517, 520, 524, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 565, 566, 567, 568, 570, 578, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 621, 623, 626, 628, 629, 632, 635, 636, 638, 640, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 664, 665, 668, 674, 675, 676, 677, 678, 680, 681, 682, 688, 690, 693, 694, 696, 699, 701, 702, 709, 711, 712, 715, 727, 730, 731, 733, 734, 739, 749, 753, 756, 757, 759, 762, 763, 764, 767, 768, 770, 771, 772, 775, 776, 783, 785, 789, 795, 796, 797, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 840, 843, 844, 846, 847, 848, 849, 850, 852, 853, 858, 859, 861, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 882, 887, 896, 897, 898, 938, 942, 943, 946, 948, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 978, 980, 984, 985, 987, 988, 989, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "round": [7, 9, 25, 84, 161, 162, 203, 214, 256, 262, 300, 302, 338, 428, 434, 435, 570, 571, 574, 604, 669, 689, 774, 783, 838, 869, 884, 886, 944, 958, 970, 998, 1000, 1002, 1004, 1005, 1007, 1009, 1010], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 79, 114, 125, 132, 146, 154, 162, 169, 184, 189, 210, 220, 228, 259, 282, 324, 327, 339, 340, 353, 361, 363, 369, 381, 394, 395, 397, 398, 400, 442, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 546, 547, 558, 560, 561, 565, 566, 567, 568, 609, 774, 778, 780, 925, 928, 943, 949, 950, 954, 960, 965, 975, 978, 984, 989, 998, 1008], "chang": [7, 16, 25, 26, 56, 95, 99, 100, 113, 123, 150, 157, 161, 166, 167, 169, 197, 198, 200, 201, 218, 219, 220, 235, 236, 251, 256, 263, 266, 302, 303, 306, 307, 308, 309, 310, 314, 325, 333, 340, 349, 353, 354, 355, 361, 364, 367, 368, 369, 370, 373, 376, 378, 379, 388, 390, 394, 397, 398, 400, 416, 419, 425, 427, 430, 432, 437, 440, 446, 449, 450, 456, 470, 471, 473, 481, 485, 486, 489, 490, 491, 499, 508, 512, 513, 514, 515, 516, 517, 523, 524, 526, 527, 528, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 565, 566, 568, 570, 571, 574, 579, 587, 588, 590, 591, 592, 594, 596, 597, 599, 600, 602, 604, 612, 624, 626, 627, 628, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 647, 649, 651, 656, 664, 669, 677, 680, 683, 688, 692, 693, 704, 705, 711, 712, 716, 730, 731, 732, 753, 759, 760, 762, 768, 770, 771, 772, 773, 774, 775, 776, 777, 785, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 805, 806, 808, 809, 810, 812, 813, 814, 819, 820, 832, 835, 837, 846, 860, 861, 866, 867, 870, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 890, 892, 893, 904, 909, 922, 924, 943, 944, 945, 953, 954, 955, 957, 964, 967, 968, 969, 970, 972, 975, 980, 987, 989, 994, 995], "affect": [7, 25, 79, 156, 166, 200, 221, 235, 259, 266, 349, 353, 355, 362, 378, 380, 390, 393, 394, 396, 398, 401, 423, 428, 435, 451, 453, 457, 526, 527, 546, 688, 763, 772, 775, 776, 777, 785, 789, 790, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 853, 863, 877, 953, 957, 969, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 369, 388, 394, 808, 956, 1010], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 60, 70, 103, 110, 113, 114, 120, 122, 136, 162, 169, 189, 200, 201, 203, 204, 211, 214, 230, 231, 256, 259, 265, 266, 269, 274, 292, 293, 316, 325, 328, 338, 339, 340, 343, 347, 371, 378, 391, 398, 635, 636, 872, 873, 879, 899, 964, 984], "start_tim": [7, 10, 19, 116, 117, 129, 149, 185, 218], "elapsed_tim": [7, 39, 66, 116, 117, 129, 213], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 59, 60, 64, 65, 66, 70, 98, 102, 138, 157, 166, 182, 186, 220, 255, 256, 258, 260, 264, 333, 340, 353, 360, 361, 366, 374, 378, 390, 391, 398, 399, 401, 402, 403, 407, 409, 411, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 469, 470, 471, 473, 475, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 560, 561, 565, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 587, 588, 590, 591, 592, 593, 594, 596, 597, 599, 600, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 734, 741, 744, 750, 751, 752, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 785, 788, 791, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 833, 836, 839, 840, 846, 847, 849, 851, 853, 854, 855, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 890, 892, 893, 896, 906, 907, 919, 929, 935, 940, 944, 954, 955, 957, 958, 964, 969, 970, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 121, 123, 211, 212, 214], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 67, 93, 107, 164, 195, 339, 340, 359, 360, 361, 367, 376, 378, 390, 398, 427, 442, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 487, 503, 508, 514, 515, 516, 517, 519, 520, 521, 522, 523, 525, 544, 545, 546, 547, 558, 559, 561, 564, 565, 566, 609, 610, 611, 641, 662, 663, 689, 772, 775, 776, 782, 783, 785, 796, 832, 837, 846, 880, 881, 882, 883, 887, 897, 943, 950, 954, 969, 980, 989, 990, 991, 996, 1004, 1007, 1008, 1009, 1010], "necessari": [7, 13, 114, 196, 201, 241, 256, 257, 263, 278, 345, 353, 361, 364, 365, 366, 367, 368, 369, 371, 373, 376, 390, 392, 397, 430, 440, 465, 466, 468, 469, 470, 471, 472, 474, 511, 621, 622, 623, 629, 633, 634, 637, 638, 639, 640, 641, 642, 648, 650, 652, 653, 668, 672, 768, 836, 845, 855, 859, 865, 943, 946, 950, 953, 956, 964, 970, 989, 996, 1004], "defin": [7, 9, 12, 27, 53, 65, 69, 70, 72, 85, 95, 100, 109, 110, 111, 129, 146, 149, 156, 157, 158, 168, 175, 197, 200, 204, 213, 214, 225, 229, 235, 237, 241, 246, 256, 257, 258, 259, 263, 265, 266, 267, 268, 298, 307, 325, 338, 339, 353, 362, 365, 366, 367, 371, 372, 374, 376, 377, 378, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 400, 406, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 437, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 466, 496, 497, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 604, 605, 606, 607, 609, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 673, 674, 676, 684, 686, 692, 697, 698, 699, 700, 703, 706, 713, 716, 720, 721, 723, 725, 726, 728, 729, 732, 735, 741, 756, 760, 765, 766, 770, 771, 772, 775, 776, 785, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 859, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 896, 898, 901, 907, 938, 943, 944, 950, 951, 952, 953, 955, 956, 957, 959, 960, 961, 962, 964, 966, 968, 969, 970, 975, 985, 988, 991, 993, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 68, 69, 75, 80, 89, 105, 118, 121, 154, 164, 166, 172, 196, 198, 238, 240, 243, 246, 248, 251, 262, 263, 265, 266, 329, 338, 340, 347, 349, 356, 359, 360, 361, 363, 364, 366, 368, 369, 370, 371, 376, 377, 381, 386, 387, 391, 398, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 473, 485, 486, 492, 544, 549, 558, 559, 562, 563, 565, 566, 568, 594, 604, 606, 607, 615, 633, 635, 649, 651, 656, 664, 666, 669, 670, 683, 690, 692, 704, 705, 713, 716, 758, 759, 762, 763, 770, 771, 772, 785, 797, 799, 800, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 833, 834, 835, 838, 840, 846, 847, 853, 874, 875, 876, 877, 878, 888, 890, 892, 893, 896, 900, 901, 919, 920, 925, 928, 941, 944, 946, 951, 953, 954, 955, 956, 957, 958, 964, 966, 970, 977, 978, 982, 987, 988, 989, 996, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 84, 142, 143, 146, 166, 175, 178, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 201, 205, 211, 212, 232, 238, 269, 310, 323, 330, 334, 338, 349, 361, 367, 378, 393, 399, 443, 459, 460, 461, 526, 570, 571, 574, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 872, 873, 874, 875, 876, 877, 878, 938, 948, 950, 968, 969, 987, 996, 998, 1001, 1003, 1008, 1010], "toarrai": [7, 276, 317, 347, 391, 398, 543, 559, 565, 567, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 846, 862, 863, 925, 928, 944, 957, 964], "count_nonzero": [7, 10, 353], "configur": [7, 10, 71, 167, 236, 238, 338, 352, 364, 366, 367, 371, 373, 376, 378, 381, 386, 391, 398, 399, 412, 421, 422, 424, 425, 427, 430, 440, 442, 446, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 603, 604, 605, 606, 607, 609, 612, 615, 616, 617, 618, 619, 665, 666, 667, 668, 671, 672, 763, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 951, 954, 964, 969, 974, 989, 991, 1000, 1003, 1004, 1005, 1006, 1008, 1010], "penalti": [7, 10, 30, 81, 164, 174, 175, 185, 189, 196, 211, 212, 215, 227, 264, 292, 309, 317, 330, 338, 353, 373, 376, 389, 392, 395, 399, 449, 450, 451, 452, 453, 454, 456, 479, 508, 514, 515, 516, 517, 519, 520, 524, 525, 574, 620, 623, 624, 625, 626, 629, 631, 634, 635, 636, 637, 638, 639, 645, 646, 647, 649, 653, 655, 657, 658, 664, 785, 853, 872, 873, 875, 877, 878, 879, 943, 950, 953, 958, 964, 968, 969, 987, 989, 998, 1001, 1003, 1005, 1006, 1008, 1009, 1011], "elasticnet": [7, 10, 177, 187, 264, 269, 353, 371, 376, 395, 624, 629, 634, 635, 636, 637, 638, 639, 640, 645, 653, 655, 658, 950, 968, 996, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010], "001": [7, 13, 32, 44, 61, 94, 149, 166, 205, 225, 241, 254, 256, 258, 316, 339, 363, 371, 394, 513, 514, 516, 523, 604, 621, 622, 623, 624, 629, 630, 637, 638, 639, 640, 643, 644, 645, 653, 654, 655, 656, 658, 661, 666, 667, 670, 671, 770, 771, 830, 831, 867, 868, 874, 875, 876, 877, 878, 943, 980, 989], "modified_hub": [7, 653, 968], "fit_intercept": [7, 175, 176, 182, 201, 210, 225, 264, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 872, 873, 879, 950, 968, 1000, 1004, 1005, 1006, 1008, 1009, 1010], "tol": [7, 10, 17, 72, 95, 120, 161, 176, 187, 189, 203, 204, 210, 212, 225, 235, 244, 295, 309, 333, 338, 367, 371, 397, 402, 422, 425, 427, 430, 437, 440, 449, 450, 456, 459, 460, 461, 508, 509, 510, 512, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 536, 537, 538, 539, 579, 604, 615, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 649, 651, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 668, 670, 672, 770, 771, 785, 822, 830, 831, 867, 868, 872, 873, 874, 875, 876, 877, 878, 940, 950, 968, 969, 985, 989, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "n_iter_no_chang": [7, 120, 204, 309, 338, 370, 378, 397, 536, 537, 538, 539, 643, 644, 645, 653, 654, 655, 830, 831, 968, 1004, 1007], "l1_ratio": [7, 10, 14, 180, 181, 187, 264, 269, 353, 376, 395, 515, 517, 524, 623, 624, 629, 635, 636, 637, 638, 639, 640, 645, 653, 655, 658, 950, 968, 997, 999, 1001, 1008, 1010], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 57, 59, 77, 78, 81, 95, 98, 143, 164, 165, 170, 174, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 198, 199, 211, 214, 215, 238, 294, 308, 309, 310, 338, 339, 340, 353, 362, 366, 367, 378, 380, 389, 392, 393, 395, 399, 400, 403, 411, 430, 443, 445, 451, 453, 454, 456, 457, 458, 459, 460, 461, 473, 501, 503, 504, 508, 512, 514, 516, 519, 520, 525, 529, 531, 533, 535, 537, 539, 542, 545, 547, 559, 566, 570, 574, 586, 588, 591, 604, 612, 613, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 679, 692, 695, 704, 709, 713, 718, 725, 728, 750, 752, 760, 761, 765, 766, 769, 786, 796, 799, 806, 807, 816, 824, 831, 834, 846, 853, 872, 873, 874, 875, 876, 877, 878, 881, 883, 945, 948, 950, 968, 969, 987, 996, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "misclassif": [7, 769, 968, 969, 970, 997], "ratio": [7, 53, 65, 72, 104, 164, 229, 231, 244, 249, 272, 353, 366, 390, 392, 394, 397, 428, 434, 470, 471, 492, 518, 526, 527, 528, 635, 686, 688, 692, 700, 711, 714, 757, 758, 759, 762, 768, 796, 799, 819, 865, 923, 948, 960, 970, 985, 1011], "sparsifi": [7, 180, 353, 635, 636, 643, 645, 653, 654, 655, 872, 938, 998], "05": [7, 8, 14, 15, 19, 24, 26, 30, 37, 44, 59, 61, 63, 64, 66, 74, 75, 84, 90, 100, 113, 120, 122, 127, 133, 142, 154, 157, 158, 166, 170, 176, 177, 195, 198, 210, 221, 222, 225, 239, 241, 243, 244, 247, 256, 257, 263, 265, 266, 267, 272, 281, 284, 289, 290, 296, 298, 300, 306, 310, 314, 316, 330, 336, 363, 399, 428, 434, 569, 572, 573, 575, 590, 591, 592, 596, 597, 599, 600, 602, 609, 610, 626, 667, 671, 731, 772, 822, 872, 873, 950, 958, 964], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 64, 69, 71, 98, 101, 105, 106, 110, 113, 118, 119, 120, 137, 138, 144, 145, 149, 157, 162, 169, 195, 196, 204, 214, 220, 225, 228, 229, 230, 233, 234, 241, 243, 244, 251, 254, 256, 257, 264, 265, 267, 270, 274, 276, 283, 285, 286, 292, 299, 300, 301, 313, 314, 317, 325, 332, 335, 338, 339, 340, 347, 376, 400, 416, 424, 428, 434, 442, 484, 492, 527, 546, 547, 559, 574, 609, 610, 757, 772, 785, 795, 799, 801, 804, 867, 868, 987, 988, 989, 1005, 1008], "support_vectors_": [7, 10, 16, 326, 329, 330, 874, 875, 876, 877, 878, 969], "squared_error": [7, 105, 122, 123, 309, 397, 535, 536, 537, 539, 542, 648, 653, 655, 670, 881, 883, 968, 1009], "learning_r": [7, 109, 110, 121, 122, 123, 124, 222, 276, 293, 295, 307, 309, 397, 530, 531, 536, 537, 538, 539, 645, 653, 654, 655, 669, 829, 830, 831, 951, 961, 968, 997, 1005, 1009], "max_depth": [7, 31, 109, 110, 111, 112, 115, 118, 121, 122, 123, 124, 127, 128, 130, 161, 218, 253, 268, 308, 309, 343, 345, 346, 347, 377, 378, 397, 530, 531, 534, 535, 536, 537, 538, 539, 541, 542, 543, 775, 776, 797, 880, 881, 882, 883, 884, 885, 886, 943, 961, 970, 1005, 1007], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 127, 128, 131, 161, 169, 218, 233, 237, 243, 253, 268, 300, 306, 308, 353, 377, 378, 397, 399, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 609, 775, 776, 943, 960, 961, 993, 1004], "n_tree": [7, 276], "loop": [7, 8, 113, 122, 166, 251, 261, 338, 347, 353, 366, 371, 390, 394, 399, 623, 624, 629, 630, 636, 637, 638, 639, 640, 943, 967, 968, 984, 999, 1000, 1003, 1008, 1009], "previous": [7, 53, 70, 155, 166, 254, 263, 310, 361, 373, 376, 381, 390, 395, 398, 419, 422, 432, 501, 511, 518, 626, 635, 636, 643, 645, 653, 654, 655, 872, 922, 950, 964, 974, 993, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "subsequ": [7, 32, 57, 74, 98, 143, 184, 198, 261, 278, 325, 349, 366, 367, 371, 378, 390, 391, 397, 400, 416, 473, 485, 530, 531, 536, 538, 539, 643, 645, 653, 775, 776, 801, 802, 805, 808, 809, 810, 811, 812, 830, 848, 852, 944, 953, 955, 1005, 1006, 1010], "relax": [7, 390, 398, 431, 967, 1003], "sgd": [7, 8, 164, 174, 203, 210, 215, 225, 264, 293, 294, 309, 338, 349, 355, 481, 489, 626, 643, 644, 645, 648, 653, 654, 655, 656, 830, 831, 943, 958, 976, 991, 996, 999, 1000, 1001, 1003, 1007, 1009], "svr": [7, 10, 164, 224, 239, 306, 320, 336, 353, 533, 544, 545, 570, 571, 620, 655, 772, 797, 873, 875, 877, 947, 987, 996, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "optim": [7, 13, 27, 53, 54, 59, 71, 77, 78, 95, 109, 121, 123, 145, 149, 150, 153, 154, 155, 156, 157, 158, 184, 185, 189, 204, 212, 231, 254, 261, 264, 269, 274, 276, 280, 295, 298, 310, 316, 327, 333, 338, 339, 340, 349, 353, 354, 356, 360, 363, 366, 367, 368, 376, 378, 381, 385, 387, 388, 390, 392, 394, 395, 397, 399, 400, 401, 423, 425, 427, 428, 430, 435, 440, 450, 451, 457, 508, 511, 512, 514, 516, 520, 534, 535, 536, 537, 551, 587, 588, 596, 597, 612, 615, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 664, 667, 669, 671, 672, 698, 705, 772, 785, 815, 816, 817, 819, 821, 822, 823, 824, 825, 830, 831, 849, 860, 864, 865, 872, 873, 874, 875, 876, 877, 878, 946, 947, 948, 949, 950, 954, 955, 956, 957, 958, 959, 968, 969, 970, 974, 978, 984, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011], "few": [7, 14, 19, 39, 46, 52, 99, 119, 152, 155, 156, 185, 194, 196, 214, 231, 241, 259, 263, 294, 298, 302, 306, 307, 308, 309, 310, 313, 340, 353, 361, 362, 363, 366, 367, 377, 379, 384, 387, 388, 390, 394, 395, 399, 400, 416, 427, 538, 539, 565, 568, 632, 669, 672, 865, 909, 922, 950, 951, 953, 954, 957, 958, 967, 969, 970, 978, 980, 987, 988, 989, 1002], "drawn": [7, 52, 79, 113, 149, 158, 235, 263, 280, 338, 362, 390, 396, 397, 400, 402, 447, 448, 449, 450, 451, 452, 453, 454, 492, 500, 510, 532, 533, 540, 588, 604, 609, 618, 809, 864, 865, 882, 883, 950, 964, 966, 999], "boost": [7, 108, 109, 110, 111, 115, 126, 129, 132, 133, 164, 371, 378, 399, 426, 444, 445, 473, 478, 481, 492, 497, 530, 531, 536, 537, 538, 539, 609, 610, 611, 612, 717, 723, 725, 775, 776, 777, 796, 799, 834, 846, 847, 950, 954, 974, 976, 991, 996, 997, 999, 1001, 1002, 1003, 1005, 1009], "detriment": [7, 354, 399, 950], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 59, 64, 66, 72, 74, 79, 91, 119, 162, 169, 196, 226, 228, 235, 241, 259, 267, 299, 303, 316, 338, 339, 985], "add_subplot": [7, 16, 25, 27, 42, 45, 63, 66, 89, 101, 102, 109, 167, 193, 211, 219, 221, 313, 314, 372], "line1": [7, 12, 220], "tab": [7, 53, 126, 149, 154, 156, 167, 184, 185, 307, 391, 1003], "blue": [7, 20, 21, 26, 34, 91, 95, 113, 116, 124, 126, 131, 144, 154, 156, 167, 172, 176, 184, 185, 192, 194, 220, 229, 250, 251, 256, 293, 303, 307, 315, 363, 390, 395], "set_xlabel": [7, 10, 45, 53, 59, 72, 74, 89, 91, 100, 109, 129, 158, 161, 162, 167, 168, 172, 185, 191, 193, 194, 196, 198, 211, 212, 230, 234, 252, 256, 258, 262, 267, 268, 281, 298, 299, 303, 316, 333, 339, 340, 343], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 59, 64, 72, 74, 79, 89, 91, 100, 106, 109, 116, 129, 158, 167, 172, 185, 187, 191, 193, 194, 196, 198, 211, 230, 234, 241, 252, 256, 258, 262, 267, 268, 274, 281, 298, 299, 303, 306, 316, 333, 339, 343, 985], "spine": [7, 14, 129, 207, 298], "set_color": [7, 207], "get_color": 7, "yaxi": [7, 10, 45, 59, 89, 101, 102, 193, 217, 219, 222, 241, 276, 281, 338], "tick_param": [7, 14, 132, 241, 256, 302, 316], "ax2": [7, 59, 64, 66, 79, 91, 119, 162, 169, 196, 226, 235, 241, 259, 267, 286, 299, 303, 316, 338], "sharex": [7, 14, 72, 91, 100, 130, 158, 198, 281, 316, 985], "frameon": [7, 202], "line2": [7, 12, 220, 334], "orang": [7, 53, 91, 96, 97, 103, 124, 126, 156, 162, 167, 184, 185, 206, 232, 244, 279, 287, 307, 346, 955], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "loc": [7, 8, 9, 24, 26, 33, 40, 71, 78, 79, 80, 84, 94, 97, 99, 103, 104, 105, 109, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 136, 142, 149, 150, 156, 158, 178, 180, 181, 186, 190, 196, 197, 198, 199, 202, 203, 206, 209, 210, 213, 214, 220, 228, 229, 230, 231, 232, 243, 244, 251, 254, 255, 256, 258, 259, 260, 263, 266, 269, 270, 271, 281, 282, 283, 293, 299, 302, 303, 307, 310, 315, 324, 327, 332, 333, 338, 344, 346, 785, 850, 861], "upper": [7, 9, 24, 71, 78, 79, 80, 109, 112, 113, 114, 121, 122, 123, 124, 125, 129, 131, 142, 153, 155, 158, 190, 196, 202, 203, 206, 210, 213, 214, 229, 232, 233, 255, 256, 257, 281, 282, 283, 293, 303, 316, 324, 327, 332, 390, 396, 441, 565, 566, 568, 572, 590, 591, 592, 594, 596, 597, 599, 600, 602, 609, 610, 612, 614, 627, 631, 654, 710, 846, 874, 875, 876, 896, 953, 954, 957, 964, 968, 969, 970, 1004], "__name__": [7, 16, 25, 60, 161, 196, 198, 238, 251, 276, 300, 317, 338, 339, 340, 372, 376], "prediction_perform": 7, "4948": 7, "2675": 7, "082215": 7, "1847": 7, "3264": 7, "061313": 7, "997": [7, 40], "3383": 7, "050961": 7, "802": [7, 363], "3582": 7, "046619": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000207": 7, "5289": 7, "8022": [7, 378, 451, 1005], "000304": 7, "5193": 7, "8353": 7, "000513": 7, "124": [7, 397, 998], "5131": [7, 1001], "3279": 7, "000809": 7, "178": [7, 146, 278, 290, 363, 371, 487, 817], "5149": 7, "0779": 7, "001120": 7, "4066": 7, "4812": 7, "000156": 7, "3551": 7, "1723": 7, "000173": 7, "3445": 7, "2171": 7, "000220": 7, "3433": 7, "0358": 7, "000261": 7, "3456": 7, "0602": 7, "000301": 7, "deduc": 7, "guarante": [7, 8, 79, 80, 166, 204, 229, 274, 298, 339, 349, 355, 360, 373, 374, 390, 394, 395, 398, 513, 622, 635, 636, 645, 649, 651, 653, 655, 664, 671, 788, 791, 813, 814, 851, 853, 865, 866, 879, 946, 950, 951, 953, 957, 962, 966, 970, 988, 1006], "aspect": [7, 57, 85, 95, 153, 217, 225, 285, 331, 353, 355, 366, 378, 390, 635, 636, 970, 978], "159": [7, 15, 53, 361, 996], "plot_model_complexity_influ": [7, 15], "doesn": [8, 196, 242, 294, 325, 373, 378, 390, 398, 399, 413, 453, 559, 609, 610, 643, 645, 653, 692, 805, 815, 816, 830, 953, 954, 970, 1000], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 57, 69, 77, 78, 79, 81, 84, 91, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 120, 121, 122, 123, 124, 128, 129, 145, 146, 150, 152, 153, 154, 157, 158, 164, 166, 167, 168, 169, 175, 177, 183, 190, 193, 194, 196, 197, 214, 216, 218, 219, 220, 221, 223, 232, 242, 245, 247, 255, 256, 288, 289, 294, 306, 309, 310, 313, 314, 316, 321, 322, 325, 326, 329, 330, 338, 339, 340, 346, 347, 349, 353, 354, 360, 361, 363, 366, 367, 369, 371, 373, 376, 377, 378, 381, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 413, 425, 426, 428, 434, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 472, 473, 490, 491, 492, 496, 497, 502, 507, 509, 511, 514, 518, 521, 530, 532, 533, 536, 537, 538, 539, 559, 567, 568, 571, 584, 585, 604, 605, 607, 608, 609, 610, 612, 616, 623, 624, 625, 627, 629, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 650, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 673, 680, 686, 692, 693, 701, 711, 712, 730, 731, 732, 742, 763, 764, 767, 768, 772, 775, 776, 785, 801, 802, 803, 805, 815, 816, 819, 820, 829, 830, 831, 839, 844, 846, 847, 853, 865, 874, 877, 880, 881, 882, 883, 909, 920, 943, 948, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 968, 969, 970, 977, 980, 987, 988, 989, 990, 991, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "memori": [8, 54, 70, 71, 99, 120, 166, 278, 306, 308, 310, 338, 339, 340, 354, 355, 360, 366, 368, 374, 378, 391, 394, 395, 398, 401, 402, 420, 421, 422, 423, 424, 425, 427, 428, 432, 435, 437, 446, 451, 457, 473, 480, 485, 510, 511, 512, 514, 515, 532, 533, 534, 535, 540, 541, 542, 558, 559, 565, 566, 568, 623, 624, 625, 629, 630, 635, 636, 637, 638, 639, 640, 643, 645, 646, 653, 654, 655, 656, 657, 658, 661, 753, 754, 755, 756, 772, 785, 794, 795, 796, 797, 800, 801, 802, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 833, 834, 851, 853, 862, 863, 865, 870, 872, 873, 880, 881, 882, 883, 893, 923, 939, 950, 956, 957, 964, 966, 967, 969, 970, 974, 975, 978, 980, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "onlin": [8, 14, 36, 67, 95, 98, 164, 174, 210, 215, 355, 361, 365, 370, 378, 390, 395, 398, 400, 421, 425, 427, 472, 479, 508, 513, 514, 515, 516, 522, 523, 559, 561, 635, 643, 644, 645, 653, 655, 799, 808, 809, 810, 811, 812, 815, 816, 821, 823, 824, 842, 843, 853, 872, 873, 946, 950, 958, 960, 973, 976, 978, 987, 991, 996, 1000, 1001, 1003], "partial_fit": [8, 50, 95, 310, 355, 367, 378, 390, 395, 421, 427, 511, 513, 514, 515, 566, 574, 635, 636, 643, 644, 645, 653, 654, 655, 801, 802, 805, 806, 808, 809, 810, 811, 812, 829, 830, 831, 842, 843, 853, 872, 950, 956, 958, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1010, 1011], "fed": [8, 129, 349, 361, 398, 943, 959, 964, 1007], "batch": [8, 11, 63, 95, 99, 289, 310, 355, 374, 378, 398, 419, 421, 425, 427, 429, 431, 508, 510, 511, 513, 514, 515, 516, 517, 519, 520, 522, 523, 641, 662, 663, 777, 789, 790, 808, 809, 810, 811, 812, 830, 831, 842, 843, 853, 865, 912, 958, 959, 968, 996, 1000, 1001, 1004, 1005, 1006, 1007, 1009], "remain": [8, 25, 27, 70, 116, 121, 123, 166, 167, 196, 212, 241, 254, 262, 265, 387, 391, 392, 394, 398, 442, 445, 492, 493, 498, 505, 511, 547, 587, 588, 676, 738, 744, 774, 775, 776, 777, 779, 781, 808, 809, 810, 812, 913, 943, 944, 953, 954, 958, 961, 964, 970, 975, 998, 1004, 1010], "hashingvector": [8, 340, 355, 466, 565, 567, 997, 1003, 1004, 1005, 1006, 1009], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 56, 79, 85, 91, 95, 98, 101, 105, 106, 109, 112, 114, 119, 120, 122, 126, 143, 146, 149, 155, 158, 162, 166, 167, 175, 180, 188, 197, 205, 206, 207, 209, 213, 214, 217, 219, 220, 225, 226, 229, 232, 236, 247, 252, 253, 256, 258, 262, 263, 265, 267, 268, 295, 298, 300, 301, 302, 306, 308, 309, 314, 315, 323, 333, 334, 335, 338, 343, 344, 349, 353, 354, 355, 360, 362, 363, 365, 366, 367, 369, 371, 372, 373, 376, 377, 378, 381, 384, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 411, 416, 423, 425, 426, 430, 439, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 473, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 559, 560, 561, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 586, 587, 588, 590, 592, 596, 599, 600, 602, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 665, 668, 669, 670, 673, 676, 683, 688, 692, 700, 704, 705, 706, 714, 717, 730, 738, 743, 744, 745, 748, 756, 757, 758, 759, 762, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 798, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 816, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 843, 846, 848, 849, 852, 853, 858, 860, 866, 867, 868, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 900, 901, 902, 903, 909, 939, 943, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 975, 977, 980, 981, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "word": [8, 14, 19, 69, 149, 229, 232, 325, 339, 340, 353, 361, 362, 366, 367, 370, 378, 387, 390, 392, 393, 394, 395, 431, 488, 500, 511, 513, 518, 565, 566, 568, 673, 802, 812, 869, 948, 952, 956, 959, 964, 967, 968, 978, 987, 988, 996, 1004], "federicov": 8, "itertool": [8, 42, 44, 61, 130, 181, 242, 247, 256, 263, 265, 397], "pathlib": [8, 1011], "path": [8, 16, 17, 125, 164, 174, 181, 185, 215, 343, 360, 364, 366, 369, 373, 374, 378, 420, 424, 428, 463, 464, 465, 476, 477, 478, 480, 481, 482, 485, 486, 525, 534, 535, 540, 541, 542, 543, 570, 571, 574, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 658, 659, 660, 661, 662, 663, 665, 833, 834, 879, 880, 881, 882, 883, 914, 943, 950, 951, 960, 974, 975, 996, 997, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1011], "hashlib": 8, "sha256": [8, 1011], "tarfil": 8, "sy": [8, 12, 16, 19, 204, 229, 276, 317, 340, 361, 376, 594], "rcparam": [8, 225, 230], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 167, 196, 214, 309, 354, 360, 364, 365, 368, 378, 379, 395, 398, 399, 427, 549, 588, 609, 676, 957, 989, 1002, 1003, 1004], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 65, 69, 98, 164, 257, 317, 337, 338, 339, 340, 355, 356, 361, 390, 391, 398, 442, 480, 521, 846, 952, 988, 989, 996, 997, 998, 999, 1002, 1003], "passiveaggressiveclassifi": [8, 203, 353, 355, 950, 955, 997, 1000, 1001, 1003, 1004, 1007, 1009], "perceptron": [8, 164, 203, 206, 212, 235, 291, 296, 355, 376, 398, 491, 492, 499, 643, 653, 799, 829, 830, 831, 834, 853, 952, 955, 959, 968, 976, 991, 1000, 1002, 1003, 1004, 1008], "naive_bay": [8, 24, 25, 27, 31, 127, 131, 257, 258, 303, 338, 349, 355, 356, 361, 391, 397, 416, 546, 834, 948, 955, 956, 989, 997, 998, 1000, 1001, 1002, 1003], "multinomialnb": [8, 355, 361, 391, 398, 808, 809, 810, 811, 956, 989, 998, 1000, 1003, 1004, 1008, 1009, 1011], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 70, 152, 155, 157, 196, 214, 218, 226, 254, 298, 347, 349, 354, 361, 364, 365, 366, 367, 369, 370, 371, 378, 391, 392, 394, 395, 397, 399, 402, 418, 419, 421, 429, 431, 432, 437, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 465, 468, 469, 473, 474, 480, 485, 486, 491, 499, 504, 508, 509, 514, 515, 516, 517, 519, 522, 523, 525, 529, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 558, 565, 566, 567, 568, 574, 579, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 606, 608, 609, 610, 612, 613, 614, 615, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 667, 671, 672, 674, 675, 677, 678, 680, 688, 717, 736, 742, 749, 753, 764, 772, 775, 776, 777, 785, 789, 790, 793, 796, 797, 799, 802, 804, 807, 808, 809, 810, 812, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 830, 831, 837, 859, 872, 873, 874, 875, 876, 877, 878, 884, 886, 890, 892, 893, 894, 896, 908, 909, 927, 938, 942, 943, 944, 949, 950, 954, 959, 960, 966, 968, 969, 978, 1003, 1004, 1005], "builder": [8, 10, 369], "__file__": [8, 10, 1009], "global": [8, 10, 42, 95, 196, 217, 218, 238, 265, 294, 307, 349, 353, 354, 371, 376, 378, 390, 400, 421, 430, 440, 446, 567, 603, 609, 665, 668, 669, 672, 683, 704, 705, 713, 758, 759, 762, 763, 789, 868, 870, 922, 924, 943, 951, 954, 960, 970, 978, 1004], "21578": [8, 1009], "uci": [8, 303, 360, 363, 477, 479, 481, 487], "ml": [8, 360, 363, 370, 477, 479, 487, 950, 952, 974, 975, 978], "uncompress": [8, 485, 486, 989], "reuterspars": 8, "pars": [8, 17, 353, 360, 361, 485], "sgml": [8, 353], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 50, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 215, 223, 239, 248, 272, 275, 290, 296, 304, 311, 319, 336, 338, 339, 341, 348, 353, 355, 360, 361, 363, 364, 366, 369, 370, 371, 373, 376, 384, 391, 395, 464, 470, 471, 473, 480, 485, 486, 511, 555, 557, 565, 566, 568, 884, 957, 970, 974, 977, 981, 996, 997, 999, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011], "yield": [8, 9, 25, 45, 77, 78, 79, 80, 120, 122, 191, 196, 211, 214, 258, 261, 274, 292, 298, 322, 327, 338, 339, 349, 353, 355, 360, 370, 378, 387, 390, 392, 394, 395, 397, 398, 399, 400, 416, 427, 446, 450, 485, 486, 514, 515, 516, 518, 523, 530, 531, 536, 537, 538, 539, 544, 545, 571, 579, 624, 628, 630, 632, 638, 640, 642, 650, 652, 663, 676, 701, 756, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 800, 804, 807, 864, 865, 903, 910, 912, 913, 946, 948, 950, 951, 954, 969, 970, 984, 1001, 1002, 1004, 1007, 1009], "__init__": [8, 16, 55, 157, 276, 325, 366, 367, 369, 370, 371, 372, 378, 398, 404, 916, 997, 1002, 1004, 1009, 1010, 1011], "self": [8, 16, 19, 25, 27, 55, 157, 164, 276, 312, 318, 319, 325, 338, 360, 366, 367, 370, 371, 372, 373, 390, 398, 400, 404, 407, 411, 412, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 477, 485, 486, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 679, 770, 771, 772, 775, 776, 785, 790, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 916, 928, 957, 975, 976, 978, 991, 998, 1003, 1010], "latin": [8, 398], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 70, 225, 315, 360, 365, 368, 369, 373, 376, 378, 398, 473, 801, 975, 977, 1001, 1005, 1006, 1007, 1010, 1011], "attr": [8, 55], "start_": 8, "getattr": [8, 298, 378], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 69, 146, 235, 363], "topic_d": 8, "fd": 8, "chunk": [8, 50, 353, 390, 395, 401, 423, 427, 446, 515, 753, 756, 801, 802, 808, 809, 810, 811, 812, 870, 956, 1003, 1004, 1005, 1006, 1007], "feed": [8, 85, 197, 340, 361, 370, 376, 390, 398, 846, 955], "decod": [8, 289, 361, 378, 480, 546, 565, 566, 568, 996, 997], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 59, 65, 77, 78, 81, 100, 113, 119, 122, 129, 149, 150, 153, 154, 155, 156, 157, 158, 166, 168, 202, 218, 225, 231, 234, 241, 247, 256, 257, 282, 283, 298, 303, 306, 325, 330, 339, 349, 361, 366, 367, 373, 376, 378, 379, 388, 389, 390, 393, 394, 397, 400, 428, 433, 450, 485, 486, 509, 540, 605, 620, 624, 638, 649, 651, 664, 681, 721, 770, 789, 790, 808, 809, 810, 812, 819, 893, 943, 947, 948, 950, 951, 953, 954, 955, 957, 960, 961, 964, 969, 978, 987, 999, 1003, 1004, 1005], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 70, 84, 104, 116, 117, 120, 121, 123, 124, 142, 146, 196, 204, 234, 246, 254, 255, 260, 268, 285, 289, 309, 340, 347, 355, 356, 359, 360, 361, 363, 366, 368, 372, 376, 386, 387, 388, 390, 391, 392, 393, 395, 397, 398, 399, 400, 405, 406, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 674, 675, 677, 678, 711, 768, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 916, 917, 938, 948, 950, 955, 957, 958, 960, 964, 967, 968, 969, 970, 978, 980, 986, 989, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "end_reut": 8, "sub": [8, 37, 48, 53, 59, 69, 105, 233, 241, 308, 313, 314, 322, 325, 334, 361, 366, 367, 371, 391, 397, 398, 513, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 648, 917, 950, 954, 968, 989, 1006, 1010], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 71, 81, 95, 98, 110, 113, 118, 120, 121, 123, 124, 146, 158, 161, 164, 175, 176, 204, 211, 243, 244, 249, 251, 258, 267, 272, 292, 294, 295, 300, 308, 314, 316, 317, 325, 333, 366, 367, 371, 373, 374, 377, 378, 385, 390, 393, 395, 397, 399, 402, 416, 419, 420, 422, 424, 425, 426, 427, 430, 432, 437, 439, 440, 441, 449, 450, 456, 459, 460, 461, 488, 492, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 536, 537, 538, 539, 541, 544, 545, 558, 559, 565, 566, 568, 570, 571, 579, 587, 604, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 807, 822, 829, 830, 831, 832, 833, 837, 844, 846, 848, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 887, 908, 909, 915, 944, 950, 951, 953, 954, 957, 958, 959, 967, 968, 969, 970, 975, 978, 984, 988, 989, 991, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "archiv": [8, 360, 361, 363, 364, 384, 390, 421, 479, 487, 733, 734, 952, 969, 989], "exist": [8, 9, 17, 19, 53, 214, 256, 294, 298, 360, 365, 367, 368, 371, 376, 378, 379, 381, 390, 394, 395, 397, 398, 400, 405, 416, 429, 431, 446, 476, 526, 532, 533, 534, 535, 541, 542, 559, 562, 566, 574, 580, 609, 610, 622, 653, 654, 655, 657, 675, 677, 678, 737, 740, 744, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 818, 833, 838, 846, 847, 938, 946, 951, 953, 954, 958, 960, 961, 964, 974, 978, 988, 996, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "str": [8, 10, 16, 57, 59, 104, 106, 118, 214, 234, 256, 258, 267, 268, 286, 323, 338, 360, 361, 374, 398, 401, 402, 406, 410, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 430, 435, 442, 443, 444, 445, 446, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 528, 538, 539, 543, 544, 545, 546, 547, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 594, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 636, 643, 644, 648, 650, 652, 653, 655, 665, 666, 669, 673, 674, 675, 676, 677, 678, 680, 683, 685, 687, 689, 702, 704, 705, 707, 708, 713, 732, 746, 749, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 766, 772, 775, 776, 782, 783, 785, 794, 795, 796, 797, 798, 800, 805, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 870, 884, 885, 886, 888, 891, 892, 893, 896, 899, 901, 905, 917, 919, 938, 939, 942], "kei": [8, 9, 10, 17, 19, 42, 119, 161, 214, 237, 257, 259, 260, 307, 308, 309, 310, 355, 359, 367, 370, 371, 372, 376, 378, 381, 390, 391, 394, 400, 442, 450, 544, 545, 546, 547, 565, 568, 571, 594, 603, 609, 611, 636, 772, 775, 776, 783, 785, 796, 832, 833, 887, 897, 921, 975, 989, 993, 1002, 1008, 1009], "download_url": 8, "ic": [8, 167, 308, 360, 363, 380, 479, 487, 609, 610, 991, 1008, 1009], "databas": [8, 353, 355, 361, 363, 390, 395, 397, 398, 401, 421, 423, 487, 532, 533, 865, 966], "reuters21578": 8, "mld": 8, "tar": [8, 369], "gz": [8, 369, 381, 485, 486], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 61, 81, 99, 113, 118, 122, 157, 166, 185, 198, 214, 218, 225, 229, 231, 232, 233, 256, 257, 260, 267, 276, 281, 289, 292, 293, 300, 338, 339, 347, 366, 369, 371, 397, 398, 400, 402, 416, 427, 485, 497, 510, 546, 602, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 649, 650, 651, 653, 656, 658, 659, 660, 661, 679, 685, 743, 763, 767, 769, 775, 776, 799, 846, 849, 859, 872, 873, 887, 918, 920, 941, 970], "mkdir": [8, 373], "parent": [8, 366, 369, 378, 390, 421, 441, 996], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 215, 223, 229, 239, 248, 272, 275, 290, 296, 304, 311, 319, 336, 338, 340, 341, 348, 361, 371, 874, 875, 876, 877, 878, 969, 992], "1e6": [8, 10, 189, 229, 338, 340, 353, 513, 866, 954, 966], "current_sz_mb": 8, "stdout": [8, 95, 204, 802, 822, 830, 831], "write": [8, 17, 162, 338, 353, 354, 360, 364, 365, 368, 369, 370, 371, 373, 374, 376, 378, 381, 391, 395, 398, 965, 975, 989, 997, 1009], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 317, 361, 371, 384, 465, 477, 480, 481, 484, 565, 566, 568, 989, 996, 1001, 1004, 1005], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 229, 256, 265, 354, 368, 975], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 219, 360, 361, 365, 366, 369, 371, 376, 377, 379, 381, 384, 391, 398, 464, 473, 485, 486, 944, 978, 983, 999, 1003, 1004, 1006], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 398, 480, 565, 566, 568, 998], "alternate_sign": [8, 398, 559, 566, 1003], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 127, 143, 157, 166, 172, 187, 189, 196, 204, 218, 226, 237, 253, 254, 258, 259, 265, 271, 274, 280, 325, 331, 347, 349, 360, 361, 362, 367, 369, 370, 378, 381, 384, 387, 388, 389, 390, 397, 398, 400, 416, 417, 418, 430, 464, 477, 485, 486, 497, 500, 526, 527, 530, 532, 536, 538, 543, 544, 545, 558, 565, 566, 568, 570, 571, 579, 587, 604, 605, 606, 607, 609, 610, 635, 636, 643, 645, 650, 651, 652, 653, 677, 679, 683, 684, 685, 688, 689, 691, 694, 696, 702, 704, 705, 709, 710, 713, 714, 715, 716, 717, 718, 757, 758, 759, 762, 763, 764, 767, 769, 772, 773, 775, 776, 777, 785, 789, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 808, 819, 829, 840, 844, 846, 856, 872, 874, 877, 919, 944, 955, 956, 957, 958, 959, 961, 962, 964, 965, 966, 968, 969, 970, 977, 980, 993, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1010, 1011], "acq": 8, "chosen": [8, 46, 72, 129, 150, 166, 167, 185, 197, 200, 213, 232, 250, 251, 253, 259, 339, 349, 353, 376, 390, 392, 393, 397, 400, 419, 427, 429, 431, 432, 438, 473, 500, 512, 534, 535, 536, 537, 541, 542, 624, 630, 633, 635, 636, 638, 640, 648, 653, 654, 655, 656, 657, 667, 671, 767, 770, 771, 772, 775, 776, 785, 803, 822, 872, 880, 881, 882, 883, 909, 943, 946, 948, 950, 951, 953, 955, 960, 961, 968, 984, 985, 987, 1004], "evenli": [8, 39, 52, 122, 251, 398, 913, 989], "care": [8, 123, 353, 355, 369, 371, 376, 378, 379, 388, 390, 392, 398, 416, 438, 447, 617, 635, 636, 643, 645, 653, 654, 655, 672, 872, 951, 969, 978], "all_class": 8, "positive_class": [8, 688], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 71, 72, 95, 98, 115, 131, 135, 137, 158, 161, 162, 166, 182, 188, 189, 203, 204, 205, 208, 209, 211, 217, 218, 219, 220, 235, 236, 241, 243, 244, 247, 269, 286, 292, 293, 294, 308, 309, 310, 313, 314, 322, 338, 339, 371, 378, 397, 402, 419, 422, 425, 426, 427, 432, 437, 439, 449, 450, 456, 459, 460, 461, 508, 509, 510, 512, 513, 514, 515, 516, 517, 520, 522, 523, 524, 525, 538, 539, 604, 615, 617, 618, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 649, 651, 653, 654, 655, 656, 657, 659, 660, 664, 665, 666, 667, 670, 671, 770, 771, 785, 822, 830, 831, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 944, 946, 950, 957, 958, 967, 968, 985, 989, 997, 1000, 1003, 1004, 1005, 1006, 1008, 1010, 1011], "nb": [8, 103, 127, 349, 810, 956], "multinomi": [8, 30, 164, 174, 211, 215, 232, 251, 265, 361, 362, 366, 395, 397, 473, 489, 500, 528, 530, 536, 538, 546, 635, 636, 716, 799, 807, 808, 809, 810, 811, 812, 853, 895, 954, 955, 970, 976, 989, 991, 996, 1000, 1002, 1003, 1004, 1009, 1010], "passiv": [8, 203, 643, 644, 976, 991, 997], "aggress": [8, 203, 643, 644, 775, 776, 976, 991, 997], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 390, 395, 427, 511, 653, 829, 830, 831, 974, 996], "tupl": [8, 48, 49, 105, 214, 258, 359, 360, 361, 367, 378, 394, 402, 413, 429, 431, 442, 445, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 485, 487, 489, 490, 491, 499, 510, 514, 523, 544, 545, 546, 547, 559, 560, 561, 564, 565, 566, 568, 604, 609, 610, 611, 688, 695, 756, 758, 770, 772, 785, 796, 813, 814, 832, 833, 843, 844, 848, 851, 858, 862, 874, 875, 876, 877, 878, 887, 893, 894, 896, 900, 901, 902, 903, 917, 938, 961, 1002, 1003, 1007, 1008, 1009], "x_text": 8, "befor": [8, 12, 25, 42, 69, 71, 74, 85, 129, 142, 156, 158, 160, 163, 164, 166, 167, 169, 177, 184, 185, 189, 256, 263, 278, 299, 302, 303, 309, 328, 349, 353, 354, 361, 364, 366, 367, 368, 370, 371, 373, 374, 376, 378, 379, 380, 384, 390, 391, 392, 394, 395, 399, 402, 403, 422, 425, 426, 427, 437, 439, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 467, 478, 511, 514, 515, 516, 517, 518, 521, 523, 524, 538, 539, 542, 544, 546, 547, 553, 565, 566, 568, 588, 604, 605, 607, 627, 628, 631, 632, 633, 641, 642, 643, 644, 645, 648, 653, 655, 664, 669, 671, 676, 770, 771, 777, 789, 790, 792, 795, 797, 799, 813, 814, 821, 822, 823, 824, 825, 828, 833, 834, 837, 840, 851, 852, 853, 857, 858, 860, 861, 862, 863, 869, 880, 881, 909, 938, 944, 950, 951, 954, 960, 964, 968, 969, 970, 975, 989, 996, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "exclud": [8, 19, 298, 366, 369, 378, 444, 704, 705, 713, 758, 759, 762, 784, 792, 848, 929, 954, 957, 1005], "invalid": [8, 196, 378, 554, 648, 688, 749, 950, 954, 1002, 1004, 1006, 1007, 1009, 1010], "assign": [8, 17, 37, 46, 49, 57, 59, 115, 127, 142, 151, 209, 214, 225, 230, 232, 292, 300, 318, 339, 361, 366, 367, 378, 387, 394, 395, 397, 398, 399, 400, 419, 420, 421, 422, 424, 425, 426, 427, 430, 432, 434, 437, 439, 440, 492, 513, 538, 539, 570, 571, 584, 585, 587, 635, 636, 643, 644, 645, 653, 654, 655, 680, 681, 691, 692, 693, 696, 706, 714, 718, 730, 732, 761, 766, 767, 768, 772, 775, 776, 780, 785, 794, 795, 796, 797, 800, 817, 823, 825, 826, 827, 840, 867, 868, 872, 873, 874, 875, 876, 877, 878, 948, 953, 954, 955, 956, 957, 958, 959, 964, 967, 978, 980, 989, 996, 1001, 1003, 1004], "format": [8, 11, 12, 19, 20, 21, 48, 54, 57, 60, 69, 79, 95, 105, 113, 118, 121, 123, 129, 135, 141, 142, 169, 172, 176, 182, 187, 196, 214, 251, 261, 263, 264, 267, 270, 280, 281, 284, 285, 302, 306, 332, 343, 347, 353, 359, 365, 366, 367, 368, 373, 374, 377, 378, 391, 394, 397, 398, 412, 421, 422, 424, 425, 427, 428, 430, 437, 442, 446, 459, 460, 461, 462, 464, 466, 473, 474, 475, 485, 486, 487, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 528, 534, 535, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 623, 629, 635, 636, 637, 639, 643, 645, 653, 654, 655, 665, 666, 674, 689, 696, 714, 715, 726, 743, 802, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 859, 864, 865, 870, 872, 884, 892, 893, 914, 918, 925, 928, 930, 931, 932, 933, 934, 935, 944, 954, 957, 962, 964, 965, 968, 970, 974, 980, 981, 991, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011], "islic": [8, 44, 61], "asarrai": [8, 17, 196, 214, 295, 315, 338, 339, 367, 378, 386, 562, 563, 701, 731, 821, 823, 824, 825, 964, 969], "int": [8, 10, 13, 16, 17, 19, 37, 44, 61, 80, 113, 121, 137, 138, 150, 151, 152, 158, 162, 177, 187, 189, 196, 204, 214, 222, 225, 231, 234, 241, 251, 254, 255, 256, 258, 276, 281, 283, 289, 314, 340, 361, 366, 367, 376, 378, 388, 391, 394, 398, 401, 402, 405, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 465, 468, 469, 471, 472, 473, 474, 479, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 584, 585, 587, 588, 594, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 685, 689, 690, 693, 701, 702, 704, 705, 706, 709, 711, 712, 713, 730, 731, 732, 744, 749, 750, 753, 754, 755, 756, 757, 758, 759, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 895, 896, 908, 909, 911, 912, 913, 914, 921, 923, 925, 928, 933, 934, 950, 961, 996, 1002, 1006, 1007], "iter_minibatch": 8, "minibatch_s": [8, 355], "statist": [8, 80, 109, 113, 114, 124, 135, 136, 137, 138, 141, 146, 164, 167, 168, 184, 249, 253, 255, 265, 272, 298, 308, 349, 356, 359, 361, 363, 366, 371, 378, 390, 391, 392, 394, 395, 397, 399, 413, 447, 452, 470, 471, 493, 494, 495, 497, 499, 514, 518, 523, 536, 537, 539, 581, 582, 583, 586, 604, 607, 611, 612, 621, 626, 633, 667, 671, 673, 686, 692, 697, 698, 699, 706, 718, 763, 772, 787, 803, 830, 831, 849, 850, 851, 853, 857, 860, 861, 863, 877, 880, 881, 929, 943, 944, 948, 950, 951, 953, 954, 955, 956, 961, 964, 968, 969, 970, 971, 972, 973, 981, 987, 988, 1001, 1004, 1007, 1008, 1010], "test_stat": 8, "n_test": [8, 10, 33, 113, 256, 996, 999], "n_test_po": 8, "hold": [8, 16, 26, 27, 196, 257, 347, 359, 366, 367, 388, 390, 394, 397, 398, 400, 480, 538, 566, 609, 611, 711, 772, 775, 776, 785, 809, 840, 841, 846, 847, 856, 944, 948, 954, 958, 968, 969, 970, 977, 980, 989, 1004, 1008], "n_test_docu": 8, "tick": [8, 43, 59, 152, 167, 235, 267, 609, 797], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 60, 80, 91, 98, 105, 121, 122, 142, 146, 157, 166, 177, 183, 192, 196, 211, 214, 218, 220, 265, 276, 283, 286, 310, 317, 330, 333, 338, 339, 340, 347, 363, 371, 378, 387, 388, 389, 390, 392, 393, 395, 396, 397, 398, 400, 411, 421, 422, 425, 427, 437, 442, 443, 459, 460, 461, 492, 497, 500, 508, 511, 513, 514, 518, 521, 522, 523, 526, 527, 529, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 547, 567, 568, 588, 590, 600, 602, 612, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 649, 650, 653, 654, 655, 656, 658, 661, 667, 671, 673, 676, 685, 686, 695, 701, 716, 731, 733, 734, 738, 763, 801, 802, 806, 807, 816, 820, 824, 831, 832, 852, 853, 872, 873, 875, 878, 880, 881, 882, 883, 911, 929, 935, 940, 950, 954, 955, 956, 957, 969, 970, 987, 999, 1000, 1002, 1004, 1005, 1007], "cls_name": [8, 10], "stat": [8, 10, 69, 79, 101, 146, 169, 253, 256, 264, 268, 281, 308, 313, 314, 363, 374, 377, 392, 452, 569, 572, 573, 575, 576, 577, 581, 582, 583, 586, 659, 660, 776, 783, 785, 880, 881, 911, 943, 950, 1003, 1005, 1009], "string": [8, 27, 70, 118, 157, 214, 227, 260, 309, 340, 353, 360, 361, 366, 367, 371, 378, 384, 391, 394, 397, 398, 399, 401, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 466, 467, 473, 482, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 594, 597, 604, 605, 606, 607, 608, 609, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 676, 685, 687, 695, 707, 737, 740, 746, 749, 753, 754, 755, 756, 765, 766, 770, 771, 772, 775, 776, 785, 796, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 890, 892, 893, 900, 901, 902, 920, 922, 938, 939, 943, 944, 954, 967, 969, 980, 987, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "n_train": [8, 10, 33, 113, 256, 996, 999], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 177, 259, 353, 387, 392, 399, 485, 486, 526, 574, 604, 607, 621, 846, 850, 861, 944, 950, 1004, 1008], "mini": [8, 63, 95, 310, 355, 378, 398, 419, 421, 425, 427, 429, 431, 508, 510, 513, 514, 515, 516, 517, 519, 520, 522, 523, 958, 959, 996, 1007, 1009], "smaller": [8, 24, 40, 46, 81, 154, 155, 158, 161, 181, 185, 187, 200, 229, 282, 283, 292, 298, 325, 333, 339, 366, 387, 389, 390, 392, 394, 395, 397, 399, 400, 418, 419, 428, 432, 434, 491, 511, 512, 534, 535, 536, 537, 541, 542, 570, 587, 596, 610, 623, 624, 626, 627, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 659, 660, 669, 685, 770, 775, 776, 819, 822, 846, 864, 865, 872, 880, 881, 882, 883, 909, 948, 950, 951, 953, 954, 955, 957, 958, 960, 964, 966, 968, 969, 970, 975, 989, 1004, 1009], "bigger": [8, 40, 59, 209, 256, 295, 335, 339, 352, 354, 398, 417, 418, 485, 515, 819, 984, 991], "overhead": [8, 354, 355, 366, 371, 374, 376, 378, 397, 420, 424, 427, 511, 676, 805, 806, 808, 809, 810, 811, 812, 813, 814, 922, 956, 957, 999, 1004, 1005, 1008], "partial": [8, 12, 50, 83, 86, 126, 164, 165, 170, 214, 224, 239, 308, 363, 378, 380, 392, 393, 395, 397, 400, 459, 460, 461, 462, 467, 478, 511, 513, 518, 539, 566, 609, 610, 634, 763, 799, 801, 802, 829, 830, 831, 834, 850, 853, 881, 951, 958, 968, 989, 991, 993, 997, 1004, 1005, 1009], "stream": [8, 390, 395, 398, 440, 566, 842, 843, 853, 946, 974, 1004, 1007], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "enumer": [8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 58, 59, 60, 61, 69, 71, 78, 80, 81, 85, 94, 96, 98, 105, 109, 113, 120, 121, 123, 124, 135, 151, 153, 158, 169, 176, 178, 187, 196, 218, 219, 222, 225, 230, 233, 234, 241, 242, 243, 244, 246, 247, 251, 259, 265, 266, 276, 281, 285, 286, 288, 295, 300, 301, 313, 314, 316, 318, 323, 325, 332, 333, 338, 344, 361, 536, 537, 541, 542, 756, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792], "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 114, 119, 122, 194, 198, 204, 218, 231, 233, 243, 253, 257, 259, 310, 314, 339, 359, 366, 367, 374, 391, 442, 503, 565, 566, 568, 609, 783, 846, 867, 868, 887, 888, 914, 946, 967, 975, 980], "updat": [8, 16, 44, 61, 94, 110, 124, 230, 306, 340, 364, 365, 366, 369, 373, 378, 390, 395, 397, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 887, 929, 950, 957, 958, 959, 968, 977, 978, 997, 1003, 1004, 1005, 1007, 1009, 1011], "accumul": [8, 50, 116, 117, 185, 369, 371, 390, 398, 954, 997, 1004], "acc_histori": 8, "run_histori": 8, "runner": [8, 27, 50, 56, 84, 95, 112, 121, 123, 124, 129, 153, 155, 157, 158, 188, 204, 205, 218, 219, 220, 257, 267, 307, 310, 330, 344], "scikit_learn_data": [8, 50, 361, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476], "969": [8, 132, 133, 360], "155": [8, 189, 215], "988": 8, "843": 8, "1206": 8, "915": 8, "1201": 8, "840": [8, 371], "1187": 8, "901": 8, "1182": 8, "3918": 8, "441": 8, "937": 8, "17": [8, 19, 22, 39, 52, 73, 79, 98, 109, 133, 150, 166, 195, 229, 259, 264, 290, 292, 295, 302, 361, 364, 370, 381, 382, 383, 390, 394, 400, 423, 439, 464, 474, 500, 508, 513, 517, 524, 526, 527, 532, 536, 537, 546, 547, 574, 605, 626, 634, 635, 636, 643, 646, 649, 651, 664, 669, 704, 705, 715, 736, 741, 759, 762, 764, 789, 811, 822, 837, 842, 843, 851, 853, 858, 874, 877, 880, 881, 882, 883, 943, 944, 955, 957, 964, 972, 992, 994, 996, 997, 998, 999, 1002, 1005, 1010], "1805": 8, "923": 8, "1803": 8, "1795": 8, "950": 8, "1793": 8, "6298": 8, "692": 8, "949": 8, "38": [8, 187, 195, 222, 250, 265, 281, 303, 397, 514, 609, 954, 964, 996, 997, 998], "1863": 8, "941": 8, "1862": 8, "857": [8, 257, 317], "1857": 8, "947": 8, "1856": 8, "8910": 8, "1014": 8, "954": [8, 849, 860], "1909": 8, "1908": 8, "870": [8, 363], "1904": 8, "1903": 8, "11435": 8, "1361": 8, "945": 8, "91": [8, 11, 32, 51, 154, 295, 313, 314, 397, 949, 985, 989], "1935": 8, "946": [8, 80, 272], "1934": 8, "886": [8, 139], "92": [8, 32, 34, 50, 98, 143, 254, 295, 313, 314, 325, 361, 363, 515, 517, 524, 539, 574, 772, 785, 949, 989], "1931": [8, 79], "962": 8, "1930": 8, "14344": 8, "1676": 8, "955": [8, 394, 631], "1976": 8, "959": [8, 849, 860], "1975": [8, 957], "1973": [8, 363], "943": [8, 984], "1972": [8, 363], "17260": 8, "2066": 8, "960": 8, "61": [8, 80, 158, 211, 214, 330, 360, 363, 371, 391, 518, 537, 689], "948": [8, 760, 954], "2003": [8, 12, 387, 390, 395, 398, 429, 430, 440, 490, 492, 666, 670, 808, 810, 950, 951, 956, 966, 1004], "913": [8, 397, 536], "62": [8, 110, 172, 214, 250, 264, 295, 314, 349, 361, 390, 470, 471, 813, 814, 992, 999], "2001": [8, 27, 154, 168, 255, 387, 390, 397, 416, 429, 430, 431, 440, 488, 536, 537, 541, 542, 605, 611, 616, 622, 668, 673, 710, 763, 865, 897, 944, 950, 954, 960, 962, 966, 969], "953": [8, 49], "63": [8, 363, 397, 534, 535, 542, 543, 701, 772, 785, 882, 883, 954], "2000": [8, 14, 26, 40, 50, 74, 96, 103, 120, 172, 244, 247, 256, 276, 292, 310, 339, 361, 363, 390, 391, 397, 402, 430, 440, 510, 511, 536, 666, 668, 670, 718, 763, 770, 819, 849, 860, 951, 954, 960, 966, 980, 988], "curv": [8, 11, 23, 28, 37, 74, 77, 113, 115, 121, 164, 167, 174, 175, 186, 196, 214, 215, 217, 219, 222, 224, 226, 234, 235, 239, 240, 248, 249, 256, 266, 272, 293, 306, 333, 345, 372, 385, 389, 394, 396, 416, 417, 418, 479, 487, 492, 498, 502, 541, 609, 622, 635, 675, 677, 678, 682, 683, 684, 685, 702, 704, 716, 717, 757, 759, 762, 763, 764, 770, 771, 788, 797, 799, 800, 811, 834, 853, 872, 877, 950, 951, 953, 954, 960, 970, 976, 978, 991, 993, 998, 999, 1002, 1006, 1008, 1009, 1010], "evolut": [8, 10, 268, 353, 355, 514, 523], "cours": [8, 9, 172, 353, 366, 367, 395, 398, 399, 944, 949, 950, 978], "valid": [8, 13, 26, 54, 55, 70, 73, 77, 81, 103, 114, 118, 119, 120, 121, 122, 134, 139, 140, 144, 146, 147, 157, 164, 166, 168, 174, 184, 196, 198, 204, 214, 215, 233, 243, 246, 249, 253, 256, 257, 258, 260, 262, 264, 265, 270, 272, 280, 295, 299, 306, 308, 316, 325, 333, 343, 354, 361, 366, 368, 376, 377, 378, 384, 385, 388, 390, 391, 392, 395, 396, 397, 398, 399, 400, 406, 416, 421, 422, 424, 425, 427, 428, 435, 441, 442, 446, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 470, 478, 479, 481, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 570, 571, 574, 579, 609, 611, 615, 616, 617, 618, 619, 620, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 676, 682, 689, 703, 737, 740, 749, 753, 754, 755, 760, 765, 766, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 837, 839, 853, 864, 865, 867, 868, 870, 872, 874, 877, 879, 880, 881, 882, 883, 892, 893, 896, 903, 915, 944, 953, 954, 955, 958, 962, 964, 966, 968, 969, 970, 974, 975, 978, 980, 983, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "consumpt": [8, 353, 511, 534, 535, 541, 542, 772, 785, 794, 795, 796, 880, 881, 882, 883, 980, 996, 998, 1002, 1004, 1005, 1010], "queue": [8, 957, 999], "up": [8, 11, 37, 44, 46, 47, 48, 52, 61, 69, 79, 80, 88, 91, 115, 162, 175, 189, 197, 212, 213, 234, 243, 261, 289, 295, 299, 310, 314, 322, 333, 338, 340, 355, 360, 361, 366, 369, 371, 372, 373, 374, 376, 378, 388, 390, 395, 397, 398, 422, 425, 426, 427, 428, 430, 434, 437, 438, 439, 485, 486, 513, 526, 527, 534, 535, 536, 537, 538, 539, 541, 542, 543, 587, 604, 609, 610, 616, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 658, 659, 660, 661, 669, 681, 744, 770, 771, 774, 775, 776, 797, 848, 851, 862, 880, 881, 882, 883, 886, 909, 912, 913, 943, 950, 951, 954, 957, 968, 969, 975, 977, 978, 988, 989, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "amount": [8, 12, 45, 53, 65, 77, 80, 95, 99, 111, 113, 155, 166, 214, 230, 308, 313, 316, 318, 325, 333, 340, 353, 355, 376, 389, 390, 392, 395, 397, 398, 399, 422, 432, 447, 515, 516, 518, 520, 540, 573, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 642, 658, 661, 669, 775, 776, 813, 814, 819, 868, 869, 882, 883, 949, 950, 953, 956, 958, 964, 966, 967, 968, 969, 987, 988, 1009], "learner": [8, 109, 111, 120, 129, 355, 534, 535, 536, 537, 541, 542, 543, 559, 566, 607, 815, 816, 821, 823, 956, 959, 970, 974, 975, 989], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 61, 85, 152, 200, 201, 205, 207, 225, 237, 260, 284, 286, 299, 321, 323, 326, 327, 961, 993], "set_ylim": [8, 10, 16, 31, 42, 59, 74, 91, 109, 115, 126, 127, 129, 158, 169, 176, 194, 196, 197, 230, 241, 258, 260, 263, 274, 281, 292, 298, 300, 301, 307, 316, 334], "runtim": [8, 10, 57, 182, 211, 213, 230, 295, 300, 367, 368, 376, 378, 389, 390, 397, 428, 540, 656, 785, 872, 873, 874, 875, 876, 877, 878, 968, 969, 999, 1003, 1004, 1010, 1011], "gcf": [8, 961], "cls_runtim": 8, "bar_color": 8, "rectangl": [8, 129], "bar": [8, 10, 14, 71, 116, 119, 120, 123, 131, 142, 146, 157, 161, 175, 241, 246, 255, 257, 261, 274, 310, 339, 367, 393, 558, 625, 646, 657, 954, 968, 970, 1002, 1003, 1004, 1005], "width": [8, 10, 16, 45, 53, 79, 89, 97, 98, 104, 105, 106, 113, 118, 119, 122, 131, 142, 151, 157, 179, 238, 241, 255, 298, 300, 301, 308, 322, 363, 391, 417, 418, 430, 442, 470, 471, 483, 498, 563, 838, 885, 964, 968, 970, 986, 987, 1004], "set_xtick": [8, 10, 16, 31, 34, 43, 59, 63, 106, 127, 131, 169, 187, 212, 230, 241, 267, 268, 274, 292, 294, 300, 301, 322], "set_xticklabel": [8, 10, 79, 106, 131, 152, 169, 267, 268, 274], "ymax": [8, 10, 11, 77, 183, 185, 188, 189, 197, 205, 256, 258, 289], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 59, 63, 64, 74, 79, 89, 91, 100, 106, 115, 116, 127, 129, 130, 158, 161, 162, 168, 175, 176, 185, 187, 194, 196, 197, 198, 204, 217, 218, 221, 222, 228, 230, 234, 235, 241, 250, 251, 253, 256, 258, 259, 263, 267, 268, 274, 276, 280, 281, 286, 292, 293, 298, 299, 300, 301, 302, 303, 306, 310, 313, 314, 322, 333, 334, 335, 338, 343], "autolabel": [8, 120], "attach": [8, 120, 338, 413, 818, 997, 1007], "rect": [8, 52, 74, 120, 175], "height": [8, 14, 53, 98, 119, 146, 169, 298, 303, 338, 396, 470, 471, 483, 563], "get_height": [8, 120], "get_x": [8, 120], "get_width": [8, 120], "va": [8, 120, 267, 284, 286, 332], "setp": [8, 10, 180, 267, 270], "rotat": [8, 40, 93, 97, 100, 107, 121, 131, 164, 169, 220, 267, 268, 274, 325, 332, 393, 395, 400, 402, 481, 509, 518, 527, 591, 674, 853, 884, 950, 1007, 1008], "read": [8, 17, 95, 217, 263, 306, 307, 308, 310, 353, 360, 364, 367, 368, 369, 370, 372, 373, 376, 377, 378, 390, 401, 402, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 587, 588, 590, 591, 592, 593, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 905, 943, 950, 954, 955, 974, 978, 989, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "feat": [8, 10, 398], "extr": 8, "hash": [8, 108, 133, 164, 339, 340, 353, 355, 358, 366, 368, 376, 397, 491, 521, 534, 543, 558, 559, 566, 617, 808, 921, 946, 989, 991, 997, 1000, 1003], "vect": [8, 69, 257, 317, 398, 989], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 55, 56, 69, 70, 73, 74, 77, 79, 85, 91, 97, 101, 109, 110, 113, 117, 120, 124, 126, 128, 129, 141, 146, 148, 149, 150, 151, 154, 155, 156, 157, 159, 164, 167, 168, 172, 185, 192, 193, 196, 198, 200, 204, 210, 213, 214, 217, 218, 220, 222, 225, 227, 228, 230, 231, 233, 256, 263, 268, 269, 277, 290, 303, 305, 306, 308, 316, 325, 326, 330, 331, 333, 334, 339, 340, 346, 349, 353, 363, 366, 370, 373, 377, 393, 395, 397, 398, 492, 587, 588, 590, 591, 592, 596, 599, 600, 822, 943, 950, 954, 957, 960, 966, 967, 968, 969, 978, 980], "robust": [9, 60, 62, 76, 82, 122, 162, 164, 166, 167, 174, 198, 213, 215, 225, 298, 355, 363, 367, 373, 390, 397, 398, 426, 447, 448, 451, 452, 453, 454, 501, 511, 536, 537, 626, 634, 647, 648, 655, 656, 725, 803, 834, 848, 850, 851, 861, 867, 907, 954, 958, 960, 964, 967, 968, 974, 976, 978, 990, 991, 996, 997, 999, 1000, 1001, 1002, 1003], "covari": [9, 12, 29, 33, 35, 78, 82, 84, 103, 106, 149, 156, 225, 240, 242, 245, 246, 247, 248, 356, 374, 378, 390, 393, 395, 400, 459, 460, 461, 462, 481, 492, 496, 504, 509, 511, 514, 518, 523, 525, 526, 527, 540, 587, 588, 590, 599, 600, 621, 622, 627, 631, 633, 659, 660, 663, 666, 670, 770, 771, 772, 790, 953, 960, 964, 976, 990, 991, 996, 998, 999, 1000, 1001, 1003, 1005], "wine": [9, 237, 303, 359, 487, 991], "kind": [9, 12, 24, 25, 104, 141, 166, 167, 246, 250, 265, 308, 322, 325, 338, 355, 359, 361, 366, 367, 371, 376, 377, 388, 390, 393, 394, 395, 397, 398, 399, 465, 466, 480, 485, 486, 498, 501, 565, 609, 610, 901, 950, 956, 961, 970, 999, 1008, 1010, 1011], "tool": [9, 11, 254, 259, 349, 359, 360, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 380, 381, 384, 389, 390, 391, 392, 464, 669, 943, 949, 950, 954, 960, 964, 969, 971, 974, 975, 978, 980, 989, 1003, 1006, 1009, 1010, 1011], "purpos": [9, 12, 16, 37, 85, 161, 210, 211, 212, 217, 219, 232, 244, 246, 253, 325, 326, 338, 339, 349, 361, 366, 367, 377, 378, 379, 381, 383, 387, 390, 391, 395, 397, 398, 399, 400, 514, 523, 795, 796, 833, 951, 954, 955, 957, 960, 972, 974, 980, 1008, 1010], "awar": [9, 14, 109, 143, 158, 322, 338, 364, 367, 376, 379, 394, 398, 544, 545, 625, 631, 632, 633, 635, 636, 646, 657, 819, 848, 960, 964, 970, 993, 996, 997, 1010], "thing": [9, 218, 251, 338, 354, 355, 361, 365, 366, 367, 376, 390, 392, 398, 536, 537, 950, 964, 978, 1002], "trivial": [9, 198, 343, 366, 390, 789, 874, 877, 951, 975, 996], "dimens": [9, 12, 14, 37, 40, 53, 81, 84, 89, 95, 151, 153, 155, 157, 158, 167, 179, 194, 200, 219, 221, 225, 229, 230, 235, 242, 243, 280, 281, 285, 301, 338, 339, 340, 361, 363, 378, 389, 390, 395, 396, 400, 402, 421, 422, 424, 425, 426, 427, 430, 442, 443, 459, 460, 461, 470, 471, 492, 501, 502, 506, 507, 510, 518, 526, 559, 560, 561, 562, 564, 566, 574, 596, 599, 618, 621, 636, 667, 668, 669, 671, 672, 676, 739, 794, 813, 814, 818, 832, 864, 865, 866, 874, 875, 876, 877, 878, 892, 893, 894, 919, 925, 928, 944, 946, 948, 950, 951, 952, 955, 957, 958, 960, 966, 969, 980, 987, 988, 1003, 1005, 1006, 1008], "below": [9, 25, 26, 27, 32, 59, 69, 74, 79, 88, 89, 95, 114, 116, 117, 122, 141, 179, 192, 193, 196, 198, 212, 213, 218, 222, 227, 236, 251, 254, 259, 261, 262, 263, 298, 302, 306, 307, 308, 309, 310, 329, 330, 333, 338, 347, 349, 354, 359, 360, 364, 366, 367, 369, 370, 374, 378, 381, 390, 392, 393, 394, 395, 397, 398, 399, 400, 426, 449, 450, 456, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 487, 508, 514, 519, 525, 559, 572, 573, 574, 575, 576, 577, 610, 623, 629, 635, 636, 644, 650, 652, 669, 676, 681, 718, 738, 770, 771, 772, 782, 785, 802, 833, 836, 846, 850, 855, 861, 943, 944, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 968, 969, 970, 971, 974, 982, 989, 992, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "main": [9, 16, 32, 61, 85, 99, 119, 164, 225, 265, 305, 333, 338, 353, 354, 355, 359, 364, 366, 367, 369, 371, 373, 376, 377, 378, 380, 388, 389, 390, 395, 397, 398, 400, 480, 502, 507, 526, 527, 602, 689, 803, 943, 951, 953, 954, 961, 966, 975, 977, 986, 989, 996, 999, 1004, 1006, 1007, 1008, 1009, 1010], "empir": [9, 24, 25, 36, 67, 76, 79, 81, 82, 164, 214, 262, 298, 388, 394, 397, 400, 425, 427, 447, 448, 452, 455, 456, 509, 511, 516, 518, 520, 526, 528, 542, 567, 580, 616, 626, 644, 648, 655, 656, 692, 697, 698, 699, 798, 808, 809, 810, 812, 831, 895, 928, 946, 948, 954, 956, 958, 966, 968, 990, 991], "heterogen": [9, 24, 68, 70, 75, 164, 196, 238, 303, 306, 358, 360, 376, 442, 465, 521, 558, 568, 689, 833, 837, 872, 951, 961, 964, 974, 991, 1000, 1004, 1006, 1007], "mode": [9, 10, 46, 47, 79, 196, 225, 276, 278, 295, 306, 366, 368, 373, 374, 376, 387, 393, 397, 401, 422, 423, 425, 427, 430, 437, 440, 449, 450, 456, 459, 464, 485, 486, 534, 538, 541, 569, 572, 573, 575, 576, 577, 587, 604, 621, 622, 635, 636, 643, 645, 650, 651, 652, 653, 656, 659, 660, 666, 670, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 829, 872, 874, 877, 880, 882, 898, 908, 909, 911, 957, 960, 974, 980, 981, 988, 997, 1005, 1010], "stick": [9, 770, 953], "bias": [9, 27, 81, 98, 122, 128, 166, 168, 200, 261, 361, 380, 388, 397, 501, 526, 829, 853, 863, 949, 953, 962, 968, 970], "yet": [9, 214, 246, 257, 340, 355, 361, 365, 376, 380, 381, 394, 395, 397, 398, 400, 426, 430, 439, 440, 553, 753, 938, 943, 950, 954, 960, 968, 975, 1005], "extent": [9, 30, 57, 151, 152, 153, 229, 331, 334, 419, 512, 673, 770, 954], "assum": [9, 124, 156, 162, 166, 185, 196, 214, 225, 228, 234, 247, 256, 265, 298, 340, 354, 365, 366, 367, 369, 371, 376, 377, 378, 380, 384, 387, 388, 390, 392, 394, 395, 397, 398, 400, 401, 406, 410, 416, 418, 423, 428, 435, 441, 447, 448, 449, 450, 451, 452, 453, 454, 480, 485, 486, 509, 519, 525, 526, 538, 539, 544, 545, 564, 565, 566, 568, 597, 620, 621, 623, 624, 629, 635, 636, 637, 638, 639, 643, 644, 645, 648, 649, 653, 654, 655, 658, 662, 664, 665, 669, 685, 701, 710, 716, 731, 739, 744, 749, 753, 756, 772, 775, 776, 785, 809, 815, 816, 819, 820, 821, 823, 824, 829, 840, 853, 930, 931, 932, 944, 948, 950, 952, 953, 954, 956, 957, 959, 960, 961, 964, 968, 969, 970, 1002, 1008], "parametr": [9, 24, 25, 81, 228, 280, 302, 309, 388, 391, 396, 397, 416, 528, 530, 612, 662, 673, 849, 860, 903, 904, 950, 953, 956, 957, 964, 967, 970, 1004, 1006, 1009], "therefor": [9, 13, 24, 37, 52, 53, 70, 71, 74, 79, 85, 100, 105, 110, 113, 115, 122, 127, 129, 167, 168, 196, 212, 213, 241, 246, 247, 257, 259, 276, 294, 298, 313, 325, 334, 338, 339, 347, 353, 360, 364, 370, 376, 390, 391, 392, 394, 395, 397, 398, 416, 473, 512, 526, 528, 530, 531, 536, 537, 541, 542, 581, 583, 635, 636, 642, 645, 648, 653, 655, 656, 688, 710, 732, 770, 833, 834, 846, 850, 861, 872, 873, 944, 948, 950, 951, 954, 956, 957, 958, 959, 962, 964, 969, 970, 975, 980, 987, 989, 1005, 1006, 1009, 1010, 1011], "minimum": [9, 79, 122, 123, 125, 145, 185, 206, 229, 258, 266, 282, 283, 367, 374, 381, 383, 387, 390, 397, 398, 420, 424, 428, 432, 434, 447, 448, 451, 452, 453, 454, 488, 490, 518, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 571, 604, 608, 609, 612, 614, 645, 648, 653, 655, 656, 659, 660, 669, 681, 700, 754, 755, 775, 776, 794, 809, 830, 831, 842, 843, 846, 848, 852, 865, 866, 879, 880, 881, 882, 883, 889, 892, 893, 896, 912, 951, 954, 958, 960, 964, 966, 970, 996, 999, 1003, 1004, 1008, 1009], "determin": [9, 11, 13, 19, 46, 79, 112, 154, 166, 175, 176, 192, 199, 256, 258, 298, 303, 340, 347, 349, 365, 366, 367, 374, 377, 378, 387, 388, 390, 394, 395, 397, 398, 399, 400, 411, 416, 420, 421, 422, 424, 425, 427, 428, 434, 437, 438, 439, 443, 447, 448, 450, 451, 452, 453, 454, 459, 460, 461, 465, 468, 469, 472, 474, 480, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 514, 516, 519, 520, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 542, 544, 545, 547, 559, 560, 561, 565, 568, 571, 579, 584, 585, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 604, 612, 613, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 664, 666, 667, 669, 670, 671, 683, 687, 698, 704, 705, 713, 758, 759, 760, 762, 763, 766, 772, 774, 775, 776, 785, 793, 794, 795, 796, 797, 798, 800, 804, 806, 807, 809, 816, 818, 819, 824, 829, 830, 831, 837, 838, 846, 847, 848, 850, 861, 872, 873, 875, 878, 881, 883, 886, 907, 919, 923, 925, 928, 943, 946, 948, 953, 957, 959, 960, 964, 967, 968, 970, 980, 996, 1001, 1004, 1005, 1007, 1008, 1009], "concentr": [9, 100, 110, 127, 154, 164, 222, 240, 247, 248, 300, 315, 362, 366, 397, 400, 422, 496, 770, 953, 960], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 56, 58, 60, 61, 67, 79, 90, 102, 112, 118, 169, 222, 241, 242, 243, 244, 257, 282, 283, 285, 301, 307, 327, 337, 338, 340, 341, 355, 356, 359, 361, 363, 366, 367, 370, 376, 378, 385, 396, 398, 404, 405, 408, 465, 479, 480, 481, 488, 489, 490, 491, 492, 499, 507, 518, 521, 541, 543, 566, 567, 568, 668, 669, 672, 680, 681, 686, 693, 695, 700, 706, 711, 712, 730, 732, 753, 754, 761, 765, 766, 768, 770, 771, 825, 826, 834, 838, 845, 853, 901, 903, 916, 922, 938, 944, 951, 953, 957, 960, 962, 964, 967, 971, 974, 975, 978, 980, 983, 986, 989, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "outli": [9, 79, 378, 447, 452, 950, 960], "skew": [9, 122, 199, 229, 298, 358, 394, 616, 617, 618, 619, 849, 860, 950, 964, 991, 999, 1003], "Of": [9, 25, 27, 161, 353, 367, 390, 398, 944], "screen": [9, 1009], "presenc": [9, 59, 61, 79, 80, 298, 364, 378, 392, 395, 688, 701, 731, 744, 802, 836, 844, 846, 938, 944, 950, 954, 955, 968, 999, 1000, 1002, 1006, 1008, 1010], "mixtur": [9, 44, 243, 244, 248, 356, 361, 362, 378, 390, 395, 396, 400, 600, 772, 974, 975, 990, 991, 996, 1000, 1001, 1002, 1003], "univari": [9, 36, 67, 71, 73, 140, 141, 147, 164, 167, 211, 320, 336, 358, 389, 390, 391, 398, 424, 481, 502, 507, 569, 572, 573, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 604, 605, 606, 607, 622, 772, 777, 795, 799, 833, 834, 843, 848, 852, 853, 872, 877, 950, 969, 971, 976, 988, 991, 996, 1002], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 57, 61, 70, 72, 74, 85, 95, 96, 102, 104, 106, 115, 122, 142, 149, 166, 168, 185, 201, 210, 217, 218, 219, 225, 230, 256, 257, 259, 267, 268, 274, 285, 298, 302, 303, 307, 325, 340, 347, 349, 353, 358, 366, 367, 373, 376, 377, 378, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 400, 402, 419, 430, 440, 442, 443, 445, 447, 452, 459, 460, 461, 462, 485, 486, 493, 494, 495, 501, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 525, 526, 527, 530, 531, 534, 535, 536, 537, 541, 542, 543, 565, 566, 567, 568, 604, 609, 610, 615, 616, 618, 619, 635, 636, 645, 653, 654, 655, 668, 676, 683, 701, 731, 733, 734, 756, 763, 765, 766, 772, 785, 799, 802, 808, 809, 810, 811, 812, 822, 832, 833, 842, 849, 850, 853, 857, 858, 860, 861, 862, 863, 868, 879, 880, 881, 882, 883, 892, 898, 901, 908, 909, 926, 944, 946, 950, 951, 952, 953, 954, 956, 958, 960, 964, 968, 969, 970, 971, 973, 978, 997, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010], "ellipticenvelop": [9, 225, 448, 451, 452, 453, 454, 540, 960, 996, 999, 1003, 1004, 1009], "oneclasssvm": [9, 11, 16, 210, 225, 309, 324, 540, 654, 819, 960, 968, 969, 998, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "font_manag": [9, 80, 282, 324], "load_win": [9, 237, 303, 817, 825, 993, 1007], "support_fract": [9, 447, 452], "contamin": [9, 79, 80, 225, 234, 282, 283, 447, 540, 819, 960, 1004], "ocsvm": [9, 210], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 84, 90, 112, 121, 152, 208, 220, 234, 298, 322, 367, 378, 410, 442, 486, 544, 545, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 676, 739, 836, 837, 838, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 988], "frontier": [9, 210, 282, 324, 960, 987], "xx1": [9, 112, 608], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 57, 79, 118, 125, 127, 150, 151, 152, 153, 155, 167, 207, 208, 209, 210, 222, 225, 245, 282, 289, 292, 300, 301, 318, 324, 325, 330, 331, 334, 335, 608], "500": [9, 10, 44, 50, 56, 59, 60, 62, 67, 84, 85, 103, 105, 114, 123, 149, 172, 209, 210, 218, 235, 236, 241, 242, 246, 256, 259, 269, 276, 282, 288, 302, 307, 324, 331, 335, 353, 397, 447, 448, 452, 453, 454, 459, 460, 461, 588, 590, 591, 593, 598, 601, 602, 627, 628, 631, 632, 633, 657, 659, 660, 831, 943, 969], "clf_name": [9, 10, 338], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 55, 112, 125, 138, 208, 209, 210, 226, 234, 263, 282, 283, 292, 300, 323, 324, 325, 329, 330, 331, 335, 367, 378, 388, 397, 416, 447, 526, 527, 530, 532, 536, 538, 540, 544, 570, 571, 608, 609, 610, 635, 636, 643, 645, 651, 652, 653, 654, 675, 677, 678, 683, 696, 701, 702, 710, 714, 715, 717, 731, 757, 763, 764, 767, 772, 775, 776, 785, 794, 801, 802, 803, 804, 819, 833, 840, 869, 872, 874, 876, 877, 950, 954, 960, 961, 968, 969, 987, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 57, 79, 96, 101, 118, 121, 125, 126, 127, 136, 138, 151, 194, 209, 210, 212, 225, 234, 282, 301, 318, 324, 325, 329, 331, 334, 335, 390, 636, 690, 691, 694, 954, 984, 987, 988], "contour": [9, 11, 16, 34, 46, 47, 79, 118, 138, 152, 153, 155, 207, 208, 209, 210, 225, 245, 282, 289, 323, 324, 326, 327, 329, 330, 331, 363, 608, 609, 960, 968], "linewidth": [9, 24, 33, 34, 37, 40, 57, 72, 77, 85, 91, 111, 122, 126, 129, 149, 153, 157, 167, 185, 186, 190, 191, 192, 194, 197, 199, 202, 210, 213, 225, 232, 234, 265, 269, 282, 286, 299, 307, 323, 324, 326, 331, 345, 985], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 84, 93, 101, 107, 164, 373, 395, 510, 518, 669, 973, 974, 988], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 69, 72, 73, 102, 122, 124, 194, 202, 225, 233, 243, 254, 255, 257, 260, 263, 265, 276, 280, 300, 310, 317, 325, 333, 339, 340, 355, 358, 360, 367, 376, 378, 391, 394, 401, 402, 404, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 473, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 674, 675, 677, 678, 689, 737, 740, 746, 754, 755, 770, 771, 772, 775, 776, 782, 783, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 887, 897, 898, 914, 943, 954, 964, 984, 989, 991, 996, 1002, 1003], "boxstyl": [9, 300], "fc": [9, 129, 281, 361], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 263, 289, 330, 381, 623, 624, 627, 629, 630, 631, 637, 638, 639, 640, 641, 658, 659, 660, 661, 663], "xycoord": [9, 26], "textcoord": [9, 172], "xytext": [9, 26, 172], "bbox": [9, 12, 34, 45, 102, 241, 242, 243, 246, 247, 300], "arrowprop": [9, 26], "prop": [9, 33, 72, 80, 202, 243, 282, 324, 347], "fontproperti": [9, 80, 282, 324], "ash": [9, 363, 999, 1002], "malic_acid": 9, "abil": [9, 60, 79, 122, 155, 161, 166, 168, 196, 214, 225, 338, 355, 381, 397, 398, 757, 758, 759, 762, 951, 954, 957, 960, 970, 975, 996, 998, 1003, 1005, 1009, 1010], "locat": [9, 25, 53, 54, 71, 79, 80, 167, 190, 289, 308, 325, 359, 364, 366, 370, 373, 374, 381, 390, 392, 396, 426, 438, 439, 447, 448, 449, 450, 451, 452, 453, 454, 465, 477, 478, 481, 482, 489, 492, 939, 944, 950, 955, 960, 964, 970, 1004], "hard": [9, 196, 225, 229, 256, 355, 365, 376, 378, 390, 395, 398, 511, 518, 546, 653, 874, 875, 876, 877, 878, 950, 967, 969, 970, 975, 987, 988, 989, 1005, 1006], "due": [9, 26, 27, 53, 59, 74, 113, 149, 166, 167, 175, 187, 194, 196, 198, 213, 214, 229, 242, 264, 265, 303, 338, 339, 340, 366, 371, 378, 381, 388, 390, 394, 395, 397, 400, 422, 425, 437, 512, 516, 520, 521, 551, 648, 772, 775, 776, 779, 781, 785, 794, 795, 796, 798, 801, 805, 806, 838, 842, 843, 853, 944, 950, 951, 953, 954, 955, 957, 961, 968, 975, 988, 996, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "banana": 9, "anywai": [9, 338, 367, 642, 662, 663], "rid": [9, 968], "difficulti": [9, 27, 214, 298, 355, 366, 388, 830, 831, 953, 957], "adjust": [9, 36, 38, 49, 57, 67, 77, 122, 164, 225, 237, 257, 306, 317, 333, 339, 372, 390, 395, 397, 398, 501, 530, 531, 534, 536, 538, 539, 541, 635, 636, 643, 645, 651, 652, 653, 680, 681, 684, 690, 691, 730, 732, 761, 768, 808, 809, 811, 812, 843, 864, 865, 872, 873, 874, 877, 880, 882, 898, 953, 954, 958, 964, 987, 993, 996, 1002], "bandwidth": [9, 44, 62, 231, 280, 281, 289, 376, 378, 390, 396, 426, 436, 439, 813, 814, 818, 947, 960, 974, 1007, 1011], "compromis": [9, 167, 353, 366, 624, 656, 957, 999], "risk": [9, 196, 214, 299, 333, 349, 365, 366, 378, 389, 394, 397, 544, 545, 857, 858, 860, 861, 862, 863, 950, 954, 978, 1003], "x2": [9, 16, 84, 90, 112, 121, 152, 208, 234, 367, 391, 565, 606, 676, 739, 988], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 363], "643": [9, 15, 57, 254], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 85, 161, 172, 196, 211, 214, 233, 234, 253, 254, 338, 354, 355, 361, 367, 370, 371, 378, 379, 380, 395, 397, 399, 519, 525, 567, 570, 714, 954, 957, 959, 960, 968, 969, 970, 972, 978, 980, 983, 987, 989, 1004], "boxplot": [10, 79, 123, 166, 169, 306], "defaultdict": [10, 19, 25, 169, 259, 339, 340], "gc": 10, "make_regress": [10, 74, 175, 177, 178, 182, 199, 200, 269, 307, 349, 362, 367, 368, 377, 531, 533, 537, 542, 612, 623, 624, 626, 628, 630, 632, 640, 641, 642, 644, 648, 656, 831, 873, 954, 955, 957], "randomforestregressor": [10, 128, 129, 132, 161, 162, 308, 377, 397, 534, 535, 537, 539, 543, 545, 547, 609, 610, 882, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "sgdregressor": [10, 207, 353, 355, 376, 389, 623, 626, 644, 648, 653, 656, 831, 873, 878, 950, 968, 998, 1000, 1002, 1003, 1004, 1007, 1009, 1010, 1011], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 59, 60, 95, 109, 116, 118, 129, 162, 204, 205, 210, 225, 257, 261, 262, 269, 276, 313, 314, 315, 316, 327, 338, 339, 349, 361, 374, 378, 385, 447, 452, 465, 466, 468, 469, 472, 474, 480, 488, 489, 490, 491, 492, 496, 499, 501, 508, 514, 516, 517, 523, 524, 530, 531, 532, 533, 541, 542, 544, 545, 579, 635, 636, 643, 644, 645, 649, 651, 653, 654, 655, 664, 772, 774, 775, 776, 777, 785, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 830, 831, 872, 873, 874, 877, 908, 909, 923, 925, 949, 950, 955, 962, 968, 969, 984, 989, 991, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 63, 69, 71, 73, 129, 183, 257, 294, 295, 298, 309, 317, 338, 364, 369, 378, 384, 419, 422, 425, 427, 430, 432, 437, 440, 442, 445, 449, 450, 456, 508, 513, 514, 515, 516, 517, 520, 522, 523, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 570, 571, 604, 607, 609, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 669, 671, 740, 753, 770, 771, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 802, 804, 807, 822, 829, 830, 831, 832, 833, 834, 835, 869, 872, 873, 874, 875, 876, 877, 878, 975, 998, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011], "n_instanc": [10, 610], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 78, 80, 81, 94, 95, 98, 100, 109, 112, 113, 121, 123, 124, 128, 143, 162, 175, 182, 187, 189, 190, 195, 196, 197, 200, 201, 202, 206, 211, 214, 229, 232, 241, 245, 247, 253, 256, 261, 265, 266, 281, 298, 303, 307, 308, 333, 339, 340, 343, 347, 353, 354, 361, 367, 371, 378, 388, 389, 390, 392, 395, 397, 398, 399, 400, 403, 430, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 464, 474, 485, 486, 500, 503, 504, 508, 509, 512, 514, 515, 516, 517, 519, 520, 524, 525, 529, 534, 535, 536, 537, 538, 539, 541, 542, 543, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 588, 613, 616, 620, 621, 622, 627, 635, 636, 641, 642, 643, 645, 648, 653, 654, 655, 662, 663, 679, 685, 688, 689, 691, 692, 700, 704, 705, 709, 713, 715, 721, 758, 759, 760, 762, 769, 770, 786, 787, 790, 791, 802, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 836, 843, 845, 846, 848, 849, 850, 852, 853, 858, 859, 860, 861, 865, 872, 880, 881, 882, 883, 907, 940, 950, 952, 953, 956, 957, 958, 964, 965, 966, 968, 969, 970, 980, 987, 989, 996, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "atomic_benchmark": 10, "percentil": [10, 122, 238, 298, 353, 569, 572, 573, 575, 576, 577, 580, 583, 609, 610, 723, 964, 1001, 1009], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 73, 120, 132, 162, 197, 234, 253, 260, 303, 325, 343, 353, 364, 366, 376, 377, 391, 393, 397, 400, 427, 460, 515, 532, 533, 534, 535, 540, 541, 542, 543, 547, 662, 663, 772, 775, 776, 785, 797, 808, 809, 810, 811, 812, 943, 954, 989, 1004, 1006], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 65, 78, 80, 121, 146, 149, 155, 156, 172, 198, 251, 256, 257, 268, 314, 339, 340, 367, 374, 378, 387, 388, 389, 390, 395, 398, 399, 400, 565, 570, 584, 585, 592, 604, 611, 636, 777, 786, 787, 790, 898, 944, 953, 991, 1004, 1006], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 57, 63, 100, 112, 114, 118, 122, 138, 153, 157, 176, 179, 188, 205, 208, 214, 229, 230, 251, 256, 263, 265, 318, 321, 323, 325, 326, 327, 329, 331, 339, 344, 361, 376, 378, 387, 388, 391, 394, 398, 400, 416, 419, 420, 424, 428, 435, 441, 456, 470, 485, 486, 559, 569, 572, 573, 575, 576, 577, 587, 590, 591, 592, 594, 596, 597, 599, 600, 602, 604, 609, 610, 620, 669, 677, 681, 682, 683, 691, 706, 715, 733, 734, 738, 741, 744, 745, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 761, 801, 813, 814, 887, 954, 955, 956, 957, 964, 970, 996, 1008, 1009, 1011], "contain": [10, 19, 24, 27, 33, 40, 49, 55, 57, 69, 70, 112, 114, 117, 155, 166, 167, 169, 172, 187, 214, 225, 234, 235, 238, 246, 254, 256, 258, 262, 265, 266, 274, 282, 283, 285, 298, 309, 314, 317, 338, 339, 354, 359, 360, 361, 363, 366, 367, 369, 370, 371, 372, 373, 374, 377, 378, 384, 388, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 402, 404, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 473, 477, 479, 480, 481, 485, 486, 487, 491, 492, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 677, 678, 685, 688, 710, 711, 712, 743, 747, 754, 755, 763, 767, 770, 771, 772, 775, 776, 785, 789, 790, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 891, 892, 893, 912, 913, 915, 919, 923, 943, 944, 946, 952, 955, 958, 960, 964, 965, 967, 970, 980, 989, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "generate_dataset": 10, "coef": [10, 54, 105, 166, 175, 180, 183, 187, 188, 190, 195, 199, 200, 201, 205, 212, 238, 269, 294, 334, 501, 623, 624, 626, 629, 630, 636, 637, 638, 639, 640, 646, 657, 658, 659, 660, 661, 662, 663, 664, 958], "random_se": [10, 91, 118], "x_scaler": 10, "y_scaler": 10, "ok": [10, 366, 960], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 289, 317, 353, 683, 689, 704, 705, 713, 758, 759, 762, 763, 954, 996, 1004, 1005, 1011], "bp": [10, 123, 146, 184, 185, 363, 962], "cls_info": 10, "estimator_conf": 10, "box": [10, 30, 167, 168, 218, 298, 302, 372, 395, 397, 489, 532, 533, 849, 860, 884, 886, 954, 955, 961, 964, 970, 974, 980, 1004], "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 59, 79, 91, 95, 96, 97, 113, 125, 132, 158, 166, 172, 175, 176, 186, 194, 222, 235, 251, 262, 289, 293, 299, 303, 315, 325, 346, 364, 378, 390, 395, 955], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 57, 58, 59, 62, 63, 84, 90, 91, 97, 101, 128, 156, 157, 172, 184, 189, 191, 193, 194, 196, 198, 199, 211, 213, 218, 241, 243, 244, 251, 256, 259, 260, 298, 303, 315, 343, 366, 369, 398, 1004, 1006, 1007], "linestyl": [10, 11, 16, 33, 59, 72, 79, 103, 105, 110, 121, 131, 135, 138, 149, 152, 154, 156, 158, 167, 168, 181, 183, 184, 185, 196, 197, 198, 202, 206, 208, 209, 214, 232, 234, 253, 255, 259, 260, 265, 281, 289, 293, 299, 323, 326, 327, 329, 330, 331, 985], "major": [10, 14, 263, 298, 302, 306, 307, 308, 309, 310, 340, 353, 361, 365, 366, 368, 371, 376, 379, 390, 394, 396, 398, 400, 528, 546, 547, 671, 704, 705, 713, 758, 759, 762, 884, 886, 954, 957, 968, 975, 978, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 204, 372, 417, 675, 677, 678, 891], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 641, 662, 663, 950, 954], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 204, 219, 222, 276], "1e2": [10, 149, 156, 231, 247, 325, 721], "randomforest": [10, 118, 353, 397, 880, 881, 1001], "0001": [10, 135, 204, 254, 367, 402, 422, 425, 437, 449, 450, 456, 510, 515, 517, 524, 526, 527, 536, 537, 623, 624, 625, 626, 629, 630, 635, 636, 637, 638, 639, 640, 645, 646, 649, 651, 653, 655, 657, 664, 666, 670, 830, 831, 872, 873, 943], "250": [10, 40, 64, 67, 122, 172, 188, 215, 217, 222, 223, 292, 296, 470, 669, 943, 966, 1003], "657": [10, 15, 256], "plot_prediction_lat": [10, 15], "conserv": [11, 559, 566, 864, 865, 953, 966], "biologi": 11, "south": [11, 166, 289, 396], "american": [11, 12, 69, 80, 361, 390, 392, 396, 397, 398, 447, 452, 706, 853], "mammal": 11, "past": [11, 370, 373, 376, 379, 394, 395, 397, 515, 532, 533, 655, 978, 981], "environment": [11, 214], "unsuccess": 11, "cast": [11, 53, 196, 218, 360, 378, 379, 398, 473, 621, 622, 623, 629, 633, 634, 637, 638, 639, 640, 641, 642, 650, 652, 921, 1003, 1004, 1005, 1006, 1009], "densiti": [11, 49, 59, 64, 74, 101, 105, 146, 164, 182, 196, 211, 214, 221, 225, 229, 240, 247, 248, 256, 262, 277, 282, 283, 290, 298, 325, 338, 363, 374, 378, 390, 397, 401, 409, 423, 426, 428, 430, 442, 445, 475, 479, 513, 518, 526, 527, 770, 771, 772, 813, 814, 818, 819, 865, 948, 950, 953, 957, 959, 960, 966, 974, 976, 980, 990, 991, 998, 1000, 1004, 1005, 1011], "phillip": [11, 289, 475], "2006": [11, 289, 397, 400, 440, 475, 534, 535, 542, 543, 587, 588, 591, 596, 599, 626, 643, 644, 716, 763, 764, 770, 808, 865, 882, 883, 950, 954, 956, 959, 966, 967], "basemap": [11, 289], "coast": [11, 289], "line": [11, 17, 40, 59, 69, 95, 100, 121, 125, 148, 159, 161, 162, 164, 166, 167, 184, 185, 186, 188, 191, 192, 194, 197, 198, 199, 204, 205, 207, 208, 225, 229, 230, 232, 234, 253, 260, 262, 263, 286, 289, 299, 308, 324, 329, 330, 334, 335, 338, 360, 361, 364, 366, 367, 369, 370, 371, 372, 373, 376, 395, 396, 397, 417, 464, 465, 466, 485, 486, 519, 530, 531, 532, 533, 587, 590, 591, 609, 610, 647, 663, 922, 948, 958, 961, 968, 974, 977, 987, 989, 998, 1007, 1009], "nation": [11, 79, 289, 361, 820], "boundari": [11, 13, 25, 26, 27, 31, 34, 57, 59, 108, 112, 118, 127, 133, 150, 153, 164, 179, 197, 225, 230, 232, 259, 279, 284, 286, 287, 289, 292, 298, 300, 312, 319, 322, 323, 325, 327, 334, 335, 344, 362, 388, 397, 398, 400, 428, 434, 481, 513, 526, 527, 546, 565, 566, 568, 608, 802, 815, 821, 823, 824, 825, 852, 868, 869, 876, 877, 880, 896, 948, 957, 960, 964, 967, 968, 969, 996, 998, 1000, 1009, 1010, 1011], "america": [11, 12, 79, 289, 820, 964], "bradypu": [11, 289, 475], "variegatu": [11, 289, 475], "brown": [11, 91, 289, 475, 605, 944, 1001, 1003, 1004, 1005, 1008], "throat": [11, 289, 475], "sloth": [11, 289, 475], "microryzomi": [11, 289, 475], "minutu": [11, 289, 475], "known": [11, 17, 25, 27, 39, 49, 57, 80, 104, 105, 129, 154, 156, 162, 196, 197, 214, 225, 256, 265, 285, 289, 299, 309, 313, 322, 339, 355, 363, 364, 366, 373, 376, 378, 381, 386, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 400, 417, 441, 459, 461, 475, 485, 486, 521, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 565, 566, 568, 571, 586, 599, 610, 635, 636, 649, 659, 660, 671, 680, 686, 689, 694, 704, 718, 730, 732, 768, 802, 808, 809, 810, 811, 812, 815, 820, 823, 829, 856, 880, 881, 882, 883, 944, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 964, 969, 970, 980, 985, 987, 988], "forest": [11, 27, 31, 108, 115, 118, 124, 125, 127, 129, 132, 133, 161, 164, 165, 170, 172, 225, 234, 253, 289, 308, 338, 349, 359, 377, 378, 388, 399, 441, 442, 468, 472, 473, 475, 492, 532, 533, 534, 535, 537, 540, 541, 542, 543, 607, 611, 799, 806, 833, 847, 876, 880, 881, 882, 943, 944, 955, 962, 974, 975, 976, 991, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1005], "rice": [11, 289, 475, 1009], "rat": [11, 289, 475], "rodent": [11, 289, 475], "live": [11, 69, 166, 289, 366, 390, 475, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "peru": [11, 289, 475], "colombia": [11, 289, 475], "ecuador": [11, 289, 475], "venezuela": [11, 289, 475], "entropi": [11, 236, 268, 289, 308, 313, 314, 349, 390, 397, 402, 475, 510, 534, 541, 584, 585, 635, 693, 711, 712, 716, 768, 880, 882, 950, 951, 954, 958, 970, 998, 1000, 1004, 1005, 1010], "anderson": [11, 289, 475, 1002, 1008], "schapir": [11, 289, 397, 475, 530, 531], "ecolog": [11, 289, 475], "190": [11, 51, 67, 121, 214, 265, 289, 371, 475], "231": [11, 253, 272, 289, 390, 401, 423, 475, 561], "259": [11, 167, 194, 215, 219, 289, 397, 475, 544, 545], "________________________________________________________________________________": [11, 54, 338], "coastlin": [11, 289, 363], "coverag": [11, 122, 196, 214, 289, 368, 386, 475, 604, 696], "area": [11, 34, 196, 214, 234, 253, 256, 263, 265, 266, 325, 330, 334, 363, 366, 369, 376, 388, 390, 397, 398, 678, 682, 683, 684, 717, 763, 764, 951, 954, 957, 973, 998], "roc": [11, 25, 115, 164, 224, 226, 234, 235, 239, 249, 272, 372, 388, 394, 481, 487, 541, 635, 678, 682, 683, 684, 702, 717, 757, 763, 764, 790, 799, 802, 840, 877, 960, 993, 998, 999, 1001, 1002, 1006, 1008], "868443": 11, "993919": 11, "elaps": [11, 47, 66, 116, 117, 353, 442, 445, 546, 547, 832, 833, 834, 835], "astro": [11, 156, 217, 244], "washington": [11, 156, 217, 244, 281, 289], "bunch": [11, 359, 360, 361, 442, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 487, 544, 545, 546, 547, 609, 610, 611, 832, 833, 880, 881, 882, 883, 978, 989, 1001, 1003, 1006, 1008], "fetch_species_distribut": [11, 289, 1005], "ll": [11, 117, 251, 289, 366, 376, 509, 518, 957, 970, 980], "otherwis": [11, 55, 61, 112, 158, 162, 177, 198, 204, 258, 289, 349, 355, 367, 369, 371, 378, 390, 392, 394, 398, 400, 413, 414, 415, 417, 419, 420, 421, 424, 429, 431, 432, 442, 445, 459, 460, 461, 462, 473, 503, 512, 513, 515, 517, 518, 524, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 567, 574, 579, 587, 588, 591, 608, 609, 610, 621, 622, 623, 629, 635, 636, 637, 639, 642, 643, 644, 645, 650, 652, 653, 654, 655, 662, 663, 667, 669, 673, 674, 675, 677, 678, 679, 683, 685, 689, 690, 699, 701, 702, 703, 704, 705, 713, 716, 727, 729, 730, 731, 749, 753, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 785, 789, 790, 797, 802, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 828, 830, 831, 837, 838, 840, 844, 853, 854, 857, 858, 859, 861, 862, 863, 872, 874, 875, 876, 877, 878, 887, 893, 895, 908, 909, 916, 938, 940, 949, 950, 951, 954, 957, 958, 960, 961, 964, 966, 968, 969, 974, 978, 980, 998, 1004, 1005, 1006, 1009], "improvis": [11, 289], "mpl_toolkit": [11, 45, 66, 89, 101, 102, 167, 193, 217, 219, 289], "except": [11, 16, 44, 53, 98, 167, 204, 211, 225, 264, 276, 289, 293, 294, 298, 300, 356, 359, 366, 367, 368, 369, 370, 376, 378, 384, 387, 391, 394, 395, 397, 398, 400, 411, 438, 443, 459, 460, 461, 486, 531, 533, 534, 535, 537, 539, 541, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 664, 687, 753, 778, 806, 807, 813, 814, 816, 819, 824, 830, 831, 837, 851, 853, 873, 875, 878, 881, 883, 913, 940, 950, 954, 961, 969, 980, 988, 989, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "importerror": [11, 16, 53, 98, 276, 289, 373, 473], "construct_grid": [11, 289], "object": [11, 13, 14, 19, 26, 44, 50, 61, 65, 69, 70, 98, 129, 135, 144, 145, 154, 164, 192, 196, 212, 214, 224, 235, 237, 238, 239, 254, 258, 267, 268, 289, 309, 310, 313, 339, 340, 349, 359, 360, 361, 366, 368, 370, 371, 372, 374, 377, 378, 379, 384, 390, 391, 392, 395, 398, 399, 400, 404, 406, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 687, 694, 707, 708, 717, 733, 734, 756, 757, 764, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 887, 892, 893, 894, 895, 896, 899, 903, 905, 915, 916, 917, 919, 921, 922, 939, 940, 942, 950, 951, 952, 953, 957, 960, 961, 964, 967, 968, 969, 974, 975, 980, 981, 983, 984, 987, 989, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "func": [11, 74, 115, 166, 176, 214, 289, 366, 391, 443, 676, 837, 964, 1000, 1002, 1004, 1005], "xgrid": [11, 289], "ygrid": [11, 289], "correspond": [11, 13, 16, 26, 32, 41, 53, 64, 77, 81, 97, 113, 116, 118, 142, 146, 150, 155, 158, 166, 167, 185, 188, 196, 197, 205, 214, 226, 231, 238, 246, 255, 257, 259, 260, 265, 266, 289, 303, 308, 309, 310, 333, 339, 343, 344, 349, 354, 360, 361, 362, 365, 366, 367, 369, 372, 373, 377, 378, 387, 388, 390, 392, 393, 394, 395, 397, 398, 399, 400, 405, 410, 416, 418, 420, 424, 426, 429, 431, 437, 439, 441, 442, 450, 453, 459, 460, 461, 467, 468, 469, 470, 471, 472, 473, 511, 518, 521, 522, 523, 526, 527, 529, 532, 534, 536, 537, 538, 541, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 594, 607, 609, 610, 612, 620, 623, 624, 625, 629, 635, 636, 637, 638, 639, 645, 646, 648, 649, 650, 651, 652, 653, 655, 657, 658, 659, 660, 664, 667, 668, 669, 671, 679, 686, 689, 699, 700, 709, 713, 727, 729, 749, 753, 757, 763, 764, 767, 769, 770, 771, 772, 775, 776, 785, 794, 802, 805, 808, 809, 810, 811, 812, 813, 814, 818, 819, 820, 822, 830, 831, 840, 844, 846, 847, 850, 861, 874, 877, 880, 881, 882, 883, 897, 903, 929, 943, 944, 946, 947, 948, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 964, 965, 968, 969, 973, 980, 986, 989, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "coordin": [11, 12, 13, 54, 100, 128, 153, 181, 217, 257, 289, 353, 395, 400, 422, 425, 426, 427, 439, 449, 450, 456, 508, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 527, 591, 623, 624, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 658, 659, 660, 661, 665, 666, 667, 670, 671, 682, 739, 744, 872, 950, 951, 969, 987, 996, 999, 1000, 1001, 1005, 1007, 1009, 1010], "corner": [11, 13, 26, 53, 253, 257, 265, 266, 289, 366, 475, 884, 886, 954, 1010], "cell": [11, 12, 26, 32, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 289, 295, 307, 308, 310, 315, 347, 363, 370, 669, 954, 955, 1002, 1010], "xmin": [11, 77, 186, 188, 205, 206, 289], "x_left_lower_corn": [11, 289, 475], "grid_siz": [11, 60, 289, 475], "xmax": [11, 77, 186, 188, 205, 206, 289], "nx": [11, 34, 289, 475], "ymin": [11, 77, 183, 185, 188, 189, 197, 205, 256, 258, 289], "y_left_lower_corn": [11, 289, 475], "ny": [11, 34, 255, 289, 363, 475, 944, 966], "create_species_bunch": 11, "species_nam": [11, 289], "record": [11, 96, 114, 168, 340, 353, 366, 390, 392, 428, 435, 475, 597, 620, 669, 746, 749, 753, 754, 755, 756, 796, 819, 1009, 1010], "join": [11, 12, 19, 161, 204, 214, 256, 300, 361, 379, 441, 989, 996, 1004], "ascii": [11, 289, 398, 464, 565, 566, 568], "pt": [11, 361, 399, 849, 964], "desir": [11, 24, 112, 146, 162, 196, 198, 298, 302, 359, 366, 367, 369, 373, 384, 387, 390, 393, 394, 395, 399, 480, 515, 517, 521, 524, 544, 570, 579, 580, 641, 647, 662, 663, 684, 711, 813, 814, 818, 838, 840, 843, 844, 846, 847, 849, 850, 856, 858, 860, 861, 896, 923, 946, 948, 951, 957, 964, 968, 969, 970, 980, 996, 1004, 1005, 1006, 1009], "pts_": 11, "ix": [11, 265, 332], "searchsort": 11, "dd": [11, 12, 127, 289, 475], "ii": [11, 96, 167, 203, 251, 363, 398, 643, 644, 950, 964, 973], "lat": [11, 289, 475], "cov_": [11, 81], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 80, 91, 121, 162, 168, 220, 228, 233, 268, 308, 367, 370, 377, 776, 792, 808, 809, 810, 812, 943, 944], "land": [11, 289, 379, 397], "water": 11, "land_refer": [11, 289], "standard": [11, 12, 26, 32, 34, 60, 69, 70, 72, 79, 80, 85, 96, 110, 113, 115, 116, 117, 118, 129, 146, 149, 154, 156, 158, 166, 175, 181, 185, 194, 196, 205, 217, 218, 219, 230, 246, 251, 254, 255, 256, 257, 259, 298, 303, 323, 338, 353, 354, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 374, 376, 378, 381, 384, 386, 390, 392, 393, 394, 398, 400, 446, 450, 465, 473, 478, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 501, 502, 507, 509, 512, 518, 529, 567, 571, 588, 611, 621, 622, 627, 628, 631, 632, 633, 641, 642, 649, 650, 651, 652, 653, 655, 664, 666, 670, 763, 792, 810, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 837, 842, 843, 846, 849, 850, 851, 853, 860, 861, 862, 863, 870, 872, 873, 892, 943, 946, 950, 951, 954, 956, 957, 958, 960, 968, 969, 975, 978, 980, 985, 987, 988, 989, 991, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 289], "llcrnrlat": [11, 289], "urcrnrlat": [11, 289], "llcrnrlon": [11, 289], "urcrnrlon": [11, 289], "drawcoastlin": [11, 289], "drawcountri": [11, 289], "9998": [11, 289], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 59, 62, 64, 67, 73, 74, 79, 89, 90, 91, 95, 102, 103, 109, 112, 118, 122, 125, 127, 128, 130, 131, 135, 138, 142, 143, 150, 152, 153, 157, 162, 164, 166, 167, 168, 178, 179, 181, 190, 193, 200, 208, 210, 229, 231, 232, 233, 241, 244, 252, 256, 259, 260, 265, 266, 269, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 299, 300, 301, 302, 303, 306, 310, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 337, 338, 340, 341, 349, 354, 360, 361, 363, 366, 373, 374, 378, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 402, 419, 422, 425, 426, 427, 428, 429, 430, 431, 437, 438, 440, 447, 450, 465, 479, 481, 483, 489, 500, 508, 514, 518, 521, 522, 523, 526, 527, 530, 532, 534, 535, 536, 558, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 608, 616, 617, 625, 627, 628, 630, 631, 632, 633, 635, 636, 640, 641, 642, 643, 644, 646, 656, 657, 659, 660, 661, 662, 663, 665, 668, 672, 673, 680, 681, 684, 693, 701, 712, 718, 731, 733, 734, 736, 741, 744, 749, 750, 751, 752, 754, 766, 767, 768, 770, 771, 773, 777, 778, 779, 780, 783, 786, 787, 789, 790, 792, 797, 808, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 827, 834, 838, 839, 840, 844, 845, 846, 848, 849, 853, 860, 865, 879, 887, 895, 904, 909, 928, 943, 944, 946, 947, 948, 950, 951, 952, 953, 956, 958, 959, 960, 962, 967, 968, 969, 970, 974, 977, 984, 990, 991, 996, 997, 998, 999, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "solid": [11, 16, 31, 33, 121, 152, 208, 209, 225, 289, 300, 978], "z": [11, 16, 34, 57, 101, 118, 125, 138, 151, 153, 167, 206, 208, 209, 210, 217, 219, 225, 230, 245, 282, 289, 292, 300, 303, 318, 324, 325, 329, 330, 331, 335, 363, 387, 395, 397, 530, 531, 562, 616, 641, 648, 662, 663, 666, 670, 676, 699, 760, 853, 950, 951, 958, 959], "float64": [11, 13, 48, 53, 70, 121, 123, 124, 166, 310, 354, 360, 366, 367, 378, 398, 456, 473, 474, 485, 486, 519, 558, 559, 566, 568, 618, 635, 650, 652, 713, 838, 846, 847, 874, 875, 877, 878, 881, 883, 890, 892, 925, 928, 930, 931, 932, 969, 980, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "idx": [11, 16, 19, 30, 45, 105, 112, 118, 130, 158, 169, 180, 188, 195, 196, 205, 218, 234, 344, 391, 394], "9999": [11, 214, 289, 316, 475, 604, 1004], "coverages_land": 11, "contourf": [11, 16, 118, 125, 210, 230, 282, 289, 292, 300, 301, 318, 324, 330, 335, 608, 609], "pts_train": 11, "pts_test": 11, "equal": [11, 12, 26, 37, 39, 53, 59, 79, 85, 110, 122, 152, 166, 197, 198, 200, 207, 213, 235, 243, 246, 250, 254, 256, 265, 286, 300, 325, 327, 334, 339, 361, 362, 366, 367, 378, 387, 388, 390, 394, 395, 397, 398, 403, 416, 419, 420, 421, 422, 424, 425, 427, 432, 437, 441, 447, 452, 457, 480, 489, 492, 496, 509, 510, 511, 516, 518, 520, 521, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 565, 570, 571, 574, 576, 577, 584, 585, 602, 605, 606, 609, 610, 611, 612, 614, 618, 619, 622, 626, 635, 636, 648, 676, 679, 694, 696, 704, 743, 758, 762, 763, 767, 769, 772, 773, 775, 776, 784, 785, 789, 794, 801, 805, 806, 813, 814, 815, 816, 821, 822, 823, 824, 825, 830, 831, 836, 837, 838, 845, 848, 851, 852, 853, 855, 862, 869, 872, 873, 879, 880, 881, 882, 883, 898, 909, 929, 935, 948, 950, 954, 955, 957, 958, 960, 964, 968, 969, 970, 988, 989, 997, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "auc": [11, 25, 196, 214, 234, 253, 256, 260, 263, 265, 266, 678, 684, 763, 954, 1001, 1004, 1008], "pred_background": 11, "pred_test": [11, 303], "cov_test": 11, "r_": [11, 34, 101, 105, 125, 209, 210, 242, 263, 282, 283, 324, 330, 335, 390, 683, 954, 970], "fpr": [11, 226, 234, 253, 265, 266, 372, 569, 573, 675, 678, 682, 702, 764, 954, 993, 996], "tpr": [11, 226, 234, 253, 265, 266, 372, 678, 682, 764, 954, 993, 996], "threshold": [11, 25, 42, 64, 98, 105, 146, 164, 169, 191, 226, 228, 253, 254, 255, 263, 274, 312, 319, 344, 347, 378, 390, 395, 397, 399, 420, 421, 424, 447, 477, 485, 486, 508, 514, 519, 525, 526, 527, 540, 565, 568, 570, 574, 579, 580, 621, 644, 648, 653, 655, 669, 675, 677, 678, 679, 682, 683, 696, 701, 702, 714, 715, 731, 757, 763, 764, 767, 770, 771, 790, 808, 819, 820, 836, 838, 840, 855, 867, 868, 869, 877, 884, 886, 928, 950, 954, 957, 958, 960, 964, 967, 969, 970, 975, 996, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "roc_curv": [11, 226, 253, 265, 678, 682, 702, 757, 763, 954, 996, 997, 998, 1001, 1002, 1004, 1009], "roc_auc": [11, 256, 260, 265, 266, 372, 611, 678, 954, 993], "ntime": [11, 267], "140": [11, 15, 53, 218, 223, 397, 487, 493, 494, 495, 532, 533, 955], "plot_species_distribution_model": [11, 15, 475], "emploi": [12, 149, 231, 392, 398, 400, 428, 456, 559, 566, 962, 978, 988, 1002], "techniqu": [12, 69, 71, 97, 106, 111, 120, 137, 162, 204, 219, 221, 261, 280, 309, 314, 343, 355, 363, 376, 378, 389, 390, 394, 395, 396, 397, 398, 399, 425, 426, 427, 428, 511, 531, 654, 666, 670, 671, 701, 731, 946, 950, 951, 953, 954, 957, 960, 962, 966, 968, 970, 975, 978, 983, 988, 989, 1009], "histor": [12, 196, 975], "quot": [12, 14, 69, 257, 338, 339, 354, 360, 361, 364, 369, 389, 465, 466, 473, 954, 966, 969, 989], "quantiti": [12, 119, 256, 263, 308, 353, 378, 390, 397, 697, 698, 699, 760, 829, 943, 945, 948, 950, 1001], "daili": [12, 369, 978], "price": [12, 74, 119, 129, 167, 944, 950, 961, 978, 985], "link": [12, 17, 167, 175, 196, 214, 241, 259, 286, 343, 354, 364, 365, 366, 369, 373, 378, 390, 392, 395, 400, 538, 539, 587, 625, 646, 657, 665, 681, 891, 893, 950, 957, 970, 971, 974, 977, 983, 987, 989, 994, 996, 999, 1000, 1003, 1004, 1007], "fluctuat": [12, 59, 196, 263, 1004], "normalesup": [12, 32, 46, 65, 230], "2008": [12, 392, 394, 395, 456, 511, 540, 567, 622, 641, 662, 663, 669, 692, 701, 731, 803, 808, 812, 829, 948, 951, 952, 954, 955, 956, 959, 960, 969], "calm": 12, "ago": [12, 975], "tech": [12, 363, 811], "firm": [12, 390], "crash": [12, 366, 446, 862, 863, 870, 964, 1000, 1004], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 373, 829, 959, 987], "msft": 12, "ibm": [12, 19, 317, 340, 361], "twx": 12, "warner": 12, "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 989], "amzn": 12, "amazon": 12, "tm": [12, 957], "toyota": 12, "caj": 12, "canon": [12, 378, 397, 459, 460, 462, 743, 975, 976, 991], "sne": [12, 164, 216, 217, 218, 219, 221, 223, 491, 502, 669, 990, 991], "soni": [12, 1006, 1008], "ford": 12, "hmc": 12, "honda": [12, 19], "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 830, 831, 958], "boe": 12, "ko": [12, 26, 150], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 79, 80, 392, 447, 452], "mcdonald": 12, "pep": [12, 373, 996], "pepsi": 12, "kellogg": 12, "un": [12, 366, 388, 398, 402, 510, 566, 768, 836, 845, 855, 859, 1005], "unilev": 12, "mar": [12, 972], "marriott": 12, "pg": [12, 371, 626, 950, 1001], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 945, 956, 1008], "electr": [12, 363, 390], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 978], "chase": [12, 996], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 978], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 353, 364, 376, 955, 972], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 69], "instrument": [12, 69, 96], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1006], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 132], "dynam": [12, 167, 532, 533, 540, 555, 557, 653, 654, 655, 970, 974, 978, 1002, 1008], "rtn": 12, "raytheon": 12, "cat": [12, 70, 168, 309, 310, 361, 398, 559, 688, 694, 729, 758, 954, 964, 1005, 1006, 1008], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 340, 367, 392, 398, 476, 559, 565, 566, 568, 884, 886, 974], "fetch": [12, 17, 129, 166, 214, 359, 360, 361, 366, 369, 370, 373, 389, 395, 473, 532, 533, 540, 565, 566, 568, 1004], "histori": [12, 356, 514, 523, 972, 996], "stderr": [12, 802], "url": [12, 17, 146, 360, 363, 369], "githubusercont": 12, "master": [12, 16, 276, 366, 369, 978, 1001], "financi": [12, 390, 397, 950], "csv": [12, 360, 363, 370, 977, 1004, 1009], "read_csv": [12, 370, 1011], "close_pric": 12, "vstack": [12, 26, 56, 64, 145, 152, 153, 178, 241, 245, 276, 289, 330, 608, 955, 1004], "q": [12, 70, 84, 122, 196, 309, 387, 390, 395, 908, 950, 969], "open_pric": 12, "carri": [12, 31, 162, 256, 259, 264, 293, 300, 340, 379, 384, 398, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 978, 988], "invers": [12, 54, 76, 82, 164, 246, 265, 325, 339, 340, 358, 378, 389, 391, 393, 394, 395, 398, 402, 424, 443, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 504, 510, 511, 512, 516, 518, 520, 534, 538, 541, 566, 567, 568, 605, 621, 622, 635, 636, 643, 645, 651, 652, 653, 654, 655, 657, 699, 718, 727, 770, 771, 815, 816, 823, 824, 830, 831, 833, 837, 840, 846, 847, 849, 864, 865, 872, 873, 874, 877, 878, 880, 882, 898, 948, 950, 954, 957, 958, 964, 968, 969, 987, 989, 990, 991, 996, 999, 1004, 1007, 1008, 1010], "correl": [12, 27, 81, 84, 85, 106, 126, 142, 154, 164, 165, 167, 168, 170, 185, 191, 214, 256, 274, 307, 308, 333, 359, 362, 363, 370, 378, 380, 387, 392, 394, 399, 400, 428, 435, 459, 460, 462, 470, 471, 477, 501, 541, 583, 586, 604, 611, 612, 613, 659, 660, 718, 732, 753, 754, 755, 799, 813, 814, 850, 851, 853, 861, 945, 950, 955, 961, 964, 968, 970, 975, 976, 991, 996, 997, 998, 1009, 1010], "condition": [12, 27, 196, 388, 392, 733, 948], "connect": [12, 39, 44, 47, 51, 54, 61, 65, 66, 364, 366, 374, 378, 392, 420, 424, 430, 440, 441, 562, 563, 672, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 952, 957, 959, 967, 1000, 1009], "num": [12, 70, 146, 149, 154, 155, 156, 168, 198, 263, 264, 310, 609, 943], "edge_model": 12, "graphicallassocv": [12, 81, 392, 449, 451, 452, 453, 454, 456, 1004, 1008, 1010], "seri": [12, 81, 116, 129, 168, 178, 196, 217, 234, 238, 261, 267, 310, 313, 358, 361, 370, 378, 390, 466, 467, 468, 469, 473, 477, 478, 479, 481, 482, 487, 518, 667, 671, 792, 888, 945, 950, 951, 955, 957, 968, 974, 999, 1002, 1003, 1004, 1008], "rather": [12, 53, 81, 113, 161, 166, 196, 197, 210, 302, 338, 339, 349, 354, 362, 366, 367, 370, 371, 373, 376, 377, 378, 379, 390, 394, 395, 397, 398, 400, 426, 439, 441, 542, 558, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 606, 623, 624, 629, 630, 637, 638, 639, 640, 756, 785, 804, 806, 807, 836, 872, 873, 884, 909, 948, 950, 951, 954, 956, 957, 961, 975, 984, 987, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1011], "former": [12, 340, 397, 398, 542, 774, 780, 789, 956, 996, 1002, 1005], "recoveri": [12, 81, 195, 392], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 373], "trust": [12, 26, 70, 80, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 379, 388, 984, 1010], "unabl": [12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 196, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 354, 355, 853, 964, 1005], "render": [12, 26, 53, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 167, 168, 177, 191, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347, 366, 369, 370, 371, 378, 528, 566, 608, 850, 861, 884, 886, 953, 970, 1009], "nbviewer": [12, 26, 70, 109, 115, 116, 117, 129, 132, 143, 154, 166, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315, 347], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 57, 59, 131, 169, 196, 218, 247, 251, 315, 339, 347, 361, 370, 378, 379, 390, 396, 397, 398, 413, 472, 565, 566, 568, 571, 694, 763, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 846, 882, 883, 950, 951, 953, 954, 955, 970, 971, 972, 974, 980, 983, 984, 1002, 1003, 1004, 1005, 1008, 1009, 1010], "amongst": [12, 970], "indic": [12, 19, 25, 26, 27, 48, 58, 59, 65, 74, 85, 95, 115, 154, 157, 162, 193, 219, 229, 250, 258, 259, 262, 263, 276, 289, 313, 314, 317, 338, 339, 340, 347, 354, 361, 366, 367, 369, 373, 374, 376, 378, 387, 388, 390, 392, 394, 395, 397, 398, 400, 401, 405, 416, 419, 423, 428, 429, 430, 431, 433, 434, 435, 438, 442, 445, 450, 464, 485, 486, 488, 489, 490, 500, 509, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 558, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 597, 604, 605, 606, 607, 609, 616, 624, 627, 628, 630, 631, 632, 638, 640, 642, 650, 652, 659, 660, 667, 669, 671, 673, 679, 683, 688, 689, 694, 695, 696, 700, 703, 704, 705, 706, 709, 713, 714, 715, 716, 729, 746, 753, 754, 755, 756, 758, 759, 760, 762, 763, 765, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 806, 807, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 837, 840, 844, 846, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 888, 892, 893, 898, 913, 919, 920, 944, 949, 950, 951, 954, 955, 956, 957, 958, 962, 964, 965, 968, 969, 975, 980, 984, 987, 989, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1009, 1011], "reflect": [12, 40, 46, 47, 79, 91, 96, 119, 168, 196, 214, 265, 280, 339, 362, 365, 369, 378, 380, 387, 428, 434, 951, 954, 960, 962, 988, 997, 1005], "properti": [12, 25, 156, 157, 198, 213, 242, 278, 303, 347, 353, 356, 359, 366, 367, 381, 387, 390, 392, 395, 397, 399, 400, 405, 421, 424, 429, 430, 431, 442, 443, 459, 460, 461, 519, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 567, 568, 570, 571, 574, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 609, 623, 625, 629, 632, 637, 639, 646, 651, 652, 657, 676, 680, 681, 684, 772, 775, 776, 785, 801, 802, 832, 833, 846, 848, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 946, 949, 950, 951, 954, 955, 957, 960, 964, 967, 969, 970, 971, 975, 980, 1001, 1005, 1006, 1010], "impact": [12, 25, 36, 37, 67, 74, 142, 164, 166, 167, 198, 214, 238, 250, 339, 349, 353, 354, 359, 376, 379, 390, 395, 425, 427, 513, 517, 524, 567, 643, 644, 645, 653, 654, 655, 669, 767, 772, 775, 776, 785, 796, 813, 814, 850, 861, 895, 909, 925, 928, 943, 953, 969, 1003, 1006, 1009], "affinity_propag": [12, 44], "covariance_": [12, 34, 79, 81, 447, 448, 449, 450, 451, 452, 453, 454, 526, 527, 948, 1003], "n_label": [12, 91, 232, 378, 464, 500, 689, 696, 701, 714, 715, 729, 731, 765, 766, 791, 954, 1002, 1004], "lai": [12, 960], "canva": [12, 16], "manifold": [12, 39, 52, 66, 220, 221, 222, 223, 276, 306, 310, 315, 356, 359, 378, 390, 395, 397, 479, 502, 507, 521, 526, 543, 822, 834, 843, 865, 895, 957, 990, 991, 996, 997, 999, 1000, 1001, 1002, 1003], "dens": [12, 164, 174, 215, 310, 317, 353, 374, 378, 390, 395, 397, 399, 422, 425, 427, 442, 445, 473, 500, 501, 511, 512, 521, 543, 562, 563, 584, 585, 606, 629, 634, 635, 636, 643, 645, 649, 650, 653, 654, 655, 664, 665, 666, 669, 670, 735, 736, 742, 754, 765, 830, 831, 838, 845, 846, 848, 850, 851, 853, 861, 862, 863, 864, 865, 872, 873, 874, 875, 877, 878, 910, 925, 928, 944, 947, 950, 951, 955, 957, 960, 964, 966, 967, 968, 969, 970, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "eigen_solv": [12, 44, 46, 65, 217, 218, 395, 430, 440, 512, 665, 666, 668, 670, 672, 951, 997, 1006, 1009, 1010, 1011], "arpack": [12, 19, 44, 46, 65, 218, 395, 429, 430, 431, 440, 512, 518, 521, 665, 666, 668, 670, 672, 951, 1002, 1003, 1008], "don": [12, 54, 69, 120, 166, 218, 232, 256, 316, 322, 326, 338, 339, 353, 360, 366, 367, 369, 371, 373, 376, 377, 391, 398, 623, 629, 801, 880, 881, 882, 883, 920, 943, 950, 953, 955, 958, 960, 968, 977, 988, 989, 1000, 1005], "control": [12, 16, 60, 99, 100, 135, 154, 156, 197, 204, 228, 229, 257, 259, 278, 307, 309, 343, 345, 346, 353, 354, 359, 362, 366, 367, 370, 373, 376, 378, 381, 384, 389, 390, 393, 394, 395, 396, 399, 400, 413, 419, 427, 432, 449, 450, 456, 508, 513, 514, 515, 516, 517, 520, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 570, 571, 573, 591, 596, 602, 604, 607, 609, 611, 616, 618, 619, 623, 624, 626, 627, 628, 629, 631, 632, 633, 649, 653, 654, 659, 660, 664, 669, 685, 770, 771, 772, 774, 775, 776, 777, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 799, 800, 803, 804, 807, 830, 831, 852, 864, 865, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 886, 941, 943, 950, 951, 953, 954, 955, 957, 960, 961, 966, 968, 969, 970, 974, 975, 976, 987, 991, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "neighbor": [12, 31, 39, 44, 47, 59, 127, 130, 137, 161, 162, 218, 219, 221, 225, 233, 234, 280, 281, 282, 283, 285, 286, 287, 289, 290, 303, 308, 310, 338, 356, 358, 363, 374, 378, 390, 396, 397, 398, 401, 404, 412, 420, 423, 424, 428, 430, 435, 436, 441, 473, 479, 481, 540, 547, 579, 584, 585, 604, 605, 665, 666, 667, 668, 669, 670, 673, 756, 772, 799, 833, 834, 853, 868, 876, 928, 955, 960, 975, 976, 983, 988, 990, 991, 996, 998, 999, 1000, 1001, 1002, 1003], "node": [12, 41, 119, 123, 125, 306, 343, 347, 373, 374, 390, 392, 395, 397, 420, 421, 424, 441, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 627, 631, 633, 659, 660, 669, 813, 814, 880, 881, 882, 883, 884, 886, 914, 922, 957, 959, 960, 961, 970, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010], "plane": [12, 125, 208, 230, 282, 324, 327, 329, 330, 335, 363, 430, 440, 948, 950, 969, 987], "node_position_model": 12, "locallylinearembed": [12, 217, 218, 219, 310, 665, 667, 669, 951, 957, 1001, 1002, 1010, 1011], "n_neighbor": [12, 44, 61, 66, 130, 161, 217, 218, 219, 221, 225, 234, 276, 278, 279, 282, 283, 284, 285, 287, 288, 306, 308, 338, 397, 430, 579, 584, 585, 605, 665, 666, 668, 670, 673, 815, 816, 817, 819, 821, 822, 826, 867, 868, 944, 951, 957, 960, 967, 1003, 1010], "output": [12, 14, 16, 25, 27, 37, 53, 58, 98, 108, 113, 118, 119, 129, 133, 137, 138, 149, 157, 161, 162, 164, 166, 192, 224, 238, 239, 244, 250, 254, 256, 259, 263, 265, 266, 276, 299, 302, 306, 309, 310, 339, 340, 342, 347, 348, 359, 360, 361, 363, 366, 367, 371, 373, 376, 377, 378, 388, 389, 390, 391, 393, 394, 397, 398, 399, 406, 410, 412, 416, 420, 421, 422, 424, 425, 427, 428, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 459, 460, 461, 462, 465, 468, 469, 470, 471, 472, 473, 474, 480, 482, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 608, 609, 610, 612, 615, 616, 617, 618, 619, 623, 624, 627, 629, 630, 631, 634, 635, 637, 638, 639, 640, 643, 644, 645, 648, 650, 651, 653, 655, 656, 658, 659, 660, 661, 665, 666, 667, 669, 671, 673, 676, 677, 689, 690, 697, 698, 699, 701, 703, 710, 717, 720, 721, 723, 725, 726, 727, 728, 729, 731, 736, 742, 747, 760, 763, 770, 771, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 794, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 816, 817, 818, 822, 823, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 860, 861, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 887, 893, 895, 898, 909, 910, 941, 943, 944, 946, 948, 950, 951, 954, 955, 956, 957, 958, 961, 964, 969, 976, 980, 981, 983, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "edg": [12, 26, 46, 65, 98, 119, 220, 263, 373, 378, 387, 390, 392, 431, 538, 539, 562, 563, 565, 566, 568, 770, 810, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 838, 885, 964, 967, 978, 1002, 1004, 1007, 1010], "displai": [12, 25, 27, 34, 37, 45, 46, 48, 59, 70, 80, 81, 84, 85, 88, 95, 120, 164, 167, 181, 183, 200, 214, 224, 225, 234, 239, 245, 253, 257, 263, 270, 286, 307, 308, 329, 344, 353, 366, 368, 372, 374, 381, 391, 395, 398, 399, 417, 442, 445, 446, 473, 518, 541, 607, 608, 609, 635, 664, 674, 675, 677, 678, 689, 694, 757, 764, 772, 785, 799, 833, 834, 846, 848, 853, 870, 877, 884, 885, 886, 900, 941, 958, 974, 991, 1005, 1007, 1008, 1010, 1011], "strength": [12, 129, 156, 196, 200, 257, 306, 353, 393, 397, 544, 545, 620, 625, 626, 629, 635, 636, 646, 649, 650, 651, 652, 653, 655, 657, 664, 758, 830, 831, 872, 873, 877, 878, 943, 950, 957, 960, 968, 969], "plan": [12, 360, 364, 366, 379, 964, 999], "fair": [12, 397, 667, 671, 802, 955, 978], "crucial": [12, 251, 353, 365, 366, 379, 390, 400, 969], "challeng": [12, 129, 149, 175, 214, 225, 355, 361, 362, 390, 392, 440, 450, 954, 960, 978, 980], "overlap": [12, 37, 110, 123, 220, 243, 339, 364, 387, 390, 394, 397, 398, 564, 765, 766, 773, 777, 778, 779, 780, 781, 789, 951, 964, 1002], "heurist": [12, 14, 121, 338, 354, 390, 399, 427, 430, 439, 440, 485, 486, 514, 516, 523, 653, 654, 655, 668, 672, 775, 776, 874, 875, 876, 877, 878, 897, 951, 952, 957, 968, 970, 978, 987, 996, 997, 1001, 1005, 1008, 1009], "direct": [12, 84, 85, 89, 95, 97, 101, 104, 146, 202, 241, 247, 253, 285, 295, 303, 325, 330, 354, 364, 366, 369, 371, 373, 379, 390, 393, 395, 398, 399, 430, 440, 449, 450, 456, 511, 518, 526, 565, 566, 568, 579, 618, 665, 822, 948, 950, 955, 957, 959, 975, 988, 996, 999], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 57, 60, 81, 88, 95, 98, 125, 153, 162, 187, 208, 212, 233, 280, 282, 285, 286, 290, 295, 303, 324, 325, 329, 330, 331, 335, 356, 358, 363, 374, 378, 390, 396, 397, 401, 404, 412, 423, 426, 428, 430, 435, 439, 440, 473, 479, 481, 584, 585, 604, 605, 607, 612, 665, 666, 668, 669, 673, 765, 766, 772, 799, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 833, 834, 838, 853, 928, 951, 960, 969, 975, 976, 983, 991, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008], "along": [12, 13, 55, 58, 65, 85, 116, 122, 183, 196, 230, 260, 306, 339, 340, 349, 369, 371, 373, 374, 378, 381, 384, 387, 395, 397, 398, 399, 400, 402, 510, 527, 564, 588, 589, 607, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 653, 655, 658, 659, 660, 661, 662, 663, 754, 755, 765, 772, 785, 842, 843, 846, 850, 851, 852, 853, 857, 858, 859, 861, 862, 863, 888, 911, 929, 935, 943, 950, 957, 964, 967, 978, 996, 1001, 1002, 1004, 1008, 1009], "linecollect": [12, 220, 228, 609], "facecolor": [12, 16, 26, 34, 45, 59, 95, 102, 112, 138, 157, 217, 232, 256, 283, 300, 323, 326, 329, 330, 332], "partial_correl": 12, "precision_": [12, 81, 447, 448, 449, 450, 451, 452, 453, 454], "sqrt": [12, 79, 80, 81, 98, 101, 105, 114, 135, 175, 177, 220, 222, 236, 241, 242, 243, 246, 247, 256, 330, 390, 397, 398, 400, 441, 447, 448, 449, 450, 451, 452, 453, 454, 515, 517, 524, 534, 535, 536, 537, 541, 542, 596, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 676, 706, 738, 739, 744, 853, 865, 880, 881, 882, 883, 946, 950, 951, 954, 956, 966, 1010], "diag": [12, 81, 157, 243, 246, 395, 400, 509, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 770, 771, 950, 1011], "newaxi": [12, 13, 19, 24, 42, 81, 105, 111, 150, 177, 186, 192, 197, 198, 199, 201, 202, 213, 228, 230, 270, 281, 288, 333, 345, 346, 387, 513, 950], "ab": [12, 17, 40, 74, 99, 106, 112, 119, 142, 146, 169, 183, 187, 207, 209, 212, 214, 220, 256, 298, 323, 335, 390, 515, 517, 524, 604, 721, 813, 814, 848, 954], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 59, 60, 102], "start_idx": [12, 220], "end_idx": [12, 220], "sequenc": [12, 118, 157, 184, 220, 267, 367, 378, 391, 394, 395, 397, 398, 480, 489, 546, 547, 558, 559, 565, 566, 568, 623, 772, 775, 782, 799, 856, 912, 913, 919, 925, 928, 974, 996, 999, 1001, 1002], "line0": [12, 220], "linen": [12, 220], "x0": [12, 34, 188, 205, 220, 298, 322, 378, 410, 442, 544, 545, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 836, 837, 838, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853], "y0": [12, 220], "y1": [12, 90, 112, 220, 486, 692, 739, 955, 956], "xm": [12, 220], "ym": [12, 220], "segment": [12, 36, 47, 67, 164, 220, 228, 354, 361, 373, 388, 390, 398, 430, 440, 485, 486, 668, 829, 954, 974, 978, 1004, 1006, 1008], "stop": [12, 17, 44, 61, 108, 133, 154, 156, 164, 174, 198, 215, 307, 366, 367, 373, 374, 378, 390, 395, 397, 399, 419, 420, 422, 424, 425, 427, 430, 432, 440, 441, 449, 450, 456, 459, 460, 461, 473, 481, 485, 486, 492, 497, 509, 513, 514, 515, 516, 517, 520, 522, 523, 524, 530, 531, 534, 535, 536, 537, 538, 539, 541, 542, 548, 565, 566, 568, 579, 594, 604, 621, 622, 623, 625, 626, 629, 633, 635, 636, 643, 644, 645, 646, 648, 653, 654, 655, 657, 668, 669, 672, 690, 770, 771, 799, 830, 831, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 914, 928, 943, 950, 958, 959, 969, 970, 975, 976, 978, 991, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011], "lc": [12, 220, 228], "zorder": [12, 34, 57, 97, 126, 138, 150, 158, 186, 194, 218, 220, 228, 231, 241, 307, 329, 330], "hot_r": [12, 298], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 152, 155, 175, 182, 187, 220, 241, 242, 243, 245, 247, 253, 257, 281, 298, 325, 339, 371, 374, 378, 390, 398, 399, 421, 422, 425, 437, 438, 442, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 466, 508, 511, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 566, 567, 568, 574, 620, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 649, 653, 655, 658, 661, 662, 663, 667, 669, 670, 671, 745, 810, 845, 859, 872, 874, 877, 936, 937, 947, 950, 952, 954, 964, 968, 999, 1001, 1003, 1007], "set_arrai": [12, 220, 228], "set_linewidth": [12, 220, 228], "add_collect": [12, 220, 228], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 57, 115, 116, 120, 129, 143, 146, 154, 161, 166, 167, 168, 196, 214, 235, 238, 242, 243, 247, 251, 254, 255, 256, 257, 259, 267, 268, 276, 298, 310, 313, 314, 339, 340, 361, 363, 364, 366, 367, 369, 374, 376, 378, 387, 391, 394, 395, 397, 398, 405, 422, 425, 426, 427, 428, 429, 431, 432, 435, 437, 438, 442, 445, 480, 486, 534, 535, 536, 537, 541, 542, 543, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 594, 609, 617, 674, 680, 681, 688, 692, 694, 706, 713, 732, 754, 755, 761, 763, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 799, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 846, 880, 881, 882, 883, 913, 925, 928, 933, 934, 954, 956, 957, 958, 968, 970, 974, 987, 989, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "dx": [12, 13, 503, 676], "dy": [12, 676], "this_dx": 12, "argmin": [12, 121, 255, 367, 392, 508, 514, 522, 523, 662, 754, 755, 970], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 61, 102, 225, 241, 292, 300], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 55, 59, 66, 89, 90, 91, 102, 112, 118, 125, 127, 128, 129, 130, 131, 138, 141, 150, 151, 153, 157, 167, 179, 188, 198, 205, 208, 209, 210, 229, 230, 231, 232, 241, 244, 252, 256, 259, 270, 279, 282, 283, 284, 287, 292, 300, 301, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 344, 345, 346, 608], "ptp": 12, "03": [12, 28, 52, 75, 79, 84, 95, 133, 154, 159, 166, 177, 214, 229, 239, 241, 247, 257, 272, 296, 303, 311, 314, 336, 339, 363, 398, 723, 772, 950, 954], "928": [12, 15, 80, 416], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 118, 133, 164, 167, 198, 257, 258, 307, 308, 310, 330, 347, 352, 358, 366, 368, 369, 376, 378, 391, 399, 401, 402, 416, 423, 426, 427, 428, 430, 435, 436, 439, 442, 445, 450, 472, 508, 510, 511, 512, 514, 516, 518, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 566, 571, 579, 587, 609, 611, 616, 635, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 782, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 832, 835, 867, 868, 922, 924, 975, 984, 989, 991, 996, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "acquir": [13, 117, 1008], "angl": [13, 34, 98, 146, 241, 242, 243, 246, 247, 363, 395, 508, 514, 516, 519, 520, 522, 523, 525, 627, 628, 629, 630, 631, 632, 633, 640, 641, 642, 655, 659, 660, 661, 662, 663, 669, 951, 952, 976, 991, 996], "Such": [13, 149, 154, 175, 185, 197, 259, 338, 378, 379, 394, 395, 397, 532, 533, 633, 944, 954, 957, 964, 970, 987, 1006], "ct": [13, 157, 238, 391, 442, 444, 445], "cellular": 13, "materi": [13, 379, 538, 539, 558, 862, 863, 973], "haar": 13, "wavelet": [13, 105, 395], "sparsiti": [13, 81, 164, 174, 189, 211, 212, 215, 231, 339, 353, 378, 392, 395, 397, 399, 478, 479, 504, 508, 514, 515, 516, 517, 520, 522, 523, 524, 623, 629, 634, 635, 653, 655, 697, 698, 699, 842, 848, 853, 857, 947, 950, 957, 964, 983, 988, 998], "oper": [13, 19, 157, 164, 231, 249, 253, 263, 272, 340, 353, 354, 363, 364, 366, 368, 371, 376, 378, 379, 381, 384, 386, 394, 395, 397, 398, 399, 426, 439, 446, 453, 459, 460, 461, 462, 481, 510, 511, 518, 528, 529, 543, 549, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 593, 598, 601, 607, 612, 620, 635, 666, 670, 678, 682, 683, 684, 702, 749, 756, 757, 763, 764, 790, 799, 802, 813, 814, 836, 840, 845, 855, 856, 870, 877, 880, 911, 922, 927, 950, 957, 964, 969, 974, 978, 987, 1000, 1002, 1003, 1004, 1006, 1007], "fidel": 13, "penal": [13, 30, 81, 129, 185, 189, 196, 212, 214, 333, 390, 392, 395, 399, 447, 448, 449, 450, 451, 452, 453, 454, 456, 624, 630, 638, 640, 653, 681, 691, 709, 761, 768, 846, 872, 879, 950, 954, 956, 958, 968, 969, 987], "account": [13, 97, 104, 154, 161, 166, 167, 214, 256, 285, 333, 335, 339, 353, 362, 366, 378, 379, 384, 390, 393, 394, 395, 397, 398, 441, 544, 545, 604, 605, 607, 609, 610, 626, 650, 656, 680, 683, 703, 704, 705, 713, 718, 731, 758, 759, 762, 763, 773, 777, 789, 946, 948, 952, 954, 955, 956, 957, 968, 970, 1001, 1003, 1004, 1005, 1008, 1009, 1011], "call": [13, 17, 46, 48, 50, 54, 70, 91, 115, 121, 143, 149, 153, 155, 157, 158, 167, 184, 196, 197, 214, 235, 237, 238, 256, 257, 265, 270, 271, 278, 308, 309, 338, 339, 340, 347, 353, 354, 355, 361, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 388, 390, 391, 392, 393, 394, 395, 397, 398, 400, 402, 411, 419, 422, 425, 427, 428, 429, 430, 431, 432, 435, 438, 440, 442, 443, 446, 447, 452, 459, 460, 461, 465, 468, 469, 472, 474, 480, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 553, 562, 563, 565, 566, 568, 574, 579, 584, 585, 587, 588, 591, 594, 597, 604, 606, 608, 609, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 666, 667, 668, 669, 670, 671, 672, 674, 676, 680, 707, 717, 730, 746, 749, 753, 754, 755, 756, 766, 770, 771, 772, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 822, 824, 829, 830, 831, 832, 833, 837, 838, 840, 842, 843, 850, 853, 856, 861, 862, 863, 864, 865, 869, 872, 873, 874, 875, 877, 878, 881, 883, 899, 903, 908, 909, 922, 925, 928, 938, 943, 944, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 966, 967, 969, 970, 974, 978, 980, 984, 987, 988, 989, 991, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 55, 60, 61, 65, 67, 78, 84, 95, 97, 109, 110, 111, 112, 164, 167, 172, 183, 185, 199, 212, 219, 221, 224, 228, 234, 239, 242, 243, 244, 247, 253, 256, 265, 282, 283, 285, 289, 298, 300, 303, 306, 307, 308, 324, 338, 339, 349, 353, 354, 355, 359, 360, 361, 362, 363, 366, 367, 368, 373, 374, 377, 378, 380, 386, 387, 389, 390, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 447, 452, 453, 456, 459, 460, 461, 465, 480, 488, 489, 490, 491, 492, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 525, 530, 531, 532, 533, 536, 537, 540, 568, 580, 581, 587, 588, 612, 614, 616, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 680, 681, 684, 693, 695, 710, 712, 718, 749, 753, 754, 766, 768, 770, 771, 801, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 829, 834, 838, 840, 853, 856, 868, 872, 873, 874, 875, 876, 877, 878, 880, 881, 892, 908, 909, 911, 921, 923, 929, 944, 946, 949, 951, 952, 954, 956, 959, 960, 964, 967, 968, 969, 973, 974, 975, 976, 978, 980, 983, 984, 986, 988, 989, 991, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "computation": [13, 77, 95, 121, 129, 149, 338, 352, 389, 390, 391, 394, 395, 397, 400, 515, 609, 610, 648, 738, 772, 774, 775, 776, 785, 796, 950, 951, 953, 961, 962, 966, 988, 991, 1000], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 67, 78, 93, 96, 97, 107, 122, 127, 132, 140, 147, 148, 159, 164, 168, 178, 182, 184, 187, 194, 211, 216, 219, 223, 224, 228, 239, 243, 249, 251, 253, 272, 274, 292, 300, 302, 306, 308, 318, 322, 337, 339, 341, 349, 361, 363, 378, 388, 392, 393, 395, 399, 416, 422, 425, 427, 465, 481, 489, 491, 492, 499, 502, 518, 526, 527, 530, 541, 558, 559, 565, 566, 567, 568, 583, 585, 587, 588, 592, 599, 602, 616, 620, 635, 649, 665, 666, 667, 668, 669, 680, 713, 718, 754, 763, 772, 775, 785, 787, 797, 799, 808, 811, 815, 830, 834, 842, 843, 845, 849, 850, 851, 853, 857, 858, 859, 860, 861, 862, 863, 872, 874, 875, 877, 878, 880, 943, 948, 951, 954, 956, 957, 960, 969, 993], "l2": [13, 30, 40, 81, 84, 164, 174, 181, 187, 196, 207, 211, 212, 214, 215, 257, 276, 298, 317, 338, 339, 367, 374, 376, 390, 392, 395, 398, 420, 424, 428, 435, 501, 515, 517, 524, 535, 538, 539, 542, 566, 567, 568, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 649, 653, 655, 658, 663, 664, 665, 710, 725, 736, 737, 753, 754, 755, 785, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 830, 831, 845, 853, 859, 872, 873, 877, 878, 879, 881, 883, 937, 943, 947, 950, 952, 957, 958, 964, 968, 970, 987, 989, 998, 1000, 1001, 1003, 1005], "produc": [13, 25, 26, 44, 56, 69, 98, 122, 123, 124, 125, 262, 295, 316, 349, 361, 362, 366, 367, 370, 378, 379, 390, 391, 394, 395, 397, 419, 422, 430, 496, 513, 536, 540, 558, 565, 570, 571, 609, 610, 774, 775, 776, 783, 788, 791, 794, 838, 848, 874, 877, 945, 946, 950, 952, 953, 954, 957, 960, 961, 965, 967, 968, 969, 980, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 59, 61, 65, 72, 79, 93, 95, 100, 107, 110, 112, 115, 117, 127, 162, 164, 167, 168, 172, 174, 197, 215, 218, 232, 243, 256, 259, 265, 266, 298, 300, 308, 316, 320, 325, 329, 330, 333, 336, 338, 349, 353, 362, 363, 367, 369, 370, 373, 376, 378, 388, 390, 391, 392, 395, 397, 398, 400, 442, 489, 496, 510, 515, 517, 518, 524, 526, 558, 565, 566, 568, 587, 615, 623, 624, 650, 653, 654, 667, 671, 700, 707, 720, 721, 723, 728, 765, 790, 805, 806, 832, 833, 874, 876, 877, 882, 883, 943, 944, 946, 948, 950, 951, 953, 960, 961, 964, 968, 969, 985, 987, 988, 996, 999, 1001, 1002, 1006, 1008, 1009], "central": [13, 198, 390, 960, 974], "emmanuel": [13, 65, 996, 1003, 1004, 1005], "gouillart": [13, 65, 996], "nsup": 13, "ndimag": [13, 46, 47, 54, 295, 988], "_weight": [13, 214], "orig": 13, "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 59, 61, 65, 80, 102, 119, 121, 138, 186, 187, 214, 220, 231, 234, 276, 398, 944, 950, 1003], "hstack": [13, 33, 34, 42, 131, 142, 222, 233, 251, 328, 394, 832], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 138, 329], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 299, 328, 612], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 121, 131, 276, 339, 813, 814], "mask": [13, 42, 65, 117, 196, 204, 254, 255, 317, 374, 378, 391, 397, 447, 452, 538, 539, 558, 562, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 606, 607, 626, 648, 772, 775, 776, 785, 926, 944, 996, 999, 1001, 1002, 1004, 1006], "logical_and": [13, 122], "proj_oper": 13, "coo_matrix": [13, 182, 430, 562, 563, 925, 928], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 57, 61, 103, 113, 126, 128, 141, 175, 219, 220, 225, 231, 270, 288, 307, 308, 317, 318, 332, 333, 339, 345, 346, 374, 521, 680, 681, 691, 732, 756, 761, 864, 865, 867, 868, 869, 966, 980, 996, 1007, 1008], "gaussian_filt": [13, 46, 47, 54, 988], "sigma": [13, 46, 47, 54, 79, 103, 122, 254, 256, 387, 392, 395, 397, 591, 626, 948, 950, 952, 956, 959, 988], "logical_xor": [13, 153, 331], "binary_eros": 13, "128": [13, 14, 196, 353, 513], "proj": [13, 626], "randn": [13, 33, 34, 39, 54, 64, 65, 79, 80, 98, 103, 125, 141, 149, 153, 168, 180, 185, 190, 191, 195, 209, 210, 213, 242, 245, 246, 251, 263, 265, 266, 270, 276, 282, 283, 307, 308, 324, 330, 331, 333, 335, 367, 370, 620, 647, 649, 655, 792, 875, 878], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 57, 70, 73, 77, 81, 86, 103, 118, 119, 121, 122, 134, 139, 140, 144, 146, 147, 166, 174, 184, 196, 198, 214, 215, 243, 244, 246, 249, 253, 256, 257, 258, 260, 262, 265, 270, 271, 272, 280, 295, 299, 306, 308, 316, 325, 333, 356, 361, 367, 368, 374, 376, 377, 378, 384, 385, 388, 391, 392, 395, 397, 398, 399, 400, 416, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 470, 478, 479, 481, 492, 518, 544, 545, 552, 570, 571, 574, 579, 583, 586, 619, 620, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 649, 650, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 682, 689, 703, 716, 760, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 833, 834, 853, 872, 874, 877, 915, 953, 954, 957, 958, 962, 969, 970, 974, 975, 976, 978, 980, 983, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "lassocv": [13, 129, 135, 166, 185, 397, 399, 628, 629, 631, 632, 633, 640, 661, 950, 984, 996, 999, 1003, 1006, 1007, 1009, 1010], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 57, 81, 88, 95, 98, 153, 156, 164, 174, 187, 212, 215, 228, 233, 265, 280, 288, 295, 314, 325, 331, 400, 612, 622, 630, 640, 649, 661, 677, 683, 816, 824, 834, 848, 852, 945, 950, 954, 964, 1003, 1008], "133": [13, 55, 110, 300, 304], "wspace": [13, 14, 39, 44, 45, 61, 79, 95, 110, 112, 167, 196, 214, 225, 241, 243, 244, 247, 281, 289, 314, 322], "580": [13, 15, 289, 290, 813, 814], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 71, 94, 371, 389, 398, 512, 515, 521, 524, 990, 991, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "latentdirichletalloc": [14, 355, 370, 395, 974, 1001, 1003, 1010, 1011], "corpu": [14, 339, 340, 361, 395, 565, 566, 567, 568, 989, 997], "frobeniu": [14, 98, 422, 425, 437, 447, 448, 449, 450, 451, 452, 453, 454, 508, 514, 515, 517, 522, 523, 524, 950, 1003], "kullback": [14, 217, 395, 515, 517, 524, 669, 951, 1003], "leibler": [14, 217, 395, 515, 517, 524, 669, 951, 1003], "diverg": [14, 93, 107, 121, 164, 217, 222, 281, 515, 517, 524, 669, 829, 951, 953, 954, 959, 961, 1003, 1004, 1009], "probabilist": [14, 27, 30, 81, 93, 107, 148, 149, 152, 156, 159, 164, 338, 378, 388, 396, 397, 416, 451, 454, 509, 511, 512, 518, 536, 565, 566, 587, 599, 620, 622, 653, 679, 716, 772, 795, 840, 874, 875, 877, 878, 947, 948, 950, 953, 954, 959, 964, 969, 974, 978, 996, 999, 1003], "semant": [14, 338, 339, 378, 521, 989, 990, 991, 998], "runnabl": [14, 369, 370], "coupl": [14, 52, 53, 218, 360, 361, 371, 387, 388, 390, 399, 566, 878, 943, 969], "ten": [14, 19, 110, 146, 218, 247, 361, 363, 397, 497, 877, 1005], "polynomi": [14, 161, 164, 171, 173, 174, 196, 202, 215, 236, 256, 270, 308, 309, 322, 329, 332, 358, 362, 430, 468, 597, 616, 617, 618, 620, 649, 740, 749, 750, 799, 834, 843, 845, 848, 852, 872, 874, 875, 876, 877, 878, 949, 969, 976, 991, 1008, 1009], "lda": [14, 34, 93, 107, 164, 285, 349, 363, 386, 481, 513, 518, 526, 527, 822, 974, 976, 990, 991, 1001], "proport": [14, 26, 40, 145, 182, 196, 203, 209, 225, 259, 283, 286, 335, 353, 361, 388, 390, 392, 394, 395, 397, 398, 417, 418, 447, 452, 492, 526, 527, 532, 534, 536, 537, 538, 539, 540, 541, 560, 561, 565, 568, 604, 609, 635, 636, 643, 644, 645, 651, 652, 653, 655, 673, 688, 773, 774, 775, 776, 788, 791, 799, 819, 830, 831, 872, 873, 874, 877, 878, 880, 882, 884, 886, 898, 943, 953, 954, 957, 960, 968, 969, 970, 1001], "391": [14, 673], "tf": [14, 19, 229, 338, 339, 340, 361, 395, 498, 521, 565, 566, 567, 568, 812, 820, 845, 943, 952, 956, 964, 974, 989], "idf": [14, 19, 229, 338, 339, 340, 361, 395, 498, 521, 565, 566, 567, 568, 812, 820, 845, 943, 952, 956, 964, 989, 996], "320": [14, 182, 215, 361, 943, 968, 996], "307": 14, "081": [14, 191, 215, 962], "272": [14, 94, 107], "minibatchnmf": [14, 355, 395, 1010], "batch_siz": [14, 19, 42, 63, 95, 98, 99, 339, 395, 427, 511, 513, 514, 515, 516, 523, 829, 830, 831, 912, 913, 997, 1004, 1007, 1009, 1010], "270": [14, 314], "066": [14, 254, 625], "ensta": [14, 17, 37, 48, 60, 196, 214, 218, 257, 259, 338, 339, 340], "chyi": [14, 999, 1000, 1001, 1002, 1003], "kwei": [14, 999, 1000, 1001, 1002, 1003], "yau": [14, 999, 1000, 1001, 1002, 1003], "chyikwei": 14, "tfidfvector": [14, 19, 69, 257, 338, 361, 395, 398, 466, 565, 566, 567, 996, 998, 1004, 1005, 1006, 1009, 1010], "countvector": [14, 317, 340, 361, 370, 391, 395, 398, 466, 513, 559, 566, 567, 568, 989, 996, 998, 1001, 1004, 1005, 1006, 1007, 1008, 1009], "fetch_20newsgroup": [14, 19, 69, 257, 317, 338, 339, 340, 361, 466, 989, 1001, 1006], "n_top_word": 14, "init": [14, 42, 45, 57, 58, 60, 63, 167, 176, 217, 218, 220, 221, 222, 244, 276, 339, 368, 373, 390, 395, 397, 422, 425, 427, 429, 431, 437, 438, 515, 517, 524, 525, 536, 537, 609, 610, 667, 669, 671, 822, 951, 996, 1005, 1008, 1010, 1011], "nndsvda": [14, 395, 515, 517, 524, 1005, 1008], "plot_top_word": 14, "feature_nam": [14, 19, 106, 116, 123, 126, 146, 166, 167, 168, 169, 205, 235, 279, 298, 306, 307, 308, 322, 338, 344, 359, 361, 370, 391, 467, 468, 469, 473, 477, 478, 479, 481, 482, 487, 559, 608, 609, 884, 885, 886, 962, 970], "flatten": [14, 32, 220, 230, 254, 302, 322, 334, 371, 479, 546, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 822], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 121, 123, 168, 169, 196, 214, 258, 306, 313, 314, 338, 339, 361, 962], "top_featur": 14, "barh": [14, 123, 161, 162, 166, 168, 169, 238, 338, 339, 340], "fontdict": [14, 39], "invert_yaxi": [14, 162, 340], "labels": [14, 302], "set_vis": [14, 129, 280, 286, 298], "filter": [14, 46, 47, 202, 214, 254, 256, 278, 338, 367, 369, 371, 374, 389, 390, 398, 426, 465, 466, 480, 565, 568, 572, 573, 574, 575, 749, 808, 901, 921, 956, 957, 986, 989, 1006], "useless": [14, 118, 259, 371, 399, 492, 505, 635, 688, 950, 964, 1005], "earli": [14, 44, 61, 108, 110, 118, 133, 164, 174, 215, 307, 378, 397, 420, 424, 427, 441, 473, 481, 492, 497, 513, 514, 515, 516, 523, 530, 531, 536, 537, 538, 539, 548, 604, 633, 643, 644, 645, 653, 655, 669, 799, 830, 831, 928, 951, 957, 964, 973, 975, 978, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011], "strip": [14, 214, 339, 353, 360, 361, 473], "header": [14, 69, 257, 338, 339, 361, 364, 398, 465, 466, 772, 775, 776, 785], "footer": [14, 69, 257, 338, 339, 361, 465, 466], "repli": [14, 338, 365, 366, 368], "common": [14, 17, 19, 98, 143, 146, 164, 165, 170, 251, 263, 308, 338, 340, 347, 353, 356, 360, 366, 367, 373, 376, 377, 380, 381, 387, 388, 389, 390, 391, 394, 396, 399, 400, 443, 445, 473, 567, 609, 630, 649, 650, 721, 728, 744, 786, 796, 799, 834, 836, 844, 845, 846, 851, 853, 857, 858, 860, 861, 862, 863, 911, 943, 944, 950, 957, 960, 964, 969, 970, 975, 978, 980, 991, 996, 1004, 1006, 1007, 1011], "english": [14, 19, 69, 338, 339, 340, 370, 398, 565, 566, 568, 974, 975, 989, 1009], "occur": [14, 69, 196, 214, 349, 366, 367, 373, 379, 387, 390, 392, 394, 398, 485, 486, 549, 558, 565, 567, 568, 604, 648, 771, 772, 775, 776, 785, 795, 796, 797, 800, 897, 954, 956, 964, 989, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 257, 317, 338, 339, 565, 568, 1007], "min_df": [14, 19, 69, 257, 317, 338, 339, 398, 565, 568, 996, 998, 1007], "max_featur": [14, 31, 114, 124, 233, 253, 268, 308, 397, 399, 532, 533, 534, 535, 536, 537, 540, 541, 542, 565, 568, 574, 880, 881, 882, 883, 943, 950, 996, 998, 999, 1003, 1004, 1007, 1010], "stop_word": [14, 19, 338, 339, 398, 565, 566, 568], "tfidf": [14, 69, 317, 398, 568, 989], "tf_vector": 14, "beta_loss": [14, 515, 517, 524, 1003], "alpha_w": [14, 395, 515, 517, 524, 1009], "00005": 14, "alpha_h": [14, 395, 515, 517, 524, 1009], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 166, 168, 309, 338, 339, 340, 361, 367, 378, 391, 398, 406, 410, 412, 421, 422, 424, 425, 427, 442, 445, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 964, 1009, 1010, 1011], "solver": [14, 30, 33, 34, 46, 65, 94, 164, 174, 185, 187, 188, 189, 196, 198, 211, 212, 214, 215, 292, 293, 294, 295, 338, 371, 376, 381, 386, 390, 402, 430, 440, 449, 450, 456, 479, 510, 512, 517, 518, 521, 524, 526, 623, 624, 625, 629, 630, 635, 636, 637, 638, 639, 640, 643, 645, 646, 647, 649, 651, 653, 657, 658, 661, 664, 665, 666, 668, 670, 672, 763, 785, 799, 804, 807, 830, 831, 874, 875, 876, 877, 878, 948, 951, 954, 958, 968, 969, 974, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mu": [14, 79, 80, 94, 256, 395, 403, 451, 453, 454, 457, 458, 517, 524, 948, 950, 1003, 1006], "mbnmf": 14, "learning_method": [14, 370, 513], "learning_offset": [14, 513], "tf_feature_nam": 14, "827": [14, 15, 301, 304], "plot_topics_extraction_with_nmf_lda": [14, 15], "041": 15, "execut": [15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 161, 163, 170, 173, 185, 215, 223, 231, 239, 248, 261, 272, 275, 290, 296, 304, 311, 319, 336, 341, 348, 354, 366, 371, 384, 390, 395, 401, 422, 439, 772, 785, 794, 795, 796, 797, 800, 818, 964, 967, 981, 989, 998, 1001, 1004], "auto_examples_appl": 15, "real": [15, 31, 69, 73, 77, 79, 108, 133, 152, 166, 221, 234, 250, 262, 270, 280, 299, 300, 340, 353, 356, 359, 360, 363, 369, 371, 374, 376, 377, 378, 387, 388, 390, 392, 394, 395, 397, 398, 447, 466, 467, 470, 471, 472, 473, 474, 477, 478, 481, 487, 497, 528, 529, 530, 532, 533, 534, 535, 536, 537, 541, 542, 569, 571, 572, 573, 574, 575, 576, 577, 676, 680, 699, 703, 727, 730, 732, 760, 768, 769, 798, 799, 830, 831, 874, 875, 876, 877, 878, 880, 881, 883, 944, 945, 946, 951, 954, 956, 958, 959, 960, 970, 973, 991, 996, 1009], "svm_gui": [15, 16, 987], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 80, 167, 317, 338, 339, 340, 361, 371, 389, 390, 392, 395, 765, 766, 770, 803, 884, 954, 955, 961, 974, 989], "frontend": [16, 371], "mainli": [16, 27, 53, 113, 149, 265, 353, 367, 388, 588, 956], "intend": [16, 57, 99, 197, 338, 366, 367, 372, 376, 394, 446, 559, 650, 676, 842, 843, 853, 870, 950, 954, 958, 965], "didact": [16, 366, 975], "region": [16, 25, 36, 47, 49, 53, 55, 65, 67, 130, 156, 164, 166, 196, 214, 225, 229, 230, 247, 301, 325, 363, 372, 378, 390, 397, 400, 426, 428, 434, 440, 564, 951, 954, 957, 960, 968, 970, 988], "induc": [16, 26, 55, 166, 187, 189, 194, 197, 211, 231, 340, 387, 389, 395, 397, 400, 427, 516, 520, 530, 534, 535, 536, 537, 541, 542, 543, 620, 701, 731, 846, 880, 881, 882, 883, 947, 954, 968, 987], "mous": [16, 360], "button": [16, 366, 373, 987], "prettenho": 16, "tkagg": 16, "backend": [16, 354, 378, 446, 870, 922, 924, 954, 999, 1004, 1005, 1006, 1007], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 121, 123, 124, 129, 204, 257, 309, 356, 368, 369, 374, 378, 402, 416, 418, 420, 424, 425, 437, 510, 513, 514, 516, 523, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 546, 547, 555, 557, 559, 579, 604, 607, 609, 625, 627, 628, 631, 632, 633, 635, 641, 642, 646, 648, 653, 657, 669, 676, 731, 743, 775, 776, 808, 809, 810, 812, 820, 832, 838, 846, 874, 875, 876, 877, 878, 880, 881, 882, 883, 888, 903, 904, 906, 917, 943, 944, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 996, 997, 1001, 1011], "y_min": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 230, 292, 300, 318, 329, 330, 612, 614], "y_max": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 214, 230, 292, 300, 318, 329, 330, 612, 614], "x_min": [16, 31, 34, 52, 57, 89, 112, 118, 122, 127, 138, 151, 185, 230, 292, 300, 318, 329, 330], "x_max": [16, 31, 34, 52, 57, 89, 112, 118, 127, 138, 151, 230, 292, 300, 318, 329, 330], "notifi": [16, 549, 550, 551, 977, 994, 1006], "regist": [16, 338, 371, 922, 924], "surfac": [16, 108, 133, 164, 188, 205, 321, 322, 342, 348, 397, 481, 530, 534, 541, 739, 880, 886, 948, 953, 968, 969, 970], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 172, 332, 430, 512, 616, 617, 620, 750, 752, 874, 875, 876, 877, 878, 952, 969], "kernel_map": 16, "hasattr": [16, 44, 55, 61, 81, 118, 214, 229, 292, 300, 338, 378, 916, 917, 1006], "decision_surfac": 16, "delta": [16, 393, 430], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 116, 135, 164, 249, 255, 257, 260, 272, 333, 378, 394, 400, 479, 544, 604, 636, 642, 689, 772, 775, 776, 785, 799, 877, 943, 950, 954, 1003, 1004, 1005], "docstr": [16, 366, 367, 371, 378, 450, 676, 899, 943, 954, 957, 958, 968, 996, 1003, 1004, 1009, 1010], "set_ytick": [16, 31, 34, 43, 59, 63, 106, 127, 161, 162, 169, 187, 212, 241, 267, 292, 294, 300, 301, 322, 340], "set_xlim": [16, 31, 42, 59, 74, 79, 91, 115, 127, 129, 162, 194, 196, 201, 230, 241, 260, 262, 263, 281, 292, 298, 300, 301, 302, 307, 334], "attributeerror": [16, 391, 536, 553, 916, 988, 1005, 1006, 1008], "get_tk_widget": 16, "pack": [16, 374, 1004], "fill": [16, 34, 118, 129, 135, 168, 251, 281, 344, 378, 391, 395, 492, 504, 515, 517, 524, 564, 607, 884, 886, 944, 957, 970], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 65, 101, 105, 113, 122, 150, 180, 206, 281, 286, 289, 307, 308, 388, 390, 391, 396, 402, 430, 443, 498, 510, 513, 592, 593, 599, 618, 734, 741, 751, 830, 831, 849, 948, 950, 952, 956, 957, 958, 967, 968, 969, 987], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 129, 214, 366, 371, 390, 513, 623, 629, 951, 975, 977, 996, 1001, 1002, 1004, 1009, 1010, 1011], "isinst": [16, 118, 214, 378], "lineset": 16, "support_vector": [16, 323], "place": [16, 59, 226, 235, 280, 353, 364, 366, 367, 370, 372, 379, 398, 400, 420, 424, 459, 460, 461, 492, 558, 567, 605, 607, 608, 743, 756, 770, 933, 934, 974, 996, 1003, 1006, 1007, 1009], "circl": [16, 59, 100, 127, 128, 138, 222, 232, 283, 286, 293, 298, 300, 315, 346, 362, 369, 373, 390, 430, 440, 491, 499, 739, 969], "dash": [16, 33, 79, 110, 121, 131, 149, 152, 154, 167, 183, 188, 191, 197, 198, 205, 208, 209, 234, 256, 266, 327, 331, 968], "bone": [16, 209, 335], "rais": [16, 197, 232, 259, 302, 309, 366, 367, 369, 370, 371, 374, 376, 378, 391, 394, 402, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 486, 510, 527, 536, 544, 550, 553, 565, 566, 568, 580, 594, 606, 607, 609, 612, 613, 648, 673, 675, 676, 678, 685, 687, 688, 689, 690, 702, 704, 705, 713, 731, 753, 757, 758, 759, 762, 763, 764, 770, 771, 772, 775, 776, 785, 795, 796, 797, 800, 805, 820, 822, 823, 828, 832, 837, 838, 846, 847, 851, 852, 853, 859, 875, 876, 877, 878, 887, 890, 892, 893, 895, 896, 913, 916, 938, 939, 940, 941, 954, 964, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "valueerror": [16, 232, 367, 371, 402, 446, 510, 553, 580, 594, 612, 648, 690, 805, 823, 832, 838, 852, 891, 895, 896, 939, 940, 941, 954, 964, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 229, 353, 354, 364, 366, 369, 371, 373, 381, 398, 485, 974, 989, 998], "anchor": [16, 267], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 164, 174, 188, 205, 215, 232, 259, 320, 322, 325, 330, 336, 489, 635, 636, 643, 645, 651, 652, 653, 654, 872, 874, 876, 877, 968, 969], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 369, 556, 559, 566, 635, 636, 643, 645, 653, 654, 655, 830, 831, 872, 964], "add_opt": 16, "action": [16, 309, 338, 365, 368, 369, 381, 964, 1006], "store": [16, 32, 53, 54, 69, 71, 80, 89, 143, 157, 172, 182, 185, 218, 226, 235, 246, 261, 265, 313, 340, 347, 353, 360, 361, 366, 367, 372, 373, 374, 376, 378, 391, 393, 395, 397, 398, 400, 401, 417, 419, 423, 428, 435, 447, 448, 451, 452, 453, 454, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 485, 511, 512, 518, 526, 527, 532, 533, 540, 546, 547, 566, 587, 588, 604, 608, 609, 612, 615, 626, 627, 631, 637, 638, 639, 640, 643, 644, 650, 652, 653, 654, 655, 665, 666, 667, 669, 674, 675, 677, 678, 756, 770, 771, 772, 785, 813, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 828, 844, 851, 853, 869, 892, 893, 925, 928, 944, 946, 950, 957, 966, 969, 970, 974, 980, 989, 993, 996, 997, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "dest": 16, "dump": [16, 17, 384, 464, 813, 814], "argv": [16, 229], "opt": [16, 364, 367], "arg": [16, 293, 378, 395, 397, 404, 548, 549, 550, 551, 552, 553, 554, 594, 676, 837, 950, 956, 957], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 276, 317, 376], "classic": [17, 191, 221, 234, 241, 247, 363, 392, 394, 395, 422, 425, 427, 437, 469, 477, 481, 487, 609, 610, 882, 883, 948, 950, 956, 983, 996, 997, 1001, 1010], "graph": [17, 25, 39, 44, 46, 65, 66, 157, 217, 253, 276, 278, 316, 353, 366, 368, 378, 387, 392, 401, 420, 423, 424, 430, 431, 435, 440, 441, 449, 450, 456, 488, 562, 563, 665, 668, 669, 672, 757, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 828, 868, 951, 954, 957, 959, 967, 970, 974, 978, 985, 988, 996, 1003, 1004, 1006, 1009, 1011], "vertex": [17, 26, 431, 1009], "en": [17, 24, 373, 508, 514, 572, 613, 641, 645, 648, 662, 663, 672, 681, 815, 816, 821, 822, 823, 824, 851, 866, 880, 881, 950, 954, 969, 970], "wiki": [17, 24, 371, 373, 572, 613, 645, 648, 672, 681, 815, 816, 821, 822, 823, 824, 851, 866, 880, 881, 950, 970], "eigenvector_centr": 17, "webpag": [17, 172, 366], "pagerank": 17, "insid": [17, 19, 26, 167, 198, 256, 315, 325, 355, 360, 361, 367, 371, 390, 398, 565, 566, 568, 852, 922, 961, 978], "accord": [17, 24, 26, 37, 49, 77, 121, 146, 150, 179, 196, 214, 229, 306, 339, 349, 366, 367, 376, 377, 378, 379, 387, 390, 392, 394, 395, 397, 398, 400, 416, 428, 430, 434, 438, 440, 443, 447, 481, 493, 494, 495, 502, 507, 509, 512, 513, 515, 517, 527, 530, 531, 538, 539, 540, 543, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 618, 619, 621, 622, 626, 635, 636, 647, 657, 668, 672, 710, 754, 755, 772, 773, 774, 775, 776, 778, 779, 780, 785, 794, 808, 809, 810, 811, 812, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 836, 843, 851, 862, 864, 865, 872, 873, 874, 875, 877, 878, 917, 948, 950, 954, 956, 957, 964, 967, 968, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "tradit": [17, 196, 211, 339, 355, 388, 397, 398, 609, 671, 950, 953, 978], "power_iter": 17, "martinsson": [17, 512, 518, 909], "dbpedia": 17, "content": [17, 303, 338, 340, 361, 369, 371, 389, 398, 463, 480, 485, 486, 565, 566, 568, 648, 886, 963, 978, 989, 997, 1006], "bz2": [17, 485, 486], "bz2file": 17, "pprint": [17, 122, 257, 361, 904], "randomized_svd": [17, 374, 429, 431, 509, 518, 521, 523, 996, 997, 1002, 1009, 1010, 1011], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 122, 161, 196, 294, 308, 352, 356, 368, 377, 775, 776, 955, 972, 975, 978, 981, 991, 1004, 1009, 1010], "wait": [17, 366, 369, 378, 643, 644, 645, 653, 655, 1008], "wb": 17, "index_map": 17, "setdefault": [17, 887], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 69, 257, 278, 306, 366, 373, 400, 406, 421, 422, 424, 425, 427, 442, 445, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 616, 617, 618, 619, 665, 666, 797, 817, 822, 825, 829, 833, 839, 864, 865, 1002, 1003, 1009], "get_redirect": 17, "transit": [17, 369, 1007], "malform": [17, 1000], "1000000": [17, 513], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 65, 81, 98, 105, 116, 122, 166, 192, 221, 228, 293, 298, 303, 325, 333, 338, 361, 367, 369, 377, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 406, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 498, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 600, 604, 605, 606, 607, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 929, 935, 943, 949, 957, 958, 970, 978, 984, 985, 987, 988, 1008, 1009, 1010, 1011], "break": [17, 39, 46, 69, 80, 164, 185, 202, 243, 309, 314, 320, 336, 338, 340, 366, 367, 369, 371, 377, 390, 447, 489, 616, 749, 753, 756, 770, 846, 853, 857, 874, 877, 950, 953, 962, 964, 969, 975, 996, 997, 1003, 1004, 1006, 1008], "get_adjacency_matrix": 17, "resolv": [17, 365, 366, 369, 373, 379, 398, 430, 440, 668, 672, 909, 944, 954, 1003, 1005, 1006, 1009], "lil_matrix": 17, "float32": [17, 121, 220, 295, 354, 361, 366, 367, 534, 535, 536, 537, 540, 541, 542, 543, 570, 571, 617, 618, 635, 738, 838, 880, 881, 882, 883, 890, 930, 931, 932, 970, 980, 989, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "del": [17, 371, 1008, 1009], "convert": [17, 34, 46, 48, 65, 70, 98, 154, 169, 196, 217, 237, 242, 243, 246, 247, 289, 353, 360, 374, 376, 378, 384, 398, 419, 422, 423, 425, 427, 428, 429, 430, 437, 442, 443, 473, 511, 518, 530, 531, 534, 535, 536, 537, 540, 541, 542, 543, 549, 558, 559, 565, 566, 567, 568, 570, 571, 583, 604, 605, 606, 607, 623, 629, 635, 636, 637, 639, 643, 645, 647, 651, 653, 654, 655, 669, 676, 753, 828, 837, 838, 840, 844, 846, 847, 848, 850, 872, 880, 881, 882, 883, 890, 892, 893, 915, 939, 940, 943, 950, 951, 952, 954, 964, 965, 969, 970, 989, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008], "csr": [17, 340, 353, 360, 361, 374, 376, 378, 398, 401, 422, 425, 427, 428, 437, 474, 485, 500, 530, 531, 534, 535, 541, 542, 543, 607, 635, 669, 676, 690, 743, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 828, 836, 840, 842, 844, 845, 848, 851, 853, 855, 856, 857, 859, 862, 865, 880, 881, 882, 883, 888, 892, 893, 915, 919, 929, 930, 931, 932, 933, 934, 935, 957, 964, 968, 996, 997, 1002, 1004, 1005, 1011], "tocsr": 17, "convers": [17, 122, 187, 338, 349, 355, 360, 366, 367, 373, 376, 384, 398, 549, 828, 837, 845, 892, 893, 940, 951, 975, 978, 1004, 1005, 1006, 1009], "5m": 17, "ram": [17, 53, 355, 397, 864, 865, 956, 969, 989, 1002, 1008], "5000000": 17, "strongest": [17, 189], "highest": [17, 19, 26, 81, 142, 146, 254, 256, 267, 308, 338, 366, 376, 388, 394, 397, 399, 416, 532, 534, 541, 569, 572, 573, 575, 576, 577, 580, 581, 583, 612, 614, 701, 731, 767, 770, 772, 775, 776, 785, 869, 880, 911, 943, 950, 954, 955, 958, 968, 970, 1008], "centrality_scor": 17, "networkx": [17, 374], "copyright": [17, 81], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 363], "dan": [17, 996, 1000, 1001, 1002, 1004, 1005], "schult": 17, "dschult": 17, "pieter": [17, 1002, 1003, 1010], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 195, 229, 260, 340, 387, 401, 423, 500, 501, 508, 514, 519, 525, 565, 568, 662, 663, 676, 815, 816, 819, 821, 823, 824, 950, 954], "indptr": [17, 276, 347, 1004], "dangl": 17, "isclos": 17, "guess": [17, 118, 394, 397, 398, 456, 509, 515, 517, 518, 524, 954, 968], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 56, 61, 77, 78, 79, 81, 84, 85, 96, 97, 98, 103, 105, 113, 149, 150, 156, 157, 166, 177, 180, 188, 190, 191, 203, 230, 242, 243, 245, 246, 260, 321, 323, 353, 367, 371, 374, 378, 387, 395, 398, 510, 515, 517, 524, 567, 568, 591, 623, 624, 627, 629, 630, 631, 634, 637, 638, 639, 640, 658, 659, 660, 661, 664, 736, 738, 845, 884, 910, 952, 956, 964, 968, 969, 988, 1005], "converg": [17, 60, 77, 78, 110, 120, 122, 149, 155, 158, 189, 198, 200, 204, 212, 244, 293, 294, 298, 314, 355, 374, 378, 387, 390, 395, 398, 400, 402, 419, 422, 425, 426, 427, 430, 432, 437, 438, 439, 440, 449, 450, 456, 459, 460, 461, 510, 512, 513, 514, 515, 516, 523, 530, 548, 587, 621, 622, 623, 624, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 645, 649, 651, 653, 655, 659, 660, 664, 665, 667, 668, 671, 672, 770, 771, 822, 830, 831, 867, 868, 874, 944, 949, 950, 951, 953, 958, 968, 996, 999, 1000, 1001, 1003, 1004, 1007, 1009, 1010, 1011], "l_inf": 17, "scores_max": 17, "err": [17, 84, 99], "6f": [17, 99, 261, 712, 768], "concern": [18, 36, 76, 83, 87, 93, 108, 140, 148, 160, 164, 171, 174, 216, 240, 246, 273, 277, 291, 297, 312, 320, 337, 342, 353, 367, 389, 951, 966], "modul": [18, 36, 37, 49, 53, 76, 83, 87, 93, 95, 108, 140, 148, 158, 160, 164, 165, 171, 174, 211, 216, 217, 240, 249, 273, 277, 291, 293, 294, 297, 312, 320, 337, 342, 345, 360, 361, 364, 365, 366, 367, 369, 370, 371, 373, 374, 376, 378, 380, 381, 387, 388, 389, 390, 393, 397, 398, 399, 401, 423, 480, 512, 555, 557, 636, 867, 901, 943, 948, 950, 952, 954, 955, 958, 960, 961, 964, 966, 968, 970, 971, 978, 983, 984, 989, 997, 998, 999, 1001, 1002, 1006, 1008, 1010], "demo": [18, 22, 36, 67, 164, 202, 246, 257, 265, 338, 339, 367, 387, 390, 398, 419, 420, 423, 425, 426, 428, 429, 431, 433, 436, 479, 488, 489, 490, 518, 680, 681, 693, 695, 712, 766, 768, 834, 853], "spectral": [18, 22, 36, 44, 46, 49, 67, 164, 218, 219, 366, 398, 427, 429, 430, 431, 440, 447, 448, 449, 450, 451, 452, 453, 454, 465, 488, 490, 568, 665, 666, 667, 668, 669, 672, 695, 768, 957, 967, 990, 991, 996, 997], "twenti": [19, 229, 363, 387, 390, 989], "comp": [19, 84, 85, 98, 106, 295, 317, 338, 339, 340, 361, 989], "window": [19, 317, 361, 366, 367, 368, 398, 974, 996, 999, 1003, 1007, 1009, 1010], "misc": [19, 53, 98, 257, 317, 338, 339, 340, 361, 988], "categori": [19, 44, 61, 69, 70, 119, 129, 166, 196, 204, 211, 234, 257, 293, 294, 300, 308, 317, 338, 339, 340, 360, 361, 374, 389, 390, 391, 397, 398, 400, 465, 473, 474, 480, 538, 539, 625, 635, 636, 646, 657, 718, 733, 734, 809, 846, 847, 944, 950, 951, 952, 956, 962, 980, 989, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "noth": [19, 69, 338, 339, 370, 519, 560, 565, 566, 568, 690, 836, 845, 893, 964], "frequenc": [19, 27, 149, 190, 196, 229, 307, 308, 338, 339, 340, 361, 369, 376, 388, 394, 395, 397, 398, 528, 534, 536, 537, 538, 541, 565, 566, 567, 568, 581, 635, 636, 641, 643, 645, 651, 652, 653, 662, 663, 802, 837, 846, 872, 874, 877, 880, 882, 898, 950, 951, 956, 964, 968, 970, 998, 1000, 1001, 1007], "dhillon": [19, 387, 429, 431, 488], "cut": [19, 46, 64, 65, 219, 369, 376, 387, 390, 430, 431, 440, 565, 568, 668, 672, 964], "minibatchkmean": [19, 36, 44, 50, 60, 67, 164, 339, 355, 390, 395, 419, 421, 425, 489, 754, 997, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011], "coclust": [19, 387, 429, 490], "4431": 19, "3177": 19, "1961": 19, "4388": 19, "talk": [19, 69, 257, 338, 339, 340, 356, 361, 378, 384, 978, 981, 989], "polit": [19, 338, 361, 365, 950, 955], "gun": [19, 361], "sci": [19, 69, 74, 338, 339, 340, 361, 376, 666, 670, 844, 951, 964, 989], "med": [19, 69, 265, 361, 964, 989], "geb": 19, "gordon": [19, 244, 1002, 1006, 1008, 1010], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1269": 19, "3558": 19, "soc": [19, 361, 989], "religion": [19, 257, 338, 339, 340, 361, 955, 989], "mideast": [19, 361], "alt": [19, 257, 317, 338, 339, 340, 361, 373, 989], "atheism": [19, 257, 317, 338, 339, 340, 361, 989], "god": [19, 338, 339, 989], "jesu": [19, 338, 339], "kent": 19, "belief": [19, 256, 829, 959], "christ": 19, "faith": [19, 155, 330], "moral": [19, 70, 338, 339, 635, 1004, 1008, 1009], "2201": 19, "2747": 19, "mac": [19, 317, 361, 366, 684, 954], "hardwar": [19, 317, 340, 353, 361, 364, 972, 1010, 1011], "pc": [19, 303, 317, 340, 361], "voltag": 19, "dsp": 19, "stereo": 19, "ship": [19, 129, 162, 344, 354, 364, 381, 398, 950, 996, 1005], "1773": 19, "2620": 19, "rec": [19, 340, 361, 618], "motorcycl": [19, 361], "auto": [19, 33, 44, 45, 48, 56, 57, 59, 91, 95, 153, 179, 217, 218, 219, 220, 222, 234, 236, 276, 279, 284, 307, 308, 309, 310, 321, 322, 328, 331, 332, 340, 360, 361, 366, 367, 397, 400, 401, 420, 423, 424, 425, 427, 428, 430, 435, 437, 440, 473, 485, 486, 512, 518, 521, 526, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 570, 571, 574, 579, 584, 585, 606, 608, 609, 610, 612, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 649, 650, 651, 657, 658, 659, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 716, 775, 776, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 830, 831, 846, 847, 864, 865, 869, 874, 875, 876, 877, 878, 880, 881, 882, 883, 908, 909, 923, 945, 948, 950, 951, 957, 974, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "forsal": [19, 340, 361], "bike": 19, "car": [19, 196], "dod": 19, "ride": 19, "helmet": 19, "bmw": 19, "201": [19, 121, 363, 561], "1175": 19, "turkish": 19, "armenia": 19, "armenian": 19, "turk": 19, "petch": 19, "sera": 19, "zuma": 19, "argic": 19, "gvg47": 19, "spectralcoclust": [19, 21, 387, 429, 998, 1003, 1007], "v_measure_scor": [19, 37, 38, 49, 57, 339, 390, 693, 711, 712, 732, 954, 1005], "number_norm": 19, "token": [19, 340, 353, 361, 398, 513, 565, 566, 567, 568, 996, 1004, 1008], "placehold": [19, 369, 604, 605, 606, 607, 786, 787, 790, 791, 944], "begin": [19, 149, 251, 258, 274, 309, 338, 349, 366, 370, 371, 378, 387, 390, 397, 530, 531, 536, 538, 539, 643, 644, 653, 654, 655, 943, 950, 954, 964, 966, 968, 1004, 1010, 1011], "By": [19, 45, 95, 126, 175, 265, 298, 306, 338, 354, 366, 371, 372, 378, 390, 391, 393, 394, 395, 396, 397, 399, 417, 420, 424, 428, 442, 445, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 501, 503, 526, 527, 534, 535, 536, 537, 541, 542, 562, 563, 565, 566, 568, 583, 586, 609, 610, 648, 650, 652, 654, 667, 669, 671, 674, 677, 678, 679, 694, 704, 705, 709, 713, 758, 759, 762, 767, 769, 775, 776, 819, 833, 834, 846, 847, 849, 851, 860, 862, 875, 876, 880, 881, 882, 883, 892, 893, 922, 943, 944, 946, 950, 954, 961, 964, 966, 970, 980, 984, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010], "isdigit": [19, 398], "numbernormalizingvector": 19, "build_token": [19, 398, 565, 566, 568], "super": [19, 25, 27, 367, 398, 1004], "sport": [19, 361], "basebal": [19, 361], "hockei": [19, 361], "crypt": [19, 361], "electron": [19, 361, 363, 515, 517, 524, 604], "y_true": [19, 32, 58, 129, 152, 196, 206, 214, 244, 316, 366, 411, 417, 418, 443, 459, 460, 461, 529, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 674, 675, 677, 678, 679, 683, 684, 685, 688, 689, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 757, 758, 759, 760, 762, 763, 764, 767, 769, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 954, 997, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 95, 310, 339, 366, 378, 390, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 438, 439, 440, 441, 488, 490, 988, 996, 1000, 1002, 1004, 1005, 1007, 1010], "svd_method": [19, 429, 431, 509, 999], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 56, 57, 58, 60, 67, 164, 244, 247, 301, 310, 339, 374, 390, 419, 422, 426, 427, 430, 437, 440, 489, 765, 766, 770, 771, 838, 957, 964, 975, 988, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 56, 57, 59, 60, 63, 95, 217, 218, 219, 220, 307, 310, 339, 390, 422, 425, 426, 427, 429, 430, 431, 437, 439, 440, 667, 671, 770, 771, 988, 996, 1004, 1010, 1011], "y_coclust": 19, "row_labels_": [19, 20, 21, 387, 429, 431], "y_kmean": 19, "fit_predict": [19, 55, 56, 59, 225, 283, 367, 378, 390, 408, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 447, 540, 654, 770, 771, 819, 825, 833, 876, 960, 1001, 1004, 1005, 1009, 1011], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 58, 62, 63, 69, 130, 217, 234, 334, 488, 490], "get_indic": [19, 405, 429, 431], "float_info": 19, "row_compl": 19, "logical_not": [19, 63, 105, 199], "rows_": [19, 387, 405, 429, 431], "col_compl": 19, "columns_": [19, 387, 405, 429, 431], "ident": [19, 63, 121, 191, 196, 214, 225, 229, 318, 338, 361, 367, 378, 387, 390, 391, 392, 394, 400, 403, 417, 418, 430, 442, 443, 451, 453, 454, 457, 458, 465, 480, 528, 536, 537, 541, 542, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 620, 656, 657, 676, 680, 681, 711, 760, 768, 774, 777, 786, 787, 788, 790, 791, 815, 816, 822, 830, 831, 837, 838, 850, 861, 880, 881, 947, 948, 951, 954, 957, 958, 969, 1000, 1004, 1005, 1006, 1010], "most_common": 19, "counter": [19, 390, 653, 654, 655, 1009], "itemgett": 19, "revers": [19, 74, 146, 201, 256, 511, 518, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 588, 764, 833, 954, 996, 997, 1006, 1008], "best_idx": [19, 255], "get_shap": [19, 405, 429, 431], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 57], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 387, 429, 431, 488, 490], "make_checkerboard": [20, 488, 998], "rearrang": [20, 21, 387], "outer": [20, 100, 261, 315, 429, 491, 617, 627, 628, 631, 946, 997], "product": [20, 95, 130, 149, 154, 349, 353, 367, 368, 371, 374, 384, 387, 395, 397, 429, 515, 517, 524, 559, 566, 567, 568, 590, 591, 610, 617, 641, 642, 662, 663, 736, 738, 750, 752, 845, 848, 864, 865, 910, 943, 946, 950, 952, 964, 966, 968, 969, 974, 978, 1004], "consensu": [20, 21, 37, 365, 366, 379, 387, 390, 626, 648, 655, 656, 695, 954], "kemaleren": [20, 21], "spectralbiclust": [20, 387, 431, 998, 1002, 1003, 1007], "consensus_scor": [20, 21, 387, 998], "matshow": [20, 21, 65, 117, 144, 294, 479], "row_idx": [20, 21, 196], "permut": [20, 21, 37, 80, 117, 123, 138, 164, 165, 170, 212, 249, 272, 380, 385, 390, 397, 442, 473, 477, 481, 536, 537, 541, 542, 604, 607, 611, 656, 680, 681, 693, 711, 712, 730, 732, 768, 788, 790, 798, 799, 833, 847, 877, 880, 881, 909, 923, 925, 928, 954, 968, 984, 987, 991, 996, 1002, 1009], "col_idx": [20, 21], "biclusters_": [20, 21, 405, 429, 431], "1f": [20, 30, 50, 53, 94, 98, 176, 196, 229, 241, 243, 263, 306, 339, 340], "fit_data": [20, 21], "column_labels_": [20, 21, 387, 429, 431], "626": [20, 22, 49, 182], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 356, 398, 405, 427, 429, 431, 465, 488, 490, 568, 695, 768, 954, 990, 991, 998, 1002, 1003], "make_biclust": [21, 490, 998], "implant": 21, "413": [21, 22, 339], "plot_spectral_coclust": [21, 22], "059": [22, 339, 514], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 74, 91, 108, 109, 110, 130, 133, 141, 148, 149, 150, 151, 159, 164, 166, 217, 221, 226, 229, 256, 259, 262, 263, 266, 298, 302, 306, 308, 316, 318, 353, 356, 361, 362, 367, 371, 376, 378, 390, 394, 395, 398, 399, 400, 414, 415, 416, 417, 418, 425, 427, 481, 489, 492, 500, 504, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 546, 547, 570, 571, 587, 590, 591, 599, 604, 609, 610, 635, 636, 648, 653, 669, 675, 677, 678, 679, 682, 683, 685, 688, 692, 696, 701, 702, 704, 714, 715, 716, 717, 731, 757, 759, 762, 763, 764, 767, 770, 771, 772, 775, 776, 785, 798, 799, 802, 804, 805, 808, 809, 810, 811, 812, 815, 818, 823, 829, 830, 865, 866, 867, 868, 869, 872, 874, 877, 880, 882, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 970, 975, 976, 977, 989, 991, 996, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010], "confid": [24, 25, 26, 27, 154, 156, 242, 256, 259, 316, 379, 388, 400, 613, 635, 636, 643, 645, 648, 651, 652, 653, 675, 678, 683, 696, 701, 702, 714, 715, 731, 764, 801, 840, 872, 874, 877, 950, 953, 954, 955, 960, 967, 968, 969, 978, 989, 1006], "being": [24, 27, 45, 52, 81, 85, 89, 100, 114, 126, 149, 154, 166, 168, 172, 190, 250, 256, 302, 303, 325, 338, 340, 364, 365, 366, 367, 370, 376, 378, 379, 384, 390, 392, 394, 397, 398, 399, 400, 401, 420, 421, 423, 424, 428, 434, 447, 470, 500, 546, 617, 626, 633, 649, 651, 664, 667, 671, 688, 694, 709, 711, 758, 764, 770, 813, 814, 819, 821, 823, 824, 825, 848, 865, 910, 943, 944, 950, 953, 954, 957, 960, 961, 962, 964, 966, 968, 969, 970, 996, 997, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011], "postprocess": [24, 388, 512, 518], "brier": [24, 25, 388, 685], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 358, 397, 416, 430, 512, 538, 597, 616, 620, 740, 749, 752, 830, 831, 874, 875, 876, 877, 878, 959, 969, 987, 991, 1009], "isoton": [24, 25, 164, 224, 239, 356, 416, 634, 895, 976, 991, 997, 998, 999, 1000, 1002, 1009], "belong": [24, 27, 59, 234, 256, 306, 315, 360, 361, 387, 388, 390, 393, 394, 397, 405, 419, 422, 425, 426, 427, 429, 431, 500, 688, 706, 778, 784, 794, 820, 840, 950, 953, 954, 956, 957, 958, 960, 969, 974, 980, 987], "mblondel": [24, 48, 187, 218, 257, 338, 360, 485], "telecom": [24, 25, 42, 225, 978], "balaz": [24, 1000], "kegl": [24, 1000], "jhm": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231], "informatik": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 954], "uni": [24, 25, 26, 27, 73, 114, 149, 150, 152, 153, 154, 155, 156, 158, 187, 230, 231, 315, 333], "bremen": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231], "style": [24, 26, 74, 80, 122, 185, 214, 260, 366, 372, 390, 398, 422, 425, 437, 677, 892, 893, 996, 999, 1010], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 58, 59, 61, 62, 63, 90, 188, 208, 225, 244, 301, 307, 310, 323, 326, 327, 334, 362, 367, 368, 397, 492, 1004, 1007, 1010], "50000": 24, "n_bin": [24, 25, 27, 53, 196, 214, 299, 301, 417, 418, 838, 964], "calibration_curv": [24, 388, 416, 417, 1005, 1010], "blob": [24, 33, 42, 44, 56, 61, 63, 90, 371, 390, 426, 489, 1001], "sample_weight": [24, 177, 196, 209, 214, 307, 335, 366, 378, 390, 397, 401, 407, 411, 416, 422, 423, 425, 427, 437, 443, 447, 459, 460, 461, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 587, 588, 611, 612, 614, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 674, 675, 677, 678, 679, 683, 684, 685, 688, 689, 692, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 710, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 757, 758, 759, 760, 762, 763, 764, 767, 769, 772, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 818, 820, 823, 824, 830, 831, 833, 852, 853, 867, 868, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 942, 954, 968, 969, 970, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "sw_train": [24, 307], "sw_test": [24, 307], "calibratedclassifiercv": [24, 25, 26, 349, 378, 388, 653, 943, 969, 975, 1000, 1002, 1005, 1006, 1008, 1009, 1010, 1011], "brier_score_loss": [24, 25, 388, 954, 1004, 1005, 1006], "gaussiannb": [24, 25, 27, 31, 131, 258, 303, 349, 388, 397, 416, 546, 808, 809, 810, 812, 834, 948, 955, 956, 1000, 1001, 1002, 1004, 1009], "With": [24, 34, 44, 66, 74, 100, 120, 126, 142, 164, 167, 196, 198, 224, 226, 231, 232, 238, 239, 256, 280, 353, 356, 361, 366, 367, 378, 390, 391, 394, 397, 399, 416, 418, 478, 609, 610, 635, 743, 831, 834, 836, 853, 879, 881, 947, 950, 951, 954, 955, 957, 958, 961, 968, 970, 980, 981, 988, 993, 999, 1003, 1004, 1006, 1008, 1010], "itself": [24, 49, 122, 194, 237, 265, 325, 339, 353, 355, 365, 366, 367, 369, 378, 389, 390, 401, 419, 420, 423, 424, 447, 448, 449, 450, 451, 452, 453, 454, 504, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 528, 543, 546, 560, 569, 572, 573, 575, 576, 577, 579, 580, 616, 617, 618, 619, 620, 622, 632, 666, 668, 765, 766, 808, 809, 810, 811, 812, 813, 814, 818, 826, 827, 838, 839, 840, 867, 868, 946, 950, 951, 953, 957, 958, 962, 1000], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 127, 131, 150, 151, 152, 153, 265, 292, 300, 306, 308, 338, 367, 372, 378, 388, 389, 397, 416, 417, 418, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 546, 570, 571, 587, 596, 597, 599, 600, 608, 609, 610, 635, 636, 653, 675, 677, 678, 716, 717, 763, 770, 771, 772, 775, 776, 785, 794, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 815, 823, 830, 833, 840, 867, 868, 869, 874, 877, 880, 882, 950, 954, 956, 958, 961, 967, 968, 969, 970, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 124, 188, 202, 204, 205, 314, 330, 333, 344, 363, 373, 376, 381, 390, 452, 536, 537, 559, 566, 567, 568, 612, 622, 641, 653, 655, 662, 663, 770, 950], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": 24, "109": [24, 53, 955, 998], "y_uniqu": 24, "rainbow": [24, 219], "this_i": [24, 202], "this_x": [24, 194, 202, 987], "this_sw": 24, "lexsort": 24, "51": [24, 91, 154, 214, 390, 391, 756, 949, 950, 992], "uncalibr": [24, 25, 26, 416], "gnb": [24, 25, 27, 131, 303, 397, 546, 956], "424": [24, 28, 214], "plot_calibr": [24, 28], "reliabl": [25, 27, 388, 394, 417, 418, 623, 970, 978], "diagram": [25, 27, 70, 236, 307, 388, 390, 417, 418, 446, 870, 1007, 1008], "redund": [25, 27, 106, 242, 247, 349, 362, 365, 366, 370, 378, 388, 492, 611, 975, 989, 1008], "uninform": [25, 27, 362, 370, 398, 943, 950, 1004], "rest": [25, 30, 119, 123, 164, 174, 211, 215, 244, 306, 317, 322, 371, 378, 389, 400, 489, 587, 621, 635, 636, 653, 729, 763, 801, 802, 803, 822, 872, 874, 877, 950, 954, 955, 958, 961, 969, 978, 1000, 1001, 1010, 1011], "make_classif": [25, 27, 31, 90, 114, 115, 116, 120, 143, 145, 253, 259, 267, 268, 286, 292, 300, 306, 308, 333, 349, 362, 368, 386, 416, 417, 489, 530, 532, 534, 541, 643, 674, 675, 677, 678, 797, 803, 830, 833, 872, 943, 954, 955, 964, 969, 1002, 1003, 1004, 1006], "100_000": [25, 27, 166], "n_inform": [25, 27, 31, 90, 114, 116, 143, 145, 175, 199, 253, 259, 269, 286, 292, 300, 306, 333, 367, 370, 492, 501, 530, 531, 532, 533, 541, 542, 642, 803, 955, 1004], "n_redund": [25, 27, 31, 90, 116, 143, 145, 253, 259, 286, 292, 300, 370, 416, 492, 530, 532, 541, 803], "logisticregress": [25, 27, 30, 70, 72, 115, 131, 137, 179, 186, 187, 188, 189, 203, 211, 212, 226, 227, 236, 238, 259, 265, 274, 295, 300, 306, 307, 308, 309, 310, 338, 353, 366, 367, 371, 373, 377, 388, 391, 397, 399, 417, 544, 546, 574, 608, 611, 620, 629, 636, 649, 650, 651, 652, 653, 664, 677, 763, 785, 804, 805, 807, 857, 858, 860, 861, 862, 863, 879, 904, 950, 954, 955, 964, 968, 969, 985, 987, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "baselin": [25, 119, 122, 132, 146, 175, 214, 266, 274, 308, 339, 363, 390, 399, 528, 529, 611, 954, 957, 989], "regular": [25, 36, 67, 70, 72, 78, 100, 108, 125, 133, 156, 161, 164, 174, 175, 176, 181, 183, 184, 185, 187, 196, 210, 214, 215, 231, 242, 250, 257, 260, 269, 281, 282, 291, 294, 295, 296, 320, 322, 324, 325, 326, 336, 338, 340, 343, 353, 366, 369, 376, 377, 388, 390, 392, 393, 395, 396, 397, 400, 416, 422, 425, 449, 454, 456, 457, 458, 481, 489, 491, 492, 497, 499, 501, 505, 515, 516, 517, 520, 524, 525, 527, 536, 538, 539, 565, 566, 568, 615, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 670, 710, 725, 770, 771, 772, 788, 799, 830, 831, 834, 853, 872, 873, 874, 875, 877, 878, 879, 895, 943, 944, 946, 947, 948, 951, 953, 959, 960, 964, 967, 968, 969, 976, 978, 984, 985, 987, 991, 996, 997, 998, 1000, 1001, 1005, 1006, 1008, 1009], "logist": [25, 27, 30, 68, 70, 75, 115, 137, 164, 174, 215, 226, 238, 274, 295, 303, 310, 338, 378, 388, 391, 397, 399, 400, 416, 466, 473, 479, 481, 489, 518, 536, 538, 548, 587, 623, 634, 635, 636, 643, 645, 653, 716, 772, 785, 799, 829, 830, 831, 833, 853, 879, 895, 897, 954, 958, 959, 968, 969, 976, 978, 985, 991, 1000, 1003, 1004, 1006, 1007], "guid": [25, 68, 95, 158, 164, 166, 184, 217, 258, 263, 282, 283, 286, 306, 307, 308, 309, 310, 356, 364, 365, 366, 370, 371, 372, 377, 378, 379, 389, 391, 397, 401, 402, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 886, 905, 955, 982, 989, 996, 997, 998, 999, 1001, 1003, 1005, 1006], "gridspec": [25, 27, 64, 241, 372], "calibrationdisplai": [25, 27, 388, 1009, 1010], "lr": [25, 27, 115, 131, 132, 199, 211, 227, 228, 252, 259, 377, 397, 545, 546, 547, 688], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 330], "dark2": [25, 27, 218], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 167, 196, 229, 262, 281, 298, 308, 388, 536, 537, 538, 539, 619, 733, 734, 946, 952, 964, 976, 988, 990, 991, 1008], "grid_posit": [25, 27], "y_prob": [25, 27, 152, 417, 418, 685, 804, 830, 954, 1010], "poorli": [25, 61, 77, 85, 113, 124, 221, 354, 390, 397, 505, 607, 950, 951, 1002], "violat": [25, 325, 373, 376, 378, 612, 896, 961, 968, 970], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 118, 156, 167, 233, 256, 259, 261, 265, 274, 298, 306, 339, 349, 353, 354, 362, 367, 369, 377, 378, 381, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 402, 427, 442, 465, 480, 492, 493, 494, 495, 497, 509, 510, 512, 514, 516, 517, 523, 524, 528, 529, 581, 584, 585, 602, 617, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 649, 650, 651, 652, 680, 681, 693, 711, 712, 730, 732, 768, 774, 798, 802, 804, 806, 807, 845, 849, 850, 851, 853, 856, 857, 858, 859, 861, 862, 863, 866, 874, 875, 876, 877, 878, 903, 943, 946, 948, 950, 951, 954, 955, 956, 959, 961, 964, 969, 970, 990, 991, 996, 997, 1002, 1004, 1006], "overli": [25, 26, 185, 261, 349, 395, 954], "typic": [25, 27, 99, 110, 172, 196, 214, 231, 259, 263, 265, 266, 282, 283, 308, 325, 339, 353, 359, 360, 361, 364, 367, 368, 374, 377, 378, 388, 389, 390, 391, 394, 395, 397, 398, 400, 422, 425, 427, 473, 528, 530, 532, 533, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 606, 615, 617, 620, 631, 632, 633, 648, 659, 660, 688, 840, 851, 908, 909, 939, 943, 947, 950, 951, 953, 954, 955, 956, 960, 962, 978, 989, 1005, 1009], "transpos": [25, 84, 256, 402, 503, 515, 517, 524, 637, 638, 639, 640, 763, 909, 940, 954, 966, 988, 996, 1010], "nearli": [25, 167, 259, 361, 378, 389, 739, 954, 957, 961, 966, 989], "albeit": 25, "strongli": [25, 27, 81, 85, 98, 119, 123, 166, 178, 211, 262, 338, 366, 380, 381, 388, 397, 635, 711, 768, 950, 951, 991, 1005], "plenti": 25, "greater": [25, 91, 112, 166, 167, 213, 230, 244, 262, 274, 282, 283, 343, 353, 362, 370, 378, 388, 390, 393, 397, 420, 424, 427, 430, 441, 450, 513, 518, 534, 535, 536, 537, 538, 539, 541, 542, 543, 570, 571, 574, 587, 588, 605, 617, 619, 622, 641, 643, 644, 648, 653, 654, 655, 669, 685, 688, 696, 710, 711, 714, 717, 763, 768, 770, 771, 803, 815, 816, 823, 824, 830, 831, 836, 851, 862, 866, 869, 880, 881, 882, 883, 909, 923, 943, 949, 950, 951, 954, 955, 960, 961, 964, 969, 970, 999, 1004, 1007, 1009, 1010, 1011], "exploit": [25, 274, 955, 975, 999], "precision_scor": [25, 263, 684, 762, 954, 996, 998, 999, 1000, 1001, 1006], "recall_scor": [25, 263, 394, 684, 759, 954, 996, 998, 999, 1000, 1001, 1006], "f1_score": [25, 263, 317, 361, 713, 954, 996, 998, 999, 1000, 1001, 1005, 1006], "log_loss": [25, 26, 150, 317, 338, 378, 397, 534, 536, 538, 541, 623, 653, 880, 882, 943, 950, 954, 968, 998, 1000, 1002, 1010, 1011], "roc_auc_scor": [25, 256, 265, 306, 678, 682, 683, 684, 764, 954, 998, 999, 1004, 1006, 1010, 1011], "score_nam": [25, 37, 339], "score_df": 25, "set_index": [25, 122, 154, 185, 214, 256, 339], "decim": [25, 155, 276, 449, 450, 885, 1003, 1004], "098921": 25, "323178": 25, "872009": 25, "851408": 25, "861586": 25, "863157": 25, "117608": 25, "782755": 25, "857400": 25, "875941": 25, "866571": 25, "865055": 25, "098332": 25, "370738": 25, "883065": 25, "836224": 25, "859007": 25, "862690": 25, "108880": 25, "368896": 25, "861106": 25, "871277": 25, "866161": 25, "865300": 25, "refin": [25, 81, 388, 450, 685, 954, 989], "alter": [25, 162, 367, 378, 704, 705, 713, 758, 759, 762, 1001, 1005, 1008], "uncertainti": [25, 149, 156, 175, 390, 544, 545, 620, 833, 944, 966], "linearsvc": [25, 27, 69, 71, 142, 143, 164, 172, 230, 253, 255, 263, 300, 306, 320, 322, 333, 336, 338, 353, 367, 371, 388, 398, 399, 416, 489, 544, 553, 616, 620, 629, 649, 650, 651, 652, 653, 664, 710, 717, 796, 801, 873, 874, 877, 879, 950, 954, 955, 996, 997, 998, 1002, 1004, 1007], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 214, 228, 298, 325, 612, 653, 716, 843, 964, 1000, 1007, 1008], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 131, 416, 880, 882], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 66, 100, 166, 185, 263, 378, 388, 392, 394, 399, 422, 425, 427, 447, 515, 517, 524, 540, 688, 819, 876, 996], "behavior": [25, 27, 37, 39, 52, 129, 157, 161, 164, 166, 196, 214, 247, 249, 259, 267, 272, 294, 298, 300, 325, 349, 354, 360, 363, 366, 367, 369, 373, 374, 378, 388, 390, 394, 398, 418, 513, 528, 543, 643, 644, 645, 653, 654, 655, 704, 705, 758, 759, 762, 773, 774, 777, 788, 789, 790, 791, 792, 810, 943, 950, 955, 960, 964, 978, 980, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "hing": [25, 203, 206, 208, 264, 322, 323, 327, 378, 643, 653, 710, 872, 879, 950, 968, 969, 989], "focus": [25, 77, 185, 361, 376, 397, 951, 964, 974], "far": [25, 59, 81, 119, 150, 156, 166, 196, 214, 325, 338, 340, 366, 374, 400, 696, 853, 929, 959, 960, 969, 978, 987], "awai": [25, 26, 27, 59, 77, 118, 149, 150, 154, 199, 330, 361, 388, 400, 605, 815, 816, 823, 824, 953, 969, 987], "shown": [25, 45, 48, 88, 110, 112, 122, 158, 186, 194, 214, 222, 225, 230, 243, 256, 258, 259, 262, 265, 281, 293, 294, 298, 299, 300, 313, 338, 339, 366, 370, 379, 390, 391, 394, 395, 396, 398, 400, 417, 609, 675, 677, 678, 689, 772, 785, 884, 886, 949, 950, 951, 954, 957, 962, 964, 968, 969, 970, 989, 1000, 1005, 1006, 1007, 1010], "varieti": [25, 161, 243, 325, 373, 376, 389, 390, 392, 397, 398, 620, 957, 970, 974, 978, 998, 1011], "niculescu": [25, 27, 388, 416, 418], "mizil": [25, 27, 388, 416, 418], "caruana": [25, 27, 388, 416, 418], "144944": 25, "465663": 25, "872201": 25, "851772": 25, "861865": 25, "863420": 25, "099827": 25, "377027": 25, "853032": 25, "878041": 25, "865356": 25, "863306": 25, "098760": 25, "321306": 25, "873703": 25, "848723": 25, "861032": 25, "862957": 25, "deal": [25, 70, 161, 166, 221, 340, 366, 370, 389, 391, 398, 399, 400, 452, 473, 679, 684, 738, 762, 839, 909, 950, 978, 986, 999], "situat": [25, 44, 56, 71, 166, 202, 225, 259, 366, 373, 392, 394, 395, 397, 505, 511, 559, 846, 849, 860, 948, 950, 956, 957, 967, 970, 1004], "supervis": [25, 27, 37, 49, 54, 57, 85, 104, 115, 137, 138, 218, 232, 243, 256, 285, 308, 316, 319, 339, 353, 356, 361, 367, 377, 378, 388, 390, 393, 394, 395, 397, 398, 400, 416, 418, 442, 465, 480, 481, 530, 565, 567, 570, 571, 611, 653, 704, 773, 774, 777, 778, 779, 780, 781, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 822, 832, 833, 837, 867, 868, 869, 877, 948, 951, 954, 956, 957, 960, 965, 969, 970, 971, 974, 975, 977, 980, 981, 983, 989, 991, 996, 1002, 1008], "icml": [25, 27, 388, 390, 398, 416, 418, 808, 810, 829, 954, 956, 968, 973], "2005": [25, 27, 80, 363, 388, 416, 418, 822, 950, 957, 967], "573": [25, 28, 211, 247, 248, 276, 398], "plot_calibration_curv": [25, 28], "simplex": [26, 647, 770, 848], "arrow": [26, 1010], "green": [26, 34, 80, 91, 113, 125, 126, 131, 149, 172, 222, 293, 299, 303, 307, 378, 955, 1004, 1005, 1007, 1008], "600": [26, 50, 128, 129, 361, 657], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 58, 59, 61, 62, 63, 208, 225, 244, 301, 327, 489], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 55, 114, 115, 116, 117, 118, 131, 168, 169, 236, 237, 253, 268, 306, 308, 338, 349, 377, 378, 388, 397, 399, 534, 535, 536, 538, 543, 544, 546, 775, 776, 803, 882, 943, 955, 978, 993, 1000, 1001, 1004, 1005, 1006, 1009, 1010, 1011], "concaten": [26, 39, 50, 60, 68, 75, 80, 112, 157, 164, 175, 178, 218, 225, 234, 241, 245, 246, 263, 265, 266, 281, 295, 302, 314, 338, 391, 442, 445, 481, 486, 508, 514, 518, 519, 576, 756, 772, 832, 833, 835, 838, 877, 955, 984, 997], "randomforestclassifierrandomforestclassifi": [26, 116, 117, 168, 236, 268], "cal_clf": 26, "prefit": [26, 378, 388, 399, 416, 544, 545, 574, 975, 1008, 1009, 1010], "x27": [26, 70, 109, 115, 129, 132, 143, 166, 168, 226, 227, 235, 236, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 315], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1008], "unit": [26, 69, 79, 166, 172, 196, 214, 281, 294, 298, 339, 361, 366, 367, 371, 373, 374, 395, 398, 402, 442, 466, 467, 496, 501, 509, 510, 511, 518, 519, 566, 567, 568, 588, 635, 636, 653, 662, 676, 745, 820, 829, 830, 831, 837, 843, 845, 849, 851, 853, 858, 859, 860, 862, 863, 872, 873, 950, 952, 953, 959, 964, 970, 974, 987, 1000, 1004, 1010], "mid": [26, 325, 954, 956], "frac": [26, 79, 80, 256, 263, 265, 309, 387, 388, 390, 392, 395, 396, 397, 398, 400, 411, 441, 443, 459, 460, 461, 531, 533, 535, 537, 539, 542, 545, 547, 588, 592, 596, 599, 600, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 647, 649, 650, 655, 656, 657, 673, 730, 744, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 946, 948, 949, 950, 951, 952, 954, 956, 957, 958, 959, 961, 962, 964, 966, 968, 969, 970, 987], "shrink": [26, 81, 95, 123, 191, 194, 217, 245, 298, 395, 536, 537, 653, 655, 820, 830, 831, 874, 875, 876, 877, 878, 957, 969, 987], "perfectli": [26, 37, 259, 270, 380, 390, 397, 417, 544, 583, 680, 681, 691, 693, 711, 712, 732, 761, 768, 846, 949, 951, 954, 969, 1009, 1010], "head": [26, 70, 115, 128, 154, 166, 184, 185, 214, 238, 246, 306, 366, 373, 395, 978, 1001, 1002, 1011], "incur": [26, 596, 872, 969, 1004], "correct": [26, 27, 80, 145, 157, 166, 185, 196, 214, 241, 250, 256, 263, 265, 325, 327, 338, 349, 363, 366, 367, 369, 379, 388, 389, 390, 394, 395, 398, 428, 434, 447, 452, 465, 478, 480, 612, 644, 653, 655, 679, 680, 684, 688, 689, 694, 697, 698, 699, 703, 704, 705, 709, 713, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 758, 759, 760, 762, 767, 769, 803, 810, 818, 844, 939, 950, 954, 955, 969, 980, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "decreas": [26, 39, 46, 57, 65, 74, 126, 157, 166, 180, 204, 228, 229, 258, 263, 269, 292, 300, 306, 343, 353, 355, 366, 388, 390, 397, 420, 424, 441, 498, 511, 512, 518, 534, 535, 536, 537, 538, 539, 541, 542, 543, 612, 613, 614, 653, 654, 655, 682, 688, 702, 757, 764, 830, 831, 880, 881, 882, 883, 943, 945, 950, 951, 954, 957, 958, 962, 968, 969, 978, 987, 998, 1003, 1006, 1009], "cal_scor": 26, "327": [26, 705, 987], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 131], "p2": [26, 131, 214], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 388, 416], "this_p": 26, "sure": [26, 55, 189, 202, 232, 349, 353, 354, 360, 364, 365, 366, 367, 369, 370, 373, 376, 388, 391, 398, 470, 500, 626, 892, 893, 903, 940, 944, 951, 968, 975, 1003, 1004, 1006], "renorm": 26, "step": [26, 33, 42, 54, 57, 66, 69, 70, 72, 73, 80, 85, 98, 103, 115, 118, 119, 129, 143, 144, 145, 151, 154, 166, 168, 196, 204, 214, 226, 227, 230, 235, 238, 247, 254, 257, 263, 265, 278, 284, 292, 295, 300, 303, 307, 310, 318, 321, 325, 339, 340, 343, 349, 353, 356, 361, 364, 365, 366, 367, 369, 370, 373, 376, 378, 387, 388, 390, 392, 393, 395, 397, 398, 399, 421, 513, 514, 515, 516, 523, 540, 565, 566, 568, 570, 571, 574, 583, 604, 621, 625, 643, 644, 646, 653, 655, 656, 657, 671, 677, 770, 771, 772, 775, 776, 785, 805, 806, 807, 829, 830, 831, 833, 834, 836, 872, 873, 874, 875, 877, 878, 908, 909, 925, 929, 944, 950, 953, 958, 959, 964, 968, 970, 971, 974, 977, 985, 989, 996, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009], "multiclass": [26, 30, 164, 174, 215, 232, 249, 258, 263, 266, 272, 274, 322, 334, 356, 361, 362, 367, 368, 370, 378, 390, 397, 416, 430, 440, 466, 481, 536, 538, 544, 545, 548, 571, 579, 587, 608, 609, 610, 635, 636, 643, 645, 650, 651, 652, 653, 682, 684, 704, 705, 709, 710, 713, 718, 729, 758, 759, 762, 763, 764, 767, 772, 773, 775, 776, 777, 785, 789, 793, 794, 795, 796, 797, 798, 799, 800, 840, 872, 874, 877, 948, 950, 965, 969, 970, 976, 977, 989, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1011], "argmax": [26, 103, 255, 269, 367, 397, 546, 801, 880, 969, 1009], "987": [26, 28, 264, 339], "plot_calibration_multiclass": [26, 28], "gave": [27, 388, 772, 775, 776, 785, 840], "four": [27, 142, 157, 172, 178, 197, 243, 244, 314, 322, 362, 366, 378, 534, 541, 695, 880, 882, 898, 950, 952, 953, 954, 961, 964, 973], "naiv": [27, 31, 127, 256, 258, 303, 338, 340, 356, 361, 397, 398, 416, 521, 808, 809, 810, 811, 812, 948, 949, 957, 976, 991, 996, 997, 998, 999, 1004, 1006, 1009, 1011], "bay": [27, 31, 113, 127, 149, 185, 246, 258, 303, 338, 356, 361, 395, 397, 398, 400, 513, 526, 527, 633, 808, 809, 810, 811, 812, 948, 949, 950, 976, 989, 991, 996, 997, 998, 999, 1004, 1006, 1009, 1011], "train_sampl": [27, 211, 212], "against": [27, 37, 85, 105, 113, 123, 141, 172, 187, 188, 205, 213, 265, 306, 325, 361, 366, 379, 388, 390, 394, 398, 417, 486, 519, 525, 528, 653, 655, 730, 732, 763, 774, 778, 780, 798, 802, 946, 950, 954, 955, 957, 969, 973, 980], "rfc": [27, 237, 306, 993], "1177": 27, "userwarn": [27, 44, 61, 112, 157, 158, 188, 205, 330, 344, 370, 688, 964, 1002, 1004, 1009], "redundantli": [27, 378], "keyword": [27, 338, 360, 366, 367, 370, 372, 378, 390, 401, 404, 417, 423, 424, 428, 430, 435, 442, 445, 480, 512, 515, 517, 536, 537, 544, 545, 546, 547, 597, 605, 608, 609, 616, 620, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 665, 669, 674, 675, 677, 678, 749, 753, 754, 755, 756, 765, 766, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 833, 837, 904, 906, 943, 951, 954, 957, 967, 996, 1000, 1002, 1003, 1004, 1006, 1008, 1010, 1011], "argument": [27, 71, 197, 226, 229, 354, 360, 361, 366, 368, 370, 371, 373, 374, 376, 378, 390, 391, 394, 395, 397, 399, 401, 402, 404, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 430, 432, 435, 437, 439, 441, 470, 480, 485, 510, 512, 513, 515, 517, 528, 536, 537, 538, 544, 545, 546, 547, 553, 558, 559, 565, 566, 568, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 608, 616, 620, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 643, 645, 653, 658, 661, 665, 669, 673, 675, 676, 677, 678, 690, 695, 710, 717, 738, 754, 755, 801, 802, 805, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 830, 833, 837, 886, 890, 899, 904, 906, 922, 923, 924, 938, 943, 946, 950, 951, 952, 954, 957, 961, 962, 969, 970, 980, 984, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011], "fmt": [27, 60, 207], "preced": [27, 274, 354, 366, 464, 954, 996], "contrast": [27, 104, 198, 231, 256, 285, 303, 339, 378, 388, 390, 391, 393, 397, 400, 427, 430, 440, 596, 620, 785, 829, 944, 947, 949, 950, 954, 957, 959, 962, 964, 967, 968, 970, 1006], "push": [27, 366, 369, 388, 977], "equat": [27, 333, 366, 390, 395, 397, 534, 535, 536, 537, 541, 542, 543, 567, 604, 659, 660, 664, 738, 853, 880, 881, 882, 883, 944, 951, 954, 959, 1004], "twice": [27, 268, 338, 340, 367, 400, 596, 707, 911, 1005], "approx": [27, 95, 230, 395, 397, 398, 954, 961, 968], "rare": [27, 349, 369, 376, 378, 380, 388, 390, 394, 566, 625, 635, 636, 646, 657, 872, 897, 922, 950, 964, 978, 1003, 1004, 1005, 1009, 1011], "explan": [27, 85, 353, 365, 366, 388, 398, 943, 953, 955, 970, 978, 999], "bag": [27, 69, 108, 114, 124, 133, 164, 168, 339, 340, 362, 388, 493, 494, 495, 532, 533, 534, 535, 536, 537, 540, 541, 542, 777, 799, 881, 952, 955, 976, 991, 996, 998, 999, 1000, 1001, 1002, 1009, 1010], "underli": [27, 55, 79, 128, 146, 197, 199, 261, 280, 281, 346, 354, 376, 378, 380, 386, 388, 392, 394, 395, 396, 397, 399, 400, 416, 429, 430, 431, 440, 442, 443, 449, 450, 456, 501, 544, 545, 546, 547, 570, 571, 574, 579, 635, 645, 657, 668, 672, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 818, 872, 880, 881, 882, 883, 921, 950, 951, 955, 960, 967, 969, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "restrict": [27, 65, 66, 161, 164, 213, 291, 296, 367, 371, 376, 388, 390, 397, 398, 443, 470, 479, 509, 558, 587, 630, 631, 632, 633, 635, 659, 660, 683, 689, 757, 763, 764, 799, 821, 823, 824, 825, 827, 829, 830, 831, 833, 858, 954, 970, 990, 991, 996, 998, 1006, 1008], "interv": [27, 108, 133, 156, 164, 196, 197, 198, 214, 256, 361, 369, 378, 388, 394, 397, 400, 417, 418, 493, 494, 495, 534, 535, 537, 539, 541, 542, 612, 613, 615, 654, 717, 723, 725, 776, 792, 799, 836, 838, 852, 874, 875, 876, 896, 946, 950, 954, 964, 970, 1003, 1007], "move": [27, 118, 257, 295, 325, 365, 366, 371, 388, 390, 526, 527, 548, 549, 550, 552, 553, 554, 988, 996, 997, 1001, 1004, 1006, 1009, 1010], "characterist": [27, 44, 61, 146, 154, 164, 225, 249, 253, 272, 298, 349, 361, 363, 370, 388, 394, 400, 480, 481, 600, 615, 635, 678, 682, 684, 702, 757, 763, 764, 790, 799, 802, 840, 877, 950], "difficult": [27, 166, 204, 366, 373, 388, 395, 397, 530, 531, 536, 538, 539, 949, 951, 953, 957, 959, 961, 970, 978, 996, 1010], "bayesian": [27, 54, 164, 174, 184, 215, 240, 242, 246, 247, 248, 395, 416, 501, 505, 509, 621, 622, 633, 634, 770, 771, 834, 836, 848, 853, 943, 974, 976, 990, 991, 1002, 1009], "domingo": [27, 763, 954], "pazzani": 27, "proc": [27, 78, 388, 392, 398, 428, 453, 666, 670, 808, 943, 951, 956, 960], "13th": 27, "intl": [27, 394], "1996": [27, 390, 397, 401, 423, 493, 494, 495, 532, 533, 964], "zadrozni": [27, 388, 416, 653], "bianca": 27, "charl": [27, 739, 996, 999, 1002, 1006, 1008], "elkan": [27, 307, 388, 416, 422, 425, 437, 653, 1002, 1006, 1007, 1009, 1010], "vol": [27, 157, 262, 363, 390, 452, 536, 537, 605, 612, 622, 641, 662, 663, 770, 798, 810, 944, 956, 957], "437": [27, 28, 44, 67], "plot_compare_calibr": [27, 28], "07": [28, 46, 52, 66, 67, 105, 133, 166, 192, 214, 215, 223, 248, 265, 272, 319, 349, 361, 390, 508, 538, 539, 669, 954, 968], "421": [28, 64, 67, 701, 731, 954], "auto_examples_calibr": 28, "calibr": [28, 30, 214, 356, 378, 489, 492, 541, 546, 635, 653, 685, 704, 716, 759, 762, 763, 799, 811, 869, 872, 943, 950, 954, 967, 969, 976, 991, 993, 1000, 1002], "discrimin": [29, 35, 104, 141, 143, 164, 172, 211, 218, 232, 285, 356, 363, 397, 453, 489, 526, 527, 543, 758, 822, 943, 951, 954, 957, 968, 970, 976, 987, 991, 999], "ellipsoid": [29, 35, 164, 240, 241, 248, 526, 527, 770, 771, 948, 953], "ledoit": [29, 35, 76, 77, 81, 82, 164, 451, 453, 457, 489, 526, 948], "wolf": [29, 35, 76, 77, 81, 82, 164, 451, 453, 457, 489, 526, 948, 1003], "oa": [29, 35, 76, 82, 164, 392, 447, 448, 451, 452, 454, 455, 489, 526, 772, 948], "hand": [29, 35, 85, 88, 97, 100, 122, 141, 154, 164, 166, 167, 189, 203, 221, 228, 229, 231, 253, 265, 325, 353, 360, 361, 363, 366, 367, 371, 373, 377, 384, 395, 396, 397, 399, 479, 620, 689, 763, 799, 877, 943, 947, 950, 954, 956, 958, 962, 967, 969, 978, 980, 983, 986, 987], "built": [30, 85, 111, 118, 120, 168, 204, 259, 289, 306, 344, 353, 364, 366, 367, 369, 371, 373, 374, 376, 377, 378, 381, 384, 389, 390, 391, 394, 397, 399, 424, 480, 530, 531, 532, 533, 538, 539, 565, 566, 570, 574, 616, 617, 618, 619, 620, 623, 624, 629, 635, 637, 638, 639, 640, 649, 650, 651, 652, 658, 775, 776, 782, 804, 807, 813, 814, 882, 883, 938, 950, 954, 955, 967, 968, 970, 974, 978, 989, 996, 999, 1000, 1002, 1008], "enabl": [30, 50, 71, 120, 167, 204, 219, 300, 307, 309, 310, 334, 354, 364, 366, 370, 373, 376, 378, 381, 386, 389, 390, 391, 395, 397, 398, 427, 511, 512, 518, 536, 537, 538, 539, 540, 555, 556, 557, 567, 568, 579, 587, 770, 771, 772, 775, 833, 834, 846, 869, 872, 873, 874, 875, 876, 877, 878, 887, 917, 944, 946, 951, 953, 954, 957, 964, 965, 968, 969, 975, 978, 996, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "troubl": [30, 398], "ovr": [30, 188, 211, 274, 306, 334, 635, 636, 763, 802, 872, 874, 877, 950, 954, 955, 969, 996, 1001, 1002, 1004, 1005, 1006, 1010, 1011], "gpc": [30, 148, 159, 164, 481, 587, 588, 590, 591, 596, 597, 599, 600, 679, 716, 976, 991, 1006], "accuracy_scor": [30, 110, 150, 260, 303, 316, 338, 349, 377, 684, 704, 705, 709, 713, 717, 758, 759, 762, 767, 769, 943, 954, 997, 998, 999, 1008], "gaussian_process": [30, 31, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 356, 378, 400, 620, 955, 999, 1002, 1003], "gaussianprocessclassifi": [30, 31, 150, 151, 152, 153, 157, 378, 400, 588, 596, 597, 599, 600, 955, 1002, 1004, 1006, 1010], "iri": [30, 41, 45, 73, 87, 92, 93, 99, 106, 107, 108, 120, 130, 133, 138, 142, 148, 159, 164, 174, 179, 189, 215, 238, 243, 250, 261, 262, 265, 266, 279, 287, 293, 308, 312, 319, 320, 321, 325, 328, 336, 342, 347, 348, 359, 360, 377, 390, 391, 394, 395, 397, 473, 481, 518, 526, 530, 534, 541, 587, 599, 608, 653, 772, 785, 867, 868, 869, 872, 877, 880, 884, 885, 886, 943, 944, 948, 953, 954, 957, 961, 964, 967, 968, 969, 970, 980, 987, 988, 991, 1009], "load_iri": [30, 41, 45, 73, 89, 99, 102, 104, 106, 118, 120, 130, 138, 142, 151, 179, 189, 205, 238, 243, 250, 261, 262, 263, 265, 266, 279, 284, 287, 293, 306, 308, 318, 321, 322, 325, 328, 344, 347, 377, 384, 390, 391, 394, 397, 399, 538, 544, 579, 587, 596, 597, 599, 600, 608, 635, 636, 763, 772, 775, 776, 785, 801, 822, 867, 868, 869, 880, 882, 884, 885, 886, 944, 949, 954, 955, 956, 957, 961, 964, 970, 980, 986, 987, 988, 1002, 1004, 1007], "saga": [30, 187, 211, 212, 635, 636, 649, 651, 664, 785, 950, 1003, 1005], "multi_class": [30, 188, 211, 265, 306, 546, 587, 635, 636, 763, 807, 872, 950, 955, 969, 996, 1000, 1004, 1009, 1011], "n_classifi": [30, 546, 547], "xx": [30, 34, 42, 57, 79, 118, 122, 125, 127, 138, 151, 152, 153, 167, 183, 203, 206, 207, 208, 209, 210, 222, 225, 232, 245, 282, 292, 300, 301, 318, 324, 325, 329, 330, 331, 334, 335, 369], "yy": [30, 34, 42, 57, 79, 118, 125, 127, 138, 151, 153, 167, 203, 207, 208, 209, 210, 222, 225, 232, 282, 292, 300, 301, 318, 324, 325, 329, 330, 331, 334, 335], "xfull": 30, "imshow_handl": 30, "04": [30, 40, 42, 54, 66, 67, 74, 97, 105, 133, 147, 154, 159, 163, 166, 177, 195, 214, 223, 229, 232, 241, 247, 256, 257, 269, 289, 290, 303, 304, 332, 363, 397, 399, 449, 450, 763, 772, 785, 950, 954, 958, 968], "cax": [30, 152, 267], "orient": [30, 95, 166, 217, 298, 378, 884, 951], "horizont": [30, 95, 217, 230, 298, 301, 370, 378, 442, 492, 674], "359": [30, 35, 257], "plot_classification_prob": [30, 35], "salt": [31, 230, 300, 1010], "convei": [31, 222, 300, 987], "particularli": [31, 69, 70, 73, 105, 127, 197, 227, 256, 300, 307, 335, 349, 353, 366, 374, 378, 390, 391, 393, 396, 398, 473, 810, 909, 922, 923, 950, 951, 954, 956, 975, 978, 988, 996, 1001, 1003, 1004, 1010], "linearli": [31, 100, 112, 166, 175, 210, 218, 225, 265, 266, 300, 329, 338, 353, 363, 376, 395, 397, 418, 492, 619, 683, 954, 957, 960, 969, 987, 1003], "semi": [31, 232, 300, 308, 319, 356, 361, 378, 465, 481, 512, 565, 567, 653, 704, 799, 833, 837, 867, 868, 869, 877, 952, 957, 960, 976, 991, 996, 1008, 1011], "transpar": [31, 300, 939, 978], "ga\u00ebl": [31, 45, 51, 72, 88, 89, 102, 179, 193, 194, 300, 329, 330, 379, 978], "modifi": [31, 45, 51, 72, 74, 88, 89, 179, 193, 194, 206, 217, 218, 219, 243, 330, 335, 364, 366, 367, 369, 378, 397, 400, 403, 422, 425, 432, 437, 446, 459, 460, 461, 462, 472, 487, 558, 587, 588, 590, 596, 653, 655, 666, 670, 704, 705, 743, 758, 759, 762, 890, 950, 967, 968, 975, 986, 990, 991, 996, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011], "listedcolormap": [31, 118, 279, 284, 287, 292, 300], "make_moon": [31, 44, 61, 225, 256, 292, 293, 300, 362, 943, 1003, 1007], "make_circl": [31, 44, 61, 100, 127, 222, 292, 293, 300, 315, 362, 997, 1004, 1007], "neural_network": [31, 164, 167, 235, 291, 292, 293, 294, 295, 355, 356, 376, 955, 958, 998], "mlpclassifi": [31, 164, 291, 292, 294, 296, 355, 479, 481, 491, 499, 548, 829, 831, 843, 955, 958, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "kneighborsclassifi": [31, 130, 137, 278, 279, 284, 285, 308, 310, 338, 397, 579, 816, 820, 821, 822, 823, 824, 955, 957, 987, 996, 1006, 1008, 1009, 1010, 1011], "decisiontreeclassifi": [31, 109, 110, 112, 118, 130, 260, 343, 344, 347, 378, 397, 530, 532, 534, 536, 538, 541, 608, 797, 881, 882, 884, 885, 886, 944, 955, 970, 997, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010], "adaboostclassifi": [31, 109, 110, 112, 118, 397, 531, 536, 538, 998, 999, 1002, 1003, 1005, 1006, 1009, 1011], "discriminant_analysi": [31, 33, 34, 104, 218, 285, 349, 356, 386, 513, 822, 948, 955, 996, 999, 1000, 1001, 1002, 1003], "quadraticdiscriminantanalysi": [31, 34, 526, 948, 955, 957, 996, 1001, 1003, 1011], "decisionboundarydisplai": [31, 55, 112, 130, 179, 188, 205, 259, 279, 284, 287, 321, 322, 323, 326, 327, 344, 1010], "net": [31, 164, 174, 187, 207, 215, 269, 371, 389, 394, 449, 450, 456, 478, 501, 534, 535, 536, 537, 541, 542, 543, 623, 624, 629, 634, 635, 636, 637, 638, 639, 640, 645, 653, 655, 658, 661, 760, 829, 880, 881, 882, 883, 943, 954, 959, 968, 976, 978, 991, 996, 1001, 1005, 1006, 1008], "adaboost": [31, 108, 118, 133, 164, 496, 497, 530, 531, 536, 679, 769, 799, 880, 881, 976, 991, 998], "qda": [31, 34, 363, 526, 527, 976, 991, 1001], "025": [31, 198, 253, 254, 272, 339, 667, 671], "n_clusters_per_class": [31, 90, 114, 143, 145, 253, 286, 292, 300, 370, 492], "uniform": [31, 37, 53, 121, 122, 125, 142, 150, 155, 158, 175, 176, 210, 222, 225, 228, 264, 279, 282, 283, 288, 292, 299, 301, 302, 310, 324, 367, 370, 390, 417, 418, 528, 546, 547, 587, 588, 605, 616, 626, 627, 631, 645, 653, 654, 655, 676, 697, 698, 703, 720, 721, 723, 725, 726, 728, 760, 776, 783, 785, 808, 809, 812, 815, 816, 823, 824, 838, 850, 852, 861, 897, 911, 943, 944, 953, 954, 957, 1002, 1004, 1006, 1010], "linearly_separ": [31, 292], "ds_cnt": [31, 300, 301], "rdbu": [31, 95, 212, 292, 325, 330], "cm_bright": [31, 292, 300], "ff0000": [31, 284, 292], "0000ff": [31, 284, 292], "ep": [31, 44, 46, 49, 64, 179, 181, 220, 229, 376, 390, 401, 423, 428, 433, 456, 608, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 658, 659, 660, 661, 667, 671, 690, 716, 825, 864, 865, 866, 966, 1011], "lstrip": [31, 44, 61, 225, 292, 300], "829": [31, 35], "plot_classifier_comparison": [31, 35, 300], "8x8": [32, 88, 187, 229, 285, 295, 363, 479, 986], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 57, 71, 72, 88, 136, 137, 144, 187, 203, 218, 229, 230, 254, 255, 258, 264, 271, 278, 280, 285, 293, 295, 313, 314, 371, 391, 424, 509, 510, 511, 512, 576, 577, 615, 616, 645, 665, 666, 667, 668, 980, 984, 985, 986, 987, 988, 1002, 1007], "set_axis_off": 32, "gray_r": [32, 88, 98, 152, 218, 295, 313, 314, 986], "entir": [32, 161, 196, 204, 295, 298, 307, 347, 349, 360, 367, 378, 384, 390, 394, 396, 398, 450, 469, 511, 565, 566, 567, 568, 624, 628, 630, 632, 635, 636, 638, 640, 642, 643, 645, 653, 659, 660, 709, 769, 801, 802, 805, 830, 832, 833, 846, 857, 858, 860, 861, 862, 863, 923, 943, 944, 954, 968, 970, 987, 1005, 1006], "97": [32, 105, 169, 232, 247, 295, 314, 325, 363, 371, 377, 394, 635, 955, 964, 996], "98": [32, 34, 42, 44, 54, 61, 63, 81, 98, 225, 254, 292, 295, 300, 303, 314, 363, 369, 394, 397, 636, 808, 949, 956, 984, 989], "899": [32, 239, 254], "confus": [32, 164, 249, 265, 272, 313, 314, 338, 378, 481, 608, 674, 689, 691, 694, 704, 705, 713, 729, 759, 762, 799, 877, 989, 996, 997, 1001, 1005, 1006, 1008, 1009, 1010, 1011], "disp": [32, 112, 126, 250, 259, 307, 322, 327, 417, 608, 674, 677, 822], "from_predict": [32, 234, 263, 265, 309, 313, 338, 372, 417, 608, 674, 675, 677, 678, 694, 702, 757, 759, 762, 763, 764, 954, 993, 1009, 1010, 1011], "figure_": [32, 167, 235, 306, 308, 372, 417, 608, 609, 674, 675, 677, 678], "confusion_matrix": [32, 226, 250, 313, 314, 674, 689, 729, 796, 954, 989, 997, 1002, 1003, 1006, 1007, 1009], "ground": [32, 40, 45, 49, 57, 60, 77, 81, 85, 98, 157, 180, 190, 196, 197, 247, 259, 339, 378, 389, 390, 679, 680, 681, 684, 688, 689, 690, 691, 693, 694, 697, 698, 699, 703, 704, 705, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 758, 759, 760, 761, 762, 768, 769, 954, 967, 980, 988, 1004], "truth": [32, 40, 45, 49, 57, 60, 77, 81, 85, 98, 103, 157, 166, 180, 190, 196, 197, 247, 259, 339, 378, 389, 390, 679, 680, 681, 684, 688, 689, 690, 691, 693, 694, 697, 698, 699, 701, 703, 704, 705, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 758, 759, 760, 761, 762, 768, 769, 954, 980, 988, 1004, 1010], "gt": [32, 70, 115, 129, 166, 246, 254, 268, 366, 369], "rebuilt": [32, 813, 814], "548": [32, 35], "plot_digits_classif": [32, 35], "oracl": [33, 196, 214, 403, 447, 448, 451, 452, 453, 454, 948, 996], "shrinkag": [33, 76, 78, 81, 82, 103, 124, 164, 287, 403, 447, 448, 451, 452, 453, 454, 455, 457, 458, 516, 520, 526, 538, 539, 772, 950, 976, 991, 996, 1000, 1001, 1003], "lineardiscriminantanalysi": [33, 34, 104, 218, 285, 349, 386, 513, 527, 822, 948, 955, 957, 996, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1010, 1011], "200": [33, 34, 44, 50, 54, 59, 74, 98, 112, 120, 122, 128, 153, 159, 182, 191, 197, 200, 201, 202, 208, 213, 218, 236, 241, 257, 263, 265, 266, 298, 301, 315, 324, 325, 346, 349, 361, 367, 376, 395, 397, 402, 419, 432, 446, 449, 450, 510, 511, 512, 515, 516, 517, 520, 524, 561, 626, 628, 648, 656, 669, 785, 830, 831, 870, 874, 875, 876, 877, 878, 969], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 130, 131, 397, 546], "lsqr": [33, 526, 649, 651, 664, 948, 997, 1003, 1010], "clf2": [33, 130, 131, 367, 384, 397, 546], "store_precis": [33, 78, 447, 448, 451, 452, 453, 454], "assume_cent": [33, 78, 392, 403, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457], "clf3": [33, 130, 131, 367, 397, 546], "covariance_estim": [33, 526, 948, 1008], "features_samples_ratio": 33, "navi": [33, 69, 78, 99, 104, 105, 128, 175, 199, 207, 220, 242, 243, 244, 247, 263, 265, 271, 281, 288, 315, 333, 346], "gold": [33, 190, 197, 199, 202, 206, 210, 213, 242, 247, 263, 282, 324, 371], "673": [33, 35, 85, 371], "plot_lda": [33, 35], "doubl": [34, 268, 366, 378, 395, 400, 515, 517, 524, 676, 813, 814, 824, 938, 944, 969, 970, 996, 1006, 1007], "deviat": [34, 60, 79, 113, 116, 117, 118, 146, 149, 154, 156, 158, 166, 175, 202, 253, 254, 255, 256, 257, 259, 282, 283, 298, 303, 358, 362, 363, 370, 374, 378, 388, 394, 397, 428, 450, 478, 488, 489, 490, 491, 493, 494, 495, 499, 501, 502, 507, 529, 571, 588, 611, 621, 622, 648, 699, 727, 819, 842, 843, 853, 861, 862, 863, 950, 954, 960, 964, 987, 1002, 1003, 1004, 1007, 1008, 1009], "own": [34, 167, 214, 246, 276, 278, 315, 339, 354, 360, 368, 369, 370, 373, 374, 381, 389, 390, 402, 406, 419, 432, 510, 534, 541, 623, 770, 771, 815, 816, 817, 819, 821, 823, 824, 825, 880, 882, 898, 903, 922, 950, 956, 957, 960, 969, 978, 988, 989, 1003, 1004, 1006], "mpl": [34, 241, 242, 243, 247, 298], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "dataset_fixed_cov": 34, "dim": [34, 205, 229, 279, 284, 285, 287, 321, 322, 504, 676], "dataset_cov": 34, "matric": [34, 40, 79, 81, 95, 201, 242, 243, 245, 246, 247, 276, 289, 307, 317, 338, 339, 358, 360, 367, 368, 376, 377, 378, 389, 390, 391, 392, 393, 395, 398, 399, 405, 428, 429, 431, 442, 451, 459, 460, 461, 511, 512, 515, 517, 518, 521, 524, 526, 527, 532, 533, 540, 543, 558, 559, 566, 620, 635, 641, 649, 651, 664, 729, 735, 743, 749, 753, 754, 755, 756, 765, 770, 771, 799, 817, 820, 825, 836, 840, 842, 845, 848, 850, 851, 853, 855, 857, 859, 861, 862, 863, 864, 865, 874, 875, 877, 878, 888, 909, 915, 920, 925, 927, 928, 944, 948, 951, 952, 953, 955, 957, 958, 966, 968, 969, 974, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "linalg": [34, 54, 77, 78, 81, 101, 103, 105, 182, 241, 242, 243, 246, 247, 366, 371, 395, 429, 430, 431, 440, 509, 512, 518, 521, 634, 649, 651, 664, 668, 672, 907], "plot_data": 34, "fig_index": 34, "splot": [34, 242, 247], "tp": [34, 390, 688, 694, 706, 757, 758, 759, 762, 884, 954], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 166, 325, 361], "000099": 34, "pcolormesh": [34, 127, 138, 179, 279, 284, 321, 325, 329, 608], "white": [34, 57, 59, 95, 125, 154, 166, 210, 217, 282, 295, 300, 318, 324, 395, 398, 400, 602, 970, 996, 999, 1002, 1006, 1010], "means_": [34, 241, 242, 243, 244, 246, 247, 526, 527, 770, 771], "yellow": [34, 91, 325, 955], "markers": [34, 49, 57, 60, 62, 63, 122, 152, 156, 228, 310], "markeredgecolor": [34, 49, 60, 62, 63], "plot_ellips": [34, 241], "cov": [34, 81, 85, 112, 246, 366, 378, 381, 383, 393, 403, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 496, 509, 511, 518, 525], "eigh": [34, 241, 242, 243, 246, 247, 395, 402, 510, 512, 1011], "arctan": [34, 242, 247, 362, 495], "180": [34, 241, 242, 243, 246, 247, 285, 289, 371, 400, 479], "ell": [34, 241, 242, 243, 247, 387], "patch": [34, 50, 241, 242, 243, 246, 247, 251, 361, 369, 376, 395, 397, 532, 533, 560, 561, 564, 996, 1004], "ellips": [34, 225, 241, 242, 243, 246, 247, 960], "set_clip_box": [34, 241, 242, 243, 246, 247], "set_alpha": [34, 109, 241, 242, 243, 246, 247], "add_artist": [34, 218, 241, 242, 243, 246, 247], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 127, 218, 339, 374, 386, 393, 402, 429, 431, 459, 460, 462, 509, 510, 511, 512, 516, 517, 518, 521, 523, 526, 527, 641, 649, 650, 651, 662, 663, 664, 832, 909, 948, 989, 998, 1002, 1003, 1009, 1011], "store_covari": [34, 526, 527, 1001, 1003], "tight": [34, 40, 105, 112, 118, 125, 138, 142, 181, 183, 188, 189, 190, 200, 201, 205, 208, 210, 213, 219, 222, 245, 276, 282, 283, 287, 288, 321, 324, 325, 328, 329, 330, 344, 559, 669, 1008], "356": [34, 35, 962], "plot_lda_qda": [34, 35], "763": 35, "auto_examples_classif": 35, "06": [35, 52, 67, 74, 82, 84, 139, 166, 170, 187, 195, 196, 215, 256, 257, 272, 295, 300, 332, 336, 339, 341, 371, 459, 460, 461, 621, 622, 666, 670, 770, 771, 772, 785, 881, 950, 964, 966], "handwritten": [36, 67, 164, 216, 221, 223, 229, 254, 294, 295, 313, 314, 359, 390, 397, 425, 479, 518, 521, 526, 543, 665, 666, 667, 668, 669, 680, 681, 693, 712, 766, 768, 822, 834, 843, 853, 865, 951, 957, 980, 991], "hierarch": [36, 40, 54, 67, 164, 169, 310, 378, 398, 420, 422, 424, 481, 489, 491, 499, 507, 524, 706, 826, 853, 971, 975, 990, 991, 996, 999, 1000], "coin": [36, 67, 164, 390, 398, 420, 440, 966, 988], "shift": [36, 44, 67, 164, 175, 220, 246, 281, 295, 298, 392, 396, 419, 426, 436, 439, 447, 489, 492, 666, 670, 819, 842, 964, 990, 991, 996, 1000, 1004], "chanc": [36, 49, 67, 164, 196, 204, 211, 214, 256, 262, 265, 266, 339, 349, 365, 390, 394, 680, 681, 684, 692, 730, 732, 761, 768, 798, 954, 962, 970], "agglom": [36, 44, 47, 67, 164, 390, 420, 424, 479, 668, 753, 826, 999], "bisect": [36, 67, 164, 422, 425, 489, 1010], "quantiz": [36, 67, 164, 360, 361, 390, 422, 425, 427, 483, 754, 838, 928, 964], "birch": [36, 44, 67, 164, 310, 355, 378, 427, 489, 990, 991, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "toi": [36, 49, 53, 67, 85, 99, 113, 130, 131, 164, 178, 186, 210, 224, 239, 241, 293, 322, 332, 359, 371, 376, 397, 398, 419, 420, 421, 423, 426, 427, 428, 430, 436, 447, 489, 491, 499, 540, 616, 654, 701, 731, 771, 819, 826, 834, 853, 876, 951, 953, 954, 960, 964, 991], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 66, 67, 164, 169, 419, 420, 424, 441, 489, 491, 499, 853, 974, 988, 999, 1004, 1007], "dbscan": [36, 44, 64, 67, 164, 376, 378, 428, 430, 433, 489, 680, 681, 693, 712, 766, 768, 825, 853, 957, 990, 991, 996, 998, 1000, 1001, 1003, 1004, 1005], "optic": [36, 44, 67, 164, 310, 359, 401, 423, 433, 434, 435, 479, 990, 991, 1005, 1009, 1010, 1011], "affin": [36, 44, 67, 164, 298, 358, 367, 378, 389, 395, 419, 420, 424, 430, 432, 440, 489, 512, 668, 672, 680, 681, 693, 712, 766, 768, 868, 948, 951, 954, 990, 991, 996, 997, 1000, 1006, 1007, 1009, 1011], "propag": [36, 67, 164, 312, 319, 361, 389, 419, 432, 479, 489, 491, 680, 681, 689, 690, 693, 694, 712, 766, 768, 833, 847, 867, 868, 869, 958, 976, 990, 991, 996, 1008, 1011], "agglomer": [36, 67, 164, 358, 390, 398, 424, 479, 577, 583, 622, 772, 777, 833, 991], "unstructur": [36, 67, 164, 294, 390, 420, 424, 441, 480, 507, 826, 966, 978, 1000], "dendrogram": [36, 67, 164, 169, 390, 420, 424, 481, 1008], "pictur": [36, 67, 164, 229, 247, 361, 379, 390, 395, 398, 440, 470, 471, 498, 975], "greek": [36, 67, 164, 390, 440], "silhouett": [36, 38, 49, 57, 67, 164, 339, 366, 425, 489, 765, 766, 996, 1000], "embed": [36, 44, 46, 67, 115, 149, 164, 216, 219, 221, 223, 224, 239, 276, 285, 371, 378, 389, 390, 420, 430, 440, 466, 479, 521, 526, 543, 559, 616, 665, 666, 667, 668, 669, 670, 671, 672, 673, 822, 834, 843, 864, 865, 866, 946, 957, 960, 966, 971, 990, 991, 996, 997, 1007, 1008, 1010], "explor": [37, 113, 114, 221, 222, 257, 264, 265, 308, 325, 339, 349, 360, 363, 365, 371, 384, 390, 397, 450, 772, 775, 782, 943, 950, 951, 953, 959, 961, 962, 964, 978, 983, 989, 1002], "uniformli": [37, 122, 141, 225, 241, 306, 367, 493, 494, 495, 528, 619, 776, 783, 785, 852, 943, 944, 954, 957, 964, 1000, 1005], "divid": [37, 48, 90, 95, 143, 154, 196, 241, 349, 362, 363, 387, 390, 394, 395, 447, 448, 449, 450, 451, 452, 453, 454, 489, 496, 511, 518, 627, 628, 631, 632, 633, 641, 642, 653, 654, 655, 695, 701, 709, 713, 731, 767, 769, 830, 831, 874, 877, 909, 912, 913, 943, 951, 953, 954, 957, 964, 968, 989, 996, 1003, 1004, 1007], "randomli": [37, 48, 50, 60, 87, 92, 113, 125, 161, 164, 200, 213, 229, 232, 246, 251, 258, 262, 274, 313, 349, 354, 374, 376, 377, 390, 394, 397, 400, 427, 436, 489, 492, 496, 500, 508, 514, 522, 523, 528, 536, 537, 540, 541, 542, 587, 588, 648, 656, 667, 671, 692, 770, 771, 829, 866, 880, 881, 882, 883, 953, 955, 957, 960, 962, 966, 970, 987, 989, 1007], "quiroz": [37, 175, 257, 259, 338, 339, 340], "fundament": [37, 49, 80, 339, 364, 377, 393, 473, 515, 517, 524, 684, 950, 954], "homogen": [37, 38, 39, 44, 46, 49, 57, 339, 361, 376, 378, 392, 397, 400, 591, 680, 693, 706, 711, 712, 732, 768, 951, 952, 954, 1005], "frequent": [37, 162, 259, 265, 266, 339, 356, 363, 366, 398, 528, 567, 607, 823, 846, 850, 861, 944, 946, 954, 968, 972, 975], "ari": [37, 57, 339, 390, 681, 1001, 1007], "mutual": [37, 38, 49, 57, 140, 147, 164, 397, 399, 569, 572, 573, 576, 577, 583, 584, 585, 586, 680, 681, 691, 730, 732, 761, 768, 950, 954, 955, 996, 1002], "mi": [37, 141, 390, 584, 585, 680, 730, 732, 944, 968], "theoret": [37, 149, 389, 390, 397, 425, 427, 530, 531, 616, 680, 701, 731, 872, 943, 951, 953, 954, 956, 966, 968, 969, 977, 978], "nmi": [37, 390, 693, 711, 712, 732], "ami": [37, 49, 57, 390, 680], "score_func": [37, 569, 572, 573, 575, 576, 577, 717, 996, 998], "rand_scor": [37, 390, 691, 954, 1008], "adjusted_rand_scor": [37, 38, 49, 57, 339, 390, 680, 691, 717, 732, 761, 954, 1009], "mutual_info_scor": [37, 390, 680, 954, 1004, 1007, 1008], "normalized_mutual_info_scor": [37, 390, 711, 730, 768, 954, 1004, 1010], "adjusted_mutual_info_scor": [37, 38, 49, 57, 390, 681, 691, 730, 732, 761, 954, 996, 1004, 1008], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 60, 172, 339], "clase": 37, "seaborn": [37, 109, 111, 166, 175, 246, 256, 279, 366, 381, 383, 974], "sn": [37, 109, 111, 166, 175, 246, 256, 279], "color_palett": [37, 109, 111, 246], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 60, 78, 80, 155, 156, 278, 316, 328], "refer": [37, 38, 59, 62, 70, 123, 129, 146, 158, 214, 258, 263, 286, 298, 306, 307, 308, 309, 310, 339, 354, 356, 358, 364, 366, 367, 369, 370, 371, 372, 373, 376, 377, 378, 379, 381, 384, 391, 401, 402, 416, 417, 418, 419, 421, 423, 425, 426, 428, 429, 430, 431, 432, 435, 440, 441, 442, 445, 447, 450, 451, 452, 453, 475, 480, 488, 490, 492, 493, 494, 495, 496, 497, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 521, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 567, 570, 571, 572, 579, 584, 585, 587, 588, 591, 596, 599, 600, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 624, 626, 628, 630, 632, 633, 635, 638, 640, 642, 643, 644, 645, 648, 650, 652, 653, 655, 656, 659, 660, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 709, 710, 711, 712, 713, 715, 716, 718, 731, 733, 734, 744, 758, 760, 761, 763, 764, 765, 766, 768, 770, 771, 772, 774, 775, 776, 785, 793, 794, 795, 796, 797, 798, 800, 803, 804, 808, 809, 810, 812, 818, 819, 820, 822, 829, 830, 831, 839, 840, 849, 850, 860, 865, 866, 867, 868, 869, 872, 874, 875, 877, 878, 880, 881, 882, 883, 897, 909, 965, 975, 980, 984, 988, 989, 991, 996, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "bbox_to_anchor": [37, 158, 261, 332], "satur": [37, 166, 298], "uniform_labelings_scor": 37, "nwith": [37, 60, 339], "constantli": [37, 196, 978], "unbound": [37, 953, 1010], "cardin": [37, 116, 117, 123, 168, 390, 397, 441, 530, 531, 534, 535, 536, 537, 541, 542, 543, 656, 846, 880, 881, 882, 883, 954, 955, 962, 964, 1010], "why": [37, 52, 95, 166, 168, 172, 185, 253, 256, 338, 339, 366, 373, 378, 390, 392, 395, 401, 423, 425, 429, 954, 956, 969, 984, 987, 999], "chart": [37, 258, 261, 955, 982, 999], "henc": [37, 59, 71, 125, 166, 200, 229, 265, 325, 338, 339, 353, 361, 367, 369, 371, 378, 390, 394, 397, 398, 464, 485, 516, 518, 519, 520, 540, 560, 567, 620, 623, 629, 637, 639, 649, 664, 680, 681, 685, 691, 706, 732, 761, 768, 790, 791, 808, 809, 810, 811, 812, 836, 845, 848, 951, 953, 954, 955, 960, 961, 964, 975, 1003, 1004, 1007, 1008, 1010], "safe": [37, 166, 185, 339, 366, 367, 390, 391, 413, 485, 486, 556, 565, 568, 749, 753, 866, 926, 957, 1002, 1003, 1004, 1009, 1010], "stabil": [37, 114, 166, 200, 218, 261, 298, 339, 378, 387, 627, 631, 647, 811, 830, 831, 849, 860, 908, 944, 950, 953, 964, 975, 980, 996, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mislead": [37, 116, 117, 123, 166, 380, 397, 530, 531, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 991, 1009], "meaning": [37, 222, 285, 340, 387, 394, 398, 399, 400, 525, 704, 705, 713, 758, 759, 762, 822, 958, 968, 969, 996], "396": [37, 67, 69, 363, 989], "plot_adjusted_for_chance_measur": [37, 67], "brendan": [38, 419, 432], "frei": [38, 419, 432, 1006], "delbert": [38, 419, 432], "dueck": [38, 419, 432], "messag": [38, 44, 61, 69, 95, 338, 339, 361, 364, 365, 366, 369, 370, 373, 374, 390, 419, 432, 516, 520, 525, 551, 604, 688, 772, 775, 776, 785, 797, 800, 802, 822, 830, 831, 891, 892, 893, 896, 899, 919, 938, 954, 964, 996, 1000, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "feb": [38, 419, 432], "affinitypropag": [38, 44, 310, 390, 996, 999, 1000, 1004, 1007, 1009, 1010, 1011], "labels_tru": [38, 49, 63, 390, 680, 681, 690, 691, 693, 706, 711, 712, 730, 732, 761, 768], "af": 38, "prefer": [38, 44, 247, 265, 298, 349, 353, 354, 355, 364, 366, 367, 378, 390, 394, 395, 397, 398, 419, 432, 449, 450, 456, 464, 485, 486, 604, 609, 610, 631, 635, 636, 701, 703, 732, 733, 822, 848, 872, 873, 914, 943, 946, 948, 950, 954, 959, 969, 970, 974, 987, 997, 1003, 1005, 1009, 1010], "cluster_centers_indic": [38, 432], "cluster_centers_indices_": [38, 419], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 57, 60, 61, 62, 64, 66, 310, 339, 366, 378, 390, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 433, 988, 1001], "n_clusters_": [38, 49, 62, 420, 424], "homogeneity_scor": [38, 49, 57, 339, 390, 693, 711, 768, 954], "completeness_scor": [38, 49, 57, 307, 339, 390, 711, 712, 768, 954], "silhouette_scor": [38, 49, 57, 59, 339, 366, 390, 996, 1000, 1002, 1004, 1006, 1010], "sqeuclidean": [38, 428, 435, 753, 754, 755], "872": [38, 962], "912": 38, "871": [38, 79, 80, 392, 452], "753": [38, 338], "cycler": 38, "viridi": [38, 276, 674], "class_memb": 38, "cluster_cent": [38, 60, 62, 63, 439], "399": [38, 67], "plot_affinity_propag": [38, 67, 419, 432], "impos": [39, 126, 190, 376, 390, 395, 397, 398, 504, 634, 950], "simpli": [39, 85, 127, 149, 157, 221, 232, 265, 289, 308, 309, 353, 361, 366, 367, 370, 376, 378, 392, 393, 394, 395, 397, 398, 462, 672, 737, 740, 840, 911, 946, 954, 955, 956, 957, 968, 981, 989, 1003, 1004, 1005], "There": [39, 46, 149, 214, 221, 234, 247, 251, 253, 256, 338, 359, 361, 363, 366, 367, 370, 371, 376, 378, 381, 387, 389, 390, 395, 397, 398, 399, 430, 440, 511, 530, 531, 536, 537, 565, 566, 568, 583, 622, 944, 950, 951, 952, 953, 954, 957, 961, 964, 968, 969, 970, 973, 977, 988, 996, 1004], "singl": [39, 48, 52, 53, 57, 60, 61, 71, 108, 111, 118, 119, 120, 128, 133, 146, 149, 155, 161, 164, 167, 169, 172, 196, 198, 235, 237, 246, 265, 294, 310, 325, 338, 339, 340, 344, 346, 349, 353, 354, 360, 361, 366, 370, 372, 373, 374, 376, 377, 378, 388, 389, 391, 393, 394, 395, 397, 398, 399, 413, 416, 419, 420, 424, 425, 427, 432, 442, 444, 445, 470, 471, 473, 483, 486, 511, 530, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 559, 569, 576, 577, 579, 583, 604, 609, 611, 620, 643, 644, 650, 653, 654, 655, 667, 669, 671, 686, 697, 698, 699, 700, 711, 712, 713, 716, 749, 760, 770, 771, 772, 775, 776, 785, 792, 795, 796, 798, 799, 802, 810, 813, 814, 818, 830, 831, 832, 842, 843, 846, 847, 848, 853, 867, 868, 880, 881, 882, 883, 888, 920, 922, 941, 943, 949, 950, 951, 954, 955, 957, 959, 961, 962, 964, 968, 969, 970, 974, 978, 980, 987, 989, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "unstabl": [39, 65, 166, 390, 392, 393, 666, 670, 908, 909, 970, 1000, 1001, 1003, 1008, 1010], "quickli": [39, 235, 293, 306, 363, 366, 394, 397, 669, 950, 957, 958, 978, 989, 1007], "fight": [39, 978], "percol": 39, "distanc": [39, 40, 59, 60, 64, 66, 76, 80, 82, 100, 161, 164, 169, 182, 197, 217, 219, 222, 229, 276, 278, 279, 284, 286, 288, 289, 298, 306, 310, 338, 339, 353, 363, 374, 376, 378, 387, 390, 392, 395, 396, 400, 401, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 433, 434, 435, 436, 437, 439, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 515, 517, 524, 584, 585, 592, 596, 597, 599, 600, 605, 635, 636, 643, 645, 651, 652, 653, 654, 655, 665, 666, 667, 669, 670, 671, 672, 673, 676, 679, 700, 709, 733, 735, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 753, 754, 755, 756, 765, 766, 769, 802, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 852, 866, 870, 872, 874, 876, 877, 878, 880, 881, 882, 883, 944, 948, 951, 952, 954, 960, 964, 966, 968, 969, 975, 987, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "merg": [39, 41, 46, 51, 309, 364, 366, 368, 373, 376, 379, 390, 419, 420, 421, 424, 441, 791, 988, 996, 1003], "exagger": [39, 669, 951], "behaviour": [39, 100, 197, 198, 214, 327, 366, 378, 390, 397, 536, 537, 541, 542, 579, 870, 880, 881, 927, 943, 944, 954, 964, 1004, 1007, 1008], "shortest": [39, 370, 374, 665, 914, 951, 1009], "mechan": [39, 334, 338, 367, 390, 398, 442, 832, 952, 970, 978], "resembl": 39, "brittl": [39, 390], "pronounc": [39, 40, 52, 154], "kneighbors_graph": [39, 44, 61, 66, 276, 378, 390, 420, 424, 815, 816, 817, 819, 821, 823, 824, 825, 827, 957, 996, 1000, 1005], "geometri": [39, 390, 951, 957], "instabl": [39, 166, 286, 430, 512, 516, 520, 672, 1003, 1006, 1009], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 55, 61, 66, 378, 390, 419, 421, 424, 988, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "1500": [39, 50, 56, 61, 66, 91, 217, 221, 241], "knn_graph": 39, "include_self": [39, 44, 66, 826, 827, 1000], "264": [39, 67, 276], "plot_agglomerative_clust": [39, 67], "waveform": 40, "euclidean": [40, 57, 182, 229, 276, 284, 306, 339, 387, 389, 390, 395, 396, 397, 398, 400, 419, 420, 423, 424, 428, 430, 435, 438, 441, 508, 514, 566, 592, 596, 599, 600, 653, 655, 667, 669, 672, 673, 676, 737, 738, 744, 745, 746, 747, 753, 754, 755, 756, 765, 766, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 866, 944, 948, 952, 955, 957, 966, 975, 1000, 1003, 1004, 1005, 1006], "cityblock": [40, 44, 390, 428, 435, 737, 753, 754, 755, 957], "invari": [40, 363, 378, 390, 400, 591, 666, 722, 789, 790, 950, 951, 954, 969, 975, 1004, 1007, 1008, 1009], "ie": [40, 65, 96, 419, 680, 743, 950, 964], "inter": [40, 116, 349, 397, 692, 915], "character": [40, 214, 343, 390, 394, 951], "ill": [40, 81, 201, 456, 627, 628, 631, 632, 633, 659, 660, 950, 953, 988, 1006], "recov": [40, 64, 81, 96, 97, 103, 119, 149, 195, 196, 217, 340, 392, 396, 399, 402, 510, 536, 950, 951, 953, 975, 988, 1002], "put": [40, 57, 138, 149, 151, 230, 236, 241, 292, 300, 310, 318, 329, 330, 335, 355, 367, 369, 370, 373, 400, 422, 425, 437, 492, 591, 624, 638, 770, 850, 861, 874, 875, 876, 877, 878, 899, 944, 951, 953, 954, 955, 961, 964, 977, 981, 983, 989, 1008], "cc": [40, 364], "patheffect": 40, "pairwise_dist": [40, 378, 390, 401, 420, 423, 424, 428, 435, 665, 673, 737, 746, 754, 755, 765, 766, 817, 819, 821, 825, 952, 996, 1000, 1002, 1004, 1005, 1007, 1008], "sqr": 40, "sign": [40, 78, 85, 96, 99, 112, 180, 246, 292, 333, 366, 390, 392, 395, 398, 453, 521, 559, 566, 583, 612, 613, 635, 636, 643, 645, 651, 652, 653, 654, 710, 717, 872, 876, 907, 909, 921, 950, 954, 959, 964, 968, 969, 988, 996, 1000, 1005, 1009, 1011], "phi": [40, 395, 718, 839, 946, 954, 964, 969], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 61, 62, 225], "f781bf": [40, 44, 61, 62], "set_label": [40, 152, 229], "avg_dist": [40, 756], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 65], "cividi": 40, "vmin": [40, 81, 95, 98, 106, 152, 155, 175, 187, 212, 245, 251, 294, 325], "45": [40, 63, 72, 142, 154, 168, 185, 196, 214, 263, 267, 268, 314, 325, 349, 394, 397, 398, 541, 542, 604, 611, 763, 770, 876, 944, 954, 962, 973, 985, 992, 996, 999], "interclass": 40, "plot_agglomerative_clustering_metr": [40, 67], "hierarchi": [41, 169, 428, 434, 441, 959, 988], "plot_dendrogram": 41, "kwarg": [41, 98, 367, 372, 404, 417, 442, 512, 515, 517, 594, 608, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 675, 676, 677, 678, 717, 813, 814, 832, 833, 837, 887, 906, 1003, 1007, 1009], "children_": [41, 420, 424, 441], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 127, 343, 347, 390, 397, 401, 420, 421, 422, 423, 424, 428, 435, 441, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 880, 881, 882, 883, 884, 885, 957, 970, 999, 1001, 1003, 1007, 1010], "linkage_matrix": 41, "column_stack": [41, 292, 300], "distances_": [41, 420, 424, 1008], "distance_threshold": [41, 420, 424, 1005, 1008], "truncate_mod": 41, "parenthesi": [41, 366], "plot_agglomerative_dendrogram": [41, 67], "scalabl": [42, 44, 61, 164, 171, 173, 258, 339, 366, 390, 397, 398, 426, 468, 566, 617, 799, 834, 843, 845, 872, 874, 877, 878, 946, 951, 954, 967, 969, 978, 996, 1000, 1006, 1007, 1010, 1011], "hundr": [42, 121, 218, 302, 361, 394, 397, 538, 539, 951, 1007], "thousand": [42, 229, 231, 302, 339, 361, 390, 397, 830, 831, 877, 951, 989, 1005, 1007], "million": [42, 55, 154, 172, 398, 400, 669, 951, 969, 978, 1010, 1011], "chose": [42, 166, 984], "usag": [42, 53, 70, 73, 84, 99, 120, 143, 166, 226, 230, 250, 279, 285, 287, 294, 321, 340, 353, 365, 366, 367, 368, 372, 373, 375, 378, 379, 390, 394, 395, 400, 401, 423, 428, 466, 586, 625, 635, 636, 637, 643, 645, 646, 653, 654, 655, 656, 657, 753, 756, 765, 766, 872, 880, 881, 882, 883, 909, 943, 946, 953, 954, 955, 957, 969, 976, 980, 984, 991, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "enjoi": 42, "edit": [42, 363, 365, 366, 368, 369, 373, 376, 381, 507, 511, 803, 948, 950, 955, 961, 989], "158": [42, 397, 646], "73": [42, 260, 295, 314, 377, 772, 785, 819, 881, 964, 985, 996, 998], "manojkumarsivaraj334": 42, "joblib": [42, 54, 71, 258, 307, 361, 364, 366, 368, 374, 376, 378, 381, 383, 384, 389, 391, 401, 416, 420, 423, 424, 426, 428, 430, 435, 436, 439, 442, 445, 450, 485, 508, 512, 513, 514, 516, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 609, 611, 616, 624, 628, 630, 632, 634, 635, 636, 638, 640, 642, 643, 645, 653, 656, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 819, 821, 823, 824, 826, 827, 832, 833, 834, 835, 867, 868, 922, 924, 939, 954, 975, 996, 997, 999, 1001, 1003, 1004, 1005, 1007, 1008], "cpu_count": [42, 922], "n_center": [42, 489], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 164, 277, 290, 301, 310, 339, 362, 390, 421, 422, 425, 426, 427, 430, 437, 438, 440, 481, 526, 820, 976, 991, 996, 1000, 1003, 1008], "subcluster_centers_": [42, 421], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 63], "256": [42, 48, 53, 121, 339, 361, 390, 397, 427, 446, 540, 829, 860, 870, 989, 1010], "max_no_improv": [42, 60, 63, 427, 514, 515, 516, 523, 1010, 1011], "t_mini_batch": [42, 63], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 57, 59, 60, 62, 63, 95, 310, 339, 419, 422, 425, 426, 427, 988], "485": [42, 67, 673], "plot_birch_vs_minibatchkmean": [42, 67], "bisectingkmean": [43, 390, 1010], "__doc__": [43, 154, 234, 244, 378], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 61], "variant": [43, 95, 160, 163, 164, 256, 309, 310, 339, 340, 371, 390, 393, 395, 398, 400, 427, 467, 470, 471, 489, 492, 520, 536, 537, 542, 592, 596, 599, 600, 604, 607, 615, 616, 618, 622, 649, 680, 773, 777, 778, 779, 780, 789, 795, 816, 834, 869, 944, 950, 951, 952, 953, 954, 956, 957, 968, 975, 989, 996, 1004], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 373, 808, 809, 810, 811, 812, 999, 1004], "flat": [43, 95, 101, 217, 218, 219, 254, 390, 398, 419, 426, 439, 486, 988, 996, 997], "label_out": 43, "445": [43, 67, 158, 962], "plot_bisect_kmean": [43, 67], "null": [44, 70, 166, 168, 256, 262, 394, 625, 646, 657, 680, 706, 732, 768, 798, 950, 951, 954, 969, 1006], "mismatch": [44, 953, 1005], "warn": [44, 56, 61, 71, 95, 196, 211, 218, 219, 220, 259, 293, 294, 302, 307, 310, 353, 356, 366, 368, 369, 370, 378, 398, 402, 425, 427, 437, 473, 503, 510, 514, 523, 527, 530, 531, 534, 535, 536, 537, 541, 542, 543, 548, 549, 550, 551, 552, 554, 579, 607, 613, 647, 667, 670, 671, 688, 689, 704, 705, 713, 758, 759, 762, 808, 809, 810, 812, 837, 838, 875, 876, 877, 878, 880, 881, 882, 883, 892, 893, 899, 909, 922, 924, 940, 941, 943, 954, 964, 987, 996, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "noisy_circl": [44, 61], "noisy_moon": [44, 61], "no_structur": [44, 61], "anisotropicli": [44, 56, 61], "170": [44, 56, 61, 262, 272, 371], "x_aniso": [44, 56, 61], "aniso": [44, 61], "plot_num": [44, 61, 225], "default_bas": [44, 61], "quantil": [44, 53, 62, 90, 110, 112, 164, 174, 215, 298, 301, 302, 376, 397, 417, 418, 436, 496, 529, 537, 539, 634, 647, 698, 720, 723, 725, 796, 838, 850, 851, 852, 861, 862, 954, 964, 976, 991, 996, 1000, 1003, 1005, 1009, 1010], "damp": [44, 390, 419, 432], "min_sampl": [44, 49, 64, 376, 378, 390, 401, 423, 428, 434, 435, 648, 950, 1005, 1009], "xi": [44, 64, 94, 363, 390, 393, 398, 428, 434, 486, 968, 1007], "min_cluster_s": [44, 64, 428, 434, 1005], "220": [44, 996], "i_dataset": [44, 61, 225], "algo_param": [44, 61], "param": [44, 60, 61, 70, 121, 123, 124, 217, 231, 254, 256, 264, 267, 268, 280, 293, 366, 367, 378, 397, 400, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 783, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 1002, 1006, 1007, 1009, 1010], "estimate_bandwidth": [44, 62, 390, 426, 439], "symmetr": [44, 122, 169, 198, 378, 388, 390, 430, 440, 441, 452, 496, 504, 506, 667, 671, 672, 680, 681, 691, 692, 693, 699, 703, 711, 712, 730, 732, 738, 760, 768, 770, 771, 940, 943, 950, 954, 957], "meanshift": [44, 310, 390, 419, 999, 1000, 1001, 1004, 1006, 1007, 1010, 1011], "bin_seed": [44, 62, 426, 439, 1007], "two_mean": 44, "spectralclust": [44, 310, 390, 419, 957, 996, 997, 1006, 1008, 1009, 1010, 1011], "nearest_neighbor": [44, 430, 668], "average_linkag": 44, "gmm": [44, 164, 240, 242, 245, 246, 247, 248, 481, 489, 771, 790, 953, 996, 997, 1000, 1001, 1002], "gaussianmixtur": [44, 242, 243, 244, 245, 246, 247, 396, 770, 1002, 1004, 1005, 1009, 1010], "covariance_typ": [44, 242, 243, 245, 246, 247, 770, 771], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 61, 294, 373, 374], "catch_warn": [44, 61, 293, 294], "filterwarn": [44, 61, 211, 293, 294, 366, 964], "fulli": [44, 116, 122, 353, 360, 361, 378, 396, 397, 399, 422, 425, 534, 535, 541, 542, 880, 881, 882, 883, 884, 886, 943, 950, 959, 967, 974, 1009, 1010], "t1": [44, 46, 61, 211, 219, 222, 225], "ff7f00": [44, 61, 225], "4daf4a": [44, 61], "a65628": [44, 61], "984ea3": [44, 61], "999999": [44, 61], "e41a1c": [44, 61], "dede00": [44, 61, 62], "000000": [44, 166, 185, 214, 256, 302, 712], "transax": [44, 61, 166, 221, 225, 243, 284, 300], "plot_cluster_comparison": [44, 67], "firstli": [45, 98, 353, 376, 634, 989], "bad": [45, 59, 60, 150, 338, 349, 366, 390, 400, 669, 721, 943, 950, 951, 956, 962, 988, 996], "eight": [45, 989], "deliv": [45, 353, 978], "though": [45, 146, 172, 175, 262, 281, 300, 302, 339, 340, 349, 353, 360, 363, 366, 367, 377, 378, 390, 395, 396, 397, 398, 399, 676, 778, 780, 872, 943, 944, 946, 951, 954, 957, 964, 968, 989, 1004], "3d": [45, 48, 66, 89, 101, 102, 193, 217, 219, 221, 398, 483, 563, 919, 1003, 1004, 1006], "mplot3d": [45, 66, 89, 101, 102, 167, 193, 217, 219], "noqa": [45, 66, 89, 101, 102, 122, 161, 162, 167, 193, 217, 219, 267, 268, 308, 369, 555, 557, 604, 775, 776, 943, 1005], "f401": [45, 66, 89, 101, 102, 167, 193, 217, 219], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 129, 166, 167, 233, 300, 308, 349, 397, 539, 710, 838, 943, 954, 964, 968, 1007, 1008], "elev": [45, 66, 89, 101, 102, 167, 193, 217, 221], "azim": [45, 66, 89, 101, 102, 167, 193, 217, 221], "134": [45, 53, 102, 121, 256, 999], "xaxi": [45, 89, 101, 102, 193, 217, 219, 222, 276, 281, 338], "set_ticklabel": [45, 89, 101, 102, 193, 338], "zaxi": [45, 89, 101, 102, 193, 217], "petal": [45, 89, 104, 106, 118, 238, 308, 363, 391, 885, 970, 986, 987], "sepal": [45, 89, 104, 106, 118, 151, 179, 238, 308, 322, 363, 964, 986, 987], "length": [45, 69, 88, 89, 91, 104, 106, 118, 125, 149, 150, 151, 154, 155, 157, 172, 179, 232, 235, 238, 308, 322, 340, 359, 363, 366, 373, 374, 378, 391, 395, 397, 398, 400, 424, 467, 485, 486, 489, 492, 500, 528, 540, 558, 559, 566, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 609, 623, 624, 627, 628, 629, 630, 631, 633, 634, 637, 638, 639, 640, 658, 661, 756, 772, 775, 776, 785, 799, 801, 804, 805, 807, 815, 816, 817, 819, 821, 859, 885, 892, 894, 898, 914, 915, 925, 928, 953, 960, 964, 980, 986, 987, 996, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008], "set_zlabel": [45, 89, 167, 193], "setosa": [45, 89, 102, 104, 265, 266, 363, 481, 980, 987], "versicolour": [45, 89, 102, 104, 363, 987], "virginica": [45, 89, 102, 104, 265, 266, 363, 481, 954, 987], "text3d": [45, 102], "reorder": [45, 102, 378, 674, 694, 975, 1004], "368": [45, 67], "plot_cluster_iri": [45, 67], "voxel": [46, 65, 562], "multipl": [46, 68, 75, 91, 94, 105, 117, 118, 164, 166, 190, 230, 256, 268, 278, 306, 353, 354, 355, 360, 362, 363, 366, 367, 368, 369, 370, 376, 378, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 423, 438, 442, 444, 445, 447, 452, 465, 468, 469, 472, 473, 474, 480, 481, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 530, 531, 532, 533, 536, 537, 538, 539, 540, 558, 576, 584, 585, 587, 588, 604, 609, 611, 616, 617, 618, 619, 623, 624, 627, 629, 630, 631, 634, 637, 638, 639, 640, 643, 644, 645, 648, 650, 653, 655, 656, 666, 667, 669, 670, 671, 697, 698, 703, 720, 721, 723, 725, 726, 728, 760, 763, 766, 770, 771, 772, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 799, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 835, 838, 850, 861, 864, 865, 872, 873, 874, 877, 888, 903, 908, 909, 925, 928, 946, 949, 950, 951, 955, 956, 957, 961, 962, 967, 968, 970, 974, 975, 980, 989, 996, 997, 999, 1002, 1003, 1006, 1007, 1008, 1009], "partli": [46, 744], "procedur": [46, 55, 122, 146, 176, 184, 246, 301, 325, 338, 349, 366, 367, 376, 377, 378, 379, 388, 389, 392, 394, 395, 397, 399, 508, 514, 515, 517, 522, 523, 524, 530, 531, 532, 533, 536, 537, 570, 572, 579, 586, 621, 649, 651, 664, 703, 760, 830, 831, 850, 861, 925, 943, 950, 956, 962, 964, 967, 968, 969, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "solut": [46, 175, 185, 187, 200, 201, 210, 225, 231, 309, 325, 364, 367, 378, 387, 390, 392, 394, 395, 398, 399, 400, 427, 429, 431, 508, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 587, 623, 625, 627, 629, 631, 632, 633, 635, 637, 639, 641, 642, 643, 644, 645, 646, 649, 651, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 770, 771, 785, 822, 830, 831, 947, 948, 950, 951, 953, 958, 960, 968, 969, 973, 978, 984, 987, 989, 996, 999, 1009, 1010, 1011], "closest": [46, 63, 367, 390, 419, 421, 422, 425, 426, 427, 437, 754, 755, 803, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 945, 948, 955, 957, 987], "partit": [46, 65, 69, 125, 127, 256, 294, 387, 390, 394, 397, 427, 429, 431, 440, 488, 534, 535, 536, 537, 540, 541, 542, 680, 681, 691, 761, 821, 880, 881, 882, 883, 953, 957, 960, 964, 970, 989], "cluster_qr": [46, 390, 430, 440, 1010], "qr": [46, 198, 511, 518, 521, 908, 909, 951, 1002], "pivot": [46, 267, 268], "cheung": [46, 997], "andrew": [46, 390, 440, 668, 672, 693, 712, 768, 848, 958, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "knyazev": [46, 390, 430, 440, 672, 1006, 1009, 1010], "ucdenv": 46, "skimag": [46, 47, 360, 988], "spectral_clust": [46, 65, 1004, 1006, 1008, 1009, 1010, 1011], "orig_coin": [46, 47], "speed": [46, 47, 69, 98, 162, 182, 185, 189, 234, 276, 308, 314, 338, 340, 355, 356, 366, 368, 374, 376, 378, 388, 390, 395, 398, 401, 422, 423, 425, 426, 427, 428, 430, 435, 437, 438, 439, 440, 508, 509, 587, 604, 609, 610, 611, 616, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 658, 661, 669, 770, 771, 797, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 848, 909, 943, 951, 953, 955, 968, 978, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "down": [46, 47, 80, 187, 211, 212, 219, 229, 230, 259, 295, 298, 349, 360, 368, 373, 392, 395, 422, 428, 434, 567, 570, 571, 616, 626, 749, 753, 756, 848, 851, 852, 862, 874, 877, 884, 950, 980, 988, 1004], "alias": [46, 47, 364, 366, 368, 425, 437, 996, 1000, 1010], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 988], "anti_alias": [46, 47, 988], "img_to_graph": [46, 65, 398, 999, 1009], "exponenti": [46, 74, 149, 154, 281, 286, 396, 397, 400, 427, 513, 531, 536, 591, 596, 599, 616, 620, 733, 734, 813, 814, 818, 830, 831, 848, 946, 950, 954, 969, 987, 1003, 1009], "beta": [46, 84, 93, 107, 164, 371, 388, 390, 393, 513, 515, 517, 524, 621, 704, 705, 711, 717, 758, 768, 770, 954, 987, 998, 1001, 1003, 1005, 1006], "voronoi": [46, 65, 390], "n_region": 46, "extra": [46, 118, 129, 233, 276, 340, 364, 365, 378, 397, 398, 417, 422, 425, 437, 509, 534, 535, 543, 567, 568, 677, 678, 794, 817, 882, 883, 899, 953, 957, 996, 999, 1001, 1002, 1004, 1009, 1011], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 430, 440, 665, 668, 672, 1006, 1009, 1010, 1011], "amg": [46, 65, 390, 430, 440, 668, 672, 1006, 1010, 1011], "pyamg": [46, 381, 383, 390, 430, 440, 668, 672], "toler": [46, 72, 161, 187, 189, 212, 213, 340, 361, 367, 374, 390, 402, 422, 425, 430, 437, 440, 449, 450, 456, 459, 460, 461, 508, 509, 510, 512, 513, 517, 518, 519, 520, 521, 522, 524, 525, 536, 537, 538, 539, 604, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 653, 655, 656, 658, 659, 660, 661, 665, 666, 667, 668, 670, 671, 672, 813, 814, 818, 822, 830, 831, 867, 868, 872, 873, 874, 875, 876, 877, 878, 940, 950, 954, 968, 969, 985, 1008, 1009, 1010, 1011], "eigen_tol": [46, 430, 440, 668, 672, 997, 1010, 1011], "todo": [46, 229, 369, 371, 373, 378, 390, 1011], "21243": 46, "assign_label": [46, 390, 430, 440], "individu": [46, 59, 79, 108, 113, 129, 133, 141, 158, 164, 165, 170, 196, 214, 226, 259, 261, 306, 333, 354, 369, 372, 374, 378, 380, 387, 391, 394, 397, 398, 416, 430, 440, 442, 467, 478, 480, 486, 532, 533, 536, 537, 539, 540, 542, 544, 545, 546, 547, 580, 586, 587, 609, 610, 620, 622, 634, 635, 636, 645, 648, 649, 650, 651, 652, 653, 654, 655, 664, 688, 695, 703, 709, 725, 726, 760, 772, 785, 799, 801, 805, 806, 808, 809, 810, 811, 812, 831, 834, 842, 843, 845, 850, 852, 853, 857, 858, 859, 872, 873, 954, 955, 964, 969, 984, 989, 991, 997, 1000, 1002, 1008, 1010], "comment": [46, 338, 364, 365, 366, 368, 369, 373, 379, 464, 555, 954], "paus": 46, "21194": [46, 1009], "204": [46, 67, 962, 967], "plot_coin_segment": [46, 67], "spatial": [47, 49, 169, 213, 294, 361, 378, 390, 401, 423, 428, 430, 435, 656, 669, 676, 735, 738, 753, 754, 755, 756, 765, 766, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 950, 957, 964, 998, 1002, 1009], "constrain": [47, 95, 119, 126, 167, 187, 292, 307, 323, 325, 359, 378, 389, 390, 395, 397, 486, 538, 539, 612, 635, 667, 671, 798, 950, 953, 1000], "piec": [47, 197, 953], "grid_to_graph": [47, 51, 54, 390, 398, 988, 1009], "st": [47, 66, 256, 999, 1002, 1004], "174": [47, 57, 71, 75, 121, 157, 295, 371, 561], "4697": 47, "586": [47, 67], "plot_coin_ward_segment": [47, 67], "vq": [48, 57], "palac": 48, "china": [48, 390, 483, 484, 561], "615": [48, 147, 187, 215], "literatur": [48, 154, 256, 339, 363, 366, 371, 373, 376, 377, 390, 393, 395, 397, 422, 425, 427, 478, 513, 515, 517, 524, 532, 533, 565, 568, 684, 770, 943, 946, 950, 954, 1006], "codebook": [48, 543, 803], "palett": [48, 166, 256, 279], "byte": [48, 53, 398, 464, 480, 485, 486, 559, 565, 566, 568, 921, 987, 989, 996, 1003, 1004], "wherea": [48, 53, 66, 79, 109, 167, 200, 210, 257, 259, 265, 334, 355, 394, 397, 542, 635, 636, 774, 789, 801, 946, 953, 955, 957, 961, 964, 970, 1009], "rgb": [48, 361, 398, 470, 471, 560, 561, 564], "gif": 48, "pick": [48, 59, 169, 232, 264, 310, 313, 361, 366, 369, 390, 397, 422, 438, 500, 650, 882, 883, 943, 950, 951, 953, 968, 1007], "022": [48, 339, 962], "048": [48, 962], "086": 48, "robertlayton": 48, "pairwise_distances_argmin": [48, 63, 310, 755, 1004, 1010, 1011], "load_sample_imag": [48, 560, 561, 1005], "n_color": 48, "photo": 48, "jpg": [48, 483, 561], "255": [48, 98, 276, 294, 296, 309, 361, 470, 471, 538, 539], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 235], "book": [48, 69, 422, 425, 427, 803, 808, 812, 950, 951, 952, 955, 972, 1008], "alongsid": [48, 366, 371, 378, 381, 399, 954, 961, 974, 975], "642": [48, 67, 168, 170], "plot_color_quant": [48, 67], "750": [49, 116, 117, 256], "math": [49, 69, 234, 256, 257, 363, 366, 381, 739], "db": [49, 390], "n_noise_": 49, "come": [49, 66, 69, 79, 85, 100, 101, 149, 167, 230, 306, 333, 338, 339, 353, 355, 359, 363, 366, 369, 373, 376, 378, 381, 390, 394, 397, 398, 418, 428, 434, 450, 527, 681, 768, 792, 874, 877, 943, 944, 948, 951, 953, 957, 960, 969, 980, 996, 1007, 1010], "handi": [49, 70, 339, 340], "883": [49, 265, 272], "917": 49, "952": 49, "916": [49, 231, 239], "asign": [49, 339], "unique_label": [49, 339, 367, 374], "core_samples_mask": 49, "zeros_lik": [49, 198, 265], "bool": [49, 65, 80, 162, 214, 347, 366, 402, 403, 404, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 496, 499, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 678, 679, 684, 687, 688, 689, 690, 701, 703, 706, 716, 717, 725, 726, 729, 731, 736, 738, 742, 743, 744, 749, 753, 760, 764, 767, 769, 770, 771, 772, 775, 776, 777, 785, 789, 790, 793, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 903, 909, 910, 918, 921, 925, 927, 935, 940, 941, 942, 944, 1005, 1008, 1009], "core_sample_indices_": [49, 423], "class_member_mask": 49, "markerfacecolor": [49, 60, 62, 63], "212": [49, 67, 121, 162, 163, 220, 223, 261, 316, 363, 447, 477, 960, 987], "plot_dbscan": [49, 67, 401, 423], "constitut": [50, 378, 394, 397, 428, 434, 565, 566, 568, 958], "standpoint": 50, "proce": [50, 143, 177, 364, 369, 393, 394, 397, 419, 950], "reassign": [50, 366, 425, 427, 997, 1001], "success": [50, 164, 249, 263, 272, 349, 385, 390, 394, 395, 397, 492, 541, 555, 772, 775, 776, 792, 877, 957, 978, 984, 988, 991, 1008], "becom": [50, 71, 79, 198, 299, 325, 338, 349, 360, 366, 367, 369, 373, 378, 379, 390, 392, 397, 398, 400, 419, 428, 432, 433, 435, 558, 565, 566, 568, 579, 596, 604, 635, 636, 653, 655, 872, 873, 879, 949, 950, 951, 953, 957, 964, 969, 987, 989, 997, 1004, 1005, 1008, 1009, 1010, 1011], "fetch_olivetti_fac": [50, 95, 117, 233, 361, 1004, 1005, 1006], "olivetti": [50, 95, 117, 359, 395, 472, 991, 996, 1004], "ndownload": 50, "figshar": 50, "5976027": 50, "extract_patches_2d": [50, 98, 398, 1004], "patch_siz": [50, 98, 398, 560, 561], "buffer": [50, 1009], "max_patch": [50, 398, 560, 561, 1004], "4i": 50, "dt": [50, 98, 109, 130, 397, 398, 970], "2400": 50, "700": [50, 308], "800": [50, 120, 309, 361, 561, 669], "900": [50, 73, 74, 348], "1100": 50, "1200": [50, 121, 298, 397], "1300": 50, "1400": [50, 452], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 309], "2200": [50, 361, 470], "2300": [50, 185], "ntrain": 50, "499": [50, 67, 146, 363, 371], "plot_dict_face_patch": [50, 67], "agglo": [51, 424, 988], "featureagglomer": [51, 54, 419, 420, 971, 988, 999, 1005, 1006, 1009, 1010], "x_reduc": [51, 89, 127, 424, 988], "x_restor": 51, "images_restor": 51, "vmax": [51, 81, 95, 98, 106, 152, 155, 175, 187, 212, 245, 251, 294, 325], "plot_digits_agglomer": [51, 67], "rich": [52, 373, 376, 390, 418, 978, 1007, 1010], "richer": [52, 105, 390], "uneven": [52, 251, 390, 394], "patholog": [52, 953, 1002], "clean": [52, 70, 195, 349, 358, 364, 396, 960, 964, 1006], "fring": [52, 390], "sensibl": [52, 161, 339, 367, 950, 964], "resampl": [52, 122, 154, 166, 214, 280, 374, 376, 532, 533, 928, 975, 1005, 1009], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 217, 218, 219, 665, 666, 667, 669, 951, 997, 1002, 1006, 1010, 1011], "686": [52, 67], "plot_digits_linkag": [52, 67], "raccoon": [53, 98, 395], "addition": [53, 71, 112, 166, 196, 214, 307, 309, 339, 366, 376, 388, 398, 587, 588, 623, 629, 648, 850, 943, 944, 954, 962, 974, 1002], "adapt": [53, 109, 121, 122, 152, 241, 242, 300, 365, 366, 374, 397, 400, 492, 493, 494, 495, 653, 654, 655, 830, 831, 950, 956, 958, 964, 968, 974, 975, 1004, 1005], "pooch": [53, 381, 383], "instal": [53, 238, 276, 306, 307, 308, 309, 310, 353, 354, 356, 366, 368, 369, 371, 373, 376, 377, 383, 390, 398, 430, 440, 473, 668, 672, 922, 970, 972, 989, 1003, 1004, 1005, 1009, 1010], "raccoon_fac": [53, 98], "nbyte": [53, 229], "768": 53, "1024": [53, 105, 427, 446, 515, 870, 1009], "uint8": [53, 98, 360, 474, 483, 484, 1008], "786432": 53, "unsign": [53, 99, 361, 559, 921], "786": 53, "kilobyt": 53, "shade": [53, 179, 279, 284, 321, 395], "behind": [53, 79, 333, 367, 369, 373, 389, 392, 397, 953, 957, 966], "simplest": [53, 394, 951, 954, 987, 988], "certainli": [53, 69, 339], "compressed_raccoon_uniform": 53, "spot": [53, 227, 390], "leav": [53, 115, 123, 169, 214, 263, 310, 347, 349, 353, 363, 365, 370, 378, 390, 397, 400, 420, 421, 424, 441, 480, 534, 535, 536, 537, 538, 539, 541, 542, 543, 650, 652, 774, 778, 779, 780, 781, 789, 790, 813, 814, 861, 880, 881, 882, 883, 943, 951, 957, 961, 970, 984, 987, 996, 1003, 1005, 1007, 1008], "bin_edg": 53, "bin_edges_": [53, 299, 838], "bin_cent": [53, 196], "625": [53, 196, 684], "875": [53, 67, 107, 150, 646], "375": [53, 725, 954], "171": [53, 152, 159, 363, 371, 763, 954], "203": [53, 101, 107, 161, 163], "234": [53, 808, 812, 830, 831, 956], "axvlin": [53, 59, 72, 81, 103, 121, 131, 166, 168, 185, 262, 985], "get_ybound": 53, "state": [53, 69, 71, 79, 198, 229, 236, 242, 262, 308, 349, 354, 355, 366, 367, 369, 371, 373, 376, 378, 389, 398, 419, 422, 425, 427, 432, 437, 453, 521, 566, 656, 775, 776, 783, 785, 787, 813, 814, 820, 867, 868, 895, 943, 944, 950, 956, 959, 966, 974, 975, 978, 998, 1000, 1002, 1004, 1006, 1009], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "79431128": 53, "185": [53, 158, 363, 371, 830, 831], "18557327": 53, "224": [53, 56, 84, 127, 299, 304, 390, 700], "01945707": 53, "save": [53, 69, 71, 295, 365, 366, 371, 372, 373, 378, 384, 394, 402, 446, 511, 512, 604, 813, 814, 870, 950, 954, 970, 978, 989, 996, 999, 1003, 1006], "verifi": [53, 59, 166, 196, 366, 370, 938, 957], "6291456": 53, "surpris": [53, 950, 974, 998], "x8": 53, "ndarrai": [53, 57, 89, 196, 238, 254, 255, 256, 366, 367, 371, 372, 386, 398, 401, 402, 405, 406, 408, 410, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 438, 439, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 677, 678, 682, 683, 691, 694, 696, 697, 698, 699, 701, 702, 703, 713, 714, 715, 720, 721, 723, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 764, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 890, 891, 892, 897, 898, 908, 909, 910, 911, 914, 915, 918, 920, 921, 923, 926, 927, 929, 930, 931, 932, 935, 940, 941, 954, 969, 975, 999, 1003, 1006, 1007, 1010], "practic": [53, 70, 79, 85, 98, 119, 149, 166, 172, 198, 225, 231, 257, 264, 282, 283, 308, 325, 354, 356, 366, 367, 368, 369, 371, 373, 377, 378, 390, 392, 394, 395, 396, 397, 398, 400, 425, 430, 440, 498, 501, 566, 609, 610, 647, 770, 812, 865, 872, 943, 944, 948, 953, 954, 955, 956, 957, 960, 961, 964, 974, 975, 976, 978, 980, 989, 990, 991, 998, 1002, 1004, 1006, 1008], "gain": [53, 219, 263, 276, 278, 314, 338, 339, 347, 365, 371, 373, 376, 397, 509, 534, 538, 539, 541, 701, 731, 770, 771, 802, 880, 882, 955, 959, 967, 970, 999, 1003, 1006], "925": [53, 67, 954, 984], "plot_face_compress": [53, 67], "anova": [54, 140, 147, 164, 320, 336, 391, 481, 492, 569, 572, 573, 575, 576, 577, 581, 582, 583, 586, 689, 795, 799, 833, 834, 853, 872, 877, 969], "bayesianridg": [54, 161, 175, 176, 308, 604, 621, 950, 1003, 1004, 1005, 1006, 1009, 1010], "shutil": [54, 71, 391], "tempfil": [54, 278, 306, 391, 957], "feature_select": [54, 71, 73, 140, 141, 142, 143, 144, 145, 146, 164, 238, 308, 310, 328, 349, 356, 378, 391, 399, 558, 943, 996, 997, 999, 1000, 1001, 1002, 1003], "kfold": [54, 121, 135, 251, 258, 261, 349, 394, 416, 450, 544, 545, 571, 579, 624, 628, 630, 632, 638, 640, 642, 650, 772, 775, 776, 779, 781, 785, 790, 792, 793, 794, 795, 796, 797, 798, 800, 804, 807, 984, 997, 998, 999, 1001, 1002, 1004, 1006], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 77, 267, 400, 974], "cachedir": [54, 71, 374, 391], "mkdtemp": [54, 391], "mem": [54, 371, 485], "n_x": [54, 562], "n_y": [54, 562, 956], "parcel": [54, 66, 390], "ward__n_clust": 54, "n_job": [54, 71, 72, 116, 117, 122, 123, 129, 136, 161, 166, 167, 168, 218, 220, 236, 255, 257, 258, 260, 271, 276, 306, 307, 308, 354, 366, 378, 397, 401, 416, 423, 426, 428, 430, 435, 436, 439, 442, 445, 450, 508, 512, 513, 514, 516, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 609, 611, 616, 624, 628, 630, 632, 634, 635, 636, 638, 640, 642, 643, 645, 653, 656, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 832, 835, 867, 868, 922, 943, 954, 955, 957, 984, 985, 989, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 420, 424, 996, 1000], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 124, 167, 227, 250, 255, 263, 265, 307, 339, 343, 347, 356, 363, 365, 366, 367, 374, 379, 387, 389, 390, 394, 395, 397, 398, 401, 423, 430, 442, 464, 485, 489, 491, 497, 499, 503, 504, 508, 514, 515, 517, 527, 534, 535, 536, 537, 541, 542, 543, 544, 545, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 594, 609, 635, 636, 643, 645, 653, 654, 655, 683, 693, 702, 709, 711, 721, 738, 744, 753, 757, 763, 764, 803, 813, 814, 815, 816, 817, 819, 821, 823, 824, 828, 830, 831, 836, 852, 853, 855, 859, 872, 877, 880, 881, 882, 883, 911, 912, 913, 925, 927, 928, 948, 950, 954, 955, 958, 961, 964, 965, 966, 970, 978, 980, 1001, 1002, 1004, 1006, 1007, 1008, 1010], "return_dist": [54, 441, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 957, 1000], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 141, 399, 569, 572, 573, 575, 576, 577, 581, 582, 586, 999, 1003, 1010], "cach": [54, 164, 257, 277, 290, 353, 361, 378, 420, 424, 428, 446, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 485, 772, 815, 817, 833, 834, 870, 874, 875, 876, 877, 878, 939, 957, 969, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1011], "selectpercentil": [54, 238, 328, 399, 569, 572, 573, 575, 576, 580, 583, 997, 1002], "percentag": [54, 104, 119, 187, 214, 251, 259, 262, 394, 399, 511, 518, 521, 526, 570, 571, 625, 646, 657, 679, 709, 721, 789, 790, 791, 803, 884, 886, 955, 970, 998, 1002, 1008, 1009], "anova__percentil": [54, 328], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 361, 363, 998], "638768": 54, "rdbu_r": [54, 81, 106, 325], "temporari": [54, 69, 71, 353, 354, 446, 664, 756, 870, 957, 999, 1000, 1003, 1009, 1010], "worri": [54, 951, 981], "rmtree": [54, 71, 391], "ignore_error": 54, "608": [54, 67], "plot_feature_agglomeration_vs_univariate_select": [54, 67], "recomput": [55, 235, 237, 278, 306, 447, 452, 950, 966, 1001], "intract": [55, 395, 951, 959], "unlik": [55, 167, 217, 219, 246, 298, 323, 366, 367, 371, 376, 378, 392, 394, 395, 398, 428, 512, 627, 628, 631, 632, 633, 659, 660, 760, 792, 813, 814, 853, 863, 875, 950, 953, 954, 961, 969, 996, 1002], "inferenti": 55, "capabl": [55, 85, 154, 221, 367, 378, 381, 955, 958, 969, 970, 978, 996, 1005], "meta": [55, 69, 108, 132, 133, 164, 196, 265, 349, 360, 364, 367, 369, 376, 378, 386, 388, 389, 399, 400, 443, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 547, 552, 574, 580, 799, 806, 943, 955, 975, 976, 991, 996, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010, 1011], "extend": [55, 66, 197, 245, 263, 325, 363, 364, 376, 378, 388, 389, 390, 395, 397, 608, 696, 802, 805, 806, 838, 840, 856, 887, 946, 954, 955, 969, 975, 976, 991, 1001, 1002, 1003, 1004, 1006], "chirag": 55, "nagpal": 55, "christo": [55, 1005, 1006, 1008, 1010], "arida": [55, 1005, 1006, 1008, 1010], "baseestim": [55, 276, 366, 377, 378, 412, 609, 610, 901, 996, 1003, 1006, 1008, 1010], "clone": [55, 122, 157, 258, 295, 349, 364, 366, 368, 369, 373, 378, 388, 391, 400, 416, 443, 546, 547, 574, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 797, 800, 804, 807, 833, 834, 869, 975, 996, 1002, 1004, 1008], "metaestim": [55, 378, 1000, 1009, 1010], "available_if": [55, 378, 917, 1009, 1010], "check_is_fit": [55, 367, 374, 378, 1006, 1009, 1010], "5000": [55, 126, 182, 211, 212, 214, 308], "_classifier_ha": 55, "deleg": [55, 371, 917, 1000, 1002, 1008], "unfit": [55, 391, 413, 442, 546, 547, 579, 588, 1004, 1006], "classifier_": 55, "inductivecluster": 55, "clusterer_": 55, "plot_scatt": 55, "cluster_label": [55, 59], "x_new": [55, 391, 395, 399, 412, 421, 422, 424, 425, 427, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 526, 544, 545, 546, 547, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 605, 607, 612, 615, 616, 617, 618, 619, 665, 666, 667, 668, 669, 822, 829, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 966, 980], "y_new": 55, "declar": [55, 218, 349, 366, 367, 371, 378, 422, 425, 437, 449, 450, 456, 667, 671, 1003, 1007], "membership": [55, 379, 387, 389, 390, 488, 489, 490, 491, 492, 496, 499, 969], "inductive_learn": 55, "probable_clust": 55, "response_method": [55, 112, 130, 179, 188, 205, 259, 279, 284, 287, 321, 322, 344, 608, 609, 610, 675, 677, 678], "221": [55, 56, 67, 84, 127, 201, 215, 999], "plot_inductive_clust": [55, 67], "meant": [56, 146, 361, 367, 374, 452, 470, 654, 819, 944, 958, 960, 964, 997], "unintuit": 56, "possibli": [56, 85, 146, 196, 211, 339, 363, 365, 373, 384, 390, 397, 398, 429, 431, 566, 808, 809, 810, 811, 812, 877, 878, 880, 881, 882, 883, 943, 946, 951, 957, 964, 1011], "unexpect": [56, 349, 366, 370, 373, 384, 512, 673, 954, 969, 998, 1004, 1005, 1008, 1010], "conform": [56, 558, 605, 801, 802, 954, 974, 975, 1003, 1009], "implicit": [56, 196, 378, 397, 398, 549, 659, 660, 948, 953, 974, 1005], "undesir": [56, 150, 400], "despit": [56, 85, 194, 196, 214, 231, 285, 378, 392, 604, 605, 607, 950, 957, 978, 1004, 1005], "unevenli": [56, 196, 251], "_kmean": [56, 95, 307, 310], "867": [56, 73, 95, 307, 310], "futurewarn": [56, 84, 95, 121, 123, 124, 129, 218, 219, 220, 257, 267, 307, 310, 366, 373, 1003, 1004, 1005, 1007, 1009], "suppress": [56, 95, 166, 218, 219, 220, 307, 310, 353, 373, 669, 957, 1003], "phil": [56, 1001], "roth": [56, 1001, 1004, 1011], "mr": [56, 997, 1000, 1010], "incorrect": [56, 263, 303, 316, 349, 366, 390, 584, 585, 609, 610, 709, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "60834549": 56, "63667341": 56, "40887718": 56, "85253229": 56, "222": [56, 84, 127, 969], "x_vari": 56, "y_vari": 56, "223": [56, 84, 127, 250, 272, 327, 336, 363], "unequ": [56, 1004], "x_filter": 56, "plot_kmeans_assumpt": [56, 67], "judg": [57, 202, 390, 984], "definit": [57, 80, 184, 196, 263, 276, 339, 366, 367, 369, 378, 380, 390, 392, 393, 395, 504, 506, 512, 588, 605, 669, 684, 694, 703, 733, 770, 771, 943, 946, 948, 950, 952, 954, 957, 968, 973, 991, 1000, 1004, 1011], "shorthand": [57, 378, 391, 445, 834, 835, 999], "homo": 57, "compl": 57, "mea": 57, "context": [57, 234, 258, 353, 354, 360, 365, 377, 378, 390, 391, 396, 397, 398, 400, 401, 416, 423, 426, 428, 430, 435, 436, 439, 442, 445, 446, 450, 508, 512, 513, 514, 516, 519, 520, 521, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 603, 604, 607, 609, 611, 616, 624, 628, 630, 632, 634, 635, 636, 638, 640, 642, 643, 645, 653, 656, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 819, 821, 823, 824, 826, 827, 832, 835, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 944, 950, 954, 960, 964, 968, 975, 978, 987, 996, 1003, 1004, 1009], "n_digit": 57, "1797": [57, 88, 254, 295, 313, 363, 424, 479, 509, 510, 511, 512, 576, 577, 665, 666, 667, 668, 957, 986], "bench_k_mean": 57, "tabl": [57, 214, 256, 366, 369, 374, 390, 398, 559, 635, 657, 772, 785, 810, 921, 950, 954, 955, 960, 997], "fit_tim": [57, 119, 185, 204, 258, 394, 796, 797], "inertia_": [57, 60, 63, 422, 425, 427, 1007], "clustering_metr": 57, "sample_s": [57, 230, 339, 766], "formatter_result": 57, "determinist": [57, 122, 354, 362, 367, 378, 390, 422, 425, 427, 429, 430, 431, 436, 437, 440, 528, 536, 537, 541, 542, 560, 561, 668, 672, 782, 783, 829, 880, 881, 946, 950, 997, 1000, 1002, 1004, 1005, 1008, 1011], "suffic": [57, 367, 989], "ttime": 57, "tinertia": 57, "thomo": 57, "tcompl": 57, "tv": 57, "tari": 57, "tami": 57, "tsilhouett": 57, "__________________________________________________________________________________": 57, "inertia": [57, 60, 339, 390, 422, 425, 427, 430, 437, 438, 440, 441, 1007], "056": [57, 962], "69662": 57, "680": [57, 230, 239], "719": 57, "699": [57, 339], "570": [57, 363, 987], "695": [57, 254], "181": [57, 235, 239, 295, 371], "037": [57, 685], "69707": 57, "675": [57, 149], "716": [57, 490], "694": [57, 215], "560": [57, 196, 494, 495], "691": [57, 129, 133, 167, 170, 198, 215, 697], "015": [57, 343, 962], "72686": 57, "636": [57, 371], "658": [57, 85], "647": 57, "521": 57, "reduced_data": 57, "mesh": [57, 118, 127, 151, 230, 284, 292, 300, 318, 321], "169": [57, 295], "mark": [57, 91, 141, 162, 167, 260, 267, 358, 366, 367, 369, 373, 374, 378, 390, 512, 566, 584, 585, 588, 609, 635, 826, 827, 867, 868, 885, 899, 904, 909, 950, 978, 991, 996, 997, 1002, 1004, 1005], "844": [57, 67, 340, 397, 532, 533], "plot_kmeans_digit": [57, 67], "kmeans_plusplu": [58, 390, 1008], "4000": [58, 124, 244], "centers_init": 58, "4eacc5": [58, 63], "ff9c34": [58, 63], "4e9a06": [58, 63], "cluster_data": 58, "079": [58, 67, 339, 363], "plot_kmeans_plusplu": [58, 67], "wrong": [59, 196, 282, 338, 349, 363, 366, 367, 398, 481, 701, 731, 766, 954, 960, 969, 999, 1001, 1003, 1004, 1005, 1006, 1009], "wide": [59, 60, 113, 229, 299, 376, 390, 395, 398, 943, 950, 974, 978, 989, 996, 998], "ambival": 59, "thick": [59, 286, 957], "ow": 59, "7049787496083262": 59, "5882004012129721": 59, "6505186632729437": 59, "5662344175321901": 59, "4358297989156284": 59, "silhouette_sampl": [59, 766, 1000, 1002, 1004], "distinct": [59, 256, 315, 338, 340, 361, 367, 370, 378, 394, 397, 398, 566, 773, 781, 789, 847, 848, 867, 868, 943, 950, 957, 960, 989, 1004], "center_box": [59, 489], "range_n_clust": 59, "set_size_inch": [59, 135, 235], "lie": [59, 84, 166, 230, 298, 315, 323, 325, 395, 397, 583, 821, 823, 824, 825, 948, 951, 964, 969], "insert": [59, 166, 196, 376, 390, 464, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 887], "blank": [59, 370, 944, 970], "demarc": 59, "perspect": [59, 196, 353, 361, 376, 379, 507, 620, 872, 947], "silhouette_avg": 59, "sample_silhouette_valu": 59, "y_lower": [59, 122], "aggreg": [59, 114, 214, 259, 265, 310, 390, 397, 511, 532, 533, 697, 698, 703, 720, 721, 723, 725, 726, 728, 760, 955, 957, 964], "ith_cluster_silhouette_valu": 59, "size_cluster_i": 59, "y_upper": [59, 122], "fill_betweenx": 59, "2nd": [59, 89, 157, 303, 390, 401, 423, 507, 964, 1011], "lw": [59, 77, 78, 80, 99, 104, 105, 190, 197, 199, 202, 206, 213, 220, 244, 251, 252, 266, 271, 281, 298, 315, 332, 333], "fontweight": [59, 191], "bold": [59, 122, 185, 191, 366], "330": [59, 67, 314], "plot_kmeans_silhouette_analysi": [59, 67], "reach": [60, 146, 196, 198, 212, 214, 310, 325, 347, 370, 379, 381, 390, 395, 399, 428, 435, 485, 486, 570, 571, 604, 622, 623, 624, 629, 630, 631, 632, 633, 637, 638, 639, 640, 643, 644, 645, 653, 654, 655, 656, 658, 659, 660, 661, 704, 705, 758, 770, 771, 830, 831, 869, 943, 954, 958, 968, 970, 978, 1007, 1011], "optimum": [60, 155, 166, 172, 269, 395, 450, 950, 953], "stuck": [60, 669, 951], "isotrop": [60, 100, 151, 153, 217, 219, 390, 392, 400, 489, 496, 509, 592, 596, 597, 599, 600], "check_random_st": [60, 212, 219, 228, 233, 333, 367, 374, 378], "trade": [60, 77, 168, 255, 257, 325, 338, 389, 390, 392, 530, 531, 536, 537, 611, 633, 669, 772, 775, 776, 785, 796, 951, 958, 966, 968, 969, 975], "n_init_rang": 60, "n_samples_per_cent": 60, "make_data": 60, "n_clusters_tru": 60, "init_s": [60, 339, 427], "factori": [60, 256, 398, 717, 924, 954], "empti": [60, 69, 105, 208, 276, 316, 353, 361, 367, 369, 390, 402, 460, 510, 538, 539, 607, 608, 782, 838, 879, 887, 892, 893, 899, 969, 987, 998, 1000, 1004, 1005, 1007, 1008, 1010], "run_id": 60, "km": [60, 310, 339], "my_memb": [60, 62, 63], "545": [60, 67], "plot_kmeans_stability_low_dim_dens": [60, 67], "fast": [61, 172, 185, 211, 212, 230, 231, 299, 340, 353, 361, 366, 374, 390, 392, 394, 395, 397, 398, 400, 402, 425, 447, 452, 485, 509, 510, 512, 515, 517, 521, 524, 543, 565, 566, 568, 609, 610, 617, 635, 636, 649, 651, 664, 676, 772, 785, 794, 795, 796, 805, 806, 813, 814, 818, 829, 909, 923, 946, 950, 953, 956, 957, 959, 960, 970, 974, 978, 989, 996, 997, 1002, 1003, 1006, 1007], "globular": [61, 390], "cleanli": [61, 996], "403": [61, 67, 260], "plot_linkage_comparison": [61, 67], "dorin": [62, 426], "comaniciu": [62, 390, 426], "meer": [62, 390, 426], "ieee": [62, 78, 80, 363, 390, 392, 399, 426, 453, 511, 540, 641, 662, 663, 700, 744, 950, 954, 960], "transact": [62, 363, 390, 401, 423, 426, 511, 515, 517, 524, 540, 621, 641, 662, 663, 700, 701, 731, 744, 950, 954], "intellig": [62, 338, 363, 390, 397, 426, 532, 533, 615, 673, 700, 803, 830, 831, 955, 966, 975, 978], "2002": [62, 388, 390, 397, 416, 426, 570, 571, 701, 731, 820, 867, 946, 954], "603": [62, 426], "619": [62, 426], "labels_uniqu": 62, "544": [62, 67, 293, 296], "plot_mean_shift": [62, 67, 439], "3000": [63, 110, 220, 864, 865], "k_mean": [63, 374, 378, 988, 1004], "t_batch": 63, "pairwis": [63, 166, 229, 265, 306, 310, 338, 353, 358, 367, 378, 390, 395, 400, 436, 439, 440, 446, 464, 485, 486, 512, 597, 615, 616, 617, 618, 619, 620, 665, 667, 669, 671, 673, 676, 753, 756, 763, 765, 766, 801, 817, 819, 821, 825, 839, 870, 954, 957, 966, 969, 991, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011], "k_means_cluster_cent": 63, "mbk_means_cluster_cent": 63, "k_means_label": 63, "mbk_means_label": 63, "ninertia": 63, "bbbbbb": 63, "230": [63, 67, 561], "plot_mini_batch_kmean": [63, 67], "reachabl": [64, 390, 428, 433, 434, 435, 819, 914], "shane": [64, 1005, 1008], "grigsbi": 64, "refug": 64, "rocktalu": 64, "cluster_optics_dbscan": [64, 390], "n_points_per_clust": 64, "c1": [64, 119, 157, 228, 333], "c2": [64, 119, 157, 228], "c3": [64, 119], "c4": [64, 976, 991], "c5": [64, 976, 991], "c6": 64, "clust": [64, 428, 435], "labels_050": 64, "reachability_": [64, 390, 428, 433, 434, 435], "core_dist": [64, 433], "core_distances_": [64, 428, 433, 435], "ordering_": [64, 390, 428, 433, 434, 435], "labels_200": 64, "ax3": [64, 316], "ax4": 64, "klass": 64, "xk": [64, 527], "rk": 64, "full_lik": 64, "epsilon": [64, 178, 220, 231, 332, 395, 433, 620, 626, 644, 653, 655, 721, 830, 831, 873, 875, 878, 947, 950, 954, 958, 968, 969, 987, 996], "noptic": 64, "ndbscan": 64, "plot_opt": [64, 67], "tri": [65, 104, 167, 217, 285, 354, 367, 370, 376, 379, 388, 397, 427, 429, 431, 608, 609, 610, 647, 669, 675, 677, 678, 785, 922, 959, 977, 980, 998, 1004, 1008], "intens": [65, 98, 363, 395, 422, 425, 437, 584, 585, 609, 610, 774, 943, 961, 978, 1004], "weakli": 65, "outlin": [65, 118, 366, 367, 378, 379, 380, 943, 991], "center1": 65, "center2": 65, "center3": 65, "58": [65, 78, 295, 363, 392, 453, 739, 964, 985], "center4": 65, "radius1": 65, "radius2": 65, "radius3": 65, "radius4": 65, "circle1": 65, "circle2": 65, "circle3": 65, "circle4": 65, "label_im": 65, "cleaner": 65, "606": [65, 67, 590, 803, 955], "plot_segmentation_toi": [65, 67], "swiss": [66, 164, 216, 223, 390, 507, 669, 670, 1010], "roll": [66, 164, 216, 223, 368, 390, 507, 669, 670, 903, 978, 1006, 1011], "constraint": [66, 95, 108, 133, 164, 191, 251, 293, 294, 295, 307, 366, 376, 395, 398, 464, 485, 486, 538, 539, 612, 789, 790, 923, 943, 945, 950, 951, 968, 1000, 1003, 1004, 1007, 1009, 1011], "sole": [66, 354, 376, 390], "respect": [66, 100, 114, 118, 126, 157, 167, 172, 175, 185, 198, 210, 213, 217, 219, 226, 229, 231, 246, 265, 282, 283, 295, 303, 310, 322, 353, 361, 362, 366, 388, 390, 393, 395, 397, 398, 400, 442, 445, 448, 449, 450, 451, 452, 453, 454, 511, 517, 518, 524, 530, 574, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 613, 620, 648, 667, 671, 688, 703, 757, 760, 770, 771, 809, 819, 830, 831, 884, 886, 943, 947, 948, 950, 951, 954, 957, 958, 959, 960, 964, 969, 978, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "oppos": [66, 366, 369, 386, 390, 868, 957, 969, 980, 996], "make_swiss_rol": [66, 221, 1010], "thinner": 66, "fig1": 66, "set_posit": [66, 101, 102, 129, 207, 298], "jet": 66, "fig2": 66, "121": [66, 112, 162, 184, 199, 200, 215, 230, 347, 348, 646, 964], "435": [66, 67, 200, 215], "plot_ward_structured_vs_unstructur": [66, 67], "auto_examples_clust": 67, "chain": [68, 75, 164, 273, 275, 276, 349, 356, 358, 376, 378, 389, 400, 473, 479, 518, 588, 604, 635, 713, 772, 799, 802, 804, 805, 806, 807, 833, 834, 853, 943, 944, 955, 959, 971, 974, 978, 989, 991], "scenario": [69, 149, 172, 259, 349, 354, 372, 394, 397, 514, 520, 522, 523, 948, 954, 964, 1006], "raster": 69, "caption": 69, "serv": [69, 99, 155, 259, 391, 514, 523, 528, 946, 1010], "matt": [69, 999, 1000, 1001, 1006, 1007], "terri": [69, 1000], "truncatedsvd": [69, 127, 218, 339, 395, 511, 512, 516, 517, 518, 669, 832, 835, 951, 998, 1003, 1007, 1008, 1010], "dictvector": [69, 164, 337, 339, 341, 361, 398, 465, 559, 565, 566, 567, 568, 846, 996, 997, 1000, 1006, 1008, 1009], "compris": [69, 122, 254, 338, 339, 340, 361, 376, 395, 397, 492, 778, 951], "subject": [69, 126, 247, 259, 338, 361, 366, 367, 369, 376, 378, 379, 388, 389, 392, 394, 395, 472, 635, 636, 662, 836, 872, 873, 922, 924, 945, 950, 969, 973, 989, 1005, 1006, 1009, 1011], "mccall": 69, "mksol": 69, "dseg": 69, "ti": [69, 196, 243, 246, 254, 334, 353, 576, 577, 612, 696, 701, 731, 770, 771, 874, 877, 880, 953, 954, 969, 997, 999, 1000, 1004, 1006, 1010], "fred": [69, 996, 1009], "575": [69, 196], "3539": 69, "1993apr6": 69, "131900": 69, "8407": 69, "perhap": [69, 118, 363, 365, 373, 378, 396, 975], "militari": 69, "slug": 69, "school": [69, 363, 390, 763, 954], "physic": [69, 354, 482, 921, 950], "teacher": 69, "ex": [69, 364, 381, 1000, 1001], "fighter": 69, "jock": 69, "wasn": [69, 1005], "poundal": 69, "flink": 69, "funni": 69, "propon": 69, "si": 69, "insist": 69, "safeti": [69, 376, 391, 975, 1006], "ball": [69, 281, 289, 390, 396, 426, 669, 813, 814, 818, 821, 823, 824, 825, 996, 998, 1001, 1007], "world": [69, 73, 166, 221, 234, 338, 353, 356, 359, 363, 390, 395, 398, 944, 954, 956, 973, 975, 978, 983, 991, 996], "mari": [69, 1004, 1005, 1006, 1007, 1010], "shafer": 69, "nasa": [69, 338, 339, 363], "am": [69, 74, 79, 129, 338, 370, 392, 452, 470, 1003], "dryden": 69, "stateless": [69, 339, 355, 367, 398, 566, 836, 837, 845, 964], "subject_body_extractor": 69, "startswith": [69, 218, 289], "subject_body_transform": 69, "sentenc": [69, 338, 340, 361, 379, 398], "text_stat": 69, "num_sent": 69, "text_stats_transform": 69, "subjectbodyextractor": 69, "subjectbodi": 69, "union": [69, 166, 391, 473, 713, 729, 832, 1003], "body_bow": 69, "pull": [69, 309, 354, 364, 368, 378, 379, 1006], "body_stat": 69, "transformer_weight": [69, 442, 445, 832, 1001, 1008], "dual": [69, 71, 333, 338, 398, 399, 449, 450, 456, 588, 623, 624, 629, 630, 635, 636, 637, 638, 639, 640, 658, 661, 813, 814, 872, 873, 874, 877, 969, 998, 1007, 1010], "394": [69, 158], "243": [69, 75, 561], "plot_column_transform": [69, 75], "imput": [70, 129, 163, 168, 227, 236, 238, 307, 310, 356, 358, 369, 377, 378, 391, 397, 467, 478, 542, 557, 616, 622, 649, 795, 816, 834, 891, 893, 974, 975, 991, 998, 999], "miss": [70, 129, 163, 168, 227, 236, 256, 307, 349, 353, 356, 358, 361, 363, 365, 366, 367, 369, 370, 378, 389, 390, 391, 392, 450, 467, 473, 475, 478, 538, 539, 542, 543, 604, 605, 606, 607, 616, 622, 649, 667, 671, 702, 744, 795, 816, 834, 842, 843, 847, 849, 850, 853, 857, 860, 861, 863, 950, 951, 954, 970, 974, 975, 978, 991, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dispatch": [70, 356, 386, 446, 772, 785, 794, 795, 796, 870, 984, 991], "processor": [70, 129, 166, 258, 356, 401, 416, 423, 426, 428, 430, 435, 436, 439, 442, 445, 450, 508, 512, 513, 514, 516, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 609, 611, 616, 624, 628, 630, 632, 634, 635, 636, 638, 640, 642, 643, 645, 653, 656, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 815, 816, 819, 821, 823, 824, 826, 827, 832, 835, 867, 868], "pedro": [70, 997, 999, 1000, 1004], "simpleimput": [70, 129, 161, 162, 168, 227, 236, 238, 307, 310, 349, 378, 604, 605, 606, 944, 964, 1004, 1005, 1007, 1008, 1010], "40945": 70, "titan": [70, 168, 238, 306, 310], "surviv": [70, 168, 943, 974], "ag": [70, 146, 166, 167, 168, 184, 185, 196, 214, 235, 236, 238, 298, 309, 310, 361, 363, 961, 978, 980, 987], "fare": [70, 168, 238, 310, 1000, 1001], "embark": [70, 168, 238, 306, 310], "sex": [70, 146, 166, 168, 184, 185, 238, 363, 962, 987], "femal": [70, 166, 370, 846, 847, 964], "male": [70, 166, 370, 846, 847, 964], "pclass": [70, 168, 238, 306, 310], "numeric_featur": [70, 310], "numeric_transform": [70, 310], "categorical_transform": 70, "preprocessor": [70, 129, 166, 196, 227, 236, 307, 309, 310, 391, 398, 565, 566, 568, 974, 989, 996, 999, 1004, 1006], "pipelinepipelin": [70, 115, 129, 143, 166, 168, 226, 227, 235, 236, 238, 257, 263, 307, 310], "columntransformercolumntransform": [70, 129, 166, 168, 227, 236, 307, 310], "simpleimputersimpleimput": [70, 129, 168, 227, 236, 307, 310], "standardscalerstandardscal": [70, 129, 166, 226, 227, 235, 236, 238, 263, 307, 310], "onehotencoderonehotencod": [70, 115, 129, 166, 227, 236, 307, 310], "logisticregressionlogisticregress": [70, 115, 226, 227, 236, 238, 295, 307, 310], "make_column_selector": [70, 119, 129, 391, 442, 445, 1006], "subset_featur": 70, "Then": [70, 109, 111, 115, 117, 129, 132, 143, 166, 172, 184, 196, 221, 226, 237, 259, 338, 360, 366, 369, 371, 373, 381, 387, 388, 390, 393, 395, 398, 399, 547, 570, 695, 731, 772, 785, 833, 944, 953, 954, 960, 969, 989, 1005], "int64index": 70, "1047": 70, "1118": 70, "684": [70, 79, 280, 290], "1045": 70, "841": 70, "1046": [70, 246], "kb": [70, 166], "numerical_transform": 70, "yourself": [70, 365, 366, 370, 373, 958], "selector": [70, 142, 143, 373, 398, 444, 558, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 998, 1006, 1008], "dtype_exclud": [70, 444], "dtype_includ": [70, 119, 129, 391, 444], "794": 70, "lt": [70, 115, 129, 166, 246, 254, 268, 366], "_column_transform": [70, 129], "0x7f1893d8d6d0": 70, "0x7f1893d8dac0": 70, "exactli": [70, 175, 189, 196, 247, 264, 299, 338, 366, 367, 369, 387, 390, 394, 395, 398, 403, 431, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 492, 503, 567, 568, 592, 653, 655, 679, 681, 738, 773, 789, 794, 946, 950, 951, 952, 954, 955, 970, 988, 989, 996, 1002, 1003, 1009], "hyperparamet": [70, 109, 149, 150, 156, 157, 161, 164, 167, 175, 185, 210, 214, 225, 249, 254, 259, 261, 272, 278, 295, 338, 367, 378, 394, 395, 397, 400, 479, 512, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 620, 636, 642, 650, 653, 703, 760, 772, 785, 943, 948, 949, 950, 953, 954, 956, 958, 960, 968, 975, 989, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "preprocessor__num__imputer__strategi": 70, "classifier__c": 70, "grid_search": [70, 73, 236, 246, 254, 264, 391, 998, 999, 1000, 1001, 1002, 1003], "gridsearchcvgridsearchcv": [70, 236, 246, 254, 256], "trigger": [70, 71, 369, 391, 833, 834, 892, 893, 909, 950, 989, 1004, 1010, 1011], "best_params_": [70, 72, 122, 149, 231, 246, 254, 260, 308, 325, 377, 772, 775, 776, 785, 943, 985, 989], "best_score_": [70, 72, 231, 257, 260, 261, 325, 650, 652, 772, 775, 776, 785, 984, 985, 989, 1007], "784": [70, 294], "cv_results_": [70, 71, 72, 81, 135, 145, 246, 254, 255, 256, 257, 260, 264, 267, 268, 278, 325, 333, 450, 571, 772, 775, 776, 785, 989, 1002, 1006, 1008, 1009], "sort_valu": [70, 168, 238, 246, 256, 267], "mean_test_scor": [70, 71, 72, 81, 135, 246, 255, 256, 257, 264, 267, 268, 278, 325, 333, 450, 571, 772, 785, 943, 1002, 1009], "ascend": [70, 168, 397, 428, 434, 604, 612, 884, 886, 968, 1006], "std_test_scor": [70, 72, 135, 255, 256, 257, 264, 278, 450, 571, 772, 785, 1002, 1009], "param_preprocessor__num__imputer__strategi": 70, "param_classifier__c": 70, "784167": 70, "035824": 70, "780366": 70, "032722": 70, "780348": 70, "037245": 70, "779414": 70, "033105": 70, "864": [70, 75], "plot_column_transformer_mixed_typ": [70, 75], "instanti": [71, 152, 309, 368, 397, 428, 544, 545, 579, 607, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 899, 960, 986, 996, 1004, 1008], "memoiz": [71, 361, 378], "costli": [71, 77, 116, 161, 257, 334, 354, 371, 390, 422, 604, 779, 781, 864, 865, 909, 954, 957, 966, 975], "mcgibbon": [71, 998, 999, 1002], "selectkbest": [71, 73, 142, 143, 310, 349, 366, 391, 399, 558, 569, 572, 573, 575, 577, 583, 943, 997, 1002], "chi2": [71, 328, 398, 399, 430, 558, 569, 572, 573, 575, 576, 577, 582, 583, 586, 597, 615, 616, 617, 618, 619, 620, 734, 740, 749, 996, 1003, 1010], "pipe": [71, 72, 119, 236, 255, 308, 309, 377, 391, 398, 567, 833, 857, 858, 860, 861, 862, 863, 943, 964, 985], "reduce_dim": [71, 236, 255, 391], "popul": [71, 77, 79, 166, 196, 259, 298, 361, 374, 378, 392, 419, 688, 694, 815, 816, 817, 819, 821, 823, 824, 825, 923, 954, 960, 964, 970], "n_features_opt": 71, "c_option": 71, "iterated_pow": [71, 509, 512, 518, 1002], "reduce_dim__n_compon": [71, 255, 391], "classify__c": 71, "reduce_dim__k": 71, "reducer_label": 71, "kbest": [71, 569], "mean_scor": [71, 265, 268, 339, 1009], "alphabet": [71, 378, 716], "bar_offset": 71, "bgrcmyk": 71, "reducer_scor": 71, "sometim": [71, 129, 256, 294, 339, 349, 355, 366, 367, 369, 371, 377, 378, 381, 390, 392, 395, 397, 398, 427, 511, 512, 515, 517, 518, 838, 839, 840, 887, 949, 950, 951, 954, 959, 964, 965, 969, 980, 988, 993, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "worthwhil": [71, 378], "slower": [71, 98, 119, 161, 231, 265, 340, 397, 398, 399, 429, 431, 515, 517, 524, 532, 533, 535, 540, 542, 565, 566, 568, 608, 609, 610, 620, 636, 649, 651, 664, 669, 680, 801, 805, 806, 947, 951, 952, 953, 955, 957, 970, 989, 1000, 1007], "constructor": [71, 228, 267, 367, 378, 389, 391, 398, 442, 445, 526, 527, 532, 544, 545, 546, 547, 558, 559, 565, 566, 574, 645, 653, 654, 815, 816, 817, 819, 820, 821, 823, 824, 825, 832, 833, 834, 835, 836, 845, 922, 943, 955, 964, 969, 975, 980, 996, 997, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011], "folder": [71, 361, 364, 366, 369, 373, 381, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 957, 989], "cached_pip": [71, 391], "delet": [71, 314, 316, 369, 370, 447, 452, 463], "exit": [71, 276, 373, 446], "benefici": [71, 73, 77, 95, 127, 298, 299, 364, 951], "plot_compare_reduct": [71, 75], "924": 72, "logistic__c": [72, 985], "046415888336127774": 72, "pca__n_compon": [72, 985], "truncat": [72, 127, 218, 374, 511, 512, 516, 517, 518, 521, 653, 655, 701, 731, 770, 822, 885, 909, 943, 953, 954, 968, 985, 989, 990, 991, 1002, 1004], "x_digit": [72, 137, 293, 391, 984, 985, 987], "y_digit": [72, 137, 293, 391, 984, 985, 987], "__": [72, 257, 378, 391, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 985, 1004, 1005], "spectrum": [72, 501, 521, 672, 909, 978, 985, 1004], "ax0": [72, 74, 196, 228, 339, 985], "n_components_": [72, 103, 378, 420, 424, 511, 515, 516, 517, 518, 519, 520, 864, 865, 985, 1005, 1007], "explained_variance_ratio_": [72, 104, 339, 395, 511, 518, 521, 526, 985, 999, 1002], "named_step": [72, 85, 303, 391, 570, 571, 574, 833, 834, 872, 873, 950, 985, 1003, 1005], "components_col": 72, "param_pca__n_compon": 72, "best_clf": 72, "nlargest": 72, "yerr": [72, 78, 80, 116, 119, 278, 316], "val": [72, 208, 256, 911], "567": [72, 75], "plot_digits_pip": [72, 75], "candid": [73, 246, 254, 257, 264, 308, 355, 366, 369, 390, 397, 426, 428, 772, 775, 776, 783, 785, 950, 957, 970, 1002], "features__pca__n_compon": 73, "features__univ_select__k": 73, "svm__c": 73, "933": [73, 394], "967": [73, 954, 958], "transformer_list": [73, 391, 832, 835, 944, 1007, 1008], "univ_select": 73, "amuel": [73, 114, 187, 230, 315, 333], "ai": [73, 114, 187, 230, 315, 333, 394], "bonn": [73, 114, 187, 230, 315, 333], "mayb": [73, 294, 378, 398, 969, 975], "combined_featur": 73, "x_featur": [73, 617, 618, 619, 946], "470": [73, 75], "plot_feature_union": [73, 75], "overview": [74, 368, 377, 378, 709, 718, 956, 968, 990, 991], "transformedtargetregressor": [74, 166, 196, 376, 391, 570, 571, 574, 1004, 1006, 1009], "hous": [74, 129, 161, 162, 298, 308, 359, 467, 961, 991], "median_absolute_error": [74, 166, 954, 1000, 1006, 1008], "r2_score": [74, 180, 191, 192, 397, 411, 443, 459, 460, 461, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 699, 703, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 943, 954, 997, 999, 1005, 1009, 1010], "translat": [74, 367, 400, 504, 591, 842, 843, 858, 951, 954, 972, 978], "lowest": [74, 85, 246, 360, 390, 394, 612, 614, 775, 776, 778, 879, 880, 951, 954, 970, 1011], "logarithm": [74, 129, 166, 229, 257, 325, 378, 399, 438, 567, 635, 636, 653, 680, 701, 716, 726, 730, 731, 732, 813, 814, 907, 970, 984, 1003], "log1p": [74, 228, 837, 954, 964], "expm1": 74, "y_tran": 74, "At": [74, 201, 268, 313, 316, 353, 354, 379, 381, 386, 393, 397, 416, 419, 443, 565, 566, 568, 579, 801, 803, 840, 920, 943, 950, 953, 955, 959, 968, 978], "regr": [74, 192, 391, 531, 533, 542, 623, 624, 644, 806, 831, 873, 875, 878, 969, 987], "1750": 74, "regr_tran": 74, "inverse_func": [74, 166, 391, 443, 837, 964, 1004], "035": [74, 149], "sell": 74, "quantiletransform": [74, 167, 302, 391, 443, 849, 861, 944, 964, 1003, 1004, 1005, 1006, 1007], "quantile_transform": [74, 850, 860, 964, 1003, 1004, 1005], "house_pric": [74, 129], "select_dtyp": [74, 119, 444], "nan": [74, 119, 161, 162, 166, 214, 236, 251, 259, 306, 353, 354, 358, 367, 374, 378, 397, 446, 473, 532, 533, 534, 538, 539, 541, 570, 571, 574, 580, 583, 586, 604, 605, 606, 607, 612, 688, 690, 697, 698, 699, 703, 744, 753, 760, 772, 775, 776, 785, 795, 796, 797, 800, 842, 843, 847, 849, 850, 853, 857, 860, 861, 863, 890, 891, 892, 893, 929, 943, 954, 964, 991, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "inf": [74, 152, 286, 374, 390, 400, 428, 435, 449, 450, 456, 530, 531, 536, 537, 570, 571, 574, 583, 584, 585, 596, 604, 612, 614, 625, 626, 627, 629, 646, 648, 649, 653, 657, 664, 703, 705, 721, 753, 760, 829, 838, 845, 890, 892, 893, 907, 954, 964, 1003, 1005, 1006, 1007, 1008, 1010, 1011], "lotfrontag": 74, "garageyrblt": 74, "masvnrarea": [74, 129], "to_fram": 74, "n_quantil": [74, 302, 850, 861, 1005], "output_distribut": [74, 298, 302, 391, 849, 850, 860, 861, 964], "squeez": [74, 155, 156, 276, 298, 988], "2e5": [74, 196, 214, 838], "8e": 74, "ticklabel_format": 74, "scilimit": 74, "479": 74, "weaker": 74, "residu": [74, 192, 198, 411, 443, 459, 460, 461, 529, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 648, 649, 650, 655, 656, 662, 663, 719, 760, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 950, 954, 987, 1008, 1009], "smile": [74, 361, 1010], "7e5": 74, "5e4": 74, "8e5": 74, "multialign": [74, 268], "3e4": 74, "64e4": 74, "533": [74, 75, 166], "plot_transformed_target": [74, 75, 443], "852": [75, 103, 107], "auto_examples_compos": 75, "mahalanobi": [76, 82, 164, 390, 392, 428, 435, 447, 448, 449, 450, 451, 452, 453, 454, 676, 753, 754, 755, 820, 948, 960, 1004, 1007, 1008], "ledoitwolf": [76, 78, 82, 103, 164, 392, 447, 448, 452, 453, 454, 455, 772, 1000], "likelihood": [76, 78, 79, 80, 82, 103, 149, 150, 151, 153, 154, 155, 156, 158, 164, 184, 214, 245, 249, 256, 262, 272, 295, 298, 367, 378, 388, 392, 395, 397, 400, 416, 447, 448, 449, 450, 451, 452, 453, 454, 455, 492, 509, 513, 518, 526, 527, 528, 587, 588, 622, 635, 688, 716, 770, 771, 772, 796, 799, 818, 829, 849, 860, 874, 875, 877, 878, 950, 953, 956, 964, 969, 999, 1000, 1005, 1011], "empiricalcovari": [77, 79, 80, 392, 447, 451, 452, 453, 454, 960], "unbias": [77, 388, 392, 395, 416, 527, 633, 649, 651, 664, 950, 984], "shrunk": [77, 103, 298, 403, 451, 453, 454, 457, 458, 526, 948, 968, 990, 991], "base_x_train": 77, "base_x_test": 77, "coloring_matrix": [77, 78], "shrunkcovari": [77, 103, 392, 447, 448, 451, 452, 453], "empirical_covari": [77, 392], "log_likelihood": [77, 587, 588, 770, 771], "span": [77, 122, 230, 253, 361, 369, 398, 526, 613, 772, 775, 954, 988], "negative_loglik": 77, "real_cov": [77, 78, 448, 451, 452, 453, 454], "emp_cov": [77, 79, 81, 456, 458], "loglik_r": 77, "inv": [77, 81, 293], "formula": [77, 78, 387, 390, 392, 403, 451, 453, 493, 494, 495, 567, 620, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 653, 655, 680, 704, 730, 739, 943, 948, 950, 954, 959, 960, 964, 968, 1001, 1003, 1005], "propos": [77, 78, 276, 361, 366, 367, 376, 378, 390, 392, 397, 402, 428, 512, 584, 585, 653, 654, 655, 830, 831, 950, 953, 957, 968, 972, 1003], "asymptot": [77, 78, 185, 353, 392, 452, 513, 950, 953, 1006], "criterion": [77, 78, 169, 184, 204, 246, 268, 307, 367, 374, 378, 390, 395, 420, 424, 427, 430, 437, 440, 509, 514, 516, 523, 530, 531, 534, 535, 536, 537, 541, 542, 543, 583, 604, 622, 625, 633, 643, 644, 645, 646, 648, 653, 654, 655, 657, 668, 672, 686, 771, 869, 874, 875, 876, 877, 878, 880, 881, 882, 883, 950, 953, 954, 962, 967, 970, 976, 988, 991, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "chen": [77, 78, 392, 397, 453, 701, 731, 946, 954, 999, 1002, 1003, 1004, 1006, 1009, 1010], "Its": [77, 109, 254, 362, 367, 378, 395, 400, 515, 949, 950, 959, 962, 968, 974, 978, 999], "tuned_paramet": [77, 135, 254], "loglik_lw": 77, "loglik_oa": 77, "unseen": [77, 120, 143, 185, 204, 269, 282, 355, 358, 367, 377, 378, 390, 394, 819, 850, 861, 945, 954, 960, 962, 964, 970, 980, 999, 1004, 1008], "loglog": [77, 229], "lik_max": 77, "amax": [77, 120], "lik_min": 77, "amin": 77, "vline": [77, 97, 183, 184, 185, 197, 256, 269, 299], "shrinkage_": [77, 78, 451, 453], "magenta": [77, 124], "purpl": [77, 91, 221], "cyan": [77, 113, 166, 279, 287, 333], "realli": [77, 168, 185, 369, 370, 371, 960, 978, 1010], "interestingli": [77, 146, 964], "outperform": [77, 85, 129, 303, 376, 394, 397, 430, 440, 956], "472": [77, 82], "plot_covariance_estim": [77, 82], "whose": [78, 79, 80, 146, 154, 196, 323, 361, 373, 374, 378, 388, 390, 392, 397, 399, 400, 403, 416, 417, 418, 426, 439, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 492, 511, 515, 517, 518, 521, 524, 526, 549, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 617, 648, 672, 694, 772, 778, 785, 798, 819, 838, 864, 865, 908, 933, 934, 948, 955, 959, 960, 961, 969, 999, 1004, 1005, 1007, 1010], "inspir": [78, 126, 214, 366, 376, 397, 538, 539, 897, 944, 974, 1005], "mmse": [78, 392, 453], "tran": [78, 392, 453], "octob": [78, 361, 392, 453, 996, 1003, 1009, 1010], "toeplitz": 78, "choleski": [78, 196, 214, 374, 456, 504, 588, 625, 627, 628, 631, 632, 633, 635, 636, 646, 649, 651, 657, 659, 660, 664, 770, 771, 950, 999, 1003, 1005, 1008, 1011], "simul": [78, 97, 190, 232, 256, 978], "n_samples_rang": [78, 229], "lw_mse": 78, "oa_ms": 78, "lw_shrinkag": 78, "oa_shrinkag": 78, "error_norm": [78, 80, 447, 448, 449, 450, 451, 452, 453, 454], "darkorang": [78, 99, 104, 105, 197, 207, 220, 242, 243, 244, 247, 263, 265, 271, 279, 281, 287, 288, 315, 333, 345], "532": [78, 82], "plot_lw_vs_oa": [78, 82], "x_i": [79, 114, 141, 166, 197, 309, 333, 390, 395, 396, 397, 400, 591, 592, 596, 599, 600, 602, 808, 809, 812, 945, 946, 950, 956, 957, 958, 964, 968, 969, 970], "d_": [79, 390, 395, 625, 646, 657, 753, 951, 956], "mle": [79, 103, 518, 1004, 1007], "resist": [79, 80, 366], "erron": [79, 80, 395, 950, 997, 1004, 1008], "breakdown": [79, 80, 213, 656, 950], "n_": [79, 80, 256, 309, 390, 395, 397, 623, 629, 662, 673, 946, 950, 954, 956, 957, 961, 966, 969, 970], "smallest": [79, 80, 196, 343, 361, 390, 392, 399, 418, 504, 518, 607, 631, 632, 633, 659, 660, 667, 671, 672, 772, 775, 776, 785, 790, 970, 1009], "pure": [79, 80, 85, 196, 378, 390, 451, 457, 473, 534, 535, 536, 537, 541, 542, 543, 559, 681, 691, 761, 768, 880, 881, 882, 883, 964], "rousseuw": [79, 80], "rousseeuw": [79, 80, 390, 392, 447, 452, 765, 766, 960], "ass": [79, 80, 392, 452], "1984": [79, 80, 392, 452, 880, 881, 970], "wilson": [79, 363, 996, 999], "hilferti": 79, "chi": [79, 110, 302, 358, 399, 496, 569, 572, 573, 575, 576, 577, 581, 582, 583, 586, 615, 616, 617, 618, 619, 733, 734, 991, 996, 1001, 1002], "proceed": [79, 361, 363, 371, 390, 401, 418, 423, 488, 673, 684, 701, 731, 820, 869, 954, 966, 967, 968], "academi": [79, 820], "688": [79, 107], "n_outlier": [79, 80, 199, 225, 283], "gen_cov": 79, "ey": [79, 80, 243, 247, 325, 361, 511, 518, 527], "outliers_cov": 79, "mincovdet": [79, 80, 392, 447, 448, 451, 453, 454, 960, 996, 1003], "robust_cov": 79, "nmcd": 79, "nmle": 79, "26253567e": 79, "06695631e": 79, "22747343e": 79, "23773583": 79, "24640578": 79, "51963999": 79, "inlier": [79, 199, 225, 234, 298, 378, 392, 447, 540, 648, 654, 819, 850, 861, 875, 876, 878, 950, 960, 1003, 1004, 1009], "inlier_plot": 79, "outlier_plot": 79, "get_xlim": [79, 191, 201, 298], "zz": 79, "mahal_emp_cov": 79, "emp_cov_contour": 79, "pubu_r": 79, "mahal_robust_cov": 79, "robust_contour": 79, "ylorbr_r": 79, "dist": [79, 218, 229, 276, 369, 447, 448, 449, 450, 451, 452, 453, 454, 676, 738, 744, 813, 814], "borderaxespad": 79, "cubic": [79, 400], "suggest": [79, 98, 113, 116, 166, 169, 256, 325, 353, 365, 366, 372, 378, 394, 395, 397, 447, 452, 542, 622, 798, 948, 950, 951, 959, 969, 989, 1000, 1007, 1010], "emp_mah": 79, "markeredgewidth": [79, 260], "rm": [79, 152, 369, 373, 392], "mahal": 79, "robust_mah": 79, "location_": [79, 80, 447, 448, 449, 450, 451, 452, 453, 454], "352": [79, 82, 256, 339, 371], "plot_mahalanobis_dist": [79, 82], "aim": [80, 162, 284, 315, 355, 361, 364, 366, 378, 384, 390, 392, 398, 426, 676, 950, 954, 957, 964, 969, 974, 980, 988, 1010], "compens": [80, 167, 172, 196, 214, 257, 333, 392, 395], "soon": [80, 378, 987], "5n_": 80, "johanna": 80, "hardin": 80, "rock": 80, "decemb": [80, 154, 361, 641, 662, 663, 996, 1004, 1006, 1008], "zoubir": 80, "koivunen": 80, "chakhchoukh": 80, "muma": 80, "signal": [80, 95, 96, 97, 105, 122, 149, 154, 155, 164, 174, 195, 197, 215, 247, 309, 389, 390, 398, 399, 400, 480, 498, 503, 508, 511, 514, 518, 602, 623, 629, 630, 640, 641, 661, 662, 663, 760, 950, 954, 971, 978, 983, 990, 991], "tutori": [80, 135, 136, 137, 138, 185, 198, 214, 256, 356, 366, 371, 373, 377, 384, 390, 430, 440, 668, 969, 987, 999], "treatment": [80, 360, 395, 447, 452], "concept": [80, 120, 265, 356, 366, 376, 389, 390, 396, 398, 946, 954, 957, 970, 978], "magazin": [80, 399], "29": [80, 150, 154, 167, 170, 187, 196, 213, 219, 222, 314, 363, 364, 381, 382, 383, 397, 536, 537, 667, 671, 756, 770, 825, 950, 951, 968], "range_n_outli": 80, "err_loc_mcd": 80, "err_cov_mcd": 80, "err_loc_emp_ful": 80, "err_cov_emp_ful": 80, "err_loc_emp_pur": 80, "err_cov_emp_pur": 80, "outliers_index": 80, "outliers_offset": 80, "inliers_mask": 80, "pure_x": 80, "pure_loc": 80, "pure_emp_cov": 80, "font_prop": 80, "hat": [80, 105, 256, 281, 309, 364, 388, 392, 396, 397, 945, 950, 951, 954, 956, 958], "_2": [80, 154, 395, 398, 508, 514, 522, 523, 623, 629, 950, 958, 968, 969], "x_size": 80, "738": [80, 82], "plot_robust_vs_empirical_covari": [80, 82], "graphicallasso": [81, 392, 447, 448, 450, 451, 452, 453, 454, 456, 1004], "largest": [81, 97, 198, 363, 390, 392, 395, 418, 422, 504, 518, 534, 535, 536, 537, 541, 542, 565, 685, 770, 771, 790, 811, 880, 881, 882, 883, 909, 951, 954, 964, 969, 970], "invert": [81, 100, 143, 218, 339, 340, 376, 392, 398, 607, 666, 670, 964, 1005], "fairli": [81, 121, 219, 271, 293, 373, 390, 536, 537, 676, 955, 987], "lost": [81, 361, 376, 951, 954], "tweak": [81, 394, 953, 989, 1007], "readabl": [81, 257, 309, 370, 371, 373, 384, 511, 1005, 1008, 1009, 1010, 1011], "neighborhood": [81, 164, 217, 277, 290, 363, 378, 390, 395, 401, 423, 428, 435, 479, 481, 492, 518, 526, 605, 673, 799, 815, 816, 819, 821, 822, 823, 824, 825, 827, 833, 834, 853, 951, 960, 976, 991, 1005], "make_sparse_spd_matrix": [81, 506], "prng": 81, "prec": [81, 226, 504, 954], "smallest_coef": [81, 504], "largest_coef": [81, 504], "multivariate_norm": [81, 85, 241, 447, 448, 449, 450, 451, 452, 453, 454], "ledoit_wolf": [81, 392, 1009], "prec_": 81, "lw_cov_": 81, "lw_prec_": 81, "this_cov": 81, "this_prec": 81, "ma": [81, 325, 950, 1002, 1007], "masked_equ": 81, "set_facecolor": [81, 241], "set_axis_bgcolor": 81, "alpha_": [81, 135, 166, 176, 184, 185, 450, 588, 621, 622, 624, 628, 630, 632, 633, 638, 640, 650, 652, 950, 970, 984, 996, 1003], "627": [81, 82], "plot_sparse_cov": [81, 82], "720": 82, "auto_examples_covari": 82, "cross_decomposit": [83, 84, 85, 164, 232, 356, 1000, 1001, 1003, 1004, 1005], "plscanon": [84, 459, 461, 462, 976, 991, 1000, 1004, 1006, 1008, 1010], "plsregress": [84, 85, 976, 991, 1003, 1006, 1008, 1010], "share": [84, 127, 166, 246, 338, 347, 349, 353, 354, 367, 373, 390, 395, 398, 526, 645, 680, 684, 770, 771, 775, 776, 948, 996, 998, 1004, 1006, 1008, 1011], "appar": [84, 956, 978], "scatterplot": [84, 175, 256, 279], "maxim": [84, 85, 95, 106, 122, 175, 246, 247, 257, 261, 265, 266, 286, 303, 308, 325, 343, 347, 363, 378, 387, 390, 393, 395, 399, 400, 526, 587, 588, 621, 622, 625, 646, 656, 657, 696, 772, 775, 776, 785, 842, 848, 857, 948, 950, 954, 957, 959, 969, 984, 987, 999, 1001, 1006, 1009], "weak": [84, 109, 120, 123, 214, 262, 394, 534, 535, 536, 541, 542, 543, 607, 957, 978], "spheric": [84, 219, 243, 245, 246, 289, 362, 739, 770, 771, 950, 953, 957, 974], "var": [84, 85, 101, 113, 146, 176, 256, 363, 399, 618, 622, 874, 875, 876, 877, 878, 954, 1004], "corr": [84, 169, 256], "corrcoef": [84, 106], "plsca": [84, 460], "x_train_r": 84, "y_train_r": 84, "x_test_r": 84, "y_test_r": 84, "yj": [84, 302], "noiz": 84, "xb": [84, 852], "_pl": 84, "503": 84, "n_target": [84, 378, 393, 459, 460, 461, 462, 501, 533, 588, 620, 623, 624, 627, 628, 629, 630, 631, 633, 634, 637, 638, 639, 640, 641, 642, 648, 649, 650, 651, 652, 658, 659, 660, 661, 662, 663, 664, 955, 1008, 1010], "futur": [84, 129, 154, 157, 197, 237, 257, 267, 309, 366, 367, 369, 376, 378, 379, 384, 394, 398, 473, 511, 607, 612, 922, 924, 954, 955, 969, 970, 978, 993, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "50210309": 84, "55301008": 84, "72528805": 84, "03429511": 84, "83576671": 84, "74902647": 84, "03916339": 84, "84652988": 84, "78629756": 84, "11231897": 84, "1905275": 84, "33508757": 84, "35433161": 84, "32686504": 84, "39877158": 84, "47827435": 84, "38004088": 84, "35574845": 84, "exce": [84, 274, 307, 400, 421, 492, 579, 626, 635, 1005, 1008, 1010], "271": [84, 86], "plot_compare_cross_decomposit": [84, 86], "pcr": [85, 393], "pl": [85, 200, 363, 393, 459, 460, 461, 462, 1001], "greedili": [85, 146, 394, 399, 438], "suffer": [85, 117, 168, 298, 339, 353, 390, 397, 400, 521, 738, 949, 950, 954, 957, 1005], "mention": [85, 214, 307, 349, 353, 366, 369, 370, 376, 378, 673, 864, 865, 943, 948, 950, 975, 978, 989, 1003, 1004, 1005], "dive": [85, 366, 371], "explained_variance_": [85, 511, 518, 521, 988, 1003], "onto": [85, 218, 219, 230, 298, 376, 395, 398, 402, 418, 426, 439, 510, 516, 520, 604, 605, 607, 665, 948, 952, 957], "recommend": [85, 117, 161, 213, 226, 265, 302, 308, 353, 354, 356, 360, 364, 366, 367, 371, 373, 376, 381, 393, 394, 395, 397, 399, 417, 418, 425, 427, 429, 473, 485, 512, 515, 521, 526, 538, 539, 546, 583, 588, 608, 609, 647, 653, 669, 674, 675, 677, 678, 783, 785, 829, 838, 852, 853, 857, 858, 860, 861, 862, 863, 865, 874, 877, 909, 922, 943, 951, 954, 956, 958, 961, 964, 966, 968, 969, 970, 973, 978, 991, 998, 999, 1005, 1006, 1007, 1008, 1010], "linearregress": [85, 132, 175, 186, 191, 192, 193, 194, 199, 202, 213, 228, 233, 252, 270, 299, 349, 366, 376, 377, 391, 397, 443, 547, 609, 612, 623, 626, 629, 631, 648, 649, 664, 950, 964, 987, 1000, 1001, 1005, 1008, 1009, 1010], "retriev": [85, 166, 200, 263, 339, 347, 369, 378, 391, 395, 398, 399, 446, 473, 567, 570, 571, 603, 630, 640, 661, 701, 705, 707, 708, 731, 756, 808, 812, 845, 870, 950, 952, 954, 956, 974, 975, 988, 1001, 1006, 1008, 1010], "026": 85, "remark": [85, 146, 355, 366, 964], "predit": 85, "pca_2": 85, "522": [85, 86, 873], "plot_pcr_vs_pl": [85, 86], "793": 86, "auto_examples_cross_decomposit": 86, "multilabel": [87, 92, 164, 224, 239, 263, 274, 361, 367, 368, 378, 385, 459, 464, 474, 485, 486, 492, 500, 518, 534, 541, 544, 651, 652, 679, 683, 689, 701, 704, 705, 709, 710, 713, 714, 729, 731, 758, 759, 762, 763, 767, 769, 802, 806, 830, 837, 840, 844, 846, 856, 877, 880, 882, 898, 918, 919, 920, 965, 976, 977, 989, 991, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1009, 1010, 1011], "plot_digits_last_imag": [88, 92], "iris": [89, 262, 263, 986], "150x4": 89, "unus": [89, 101, 102, 167, 193, 217, 219, 441, 555, 738, 746, 943, 951, 996, 1004, 1006, 1007, 1009], "plai": [89, 96, 123, 151, 179, 205, 250, 279, 287, 321, 322, 353, 376, 989], "set1": [89, 256, 285, 286], "getter": [89, 447, 448, 449, 450, 451, 452, 453, 454, 570, 571, 574], "110": [89, 175, 193, 203, 228, 416, 948, 949], "3rd": [89, 157, 808, 851, 956, 964], "plot_iris_dataset": [89, 92], "easi": [90, 167, 204, 214, 244, 254, 256, 325, 338, 349, 361, 371, 373, 376, 377, 390, 397, 477, 481, 487, 840, 943, 949, 953, 961, 964, 974, 975, 978, 989, 1006], "make_gaussian_quantil": [90, 110, 112, 362, 448, 452, 453, 454, 497], "321": 90, "323": [90, 229], "y2": [90, 112, 692, 739, 955], "324": [90, 361], "multi": [90, 108, 109, 133, 164, 174, 212, 215, 216, 219, 223, 224, 225, 232, 235, 239, 249, 253, 265, 272, 274, 291, 296, 306, 338, 342, 348, 354, 361, 363, 367, 368, 374, 378, 381, 390, 397, 398, 400, 407, 416, 430, 440, 447, 452, 472, 473, 481, 482, 487, 491, 492, 496, 497, 499, 518, 526, 527, 528, 530, 532, 534, 535, 536, 538, 541, 542, 544, 546, 587, 610, 620, 623, 624, 629, 630, 634, 635, 637, 638, 639, 640, 643, 645, 649, 650, 651, 652, 653, 658, 661, 667, 679, 689, 696, 704, 709, 715, 717, 758, 772, 785, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 821, 823, 829, 830, 831, 834, 840, 853, 856, 867, 868, 872, 874, 877, 880, 881, 882, 884, 886, 892, 895, 898, 943, 955, 957, 961, 964, 968, 974, 975, 976, 980, 986, 990, 991, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010], "325": 90, "326": [90, 229], "374": [90, 92], "plot_random_dataset": [90, 92], "make_multilabel_classif": [91, 232, 362, 492, 513, 763, 804, 805, 954, 998, 999, 1001, 1007], "star": [91, 132, 366], "degener": [91, 402, 419, 432, 510, 696, 950, 954, 1005, 1009, 1010], "vocabulari": [91, 211, 338, 339, 376, 398, 565, 566, 567, 568, 956, 980, 989, 996, 998, 1001, 1004, 1007, 1009], "757": [91, 254, 363], "w0": 91, "w1": [91, 397, 634], "make_ml_clf": 91, "ff3333": 91, "0198e1": 91, "bf5fff": 91, "fcd116": 91, "ff7216": 91, "4dbd33": 91, "87421f": 91, "plot_2d": [91, 217], "p_c": [91, 500], "p_w_c": [91, 500], "allow_unlabel": [91, 232, 500], "return_distribut": [91, 500], "sep": [91, 265], "p_w": 91, "152": [91, 92, 177, 215, 245, 248, 371], "plot_random_multilabel_dataset": [91, 92], "779": [92, 338], "auto_examples_dataset": 92, "blind": [93, 107, 164, 338, 395, 510, 518], "fastica": [93, 107, 164, 395, 509, 512, 518, 988, 996, 998, 1004, 1010, 1011], "increment": [93, 107, 164, 259, 369, 371, 421, 425, 441, 481, 510, 511, 512, 513, 516, 518, 521, 579, 623, 635, 643, 797, 805, 806, 808, 809, 810, 811, 812, 842, 843, 853, 872, 873, 929, 950, 956, 999, 1000], "fa": [93, 106, 107, 164, 371, 395, 451, 454, 509, 518, 772, 795], "precomput": [93, 107, 164, 174, 215, 220, 276, 278, 367, 374, 376, 378, 390, 398, 401, 411, 419, 420, 423, 424, 428, 430, 435, 443, 459, 460, 461, 501, 508, 512, 514, 517, 519, 525, 531, 533, 535, 537, 539, 542, 545, 547, 587, 588, 597, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 658, 659, 661, 662, 665, 667, 668, 669, 673, 749, 753, 756, 765, 766, 806, 807, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 831, 873, 874, 875, 876, 877, 878, 881, 883, 930, 931, 932, 946, 952, 957, 969, 975, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011], "_nmf": [94, 371], "_beta_diverg": 94, "mbgyr": 94, "plot_beta_diverg": [94, 107], "chapter": [95, 349, 367, 390, 395, 397, 400, 507, 509, 511, 591, 596, 599, 620, 944, 947, 950, 969, 970], "decompos": [95, 99, 113, 300, 389, 511, 515, 685, 794, 909, 949, 950, 954, 971, 990, 991], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 233], "constrained_layout": [95, 217], "set_constrained_layout_pad": 95, "w_pad": [95, 118, 344], "h_pad": [95, 118, 344], "set_edgecolor": 95, "vec": [95, 398, 515, 517, 524], "im": [95, 106, 267, 280, 977], "pad": [95, 118, 161, 217, 234, 338, 344, 398, 565, 566, 568], "initialis": [95, 515, 517, 524, 996, 1004, 1005], "mathbb": [95, 113, 152, 393, 954, 961, 969], "4096": [95, 361, 395, 472], "human": [95, 167, 303, 338, 384, 390, 395, 830, 831, 954, 961, 1005], "friendli": [95, 354, 366, 373, 395, 865, 966, 967, 974, 975], "visualis": [95, 98, 106, 232, 521, 957, 975], "64x64": [95, 361, 395], "singular": [95, 374, 387, 390, 393, 429, 431, 459, 460, 461, 462, 498, 501, 511, 515, 517, 518, 521, 524, 526, 527, 634, 649, 650, 651, 664, 909, 950, 951, 953, 990, 991, 1002, 1003], "scalar": [95, 309, 371, 378, 391, 400, 402, 442, 445, 501, 510, 592, 593, 594, 599, 600, 604, 605, 713, 717, 888, 896, 946, 958, 960, 964, 968, 974, 1006, 1007, 1010], "noise_variance_": [95, 184, 509, 511, 518, 633, 1003, 1010], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 166, 358, 392, 395, 398, 451, 493, 494, 495, 604, 605, 606, 607, 626, 648, 655, 656, 808, 809, 810, 811, 812, 948, 950, 953, 956, 974, 980, 988, 991], "subcompon": [95, 395], "ica_estim": 95, "15e": 95, "sparsepca": [95, 508, 510, 511, 512, 514, 516, 517, 518, 519, 522, 523, 996, 1003, 1004, 1006, 1007, 1009, 1010, 1011], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 355, 395, 508, 515, 519, 522, 523, 997, 999, 1006, 1007, 1009, 1010, 1011], "batch_dict_estim": 95, "That": [95, 146, 185, 225, 256, 260, 339, 340, 354, 360, 373, 378, 394, 399, 400, 422, 425, 436, 534, 541, 570, 789, 880, 881, 943, 951, 952, 954, 960, 970, 1005, 1006], "enhanc": [95, 365, 366, 369, 376, 378, 390, 954, 972, 994, 995, 996, 997, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "consum": [95, 349, 360, 367, 378, 390, 394, 397, 427, 775, 776, 833, 834, 950, 978, 1001], "kmeans_estim": 95, "heteroscedast": [95, 103, 122, 198, 395, 849, 860], "fa_estim": 95, "factoranalysi": [95, 103, 106, 395, 521, 997, 999, 1008, 1010], "wrap": [95, 115, 122, 276, 360, 367, 378, 412, 485, 562, 563, 634, 653, 717, 799, 856, 944, 954, 957, 969, 974, 996, 1001, 1004, 1006, 1007, 1009], "suit": [95, 127, 166, 196, 197, 225, 246, 309, 310, 333, 338, 354, 366, 367, 370, 371, 373, 376, 381, 393, 395, 397, 400, 428, 430, 480, 654, 810, 903, 943, 946, 951, 954, 956, 957, 968, 974, 975, 978, 982, 1003, 1010], "colormap": [95, 112, 157, 188, 205, 325, 330, 344, 674, 1009], "uv": [95, 395], "x_1": [95, 141, 152, 193, 197, 333, 393, 395, 397, 400, 590, 602, 634, 950, 956, 958, 964, 968], "x_n": [95, 395, 956, 958, 968], "dict_pos_dict_estim": 95, "positive_dict": [95, 508, 514, 522, 523], "dict_pos_code_estim": 95, "fit_algorithm": [95, 508, 514], "cd": [95, 363, 364, 366, 369, 395, 449, 450, 456, 508, 514, 516, 517, 520, 522, 523, 524, 950, 989, 1001], "positive_cod": [95, 508, 514, 519, 522, 523], "dict_pos_estim": 95, "687": [95, 154, 159, 966], "plot_faces_decomposit": [95, 107], "imagin": [96, 149, 394, 395, 398, 950], "simultan": [96, 260, 264, 346, 358, 387, 943, 954, 955, 970, 978, 1003], "microphon": 96, "s1": [96, 146, 157, 184, 185, 363, 988], "sinusoid": [96, 111, 122, 231, 400, 947, 988], "s2": [96, 146, 157, 184, 185, 363, 527, 988], "s3": [96, 146, 184, 185, 363, 988], "sawtooth": [96, 988], "saw": [96, 197, 988], "tooth": [96, 988], "s_": [96, 260, 951, 962, 988], "a_": [96, 387, 390, 515, 517, 524, 950, 988], "mixing_": [96, 97, 510, 988], "prove": [96, 978], "revert": [96, 607, 609, 610, 1003, 1008], "unmix": [96, 402, 510], "allclos": [96, 966, 988], "mean_": [96, 260, 509, 510, 511, 516, 518, 520, 853, 964, 988, 1004], "orthogon": [96, 97, 98, 164, 174, 215, 389, 395, 503, 508, 514, 516, 519, 520, 525, 641, 642, 662, 663, 966, 976, 991, 996], "steelblu": [96, 97, 131], "sig": 96, "341": [96, 107, 339], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 389, 402, 970, 990, 991], "geometr": [97, 390, 665, 680, 706, 732, 951, 1004], "identifi": [97, 104, 122, 123, 166, 196, 199, 244, 246, 254, 259, 265, 285, 308, 338, 339, 360, 361, 365, 366, 369, 370, 378, 390, 391, 394, 397, 398, 400, 428, 435, 464, 473, 485, 486, 532, 533, 540, 583, 620, 626, 676, 688, 749, 798, 819, 838, 867, 868, 943, 950, 954, 960, 967, 978, 987, 1003, 1005, 1010], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 247], "axis_list": 97, "x_axi": [97, 204, 260], "y_axi": [97, 204], "quiver": 97, "hline": 97, "set_zord": 97, "09": [97, 105, 163, 166, 229, 232, 269, 272, 319, 341, 390, 710, 811, 954, 964, 968], "339": [97, 107], "plot_ica_vs_pca": [97, 107], "fragment": 98, "undistort": 98, "noiseless": [98, 952], "pursuit": [98, 164, 174, 215, 395, 452, 503, 508, 514, 519, 525, 641, 642, 662, 663, 976, 991, 996], "omp": [98, 105, 195, 395, 508, 514, 519, 525, 641, 642, 662, 663, 976, 991, 996, 1004], "promin": [98, 378], "reminisc": 98, "downsampl": [98, 234], "075": [98, 290], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 204, 244, 378, 419, 425, 426, 427, 449, 450, 459, 460, 461, 508, 509, 510, 513, 514, 515, 516, 517, 520, 538, 539, 604, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 653, 654, 655, 656, 657, 667, 669, 770, 771, 822, 830, 831, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 1000, 1003, 1004, 1006, 1009, 1010], "n_steps_": [98, 427, 514, 515, 1009], "107": [98, 390, 867, 955, 998], "reconstruct_from_patches_2d": [98, 398, 560], "intercept": [98, 188, 205, 213, 334, 378, 459, 460, 461, 526, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 848, 852, 854, 872, 873, 879, 950, 952, 954, 959, 968, 969, 999, 1001, 1005, 1006], "transform_algorithm": [98, 105, 508, 514, 519], "n1": 98, "atom": [98, 105, 395, 508, 514, 516, 519, 520, 522, 523, 630, 640, 661, 950, 996, 1009], "transform_n_nonzero_coef": [98, 105, 508, 514, 519], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 508, 514, 519, 1009], "set_param": [98, 106, 114, 119, 122, 168, 176, 184, 185, 189, 200, 204, 230, 269, 306, 328, 339, 368, 378, 390, 391, 397, 400, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 960, 980, 987, 996, 1002, 1003, 1004, 1009, 1010], "050": [98, 107, 962], "plot_image_denois": [98, 107], "ipca": [99, 510, 511], "flip": [99, 559, 717, 909, 956, 1000, 1009], "incrementalpca": [99, 355, 395, 510, 512, 516, 518, 521, 1000, 1003, 1004, 1006, 1007, 1010], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 124, 202, 213, 220, 243, 244, 263], "x_transform": [99, 127, 462, 508, 509, 510, 511, 512, 514, 516, 520, 543, 615, 616, 665, 666, 667, 668], "nmean": 99, "shadow": [99, 104, 105, 220, 315, 332, 340, 398], "scatterpoint": [99, 104, 220, 243, 315], "293": [99, 107], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 164, 185, 249, 272, 354, 371, 378, 381, 390, 394, 400, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 440, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 481, 496, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 777, 785, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 922, 943, 954, 957, 996, 997, 1000, 1002, 1003, 1004, 1010], "train_ax": 100, "test_ax": 100, "straight": [100, 186, 192, 194, 253, 353], "inner": [100, 122, 257, 261, 315, 353, 398, 422, 491, 523, 559, 566, 625, 646, 657, 750, 752, 946, 954, 964, 969, 997, 1000, 1010], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 368, 951], "untangl": 100, "mind": [100, 166, 214, 302, 338, 339, 349, 366, 384, 392, 394, 397, 623, 624, 680, 950, 969, 974, 980, 987], "investig": [100, 106, 162, 167, 366, 950], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 119, 146, 169, 184, 185, 307, 338, 353, 354, 367, 370, 373, 374, 376, 378, 386, 387, 390, 395, 397, 398, 526, 562, 563, 570, 574, 584, 585, 838, 943, 946, 948, 950, 954, 957, 969, 978, 1004, 1005, 1006, 1010], "analyt": [100, 395, 400, 509, 597, 684, 944, 948, 954, 973, 978], "kernelridg": [100, 149, 231, 649, 947, 1000], "relianc": 100, "731": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 253, 390, 765, 766, 951, 978, 996, 1008], "kevin": [101, 620, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011], "hugh": [101, 848, 998, 1009], "pdf": [101, 146, 256, 281, 298, 363, 366, 390, 399, 421, 427, 508, 511, 514, 518, 618, 621, 626, 635, 641, 643, 644, 648, 653, 656, 659, 660, 662, 663, 669, 810, 811, 822, 829, 865, 867, 950, 967, 970, 977, 992, 996], "30000": [101, 361], "pdf_z": 101, "plot_fig": [101, 193], "fig_num": [101, 193], "pca_scor": [101, 103], "vt": [101, 527], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 167, 193], "plot_pca_3d": [101, 107], "cla": 102, "102": [102, 107, 371, 987, 998], "plot_pca_iri": [102, 107], "consequ": [103, 214, 256, 257, 298, 322, 349, 395, 397, 538, 539, 543, 632, 633, 944, 950, 954, 970, 1005, 1007], "homoscedast": [103, 228, 302, 1004], "succe": 103, "subspac": [103, 393, 397, 430, 492, 532, 533, 668, 672, 909, 948, 957, 960, 966, 978, 988], "overestim": [103, 349, 394], "appropri": [103, 154, 166, 265, 343, 349, 366, 367, 373, 378, 389, 390, 394, 396, 397, 401, 423, 428, 435, 466, 467, 468, 473, 477, 478, 479, 481, 482, 487, 553, 559, 568, 569, 572, 573, 575, 576, 577, 649, 651, 664, 685, 815, 816, 817, 819, 821, 823, 824, 825, 938, 950, 953, 954, 964, 1000, 1003, 1009], "circumst": [103, 214, 957], "nip": [103, 363, 492, 518, 543, 618, 954], "598": [103, 150, 234, 239, 518], "604": [103, 518], "minka": [103, 518, 950], "deni": [103, 998, 999, 1003, 1004, 1005], "engemann": [103, 998, 999, 1003], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 136, 161, 162, 164, 249, 261, 270, 272, 328, 349, 366, 367, 376, 394, 397, 497, 552, 679, 717, 772, 794, 796, 880, 881, 943, 954, 984, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1008, 1009], "compute_scor": [103, 175, 176, 621, 622, 1005], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 135, 186, 255, 259], "violet": 103, "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 265, 483, 484, 954, 974], "92461872": 104, "05306648": 104, "x_r": [104, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580], "x_r2": 104, "244": [104, 107, 243, 248, 561], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 395, 508, 514, 517, 525, 1003, 1004, 1006, 1008, 1010], "mexican": 105, "piecewis": [105, 309, 387, 945, 950, 964, 970], "matter": [105, 247, 349, 390, 397, 544, 645, 653, 655, 950, 1000], "motiv": [105, 366, 367, 378, 397, 946, 954, 964, 978, 1009], "heavier": [105, 392, 950], "subsampl": [105, 121, 124, 167, 196, 213, 214, 308, 536, 537, 538, 539, 540, 609, 656, 775, 776, 799, 838, 850, 861, 888, 898, 946, 950, 975, 977, 996, 1006, 1010], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 508, 514, 519, 525, 1006], "n_nonzero": 105, "coder": [105, 519, 692], "flatnonzero": [105, 184, 255, 264, 265, 756], "soft": [105, 130, 131, 366, 378, 546, 547, 868, 876, 968, 978, 1001], "debias": 105, "lstsq": [105, 366, 634, 647], "rcond": 105, "353": [105, 107, 989], "plot_sparse_cod": [105, 107], "uncov": [106, 672], "inher": [106, 191, 349, 390, 395, 944, 946, 948, 949, 951, 955], "varimax": [106, 395, 509, 1008], "jona": [106, 1008], "sassenhagen": [106, 1008], "set_yticklabel": [106, 152, 161, 162, 169, 267, 340], "n_comp": [106, 172], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "408": [106, 107], "plot_varimax_fa": [106, 107], "auto_examples_decomposit": 107, "predictor": [108, 133, 164, 196, 214, 367, 377, 378, 391, 393, 394, 397, 400, 444, 445, 459, 460, 461, 473, 493, 494, 495, 532, 533, 539, 542, 545, 579, 587, 607, 609, 610, 625, 630, 634, 646, 650, 657, 794, 796, 805, 806, 834, 846, 847, 853, 928, 950, 955, 997, 1003, 1006], "stack": [108, 133, 164, 281, 347, 365, 373, 376, 378, 396, 442, 444, 445, 473, 492, 539, 542, 544, 545, 589, 604, 605, 607, 630, 650, 794, 796, 834, 838, 846, 847, 853, 928, 944, 974, 975, 976, 977, 991, 999, 1003, 1004, 1005, 1006, 1007], "versu": [108, 129, 133, 164, 166, 174, 205, 211, 215, 231, 244, 249, 272, 284, 312, 319, 390, 394, 397, 400, 481, 497, 511, 530, 533, 587, 616, 635, 636, 643, 645, 651, 652, 653, 654, 758, 769, 772, 777, 795, 799, 805, 834, 868, 869, 876, 877, 880, 881, 943, 950, 954, 955, 960, 967, 968, 969, 987, 1004], "isolationforest": [108, 133, 164, 225, 234, 876, 960, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011], "oob": [108, 121, 133, 164, 397, 492, 541, 975, 998, 1009], "votingclassifi": [108, 133, 164, 481, 541, 547, 635, 811, 815, 877, 880, 943, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "vote": [108, 130, 131, 133, 164, 274, 378, 379, 478, 532, 533, 534, 537, 541, 542, 546, 547, 634, 801, 815, 816, 821, 823, 955, 957, 976, 987, 991, 999, 1001, 1006], "hasti": [109, 110, 113, 114, 120, 124, 146, 167, 184, 255, 363, 394, 397, 496, 497, 530, 536, 537, 605, 633, 697, 698, 699, 803, 820, 865, 880, 881, 944, 948, 950, 955, 961, 966, 968, 970], "2009": [109, 110, 113, 114, 124, 167, 390, 394, 395, 397, 398, 496, 497, 505, 508, 514, 515, 517, 518, 521, 524, 530, 536, 537, 612, 648, 656, 673, 804, 880, 881, 908, 909, 950, 954, 955, 961, 970], "tibshirani": [109, 113, 114, 124, 146, 167, 184, 255, 363, 394, 397, 497, 536, 537, 605, 633, 697, 698, 699, 803, 820, 880, 881, 944, 948, 950, 955, 961, 970], "friedman": [109, 113, 114, 124, 167, 255, 392, 394, 397, 456, 493, 494, 495, 497, 535, 536, 537, 542, 570, 571, 803, 880, 881, 883, 948, 950, 955, 961, 970], "ed": [109, 114, 124, 167, 397, 497, 536, 537, 966, 996, 1003], "springer": [109, 113, 114, 124, 167, 255, 394, 395, 397, 497, 512, 536, 537, 667, 671, 673, 681, 696, 701, 715, 716, 731, 770, 880, 881, 951, 954, 955, 961, 970], "zhu": [109, 110, 397, 496, 530, 635, 867], "zou": [109, 110, 184, 397, 496, 530, 633, 950, 968], "rosset": [109, 110, 397, 496, 530], "make_hastie_10_2": [109, 120, 124, 260, 362, 397, 536, 961], "12_000": 109, "Be": [109, 143, 158, 338, 366, 392, 544, 545, 625, 631, 632, 633, 635, 636, 646, 657, 680, 789, 790, 848, 964, 993, 997], "stump": [109, 112, 397, 536, 1007], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 121, 122, 168, 306, 309, 343, 397, 534, 535, 536, 537, 538, 539, 541, 542, 543, 880, 881, 882, 883, 970, 1002], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 347], "ada_r": 109, "zero_one_loss": [109, 366, 679, 709, 954, 997, 998, 999], "ada_discrete_err": 109, "staged_predict": [109, 110, 123, 397, 530, 531, 536, 537, 538, 539, 996, 1008], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 332], "get_fram": 109, "344": [109, 133], "plot_adaboost_hastie_10_2": [109, 133], "sphere": [110, 164, 216, 217, 223, 339, 396, 496, 566, 665, 666, 667, 668, 669, 739, 895, 948, 952, 957], "roughli": [110, 122, 185, 247, 266, 303, 353, 378, 395, 398, 400, 496, 951, 996], "samm": [110, 112, 397, 530], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 125, 370, 371, 373, 381, 390, 426, 439, 530, 531, 535, 536, 537, 540, 542, 643, 644, 645, 653, 655, 830, 831, 881, 883, 960, 970], "alwai": [110, 119, 122, 175, 196, 214, 222, 229, 259, 262, 266, 322, 339, 349, 353, 354, 360, 366, 367, 369, 371, 377, 378, 381, 388, 390, 391, 394, 397, 398, 399, 400, 411, 422, 427, 442, 443, 445, 447, 459, 460, 461, 465, 473, 485, 486, 521, 523, 526, 528, 529, 531, 533, 535, 536, 537, 538, 539, 541, 542, 545, 547, 558, 565, 566, 568, 571, 588, 605, 607, 609, 610, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 648, 649, 650, 653, 655, 656, 669, 672, 681, 685, 691, 697, 698, 699, 707, 709, 710, 714, 757, 760, 761, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 806, 807, 816, 817, 824, 825, 831, 838, 846, 851, 853, 865, 873, 874, 875, 877, 878, 880, 881, 883, 910, 943, 944, 946, 948, 950, 953, 954, 957, 960, 962, 966, 967, 969, 970, 978, 980, 987, 996, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "crop": [110, 373], "discrete_estimator_error": 110, "estimator_errors_": [110, 530, 531], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 530, 531], "211": [110, 133, 261, 316, 849, 860], "plot_adaboost_multiclass": [110, 133], "r2": [111, 129, 167, 191, 231, 367, 391, 397, 531, 547, 650, 796, 954, 962, 1005], "1d": [111, 113, 164, 197, 229, 277, 290, 332, 345, 366, 372, 374, 377, 378, 391, 396, 442, 445, 594, 610, 630, 634, 637, 640, 661, 679, 684, 688, 689, 695, 704, 705, 709, 713, 717, 758, 759, 762, 769, 815, 816, 817, 818, 819, 821, 823, 824, 825, 838, 888, 892, 893, 919, 941, 955, 980, 987, 996, 1001, 1002, 1003, 1005, 1009, 1010], "299": [111, 218, 219, 220, 657], "detail": [111, 113, 116, 118, 123, 129, 184, 185, 222, 227, 230, 231, 236, 238, 247, 254, 258, 263, 282, 283, 306, 307, 308, 309, 310, 343, 345, 346, 349, 353, 354, 355, 358, 359, 360, 361, 364, 366, 367, 369, 370, 371, 373, 376, 377, 378, 379, 381, 384, 389, 390, 393, 394, 395, 397, 399, 400, 401, 403, 412, 413, 416, 422, 423, 425, 426, 427, 428, 430, 435, 436, 437, 439, 440, 442, 444, 445, 446, 450, 473, 501, 508, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 525, 526, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 591, 596, 599, 608, 609, 611, 616, 622, 624, 628, 630, 632, 633, 634, 635, 636, 638, 640, 642, 643, 645, 649, 651, 653, 655, 656, 664, 665, 666, 667, 668, 669, 670, 671, 672, 689, 749, 753, 754, 755, 756, 771, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 811, 815, 816, 818, 819, 821, 823, 824, 826, 827, 832, 835, 837, 838, 850, 861, 867, 868, 870, 874, 877, 880, 881, 882, 883, 903, 943, 944, 948, 952, 953, 954, 955, 957, 958, 960, 967, 976, 977, 978, 980, 986, 989, 991, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "drucker": [111, 397, 531], "1997": [111, 361, 395, 397, 400, 512, 531, 667, 671, 950, 951, 954], "dummi": [111, 196, 214, 259, 356, 367, 370, 385, 846, 854, 964, 970, 991, 997, 999, 1000, 1001, 1003], "decisiontreeregressor": [111, 113, 235, 299, 306, 345, 346, 370, 531, 533, 535, 536, 537, 539, 542, 609, 610, 880, 883, 885, 904, 970, 997, 998, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "adaboostregressor": [111, 397, 530, 539, 998, 999, 1002, 1005, 1006, 1009, 1011], "regr_1": [111, 345, 346], "regr_2": [111, 345, 346], "y_1": [111, 333, 345, 346, 393, 954, 958, 968], "y_2": [111, 333, 345, 346, 958], "525": [111, 133, 418, 605, 944], "plot_adaboost_regress": [111, 133], "puriti": [112, 884, 886], "plot_adaboost_twoclass": [112, 133], "bdt": 112, "plot_color": [112, 344], "br": 112, "plot_step": [112, 118, 344], "class_nam": [112, 250, 884, 886, 970], "xx0": [112, 608], "twoclass_output": 112, "plot_rang": 112, "679": [112, 133, 198, 872], "irreduc": 113, "light": [113, 167, 361], "beam": [113, 996], "pointwis": [113, 156, 401, 423], "offset": [113, 172, 376, 392, 395, 447, 485, 486, 540, 609, 610, 618, 619, 621, 622, 654, 703, 750, 752, 819, 876, 954, 968, 987, 1004], "narrow": [113, 122, 298, 300, 370, 813, 814], "tradeoff": [113, 164, 230, 249, 263, 264, 272, 338, 353, 373, 396, 492, 541, 702, 764, 799, 834, 853, 872, 951, 987, 1005, 1008], "bootstrap": [113, 114, 121, 161, 259, 268, 308, 394, 397, 531, 532, 533, 534, 535, 540, 541, 542, 898, 925, 950, 996, 997, 999, 1001, 1004, 1006, 1009], "stem": [113, 168, 180, 195, 247, 394, 398, 946, 956], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": 113, "0092": 113, "baggingregressor": [113, 397, 532, 883, 999, 1002, 1004, 1007, 1011], "n_repeat": [113, 116, 123, 145, 166, 168, 169, 256, 306, 394, 492, 611, 786, 787, 962], "knn": [113, 130, 137, 161, 276, 284, 285, 288, 308, 315, 338, 397, 579, 822, 867, 868, 957, 967, 987, 1002], "y_predict": [113, 367, 996], "y_error": [113, 202], "y_nois": 113, "y_bia": 113, "y_var": 113, "367": [113, 133, 397, 996], "plot_bias_vari": [113, 133], "z_i": [114, 958], "y_i": [114, 309, 333, 388, 397, 945, 946, 950, 954, 958, 968, 969, 970], "whilst": [114, 219], "practition": 114, "suitabl": [114, 122, 182, 293, 340, 360, 361, 371, 374, 390, 395, 398, 430, 440, 446, 464, 482, 485, 604, 612, 808, 809, 812, 848, 870, 921, 923, 948, 950, 953, 964, 966, 968, 974, 977, 989, 1010, 1011], "p592": 114, "593": 114, "kian": [114, 1001], "ho": [114, 397, 532, 533, 954, 1001, 1004, 1005, 1010], "hui": [114, 184, 515, 517, 524, 633, 950], "ordereddict": 114, "123": [114, 131, 206, 215, 302, 304, 349, 397, 493, 494, 495, 532, 533, 806, 955, 962], "warm_start": [114, 153, 189, 309, 367, 371, 378, 397, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 587, 623, 625, 626, 629, 635, 637, 639, 643, 644, 645, 646, 653, 654, 655, 657, 770, 771, 822, 830, 831, 960, 976, 991, 996, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1010], "disabl": [114, 338, 364, 366, 398, 427, 514, 515, 516, 523, 536, 537, 538, 539, 832, 892, 893, 964, 1002, 1005, 1009, 1011], "track": [114, 121, 314, 366, 368, 369, 381, 386, 511, 923, 955, 975, 1003, 1006], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 397, 532, 533, 534, 535, 541, 542, 1001, 1003], "log2": [114, 206, 236, 534, 535, 536, 537, 541, 542, 880, 881, 882, 883, 955], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 532, 533, 534, 535, 541, 542, 998], "clf_err": 114, "plot_ensemble_oob": [114, 133], "tim": [115, 128, 996, 1001, 1002, 1005, 1006, 1007, 1009, 1011], "betatim": [115, 128, 1011], "leak": [115, 261, 338, 349, 391, 394, 833, 857, 858, 860, 861, 862, 863, 964, 996, 1003, 1006], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 120, 121, 124, 300, 349, 376, 397, 530, 538, 609, 610, 955, 961, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "random_forest": 115, "gradient_boost": [115, 997, 998, 999, 1005], "histgradientboostingclassifi": [115, 306, 307, 308, 309, 354, 397, 536, 556, 609, 610, 944, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "randomtreesembed": [115, 127, 218, 397, 882, 997, 1004, 1005, 1009, 1010, 1011], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 837, 964, 1002], "rf_model": 115, "0x7f18958eb700": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7f18bc7a79d0": 115, "roccurvedisplai": [115, 234, 237, 253, 265, 266, 306, 372, 763, 764, 960, 993, 1006], "rt": 115, "rf": [115, 128, 131, 132, 168, 306, 349, 397, 544, 546, 547], "gbdt": [115, 126, 306, 307, 370, 397], "model_displai": 115, "265": [115, 133, 710, 808, 812, 956], "plot_feature_transform": [115, 133], "artifici": [116, 119, 126, 162, 217, 231, 295, 338, 361, 362, 363, 370, 387, 389, 390, 394, 395, 400, 512, 673, 803, 830, 831, 947, 951, 953, 955, 961, 966, 970, 975, 978, 996], "feature_importances_": [116, 117, 123, 146, 168, 169, 378, 397, 399, 530, 531, 534, 535, 536, 537, 541, 542, 543, 570, 571, 574, 880, 881, 882, 883, 998, 1001, 1005], "estimators_": [116, 118, 232, 306, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 801, 802, 803, 804, 805, 806, 807, 997, 1003, 1010], "forest_import": 116, "mdi": [116, 123, 164, 165, 169, 170, 397, 442, 473, 541, 607, 611, 799, 833, 847, 962], "overcom": [116, 353, 398], "permutation_import": [116, 117, 123, 168, 169, 306, 397, 530, 531, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 962, 1006, 1008, 1009], "importances_mean": [116, 123, 168, 169, 306, 611, 962], "importances_std": [116, 611, 962], "omit": [116, 318, 370, 453, 511, 643, 645, 653, 778, 780, 801, 802, 805, 808, 809, 810, 811, 812, 830, 952, 959], "290": [116, 133, 314, 665, 666, 670, 951], "plot_forest_import": [116, 133], "hotter": 117, "job": [117, 244, 258, 366, 368, 373, 397, 401, 416, 423, 426, 428, 430, 435, 436, 439, 442, 445, 446, 450, 508, 512, 513, 514, 516, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 579, 587, 611, 616, 634, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 832, 835, 867, 868, 870, 978, 982], "five": [117, 242, 314, 317, 361, 516, 522, 951, 957, 969, 978, 996], "drawback": [117, 213, 946, 949], "img_shap": 117, "imp_reshap": 117, "207": [117, 295, 996], "knowledg": [117, 166, 213, 234, 256, 361, 366, 377, 378, 390, 394, 397, 401, 423, 488, 532, 533, 540, 696, 711, 715, 758, 802, 954, 955, 966, 989], "met": [117, 367, 399, 511, 518, 604, 648, 950, 1004], "809": [117, 133], "plot_forest_importances_fac": [117, 133], "third": [118, 123, 141, 146, 157, 214, 225, 247, 258, 281, 300, 354, 361, 365, 376, 379, 398, 511, 565, 566, 567, 568, 774, 775, 776, 780, 815, 816, 817, 819, 821, 851, 862, 922, 943, 965, 972, 996, 1007], "fourth": [118, 980], "descend": [118, 604, 1006], "extratreesclassifi": [118, 127, 397, 399, 535, 541, 543, 882, 883, 955, 999, 1000, 1004, 1005, 1006, 1009, 1010, 1011], "decisiontre": [118, 1001], "consol": [118, 364, 981], "worth": [118, 167, 196, 366, 373, 978], "extratre": [118, 127, 353, 999], "sequenti": [118, 140, 147, 164, 190, 257, 308, 364, 395, 397, 398, 478, 511, 570, 574, 579, 580, 582, 583, 623, 624, 629, 630, 637, 638, 639, 640, 650, 833, 944, 962, 968, 974, 976, 991, 996, 1005, 1008], "9266666666666666": 118, "8666666666666667": 118, "9933333333333333": 118, "rdylbu": [118, 344], "plot_step_coars": 118, "plot_idx": 118, "model_titl": 118, "model_detail": 118, "blend": [118, 129, 378, 394, 974], "estimator_alpha": 118, "coarser": [118, 122], "regularli": [118, 376, 956], "xx_coarser": 118, "yy_coars": 118, "z_points_coars": 118, "cs_point": 118, "425": [118, 133, 218, 592], "plot_forest_iri": [118, 133], "equidist": [119, 669], "lowa": 119, "sale": [119, 256, 954, 978], "42165": 119, "categorical_columns_subset": 119, "bldgtype": 119, "garagefinish": 119, "lotconfig": 119, "masvnrtyp": [119, 129], "housestyl": [119, 129], "fireplacequ": 119, "extercond": 119, "exterqu": [119, 129], "poolqc": 119, "numerical_columns_subset": 119, "3ssnporch": 119, "fireplac": 119, "bsmthalfbath": 119, "halfbath": 119, "garagecar": [119, 129], "totrmsabvgrd": 119, "bsmtfinsf1": [119, 129], "bsmtfinsf2": 119, "grlivarea": 119, "screenporch": 119, "n_categorical_featur": [119, 538, 539], "n_numerical_featur": 119, "1460": [119, 129], "make_column_transform": [119, 129, 166, 227, 307, 391, 442, 444, 1004], "dropper": 119, "hist_drop": 119, "hist_one_hot": 119, "etc": [119, 196, 214, 251, 260, 261, 349, 353, 355, 366, 367, 369, 370, 376, 377, 378, 387, 391, 394, 398, 466, 480, 534, 535, 541, 542, 645, 653, 669, 694, 746, 772, 785, 804, 807, 837, 848, 880, 881, 882, 883, 884, 886, 892, 893, 903, 943, 944, 948, 954, 957, 974, 975, 978, 996, 1003, 1005, 1006], "use_encoded_valu": [119, 129, 168, 847, 1008], "unknown_valu": [119, 129, 168, 847, 1008, 1010], "hist_ordin": 119, "n_unique_categori": 119, "hist_n": 119, "mean_absolute_percentage_error": [119, 954, 1008, 1010], "neg_mean_absolute_percentage_error": [119, 954, 962], "n_cv_fold": [119, 797, 800], "dropped_result": 119, "one_hot_result": 119, "ordinal_result": 119, "native_result": 119, "plot_result": [119, 241, 242, 247], "figure_titl": 119, "plot_info": 119, "test_scor": [119, 121, 123, 204, 255, 258, 271, 343, 377, 394, 796, 797, 800], "y_limit": 119, "mape_cv_mean": 119, "mape_cv_std": 119, "c0": [119, 228], "slowest": [119, 908, 909], "theori": [119, 231, 246, 333, 363, 389, 390, 394, 397, 667, 671, 701, 731, 864, 865, 909, 943, 950, 951, 953, 954, 955, 969, 970], "poorer": [119, 349, 395], "slight": [119, 201, 308, 397, 427, 1006], "acf": 119, "bde": 119, "isol": [119, 125, 225, 234, 339, 364, 366, 371, 381, 540, 819, 876, 1005, 1006], "bcde": 119, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "altogeth": [119, 371, 1004], "495": [119, 133], "plot_gradient_boosting_categor": [119, 133], "suffici": [120, 129, 204, 270, 325, 353, 378, 390, 399, 509, 514, 523, 634, 659, 660, 790, 791, 955, 957, 975, 1005], "validation_fract": [120, 204, 309, 397, 536, 537, 538, 539, 643, 644, 645, 653, 655, 830, 831, 968, 1004, 1010], "denot": [120, 374, 378, 381, 388, 394, 397, 565, 566, 568, 772, 785, 846, 847, 939, 943, 946, 950, 952, 954, 955, 964, 967, 980], "kept": [120, 246, 333, 360, 369, 384, 400, 473, 512, 514, 515, 517, 518, 523, 524, 574, 587, 588, 596, 597, 621, 672, 770, 771, 893, 964, 1004, 1005], "asid": [120, 204, 384, 536, 537, 538, 539, 643, 644, 645, 653, 655, 830, 831], "until": [120, 146, 204, 268, 308, 310, 370, 378, 379, 387, 390, 394, 399, 400, 485, 486, 534, 535, 536, 537, 541, 542, 543, 570, 579, 623, 624, 629, 630, 635, 636, 637, 638, 639, 640, 643, 645, 648, 653, 654, 655, 671, 770, 771, 775, 776, 830, 831, 869, 872, 880, 881, 882, 883, 929, 943, 950, 951, 959, 967, 970, 989, 999, 1003, 1004, 1010], "n_estimators_": [120, 536, 537], "vighnesh": [120, 1001, 1002, 1004], "birodkar": [120, 1001, 1002, 1004], "vighneshbirodkar": 120, "rvraghav93": [120, 260, 298], "data_list": 120, "n_gb": 120, "score_gb": 120, "time_gb": 120, "n_gbe": 120, "gbe": 120, "gb": [120, 132, 397, 530, 610], "bar_width": 120, "bar1": 120, "crimson": 120, "bar2": 120, "coral": 120, "n_est": 120, "max_i": [120, 232, 956], "468": [120, 133, 263, 272], "plot_gradient_boosting_early_stop": [120, 133], "fly": [121, 370, 373, 485, 486, 559, 996, 998, 1005], "pessimist": [121, 397], "cumul": [121, 196, 214, 390, 701, 710, 731, 850, 861, 964, 968, 1003, 1005, 1006], "demand": [121, 398, 772, 785, 794, 795, 796], "6820": 121, "101": [121, 123, 124, 259, 272, 363, 819, 997], "loss_": [121, 123, 124, 293, 536, 537, 830, 831, 958, 1010], "special": [121, 166, 186, 214, 286, 325, 360, 362, 367, 371, 376, 378, 390, 393, 395, 442, 445, 530, 532, 536, 794, 884, 943, 948, 950, 952, 953, 954, 955, 957, 970, 1003, 1006, 1008, 1010], "expit": [121, 186, 397, 538, 950, 1003], "ridgewai": [121, 397], "gbm": [121, 397, 999], "x3": [121, 234, 391, 988], "binomi": [121, 124, 397, 530, 536, 538, 950, 1010], "acc": 121, "heldout_scor": 121, "devianc": [121, 124, 196, 214, 397, 530, 535, 536, 537, 538, 539, 542, 625, 646, 657, 697, 698, 699, 722, 724, 727, 881, 883, 950, 970, 997, 1006, 1007, 1009, 1010], "staged_decision_funct": [121, 124, 530, 536, 538], "cv_estim": 121, "cv_clf": 121, "val_scor": 121, "cv_score": [121, 145], "cumsum": [121, 196, 214, 1003], "oob_improvement_": [121, 397, 536, 537, 998], "oob_best_it": 121, "test_best_it": 121, "cv_best_it": 121, "brew": [121, 364, 381], "oob_color": 121, "test_color": 121, "127": [121, 178, 215, 260, 272, 996], "cv_color": 121, "253": [121, 511], "192": [121, 315, 319, 371, 996], "oob_lin": 121, "test_lin": 121, "cv_line": 121, "dashdot": [121, 149, 152], "xticks_po": 121, "tolist": [121, 161, 169, 255, 276, 308, 361], "xticks_label": 121, "210": [121, 133], "plot_gradient_boosting_oob": [121, 133], "atleast_2d": [122, 367], "expected_i": 122, "amplitud": [122, 154, 156, 190, 400, 950], "lognorm": [122, 155, 177, 245, 302, 964], "tail": [122, 162, 166, 196, 198, 256, 298, 498, 501, 950], "imposs": [122, 340, 975], "mean_pinball_loss": [122, 309, 950, 954, 1009], "all_model": 122, "common_param": [122, 167, 259], "min_samples_split": [122, 123, 124, 260, 268, 299, 308, 397, 534, 535, 536, 537, 541, 542, 543, 775, 776, 880, 881, 882, 883, 943, 970, 1002], "gbr": 122, "gbr_l": 122, "5th": [122, 157], "95th": [122, 723], "y_med": 122, "fill_between": [122, 135, 149, 154, 156, 158, 175, 176, 214, 256, 258, 259, 260, 266, 271], "unfortun": [122, 214, 373, 376, 397, 485, 486], "sinoisoid": 122, "highlight_min": [122, 185], "font": [122, 185, 210, 230, 884, 886], "pbl": 122, "nbsp": [122, 185], "715413": 122, "750348": 122, "127128": 122, "253445": 122, "379763": 122, "933253": 122, "305438": 122, "622811": 122, "940184": 122, "827917": 122, "909909": 122, "145957": 122, "382005": 122, "667219": 122, "asymmetr": [122, 198, 378, 1001], "signficiantli": 122, "nor": [122, 258, 259, 338, 349, 353, 370, 376, 398, 416, 571, 896, 958, 970, 1007], "917281": 122, "767498": 122, "617715": 122, "692901": 122, "144204": 122, "245961": 122, "347717": 122, "648026": 122, "412021": 122, "607752": 122, "803483": 122, "874771": 122, "354394": 122, "355445": 122, "356497": 122, "852774": 122, "underestim": [122, 196, 214, 256, 366], "extrem": [122, 196, 198, 233, 298, 316, 339, 366, 368, 390, 395, 534, 535, 541, 542, 543, 609, 610, 656, 699, 727, 882, 883, 884, 886, 954, 956], "coverage_fract": 122, "y_low": 122, "y_high": 122, "868": [122, 142], "hypothesi": [122, 256, 262, 333, 394, 667, 671, 798, 951], "pinbal": [122, 309, 539, 647, 698, 723, 950, 1009, 1010], "experiment": [122, 161, 162, 196, 267, 268, 308, 309, 356, 366, 367, 368, 375, 376, 378, 394, 473, 526, 604, 673, 775, 776, 922, 924, 943, 944, 950, 953, 954, 974, 975, 983, 991, 1004, 1005, 1008, 1009, 1010, 1011], "enable_halving_search_cv": [122, 267, 268, 308, 775, 776, 943], "halvingrandomsearchcv": [122, 268, 308, 555, 775, 943, 1008, 1010, 1011], "make_scor": [122, 260, 394, 772, 795, 796, 954, 1005], "neg_mean_pinball_loss_05p_scor": 122, "greater_is_bett": [122, 717, 954], "search_05p": 122, "max_resourc": [122, 775, 776, 943], "min_resourc": [122, 775, 776], "redefin": [122, 166], "neg_mean_pinball_loss_95p_scor": 122, "search_95p": 122, "estimator__alpha": 122, "did": [122, 149, 166, 169, 196, 204, 214, 339, 361, 604, 688, 790, 874, 988, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011], "untun": 122, "joint": [122, 164, 167, 174, 215, 217, 391, 588, 629, 639, 669, 808, 809, 810, 811, 812, 872, 950, 951, 955, 959, 961, 965, 996], "9026666666666666": 122, "796": 122, "sadli": 122, "023": [122, 133, 873, 962], "plot_gradient_boosting_quantil": [122, 133], "tackl": [123, 256, 354, 366, 390, 810, 956, 978, 983], "katrina": [123, 1007], "ni": [123, 1002, 1007], "nilichen": 123, "reg": [123, 166, 176, 299, 307, 330, 397, 535, 537, 545, 627, 628, 630, 631, 632, 633, 634, 640, 641, 642, 647, 648, 655, 656, 666, 670, 883, 950, 1001], "3025": 123, "7877": 123, "train_score_": [123, 397, 536, 537, 538, 539], "impur": [123, 347, 380, 397, 399, 530, 531, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 884, 886, 970, 991, 1001, 1002, 1003, 1004], "feature_import": 123, "sorted_idx": [123, 306], "po": [123, 220, 398], "align": [123, 162, 217, 241, 267, 340, 371, 378, 666, 670, 957, 968, 990, 991], "vert": [123, 168, 169, 306, 968], "302": [123, 133, 256, 604], "plot_gradient_boosting_regress": [123, 133], "consider": [124, 150, 153, 167, 251, 257, 263, 366, 400, 596, 772, 785, 943, 956, 960, 968, 978], "return_invers": [124, 367], "original_param": 124, "max_leaf_nod": [124, 196, 309, 347, 397, 534, 535, 536, 537, 538, 539, 541, 542, 543, 880, 881, 882, 883, 999, 1005, 1007], "test_devi": 124, "931": [124, 133], "plot_gradient_boosting_regular": [124, 133], "anomali": [125, 164, 224, 234, 239, 282, 283, 361, 389, 447, 489, 499, 540, 616, 654, 819, 834, 876, 960, 1002, 1003], "recurs": [125, 140, 147, 164, 167, 343, 367, 389, 390, 394, 419, 420, 421, 424, 441, 479, 492, 540, 570, 571, 574, 579, 609, 610, 790, 877, 954, 957, 960, 961, 970, 976, 988, 991, 996, 1006, 1007], "novel": [125, 210, 282, 324, 349, 388, 943], "abnorm": [125, 210, 225, 282, 324, 361, 469, 540, 819, 960, 1004], "x_outlier": [125, 178, 210, 282, 283, 324], "max_sampl": [125, 161, 397, 532, 533, 534, 535, 540, 541, 542, 611, 1006, 1009], "y_pred_train": [125, 210, 324], "y_pred_test": [125, 210, 282, 324], "y_pred_outli": [125, 210, 282, 324], "blues_r": 125, "b1": [125, 210, 282, 324], "b2": [125, 210, 282, 324], "476": [125, 133], "plot_isolation_forest": [125, 133], "trend": [126, 154, 228, 293, 400, 978, 1003], "xgboost": [126, 397, 974], "partialdependencedisplai": [126, 167, 235, 307, 308, 309, 372, 610, 961, 1006, 1007, 1008, 1009, 1010], "f_0": 126, "f_1": [126, 263, 954], "line_kw": [126, 235, 307, 609], "unconstrain": [126, 307, 361, 968], "monotonic_cst": [126, 307, 309, 397, 538, 539], "axes_": [126, 235, 307, 372, 609], "f_idx": 126, "734": [126, 133, 340], "plot_monotonic_constraint": [126, 133], "excel": [127, 360, 366, 667, 671, 950, 978], "bernoullinb": [127, 355, 809, 810, 811, 812, 955, 956, 997, 998, 1000, 1003, 1008, 1009, 1011], "hasher": [127, 340, 398], "transformed_grid": 127, "y_grid_pr": 127, "443": [127, 133], "plot_random_forest_embed": [127, 133], "multioutput": [128, 265, 274, 356, 367, 378, 411, 443, 459, 460, 461, 528, 531, 533, 534, 535, 537, 539, 541, 542, 545, 547, 588, 609, 610, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 697, 698, 703, 720, 721, 723, 725, 726, 728, 760, 763, 794, 816, 824, 831, 840, 873, 875, 878, 880, 881, 882, 883, 898, 919, 920, 954, 976, 991, 996, 997, 998, 1002, 1003, 1009, 1010], "multioutputregressor": [128, 411, 443, 459, 460, 461, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 805, 807, 816, 824, 831, 873, 875, 878, 881, 883, 1002, 1003, 1005, 1007, 1008], "nativ": [128, 161, 361, 378, 397, 538, 539, 805, 806, 922, 950, 954, 974, 1006, 1008], "ever": [128, 374, 397, 978], "centr": 128, "regr_multirf": 128, "regr_rf": 128, "y_multirf": 128, "y_rf": 128, "cornflowerblu": [128, 190, 199, 206, 242, 244, 247, 263, 265, 279, 281, 287, 345, 346], "645": [128, 133], "plot_random_forest_regression_multioutput": [128, 133], "compil": [129, 340, 353, 366, 367, 368, 373, 374, 376, 974, 996], "dean": [129, 1004, 1010], "cock": [129, 1005], "becam": [129, 379, 1004], "kaggl": [129, 377], "residenti": 129, "iowa": 129, "won": [129, 294, 339, 369, 390, 446, 473, 604, 605, 607, 664, 680, 693, 711, 712, 730, 732, 768, 953, 964, 1001, 1002, 1007], "load_ames_h": 129, "yrsold": 129, "heatingqc": 129, "street": [129, 363], "yearremodadd": 129, "heat": [129, 325, 390, 430, 440, 672], "bsmtunfsf": 129, "mssubclass": 129, "condition2": 129, "garagetyp": 129, "overallqu": 129, "totalbsmtsf": 129, "miscfeatur": 129, "mosold": 129, "plot_stack_predictor": [129, 133], "lookup": [129, 374, 921, 1005], "retain": [129, 175, 378, 390, 393, 394, 398, 471, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 672, 673, 789, 846, 943, 967, 996], "cat_selector": 129, "num_selector": 129, "besid": [129, 228, 366, 370, 400, 566, 836, 845, 943, 1004], "cat_tree_processor": 129, "encoded_missing_valu": [129, 168, 847, 964, 1010], "num_tree_processor": 129, "add_ind": [129, 162, 604, 605, 607, 944, 1005, 1008], "tree_preprocessor": [129, 196], "0x7f1861ccd2e0": 129, "0x7f1861ccd820": 129, "ordinalencoderordinalencod": [129, 168], "cat_linear_processor": 129, "num_linear_processor": 129, "linear_preprocessor": 129, "tediou": 129, "wrote": [129, 361], "lasso_pipelin": 129, "lassocvlassocv": 129, "rf_pipelin": 129, "randomforestregressorrandomforestregressor": 129, "gbdt_pipelin": 129, "histgradientboostingregressorhistgradientboostingregressor": 129, "stackingregressor": [129, 306, 397, 544, 1006, 1007, 1008, 1009, 1010], "stacking_regressor": 129, "final_estim": [129, 306, 397, 544, 545], "unknown_v": 129, "stackingregressorstackingregressor": 129, "forestcolumntransform": 129, "lassocolumntransform": 129, "boostingcolumntransform": 129, "final_estimatorridgecvridgecv": 129, "plot_regression_result": 129, "cross_val_predict": [129, 252, 306, 388, 394, 397, 416, 544, 545, 795, 796, 1000, 1001, 1002, 1003, 1005, 1007, 1009], "get_xaxi": [129, 241, 286, 298], "tick_bottom": [129, 298], "get_yaxi": [129, 286, 298], "tick_left": [129, 298], "outward": [129, 298], "pm": [129, 158, 266, 397, 954], "test_r2": [129, 796], "exemplari": 130, "eclf": [130, 131, 397], "axarr": [130, 298], "tt": [130, 251, 443], "648": [130, 133], "plot_voting_decision_region": [130, 133], "examplari": 131, "class1_1": 131, "class2_1": 131, "lightgreen": [131, 202, 213], "p3": 131, "p4": 131, "nweight": 131, "420": [131, 133, 149, 157, 159], "plot_voting_proba": [131, 133], "votingregressor": [132, 397, 546, 1005, 1006, 1007, 1010], "cohort": 132, "reg1": [132, 397], "reg2": [132, 397], "reg3": [132, 397], "ereg": [132, 397], "votingregressorvotingregressor": 132, "gbgradientboostingregressorgradientboostingregressor": 132, "rfrandomforestregressorrandomforestregressor": 132, "lrlinearregressionlinearregress": 132, "xt": [132, 276, 378, 604, 606, 772, 775, 776, 785, 817, 825, 833, 838, 843, 850, 861, 890], "pred1": 132, "pred2": 132, "pred3": 132, "pred4": 132, "labelbottom": [132, 256], "plot_voting_regressor": [132, 133], "54": [133, 172, 196, 199, 317, 361, 363, 390, 468, 997, 998], "auto_examples_ensembl": 133, "n_fold": [135, 624, 628, 630, 632, 636, 638, 640, 997, 998, 1002], "scores_std": [135, 136, 984], "semilogx": [135, 136, 185, 269, 271, 333], "std_error": 135, "transluc": 135, "31622776601683794": 135, "answer": [135, 256, 366, 376, 701, 731, 954, 978], "extern": [135, 149, 355, 356, 359, 363, 366, 367, 370, 376, 378, 387, 390, 398, 399, 400, 570, 587, 588, 693, 712, 768, 950, 953, 954, 957, 970, 975, 981, 987, 991, 1004, 1008], "lasso_cv": 135, "k_fold": [135, 984], "maximis": [135, 242, 284, 948, 957], "5f": [135, 310], "Not": [135, 353, 366, 376, 390, 408, 409, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 447, 448, 449, 450, 451, 452, 453, 454, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 540, 543, 546, 547, 558, 559, 560, 565, 566, 568, 604, 605, 606, 607, 654, 665, 666, 667, 668, 670, 743, 767, 770, 771, 772, 775, 776, 785, 810, 813, 814, 817, 818, 819, 821, 825, 837, 845, 848, 849, 851, 864, 865, 876, 954, 960, 974, 1005], "moreov": [135, 155, 300, 310, 349, 369, 390, 394, 400, 865, 924, 954, 978, 1004, 1010, 1011], "substanti": [135, 278, 282, 283, 299, 366, 819, 960, 1000, 1003], "05968": 135, "54209": 135, "04520": 135, "15521": 135, "07880": 135, "45192": 135, "616": [135, 139, 810, 956, 964], "plot_cv_diabet": [135, 139], "this_scor": [136, 328], "266": [136, 139], "plot_cv_digit": [136, 139], "961111": 137, "933333": [137, 822], "plot_digits_classification_exercis": [137, 139], "200j": [138, 329], "plot_iris_exercis": [138, 139], "auto_examples_exercis": 139, "exercis": [139, 355, 356, 363, 366, 478, 479, 481, 482, 629, 630, 635, 772, 777, 795, 815, 877, 981, 999], "elimin": [140, 147, 164, 389, 390, 394, 426, 479, 492, 570, 571, 574, 579, 775, 776, 790, 877, 940, 954, 976, 978, 991, 996], "x_2": [141, 152, 193, 333, 395, 397, 398, 400, 590, 602, 950, 958, 964], "x_3": [141, 964], "irrelev": [141, 349, 371, 392, 397, 399, 581, 715, 954], "agre": [141, 373, 379, 389, 390, 761, 980], "percept": [141, 167, 961], "correctli": [141, 196, 214, 263, 265, 270, 286, 315, 325, 366, 374, 395, 397, 400, 407, 416, 447, 470, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 546, 587, 635, 643, 645, 651, 652, 653, 679, 767, 769, 801, 802, 803, 804, 808, 809, 810, 811, 812, 815, 820, 823, 830, 853, 867, 868, 872, 874, 875, 876, 877, 878, 880, 882, 910, 951, 954, 957, 958, 964, 969, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mutual_info_regress": [141, 310, 399, 569, 572, 573, 576, 577, 586, 1002, 1003, 1008, 1010, 1011], "f_test": 141, "x_": [141, 150, 247, 256, 306, 367, 393, 395, 604, 612, 867, 868, 950, 956, 961, 1002], "289": [141, 147, 166], "plot_f_test_vs_mi": [141, 147], "examin": [142, 371, 373, 390, 822], "f_classif": [142, 143, 399, 569, 572, 573, 575, 576, 577, 581, 583, 586], "log10": [142, 155, 166, 181, 189, 257, 325], "pvalues_": [142, 569, 572, 573, 575, 576, 577, 996], "x_indic": 142, "p_": [142, 954, 957, 970], "svm_weight": 142, "789": [142, 397], "clf_select": 142, "svm_weights_select": 142, "get_support": [142, 146, 308, 558, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 998], "249": [142, 147], "plot_feature_select": [142, 147], "mistak": [143, 314, 349, 390, 394, 710, 844, 857, 858, 860, 861, 862, 863, 950, 955], "anova_filt": 143, "anova_svm": 143, "selectkbestselectkbest": [143, 310], "linearsvclinearsvc": [143, 263], "75790919": 143, "27158706": 143, "26109741": 143, "012": [143, 147, 169, 172], "plot_feature_selection_pipelin": [143, 147], "rfe": [144, 145, 399, 571, 574, 579, 996, 1000, 1006, 1007, 1008, 1009, 1010], "n_features_to_select": [144, 146, 308, 399, 570, 579, 1008, 1010], "ranking_": [144, 570, 571], "685": [144, 147, 256, 272, 696, 715, 954], "plot_rfe_digit": [144, 147], "stratifiedkfold": [145, 243, 251, 258, 262, 266, 316, 394, 416, 544, 545, 571, 579, 636, 650, 772, 773, 775, 776, 777, 779, 781, 785, 789, 791, 793, 794, 795, 796, 797, 798, 800, 984, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1009], "rfecv": [145, 399, 570, 574, 579, 1000, 1002, 1004, 1006, 1007, 1008, 1009], "min_features_to_select": [145, 571, 1004], "n_features_": [145, 518, 570, 571, 1009, 1011], "n_score": 145, "split0_test_scor": [145, 772, 785, 1002], "split1_test_scor": [145, 772, 785], "585": [145, 147, 987], "plot_rfe_with_cross_valid": [145, 147], "selectfrommodel": [146, 378, 570, 579, 580, 976, 991, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010], "sequentialfeatureselect": 146, "greedi": [146, 397, 399, 536, 537, 579, 950, 970], "442": [146, 162, 363, 478, 987], "descript": [146, 166, 359, 360, 365, 366, 369, 370, 373, 378, 390, 398, 425, 427, 430, 440, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 484, 487, 521, 607, 653, 737, 740, 753, 954, 968, 969, 975, 977, 989, 1006, 1007, 1008, 1009, 1010], "descr": [146, 359, 360, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 484, 487, 986, 1004], "_diabetes_dataset": 146, "mass": [146, 235, 363, 770, 950, 961], "blood": [146, 226, 363, 987], "pressur": [146, 363, 987], "six": [146, 197, 218, 302, 363, 1005], "serum": [146, 363], "bmi": [146, 184, 185, 235, 363, 962], "tc": [146, 363, 379], "cholesterol": [146, 363], "ldl": [146, 363], "lipoprotein": [146, 363], "hdl": [146, 363], "s4": [146, 184, 185, 363], "tch": [146, 363], "s5": [146, 184, 185, 363, 962], "ltg": [146, 363, 478], "triglycerid": [146, 363], "s6": [146, 184, 185, 363], "glu": [146, 363], "sugar": [146, 363], "www4": [146, 363], "ncsu": [146, 363], "boo": [146, 363], "bradlei": [146, 363, 950], "efron": [146, 363, 659, 660, 950], "trevor": [146, 184, 363, 605, 633, 697, 698, 699, 944, 950, 966, 1000, 1001, 1004, 1005, 1006, 1008], "iain": [146, 363, 950], "johnston": [146, 363, 950, 1005], "annal": [146, 184, 363, 397, 452, 493, 494, 495, 536, 537, 633, 950], "407": [146, 363], "web": [146, 360, 361, 363, 366, 368, 373, 390, 397, 398, 498, 865, 954, 964, 992, 996], "stanford": [146, 363, 626, 659, 660, 808, 811, 812, 865, 952], "leastangle_2002": [146, 363], "pitfal": [146, 164, 165, 168, 170, 308, 356, 377, 378, 380, 394, 443, 445, 473, 630, 649, 650, 728, 786, 796, 799, 834, 846, 853, 950, 991], "accept": [146, 149, 253, 306, 325, 338, 340, 349, 353, 354, 360, 366, 367, 374, 376, 377, 378, 379, 384, 386, 390, 395, 398, 416, 420, 423, 424, 426, 439, 442, 445, 485, 486, 532, 533, 546, 547, 558, 559, 570, 571, 574, 605, 612, 616, 620, 656, 702, 717, 753, 770, 771, 775, 776, 815, 816, 823, 824, 837, 890, 892, 893, 896, 950, 952, 954, 957, 962, 964, 969, 974, 975, 984, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "tic": [146, 167, 267, 956], "sfm": 146, "toc": 146, "sequentialfeatureselector": [146, 399, 570, 574, 580, 1008, 1009, 1010], "sf": [146, 234, 256, 308, 361, 399, 469, 579], "backward": [146, 308, 368, 378, 399, 473, 553, 579, 591, 592, 595, 596, 597, 599, 600, 625, 646, 657, 885, 888, 954, 958, 975, 996, 999, 1004, 1005, 1006, 1008, 1010], "tic_fwd": 146, "sfs_forward": 146, "toc_fwd": 146, "tic_bwd": 146, "sfs_backward": 146, "toc_bwd": 146, "513": [146, 822, 957], "isn": [146, 306, 338, 340, 349, 354, 366, 373, 492, 538, 539, 571, 767, 775, 776, 846, 957, 969, 1006], "sound": [146, 349], "finish": [146, 244, 951], "expos": [146, 309, 354, 359, 363, 388, 397, 399, 400, 416, 442, 530, 531, 544, 545, 546, 547, 570, 571, 579, 588, 772, 775, 776, 785, 802, 803, 804, 805, 806, 807, 887, 922, 950, 954, 956, 984, 986, 988, 993, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "795": [146, 147, 625], "plot_select_from_model_diabet": [146, 147], "auto_examples_feature_select": 147, "basic": [148, 159, 162, 164, 194, 330, 353, 355, 356, 366, 367, 369, 376, 378, 390, 394, 395, 397, 588, 599, 868, 880, 881, 882, 883, 943, 944, 957, 968, 973, 974, 975, 978, 987], "introductori": [148, 159, 164, 224, 588, 599, 978], "gpr": [148, 158, 159, 164, 473, 587, 588, 590, 591, 592, 593, 598, 599, 600, 601, 602, 976, 991, 1006], "mauna": [148, 159, 164, 473, 588, 592, 599, 600, 602], "loa": [148, 159, 164, 473, 588, 592, 599, 600, 602], "co2": [148, 159, 164, 473, 588, 592, 599, 600, 602, 1003], "xor": [148, 159, 164, 331, 587, 591, 599, 950, 970, 1003], "posterior": [148, 149, 150, 159, 164, 175, 256, 395, 400, 526, 527, 529, 587, 588, 590, 591, 592, 596, 599, 600, 604, 621, 622, 684, 770, 948, 974, 1002, 1005], "iso": [148, 159, 164, 219, 587, 590, 591], "trick": [149, 231, 286, 340, 352, 355, 356, 368, 376, 391, 400, 559, 566, 620, 649, 946, 947, 958, 968, 969, 987, 988, 991, 997, 1005], "drastic": [149, 229, 264, 390, 394, 957, 967], "theorem": [149, 389, 400, 956], "period": [149, 154, 158, 369, 378, 388, 400, 592, 792, 852, 1004, 1009], "reus": [149, 189, 257, 306, 340, 367, 371, 378, 390, 391, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 611, 623, 625, 626, 629, 635, 637, 639, 643, 644, 645, 646, 653, 654, 655, 657, 830, 831, 962, 966, 978, 1003], "training_sample_indic": 149, "training_data": 149, "training_noisy_target": 149, "newer": [149, 365, 381, 395], "expsinesquar": [149, 154, 158, 400], "emb": [149, 218, 229, 285, 359, 360, 440, 672, 951], "kernel_ridg": [149, 231, 356, 1000], "length_scal": [149, 150, 153, 154, 155, 156, 158, 400, 589, 592, 596, 598, 599, 600, 601], "tell": [149, 166, 256, 325, 330, 354, 361, 390, 398, 540, 555, 943, 948, 961, 989], "param_distribut": [149, 257, 264, 268, 308, 377, 776, 783, 785], "1e0": [149, 231, 247, 264, 943], "kernel__length_scal": 149, "kernel__period": 149, "1e1": [149, 155, 196, 231, 325], "kernel_ridge_tun": 149, "630": [149, 284, 290, 699], "9915849773450223": 149, "7986499491396728": 149, "607275806426108": 149, "predictions_kr": 149, "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 400, 587, 590, 591, 592, 593, 594, 598, 601, 602, 620, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "whitekernel": [149, 154, 155, 400, 588, 589, 591, 1007], "periodicity_bound": [149, 154, 158, 592], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 587, 588], "57": [149, 166, 212, 234, 239, 265, 295, 363, 364, 381, 382, 383, 391, 681, 756, 806, 954, 964, 996], "noise_level": [149, 154, 155, 400, 589, 602], "182": [149, 295, 371, 397], "mean_predictions_gpr": 149, "std_predictions_gpr": 149, "return_std": [149, 154, 155, 156, 158, 175, 176, 378, 529, 544, 545, 588, 590, 591, 592, 593, 602, 604, 621, 622, 833, 1003, 1004, 1008], "formul": [149, 158, 265, 366, 392, 395, 398, 400, 526, 527, 534, 541, 627, 628, 631, 632, 633, 635, 636, 642, 647, 738, 744, 771, 874, 877, 880, 882, 954, 955, 964, 976, 991], "forc": [149, 181, 302, 338, 360, 364, 385, 394, 397, 428, 435, 473, 583, 586, 623, 624, 629, 630, 634, 637, 638, 639, 640, 649, 650, 651, 658, 661, 664, 729, 753, 756, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 874, 875, 876, 877, 878, 890, 892, 893, 964, 991, 1001, 1004, 1005, 1006, 1008, 1009, 1010], "capac": [149, 168], "length_scale_bound": [149, 155, 156, 158, 400, 588, 592, 596, 599, 600], "attenu": [149, 167], "plot_compare_gpr_krr": [149, 159], "arbitrarili": [150, 242, 247, 338, 378, 400, 411, 443, 459, 460, 461, 529, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 646, 647, 649, 650, 655, 656, 657, 697, 698, 699, 721, 760, 764, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 954, 957, 964, 970], "lml": [150, 151, 155, 400], "exhibit": [150, 201, 338, 380, 394, 395, 397, 400, 962], "steep": [150, 265, 266, 390, 394, 400, 428, 434], "laplac": [150, 400, 587, 588, 808, 809, 810, 812, 956], "214": [150, 400, 561], "319": [150, 989], "gp_fix": 150, "gp_opt": 150, "log_marginal_likelihood": [150, 151, 153, 155, 158, 400, 587, 588, 1006], "theta": [150, 151, 153, 155, 157, 158, 232, 395, 400, 500, 513, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 669, 956, 970], "landscap": [150, 400], "theta0": 150, "theta1": 150, "pcolor": 150, "xscale": [150, 155, 231], "yscale": [150, 155, 196, 231, 338], "347": [150, 159, 339], "plot_gpc": [150, 159], "anisotrop": [151, 400, 594, 596, 599], "gpc_rbf_isotrop": 151, "gpc_rbf_anisotrop": 151, "m_max": 151, "444": [151, 159], "plot_gpc_iri": [151, 159], "0256": 152, "dotproduct": [152, 153, 158, 400, 588, 602], "sigma_0": [152, 153, 158, 400, 591], "constantkernel": [152, 158, 400, 588, 594, 598, 601], "lim": [152, 511], "experi": [152, 156, 166, 168, 172, 198, 339, 340, 354, 360, 366, 368, 389, 394, 492, 703, 760, 950, 955, 966, 972, 973, 974, 978, 987, 989], "61611719": 152, "00099547": 152, "10469096": 152, "32782448": 152, "00000000": 152, "50000000": 152, "17289014": 152, "6984743": 152, "3109306": 152, "93271427": 152, "03823144": 152, "10584743": 152, "87600388": 152, "74310541": 152, "21301203": 152, "26386883": 152, "gp": [152, 157, 400, 587, 588, 599, 1002], "set_aspect": [152, 207, 243, 334], "cb": [152, 229, 245], "widehat": 152, "mathbf": [152, 395, 950, 954, 958, 959, 968], "leq": [152, 395, 397, 950, 954, 957, 968, 969, 970], "clim": 152, "666": [152, 815, 944], "clabel": [152, 207], "334": 152, "plot_gpc_isoprob": [152, 159], "stationari": [153, 400, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "coincid": [153, 198, 400], "430": [153, 155, 158, 402, 510], "convergencewarn": [153, 155, 157, 158, 204, 211, 293, 294, 300, 374, 378, 770, 771, 1004, 1005, 1008], "k1__constant_valu": [153, 158], "bound": [153, 155, 157, 158, 164, 198, 214, 224, 239, 255, 364, 371, 372, 390, 395, 398, 400, 401, 423, 466, 479, 489, 500, 513, 572, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 609, 612, 614, 627, 631, 635, 654, 681, 710, 770, 771, 813, 814, 850, 861, 864, 865, 866, 874, 875, 876, 879, 896, 922, 950, 953, 954, 957, 966, 968, 969, 971, 1004, 1007, 1008, 1010], "100000": [153, 231, 241, 366, 590, 591, 592, 596, 597, 599, 600, 602, 861, 947, 987, 989], "puor_r": [153, 331], "553": [153, 159], "plot_gpc_xor": [153, 159], "rw2006": [154, 400, 587, 588], "ascent": [154, 400], "monthli": [154, 369, 379, 400, 954], "atmospher": [154, 400], "ppm": 154, "observatori": [154, 400], "hawaii": [154, 400], "1958": [154, 395, 397, 400, 509], "air": [154, 739], "41187": 154, "flag": [154, 364, 366, 368, 442, 587, 588, 604, 650, 652, 703, 760, 969, 1002, 1006, 1007, 1009, 1010, 1011], "station": 154, "mlo": 154, "316": [154, 158, 588, 591, 602, 849], "317": [154, 340], "co2_data": 154, "to_datetim": 154, "timestamp": 154, "march": [154, 701, 731, 954, 996, 1000, 1004, 1006], "dropna": 154, "nfrom": 154, "upcom": [154, 364], "to_numpi": 154, "rise": [154, 400], "irregular": [154, 390, 400, 957], "long_term_trend_kernel": 154, "decai": [154, 400, 521, 830, 831, 909, 954, 968, 1000], "seasonal_kernel": 154, "ration": [154, 600, 952], "diffus": [154, 400], "accommod": [154, 400, 1004], "rationalquadrat": [154, 158, 400, 593], "irregularities_kernel": 154, "shall": [154, 400], "phenomena": [154, 400], "noise_kernel": 154, "noise_level_bound": [154, 155, 602], "co2_kernel": 154, "subtract": [154, 166, 393, 395, 400, 422, 425, 437, 511, 621, 622, 627, 628, 631, 632, 633, 641, 642, 1003], "normalize_i": [154, 400, 588, 1010], "y_mean": [154, 155, 158, 588, 621, 622], "gaussianprocessregressorgaussianprocessregressor": 154, "todai": [154, 376, 989], "current_month": 154, "mean_y_pr": 154, "std_y_pr": 154, "536": 154, "968": [154, 254], "188": [154, 323, 336, 363, 371, 561], "0367": 154, "6ppm": 154, "plot_gpr_co2": [154, 159], "target_gener": 155, "add_nois": 155, "minima": [155, 184, 395, 425, 669, 951, 988, 1004], "y_std": [155, 158, 529, 588, 621, 622, 1009], "k1__k2__length_scal": [155, 400], "noptimum": 155, "nlog": 155, "length_scale_grid": 155, "noise_level_grid": 155, "newshap": 155, "148": [155, 159, 205, 215, 999], "plot_gpr_noisi": [155, 159], "principl": [156, 281, 303, 340, 366, 376, 378, 379, 394, 397, 400, 909, 943, 953, 957, 968, 1003], "tikhonov": [156, 400, 649], "training_indic": 156, "n_restarts_optim": [156, 400, 587, 588], "43": [156, 193, 229, 239, 256, 363, 370, 772, 785], "mean_predict": 156, "std_predict": 156, "whenev": [156, 349, 360, 373, 378, 381, 388, 459, 460, 461, 473, 605, 607, 945, 953, 975, 1006], "noise_std": 156, "y_train_noisi": 156, "594": [156, 158, 159, 196], "plot_gpr_noisy_target": [156, 159], "gene": [157, 360, 387, 429, 490, 570, 571, 820, 853], "letter": [157, 361, 363, 369, 398, 763, 764, 954], "among": [157, 167, 172, 196, 246, 274, 347, 355, 361, 367, 378, 379, 388, 389, 393, 489, 496, 767, 798, 816, 821, 823, 874, 877, 880, 881, 882, 883, 943, 946, 954, 955, 961, 964, 969, 996, 1002, 1003, 1006], "brighter": 157, "4th": [157, 363], "6th": 157, "haussler": 157, "1999": [157, 361, 388, 390, 392, 395, 397, 416, 428, 435, 447, 452, 511, 518, 532, 533, 536, 537, 698, 866, 874, 875, 877, 878, 960, 966], "646": 157, "technic": [157, 197, 218, 310, 361, 363, 366, 378, 397, 629, 641, 662, 663, 867, 950, 951, 957], "depart": [157, 390], "california": [157, 161, 162, 298, 308, 359, 363, 467, 961, 991], "santa": 157, "cruz": 157, "baseline_similar": 157, "plot_gpr_on_structured_data": [157, 159], "unfil": 157, "generickernelmixin": [157, 1006], "sequencekernel": 157, "baseline_similarity_bound": 157, "hyperparameter_baseline_similar": 157, "_f": [157, 950], "_g": 157, "__call__": [157, 325, 378, 398, 400, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1003], "eval_gradi": [157, 400, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "is_stationari": [157, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "clone_with_theta": [157, 400, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "agct": 157, "agc": 157, "aact": 157, "taa": 157, "aaa": 157, "gaaca": 157, "training_idx": 157, "cga": 157, "taac": 157, "tcg": 157, "cttt": 157, "tgct": 157, "atag": 157, "ctc": 157, "278": [157, 159, 363, 813, 814], "plot_gpr_sampl": 158, "gpr_model": 158, "y_sampl": [158, 588], "sample_i": [158, 400, 588, 1010], "single_prior": 158, "dev": [158, 166, 214, 261, 266, 364, 366, 369, 373, 954, 978, 992, 1003, 1008], "279": [158, 257, 950], "067": 158, "alpha_bound": [158, 600], "1e15": 158, "34e": 158, "799": [158, 339], "791": 158, "sigma_0_bound": [158, 591], "_gpr": 158, "629": 158, "lbfg": [158, 292, 367, 625, 626, 635, 636, 646, 649, 651, 657, 664, 804, 807, 830, 831, 950, 958, 1000, 1001, 1003, 1004, 1009, 1010, 1011], "statu": [158, 360, 381, 473, 813, 814], "abnormal_termination_in_lnsrch": 158, "6576930005": 158, "798": [158, 397], "matern": [158, 400, 1007, 1011], "609": [158, 371], "484": 158, "558": [158, 159], "plot_gpr_prior_posterior": [158, 159], "auto_examples_gaussian_process": 159, "iterativeimput": [160, 162, 163, 164, 467, 542, 557, 605, 606, 607, 616, 622, 649, 795, 816, 834, 1005, 1006, 1007, 1008, 1010], "robin": [161, 162, 604, 944, 1002, 1005, 1010], "kneighborsregressor": [161, 233, 288, 310, 397, 547, 815, 821, 823, 824, 957, 996, 998, 1000, 1006, 1008, 1009, 1010, 1011], "mimic": [161, 196, 338, 789], "missforest": [161, 944], "popular": [161, 221, 361, 364, 370, 373, 376, 378, 389, 396, 397, 398, 400, 430, 440, 944, 946, 950, 952, 959, 968, 975, 984, 989], "enable_iterative_imput": [161, 162, 369, 604, 944, 1005], "fetch_california_h": [161, 162, 167, 298, 308, 361, 377, 391, 1005, 1007], "x_full": [161, 162, 298], "y_full": [161, 162, 298], "2k": 161, "br_estim": 161, "score_full_data": 161, "neg_mean_squared_error": [161, 162, 198, 231, 270, 796, 954, 962, 1002], "x_miss": [161, 162], "y_miss": [161, 162], "missing_sampl": [161, 162], "missing_featur": [161, 162], "score_simple_imput": 161, "missing_valu": [161, 162, 236, 378, 604, 605, 606, 607, 744, 944, 1004, 1005], "score_iterative_imput": 161, "stricter": 161, "impute_estim": 161, "__class__": [161, 196, 198, 300, 338, 339, 340, 372], "xerr": [161, 162, 339], "plot_iterative_imputer_variants_comparison": [161, 163], "ness": [162, 214], "auxiliari": [162, 364, 978], "district": [162, 167, 361], "neither": [162, 166, 258, 306, 338, 349, 376, 416, 571, 605, 896, 957, 970], "20640": [162, 361, 467], "feel": [162, 298, 365, 366, 373, 390, 970], "x_diabet": [162, 984], "y_diabet": [162, 984], "x_california": 162, "y_california": 162, "add_missing_valu": 162, "missing_r": 162, "n_missing_sampl": 162, "x_miss_california": 162, "y_miss_california": 162, "x_miss_diabet": 162, "y_miss_diabet": 162, "knnimput": [162, 306, 604, 607, 944, 1006, 1007, 1010], "get_scores_for_imput": 162, "impute_scor": 162, "x_label": 162, "mses_california": 162, "stds_california": 162, "mses_diabet": 162, "stds_diabet": 162, "get_full_scor": 162, "full_scor": 162, "get_impute_zero_scor": 162, "fill_valu": [162, 227, 236, 307, 607, 964, 1004], "zero_impute_scor": 162, "unweight": [162, 209, 441, 624, 630, 655, 683, 689, 704, 705, 713, 758, 759, 762, 763, 808, 809, 810, 811, 812, 944], "get_impute_knn_scor": 162, "knn_impute_scor": 162, "get_impute_mean": 162, "mean_impute_scor": 162, "obvious": [162, 353, 989], "get_impute_it": 162, "n_nearest_featur": [162, 604], "sample_posterior": [162, 604, 944], "iterative_impute_scor": 162, "n_bar": 162, "xval": 162, "domin": [162, 196, 201, 265, 303, 361, 371, 853, 956, 964, 970], "plot_missing_valu": [162, 163], "414": [163, 214, 391, 701, 731, 849, 860, 954], "auto_examples_imput": 163, "prune": [164, 342, 348, 399, 477, 534, 535, 536, 537, 541, 542, 570, 621, 799, 880, 881, 882, 883, 957, 976, 991, 996, 999, 1006, 1007], "elast": [164, 174, 187, 207, 215, 269, 389, 449, 450, 456, 478, 501, 623, 624, 629, 634, 635, 636, 637, 638, 639, 640, 645, 653, 655, 658, 661, 760, 943, 954, 968, 976, 991, 996, 1001, 1005, 1006], "gram": [164, 174, 215, 367, 395, 398, 466, 501, 525, 565, 566, 567, 568, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 658, 659, 660, 661, 662, 663, 742, 750, 752, 943, 964, 989, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1010], "huberregressor": [164, 174, 202, 215, 501, 647, 648, 649, 655, 656, 950, 1002, 1003, 1004, 1005], "criteria": [164, 174, 185, 204, 215, 246, 256, 373, 390, 399, 444, 459, 460, 461, 478, 534, 535, 536, 537, 541, 542, 623, 629, 633, 635, 636, 648, 669, 834, 853, 872, 873, 880, 881, 882, 883, 944, 953, 958, 968, 988, 999, 1004, 1007], "aic": [164, 174, 184, 215, 246, 478, 628, 630, 631, 632, 633, 771, 834, 853, 943, 950, 996, 1003, 1009, 1010], "bic": [164, 174, 184, 215, 399, 478, 628, 630, 631, 632, 633, 771, 834, 853, 943, 950, 953, 996, 1003, 1009, 1010], "mnist": [164, 174, 204, 215, 276, 291, 296, 473, 548, 635, 799, 830, 853, 895, 950, 958], "20newgroup": [164, 174, 215, 466, 548, 635, 799, 950], "ordinari": [164, 174, 175, 198, 199, 201, 213, 215, 309, 612, 623, 629, 631, 632, 633, 634, 649, 655, 659, 660, 664, 968, 976, 991], "spline": [164, 174, 215, 493, 494, 495, 649, 834, 848, 852, 974, 1009], "ransac": [164, 174, 202, 213, 215, 501, 626, 634, 648, 655, 656], "convex": [164, 174, 215, 217, 334, 339, 390, 392, 395, 403, 430, 440, 451, 453, 454, 457, 458, 635, 653, 669, 950, 951, 957, 958, 968, 1009], "theil": [164, 174, 202, 215, 626, 634, 648, 655, 656], "sen": [164, 174, 202, 215, 626, 634, 648, 655, 656], "tweedi": [164, 174, 215, 442, 473, 529, 625, 646, 657, 682, 699, 720, 722, 724, 725, 727, 799, 834, 837, 838, 846, 853, 950, 1006, 1007, 1009], "insur": [164, 174, 196, 215, 442, 473, 529, 625, 646, 657, 682, 720, 725, 727, 799, 834, 837, 838, 846, 853, 950], "claim": [164, 174, 215, 366, 442, 473, 529, 625, 646, 657, 682, 720, 725, 727, 799, 834, 837, 838, 846, 853, 950], "multicollinear": [164, 165, 170, 393, 477, 541, 611, 632, 799, 950, 962], "isomap": [164, 216, 219, 223, 306, 310, 397, 479, 521, 526, 543, 666, 667, 668, 669, 822, 834, 843, 865, 957, 990, 991, 1004, 1006, 1009, 1010, 1011], "And": [164, 216, 223, 256, 338, 373, 390, 394, 398, 507, 565, 566, 568, 669, 670, 950, 954, 972, 1003], "hole": [164, 216, 223, 507, 669, 670, 1010], "perplex": [164, 216, 217, 221, 223, 276, 491, 502, 513, 669, 951, 1001, 1003, 1010], "johnson": [164, 224, 239, 298, 302, 358, 389, 466, 479, 849, 860, 864, 865, 866, 964, 971, 991, 1004, 1010], "lindenstrauss": [164, 224, 239, 358, 389, 466, 479, 864, 865, 866, 971, 991], "halv": [164, 249, 272, 385, 492, 541, 555, 772, 775, 776, 877, 991, 1008], "custom": [164, 235, 249, 257, 272, 278, 306, 320, 325, 336, 338, 340, 358, 361, 364, 367, 372, 373, 374, 376, 377, 378, 389, 390, 391, 394, 400, 446, 466, 470, 471, 479, 481, 515, 517, 524, 526, 548, 550, 579, 667, 689, 772, 799, 837, 870, 877, 938, 943, 948, 954, 957, 974, 975, 978, 989, 991, 996, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1011], "det": [164, 249, 272, 392, 492, 541, 675, 702, 764, 799, 834, 853, 872, 907, 1008], "tsne": [164, 217, 218, 219, 221, 222, 277, 290, 310, 378, 404, 412, 473, 665, 666, 667, 817, 834, 928, 951, 957, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "novelti": [164, 225, 277, 283, 290, 324, 819, 976, 990, 991, 996, 1004], "lof": [164, 225, 234, 277, 290, 540, 819, 876, 960], "boltzmann": [164, 291, 296, 479, 635, 689, 799, 829, 830, 831, 833, 858, 990, 991, 998], "mlp": [164, 235, 291, 293, 296, 473, 548, 799, 830, 831, 958], "semi_supervis": [164, 308, 310, 312, 313, 314, 315, 316, 317, 318, 356, 955, 967, 997, 1002, 1003, 1010, 1011], "tie": [164, 320, 336, 376, 397, 489, 801, 877, 955, 969, 997], "unbalanc": [164, 259, 320, 336, 394, 489, 877, 897, 898, 943, 968], "featurehash": [164, 337, 339, 341, 355, 361, 398, 442, 465, 558, 565, 566, 567, 568, 846, 997, 1002, 1003, 1004, 1010], "auto_examples_python": 164, "auto_examples_jupyt": 164, "hint": [166, 353, 370, 384, 426, 987], "aris": [166, 259, 333, 354, 370, 390, 691, 950, 951, 1008], "survei": [166, 393], "1985": [166, 390, 681, 691, 761], "educ": [166, 366, 692, 955], "534": 166, "race": [166, 361, 999], "occup": [166, 167, 298, 961], "sector": 166, "marr": 166, "not_memb": 166, "marri": 166, "freq": [166, 340], "378": [166, 397, 989, 996], "438": [166, 962], "440": 166, "156": [166, 231, 363], "411": [166, 392, 402, 451, 510], "350": 166, "018727": 166, "822097": 166, "833333": 166, "615373": 166, "379710": 166, "726573": 166, "55": [166, 191, 196, 205, 214, 219, 314, 370, 390, 394, 468, 574, 772, 785, 797, 954, 996], "thereaft": [166, 175], "hispan": 166, "manufactur": 166, "unmarri": 166, "dollar": [166, 361], "exploratori": [166, 978], "emul": [166, 373], "train_dataset": [166, 360], "pairplot": 166, "diag_kind": 166, "kde": [166, 280, 281, 289, 396, 818], "rangeindex": 166, "normalis": [166, 588, 989], "numerical_column": [166, 168, 445], "if_binari": [166, 238, 846, 964, 1007], "prepend": [166, 996], "exp10": 166, "ufunc": 166, "passthroughpassthroughtransformedtargetregressor": 166, "transformedtargetregressortransformedtargetregressor": 166, "ridgeridg": 166, "string_scor": 166, "nmae": 166, "learnt": [166, 349, 378, 394, 943], "obviou": [166, 349, 353, 387, 395], "regressor_": [166, 443, 570, 571, 574], "race_hispan": 166, "013519": 166, "race_oth": 166, "009075": 166, "race_whit": 166, "022594": 166, "occupation_cler": 166, "000045": 166, "occupation_manag": 166, "090528": 166, "occupation_oth": 166, "025102": 166, "occupation_profession": 166, "071964": 166, "occupation_sal": 166, "046636": 166, "occupation_servic": 166, "091053": 166, "sector_construct": 166, "000198": 166, "sector_manufactur": 166, "031255": 166, "sector_oth": 166, "031025": 166, "marr_unmarri": 166, "032405": 166, "union_not_memb": 166, "117154": 166, "sex_mal": 166, "090808": 166, "south_y": 166, "033823": 166, "054699": 166, "035005": 166, "030867": 166, "adimension": 166, "Their": [166, 361, 363, 379, 390, 621, 996], "visibl": [166, 198, 335, 360, 366, 390, 829, 959, 1001], "gaug": 166, "decad": [166, 975], "x_train_preprocess": 166, "multipli": [166, 214, 256, 353, 374, 378, 395, 397, 398, 442, 453, 492, 515, 517, 518, 524, 534, 538, 541, 623, 625, 629, 631, 635, 636, 637, 639, 645, 646, 647, 649, 653, 654, 655, 657, 663, 664, 666, 670, 739, 874, 875, 876, 877, 878, 880, 882, 898, 930, 931, 932, 943, 950, 954, 968, 1007], "coef_i": 166, "std_i": 166, "emphas": [166, 335, 371, 395, 954], "perturb": [166, 213, 295, 395, 397, 953], "caution": [166, 369, 419, 432, 1004], "repeatedkfold": [166, 394, 777, 787, 1003], "cv_model": 166, "return_estim": [166, 394, 796, 1004], "train_idx": [166, 378], "stripplot": 166, "whi": [166, 168], "collinear": [166, 169, 201, 214, 397, 544, 625, 646, 657, 846, 950, 996], "teas": 166, "apart": [166, 309, 325, 376, 378, 391, 393, 399, 700, 969, 978, 1004], "vice": [166, 253, 338, 390, 400, 421, 584, 585, 802, 1000], "versa": [166, 253, 338, 390, 400, 421, 584, 585, 802, 1000], "column_to_drop": 166, "said": [166, 225, 257, 339, 361, 366, 765, 952, 960, 980, 987], "unchang": [166, 214, 263, 397, 412, 421, 422, 424, 425, 427, 442, 446, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 559, 560, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 665, 666, 738, 808, 809, 810, 812, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 861, 864, 865, 870, 957, 980, 1004, 1010], "neglig": [166, 957, 999], "littl": [166, 167, 168, 169, 225, 361, 398, 440, 621, 772, 785, 909, 944, 951, 953, 969, 970, 987, 997, 1008], "ridgecvridgecv": 166, "alon": [166, 262, 325, 378, 384, 625, 646, 657, 717, 1003, 1005], "themselv": [166, 298, 362, 373, 378, 387, 390, 397, 398, 400, 592, 765, 970, 989, 1006], "bring": [166, 298, 395, 653, 655, 951, 978], "must": [166, 167, 169, 177, 213, 214, 225, 235, 251, 282, 299, 338, 349, 361, 365, 366, 367, 369, 373, 378, 379, 386, 388, 390, 391, 394, 395, 397, 398, 399, 400, 401, 410, 417, 420, 423, 424, 425, 427, 428, 429, 433, 435, 437, 440, 442, 444, 445, 447, 452, 464, 485, 486, 489, 500, 508, 514, 516, 518, 520, 521, 530, 531, 536, 537, 538, 539, 544, 545, 558, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 587, 588, 594, 597, 604, 605, 606, 607, 609, 610, 615, 619, 620, 625, 626, 629, 635, 636, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 676, 679, 682, 685, 710, 721, 739, 746, 749, 753, 756, 763, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 783, 785, 786, 787, 789, 790, 792, 799, 808, 809, 810, 811, 812, 815, 816, 817, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 833, 836, 837, 838, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 872, 873, 874, 875, 876, 877, 878, 879, 922, 929, 938, 940, 943, 944, 950, 951, 952, 954, 957, 958, 960, 961, 968, 969, 970, 980, 989, 996, 999, 1003, 1007, 1009, 1010], "proxi": [166, 395, 829, 984, 1001], "respond": [166, 366, 390], "282": [166, 170, 985, 996], "plot_linear_model_coefficient_interpret": [166, 170], "complement": [167, 266, 338, 609, 610, 774, 788, 791, 799, 808, 809, 810, 811, 812, 961, 976, 991, 1004], "goldstein": [167, 961], "kapeln": [167, 961], "bleich": [167, 961], "pitkin": [167, 961], "peek": [167, 366, 961], "cal_hous": [167, 361], "pdp": [167, 609, 961, 1010], "hidden_layer_s": [167, 235, 292, 294, 830, 831, 958], "learning_rate_init": [167, 293, 294, 830, 831], "early_stop": [167, 204, 292, 309, 338, 378, 397, 538, 539, 643, 644, 645, 653, 654, 655, 830, 831, 968, 1004, 1007, 1010], "640": [167, 388, 467, 483, 484, 560, 561, 943], "forget": [167, 349, 354, 360, 369, 376, 395, 951, 977], "poor": [167, 172, 262, 271, 316, 388, 394, 395, 667, 671, 713, 810, 813, 814, 948, 949, 951, 956, 975, 980, 1003, 1004, 1005, 1007, 1009], "overcrowd": 167, "grid_resolut": [167, 308, 323, 608, 609, 610], "medinc": [167, 298, 308, 361], "aveoccup": [167, 298, 308, 361], "houseag": [167, 308, 361], "averoom": [167, 298, 308, 361], "714": 167, "457": [167, 592], "cheaper": [167, 390, 400, 650, 946, 950], "024": [167, 339], "incom": [167, 298, 361, 419, 961], "household": [167, 361, 961], "room": [167, 298, 361, 370, 390, 977], "decil": [167, 609, 1007], "meaningless": [167, 398, 874, 877, 999], "162": [167, 238, 239, 363], "booster": [167, 1001], "gam": 167, "interaction_cst": [167, 397, 538, 539, 1011], "est_no_interact": 167, "easiest": [167, 367, 373, 391, 951], "forbidden": [167, 397], "ice_lines_kw": [167, 609], "pd_line_kw": [167, 609], "849": 167, "harder": [167, 265, 266, 302, 361, 365, 367, 373, 390, 492, 538, 539, 977], "partial_depend": [167, 609, 961, 997, 1005, 1006, 1007, 1008], "add_ax": [167, 221, 267], "surf": 167, "rstride": 167, "cstride": 167, "bupu": 167, "pretti": [167, 221, 254, 338, 353, 366, 376, 830, 831, 958, 1005], "view_init": [167, 217, 219, 221], "plot_partial_depend": [167, 170, 306, 307, 308, 1001, 1005, 1006, 1007, 1008, 1009, 1010], "inflat": [168, 390, 394, 954], "mitig": [168, 354, 355, 951, 970, 987, 988, 1008], "breiman": [168, 394, 397, 493, 494, 495, 532, 533, 541, 542, 611, 880, 881, 962, 970], "random_num": 168, "random_cat": 168, "sibsp": 168, "parch": 168, "categorical_encod": 168, "numerical_pip": 168, "memor": 168, "814": [168, 298, 304, 987], "mdi_import": 168, "sorted_importances_idx": 168, "retri": [168, 473, 1004, 1010], "classifier__min_samples_leaf": 168, "anymor": [168, 196, 306, 307, 325, 349, 369, 391, 647, 1002, 1005, 1008, 1009, 1010], "810": 168, "832": [168, 397, 532, 533], "train_result": 168, "test_result": 168, "train_import": 168, "test_import": 168, "plot_permutation_import": [168, 170], "wisconsin": [169, 359, 477, 991, 1001], "spearman": [169, 612, 613, 945], "spearmanr": 169, "squareform": 169, "load_breast_canc": [169, 316, 343, 370, 569, 572, 573, 575, 651, 652, 763, 954, 1001, 1002, 1007], "contradict": [169, 975], "perm_sorted_idx": 169, "tree_importance_sorted_idx": 169, "tree_indic": 169, "heatmap": [169, 175, 267, 325], "fill_diagon": [169, 220], "distance_matrix": 169, "dist_linkag": 169, "dendro": 169, "leaf_rot": 169, "dendro_idx": 169, "ivl": 169, "cluster_id": [169, 339], "fcluster": 169, "cluster_id_to_feature_id": 169, "selected_featur": 169, "x_train_sel": 169, "x_test_sel": 169, "clf_sel": 169, "074": [169, 170, 254, 339], "plot_permutation_importance_multicollinear": [169, 170], "689": 170, "auto_examples_inspect": 170, "polynomialcountsketch": [172, 616, 618, 946, 1008, 1010], "covtyp": 172, "tensor": [172, 358, 395, 515, 517, 524, 616, 617, 618, 991, 1008], "sketch": [172, 355, 358, 374, 389, 616, 617, 618, 921, 991, 1008], "daniel": [172, 353, 978, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1008, 1010], "lopez": 172, "sanchez": [172, 1004, 1005], "lope": 172, "usal": 172, "581": 172, "cartograph": 172, "remot": [172, 314, 366, 368], "fetch_covtyp": [172, 234, 308, 361, 1005, 1008, 1010], "5_000": 172, "mm": 172, "lsvm": 172, "lsvm_time": 172, "lsvm_score": 172, "thumb": [172, 353, 366, 376, 390, 635, 636, 643, 645, 653, 654, 655, 872, 954], "condens": 172, "compact": [172, 298, 353, 363, 813, 814, 970, 998], "ps_lsvm_time": 172, "ps_lsvm_score": 172, "41": [172, 196, 361, 363, 400, 447, 469, 508, 598, 601, 612, 635, 641, 662, 663, 756, 808, 956, 960], "ksvm": 172, "ksvm_time": 172, "ksvm_score": 172, "pham": [172, 946, 1003], "ninh": 172, "rasmu": [172, 1003], "pagh": [172, 946], "kdd": [172, 361, 388, 416, 966], "doi": [172, 196, 214, 366, 390, 653], "1145": [172, 390, 653], "2487575": 172, "2487591": 172, "csie": [172, 360, 464, 485, 486, 635], "ntu": [172, 360, 464, 485, 486, 635], "tw": [172, 360, 464, 485, 486, 635, 969], "cjlin": [172, 360, 464, 485, 486, 635, 999], "libsvmtool": [172, 360, 464, 485, 486], "733": [172, 173, 310, 311], "plot_scalable_poly_kernel": [172, 173], "auto_examples_kernel_approxim": 173, "ard": [175, 621, 622], "ol": [175, 186, 191, 193, 194, 202, 213, 309, 633, 950], "allevi": [175, 390, 956], "true_weight": 175, "ardregress": [175, 622, 950, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "olr": 175, "brr": 175, "symlognorm": 175, "linthresh": 175, "10e": 175, "cbar_kw": 175, "seismic_r": 175, "stabilis": 175, "sparser": [175, 187, 395, 449, 456, 516, 520, 950, 957, 968], "ard_scor": 175, "scores_": [175, 176, 569, 572, 573, 575, 576, 577, 621, 622, 636, 996, 1006], "brr_score": 175, "cutoff": [175, 914, 964, 1005], "full_data": 175, "input_featur": [175, 367, 378, 406, 410, 421, 422, 424, 425, 427, 442, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865], "x_plot": [175, 197, 202, 231, 259, 281], "y_plot": [175, 197, 202, 259], "ard_poli": 175, "brr_poli": 175, "y_ard": 175, "y_ard_std": 175, "y_brr": 175, "y_brr_std": 175, "queri": [175, 289, 353, 369, 396, 401, 423, 428, 435, 529, 587, 588, 605, 621, 622, 701, 731, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 954, 957, 970, 974, 998, 1000, 1001, 1004], "lambda_init": [175, 176, 622, 950, 1006], "intrins": [175, 378, 395, 397, 957, 962, 968, 1008], "743": [175, 215, 254, 987], "plot_ard": [175, 215, 621], "alpha_init": [176, 622, 950, 1006], "conclud": [176, 214, 256, 340, 349, 379], "yoshihiro": [176, 1006], "uchida": [176, 1006], "nimbus1after2a1sun7show": 176, "1234": [176, 244, 259, 366], "n_order": 176, "vander": 176, "ymean": 176, "ystd": 176, "pink": 176, "_init": 176, "lambda_": [176, 621, 622, 849, 950, 1003], "274": [176, 215, 488], "plot_bayesian_ridge_curvefit": [176, 215], "normalized_weight": 177, "x_offset": 177, "x_center": 177, "x_scale": [177, 843, 858, 964], "uncent": 177, "incorrectli": [177, 397, 398, 530, 536, 538, 709, 715, 954, 997, 1002, 1004, 1005, 1007], "lm": 177, "98809919e": 177, "48938813e": 177, "03237920e": 177, "25349312e": 177, "53959628e": 177, "67451144e": 177, "00768662e": 177, "19112072e": 177, "07963978e": 177, "47987268e": 177, "76195467e": 177, "00393284e": 177, "07582983e": 177, "66670169e": 177, "65799352e": 177, "99891212e": 177, "58195950e": 177, "58667835e": 177, "98350372e": 177, "60836363e": 177, "00911944e": 177, "elasticnetelasticnet": 177, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [177, 215], "huber": [178, 206, 389, 397, 537, 626, 653, 655, 968, 996, 998, 999, 1008], "mks542": 178, "y_outlier": 178, "epsilon_valu": 178, "intercept_": [178, 186, 188, 205, 232, 323, 330, 334, 367, 378, 459, 460, 461, 526, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 872, 873, 874, 875, 876, 877, 878, 948, 950, 968, 969, 996, 1003, 1008, 1010], "coef_ridg": 178, "plot_huber_vs_ridg": [178, 215], "logreg": [179, 807], "plot_method": [179, 279, 284, 321, 323, 326, 327, 608], "plot_iris_logist": [179, 215], "y_pred_lasso": 180, "r2_score_lasso": 180, "658064": 180, "enet": [180, 269], "y_pred_enet": 180, "r2_score_enet": 180, "642515": 180, "markerfmt": 180, "2ca02c": 180, "ff7f0e": 180, "bx": 180, "plot_lasso_and_elasticnet": [180, 215], "penalis": [181, 194, 211, 673], "lasso_path": [181, 628, 629, 630, 631, 632, 633, 640, 659, 660, 950, 996, 998, 1000, 1009], "enet_path": [181, 378, 624, 998, 1000, 1009], "alphas_lasso": 181, "coefs_lasso": 181, "alphas_positive_lasso": 181, "coefs_positive_lasso": 181, "alphas_enet": 181, "coefs_enet": 181, "alphas_positive_enet": 181, "coefs_positive_enet": 181, "neg_log_alphas_lasso": 181, "neg_log_alphas_enet": 181, "coef_l": 181, "neg_log_alphas_positive_lasso": 181, "coef_pl": 181, "neg_log_alphas_positive_enet": 181, "coef_p": 181, "370": [181, 215, 339, 340, 341], "plot_lasso_coordinate_descent_path": [181, 215, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661], "sai": [182, 225, 333, 338, 339, 366, 390, 391, 395, 397, 398, 425, 477, 481, 487, 654, 943, 960, 967, 978, 986, 987, 989], "x_sp": 182, "sparse_lasso": 182, "dense_lasso": 182, "coeff_diff": 182, "2e": [182, 270], "126": [182, 397], "038": [182, 449, 450, 830], "01e": 182, "xs_sp": 182, "tocsc": 182, "nnz": [182, 339, 361, 676], "191": [182, 371, 955], "878": 182, "65e": 182, "plot_lasso_dense_vs_sparse_data": [182, 215], "lars_path": [183, 374, 508, 514, 516, 519, 520, 522, 523, 525, 627, 628, 629, 630, 631, 632, 633, 640, 641, 642, 660, 661, 662, 663, 950, 996, 998, 1001, 1005, 1007], "098": [183, 215, 276], "plot_lasso_lar": [183, 215], "zht2007": 184, "lassolars": [184, 185, 399, 628, 631, 632, 950, 996, 1003, 1005, 1009, 1010], "2173": [184, 633, 950], "2192": [184, 633, 950], "038076": [184, 185], "050680": [184, 185], "061696": [184, 185], "021872": [184, 185], "044223": [184, 185], "034821": [184, 185], "043401": [184, 185], "002592": [184, 185], "019907": [184, 185], "017646": [184, 185], "001882": [184, 185], "044642": [184, 185], "051474": [184, 185], "026328": [184, 185], "008449": [184, 185], "019163": [184, 185], "074412": [184, 185], "039493": [184, 185], "068332": [184, 185], "092204": [184, 185], "085299": [184, 185], "044451": [184, 185], "005670": [184, 185], "045599": [184, 185], "034194": [184, 185], "032356": [184, 185], "002861": [184, 185], "025930": [184, 185], "089063": [184, 185], "011595": [184, 185], "036656": [184, 185], "012191": [184, 185], "024991": [184, 185], "036038": [184, 185], "034309": [184, 185], "022688": [184, 185], "009362": [184, 185], "005383": [184, 185], "036385": [184, 185], "003935": [184, 185], "015596": [184, 185], "008142": [184, 185], "031988": [184, 185], "046641": [184, 185], "linearlars": 184, "akaik": [184, 185, 246, 633, 771, 943, 950], "lasso_lars_": [184, 185], "mathemat": [184, 213, 259, 358, 363, 366, 378, 380, 389, 392, 395, 396, 526, 527, 534, 541, 612, 623, 633, 765, 766, 771, 831, 874, 877, 880, 882, 954, 964, 966, 976, 978, 987, 991, 1010], "zou_et_al_criterion_resc": 184, "noise_vari": [184, 509, 633, 950, 1010], "aic_criterion": 184, "criterion_": [184, 185, 633], "index_alpha_path_a": 184, "alphas_": [184, 185, 624, 627, 628, 630, 631, 632, 633, 638, 640, 659, 660, 996, 999, 1009], "lassolarsic__criterion": [184, 185], "bic_criterion": 184, "index_alpha_path_b": 184, "plot_lasso_lars_": [184, 215], "n_random_featur": 185, "x_random": 185, "random_": 185, "02d": 185, "random_02": 185, "random_05": 185, "random_08": 185, "random_11": 185, "647689": 185, "234137": 185, "469474": 185, "465730": 185, "012831": 185, "412304": 185, "067528": 185, "110923": 185, "601707": 185, "057711": 185, "208864": 185, "196861": 185, "478522": 185, "057122": 185, "324084": 185, "611676": 185, "331263": 185, "185659": 185, "812526": 185, "003533": 185, "alpha_a": 185, "alpha_b": 185, "160030": 185, "5244": 185, "764779": 185, "300343": 185, "5208": 185, "250639": 185, "5212": 185, "341949": 185, "542052": 185, "4928": 185, "018900": 185, "4936": 185, "201520": 185, "034077": 185, "4869": 185, "678359": 185, "4881": [185, 1001], "952289": 185, "189631": 185, "4815": 185, "437362": 185, "4831": [185, 632], "802601": 185, "329616": 185, "4810": 185, "423641": 185, "4830": 185, "880191": 185, "306012": 185, "4803": 185, "573491": 185, "4828": 185, "121351": 185, "124225": 185, "4804": 185, "126502": 185, "4832": 185, "765671": 185, "820705": 185, "621645": 185, "4836": 185, "352124": 185, "750389": 185, "4805": 185, "012521": 185, "4841": 185, "834310": 185, "570655": 185, "290075": 185, "4846": 185, "203174": 185, "550213": 185, "4807": 185, "075887": 185, "4852": 185, "080295": 185, "358295": 185, "4806": 185, "878051": 185, "4855": 185, "973770": 185, "259297": 185, "706026": 185, "4860": 185, "893055": 185, "237703": 185, "4809": [185, 259], "440409": 185, "4866": 185, "718747": 185, "850031": 185, "989341": 185, "4867": 185, "358990": 185, "384338": 185, "4801": 185, "702266": 185, "163224": 185, "296575": 185, "4802": 185, "594754": 185, "4872": 185, "147022": 185, "031555": 185, "236720": 185, "4874": 185, "880298": 185, "618263": 185, "4798": 185, "484109": 185, "4876": 185, "218997": 185, "526599": 185, "4799": 185, "543841": 185, "370039": 185, "586798": 185, "4794": 185, "238744": 185, "4880": 185, "156252": 185, "445978": 185, "4795": 185, "589715": 185, "4885": 185, "598533": 185, "259031": 185, "4796": 185, "966981": 185, "4891": 185, "067109": 185, "032179": 185, "662409": 185, "4894": 185, "853846": 185, "019069": 185, "652739": 185, "4888": 185, "752867": 185, "626286": 185, "817724": 185, "set_xscal": [185, 200, 201], "optimist": [185, 261, 338, 349, 683, 950, 954], "proper": [185, 214, 355, 397, 418, 427, 518, 530, 653, 909, 929, 949, 950, 951, 954, 969, 996, 1006, 1007, 1008, 1009, 1010], "badli": [185, 196, 338, 355, 853, 950, 964], "lassolarscv": [185, 399, 629, 630, 631, 633, 640, 642, 659, 660, 661, 950, 996, 1003, 1009], "3800": 185, "mse_path_": [185, 624, 628, 630, 632, 638, 640], "cv_alphas_": [185, 628, 632, 1008], "kink": 185, "heavili": [185, 353, 354, 366, 373, 626, 632, 971], "efficaci": 185, "083": [185, 215, 254], "plot_lasso_model_select": [185, 215, 624, 630], "106": [186, 215, 219, 223, 238, 252, 272, 345, 348, 363, 849, 948, 997], "plot_logist": [186, 215], "axes_row": 187, "clf_l1_lr": 187, "clf_l2_lr": 187, "clf_en_lr": 187, "coef_l1_lr": 187, "coef_l2_lr": 187, "coef_en_lr": 187, "sparsity_l1_lr": 187, "sparsity_l2_lr": 187, "sparsity_en_lr": 187, "nl1_ratio": 187, "plot_logistic_l1_l2_spars": [187, 215], "995": 188, "plot_logistic_multinomi": [188, 215], "976": 188, "dupr": [188, 204, 276, 278, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "m4x": [188, 212], "sag": [188, 203, 635, 636, 649, 651, 664, 950, 968, 974, 1001, 1002, 1003, 1005, 1006], "bry": [188, 205], "classes_": [188, 205, 226, 265, 313, 314, 366, 367, 378, 416, 417, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 546, 570, 571, 587, 635, 636, 643, 645, 651, 652, 653, 674, 677, 678, 763, 772, 775, 776, 785, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 815, 820, 823, 830, 833, 840, 841, 844, 867, 868, 869, 872, 874, 877, 880, 882, 954, 965, 968, 997, 1000, 1001, 1003, 1006, 1008], "plot_hyperplan": [188, 205, 232], "looser": 189, "liblinear": [189, 323, 371, 635, 636, 763, 872, 873, 874, 877, 878, 954, 969, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "l1_min_c": [189, 950, 969, 996], "intercept_sc": [189, 635, 636, 872, 873, 879, 950], "coefs_": [189, 294, 830, 831, 958, 1001], "plot_logistic_path": [189, 215], "jointli": [190, 263, 389, 390, 395, 950], "instant": 190, "wave": [190, 366, 953], "n_task": [190, 950], "n_relevant_featur": 190, "multitasklasso": [190, 637, 640, 950, 996, 1004, 1007, 1009], "coef_lasso_": 190, "coef_multi_task_lasso_": 190, "spy": 190, "feature_to_plot": 190, "seagreen": 190, "301": [190, 215, 229, 391, 968], "plot_multi_task_lasso_support": [190, 215], "true_coef": 191, "reg_nnl": 191, "y_pred_nnl": 191, "r2_score_nnl": 191, "nnl": [191, 634], "8225220806196526": 191, "reg_ol": 191, "y_pred_ol": 191, "r2_score_ol": 191, "7436926291700356": 191, "low_x": 191, "high_x": 191, "low_i": 191, "high_i": 191, "get_ylim": [191, 298, 299], "847222222222214": 191, "plot_nnl": [191, 215], "938": [192, 760, 954, 984], "23786125": 192, "2548": 192, "diabetes_x": [192, 987], "diabetes_i": [192, 987], "diabetes_x_train": [192, 987], "diabetes_x_test": [192, 987], "diabetes_y_train": [192, 987], "diabetes_y_test": [192, 987], "diabetes_y_pr": 192, "047": [192, 215, 371], "plot_ol": [192, 215], "217": [193, 215, 512, 518], "plot_ols_3d": [193, 215], "great": [194, 349, 366, 376, 395, 739, 975, 978, 996, 1003], "slope": [194, 198, 213, 388, 390, 698, 723, 952, 954], "greatli": [194, 230, 366, 373, 430, 957, 970, 1002, 1010], "plot_ols_ridge_vari": [194, 215], "orthogonalmatchingpursuit": [195, 642, 662, 663, 950, 996, 998, 1001, 1004, 1009], "orthogonalmatchingpursuitcv": [195, 641, 998, 1009], "make_sparse_coded_sign": [195, 508, 514, 1010], "512": [195, 317, 319], "n_nonzero_coef": [195, 503, 508, 514, 519, 525, 627, 641, 662, 663], "xw": [195, 309, 623, 624, 626, 629, 630, 631, 632, 633, 637, 638, 639, 640, 649, 658, 659, 660, 661, 950], "_0": [195, 662, 950, 954, 969], "data_transpos": [195, 503, 508, 514, 1010], "distort": [195, 229, 363, 388, 389, 850, 861, 866, 951, 964, 966], "y_noisi": 195, "idx_r": 195, "omp_cv": 195, "254": [195, 215, 339], "plot_omp": [195, 215], "gbrt": [196, 397], "polici": [196, 214, 378, 512, 518, 950, 1011], "contract": [196, 214, 354, 378, 975], "compani": [196, 214, 390, 978], "policyhold": [196, 214, 950], "vehicl": [196, 214], "driver": [196, 214, 1011], "exposur": [196, 214, 950], "accid": [196, 214], "noll": [196, 214], "salzmann": [196, 214], "wuthrich": [196, 214], "novemb": [196, 214, 363, 1001, 1002, 1004], "2139": [196, 214], "ssrn": [196, 214], "3164764": [196, 214], "ch": [196, 198, 214, 316, 318], "rth": [196, 214], "41214": [196, 214], "idpol": [196, 214], "claimnb": [196, 214], "vehpow": [196, 214], "vehag": [196, 214], "drivag": [196, 214], "bonusmalu": [196, 214], "vehbrand": [196, 214], "vehga": [196, 214], "b12": [196, 214], "1217": 196, "r82": 196, "77000": 196, "75000": 196, "diesel": [196, 214], "r22": 196, "09000": 196, "r72": 196, "84000": 196, "678008": 196, "6114326": 196, "00274": 196, "3317": 196, "r93": 196, "678009": 196, "6114327": 196, "9850": 196, "r11": [196, 214], "678010": 196, "6114328": 196, "1323": 196, "678011": 196, "6114329": 196, "r26": 196, "678012": 196, "6114330": 196, "678013": [196, 214], "10070308464041304": 196, "log_scale_transform": [196, 214], "linear_model_preprocessor": 196, "passthrough_numer": [196, 214], "binned_numer": [196, 214], "log_scaled_numer": [196, 214], "onehot_categor": [196, 214], "imbalanc": [196, 259, 263, 265, 339, 376, 388, 394, 679, 684, 762, 773, 777, 810, 954, 956, 962, 974], "simplist": [196, 398], "pertin": 196, "dummyregressor": [196, 214, 528, 954, 997, 999, 1000, 1003, 1004, 1006, 1009, 1010], "df_train": [196, 214], "df_test": [196, 214], "regressor__sample_weight": 196, "mean_absolute_error": [196, 198, 214, 954, 997, 999], "mean_poisson_devi": [196, 954, 1006], "score_estim": [196, 214], "n_mask": 196, "564": 196, "189": [196, 371, 869, 967], "comonli": 196, "ridge_glm": 196, "strictli": [196, 214, 298, 339, 370, 378, 393, 395, 398, 485, 486, 512, 518, 521, 538, 539, 565, 568, 619, 647, 648, 672, 677, 714, 772, 775, 776, 781, 785, 796, 822, 849, 860, 864, 865, 867, 868, 872, 873, 877, 878, 907, 943, 945, 950, 954, 964, 968, 997, 1007], "domain": [196, 378, 380, 394, 612, 697, 698, 699, 773, 774, 778, 779, 780, 950, 975], "186": [196, 228, 239, 295, 371, 763, 954], "595": 196, "223745": 196, "597": [196, 339], "glm": [196, 214, 307, 625, 646, 657, 950, 996, 1007], "vanilla": [196, 390, 606], "poissonregressor": [196, 214, 307, 310, 625, 657, 950, 1007, 1010, 1011], "poisson_glm": 196, "newton": [196, 214, 295, 587, 625, 635, 636, 646, 657, 830, 831, 950, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1011], "deep": [196, 367, 378, 404, 413, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 744, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 958, 959, 974, 975, 978, 1001, 1007, 1008, 1010], "concis": [196, 370, 1007, 1009], "poisson_gbrt": 196, "566": 196, "prone": [196, 243, 302, 376, 388], "set_yscal": 196, "5e5": 196, "realiz": [196, 978], "priori": [196, 213, 265, 274, 298, 378, 390, 397, 565, 571, 953], "wrongli": [196, 325], "gen_even_slic": [196, 374, 912], "_mean_frequency_by_risk_group": 196, "y_true_bin": 196, "y_pred_bin": 196, "idx_sort": 196, "sl": 196, "y_true_seg": 196, "y_pred_seg": 196, "11935": 196, "11933": 196, "11932": 196, "12196": 196, "11931": 196, "portfolio": [196, 214, 948], "riskiest": [196, 214], "safest": [196, 214, 349, 360], "irrespect": [196, 229, 265, 583], "lorenz": [196, 214, 1001], "summar": [196, 247, 263, 265, 340, 366, 367, 380, 397, 498, 635, 671, 682, 683, 950, 951, 954, 960], "gini": [196, 214, 236, 268, 308, 530, 531, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 943, 962, 970, 1004, 1005], "lorenz_curv": [196, 214], "ranked_frequ": 196, "ranked_exposur": [196, 214], "cumulated_claim": 196, "cumulated_exposur": 196, "cum_exposur": 196, "cum_claim": [196, 214], "0x7f189275b490": 196, "worst": [196, 363, 390, 425, 684, 704, 705, 758, 759, 762, 765, 766, 798, 954, 978, 996, 1009], "occurr": [196, 339, 340, 361, 366, 390, 398, 546, 547, 558, 566, 567, 594, 604, 605, 606, 607, 758, 808, 836, 956, 997, 1002], "circumstanti": 196, "extractor": [196, 295, 355, 361, 378, 398, 480, 943, 996], "discrim": 196, "profil": [196, 353, 366, 368, 498, 501, 950, 978], "ideal": [196, 198, 214, 253, 256, 263, 265, 266, 349, 365, 366, 369, 370, 373, 376, 378, 701, 731, 943, 953, 968, 969, 975], "meaningfulli": [196, 954], "554": [196, 204, 212, 215, 294], "plot_poisson_regression_non_normal_loss": [196, 215], "monomi": 197, "vandermond": [197, 964], "x_0": [197, 634], "pseudo": [197, 295, 367, 394, 402, 419, 430, 432, 440, 447, 448, 449, 451, 452, 453, 454, 510, 538, 539, 540, 604, 611, 616, 618, 619, 623, 624, 629, 630, 637, 638, 639, 640, 654, 668, 672, 775, 776, 783, 785, 822, 829, 864, 865, 869, 872, 873, 874, 877, 908, 909, 950, 966, 1001, 1010], "consecut": [197, 388, 394, 398, 422, 425, 427, 428, 430, 434, 437, 440, 514, 515, 516, 523, 579, 622, 643, 644, 645, 653, 654, 655, 770, 771, 777, 808, 809, 810, 811, 812, 830, 831, 943, 964, 989, 1004], "basis_1": 197, "basis_2": 197, "infinit": [197, 241, 259, 353, 400, 599, 600, 753, 770, 890, 892, 893, 946, 953, 964, 969, 1004, 1006, 1009, 1010, 1011], "malt": [197, 1009, 1010], "londschien": [197, 1009], "prepar": [197, 338, 353, 367, 368, 371, 373, 970, 978, 1004], "set_prop_cycl": 197, "teal": [197, 206, 263], "yellowgreen": [197, 199, 206, 345], "tomato": 197, "unwant": [197, 338], "oscillatori": [197, 964], "danger": [197, 394], "pft": 197, "splt": 197, "bsplines_": [197, 852], "refrain": [197, 366], "dec": [197, 654, 852, 876, 969], "31st": [197, 852], "advis": [197, 349, 366, 390, 398, 416, 623, 629, 631, 637, 639, 649, 664, 946, 950, 956, 958, 969, 1010], "x_plot_ext": 197, "y_plot_ext": 197, "565": [197, 215, 256], "plot_polynomial_interpol": [197, 215, 848, 852], "pareto": 198, "dale": [198, 1009], "mail": [198, 303, 361, 366, 369, 373, 376, 379, 972, 1004, 1005], "ru": 198, "glemaitre58": 198, "y_true_mean": 198, "y_normal": 198, "y_pareto": 198, "huge": [198, 201, 353, 371, 604, 999], "heavi": [198, 387, 975], "sp_version": [198, 647], "parse_vers": [198, 647], "incompat": [198, 369, 473, 944, 1004, 1005], "older": [198, 365, 369, 999, 1006, 1008], "recent": [198, 356, 364, 369, 370, 373, 378, 381, 390, 446, 515, 542, 954, 968, 978, 999, 1008], "interior": [198, 647, 950, 1011], "out_bounds_predict": 198, "bool_": 198, "logical_or": [198, 204, 265, 371], "hit": [198, 371], "wider": [198, 398, 885, 950], "asymmetri": [198, 338], "linger": 198, "linear_regress": [198, 270], "quantile_regress": 198, "y_pred_lr": 198, "y_pred_qr": 198, "805": 198, "486": 198, "670": 198, "cv_results_lr": 198, "cv_results_qr": 198, "test_neg_mean_squared_error": [198, 796], "732": 198, "690": 198, "129": [198, 985, 996], "plot_quantile_regress": [198, 215], "robustli": [199, 389], "faulti": [199, 996], "1903908407869": 199, "17236387": 199, "08533159": 199, "ransacregressor": [199, 202, 213, 626, 655, 656, 950, 999, 1001, 1002, 1003, 1004, 1007, 1009, 1010], "inlier_mask": 199, "inlier_mask_": [199, 648], "outlier_mask": 199, "line_x": [199, 213], "line_i": 199, "line_y_ransac": 199, "estimator_": [199, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 570, 571, 574, 648, 938, 1011], "plot_ransac": [199, 215], "regularis": [200, 403, 451, 453], "eventu": [200, 244, 389, 390, 399, 570, 978], "simpler": [200, 214, 325, 353, 365, 390, 395, 950, 955, 987, 1001], "stronger": [200, 257, 620, 629, 635, 636, 649, 650, 651, 652, 653, 655, 664], "kornel": [200, 1002], "kielczewski": [200, 1002], "plusnet": 200, "plot_ridge_coeff": [200, 215], "certain": [201, 213, 256, 276, 302, 349, 361, 362, 369, 380, 390, 395, 399, 615, 626, 630, 635, 640, 661, 838, 872, 943, 946, 950, 951, 954, 955, 958, 964, 969, 980, 984, 1001, 1005, 1008], "oscil": [201, 390, 419], "practis": 201, "maintain": [201, 214, 217, 256, 354, 356, 365, 368, 371, 372, 373, 376, 378, 379, 381, 390, 397, 419, 421, 842, 843, 849, 850, 853, 857, 860, 861, 863, 950, 951, 964, 975, 980, 991], "10x10": 201, "hilbert": [201, 839, 946, 964], "n_alpha": [201, 450, 623, 624, 627, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 650, 652, 658, 659, 660, 661, 999], "plot_ridge_path": [201, 215], "theilsen": 202, "lessen": [202, 635, 636, 872, 873], "theilsenregressor": [202, 213, 626, 648, 655, 950, 1000, 1008, 1010], "x_error": 202, "y_errors_larg": 202, "x_errors_larg": 202, "deviant": [202, 960], "legend_titl": 202, "nabsolut": 202, "nto": [202, 265], "386": [202, 215, 849], "plot_robust_fit": [202, 215], "asgd": [203, 968], "rob": [203, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1008], "zinkov": [203, 996, 997, 998, 1000, 1001], "heldout": 203, "squared_hing": [203, 333, 643, 653, 872, 879, 950], "0e4": 203, "yy_": 203, "428": [203, 215, 339], "plot_sgd_comparison": [203, 215], "monitor": [204, 368, 378, 530, 531, 536, 537, 538, 539, 958, 999, 1004, 1006, 1008], "plot_sgd_early_stop": [204, 215], "144": [204, 256, 276, 371, 996], "matplotlibdeprecationwarn": 204, "minor": [204, 259, 263, 361, 368, 379, 473, 954, 996, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "_test": [204, 276, 300, 367, 1009], "ignore_warn": [204, 300, 1002], "load_mnist": [204, 276], "class_0": [204, 363, 487], "class_1": [204, 363, 487], "mnist_784": [204, 212, 276, 294], "fit_and_scor": 204, "train_scor": [204, 258, 271, 343, 796, 797, 800, 949], "estimator_dict": 204, "flush": 204, "results_df": [204, 256], "plot_list": 204, "ceil": [204, 234, 534, 535, 536, 537, 540, 541, 542, 543, 571, 648, 775, 776, 880, 881, 882, 883, 968], "get_shared_y_ax": 204, "group_df": 204, "ova": [205, 643, 645, 653, 968], "plot_sgd_iri": [205, 215], "ugli": [205, 279, 284, 287, 321], "modified_huber_loss": 206, "darkorchid": 206, "plot_sgd_loss_funct": [206, 215], "l1_color": 207, "l2_color": 207, "elastic_net_color": 207, "1001": 207, "rho": [207, 395, 654, 950, 968, 997], "elastic_net": 207, "dpi": [207, 886, 1009], "elastic_net_contour": 207, "l2_contour": 207, "l1_contour": 207, "inlin": [207, 366, 970], "309": [207, 215, 339], "plot_sgd_penalti": [207, 215], "ndenumer": 208, "090": [208, 215, 276], "plot_sgd_separating_hyperplan": [208, 215], "no_weight": 209, "samples_weight": 209, "no_weights_handl": 209, "legend_el": [209, 259], "weights_handl": 209, "095": [209, 215], "plot_sgd_weighted_sampl": [209, 215], "sgdoneclasssvm": [210, 225, 309, 876, 960, 968, 1009, 1011], "rc": [210, 369], "n_error_train": [210, 324], "n_error_test": [210, 282, 324], "n_error_outli": [210, 282, 324], "clf_sgd": 210, "pipe_sgd": 210, "y_pred_train_sgd": 210, "y_pred_test_sgd": 210, "y_pred_outliers_sgd": 210, "n_error_train_sgd": 210, "n_error_test_sgd": 210, "n_error_outliers_sgd": 210, "z_sgd": 210, "pubu": [210, 229, 282, 324], "darkr": [210, 282, 324], "palevioletr": [210, 282, 324], "blueviolet": [210, 282, 324], "377": [210, 215], "plot_sgdocsvm_vs_ocsvm": [210, 215], "newgroups20": 211, "trim": [211, 813, 814], "20newsgroup": [211, 359, 996], "4500": 211, "130107": [211, 229, 466], "epoch": [211, 378, 513, 643, 644, 645, 653, 654, 655, 830, 831, 968, 1003, 1004, 1009], "5960": 211, "26593496": 211, "43348936": 211, "26362917": 211, "31973683": 211, "37815029": 211, "2928359": 211, "27054655": 211, "62717609": 211, "19522393": 211, "30897646": 211, "34586917": 211, "28207552": 211, "34125758": 211, "29898468": 211, "34279478": 211, "59489497": 211, "38353048": 211, "35278655": 211, "19829832": 211, "14603365": 211, "6440": 211, "36047253": 211, "1268187": 211, "10606655": 211, "17985197": 211, "5395559": 211, "07993421": 211, "06686804": 211, "21443888": 211, "11528972": 211, "2075215": 211, "10914094": 211, "11144673": 211, "13988486": 211, "09684337": 211, "26286057": 211, "11682692": 211, "55800226": 211, "17370318": 211, "11452112": 211, "arthur": [211, 212, 390, 425, 438, 1001, 1002, 1003, 1004, 1005, 1008, 1010], "mensch": [211, 212, 1001, 1002, 1003, 1004], "timeit": [211, 244, 371], "default_tim": [211, 244], "model_param": 211, "this_max_it": 211, "train_tim": [211, 231, 338, 339], "ndataset": [211, 300], "run_tim": [211, 212], "637": [211, 215], "plot_sparse_logistic_regression_20newsgroup": [211, 215], "8253": 212, "661": [212, 231], "l1_plot": 212, "745": [212, 215], "plot_sparse_logistic_regression_mnist": [212, 215], "subpopul": [213, 656, 950], "residual_threshold": [213, 648, 950, 1009], "remedi": 213, "max_subpopul": [213, 656, 1010], "lose": [213, 340, 361, 378, 393, 398, 400, 514, 523, 908, 909, 944, 950, 989], "florian": [213, 978, 996, 1000, 1002, 1006], "wilhelm": [213, 1000, 1002, 1006], "indigo": 213, "710": [213, 215, 388], "plot_theilsen": [213, 215], "motor": 214, "parti": [214, 354, 365, 376, 774, 780, 922, 972, 996, 1007], "liabil": 214, "functool": 214, "mean_tweedie_devi": [214, 954, 1006], "load_mtpl2": 214, "fremtpl2freq": 214, "df_freq": 214, "fremtpl2sev": 214, "41215": 214, "df_sev": 214, "claimamount": 214, "fillna": 214, "unquot": 214, "field": [214, 363, 387, 390, 391, 398, 475, 478, 594, 950, 952, 961, 969, 974, 977, 989, 997], "column_nam": 214, "plot_obs_pr": 214, "y_label": 214, "fill_legend": 214, "df_": 214, "tweedie_pow": 214, "d\u00b2": 214, "scorer": [214, 258, 260, 367, 378, 394, 397, 538, 539, 571, 579, 611, 636, 650, 652, 687, 707, 708, 717, 772, 775, 776, 785, 795, 796, 797, 800, 943, 950, 954, 962, 975, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "subset_label": 214, "score_label": [214, 262], "est_freq": 214, "est_sev": 214, "unstack": [214, 259], "fremtpl2": 214, "unreason": [214, 394], "exception": 214, "200000": 214, "column_tran": [214, 391], "purepremium": 214, "indirectli": 214, "avgclaimamount": 214, "fmax": 214, "option_context": 214, "max_column": 214, "139": [214, 371, 397, 430, 440, 668, 672, 955], "463": 214, "27000": 214, "303": [214, 612], "404": 214, "333333": 214, "r25": 214, "1981": [214, 950], "14156": 214, "142857": 214, "4792": 214, "1456": 214, "10403": 214, "928571": 214, "10834": 214, "17474": 214, "193548": 214, "225806": 214, "r73": 214, "3986": 214, "12860": [214, 1005], "5417": 214, "seemingli": [214, 349, 376], "169504": 214, "6237": 214, "upon": [214, 222, 289, 361, 366, 376, 378, 384, 538, 539, 604, 607, 648, 764, 770, 771, 813, 814, 943, 950, 970, 980, 989, 1010], "glm_freq": 214, "0201": 214, "0219": 214, "1379": 214, "1378": 214, "2441": 214, "2246": 214, "surprisingli": [214, 398], "bonu": [214, 366, 984, 989], "malu": 214, "younger": 214, "infti": [214, 400, 596, 950, 964, 1003], "gammaregressor": [214, 307, 310, 657, 950, 1007, 1010, 1011], "mask_train": 214, "mask_test": 214, "glm_sev": 214, "400000e": 214, "700000e": 214, "756746e": 214, "744042e": 214, "801770e": 214, "030677e": 214, "dummy_sev": 214, "000000e": 214, "756687e": 214, "744497e": 214, "803882e": 214, "033764e": 214, "slighli": 214, "avgclaim": 214, "nbclaim": 214, "1951": 214, "1940": 214, "1978": [214, 950], "introduct": [214, 254, 356, 366, 394, 395, 398, 567, 763, 764, 808, 812, 950, 952, 954, 956, 973, 981, 987, 990, 991], "apriori": 214, "regardless": [214, 257, 259, 354, 366, 390, 512, 635, 680, 691, 954, 966, 1004, 1011], "glm_pure_premium": 214, "999": [214, 256, 369, 397, 693, 830, 831], "scores_product_model": 214, "scores_glm_pure_premium": 214, "expand_frame_repr": 214, "690000e": 214, "420000e": 214, "669930e": 214, "617050e": 214, "640770e": 214, "640880e": 214, "7000": 214, "695740e": 214, "683980e": 214, "682880e": 214, "692270e": 214, "8000": [214, 259, 260], "046010e": 214, "040530e": 214, "037600e": 214, "045390e": 214, "9000": 214, "387580e": 214, "385000e": 214, "382120e": 214, "387830e": 214, "9900": 214, "015716e": 214, "015414e": 214, "015347e": 214, "015587e": 214, "9990": 214, "914573e": 214, "914370e": 214, "914538e": 214, "914387e": 214, "904751e": 214, "904556e": 214, "904747e": 214, "904558e": 214, "730119e": 214, "722128e": 214, "739865e": 214, "731249e": 214, "295040e": 214, "212197e": 214, "295505e": 214, "213056e": 214, "917618e": 214, "299546e": 214, "916555e": 214, "313276e": 214, "951751e": 214, "325198e": 214, "riski": 214, "operation": [214, 978], "develop": [214, 254, 256, 306, 338, 353, 356, 361, 365, 366, 376, 378, 380, 384, 387, 389, 392, 393, 397, 398, 412, 470, 772, 950, 957, 970, 972, 974, 975, 977, 978, 987, 996, 1004, 1005, 1006, 1009, 1011], "ranked_pure_premium": 214, "cumulated_claim_amount": 214, "cumulated_sampl": 214, "y_pred_product": 214, "y_pred_tot": 214, "ordered_sampl": 214, "855": [214, 215], "plot_tweedie_regression_insurance_claim": [214, 215], "auto_examples_linear_model": 215, "md": [217, 218, 219, 220, 369, 665, 669, 671, 990, 991, 996, 1008, 1011], "seek": [217, 219, 221, 365, 366, 376, 379, 485, 486, 951, 981, 983], "ticker": [217, 219, 222, 276], "s_point": 217, "s_color": 217, "make_s_curv": [217, 222], "plot_3d": 217, "points_color": 217, "subplot_kw": [217, 280], "set_major_loc": [217, 281], "multipleloc": [217, 281], "add_2d_scatt": 217, "set_major_formatt": [217, 219, 222, 276, 281], "nullformatt": [217, 219, 222, 276], "lle": [217, 218, 219, 221, 507, 666, 670, 951, 1008], "thought": [217, 281, 378, 390, 951, 955], "analys": [217, 347, 395, 775, 776, 951, 974, 978], "lle_standard": 217, "s_standard": 217, "lle_ltsa": 217, "ltsa": [217, 218, 219, 666, 670, 951], "s_ltsa": 217, "lle_hessian": 217, "hessian": [217, 218, 219, 397, 625, 635, 636, 646, 657, 666, 670, 950, 958, 990, 991, 1011], "s_hessian": 217, "lle_mod": 217, "s_mod": 217, "lle_method": 217, "tangent": [217, 666, 670, 952, 990, 991], "eigenmap": [217, 666, 668, 670, 672, 990, 991, 997], "isometr": [217, 665, 667, 668, 669, 951], "geodes": [217, 665, 951], "s_isomap": 217, "md_scale": 217, "normalized_stress": [217, 218, 219, 220, 667, 671, 951, 1011], "s_scale": 217, "laplacian": [217, 358, 387, 419, 430, 440, 597, 616, 620, 668, 672, 740, 741, 749, 868, 950, 951, 967, 991, 997, 1002], "s_spectral": 217, "t_sne": [217, 1004], "s_t_sne": 217, "388": [217, 223, 304], "plot_compare_method": [217, 223], "offsetbox": 218, "plot_embed": 218, "shown_imag": 218, "someth": [218, 338, 366, 367, 368, 373, 398, 954, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "4e": 218, "imagebox": 218, "annotationbbox": 218, "offsetimag": 218, "neighborhoodcomponentsanalysi": [218, 284, 285, 286, 957, 1005, 1010], "random_project": [218, 229, 356, 966, 971, 997, 1002], "sparserandomproject": [218, 229, 864, 966, 997, 1002, 1010], "120": [218, 399, 567, 996], "embeed": 218, "n_iter_without_progress": [218, 669, 1001, 1002], "nca": [218, 284, 285, 286, 822, 957], "_md": [218, 219, 220], "plot_lle_digit": [218, 223], "pole": 219, "thin": [219, 597], "earth": [219, 339, 739, 974], "069": [219, 254], "051": [219, 450], "251": [219, 270, 272, 363], "sphere_data": 219, "trans_data": 219, "2g": [219, 222, 674, 1007], "252": [219, 363, 511, 849, 860], "257": [219, 254], "258": 219, "se": [219, 363, 381], "plot_manifold_spher": [219, 223], "euclidean_dist": [220, 229, 367, 428, 435, 665, 737, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 996, 1001, 1004, 1005], "finfo": [220, 456, 583, 627, 628, 631, 632, 633, 659, 660, 716, 1011], "x_true": 220, "dissimilar": [220, 378, 387, 430, 667, 671, 951, 1002], "embedding_": [220, 378, 665, 666, 667, 668, 669], "nmd": 220, "npo": 220, "plot_md": [220, 223], "sr_point": 221, "sr_color": 221, "ambient": 221, "text2d": 221, "unrol": 221, "unnecessarili": [221, 1003, 1006], "clump": 221, "sr_lle": 221, "sr_err": 221, "locally_linear_embed": [221, 951], "sr_tsne": 221, "stretch": [221, 245], "byproduct": 221, "ultim": 221, "sh_point": 221, "sh_color": 221, "topologi": [221, 222], "sh_lle": 221, "sh_err": 221, "sh_tsne": 221, "641": [221, 223], "plot_swissrol": [221, 223], "tendenc": [222, 950, 951, 953, 956, 959], "clearer": [222, 969], "distil": 222, "pub": [222, 811, 867], "misread": 222, "narin": [222, 1003, 1004], "kokhlikyan": [222, 1003, 1004], "plot_t_sne_perplex": [222, 223], "737": [223, 231], "auto_examples_manifold": 223, "cope": [225, 355, 361, 950], "multimod": 225, "inli": [225, 950, 960], "degrad": [225, 298, 339, 396], "unimod": [225, 452], "localoutlierfactor": [225, 234, 282, 283, 310, 378, 540, 876, 960, 1003, 1004, 1006, 1010, 1011], "modal": [225, 452, 911], "hypercub": [225, 492], "decent": [225, 255, 361, 956], "handpick": 225, "absenc": [225, 259, 378, 688, 836, 953, 954], "negative_linestyl": 225, "outliers_fract": 225, "n_inlier": 225, "anomaly_algorithm": 225, "blobs_param": 225, "735": [225, 239], "plot_anomaly_comparison": [225, 239], "transfus": 226, "1464": 226, "donat": 226, "confust": 226, "cm_displai": 226, "y_score": [226, 263, 265, 378, 459, 460, 461, 683, 696, 701, 702, 714, 715, 731, 757, 763, 764, 767, 772, 775, 776, 785, 833, 954, 1002, 1010], "pos_label": [226, 234, 378, 417, 418, 675, 677, 678, 682, 683, 685, 702, 704, 705, 713, 757, 758, 759, 762, 764, 840, 856, 954, 1004, 1008, 1010], "roc_displai": 226, "previs": 226, "precision_recall_curv": [226, 263, 677, 682, 683, 702, 954, 997, 998, 1002, 1009, 1010], "pr_displai": 226, "easlii": 226, "602": [226, 239], "plot_display_object_visu": [226, 239], "summaris": [227, 307], "composit": [227, 307, 356, 358, 394, 635, 763, 944, 950, 963, 991, 997], "num_proc": [227, 307], "cat_proc": [227, 307], "feat1": [227, 307, 398], "feat3": [227, 307, 398], "feat0": [227, 307], "feat2": [227, 307, 398], "033": [227, 239, 962], "plot_estimator_represent": [227, 239], "isotonicregress": [228, 945, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1010], "ir": [228, 395, 567, 701, 731, 808, 812, 952, 954], "out_of_bound": [228, 612], "y_": [228, 242, 246, 247, 288, 367, 393, 395, 614, 625, 646, 657, 704, 705, 713, 758, 759, 762, 950, 954, 1002], "linearregressionlinearregress": 228, "x_thresholds_": [228, 612, 1008], "y_thresholds_": [228, 612, 1008], "plot_isotonic_regress": [228, 239], "lemma": [229, 358, 389, 511, 518, 526, 864, 865, 866, 948, 991, 999], "johnson_lindenstrauss_min_dim": [229, 966, 997], "achliopta": [229, 865, 866, 966], "_compon": [229, 513], "geq": [229, 395, 397, 950, 954, 964, 968, 969], "_sampl": [229, 395, 515, 517, 524], "admiss": [229, 354], "eps_rang": 229, "min_n_compon": 229, "nn_sampl": [229, 268], "semilogi": 229, "nn_compon": [229, 230], "100k": 229, "n_components_rang": 229, "rp": 229, "projected_data": 229, "n_byte": 229, "projected_dist": 229, "min_dist": 229, "max_dist": 229, "hexbin": 229, "gridsiz": 229, "717": [229, 296, 339], "267": [229, 303, 304, 996], "jl": [229, 865], "436": 229, "884": [229, 239], "plot_johnson_lindenstrauss_bound": [229, 239], "rbfsampler": [230, 616, 617, 619, 946, 980, 1000, 1010, 1011], "mont": [230, 400, 588, 618, 619, 946, 959], "fourier": [230, 389, 615, 616, 617, 618, 619, 733, 734, 946], "acceler": [230, 353, 376, 446, 669, 870, 951, 978, 1005, 1009, 1011], "data_train": [230, 257, 338], "targets_train": 230, "data_test": [230, 257, 338], "targets_test": 230, "kernel_svm": 230, "linear_svm": 230, "feature_map_fouri": 230, "feature_map_nystroem": [230, 616], "fourier_approx_svm": 230, "feature_map": [230, 298], "nystroem_approx_svm": 230, "kernel_svm_tim": 230, "kernel_svm_scor": 230, "linear_svm_tim": 230, "linear_svm_scor": 230, "fourier_scor": 230, "nystroem_scor": 230, "fourier_tim": 230, "nystroem_tim": 230, "feature_map__n_compon": 230, "timescal": 230, "ly": [230, 821, 823, 824, 825, 1000], "flat_grid": 230, "plot_kernel_approxim": [230, 239], "krr": [231, 400, 620, 947], "insensit": [231, 620, 653, 655, 763, 873, 947, 968, 969, 996], "fifth": [231, 947, 980], "kr": [231, 256, 1010], "svr_fit": 231, "kr_fit": 231, "sv_ratio": 231, "support_": [231, 332, 447, 452, 570, 571, 579, 874, 875, 876, 877, 878, 969], "y_svr": 231, "svr_predict": 231, "y_kr": 231, "kr_predict": 231, "723": 231, "340": [231, 313], "091": 231, "sv_ind": 231, "arithmet": [231, 371, 373, 390, 528, 625, 646, 657, 680, 693, 711, 712, 732, 768, 954, 1004], "test_tim": [231, 338], "train_test_s": 231, "learning_curv": [231, 258, 949, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1010], "train_scores_svr": 231, "test_scores_svr": 231, "train_sizes_ab": [231, 797], "train_scores_kr": 231, "test_scores_kr": 231, "plot_kernel_ridge_regress": [231, 239], "theta_c": [232, 500], "reject": [232, 378, 379, 500, 648, 702, 892, 893, 950, 954, 1004], "never": [232, 349, 366, 374, 376, 384, 390, 393, 394, 428, 435, 500, 532, 533, 534, 541, 946, 1006, 1009], "likewis": [232, 390, 500], "surround": [232, 366, 819, 960], "cca": [232, 393, 460, 462, 1000, 1004, 1005, 1006, 1008, 1010], "onevsrestclassifi": [232, 263, 265, 274, 388, 801, 803, 872, 980, 997, 998, 1000, 1002, 1003, 1009, 1010], "metaclassifi": 232, "min_x": 232, "max_x": 232, "plot_subfigur": 232, "min_i": 232, "zero_class": 232, "one_class": 232, "160": [232, 943, 987], "nfor": 232, "248": [232, 239], "plot_multilabel": [232, 239], "extratreesregressor": [233, 397, 534, 542, 543, 882, 883, 999, 1002, 1004, 1005, 1006, 1009, 1010, 1011], "n_face": 233, "face_id": 233, "n_pixel": [233, 254], "nn": [233, 398, 672, 987], "y_test_predict": 233, "true_fac": 233, "completed_fac": 233, "360": [233, 239], "plot_multioutput_face_complet": [233, 239], "benchmark": [234, 276, 308, 339, 340, 353, 359, 361, 366, 376, 381, 383, 388, 446, 492, 870], "iforest": 234, "pharuj": 234, "rajborirug": 234, "ra": 234, "kmitl": 234, "ac": [234, 507, 641, 662, 663, 950, 967, 989], "th": [234, 309, 347, 377, 394, 397, 405, 420, 424, 429, 431, 437, 441, 450, 534, 535, 536, 537, 538, 539, 541, 542, 543, 570, 571, 609, 625, 626, 646, 648, 657, 673, 694, 755, 792, 897, 944, 950, 954, 958, 961, 968, 969], "preprocess_dataset": 234, "fetch_kddcup99": [234, 361, 1003, 1004, 1005, 1008, 1009], "labelbinar": [234, 265, 378, 716, 802, 837, 846, 856, 955, 980, 999, 1000, 1001, 1005, 1010], "dataset_nam": [234, 276], "smtp": [234, 361, 469], "sa": [234, 361, 469], "percent10": [234, 469], "lb": [234, 840, 965], "forestcov": 234, "glass": [234, 361], "wdbc": [234, 363], "cardiotocographi": 234, "tablewar": 234, "x_mal": 234, "y_mal": 234, "x_ben": 234, "y_ben": 234, "x_mal2": 234, "y_mal2": 234, "compute_predict": 234, "model_nam": [234, 274], "negative_outlier_factor_": [234, 283, 819, 960], "datasets_nam": 234, "models_nam": 234, "plot_outlier_detection_bench": [234, 239], "recalcul": [235, 237, 390, 993, 996], "mlpregressormlpregressor": 235, "tree_disp": 235, "mlp_disp": 235, "0x7f1894b30580": 235, "plot_partial_dependence_visualization_api": [235, 239], "set_config": [236, 238, 307, 353, 354, 391, 446, 603, 1005, 1007, 1010], "deactiv": [236, 360, 364, 381, 391, 775, 776, 1010], "standard_scal": 236, "polynomialfeaturespolynomialfeatur": 236, "pcapca": 236, "svcsvc": [236, 237, 254, 256, 308], "numeric_preprocessor": 236, "imputation_mean": 236, "categorical_preprocessor": 236, "imputation_const": 236, "onehot": [236, 299, 300, 391, 838, 964], "gender": [236, 846, 964], "classifier__n_estim": 236, "classifier__max_featur": 236, "classifier__max_depth": 236, "classifier__criterion": 236, "117": [236, 239, 321, 336, 997], "plot_pipeline_displai": [236, 239], "svc_disp": [237, 306, 993], "rfc_disp": [237, 306, 993], "198": [237, 239, 242, 248, 996], "plot_roc_curve_visualization_api": [237, 239], "transform_output": [238, 446, 870], "slep018": [238, 367, 1011], "x_test_scal": 238, "894264": 238, "798301": 238, "271411": 238, "327605": 238, "244466": 238, "086944": 238, "327407": 238, "459074": 238, "660797": 238, "462234": 238, "576989": 238, "159419": 238, "933197": 238, "427329": 238, "414810": 238, "039497": 238, "275851": 238, "scaler2": 238, "x_test_np": 238, "x_test_df": 238, "selectpercentileselectpercentil": 238, "feature_names_in_": [238, 309, 378, 410, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 604, 605, 606, 607, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 1009, 1010, 1011], "num_pip": 238, "8048780487804879": 238, "log_reg": [238, 310], "reset": [238, 349, 373, 511, 653, 654, 655, 813, 814, 842, 843, 853, 998], "plot_set_output": [238, 239], "auto_examples_miscellan": 239, "bayesiangaussianmixtur": [241, 242, 247, 771, 1002, 1004, 1005, 1009, 1010], "weight_concentration_prior_typ": [241, 247, 770, 953, 1002], "dirichlet_distribut": [241, 770, 953, 1002], "dirichlet_process": [241, 247, 770, 953, 1002], "weight_concentration_prior": [241, 247, 770, 953], "finit": [241, 247, 353, 361, 378, 446, 515, 528, 559, 583, 586, 587, 588, 635, 703, 753, 760, 770, 794, 870, 890, 892, 893, 950, 953, 954, 978, 980, 987, 1003, 1004, 1008, 1010, 1011], "unnecessari": [241, 370, 422, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 681, 957, 964, 975, 978, 999, 1001, 1006, 1007, 1009], "covar": [241, 242, 247], "eig_val": 241, "eig_vec": 241, "unit_eig_vec": 241, "arctan2": [241, 243, 246], "56b4e9": 241, "plot_titl": 241, "weights_": [241, 770, 771, 1010], "covariances_": [241, 242, 243, 246, 247, 770, 771, 1003], "set_tick_param": 241, "007": [241, 264, 339], "labelleft": 241, "0072b2": 241, "f0e442": 241, "d55e00": 241, "mean_precision_prior": [241, 247, 770], "nprior": 241, "gamma_0": [241, 247], "reg_covar": [241, 770, 771], "init_param": [241, 244, 247, 770, 771], "concentrations_prior": 241, "114": [241, 248, 996], "plot_concentration_prior": [241, 248], "infer": [242, 246, 247, 256, 267, 344, 360, 367, 376, 389, 394, 395, 473, 485, 486, 492, 511, 513, 526, 527, 530, 536, 537, 609, 612, 685, 698, 716, 770, 771, 809, 867, 868, 880, 881, 882, 883, 919, 944, 950, 954, 959, 964, 967, 970, 974, 975, 983, 997, 1001, 1002, 1007, 1010], "color_it": [242, 246, 247], "dp": [242, 247], "unless": [242, 247, 258, 310, 354, 366, 367, 368, 376, 378, 390, 393, 401, 416, 423, 426, 428, 430, 435, 436, 439, 442, 445, 450, 466, 473, 485, 486, 508, 512, 513, 514, 516, 519, 520, 522, 523, 525, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 588, 609, 611, 616, 623, 624, 628, 629, 630, 632, 634, 635, 636, 638, 640, 642, 643, 645, 653, 656, 665, 666, 667, 668, 669, 670, 671, 685, 690, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 819, 821, 823, 824, 826, 827, 830, 831, 832, 835, 857, 858, 860, 861, 862, 863, 867, 868, 880, 881, 882, 883, 888, 892, 893, 909, 922, 950, 953, 955, 996, 998, 1002, 1004, 1007, 1008], "shouldn": [242, 247, 366, 514], "em": [242, 243, 247, 422, 425, 437, 513, 770, 771, 953, 1010], "dpgmm": [242, 247, 996, 1000, 1002], "plot_gmm": [242, 248], "ronweiss": 243, "make_ellips": 243, "datalim": 243, "skf": [243, 394, 790], "train_index": [243, 316, 394, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792], "test_index": [243, 316, 394, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792], "cov_typ": 243, "means_init": [243, 244, 771], "y_train_pr": 243, "train_accuraci": 243, "y_test_pr": 243, "test_accuraci": [243, 257], "plot_gmm_covari": [243, 248], "random_from_data": [244, 770, 771, 953], "diamond": 244, "colour": [244, 363, 398, 564, 955], "walsh": [244, 1008, 1010], "extmath": [244, 338, 374, 431, 1002, 1003, 1006, 1011], "row_norm": 244, "_samples_gener": 244, "timer": [244, 371], "x_squared_norm": [244, 438], "get_initial_mean": 244, "times_init": 244, "relative_tim": 244, "ini": 244, "init_tim": 244, "2fx": 244, "725": [244, 248], "plot_gmm_init": [244, 248], "shifted_gaussian": 245, "stretched_gaussian": 245, "score_sampl": [245, 281, 282, 283, 289, 378, 396, 447, 509, 518, 540, 654, 770, 771, 772, 775, 776, 785, 818, 819, 829, 833, 876, 960, 999, 1004, 1006, 1008], "plot_gmm_pdf": [245, 248], "deform": [246, 335], "component_1": 246, "component_2": 246, "best_parameters_": 246, "gmm_bic_scor": 246, "callabl": [246, 258, 260, 378, 394, 398, 399, 401, 402, 420, 422, 423, 424, 425, 427, 428, 430, 435, 437, 442, 443, 444, 445, 510, 512, 514, 516, 522, 523, 536, 537, 538, 539, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 587, 588, 597, 605, 611, 616, 620, 636, 643, 648, 650, 652, 665, 668, 669, 673, 687, 695, 707, 717, 746, 749, 753, 754, 755, 756, 765, 766, 772, 775, 776, 785, 795, 796, 797, 798, 800, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 837, 867, 868, 874, 875, 876, 877, 878, 916, 917, 924, 938, 943, 954, 964, 996, 1000, 1003, 1004, 1005, 1006, 1008, 1010], "0x7f18bc4b6550": 246, "gaussianmixturegaussianmixtur": 246, "eas": [246, 366, 371, 950, 968, 974, 975, 978, 1007, 1008, 1010], "param_n_compon": 246, "param_covariance_typ": 246, "renam": [246, 257, 310, 366, 369, 390, 420, 424, 425, 437, 449, 450, 456, 513, 514, 530, 531, 532, 533, 846, 996, 997, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "793662": 246, "1083": 246, "652535": 246, "1114": 246, "835102": 246, "1151": 246, "243322": 246, "1181": 246, "713463": 246, "catplot": 246, "hue": [246, 256, 279, 363], "eigenvalu": [246, 387, 390, 392, 430, 440, 447, 448, 449, 450, 451, 452, 453, 454, 512, 518, 526, 650, 665, 666, 668, 670, 672, 839, 951, 964, 998, 1002, 1005, 1006, 1007, 1008], "tab10": 246, "509": [246, 248], "plot_gmm_select": [246, 248], "loos": [247, 253, 969, 1004], "liberti": 247, "judgment": [247, 954], "panel": [247, 281, 298, 396, 974], "primarili": [247, 261, 366, 378, 386, 390, 978, 1005, 1006], "covariance_prior": [247, 770], "plot_gmm_sin": [247, 248], "auto_examples_mixtur": 248, "mislabel": [250, 397, 956], "imbal": [250, 259, 394, 683, 704, 705, 713, 758, 759, 762, 763, 954], "misclassifi": [250, 338, 969], "life": [250, 373, 951], "set_printopt": 250, "titles_opt": 250, "ax_": [250, 259, 263, 306, 372, 417, 608, 674, 675, 677, 678], "plot_confusion_matrix": [250, 272, 306, 1006, 1007, 1008, 1009], "shufflesplit": [251, 258, 333, 394, 774, 779, 781, 791, 799, 984, 996, 997, 999, 1001, 1002], "groupshufflesplit": [251, 394, 984, 1002], "groupkfold": [251, 261, 394, 571, 772, 775, 776, 777, 778, 779, 780, 785, 789, 794, 795, 796, 797, 800, 984, 1002, 1009], "stratifiedshufflesplit": [251, 325, 394, 984, 996, 997, 1002, 1003, 1009], "stratifiedgroupkfold": [251, 1009], "1338": 251, "cmap_data": 251, "cmap_cv": 251, "coolwarm": [251, 322], "n_point": [251, 813, 814], "percentiles_class": 251, "perc": 251, "group_prior": 251, "visualize_group": 251, "yticklabel": [251, 338], "ngroup": 251, "nclass": 251, "plot_cv_indic": [251, 272], "tr": [251, 363, 369, 390, 392, 447, 448, 449, 450, 451, 452, 453, 454, 811], "axessubplot": 251, "this_cv": 251, "280": [251, 272, 314], "plot_cv_predict": [252, 272], "fnr": [253, 675, 702], "det_curv": [253, 675, 757, 764, 954, 1008, 1009], "visuali": 253, "commonli": [253, 359, 378, 390, 391, 400, 591, 733, 734, 770, 802, 845, 951, 952, 954, 955, 957], "detcurvedisplai": [253, 309, 702, 1008, 1009], "ax_roc": 253, "ax_det": 253, "feedback": [253, 365, 366, 379, 974, 1004], "willing": 253, "plot_det": [253, 272], "n_imag": 254, "fastest": [254, 340, 425, 647, 649, 651, 664, 908, 909, 953], "print_datafram": 254, "filtered_cv_result": 254, "mean_precis": 254, "std_precis": 254, "mean_recal": 254, "std_recal": 254, "mean_test_precis": [254, 260], "std_test_precis": 254, "mean_test_recal": 254, "std_test_recal": 254, "03f": 254, "refit_strategi": 254, "best_index": [254, 260], "precision_threshold": 254, "high_precision_cv_result": 254, "mean_score_tim": [254, 257, 772, 785], "rank_test_recal": 254, "rank_test_precis": [254, 260], "best_recall_std": 254, "best_recal": 254, "best_recall_threshold": 254, "high_recall_cv_result": 254, "fastest_top_recall_high_precision_index": 254, "idxmin": 254, "nthe": [254, 347], "854": 254, "063": [254, 256, 416], "061": 254, "877": 254, "039": [254, 726, 756, 954], "780": 254, "905": 254, "058": [254, 363], "889": [254, 416], "904": [254, 391], "890": 254, "073": [254, 449, 450], "065": [254, 371], "611": [254, 256, 339, 341, 518], "028": 254, "744": 254, "618": [254, 311], "004125": 254, "877206": 254, "069196": 254, "0x7f1893cdb1f0": 254, "807": [254, 256], "plateau": 254, "plot_grid_search_digit": [254, 272], "minimis": [255, 390, 394, 635, 636, 970], "219": 255, "260": [255, 1009], "york": [255, 763, 770, 944, 954, 966], "usa": [255, 361, 869, 944, 951, 966, 967], "best_index_": [255, 260, 772, 775, 776, 785], "wenhao": [255, 1004, 1005], "zhang": [255, 390, 421, 641, 656, 662, 663, 666, 670, 733, 734, 950, 951, 952, 956, 968, 1000, 1001, 1003, 1004, 1005, 1006, 1008], "wenhaoz": 255, "ucla": [255, 950], "lower_bound": 255, "best_score_idx": 255, "best_low_complex": 255, "fewest": [255, 604], "candidate_idx": 255, "param_reduce_dim__n_compon": 255, "246": [255, 272, 962, 996], "plot_grid_search_refit_cal": [255, 272], "moon": [256, 293, 300, 338, 339, 499], "moder": [256, 366, 400, 432, 960], "repeatedstratifiedkfold": [256, 394, 786, 790, 1003], "repetit": [256, 370, 394, 786, 787, 962, 1010], "rank_test_scor": [256, 264, 772, 785, 1002], "rename_axi": 256, "9400": 256, "079297": 256, "9300": 256, "077846": 256, "3_poli": 256, "9044": [256, 1003], "098776": 256, "2_poli": 256, "6852": 256, "169106": 256, "stori": [256, 361, 953], "certainti": [256, 367, 717, 954], "conduct": [256, 400, 974, 1010], "repreat": 256, "model_scor": [256, 274], "regex": [256, 340, 442, 444], "_test_scor": [256, 450, 571, 1009], "lineplot": 256, "labelpad": 256, "882561": 256, "783392": 256, "351390": 256, "746492": 256, "298688": 256, "355440": 256, "nadeau": [256, 1004], "bengio": [256, 830, 831, 943, 967], "framework": [256, 353, 367, 376, 378, 384, 390, 614, 665, 770, 950, 951, 958, 972, 975, 978, 996, 1002], "diebold": 256, "mariano": 256, "proven": [256, 425, 427, 948, 952, 978], "replic": [256, 365, 367], "cdot": [256, 387, 390, 395, 396, 400, 591, 592, 596, 599, 600, 839, 946, 948, 954, 958, 964], "sum_": [256, 265, 333, 387, 388, 390, 395, 396, 397, 515, 517, 524, 673, 730, 948, 950, 951, 954, 956, 958, 959, 961, 962, 968, 969, 970], "ij": [256, 286, 387, 390, 395, 515, 517, 524, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 950, 951, 954, 956, 959, 969], "corrected_std": 256, "crossvalid": [256, 270], "corrected_var": 256, "ddof": [256, 853, 863], "compute_corrected_ttest": 256, "t_stat": 256, "p_val": 256, "model_1_scor": 256, "model_2_scor": 256, "ncorrect": 256, "227": [256, 390, 700], "uncorrect": [256, 572, 575], "t_stat_uncorrect": 256, "p_val_uncorrect": 256, "convent": [256, 366, 367, 369, 378, 408, 409, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 447, 448, 449, 450, 451, 452, 453, 454, 485, 486, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 524, 540, 543, 546, 547, 558, 559, 560, 565, 566, 568, 604, 605, 606, 607, 654, 665, 666, 667, 668, 676, 694, 770, 771, 801, 802, 817, 819, 821, 825, 837, 845, 848, 849, 851, 864, 865, 876, 903, 904, 954, 981, 996, 1003, 1004, 1007, 1009, 1010], "benavoli": 256, "colleagu": 256, "conjug": [256, 430, 440, 649, 651, 664, 672, 950], "overlin": [256, 387], "t_post": 256, "ppf": 256, "infin": [256, 518, 659, 660, 688, 794, 879, 891, 957], "minu": [256, 735, 954], "better_prob": 256, "cdf": 256, "773": [256, 338, 625, 811], "essenti": [256, 364, 367, 390, 394, 395, 486, 946, 954, 957, 975, 978, 1004], "rope": 256, "rope_interv": 256, "rope_prob": 256, "432": [256, 339, 392], "x_rope": 256, "uncertain": [256, 314, 365], "credibl": 256, "cred_interv": 256, "cred_int_df": 256, "000977": 256, "019023": 256, "005422": 256, "025422": 256, "016445": 256, "036445": 256, "bonferroni": 256, "n_comparison": 256, "pairwise_t_test": 256, "model_i": 256, "model_k": 256, "model_i_scor": 256, "model_k_scor": 256, "pairwise_comp_df": 256, "model_1": 256, "model_2": 256, "276": 256, "851": [256, 261, 272], "pairwise_bayesian": 256, "worse_prob": 256, "pairwise_bayesian_df": 256, "018": [256, 309, 311, 450], "882": 256, "187": [256, 371, 561, 955, 987, 998], "dietterich": [256, 803, 955], "1998": [256, 361, 363, 395, 397, 532, 533, 803, 808, 839, 955, 956, 958, 964, 968], "bouckaert": 256, "frank": [256, 804, 955, 1001, 1005, 1006], "pacif": 256, "asia": [256, 964], "confer": [256, 361, 371, 390, 395, 401, 418, 423, 428, 488, 512, 540, 673, 684, 701, 731, 829, 830, 831, 954, 960, 966, 970], "discoveri": [256, 361, 371, 374, 390, 397, 399, 401, 423, 488, 532, 533, 540, 569, 572, 573, 575, 576, 577, 583, 696, 715, 758, 954, 966, 978, 1010, 1011], "corani": 256, "dem\u0161ar": 256, "zaffalon": 256, "accompani": [256, 1004], "1995": [256, 363, 388, 397, 530, 531, 803, 869, 955], "econom": 256, "plot_grid_search_stat": [256, 272], "loader": [257, 317, 338, 359, 360, 361, 475, 476, 485, 974, 975, 989, 996, 1001, 1003, 1004, 1007], "fetch20newsgroup": 257, "complementnb": [257, 338, 808, 809, 811, 812, 956, 1004, 1008, 1009, 1011], "tfidfvectorizertfidfvector": 257, "complementnbcomplementnb": 257, "vect__": 257, "clf__": 257, "parameter_grid": 257, "vect__max_df": 257, "vect__min_df": 257, "vect__ngram_rang": [257, 989], "unigram": [257, 361, 398, 565, 566, 568, 1003], "bigram": [257, 398, 565, 566, 568, 989], "vect__norm": 257, "clf__alpha": [257, 989], "exhaust": [257, 306, 307, 308, 309, 310, 353, 363, 370, 377, 385, 390, 772, 775, 776, 785, 862, 863, 865, 950, 989, 991], "parallelis": [257, 446, 870, 1003], "random_search": [257, 264], "best_paramet": 257, "get_param": [257, 368, 378, 400, 404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 943, 1006, 1007, 1008, 1010, 1011], "param_nam": [257, 271, 800, 949, 989], "816": [257, 449, 450], "709": 257, "ambigu": [257, 370, 398, 549, 688, 909, 957, 1005, 1007, 1009], "shorten_param": 257, "plotli": [257, 366, 381, 383], "cursor": 257, "px": 257, "error_x": 257, "std_score_tim": [257, 772, 785], "error_i": 257, "hover_data": 257, "update_layout": 257, "xanchor": 257, "yanchor": 257, "autom": [257, 369, 381, 669, 943, 950, 951, 954, 974, 978], "parallel_coordin": 257, "understood": [257, 366, 390, 986], "column_result": 257, "transform_func": 257, "fromkei": [257, 887], "ngram_rang": [257, 317, 398, 565, 566, 568], "color_continuous_scal": 257, "viridis_r": 257, "mambaforg": 257, "env": [257, 364, 373, 381], "testenv": 257, "lib": [257, 354, 364, 381, 974], "python3": [257, 364, 381], "site": [257, 364, 366, 368, 373, 381, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 978, 1004], "_core": 257, "iteritem": 257, "slide": [257, 621, 950, 973, 974], "intersect": [257, 322, 387, 390, 713], "undo": [257, 843, 1000], "471": [257, 272, 363], "plot_grid_search_text_feature_extract": [257, 272], "plot_learning_curv": [258, 272], "ref": [258, 366, 372, 373, 944, 1002], "obj": [258, 544, 545, 916], "parallel_backend": [258, 354, 401, 416, 423, 426, 428, 430, 435, 436, 439, 442, 445, 450, 508, 512, 513, 514, 516, 519, 520, 522, 523, 525, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 571, 579, 587, 609, 611, 616, 624, 628, 630, 632, 634, 635, 636, 638, 640, 642, 643, 645, 653, 656, 665, 666, 667, 668, 669, 670, 671, 749, 753, 756, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 815, 816, 819, 821, 823, 824, 826, 827, 832, 835, 867, 868, 1004], "glossari": [258, 349, 356, 366, 367, 371, 389, 401, 402, 416, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 442, 445, 447, 450, 452, 465, 468, 469, 472, 474, 480, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 560, 561, 571, 579, 584, 585, 587, 588, 604, 609, 611, 616, 617, 618, 619, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 664, 665, 666, 667, 668, 669, 670, 671, 672, 749, 753, 756, 766, 770, 771, 772, 774, 775, 776, 777, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 815, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 835, 838, 850, 861, 864, 865, 867, 868, 872, 873, 874, 877, 880, 881, 882, 883, 908, 909, 925, 928, 943, 944, 950, 980, 1004], "signatur": [258, 338, 339, 361, 465, 466, 571, 587, 588, 636, 650, 652, 687, 717, 795, 797, 800, 943, 1003, 1009], "n_tick": [258, 797, 800], "return_tim": [258, 797, 1006], "train_scores_mean": [258, 271], "train_scores_std": [258, 271], "test_scores_mean": [258, 271], "test_scores_std": [258, 271], "fit_times_mean": 258, "fit_times_std": 258, "fit_time_argsort": 258, "fit_time_sort": 258, "test_scores_mean_sort": 258, "test_scores_std_sort": 258, "742": [258, 272], "class_likelihood_ratio": [259, 954, 1011], "medicin": [259, 688, 954], "medic": [259, 394, 688, 950, 978], "truli": [259, 263, 355, 688, 954], "odd": [259, 397, 491, 688, 954, 1003, 1004], "suppos": [259, 313, 353, 354, 367, 371, 392, 397, 398, 399, 534, 538, 541, 635, 636, 643, 645, 651, 652, 653, 717, 819, 872, 874, 877, 880, 882, 898, 958, 1005, 1007], "physiolog": [259, 363, 987], "hopefulli": [259, 373, 996], "indirect": [259, 378], "bio": 259, "diagnos": [259, 363, 373, 380, 391], "diagnosi": [259, 363, 820], "pos_lr": 259, "neg_lr": 259, "617": [259, 390, 744], "raise_warn": [259, 688, 940], "positive_likelihood_ratio": [259, 688], "negative_likelihood_ratio": [259, 688], "extract_scor": 259, "test_positive_likelihood_ratio": 259, "test_negative_likelihood_ratio": 259, "718894": 259, "724619": 259, "321091": 259, "054054": 259, "dummyclassifi": [259, 529, 954, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006], "108843": 259, "986989": 259, "268147": 259, "034278": 259, "compat": [259, 276, 307, 360, 368, 374, 375, 376, 378, 381, 398, 441, 447, 485, 543, 553, 559, 562, 563, 566, 580, 591, 592, 595, 596, 597, 599, 600, 609, 610, 611, 625, 635, 636, 646, 650, 652, 657, 749, 753, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 817, 818, 838, 846, 847, 884, 885, 888, 919, 951, 954, 957, 959, 974, 975, 978, 991, 996, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "diagnost": [259, 359, 378, 477, 688, 795, 796, 954, 974, 975, 991], "most_frequ": [259, 528, 604, 607, 823, 944, 954, 1004, 1006, 1008], "undefin": [259, 378, 688, 704, 713, 716, 758, 923, 954, 1004, 1008], "373333": 259, "5557": 259, "235430": 259, "stand": [259, 340, 369, 376, 395, 508, 514, 522, 523, 573, 586, 655, 681, 693, 711, 712, 732, 761, 763, 768, 953, 954, 960], "lr_base": 259, "pos_lr_bas": 259, "pos_lr_base_std": 259, "neg_lr_bas": 259, "neg_lr_base_std": 259, "plot_indic": 259, "scoring_on_bootstrap": 259, "n_bootstrap": [259, 997], "results_for_preval": 259, "bootstrap_indic": 259, "default_rng": 259, "2039": 259, "507943": 259, "113516": 259, "207667": 259, "009778": 259, "3419": 259, "445329": 259, "125197": 259, "198280": 259, "008907": 259, "422287": 259, "123864": 259, "192630": 259, "006340": 259, "6196": [259, 1001], "410507": 259, "163975": 259, "193761": 259, "005864": 259, "7578": [259, 1003], "335398": 259, "175224": 259, "189120": 259, "005820": 259, "8963": 259, "198284": 259, "238943": 259, "185496": 259, "005020": 259, "band": [259, 300, 964], "plot_likelihood_ratio": [259, 272], "scorer_nam": [260, 772, 785], "predefin": [260, 784, 943, 957, 984], "return_train_scor": [260, 394, 772, 775, 776, 785, 796, 1002, 1003, 1005], "402": 260, "maskedarrai": [260, 1002], "param_min_samples_split": 260, "sample_score_mean": 260, "sample_score_std": 260, "std_": [260, 1001], "rank_test_": 260, "best_scor": 260, "mean_test_": 260, "plot_multi_metric_evalu": [260, 272], "cawlei": [261, 954], "talbot": 261, "mach": [261, 388, 394, 570, 571], "2079": 261, "2107": 261, "007581": 261, "007833": 261, "num_trial": 261, "x_iri": [261, 988], "y_iri": [261, 988], "p_grid": 261, "non_nested_scor": 261, "nested_scor": 261, "leaveoneout": [261, 394, 984], "leaveonegroupout": [261, 394, 773, 779, 780, 984, 1002], "inner_cv": 261, "outer_cv": 261, "non_nest": 261, "score_differ": 261, "non_nested_scores_lin": 261, "nested_lin": 261, "difference_plot": 261, "plot_nested_cross_validation_iri": [261, 272], "permutation_test_scor": [262, 394, 996, 1003, 1008], "plant": [262, 265, 266, 359, 954, 991], "uncorrel": [262, 362, 505, 511, 518, 987], "n_uncorrelated_featur": 262, "x_rand": 262, "undergo": 262, "score_iri": 262, "perm_scores_iri": 262, "pvalue_iri": 262, "n_permut": [262, 394, 798], "score_rand": 262, "perm_scores_rand": 262, "pvalue_rand": 262, "evid": [262, 338, 373, 390, 394, 395, 397, 621, 770, 953], "ndata": 262, "destroi": [262, 398, 768, 842, 964], "ojala": [262, 394, 798], "garriga": [262, 394, 798], "plot_permutation_tests_for_classif": [262, 272], "t_p": 263, "plu": [263, 363, 370, 656, 804, 807, 955, 968], "f_p": 263, "f_n": 263, "denomin": [263, 398, 453, 567, 680, 732, 948], "stairstep": 263, "ap": [263, 683, 684, 954], "sum_n": [263, 683, 954], "r_n": [263, 683, 954], "p_n": [263, 683, 954], "nth": [263, 683, 954], "r_k": 263, "p_k": [263, 954], "trapezoid": [263, 682, 683, 954], "binar": [263, 265, 266, 358, 360, 389, 391, 729, 808, 837, 838, 840, 844, 846, 856, 954, 956, 980, 991, 1010], "average_precision_scor": [263, 682, 684, 717, 757, 763, 954, 996, 999, 1003, 1004, 1010], "differenti": [263, 397, 400, 536, 537, 596, 599], "mt19937": [263, 268, 1007], "0x7f18bca5b640": 263, "precisionrecalldisplai": [263, 309, 757, 759, 762, 1006, 1009], "got": [263, 349, 370, 528, 626, 642, 1009, 1011], "label_binar": [263, 265, 840, 1000], "average_precis": [263, 677, 683, 717, 954], "setup": [263, 265, 353, 364, 367, 371, 373, 566, 957, 981], "f_score": 263, "get_legend_handles_label": 263, "extens": [263, 265, 281, 353, 360, 361, 364, 368, 369, 373, 374, 376, 384, 395, 473, 480, 511, 716, 903, 911, 951, 953, 954, 973, 974, 978, 996, 1002, 1009, 1010], "plot_precision_recal": [263, 272], "pose": [264, 950, 988], "deem": [264, 265, 511, 962, 1009], "989": 264, "5438059998922521": 264, "014180141790982592": 264, "983": [264, 530, 703], "010712140473466249": 264, "005019159620117897": 264, "043988077397470335": 264, "08221944323108199": 264, "993": 264, "1111111111111111": 264, "2222222222222222": 264, "n_top": 264, "param_dist": [264, 268, 308], "n_iter_search": 264, "801": [264, 272], "plot_randomized_search": [264, 272], "unambigu": [265, 955, 1002], "notion": [265, 339, 355, 376, 395, 397, 950, 954], "scheme": [265, 281, 361, 378, 390, 394, 396, 398, 543, 567, 635, 636, 681, 784, 840, 841, 844, 846, 850, 856, 861, 872, 877, 943, 950, 968, 996, 1004, 1007, 1008], "bulk": [265, 401, 423], "scrutin": 265, "y_onehot_test": 265, "class_id": [265, 266], "class_of_interest": 265, "nvirginica": 265, "versicolor": [265, 266, 481], "tp_c": 265, "fn_c": 265, "fp_c": 265, "tn_c": 265, "briefli": [265, 365, 377, 397, 943, 1006], "nreceiv": 265, "micro_roc_auc_ovr": 265, "mcclish": [265, 763], "deci": 265, "1989": [265, 612, 763, 830, 831, 950, 957], "jul": 265, "fpr_grid": 265, "mean_tpr": [265, 266], "interp": [265, 266, 325], "macro_roc_auc_ovr": 265, "deeppink": 265, "aqua": 265, "role": [265, 353, 365, 369, 376, 395, 972], "pair_list": 265, "pair_scor": 265, "label_a": 265, "label_b": 265, "a_mask": 265, "b_mask": 265, "ab_mask": 265, "a_tru": 265, "b_true": 265, "idx_a": 265, "idx_b": 265, "fpr_a": 265, "tpr_a": 265, "fpr_b": 265, "tpr_b": 265, "macro_roc_auc_ovo": 265, "ovo_tpr": 265, "pool": [265, 376, 424, 612, 923, 975, 1007], "plot_roc": [265, 272], "mean_fpr": 266, "viz": [266, 372], "interp_tpr": 266, "mean_auc": 266, "std_auc": 266, "std_tpr": 266, "tprs_upper": 266, "tprs_lower": 266, "218": [266, 272, 363, 449, 691, 761], "plot_roc_crossv": [266, 272], "halvinggridsearchcv": [267, 268, 308, 555, 776, 943, 1008, 1010, 1011], "1e4": [267, 636, 656, 866, 966], "gsh": 267, "gsh_time": 267, "gs_time": 267, "make_heatmap": 267, "is_sh": 267, "make_cbar": 267, "from_dict": 267, "params_str": [267, 268], "sh": [267, 369, 373, 943], "scores_matrix": 267, "pivot_t": 267, "param_gamma": [267, 772, 785], "param_c": [267, 772], "aggfunc": 267, "0e": [267, 526, 527], "get_xticklabel": 267, "rotation_mod": 267, "cbar_ax": 267, "plot_successive_halving_heatmap": [267, 272], "351": [267, 272], "rsh": [268, 308], "0x7f1893d52040": 268, "_distn_infrastructur": 268, "rv_discrete_frozen": 268, "0x7f1897b9f070": 268, "0x7f18bf93e550": 268, "halvingrandomsearchcvhalvingrandomsearchcv": 268, "drop_dupl": 268, "n_resources_": [268, 775, 776, 943], "nn_candid": 268, "n_candidates_": [268, 775, 776, 943], "n_iterations_": [268, 775, 776], "381": [268, 272], "plot_successive_halving_iter": [268, 272], "n_samples_train": [269, 874, 875, 876, 877, 878], "n_samples_test": [269, 874, 875, 876, 877, 878, 957, 964], "train_error": 269, "test_error": 269, "i_alpha_optim": 269, "alpha_optim": 269, "00026529484644318975": 269, "628": [269, 272, 339], "plot_train_error_vs_test_error": [269, 272], "nonlinear": [270, 309, 621, 665, 666, 670, 673, 839, 950, 951, 959, 964], "true_fun": 270, "polynomial_featur": 270, "plot_underfitting_overfit": [270, 272], "validation_curv": [271, 949, 1003, 1004, 1005, 1008], "subset_mask": 271, "isin": 271, "param_rang": [271, 800, 949], "707": [271, 272, 849, 860], "plot_validation_curv": [271, 272], "auto_examples_model_select": 272, "yeast": 274, "2417": 274, "103": [274, 283, 290, 361, 397, 474, 532, 533, 996], "jaccard": [274, 387, 428, 435, 676, 679, 695, 704, 709, 713, 753, 754, 755, 769, 1004, 1005], "arrang": [274, 609, 804, 805, 806, 807], "presum": [274, 390, 398, 808], "adam": [274, 293, 830, 831, 958, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "kleczewski": [274, 1003, 1004], "classifierchain": [274, 378, 805, 807, 1003, 1008, 1011], "jaccard_scor": [274, 679, 704, 709, 769, 954, 1005, 1008], "40597": 274, "wrapper": [274, 276, 371, 374, 394, 400, 521, 597, 648, 872, 970, 974, 1000, 1008], "base_lr": [274, 804], "y_pred_ovr": 274, "ovr_jaccard_scor": 274, "y_pred_chain": 274, "chain_jaccard_scor": 274, "y_pred_ensembl": 274, "ensemble_jaccard_scor": 274, "x_po": 274, "984": [274, 275], "plot_classifier_chain_yeast": [274, 275], "auto_examples_multioutput": 275, "kneighborstransform": [276, 278, 306, 825, 957, 1006, 1010, 1011], "annoi": [276, 354], "nmslib": 276, "pip": [276, 306, 307, 308, 309, 310, 354, 364, 366, 369, 371, 381, 970], "mnist_2000": 276, "annoytransform": 276, "305": [276, 346, 348, 371], "nmslibtransform": 276, "818": [276, 307, 311], "592": [276, 588, 591, 602, 961], "338": 276, "nearestneighbor": [276, 310, 390, 401, 423, 665, 666, 670, 815, 816, 817, 819, 823, 824, 825, 957, 996, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "364": [276, 449, 450, 997], "mnist_10000": 276, "874": [276, 763, 764, 954], "118": [276, 567], "281": 276, "nullifi": 276, "csr_matrix": [276, 307, 419, 423, 430, 473, 511, 521, 534, 535, 536, 537, 540, 541, 542, 543, 565, 570, 571, 690, 799, 848, 874, 875, 877, 878, 880, 881, 882, 883, 955, 964, 968, 969, 970, 1011], "transformermixin": [276, 367, 378, 443, 1004], "assert_array_almost_equ": 276, "sw": 276, "n_samples_fit_": [276, 815, 816, 817, 819, 821, 823, 824, 825], "cosinesimil": 276, "nmslib_": 276, "adddatapointbatch": 276, "createindex": 276, "n_samples_transform": [276, 817, 825], "knnquerybatch": 276, "num_thread": 276, "annoyindex": 276, "search_k": 276, "annoy_": 276, "add_item": 276, "_transform": 276, "get_n_item": 276, "get_nns_by_item": 276, "include_dist": 276, "get_nns_by_vector": 276, "test_transform": 276, "xt0": 276, "ann": [276, 996, 1008, 1010], "xt1": 276, "nm": [276, 353], "xt2": 276, "run_benchmark": 276, "tsne_param": 276, "barnes_hut": [276, 669, 1003, 1004], "i_ax": 276, "msg": [276, 938], "transformer_nam": 276, "longest": 276, "whitespac": [276, 398], "int32": [276, 366, 378, 422, 425, 427, 429, 431, 874, 875, 876, 877, 878, 921, 969, 1005, 1011], "approximate_nearest_neighbor": [276, 290], "slow": [278, 298, 338, 353, 360, 364, 366, 395, 398, 425, 676, 848, 852, 874, 877, 909, 951, 957, 975, 988, 1003], "temporarydirectori": [278, 306], "n_neighbors_list": 278, "graph_model": 278, "classifier_model": 278, "sklearn_graph_cache_": 278, "tmpdir": [278, 306], "full_model": 278, "classifier__n_neighbor": 278, "grid_model": 278, "mean_fit_tim": [278, 772, 785], "std_fit_tim": [278, 772, 785], "plot_caching_nearest_neighbor": [278, 290], "cmap_light": [279, 284, 287], "cmap_bold": [279, 284, 287], "darkblu": [279, 287], "neighbour": [279, 287, 440, 669, 959], "644": [279, 290], "plot_classif": [279, 290], "79269019073225": 280, "kerneldens": [280, 281, 289, 396, 998, 1004, 1005, 1009, 1010, 1011], "new_data": [280, 367], "4x11": 280, "real_data": 280, "set_clim": 280, "plot_digits_kde_sampl": [280, 290], "block": [281, 298, 310, 361, 363, 366, 370, 373, 378, 387, 390, 393, 396, 430, 431, 440, 451, 457, 465, 466, 488, 490, 672, 922, 957, 959], "wildli": [281, 953], "kd": [281, 390, 396, 957, 1004, 1005, 1006], "jakevdp": [281, 289], "aaaaff": [281, 284], "tophat": [281, 396, 813, 814, 818], "log_den": 281, "x_src": 281, "format_func": 281, "ih": 281, "epanechnikov": [281, 396, 813, 814, 818], "funcformatt": 281, "nullloc": 281, "true_den": 281, "761": [281, 290], "plot_kde_1d": [281, 290], "NOT": [282, 363, 368, 781, 813, 814], "894": [282, 290], "plot_lof_novelty_detect": [282, 290], "x_inlier": 283, "ground_truth": 283, "n_error": 283, "x_score": [283, 459, 460, 461, 462], "radiu": [283, 325, 363, 390, 421, 428, 665, 739, 756, 813, 814, 815, 816, 817, 821, 823, 824, 825, 827, 957, 998, 1000, 1010], "legendhandl": 283, "_size": 283, "plot_lof_outlier_detect": [283, 290], "ffaaaa": 284, "aaffaa": 284, "00ff00": 284, "plot_nca_classif": [284, 290], "neighborhoodcomponentanalysi": 285, "dim_reduction_method": 285, "acc_knn": 285, "x_embed": [285, 286, 669, 673, 822, 957], "ntest": 285, "991": [285, 290, 954], "plot_nca_dim_reduct": [285, 290], "logsumexp": [286, 1003], "class_sep": [286, 492], "link_thickness_i": 286, "diff_embed": 286, "dist_embed": 286, "einsum": 286, "exp_dist_embed": 286, "relate_point": 286, "pt_i": 286, "pt_j": 286, "197": [286, 290, 339, 400], "plot_nca_illustr": [286, 290], "8133333333333334": 287, "nearestcentroid": [287, 338, 955, 957, 996, 1000, 1003, 1008, 1011], "shrink_threshold": [287, 820, 957, 996, 1008], "208": [287, 290, 363], "plot_nearest_centroid": [287, 290], "barycent": [288, 996], "205": [288, 290], "plot_regress": [288, 290], "geospati": [289, 396], "haversin": [289, 396, 676, 737, 739, 1005, 1008], "latitud": [289, 298, 361, 475, 676, 739], "longitud": [289, 298, 361, 475, 676, 739], "xtrain": 289, "ytrain": 289, "radian": [289, 676, 739], "land_mask": 289, "ball_tre": [289, 401, 423, 428, 435, 665, 666, 813, 815, 816, 817, 818, 819, 821, 823, 824, 825, 957, 996], "ocean": 289, "plot_species_kd": [289, 290], "auto_examples_neighbor": 290, "combat": [292, 395], "encourag": [292, 325, 365, 366, 376, 969, 974], "lesser": [292, 378, 421, 518, 950], "curvatur": 292, "complic": [292, 371, 400, 671, 957], "plot_mlp_alpha": [292, 296], "bfg": [293, 587, 588, 625, 626, 635, 646, 649, 651, 657, 664, 957, 958, 1011], "980000": 293, "096950": 293, "momentum": [293, 830, 831, 958], "049530": 293, "nesterov": [293, 830, 831, 958], "049540": 293, "360000": 293, "978444": 293, "860000": 293, "503452": 293, "504185": 293, "045311": 293, "956038": 293, "243802": 293, "992766": 293, "041297": 293, "993879": 293, "042898": 293, "638843": 293, "855465": 293, "912632": 293, "290584": 293, "909293": 293, "318387": 293, "991653": 293, "045934": 293, "840000": 293, "601052": 293, "940000": 293, "157334": 293, "154453": 293, "500000": 293, "692470": 293, "689143": 293, "689751": 293, "150527": 293, "850000": 293, "341523": 293, "336188": 293, "335919": 293, "689015": 293, "830000": 293, "512595": 293, "513034": 293, "930000": 293, "170087": 293, "schedul": [293, 354, 369, 653, 654, 655, 830, 831, 922, 968, 978, 1003], "nesterovs_momentum": [293, 830, 831], "invscal": [293, 653, 654, 655, 830, 831, 968], "plot_arg": 293, "plot_on_dataset": 293, "nlearn": 293, "loss_curve_": [293, 830, 831], "data_set": 293, "get_lin": 293, "plot_mlp_training_curv": [293, 296], "28x28": 294, "throw": [294, 374, 891, 1000, 1003, 1004, 1005, 1006, 1010], "infrastructur": [294, 972, 974, 975], "44139186": 294, "19174891": 294, "13983521": 294, "11378556": 294, "09443967": 294, "07846529": 294, "06506307": 294, "05534985": 294, "986429": 294, "953061": 294, "plot_mnist_filt": [294, 296], "greyscal": 295, "bernoulli": [295, 398, 399, 808, 809, 810, 811, 812, 829, 830, 831, 836, 950, 964, 976, 991, 996], "bernoullirbm": [295, 830, 831, 959, 964, 998, 999, 1008, 1010], "yann": [295, 996, 998], "dauphin": [295, 998], "gabriel": [295, 1004, 1005, 1006, 1009, 1010], "synnaev": 295, "convolv": 295, "minmax_scal": [295, 298, 843, 1001, 1004], "nudge_dataset": 295, "1px": 295, "direction_vector": 295, "apply_along_axi": 295, "feature_rang": [295, 843, 858, 964, 998, 1008], "cg": [295, 635, 636, 649, 651, 664, 950, 1000, 1001, 1003, 1007, 1009, 1010], "rbm": [295, 829, 830, 831, 959], "rbm_features_classifi": 295, "6000": [295, 604], "raw_pixel_classifi": 295, "194": 295, "154": [295, 628, 955], "669": [295, 296], "plot_rbm_logistic_classif": [295, 296], "auto_examples_neural_network": 296, "unscal": [298, 303, 950, 954, 1004, 1010], "notabl": [298, 360, 378, 473, 703, 846, 951, 953, 957, 1000, 1003, 1010], "unterthin": [298, 999, 1000, 1001], "housag": 298, "avebedrm": [298, 361], "bedroom": [298, 361], "features_idx": 298, "quantile_rang": [298, 851, 862, 1002], "yeo": [298, 302, 849, 860, 964, 1004, 1010], "cox": [298, 302, 849, 860, 964, 1004], "plasma": 298, "plasma_r": 298, "create_ax": 298, "bottom_h": 298, "left_h": 298, "rect_scatt": 298, "rect_histx": 298, "rect_histi": 298, "ax_scatt": 298, "ax_histx": 298, "ax_histi": 298, "ax_scatter_zoom": 298, "ax_histx_zoom": 298, "ax_histy_zoom": 298, "rect_colorbar": 298, "ax_colorbar": 298, "plot_distribut": 298, "hist_nbin": 298, "x0_label": 298, "x1_label": 298, "hist_x1": 298, "hist_x0": 298, "aesthet": [298, 970, 1001], "layout": [298, 376, 872, 873, 874, 877, 893, 969, 999, 1001], "ec": [298, 507], "make_plot": 298, "item_idx": 298, "ax_zoom_out": 298, "ax_zoom_in": 298, "zoom_in_percentile_rang": 298, "cutoffs_x0": 298, "cutoffs_x1": 298, "non_outliers_mask": 298, "colorbarbas": 298, "OR": [298, 390, 401, 423, 1007], "indistinguish": 298, "quadrant": 298, "plot_all_sc": [298, 304, 842, 843, 845, 849, 850, 851, 853, 857, 858, 859, 860, 861, 862, 863], "straightforward": [299, 365, 395, 978], "anywher": 299, "qinhanmin2005": 299, "sina": [299, 1009], "rnd": [299, 333], "enc": [299, 301, 310, 846, 847, 964], "x_bin": 299, "line_bin": 299, "plot_discret": [299, 304], "get_nam": 300, "broader": [300, 950], "logisticregression__c": 300, "linearsvc__c": 300, "kbinsdiscretizer__n_bin": 300, "gradientboostingclassifier__learning_r": 300, "svc__c": 300, "cm_piyg": 300, "piyg": 300, "b30065": 300, "178000": 300, "est_idx": 300, "plot_discretization_classif": [300, 304], "centers_0": 301, "centers_1": 301, "x_list": 301, "grid_encod": 301, "stripe": 301, "plot_discretization_strategi": [301, 304], "powertransform": [302, 850, 860, 944, 964, 1004, 1007, 1010], "johnwon": 302, "weibul": 302, "bimod": [302, 396], "ineffect": [302, 964, 1004, 1005], "eric": [302, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ericchang2017": 302, "northwestern": [302, 635], "contact": [302, 376, 974], "font_siz": 302, "304": [302, 363], "bc": 302, "qt": [302, 850], "x_lognorm": [302, 964], "x_chisq": 302, "chisquar": 302, "x_weibul": 302, "x_gaussian": 302, "x_uniform": 302, "loc_a": 302, "loc_b": 302, "105": [302, 316, 319], "x_a": 302, "x_b": 302, "x_bimod": 302, "d81b60": 302, "0188ff": 302, "ffc107": 302, "b7a2ff": 302, "2ec5ac": 302, "figaspect": 302, "axes_idx": 302, "axes_list": 302, "x_trans_bc": 302, "lmbda_bc": 302, "lambdas_": [302, 849, 1009], "x_trans_yj": 302, "lmbda_yj": 302, "x_trans_qt": 302, "ax_origin": 302, "ax_bc": 302, "ax_yj": 302, "ax_qt": 302, "x_tran": [302, 367, 386, 421, 442, 849, 860, 964], "meth_nam": 302, "lmbda": 302, "plot_map_data_to_norm": [302, 304], "involv": [303, 306, 325, 353, 355, 361, 366, 369, 378, 379, 393, 400, 676, 801, 802, 951, 955, 957, 961, 969, 978, 987, 1004], "prime": 303, "meter": 303, "kilo": 303, "kilogram": 303, "alcohol": [303, 363], "malic": [303, 363], "acid": [303, 363], "wherein": [303, 378], "vastli": 303, "76e": 303, "36e": 303, "55e": 303, "31e": 303, "02e": 303, "53e": 303, "12e": 303, "33e": 303, "54e": 303, "43e": 303, "00e": 303, "tyler": [303, 1003, 1009, 1010], "lanigan": [303, 1003], "tylerlanigan": 303, "sebastian": [303, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "raschka": [303, 1001, 1002, 1003, 1004, 1005, 1008], "sebastianraschka": 303, "fig_siz": 303, "unscaled_clf": 303, "std_clf": 303, "pred_test_std": 303, "npredict": 303, "pca_std": 303, "npc": 303, "x_train_transform": [303, 349, 394], "scaled_x_train": 303, "x_train_std_transform": 303, "untouch": 303, "target_class": 303, "plot_scaling_import": [303, 304], "auto_examples_preprocess": 304, "announc": [306, 307, 308, 309, 310, 369, 379], "bug": [306, 307, 308, 309, 310, 356, 364, 367, 368, 369, 370, 373, 376, 378, 972, 975, 996, 997, 998, 1006, 1007, 1008, 1009, 1010, 1011], "latest": [306, 307, 308, 309, 310, 364, 366, 369, 371, 373, 970, 972, 1010], "upgrad": [306, 307, 308, 309, 310, 381, 975, 996, 1001, 1004], "conda": [306, 307, 308, 309, 310, 354, 366, 368, 369, 373, 383, 970], "forg": [306, 307, 308, 309, 310, 354, 368, 369, 373, 381], "plot_roc_curv": [306, 1006, 1008], "plot_precision_recall_curv": [306, 1006, 1008, 1009], "stackingclassifi": [306, 349, 397, 545, 1006, 1007, 1008, 1009, 1010, 1011], "9473684210526315": 306, "radiusneighborstransform": [306, 817, 957, 1006, 1008, 1010, 1011], "sklearn_cache_": 306, "isomap__n_neighbor": 306, "nan_euclidean_dist": [306, 737, 944, 1006], "ccp_alpha": [306, 343, 534, 535, 536, 537, 541, 542, 880, 881, 882, 883, 970, 1006], "tree_": [306, 343, 347, 818, 880, 881, 882, 883], "node_count": [306, 343, 347, 880, 881, 882, 883], "check_estim": [306, 367, 378, 904, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "pytest": [306, 354, 364, 366, 367, 368, 381, 383, 903, 904, 1006, 1009], "decor": [306, 366, 367, 374, 899, 903, 904, 916, 917, 1006, 1009], "estimator_check": [306, 367, 378, 1003, 1004, 1006, 1007, 1010, 1011], "parametrize_with_check": [306, 367, 903, 1006, 1007], "test_sklearn_compatible_estim": [306, 904], "ovo": [306, 763, 801, 874, 877, 954, 955, 969], "preval": [306, 378, 688, 954], "decision_function_shap": [306, 334, 874, 877, 969, 1001, 1002, 1005, 1006], "9846666666666666": 306, "524": [306, 308, 311], "plot_release_highlights_0_22_0": [306, 311], "await": 307, "lam": [307, 308, 1007], "3577618906572577": 307, "42425183539869404": 307, "openmp": [307, 364, 368, 376, 378, 390, 397, 922, 1007, 1009], "thread": [307, 310, 364, 376, 378, 390, 397, 805, 806, 922, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009], "6585602198584783": 307, "10k": [307, 425], "monotoinc": 307, "gbdt_no_cst": 307, "gbdt_cst": 307, "999791942438998": 307, "plot_release_highlights_0_23_0": [307, 311], "art": [308, 371, 626, 669, 974, 978], "footprint": [308, 353, 355, 390, 395, 532, 533, 540, 998, 1001, 1002, 1007, 1008, 1011], "yarowski": [308, 869, 967], "selftrainingclassifi": [308, 316, 317, 318, 967, 1008], "random_unlabeled_point": [308, 867, 868, 869], "self_training_model": [308, 869], "base_estim": [308, 367, 388, 416, 530, 531, 532, 533, 648, 804, 807, 869, 943, 950, 1007, 1009, 1010, 1011], "selftrainingclassifierselftrainingclassifi": 308, "7349": 308, "linear_baselin": 308, "7137": 308, "decisiontreeregressordecisiontreeregressor": 308, "effort": [308, 366, 371, 974, 978, 1007, 1009], "plot_release_highlights_0_24_0": [308, 311], "l2_regular": [309, 397, 538, 539], "max_bin": [309, 310, 397, 538, 539], "typeerror": [309, 370, 687, 896, 938, 1003, 1004, 1007, 1009], "quantileregressor": [309, 950, 1009, 1010, 1011], "min_": [309, 390, 397, 843, 950, 964, 968, 969, 970], "sum_i": [309, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 945, 946, 950, 952, 954, 959], "pb_q": [309, 950], "_1": [309, 392, 395, 398, 508, 514, 515, 517, 522, 523, 524, 623, 624, 629, 630, 631, 632, 633, 637, 638, 639, 640, 658, 659, 660, 661, 741, 950, 952, 954, 969], "get_feature_nam": [309, 1004, 1005, 1007, 1008, 1009], "pet": [309, 763, 954], "dog": [309, 310, 559, 758, 964], "fish": 309, "pet_cat": 309, "pet_dog": 309, "pet_fish": 309, "plot_": [309, 381], "plot_release_highlights_1_0_0": [309, 311], "x_1d": 310, "hist_quantil": 310, "_encod": [310, 1004], "815": 310, "log_reg_input_featur": 310, "gather": [310, 373, 379, 389, 390, 964, 978], "min_frequ": [310, 846, 964, 1010], "max_categori": [310, 846, 964, 1010], "rabbit": [310, 964], "snake": [310, 964], "infrequent_categories_": [310, 846, 964], "x0_cat": [310, 964], "x0_rabbit": [310, 964], "x0_infrequent_sklearn": [310, 964], "refactor": [310, 996, 998, 999, 1000, 1006, 1009, 1010, 1011], "kneighbor": [310, 815, 816, 817, 819, 821, 957, 1000, 1005, 1009, 1010, 1011], "radius_neighbor": [310, 821, 823, 824, 825, 1000, 1005, 1006, 1008, 1009, 1010, 1011], "summari": [310, 349, 363, 376, 669, 689, 885, 952, 955, 974, 989], "pairwise_distances_argmin_min": [310, 754, 999, 1004, 1010, 1011], "radiusneighborsclassifi": [310, 815, 816, 821, 824, 955, 957, 996, 998, 1002, 1004, 1006, 1008, 1009, 1010, 1011], "radiusneighborsregressor": [310, 815, 816, 821, 823, 957, 996, 998, 1004, 1006, 1008, 1009, 1010, 1011], "trustworthi": [310, 1004, 1005, 1010, 1011], "labelpropag": [310, 315, 868, 869, 955, 967, 997, 1002, 1003, 1006, 1007, 1008, 1010, 1011], "labelspread": [310, 313, 314, 315, 317, 318, 867, 869, 955, 967, 997, 1002, 1003, 1006, 1007, 1010, 1011], "blog": [310, 353, 366, 371, 373, 1007], "cython": [310, 353, 354, 364, 366, 368, 374, 376, 381, 383, 386, 390, 397, 485, 964, 965, 968, 969, 974, 975, 996, 999, 1000, 1002, 1008, 1011], "readili": [310, 395, 970, 978], "true_w": 310, "true_h": 310, "x_reconstruct": [310, 459, 460, 461], "00364": 310, "divis": [310, 371, 390, 398, 567, 568, 571, 688, 689, 704, 705, 713, 721, 758, 759, 762, 954, 988, 1000, 1004, 1005, 1008], "repeatedli": [310, 349, 378, 390, 397, 400, 485, 523, 643, 644, 653, 654, 655, 756, 944, 958, 984], "bisect_km": 310, "plot_release_highlights_1_1_0": [310, 311], "auto_examples_release_highlight": 311, "semisupervis": [313, 378], "clai": [313, 314, 315, 318, 996], "woolam": [313, 314, 315, 318, 996], "n_total_sampl": [313, 314], "n_labeled_point": [313, 314], "unlabeled_set": 313, "everyth": [313, 349, 369, 371, 376, 442, 915, 974, 975, 996], "lp_model": [313, 314], "predicted_label": [313, 314], "transduction_": [313, 314, 315, 867, 868, 869], "true_label": [313, 314], "_plot": 313, "0x7f18bdfdfeb0": 313, "pred_entropi": [313, 314], "label_distributions_": [313, 314, 867, 868, 1007], "uncertainty_index": [313, 314], "image_index": [313, 314], "429": [313, 319], "plot_label_propagation_digit": [313, 319], "max_iter": 314, "______________________________________________________________________": 314, "285": [314, 699], "unlabeled_indic": 314, "transduc": 314, "in1d": [314, 1003], "delete_indic": 314, "183": [314, 371, 955, 996], "nfit": 314, "delete_index": 314, "650": [314, 319, 388], "plot_label_propagation_digits_active_learn": [314, 319], "label_spread": 315, "labelspreadinglabelspread": 315, "output_label": 315, "output_label_arrai": 315, "outer_numb": 315, "inner_numb": 315, "plot_label_propagation_structur": [315, 319], "breast_canc": 316, "569": [316, 363, 477, 569, 572, 573, 575], "augment": [316, 607, 854, 978], "oliv": [316, 318, 1004, 1005, 1007, 1008, 1009], "rausch": [316, 318, 1004, 1005, 1008], "rauscho": [316, 318], "ethz": [316, 318], "total_sampl": [316, 513], "base_classifi": [316, 318, 967], "x_valu": 316, "99999": 316, "amount_label": 316, "amount_iter": 316, "self_training_clf": 316, "skfold": 316, "y_test_tru": 316, "labeled_iter_": [316, 869], "return_count": [316, 339, 825], "capsiz": 316, "twinx": 316, "plot_self_training_varying_threshold": [316, 319], "2823": 317, "2117": [317, 339], "908": [317, 954], "426": 317, "782": 317, "1691": [317, 950], "1161": 317, "173": [317, 371, 561], "683": 317, "tfidftransform": [317, 339, 340, 398, 466, 568, 989, 1003, 1004, 1010], "sdg_param": 317, "vectorizer_param": 317, "selftrain": 317, "st_pipelin": 317, "ls_pipelin": 317, "eval_and_print_metr": 317, "y_mask": 317, "x_20": 317, "y_20": 317, "plot_semi_supervised_newsgroup": [317, 319], "y_rand": 318, "y_30": 318, "y_50": 318, "ls30": 318, "ls50": 318, "ls100": 318, "st30": 318, "st50": 318, "rbf_svc": [318, 969], "color_map": 318, "229": [318, 319, 954], "plot_semi_supervised_versus_svm_iri": [318, 319], "116": [319, 996], "auto_examples_semi_supervis": 319, "my_kernel": [321, 969], "plot_custom_kernel": [321, 336], "2x2": [322, 390, 729], "294": [322, 336], "plot_iris_svc": [322, 336], "convention": [323, 378, 868], "support_vector_indic": 323, "plot_linearsvc_support_vector": [323, 336], "493": [324, 336, 620, 872, 947], "plot_oneclass": [324, 336], "midpoint": 325, "blink": 325, "act": [325, 338, 366, 377, 396, 397, 689, 704, 705, 713, 758, 759, 762, 848, 852, 951, 954, 957, 969, 1004], "spuriou": [325, 373, 1009, 1010], "c_rang": 325, "gamma_rang": 325, "midpointnorm": 325, "masked_arrai": [325, 772, 785], "x_2d": 325, "y_2d": 325, "cheat": [325, 958, 968, 998], "c_2d_rang": 325, "gamma_2d_rang": 325, "bright": 325, "brutal": 325, "213": [325, 336], "plot_rbf_paramet": [325, 336], "087": [326, 336], "plot_separating_hyperplan": [326, 336], "plain": [327, 400, 634, 968], "n_samples_1": [327, 969], "n_samples_2": [327, 969], "clusters_std": 327, "wclf": 327, "wdisp": 327, "surface_": [327, 608], "plot_separating_hyperplane_unbalanc": [327, 336], "blown": 328, "score_mean": 328, "score_std": 328, "plot_svm_anova": [328, 336], "fignum": [329, 330], "242": [329, 336, 853, 996], "plot_svm_kernel": [329, 336], "plot_svm_margin": [330, 336], "unreg": 330, "perpendicular": 330, "yy_down": 330, "yy_up": 330, "nusvc": [331, 353, 875, 955, 996, 997, 998, 1001, 1004, 1006, 1007, 1008, 1010], "974": [331, 336], "plot_svm_nonlinear": [331, 336], "svr_rbf": 332, "svr_lin": 332, "svr_poli": 332, "kernel_label": 332, "model_color": 332, "setdiff1d": 332, "297": [332, 336, 361], "plot_svm_regress": [332, 336], "mathcal": [333, 395, 397, 425, 427, 604, 673, 946, 948, 950, 954, 968, 1009], "omega": [333, 393, 948], "clf_set": 333, "grid_c": 333, "985": [333, 336], "plot_svm_scale_c": [333, 336], "break_ti": [334, 874, 877, 969, 1006], "accent": [334, 565, 566, 568, 1006], "233": [334, 336], "plot_svm_tie_break": [334, 336], "emphasi": [335, 393, 874, 875, 876, 877, 878, 961, 974], "subtl": [335, 349, 953, 975], "plot_decision_funct": 335, "sample_weight_last_ten": 335, "sample_weight_const": 335, "clf_no_weight": 335, "clf_weight": 335, "654": [335, 336], "plot_weighted_sampl": [335, 336], "492": [336, 620, 947, 987], "auto_examples_svm": 336, "size_mb": 338, "utf": [338, 340, 398, 464, 480, 559, 565, 566, 568], "load_dataset": 338, "sublinear_tf": [338, 395, 398, 567, 568], "duration_train": 338, "duration_test": 338, "data_train_size_mb": 338, "data_test_size_mb": 338, "2034": [338, 361], "98mb": 338, "1353": 338, "87mb": 338, "487": [338, 699], "164mb": 338, "7831": 338, "313": [338, 987], "158mb": 338, "ridgeclassifi": [338, 353, 649, 650, 652, 950, 955, 1001, 1005, 1009, 1010, 1011], "sparse_cg": [338, 649, 651, 664, 950, 997, 1003, 1005, 1006, 1010], "rarer": [338, 340, 398], "deeper": [338, 970], "plot_feature_effect": 338, "average_feature_effect": 338, "top5": 338, "top_indic": 338, "predictive_word": 338, "bar_siz": 338, "y_loc": 338, "keith": [338, 996, 1001], "atheist": 338, "orbit": [338, 339], "caltech": 338, "expectedli": 338, "pollut": [338, 703, 760, 954, 960], "sender": [338, 361], "livesei": 338, "solntz": 338, "wpd": 338, "sgi": 338, "jon": [338, 1003, 1006, 1007, 1009, 1010], "nntp": [338, 361, 989], "1qlettinn8oi": 338, "cco": 338, "allan": [338, 1008], "schneider": [338, 1009], "me": 338, "instinct": 338, "happi": [338, 376, 789, 790], "listen": 338, "murder": 338, "voluntari": 338, "disregard": [338, 378, 398, 411, 443, 459, 460, 461, 529, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 697, 698, 699, 760, 806, 807, 816, 824, 831, 842, 843, 849, 850, 853, 857, 860, 861, 863, 873, 875, 878, 881, 883, 954, 1004], "beings": 338, "bahavior": 338, "theirs": 338, "mimicri": 338, "imit": 338, "parrot": 338, "polli": 338, "pulchritud": 338, "anim": [338, 398], "kill": 338, "Or": [338, 347, 394, 395, 846, 954, 960, 968], "sigh": 338, "wonder": 338, "bahaviour": 338, "believ": [338, 373, 376, 978], "primat": 338, "arbitarili": 338, "poster": [338, 365, 366, 988], "weren": [338, 847, 1005], "slai": 338, "mate": 338, "ritual": 338, "whatnot": 338, "aren": [338, 361, 369, 381, 389, 701, 731, 959, 1006, 1008], "ye": [338, 373, 378, 840, 856, 950], "child": [338, 347, 354, 376, 378, 390, 397, 421, 534, 535, 536, 537, 538, 539, 541, 542, 543, 880, 881, 882, 883, 922, 1003], "gorilla": 338, "dolphin": 338, "platypu": 338, "writer": 338, "launch": [338, 339, 381, 978], "custom_nam": 338, "clf_descr": 338, "rocchio": [338, 820], "397": [338, 339, 361], "000743": 338, "5316": 338, "0437": 338, "000788": 338, "00118": 338, "136": 338, "0815": 338, "704": 338, "0365": 338, "000799": 338, "752": 338, "0298": 338, "000703": 338, "762": 338, "00347": 338, "00119": 338, "748": [338, 371], "00217": 338, "000537": 338, "training_tim": 338, "txt": [338, 360, 470, 480], "curs": [338, 339, 390, 396, 400, 956, 957, 983, 988], "harm": [338, 367, 398, 768], "029": [338, 339, 341, 962], "plot_document_classification_20newsgroup": [338, 341], "discov": [339, 390, 395, 398, 401, 423, 426, 980, 1011], "metadata": [339, 360, 361, 384, 465, 466, 473, 974, 975, 980], "category_s": 339, "true_k": 339, "3387": 339, "evaluations_std": 339, "fit_and_evalu": 339, "evaluation_std": 339, "score_valu": 339, "std_score": [339, 1009], "reweight": [339, 378, 392, 397, 567, 568, 625, 646, 657], "collis": [339, 340, 398, 559, 566], "x_tfidf": 339, "504": 339, "7929": [339, 1003], "devid": 339, "prod": [339, 598], "phenomenon": [339, 964], "cluster_s": 339, "3384": 339, "1733": 339, "238": 339, "1115": 339, "1417": 339, "599": [339, 657], "1695": 339, "649": 339, "446": [339, 400, 701, 731, 954], "459": [339, 390, 421], "557": 339, "973": [339, 394], "redo": 339, "x_lsa": 339, "explained_vari": [339, 954], "393": 339, "410": 339, "329": [339, 428], "021": 339, "minibatch_kmean": 339, "371": 339, "401": 339, "382": 339, "influenti": [339, 978], "original_space_centroid": 339, "order_centroid": 339, "bibl": 339, "shuttl": 339, "satellit": [339, 957], "sparciti": 339, "lsa_vector": 339, "50_000": 339, "x_hashed_lsa": 339, "390": 339, "439": 339, "016": 339, "328": [339, 705], "030": 339, "345": [339, 363], "055": [339, 363, 954], "358": 339, "df_std": 339, "speak": [339, 353, 366, 968], "safer": [339, 349, 390, 394, 996], "plot_document_clust": [339, 341], "assembl": [340, 833], "18000": [340, 361], "raw_data": 340, "data_size_mb": 340, "3803": 340, "245mb": 340, "anyth": [340, 371, 378, 394, 559, 920, 1010], "unicod": [340, 398, 464, 480, 559, 565, 566, 568, 921, 996, 1004, 1008], "charact": [340, 366, 370, 378, 398, 480, 485, 486, 565, 566, 568, 884, 959, 989, 996, 1009], "underscor": [340, 367, 378, 938, 986, 996, 1006, 1009], "tok": [340, 398], "findal": 340, "token_freq": 340, "dict_count_vector": 340, "47928": 340, "vocabulary_": [340, 398, 558, 565, 568, 989, 996], "19145": 340, "n_nonzero_column": 340, "727": 340, "43873": 340, "inact": [340, 360, 366], "47668": 340, "input_typ": [340, 398, 442, 559], "651": [340, 371], "y_po": 340, "downsid": 340, "featureheash": 340, "implicitli": [340, 374, 397, 574, 609, 610, 852, 944, 946, 961, 964, 969], "token_pattern": [340, 398, 565, 566, 568], "47885": 340, "621": [340, 744], "865": 340, "plot_hashing_vs_dict_vector": [340, 341], "010": [341, 371, 962], "auto_examples_text": 341, "parameter": [343, 400, 591, 592, 599, 600, 770, 771, 950, 951, 959, 964, 970], "weakest": [343, 970], "cost_complexity_pruning_path": [343, 880, 881, 882, 883], "drawstyl": [343, 677], "3272984419327777": 343, "469": [343, 348], "plot_cost_complexity_prun": [343, 348], "ryb": 344, "pairidx": 344, "borderpad": 344, "handletextpad": 344, "plot_iris_dtc": [344, 348], "plot_tre": [344, 347, 970, 1005, 1007, 1008, 1009, 1011], "897": [344, 348], "plot_tree_regress": [345, 348], "regr_3": 346, "y_3": 346, "plot_tree_regression_multioutput": [346, 348], "decision_path": [347, 534, 535, 541, 542, 543, 880, 881, 882, 883, 1002, 1007], "children_left": 347, "children_right": 347, "n_node_sampl": 347, "travers": [347, 957, 961], "n_node": [347, 420, 424, 441, 534, 535, 541, 542, 543, 880, 881, 882, 883, 914], "node_depth": 347, "is_leav": 347, "pop": [347, 376, 887, 984, 1004], "visit": [347, 366, 961], "node_id": [347, 884, 886], "is_split_nod": 347, "children": [347, 390, 397, 420, 424, 441, 543, 1000], "800000011920929": 347, "950000047683716": 347, "node_index": 347, "node_ind": 347, "leaf_id": 347, "sample_id": [347, 361, 474], "threshold_sign": 347, "inequ": [347, 378, 390, 422, 425, 437, 676, 951, 952, 957], "boolean": [347, 361, 366, 367, 374, 391, 397, 398, 399, 442, 538, 539, 558, 559, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 606, 613, 626, 648, 676, 802, 808, 829, 836, 855, 888, 938, 944, 950, 956, 964, 970, 996, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011], "common_nod": 347, "common_node_id": 347, "plot_unveil_tree_structur": [347, 348], "auto_examples_tre": 348, "anti": [349, 583, 808, 956], "x_test_transform": [349, 394], "standard_norm": 349, "unfair": 349, "x_select": 349, "gbc": 349, "x_train_select": 349, "x_test_select": 349, "tip": [349, 352, 356, 366, 368, 385, 398, 511, 518, 622, 669, 950, 976, 990, 991, 994, 999], "mtrand": 349, "_rand": 349, "85418642": 349, "79084103": 349, "13077794": 349, "11915045": 349, "56479934": 349, "70814003": 349, "25291366": 349, "55212743": 349, "18197458": 349, "37845099": 349, "snippet": [349, 366, 370, 373, 376, 386, 397, 398, 399, 944, 964, 977, 1009], "mutat": [349, 1004], "somewhat": [349, 355, 366, 367, 395, 397, 874, 877, 950, 969, 970], "debug": [349, 368, 371, 378, 380, 604, 871, 974, 989, 1004, 1008], "govern": [349, 353, 356, 366, 378, 972, 978], "implic": 349, "rf_123": 349, "rf_inst": 349, "didn": [349, 378, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "strict": [349, 364, 378, 395, 480, 512, 565, 566, 568, 950, 996, 1005, 1008], "pervas": [349, 366], "throughout": [349, 378, 604, 773, 830, 831, 980, 999, 1004], "codebas": [349, 366, 367, 371, 398, 996, 1002], "unlucki": 349, "lucki": 349, "fairer": 349, "temptat": [349, 366], "throughput": [352, 991, 999], "switch": [352, 655, 680, 693, 712, 730, 732, 768, 813, 814, 908, 909, 954, 957, 991, 996], "offlin": [353, 366], "review": [353, 361, 367, 368, 370, 371, 376, 379, 394, 395, 512, 518, 954, 964, 981], "bottleneck": [353, 371, 397, 426, 830, 831], "hurt": [353, 511, 1004], "toolkit": [353, 974, 978], "branch": [353, 364, 366, 368, 369, 390, 397, 421, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 880, 881, 882, 883, 885, 957, 961, 970], "sklearn_assume_finit": 353, "config_context": [353, 386, 603, 870, 1003, 1009], "assume_finit": [353, 446, 870], "assert_all_finit": [353, 374, 446], "csc": [353, 376, 378, 398, 528, 530, 531, 647, 669, 840, 842, 848, 853, 855, 857, 863, 888, 892, 893, 919, 929, 930, 932, 933, 934, 935, 957, 964, 1004, 1005, 1007, 1010], "32bit": [353, 921], "speedup": [353, 395, 397, 627, 631, 634, 996, 997, 998, 999, 1011], "multithread": [353, 390, 872, 873, 874, 875, 876, 877, 878], "bla": [353, 364, 371, 996, 1004, 1005, 1007, 1008], "sparsity_ratio": 353, "gbt": 353, "speedi": 353, "packet": 353, "reuter": [353, 361], "carefulli": [353, 395], "spawn": [353, 376, 772, 785, 794, 795, 796, 1007], "gil": [353, 354, 922, 999, 1004, 1005, 1008, 1009], "ought": 353, "lapack": [353, 364, 509, 512, 518, 665, 1011], "dgemm": 353, "show_vers": [353, 364, 366, 373, 381, 1004], "atla": [353, 364], "rebuild": [353, 384, 398, 421], "openbla": [353, 354, 364, 376, 922, 1009], "mkl": [353, 354, 364, 376, 922, 996], "veclib": [353, 376], "osx": 353, "nouri": [353, 997, 999], "instruct": [353, 366, 367, 368, 369, 370, 373, 376, 377, 480, 565, 566, 568, 980, 989, 996], "ubuntu": [353, 364, 371, 373], "1gb": 353, "mib": [353, 446, 870], "working_memori": [353, 446, 756, 870, 1004], "adher": [353, 367, 378, 903, 904, 996, 997], "pairwise_distances_chunk": [353, 753, 1004, 1007], "facilit": [353, 378, 384, 974, 975, 1002, 1005], "moment": [353, 395, 400, 419, 592, 600, 830, 831, 920, 958, 959], "000024": 353, "027400": 353, "mileag": 353, "deploi": [353, 380, 384, 975, 978], "upstream": [353, 366, 369, 373, 376, 964, 1005], "lighter": [353, 678, 764], "bli": [354, 364, 376], "subsect": [354, 389], "worker": [354, 378, 398, 922], "14228": 354, "loki": [354, 922, 954, 1004, 1007], "duplic": [354, 365, 366, 378, 390, 401, 423, 426, 427, 492, 612, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 797, 844, 940, 957, 996, 999, 1008, 1010], "memmap": [354, 361, 378, 395, 485, 511, 1004], "1mb": [354, 1001], "exclus": [354, 376, 395, 397, 943, 950, 954, 955, 978, 1003, 1007], "omp_num_thread": 354, "my_script": 354, "algebra": [354, 364, 368, 376, 395, 398, 440, 839, 964], "mkl_num_thread": 354, "openblas_num_thread": 354, "blis_num_thread": 354, "pypi": [354, 364, 366, 367, 369, 371, 381, 970, 1004, 1008, 1010, 1011], "channel": [354, 361, 364, 376, 398, 470, 471, 560, 561, 563, 564], "subscript": [354, 922, 1009], "max_thread": [354, 371], "n_cpu": [354, 378], "_num_thread": 354, "skip": [354, 366, 367, 374, 398, 446, 545, 623, 624, 629, 637, 638, 639, 648, 658, 870, 989, 1000, 1003, 1006, 1008, 1010], "fault": [354, 373, 1004, 1006, 1008], "singleton": [354, 779, 895, 1009], "aforement": [354, 955], "global_random_se": 354, "fixtur": [354, 366], "ci": [354, 368, 369, 373, 956, 1002, 1004], "build_numb": 354, "disrupt": 354, "config": [354, 366, 369, 373, 603, 1004], "contributor": [354, 368, 369, 370, 373, 376, 378, 954, 972, 975, 997, 998, 999], "encount": [354, 364, 384, 390, 397, 398, 473, 538, 539, 558, 808, 809, 810, 812, 846, 929, 964, 968, 977, 978, 989, 1004, 1007], "unrel": [354, 370, 373, 398, 492], "watch": [354, 371], "test_your_test_nam": 354, "global_dtyp": 354, "boundscheck": 354, "segfault": [354, 996, 1004, 1009], "drive": [355, 395, 396, 397, 526, 968, 978, 989], "passiveaggressiveregressor": [355, 950, 997, 1000, 1003, 1004, 1007, 1009], "maxabsscal": [355, 837, 857, 944, 964, 1001, 1004, 1005, 1006, 1007], "routin": [355, 360, 363, 366, 367, 368, 373, 376, 378, 399, 649, 651, 664, 676, 874, 875, 876, 877, 878, 951, 957, 964, 965, 968, 974, 978, 996, 1010, 1011], "passiveaggress": [355, 398], "late": 355, "fledg": [355, 398], "naivebay": 355, "dramat": 355, "welcom": [356, 365, 366, 373, 379, 975, 977], "roadmap": [356, 972], "video": [356, 360, 368, 480, 955, 978, 981], "persist": [356, 373, 376, 395, 587, 588, 829, 959, 991, 1002, 1005], "miscellan": [356, 359, 360, 1002, 1003, 1010, 1011], "craft": [356, 368], "curat": [356, 366, 368, 369], "conveni": [358, 373, 376, 391, 394, 398, 400, 405, 422, 425, 427, 429, 431, 442, 466, 588, 653, 655, 676, 703, 760, 832, 833, 928, 944, 946, 950, 951, 961, 978, 989, 996], "commun": [359, 365, 368, 370, 373, 378, 381, 390, 397, 515, 517, 524, 669, 686, 845, 944, 951, 957, 964, 968, 972, 974, 978, 1004, 1005], "fetcher": [359, 1001, 1003], "linnerrud": [359, 991], "breast": [359, 477, 991, 1001], "cancer": [359, 477, 570, 571, 820, 991, 1001], "covertyp": [359, 468, 991], "rcv1": [359, 474, 991, 1001], "kddcup": [359, 469, 991], "svmlight": [359, 464, 485, 486, 974, 991, 996, 997, 1003, 1005], "jpeg": [360, 361, 470, 471], "publish": [360, 361, 367, 369, 373, 378, 966, 975, 1008], "creativ": 360, "spare": [360, 651, 652], "pyplpt": 360, "load_svmlight_fil": [360, 996, 997, 1002, 1003, 1004, 1011], "test_dataset": 360, "everybodi": [360, 366], "upload": [360, 364, 369, 376, 648], "mice": [360, 604, 944], "brain": 360, "miceprotein": 360, "1080": [360, 390], "sc": [360, 390], "clara": [360, 1008], "higuera": 360, "katheleen": 360, "gardin": 360, "krzysztof": 360, "cio": 360, "protein": [360, 974], "cite": [360, 390, 972], "kj": [360, 956], "critic": [360, 366, 377, 384, 397, 669, 951, 954, 962, 969, 978, 1007], "syndrom": 360, "plo": [360, 584, 585], "ONE": [360, 584, 585], "e0129126": 360, "40966": 360, "upload_d": 360, "08t16": 360, "v1": [360, 381, 402, 418, 510, 536, 538, 653, 731, 770, 771, 808, 809, 810, 812, 1008, 1011], "17928620": 360, "file_id": 360, "default_target_attribut": 360, "row_id_attribut": 360, "mouseid": 360, "ignore_attribut": 360, "genotyp": 360, "cc18": 360, "study_135": 360, "study_98": 360, "study_99": 360, "md5_checksum": 360, "3c479a6885bfa0438971388283a1ce32": 360, "websit": [360, 361, 363, 366, 379, 958, 968, 978, 989, 997, 998, 999], "4550": 360, "creator": [360, 363], "17t14": 360, "1804243": 360, "pone": 360, "0129126": 360, "openml100": 360, "study_14": 360, "study_34": 360, "earliest": [360, 951], "earlier": [360, 366, 393, 804, 807, 964, 972, 994, 997, 1009, 1011], "iris_61": 360, "iris_969": 360, "iris_version_3": 360, "vanschoren": [360, 1008], "rijn": [360, 1004], "bischl": 360, "torgo": 360, "acm": [360, 361, 390, 401, 423, 428, 435, 438, 488, 540, 653, 701, 731, 819, 954, 957, 960, 966], "sigkdd": [360, 361, 488, 653, 966], "newslett": 360, "legaci": [360, 369, 378, 922, 996, 1003, 1008], "liac": [360, 366, 473, 1011], "my": [360, 366, 370, 373, 473], "columnar": [360, 442, 974], "usabl": [360, 366, 367, 378, 384, 398, 772, 922, 996, 1003, 1010, 1011], "io": [360, 363, 364, 366, 369, 371, 373, 378, 669, 994], "json": [360, 366, 381], "sql": 360, "smoothli": 360, "manipul": [360, 386, 484, 922, 974, 1002], "mat": [360, 398], "load_fil": [360, 361, 989, 998, 1010], "audio": [360, 480], "wish": [360, 366, 372, 374, 381, 390, 627, 628, 631, 632, 633, 641, 642, 909, 981, 989, 1003], "imageio": 360, "wavfil": 360, "wav": 360, "nomin": [360, 378, 379, 397, 398, 558, 559, 692, 964, 975], "hdf5": 360, "h5py": 360, "pytabl": 360, "april": [361, 641, 662, 663, 1000, 1008], "1992": [361, 363, 394, 397, 544, 545, 622, 950], "1994": [361, 363, 621], "AT": [361, 472], "laboratori": [361, 974], "cambridg": [361, 395, 567, 808, 812, 950, 952, 956], "facial": 361, "upright": 361, "frontal": 361, "movement": 361, "credit": [361, 373, 397, 950, 978], "18846": [361, 465, 466], "20news_hom": 361, "newsgroups_train": 361, "11314": 361, "1073": 361, "20new": [361, 989], "34118": 361, "01327": 361, "newsgroups_test": 361, "vectors_test": 361, "class_prior": [361, 808, 809, 810, 812, 997, 1000], "fit_prior": [361, 808, 809, 810, 812], "88213": 361, "suspici": 361, "show_top10": 361, "top10": 361, "affili": 361, "abund": 361, "clue": [361, 373, 951], "bare": [361, 951, 989], "quotat": 361, "77310": 361, "76995": 361, "cleveland": 361, "indian": 361, "leagu": 361, "team": [361, 368, 369, 376, 378, 972, 974, 978, 996], "ohio": 361, "spark": [361, 975], "death": 361, "floyd": [361, 665, 951], "reckon": 361, "coloni": 361, "owner": [361, 363], "paul": [361, 999, 1002, 1003, 1004, 1005, 1009, 1010], "dolan": 361, "nicknam": 361, "tribe": 361, "theme": [361, 996], "mlb": [361, 844], "inappropri": [361, 394, 400, 685, 792], "nlp": [361, 395, 398, 808, 812, 952, 978], "cultur": 361, "inflammatori": 361, "famou": [361, 363, 969], "internet": [361, 370, 964, 987], "offici": [361, 367, 371, 378, 381, 470, 474, 974, 989, 1004, 1005, 1008], "verif": [361, 954, 978], "identif": [361, 366, 474, 943, 981], "viola": [361, 1004], "opencv": 361, "detector": [361, 378, 819], "5749": [361, 470, 471], "13233": [361, 470, 471], "5828": [361, 470, 471], "200m": 361, "lfw_home": 361, "rectangular": [361, 378, 909, 975], "1140": 361, "fetch_lfw_pair": [361, 1001], "lfw_pairs_train": 361, "subdivid": [361, 400], "10_fold": [361, 470], "gari": [361, 1003], "huang": [361, 635, 1002, 1007], "manu": 361, "ramesh": [361, 978, 999, 1002, 1006], "tamara": 361, "berg": [361, 997, 998, 1008], "erik": [361, 978, 999], "miller": [361, 1004, 1005, 1009], "massachusett": 361, "amherst": 361, "30m": 361, "seven": [361, 947], "homepag": [361, 507, 970], "581012": [361, 468], "newswir": 361, "ltd": [361, 978], "804414": [361, 474], "47236": [361, 474], "fetch_rcv1": [361, 1001, 1005], "v2": [361, 474, 641, 662, 663, 950], "chronolog": [361, 474], "23149": [361, 474, 1010], "781265": [361, 474], "lyrl2004": [361, 474], "2286": 361, "810596": 361, "2287": 361, "2288": 361, "uint32": [361, 474], "gmil": 361, "381327": 361, "ccat": 361, "e11": 361, "ecat": 361, "m11": 361, "656": 361, "lewi": [361, 1003, 1007], "yang": [361, 390, 395, 511, 616, 1002, 1003, 1006, 1008, 1009, 1010], "rose": 361, "361": [361, 397, 532, 533], "cup": [361, 954], "tcpdump": 361, "darpa": 361, "intrus": 361, "mit": [361, 371, 390, 400, 587, 588, 591, 596, 599, 620, 643, 644, 653, 810, 947], "lincoln": 361, "inject": [361, 397], "attack": 361, "unrealist": 361, "logged_in": 361, "resp": [361, 397, 574, 770, 771, 968, 1004], "4898431": [361, 469], "976158": 361, "699691": 361, "619052": 361, "95373": 361, "kddcup99": [361, 469], "richard": [361, 399, 635, 997, 1006, 1008, 1010], "lippmann": 361, "joshua": [361, 998, 999, 1001, 1002, 1008], "hain": 361, "jonathan": [361, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009], "korba": 361, "da": 361, "yamanishi": 361, "takeuchi": 361, "william": [361, 363, 400, 587, 588, 591, 596, 599, 616, 954, 958, 1003, 1004, 1005, 1006], "miln": 361, "discount": [361, 390, 701, 731, 1003, 1006], "sixth": 361, "press": [361, 390, 395, 400, 401, 423, 567, 587, 588, 591, 596, 599, 620, 808, 812, 947, 950, 952, 956], "statlib": 361, "dcc": 361, "ltorgo": 361, "1990": 361, "censu": 361, "bureau": 361, "resid": 361, "surpinsingli": 361, "vacat": 361, "resort": [361, 532, 1006], "pace": 361, "kellei": [361, 998, 999], "ronald": [361, 958, 999, 1009], "barri": [361, 1004], "autoregress": 361, "291": [361, 363], "hyperspher": [362, 974], "interleav": [362, 499], "simplif": [362, 365, 370, 996, 1002], "realiti": 362, "make_sparse_uncorrel": 362, "make_friedman1": [362, 397, 516, 520, 570, 571, 609], "make_friedman2": [362, 588, 590, 591, 592, 593, 594, 598, 601, 602], "reciproc": [362, 954], "make_friedman3": 362, "7826": 363, "4194": 363, "9490": 363, "9565": 363, "fisher": [363, 397, 481, 613, 974], "donor": 363, "michael": [363, 390, 428, 605, 614, 668, 770, 944, 950, 978, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010], "marshal": 363, "arc": [363, 397], "juli": [363, 399, 709, 999, 1003, 1004, 1005], "1988": 363, "sir": 363, "referenc": [363, 367, 368, 373, 378, 864, 865, 957, 1003, 1009], "duda": [363, 948], "hart": [363, 948, 1004], "taxonom": 363, "annual": [363, 390, 701, 731, 869, 954, 967], "eugen": [363, 997, 1002], "179": [363, 371, 397, 996], "1936": 363, "john": [363, 398, 513, 684, 710, 744, 848, 874, 875, 877, 878, 944, 950, 954, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1009], "wilei": [363, 944], "1950": [363, 954], "scene": [363, 957, 959, 1009], "q327": 363, "d83": 363, "son": [363, 944], "isbn": [363, 390, 950], "22361": 363, "dasarathi": 363, "1980": 363, "nose": [363, 999, 1003], "pami": [363, 390, 700], "gate": [363, 1009], "431": 363, "433": 363, "mlc": 363, "cheeseman": 363, "autoclass": 363, "conceptu": [363, 397, 952], "alpaydin": 363, "boun": 363, "nist": [363, 954], "bitmap": 363, "preprint": 363, "32x32": 363, "nonoverlap": 363, "4x4": [363, 395, 398], "garri": 363, "candela": 363, "dimmick": 363, "geist": 363, "grother": 363, "janet": 363, "handprint": 363, "nistir": 363, "5469": 363, "kaynak": 363, "msc": 363, "graduat": 363, "bogazici": 363, "cascad": 363, "kybernetika": 363, "ken": [363, 989, 998, 1005], "tang": [363, 1006, 1007, 1008], "ponnuthurai": 363, "suganthan": 363, "yao": [363, 1002, 1003, 1004, 1005], "kai": [363, 540, 960, 1003], "dimensionalityreduct": 363, "nanyang": 363, "technolog": 363, "claudio": [363, 1010], "gentil": [363, 1008], "linnerud": [363, 482], "men": 363, "club": 363, "waist": 363, "puls": 363, "chin": [363, 1000], "situp": 363, "tenenhau": 363, "pratiqu": 363, "alcalin": 363, "magnesium": 363, "phenol": 363, "nonflavanoid": 363, "proanthocyanin": 363, "od280": 363, "od315": 363, "dilut": 363, "prolin": 363, "class_2": [363, 487], "1680": 363, "746": 363, "315": 363, "chemic": 363, "grown": [363, 397, 534, 535, 541, 542, 880, 881, 882, 883, 970], "itali": 363, "cultiv": 363, "thirteen": 363, "constitu": 363, "forina": 363, "parvu": 363, "pharmaceut": 363, "food": 363, "technologi": [363, 390, 974, 978], "brigata": 363, "salerno": 363, "16147": 363, "genoa": 363, "lichman": 363, "irvin": 363, "ca": [363, 390, 421, 880, 881, 966, 970], "aeberhard": 363, "cooman": 363, "vel": 363, "rep": [363, 974], "dept": 363, "cook": [363, 996, 1002], "north": [363, 390], "queensland": 363, "submit": [363, 364, 365, 367, 368, 369, 370, 373, 378, 379], "technometr": [363, 392, 447, 452, 960], "rda": 363, "1nn": 363, "THE": 363, "OF": 363, "chemometr": 363, "perimet": 363, "textur": [363, 733, 734, 952], "concav": 363, "symmetri": [363, 676, 846, 849, 860, 952], "fractal": 363, "malign": [363, 477], "benign": [363, 477], "981": [363, 954], "143": [363, 449, 450, 966, 996, 997], "2501": 363, "163": [363, 962], "019": [363, 371, 449], "427": [363, 483, 484, 560, 561], "873": 363, "885": 363, "542": 363, "031": 363, "135": 363, "008": [363, 371], "4254": 363, "071": [363, 416], "027": 363, "664": 363, "357": [363, 477, 873], "wolberg": 363, "nick": [363, 996, 1002, 1003, 1004, 1005], "olvi": 363, "mangasarian": 363, "goo": [363, 477], "gl": [363, 477], "u2uwz2": [363, 477], "needl": 363, "aspir": [363, 366], "fna": 363, "nuclei": 363, "multisurfac": 363, "msm": 363, "bennett": [363, 954], "midwest": 363, "cognit": 363, "societi": [363, 390, 392, 447, 452, 518, 604, 849, 860, 950, 968], "insepar": 363, "uw": [363, 1008], "ftp": [363, 659, 660], "wisc": [363, 867], "prog": 363, "cpo": 363, "nuclear": 363, "tumor": 363, "spie": 363, "1993": [363, 452, 641, 662, 663, 970], "symposium": [363, 390, 438], "1905": 363, "861": [363, 763, 764, 954], "san": [363, 398, 966], "jose": [363, 635, 954, 1004, 1006], "prognosi": 363, "577": 363, "august": [363, 390, 488, 511, 969, 996, 998, 999, 1003, 1010], "961": [364, 381, 382, 383, 830], "wheel": [364, 366, 369, 381, 1006, 1008, 1010], "quickest": 364, "git": [364, 367, 369, 373, 977, 992, 996], "fork": [364, 366, 369, 373, 376], "miniforge3": [364, 373], "miniforg": [364, 373, 381], "virtualenv": [364, 366], "venv": [364, 381], "dev0": [364, 369, 977, 992], "pyx": [364, 366, 371, 373], "pxd": [364, 366], "threadpoolctl": [364, 381, 383], "sklearn_fail_no_openmp": 364, "checkout": [364, 366, 369, 373], "cumbersom": 364, "reinstal": [364, 381], "setuptool": 364, "unix": [364, 398], "makefil": 364, "studio": [364, 978], "vs_buildtool": 364, "desktop": 364, "screenshot": 364, "secondli": [364, 366, 376, 390, 397, 634, 950, 989], "architectur": [364, 367, 373, 376, 384, 446, 870, 958, 972, 978, 996], "cmd": 364, "powershel": 364, "struct": [364, 378, 999], "calcsiz": 364, "prompt": [364, 366, 381, 383, 398, 980], "distutils_use_sdk": 364, "x86": 364, "buildtool": 364, "vc": 364, "vcvarsal": 364, "bat": 364, "x64": 364, "clang": 364, "confusingli": 364, "usr": 364, "gcc": [364, 371, 376], "libomp": [364, 1008], "silicon": [364, 972], "m1": [364, 972], "januari": [364, 366, 381, 996, 997, 1006, 1008], "arm64": [364, 366, 368, 381], "llvm": 364, "toolchain": 364, "xcode": 364, "conflict": [364, 366, 373, 381, 1003, 1004], "condarc": 364, "channel_prior": 364, "reactiv": 364, "echo": [364, 369], "cxx": 364, "cflag": 364, "cxxflag": 364, "ldflag": 364, "subfold": [364, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 1009], "fopenmp": 364, "export": [364, 367, 384, 884, 885, 970, 974, 977, 1005], "cppflag": 364, "xpreprocessor": 364, "wl": 364, "rpath": 364, "lomp": 364, "sudo": [364, 381], "apt": [364, 373, 381], "pip3": 364, "pythonx": 364, "precompil": 364, "arm": [364, 373, 943], "cython3": 364, "cento": 364, "yum": 364, "devel": 364, "gnu": 364, "port": [364, 381, 1006], "pkg": 364, "build_ext": [364, 371], "sklearn_build_parallel": 364, "tracker": [365, 368, 373, 376, 379, 972, 975], "prioriti": [365, 609, 801, 802, 975, 999], "guidelin": [365, 368, 370, 371, 373, 389, 390, 397], "reformul": 365, "xyz": 365, "someestim": 365, "glanc": 365, "relabel": [365, 789, 790, 869], "stall": [365, 368], "sprint": [365, 366, 972, 996], "unfinish": [365, 366], "supersed": [365, 1001], "overflow": [365, 373, 376, 999, 1003, 1004, 1005, 1006, 1007, 1009], "submitt": 365, "strive": [365, 379, 978], "expertis": [365, 366, 376], "unclear": [365, 366, 478], "pleasant": [365, 978], "chime": 365, "permiss": [365, 369, 379, 381, 978], "matthew": [365, 370, 513, 718, 996, 999, 1003, 1005, 1009, 1010], "rocklin": [365, 370], "acknowledg": [365, 586], "struggl": 365, "everyon": [366, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "underrepres": 366, "merit": [366, 369, 379], "teach": 366, "priceless": 366, "abid": 366, "codeofconduct": 366, "hesit": 366, "ticket": 366, "typo": [366, 379, 996], "send": [366, 390, 402, 510], "valuabl": [366, 944, 978], "burden": [366, 845, 975], "slep": [366, 378, 972], "templat": [366, 369, 370, 378, 379, 974], "ecosystem": [366, 944, 973, 978], "contrib": [366, 367, 373, 376, 378, 974, 975], "numpydoc": [366, 378, 381, 383], "arff": [366, 473, 1008, 1011], "compli": [366, 378, 903, 975], "fulfil": [366, 390, 397, 772, 775, 776, 785, 833, 837, 950], "anyon": [366, 379, 978], "gist": [366, 373, 977], "repo": [366, 369, 975], "feasibl": [366, 842, 843, 853], "traceback": [366, 370, 373, 376, 446, 954, 977], "doubt": [366, 950, 960, 974], "companion": [366, 964], "transcript": 366, "inclus": [366, 367, 373, 428, 434, 729, 761, 954, 955, 996, 1010], "yourlogin": 366, "flake8": [366, 381, 383, 555], "mypi": [366, 369, 381, 383, 1007], "synchron": [366, 398], "my_featur": 366, "commit": [366, 369, 373, 379, 977, 996, 997, 998, 999], "modified_fil": 366, "committ": [366, 996], "modif": [366, 393, 397, 398, 967], "approv": [366, 379, 397], "mrg": [366, 373], "incomplet": [366, 381, 390, 681, 768, 944, 951, 989, 1000, 1002], "wip": [366, 373, 381], "matur": [366, 974, 975], "broad": [366, 378, 974], "collabor": 366, "_logist": 366, "doctest": [366, 378, 981, 996], "test_logist": [366, 373], "rst": [366, 369, 373, 989, 996, 1001], "test_common": [366, 373], "caught": [366, 373], "editor": [366, 373, 376], "submodul": [366, 369, 371, 389, 946, 952, 996], "intricaci": 366, "narr": [366, 378, 635, 872, 877, 996, 997], "unittest": 366, "tests_for_packag": 366, "static": [366, 367, 371, 373, 623, 624, 629, 630, 637, 638, 639, 640], "workaround": [366, 772, 785], "compliant": 366, "astropi": 366, "linux": [366, 367, 368, 373, 974, 996], "circleci": 366, "lint": [366, 373], "aarch64": [366, 373, 381], "gh": 366, "nogil": 366, "cpython": [366, 1011], "sklearn_run_float32_test": 366, "lengthi": [366, 376], "etiquett": 366, "she": [366, 862, 863, 1006], "he": [366, 701, 731, 830, 831, 862, 863, 954, 989, 1003, 1010], "failur": [366, 369, 373, 892, 893, 977, 978, 1009, 1010], "shorten": [366, 969, 1009], "leader": [366, 978], "grab": 366, "familiar": [366, 396, 1004], "acquaint": 366, "experienc": 366, "abandon": 366, "someon": [366, 378, 996], "glad": 366, "restructuredtext": 366, "_build": 366, "viewabl": 366, "pillow": [366, 381, 383], "sphinxext": [366, 381, 383], "opengraph": [366, 381, 383], "vast": 366, "examples_pattern": 366, "your_regex_goes_her": 366, "no_mathjax": 366, "latexpdf": 366, "elabor": [366, 955], "paragraph": [366, 398, 480, 989], "hood": [366, 950, 969], "colon": 366, "selectfpr": [366, 399, 569, 572, 575, 576, 577, 583], "some_param": 366, "hello": [366, 373, 916], "goodby": 366, "liter": [366, 369, 978], "array_paramet": 366, "list_param": 366, "typed_ndarrai": 366, "multioutput_arrai": 366, "bracket": [366, 950], "delimit": [366, 960], "unwritten": 366, "bibliograph": 366, "arxiv": [366, 440], "backtick": [366, 370], "nowadai": 366, "syntax": [366, 370, 371, 373, 391, 943, 980, 1007, 1009], "_my": 366, "currentmodul": 366, "succeed": 366, "stone": [366, 880, 881, 970], "subdirectori": 366, "subpackag": [366, 369, 972, 1000, 1005], "cleanup": [366, 996], "charg": 366, "test_requiring_mpl_fixtur": 366, "hang": [366, 977, 1006, 1007], "fruit": [366, 955], "asv": 366, "asv_benchmark": 366, "airspe": 366, "veloc": 366, "publicli": [366, 1006], "zero_on": [366, 997], "example_funct": 366, "exampleestim": 366, "_n_cluster": 366, "accordingli": [366, 369, 370, 1003, 1004, 1011], "versionchang": 366, "meet": [366, 376, 379, 399, 549, 580, 830, 831, 869, 954, 967, 978, 1004, 1005, 1006], "nit": 366, "retract": 366, "grammar": 366, "disambigu": [366, 801, 869, 967, 1011], "immedi": [366, 376, 772, 785, 794, 795, 796, 1004], "Will": [366, 474, 511, 604, 621, 622, 623, 625, 629, 633, 634, 637, 638, 639, 640, 641, 642, 646, 650, 652, 657, 683, 690, 763, 838, 842, 846, 853, 999, 1000, 1002, 1004], "clariti": [366, 373], "unhelp": 366, "extran": 366, "rewritten": [366, 626, 998, 1000], "generos": 366, "reward": 366, "heard": 366, "ve": [366, 398, 977, 978, 989, 1003], "enemi": 366, "courtesi": 366, "justifi": [366, 371, 388, 542], "occas": 366, "deserv": [366, 371], "digest": [366, 1011], "overwhelm": 366, "sheer": [366, 978], "myself": 366, "trickiest": 366, "buri": 366, "inherit": [366, 367, 377, 378, 553, 653, 901, 903, 950, 996, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "mixin": [366, 378, 405, 406, 407, 408, 409, 410, 411, 412, 578, 903, 998, 1007, 1011], "classifiermixin": [366, 367, 378, 394, 1007], "grep": 366, "delai": [366, 473, 772, 785, 794, 795, 796, 922, 1010], "some_funct": [366, 899], "some_iter": 366, "flavor": [366, 957], "pointer": [366, 373, 421, 1005], "mandatori": [366, 398], "favorit": [366, 376, 978], "Being": [366, 379, 384, 950, 957], "killer": [366, 978], "blame": [366, 369], "migrat": [366, 996], "ignorerevsfil": 366, "rev": [366, 584, 585], "ruin": 366, "prolifer": 367, "adopt": [367, 378, 868, 954, 968, 1004, 1011], "predomin": [367, 997], "overrid": [367, 398, 428, 435, 519, 525, 565, 566, 568, 570, 571, 574, 633, 641, 662, 663, 815, 816, 817, 819, 821, 823, 824, 825, 996, 1004, 1006, 1010], "creation": [367, 488, 489, 490, 492, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 633, 813, 814, 978, 1003, 1004, 1005, 1009], "optimis": [367, 390, 957, 974, 999, 1009, 1011], "rememb": [367, 370, 381, 398, 957, 961, 970], "param1": [367, 986], "param2": [367, 986], "param3": 367, "postpon": [367, 369], "requisit": 367, "liner": [367, 799], "ipython": [367, 370, 371, 373, 981, 989], "session": [367, 371, 376, 381, 973, 978, 989], "trainabl": 367, "trail": [367, 938], "overridden": [367, 378, 400, 519, 525, 593, 598, 601, 671, 1004, 1005], "n_features_in_": [367, 378, 410, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 604, 605, 606, 607, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 1007, 1009, 1011], "slep010": [367, 1007], "duck": [367, 378, 1006], "boilerpl": [367, 978, 989], "check_x_i": [367, 374, 1000, 1004, 1005, 1010], "check_arrai": [367, 374, 511, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "templateclassifi": 367, "demo_param": 367, "myestim": 367, "subestim": 367, "my_extra_param": 367, "my_estim": [367, 391], "subestimator__c": 367, "subestimator__class_weight": 367, "subestimator__du": 367, "subestimator__fit_intercept": 367, "subestimator__intercept_sc": 367, "subestimator__l1_ratio": 367, "subestimator__max_it": 367, "subestimator__multi_class": 367, "subestimator__n_job": 367, "subestimator__penalti": 367, "subestimator__random_st": 367, "subestimator__solv": 367, "subestimator__tol": 367, "subestimator__verbos": 367, "subestimator__warm_start": 367, "__c": 367, "__class_weight": 367, "unpack": 367, "__repr__": [367, 975, 1005], "setattr": 367, "accomplish": [367, 523, 951, 955, 957, 978], "deepcopi": 367, "_estimator_typ": [367, 378, 1001], "regressormixin": [367, 378, 443, 1007], "clustermixin": 367, "is_classifi": [367, 378], "predict_log_proba": [367, 378, 526, 527, 528, 530, 532, 534, 536, 541, 570, 571, 635, 636, 653, 772, 775, 776, 785, 794, 808, 809, 810, 811, 812, 830, 833, 869, 874, 877, 880, 882, 969, 996, 1009], "_base": 367, "programmat": [367, 476, 1005], "_get_tag": [367, 1007], "allow_nan": [367, 891, 893], "binary_onli": [367, 1006, 1007], "multioutput_onli": 367, "no_valid": 367, "non_determinist": [367, 1010], "primari": [367, 378, 395, 492, 961, 978], "_safe_split": 367, "preserves_dtyp": 367, "poor_scor": 367, "requires_fit": 367, "requires_positive_x": [367, 1006, 1011], "requires_i": [367, 1007], "requires_positive_i": 367, "_skip_test": 367, "_xfail_check": 367, "check_nam": 367, "xfail": [367, 373], "skiptestwarn": 367, "x_type": 367, "2darrai": 367, "signifi": [367, 390, 558, 782, 959], "1dlabel": 367, "2dlabel": 367, "_more_tag": 367, "mymultioutputestim": 367, "_required_paramet": 367, "ridgeregress": 367, "idiosyncrat": 367, "subclass": [367, 400, 551, 1001, 1004, 1009], "onetoonefeaturemixin": [367, 412], "classnameprefixfeaturesoutmixin": [367, 412, 1011], "auto_wrap_output_kei": 367, "mytransform": 367, "__init_subclass__": 367, "ownership": 367, "pep8": [367, 369, 373], "indent": 367, "nsampl": [367, 770, 771], "statement": [367, 370, 373, 376, 378, 395, 972, 989], "flow": 367, "client": 367, "corollari": 367, "foo": [367, 558, 958], "baz": [367, 558], "pyflak": 367, "asanyarrai": 367, "hadamard": 367, "choose_random_sampl": 367, "freestand": 367, "unmodifi": [367, 378], "random_state_": [367, 513, 514, 604, 822, 1010], "gaussiannois": 367, "showcas": 367, "quasi": [367, 830, 831, 950], "assert_allclos": 367, "rtol": [367, 813, 814, 818], "atol": [367, 813, 814, 818], "checklist": 368, "unclaim": 368, "workflow": [368, 369, 377, 394], "boil": [368, 392], "markdown": 368, "saniti": [368, 837, 954, 996, 997], "outdat": 368, "diff": [368, 954], "valgrind": 368, "platform": [368, 376, 378, 384, 978, 1001, 1004, 1005, 1007, 1009, 1010], "x86_64": 368, "yep": 368, "gperftool": 368, "gprof": 368, "callgrind": 368, "kcachegrind": 368, "warm": [368, 378, 508, 514, 520, 522, 523, 587, 636, 643, 645, 653, 654, 655, 950, 975, 1006, 1008, 1010], "restart": [368, 373, 425, 508, 514, 515, 520, 522, 523, 587, 588, 951, 1009], "maco": [368, 381, 1004, 1008, 1010], "homebrew": [368, 381], "freebsd": 368, "cron": 368, "rrrcn": 369, "pep101": 369, "build_tool": 369, "blocker": 369, "mileston": 369, "maint_tool": 369, "sort_whats_new": 369, "whats_miss": 369, "fixm": [369, 378], "recip": [369, 951, 978], "yaml": 369, "feedstock": 369, "whats_new": [369, 373], "v0": [369, 449, 450, 456, 489, 565, 566, 568, 772, 785, 832, 835, 997, 1004, 1005, 1006], "alia": [369, 373, 378, 594, 928, 943, 960, 975, 996, 1010], "freez": [369, 381, 384, 975, 978, 1004], "afterward": [369, 512, 518, 797], "0rc1": 369, "__version__": 369, "changelog": [369, 378], "rebas": 369, "cherri": 369, "shortlog": 369, "f2": [369, 955], "sed": [369, 996], "front": [369, 1003], "rc1": 369, "suffix": [369, 796, 954, 1006], "brows": 369, "3a": 369, "22wheel": 369, "pyproject": 369, "toml": 369, "oldest": [369, 473], "abi": 369, "acronym": 369, "deliveri": 369, "whl": 369, "22publish": 369, "went": [369, 954], "bot": [369, 959, 1010], "sync": 369, "testpypi": 369, "tarbal": [369, 1011], "wheelhouse_upload": 369, "twine": 369, "rrr": 369, "symlink": 369, "latestst": 369, "tmp": 369, "ln": [369, 950, 958, 964], "versionwarn": 369, "secur": [369, 378, 975, 978, 991], "twitter": 369, "linkedin": 369, "squash": [369, 400, 508, 514, 519, 525], "significanli": 369, "authorship": 369, "weekli": 369, "yml": 369, "ui": 369, "enable_hist_gradient_boost": [369, 1005], "permalink": 369, "_hist_gradient_boost": 369, "_iter": 369, "pickl": [369, 378, 384, 398, 565, 566, 568, 813, 814, 975, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010], "checker": [369, 793], "protect": [369, 371], "type_check": 369, "test_enable_hist_gradient_boost": 369, "enable_my_experimental_featur": 369, "indefinit": 369, "incentiv": 369, "workabl": 370, "stackoverflow": [370, 373, 376, 977], "blogpost": 370, "mcve": [370, 373, 376], "my_data": 370, "with_mean": [370, 853, 863, 964, 1004, 1009], "default_scor": 370, "other_scor": 370, "scrollbar": 370, "tripl": 370, "fenc": 370, "qualifi": 370, "a674e682c281": 370, "lda_featur": 370, "lda_model": 370, "n_topic": [370, 513, 1003], "minimalist": [370, 398, 977], "continuous_featur": 370, "positive_featur": 370, "invest": [371, 978], "idiom": 371, "wast": [371, 394, 395, 943], "crunch": 371, "performancetip": 371, "reimplement": [371, 378, 1002, 1006], "spottabl": 371, "amen": [371, 400, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 943], "cpp": 371, "engag": [371, 379], "tent": 371, "somewher": [371, 954, 989], "prun": 371, "magic": [371, 400, 593, 598, 601], "14496": [371, 1005], "682": 371, "ncall": 371, "tottim": 371, "percal": 371, "cumtim": 371, "lineno": 371, "042": 371, "151": [371, 397, 966], "_nls_subproblem": 371, "1263": 371, "157": 371, "_po": 371, "681": 371, "057": 371, "_initialize_nmf": 371, "_spars": 371, "_neg": 371, "337": 371, "461": 371, "spent": [371, 797], "hotspot": 371, "16159": [371, 1007], "2833": 371, "653": [371, 588, 591, 602], "_dotbla": 371, "036": [371, 450], "1397": 371, "2780": 371, "167": [371, 996], "064": [371, 962], "1542": 371, "043": 371, "2734": 371, "fromnumer": 371, "1185": 371, "lapack_lit": 371, "dgesdd": 371, "rewrit": [371, 970, 988, 996], "shallow": [371, 397, 538, 539, 887], "4x": [371, 1011], "line_profil": 371, "wire": [371, 511, 518], "profile_default": 371, "ipython_config": 371, "terminalipythonapp": 371, "interactiveshellapp": 371, "lprun": 371, "qtconsol": 371, "137": [371, 997], "73153": 371, "h_init": 371, "138": [371, 397, 400, 954], "5863": 371, "172": [371, 470, 471, 626, 950], "nl": 371, "175": [371, 964], "112141": 371, "2336": 371, "wtv": 371, "176": [371, 806, 955, 962], "16144": 371, "336": [371, 964], "wtw": 371, "177": 371, "113": [371, 999], "638": 371, "1880": 371, "195133": 371, "grad": [371, 978], "495761": 371, "777": 371, "proj_gradi": 371, "2449": 371, "130": 371, "1474": 371, "4474": 371, "inner_it": 371, "83833": 371, "hn": 371, "194239": 371, "48858": 371, "150407": 371, "gradd": 371, "193": [371, 397, 691, 761, 967], "515390": 371, "349": 371, "dqd": 371, "pin": 371, "memory_profil": [371, 381, 383], "memit": 371, "mprun": 371, "my_func": 371, "1e7": 371, "402344": 371, "adequ": [371, 544, 980, 1009], "standalon": [371, 635, 872, 977], "youtub": 371, "gmvkiq": 371, "gow8": 371, "scipy2009": 371, "paper_1": 371, "paper_2": 371, "_openmp_help": 371, "IF": 371, "sklearn_openmp_parallelism_en": 371, "cimport": [371, 374, 1004], "omp_get_max_thread": 371, "prang": 371, "bianp": 371, "recompil": [371, 381], "dbg": 371, "fortun": [371, 397, 989, 1009, 1010], "my_fil": 371, "callgrin": 371, "prof": 371, "encapsul": [372, 391], "artist": [372, 417, 609, 675, 677, 678, 886], "classmethod": [372, 417, 608, 609, 674, 675, 677, 678], "line_": [372, 417, 675, 677, 678], "gridspecfromsubplotspec": 372, "subplot_spec": 372, "get_subplotspec": 372, "ax_top_left": 372, "ax_top_right": 372, "ax_bottom": 372, "bounding_ax_": [372, 609], "lines_": [372, 609], "contours_": [372, 609], "advic": [373, 400, 599, 600], "forth": 373, "userscript": 373, "tampermonkei": 373, "greasemonkei": 373, "shortcut": [373, 400], "pr_number": 373, "navig": [373, 998], "overlai": [373, 609], "codecov": 373, "test_sparsifi": 373, "pdb": 373, "debugg": 373, "ipdb": [373, 989], "shell": [373, 376, 980, 989], "pdbcl": 373, "terminalpdb": 373, "lf": 373, "ff": 373, "tb": [373, 548, 549, 550, 551, 552, 553, 554], "runxfail": 373, "werror": 373, "mailman": 373, "listinfo": 373, "crowd": [373, 379, 951, 975, 977], "imped": 373, "attent": [373, 584, 585, 968], "pytb": 373, "stdin": [373, 989], "perman": 373, "25163598": 373, "issuenumb": 373, "1506": 373, "volunt": 373, "establish": [373, 376, 379, 944], "clarifi": [373, 379, 766], "regression_test": 373, "0008": 373, "patienc": [373, 378], "manifest": [373, 951, 957], "glibc": 373, "uniniti": 373, "trace": [373, 390, 403, 451, 453, 454, 457, 458, 666, 670, 951, 1007], "supp": 373, "readm": [373, 398, 470], "my_test_script": 373, "mobil": 373, "deploy": [373, 974, 975, 978], "scalewai": 373, "aw": 373, "graviton": 373, "laptop": [373, 446, 870, 1010, 1011], "workstat": 373, "qemu": 373, "docker": [373, 384, 1009, 1010], "multiarch": 373, "ppc64le": 373, "filesystem": [373, 381, 1009], "pushd": 373, "wget": 373, "arm64v8": 373, "mount": 373, "privileg": 373, "pwd": 373, "bash": 373, "reinit": 373, "bashrc": 373, "ephemer": 373, "backport": [374, 1003], "evolv": [374, 1011], "as_float_arrai": 374, "column_or_1d": [374, 1007, 1011], "multitarget": 374, "multi_output": [374, 892], "safe_index": [374, 1006], "check_memori": [374, 378, 1003], "5488135": 374, "71518937": 374, "60276338": 374, "54488318": 374, "has_fit_paramet": 374, "randomized_range_find": [374, 997, 1002], "arrayfunc": 374, "cholesky_delet": 374, "min_po": 374, "least_angl": 374, "fast_logdet": 374, "safe_sparse_dot": [374, 1006], "weighted_mod": 374, "sample_without_replac": [374, 1002], "n_popul": [374, 923], "sparsefunc": [374, 1009], "mean_variance_axi": [374, 1002, 1009], "sparsefuncs_fast": 374, "inplace_csr_row_normalize_l1": 374, "inplace_csr_row_normalize_l2": 374, "inplace_csr_column_scal": 374, "sort_graph_by_row_valu": [374, 1011], "single_source_shortest_path_length": 374, "dijkstra": [374, 665, 951], "graph_shortest_path": [374, 1009], "all_estim": [374, 1006, 1007, 1011], "all_displai": [374, 1011], "all_funct": [374, 1011], "is_multilabel": 374, "dict_learn": [374, 508, 514, 523, 997, 1004, 1006, 1009, 1010], "gen_batch": [374, 913], "safe_mask": 374, "safe_sqr": 374, "unifi": [374, 376, 377, 397, 614, 974, 996], "murmurhash3_32": 374, "murmurhash3_x86_32": [374, 921], "cryptograph": 374, "bloom": [374, 921], "384616559": 374, "3910350737": 374, "murmurhash": 374, "graphical_lasso": [374, 449, 450, 1004], "kit": 376, "toolbox": [376, 974, 978], "multilay": [376, 952], "kera": [376, 974], "forese": 376, "redesign": [376, 996], "pystruct": [376, 974], "ssvm": 376, "seqlearn": 376, "4143": 376, "meanwhil": [376, 969], "pipegraph": 376, "squared_loss": [376, 1009], "undertak": 376, "discourag": [376, 381, 666], "slowli": [376, 378, 521, 909], "ordinarili": [376, 378], "corrobor": 376, "proof": [376, 397, 866, 966], "road": 376, "bridg": [376, 951, 974], "reproduct": [376, 950, 977], "guidanc": [376, 400], "gitter": [376, 972, 1003, 1004], "value_kei": [376, 887], "levenshtein": 376, "dna": [376, 605, 944], "rna": 376, "pain": 376, "suppli": [376, 390, 623, 892, 893, 957, 978, 1000, 1002, 1004, 1009], "leven": 376, "acctcctagaag": 376, "acctactagaagtt": 376, "gaatattaggccga": 376, "lev_metr": 376, "algoritum": 376, "brute": [376, 385, 394, 401, 423, 428, 435, 609, 610, 665, 666, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 961, 991, 1000, 1004, 1008, 1011], "multiprocess": [376, 378, 922, 957, 996, 1004, 1010], "exec": 376, "nvidia": 376, "cuda": [376, 386], "reiniti": 376, "culprit": 376, "posix": 376, "refus": [376, 862, 863], "forkserv": 376, "joblib_start_method": 376, "set_start_method": 376, "dozen": [377, 400], "unsuperv": [377, 393], "newli": [377, 397, 441, 961, 1002, 1003], "leakag": [377, 378, 391, 991], "disclos": 377, "entail": [377, 851, 853, 968], "r_squar": 377, "searchcv": [377, 1011], "tacit": 378, "inconsist": [378, 398, 485, 486, 874, 877, 896, 960, 969, 991, 996, 1001, 1002, 1003, 1004, 1006, 1009], "elsewher": [378, 440, 441, 449, 450, 456], "formal": [378, 379, 390, 397, 813, 814, 951, 954, 955, 958], "thereof": 378, "transduct": [378, 390, 867, 868, 975], "position": 378, "serial": [378, 974, 975, 991, 996, 1004, 1008], "unpickl": [378, 384, 813, 814, 1002, 1008], "inadvert": 378, "pep257": 378, "notat": [378, 391, 395, 398, 567, 688, 950, 954, 980, 1005], "nuanc": 378, "flaw": [378, 397], "terminologi": [378, 1004], "est1": [378, 609], "est2": [378, 609], "exemplifi": 378, "y_proba": [378, 833], "_score": [378, 772, 785, 796, 954, 996, 1009], "_loss": [378, 954], "divers": [378, 397], "abstract": [378, 395, 400, 595, 744, 974, 996], "notfittederror": [378, 822, 938, 1000, 1002, 1005, 1006], "descriptor": [378, 485, 486], "hoc": 378, "spectral_embed": [378, 951, 997, 1000, 1002, 1004, 1006, 1009, 1010, 1011], "maxabs_scal": [378, 842, 1004], "astrai": 378, "readthedoc": 378, "entireti": 378, "shield": 378, "n_output": [378, 397, 407, 411, 412, 416, 421, 424, 443, 447, 459, 460, 461, 508, 509, 511, 513, 514, 516, 519, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 605, 607, 610, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 645, 647, 649, 650, 651, 652, 653, 655, 656, 697, 698, 703, 720, 721, 723, 725, 726, 728, 729, 760, 763, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 822, 823, 824, 829, 830, 831, 832, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 864, 865, 867, 868, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883, 898, 925, 954, 955, 970, 1003, 1006], "synonym": [378, 815, 816, 817, 823, 824, 825], "themat": 378, "alphanumer": [378, 565, 566, 568], "statistician": [378, 853], "prescrib": 378, "baggingclassifi": [378, 397, 533, 882, 999, 1002, 1003, 1004, 1007, 1011], "estimator__max_depth": [378, 943], "improp": [378, 1003], "pairwise_kernel": [378, 400, 430, 620, 740, 839, 952, 996, 1003], "distancemetr": [378, 396, 813, 814, 957, 1004, 1008, 1009, 1010], "di": [378, 390, 395, 508, 514, 641, 662, 663, 865, 1000, 1009], "vectori": [378, 1006], "noun": 378, "rout": [378, 1010], "fit_param": [378, 412, 416, 421, 424, 443, 508, 509, 511, 513, 514, 516, 519, 520, 526, 544, 545, 546, 547, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 605, 607, 612, 615, 616, 617, 618, 619, 772, 775, 776, 785, 794, 795, 796, 797, 798, 800, 805, 806, 807, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 864, 865, 1003, 1006, 1007, 1008, 1010], "venu": [378, 977], "broadli": [378, 390], "consolid": [378, 379, 996], "coo": [378, 530, 531, 669, 840, 888, 892, 893, 957, 997], "lil": [378, 530, 531, 840, 888, 914, 957], "csgraph": [378, 1009], "absent": [378, 398, 729, 794], "densifi": [378, 395, 635, 636, 643, 645, 653, 654, 655, 872, 944, 998], "lossili": 378, "unnorm": [378, 513, 951, 1002, 1003], "encompass": [378, 428, 434, 532, 533, 951], "is_regressor": 378, "get_n_split": [378, 773, 774, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792], "elasticnetcv": [378, 623, 629, 637, 638, 639, 640, 658, 950, 996, 999, 1007, 1009, 1010], "logisticregressioncv": [378, 635, 950, 955, 1000, 1001, 1002, 1004, 1005, 1006, 1010, 1011], "estimatorcv": [378, 975], "loo": [378, 779, 1007], "type_of_target": [378, 840, 955, 1010, 1011], "hashabl": [378, 841, 844, 965], "labelencod": [378, 546, 847, 965, 996, 1004, 1011], "canonic": 378, "xxx": 378, "everywher": 378, "multilabelbinar": [378, 802, 837, 846, 955, 980, 999, 1001, 1002, 1004, 1005], "nonetheless": [378, 954], "amber": 378, "return_cov": [378, 544, 545, 588, 833], "test_idx": 378, "_idx": 378, "label1": 378, "label2": 378, "class_label": [378, 534, 538, 541, 635, 636, 643, 645, 651, 652, 653, 880, 882, 898, 969], "bincount": [378, 394, 534, 538, 541, 635, 636, 643, 645, 651, 652, 653, 872, 874, 877, 880, 882, 897, 898, 1003], "rebalanc": 378, "compute_class_weight": [378, 999, 1010], "check_cv": [378, 1001], "obei": [378, 952], "triangl": [378, 395, 422, 425, 437, 676, 952, 957], "concurr": [378, 398, 1008, 1010], "unset": [378, 1004], "get_scor": [378, 708, 1003], "check_scor": 378, "uppercas": [378, 1009], "unavail": [378, 635, 636, 916, 1003, 1009], "deadlock": 379, "meritocrat": 379, "earn": 379, "concret": [379, 399, 536, 537, 645, 651, 652, 653, 654, 864, 865, 950, 968], "consult": [379, 954], "unanim": 379, "outreach": 379, "brand": [379, 381], "social": [379, 390, 978], "ongo": 379, "emeritu": [379, 972], "recant": 379, "strateg": 379, "entiti": [379, 701, 731], "duti": 379, "resign": 379, "occasion": [379, 702, 1005], "escal": 379, "fallback": [379, 801, 802, 954], "hereaft": 379, "lazi": [379, 398, 968, 1000], "opinion": 379, "veto": 379, "appeal": 379, "insuffici": [380, 953, 988], "greatest": [381, 840, 1004], "afraid": 381, "64bit": [381, 996], "miniconda": 381, "administr": 381, "venvpython": 381, "venvsourc": 381, "activatesourc": 381, "activatesklearn": 381, "activatepip": 381, "learnpip": 381, "learnpip3": 381, "learnconda": 381, "installedpython3": 381, "virtualenvpython3": 381, "installedpython": 381, "virtualenvpython": 381, "installedconda": 381, "environmentpython": 381, "virtual": [381, 394, 978], "dnf": 381, "pacman": 381, "raspberri": 381, "lock": [381, 383, 922], "pypy3": [381, 1004], "v5": [381, 1004], "19137": 381, "py3": 381, "apk": 381, "bind": [381, 996, 1003, 1004], "buster": 381, "fedora30": 381, "pkgsrc": 381, "py39": 381, "daal": 381, "daal4pi": 381, "intelpython": 381, "plugin": 381, "appdata": 381, "usernam": 381, "windowsapp": 381, "environmenterror": 381, "errno": 381, "pythonsoftwarefound": 381, "7_qbz5n2kfra8p0": 381, "localcach": 381, "python37": 381, "292": [381, 397, 710], "data_nam": 381, "australian": 381, "data_vers": 381, "lift": 381, "registri": 381, "regedit": 381, "menu": 381, "hkey_local_machin": 381, "currentcontrolset": 381, "longpathsen": 381, "broken": [381, 394, 576, 577, 612, 696, 888, 954, 999, 1003, 1004, 1005, 1007, 1010], "retrain": [384, 975], "untrust": 384, "malici": 384, "unsupport": [384, 470, 1004, 1009], "inadvis": 384, "immut": 384, "snapshot": [384, 536, 537, 975], "portabl": 384, "alex": [384, 398, 969, 996, 999, 1004, 1006, 1007, 1008, 1010], "gaynor": 384, "exchang": [384, 977], "markup": 384, "pmml": [384, 974], "onnx": [384, 974, 975], "xml": 384, "sklearn2pmml": [384, 974], "affero": 384, "gplv3": 384, "datastructur": [386, 1004, 1008], "namespac": 386, "cupi": 386, "array_api": 386, "gpu": [386, 958, 975, 989], "xp": [386, 393, 848], "x_np": 386, "y_np": 386, "x_cu": 386, "y_cu": 386, "devic": [386, 394, 559], "array_api_dispatch": [386, 446, 870], "_estimator_with_converted_arrai": 386, "transfer": [386, 950, 975], "_array_api": 386, "cupy_to_ndarrai": 386, "_arrai": 386, "lda_np": 386, "submatrix": [387, 405, 429, 431], "unusu": [387, 960, 964, 1004], "submatric": 387, "bipartit": [387, 431, 488, 959], "subgraph": 387, "a_n": 387, "lceil": [387, 960], "log_2": [387, 540, 960], "rceil": [387, 960], "bmatrix": 387, "u_2": 387, "u_": [387, 459, 460, 461], "n_column": [387, 429, 431], "inderjit": [387, 431], "cartesian": [387, 610, 957], "blockwis": [387, 950], "bistochast": [387, 429], "l_": [387, 588, 716, 954], "k_": [387, 400, 593, 596, 598, 601, 749, 964], "u_1": 387, "v_1": 387, "v_2": 387, "v_": [387, 398], "kluger": [387, 429, 490], "yuval": [387, 429], "microarrai": [387, 429, 490, 605, 944], "cap": [387, 390, 730, 954, 1005], "hochreit": [387, 695], "hungarian": [387, 695], "bodenhof": [387, 695], "fabia": [387, 695], "acquisit": [387, 695], "wilk": 388, "f_i": 388, "train_set": 388, "test_set": 388, "disjoint": [388, 390, 391, 416, 680, 706, 730, 732, 951], "platt": [388, 416, 874, 875, 877, 878, 969], "_i": [388, 397, 945, 950, 954, 958, 969], "_j": [388, 945], "f_j": [388, 962], "precipit": 388, "wea": 388, "1990a": 388, "menon": 388, "ak": [388, 1010], "jiang": [388, 1000, 1007], "xj": 388, "vembu": 388, "ohno": 388, "machado": [388, 698], "703": [388, 490], "kull": [388, 954], "silva": [388, 665, 951, 1007, 1009], "filho": 388, "flach": [388, 954], "refurbish": 389, "rough": [389, 960, 982], "uniti": 389, "lipschitz": [389, 966], "usecas": 390, "mu_j": 390, "coher": 390, "elong": 390, "lloyd": [390, 422, 425, 427, 437, 1010, 1011], "distant": [390, 669, 685, 957], "sergei": [390, 998, 1002, 1003, 1004, 1005, 1006], "vassilvitskii": [390, 425, 438], "eighteenth": 390, "siam": [390, 394, 430, 438, 440, 512, 518], "industri": [390, 974], "predetermin": [390, 951], "scullei": 390, "19th": 390, "exemplar": [390, 419, 432, 988], "sent": [390, 802], "leftarrow": [390, 958, 968], "foral": [390, 400, 590], "neq": [390, 954, 956, 964], "notin": 390, "x_j": [390, 400, 591, 592, 596, 599, 600, 602, 945, 946, 950, 957, 969, 970], "dictat": 390, "solvabl": 390, "stella": [390, 430, 440], "yu": [390, 430, 440, 635, 950, 958, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "jianbo": [390, 430, 440, 668], "shi": [390, 430, 440, 668], "anil": [390, 430, 440], "daml": [390, 430, 440], "victor": [390, 430, 440, 1003, 1006], "minden": [390, 430, 440], "lex": [390, 430, 440], "ying": [390, 430, 440, 1010], "adjac": [390, 395, 430, 440, 562, 563, 612, 668, 672, 914, 951, 957, 988], "adjacency_matrix": 390, "ulrik": [390, 430, 440, 668], "von": [390, 430, 440, 668, 974, 1003, 1004], "luxburg": [390, 430, 440, 668], "jitendra": [390, 430, 440, 668], "malik": [390, 430, 440, 668], "walk": [390, 396, 999], "marina": 390, "meila": 390, "ng": [390, 395, 668, 819, 958, 960, 1007], "jordan": [390, 395, 668, 770, 1006, 1007, 1010], "yair": [390, 668], "precondit": [390, 430, 440, 672, 970], "zhuzhunashvili": [390, 440], "forbid": [390, 397], "macroscop": 390, "occupi": [390, 954], "manhattan": [390, 420, 424, 428, 435, 676, 737, 746, 753, 754, 755, 820, 952, 957, 1000, 1005], "bisecting_strategi": [390, 422], "largest_clust": [390, 422], "biggest_inertia": [390, 422], "biggest": [390, 393, 395, 422], "steinbach": 390, "karypi": 390, "vipin": 390, "egin": 390, "minnesota": 390, "june": [390, 951, 1002], "weblog": 390, "abirami": 390, "mayilvahanan": 390, "emerg": [390, 978], "ijet": 390, "jian": 390, "xinyu": 390, "gou": 390, "baod": 390, "hebei": 390, "knee": 390, "triangular": [390, 441, 588, 951], "whichev": [390, 397, 521, 538, 539, 610, 627, 631, 633, 641, 659, 660, 674], "conjunct": [390, 571, 772, 775, 776, 785, 794, 795, 796, 797, 800, 944, 950], "extract_dbscan": 390, "radius_neighbors_graph": [390, 401, 423, 815, 816, 817, 819, 821, 823, 824, 825, 826, 957, 1000, 1005, 1008], "ester": [390, 401, 423], "kriegel": [390, 401, 423, 428, 435, 819, 960], "sander": [390, 401, 423, 428, 435, 819, 960, 1005, 1006], "xu": [390, 393, 401, 423, 968, 1009, 1010], "portland": [390, 401, 423], "aaai": [390, 401, 423, 808, 956], "226": [390, 401, 423], "revisit": [390, 401, 423], "schubert": [390, 401, 423, 428, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010], "tod": [390, 401, 423], "max_ep": [390, 428, 433, 435], "nearbi": [390, 957], "cluster_hierarchy_": [390, 428], "planar": 390, "peripheri": 390, "hdbscan": [390, 974], "wall": 390, "ankerst": [390, 428, 435], "mihael": [390, 428, 435], "marku": [390, 428, 435, 1004, 1006, 1007, 1008], "breunig": [390, 428, 435, 819, 960], "han": [390, 421, 428, 435, 996, 1004, 1005, 1009], "j\u00f6rg": [390, 428, 435, 1004], "sigmod": [390, 428, 435, 819, 960], "cft": 390, "lossi": 390, "cf": [390, 393, 421, 677, 950, 964, 975], "subclust": [390, 421], "enter": [390, 421, 961], "till": [390, 421, 763, 954], "temporarili": [390, 1001], "farthest": 390, "brc": [390, 421], "tian": [390, 421, 1001, 1002, 1003], "raghu": [390, 421], "ramakrishnan": [390, 421], "maron": [390, 421], "livni": [390, 421], "sfu": [390, 421], "coursecentr": [390, 421], "zhang96": [390, 421], "roberto": [390, 421], "perdisci": [390, 421], "jbirch": [390, 421], "java": [390, 421, 974], "satisfi": [390, 627, 631, 676, 693, 711, 712, 813, 814], "labels_pr": [390, 680, 681, 690, 691, 693, 706, 711, 712, 730, 732, 761, 768], "unadjust": [390, 954, 1008], "swap": [390, 395, 692, 711, 933, 934, 996], "ri": [390, 681, 761], "c_2": [390, 951], "unord": [390, 397], "esp": [390, 996], "hubert": [390, 681, 691, 761], "arabi": [390, 681, 691, 761], "steinlei": [390, 681], "psycholog": [390, 681, 692], "agreement": [390, 680, 692, 730, 732, 768, 954], "22504": 390, "10526": 390, "u_i": [390, 459, 460, 461, 730], "v_j": [390, 730, 959], "veb2009": 390, "a_i": 390, "b_j": 390, "yat2016": 390, "average_method": [390, 680, 732, 1004], "vinh": [390, 680], "veb2010": 390, "strehl": 390, "joydeep": 390, "583": [390, 987], "1162": 390, "153244303321897735": 390, "epp": [390, 680], "bailei": [390, 680], "26th": [390, 701, 731, 954], "1553374": 390, "1553511": 390, "9781605585161": 390, "csail": [390, 643, 644, 653, 810], "volume11": 390, "vinh10a": 390, "algesheim": 390, "tesson": 390, "30750": 390, "1038": 390, "srep30750": 390, "rosenberg": [390, 693, 712, 768], "hirschberg": [390, 693, 712, 768], "b2011": 390, "homogeneity_completeness_v_measur": [390, 1005], "n_k": [390, 527], "n_c": [390, 636], "julia": [390, 693, 712, 768], "media": [390, 978], "hila": 390, "becker": [390, 978, 999, 1008], "fowlkes_mallows_scor": [390, 954, 1002, 1004], "fmi": [390, 706], "fp": [390, 688, 694, 706, 757, 758, 759, 762, 954], "fn": [390, 688, 694, 706, 757, 758, 759, 762, 954, 955], "47140": 390, "fowkl": [390, 706], "1983": [390, 706, 853], "tandfonlin": 390, "01621459": 390, "10478008": 390, "kmeans_model": 390, "1987": [390, 584, 585, 765, 766], "calinski_harabasz_scor": [390, 1004], "dispers": [390, 686, 700, 950], "561": 390, "n_e": 390, "mathrm": [390, 392, 395, 399, 950, 970], "b_k": 390, "w_k": [390, 950], "c_q": 390, "n_q": 390, "c_e": 390, "cali\u0144ski": 390, "1974": [390, 398, 686], "dendrit": [390, 686], "davies_bouldin_scor": [390, 1004], "6619": 390, "bould": 390, "c_i": [390, 957], "c_j": [390, 959], "s_i": 390, "diamet": 390, "nonneg": [390, 395, 431, 515, 517, 524, 850], "s_j": 390, "max_": [390, 954], "1979": [390, 700, 744], "halkidi": 390, "batistaki": 390, "yanni": 390, "vazirgianni": 390, "michali": 390, "145": 390, "contingency_matrix": [390, 730, 1004], "pair_confusion_matrix": [390, 1008], "permit": [391, 445, 565, 566, 568, 772, 775, 776, 785, 795, 834, 835, 954, 955, 956, 1002], "clf__c": 391, "pca1": [391, 406], "svm1": 391, "77484909e": 391, "07058917e": 391, "pca2": [391, 406], "svm2": 391, "raw_target_regr": 391, "bypass": [391, 576, 623, 629, 880, 881, 882, 883], "check_invers": [391, 443, 837, 964, 1004, 1010], "caller": [391, 623, 624, 629, 637, 638, 639, 658, 862, 863, 922, 930, 931, 932, 1005], "linear_pca": 391, "make_union": [391, 832, 999, 1003], "incorpor": [391, 397, 953, 974, 978], "unreli": 391, "citi": [391, 398, 444, 989], "london": [391, 398, 444], "sallisaw": [391, 444], "bow": 391, "watson": [391, 974], "moveabl": 391, "feast": 391, "grape": 391, "wrath": 391, "expert_r": 391, "user_r": 391, "city_categori": 391, "title_bow": 391, "city_london": 391, "city_pari": 391, "city_sallisaw": 391, "507": 391, "ignored_new_col": 391, "estimator_html_repr": [391, 1007, 1008, 1009, 1010], "shrunk_covari": 392, "sigma_": [392, 621, 622, 1009], "365": [392, 451], "_k": [392, 948, 950], "glasso": [392, 456], "biostatist": [392, 456], "uncommon": [392, 635, 872, 969], "downweight": [392, 513], "driessen": [392, 447, 452, 960], "fastmcd": [392, 447, 452], "raw_location_": [392, 447, 452], "raw_covariance_": [392, 447, 452], "multidimension": [393, 665, 667, 669, 671, 951, 957], "plsw2a": 393, "u_k": [393, 395], "v_k": [393, 395, 508, 514, 522, 523], "x_k": [393, 395, 948, 957], "y_k": 393, "xi_k": 393, "omega_k": [393, 948], "gamma_k": 393, "delta_k": 393, "deflat": [393, 402, 510], "nipal": [393, 460, 461], "x_rotations_": [393, 459, 460, 461], "y_rotations_": [393, 459, 460, 461], "ty": 393, "x_weights_": [393, 459, 460, 461, 462], "y_weights_": [393, 459, 460, 461, 462], "yv": 393, "tx": 393, "pls1": [393, 461], "pls2": [393, 461], "tx_k": [393, 948], "ty_k": 393, "ja": [393, 1003], "wegelin": 393, "methodolog": [394, 977], "academ": [394, 978], "commerci": [394, 978], "flowchart": [394, 982], "f1_macro": [394, 954, 1000], "custom_cv_2fold": 394, "custom_cv": 394, "9333": 394, "score_tim": [394, 796, 797], "test_": 394, "scorer1_nam": 394, "scorer2_nam": 394, "precision_macro": [394, 984], "recall_macro": [394, 954], "test_precision_macro": 394, "test_recall_macro": 394, "prec_macro": 394, "rec_macro": 394, "test_prec_macro": 394, "test_rec_macro": 394, "train_prec_macro": 394, "train_rec_macro": 394, "undistinguish": 394, "kf": [394, 777], "12883823": 394, "rkf": [394, 786], "weigh": [394, 1003], "caveat": [394, 400], "part3": 394, "spector": 394, "submodel": 394, "kohavi": 394, "jnt": 394, "bharat": [394, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "rao": [394, 1008], "fung": 394, "rosal": 394, "witten": 394, "leavepout": [394, 779, 984], "ss": 394, "gkf": 394, "sgkf": [394, 789], "suboptim": [394, 678, 764, 957, 1004], "leavepgroupsout": [394, 774, 984, 1002], "n_group": [394, 780, 984, 1002], "lpgo": [394, 780], "gss": [394, 774], "withheld": 394, "prohibit": [394, 397, 604, 959, 967, 1003], "predefinedsplit": [394, 984, 1000], "test_fold": [394, 784], "train_indx": 394, "test_indx": 394, "autocorrel": 394, "superset": [394, 792, 954], "surplu": 394, "tscv": [394, 792], "inbuilt": 394, "some_integ": 394, "n_cv": [394, 416], "isotropi": 395, "alik": [395, 952], "halko": [395, 512, 518, 521, 908, 909], "szlam": [395, 908, 909], "disadvantag": [395, 400, 950, 951, 958, 968, 969, 970], "parsimoni": [395, 964], "jen09": 395, "mrl09": 395, "ell_1": [395, 950], "underset": [395, 950, 957, 970], "operatornam": [395, 716, 950, 954, 970], "fro": [395, 515, 517, 524, 670, 950], "gentli": 395, "spirit": 395, "mairal": [395, 508, 514], "bach": [395, 508, 513, 514, 515, 635, 950], "ponc": [395, 508, 514], "sapiro": [395, 508, 514], "jenatton": 395, "obozinski": 395, "scholkopf1997": 395, "bakir2003": 395, "smola": [395, 398, 512, 839, 964, 969], "klau": [395, 512, 839], "berlin": [395, 512, 673, 701, 731, 954], "heidelberg": [395, 512, 673, 701, 731, 954], "eigendecompos": 395, "eigensolv": [395, 430, 440, 512, 521, 672, 951], "eigsh": [395, 512, 1002, 1003], "lehoucq": 395, "sorensen": 395, "lsa": [395, 521, 998], "synonymi": 395, "polysemi": 395, "lsi": 395, "sigma_k": [395, 948], "columnwis": 395, "sublinear": [395, 567, 568], "use_idf": [395, 398, 567, 568, 989], "textual": [395, 970, 1005], "christoph": [395, 400, 509, 587, 588, 591, 596, 599, 770, 950, 955, 997, 1001, 1004, 1007, 1008, 1009, 1010, 1011], "man": [395, 567, 744, 808, 812, 952, 954, 956], "prabhakar": 395, "raghavan": [395, 567, 808, 812, 952, 954, 956], "hinrich": 395, "sch\u00fctze": [395, 567, 952, 954, 956], "transform_method": 395, "split_cod": 395, "dictionarylearn": [395, 514, 516, 517, 519, 520, 521, 522, 523, 997, 1001, 1003, 1006, 1009, 1010], "overcomplet": 395, "mammalian": 395, "cortex": 395, "inpaint": 395, "h_i": [395, 959], "unobserv": 395, "psi": 395, "sim": [395, 987], "wh_i": 395, "ww": 395, "superflu": 395, "psi_1": 395, "psi_2": 395, "psi_n": 395, "superimpos": 395, "plug": [395, 950, 978, 989], "wh": [395, 515, 517, 524], "hoyer": [395, 999], "nndsvd": [395, 515, 517, 524, 1005, 1008], "nndsvdar": [395, 515, 517, 524, 1005], "elementwis": [395, 515, 517, 524], "_featur": [395, 515, 517, 524], "kl": [395, 951, 1004], "itakura": [395, 515, 517, 524, 1003], "saito": [395, 515, 517, 524, 1003], "w_new": 395, "forget_factor": [395, 515], "lee": [395, 996, 997, 1000, 1002, 1003, 1004, 1005, 1007, 1008], "seung": 395, "boutsidi": 395, "gallopoulo": 395, "cichocki": [395, 515, 517, 524], "phan": 395, "fevott": [395, 515, 517, 524], "idier": [395, 515, 517, 524], "lefevr": [395, 515], "corpora": 395, "hoffman": [395, 513, 1001, 1008], "unshad": 395, "beta_k": 395, "eta": [395, 513, 653, 654, 655, 958, 968, 1001], "topic_word_prior": [395, 513], "theta_d": 395, "doc_topic_prior": [395, 513], "z_": 395, "w_": [395, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 950, 954, 956, 959], "beta_": 395, "elbo": 395, "overset": [395, 961], "e_": 395, "blei": [395, 513, 770], "wang": [395, 513, 656, 666, 670, 701, 731, 950, 951, 954, 999, 1001, 1002, 1003, 1004, 1008], "paislei": [395, 513], "kaiser": [395, 509], "talli": 396, "disproportion": 396, "41075698": 396, "41076071": 396, "rho_k": 396, "unsmooth": 396, "scott": [396, 818, 996, 997, 1002, 1004, 1005, 1006, 1011], "silvermann": 396, "propto": [396, 956], "2h": 396, "angular": [396, 669, 739], "contin": [396, 690, 964], "generaliz": 397, "flavour": 397, "b1999": 397, "b1996": 397, "h1998": 397, "lg2012": 397, "bootstrap_featur": [397, 532, 533], "geurt": [397, 532, 533, 534, 535, 542, 543, 882, 883], "346": [397, 478, 532, 533], "b1998": 397, "decoupl": [397, 956], "cancel": [397, 398, 738], "b2001": 397, "bear": [397, 974], "ernst": [397, 534, 535, 542, 543, 882, 883], "wehenkel": [397, 534, 535, 542, 543, 882, 883], "l2014": 397, "lieg": 397, "freund": [397, 530, 531], "fs1995": 397, "w_1": [397, 950, 958], "w_2": [397, 950, 958], "w_n": 397, "w_i": [397, 945, 954], "reappli": 397, "htf": 397, "zzrh2009": 397, "d1997": 397, "semin": 397, "friedman2001": 397, "shelf": 397, "ecologi": 397, "lightgbm": [397, 538, 539, 1005], "nr": 397, "f_m": 397, "h_m": 397, "f_": [397, 612, 954], "l_m": 397, "taylor": [397, 1004, 1006, 1007, 1010], "g_i": [397, 626], "absolute_error": [397, 535, 537, 539, 542, 648, 881, 883, 1009], "sum_m": 397, "softmax": [397, 538, 635, 636, 950, 957, 958], "superior": 397, "ineffici": [397, 422, 551, 801, 802, 957, 959], "r2007": 397, "friedman2002": 397, "1189": 397, "1232": 397, "tremend": 397, "8965": 397, "kown": 397, "grower": [397, 538, 539], "missing": [397, 604, 605, 607, 1005], "comfort": 397, "fisher1958": 397, "loan": [397, 511, 950, 978], "nevertheless": 397, "mayer2022": 397, "depict": [397, 953], "mayer": [397, 1008, 1010], "bourassa": 397, "hoesli": 397, "scognamiglio": 397, "valuat": 397, "tianqi": 397, "guestrin": 397, "ke": [397, 1007, 1008], "boostingdecis": 397, "w2": 397, "w3": 397, "lr__c": 397, "rf__n_estim": 397, "w1992": 397, "knr": 397, "stack_method": [397, 544], "286": 397, "225": 397, "164": 397, "stack_method_": [397, 544, 545], "final_layer_rfr": 397, "final_layer_gbr": 397, "final_lay": 397, "multi_layer_regressor": 397, "wolpert": [397, 544, 545], "241": [397, 544, 545], "temperatur": 398, "dubai": 398, "francisco": [398, 966], "movi": [398, 981], "movie_entri": 398, "thriller": [398, 844], "drama": 398, "000e": 398, "003e": 398, "011e": 398, "974e": 398, "unseen_featur": [398, 558], "speech": [398, 954], "chunker": 398, "pos_window": 398, "pos_vector": 398, "1x6": 398, "part_of_speech": 398, "token_featur": 398, "isupp": 398, "uppercase_initi": 398, "all_uppercas": 398, "raw_x": [398, 559], "pos_tagg": 398, "comprehens": [398, 733, 734, 952, 978, 1004], "murmurhash3": [398, 559, 566, 921], "weinberg": 398, "modulo": [398, 1007], "kilian": 398, "anirban": 398, "dasgupta": [398, 866, 966], "langford": [398, 665, 951], "josh": [398, 1003], "attenberg": 398, "multitask": [398, 955], "punctuat": [398, 565, 566, 568], "diminish": 398, "4x9": 398, "build_analyz": [398, 565, 566, 568, 1006], "interrog": 398, "bigram_vector": 398, "bi": 398, "cool": [398, 996], "feature_index": 398, "him": 398, "constru": 398, "nqy18": 398, "smooth_idf": [398, 567, 568], "_n": [398, 954], "textbook": [398, 567], "6x3": 398, "81940995": 398, "57320793": 398, "47330339": 398, "88089948": 398, "58149261": 398, "81355169": 398, "term1": 398, "term2": 398, "term3": 398, "0986": [398, 837], "819": 398, "8473": 398, "8515": [398, 1003], "5243": 398, "85151335": 398, "52433293": 398, "55422893": 398, "83236428": 398, "63035731": 398, "77630514": 398, "idf_": [398, 567, 568, 1004], "western": 398, "europ": [398, 964], "koi8": 398, "russian": 398, "modern": [398, 446, 480, 567, 667, 671, 705, 870, 951, 975], "unicodedecodeerror": [398, 565, 566, 568], "told": 398, "silent": [398, 558, 829, 964, 1001, 1002, 1004, 1005, 1009, 1010], "chardet": 398, "chardetect": 398, "damag": 398, "sloppili": 398, "ftfy": 398, "mish": 398, "mash": 398, "text1": 398, "sei": 398, "mir": 398, "gegr": 398, "xc3": 398, "xbc": 398, "x9ft": 398, "mein": 398, "sauerkraut": 398, "text2": 398, "holdselig": 398, "sind": 398, "dein": 398, "ger": 398, "xfcche": 398, "text3": 398, "xff": 398, "xfea": 398, "x00u": 398, "x00f": 398, "x00": 398, "x00l": 398, "xfc": 398, "x00g": 398, "x00e": 398, "x00n": 398, "x00d": 398, "x00a": 398, "x00h": 398, "x00r": 398, "x00z": 398, "x00i": 398, "x00b": 398, "x00c": 398, "x00t": 398, "x00o": 398, "spolski": 398, "nnmf": [398, 990, 991, 996], "phrase": 398, "misspel": 398, "rescu": 398, "resili": 398, "wprd": 398, "ngram_vector": 398, "char_wb": [398, 565, 566, 568], "rd": 398, "wo": 398, "wp": [398, 634, 648], "char": [398, 565, 566, 568, 996], "jumpi": 398, "fox": 398, "1x4": 398, "umpi": 398, "1x5": 398, "mpy": 398, "fo": 398, "barrier": 398, "hv": 398, "4x10": 398, "discrep": [398, 989, 1000], "4x1048576": 398, "collid": 398, "ingest": 398, "spend": 398, "my_token": 398, "lowercas": [398, 406, 421, 422, 424, 425, 427, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 565, 566, 568, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 834, 839, 864, 865, 1009], "lucen": 398, "build_preprocessor": [398, 565, 566, 568, 1006], "fanci": 398, "lemmat": 398, "nltk": [398, 973, 974], "word_token": 398, "wordnetlemmat": 398, "lemmatoken": 398, "wnl": 398, "british": 398, "spell": 398, "to_british": 398, "1or": 398, "bt": 398, "1er": 398, "ing": 398, "ation": 398, "1z": 398, "ogu": 398, "og": 398, "customvector": 398, "asian": 398, "one_imag": [398, 561], "fake": 398, "assert_array_equ": 398, "patchextractor": 398, "five_imag": 398, "variancethreshold": [399, 838, 944, 999, 1006, 1009], "sel": 399, "selectfdr": [399, 569, 573, 575, 576, 577, 583, 1000, 1002, 1003], "selectfw": [399, 569, 572, 573, 576, 577, 583], "genericunivariateselect": [399, 572, 573, 575, 576, 577, 579, 1010], "r_regress": [399, 583, 1009, 1010], "mutual_info_classif": [399, 569, 572, 573, 576, 577, 1002, 1008], "nonparametr": [399, 584, 585], "bewar": 399, "importance_gett": [399, 570, 571, 574, 1008], "unimport": 399, "lsvc": 399, "baraniuk": 399, "isr": 399, "ist": 399, "utl": 399, "aguiar": 399, "cs_note": 399, "ferri": [399, 954], "versatil": [400, 969, 978], "optima": 400, "markov": [400, 588, 959, 974, 996], "maxima": 400, "ppmv": 400, "957": [400, 703, 954], "0336": 400, "4ppm": 400, "27ppm": 400, "197ppm": 400, "nuisanc": 400, "logit": [400, 635, 636, 950], "one_vs_on": [400, 587, 955], "ingredi": 400, "duv2014": 400, "theta_l": 400, "x_bound": [400, 594], "operand": 400, "k1__": 400, "k2__": 400, "constant_valu": [400, 590, 594], "constant_value_bound": [400, 588, 590, 594], "k1__k1__constant_valu": 400, "value_typ": [400, 594], "n_element": [400, 594], "k2__length_scal": 400, "k1": [400, 598, 601], "k1__k1": 400, "k1__k1__constant_value_bound": 400, "k1__k2": 400, "k1__k2__length_scale_bound": 400, "k2": [400, 598, 601], "k2__length_scale_bound": 400, "69314718": [400, 589, 964], "30258509": 400, "interoper": [400, 972, 975, 991], "pairwisekernel": 400, "_valu": [400, 590], "_level": [400, 602], "k_1": [400, 598, 601], "k_2": [400, 598, 601], "__add__": [400, 601], "__mul___": 400, "__pow__": [400, 593], "2l": [400, 599], "bigg": [400, 596], "bessel": [400, 596], "rightarrow": [400, 596, 958], "quad": [400, 957, 968], "tfrac": 400, "3l": 400, "pp84": 400, "x_d": [400, 591], "inhomogen": [400, 591], "expon": [400, 593, 653, 654, 655, 783, 830, 831, 848, 943], "carl": [400, 587, 588, 591, 596, 599], "rasmussen": [400, 587, 588, 591, 596, 599], "duvenaud": [400, 599, 600], "cookbook": [400, 599, 600], "minkowski": [401, 423, 428, 435, 665, 676, 753, 754, 755, 813, 814, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 957, 996, 999, 1010, 1011], "metric_param": [401, 423, 428, 435, 665, 669, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 827, 1000, 1003, 1010], "leaf_siz": [401, 423, 428, 435, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825], "kd_tree": [401, 423, 428, 435, 665, 666, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 957, 1009], "balltre": [401, 423, 428, 435, 665, 666, 676, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 827, 951, 996, 998, 1000, 1004, 1009], "ckdtree": [401, 423, 998], "inhibit": [401, 423], "core_sampl": 401, "n_core_sampl": [401, 423], "attract": [401, 423, 948, 957, 974], "fun": [402, 510, 978], "logcosh": [402, 510], "fun_arg": [402, 510], "w_init": [402, 510], "whiten_solv": [402, 510, 1011], "return_x_mean": 402, "compute_sourc": 402, "return_n_it": [402, 432, 437, 456, 522, 523, 623, 624, 629, 630, 637, 638, 639, 640, 658, 659, 660, 661, 662, 663, 664, 671, 1010], "cube": [402, 510], "my_g": [402, 510], "x_mean": 402, "AS": 402, "fortran": [402, 518, 623, 624, 629, 630, 637, 638, 639, 640, 642, 658, 661, 662, 663, 892, 893, 996, 999, 1000, 1004], "hyvarinen": [402, 510], "oja": [402, 510], "shrunk_cov": [403, 457, 458], "subobject": [404, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 770, 771, 772, 775, 776, 785, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883], "row_ind": [405, 429, 431], "intp": [405, 429, 431], "col_ind": [405, 429, 431], "get_submatrix": [405, 429, 431], "pca0": 406, "_n_features_out": 406, "class_name0": [406, 421, 422, 424, 425, 427, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 839, 864, 865], "class_name1": [406, 421, 422, 424, 425, 427, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 839, 864, 865], "class_name2": [406, 421, 422, 424, 425, 427, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 839, 864, 865], "feature_names_out": [406, 410, 421, 422, 424, 425, 427, 442, 459, 460, 461, 462, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 543, 544, 545, 546, 547, 558, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 604, 605, 606, 607, 612, 615, 616, 617, 618, 619, 665, 666, 817, 822, 825, 829, 832, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 864, 865, 1010], "harsh": [407, 416, 447, 526, 527, 528, 530, 532, 534, 536, 538, 541, 544, 546, 587, 635, 643, 645, 651, 652, 653, 801, 802, 803, 804, 808, 809, 810, 811, 812, 815, 820, 823, 830, 867, 868, 872, 874, 877, 880, 882, 1006, 1008, 1011], "wrt": [407, 411, 416, 443, 459, 460, 461, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 544, 545, 546, 547, 587, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 649, 650, 651, 652, 653, 655, 656, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 823, 824, 830, 831, 867, 868, 872, 873, 874, 875, 877, 878, 880, 881, 882, 883], "n_samples_fit": [411, 443, 459, 460, 461, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 665, 806, 807, 815, 816, 817, 819, 821, 823, 824, 825, 831, 873, 875, 878, 881, 883], "uniform_averag": [411, 443, 459, 460, 461, 531, 533, 535, 537, 539, 542, 545, 547, 588, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 647, 649, 650, 655, 656, 697, 698, 703, 720, 721, 723, 725, 726, 728, 760, 806, 807, 816, 824, 831, 873, 875, 878, 881, 883, 954, 1005], "n_features_new": [412, 421, 424, 508, 509, 511, 513, 514, 516, 519, 520, 526, 544, 545, 546, 547, 559, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 605, 607, 612, 615, 616, 617, 618, 619, 822, 829, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 864, 865], "base_clf": 416, "calibrated_clf": 416, "072": [416, 625], "927": 416, "x_calib": 416, "y_calib": 416, "936": [416, 954], "prob_tru": [417, 418], "prob_pr": [417, 418], "ref_lin": 417, "alexandru": 418, "22nd": 418, "convergence_it": [419, 432], "hardcod": [419, 432, 1004], "affinity_matrix_": [419, 430, 668], "cluster_center_indic": [419, 432], "compute_full_tre": [420, 424, 1000], "compute_dist": [420, 424, 1008], "inferior": [420, 424, 961, 1007], "n_leaves_": [420, 424], "n_connected_components_": [420, 424, 1005], "branching_factor": 421, "compute_label": [421, 427], "promot": [421, 684, 974, 1007, 1009], "redistribut": 421, "overwritten": [421, 509, 510, 511, 513, 518, 525, 584, 585, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 649, 651, 656, 658, 659, 660, 661, 663, 922, 924, 1009], "root_": 421, "_cfnode": 421, "cftree": 421, "dummy_leaf_": 421, "subcluster_labels_": 421, "scratch": [421, 954, 998], "centroids_": [421, 820], "copy_x": [422, 425, 437, 512, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 649, 651, 656, 658, 659, 660, 661, 662, 998, 1004, 1005], "smart": [422, 437, 438, 567], "k_init": [422, 437], "sse": 422, "bisect_mean": 422, "pooling_func": [424, 1004], "xred": 424, "socg2006": 425, "min_bin_freq": [426, 439], "cluster_al": [426, 439], "get_bin_se": 426, "orphan": [426, 439, 996], "reassignment_ratio": 427, "eec": [427, 618], "tuft": 427, "dscullei": 427, "fastkmean": 427, "97727273": 427, "43181818": 427, "cluster_method": 428, "predecessor_correct": [428, 434], "unprocess": [428, 565, 566, 568], "heap": 428, "braycurti": [428, 435, 676, 753, 754, 755], "canberra": [428, 435, 676, 753, 754, 755], "chebyshev": [428, 435, 676, 753, 754, 755, 957], "dice": [428, 435, 676, 753, 754, 755], "kulsinski": [428, 435, 676, 753, 754, 755], "rogerstanimoto": [428, 435, 676, 753, 754, 755], "russellrao": [428, 435, 676, 753, 754, 755], "seuclidean": [428, 435, 676, 753, 754, 755, 820, 1004, 1007, 1008], "sokalmichen": [428, 435, 676, 753, 754, 755], "sokalsneath": [428, 435, 676, 753, 754, 755], "yule": [428, 435, 753, 754, 755], "manhattan_dist": [428, 435, 665, 737, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 996, 1006, 1011], "minkowski_dist": [428, 435, 665, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827], "l_p": [428, 435, 665, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827], "upward": [428, 434], "successor": [428, 434, 970, 974], "predecessor": [428, 434, 435], "kdtree": [428, 435, 665, 666, 813, 815, 816, 817, 818, 819, 821, 823, 824, 825, 998, 1000, 1004, 1008, 1009], "predecessor_": [428, 435], "erich": [428, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010], "gertz": 428, "lernen": 428, "wissen": 428, "daten": [428, 1004, 1005], "analysen": 428, "lwda": 428, "318": 428, "n_best": 429, "n_svd_vec": [429, 431], "mini_batch": [429, 431], "n_row_clust": [429, 431, 490], "n_column_clust": [429, 431, 490], "ncv": [429, 431], "n_oversampl": [429, 431, 518, 521, 909, 1010], "kernel_param": [430, 512, 616, 620], "precomputed_nearest_neighbor": [430, 668], "eigendecomposit": [430, 440, 650, 668, 672, 839], "dist_matrix": 430, "517": [430, 440, 987], "541": [430, 440], "csc_matrix": [430, 534, 535, 540, 541, 542, 543, 850, 880, 881, 882, 883, 944, 964, 970, 1001], "best_n_it": 437, "n_local_tri": 438, "n_seed": 439, "multigrid": 440, "multiscal": 440, "preliminari": 440, "heapq": 441, "topolog": [441, 974], "n_connected_compon": 441, "n_leav": [441, 880, 881, 882, 883], "sparse_threshold": [442, 445, 1004], "untransform": [442, 445, 965], "transformers_": 442, "fitted_transform": 442, "remaining_column": 442, "named_transformers_": 442, "sparse_output_": [442, 528], "output_indices_": [442, 1009], "datatyp": [442, 444, 1003, 1006], "norm1": 442, "norm2": 442, "text_preprocess": 442, "num_preprocess": 442, "x_t": [442, 604, 832], "sum_n_compon": [442, 832], "transformer_": 443, "predict_param": [443, 544, 545, 833, 1009], "y_hat": 443, "90453403": 444, "50755672": 444, "30151134": 444, "print_changed_onli": [446, 870, 1005, 1007, 1008], "pairwise_dist_chunk_s": [446, 870], "enable_cython_pairwise_dist": [446, 870], "cache_s": [446, 870, 874, 875, 876, 877, 878, 969], "get_config": [446, 756, 870], "offset_": [447, 540, 654, 819, 876, 1004], "raw_support_": [447, 452], "dist_": [447, 452], "true_cov": [447, 449, 450], "7411": [447, 452, 1002], "2535": [447, 452], "3053": [447, 452], "0813": [447, 452], "0427": [447, 452], "correct_covari": [447, 452], "rvd": [447, 452], "covariance_correct": [447, 452], "comp_cov": [447, 448, 449, 450, 451, 452, 453, 454], "get_precis": [447, 448, 449, 450, 451, 452, 453, 454, 509, 511, 518], "is_inli": [447, 540, 819], "reweight_covari": [447, 452], "rvdriessen": [447, 452], "location_reweight": [447, 452], "covariance_reweight": [447, 452], "support_reweight": [447, 452], "negative_mahal_dist": 447, "7569": 448, "2818": 448, "3928": 448, "0622": [448, 454], "0193": [448, 454], "enet_tol": [449, 450, 456, 1001], "graphlasso": [449, 1001, 1004], "049": 449, "034": 449, "093": [449, 1001], "n_refin": 450, "graphlassocv": [450, 998, 1004], "dualiti": [450, 950], "block_siz": [451, 457, 1000], "4406": 451, "1616": 451, "0595": 451, "0075": [451, 518], "rouseeuw1984": 452, "butlerdavi": 452, "butler": [452, 999, 1007, 1008], "davi": [452, 700, 954, 1000], "jhun": 452, "1385": 452, "7533": [453, 1003], "2763": 453, "3964": 453, "7833": 453, "2431": 453, "3889": 453, "0195": 453, "7387": 454, "2536": 454, "4110": 454, "cov_init": 456, "return_cost": 456, "220446049250313e": [456, 627, 628, 631, 632, 633, 659, 660], "graph_lasso": [456, 1004], "flase": 456, "dual_gap": [456, 623, 624, 629, 630, 637, 638, 639, 640, 658, 661], "x_loadings_": [459, 460, 461], "y_loadings_": [459, 460, 461], "plssvd": [459, 460, 976, 991, 1008, 1010], "x_c": [459, 460, 462, 961], "y_c": [459, 460, 462], "y_reconstruct": [459, 460, 461], "x_scores_": [461, 1008], "y_scores_": [461, 1008], "y_transform": 462, "data_hom": [463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 1003], "sklearn_learn_data": [463, 476], "zero_bas": [464, 485, 486], "query_id": [464, 485, 486], "grok": 464, "qid": [464, 485, 486, 997, 1002], "download_if_miss": [465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 1003], "ioerror": [465, 466, 467, 468, 469, 470, 471, 472, 474, 475], "stopword": [466, 989], "target_column": [466, 467, 473], "versionad": [469, 544, 545, 546, 547], "percent": [469, 577, 967], "494021": 469, "slice_": [470, 471], "195": [470, 471], "unrestrict": 470, "2914": 471, "5748": 471, "n_retri": [473, 1010], "timeout": [473, 1010], "412": [473, 950], "silenc": 473, "ith": [473, 749, 753, 809, 830, 831, 846, 847], "1592": 475, "1212": 475, "1624": 475, "620": 475, "data_filenam": [478, 482], "target_filenam": [478, 482], "container_path": 480, "load_cont": 480, "allowed_extens": 480, "container_fold": 480, "category_1_fold": 480, "file_1": 480, "file_2": 480, "file_42": 480, "category_2_fold": 480, "file_43": 480, "file_44": 480, "mod": 480, "image_nam": 483, "first_img_data": 484, "backup": [485, 996], "instantan": 485, "mycach": 485, "get_data": 485, "mysvmlightfil": 485, "xn": 486, "yn": [486, 955, 956], "q1": 486, "qn": 486, "yi": [486, 956, 1000, 1004, 1005, 1008], "qi": [486, 1008], "triplet": 486, "minval": [488, 490], "maxval": [488, 490], "seventh": [488, 966], "269": 488, "return_cent": [489, 1007], "intric": 489, "basri": 490, "gerstein": 490, "genom": 490, "flip_i": 492, "interdepend": 492, "polytop": 492, "guyon": [492, 570, 571, 954], "madelon": 492, "1991": [493, 494, 495], "12000": 497, "effective_rank": [498, 501], "tail_strength": [498, 501], "bell": [498, 1004, 1006, 1008, 1009], "fat": [498, 501], "crawl": [498, 901], "return_ind": 500, "make_low_rank_matrix": 501, "norm_diag": 504, "make_spd_matrix": 504, "celeux": 505, "el": [505, 1009], "anbari": 505, "marin": 505, "frequentist": 505, "n_dim": [506, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "marsland": 507, "vuw": 507, "nz": 507, "marslast": 507, "ch6": 507, "code_init": [508, 522], "dict_init": [508, 514, 522, 523], "split_sign": [508, 514, 519], "transform_max_it": [508, 514, 515, 519, 1006], "_fro": [508, 514, 522, 523, 623, 624, 629, 637, 638, 639, 658], "lasso_cd": [508, 514, 519, 525], "error_": [508, 520], "minibatchsparsepca": [508, 510, 514, 517, 519, 520, 522, 523, 996, 997, 1007, 1009, 1010, 1011], "sierra": [508, 514], "icml09": [508, 514], "x_hat": [508, 514], "noise_variance_init": 509, "quartimax": [509, 1008], "loglike_": 509, "barber": 509, "bishop": [509, 511, 518, 716, 770, 950, 955, 969], "get_covari": [509, 511, 518], "unmixing_matrix": 510, "whitening_": 510, "kpca": [510, 511, 512, 990, 991, 996], "unsaf": 511, "singular_values_": [511, 518, 521, 1003], "var_": [511, 811, 853, 1009], "574": [511, 518], "miketip": [511, 518], "mppca": [511, 518], "n_samples_seen_": [511, 842, 843, 853, 1004], "batch_size_": 511, "ross": [511, 584, 585, 970, 1010], "vision": [511, 733, 734, 946, 950, 952, 970, 974, 978, 997], "141": [511, 872, 955], "toronto": [511, 621, 829], "dross": 511, "ivt": 511, "rosslimlinyang_ijcv": 511, "karhunen": 511, "loev": 511, "levi": [511, 1003], "lindenbaum": 511, "1371": 511, "1374": 511, "abstain": 511, "holub": 511, "opportun": [511, 968], "golub": [511, 811, 853], "x_spars": [511, 925, 928], "sigma2": [511, 518], "x_origin": [511, 516, 518, 520, 521, 607, 864, 865], "check_input": [511, 525, 623, 624, 629, 637, 638, 639, 658, 664, 880, 881, 882, 883, 1004], "remove_zero_eig": [512, 998, 1005], "x_fit_": [512, 620], "eigenvalues_": [512, 1009], "eigenvectors_": [512, 1009], "dual_coef_": [512, 620, 874, 875, 876, 877, 878, 969, 1000], "x_transformed_fit_": 512, "nathan": [512, 1004, 1008], "gunnar": [512, 909], "tropp": [512, 518], "288": [512, 518], "vladimir": [512, 909, 950, 1006, 1010], "rokhlin": [512, 518, 909], "tygert": [512, 518, 909], "learning_decai": 513, "evaluate_everi": 513, "perp_tol": 513, "mean_change_tol": 513, "max_doc_update_it": 513, "kappa": [513, 692], "tau_0": 513, "pseudocount": [513, 1004], "exp_dirichlet_component_": 513, "n_batch_iter_": 513, "bound_": 513, "doc_topic_prior_": 513, "topic_word_prior_": 513, "franci": [513, 635, 950, 1002], "onlineldavb": 513, "chong": 513, "00360392": 513, "25499205": 513, "0036211": 513, "64236448": 513, "09541846": 513, "15297572": 513, "00362644": 513, "44412786": 513, "39568399": 513, "003586": 513, "vb": 513, "sub_sampl": 513, "doc_topic_distr": [513, 1003], "callback": [514, 516, 522, 523, 822, 975], "invok": [514, 516, 522, 523, 544, 546, 547, 794, 869, 1008], "inner_stats_": [514, 1010], "iter_offset_": [514, 1010], "generattor": 514, "iter_offset": [514, 523, 1010], "fresh_restart": 515, "fresh_restarts_max_it": 515, "_w": [515, 517, 524], "_ratio": [515, 517, 524], "_h": [515, 517, 524], "fresh": [515, 975, 1006], "reconstruction_err_": [515, 517], "andrzej": [515, 517, 524], "anh": [515, 517, 524], "ieic": [515, 517, 524], "708": [515, 517, 524, 725], "721": [515, 517, 524], "waspa": 515, "ridge_alpha": [516, 520, 1003], "power_iteration_norm": [518, 521, 908, 909, 1010], "500x500": 518, "lu": [518, 521, 908, 909, 1002, 1003, 1004, 1005], "n_samples_": 518, "royal": [518, 604, 849, 860, 968], "methodologi": [518, 846, 944, 954, 978], "622": 518, "9924": 518, "30061": 518, "54980": 518, "00755": 518, "99244": 518, "ascontiguousarrai": 518, "sparse_encod": [519, 627, 628, 629, 630, 631, 632, 633, 640, 641, 642, 659, 660, 661, 662, 663, 996, 1003, 1004, 1006, 1010], "u_init": 520, "v_init": 520, "9666": 520, "oversampl": [521, 996], "indeterminaci": 521, "x_dens": 521, "0157": 521, "0512": 521, "0499": 521, "0479": 521, "0453": 521, "2102": 521, "2410": 521, "5981": 521, "5420": 521, "4486": 521, "3288": 521, "method_max_it": [522, 523, 1006], "dict_learning_onlin": [522, 997, 1006, 1009, 1010], "return_cod": 523, "return_inner_stat": [523, 1010], "inner_stat": [523, 1010], "update_h": 524, "hal": [524, 635, 733, 734, 952], "copy_cov": 525, "orthogonal_mp": [525, 641, 642, 663, 950], "eigen": [526, 650, 668, 672, 948, 1002, 1005], "sum_k": [526, 970], "prior_k": 526, "c_k": 526, "priors_": [526, 527], "scalings_": [526, 527], "xbar_": 526, "reg_param": 527, "scaling_": 527, "colinear": 527, "rotations_": 527, "n_classes_": [528, 530, 532, 534, 536, 541, 587, 801, 802, 880, 882, 997, 1006, 1008], "class_prior_": [528, 811], "n_outputs_": [528, 529, 534, 535, 541, 542, 543, 830, 831, 880, 881, 882, 883], "dummy_clf": 528, "constant_": 529, "dummy_regr": 529, "base_estimator_": [530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 587, 869, 1011], "dok": [530, 531, 840, 1009], "brought": [530, 531, 534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "staged_predict_proba": [530, 536, 538, 996], "staged_scor": [530, 531], "7972": 531, "9771": 531, "estimators_samples_": [532, 533, 540, 1002, 1004, 1007], "estimators_features_": [532, 533, 540], "oob_decision_function_": [532, 534, 541], "oob_prediction_": [533, 535, 542], "8720": [533, 1004], "min_weight_fraction_leaf": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 970, 999, 1002, 1003], "min_impurity_decreas": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883, 970, 1003], "shannon": [534, 541, 880, 882, 951, 970], "unlimit": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "n_t": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "n_t_r": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "right_impur": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "n_t_l": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "left_impur": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "balanced_subsampl": [534, 541, 1004], "subtre": [534, 535, 536, 537, 541, 542, 880, 881, 882, 883, 970], "unprun": [534, 535, 541, 542, 880, 881, 882, 883], "x_leav": [534, 535, 536, 537, 541, 542, 543, 880, 881, 882, 883], "n_nodes_ptr": [534, 535, 541, 542, 543], "friedman_ms": [535, 536, 537, 542, 881, 883], "extratreeregressor": [535, 540, 543, 882, 960, 1005, 1006, 1007, 1009, 1010], "2727": 535, "dummyestim": [536, 537], "eras": [536, 537, 623, 629, 635, 637, 639, 643, 644, 645, 653, 654, 655, 830, 831], "lossfunct": [536, 537, 645, 653, 654, 1005], "init_": [536, 537], "init_estim": [536, 537], "max_features_": [536, 537, 574, 880, 881, 882, 883, 1010], "_fit_stag": [536, 537], "binary_crossentropi": [538, 1010], "categorical_crossentropi": [538, 1006, 1010], "crossentropi": 538, "deepest": [538, 539, 1007], "reserv": [538, 539, 978, 980], "do_early_stopping_": [538, 539], "n_trees_per_iteration_": [538, 539], "validation_score_": [538, 539], "is_categorical_": [538, 539], "n_trees_per_iter": 538, "longerr": 540, "max_samples_": 540, "fei": [540, 960], "ting": [540, 960, 1004, 1005], "ming": [540, 960, 1000, 1004, 1005, 1006, 1010], "zhou": [540, 616, 868, 960, 1004], "zhi": [540, 960], "hua": [540, 960], "icdm": [540, 960], "eighth": [540, 960], "tkdd": 540, "n_left": 540, "32987858": 542, "n_out": 543, "one_hot_encoder_": 543, "extratreeclassifi": [543, 883, 955, 1000, 1005, 1006, 1007, 1009, 1010], "moosmann": 543, "trigg": 543, "juri": 543, "random_tre": 543, "x_sparse_embed": 543, "randomtreesembedding_": 543, "final_estimator_": [544, 545], "named_estimators_": [544, 545, 546, 547, 1004, 1006], "named_estim": [544, 545, 546, 547], "parameter_nam": [544, 545, 546, 547], "new_valu": [544, 545, 546, 547], "linearsvr": [545, 878, 1000, 1002, 1007], "flatten_transform": [546, 1003], "le_": 546, "eclf1": 546, "array_equ": [546, 1003], "eclf2": 546, "eclf3": 546, "maj": 546, "probabilities_or_label": 546, "n_regressor": 547, "r1": 547, "r3": 547, "er": 547, "with_traceback": [548, 549, 550, 551, 552, 553, 554], "__traceback__": [548, 549, 550, 551, 552, 553, 554], "repr": [553, 1007, 1008, 1010], "linter": 555, "spam": [558, 685, 716, 808, 954, 956, 978], "feature_names_": 558, "xa": 558, "dict_typ": 558, "1048576": [559, 566], "non_neg": [559, 1003], "eleph": 559, "patch_height": [560, 561, 564], "patch_width": [560, 561, 564], "pe": 560, "pe_fit": 560, "pe_tran": 560, "545706": 560, "image_height": [560, 561, 564], "image_width": [560, 561, 564], "n_channel": [560, 561, 564], "n_patch": [560, 561, 564], "272214": 561, "215": 561, "n_z": 562, "return_a": [562, 563, 999], "_coo": [562, 563], "image_s": 564, "strip_acc": [565, 566, 568], "nfkd": [565, 566, 568, 1006], "unicodedata": [565, 566, 568], "regexp": [565, 566, 568], "min_n": [565, 566, 568, 996], "max_n": [565, 566, 568, 996], "fixed_vocabulary_": [565, 568], "stop_words_": [565, 568], "delattr": [565, 568, 1008], "vectorizer2": 565, "raw_docu": [565, 568], "get_stop_word": [565, 566, 568], "x_inv": [565, 568], "con": 566, "yates2011": 567, "baeza": [567, 705, 999], "yate": [567, 705], "ribeiro": [567, 705, 1009], "neto": [567, 705], "addison": [567, 705], "weslei": [567, 705], "mrs2008": 567, "tfid": 567, "22314355": 567, "51082562": 567, "91629073": 567, "_check_stop_list": 568, "pvalu": [569, 572, 573, 575, 576, 577, 798], "k_best": [569, 869, 967], "fdr": 569, "fwe": 569, "iff": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 844], "retent": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580], "n_selected_featur": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580], "n_original_featur": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580], "attrgett": [570, 574], "barnhil": [570, 571], "vapnik": [570, 571], "389": [570, 571, 989], "422": [570, 571, 701, 731, 954], "n_subsets_of_featur": 571, "narrai": 571, "benjamini": [572, 1002, 1003], "hochberg": [572, 1002, 1003], "contnuou": 572, "false_discovery_r": 572, "norm_ord": [574, 1003], "threshold_": [574, 1003], "3252302": 574, "83462377": 574, "49750423": 574, "55245": 574, "half_cal": 574, "half_selector": 574, "unspecifi": [576, 577, 774, 951], "_get_support_mask": 578, "n_features_to_select_": 579, "variances_": 580, "weed": 581, "p_valu": [581, 582, 583], "f_statist": [582, 583], "force_finit": [583, 586, 703, 760, 954, 1010], "pearson": [583, 586, 1009], "discrete_featur": [584, 585], "essenc": [584, 585, 718, 951, 954], "hardli": [584, 585], "kraskov": [584, 585], "stogbauer": [584, 585], "grassberg": [584, 585], "phy": [584, 585], "kozachenko": [584, 585], "leonenko": [584, 585], "probl": [584, 585], "peredachi": [584, 585], "correlation_coeffici": 586, "fmin_l_bfgs_b": [587, 588], "max_iter_predict": 587, "copy_x_train": [587, 588], "one_vs_rest": [587, 955], "compoundkernel": [587, 1010], "obj_func": [587, 588], "initial_theta": [587, 588], "theta_opt": [587, 588], "func_min": [587, 588], "_posterior_mod": 587, "log_marginal_likelihood_value_": [587, 588], "9866": [587, 596, 599], "83548752": 587, "03228706": 587, "13222543": 587, "79064206": 587, "06525643": 587, "14410151": 587, "clone_kernel": [587, 588, 1006], "n_kernel_param": [587, 588], "log_likelihood_gradi": [587, 588], "x_train_": 588, "y_train_": 588, "3680": [588, 591, 602], "y_cov": 588, "n_samples_x": [588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 676, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756], "requires_vector_input": [589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "51292546": 589, "09861229": [589, 964], "n_samples_i": [589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 676, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756], "n_kernel": 589, "k_gradient": [589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602], "k_diag": [589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "hyperparameter_constant_valu": 590, "3696": 590, "hyperparameter_sigma_0": 591, "edward": [591, 596, 599, 999, 1004, 1005, 1006, 1007], "hyperparameter_length_scal": [592, 596, 599, 600], "hyperparameter_period": 592, "0144": 592, "3894": 592, "3467": 592, "419": 593, "559": 593, "namedtupl": 594, "maxsiz": 594, "mat\u00e9rn": 596, "appr": 596, "8513": 596, "0368": 596, "1117": 596, "8086": [596, 1003], "0693": 596, "1220": 596, "gamma_bound": 597, "pairwise_kernels_kwarg": 597, "additive_chi2": [597, 615, 740, 749], "pairwise_kernel_funct": [597, 620, 749], "hyperparameter_gamma": 597, "9733": [597, 600], "8880": 597, "05663": 597, "05532": 597, "8676": [597, 1003], "07073": 597, "06165": 597, "__mul__": 598, "8354": [599, 1003], "03228": 599, "1322": 599, "7906": [599, 626], "0652": 599, "1441": 599, "hyperparameter_alpha": 600, "8881": 600, "0566": 600, "05518": 600, "8678": 600, "0707": 600, "0614": 600, "hyperparameter_noise_level": 602, "initial_strategi": 604, "imputation_ord": [604, 1006], "skip_complet": 604, "min_valu": [604, 1007, 1008], "max_valu": [604, 1007, 1008], "nullabl": [604, 605, 606, 607, 1007], "na": [604, 605, 606, 607, 744, 753, 890, 892, 893, 1006, 1007, 1010], "known_val": 604, "Nearness": 604, "arab": 604, "broadcast": 604, "missingind": [604, 605, 607, 944, 1004, 1005, 1006, 1010], "initial_imputer_": 604, "imputation_sequence_": 604, "feat_idx": 604, "neighbor_feat_idx": 604, "n_features_with_missing_": 604, "indicator_": [604, 605, 607], "knp": 604, "stef": [604, 944], "buuren": [604, 944], "karin": [604, 944], "groothui": [604, 944], "oudshoorn": [604, 944], "buck": 604, "1960": [604, 692], "306": 604, "imp_mean": [604, 607], "9584": [604, 1003], "nan_euclidean": [605, 737, 753], "_pairwise_cal": 605, "kwd": [605, 746, 749, 753, 756, 765, 766], "olga": [605, 944], "troyanskaya": [605, 944], "cantor": [605, 944], "gavin": [605, 944], "sherlock": [605, 944], "pat": [605, 944], "botstein": [605, 944], "russ": [605, 944], "altman": [605, 944], "bioinformat": [605, 944], "520": [605, 822, 944, 957], "n_output_featur": 605, "error_on_new": 606, "features_": [606, 944], "n_missing_featur": 606, "x2_tr": 606, "n_features_with_miss": 606, "statistics_": 607, "n_features_missing_ind": 607, "x_imput": 607, "n_features_out": 607, "quadcontourset": 608, "quadmesh": 608, "feature_1": [608, 885], "feature_2": 608, "nicer": 608, "overwrit": [608, 980, 996, 1007], "pd_result": 609, "target_idx": 609, "pdp_lim": 609, "nonexist": 609, "deciles_vlines_": 609, "vlines_": 609, "deciles_hlines_": 609, "contour_kw": 609, "disp1": 609, "disp2": 609, "pdp_line_kw": 609, "seq": 610, "n_values_feature_j": 610, "bre": [611, 970], "4666": 611, "2211": 611, "x_min_": 612, "x_max_": 612, "n_threshold": [612, 702, 757, 764], "stepwis": [612, 631, 632, 633, 659, 660, 950], "increasing_": 612, "isotonic_regress": [612, 1009], "secondari": [612, 1000], "leeuw": 612, "1977": 612, "nilotp": [612, 614], "chakravarti": [612, 614], "308": 612, "pava": 612, "hornik": 612, "mair": 612, "kruskal": [612, 667, 671, 951], "psychometrica": 612, "iso_reg": 612, "8628": 612, "7256": 612, "isotonicregression0": 612, "increasing_bool": 613, "fisher_transform": 613, "sample_step": 615, "sample_interv": 615, "sample_interval_": 615, "skewedchi2sampl": [615, 616, 617, 618, 946, 1003, 1010, 1011], "chi2_kernel": [615, 619, 733, 740, 952, 997], "additive_chi2_kernel": [615, 734, 740, 946], "vedaldi": [615, 946], "zisserman": [615, 946, 954], "chi2sampl": 615, "9499": 615, "component_indices_": [616, 1009], "normalization_": 616, "additivechi2sampl": [616, 617, 618, 619, 733, 734, 946, 1010], "kernel_metr": [616, 617, 618, 619], "seeger": 616, "mahdavi": 616, "jin": [616, 1007, 1008], "data_transform": 616, "9987": 616, "fft": 617, "indexhash": 617, "bithash": 617, "indexhash_": 617, "bithash_": 617, "kitchen": [618, 946], "sink": [618, 946], "random_offset_": [618, 619], "random_weights_": [618, 619], "rahimi": [618, 946], "benjamin": [618, 998, 999, 1007, 1008, 1009, 1010], "recht": [618, 946], "berkelei": [618, 880, 881], "brecht": 618, "rah": 618, "rbf_featur": [618, 946], "skewed": [619, 1003], "secant": 619, "hyperbol": [619, 830, 831, 952, 958], "fuxin": 619, "catalin": 619, "ionescu": [619, 946, 1006], "cristian": 619, "sminchisescu": [619, 946], "chi2_featur": 619, "2c": [620, 629, 649, 650, 651, 652, 664, 946], "murphi": [620, 947], "alpha_1": [621, 622, 950], "alpha_2": [621, 622, 950], "lambda_1": [621, 622, 950], "lambda_2": [621, 622, 950], "threshold_lambda": 621, "x_offset_": [621, 622, 1008], "x_scale_": [621, 622, 1008], "mackai": [621, 622, 950], "ashra": 621, "salakhutdinov": [621, 822, 957], "lectur": [621, 946, 973], "utstat": 621, "rsalakhu": 621, "sta4273": 621, "lecture2": 621, "computed_scor": 622, "appendix": [622, 653, 950, 964], "wipf": [622, 950], "nagarajan": [622, 950], "2_2": [623, 624, 629, 630, 631, 632, 633, 637, 638, 639, 640, 649, 658, 659, 660, 661], "glmnet": [623, 624, 996], "sparse_coef_": [623, 629, 637, 639, 996], "dual_gap_": [623, 624, 629, 630, 637, 638, 639, 640, 1009], "max_j": [623, 629], "w_j": [623, 629, 954, 968], "ext": [623, 629], "83816048": 623, "55968825": 623, "451": 623, "coef_init": [623, 624, 629, 630, 637, 638, 639, 640, 643, 645, 653, 654, 655, 658, 661], "mono": [623, 624, 629, 630, 637, 638, 639, 640, 658, 661], "_21": [623, 624, 629, 630, 637, 638, 639, 640, 658, 661], "sum_j": [623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 950, 954, 959], "alpha_min": [623, 624, 627, 629, 630, 631, 633, 637, 638, 639, 640, 658, 659, 660, 661], "alpha_max": [623, 624, 629, 630, 637, 638, 639, 640, 658, 661], "ndim": [623, 624, 629, 630, 637, 638, 639, 640, 658, 661, 892, 893], "multitaskelasticnet": [623, 624, 629, 638, 639, 640, 658, 950, 996, 1003, 1004, 1007, 1009], "multitaskelasticnetcv": [623, 624, 629, 637, 639, 640, 658, 950, 999, 1006, 1007, 1009], "l1_ratio_": [624, 636, 638], "n_l1_ratio": [624, 636, 638, 999], "199": [624, 726, 969], "398": [624, 989], "unpen": [625, 646, 657, 950], "raphson": [625, 646, 657], "g_j": [625, 646, 657], "896": 625, "483": 625, "pg_i": 626, "scale_": [626, 842, 843, 851, 853, 862, 964, 1001], "outliers_": 626, "elvezio": [626, 950], "ronchetti": [626, 950], "concomit": [626, 950], "owen": [626, 1005, 1006], "hybrid": [626, 974], "statweb": [626, 659, 660], "hhu": [626, 1005], "284": 626, "806": 626, "7200": 626, "4923": 626, "1698": 626, "0106": 626, "9221": 626, "0226": 626, "fit_path": [627, 631, 632, 633, 659, 660], "jitter": [627, 631, 1007], "coef_path_": [627, 628, 631, 632, 950], "active_": [627, 628, 631, 632], "larscv": [627, 642, 659, 660, 1003, 1009], "1111": [627, 633], "max_n_alpha": [628, 632], "n_cv_alpha": [628, 632], "cv_alpha": [628, 632], "lassolar": [628, 629, 630, 632, 633, 640, 641, 642, 659, 660, 661, 950, 987, 996, 997, 999, 1003, 1006, 1007, 1009], "9996": 628, "2961": 628, "3996": 628, "usinglar": 629, "4951": 630, "2_fro": [630, 639, 640, 661], "coef_path": [630, 640, 661], "46874778": [630, 640, 661], "2159048": [630, 640, 661], "4425765": [630, 640, 661], "23689075": [630, 640, 661], "coef_path_lar": [630, 640, 661], "coef_path_continu": [630, 640, 661], "interp1d": [630, 640, 661], "46915237": [630, 640, 661], "23668876": [630, 640, 661], "congruenc": [631, 632, 633, 659, 660], "fragil": 632, "3972": 632, "2222": 633, "rank_": 634, "singular_": 634, "maxent": [635, 636, 950], "primal": [635, 636, 654, 872, 873, 968, 969], "synthetic_feature_weight": [635, 636], "ciyou": 635, "byrd": 635, "jorg": [635, 999, 1008, 1010], "noced": 635, "lui": [635, 997, 999, 1000, 1004], "iem": 635, "lbfgsb": 635, "schmidt": [635, 950, 999], "le": [635, 841, 945, 950, 957, 965, 967, 1004, 1008, 1009], "roux": [635, 950, 967], "00860051": 635, "defazio": [635, 950], "lacost": [635, 950], "hsiang": [635, 1000], "fu": [635, 1000], "fang": [635, 1003, 1004], "lan": 635, "chih": [635, 1001], "jen": [635, 1004], "maxent_du": 635, "cs_": 636, "l1_ratios_": 636, "coefs_paths_": [636, 1006], "coefs_path": 636, "n_l1_ratios_": 636, "w_ij": 637, "eps_": [637, 639], "45663524": 637, "45612256": 637, "0872422": 637, "fro_2": [638, 640], "multitasklassocv": [638, 999, 1006, 1007, 1009], "52875032": 638, "46958558": 638, "00166409": 638, "60809415": 639, "94592424": 639, "41888636": 639, "87382323": 639, "9994": 640, "5713": 640, "153": 640, "7971": 640, "9015": [640, 1004], "n_nonzero_coefs_": [641, 642], "orthogonal_mp_gram": [641, 642, 662, 1010], "mallat": [641, 662, 663, 950], "3397": [641, 662, 663], "3415": [641, 662, 663], "papier": [641, 662, 663], "mallatpursuit93": [641, 662, 663], "rubinstein": [641, 662, 663], "zibulevski": [641, 662, 663], "elad": [641, 662, 663], "technion": [641, 662, 663, 950], "ronrubin": [641, 662, 663, 950], "ksvd": [641, 662, 663, 950], "9991": [641, 642, 1004], "3854": [641, 642], "previous_loss": [643, 644, 645, 654], "pa": [643, 644, 869, 950, 954, 967], "preset": [643, 645, 653, 958], "t_": [643, 644, 645, 653, 654, 655, 830, 831, 968], "loss_function_": [643, 645, 653, 654], "volume7": [643, 644], "crammer06a": [643, 644], "crammer": [643, 644, 710, 950, 954, 969], "dekel": [643, 644, 950], "keshat": [643, 644, 950], "shalev": [643, 644, 950, 968], "shwartz": [643, 644, 950, 968], "singer": [643, 644, 710, 950, 954, 968, 969], "26642044": 643, "45070924": 643, "67251877": 643, "64185414": 643, "84127814": 643, "intercept_init": [643, 645, 653, 655], "y_all": [643, 645, 653, 801, 802, 830], "epsilon_insensit": [644, 653, 655, 873, 950, 968], "squared_epsilon_insensit": [644, 653, 655, 873, 950, 1002], "48736655": 644, "18818427": 644, "59122734": 644, "94731329": 644, "02306214": 644, "eta0": [645, 653, 654, 655, 968], "therein": 645, "939": [645, 984], "990": [646, 954], "088": [646, 962], "676": 646, "solver_opt": 647, "ipm": 647, "revis": 647, "linprog": [647, 950], "is_data_valid": [648, 950], "is_model_valid": [648, 950], "max_trial": [648, 950], "max_skip": 648, "stop_n_inli": [648, 950], "stop_scor": [648, 950], "stop_prob": 648, "mad": [648, 1002], "costlier": 648, "n_trials_": 648, "n_skips_no_inliers_": 648, "n_skips_invalid_data_": 648, "n_skips_invalid_model_": 648, "sri": [648, 950, 1003, 1004], "bmva": 648, "bmvc": [648, 950], "paper355": 648, "9885": 648, "9417": 648, "15000": [649, 664, 830, 831], "gcv_mode": [650, 998], "store_cv_valu": [650, 652, 1004, 1007], "alpha_per_target": [650, 1008], "cv_values_": [650, 652], "ridgeclassifiercv": [650, 651, 763, 954, 955, 1004, 1006, 1007, 1009, 1010], "5166": 650, "gcv": [650, 652], "9595": 651, "9630": 652, "power_t": [653, 654, 655, 830, 831, 968], "best_loss": [653, 655], "leon": [653, 654, 655, 996], "bottou": [653, 654, 655, 958, 968], "pow": [653, 654, 655, 830, 831], "dl": 653, "775047": 653, "775151": 653, "justif": 653, "volume2": 653, "zhang02c": 653, "offset_init": 654, "unshifft": 654, "n_subsampl": [656, 898], "breakdown_": 656, "n_subpopulation_": 656, "xin": [656, 950, 1004], "dang": [656, 950], "hanxiang": [656, 950], "peng": [656, 950, 1002, 1003, 1004, 1006, 1008], "xueqin": [656, 950], "hepe": [656, 950], "olemiss": 656, "xdang": 656, "mtse": 656, "9884": 656, "5871": 656, "coeff": 657, "839": 657, "copy_gram": [659, 660, 663], "return_path": [659, 660, 662, 663], "lars_path_gram": [659, 950, 1005], "tib": [659, 660], "xgamma": 662, "norms_squar": 663, "copy_xi": 663, "return_intercept": [664, 1005], "linearoper": 664, "_preprocess_data": 664, "path_method": [665, 951], "neighbors_algorithm": [665, 666], "arnoldi": [665, 666, 670], "fw": 665, "warshal": [665, 951], "kernel_pca_": 665, "nbrs_": [665, 666], "dist_matrix_": 665, "tenenbaum": [665, 951], "5500": [665, 951], "reconstruction_error": 665, "frobenius_norm": 665, "d_fit": 665, "x_fit": 665, "n_queri": [665, 815, 816, 817, 819, 821, 823, 824, 825], "hessian_tol": [666, 670], "modified_tol": [666, 670], "reconstruction_error_": 666, "rowei": [666, 670, 822, 951, 957], "saul": [666, 670, 951, 1003, 1004, 1006], "2323": [666, 670, 951], "donoho": [666, 670, 951], "grime": [666, 670, 951], "natl": [666, 670, 951], "acad": [666, 670, 951], "5591": [666, 670, 951], "mlle": [666, 670, 951], "zha": [666, 670, 951], "shanghai": [666, 670, 951], "univ": [666, 670, 951], "406": [666, 670, 951], "immers": [667, 671], "nonmetr": [667, 671], "smacof": [667, 1011], "stress": [667, 671, 951, 1011], "stress_": 667, "dispar": [667, 671, 951], "dissimilarity_matrix_": 667, "psychometrika": [667, 671, 951], "1964": [667, 671, 849, 860, 951], "borg": [667, 671, 951], "groenen": [667, 671, 951], "affinity_matrix": 668, "n_neighbors_": [668, 819], "early_exagger": 669, "min_grad_norm": [669, 1002], "square_dist": [669, 1008], "der": [669, 673, 951, 999, 1000, 1004], "maaten": [669, 673, 951], "bhtsne": [669, 1003], "opentsn": 669, "abort": 669, "pdist": [669, 676, 753, 756], "pairwise_distance_funct": [669, 673, 753, 756, 957], "barn": [669, 1001, 1003, 1006], "hut": [669, 1001, 1003, 1006], "nlogn": 669, "kl_divergence_": [669, 1003], "learning_rate_": [669, 831], "hinton": [669, 822, 829, 830, 831, 951, 957, 958, 959], "2579": 669, "2605": 669, "lvdmaaten": [669, 1003], "oct": [669, 744, 951, 957], "3221": [669, 951], "3245": [669, 951], "jmlr_2014": 669, "belkina": [669, 951], "ciccolella": [669, 951], "anno": [669, 951], "halpert": [669, 951], "spidlen": [669, 951], "snyder": [669, 951], "cappion": [669, 951], "kobak": [669, 1009], "beren": 669, "transcriptom": 669, "guttman": 671, "norm_laplacian": 672, "drop_first": 672, "nk": 673, "2n": [673, 946, 958], "3k": 673, "cosine_dist": [673, 737, 957, 1002], "jarkko": 673, "venna": 673, "samuel": [673, 978, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "kaski": 673, "icann": 673, "verlag": 673, "491": 673, "twelth": 673, "pmlr": 673, "384": [673, 873], "im_": 674, "axesimag": 674, "text_": 674, "include_valu": 674, "values_format": [674, 1006], "im_kw": [674, 1010], "text_kw": [674, 1011], "get_metr": 676, "19615242": 676, "euclideandist": 676, "manhattandist": 676, "chebyshevdist": 676, "minkowskidist": [676, 1009], "wminkowski": [676, 820, 1008, 1010], "wminkowskidist": 676, "seuclideandist": 676, "mahalanobisdist": 676, "haversinedist": 676, "arcsin": [676, 739], "hammingdist": 676, "n_unequ": 676, "n_tot": 676, "canberradist": 676, "braycurtisdist": 676, "abbrevi": 676, "ntt": 676, "ntf": 676, "nft": 676, "nff": 676, "nneq": 676, "jaccarddist": 676, "matchingdist": 676, "dicedist": 676, "kulsinskidist": 676, "rogerstanimotodist": 676, "russellraodist": 676, "sokalmichenerdist": 676, "sokalsneathdist": 676, "pyfunc": 676, "pyfuncdist": 676, "dist_to_rdist": 676, "surrog": [676, 978], "cdist": [676, 1009], "rdist_to_dist": 676, "rdist": 676, "predictionrecalldisplai": [677, 954], "drop_intermedi": [678, 764], "balanced_accuracy_scor": [679, 762, 954, 1004], "imperfectli": [679, 709, 954], "label_tru": [680, 693, 712, 730, 732, 768], "upperlimit": 680, "nat": [680, 730, 732, 1010], "expected_ri": 681, "discord": 681, "hubert1985": 681, "1007": 681, "2fbf01908075": 681, "steinley2004": 681, "wk": 681, "rand_index": 681, "adjusted_rand_index": 681, "chacon": 681, "chac\u00f3n": 681, "rastrojo": 681, "balanced_accuraci": [684, 954, 1004], "brodersen": 684, "ong": 684, "stephan": [684, 999, 1005, 1006, 1008], "buhmann": 684, "20th": 684, "3121": 684, "kelleh": [684, 954], "aoif": [684, 954], "arci": [684, 954], "y_true_categor": [685, 954], "calinski": [686, 1002], "harabasz": 686, "allow_non": 687, "thrown": [687, 1005, 1006], "tn": [688, 694, 954], "negative_class": 688, "zebra": 688, "output_dict": [689, 1004, 1008], "zero_divis": [689, 704, 705, 713, 758, 759, 762, 1006, 1008], "precision_recall_fscore_support": [689, 704, 705, 759, 762, 954, 1000, 1004, 1006], "multilabel_confusion_matrix": [689, 704, 705, 713, 759, 762, 954, 1005], "conting": [690, 691, 706, 730, 1002], "n_classes_tru": [690, 730], "n_classes_pr": [690, 730], "cohen": [692, 1004], "p_o": 692, "p_e": 692, "artstein": 692, "poesio": 692, "linguist": [692, 869, 967], "555": 692, "596": 692, "label_pr": [693, 711, 712, 730, 732, 768], "ant": [694, 729, 954], "bird": [694, 729, 954], "a_row": 695, "a_column": 695, "b_row": 695, "b_column": 695, "tsoumaka": [696, 709, 715, 954], "kataki": [696, 709, 715, 954], "vlahava": [696, 715, 954], "handbook": [696, 715, 954], "667": [696, 715, 954], "raw_valu": [697, 698, 703, 720, 721, 723, 725, 726, 728, 760, 954, 1004, 1007], "eq": [697, 698, 699], "wainwright": [697, 698, 699], "su": [697, 698, 699], "statlearnspars": [697, 698, 699], "764": [697, 954], "8125": 697, "57142857": 697, "d2": 698, "d2_absolute_error_scor": [698, 954, 1010], "koenker": [698, 950], "roger": [698, 1003, 1004, 1008], "jos\u00e9": [698, 999, 1009], "772": 698, "045": 698, "bouldin": 700, "farther": 700, "log_bas": 701, "ignore_ti": [701, 731], "ndcg": [701, 731, 954, 1003], "ndcg_score": [701, 954, 1003, 1006, 1011], "sharper": 701, "discounted_cumulative_gain": 701, "dcg": [701, 731, 954, 1003], "jarvelin": [701, 731, 954], "kekalainen": [701, 731, 954], "colt": [701, 731, 954], "mcsherri": [701, 731, 954], "najork": [701, 731, 954], "european": [701, 731, 954], "groud": [701, 731], "true_relev": [701, 731], "propabl": 702, "imperfect": [703, 760, 954, 998], "variance_weight": [703, 760, 954], "n_unique_label": [704, 705, 713, 758, 759, 762, 920], "fbeta_scor": [704, 717, 758, 954, 998, 999, 1000, 1001, 1006], "undefinedmetricwarn": [704, 705, 758, 759, 762, 1005], "66666667": [704, 757, 823, 964], "lend": [705, 978], "fowlk": [706, 1002], "mallow": [706, 1002], "get_scorer_nam": [707, 954, 1010], "forgiv": 709, "upperbound": 709, "grigorio": 709, "ioanni": 709, "wareh": 709, "septemb": [709, 954, 996, 999, 1002, 1004, 1009], "pred_decis": [710, 954, 1009], "disagre": [710, 961], "kobi": 710, "yoram": 710, "AND": 710, "denero": 710, "gluster": 711, "v_measur": [711, 768], "6666": [713, 954, 1002], "5833": [713, 954], "lrap": [714, 954], "416": [714, 954], "209": [716, 849], "21616": 716, "needs_proba": [717, 1005], "needs_threshold": [717, 954], "ftwo_scor": [717, 954], "mcc": [718, 954, 1010], "baldi": 718, "brunak": 718, "chauvin": 718, "andersen": [718, 1010], "nielsen": [718, 1004], "gorodkin": 718, "jurman": 718, "riccadonna": 718, "furlanello": 718, "cen": 718, "mape": [721, 954], "3273": 721, "5515": 721, "6198": 721, "112589990684262": 721, "0568": 722, "4260": [724, 727], "612": 725, "822": 725, "41666667": 725, "825": 725, "msle": [726, 954], "rmsle": 726, "00462428": 726, "08377444": 726, "samplewis": [729, 954], "mcm": [729, 954], "mcm_": 729, "multi_confus": 729, "normalized_discounted_cumulative_gain": 731, "dcg_score": [731, 954, 1003, 1006], "kernel_matrix": [733, 734, 741, 751], "marszalek": [733, 734, 952], "lazebnik": [733, 734, 952], "schmid": [733, 734, 952], "ouvert": [733, 734, 952], "00171412": [733, 734, 952], "cosine_similar": [735, 740, 952, 1001], "dense_output": [736, 742, 865, 910, 1004], "linear_kernel": [736, 740, 952, 1004], "haversine_dist": [737, 1005], "y_norm_squar": 738, "x_norm_squar": [738, 1001], "catastroph": [738, 975], "paired_dist": [738, 744, 753, 1000], "41421356": [738, 744, 957], "ezeiza": 739, "airport": 739, "bueno": 739, "argentina": 739, "gaull": 739, "franc": 739, "bsa": 739, "83333": 739, "5166646": 739, "0083899664": 739, "53844117956": 739, "bsas_in_radian": 739, "paris_in_radian": 739, "6371000": 739, "kilomet": 739, "11099": 739, "54035582": 739, "polynomial_kernel": [740, 952], "rbf_kernel": [740, 952, 1000], "laplacian_kernel": [740, 952, 1001], "sigmoid_kernel": [740, 952], "kernal_metr": 740, "sum_over_featur": [743, 996, 1011], "componentwis": 743, "sq": 744, "dixon": [744, 1006, 1007], "cybernet": 744, "ieeexplor": 744, "4310090": 744, "filter_param": 749, "jth": [749, 753], "tanh": [752, 830, 831, 952, 969], "force_all_finit": [753, 890, 892, 893, 1007, 1010], "distance_metr": [753, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827], "metric_kwarg": [754, 755], "reduce_func": [756, 1007], "d_chunk": 756, "sought": 756, "neigh": [756, 815, 816, 817, 819, 821, 823, 824, 825], "gen": 756, "probas_pr": 757, "warn_for": 758, "shantanu": 758, "godbol": 758, "sunita": 758, "sarawagi": 758, "pig": 758, "max_fpr": [763, 954, 1004], "provost": [763, 954], "ceder": [763, 954], "stern": [763, 954], "fawcett": [763, 764, 954], "generalis": [763, 954, 975], "multioutputclassifi": [763, 802, 804, 806, 954, 1003, 1005, 1006, 1007, 1008], "n_samples_a": [765, 766], "mean_prior": 770, "degrees_of_freedom_prior": 770, "verbose_interv": [770, 771], "wishart": 770, "emipr": 770, "precisions_": [770, 771], "precisions_cholesky_": [770, 771, 1010], "converged_": [770, 771], "lower_bound_": [770, 771, 1004], "weight_concentration_prior_": 770, "weight_concentration_": 770, "mean_precision_prior_": 770, "mean_precision_": 770, "mean_prior_": 770, "degrees_of_freedom_prior_": 770, "degrees_of_freedom_": 770, "covariance_prior_": 770, "hagai": 770, "attia": 770, "bgm": 770, "n_dimens": [770, 771], "log_prob": [770, 771], "weights_init": 771, "precisions_init": [771, 1010], "gm": 771, "pre_dispatch": [772, 785, 794, 795, 796, 797, 800, 999], "error_scor": [772, 775, 776, 785, 795, 796, 797, 800, 943, 1000, 1004, 1008], "explos": [772, 785, 794, 795, 796], "lightweight": [772, 785, 794, 795, 796, 974], "fitfailedwarn": [772, 775, 776, 785, 795, 796, 797, 800], "param_kernel": [772, 785], "param_degre": 772, "rank_t": 772, "split0_train_scor": [772, 785, 1002], "split1_train_scor": [772, 785], "mean_train_scor": [772, 785, 1002], "std_train_scor": [772, 785, 1002], "split0_test_precis": [772, 785], "mean_train_precis": [772, 785], "best_estim": [772, 775, 776, 785], "scorer_": [772, 775, 776, 785], "n_splits_": [772, 775, 776, 785], "refit_time_": [772, 775, 776, 785, 1004], "multimetric_": [772, 775, 776, 785], "parametergrid": [772, 998, 1004], "split2_test_scor": 772, "num_sampl": [772, 785, 1011], "stratif": [773, 774, 779, 780, 789, 790, 791, 925, 1005], "group_kfold": 773, "aggressive_elimin": [775, 776, 943], "r0": [775, 776], "replai": [775, 776], "n_remaining_candidates_": [775, 776], "n_candid": [775, 776, 943], "max_resources_": [775, 776], "min_resources_": [775, 776], "n_required_iterations_": [775, 776], "n_possible_iterations_": [775, 776], "exceed": [775, 776, 1002], "combinator": 781, "lpo": 781, "param_list": 783, "rounded_list": 783, "89856": 783, "923223": 783, "878964": 783, "038159": 783, "parametersampl": [785, 998, 1004, 1008], "2652124": 786, "rskf": 787, "36851234": 787, "sizeabl": [788, 791], "sad": [789, 790], "sss": 791, "kth": 792, "checked_cv": 793, "3315057": [795, 796], "08022103": [795, 796], "03531816": [795, 796], "test_auc": 796, "train_r2": 796, "train_auc": 796, "3635": 796, "3573": 796, "6114": 796, "28009951": 796, "3908844": 796, "22784907": 796, "exploit_incremental_learn": 797, "predispatch": [797, 800], "n_unique_tick": 797, "train_size_ab": 797, "cv_train_scor": 797, "cv_test_scor": 797, "permutation_scor": 798, "n_valu": [800, 1004], "pairwise_indices_": 801, "label_binarizer_": 802, "multilabel_": [802, 1001], "code_s": [803, 955], "code_book_": 803, "onevsoneclassifi": [803, 997, 999, 1000, 1002, 1003, 1005, 1008, 1010], "bakiri": [803, 955], "pict": [803, 955], "order_": [804, 807], "regressorchain": [804, 806, 1004, 1007, 1011], "jess": [804, 955, 1009], "pfahring": [804, 955], "geoff": [804, 955], "holm": [804, 955], "eib": [804, 955], "8387": 804, "9431": 804, "4576": 804, "8878": 804, "3684": 804, "2640": 804, "0321": 804, "9935": 804, "0625": 804, "y_decis": 804, "load_linnerud": [806, 1002, 1007], "force_alpha": [808, 809, 810, 812, 1011], "lidston": [808, 809, 810, 812, 956], "class_count_": [808, 809, 810, 811, 812], "class_log_prior_": [808, 809, 810, 812], "feature_count_": [808, 810, 812], "feature_log_prob_": [808, 809, 810, 812], "categoricalnb": [808, 810, 811, 812, 956, 1006, 1007, 1008, 1009, 1011], "renni": [808, 810, 956, 1004], "schuetz": [808, 812], "htmledit": [808, 812, 952], "mccallum": [808, 956], "nigam": [808, 956], "metsi": [808, 956], "androutsopoulo": [808, 956], "palioura": [808, 956], "cea": [808, 956], "predict_joint_log_proba": [808, 809, 810, 811, 812, 1011], "min_categori": [809, 1008], "n_categori": [809, 847, 964], "category_count_": 809, "n_categories_": 809, "mirror": [810, 943], "mahout": 810, "weka": 810, "feature_all_": 810, "shih": [810, 956], "teevan": [810, 956], "karger": [810, 956], "623": [810, 956], "jrenni": 810, "icml03": 810, "var_smooth": [811, 1004], "stan": 811, "levequ": [811, 853], "cstr": 811, "epsilon_": 811, "theta_": [811, 956], "clf_pf": 811, "valid_metr": [813, 814, 957], "random_sampl": [813, 814, 818], "19662693": [813, 814], "29473397": [813, 814], "tree_copi": [813, 814], "query_radiu": [813, 814], "count_onli": [813, 814], "kernel_dens": [813, 814], "94114649": [813, 814], "83281226": [813, 814], "2071716": [813, 814], "two_point_correl": [813, 814], "get_arrai": [813, 814], "get_n_cal": [813, 814], "n_call": [813, 814], "get_tree_stat": [813, 814], "tree_stat": [813, 814], "breadth_first": [813, 814, 818], "return_log": [813, 814], "k_true": [813, 814], "k_ret": [813, 814], "breadth": [813, 814, 818, 978, 998], "dualtre": [813, 814], "sort_result": [813, 814, 821, 823, 824, 825, 1008], "radii": [813, 814], "reset_n_cal": [813, 814], "effective_metric_": [815, 816, 817, 819, 821, 823, 824, 825, 957], "callbl": 815, "effective_metric_params_": [815, 816, 817, 819, 821, 823, 824, 825], "outputs_2d_": [815, 823, 1006], "nearest_neighbor_algorithm": [815, 823, 824], "333": 815, "n_index": [815, 816, 817, 819, 821, 823, 824], "neigh_dist": [815, 816, 817, 819, 821, 823, 824, 825], "neigh_ind": [815, 816, 817, 819, 821, 823, 824, 825], "nearest_neighbors_algorithm": [816, 821], "nearer": [817, 825, 957], "x_dist_graph": 817, "silverman": [818, 1011], "binarytre": [818, 1000, 1004, 1008], "bandwidth_": 818, "log_dens": 818, "52955942": 818, "51462041": 818, "60244657": 818, "logprob": 818, "negative_outlier_factor": 819, "9821": 819, "0370": 819, "3697": 819, "shifted_opposite_lof_scor": 819, "opposite_lof_scor": 819, "narasimhan": 820, "chu": 820, "shrunken": [820, 996], "6567": 820, "6572": 820, "nbr": [821, 957], "neighborsclassifi": [821, 823, 824, 825, 996], "n_features_a": 822, "n_features_b": 822, "goldberg": [822, 957], "neighbourhood": [822, 957], "ncanip": 822, "neighbourhood_components_analysi": 822, "961904": 822, "outlier_label": [823, 1006], "outlier_label_": 823, "33333333": [823, 964], "x_cluster": 825, "warn_when_not_sort": 828, "efficiencywarn": [828, 1011], "sml": [829, 959], "pcd": [829, 959], "sweep": 829, "gibb": [829, 959, 974], "intercept_hidden_": 829, "intercept_visible_": 829, "h_samples_": 829, "osindero": [829, 959], "teh": [829, 959], "1527": 829, "1554": 829, "absp": 829, "fastnc": 829, "tieleman": [829, 959], "v_new": 829, "pseudo_likelihood": 829, "relu": [830, 831], "beta_1": [830, 831], "beta_2": [830, 831], "max_fun": [830, 831, 1006], "n_layer": [830, 831], "neuron": [830, 831, 952, 958], "tan": [830, 831, 958, 1003], "rectifi": [830, 831], "kingma": [830, 831, 958], "diederik": [830, 831, 958, 1011], "jimmi": [830, 831, 958, 1002, 1004], "gradual": [830, 831, 968], "effective_learning_r": [830, 831], "best_loss_": [830, 831], "intercepts_": [830, 831, 958], "n_layers_": [830, 831], "out_activation_": [830, 831], "geoffrei": [830, 831, 958, 1007, 1008, 1009, 1010], "connectionist": [830, 831], "glorot": [830, 831], "xavier": [830, 831, 1004, 1005, 1006, 1008, 1009], "yoshua": [830, 831, 967], "feedforward": [830, 831], "kaim": [830, 831], "delv": [830, 831], "surpass": [830, 831], "imagenet": [830, 831], "log_y_prob": 830, "time_step": 831, "named_transform": [832, 1011], "transform_list": 832, "s__p": 833, "n_transformed_featur": 833, "predict_log_proba_param": 833, "y_log_proba": 833, "predict_proba_param": 833, "analyst": 836, "x_tr": [836, 842, 845, 846, 847, 851, 853, 855, 857, 858, 862, 863], "accept_spars": [837, 892, 893, 1003], "inv_kw_arg": 837, "pickleabl": [837, 1002], "6931": 837, "3862": 837, "x_out": [837, 846, 847], "onward": [838, 1000], "n_bins_": 838, "int_": 838, "regener": 838, "xinv": 838, "tild": [839, 962, 964], "k_fit_rows_": 839, "k_fit_all_": 839, "1299": [839, 964], "1319": [839, 964], "n_samples1": 839, "n_samples2": 839, "k_new": 839, "neg_label": [840, 856], "y_type_": 840, "sparse_input_": 840, "tokyo": [841, 965], "amsterdam": [841, 965], "max_abs_": 842, "x_std": [843, 858, 964], "data_min_": [843, 1001], "data_max_": [843, 1001], "data_range_": [843, 1001], "unwieldi": 844, "fi": 844, "comedi": 844, "y_indic": 844, "yt": 844, "ands": 844, "categories_": [846, 847, 964, 1004], "unregular": [846, 868, 987, 1005], "intact": [846, 989], "infrequ": [846, 954, 996, 1010], "infrequent_if_exist": [846, 964], "drop_idx_": [846, 1007], "drop_idx": 846, "gender_femal": 846, "gender_mal": 846, "group_1": 846, "group_2": 846, "group_3": 846, "drop_enc": [846, 964], "drop_binary_enc": 846, "oh": [846, 1006], "infrequent_sklearn": [846, 964], "n_encoded_featur": [846, 847], "lenient": [847, 975], "min_degre": [848, 1009], "max_degre": [848, 1009], "powers_": 848, "n_output_features_": 848, "nystrom": [848, 1005, 1006], "featurewis": 849, "power_transform": [849, 861, 1004], "biometrika": [849, 860], "ignore_implicit_zero": [850, 861], "landmark": [850, 861, 964], "n_quantiles_": 850, "quantiles_": [850, 964, 1006], "references_": 850, "robustscal": [850, 862, 944, 964, 1001, 1002, 1004, 1006, 1007, 1008], "with_cent": [851, 862], "with_scal": [851, 862], "unit_vari": [851, 862, 1008], "iqr": [851, 862], "interquartil": [851, 862], "quartil": 851, "75th": 851, "q_min": [851, 862], "q_max": [851, 862], "center_": 851, "robust_scal": [851, 861, 1004], "interquartile_rang": 851, "bspline": 852, "n_features_out_": 852, "with_std": [853, 863, 964, 1004], "n_samples_seen": 853, "5a": 853, "randal": [853, 1000, 1010], "247": 853, "ahead": 856, "return_norm": [859, 1003], "notimplementederror": [859, 1003], "332": 860, "compute_inverse_compon": [864, 865, 966], "inverse_components_": [864, 865, 966, 1010], "2759": [864, 865], "afor": [864, 865], "baserandomproject": [864, 865], "ping": [865, 966, 1002, 1003], "density_": 865, "gaussianrandomproject": [865, 966, 997, 1010], "church": [865, 966], "kdd06_rp": 865, "cgi": 865, "uoa": 865, "gr": 865, "opta": 865, "0182": 865, "e2": [866, 950], "93lindenstrauss_lemma": 866, "sanjoi": [866, 966], "anupam": [866, 966], "gupta": [866, 966, 1003, 1004, 1007, 1008, 1009, 1010], "elementari": [866, 966], "663": [866, 962, 966], "11841": [866, 966], "1112658": [866, 966], "7894": [866, 966], "9868": [866, 966], "steadi": [867, 868], "baselabelpropag": [867, 1003], "xiaojin": 867, "zoubin": 867, "ghahramani": 867, "cmu": 867, "cald": 867, "carnegi": 867, "mellon": 867, "jerryzhu": 867, "label_prop_model": [867, 868], "clamp": [868, 967], "dengyong": 868, "bousquet": 868, "navin": 868, "lal": 868, "schoelkopf": 868, "termination_condition_": 869, "no_chang": 869, "all_label": 869, "33rd": [869, 967], "acl": [869, 967, 968], "stroudsburg": [869, 967], "196": [869, 967], "crammer_sing": [872, 955, 969, 996], "seldom": 872, "readonli": [872, 873, 1009, 1011], "raw_coef_": [872, 873], "smo": [872, 873], "526": 872, "1693": 872, "unsur": 873, "582": 873, "class_weight_": [874, 875, 876, 877, 878, 1011], "n_sv": [874, 875, 876, 877, 878, 969, 1006], "fit_status_": [874, 875, 876, 877, 878], "n_support_": [874, 875, 876, 877, 878, 969, 1006], "proba_": [874, 877, 1007], "probb_": [874, 877, 1007], "shape_fit_": [874, 875, 876, 877, 878], "n_dimensions_of_x": [874, 875, 876, 877, 878], "7798": 876, "0547": 876, "0556": 876, "0561": 876, "7332": 876, "unshift": 876, "impract": 877, "tube": [878, 969], "_tree": [880, 881, 882, 883, 997, 999], "decision_tree_learn": [880, 881, 970], "olshen": [880, 881, 970], "wadsworth": [880, 881, 970], "belmont": [880, 881, 970], "cutler": [880, 881], "cc_home": [880, 881], "htm": [880, 881], "ccp_path": [880, 881, 882, 883], "get_depth": [880, 881, 882, 883, 1005], "get_n_leav": [880, 881, 882, 883, 1005], "extra_tre": [882, 883], "8947": 882, "decision_tre": [884, 885, 886, 970], "out_fil": [884, 970], "leaves_parallel": 884, "special_charact": [884, 970], "fontnam": [884, 1009], "helvetica": [884, 886], "graphviz": [884, 970], "postscript": 884, "tpng": 884, "paint": [884, 886], "dot_data": [884, 970], "digraph": 884, "show_weight": 885, "feature_0": 885, "unrepresent": 887, "keyerror": [887, 1006], "popitem": 887, "lifo": 887, "input_nam": [891, 893, 919, 1010], "accept_large_spars": [892, 893, 1004], "ensure_2d": [892, 893], "allow_nd": [892, 893], "ensure_min_sampl": [892, 893], "ensure_min_featur": [892, 893], "y_numer": 892, "bsr": [892, 893, 1009], "x_convert": 892, "y_convert": 892, "array_convert": 893, "target_typ": [896, 919], "min_val": 896, "max_val": 896, "include_boundari": [896, 1010], "y_org": 897, "class_weight_vect": 897, "king": 897, "zen": 897, "sample_weight_vect": 898, "parenthes": 899, "type_filt": 901, "generate_onli": [903, 1006], "checks_gener": 903, "test_check_estim": 904, "check_estimators_fit_returns_self": 904, "array_lik": 907, "logdet": 907, "slogdet": 907, "6375861597263857": 907, "flip_sign": 909, "svd_lapack_driv": 909, "gesdd": 909, "p5": 909, "transposit": 909, "gesvd": 909, "conquer": 909, "unitari": 909, "vh": 909, "dot_product": 910, "deweight": 911, "min_batch_s": 912, "n_pack": [912, 913], "path_length": 914, "sliceabl": 915, "truthi": 916, "helloifeven": 916, "_x_is_even": 916, "say_hello": 916, "ducktyp": [917, 1000], "inner_max_num_thread": 922, "backend_param": 922, "register_parallel_backend": [922, 1004], "pyiodin": 922, "dask": [922, 975, 1004], "workload": [922, 974], "register_rai": 922, "backend_nam": 922, "oversubscript": [922, 1010], "threadpool": 922, "effective_n_job": 922, "tracking_select": 923, "reservoir_sampl": 923, "reservoir": 923, "make_default": 924, "parallelbackendbas": 924, "resampled_arrai": 925, "3x2": [925, 928], "shuffled_arrai": 928, "last_mean": 929, "last_var": 929, "last_n": 929, "return_sum_weight": 935, "sum_weight": 935, "all_or_ani": [938, 1006], "is_fit": 938, "__sklearn_is_fitted__": [938, 1009, 1010], "eg": 938, "substitut": [938, 975, 1002], "raise_except": 940, "array_sym": 940, "is_paramet": 942, "counterpart": [943, 951, 969, 984], "enclos": 943, "set_stat": 943, "bergstra": [943, 996, 997], "tournament": 943, "dispos": [943, 989], "n_resources_i": 943, "n_resources_0": 943, "n_candidates_i": 943, "n_candidates_0": 943, "r_0": 943, "mutal": 943, "n_resourc": 943, "983667": 943, "951958": 943, "947958": 943, "961009": 943, "955989": 943, "jamieson": 943, "talwalkar": 943, "desalvo": 943, "rostamizadeh": 943, "hyperband": 943, "bandit": 943, "multimetr": [943, 1006], "calibrated_forest": 943, "select__k": 943, "model__estimator__max_depth": 943, "imp": 944, "sophist": [944, 956], "14338": 944, "13286": 944, "15611": 944, "amelia": 944, "scientist": [944, 978], "roderick": 944, "rubin": 944, "1986": [944, 970], "ol2001": 944, "mask_missing_values_onli": 944, "mask_al": 944, "rr2007": 946, "2x_iy_i": 946, "vz2010": 946, "vvz2010": 946, "prod_i": 946, "ls2010": 946, "c_0": [946, 952], "tensorsketch": 946, "pp2013": 946, "wikic": 946, "ccf2002": 946, "mercer": 946, "langl": [946, 954, 968, 969], "rangl": [946, 954, 968, 969], "y_j": [946, 954, 956, 969], "obviat": 946, "dagm": 946, "vempati": 946, "jawahar": 946, "charikar": 946, "farach": 946, "colton": 946, "m2012": 947, "mu_k": 948, "cst": 948, "omega_": 948, "k0": 948, "h_l": 948, "extrema": 948, "119": [948, 999], "honei": 948, "stork": 948, "dilemma": 949, "valid_scor": 949, "w_0": 950, "w_p": 950, "x_p": 950, "34545455": 950, "13636": [950, 1005], "rifkin": 950, "lippert": 950, "2n_": 950, "softw": 950, "kim": [950, 1004, 1005, 1006, 1010], "koh": [950, 978], "lustig": 950, "boyd": 950, "gorinevski": 950, "c_p": 950, "cherkasski": 950, "yunqian": 950, "1714": 950, "ell_2": 950, "equiangular": 950, "weisberg": 950, "ell_0": [950, 954], "_coef": 950, "mp": 950, "ell_": 950, "posteriori": [950, 956], "radford": 950, "neal": [950, 1009], "50000013": 950, "49999993": 950, "ellipt": 950, "lambda_i": 950, "srikantan": 950, "tristan": 950, "fletcher": [950, 996, 1000], "nomenclatur": [950, 1002], "deliber": 950, "overparameter": 950, "ldot": [950, 954, 956, 958, 968], "w_l": 950, "min_w": 950, "iverson": 950, "broyden": 950, "goldfarb": 950, "shanno": 950, "shortcom": 950, "statsmodel": [950, 974], "aaron": [950, 999, 1000, 1001, 1006], "simon": [950, 978, 999, 1000, 1009, 1010], "93fletcher": 950, "93goldfarb": 950, "93shanno_algorithm": 950, "noah": 950, "multirespons": 950, "edm": 950, "agricultur": 950, "rainfal": 950, "bernouli": 950, "fraud": [950, 978], "cash": 950, "fraudul": [950, 978], "interrupt": 950, "drug": 950, "cure": 950, "entertain": 950, "mccullagh": 950, "nelder": 950, "boca": 950, "raton": 950, "chapman": 950, "hall": [950, 1003, 1007], "crc": 950, "31760": 950, "j\u00f8rgensen": 950, "monografia": 950, "matem\u00e1tica": 950, "2463": 950, "4337": 950, "7638": 950, "disappear": [950, 996], "photogrammetr": 950, "hypothes": 950, "paradigm": 950, "cartographi": 950, "fischler": 950, "boll": 950, "sunglok": 950, "choi": 950, "taemin": 950, "wonpil": 950, "93sen_estim": 950, "binom": 950, "infeas": [950, 957, 959], "k\u00e4rkk\u00e4inen": 950, "\u00e4yr\u00e4m\u00f6": 950, "h_": 950, "oarc": 950, "dae": 950, "bassett": 950, "jr": 950, "econometrica": 950, "econometr": 950, "portnoi": 950, "hare": 950, "tortois": 950, "paraboloid": 950, "w_3": 950, "w_4": 950, "w_5": 950, "z_1": 950, "z_2": 950, "z_3": 950, "z_4": 950, "z_5": 950, "streamlin": 950, "gotten": [950, 964], "necess": [951, 957], "strife": 951, "mother": 951, "baloo": 951, "song": 951, "jungl": 951, "rubric": 951, "defici": [951, 968], "hlle": 951, "revolv": 951, "belkin": 951, "niyogi": 951, "1373": 951, "1396": 951, "molecul": 951, "countri": 951, "jk": 951, "delta_": 951, "c_1": 951, "disentangl": 951, "legitim": 951, "tricki": 951, "die": 951, "favour": [951, 953, 1005], "noisier": 951, "5415": 951, "circuit": 951, "brief": 952, "num_featur": [952, 1011], "quantum": 952, "nutshel": 952, "36787944": 952, "89483932": 952, "58364548": 952, "51341712": 952, "83822343": 952, "7768366": 952, "facil": 953, "equi": 953, "agnost": [953, 962], "cue": 953, "came": 953, "quicker": 953, "unpract": 953, "analogi": [953, 954], "negat": 954, "top_k_accuraci": 954, "top_k_accuracy_scor": [954, 1008, 1010], "neg_brier_scor": [954, 1006], "f1_micro": [954, 1000], "f1_weight": [954, 1000], "f1_sampl": 954, "neg_log_loss": 954, "roc_auc_ovr": [954, 1006], "roc_auc_ovo": [954, 1006], "roc_auc_ovr_weight": [954, 1006], "roc_auc_ovo_weight": [954, 1006], "explained_variance_scor": [954, 999, 1003, 1010], "max_error": [954, 1005], "neg_mean_squared_log_error": 954, "mean_squared_log_error": [954, 1003, 1009], "neg_median_absolute_error": 954, "neg_mean_poisson_devi": 954, "neg_mean_gamma_devi": 954, "mean_gamma_devi": [954, 1006], "d2_pinball_scor": [954, 1010], "d2_tweedie_scor": [954, 1009], "wrong_choic": 954, "_error": 954, "my_custom_loss_func": 954, "693": 954, "protocol": [954, 999], "custom_scoring_funct": 954, "custom_scorer_modul": 954, "confusion_matrix_scor": 954, "test_tp": 954, "test_fn": 954, "untru": 954, "dividend": 954, "divisor": 954, "quotient": 954, "texttt": 954, "_class": 954, "youden": 954, "informed": 954, "mosley2013": 954, "kelleher2015": 954, "guyon2015": 954, "urbanowicz2015": 954, "escalant": 954, "escalera": 954, "maci\u00e0": [954, 1009], "saeed": 954, "statnikov": 954, "viega": 954, "chalearn": 954, "automl": [954, 974], "ijcnn": 954, "moslei": 954, "ijcv": 954, "urbanowicz": 954, "exstrac": 954, "evol": 954, "intel": 954, "cohen_kappa_scor": [954, 1001, 1003], "4285714285714286": 954, "manning2008": 954, "everingham2010": 954, "davis2006": 954, "flach2015": 954, "everingham": 954, "gool": 954, "winn": 954, "pascal": 954, "voc": 954, "goadrich": 954, "y_l": 954, "_l": 954, "emptyset": 954, "f_beta": 954, "hinge_loss": [954, 1000, 1008, 1009], "ne": [954, 957], "1738": 954, "matthews_corrcoef": [954, 996, 1002, 1003, 1010], "t_k": [954, 970], "ik": 954, "ki": 954, "kk": 954, "auroc": 954, "ht2001": 954, "fc2009": 954, "pd2000": 954, "f2006": 954, "f2001": 954, "inner_clf": 954, "c\u00e8sar": 954, "hernandez": 954, "orallo": 954, "modroiu": 954, "wikipediadet2017": 954, "martin1997": 954, "navratil2007": 954, "encyclopedia": 954, "utc": 954, "php": [954, 974], "detection_error_tradeoff": 954, "oldid": 954, "798982054": 954, "doddington": 954, "kamm": 954, "ordowski": 954, "przybocki": 954, "navractil": 954, "klusacek": 954, "acoust": 954, "icassp": 954, "honolulu": 954, "iv": 954, "232": 954, "brier1950": 954, "p_i": [954, 957], "bella2012": 954, "flach2008": 954, "bella": 954, "hern\u00e1ndez": 954, "ram\u00edrez": 954, "quintana": 954, "khosrow": 954, "pour": 954, "hershei": 954, "edson": [954, 1001], "matsubara": 954, "dagstuhl": 954, "seminar": 954, "schloss": 954, "leibniz": 954, "zentrum": 954, "lr_": 954, "brenner": 954, "gefel": 954, "coverage_error": [954, 1000, 1010], "label_ranking_average_precision_scor": [954, 1000, 1004, 1005, 1011], "label_ranking_loss": [954, 1001], "grade": 954, "unalt": 954, "epsilon_i": 954, "965": 954, "7083": 954, "log_": 954, "growth": [954, 1001, 1002], "commod": 954, "mapd": 954, "2e6": 954, "2666": 954, "meda": 954, "y_n": [954, 958, 968], "elicit": 954, "2500": 954, "mean_pinball_loss_95p": 954, "skill": 954, "mcfadden": 954, "d2_tweedie_score_15": 954, "d2_pinball_score_08": 954, "pear": 955, "y_dens": 955, "y_spars": 955, "advoc": 955, "financ": 955, "f3": 955, "y3": 955, "documentat": 955, "multi_target_forest": 955, "wind": 955, "75474165": 955, "147": 955, "03498585": 955, "03812219": 955, "12165031": 955, "12914884": 955, "46081961": 955, "8948621": 955, "44373091": 955, "88978285": 955, "62745778": 955, "02891072": 955, "48204257": 955, "03260883": 955, "165": 955, "34867495": 955, "52003279": 955, "92529176": 955, "25719016": 955, "84253": 955, "25193977": 955, "16443186": 955, "12274212": 955, "170388": 955, "80956739": 955, "16979946": 955, "72667194": 955, "50941682": 955, "50447799": 955, "149": [955, 996], "37967282": 955, "15699552": 955, "72850319": 955, "prod_": 956, "downarrow": 956, "spite": 956, "famous": 956, "serious": 956, "flair": 956, "2_y": 956, "mu_i": 956, "sigma_i": 956, "theta_i": 956, "cnb": 956, "mnb": 956, "inventor": 956, "alpha_i": [956, 969], "cj": [956, 999, 1000, 1001, 1002, 1003], "summat": [956, 958], "min_c": 956, "t_i": 956, "poorest": 956, "n_i": 956, "kdt": 957, "farawai": 957, "invent": 957, "orthotrop": 957, "bentlei": 957, "omohundro": 957, "characteris": 957, "unaffect": 957, "amort": 957, "cache_path": 957, "gettempdir": 957, "unsort": [957, 997, 1000, 1004], "5807": 957, "nca_pip": 957, "96190476": 957, "limits_": 957, "lx": 957, "x_m": 958, "leftmost": 958, "w_1x_1": 958, "w_2x_2": 958, "w_mx_m": 958, "backpropag": 958, "998": 958, "b_1": 958, "b_2": 958, "z_l": 958, "dfrac": [958, 964], "nabla": 958, "deduct": 958, "rumelhart": 958, "jiquan": 958, "ngiam": 958, "chuan": 958, "yifan": 958, "carolin": 958, "suen": 958, "backprop": [958, 968], "lecun": [958, 968], "orr": [958, 968], "strai": 959, "v_ih_j": 959, "b_iv_i": 959, "c_jh_j": 959, "h_j": 959, "v_i": 959, "b_i": 959, "sum_h": 959, "fantasi": 959, "particl": 959, "thoroughli": 959, "hereund": 960, "1443": 960, "1471": 960, "outlying": 960, "h2009": 961, "g2015": 961, "absurd": 961, "m2019": 961, "mc_clf": 961, "466": 961, "624": 961, "overlaid": 961, "obscur": 961, "cice": [961, 1010], "pd_": 961, "dx_c": 961, "footnot": [961, 974], "molnar": 961, "opaqu": 962, "x_val": 962, "y_val": 962, "probe": 962, "r_multi": 962, "1013": 962, "866": 962, "726": 962, "298": 962, "277": [962, 998], "376": 962, "115": 962, "i_j": 962, "min_max_scal": [964, 1001], "x_train_minmax": 964, "x_test_minmax": 964, "max_abs_scal": 964, "x_train_maxab": 964, "x_test_maxab": 964, "excess": [964, 1003], "unintention": 964, "kernelcenter": [964, 1006, 1010], "semidefinit": [964, 969], "scholkopf1998": 964, "1_": 964, "x_train_tran": 964, "x_test_tran": 964, "8pt": 964, "x_normal": 964, "firefox": 964, "chrome": 964, "safari": 964, "africa": 964, "meth": 964, "dragon": 964, "lexicon": 964, "infant": 964, "kid": 964, "teen": 964, "adult": 964, "senior": [964, 978], "citizen": 964, "retbin": 964, "x_1x_2": 964, "x_1x_3": 964, "x_2x_3": 964, "x_1x_2x_3": 964, "rung": 964, "eiler": 964, "marx": 964, "perperogl": 964, "sauerbrei": 964, "abrahamowicz": 964, "bmc": 964, "methodol": 964, "38629436": 964, "sixteenth": 966, "uai": 966, "craig": [966, 999, 1004], "boutili": 966, "mois\u00e9": 966, "goldszmidt": 966, "morgan": [966, 970, 972], "kaufmann": [966, 970, 1008], "ella": 966, "bingham": 966, "heikki": 966, "mannila": 966, "245": [966, 998], "explic": 966, "3947": 966, "671": 966, "kenneth": [966, 996, 997, 1002, 1003, 1010], "12th": 966, "287": 966, "296": 966, "x_new_invers": 966, "x_new_again": 966, "delalleau": 967, "216": 967, "aistat": 967, "gatsbi": 967, "ucl": 967, "uk": [967, 989], "fullpap": 967, "xi_i": 968, "slack": 968, "varepsilon": [968, 969], "t_0": 968, "l\u00e9on": [968, 1010], "_init_t": 968, "basesgd": 968, "eta_0": 968, "_t": 968, "svmsgd": 968, "pegaso": 968, "srebro": 968, "tsuruoka": 968, "tsujii": 968, "ananiad": 968, "afnlp": 968, "lin_clf": 969, "grasp": [969, 975], "sv": 969, "builtin": 969, "rapidli": [969, 978, 983], "qp": 969, "linear_svc": 969, "gram_train": 969, "gram_test": 969, "zeta": 969, "zeta_i": 969, "textrm": [969, 987], "q_": 969, "equiv": 969, "reparameter": 969, "wu": [969, 1000, 1008], "weng": 969, "975": 969, "1005": 969, "rong": 969, "aug": 969, "1871": 969, "1874": 969, "ofmulticlass": 969, "fitter": 970, "pariti": 970, "multiplex": 970, "export_graphviz": [970, 1001, 1003, 1009, 1011], "export_text": [970, 1005], "dumont": 970, "subwindow": 970, "beforehand": 970, "dichotomis": 970, "quinlan": 970, "multiwai": 970, "proprietari": 970, "ruleset": 970, "q_m": 970, "n_m": 970, "t_m": 970, "setminu": 970, "mk": 970, "probalist": 970, "_m": 970, "ge0": 970, "widetild": 970, "tradition": 970, "t_t": 970, "eff": 970, "predictive_analyt": 970, "troubleshoot": 972, "artwork": 972, "fund": 972, "spotifi": 972, "betawork": 972, "evernot": 972, "aweb": 972, "yhat": 972, "rangespan": 972, "birchbox": 972, "bestofmedia": 972, "phimeca": 972, "howaboutw": 972, "peerindex": 972, "datarobot": 972, "okcupid": 972, "love": [972, 989], "publica": 972, "machinali": 972, "solido": 972, "infonea": 972, "dataiku": 972, "otto": 972, "zopa": 972, "bnp": 972, "pariba": 972, "cardif": 972, "post1": [972, 994], "foot": 973, "gear": 973, "neuroimag": [973, 978], "astronom": 973, "pycon": 973, "thirti": 973, "nyc": [973, 978], "sister": 974, "sklearn_panda": 974, "sklearn_xarrai": 974, "xarrai": 974, "autoviml": 974, "tpot": 974, "featuretool": 974, "tempor": [974, 975], "neuraxl": 974, "neat": [974, 996], "checkpoint": 974, "funki": 974, "saver": 974, "evalml": 974, "neptun": 974, "mlop": 974, "sacr": 974, "dtreeviz": 974, "eli5": 974, "mlxtend": 974, "yellowbrick": 974, "deap": 974, "evolutionari": 974, "interchang": 974, "jpmml": 974, "porter": 974, "transpil": 974, "javascript": 974, "m2cgen": 974, "dart": 974, "haskel": 974, "rust": 974, "treelit": 974, "tslearn": 974, "sktime": 974, "hmmlearn": 974, "pomegran": 974, "crfsuit": 974, "nolearn": 974, "lasagn": 974, "theano": 974, "skorch": 974, "scikera": 974, "scikit_learn": 974, "feder": 974, "lego": 974, "subsembl": 974, "lightn": 974, "sdca": 974, "adagrad": 974, "svrg": 974, "nadaraya": 974, "gplearn": 974, "genet": 974, "multilearn": 974, "seglearn": 974, "libopf": 974, "fastfm": 974, "kmode": 974, "sphereclust": 974, "mise": 974, "giotto": 974, "tda": 974, "pymc": 974, "censor": 974, "lightfm": 974, "openrec": 974, "spotlight": 974, "gensim": 974, "nilearn": 974, "neuro": 974, "astroml": 974, "astronomi": 974, "msmbuilder": 974, "dissemin": 974, "chines": 974, "persian": 974, "spanish": 974, "disclaim": 974, "promis": 975, "eleven": 975, "incept": 975, "scala": 975, "numba": 975, "reinforc": 975, "era": 975, "7242": 975, "12147": 975, "5523": 975, "10733": 975, "13902": [975, 1006], "12800": 975, "12866": 975, "15550": 975, "5853": 975, "11805": 975, "15319": 975, "11977": 975, "12852": [975, 1006], "13911": [975, 1006], "amput": 975, "6284": 975, "beginn": 975, "priorit": [975, 1003], "4497": 975, "7646": 975, "6425": 975, "6424": 975, "8480": 975, "6231": 975, "8100": 975, "6599": 975, "6715": 975, "14582": 975, "3855": 975, "13227": 975, "6323": 975, "14180": [975, 1007], "9173": 975, "13146": [975, 1006], "8614": 975, "7608": 975, "5082": 975, "8243": 975, "searchgrid": 975, "6929": 975, "__array_function__": [975, 1006], "etl": [975, 978], "8370": 975, "6451": 975, "lifecycl": 975, "8157": 975, "7382": 975, "drift": 975, "11047": [975, 1006], "9326": 975, "slep011": 975, "1626": 975, "10463": 975, "id3": [976, 991], "cart": [976, 991], "touch": 977, "gdb": 977, "savetxt": 977, "cloneabl": 977, "datafil": 977, "printabl": 977, "indispens": 978, "stephen": [978, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009], "simmon": 978, "vp": 978, "athena": 978, "music": 978, "bernhardsson": 978, "pariet": [978, 996], "lear": 978, "visag": 978, "fantast": 978, "startup": 978, "bitli": 978, "chartbeat": 978, "digg": [978, 1003], "poncho": 978, "gilad": 978, "lotan": 978, "chief": 978, "chat": 978, "bread": 978, "butter": 978, "chaumond": [978, 1004], "offic": 978, "ayzenshtat": [978, 1004], "undergrad": 978, "professor": 978, "hotel": 978, "destin": 978, "agent": 978, "melani": [978, 1003, 1004], "awesom": 978, "stuff": 978, "randomizedpca": [978, 996, 998, 999, 1001, 1002, 1003], "boston": 978, "mdbecker": 978, "pydata_2013": 978, "ninja": 978, "thorough": 978, "notch": 978, "production": 978, "greg": [978, 1002, 1003, 1005, 1006], "lamp": 978, "founder": 978, "prototyp": 978, "jurgen": 978, "director": 978, "commerc": 978, "inventori": 978, "bertin": 978, "mahieux": 978, "invalu": 978, "vijai": [978, 999], "traine": 978, "impress": 978, "traffic": 978, "tenur": 978, "matchmak": 978, "weitzenfeld": 978, "tweet": 978, "ferenc": 978, "huszar": 978, "shop": 978, "ourselv": 978, "jeremi": [978, 1001, 1002, 1003, 1004, 1007, 1008], "achin": 978, "ceo": 978, "marketplac": 978, "frid": [978, 999], "radar": 978, "partnership": 978, "lebourgeoi": 978, "charron": [978, 999, 1000, 1007, 1008, 1009], "cornerston": 978, "sheep": 978, "featureforg": 978, "rafael": [978, 997, 998, 1000, 1003], "carrascosa": [978, 1000], "law": 978, "semiconductor": 978, "fab": [978, 1006, 1007], "bleed": 978, "chip": 978, "smartphon": 978, "automobil": 978, "trent": [978, 1002], "mcconaghi": 978, "rapid": 978, "immens": 978, "thorsten": 978, "kranz": 978, "coma": 978, "dss": 978, "douetteau": 978, "b2c": 978, "retail": 978, "palladium": 978, "rammig": [978, 1002], "peer": 978, "billion": 978, "gbp": 978, "grate": 978, "vlasio": [978, 1003], "vasilei": [978, 1003], "petfood": 978, "cocoa": 978, "worldwid": 978, "toolset": 978, "equip": 978, "fitzk": 978, "sr": 978, "fondat": 978, "s\u00e9bastien": [978, 1002, 1004], "conort": 978, "salmon": 980, "nine": 980, "sentiment": 981, "cli": 981, "doctest_mod": 981, "hardest": 982, "tightli": 983, "knit": 983, "x_fold": 984, "array_split": 984, "y_fold": 984, "934": 984, "956": 984, "train_indic": 984, "test_indic": 984, "963": 984, "922": 984, "930": 984, "96388889": 984, "92222222": 984, "9637883": 984, "93036212": 984, "96578289": 984, "92708922": 984, "96681476": 984, "96362897": 984, "93192644": 984, "0077": 984, "944": 984, "00375": 984, "lfw_": 985, "_lfw": 985, "gerhard_schroed": 985, "donald_rumsfeld": 985, "tony_blair": 985, "colin_powel": 985, "george_w_bush": 985, "estimated_param_": 986, "iris_x": 987, "iris_i": 987, "iris_x_train": 987, "iris_y_train": 987, "iris_x_test": 987, "iris_y_test": 987, "pave": 987, "paltri": 987, "exabyt": 987, "30349955": 987, "237": 987, "63931533": 987, "510": 987, "53060544": 987, "73698041": 987, "13170937": 987, "81458798": 987, "84845219": 987, "60648906": 987, "51961675": 987, "09517222": 987, "5854": 987, "5855": 987, "occam": 987, "razor": 987, "best_alpha": [987, 996], "025118864315095794": 987, "508": 987, "knew": 988, "taxonomist": 988, "face_compress": 988, "x_approx": 988, "images_approx": 988, "18565811e": 988, "19346747e": 988, "43026679e": 988, "text_analyt": 989, "skeleton": [989, 999], "sklearn_tut_workspac": 989, "cp": 989, "work_directori": 989, "tutorial_hom": 989, "fetch_data": 989, "lang": 989, "newsweed": 989, "netnew": 989, "bydat": 989, "twenty_train": 989, "holder": 989, "2257": 989, "sd345": 989, "collier": 989, "laserjet": 989, "iii": [989, 1010], "hampton": 989, "4gb": 989, "count_vect": 989, "x_train_count": 989, "35788": 989, "4690": 989, "downscal": 989, "tf_transform": 989, "x_train_tf": 989, "tfidf_transform": 989, "x_train_tfidf": 989, "na\u00efv": 989, "docs_new": 989, "opengl": 989, "x_new_count": 989, "x_new_tfidf": 989, "text_clf": 989, "twenty_test": 989, "docs_test": 989, "8348": 989, "9101": [989, 1004], "1502": 989, "380": 989, "tfidf__use_idf": 989, "searcher": 989, "gs_clf": 989, "workspac": 989, "fear": 989, "fire": 989, "exercise_xx_script": 989, "arg1": 989, "arg2": 989, "arg3": 989, "mortem": 989, "charngramanalyz": 989, "exercise_01_language_train_model": 989, "exercise_02_senti": 989, "movie_review": 989, "txt_sentoken": 989, "cpickl": 989, "polar": 989, "subtleti": 991, "subscrib": 994, "gzip": 996, "bzip2": 996, "decompress": 996, "auc_scor": [996, 998], "kernc": [996, 1010], "led": 996, "probabilisticpca": [996, 999], "hmm": [996, 997, 998, 999, 1001], "gaussianhmm": 996, "multinomialhmm": 996, "n_gram_rang": 996, "alexi": [996, 999, 1000, 1003], "mignon": [996, 999, 1000, 1003], "subhodeep": [996, 997, 998], "moitra": [996, 997, 998], "yannick": [996, 998], "schwartz": [996, 998, 1010], "duckworth": 996, "benediktsson": [996, 997, 998], "marko": [996, 1005, 1006], "burjek": 996, "pinto": 996, "abraham": [996, 997, 1002, 1006], "hoenig": 996, "flyingimmidev": 996, "francoi": [996, 1009], "savard": 996, "hann": 996, "schulz": 996, "welind": 996, "companioni": 996, "brandyn": 996, "bussonni": [996, 1008], "matthia": [996, 998, 999, 1002, 1003, 1004, 1008, 1011], "pierr": [996, 1004, 1005, 1007, 1009, 1011], "astolfi": 996, "huiginn": 996, "goodman": [996, 1001], "ludwig": 996, "schwardt": 996, "hervieu": 996, "sergio": [996, 998, 999, 1008], "medina": [996, 998], "sheerman": 996, "buguen": 996, "seq_dataset": [996, 1006], "weight_vector": [996, 1006], "reuben": 996, "costin": 996, "_basehmm": 996, "neighborsregressor": 996, "gone": [996, 997], "vbgmm": [996, 1000, 1002], "_pvalu": 996, "charset": [996, 998], "test_fract": 996, "train_fract": 996, "239": 996, "marek": 996, "fcostin": 996, "adrien": 996, "gaidon": 996, "joona": 996, "sillanp\u00e4\u00e4": 996, "mccarthi": [996, 1004], "roi": [996, 1010], "hyunjin": 996, "ibay": 996, "scheidegg": 996, "clair": 996, "revillet": 996, "conrad": [996, 997, 1011], "meng": [996, 997, 1000, 1002, 1003], "xinfan": [996, 997, 1000], "udi": 996, "weinsberg": 996, "janso": 996, "palafox": 996, "overwrite_": 996, "copy_": 996, "buffer_mb": 996, "sparse_encode_parallel": 996, "accident": [996, 1000, 1005], "basedictionarylearn": 996, "sparsecodingmixin": 996, "fast_svd": 996, "arnold": [996, 997], "bala": [996, 999], "subrahmanyam": [996, 999], "varanasi": [996, 999], "draxu": 996, "eickenberg": [996, 998, 999, 1000, 1001], "bogdan": 996, "trach": 996, "f\u00e9lix": [996, 998, 999, 1000, 1004], "antoin": [996, 998, 999, 1000, 1003], "fortin": [996, 998, 999, 1000], "manuel": [996, 1000, 1004, 1005, 1008, 1009], "caicedo": 996, "carvaj": 996, "tiziano": 996, "zito": [996, 1009], "jean": [996, 999, 1000, 1001, 1002, 1003, 1009], "kossaifi": [996, 1000, 1001], "thumbnail": 996, "bugfix": [996, 1010], "univariate_select": 996, "mldata": [996, 1004], "pietro": [996, 999], "berk": 996, "macosx": 996, "xarg": 996, "bscikit": 996, "cross_val": 996, "bcross_val": 996, "lurk": 996, "l1_distanc": 996, "387": 996, "168": 996, "andi": [996, 1003], "amit": [996, 1010], "salvator": [996, 1010], "masecchia": 996, "schut": 996, "metaireau": [996, 999], "bryan": [996, 999, 1005, 1006, 1009], "silverthorn": 996, "minwoo": 996, "luca": [996, 1006, 1007, 1008, 1009], "wiman": 996, "schl\u00fcter": [996, 1004], "malet": 996, "miott": [996, 999], "feth": 996, "arezki": 996, "yamin": 996, "notes_neighbor": 996, "netbsd": 996, "kamel": 996, "ibn": 996, "hassen": 996, "derouich": 996, "virgilefritsch": 996, "example_gaussian_process_plot_gp_regress": 996, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 996, "tast": 996, "2x": 996, "10x": 996, "200x": 996, "laur": 996, "fouqu": 996, "ronan": [996, 999, 1004], "amicel": [996, 999], "osendorf": [996, 997], "gmmhmm": [996, 997], "latex": 996, "mlcomp": 996, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 996, "pybrain": 996, "262": 996, "rokem": [996, 1002], "100x": [996, 999], "obsolet": 996, "attrselect": 996, "unmaintain": 996, "lite": 996, "filo": [996, 999], "mailhot": 996, "huard": 996, "dave": [996, 1003, 1004, 1010], "morril": 996, "schofield": 996, "oliph": 996, "pearu": 996, "peterson": [996, 998], "0d": 997, "marchman": [997, 998], "hrishikesh": [997, 998], "huilgolkar": [997, 998], "bastiaan": [997, 998], "diego": [997, 998], "molla": [997, 998], "cunha": [997, 998], "almeida": [997, 998, 1009], "rolando": [997, 998], "espinoza": [997, 998], "fuent": [997, 998], "formerli": [997, 1000, 1002, 1003], "beauchamp": [997, 1000], "longstand": [997, 1003], "shaun": 997, "jackman": 997, "winterman": 997, "seberg": 997, "n_atom": 997, "label_propag": 997, "learn_rat": 997, "basegradientboost": 997, "mean_square_error": 997, "gmm_": 997, "eig_tol": 997, "chunk_siz": 997, "zero_one_scor": 997, "aymer": 997, "masurel": 997, "syhw": [997, 998], "corei": [997, 1004, 1005], "lynch": [997, 1003], "shu": [997, 1000, 1004], "tadej": [997, 998], "jane\u017e": [997, 998], "caje": 997, "tiago": [997, 1001], "nune": 997, "cow": 997, "anz": 997, "jauvin": 997, "jacqu": [997, 999], "kvam": [997, 999], "doug": [997, 998, 1008], "coleman": [997, 998], "dickerson": 997, "approximateident": 997, "veronda": 997, "matti": [997, 1000, 1001], "lyra": [997, 1000, 1001], "mikhail": [997, 998, 999, 1002, 1003], "korobov": [997, 998, 999, 1002, 1003], "alejandro": [997, 1002], "weinstein": 997, "deil": [997, 1007, 1008], "nizhibitski": 997, "coelho": [997, 999, 1000, 1004], "miroslav": [997, 998, 1001], "batchkarov": [997, 1001], "pavel": [997, 1005], "bob": [997, 1003], "dengemann": 997, "emanuel": 997, "x006": 997, "justin": [998, 1004, 1008], "stochastic_gradi": [998, 999, 1005], "crombach": 998, "sheet": 998, "jaccard_similarity_scor": [998, 1000, 1005], "jochen": 998, "wersd\u00f6rfer": 998, "sinayev": 998, "unpleas": 998, "novic": 998, "tini": [998, 1011], "hyperlink": 998, "luessi": 998, "philipp": [998, 999, 1002], "gervai": [998, 999], "cleverless": 998, "nosetest": 998, "compute_import": 998, "return_model": [998, 1000], "itergrid": 998, "tacitli": 998, "charset_error": 998, "precompute_gram": 998, "2224": 998, "jim": 998, "holmstr\u00f6m": 998, "steven": [998, 999, 1001, 1003, 1004, 1009], "gryze": [998, 1001], "sergeyf": 998, "ben": [998, 999, 1000, 1003, 1004, 1005, 1008], "speer": 998, "federico": [998, 999, 1004, 1005, 1010], "vaggi": [998, 999], "raul": [998, 999], "garreta": [998, 999], "gei": 998, "flaxman": [998, 1000], "denton": 998, "cockburn": 998, "dougal": [998, 1000, 1001, 1003, 1004, 1005, 1006], "sutherland": [998, 1000, 1001, 1003, 1004, 1005, 1006], "ian": [998, 1000, 1005, 1006, 1008], "ozsvald": 998, "johann": [998, 999, 1004, 1006, 1007, 1010], "sch\u00f6nberger": [998, 999], "szabo": [998, 999], "roland": [998, 999], "imran": [998, 999, 1000], "haqu": [998, 999, 1000], "karayev": 998, "jamestwebb": [998, 999], "abhijeet": 998, "kolh": 998, "velkov": 998, "fazlul": 998, "shahriar": 998, "felix": [998, 1003, 1004, 1006, 1008, 1009, 1010], "brockherd": 998, "harikrishnan": 998, "jack": [998, 1001, 1009, 1010], "hale": [998, 1010], "jakemick": 998, "mcdermott": 998, "zwinck": 998, "vredevoogd": [998, 999], "pati": 998, "ekman": [998, 1002], "shubernetskii": 998, "naoki": [998, 1008], "orii": 998, "seamu": 998, "absher": 998, "feldman": [998, 1003, 1004, 1005, 1006], "stefano": 998, "lattarini": 998, "steve": [998, 1000, 1004, 1009], "koch": [998, 1004, 1005, 1007, 1008], "sturla": 998, "molden": 998, "jarosch": 998, "nikolai": [999, 1000, 1001, 1002, 1004, 1005, 1010], "mayorov": [999, 1000, 1001, 1002], "msvc": 999, "mingw": 999, "resourcewarn": 999, "calvin": [999, 1000], "gile": [999, 1000], "billing": [999, 1000, 1001], "safe_realloc": 999, "bradshaw": [999, 1000, 1003], "pico": [999, 1000], "restor": [999, 1004, 1005, 1006, 1007], "raff": 999, "__array__": [999, 1006], "jeffrei": [999, 1002], "blackburn": [999, 1002], "danni": [999, 1000, 1001], "sullivan": [999, 1000, 1001], "wignal": [999, 1000, 1006, 1007], "grid_tograph": 999, "gracefulli": [999, 1000], "gaussianprocess": 999, "novak": 999, "tulloch": [999, 1000], "wardagglomer": 999, "wardclust": 999, "mean_l1_ratio": 999, "phlypo": 999, "312": 999, "bommarito": [999, 1000], "brook": [999, 1000, 1008], "osborn": [999, 1000], "eltermann": 999, "bwignal": 999, "ankit": [999, 1006, 1008, 1010], "agraw": [999, 1004, 1010, 1011], "carei": [999, 1000, 1001, 1002, 1003], "ugurthemast": [999, 1000], "schumach": [999, 1000, 1001], "baptist": [999, 1007], "lagard": 999, "rajat": [999, 1006], "khanduja": 999, "pascual": 999, "ignacio": 999, "rossi": 999, "s\u00e4ger": [999, 1002], "ilambharathi": [999, 1000], "kanniah": [999, 1000], "sdenton4": 999, "alyssa": [999, 1003], "amo": 999, "waterland": 999, "murad": 999, "maud": 999, "karol": 999, "pysniak": 999, "cgohlk": [999, 1000], "jacobsen": 999, "collin": 999, "kaushik94": 999, "erwin": 999, "marsi": 999, "csytraci": 999, "lk": 999, "laurent": [999, 1000, 1003, 1004, 1011], "direr": [999, 1000, 1003, 1004], "shilt": 999, "yoshiki": [999, 1002], "v\u00e1zquez": 999, "yung": [999, 1002], "siang": 999, "liau": 999, "abhishek": [999, 1000, 1006, 1010], "thakur": [999, 1000], "rohit": [999, 1000, 1004, 1005], "sivaprasad": [999, 1000], "amormachin": 999, "oscar": [999, 1003], "carlsson": 999, "nanta": 999, "nardelli": 999, "jess010": 999, "kowalski87": 999, "clegg": 999, "ralf": [999, 1002, 1003], "gommer": [999, 1002, 1003], "aft": 999, "rupesh": 999, "srivastava": 999, "ryan": [999, 1002, 1004, 1005], "skipper": [999, 1001, 1002], "seabold": [999, 1001, 1002], "stefan": [999, 1000, 1004, 1006], "walt": [999, 1000, 1004], "allen": [999, 1001, 1003, 1006], "riddel": [999, 1001, 1003], "valentin": [999, 1001, 1011], "haenel": 999, "myer": [999, 1003], "yoni": 999, "meshulam": 999, "yuri": [999, 1001], "zaytsev": 999, "adrinjalali": [999, 1008], "ai8rahim": 999, "alemagnani": 999, "chalmerlow": 999, "dziki": 999, "dro\u017cd\u017c": 999, "matrixorz": 999, "popo": 999, "samuela": 999, "fran\u00e7oi": 999, "boulogn": 999, "ethan": [999, 1002], "guilherm": 999, "trein": 999, "heuer": 999, "ivicajov": 999, "rouli": 999, "eduardo": [999, 1001, 1009, 1010], "ari\u00f1o": 999, "rubia": 999, "jell": 999, "zijlstra": 999, "eddi": 999, "jansson": 999, "ca\u00f1ardo": 999, "alastuei": 999, "joseph": [999, 1000, 1001, 1002, 1008, 1010], "perla": 999, "ricardo": [999, 1009, 1010], "kenta": 999, "sato": 999, "medri": 999, "luce": 999, "pierron": 999, "danielweitzenfeld": 999, "thompson": 999, "brett": [999, 1001, 1002, 1003, 1004], "feurer": [999, 1004], "earl": 999, "hank": 999, "orr\u00f9": 999, "lunt": 999, "kearn": 999, "pawe\u0142": [999, 1003, 1008, 1009], "mandera": 999, "zambelli": 999, "staubda": 999, "dedupl": 1000, "heilman": [1000, 1001], "precompute_dist": [1000, 1007], "lshforest": [1000, 1003], "qiang": 1000, "luo": 1000, "clemen": 1000, "brunner": 1000, "matteo": [1000, 1002, 1010], "visconti": 1000, "oleggio": 1000, "castello": 1000, "linkage_tre": 1000, "jatin": [1000, 1002], "shah": [1000, 1001, 1002, 1008], "saurabh": [1000, 1001, 1002, 1003, 1004, 1008], "jha": [1000, 1006, 1010], "blanchard": [1000, 1001], "michal": [1000, 1003, 1009, 1010], "romaniuk": 1000, "gilmor": 1000, "stapl": 1000, "hedyati": 1000, "antoni": [1000, 1002, 1008], "parel": 1000, "herv\u00e9": 1000, "bredin": 1000, "hasil": 1000, "sharma": [1000, 1002, 1004, 1005, 1007, 1008, 1010], "download_20newsgroup": 1000, "friend": 1000, "cathi": [1000, 1006], "deng": [1000, 1001, 1002], "dawson": 1000, "garret": 1000, "hanna": [1000, 1001, 1007], "wallach": [1000, 1001], "yan": [1000, 1008], "artem": [1000, 1003], "sobolev": 1000, "fit_ovr": 1000, "predict_ovr": 1000, "predict_proba_ovr": 1000, "fit_ovo": 1000, "predict_ovo": 1000, "fit_ecoc": 1000, "predict_ecoc": 1000, "lamond": 1000, "outweigh": 1000, "thresh": 1000, "akshai": [1000, 1003, 1008], "akshayah3": 1000, "aldrian": 1000, "obaja": 1000, "ander": [1000, 1006], "aagaard": 1000, "cranenburgh": 1000, "walker": 1000, "banilo": [1000, 1001], "barmalei": [1000, 1001], "benedikt": 1000, "koehler": 1000, "bhsu": 1000, "bori": [1000, 1008], "feld": 1000, "borja": 1000, "ayerdi": 1000, "boyuan": [1000, 1001, 1002], "brent": [1000, 1004, 1005], "pedersen": 1000, "celeo": 1000, "chebee7i": 1000, "stade": 1000, "schuldt": 1000, "christof": [1000, 1001], "angermuel": [1000, 1001], "daiki": 1000, "aminaka": 1000, "danfrankj": 1000, "dmitrij": 1000, "milajev": 1000, "floydsoft": 1000, "garrett": 1000, "gpassino": 1000, "gwulf": [1000, 1001], "hampu": 1000, "bengtsson": 1000, "harri": [1000, 1002, 1008, 1009], "mavroforaki": [1000, 1002], "helder": [1000, 1009, 1010], "herv": 1000, "hugu": 1000, "salamin": 1000, "ism": 1000, "dlabal": 1000, "javier": 1000, "l\u00f3pez": [1000, 1004, 1005, 1008], "pe\u00f1a": 1000, "jdcaballero": 1000, "jeff": [1000, 1002, 1009, 1010], "hammerbach": 1000, "helmu": 1000, "kaicheng": 1000, "markham": [1000, 1007, 1008], "lagacheri": 1000, "leepei": 1000, "loic": [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "estev": [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "luka": [1000, 1007], "michelbach": 1000, "mario": [1000, 1002, 1010], "krell": [1000, 1002], "ku": [1000, 1001], "mateusz": [1000, 1007, 1008], "susik": 1000, "mehdi": [1000, 1009], "cherti": 1000, "mlg": 1000, "montecchio": 1000, "okal": 1000, "billi": 1000, "\u00f3scar": [1000, 1001, 1002, 1003], "n\u00e1jera": [1000, 1001, 1002, 1003], "puggioni": 1000, "pratap": [1000, 1003, 1010], "vardhan": 1000, "pvnguyen": 1000, "queqichao": 1000, "rahiel": 1000, "kasim": 1000, "mason": 1000, "saket": [1000, 1001, 1008], "choudhari": [1000, 1001, 1010], "sam": [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "nichol": 1000, "sethdandridg": 1000, "sinhrk": [1000, 1001], "snuderl": 1000, "ott": 1000, "tjoa": 1000, "swu": 1000, "zimmer": [1000, 1010], "tejesh95": 1000, "terrycojon": 1000, "delteil": 1000, "toma": 1000, "kazmar": 1000, "trevorstephen": [1000, 1002], "tttthomasssss": 1000, "tzu": 1000, "kuo": 1000, "ugurcaliskan": 1000, "vinayak": [1000, 1001, 1002, 1004, 1005], "mehta": [1000, 1001, 1002, 1004, 1005, 1006, 1007], "vjacheslav": 1000, "murashkin": 1000, "wadawson": 1000, "x0l": 1000, "vendor": [1001, 1004, 1005], "6147": 1001, "presort": [1001, 1006], "5857": 1001, "mcculloh": [1001, 1002], "6258": 1001, "giorgio": [1001, 1002, 1003], "patrini": [1001, 1002, 1003], "joe": 1001, "jevnik": 1001, "labelkfold": [1001, 1002], "labelshufflesplit": [1001, 1002], "mcfee": [1001, 1002], "3659": 1001, "4738": 1001, "projectedgradientnmf": 1001, "nls_max_it": 1001, "erick": 1001, "moodi": 1001, "4025": 1001, "mean_shift_": 1001, "mean_shift": [1001, 1004], "martino": 1001, "sorbaro": 1001, "cori": 1001, "konstantin": [1001, 1002, 1003], "shmelkov": 1001, "backlink": 1001, "jaidev": 1001, "deshpand": [1001, 1002], "dictlearn": 1001, "kashif": 1001, "rasul": [1001, 1003, 1004], "galvez": 1001, "sonni": 1001, "hu": [1001, 1004, 1006], "santi": [1001, 1003, 1004], "villalba": [1001, 1004, 1008], "5186": 1001, "stolbunov": 1001, "graham": [1001, 1002], "clenaghan": [1001, 1002], "clyde": 1001, "subproblem": 1001, "forestclassifi": 1001, "ankur": 1001, "ankan": 1001, "henri": [1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010], "5431": 1001, "buddha": 1001, "prakash": [1001, 1003, 1009], "5182": 1001, "lamb": [1001, 1009], "5282": 1001, "5355": 1001, "5360": 1001, "4478": 1001, "5337": 1001, "4362": 1001, "5495": 1001, "elvi": [1001, 1002, 1003], "dohmatob": [1001, 1002, 1003], "data_min": 1001, "data_max": 1001, "data_rang": 1001, "_learntselectormixin": 1001, "gradientboost": 1001, "metatransfom": 1001, "load_lfw_pair": 1001, "wardagglom": 1001, "residues_": 1001, "indicator_matrix_": 1001, "adithya": 1001, "ganesh": 1001, "akitti": 1001, "alexei": 1001, "grigorev": 1001, "ali": [1001, 1004, 1005, 1008, 1009], "baharev": 1001, "ando": 1001, "saaba": 1001, "anish": [1001, 1002], "anthoni": [1001, 1003, 1004], "erling": 1001, "rouvinen": 1001, "rachez": [1001, 1002], "benjaminirv": 1001, "naul": [1001, 1002], "gohlk": 1001, "bourguignat": 1001, "cindi": [1001, 1009], "sridharan": 1001, "kronovet": 1001, "data1010": 1001, "dotson": 1001, "djipei": [1001, 1002], "dmitri": [1001, 1003, 1004, 1005, 1009], "spikhalskii": 1001, "donn": 1001, "duart": [1001, 1009], "caro": 1001, "larson": [1001, 1005, 1006, 1008, 1010], "fernando": [1001, 1008], "carrillo": 1001, "eckert": 1001, "zalkow": 1001, "ganiev": [1001, 1002, 1003], "ibraim": [1001, 1002, 1003], "giorgiop": 1001, "gryllo": [1001, 1004], "prokopi": [1001, 1004], "hsuan": 1001, "tien": 1001, "ishank": [1001, 1002, 1003], "gulati": [1001, 1002, 1003], "jeffrey04": [1001, 1002], "jfraj": 1001, "jiali": 1001, "mei": [1001, 1006], "kirkham": [1001, 1002, 1004], "wittenau": 1001, "loyal": 1001, "jungkook": 1001, "park": [1001, 1006, 1008], "kamalakerdadi": [1001, 1002], "kyler": 1001, "lilian": [1001, 1002], "besson": [1001, 1002], "loui": [1001, 1002, 1006, 1008, 1010], "tiao": [1001, 1002], "marktab": 1001, "spacek": 1001, "martinbpr": [1001, 1002], "martinosorb": 1001, "maryanmorel": [1001, 1002], "masafumi": 1001, "oyamada": 1001, "krump": 1001, "kolganov": 1001, "mbilling": 1001, "mhg": 1001, "patterson": 1001, "omer": 1001, "katz": [1001, 1008, 1009], "pauli": 1001, "virtanen": 1001, "fischer": [1001, 1002], "pianomania": 1001, "preston": [1001, 1002, 1003], "parri": [1001, 1002, 1003], "rohan": [1001, 1002, 1004, 1005, 1009], "ramanath": 1001, "bansod": [1001, 1002, 1003], "scls19fr": 1001, "saeger": [1001, 1002, 1003], "shivan": 1001, "sornarajah": 1001, "simonpl": 1001, "sseg": 1001, "hoover": [1001, 1002, 1003, 1005], "seguin": 1001, "theodor": 1001, "vasiloudi": 1001, "freita": [1001, 1003, 1004], "pereira": [1001, 1004, 1005], "timothi": [1001, 1009], "hopper": 1001, "tokoroten": 1001, "vstolbunov": 1001, "wangz10": 1001, "yucheng": 1001, "zhauniarovich": 1001, "zac": 1001, "stewart": [1001, 1006, 1009], "zhai_pro": 1001, "zichen": 1001, "7946": 1002, "8355": 1002, "9010": 1002, "8040": 1002, "9149": 1002, "aman": [1002, 1003, 1004, 1010], "dalmia": [1002, 1003, 1004], "nate": [1002, 1003, 1009], "guerin": [1002, 1003], "lebedev": [1002, 1003], "utilis": 1002, "6497": 1002, "7724": 1002, "bing": [1002, 1003], "explained_variance_ratio": 1002, "7632": 1002, "jpfrancoia": [1002, 1003], "7676": 1002, "moham": [1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "affan": 1002, "7756": 1002, "7786": 1002, "srivatsan": [1002, 1003, 1006], "7799": 1002, "7490": [1002, 1003], "6282": 1002, "7301": 1002, "6178": 1002, "7680": 1002, "n_iters_": 1002, "7553": 1002, "ekaterina": [1002, 1003, 1004, 1005, 1007], "krivich": [1002, 1003, 1005], "5874": 1002, "7593": 1002, "7594": 1002, "7660": 1002, "7750": 1002, "7732": 1002, "artsion": 1002, "lieu": [1002, 1003], "grid_scores_": [1002, 1008, 1009], "leaveonelabelout": 1002, "leaveplabelout": 1002, "plural": 1002, "mean_tim": 1002, "std_time": 1002, "3204": 1002, "5291": 1002, "sounder": 1002, "7295": 1002, "5299": 1002, "bravi": 1002, "fouchet": 1002, "calinski_harabaz_scor": [1002, 1004], "harabaz": 1002, "6586": 1002, "4294": 1002, "6667": 1002, "6954": 1002, "unveil": 1002, "yelit": 1002, "basebag": [1002, 1004], "staub": 1002, "5805": 1002, "5251": 1002, "imacul": 1002, "1000x": 1002, "arfa": 1002, "6691": 1002, "6913": 1002, "5762": 1002, "utkarsh": [1002, 1003, 1004, 1005], "upadhyai": [1002, 1003, 1004, 1005], "6846": 1002, "5929": 1002, "podshumok": [1002, 1003], "6173": 1002, "ryad": 1002, "zenin": 1002, "devashish": 1002, "asish": [1002, 1003], "dowl": 1002, "6697": 1002, "ori": 1002, "ziv": 1002, "sear": 1002, "merritt": 1002, "7325": 1002, "7239": 1002, "hong": [1002, 1004, 1008, 1009, 1010], "guangguo": 1002, "jensen": [1002, 1008], "7419": 1002, "gregori": [1002, 1006, 1007, 1008, 1009], "stupp": [1002, 1003], "bernardo": 1002, "stein": 1002, "sparse_func": [1002, 1008], "incr_mean_variance_axi": [1002, 1008], "fuse": 1002, "7049": 1002, "7152": 1002, "load_boston": [1002, 1004, 1009], "7154": 1002, "manvendra": [1002, 1003], "singh": [1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "5540": 1002, "7248": 1002, "6764": 1002, "wenhua": 1002, "6817": 1002, "6902": 1002, "leonieborn": 1002, "5141": 1002, "4995": 1002, "5012": 1002, "_transform_select": 1002, "7194": 1002, "caio": [1002, 1004, 1006], "oliveira": [1002, 1004, 1006, 1010], "6182": 1002, "6121": 1002, "6472": 1002, "7350": 1002, "russel": [1002, 1003], "smith": [1002, 1003, 1004, 1005, 1006, 1008], "7159": 1002, "yichuan": [1002, 1003], "5460": 1002, "document_clust": 1002, "7353": 1002, "_search": 1002, "_check_param_grid": 1002, "xrang": 1002, "7323": 1002, "viacheslav": 1002, "kovalevskyi": 1002, "7101": 1002, "residual_metr": 1002, "6651": 1002, "reorgan": 1002, "7187": 1002, "7260": 1002, "sebasti\u00e1n": 1002, "vanrel": 1002, "leaveplabelsout": 1002, "6660": 1002, "neg_": 1002, "unprefix": 1002, "7261": 1002, "aditya": [1002, 1004, 1005, 1006, 1010], "joshi": [1002, 1004, 1010], "loginov": 1002, "minyushkin": 1002, "rudi": 1002, "abadi": [1002, 1003], "saint": 1002, "alexfield": 1002, "alvaro": [1002, 1004], "ulloa": 1002, "alyssaq": 1002, "amlan": 1002, "kar": 1002, "giessel": 1002, "jackson": [1002, 1003, 1005], "murrai": [1002, 1003], "arafat": 1002, "archit": 1002, "asnt": 1002, "b0noi": 1002, "behzad": 1002, "tabibian": 1002, "kratzwald": 1002, "bhargav": 1002, "mangipudi": 1002, "blakeflei": 1002, "brandon": [1002, 1003, 1010, 1011], "carter": [1002, 1003], "camilo": 1002, "lamu": 1002, "carol": [1002, 1003], "Willing": [1002, 1003], "cass": 1002, "ceshin": 1002, "truong": 1002, "codevig": 1002, "shiebler": 1002, "hnyk": [1002, 1003], "elli": [1002, 1005], "nicholson": [1002, 1003, 1004], "thaler": 1002, "warshaw": 1002, "lasagna": 1002, "deborah": [1002, 1003], "definitelyuncertain": 1002, "didi": [1002, 1003, 1004, 1005], "zev": [1002, 1003, 1004, 1005], "dsquareindia": 1002, "edwinensa": 1002, "elia": 1002, "kuth": 1002, "fabio": 1002, "ticconi": 1002, "fisach": 1002, "donovan": 1002, "ghg": 1002, "giovanni": [1002, 1004], "cherubin": 1002, "lanzani": 1002, "glenn": 1002, "qian": [1002, 1007], "mohr": 1002, "govin": 1002, "vatsan": 1002, "reda": 1002, "gustav": 1002, "m\u00f6rtberg": 1002, "halwai": 1002, "harizo": [1002, 1003], "rajaona": [1002, 1003], "hashcode55": 1002, "hdmetor": 1002, "hobson": 1002, "lane": 1002, "bown": 1002, "igor": [1002, 1003, 1009], "andriushchenko": [1002, 1003], "inki": 1002, "hwang": 1002, "isaac": [1002, 1003, 1005, 1006], "sijaranamu": 1002, "iver": 1002, "jordal": 1002, "jackmartin": 1002, "fiedler": 1002, "routlei": 1002, "zike": 1002, "janna": 1002, "brettingen": 1002, "jarfa": 1002, "laska": 1002, "jblackburn": 1002, "levesqu": 1002, "hintz": 1002, "jeremynixon": 1002, "jeroen": 1002, "jessica": 1002, "jill": 1002, "j\u00eann": 1002, "vie": 1002, "jia": 1002, "jiyuan": 1002, "johannah": 1002, "boersma": 1002, "moeller": 1002, "striebel": [1002, 1003], "joncral": 1002, "jordi": 1002, "munoz": [1002, 1008], "jrfiedler": 1002, "juliankahnert": 1002, "juliathebrav": 1002, "kaichogami": 1002, "lyon": [1002, 1003], "kingjr": 1002, "kjell": 1002, "krishna": [1002, 1003, 1004, 1005, 1006, 1007, 1010], "kalyan": 1002, "krishnakalyan3": 1002, "kvle": 1002, "putnam": 1002, "ldavid": 1002, "leig": 1002, "leightonzhang": 1002, "leland": [1002, 1003, 1004, 1006, 1007], "mcinn": [1002, 1003, 1004, 1006, 1007], "liang": [1002, 1007, 1008], "hsieh": 1002, "lizsz": 1002, "l\u00e9oni": 1002, "born": 1002, "maniteja": [1002, 1003, 1004], "nandana": [1002, 1003, 1004], "marco": [1002, 1004, 1005, 1009, 1010], "bao": [1002, 1010], "szepieniec": 1002, "madsen": [1002, 1004], "massil": 1002, "matheu": 1002, "duboi": [1002, 1004], "moroz": 1002, "scherer": 1002, "michiaki": 1002, "ariga": 1002, "moussa": 1002, "taifi": 1002, "mrandrewandrad": 1002, "mridul": 1002, "seth": 1002, "nadya": 1002, "naoya": [1002, 1003, 1004, 1005], "kanai": [1002, 1003, 1004], "nickledav": 1002, "nico": [1002, 1009], "ningchi": 1002, "nlathia": 1002, "okbalefthand": 1002, "okhlopkov": [1002, 1003], "pano": 1002, "lourida": 1002, "strickland": 1002, "perrin": 1002, "letelli": 1002, "pestrickland": 1002, "practicalswift": 1002, "qimu": 1002, "zheng": [1002, 1003, 1008], "rachit": [1002, 1008], "kansal": 1002, "ramana": [1002, 1003], "randi": 1002, "olson": 1002, "lutz": [1002, 1006, 1009], "schucker": 1002, "jain": [1002, 1003, 1004, 1008, 1010], "ruifeng": [1002, 1003, 1008], "r\u00e9my": 1002, "l\u00e9one": 1002, "saihttam": 1002, "saiw": 1002, "yeung": 1002, "shleifer": [1002, 1003], "sartaj": 1002, "sasank": 1002, "chilamkurthi": 1002, "seal": 1002, "shagun": 1002, "sodhani": 1002, "shanmuga": 1002, "shashank": [1002, 1008], "shekhar": 1002, "shawpan": 1002, "shengxiduan": 1002, "shota": 1002, "shuckle16": 1002, "smedbergm": 1002, "srvanrel": 1002, "leriqu": [1002, 1004], "taranjeet": 1002, "themrmax": [1002, 1003], "hallock": 1002, "moreau": [1002, 1003, 1004, 1005, 1006], "tkammi": 1002, "toastedcornflak": [1002, 1003], "tomdlt": 1002, "toshihiro": [1002, 1003, 1009], "kamishima": [1002, 1003], "tracer0tong": 1002, "hauck": 1002, "vo": [1002, 1010], "varun": [1002, 1003, 1004, 1010], "jewalikar": 1002, "vikram": 1002, "villu": 1002, "ruusmann": 1002, "walter": 1002, "waterponei": [1002, 1003], "wenjian": 1002, "welch": 1002, "wyseguy7": 1002, "xyguo": [1002, 1004], "yanlend": 1002, "yen": [1002, 1003], "yenchenlin": 1002, "yoav": 1002, "zivori": 1002, "10723": [1003, 1004], "9623": 1003, "undocu": 1003, "deleteri": 1003, "9677": 1003, "ashutosh": [1003, 1004, 1006, 1008], "correlation_model": 1003, "regression_model": 1003, "belatedli": 1003, "9717": 1003, "9693": 1003, "steingold": [1003, 1004], "9711": 1003, "goncalo": [1003, 1004], "rodrigu": [1003, 1004, 1009], "9641": 1003, "bourbeau": [1003, 1004, 1005], "9865": 1003, "sachin": [1003, 1004, 1010], "kelkar": [1003, 1004, 1006], "9922": 1003, "charli": [1003, 1004], "brummitt": [1003, 1004], "9945": 1003, "9830": 1003, "9600": 1003, "kerimov": [1003, 1004], "9593": 1003, "reiichiro": [1003, 1004], "nakano": [1003, 1004], "9604": 1003, "interim": 1003, "9558": 1003, "9847": 1003, "joan": [1003, 1004, 1005, 1006], "massich": [1003, 1004, 1005, 1006], "oli": 1003, "blum": 1003, "9697": 1003, "9750": 1003, "9788": 1003, "9815": 1003, "9802": 1003, "vrishank": [1003, 1004], "bhardwaj": [1003, 1004], "nagarjuna": [1003, 1004], "nathaniel": [1003, 1004, 1006], "diegodlh": [1003, 1004], "jkleint": [1003, 1004], "oliblum90": [1003, 1004], "pasbi": [1003, 1004], "lawson": [1003, 1004, 1005], "nielsenmarkus11": [1003, 1004], "excit": 1003, "cautiou": 1003, "min_impurity_split": 1003, "7823": [1003, 1004], "8446": 1003, "5279": 1003, "8363": 1003, "5295": 1003, "7388": 1003, "userguid": 1003, "7655": 1003, "karan": [1003, 1004, 1005], "desai": [1003, 1005, 1008, 1009, 1011], "7739": 1003, "gasquez": 1003, "8120": 1003, "neeraj": 1003, "gangwar": 1003, "7548": 1003, "9206": 1003, "7441": 1003, "6101": 1003, "7674": 1003, "8698": 1003, "7794": 1003, "herilalaina": [1003, 1004, 1006], "rakotoarison": [1003, 1004, 1006], "5036": 1003, "4939": 1003, "esuli": [1003, 1008], "n_skips_": 1003, "7914": 1003, "horrel": 1003, "8591": 1003, "hadrien": [1003, 1006], "7838": 1003, "8835": 1003, "8061": 1003, "cordier": 1003, "6288": 1003, "9145": 1003, "reddi": [1003, 1004, 1005, 1010], "chinthala": 1003, "7721": 1003, "crall": [1003, 1009], "7685": 1003, "tommi": [1003, 1004, 1005], "l\u00f6fstedt": 1003, "9277": 1003, "hongkahjun": 1003, "7089": 1003, "randomized_svd_low_rank": 1003, "9067": 1003, "6181": 1003, "wendling": 1003, "8065": 1003, "lejeun": 1003, "7567": 1003, "jay": 1003, "doepk": 1003, "7573": 1003, "romain": [1003, 1008], "brault": 1003, "5229": 1003, "7990": 1003, "8586": 1003, "7723": 1003, "8028": 1003, "booth": 1003, "8005": 1003, "7863": 1003, "7506": 1003, "5991": 1003, "8845": 1003, "8053": 1003, "8282": 1003, "8117": 1003, "9259": 1003, "8094": 1003, "8335": 1003, "poughon": 1003, "7880": 1003, "karnofski": 1003, "935": 1003, "8931": 1003, "attractador": [1003, 1004], "8002": 1003, "8549": 1003, "zerodivisionerror": [1003, 1006], "7501": 1003, "dominik": 1003, "krzeminski": 1003, "7970": 1003, "8006": 1003, "p\u00f6lsterl": [1003, 1006, 1009], "8936": 1003, "8672": 1003, "mike": 1003, "benfield": 1003, "broke": 1003, "8068": 1003, "5732": 1003, "ytrue": 1003, "ypred": 1003, "8087": 1003, "7983": 1003, "features_nam": 1003, "8512": 1003, "8251": 1003, "aivision2020": 1003, "5814": 1003, "7849": 1003, "jair": 1003, "montoya": 1003, "martinez": 1003, "randomizedlasso": 1003, "5359": 1003, "9302": 1003, "8160": 1003, "8224": 1003, "gedeck": 1003, "vathsala": [1003, 1004, 1005, 1006], "achar": [1003, 1004, 1005, 1006], "9022": 1003, "mehmet": [1003, 1009], "basbug": 1003, "9024": 1003, "8973": 1003, "paulo": [1003, 1009], "haddad": 1003, "unmeaning": 1003, "6573": 1003, "quazi": [1003, 1004], "marufur": 1003, "rahman": [1003, 1004, 1008], "9239": 1003, "andr": [1003, 1010], "ambrosio": 1003, "boechat": 1003, "early_exager": 1003, "assertionerror": 1003, "8992": 1003, "7954": 1003, "foreman": 1003, "9105": 1003, "9108": 1003, "8306": 1003, "7872": 1003, "_c_step": 1003, "3367": 1003, "steward": 1003, "8768": 1003, "detomaso": 1003, "6507": 1003, "7819": 1003, "jayzed82": 1003, "6126": 1003, "7814": 1003, "7702": 1003, "9219": 1003, "7771": 1003, "ang": 1003, "randomizedlogisticregress": 1003, "8259": 1003, "mandatorili": 1003, "7565": 1003, "8181": 1003, "basesearchcv": [1003, 1004], "8344": 1003, "eriksson": 1003, "7661": 1003, "8295": 1003, "batula": 1003, "dylan": [1003, 1006], "werner": [1003, 1008], "meier": 1003, "7365": 1003, "aleksandr": 1003, "sandrovskii": 1003, "5697": 1003, "stijn": 1003, "tonk": 1003, "outputcodeclassifi": [1003, 1008], "6250": 1003, "8093": 1003, "bull": 1003, "9507": 1003, "7356": 1003, "dingwal": 1003, "_check_target": 1003, "8377": 1003, "5211": 1003, "rhinehart": 1003, "8159": 1003, "8198": 1003, "fetch_": 1003, "7944": 1003, "7825": 1003, "kathleen": 1003, "7376": 1003, "7331": 1003, "yangarbit": 1003, "__getstate__": 1003, "obstruct": 1003, "8316": 1003, "holger": 1003, "8010": 1003, "7986": 1003, "najera": 1003, "9289": 1003, "makedir": 1003, "9284": 1003, "sebastin": [1003, 1004], "alert": 1003, "lgtm": 1003, "9278": 1003, "heli": 1003, "8449": 1003, "9078": 1003, "purport": 1003, "sergul": [1003, 1004, 1007], "aydor": [1003, 1004, 1007], "8922": 1003, "8137": 1003, "8139": 1003, "8995": 1003, "2879": 1003, "7459": 1003, "7812": 1003, "9100": 1003, "8481": 1003, "8174": 1003, "tahar": 1003, "zanouda": 1003, "8854": 1003, "8874": 1003, "7998": 1003, "jiacheng": 1003, "argpartit": 1003, "frombuffer_empti": 1003, "rankdata": 1003, "safe_copi": 1003, "eig": 1003, "fast_dot": 1003, "pinvh": [1003, 1005], "graph_laplacian": 1003, "sparsetool": 1003, "connected_compon": 1003, "check_decision_proba_consist": 1003, "shubham": [1003, 1006], "9019": 1003, "baseensembl": [1003, 1006], "7464": 1003, "rishikesh": 1003, "taehoon": [1003, 1004], "aashil": 1003, "balakumaran": [1003, 1004], "manoharan": [1003, 1004], "petrov": [1003, 1004], "minghui": [1003, 1004], "jc": [1003, 1004], "alexandercbooth": 1003, "chkoar": 1003, "aarshai": [1003, 1004], "gilliam": 1003, "subramanyam": 1003, "clement": [1003, 1004, 1008], "joudet": [1003, 1004], "robl": 1003, "kati": 1003, "luangkot": 1003, "lacchia": 1003, "akshay0724": 1003, "omtcyfz": 1003, "rickiepark": 1003, "jbdelafoss": 1003, "vivek": [1003, 1004, 1005], "elliott": 1003, "ldirer": 1003, "sid": 1003, "kapur": 1003, "midina": 1003, "mikebenfield": 1003, "sourav": [1003, 1006], "aseem": 1003, "bansal": 1003, "aishwaryark": 1003, "howel": 1003, "dokato": 1003, "kathi": [1003, 1006], "ferria": 1003, "nikita": [1003, 1004, 1006, 1009, 1010], "basil": 1003, "beirouti": 1003, "possa": 1003, "bednar": 1003, "janin": 1003, "harper": 1003, "artsiom": 1003, "ligo": 1003, "rahn": [1003, 1006], "seanpwilliam": 1003, "julian": [1003, 1004], "kuhlmann": [1003, 1004], "aubert": 1003, "j\u00f6rn": 1003, "hee": [1003, 1006], "shivamgargsya": [1003, 1007, 1009], "kat": 1003, "hempstalk": 1003, "kaushik": [1003, 1010], "lakshmikanth": 1003, "kennedi": [1003, 1006], "yap": 1003, "kiril": [1003, 1004, 1006, 1008], "bobyrev": 1003, "imbert": [1003, 1005, 1008, 1010], "lera": 1003, "douillard": 1003, "mainak": 1003, "tobychees": [1003, 1004], "manraj": 1003, "marc": [1003, 1005, 1006], "meketon": 1003, "marcofalk": 1003, "gilch": 1003, "mehul": 1003, "ahuja": [1003, 1010], "goetz": [1003, 1004], "dezub": 1003, "baumgartn": 1003, "vibrantabhi19": 1003, "golubin": 1003, "milen": 1003, "paskov": 1003, "antonin": 1003, "carett": 1003, "morikko": 1003, "mrmjauh": 1003, "nalepa": 1003, "namiya": 1003, "narinek": [1003, 1004], "angu": [1003, 1004, 1010], "nicol": 1003, "vavrova": 1003, "nitish": 1003, "pandei": [1003, 1008], "daniil": 1003, "olegovich": 1003, "craze": 1003, "om": 1003, "parmind": 1003, "patrick": [1003, 1004, 1009, 1010], "carlson": 1003, "pei": 1003, "ganssl": 1003, "lorek": 1003, "pete": [1003, 1007, 1008], "bachant": 1003, "csizsek": 1003, "jong": 1003, "puneet": 1003, "mathur": [1003, 1005, 1006, 1011], "quentin": [1003, 1004, 1005], "hibon": 1003, "1kastner": 1003, "rameshwar": [1003, 1004], "bhaskaran": [1003, 1004], "rebecca": 1003, "bilbro": 1003, "remi": 1003, "rampin": 1003, "pratik": 1003, "agarw": [1003, 1004, 1006], "sailesh": [1003, 1004], "choyal": [1003, 1004], "samson": 1003, "samu\u00ebl": 1003, "weber": 1003, "sarah": [1003, 1005, 1008], "abhyudai": 1003, "sharan": [1003, 1004], "yalburgi": [1003, 1004], "willduan": 1003, "siddharth": [1003, 1007], "almer": 1003, "theofilo": 1003, "papapanagiot": 1003, "alison": 1003, "boucher": 1003, "folkman": 1003, "jung": [1003, 1007], "shenoi": 1003, "vilhelm": [1003, 1004], "ehrenheim": [1003, 1004], "alan": [1003, 1004, 1007, 1009, 1010], "yee": [1003, 1004], "warut": [1003, 1004], "vijitbenjaronk": [1003, 1004], "yuichi": 1003, "fujikawa": 1003, "affanv14": 1003, "andreh7": 1003, "bradi": 1003, "salz": 1003, "campustrampu": 1003, "agamemnon": [1003, 1004, 1005, 1006, 1008, 1009], "krasouli": [1003, 1004, 1005, 1006, 1008, 1009], "ditenberg": 1003, "elena": 1003, "sharova": 1003, "filipj8": [1003, 1004], "fukatani": 1003, "guiniol": 1003, "guoci": 1003, "hakaa1": [1003, 1004], "xhy": 1003, "jakirkham": [1003, 1004, 1005], "jaroslaw": 1003, "jeroko": 1003, "jmontoyam": 1003, "josephsalmon": [1003, 1004, 1005], "jschendel": [1003, 1004], "leereev": 1003, "hahn": [1003, 1004], "mathurinm": [1003, 1004, 1005, 1007, 1008, 1009, 1010], "mehak": 1003, "sachdeva": 1003, "mlewis1729": 1003, "mlliou112": 1003, "mthorrel": [1003, 1006], "ndingwal": 1003, "nuff": 1003, "plagre": 1003, "pldtc325": 1003, "breno": [1003, 1004], "olsen": 1003, "alfano": 1003, "burn": [1003, 1004], "polmauri": 1003, "charlton": 1003, "austin": 1003, "chayant": 1003, "t15h": 1003, "chinmaya": 1003, "pancholi": 1003, "danielsen": 1003, "chung": [1003, 1004], "pravarmahajan": [1003, 1004], "dariu": [1003, 1004], "morawiec": [1003, 1004], "haberth\u00fcr": 1003, "heryanto": 1003, "kirkbi": [1003, 1004], "rashchedrin": 1003, "gertrud": 1003, "devansh": [1003, 1004], "dickson": 1003, "baxlei": 1003, "don86": 1003, "klarup": 1003, "elizabeth": [1003, 1005, 1008], "ferriss": 1003, "ellen": 1003, "egli": 1003, "chieh": [1003, 1004], "chou": [1003, 1004], "grzegorz": [1003, 1006], "szpak": [1003, 1006], "zxcvbniu": 1003, "icyblad": 1003, "ilya": 1003, "laughlin": 1003, "iv\u00e1n": [1003, 1009], "vall\u00e9": 1003, "aur\u00e9lien": [1003, 1004, 1005, 1009, 1010], "bellet": [1003, 1004, 1005], "mahapatra": 1003, "bundl": [1004, 1005], "indexerror": [1004, 1005], "11756": [1004, 1005], "14237": [1004, 1005], "schuder": [1004, 1005, 1006], "13903": [1004, 1005], "13124": [1004, 1005], "13772": [1004, 1005], "vya": [1004, 1005, 1006], "12949": 1004, "prabakaran": [1004, 1005, 1008, 1010], "kumaresshan": [1004, 1005, 1008], "12946": 1004, "tallott": 1004, "13276": 1004, "13005": 1004, "13312": 1004, "11295": 1004, "vacaliuc": [1004, 1005], "13046": 1004, "12360": 1004, "aakanksha": 1004, "13134": 1004, "sandro": 1004, "casagrand": [1004, 1005], "12881": 1004, "13165": 1004, "13221": 1004, "bertrandhaut": [1004, 1005], "raghunathan": [1004, 1005, 1006, 1007, 1008, 1009, 1010], "dowon": [1004, 1005], "aria": [1004, 1005], "fibins": [1004, 1005], "finn": [1004, 1005], "shea": [1004, 1005], "joaak": [1004, 1005], "m\u00e9hault": [1004, 1005], "kms15": [1004, 1005], "kossori": [1004, 1005], "aruku": [1004, 1005], "lakshya": [1004, 1005, 1006], "ib\u00e1\u00f1ez": [1004, 1005, 1008], "gorelli": [1004, 1005, 1009], "marcogorelli": [1004, 1005], "mferrari3": [1004, 1005], "micka\u00ebl": [1004, 1005], "schoentgen": [1004, 1005], "pavlo": [1004, 1005], "kalli": [1004, 1005], "glaser": [1004, 1005], "pierretallott": [1004, 1005, 1006], "kapoor": [1004, 1005], "sandrocasagrand": [1004, 1005], "tashai": [1004, 1005], "vishaal": [1004, 1005], "zhuyi": [1004, 1005], "ziji": [1004, 1005], "zj": [1004, 1005], "poh": [1004, 1005], "12704": 1004, "12701": 1004, "12685": 1004, "12699": 1004, "adanhawth": [1004, 1005], "stine": [1004, 1005], "feda": [1004, 1005], "curic": [1004, 1005], "jeremiedbb": [1004, 1005, 1006], "katrin": [1004, 1005], "leinweb": [1004, 1005], "muhammad": [1004, 1005, 1009], "hassaan": [1004, 1005], "rafiqu": [1004, 1005], "paczuski": [1004, 1005], "waterburi": [1004, 1005], "shivam": [1004, 1005, 1006], "kotwalia": [1004, 1005], "12159": 1004, "12105": 1004, "11912": 1004, "12304": 1004, "12339": 1004, "12246": 1004, "10811": 1004, "feldbauer": [1004, 1005, 1006, 1007, 1010], "12441": 1004, "12517": 1004, "12234": 1004, "12165": 1004, "12388": 1004, "connor": [1004, 1009], "tann": [1004, 1009], "12393": 1004, "12122": 1004, "sharedmem": 1004, "12518": 1004, "12481": 1004, "12612": 1004, "12211": 1004, "lisa": [1004, 1005, 1007, 1008, 1010], "hannel": [1004, 1005], "melissa": 1004, "ferrari": 1004, "12451": 1004, "12171": 1004, "12365": 1004, "12514": 1004, "12522": 1004, "12471": 1004, "marzinotto": [1004, 1005], "12317": 1004, "12338": 1004, "bauk": [1004, 1005], "12625": 1004, "sklearn_site_joblib": 1004, "12350": 1004, "12467": 1004, "unvendor": 1004, "12345": 1004, "navarret": [1004, 1005, 1006], "benjastudio": [1004, 1005], "cheuk": [1004, 1005], "connossor": [1004, 1005], "levinson": [1004, 1005], "kieker": [1004, 1005], "kataev": [1004, 1005], "dillon": [1004, 1005, 1006], "gardner": [1004, 1005], "vukolov": [1004, 1005], "caselli": [1004, 1005], "gauravahlawat": [1004, 1005], "gustavo": [1004, 1005, 1010], "haroldfox": [1004, 1005], "jacklangerman": [1004, 1005], "jacopo": [1004, 1005], "notarstefano": [1004, 1005], "janvanrijn": [1004, 1005], "jdethuren": [1004, 1005], "koen": [1004, 1005], "kushal": [1004, 1005], "chauhan": [1004, 1005], "jie": [1004, 1005, 1008], "lili": [1004, 1005], "xiong": [1004, 1005, 1010], "liam": [1004, 1005], "melsyt": [1004, 1005], "nichola": [1004, 1005, 1007], "shebanov": [1004, 1005], "oleksandr": [1004, 1005, 1006, 1007, 1010], "pavlyk": [1004, 1005, 1006, 1007], "hausamann": [1004, 1005], "pulkit": [1004, 1005, 1007], "maloo": [1004, 1005], "batista": [1004, 1005, 1009], "radostin": [1004, 1005], "stoyanov": [1004, 1005], "ramil": [1004, 1005], "nugmanov": [1004, 1005], "rebekah": [1004, 1005, 1006], "roopam": [1004, 1005], "tiernei": [1004, 1005, 1006], "sylvainlan": [1004, 1005, 1006, 1007, 1008], "takingitcasu": [1004, 1005], "tulio": [1004, 1005], "xing": [1004, 1005], "zach": [1004, 1005, 1010], "mountain": 1004, "sorri": 1004, "basemultilayerperceptron": [1004, 1006], "11924": 1004, "macbook": 1004, "9354": 1004, "9372": 1004, "astel": 1004, "10933": 1004, "hansen": 1004, "10471": 1004, "gaurav": [1004, 1005, 1006, 1007, 1008, 1010], "dhingra": [1004, 1005, 1008], "8003": 1004, "jo\u00ebl": 1004, "billaud": 1004, "10059": 1004, "braun": 1004, "9612": 1004, "jonatan": 1004, "samoocha": 1004, "8129": 1004, "margeta": 1004, "k_means_elkan": 1004, "11353": 1004, "11901": 1004, "9875": 1004, "9012": 1004, "11315": 1004, "9041": 1004, "9858": 1004, "artiem": 1004, "krinitsyn": 1004, "9908": 1004, "8617": 1004, "maskani": [1004, 1006, 1007, 1008], "filali": 1004, "konstantino": 1004, "katriopla": 1004, "10774": 1004, "catalfo": 1004, "10795": 1004, "takeshi": [1004, 1009, 1010, 1011], "yoshizawa": 1004, "11082": 1004, "sadhana": 1004, "srinivasan": [1004, 1007], "9731": 1004, "10045": 1004, "fetch_mldata": 1004, "11466": 1004, "6374": 1004, "normalize_compon": [1004, 1006], "11585": 1004, "ivan": [1004, 1005, 1008], "panico": [1004, 1008], "11420": 1004, "6452": 1004, "walli": 1004, "gauz": 1004, "9492": 1004, "8484": 1004, "9886": 1004, "underflow": [1004, 1009], "10142": 1004, "5956": 1004, "_class_mean": 1004, "_class_cov": 1004, "10898": 1004, "nanxin": 1004, "9832": 1004, "11951": 1004, "r\u00fcdiger": [1004, 1005, 1007], "busch": [1004, 1005, 1007], "9707": 1004, "wan": 1004, "7071": 1004, "9157": 1004, "11176": 1004, "forsyth": 1004, "11542": 1004, "anna": 1004, "9524": 1004, "9723": 1004, "10908": 1004, "10899": 1004, "melderi": 1004, "10101": 1004, "10\u2079": 1004, "9147": 1004, "clae": 1004, "fredrik": 1004, "mannbi": 1004, "10441": 1004, "mayur": 1004, "kulkarni": 1004, "6689": 1004, "nihar": 1004, "sheth": 1004, "11293": 1004, "9656": 1004, "greenhal": 1004, "n_features_to_comput": 1004, "9222": 1004, "hoh": 1004, "9234": 1004, "andrewww": 1004, "8075": 1004, "11211": 1004, "9484": 1004, "dalla": 1004, "card": 1004, "9043": 1004, "10112": 1004, "logistic_regression_path": [1004, 1005], "11724": 1004, "9939": 1004, "westov": 1004, "10998": 1004, "vazelh": [1004, 1005, 1006], "10071": 1004, "10153": 1004, "d\u00f6pfert": 1004, "10095": 1004, "cv_valu": 1004, "10297": 1004, "mabel": [1004, 1008], "10581": 1004, "yacin": 1004, "mazari": 1004, "10687": 1004, "10836": 1004, "aishwarya": 1004, "10397": 1004, "10992": 1004, "11327": 1004, "11905": 1004, "9837": 1004, "10593": 1004, "10610": 1004, "8554": 1004, "9775": 1004, "10827": 1004, "osa": 1004, "8066": 1004, "10587": 1004, "3840": 1004, "niederb\u00fchl": 1004, "9521": 1004, "11124": 1004, "arya": 1004, "11160": 1004, "barkhorn": 1004, "11679": 1004, "pacha": 1004, "10845": 1004, "perez": 1004, "parra": 1004, "toledano": 1004, "10999": 1004, "memoryerror": [1004, 1008], "11135": 1004, "10377": 1004, "9786": 1004, "10093": 1004, "alexryndin": 1004, "9772": 1004, "9515": 1004, "liddel": 1004, "manh": 1004, "dao": 1004, "9851": 1004, "10280": 1004, "10336": 1004, "haoran": 1004, "basemixtur": [1004, 1005], "10740": 1004, "10869": 1004, "g\u00e9ron": 1004, "9686": 1004, "11310": 1004, "_fit_and_scor": 1004, "11576": 1004, "ronsin": [1004, 1005], "_run_search": 1004, "9599": 1004, "11006": 1004, "11557": 1004, "boucaud": 1004, "iid": 1004, "9085": 1004, "10677": 1004, "zhdanovich": 1004, "10982": 1004, "juliet": 1004, "lawton": 1004, "10928": 1004, "solutu": 1004, "immensu": 1004, "9257": 1004, "8190": 1004, "alcorn": 1004, "9681": 1004, "mottl": [1004, 1005], "10005": 1004, "10346": 1004, "tobia": [1004, 1009], "10887": 1004, "11136": 1004, "4394": 1004, "9579": 1004, "kober": 1004, "9655": 1004, "bjerr": 1004, "11556": 1004, "11774": 1004, "9456": 1004, "unexpectedli": 1004, "9304": 1004, "11144": [1004, 1005], "9151": 1004, "10521": 1004, "7668": 1004, "9647": 1004, "10195": 1004, "10192": 1004, "11272": 1004, "11467": 1004, "11505": 1004, "giusepp": [1004, 1005], "costa": [1004, 1009], "10210": 1004, "11520": 1004, "11011": 1004, "11005": 1004, "11308": 1004, "11206": 1004, "11306": 1004, "10437": 1004, "lucija": 1004, "gregov": 1004, "10452": 1004, "10181": 1004, "nirvan": [1004, 1008], "anjirbag": 1004, "9399": 1004, "10913": 1004, "rodrigo": 1004, "agundez": 1004, "10458": 1004, "9816": 1004, "newei": 1004, "11042": 1004, "11235": 1004, "active_features_": 1004, "feature_indices_": 1004, "n_values_": 1004, "9726": 1004, "10829": 1004, "gilberto": 1004, "olimpio": 1004, "10655": 1004, "python2": 1004, "10412": 1004, "jiongyan": 1004, "9497": 1004, "8361": 1004, "neo": 1004, "_criterion": 1004, "classificationcriterion": 1004, "regressioncriterion": 1004, "10325": 1004, "camil": 1004, "stap": 1004, "basedecisiontre": [1004, 1005, 1008], "10536": 1004, "ohayon": [1004, 1005], "11464": 1004, "stott": 1004, "10663": 1004, "10229": 1004, "11553": 1004, "10881": 1004, "sevin": 1004, "ridge_regress": [1004, 1005, 1011], "10306": 1004, "siebert": 1004, "11741": 1004, "11166": 1004, "11010": 1004, "lami": 1004, "11596": 1004, "marcu": 1004, "voss": 1004, "9569": 1004, "12462": 1004, "zachariah": 1004, "10474": 1004, "10500": 1004, "9701": 1004, "9378": 1004, "check_set_param": 1004, "7738": 1004, "alvin": 1004, "chiang": 1004, "8102": 1004, "ankita": 1004, "sinha": 1004, "check_methods_subset_invari": [1004, 1010], "10428": 1004, "check_sample_weights_pandas_seri": 1004, "11558": 1004, "211217613": 1004, "absolutelynowarranti": 1004, "richi": 1004, "halford": 1004, "adelr": 1004, "adityadaflapurkar": 1004, "aidan": 1004, "fitzgerald": 1004, "aishgrt1": 1004, "akash": 1004, "shivram": 1004, "lenail": [1004, 1008], "egg": 1004, "diaz": 1004, "amanda": [1004, 1007, 1008, 1009, 1010], "aniruddha": 1004, "annaayzenshtat": 1004, "antonio": [1004, 1006], "quinonez": 1004, "anubhav": 1004, "marwaha": 1004, "arik": 1004, "pamnani": 1004, "ozga": 1004, "arunava": 1004, "geron": [1004, 1009, 1010], "ayush": [1004, 1009], "bangda": 1004, "bastian": 1004, "venthur": 1004, "benn": 1004, "koonc": 1004, "cclauss": 1004, "chadi": 1004, "kamar": 1004, "holdgraf": 1004, "hirsch": 1004, "hogan": 1004, "cnx": 1004, "cwitt": 1004, "ferreira": [1004, 1009, 1010], "gomez": [1004, 1011], "klevebr": 1004, "shwed": 1004, "mohn": [1004, 1008], "danil": 1004, "baibak": [1004, 1005], "beach": 1004, "pickup": 1004, "derek": 1004, "niederhut": [1004, 1006], "dilutedsauc": 1004, "dlovel": 1004, "dor": 1004, "dougla": 1004, "duhaim": 1004, "tuzova": 1004, "eunji": 1004, "farahsae": 1004, "raimundo": 1004, "fenx": 1004, "frankhui": 1004, "franz": 1004, "wompner": 1004, "freija": 1004, "descamp": 1004, "frsi": 1004, "calvo": [1004, 1005], "georgi": [1004, 1007], "peev": [1004, 1007], "gkevinyen5418": 1004, "vermeil": 1004, "hongh": 1004, "hossein": [1004, 1005, 1006], "pourbozorg": [1004, 1005, 1006], "hristo": 1004, "hunan": 1004, "rostomyan": 1004, "iampat": 1004, "jaewon": 1004, "malcolm": 1004, "jami": 1004, "wolosonovich": 1004, "jeb": 1004, "bearer": 1004, "jinkun": 1004, "jjabl": 1004, "johnstott": 1004, "jotasi": 1004, "julietcl": 1004, "shenk": 1004, "karl": 1004, "kasper": 1004, "primdal": 1004, "lauritzen": 1004, "ksemb": 1004, "kuai": [1004, 1005], "kyeongpil": 1004, "kang": [1004, 1006], "kye": 1004, "kyledrogo": 1004, "l\u00e9o": 1004, "liutong": 1004, "lizao": 1004, "lkjcalc": 1004, "louib": [1004, 1005], "luciano": 1004, "luke": 1004, "persola": 1004, "markiwanchyshyn": 1004, "marsgui": 1004, "gubri": [1004, 1005], "koko": [1004, 1010], "copeland": [1004, 1005], "meghann": [1004, 1006], "minh": 1004, "jamaoui": [1004, 1005, 1008], "mohammad": [1004, 1005], "shahebaz": 1004, "muayyad": 1004, "alsadi": 1004, "nabarun": 1004, "pal": [1004, 1010], "narendran": 1004, "santhanam": 1004, "suh": 1004, "eng": 1004, "av": 1004, "nicolau": 1004, "werneck": 1004, "titov": [1004, 1006, 1009, 1010], "nilesh": 1004, "kevlani": 1004, "notmatthancock": [1004, 1006], "nzw": 1004, "oren": 1004, "milman": 1004, "osaid": 1004, "rehman": 1004, "nasir": 1004, "fernand": [1004, 1010], "olden": 1004, "pierreablin": 1004, "pietruh": 1004, "pinaki": 1004, "nath": 1004, "chowdhuri": [1004, 1010], "piotr": [1004, 1005], "szyma\u0144ski": [1004, 1005], "pradeep": [1004, 1005], "raamana": [1004, 1005], "pravar": 1004, "mahajan": [1004, 1006], "qingi": 1004, "rajendra": 1004, "arora": 1004, "rankylau": 1004, "kosobrodov": 1004, "rragundez": 1004, "sagnik": 1004, "bhattacharya": 1004, "radhakrishnan": 1004, "saqib": 1004, "nizam": 1004, "shamsi": 1004, "satish": 1004, "gigant": [1004, 1006], "flennerhag": 1004, "sebastien": 1004, "shalil": 1004, "awalei": 1004, "shangwu": [1004, 1005], "sharad": 1004, "vijalapuram": 1004, "shenhanc78": 1004, "rastogi": 1004, "siftikha": 1004, "sinclert": 1004, "p\u00e9rez": 1004, "solutusimmensu": 1004, "somya": 1004, "anand": [1004, 1008], "srajan": 1004, "paliw": 1004, "sriharsha": [1004, 1005], "hatwar": [1004, 1005], "mcdowel": 1004, "syonekura": 1004, "takanori": 1004, "hayashi": 1004, "tarcusx": 1004, "theriley106": 1004, "heavei": 1004, "augspurg": [1004, 1006], "trishnendu": 1004, "ghorai": 1004, "twosigmajab": 1004, "umar": [1004, 1005], "farouk": [1004, 1005], "urvang": [1004, 1006], "patel": [1004, 1006, 1007, 1008, 1010], "vadim": [1004, 1008, 1009], "markovtsev": 1004, "vinit": 1004, "vinod": 1004, "viraj": 1004, "mavani": 1004, "navkal": 1004, "vqean3": [1004, 1005], "vufg": 1004, "wallygauz": 1004, "wdevazelh": 1004, "barnett": 1004, "rosenfeld": 1004, "yime": 1004, "ymazari": 1004, "yufeng": 1004, "griffith": [1004, 1005], "z\u00e9": 1004, "vin\u00edciu": 1004, "zhenq": 1004, "zhiqe": 1004, "xiao": [1004, 1006, 1009, 1010], "couldn": [1005, 1006, 1007, 1008, 1009, 1010, 1011], "12955": 1005, "klopfer": 1005, "14197": 1005, "14024": 1005, "nicolashug": 1005, "13974": 1005, "hoang": [1005, 1006], "fhoang7": 1005, "14393": 1005, "guillem": [1005, 1006, 1011], "subi": [1005, 1006, 1011], "14087": 1005, "14067": 1005, "stalei": [1005, 1006], "14092": 1005, "14053": 1005, "13947": 1005, "instanci": 1005, "suffient": 1005, "13910": 1005, "13894": 1005, "myatt": [1005, 1006], "min_max_axi": 1005, "13741": 1005, "roddi": [1005, 1006], "macsween": [1005, 1006], "14309": 1005, "13864": 1005, "paresh": [1005, 1006], "13877": 1005, "_sag": 1005, "sag_solv": 1005, "3591": 1005, "13317": 1005, "13157": 1005, "13086": 1005, "cole": 1005, "13485": 1005, "assia": 1005, "benbihi": 1005, "13651": 1005, "reloc": 1005, "13486": 1005, "13427": 1005, "couvreur": [1005, 1006], "9069": 1005, "13835": 1005, "10727": 1005, "wood": 1005, "13250": 1005, "13241": 1005, "12143": 1005, "11650": 1005, "non_negative_factor": [1005, 1007, 1008, 1009], "12988": 1005, "8769": 1005, "11000": 1005, "thibault": 1005, "sejourn": 1005, "changedbehaviourwarn": 1005, "11526": 1005, "6848": 1005, "glemaitr": [1005, 1006, 1008], "11727": 1005, "13266": 1005, "13545": 1005, "sorro": 1005, "12807": 1005, "12513": 1005, "12543": 1005, "storch": 1005, "13260": 1005, "13283": 1005, "13524": 1005, "13174": 1005, "13496": 1005, "13620": 1005, "12436": 1005, "12983": 1005, "13251": 1005, "joshuakennethjon": 1005, "12715": 1005, "13164": 1005, "12834": 1005, "leastsquareserror": 1005, "update_terminal_region": 1005, "6463": 1005, "movelikeriv": 1005, "13193": 1005, "12599": 1005, "13779": 1005, "13780": 1005, "12916": 1005, "13641": 1005, "8478": 1005, "12177": 1005, "12583": 1005, "13601": 1005, "danylo": 1005, "densif": 1005, "13240": 1005, "bartosz": 1005, "13562": 1005, "11646": 1005, "11699": 1005, "make_dataset": 1005, "13336": 1005, "toleranbc": 1005, "11754": 1005, "13397": 1005, "fagan": 1005, "12174": 1005, "12972": 1005, "lucio": 1005, "fernandez": 1005, "arjona": 1005, "coeffeci": 1005, "13279": 1005, "13328": 1005, "13389": 1005, "basesgdclassifi": 1005, "13422": 1005, "cl\u00e9ment": [1005, 1009], "doumouro": 1005, "unhandl": 1005, "13363": 1005, "12821": 1005, "13350": 1005, "j\u00e9r\u00f4me": [1005, 1006, 1007], "dock\u00e8": [1005, 1006, 1007], "9907": 1005, "12232": 1005, "sangeeth": 1005, "11179": 1005, "13151": 1005, "12568": 1005, "8216": 1005, "romuald": 1005, "menuet": 1005, "12732": 1005, "12334": 1005, "13607": 1005, "12855": 1005, "pawel": 1005, "sendyk": 1005, "13628": 1005, "13447": 1005, "10580": 1005, "sandra": 1005, "mitrov": 1005, "13554": 1005, "celelibi": 1005, "13142": 1005, "11354": 1005, "12613": 1005, "12669": 1005, "torrella": [1005, 1006], "12861": 1005, "8773": 1005, "13366": 1005, "fournier": 1005, "10440": 1005, "12222": 1005, "10058": 1005, "chiotelli": 1005, "12279": 1005, "12582": 1005, "my_pipelin": 1005, "2568": 1005, "make_": 1005, "11364": 1005, "baze": 1005, "petrushev": 1005, "__len__": 1005, "13439": 1005, "12908": 1005, "drew": 1005, "13253": 1005, "12116": 1005, "12197": 1005, "12251": 1005, "float16": 1005, "13007": 1005, "raffaello": 1005, "baluyot": 1005, "13333": 1005, "13459": 1005, "hunter": 1005, "mcgushion": 1005, "8508": 1005, "6261": 1005, "vettigli": 1005, "justglow": 1005, "12300": 1005, "11458": 1005, "mitar": 1005, "milutinov": 1005, "12344": 1005, "13549": 1005, "warn_on_dtyp": 1005, "check_pairwise_arrai": 1005, "13382": 1005, "prathmesh": 1005, "saval": 1005, "11705": 1005, "11973": 1005, "our_rand_r": 1005, "madhura": [1005, 1007, 1008], "parikh": [1005, 1010, 1011], "13531": 1005, "check_fit_idempot": 1005, "alberto": [1005, 1009, 1010], "torr": 1005, "amourav": 1005, "assiaben": 1005, "micha\u0142owski": 1005, "brentfagan": 1005, "chenal": [1005, 1006, 1008], "choe": 1005, "drewmjohnston": 1005, "dror": 1005, "atariah": 1005, "esvhd": 1005, "falak": 1005, "gandenberg": 1005, "luqi": 1005, "jf": 1005, "kulbear": 1005, "leandro": [1005, 1009], "hermida": [1005, 1009], "luk": 1005, "manimaran": [1005, 1007, 1008, 1009, 1010], "gaido": 1005, "marinelm": 1005, "masstran": 1005, "roeschk": 1005, "aftab": 1005, "abdela": 1005, "ibraheem": 1005, "mwestt": 1005, "iijima": 1005, "oresti": 1005, "osman": 1005, "flanagan": [1005, 1006], "soriano": 1005, "peai": 1005, "pim": 1005, "haan": 1005, "raf": 1005, "rajdeep": 1005, "dua": 1005, "ra\u00fal": 1005, "garc\u00eda": [1005, 1006], "lekhwani": 1005, "varma": 1005, "shiyu": 1005, "duan": [1005, 1007], "smari": [1005, 1006, 1007], "st\u00e9phane": [1005, 1006, 1010], "surgan12": 1005, "thibsej": 1005, "xhan": 1005, "xinyuliu12": 1005, "zayd": 1005, "hammoudeh": 1005, "16397": [1006, 1007], "16500": 1006, "16505": 1006, "16076": 1006, "shack": [1006, 1007, 1008], "15930": 1006, "inder128": 1006, "15810": 1006, "15898": 1006, "gargsya": 1006, "15933": 1006, "15760": 1006, "15888": 1006, "15936": 1006, "dizietasahi": 1006, "15879": 1006, "bibhash": [1006, 1007], "chandra": [1006, 1007, 1010], "mitra": [1006, 1007], "15937": 1006, "blyston": [1006, 1007], "15863": 1006, "abstractmethod": 1006, "_check_x": 1006, "basenb": 1006, "15996": 1006, "brigitta": [1006, 1007, 1008], "sip\u0151cz": [1006, 1007, 1008], "15751": 1006, "tirth": [1006, 1007], "15868": 1006, "nikla": [1006, 1007], "smedemark": 1006, "marguli": 1006, "15797": 1006, "15947": 1006, "revamp": 1006, "14849": 1006, "_name_estim": 1006, "_gb": 1006, "facto": 1006, "_birch": 1006, "9250": 1006, "12927": 1006, "deprecationwarn": 1006, "interfer": 1006, "hinder": 1006, "15080": 1006, "14464": 1006, "13575": 1006, "10482": 1006, "13726": 1006, "shuzh": 1006, "9288": 1006, "15057": 1006, "korolev": 1006, "15120": 1006, "7943": 1006, "12303": 1006, "14510": 1006, "14890": 1006, "miguel": 1006, "cabrera": 1006, "14544": 1006, "15304": 1006, "jaim": 1006, "ferrando": 1006, "huerta": 1006, "12068": 1006, "12145": 1006, "13609": 1006, "camila": 1006, "williamson": 1006, "15661": 1006, "15160": 1006, "14259": 1006, "14764": 1006, "14740": 1006, "st\u00e9phan": 1006, "tulken": 1006, "14623": 1006, "sarra": 1006, "habchi": 1006, "15257": 1006, "willocx": 1006, "12650": 1006, "13960": 1006, "multiouput": 1006, "14908": 1006, "martina": [1006, 1008], "vila": [1006, 1008], "15382": 1006, "14933": 1006, "15138": 1006, "cusick": 1006, "14406": 1006, "14012": 1006, "faouzi": [1006, 1007], "13769": 1006, "14194": 1006, "least_absolute_devi": [1006, 1008, 1009], "13896": 1006, "13933": 1006, "14710": 1006, "14869": 1006, "14682": 1006, "hancock": 1006, "5963": 1006, "pablo": [1006, 1009, 1010], "dubou": 1006, "14287": 1006, "15375": 1006, "14305": 1006, "14114": 1006, "15084": 1006, "14294": 1006, "14907": 1006, "14602": 1006, "chawla": 1006, "vectorizermixin": 1006, "14430": 1006, "strip_accents_unicod": 1006, "15100": 1006, "gradi": 1006, "overflowerror": 1006, "15463": 1006, "norvan": 1006, "sahin": 1006, "14520": 1006, "11635": 1006, "alec": 1006, "13704": 1006, "15557": 1006, "14378": 1006, "masashi": [1006, 1008], "shibata": 1006, "ashim": 1006, "bhattarai": 1006, "15010": 1006, "skip_comput": 1006, "13773": 1006, "14356": 1006, "15393": 1006, "venkatachalam": [1006, 1007, 1008, 1009, 1010], "14646": 1006, "14028": 1006, "15429": 1006, "14706": 1006, "14108": 1006, "14170": 1006, "14296": 1006, "13618": 1006, "13995": 1006, "14458": 1006, "14591": 1006, "14864": 1006, "15044": 1006, "15086": 1006, "15038": 1006, "15082": 1006, "13213": 1006, "14647": 1006, "linalgerror": 1006, "13393": 1006, "13707": 1006, "training_data_": 1006, "14357": 1006, "14900": 1006, "socastro": 1006, "9951": 1006, "14936": 1006, "15083": 1006, "12789": 1006, "15274": 1006, "13938": 1006, "15049": 1006, "toccac": 1006, "ptocca": 1006, "13231": 1006, "dong": 1006, "13467": 1006, "14595": 1006, "14865": 1006, "l\u00e9onard": [1006, 1011], "binet": [1006, 1011], "14732": 1006, "14417": 1006, "15625": 1006, "12258": 1006, "14898": 1006, "matcovici": 1006, "14593": 1006, "reboul": 1006, "14549": 1006, "14704": 1006, "15096": 1006, "14629": 1006, "15488": 1006, "15490": 1006, "12569": 1006, "bicker": 1006, "9597": 1006, "wenbo": [1006, 1008], "zhao": [1006, 1008, 1009, 1010], "14336": 1006, "dexter": 1006, "9274": 1006, "perri": 1006, "13806": 1006, "ana\u00ebl": 1006, "beaugnon": 1006, "15119": 1006, "15053": 1006, "13290": 1006, "13987": 1006, "_pairwis": [1006, 1008], "13925": 1006, "robson": 1006, "15524": 1006, "xun": [1006, 1008], "12557": 1006, "border": 1006, "14286": 1006, "15099": 1006, "baselibsvm": 1006, "_sparse_fit": 1006, "14894": 1006, "danna": 1006, "naser": 1006, "12887": 1006, "15028": 1006, "guan": 1006, "14381": 1006, "11232": 1006, "sievert": 1006, "10815": 1006, "14035": 1006, "14475": 1006, "14538": 1006, "14872": 1006, "upcast": [1006, 1010], "15094": 1006, "choose_check_classifiers_label": 1006, "enforce_estimator_tags_i": 1006, "mock": 1006, "mockdatafram": 1006, "checkingclassifi": 1006, "newton_cg": 1006, "random_choice_csc": 1006, "fast_dict": 1006, "parallel_help": 1006, "14902": 1006, "14971": 1006, "nep": 1006, "14702": 1006, "13013": 1006, "13875": 1006, "14680": 1006, "check_classifier_multioutput": 1006, "check_regressor_multioutput": 1006, "13392": 1006, "rok": 1006, "mihevc": 1006, "check_transformer_data_not_an_arrai": 1006, "mro": [1006, 1007], "14884": 1006, "alphonsu": 1006, "abbi": [1006, 1007], "popa": [1006, 1007], "abdur": 1006, "rahmaan": 1006, "janhang": 1006, "abenbihi": 1006, "abhinav": [1006, 1009], "sagar": 1006, "jana": 1006, "lagat": 1006, "alessandro": [1006, 1008], "surac": 1006, "siqueira": 1006, "alexgoryainov": 1006, "itk": [1006, 1007, 1008], "alexshack": [1006, 1007, 1008], "akinkunl": 1006, "kaseorg": 1006, "maldonado": [1006, 1009], "angela": [1006, 1007], "ambroz": [1006, 1007], "anisha": 1006, "keshavan": 1006, "gutierrez": 1006, "anuja": 1006, "archana": [1006, 1008], "alva": 1006, "arnaudstiegl": 1006, "arpanchowdhri": 1006, "ashimb9": 1006, "ayomid": 1006, "bamidel": 1006, "baran": 1006, "buluttekin": 1006, "barrycg": 1006, "bill": [1006, 1007], "mill": 1006, "biswadip": 1006, "mandal": 1006, "blackd0t": 1006, "barklei": 1006, "c56poni": 1006, "camilaagw": 1006, "cartman_nabana": 1006, "catajara": 1006, "cgsavard": [1006, 1007], "vesteghem": 1006, "dakota": 1006, "grusak": 1006, "datenbergwerk": 1006, "dormagen": 1006, "deeplook": 1006, "drgfreeman": 1006, "cashman": 1006, "edvardlindelof": 1006, "ndirangu": [1006, 1010], "eunseop": 1006, "jeong": 1006, "fanni": 1006, "federicopisanu": 1006, "divo": 1006, "flaviomorelli": 1006, "francidona": 1006, "franco": 1006, "luqu": 1006, "freder": 1006, "haas": 1006, "g0g0gadget": 1006, "altai": 1006, "vale": 1006, "rio": [1006, 1008, 1009, 1010], "ganevgv": 1006, "gdex1": 1006, "getgaurav2": 1006, "gideon": 1006, "sonoiya": 1006, "gpapadok": [1006, 1010], "mogavero": 1006, "h4dr1en": 1006, "hadshirt": 1006, "hailei": [1006, 1007], "nguyen": [1006, 1007, 1010], "hannah": [1006, 1008, 1010], "bruce": [1006, 1007], "macdonald": [1006, 1007], "honglu": 1006, "ingrid": 1006, "spielman": 1006, "a16": [1006, 1007], "jaehong": 1006, "hill": 1006, "jai": [1006, 1010], "jeromedock": 1006, "jesper": 1006, "dramsch": 1006, "joanna": 1006, "ortiz": 1006, "kanika": 1006, "sabharw": 1006, "katarina": [1006, 1008], "slama": [1006, 1008], "kellycarmodi": 1006, "eth": 1006, "kensuk": 1006, "arai": 1006, "kesshi": [1006, 1007], "kevad": 1006, "lofti": [1006, 1007], "winata": [1006, 1008], "sheng": 1006, "dolmatov": 1006, "kirthi": 1006, "shankar": 1006, "sivamani": 1006, "katyal": 1006, "lakshmi": 1006, "krishnan": 1006, "lalliacqua": [1006, 1009], "lbfin": 1006, "loopym": 1006, "lostcoast": 1006, "huynh": [1006, 1008], "lrjball": [1006, 1007], "roeder": 1006, "maggiecheg": [1006, 1010], "maithreyi": 1006, "venkatesh": 1006, "maltimor": 1006, "maocx": 1006, "douriez": [1006, 1007], "oywa": 1006, "aladago": 1006, "mbillingr": 1006, "clare": 1006, "micah": 1006, "miguelbarao": 1006, "mina": [1006, 1007], "naghshhnejad": [1006, 1007], "motmoti": 1006, "mschaffenroth": 1006, "natasha": 1006, "nezar": 1006, "nidhin": 1006, "pattaniyil": 1006, "nishan": 1006, "mann": 1006, "nitya": 1006, "mandyam": 1006, "novaya": [1006, 1009], "nxorabl": 1006, "oleg": 1006, "stikhin": 1006, "omar": [1006, 1011], "saleem": 1006, "panpiort8": [1006, 1008], "paula": [1006, 1007], "poorna": [1006, 1008], "pspachtholz": [1006, 1007, 1008], "qdeffens": [1006, 1009], "garg": [1006, 1007], "rapha\u00ebl": 1006, "bournhonesqu": 1006, "reza": 1006, "gharibi": 1006, "payn": 1006, "rlm": 1006, "juergen": 1006, "sanjabi": 1006, "ruchitagard": 1006, "ruth": 1006, "waithera": 1006, "sackei": 1006, "samesh": [1006, 1007], "lakhotia": [1006, 1007], "sewook": 1006, "dare": 1006, "shreya": 1006, "simoncw": 1006, "smujjiga": 1006, "s\u00f6nke": 1006, "behrend": 1006, "soumirai": 1006, "steinfurt": [1006, 1008], "cowlei": 1006, "th0rwa": [1006, 1007], "theoptip": [1006, 1007], "theotheo": 1006, "thierno": 1006, "ibrahima": 1006, "diop": 1006, "schmitt": [1006, 1007], "tilen": 1006, "kusterl": 1006, "timsaur": 1006, "tola": 1006, "topisan": 1006, "ttang131": 1006, "veerlosar": 1006, "luzgin": 1006, "jeanselm": 1006, "lostanlen": 1006, "vnherdeiro": 1006, "wendi": 1006, "willdarnel": 1006, "wolframalpha": 1006, "xcjason": 1006, "martian": 1006, "xsat": 1006, "yinglr": 1006, "yokasr": 1006, "maxin": [1006, 1007], "yulia": 1006, "zamrii": 1006, "feng": [1006, 1008, 1009, 1010], "17959": 1007, "17848": 1007, "17742": 1007, "17995": 1007, "thomaz": 1007, "santana": [1007, 1010], "dsouza": [1007, 1008, 1009, 1010], "17433": 1007, "17985": 1007, "multinomialdevi": 1007, "logloss": [1007, 1011], "17694": 1007, "rempfler": 1007, "tsutomu": 1007, "kusanagi": [1007, 1009], "17357": 1007, "18016": 1007, "x_copi": 1007, "17914": 1007, "15730": 1007, "forrest": [1007, 1008], "17309": 1007, "swier": [1007, 1008], "heer": 1007, "17360": 1007, "17812": 1007, "bruno": [1007, 1008, 1009], "idl": 1007, "17210": 1007, "17235": 1007, "17204": 1007, "changed_onli": 1007, "17205": 1007, "15005": [1007, 1009], "slep009": [1007, 1009, 1010], "estimator_samples_": 1007, "16149": 1007, "11950": 1007, "11514": 1007, "16075": 1007, "16484": 1007, "agglomerativecluclust": 1007, "16257": 1007, "simona": [1007, 1008, 1009], "maggio": [1007, 1008, 1009], "16801": 1007, "rcwoolston": 1007, "16431": 1007, "14048": 1007, "15963": 1007, "16084": 1007, "15950": 1007, "stephani": 1007, "15980": 1007, "wconnel": 1007, "15709": 1007, "15707": 1007, "maciej": 1007, "mikulski": 1007, "16006": 1007, "rushabh": 1007, "vasani": 1007, "streamhandl": 1007, "logger": 1007, "handler": 1007, "16451": 1007, "16280": 1007, "16837": 1007, "wornbb": 1007, "15669": 1007, "chaitanya": 1007, "16224": 1007, "schwetlick": [1007, 1008], "gelavizh": 1007, "ahmadi": 1007, "marija": [1007, 1008], "vlajic": [1007, 1008], "wheeler": [1007, 1008], "16841": 1007, "16655": 1007, "16718": 1007, "miotto": 1007, "16981": 1007, "g\u00f3rski": [1007, 1008], "14696": 1007, "14516": 1007, "15582": 1007, "16069": 1007, "bail": 1007, "16183": 1007, "16182": 1007, "santhosh": 1007, "16437": 1007, "hwan": 1007, "cho": 1007, "16539": 1007, "deros": 1007, "16692": 1007, "16663": 1007, "15834": 1007, "santiago": 1007, "mola": 1007, "16103": 1007, "divyaprabha": 1007, "selectormixin": 1007, "16132": 1007, "trimeta": 1007, "15503": 1007, "15782": 1007, "plgreenliru": 1007, "16403": 1007, "narendra": 1007, "mukherje": 1007, "16508": 1007, "15864": 1007, "14300": 1007, "15436": 1007, "15652": 1007, "15179": 1007, "angelaambroz": 1007, "15773": 1007, "15655": 1007, "14848": 1007, "absgrad": 1007, "_newton_cg": 1007, "16266": 1007, "standard_coef_": 1007, "standard_intercept_": 1007, "average_coef_": 1007, "average_intercept_": 1007, "16261": 1007, "brandt": 1007, "16849": 1007, "14264": 1007, "17021": 1007, "16323": 1007, "16362": 1007, "16442": 1007, "parson": [1007, 1009], "rick": 1007, "mackenbach": 1007, "16993": 1007, "emit": 1007, "15622": 1007, "mors": 1007, "15918": 1007, "kubin": 1007, "fit_grid_point": 1007, "16401": 1007, "pratama": 1007, "sutiono": 1007, "15953": 1007, "15959": 1007, "16111": 1007, "16090": 1007, "jayaratn": [1007, 1008], "14075": 1007, "meyer89": 1007, "16117": 1007, "15785": 1007, "16245": 1007, "16585": 1007, "15762": 1007, "16466": 1007, "16632": 1007, "maura": 1007, "pintor": 1007, "battista": 1007, "biggio": 1007, "15946": 1007, "ngshya": 1007, "32767": 1007, "mersenn": 1007, "twister": 1007, "31bit": 1007, "63bit": 1007, "crude": 1007, "postprocessor": 1007, "lemir": 1007, "13511": 1007, "kennel": 1007, "11296": 1007, "15558": 1007, "15806": 1007, "16331": 1007, "batiss": 1007, "15926": 1007, "16021": 1007, "sparsearrai": 1007, "16728": 1007, "uint": 1007, "17032": 1007, "_safe_tag": 1007, "16950": 1007, "15380": 1007, "acitiv": 1007, "16726": 1007, "16112": 1007, "16622": 1007, "17061": 1007, "aleksandra": 1007, "kocot": 1007, "alonso": [1007, 1009], "allend": [1007, 1009], "ana": [1007, 1009], "casado": 1007, "ankit810": 1007, "arunav": 1007, "konwar": 1007, "maingret": 1007, "beier": 1007, "berni": 1007, "bharathi": 1007, "brigi": [1007, 1008], "castachick": 1007, "castor": 1007, "corri": 1007, "bartelheim": 1007, "dani\u00ebl": 1007, "gelder": 1007, "daphn": 1007, "breuer": 1007, "cort": [1007, 1008], "dbauer9": 1007, "borovikova": 1007, "eln": 1007, "emili": [1007, 1008], "leung": 1007, "evgeni": 1007, "chasnovski": 1007, "fabiana": 1007, "facundo": [1007, 1010], "ferr\u00edn": 1007, "franziska": 1007, "boenisch": 1007, "bolmier": [1007, 1008], "gholdman1": 1007, "gonthier": 1007, "hao": [1007, 1008, 1010], "chun": [1007, 1008, 1010], "haoyin": [1007, 1009, 1010], "h\u00e9lion": 1007, "bourboux": 1007, "himanshu": [1007, 1010], "hirofumi": [1007, 1008], "suzuki": [1007, 1008], "huangk10": 1007, "kemenad": 1007, "hye": 1007, "sung": 1007, "indecisiveus": [1007, 1008], "inderjeet": 1007, "jjmistri": 1007, "haitz": [1007, 1009, 1010], "legarreta": [1007, 1009, 1010], "gorro\u00f1o": [1007, 1009, 1010], "judithabk6": 1007, "jumon": 1007, "kathryn": 1007, "krishnachaitanya9": 1007, "gia": 1007, "thuan": 1007, "lkubin": 1007, "lopusz": 1007, "lucgiffon": 1007, "lucyleeow": 1007, "kemk": 1007, "magda": 1007, "zielinska": 1007, "mandi": [1007, 1010], "gu": [1007, 1008, 1010], "manish": 1007, "aradwad": 1007, "maren": [1007, 1008, 1009, 1010], "westermann": [1007, 1008, 1009, 1010], "mariana": 1007, "meirel": 1007, "mariel": 1007, "mc4229": 1007, "shoemak": 1007, "micha\u0142": 1007, "s\u0142apek": 1007, "mo": 1007, "mojca": 1007, "bertoncelj": 1007, "narendramukherje": 1007, "nicolasservel": 1007, "nkish": 1007, "noa": 1007, "tamir": [1007, 1010], "olicairn": 1007, "ur": 1007, "lenz": 1007, "delanou": 1007, "qizhi": 1007, "quang": 1007, "rachelcjordan": 1007, "raduspaimoc": 1007, "riccardo": 1007, "folloni": 1007, "ritchi": 1007, "rori": 1007, "hartong": 1007, "redden": 1007, "sambhav": 1007, "kothari": 1007, "santhoshbala18": 1007, "sarat": 1007, "addep": 1007, "scibol": 1007, "kie\u00dfl": 1007, "sergiodsr": 1007, "shiki": 1007, "shubh": 1007, "chatterje": 1007, "simonamaggio": [1007, 1008, 1009], "snowhit": 1007, "stareh": 1007, "marsh": 1007, "sunmi": 1007, "yoon": 1007, "talgatomarov": 1007, "tamirlan1": 1007, "nonner": 1007, "vink": [1007, 1009], "tiphain": 1007, "viard": 1007, "titu": 1007, "vachan": 1007, "vandana": 1007, "iyer": 1007, "waelbenamara": 1007, "wderos": 1007, "wenliwyan": 1007, "windber": 1007, "19579": 1008, "19646": 1008, "stopiter": 1008, "19922": 1008, "19732": 1008, "ishikawa": [1008, 1009], "19407": 1008, "ushtanit": [1008, 1009], "19982": 1008, "19939": 1008, "halvic": 1008, "19703": 1008, "sobkevich": 1008, "villaz\u00f3n": 1008, "terraza": 1008, "fonari": [1008, 1009], "19182": 1008, "yosuk": [1008, 1009], "kobayashi": [1008, 1009], "19721": 1008, "19659": 1008, "19211": 1008, "19847": 1008, "xiaoyu": 1008, "chai": 1008, "19308": 1008, "19234": 1008, "19727": 1008, "delong": [1008, 1009], "transfrom": 1008, "19888": 1008, "19924": 1008, "19271": 1008, "zhaowei": 1008, "19580": 1008, "brice": [1008, 1009], "adamson": 1008, "wil": 1008, "yegelwel": 1008, "css": 1008, "19417": 1008, "19179": 1008, "19126": 1008, "17448": 1008, "17107": 1008, "17546": 1008, "17856": 1008, "17984": 1008, "riedmann": 1008, "francesco": 1008, "casalegno": 1008, "18052": 1008, "sean": [1008, 1009, 1011], "stallei": 1008, "17937": 1008, "counts_": 1008, "init_size_": 1008, "17864": 1008, "17616": 1008, "18167": 1008, "18256": 1008, "jayratn": 1008, "16392": 1008, "17095": 1008, "18746": 1008, "18525": 1008, "norm_y_weight": 1008, "x_mean_": 1008, "y_mean_": 1008, "x_std_": 1008, "y_std_": 1008, "18768": 1008, "18302": 1008, "md5": 1008, "checksum": 1008, "14800": 1008, "17396": 1008, "jiaxiang": 1008, "17491": 1008, "18280": 1008, "17499": 1008, "17610": 1008, "11064": 1008, "17414": 1008, "18149": 1008, "17679": 1008, "18528": 1008, "villanova": [1008, 1009], "14446": 1008, "18394": 1008, "16985": 1008, "garbag": 1008, "18334": 1008, "multicor": [1008, 1009], "18341": 1008, "egor": 1008, "smirnov": 1008, "18410": 1008, "17702": 1008, "18326": 1008, "changedbehaviorwarn": 1008, "nonblasdotwarn": 1008, "17804": 1008, "17367": 1008, "15427": 1008, "gangesh": 1008, "gudmalwar": 1008, "erin": 1008, "6545": 1008, "17159": 1008, "15361": 1008, "17878": 1008, "17090": 1008, "_check_bounds_param": 1008, "12638": 1008, "lannuzel": 1008, "17526": 1008, "ayako": 1008, "yagi": 1008, "17612": 1008, "srimukh": 1008, "sripada": 1008, "16493": 1008, "darshan": 1008, "15636": 1008, "18987": 1008, "16619": 1008, "16906": 1008, "roei": 1008, "kahni": 1008, "18293": 1008, "16289": 1008, "kishimoto": 1008, "18639": 1008, "13003": 1008, "s\u00e1nchez": 1008, "18545": 1008, "laurenz": 1008, "reitsam": 1008, "17578": 1008, "knox": 1008, "6624": 1008, "marijn": 1008, "vliet": 1008, "18121": 1008, "18607": 1008, "fhaselbeck": 1008, "18622": 1008, "haesun": 1008, "10493": 1008, "17997": 1008, "maisonneuv": 1008, "17662": 1008, "18278": 1008, "17412": 1008, "16625": 1008, "10591": 1008, "karnowski": 1008, "plot_det_curv": [1008, 1009], "18176": 1008, "10708": 1008, "15007": 1008, "hathidara": 1008, "10711": 1008, "17192": 1008, "avi": [1008, 1009], "17225": 1008, "17569": 1008, "17651": 1008, "mato": 1008, "17777": 1008, "shubhanshu": 1008, "mishra": [1008, 1009], "17826": 1008, "decal": 1008, "willard": 1008, "17935": 1008, "cari": 1008, "goltermann": 1008, "18114": 1008, "18405": 1008, "yakov": 1008, "pchelintsev": 1008, "13900": 1008, "17478": 1008, "teon": 1008, "13204": 1008, "kosic": 1008, "18527": 1008, "18343": 1008, "devi": 1008, "sandeep": 1008, "18595": 1008, "18222": 1008, "18266": 1008, "subrat": 1008, "sahu": 1008, "15126": 1008, "17987": 1008, "17233": 1008, "zolisa": 1008, "bleki": 1008, "histgradientboost": 1008, "18124": 1008, "brocchini": 1008, "armstrong": 1008, "17427": 1008, "17038": 1008, "neighborsbas": [1008, 1011], "17148": 1008, "18691": 1008, "18370": 1008, "18612": 1008, "17603": 1008, "17604": 1008, "17606": 1008, "17608": 1008, "17609": 1008, "17633": 1008, "17661": 1008, "17932": 1008, "16352": 1008, "17759": 1008, "18269": 1008, "17876": 1008, "18429": 1008, "biernat": 1008, "17317": 1008, "17406": 1008, "wick": 1008, "18406": 1008, "17833": 1008, "yashika": 1008, "18510": 1008, "18447": 1008, "16066": 1008, "18682": 1008, "16935": 1008, "17193": 1008, "16335": 1008, "14982": 1008, "11682": 1008, "patric": [1008, 1009], "15763": 1008, "16530": 1008, "shuhua": 1008, "17386": 1008, "17187": 1008, "x_idx_sort": 1008, "17614": 1008, "check_methods_sample_order_invari": [1008, 1010], "17598": 1008, "ngo": 1008, "17992": 1008, "endian": 1008, "17644": 1008, "18508": 1008, "abo7atm": 1008, "spannbauer": 1008, "deodhar": 1008, "alexandracraciun": 1008, "amy12xx": 1008, "tiwari": 1008, "choraria": 1008, "subramaniyan": 1008, "kushwaha": 1008, "atsushi": [1008, 1009], "nukariya": [1008, 1009], "aura": 1008, "autoviz": 1008, "auto_viml": 1008, "avinash": 1008, "anak": 1008, "barankaraku": 1008, "barberogaston": 1008, "beatrizsmg": 1008, "mainy": 1008, "bossan": [1008, 1010], "pedigo": [1008, 1009], "bhavika": 1008, "devnani": 1008, "biprateep": 1008, "dei": 1008, "bmaisonn": 1008, "byron": 1008, "ceethinwa": [1008, 1009], "chaitanyamog": 1008, "clmbst": 1008, "coelhudo": 1008, "crispinlogan": 1008, "cristina": 1008, "mula": 1008, "darioka": [1008, 1010], "declan": 1008, "neill": 1008, "deeksha": 1008, "madan": 1008, "fiegel": [1008, 1009, 1011], "khoo": 1008, "eschibli": 1008, "fran": [1008, 1009, 1010], "larsson": [1008, 1009, 1010], "sheni": 1008, "genvalen": [1008, 1009, 1010], "kiragu": 1008, "gesa": 1008, "stupperich": 1008, "ghislain": 1008, "vaillant": 1008, "gim": 1008, "seng": 1008, "chevali": 1008, "bohl": [1008, 1010], "schole": 1008, "hitesh": 1008, "somani": 1008, "hoda1394": 1008, "moin": 1008, "hugorichard": 1008, "isuru": 1008, "wiryadi": 1008, "j0rd1smit": 1008, "jaehyun": 1008, "ahn": 1008, "tae": 1008, "hoctor": 1008, "vese": 1008, "jeevan": 1008, "jeroenpeterbo": 1008, "jhay": 1008, "jigna": 1008, "panchal": 1008, "jim0421": 1008, "joaquin": 1008, "gorb": 1008, "moya": 1008, "kartik": 1008, "chugh": 1008, "kaylani2": 1008, "kendrick": 1008, "cetina": 1008, "kenni": 1008, "isakov": 1008, "koki": 1008, "nishihara": 1008, "krum": [1008, 1010], "arnaudov": [1008, 1010], "oldja": 1008, "guitton": 1008, "mariam": 1008, "l\u00f6ning": 1008, "scheubrein": 1008, "megasari": 1008, "mathschi": 1008, "giudic": 1008, "milan": 1008, "straka": 1008, "muoki": 1008, "caleb": 1008, "haiat": 1008, "nadia": 1008, "tahiri": 1008, "ph": 1008, "hamada": 1008, "neil": 1008, "botelho": 1008, "nil": 1008, "noelano": 1008, "oj_lappi": 1008, "oleh": [1008, 1010], "kozynet": [1008, 1010], "pankaj": 1008, "jindal": 1008, "pardeep": 1008, "parthiv": 1008, "chigurupati": 1008, "pgithub": 1008, "probinette4": 1008, "pwalchessen": 1008, "rachel": 1008, "fischoff": 1008, "toshniw": 1008, "rafei": 1008, "iqbal": 1008, "rahul": 1008, "jakhar": 1008, "rachum": 1008, "ramyanp": [1008, 1009], "rauwuckl": 1008, "ravi": 1008, "kiran": 1008, "boggavarapu": 1008, "rishi": 1008, "advani": 1008, "rithvik": 1008, "romijnd": 1008, "tavenard": 1008, "rubi": 1008, "werman": 1008, "ryotaro": 1008, "tsukada": 1008, "sadak": 1008, "khandelw": 1008, "ezebunandu": 1008, "kimbinyi": 1008, "shail": 1008, "keller": 1008, "shao": [1008, 1009, 1010], "shooter23": [1008, 1009], "soledad": 1008, "galli": 1008, "subrat93": 1008, "sunitha": 1008, "selvan": 1008, "kusanagi2": 1008, "terenc": [1008, 1009], "honl": [1008, 1009], "thij": 1008, "thomas9292": 1008, "thorben": 1008, "tijanajovanov": 1008, "timo": 1008, "tnwei": 1008, "ufmay": 1008, "umberto": 1008, "lupo": 1008, "vika": [1008, 1010], "viniciu": [1008, 1009], "fuck": [1008, 1009], "violeta": 1008, "watchtheblur": 1008, "willpeppo": 1008, "xethan": 1008, "qianm": 1008, "yue": 1008, "yutaro": 1008, "ikeda": 1008, "zacchari": 1008, "ramzi": 1008, "zoj613": 1008, "21271": 1009, "21833": 1009, "siavash": 1009, "rezazadeh": 1009, "19210": 1009, "21295": 1009, "22050": 1009, "21991": 1009, "19869": 1009, "21481": [1009, 1010], "andr\u00e9": [1009, 1010], "babino": [1009, 1010], "disconnect": 1009, "21915": 1009, "21694": 1009, "minknowski": 1009, "21741": 1009, "21871": 1009, "21845": 1009, "21517": 1009, "21917": 1009, "21552": 1009, "escap": 1009, "21493": 1009, "21199": 1009, "20638": 1009, "bohn\u00e9": 1009, "21179": 1009, "21195": 1009, "21130": 1009, "20761": 1009, "21251": 1009, "min_idf": 1009, "max_idf": 1009, "20752": 1009, "alek": [1009, 1010], "lefebvr": [1009, 1010], "21340": 1009, "21093": 1009, "21351": 1009, "cve": 1009, "28975": 1009, "21336": 1009, "_check_sample_weight": 1009, "only_non_neg": 1009, "20880": 1009, "andr\u00e1": [1009, 1010], "if_delegate_has_method": [1009, 1010], "21145": 1009, "zahlii": 1009, "21389": 1009, "20002": 1009, "19310": 1009, "least_squar": 1009, "19733": 1009, "lad": 1009, "absolute_loss": 1009, "20165": 1009, "18444": 1009, "18010": 1009, "threadsaf": 1009, "18736": 1009, "17443": 1009, "19641": 1009, "20087": 1009, "fauchereau": 1009, "19002": 1009, "19052": 1009, "yusuk": 1009, "nagasaka": 1009, "17622": 1009, "19024": 1009, "franki": 1009, "robertson": 1009, "20117": 1009, "natchiappan": [1009, 1010], "19883": 1009, "20597": 1009, "20899": 1009, "20200": 1009, "fit_": 1009, "partial_fit_": 1009, "19297": 1009, "20560": 1009, "18393": 1009, "bittarello": 1009, "19263": 1009, "19244": 1009, "18459": 1009, "nd": 1009, "18898": 1009, "ora": 1009, "phongpanagnam": 1009, "21080": 1009, "ledoit_wolf_shrinkag": 1009, "20416": 1009, "defoi": 1009, "20583": 1009, "19365": 1009, "ateif": 1009, "sara": 1009, "19669": 1009, "importlib": 1009, "pyoxid": 1009, "20297": 1009, "20209": 1009, "19011": 1009, "20729": 1009, "12069": 1009, "19046": 1009, "surya": [1009, 1010], "18433": 1009, "19198": 1009, "19159": 1009, "beno\u00eet": 1009, "mal\u00e9zieux": 1009, "19908": 1009, "20512": 1009, "20960": 1009, "cgroup": [1009, 1010], "quota": [1009, 1010], "20477": 1009, "19799": 1009, "19564": 1009, "19836": 1009, "19162": 1009, "10096": 1009, "fenil": 1009, "suchak": 1009, "20159": 1009, "murata": [1009, 1010], "20534": 1009, "19296": 1009, "19035": 1009, "19520": 1009, "18964": 1009, "19401": 1009, "relova": 1009, "17169": 1009, "dmytro": 1009, "lituiev": 1009, "20380": 1009, "pulido": 1009, "felip": [1009, 1010], "bidu": [1009, 1010], "rutter": 1009, "20515": 1009, "carsten": 1009, "allefeld": 1009, "19568": 1009, "shyam": 1009, "20207": 1009, "tomohiro": 1009, "endo": 1009, "20161": 1009, "shuhei": 1009, "kayawari": 1009, "arka204": [1009, 1011], "20431": 1009, "pfaffel": 1009, "19428": 1009, "hamoumi": 1009, "19411": 1009, "20959": 1009, "20554": 1009, "xiangyin": 1009, "kong": 1009, "9978": 1009, "10027": 1009, "16449": 1009, "20231": 1009, "naka": 1009, "19571": 1009, "20155": 1009, "oura": [1009, 1010, 1011], "19004": 1009, "midvidi": 1009, "19055": 1009, "19172": 1009, "19426": 1009, "19499": 1009, "strubel": 1009, "19616": 1009, "19391": 1009, "19390": 1009, "linearmodel": 1009, "17743": 1009, "17772": 1009, "17746": 1009, "17785": 1009, "17750": 1009, "17769": 1009, "20683": 1009, "19491": 1009, "19472": 1009, "shortest_path": 1009, "20531": 1009, "19415": 1009, "17036": 1009, "20326": 1009, "uttam": 1009, "9843": 1009, "19643": 1009, "attard": 1009, "19784": 1009, "18328": 1009, "20312": 1009, "divyanshu": 1009, "deoli": 1009, "18543": 1009, "20552": 1009, "19278": 1009, "20030": 1009, "tingshan": 1009, "18649": 1009, "rodion": 1009, "martynov": 1009, "20619": 1009, "baseshufflesplit": 1009, "20056": 1009, "pabloduque0": 1009, "prematur": 1009, "20904": 1009, "tomasz": 1009, "jakubek": [1009, 1010], "18925": 1009, "poznik": [1009, 1010], "18842": 1009, "19473": 1009, "jiefangxuanyan": 1009, "20072": 1009, "20842": 1009, "mart\u00edn": [1009, 1010], "19631": 1009, "19790": 1009, "flynn": [1009, 1011], "18368": 1009, "19483": 1009, "20526": 1009, "19069": 1009, "19041": 1009, "20250": 1009, "20652": 1009, "19934": 1009, "gleb": [1009, 1011], "levitskii": 1009, "19734": 1009, "robinson": 1009, "19752": 1009, "zhehao": [1009, 1010, 1011], "19527": 1009, "19788": 1009, "19356": 1009, "makoeppel": 1009, "19879": 1009, "19906": 1009, "20727": 1009, "20961": 1009, "n_input_features_": 1009, "20240": 1009, "20843": 1009, "18959": 1009, "wstate": 1009, "20023": 1009, "19336": 1009, "20272": 1009, "19459": 1009, "bezuidenhout": 1009, "clifford": 1009, "akai": 1009, "nettei": 1009, "19948": 1009, "20657": 1009, "19766": 1009, "propreti": 1009, "20385": 1009, "_weighted_percentil": 1009, "huberlossfunct": 1009, "20528": 1009, "_safe_index": 1009, "20673": 1009, "is_scalar_nan": 1009, "assert_warn": 1009, "assert_warns_messag": 1009, "20521": 1009, "abdulelah": 1009, "mesfer": 1009, "adrian": [1009, 1010, 1011], "garcia": 1009, "badaracco": 1009, "sad\u0142ocha": 1009, "rubial": 1009, "alessia": 1009, "marcolini": 1009, "alihan": 1009, "zihna": 1009, "alin": 1009, "amol": 1009, "deshmukh": 1009, "pessoa": 1009, "anavelyz": 1009, "ashish": 1009, "ashvith": 1009, "shetti": 1009, "baam": [1009, 1010], "baptbillard": 1009, "bmalezieux": 1009, "bumblebe": 1009, "caherrera": 1009, "meli": [1009, 1010], "chrissobel": 1009, "yeh": 1009, "chuliang": 1009, "cliffordemmanuel": 1009, "conner": 1009, "shen": 1009, "dimitri": [1009, 1010], "papadopoulo": [1009, 1010], "orfano": [1009, 1010], "dmallia17": 1009, "ds_ana": 1009, "jardim": 1009, "edwinwenink": 1009, "eleni": 1009, "markou": 1009, "ericellwang": [1009, 1010], "ezri": 1009, "mudd": 1009, "fato": 1009, "morina": 1009, "hafner": 1009, "flyingdutchman23": 1009, "uwha": [1009, 1010], "bereng": 1009, "frederick": 1009, "frellwan": 1009, "vicent": [1009, 1010], "geroldcsend": 1009, "glen": 1009, "gl\u00f2ria": 1009, "mu\u00f1oz": 1009, "gregorystrubel": 1009, "groceryheist": 1009, "guiweb": 1009, "haidar": [1009, 1010], "almubarak": [1009, 1010], "moritz": 1009, "g\u00fcnther": 1009, "mirza": 1009, "harutaka": 1009, "kawamura": 1009, "hassan": 1009, "alsawadi": 1009, "geovan": [1009, 1010], "gome": [1009, 1010], "lima": [1009, 1010], "ilic": 1009, "ikko": 1009, "ashimin": 1009, "isaack": 1009, "mungui": 1009, "ishaan": 1009, "bhat": 1009, "ishan": [1009, 1010], "iwhalv": 1009, "preiss": 1009, "budarz": 1009, "jannik": 1009, "jennif": 1009, "jianzhu": 1009, "guo": 1009, "jnboehm": 1009, "johanwork": 1009, "paton": 1009, "n\u00e1pole": 1009, "julio": 1009, "julyrashchenko": 1009, "jvm": 1009, "kadatatlu": 1009, "kishor": 1009, "karen": 1009, "palacio": 1009, "kmatt10": 1009, "kobaski": 1009, "kot271828": 1009, "kunj": 1009, "kurumeyuta": 1009, "kxytim": 1009, "lacrosse91": 1009, "laveen": 1009, "bagai": 1009, "leonardo": 1009, "rocco": [1009, 1010], "uieda": 1009, "leopoldo": 1009, "corona": 1009, "lsturtew": 1009, "lucca": 1009, "quadro": 1009, "ly648499246": 1009, "mabu": 1009, "manaileng": 1009, "mariangela": 1009, "marielaraj": 1009, "hirzel": 1009, "mateo": 1009, "nore\u00f1a": 1009, "mathi": 1009, "batoul": 1009, "calcot": 1009, "prieur": 1009, "\u00f6zer": 1009, "miao": 1009, "cai": 1009, "karbownik": 1009, "michalkrawczyk": [1009, 1010], "mitzi": [1009, 1010], "mlondschien": 1009, "haseeb": [1009, 1010], "khoual": 1009, "jarir": 1009, "kanji": 1009, "nadim": 1009, "kawwa": 1009, "nanshan": 1009, "naozin555": 1009, "fultz": 1009, "nic": 1009, "annau": 1009, "stefani": [1009, 1011], "nigel": 1009, "bosch": 1009, "nodar": 1009, "okroshiashvili": 1009, "ogbonna": 1009, "chibuik": 1009, "ogordon100": 1009, "phongpanangam": 1009, "duqu": 1009, "ibieta": 1009, "jimenez": [1009, 1010], "lacouth": 1009, "olszewski": 1009, "dye": 1009, "pierreattard": [1009, 1010], "yve": 1009, "borgn": 1009, "pranayanchuri": 1009, "princ": 1009, "canuma": 1009, "putschblo": 1009, "ranjanikrishnan": 1009, "rene": 1009, "corneil": 1009, "ricardojnf": 1009, "richardscottoz": 1009, "sandi": 1009, "khosasi": 1009, "benhur": 1009, "flore": 1009, "shinehid": 1009, "shinnar": 1009, "tootoonian": 1009, "solosil": 1009, "kolawol": 1009, "stagg": 1009, "swpeas": 1009, "tfifi": 1009, "caswel": 1009, "timotheemathieu": 1009, "wolodzko": 1009, "tliu68": 1009, "uhmann": 1009, "tom1092": 1009, "tom\u00e1": [1009, 1010], "moreyra": 1009, "tommaso": 1009, "noto": 1009, "tsuga": 1009, "vang": 1009, "gkiasta": 1009, "vil\u00e9m": 1009, "zouhar": 1009, "vlasovet": 1009, "waijean": 1009, "whidou": 1009, "xiaoyuchai": 1009, "yasmeen": 1009, "alsaedi": 1009, "yoch": 1009, "yusukenagasaka": 1009, "yzhenman": 1009, "zeyusun": 1009, "zhaoweiwang": 1009, "msvcp140": 1010, "dll": 1010, "24631": 1010, "24446": 1010, "10805": 1010, "mathia": 1010, "23471": 1010, "24015": 1010, "23990": 1010, "23833": 1010, "24017": 1010, "sorski": 1010, "23395": 1010, "23636": 1010, "22063": 1010, "22059": 1010, "kurz": 1010, "23608": 1010, "23548": 1010, "24087": 1010, "23273": 1010, "23194": 1010, "23198": 1010, "lise": 1010, "kleiber": 1010, "23358": 1010, "23264": 1010, "feature_names_in": 1010, "23299": 1010, "23214": 1010, "collot": 1010, "baak": 1010, "23370": 1010, "23410": 1010, "compute_sample_weight": 1010, "23115": 1010, "22868": 1010, "multiindex": 1010, "22410": 1010, "23271": 1010, "21987": 1010, "22064": 1010, "22065": 1010, "22288": 1010, "22320": 1010, "21219": 1010, "21542": 1010, "23098": 1010, "22318": 1010, "23036": 1010, "23040": 1010, "23046": 1010, "22856": 1010, "21032": 1010, "18170": 1010, "21038": 1010, "14975": 1010, "22526": 1010, "23095": 1010, "silk": 1010, "20031": 1010, "krawczyk": 1010, "21148": 1010, "22255": 1010, "21881": 1010, "vassard": 1010, "22217": 1010, "21735": 1010, "22154": 1010, "22537": 1010, "iofal": 1010, "arisa": [1010, 1011], "22775": 1010, "22913": 1010, "randomgeek78": 1010, "22493": 1010, "19680": 1010, "thibaut": 1010, "22119": 1010, "22016": 1010, "22015": 1010, "19747": 1010, "attalla": 1010, "22498": 1010, "21482": 1010, "pujalt": 1010, "22412": 1010, "16605": 1010, "21901": 1010, "rileran": 1010, "23113": 1010, "ilion": 1010, "beyst": 1010, "21425": 1010, "stefanini": 1010, "16948": 1010, "patricio": 1010, "cerda": 1010, "22002": 1010, "21109": 1010, "18975": 1010, "22111": 1010, "22181": 1010, "21334": 1010, "21705": 1010, "stanlei": 1010, "21432": 1010, "22806": 1010, "jihan": 1010, "benni": 1010, "21713": 1010, "haya": 1010, "21567": 1010, "maggi": 1010, "chege": 1010, "22300": 1010, "15948": 1010, "sysuresh": 1010, "22553": 1010, "19490": 1010, "ferrin": 1010, "22120": 1010, "15984": 1010, "okon": 1010, "22696": 1010, "22486": 1010, "21800": 1010, "20567": 1010, "22159": 1010, "20811": 1010, "21814": 1010, "16748": 1010, "siqi": 1010, "22215": 1010, "23047": 1010, "22695": 1010, "22697": 1010, "21762": 1010, "22106": 1010, "gijsber": 1010, "21632": 1010, "genesi": 1010, "valencia": 1010, "22566": 1010, "22908": 1010, "23097": 1010, "23079": 1010, "20803": 1010, "23023": 1010, "21573": 1010, "21832": 1010, "20145": 1010, "22356": 1010, "18482": 1010, "gameiro": 1010, "kharsa": 1010, "22370": 1010, "17819": 1010, "22235": 1010, "21837": 1010, "wagner": 1010, "22199": 1010, "aidar": 1010, "shakerimoff": 1010, "tenavi": 1010, "nakamura": 1010, "22223": 1010, "marcom": 1010, "21617": 1010, "ritter": 1010, "21114": 1010, "21078": 1010, "21448": 1010, "16061": 1010, "19438": 1010, "18310": 1010, "elfner": 1010, "22249": 1010, "22137": 1010, "22694": 1010, "22808": 1010, "22950": 1010, "21086": 1010, "22206": 1010, "21808": 1010, "22548": 1010, "22062": 1010, "trujillo": [1010, 1011], "22148": 1010, "22240": 1010, "9087": 1010, "22525": 1010, "19689": 1010, "21606": 1010, "21341": 1010, "preservs": 1010, "21767": 1010, "21724": 1010, "yar": 1010, "khine": 1010, "phyo": 1010, "21998": 1010, "22891": 1010, "22899": 1010, "23256": 1010, "19794": 1010, "21534": 1010, "22254": 1010, "21805": 1010, "jeann": 1010, "dionisi": 1010, "22685": 1010, "n_neighbour": 1010, "18832": 1010, "23033": 1010, "21565": 1010, "17266": 1010, "interpet": 1010, "22118": 1010, "ohad": 1010, "22284": 1010, "19158": 1010, "nicki": 1010, "skaft": 1010, "20753": 1010, "22108": 1010, "22635": 1010, "19085": 1010, "22866": 1010, "21576": 1010, "emil": 1010, "dugnat": 1010, "21873": 1010, "21177": 1010, "20408": 1010, "ceballo": 1010, "22058": 1010, "23034": 1010, "22203": 1010, "21026": 1010, "21880": 1010, "mrinal": 1010, "tyagi": 1010, "22982": 1010, "22508": 1010, "comb": 1010, "22604": 1010, "22212": 1010, "21430": 1010, "desislava": 1010, "vasileva": 1010, "22687": 1010, "22150": 1010, "22248": 1010, "20860": 1010, "shubhraneel": 1010, "21888": 1010, "21954": 1010, "22953": 1010, "16018": 1010, "21445": 1010, "21988": 1010, "get_output_feature_nam": 1010, "21569": 1010, "21079": 1010, "20653": 1010, "21434": 1010, "19916": 1010, "22735": 1010, "compute_inverse_transform": 1010, "21701": 1010, "22114": 1010, "21330": 1010, "21408": 1010, "22149": 1010, "21436": 1010, "22191": 1010, "22476": 1010, "21278": 1010, "21316": 1010, "clickabl": 1010, "21298": 1010, "22237": 1010, "check_scalar": 1010, "22218": 1010, "validationerror": 1010, "check_requires_y_non": 1010, "22578": 1010, "arcidiacono": 1010, "22595": 1010, "21310": 1010, "22027": 1010, "lanterni": 1010, "23077": 1010, "22188": 1010, "22830": 1010, "2357juan": 1010, "adamgonzo": 1010, "adijohar": 1010, "kumawat": 1010, "raghuwanshi": 1010, "duron": 1010, "ahmadjubair33": 1010, "aj": 1010, "druck": 1010, "peixinho": 1010, "arroyo": 1010, "alexanmv": 1010, "almeidayoel": 1010, "amar": 1010, "amrcod": 1010, "griva": 1010, "andrii": 1010, "herrou": 1010, "ducout": 1010, "arth": 1010, "arthurmello": 1010, "arturoamor": 1010, "atharva": 1010, "patil": 1010, "aufarkari": 1010, "avm19": 1010, "ayan": 1010, "bardiya": 1010, "behrouz": 1010, "ben3940": 1010, "bijil": 1010, "subhash": 1010, "bmreinig": 1010, "brenden": 1010, "kadota": 1010, "cdrig": 1010, "chalmer": 1010, "chitteti": 1010, "srinath": [1010, 1011], "chloe": 1010, "agath": 1010, "azencott": 1010, "christopherlim98": 1010, "weidemann": 1010, "combsccod": 1010, "daniela": 1010, "darren": 1010, "eargl": 1010, "gilbertson": 1010, "dea": 1010, "mar\u00eda": 1010, "denni": 1010, "osei": 1010, "dessyvv": 1010, "dev514": 1010, "diwakar": 1010, "ries": 1010, "drskd": 1010, "emiko": 1010, "sano": 1010, "emmanouil": 1010, "gionanidi": 1010, "ermolaevpa": 1010, "estefania": 1010, "barreto": 1010, "ojeda": 1010, "eyast": 1010, "fatima": 1010, "gasmi": 1010, "luna": 1010, "glushchenkov": 1010, "fkaren27": 1010, "fpgawesom": 1010, "ftorres16": 1010, "gabor": 1010, "berei": 1010, "kertesz": 1010, "gauthier": 1010, "giancarlo": 1010, "glennfrutiz": 1010, "guillermo": 1010, "fern\u00e1ndez": 1010, "hansin": 1010, "henrymooresc": 1010, "hideaki": 1010, "imamura": 1010, "hind": 1010, "hmasdev": 1010, "hvassard": 1010, "aki": 1010, "iasoon": 1010, "ingela": 1010, "cowton": 1010, "jalexand3r": 1010, "jauhar": 1010, "jaya": 1010, "kommireddi": 1010, "je": 1010, "jelfner": 1010, "jenni": 1010, "jirka": 1010, "borovec": 1010, "cipri\u00e1n": 1010, "loayza": 1010, "chazalon": 1010, "mess": 1010, "jovan": [1010, 1011], "stojanov": [1010, 1011], "jschuerz": 1010, "katotten": 1010, "ken4git": 1010, "doucet": 1010, "kimayoung": 1010, "koushik": 1010, "kranthi": 1010, "sedamaki": 1010, "krumetoft": 1010, "lesne": 1010, "casino": 1010, "logan": 1010, "lucieclair": 1010, "luiz": 1010, "magali": 1010, "mandjev": 1010, "wurp": 1010, "boerner": 1010, "wimld": 1010, "martel": 1010, "corentin": 1010, "mat\u00eda": 1010, "matjansen": 1010, "francia": 1010, "megabyt": 1010, "mehrdad": 1010, "moradizadeh": 1010, "melemo2": 1010, "micky774": [1010, 1011], "milana2": 1010, "millawel": 1010, "miwojc": 1010, "mizuki": 1010, "mlant": 1010, "mohit": 1010, "moonkyung94": 1010, "mpoemsl": 1010, "mrinaltyagi": 1010, "leu": 1010, "msabati": 1010, "nadirhan": 1010, "\u015fahin": 1010, "naipawat": 1010, "poolsawat": 1010, "nartayxd": 1010, "nastegiano": 1010, "nathansquan": 1010, "detlefsen": 1010, "niket": 1010, "nikhil": 1010, "suresh": 1010, "kondratyev": 1010, "husak": 1010, "partev": 1010, "pelennor": 1010, "piet": 1010, "br\u00f6mmel": 1010, "pinki": 1010, "poloso": 1010, "pramod": 1010, "anantharam": 1010, "puhuk": 1010, "purna": 1010, "mansingh": 1010, "quadv": 1010, "rahil": [1010, 1011], "boy": 1010, "raz": 1010, "hoshia": 1010, "rishabh": 1010, "barnowski": 1010, "rsnegrin": 1010, "yadav": 1010, "sakinaouisrani": 1010, "sanjai": 1010, "marreddi": 1010, "seel": 1010, "sele": 1010, "seyedsaman": 1010, "emami": 1010, "shandeng123": 1010, "sharmadharmp": 1010, "shaymernaturalint": 1010, "shuangchi": 1010, "siavrez": 1010, "slishak": 1010, "spikebh": 1010, "sply88": 1010, "kailasa": [1010, 1011], "sultan": 1010, "orazbayev": 1010, "sumit": 1010, "saha": 1010, "sven": 1010, "eschlbeck": 1010, "stehl": 1010, "swapnil": 1010, "teunp": 1010, "ferr\u00e9": 1010, "hjortkj\u00e6r": 1010, "thiruvenkadam": 1010, "toastedyeast": 1010, "mctiernan": 1010, "udit": 1010, "ugo": 1010, "marchand": 1010, "vera": 1010, "komey": 1010, "victoireloui": 1010, "vishwakarma": 1010, "vikrant": 1010, "khedkar": 1010, "chernyi": 1010, "weijiadu": 1010, "yuan": 1010, "yiyangq": 1010, "yosshi999": 1010, "yuki": 1010, "koyama": 1010, "zeel": 1010, "zempleni": 1010, "zhenfish": 1010, "\u8d75\u4e30": 1010, "23619": 1011, "24465": 1011, "23935": 1011, "22527": 1011, "_sgd_fast": 1011, "_plain_sgd": 1011, "oversc": 1011, "23798": 1011, "24543": 1011, "24354": 1011, "safiuddin": 1011, "khaja": 1011, "gsiisg": 1011, "23734": 1011, "simd": 1011, "primit": 1011, "23446": 1011, "23197": 1011, "23604": 1011, "23585": 1011, "24617": 1011, "sim4n6": 1011, "24688": 1011, "22054": 1011, "roic": 1011, "23865": 1011, "14736": 1011, "hunt": 1011, "zhan": 1011, "20802": 1011, "pokorni": 1011, "22965": 1011, "22968": 1011, "23038": 1011, "propog": 1011, "23210": 1011, "23470": 1011, "24258": 1011, "24264": 1011, "maladier": 1011, "21938": 1011, "23127": 1011, "19075": 1011, "ramo": 1011, "carre\u00f1o": 1011, "22268": 1011, "mohamedbsh": 1011, "23905": 1011, "23726": 1011, "11860": 1011, "ablin": 1011, "24528": 1011, "24421": 1011, "kshitij": 1011, "22554": 1011, "24218": 1011, "molin": 1011, "24538": 1011, "21020": 1011, "22014": 1011, "23252": 1011, "24889": 1011, "24146": 1011, "peretti": 1011, "nestor": 1011, "navarro": 1011, "nati": 1011, "tomatti": 1011, "20415": 1011, "24283": 1011, "23819": 1011, "edoardo": 1011, "abati": 1011, "24245": 1011, "24405": 1011, "salman": 1011, "24317": 1011, "24350": 1011, "24755": 1011, "levitski": 1011, "24637": 1011, "24767": 1011, "23637": 1011, "23877": 1011, "23275": 1011, "maxwelllzh": 1011, "24433": 1011, "yogendrasingh": 1011, "10168": 1011, "\u0142ukasz": 1011, "borchmann": 1011, "12285": 1011, "miltenberg": 1011, "13042": 1011, "parizi": 1011, "18094": 1011, "22562": 1011, "24714": 1011, "24051": 1011, "22518": 1011, "23442": 1011, "atukorala": 1011, "22710": 1011, "conroi": 1011, "trinh": 1011, "23461": 1011, "24365": 1011, "24338": 1011, "24630": 1011, "rushil": 1011, "iinfo": 1011, "24141": 1011, "24539": 1011, "23977": 1011, "23683": 1011, "andrei": 1011, "melnik": 1011, "16747": 1011, "18805": 1011, "hongshaoyang": 1011, "22269": 1011, "10468": 1011, "ruben": 1011, "22993": 1011, "24750": 1011, "rudresh": 1011, "veerkhar": 1011, "24645": 1011, "23139": 1011, "23874": 1011, "24075": 1011, "24058": 1011, "perdok": 1011, "20331": 1011, "23993": 1011, "24412": 1011, "22629": 1011, "22898": 1011, "23480": 1011, "lapack_svd_driv": 1011, "20617": 1011, "14862": 1011, "24523": 1011, "mia": 1011, "bajic": 1011, "24512": 1011, "21469": 1011, "foor": 1011, "23834": 1011, "24667": 1011}, "objects": {"sklearn": [[389, 0, 0, "-", "base"], [389, 0, 0, "-", "calibration"], [389, 0, 0, "-", "cluster"], [389, 0, 0, "-", "compose"], [446, 4, 1, "", "config_context"], [389, 0, 0, "-", "covariance"], [389, 0, 0, "-", "cross_decomposition"], [389, 0, 0, "-", "datasets"], [389, 0, 0, "-", "decomposition"], [389, 0, 0, "-", "discriminant_analysis"], [389, 0, 0, "-", "dummy"], [389, 0, 0, "-", "ensemble"], [389, 0, 0, "-", "exceptions"], [389, 0, 0, "-", "experimental"], [389, 0, 0, "-", "feature_extraction"], [389, 0, 0, "-", "feature_selection"], [389, 0, 0, "-", "gaussian_process"], [603, 4, 1, "", "get_config"], [389, 0, 0, "-", "impute"], [389, 0, 0, "-", "inspection"], [389, 0, 0, "-", "isotonic"], [389, 0, 0, "-", "kernel_approximation"], [389, 0, 0, "-", "kernel_ridge"], [389, 0, 0, "-", "linear_model"], [389, 0, 0, "-", "manifold"], [389, 0, 0, "-", "metrics"], [389, 0, 0, "-", "mixture"], [389, 0, 0, "-", "model_selection"], [389, 0, 0, "-", "multiclass"], [389, 0, 0, "-", "multioutput"], [389, 0, 0, "-", "naive_bayes"], [389, 0, 0, "-", "neighbors"], [389, 0, 0, "-", "neural_network"], [389, 0, 0, "-", "pipeline"], [389, 0, 0, "-", "preprocessing"], [389, 0, 0, "-", "random_projection"], [389, 0, 0, "-", "semi_supervised"], [870, 4, 1, "", "set_config"], [871, 4, 1, "", "show_versions"], [389, 0, 0, "-", "svm"], [389, 0, 0, "-", "tree"], [389, 0, 0, "-", "utils"]], "sklearn.base": [[404, 1, 1, "", "BaseEstimator"], [405, 1, 1, "", "BiclusterMixin"], [406, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [407, 1, 1, "", "ClassifierMixin"], [408, 1, 1, "", "ClusterMixin"], [409, 1, 1, "", "DensityMixin"], [410, 1, 1, "", "OneToOneFeatureMixin"], [411, 1, 1, "", "RegressorMixin"], [412, 1, 1, "", "TransformerMixin"], [413, 4, 1, "", "clone"], [414, 4, 1, "", "is_classifier"], [415, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[404, 2, 1, "", "get_params"], [404, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[405, 3, 1, "", "biclusters_"], [405, 2, 1, "", "get_indices"], [405, 2, 1, "", "get_shape"], [405, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[406, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[407, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[408, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[409, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[410, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[411, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[412, 2, 1, "", "fit_transform"], [412, 2, 1, "", "set_output"]], "sklearn.calibration": [[416, 1, 1, "", "CalibratedClassifierCV"], [417, 1, 1, "", "CalibrationDisplay"], [418, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[416, 2, 1, "", "fit"], [416, 2, 1, "", "get_params"], [416, 2, 1, "", "predict"], [416, 2, 1, "", "predict_proba"], [416, 2, 1, "", "score"], [416, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[417, 2, 1, "", "from_estimator"], [417, 2, 1, "", "from_predictions"], [417, 2, 1, "", "plot"]], "sklearn.cluster": [[419, 1, 1, "", "AffinityPropagation"], [420, 1, 1, "", "AgglomerativeClustering"], [421, 1, 1, "", "Birch"], [422, 1, 1, "", "BisectingKMeans"], [423, 1, 1, "", "DBSCAN"], [424, 1, 1, "", "FeatureAgglomeration"], [425, 1, 1, "", "KMeans"], [426, 1, 1, "", "MeanShift"], [427, 1, 1, "", "MiniBatchKMeans"], [428, 1, 1, "", "OPTICS"], [429, 1, 1, "", "SpectralBiclustering"], [430, 1, 1, "", "SpectralClustering"], [431, 1, 1, "", "SpectralCoclustering"], [432, 4, 1, "", "affinity_propagation"], [433, 4, 1, "", "cluster_optics_dbscan"], [434, 4, 1, "", "cluster_optics_xi"], [435, 4, 1, "", "compute_optics_graph"], [401, 4, 1, "", "dbscan"], [436, 4, 1, "", "estimate_bandwidth"], [437, 4, 1, "", "k_means"], [438, 4, 1, "", "kmeans_plusplus"], [439, 4, 1, "", "mean_shift"], [440, 4, 1, "", "spectral_clustering"], [441, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[419, 2, 1, "", "fit"], [419, 2, 1, "", "fit_predict"], [419, 2, 1, "", "get_params"], [419, 2, 1, "", "predict"], [419, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[420, 2, 1, "", "fit"], [420, 2, 1, "", "fit_predict"], [420, 2, 1, "", "get_params"], [420, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[421, 2, 1, "", "fit"], [421, 2, 1, "", "fit_predict"], [421, 2, 1, "", "fit_transform"], [421, 2, 1, "", "get_feature_names_out"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "partial_fit"], [421, 2, 1, "", "predict"], [421, 2, 1, "", "set_output"], [421, 2, 1, "", "set_params"], [421, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[422, 2, 1, "", "fit"], [422, 2, 1, "", "fit_predict"], [422, 2, 1, "", "fit_transform"], [422, 2, 1, "", "get_feature_names_out"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "predict"], [422, 2, 1, "", "score"], [422, 2, 1, "", "set_output"], [422, 2, 1, "", "set_params"], [422, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[423, 2, 1, "", "fit"], [423, 2, 1, "", "fit_predict"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[424, 2, 1, "", "fit"], [424, 3, 1, "", "fit_predict"], [424, 2, 1, "", "fit_transform"], [424, 2, 1, "", "get_feature_names_out"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "inverse_transform"], [424, 2, 1, "", "set_output"], [424, 2, 1, "", "set_params"], [424, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[425, 2, 1, "", "fit"], [425, 2, 1, "", "fit_predict"], [425, 2, 1, "", "fit_transform"], [425, 2, 1, "", "get_feature_names_out"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "predict"], [425, 2, 1, "", "score"], [425, 2, 1, "", "set_output"], [425, 2, 1, "", "set_params"], [425, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "fit_predict"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "predict"], [426, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "fit_transform"], [427, 2, 1, "", "get_feature_names_out"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "partial_fit"], [427, 2, 1, "", "predict"], [427, 2, 1, "", "score"], [427, 2, 1, "", "set_output"], [427, 2, 1, "", "set_params"], [427, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[429, 3, 1, "", "biclusters_"], [429, 2, 1, "", "fit"], [429, 2, 1, "", "get_indices"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "get_shape"], [429, 2, 1, "", "get_submatrix"], [429, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "fit_predict"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[431, 3, 1, "", "biclusters_"], [431, 2, 1, "", "fit"], [431, 2, 1, "", "get_indices"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "get_shape"], [431, 2, 1, "", "get_submatrix"], [431, 2, 1, "", "set_params"]], "sklearn.compose": [[442, 1, 1, "", "ColumnTransformer"], [443, 1, 1, "", "TransformedTargetRegressor"], [444, 4, 1, "", "make_column_selector"], [445, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_params"], [442, 3, 1, "", "named_transformers_"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "get_params"], [443, 3, 1, "", "n_features_in_"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_params"]], "sklearn.covariance": [[447, 1, 1, "", "EllipticEnvelope"], [448, 1, 1, "", "EmpiricalCovariance"], [449, 1, 1, "", "GraphicalLasso"], [450, 1, 1, "", "GraphicalLassoCV"], [451, 1, 1, "", "LedoitWolf"], [452, 1, 1, "", "MinCovDet"], [453, 1, 1, "", "OAS"], [454, 1, 1, "", "ShrunkCovariance"], [455, 4, 1, "", "empirical_covariance"], [456, 4, 1, "", "graphical_lasso"], [457, 4, 1, "", "ledoit_wolf"], [403, 4, 1, "", "oas"], [458, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[447, 2, 1, "", "correct_covariance"], [447, 2, 1, "", "decision_function"], [447, 2, 1, "", "error_norm"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "get_precision"], [447, 2, 1, "", "mahalanobis"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "reweight_covariance"], [447, 2, 1, "", "score"], [447, 2, 1, "", "score_samples"], [447, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[448, 2, 1, "", "error_norm"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "get_precision"], [448, 2, 1, "", "mahalanobis"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[449, 2, 1, "", "error_norm"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_precision"], [449, 2, 1, "", "mahalanobis"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[450, 2, 1, "", "error_norm"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_precision"], [450, 2, 1, "", "mahalanobis"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[451, 2, 1, "", "error_norm"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_precision"], [451, 2, 1, "", "mahalanobis"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[452, 2, 1, "", "correct_covariance"], [452, 2, 1, "", "error_norm"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_precision"], [452, 2, 1, "", "mahalanobis"], [452, 2, 1, "", "reweight_covariance"], [452, 2, 1, "", "score"], [452, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[453, 2, 1, "", "error_norm"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_precision"], [453, 2, 1, "", "mahalanobis"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[454, 2, 1, "", "error_norm"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_precision"], [454, 2, 1, "", "mahalanobis"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[459, 1, 1, "", "CCA"], [460, 1, 1, "", "PLSCanonical"], [461, 1, 1, "", "PLSRegression"], [462, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[459, 3, 1, "", "coef_"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "fit_transform"], [459, 2, 1, "", "get_feature_names_out"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "inverse_transform"], [459, 2, 1, "", "predict"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_output"], [459, 2, 1, "", "set_params"], [459, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[460, 3, 1, "", "coef_"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "fit_transform"], [460, 2, 1, "", "get_feature_names_out"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "inverse_transform"], [460, 2, 1, "", "predict"], [460, 2, 1, "", "score"], [460, 2, 1, "", "set_output"], [460, 2, 1, "", "set_params"], [460, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[461, 3, 1, "", "coef_"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "fit_transform"], [461, 2, 1, "", "get_feature_names_out"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "inverse_transform"], [461, 2, 1, "", "predict"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_output"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_transform"], [462, 2, 1, "", "get_feature_names_out"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "set_output"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "transform"]], "sklearn.datasets": [[463, 4, 1, "", "clear_data_home"], [464, 4, 1, "", "dump_svmlight_file"], [465, 4, 1, "", "fetch_20newsgroups"], [466, 4, 1, "", "fetch_20newsgroups_vectorized"], [467, 4, 1, "", "fetch_california_housing"], [468, 4, 1, "", "fetch_covtype"], [469, 4, 1, "", "fetch_kddcup99"], [470, 4, 1, "", "fetch_lfw_pairs"], [471, 4, 1, "", "fetch_lfw_people"], [472, 4, 1, "", "fetch_olivetti_faces"], [473, 4, 1, "", "fetch_openml"], [474, 4, 1, "", "fetch_rcv1"], [475, 4, 1, "", "fetch_species_distributions"], [476, 4, 1, "", "get_data_home"], [477, 4, 1, "", "load_breast_cancer"], [478, 4, 1, "", "load_diabetes"], [479, 4, 1, "", "load_digits"], [480, 4, 1, "", "load_files"], [481, 4, 1, "", "load_iris"], [482, 4, 1, "", "load_linnerud"], [483, 4, 1, "", "load_sample_image"], [484, 4, 1, "", "load_sample_images"], [485, 4, 1, "", "load_svmlight_file"], [486, 4, 1, "", "load_svmlight_files"], [487, 4, 1, "", "load_wine"], [488, 4, 1, "", "make_biclusters"], [489, 4, 1, "", "make_blobs"], [490, 4, 1, "", "make_checkerboard"], [491, 4, 1, "", "make_circles"], [492, 4, 1, "", "make_classification"], [493, 4, 1, "", "make_friedman1"], [494, 4, 1, "", "make_friedman2"], [495, 4, 1, "", "make_friedman3"], [496, 4, 1, "", "make_gaussian_quantiles"], [497, 4, 1, "", "make_hastie_10_2"], [498, 4, 1, "", "make_low_rank_matrix"], [499, 4, 1, "", "make_moons"], [500, 4, 1, "", "make_multilabel_classification"], [501, 4, 1, "", "make_regression"], [502, 4, 1, "", "make_s_curve"], [503, 4, 1, "", "make_sparse_coded_signal"], [504, 4, 1, "", "make_sparse_spd_matrix"], [505, 4, 1, "", "make_sparse_uncorrelated"], [506, 4, 1, "", "make_spd_matrix"], [507, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[508, 1, 1, "", "DictionaryLearning"], [509, 1, 1, "", "FactorAnalysis"], [510, 1, 1, "", "FastICA"], [511, 1, 1, "", "IncrementalPCA"], [512, 1, 1, "", "KernelPCA"], [513, 1, 1, "", "LatentDirichletAllocation"], [514, 1, 1, "", "MiniBatchDictionaryLearning"], [515, 1, 1, "", "MiniBatchNMF"], [516, 1, 1, "", "MiniBatchSparsePCA"], [517, 1, 1, "", "NMF"], [518, 1, 1, "", "PCA"], [519, 1, 1, "", "SparseCoder"], [520, 1, 1, "", "SparsePCA"], [521, 1, 1, "", "TruncatedSVD"], [522, 4, 1, "", "dict_learning"], [523, 4, 1, "", "dict_learning_online"], [402, 4, 1, "", "fastica"], [524, 4, 1, "", "non_negative_factorization"], [525, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[508, 2, 1, "", "fit"], [508, 2, 1, "", "fit_transform"], [508, 2, 1, "", "get_feature_names_out"], [508, 2, 1, "", "get_params"], [508, 2, 1, "", "set_output"], [508, 2, 1, "", "set_params"], [508, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[509, 2, 1, "", "fit"], [509, 2, 1, "", "fit_transform"], [509, 2, 1, "", "get_covariance"], [509, 2, 1, "", "get_feature_names_out"], [509, 2, 1, "", "get_params"], [509, 2, 1, "", "get_precision"], [509, 2, 1, "", "score"], [509, 2, 1, "", "score_samples"], [509, 2, 1, "", "set_output"], [509, 2, 1, "", "set_params"], [509, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[510, 2, 1, "", "fit"], [510, 2, 1, "", "fit_transform"], [510, 2, 1, "", "get_feature_names_out"], [510, 2, 1, "", "get_params"], [510, 2, 1, "", "inverse_transform"], [510, 2, 1, "", "set_output"], [510, 2, 1, "", "set_params"], [510, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[511, 2, 1, "", "fit"], [511, 2, 1, "", "fit_transform"], [511, 2, 1, "", "get_covariance"], [511, 2, 1, "", "get_feature_names_out"], [511, 2, 1, "", "get_params"], [511, 2, 1, "", "get_precision"], [511, 2, 1, "", "inverse_transform"], [511, 2, 1, "", "partial_fit"], [511, 2, 1, "", "set_output"], [511, 2, 1, "", "set_params"], [511, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[512, 2, 1, "", "fit"], [512, 2, 1, "", "fit_transform"], [512, 2, 1, "", "get_feature_names_out"], [512, 2, 1, "", "get_params"], [512, 2, 1, "", "inverse_transform"], [512, 2, 1, "", "set_output"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_transform"], [513, 2, 1, "", "get_feature_names_out"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "partial_fit"], [513, 2, 1, "", "perplexity"], [513, 2, 1, "", "score"], [513, 2, 1, "", "set_output"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "partial_fit"], [514, 2, 1, "", "set_output"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "fit_transform"], [515, 2, 1, "", "get_feature_names_out"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "inverse_transform"], [515, 2, 1, "", "partial_fit"], [515, 2, 1, "", "set_output"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "inverse_transform"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "inverse_transform"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_covariance"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "get_precision"], [518, 2, 1, "", "inverse_transform"], [518, 2, 1, "", "score"], [518, 2, 1, "", "score_samples"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 3, 1, "", "n_components_"], [519, 3, 1, "", "n_features_in_"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "inverse_transform"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "inverse_transform"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[526, 1, 1, "", "LinearDiscriminantAnalysis"], [527, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[526, 2, 1, "", "decision_function"], [526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "predict"], [526, 2, 1, "", "predict_log_proba"], [526, 2, 1, "", "predict_proba"], [526, 2, 1, "", "score"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[527, 2, 1, "", "decision_function"], [527, 2, 1, "", "fit"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "predict"], [527, 2, 1, "", "predict_log_proba"], [527, 2, 1, "", "predict_proba"], [527, 2, 1, "", "score"], [527, 2, 1, "", "set_params"]], "sklearn.dummy": [[528, 1, 1, "", "DummyClassifier"], [529, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "predict"], [528, 2, 1, "", "predict_log_proba"], [528, 2, 1, "", "predict_proba"], [528, 2, 1, "", "score"], [528, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "predict"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_params"]], "sklearn.ensemble": [[530, 1, 1, "", "AdaBoostClassifier"], [531, 1, 1, "", "AdaBoostRegressor"], [532, 1, 1, "", "BaggingClassifier"], [533, 1, 1, "", "BaggingRegressor"], [534, 1, 1, "", "ExtraTreesClassifier"], [535, 1, 1, "", "ExtraTreesRegressor"], [536, 1, 1, "", "GradientBoostingClassifier"], [537, 1, 1, "", "GradientBoostingRegressor"], [538, 1, 1, "", "HistGradientBoostingClassifier"], [539, 1, 1, "", "HistGradientBoostingRegressor"], [540, 1, 1, "", "IsolationForest"], [541, 1, 1, "", "RandomForestClassifier"], [542, 1, 1, "", "RandomForestRegressor"], [543, 1, 1, "", "RandomTreesEmbedding"], [544, 1, 1, "", "StackingClassifier"], [545, 1, 1, "", "StackingRegressor"], [546, 1, 1, "", "VotingClassifier"], [547, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[530, 3, 1, "", "base_estimator_"], [530, 2, 1, "", "decision_function"], [530, 3, 1, "", "estimator_"], [530, 3, 1, "", "feature_importances_"], [530, 2, 1, "", "fit"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "predict"], [530, 2, 1, "", "predict_log_proba"], [530, 2, 1, "", "predict_proba"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "staged_decision_function"], [530, 2, 1, "", "staged_predict"], [530, 2, 1, "", "staged_predict_proba"], [530, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[531, 3, 1, "", "base_estimator_"], [531, 3, 1, "", "estimator_"], [531, 3, 1, "", "feature_importances_"], [531, 2, 1, "", "fit"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "predict"], [531, 2, 1, "", "score"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "staged_predict"], [531, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[532, 3, 1, "", "base_estimator_"], [532, 2, 1, "", "decision_function"], [532, 3, 1, "", "estimator_"], [532, 3, 1, "", "estimators_samples_"], [532, 2, 1, "", "fit"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "predict_log_proba"], [532, 2, 1, "", "predict_proba"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[533, 3, 1, "", "base_estimator_"], [533, 3, 1, "", "estimator_"], [533, 3, 1, "", "estimators_samples_"], [533, 2, 1, "", "fit"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[534, 2, 1, "", "apply"], [534, 3, 1, "", "base_estimator_"], [534, 2, 1, "", "decision_path"], [534, 3, 1, "", "estimator_"], [534, 3, 1, "", "feature_importances_"], [534, 2, 1, "", "fit"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "predict_log_proba"], [534, 2, 1, "", "predict_proba"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[535, 2, 1, "", "apply"], [535, 3, 1, "", "base_estimator_"], [535, 2, 1, "", "decision_path"], [535, 3, 1, "", "estimator_"], [535, 3, 1, "", "feature_importances_"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[536, 2, 1, "", "apply"], [536, 3, 1, "", "base_estimator_"], [536, 2, 1, "", "decision_function"], [536, 3, 1, "", "estimator_"], [536, 3, 1, "", "feature_importances_"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "predict_log_proba"], [536, 2, 1, "", "predict_proba"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "staged_decision_function"], [536, 2, 1, "", "staged_predict"], [536, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[537, 2, 1, "", "apply"], [537, 3, 1, "", "base_estimator_"], [537, 3, 1, "", "estimator_"], [537, 3, 1, "", "feature_importances_"], [537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[538, 2, 1, "", "decision_function"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 3, 1, "", "n_iter_"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "predict_proba"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "staged_decision_function"], [538, 2, 1, "", "staged_predict"], [538, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 3, 1, "", "n_iter_"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[540, 3, 1, "", "base_estimator_"], [540, 2, 1, "", "decision_function"], [540, 3, 1, "", "estimator_"], [540, 3, 1, "", "estimators_samples_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_predict"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "score_samples"], [540, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[541, 2, 1, "", "apply"], [541, 3, 1, "", "base_estimator_"], [541, 2, 1, "", "decision_path"], [541, 3, 1, "", "estimator_"], [541, 3, 1, "", "feature_importances_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "predict_log_proba"], [541, 2, 1, "", "predict_proba"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[542, 2, 1, "", "apply"], [542, 3, 1, "", "base_estimator_"], [542, 2, 1, "", "decision_path"], [542, 3, 1, "", "estimator_"], [542, 3, 1, "", "feature_importances_"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[543, 2, 1, "", "apply"], [543, 3, 1, "", "base_estimator_"], [543, 2, 1, "", "decision_path"], [543, 3, 1, "", "estimator_"], [543, 3, 1, "", "feature_importances_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[544, 2, 1, "", "decision_function"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_params"], [544, 3, 1, "", "n_features_in_"], [544, 3, 1, "", "named_estimators"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_params"], [545, 3, 1, "", "n_features_in_"], [545, 3, 1, "", "named_estimators"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_params"], [546, 3, 1, "", "n_features_in_"], [546, 3, 1, "", "named_estimators"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_features_in_"], [547, 3, 1, "", "named_estimators"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.exceptions": [[548, 1, 1, "", "ConvergenceWarning"], [549, 1, 1, "", "DataConversionWarning"], [550, 1, 1, "", "DataDimensionalityWarning"], [551, 1, 1, "", "EfficiencyWarning"], [552, 1, 1, "", "FitFailedWarning"], [553, 1, 1, "", "NotFittedError"], [554, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[548, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[549, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[550, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[551, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[552, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[553, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[554, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[555, 0, 0, "-", "enable_halving_search_cv"], [556, 0, 0, "-", "enable_hist_gradient_boosting"], [557, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[558, 1, 1, "", "DictVectorizer"], [559, 1, 1, "", "FeatureHasher"], [389, 0, 0, "-", "image"], [389, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[558, 2, 1, "", "fit"], [558, 2, 1, "", "fit_transform"], [558, 2, 1, "", "get_feature_names_out"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "inverse_transform"], [558, 2, 1, "", "restrict"], [558, 2, 1, "", "set_output"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[560, 1, 1, "", "PatchExtractor"], [561, 4, 1, "", "extract_patches_2d"], [562, 4, 1, "", "grid_to_graph"], [563, 4, 1, "", "img_to_graph"], [564, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[565, 1, 1, "", "CountVectorizer"], [566, 1, 1, "", "HashingVectorizer"], [567, 1, 1, "", "TfidfTransformer"], [568, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[565, 2, 1, "", "build_analyzer"], [565, 2, 1, "", "build_preprocessor"], [565, 2, 1, "", "build_tokenizer"], [565, 2, 1, "", "decode"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "get_stop_words"], [565, 2, 1, "", "inverse_transform"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[566, 2, 1, "", "build_analyzer"], [566, 2, 1, "", "build_preprocessor"], [566, 2, 1, "", "build_tokenizer"], [566, 2, 1, "", "decode"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "get_stop_words"], [566, 2, 1, "", "partial_fit"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "idf_"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[568, 2, 1, "", "build_analyzer"], [568, 2, 1, "", "build_preprocessor"], [568, 2, 1, "", "build_tokenizer"], [568, 2, 1, "", "decode"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "get_stop_words"], [568, 3, 1, "", "idf_"], [568, 2, 1, "", "inverse_transform"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.feature_selection": [[569, 1, 1, "", "GenericUnivariateSelect"], [570, 1, 1, "", "RFE"], [571, 1, 1, "", "RFECV"], [572, 1, 1, "", "SelectFdr"], [573, 1, 1, "", "SelectFpr"], [574, 1, 1, "", "SelectFromModel"], [575, 1, 1, "", "SelectFwe"], [576, 1, 1, "", "SelectKBest"], [577, 1, 1, "", "SelectPercentile"], [578, 1, 1, "", "SelectorMixin"], [579, 1, 1, "", "SequentialFeatureSelector"], [580, 1, 1, "", "VarianceThreshold"], [581, 4, 1, "", "chi2"], [582, 4, 1, "", "f_classif"], [583, 4, 1, "", "f_regression"], [584, 4, 1, "", "mutual_info_classif"], [585, 4, 1, "", "mutual_info_regression"], [586, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "get_support"], [569, 2, 1, "", "inverse_transform"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[570, 3, 1, "", "classes_"], [570, 2, 1, "", "decision_function"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "get_support"], [570, 2, 1, "", "inverse_transform"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_log_proba"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[571, 3, 1, "", "classes_"], [571, 2, 1, "", "decision_function"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "get_support"], [571, 2, 1, "", "inverse_transform"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "predict_log_proba"], [571, 2, 1, "", "predict_proba"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "get_support"], [572, 2, 1, "", "inverse_transform"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "get_support"], [573, 2, 1, "", "inverse_transform"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_support"], [574, 2, 1, "", "inverse_transform"], [574, 3, 1, "", "n_features_in_"], [574, 2, 1, "", "partial_fit"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 3, 1, "", "threshold_"], [574, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_support"], [575, 2, 1, "", "inverse_transform"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "get_support"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[587, 1, 1, "", "GaussianProcessClassifier"], [588, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "get_params"], [587, 3, 1, "", "kernel_"], [587, 2, 1, "", "log_marginal_likelihood"], [587, 2, 1, "", "predict"], [587, 2, 1, "", "predict_proba"], [587, 2, 1, "", "score"], [587, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "log_marginal_likelihood"], [588, 2, 1, "", "predict"], [588, 2, 1, "", "sample_y"], [588, 2, 1, "", "score"], [588, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[589, 1, 1, "", "CompoundKernel"], [590, 1, 1, "", "ConstantKernel"], [591, 1, 1, "", "DotProduct"], [592, 1, 1, "", "ExpSineSquared"], [593, 1, 1, "", "Exponentiation"], [594, 1, 1, "", "Hyperparameter"], [595, 1, 1, "", "Kernel"], [596, 1, 1, "", "Matern"], [597, 1, 1, "", "PairwiseKernel"], [598, 1, 1, "", "Product"], [599, 1, 1, "", "RBF"], [600, 1, 1, "", "RationalQuadratic"], [601, 1, 1, "", "Sum"], [602, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[589, 2, 1, "", "__call__"], [589, 3, 1, "", "bounds"], [589, 2, 1, "", "clone_with_theta"], [589, 2, 1, "", "diag"], [589, 2, 1, "", "get_params"], [589, 3, 1, "", "hyperparameters"], [589, 2, 1, "", "is_stationary"], [589, 3, 1, "", "n_dims"], [589, 3, 1, "", "requires_vector_input"], [589, 2, 1, "", "set_params"], [589, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[590, 2, 1, "", "__call__"], [590, 3, 1, "", "bounds"], [590, 2, 1, "", "clone_with_theta"], [590, 2, 1, "", "diag"], [590, 2, 1, "", "get_params"], [590, 3, 1, "", "hyperparameters"], [590, 2, 1, "", "is_stationary"], [590, 3, 1, "", "n_dims"], [590, 3, 1, "", "requires_vector_input"], [590, 2, 1, "", "set_params"], [590, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[591, 2, 1, "", "__call__"], [591, 3, 1, "", "bounds"], [591, 2, 1, "", "clone_with_theta"], [591, 2, 1, "", "diag"], [591, 2, 1, "", "get_params"], [591, 3, 1, "", "hyperparameters"], [591, 2, 1, "", "is_stationary"], [591, 3, 1, "", "n_dims"], [591, 3, 1, "", "requires_vector_input"], [591, 2, 1, "", "set_params"], [591, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[592, 2, 1, "", "__call__"], [592, 3, 1, "", "bounds"], [592, 2, 1, "", "clone_with_theta"], [592, 2, 1, "", "diag"], [592, 2, 1, "", "get_params"], [592, 3, 1, "", "hyperparameter_length_scale"], [592, 3, 1, "", "hyperparameters"], [592, 2, 1, "", "is_stationary"], [592, 3, 1, "", "n_dims"], [592, 3, 1, "", "requires_vector_input"], [592, 2, 1, "", "set_params"], [592, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[593, 2, 1, "", "__call__"], [593, 3, 1, "", "bounds"], [593, 2, 1, "", "clone_with_theta"], [593, 2, 1, "", "diag"], [593, 2, 1, "", "get_params"], [593, 3, 1, "", "hyperparameters"], [593, 2, 1, "", "is_stationary"], [593, 3, 1, "", "n_dims"], [593, 3, 1, "", "requires_vector_input"], [593, 2, 1, "", "set_params"], [593, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[594, 2, 1, "", "__call__"], [594, 5, 1, "", "bounds"], [594, 2, 1, "", "count"], [594, 5, 1, "", "fixed"], [594, 2, 1, "", "index"], [594, 5, 1, "", "n_elements"], [594, 5, 1, "", "name"], [594, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[595, 2, 1, "", "__call__"], [595, 3, 1, "", "bounds"], [595, 2, 1, "", "clone_with_theta"], [595, 2, 1, "", "diag"], [595, 2, 1, "", "get_params"], [595, 3, 1, "", "hyperparameters"], [595, 2, 1, "", "is_stationary"], [595, 3, 1, "", "n_dims"], [595, 3, 1, "", "requires_vector_input"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[596, 2, 1, "", "__call__"], [596, 3, 1, "", "bounds"], [596, 2, 1, "", "clone_with_theta"], [596, 2, 1, "", "diag"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "hyperparameters"], [596, 2, 1, "", "is_stationary"], [596, 3, 1, "", "n_dims"], [596, 3, 1, "", "requires_vector_input"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[598, 2, 1, "", "__call__"], [598, 3, 1, "", "bounds"], [598, 2, 1, "", "clone_with_theta"], [598, 2, 1, "", "diag"], [598, 2, 1, "", "get_params"], [598, 3, 1, "", "hyperparameters"], [598, 2, 1, "", "is_stationary"], [598, 3, 1, "", "n_dims"], [598, 3, 1, "", "requires_vector_input"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.impute": [[604, 1, 1, "", "IterativeImputer"], [605, 1, 1, "", "KNNImputer"], [606, 1, 1, "", "MissingIndicator"], [607, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.inspection": [[608, 1, 1, "", "DecisionBoundaryDisplay"], [609, 1, 1, "", "PartialDependenceDisplay"], [610, 4, 1, "", "partial_dependence"], [611, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[608, 2, 1, "", "from_estimator"], [608, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[609, 2, 1, "", "from_estimator"], [609, 2, 1, "", "plot"]], "sklearn.isotonic": [[612, 1, 1, "", "IsotonicRegression"], [613, 4, 1, "", "check_increasing"], [614, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "fit_transform"], [612, 2, 1, "", "get_feature_names_out"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_output"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[615, 1, 1, "", "AdditiveChi2Sampler"], [616, 1, 1, "", "Nystroem"], [617, 1, 1, "", "PolynomialCountSketch"], [618, 1, 1, "", "RBFSampler"], [619, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "fit_transform"], [615, 2, 1, "", "get_feature_names_out"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "set_output"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "set_output"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "fit_transform"], [617, 2, 1, "", "get_feature_names_out"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "set_output"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "fit_transform"], [618, 2, 1, "", "get_feature_names_out"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "set_output"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "fit_transform"], [619, 2, 1, "", "get_feature_names_out"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "set_output"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[620, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_params"]], "sklearn.linear_model": [[621, 1, 1, "", "ARDRegression"], [622, 1, 1, "", "BayesianRidge"], [623, 1, 1, "", "ElasticNet"], [624, 1, 1, "", "ElasticNetCV"], [625, 1, 1, "", "GammaRegressor"], [626, 1, 1, "", "HuberRegressor"], [627, 1, 1, "", "Lars"], [628, 1, 1, "", "LarsCV"], [629, 1, 1, "", "Lasso"], [630, 1, 1, "", "LassoCV"], [631, 1, 1, "", "LassoLars"], [632, 1, 1, "", "LassoLarsCV"], [633, 1, 1, "", "LassoLarsIC"], [634, 1, 1, "", "LinearRegression"], [635, 1, 1, "", "LogisticRegression"], [636, 1, 1, "", "LogisticRegressionCV"], [637, 1, 1, "", "MultiTaskElasticNet"], [638, 1, 1, "", "MultiTaskElasticNetCV"], [639, 1, 1, "", "MultiTaskLasso"], [640, 1, 1, "", "MultiTaskLassoCV"], [641, 1, 1, "", "OrthogonalMatchingPursuit"], [642, 1, 1, "", "OrthogonalMatchingPursuitCV"], [643, 1, 1, "", "PassiveAggressiveClassifier"], [644, 4, 1, "", "PassiveAggressiveRegressor"], [645, 1, 1, "", "Perceptron"], [646, 1, 1, "", "PoissonRegressor"], [647, 1, 1, "", "QuantileRegressor"], [648, 1, 1, "", "RANSACRegressor"], [649, 1, 1, "", "Ridge"], [650, 1, 1, "", "RidgeCV"], [651, 1, 1, "", "RidgeClassifier"], [652, 1, 1, "", "RidgeClassifierCV"], [653, 1, 1, "", "SGDClassifier"], [654, 1, 1, "", "SGDOneClassSVM"], [655, 1, 1, "", "SGDRegressor"], [656, 1, 1, "", "TheilSenRegressor"], [657, 1, 1, "", "TweedieRegressor"], [658, 4, 1, "", "enet_path"], [659, 4, 1, "", "lars_path"], [660, 4, 1, "", "lars_path_gram"], [661, 4, 1, "", "lasso_path"], [662, 4, 1, "", "orthogonal_mp"], [663, 4, 1, "", "orthogonal_mp_gram"], [664, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "path"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "path"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[625, 3, 1, "", "family"], [625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "path"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "path"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[635, 2, 1, "", "decision_function"], [635, 2, 1, "", "densify"], [635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "predict_log_proba"], [635, 2, 1, "", "predict_proba"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[636, 2, 1, "", "decision_function"], [636, 2, 1, "", "densify"], [636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "predict_log_proba"], [636, 2, 1, "", "predict_proba"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "path"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"], [637, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "path"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "path"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"], [639, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "path"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[643, 2, 1, "", "decision_function"], [643, 2, 1, "", "densify"], [643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "partial_fit"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[645, 2, 1, "", "decision_function"], [645, 2, 1, "", "densify"], [645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "partial_fit"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[646, 3, 1, "", "family"], [646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[651, 3, 1, "", "classes_"], [651, 2, 1, "", "decision_function"], [651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[652, 3, 1, "", "classes_"], [652, 2, 1, "", "decision_function"], [652, 2, 1, "", "fit"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[653, 2, 1, "", "decision_function"], [653, 2, 1, "", "densify"], [653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "partial_fit"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "predict_log_proba"], [653, 2, 1, "", "predict_proba"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[654, 2, 1, "", "decision_function"], [654, 2, 1, "", "densify"], [654, 2, 1, "", "fit"], [654, 2, 1, "", "fit_predict"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "partial_fit"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score_samples"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[655, 2, 1, "", "densify"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "partial_fit"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[657, 3, 1, "", "family"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"]], "sklearn.manifold": [[665, 1, 1, "", "Isomap"], [666, 1, 1, "", "LocallyLinearEmbedding"], [667, 1, 1, "", "MDS"], [668, 1, 1, "", "SpectralEmbedding"], [669, 1, 1, "", "TSNE"], [670, 4, 1, "", "locally_linear_embedding"], [671, 4, 1, "", "smacof"], [672, 4, 1, "", "spectral_embedding"], [673, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "fit_transform"], [665, 2, 1, "", "get_feature_names_out"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "reconstruction_error"], [665, 2, 1, "", "set_output"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "fit_transform"], [666, 2, 1, "", "get_feature_names_out"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "set_output"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "fit_transform"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "fit_transform"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "fit_transform"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "set_params"]], "sklearn.metrics": [[674, 1, 1, "", "ConfusionMatrixDisplay"], [675, 1, 1, "", "DetCurveDisplay"], [676, 1, 1, "", "DistanceMetric"], [677, 1, 1, "", "PrecisionRecallDisplay"], [678, 1, 1, "", "RocCurveDisplay"], [679, 4, 1, "", "accuracy_score"], [680, 4, 1, "", "adjusted_mutual_info_score"], [681, 4, 1, "", "adjusted_rand_score"], [682, 4, 1, "", "auc"], [683, 4, 1, "", "average_precision_score"], [684, 4, 1, "", "balanced_accuracy_score"], [685, 4, 1, "", "brier_score_loss"], [686, 4, 1, "", "calinski_harabasz_score"], [687, 4, 1, "", "check_scoring"], [688, 4, 1, "", "class_likelihood_ratios"], [689, 4, 1, "", "classification_report"], [389, 0, 0, "-", "cluster"], [692, 4, 1, "", "cohen_kappa_score"], [693, 4, 1, "", "completeness_score"], [694, 4, 1, "", "confusion_matrix"], [695, 4, 1, "", "consensus_score"], [696, 4, 1, "", "coverage_error"], [697, 4, 1, "", "d2_absolute_error_score"], [698, 4, 1, "", "d2_pinball_score"], [699, 4, 1, "", "d2_tweedie_score"], [700, 4, 1, "", "davies_bouldin_score"], [701, 4, 1, "", "dcg_score"], [702, 4, 1, "", "det_curve"], [703, 4, 1, "", "explained_variance_score"], [704, 4, 1, "", "f1_score"], [705, 4, 1, "", "fbeta_score"], [706, 4, 1, "", "fowlkes_mallows_score"], [707, 4, 1, "", "get_scorer"], [708, 4, 1, "", "get_scorer_names"], [709, 4, 1, "", "hamming_loss"], [710, 4, 1, "", "hinge_loss"], [711, 4, 1, "", "homogeneity_completeness_v_measure"], [712, 4, 1, "", "homogeneity_score"], [713, 4, 1, "", "jaccard_score"], [714, 4, 1, "", "label_ranking_average_precision_score"], [715, 4, 1, "", "label_ranking_loss"], [716, 4, 1, "", "log_loss"], [717, 4, 1, "", "make_scorer"], [718, 4, 1, "", "matthews_corrcoef"], [719, 4, 1, "", "max_error"], [720, 4, 1, "", "mean_absolute_error"], [721, 4, 1, "", "mean_absolute_percentage_error"], [722, 4, 1, "", "mean_gamma_deviance"], [723, 4, 1, "", "mean_pinball_loss"], [724, 4, 1, "", "mean_poisson_deviance"], [725, 4, 1, "", "mean_squared_error"], [726, 4, 1, "", "mean_squared_log_error"], [727, 4, 1, "", "mean_tweedie_deviance"], [728, 4, 1, "", "median_absolute_error"], [729, 4, 1, "", "multilabel_confusion_matrix"], [730, 4, 1, "", "mutual_info_score"], [731, 4, 1, "", "ndcg_score"], [732, 4, 1, "", "normalized_mutual_info_score"], [389, 0, 0, "-", "pairwise"], [753, 4, 1, "", "pairwise_distances"], [754, 4, 1, "", "pairwise_distances_argmin"], [755, 4, 1, "", "pairwise_distances_argmin_min"], [756, 4, 1, "", "pairwise_distances_chunked"], [757, 4, 1, "", "precision_recall_curve"], [758, 4, 1, "", "precision_recall_fscore_support"], [759, 4, 1, "", "precision_score"], [760, 4, 1, "", "r2_score"], [761, 4, 1, "", "rand_score"], [762, 4, 1, "", "recall_score"], [763, 4, 1, "", "roc_auc_score"], [764, 4, 1, "", "roc_curve"], [765, 4, 1, "", "silhouette_samples"], [766, 4, 1, "", "silhouette_score"], [767, 4, 1, "", "top_k_accuracy_score"], [768, 4, 1, "", "v_measure_score"], [769, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[674, 2, 1, "", "from_estimator"], [674, 2, 1, "", "from_predictions"], [674, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[675, 2, 1, "", "from_estimator"], [675, 2, 1, "", "from_predictions"], [675, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[676, 2, 1, "", "dist_to_rdist"], [676, 2, 1, "", "get_metric"], [676, 2, 1, "", "pairwise"], [676, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[677, 2, 1, "", "from_estimator"], [677, 2, 1, "", "from_predictions"], [677, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[678, 2, 1, "", "from_estimator"], [678, 2, 1, "", "from_predictions"], [678, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[690, 4, 1, "", "contingency_matrix"], [691, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[733, 4, 1, "", "additive_chi2_kernel"], [734, 4, 1, "", "chi2_kernel"], [735, 4, 1, "", "cosine_distances"], [736, 4, 1, "", "cosine_similarity"], [737, 4, 1, "", "distance_metrics"], [738, 4, 1, "", "euclidean_distances"], [739, 4, 1, "", "haversine_distances"], [740, 4, 1, "", "kernel_metrics"], [741, 4, 1, "", "laplacian_kernel"], [742, 4, 1, "", "linear_kernel"], [743, 4, 1, "", "manhattan_distances"], [744, 4, 1, "", "nan_euclidean_distances"], [745, 4, 1, "", "paired_cosine_distances"], [746, 4, 1, "", "paired_distances"], [747, 4, 1, "", "paired_euclidean_distances"], [748, 4, 1, "", "paired_manhattan_distances"], [749, 4, 1, "", "pairwise_kernels"], [750, 4, 1, "", "polynomial_kernel"], [751, 4, 1, "", "rbf_kernel"], [752, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[770, 1, 1, "", "BayesianGaussianMixture"], [771, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[770, 2, 1, "", "fit"], [770, 2, 1, "", "fit_predict"], [770, 2, 1, "", "get_params"], [770, 2, 1, "", "predict"], [770, 2, 1, "", "predict_proba"], [770, 2, 1, "", "sample"], [770, 2, 1, "", "score"], [770, 2, 1, "", "score_samples"], [770, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[771, 2, 1, "", "aic"], [771, 2, 1, "", "bic"], [771, 2, 1, "", "fit"], [771, 2, 1, "", "fit_predict"], [771, 2, 1, "", "get_params"], [771, 2, 1, "", "predict"], [771, 2, 1, "", "predict_proba"], [771, 2, 1, "", "sample"], [771, 2, 1, "", "score"], [771, 2, 1, "", "score_samples"], [771, 2, 1, "", "set_params"]], "sklearn.model_selection": [[772, 1, 1, "", "GridSearchCV"], [773, 1, 1, "", "GroupKFold"], [774, 1, 1, "", "GroupShuffleSplit"], [775, 1, 1, "", "HalvingGridSearchCV"], [776, 1, 1, "", "HalvingRandomSearchCV"], [777, 1, 1, "", "KFold"], [778, 1, 1, "", "LeaveOneGroupOut"], [779, 1, 1, "", "LeaveOneOut"], [780, 1, 1, "", "LeavePGroupsOut"], [781, 1, 1, "", "LeavePOut"], [782, 1, 1, "", "ParameterGrid"], [783, 1, 1, "", "ParameterSampler"], [784, 1, 1, "", "PredefinedSplit"], [785, 1, 1, "", "RandomizedSearchCV"], [786, 1, 1, "", "RepeatedKFold"], [787, 1, 1, "", "RepeatedStratifiedKFold"], [788, 1, 1, "", "ShuffleSplit"], [789, 1, 1, "", "StratifiedGroupKFold"], [790, 1, 1, "", "StratifiedKFold"], [791, 1, 1, "", "StratifiedShuffleSplit"], [792, 1, 1, "", "TimeSeriesSplit"], [793, 4, 1, "", "check_cv"], [794, 4, 1, "", "cross_val_predict"], [795, 4, 1, "", "cross_val_score"], [796, 4, 1, "", "cross_validate"], [797, 4, 1, "", "learning_curve"], [798, 4, 1, "", "permutation_test_score"], [799, 4, 1, "", "train_test_split"], [800, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[772, 3, 1, "", "classes_"], [772, 2, 1, "", "decision_function"], [772, 2, 1, "", "fit"], [772, 2, 1, "", "get_params"], [772, 2, 1, "", "inverse_transform"], [772, 3, 1, "", "n_features_in_"], [772, 2, 1, "", "predict"], [772, 2, 1, "", "predict_log_proba"], [772, 2, 1, "", "predict_proba"], [772, 2, 1, "", "score"], [772, 2, 1, "", "score_samples"], [772, 2, 1, "", "set_params"], [772, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[773, 2, 1, "", "get_n_splits"], [773, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[774, 2, 1, "", "get_n_splits"], [774, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[775, 3, 1, "", "classes_"], [775, 2, 1, "", "decision_function"], [775, 2, 1, "", "fit"], [775, 2, 1, "", "get_params"], [775, 2, 1, "", "inverse_transform"], [775, 3, 1, "", "n_features_in_"], [775, 2, 1, "", "predict"], [775, 2, 1, "", "predict_log_proba"], [775, 2, 1, "", "predict_proba"], [775, 2, 1, "", "score"], [775, 2, 1, "", "score_samples"], [775, 2, 1, "", "set_params"], [775, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[776, 3, 1, "", "classes_"], [776, 2, 1, "", "decision_function"], [776, 2, 1, "", "fit"], [776, 2, 1, "", "get_params"], [776, 2, 1, "", "inverse_transform"], [776, 3, 1, "", "n_features_in_"], [776, 2, 1, "", "predict"], [776, 2, 1, "", "predict_log_proba"], [776, 2, 1, "", "predict_proba"], [776, 2, 1, "", "score"], [776, 2, 1, "", "score_samples"], [776, 2, 1, "", "set_params"], [776, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[777, 2, 1, "", "get_n_splits"], [777, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneGroupOut": [[778, 2, 1, "", "get_n_splits"], [778, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[780, 2, 1, "", "get_n_splits"], [780, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[781, 2, 1, "", "get_n_splits"], [781, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[785, 3, 1, "", "classes_"], [785, 2, 1, "", "decision_function"], [785, 2, 1, "", "fit"], [785, 2, 1, "", "get_params"], [785, 2, 1, "", "inverse_transform"], [785, 3, 1, "", "n_features_in_"], [785, 2, 1, "", "predict"], [785, 2, 1, "", "predict_log_proba"], [785, 2, 1, "", "predict_proba"], [785, 2, 1, "", "score"], [785, 2, 1, "", "score_samples"], [785, 2, 1, "", "set_params"], [785, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[788, 2, 1, "", "get_n_splits"], [788, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[791, 2, 1, "", "get_n_splits"], [791, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.multiclass": [[801, 1, 1, "", "OneVsOneClassifier"], [802, 1, 1, "", "OneVsRestClassifier"], [803, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[801, 2, 1, "", "decision_function"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "get_params"], [801, 3, 1, "", "n_classes_"], [801, 2, 1, "", "partial_fit"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "score"], [801, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[802, 2, 1, "", "decision_function"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "get_params"], [802, 3, 1, "", "multilabel_"], [802, 3, 1, "", "n_classes_"], [802, 2, 1, "", "partial_fit"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[803, 2, 1, "", "fit"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "score"], [803, 2, 1, "", "set_params"]], "sklearn.multioutput": [[804, 1, 1, "", "ClassifierChain"], [805, 1, 1, "", "MultiOutputClassifier"], [806, 1, 1, "", "MultiOutputRegressor"], [807, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[805, 2, 1, "", "fit"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "partial_fit"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[806, 2, 1, "", "fit"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "partial_fit"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "score"], [806, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[807, 2, 1, "", "fit"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[808, 1, 1, "", "BernoulliNB"], [809, 1, 1, "", "CategoricalNB"], [810, 1, 1, "", "ComplementNB"], [811, 1, 1, "", "GaussianNB"], [812, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[808, 2, 1, "", "fit"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "partial_fit"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_joint_log_proba"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "partial_fit"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_joint_log_proba"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[810, 2, 1, "", "fit"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "partial_fit"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_joint_log_proba"], [810, 2, 1, "", "predict_log_proba"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "partial_fit"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_joint_log_proba"], [811, 2, 1, "", "predict_log_proba"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "partial_fit"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_joint_log_proba"], [812, 2, 1, "", "predict_log_proba"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.neighbors": [[813, 1, 1, "", "BallTree"], [814, 1, 1, "", "KDTree"], [815, 1, 1, "", "KNeighborsClassifier"], [816, 1, 1, "", "KNeighborsRegressor"], [817, 1, 1, "", "KNeighborsTransformer"], [818, 1, 1, "", "KernelDensity"], [819, 1, 1, "", "LocalOutlierFactor"], [820, 1, 1, "", "NearestCentroid"], [821, 1, 1, "", "NearestNeighbors"], [822, 1, 1, "", "NeighborhoodComponentsAnalysis"], [823, 1, 1, "", "RadiusNeighborsClassifier"], [824, 1, 1, "", "RadiusNeighborsRegressor"], [825, 1, 1, "", "RadiusNeighborsTransformer"], [826, 4, 1, "", "kneighbors_graph"], [827, 4, 1, "", "radius_neighbors_graph"], [828, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[813, 2, 1, "", "get_arrays"], [813, 2, 1, "", "get_n_calls"], [813, 2, 1, "", "get_tree_stats"], [813, 2, 1, "", "kernel_density"], [813, 2, 1, "", "query"], [813, 2, 1, "", "query_radius"], [813, 2, 1, "", "reset_n_calls"], [813, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[814, 2, 1, "", "get_arrays"], [814, 2, 1, "", "get_n_calls"], [814, 2, 1, "", "get_tree_stats"], [814, 2, 1, "", "kernel_density"], [814, 2, 1, "", "query"], [814, 2, 1, "", "query_radius"], [814, 2, 1, "", "reset_n_calls"], [814, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "kneighbors"], [815, 2, 1, "", "kneighbors_graph"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "kneighbors"], [816, 2, 1, "", "kneighbors_graph"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "fit_transform"], [817, 2, 1, "", "get_feature_names_out"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "kneighbors"], [817, 2, 1, "", "kneighbors_graph"], [817, 2, 1, "", "set_output"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "sample"], [818, 2, 1, "", "score"], [818, 2, 1, "", "score_samples"], [818, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[819, 2, 1, "", "decision_function"], [819, 2, 1, "", "fit"], [819, 2, 1, "", "fit_predict"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "kneighbors"], [819, 2, 1, "", "kneighbors_graph"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "score_samples"], [819, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "kneighbors"], [821, 2, 1, "", "kneighbors_graph"], [821, 2, 1, "", "radius_neighbors"], [821, 2, 1, "", "radius_neighbors_graph"], [821, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "fit_transform"], [822, 2, 1, "", "get_feature_names_out"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "set_output"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "radius_neighbors"], [823, 2, 1, "", "radius_neighbors_graph"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "radius_neighbors"], [824, 2, 1, "", "radius_neighbors_graph"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "radius_neighbors"], [825, 2, 1, "", "radius_neighbors_graph"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "transform"]], "sklearn.neural_network": [[829, 1, 1, "", "BernoulliRBM"], [830, 1, 1, "", "MLPClassifier"], [831, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "fit_transform"], [829, 2, 1, "", "get_feature_names_out"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "gibbs"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "score_samples"], [829, 2, 1, "", "set_output"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "partial_fit"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_log_proba"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "partial_fit"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"]], "sklearn.pipeline": [[832, 1, 1, "", "FeatureUnion"], [833, 1, 1, "", "Pipeline"], [834, 4, 1, "", "make_pipeline"], [835, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "fit_transform"], [832, 2, 1, "", "get_feature_names_out"], [832, 2, 1, "", "get_params"], [832, 3, 1, "", "n_features_in_"], [832, 2, 1, "", "set_output"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[833, 3, 1, "", "classes_"], [833, 2, 1, "", "decision_function"], [833, 3, 1, "", "feature_names_in_"], [833, 2, 1, "", "fit"], [833, 2, 1, "", "fit_predict"], [833, 2, 1, "", "fit_transform"], [833, 2, 1, "", "get_feature_names_out"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "inverse_transform"], [833, 3, 1, "", "n_features_in_"], [833, 3, 1, "", "named_steps"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_log_proba"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "score_samples"], [833, 2, 1, "", "set_output"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "transform"]], "sklearn.preprocessing": [[836, 1, 1, "", "Binarizer"], [837, 1, 1, "", "FunctionTransformer"], [838, 1, 1, "", "KBinsDiscretizer"], [839, 1, 1, "", "KernelCenterer"], [840, 1, 1, "", "LabelBinarizer"], [841, 1, 1, "", "LabelEncoder"], [842, 1, 1, "", "MaxAbsScaler"], [843, 1, 1, "", "MinMaxScaler"], [844, 1, 1, "", "MultiLabelBinarizer"], [845, 1, 1, "", "Normalizer"], [846, 1, 1, "", "OneHotEncoder"], [847, 1, 1, "", "OrdinalEncoder"], [848, 1, 1, "", "PolynomialFeatures"], [849, 1, 1, "", "PowerTransformer"], [850, 1, 1, "", "QuantileTransformer"], [851, 1, 1, "", "RobustScaler"], [852, 1, 1, "", "SplineTransformer"], [853, 1, 1, "", "StandardScaler"], [854, 4, 1, "", "add_dummy_feature"], [855, 4, 1, "", "binarize"], [856, 4, 1, "", "label_binarize"], [857, 4, 1, "", "maxabs_scale"], [858, 4, 1, "", "minmax_scale"], [859, 4, 1, "", "normalize"], [860, 4, 1, "", "power_transform"], [861, 4, 1, "", "quantile_transform"], [862, 4, 1, "", "robust_scale"], [863, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_feature_names_out"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "set_output"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_feature_names_out"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "inverse_transform"], [837, 2, 1, "", "set_output"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_transform"], [838, 2, 1, "", "get_feature_names_out"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "inverse_transform"], [838, 2, 1, "", "set_output"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "inverse_transform"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "inverse_transform"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "inverse_transform"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "inverse_transform"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_params"], [846, 3, 1, "", "infrequent_categories_"], [846, 2, 1, "", "inverse_transform"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "inverse_transform"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 3, 1, "", "powers_"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "inverse_transform"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "partial_fit"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.random_projection": [[864, 1, 1, "", "GaussianRandomProjection"], [865, 1, 1, "", "SparseRandomProjection"], [866, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[867, 1, 1, "", "LabelPropagation"], [868, 1, 1, "", "LabelSpreading"], [869, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "predict_proba"], [867, 2, 1, "", "score"], [867, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "predict_proba"], [868, 2, 1, "", "score"], [868, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[869, 2, 1, "", "decision_function"], [869, 2, 1, "", "fit"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "predict"], [869, 2, 1, "", "predict_log_proba"], [869, 2, 1, "", "predict_proba"], [869, 2, 1, "", "score"], [869, 2, 1, "", "set_params"]], "sklearn.svm": [[872, 1, 1, "", "LinearSVC"], [873, 1, 1, "", "LinearSVR"], [874, 1, 1, "", "NuSVC"], [875, 1, 1, "", "NuSVR"], [876, 1, 1, "", "OneClassSVM"], [877, 1, 1, "", "SVC"], [878, 1, 1, "", "SVR"], [879, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[872, 2, 1, "", "decision_function"], [872, 2, 1, "", "densify"], [872, 2, 1, "", "fit"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "predict"], [872, 2, 1, "", "score"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "predict"], [873, 2, 1, "", "score"], [873, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[874, 3, 1, "", "coef_"], [874, 2, 1, "", "decision_function"], [874, 2, 1, "", "fit"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "n_support_"], [874, 2, 1, "", "predict"], [874, 2, 1, "", "predict_log_proba"], [874, 2, 1, "", "predict_proba"], [874, 3, 1, "", "probA_"], [874, 3, 1, "", "probB_"], [874, 2, 1, "", "score"], [874, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[875, 3, 1, "", "coef_"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_params"], [875, 3, 1, "", "n_support_"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[876, 3, 1, "", "coef_"], [876, 2, 1, "", "decision_function"], [876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_predict"], [876, 2, 1, "", "get_params"], [876, 3, 1, "", "n_support_"], [876, 2, 1, "", "predict"], [876, 2, 1, "", "score_samples"], [876, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[877, 3, 1, "", "coef_"], [877, 2, 1, "", "decision_function"], [877, 2, 1, "", "fit"], [877, 2, 1, "", "get_params"], [877, 3, 1, "", "n_support_"], [877, 2, 1, "", "predict"], [877, 2, 1, "", "predict_log_proba"], [877, 2, 1, "", "predict_proba"], [877, 3, 1, "", "probA_"], [877, 3, 1, "", "probB_"], [877, 2, 1, "", "score"], [877, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[878, 3, 1, "", "coef_"], [878, 2, 1, "", "fit"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "n_support_"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"]], "sklearn.tree": [[880, 1, 1, "", "DecisionTreeClassifier"], [881, 1, 1, "", "DecisionTreeRegressor"], [882, 1, 1, "", "ExtraTreeClassifier"], [883, 1, 1, "", "ExtraTreeRegressor"], [884, 4, 1, "", "export_graphviz"], [885, 4, 1, "", "export_text"], [886, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[880, 2, 1, "", "apply"], [880, 2, 1, "", "cost_complexity_pruning_path"], [880, 2, 1, "", "decision_path"], [880, 3, 1, "", "feature_importances_"], [880, 2, 1, "", "fit"], [880, 2, 1, "", "get_depth"], [880, 2, 1, "", "get_n_leaves"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_log_proba"], [880, 2, 1, "", "predict_proba"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[881, 2, 1, "", "apply"], [881, 2, 1, "", "cost_complexity_pruning_path"], [881, 2, 1, "", "decision_path"], [881, 3, 1, "", "feature_importances_"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_depth"], [881, 2, 1, "", "get_n_leaves"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[882, 2, 1, "", "apply"], [882, 2, 1, "", "cost_complexity_pruning_path"], [882, 2, 1, "", "decision_path"], [882, 3, 1, "", "feature_importances_"], [882, 2, 1, "", "fit"], [882, 2, 1, "", "get_depth"], [882, 2, 1, "", "get_n_leaves"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "predict"], [882, 2, 1, "", "predict_log_proba"], [882, 2, 1, "", "predict_proba"], [882, 2, 1, "", "score"], [882, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[883, 2, 1, "", "apply"], [883, 2, 1, "", "cost_complexity_pruning_path"], [883, 2, 1, "", "decision_path"], [883, 3, 1, "", "feature_importances_"], [883, 2, 1, "", "fit"], [883, 2, 1, "", "get_depth"], [883, 2, 1, "", "get_n_leaves"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"]], "sklearn.utils": [[887, 1, 1, "", "Bunch"], [888, 4, 1, "", "_safe_indexing"], [890, 4, 1, "", "as_float_array"], [891, 4, 1, "", "assert_all_finite"], [892, 4, 1, "", "check_X_y"], [893, 4, 1, "", "check_array"], [894, 4, 1, "", "check_consistent_length"], [895, 4, 1, "", "check_random_state"], [896, 4, 1, "", "check_scalar"], [899, 4, 1, "", "deprecated"], [905, 4, 1, "", "estimator_html_repr"], [912, 4, 1, "", "gen_batches"], [913, 4, 1, "", "gen_even_slices"], [915, 4, 1, "", "indexable"], [921, 4, 1, "", "murmurhash3_32"], [922, 4, 1, "", "parallel_backend"], [924, 4, 1, "", "register_parallel_backend"], [925, 4, 1, "", "resample"], [926, 4, 1, "", "safe_mask"], [927, 4, 1, "", "safe_sqr"], [928, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[887, 2, 1, "", "clear"], [887, 2, 1, "", "copy"], [887, 2, 1, "", "fromkeys"], [887, 2, 1, "", "get"], [887, 2, 1, "", "items"], [887, 2, 1, "", "keys"], [887, 2, 1, "", "pop"], [887, 2, 1, "", "popitem"], [887, 2, 1, "", "setdefault"], [887, 2, 1, "", "update"], [887, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[889, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[897, 4, 1, "", "compute_class_weight"], [898, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[900, 4, 1, "", "all_displays"], [901, 4, 1, "", "all_estimators"], [902, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[903, 4, 1, "", "check_estimator"], [904, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[906, 4, 1, "", "density"], [907, 4, 1, "", "fast_logdet"], [908, 4, 1, "", "randomized_range_finder"], [909, 4, 1, "", "randomized_svd"], [910, 4, 1, "", "safe_sparse_dot"], [911, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[914, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[916, 4, 1, "", "available_if"], [917, 4, 1, "", "if_delegate_has_method"]], "sklearn.utils.multiclass": [[918, 4, 1, "", "is_multilabel"], [919, 4, 1, "", "type_of_target"], [920, 4, 1, "", "unique_labels"]], "sklearn.utils.random": [[923, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[929, 4, 1, "", "incr_mean_variance_axis"], [930, 4, 1, "", "inplace_column_scale"], [931, 4, 1, "", "inplace_csr_column_scale"], [932, 4, 1, "", "inplace_row_scale"], [933, 4, 1, "", "inplace_swap_column"], [934, 4, 1, "", "inplace_swap_row"], [935, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[936, 4, 1, "", "inplace_csr_row_normalize_l1"], [937, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[938, 4, 1, "", "check_is_fitted"], [939, 4, 1, "", "check_memory"], [940, 4, 1, "", "check_symmetric"], [941, 4, 1, "", "column_or_1d"], [942, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 376], "u": 0, "histori": [0, 994], "govern": [0, 379], "author": [0, 996], "contributor": [0, 365, 366, 379, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "experi": [0, 37, 365, 379], "team": [0, 365, 379], "commun": [0, 366, 379], "emeritu": 0, "core": [0, 8, 355, 365, 369, 371, 376, 379, 398, 956], "develop": [0, 364, 367, 368, 369, 371, 372, 373, 374, 379, 943], "cite": 0, "scikit": [0, 251, 306, 307, 308, 309, 310, 352, 353, 364, 367, 369, 370, 376, 379, 381, 972, 974, 975, 978, 980, 981, 986, 989, 992], "learn": [0, 5, 12, 50, 95, 98, 148, 164, 166, 172, 216, 217, 218, 219, 231, 251, 258, 286, 293, 306, 307, 308, 309, 310, 313, 314, 315, 352, 353, 355, 362, 364, 366, 367, 369, 370, 376, 379, 381, 389, 395, 397, 949, 951, 959, 967, 972, 974, 975, 976, 978, 980, 981, 983, 986, 987, 988, 989, 990, 992], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 85, 100, 104, 229, 366, 367, 376, 389, 966, 971, 974], "infrastructur": 0, "support": [0, 25, 119, 164, 190, 306, 307, 308, 309, 320, 323, 332, 376, 381, 386, 388, 389, 397, 969, 977, 987, 1002], "exampl": [3, 6, 9, 53, 58, 74, 87, 102, 125, 156, 164, 192, 193, 330, 334, 355, 360, 361, 370, 376, 380, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 404, 412, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 440, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 481, 483, 487, 488, 489, 490, 491, 492, 496, 497, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 558, 559, 561, 564, 565, 566, 567, 568, 570, 571, 574, 576, 577, 579, 581, 582, 583, 585, 587, 588, 590, 591, 592, 594, 595, 596, 599, 600, 602, 604, 605, 607, 609, 610, 611, 612, 616, 617, 618, 620, 621, 622, 623, 625, 626, 629, 630, 632, 633, 634, 635, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 665, 666, 667, 668, 669, 670, 674, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 693, 694, 695, 702, 704, 709, 712, 713, 716, 717, 720, 723, 724, 725, 727, 728, 730, 732, 753, 754, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 804, 806, 808, 810, 811, 812, 815, 816, 817, 818, 819, 820, 822, 826, 829, 830, 831, 832, 833, 834, 837, 838, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 858, 861, 865, 866, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 886, 887, 895, 904, 906, 913, 916, 928, 938, 943, 946, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 980, 986, 987, 988, 993, 996], "base": [3, 4, 84, 116, 117, 146, 164, 231, 306, 307, 309, 354, 366, 389, 390, 394, 397, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 950, 962, 1005, 1006, 1008, 1009, 1010, 1011], "real": [3, 9, 74, 109, 164, 361], "world": [3, 74, 164, 361], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 57, 61, 69, 84, 87, 88, 89, 90, 91, 95, 104, 118, 119, 129, 135, 136, 149, 151, 153, 154, 156, 158, 164, 166, 175, 178, 185, 196, 198, 205, 214, 217, 218, 225, 230, 235, 254, 262, 263, 317, 318, 322, 338, 344, 358, 359, 360, 361, 362, 363, 370, 376, 389, 400, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 980, 986, 987, 989, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "time": [4, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 120, 133, 139, 147, 159, 163, 170, 173, 190, 215, 223, 230, 231, 239, 248, 272, 275, 290, 296, 304, 311, 319, 336, 338, 341, 348, 394], "relat": [4, 8, 360, 366, 962, 974, 1003], "featur": [4, 51, 54, 73, 100, 115, 116, 117, 119, 123, 127, 140, 142, 144, 145, 146, 164, 168, 169, 172, 175, 190, 193, 214, 230, 235, 257, 295, 299, 300, 303, 306, 308, 309, 328, 338, 339, 353, 355, 366, 369, 389, 391, 397, 398, 399, 944, 962, 964, 971, 988, 989, 999, 1000, 1001, 1002, 1003], "engin": [4, 168, 974, 978], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 57, 62, 63, 65, 66, 69, 74, 77, 79, 81, 84, 85, 96, 97, 100, 101, 102, 103, 109, 111, 116, 117, 123, 129, 142, 146, 154, 155, 157, 162, 167, 168, 169, 172, 176, 180, 182, 189, 190, 226, 231, 234, 237, 246, 251, 253, 257, 262, 263, 265, 266, 269, 288, 295, 298, 302, 313, 325, 328, 332, 339, 340, 349, 353, 355, 361, 370, 376, 378, 390, 391, 393, 394, 399, 400, 964, 968, 978, 980, 983, 986, 988, 989], "explor": 4, "bike": 4, "share": 4, "demand": 4, "cross": [4, 83, 84, 135, 136, 145, 164, 185, 251, 252, 254, 255, 259, 261, 266, 328, 349, 366, 389, 393, 394, 943, 950, 984], "valid": [4, 135, 136, 145, 185, 229, 251, 252, 254, 255, 259, 261, 266, 271, 328, 349, 353, 367, 374, 389, 394, 938, 939, 940, 941, 942, 943, 949, 950, 957, 984], "gradient": [4, 119, 120, 121, 122, 123, 124, 167, 196, 204, 210, 306, 307, 309, 397, 950, 968], "boost": [4, 119, 120, 121, 122, 123, 124, 167, 196, 306, 307, 309, 397], "naiv": [4, 24, 25, 389, 956], "linear": [4, 25, 33, 34, 122, 149, 164, 166, 174, 175, 192, 196, 199, 202, 217, 218, 230, 307, 324, 331, 332, 353, 374, 376, 389, 948, 950, 951, 952, 964, 987], "regress": [4, 72, 74, 84, 85, 111, 122, 123, 132, 149, 154, 155, 156, 175, 176, 179, 185, 187, 188, 189, 192, 194, 196, 198, 211, 213, 214, 228, 231, 288, 332, 345, 346, 362, 389, 391, 397, 400, 945, 947, 950, 954, 955, 957, 958, 968, 969, 970, 987], "step": [4, 236, 377, 391], "categori": [4, 310, 964], "trigonometr": 4, "period": [4, 197], "spline": [4, 197, 309, 964], "qualit": 4, "analysi": [4, 33, 34, 59, 95, 101, 103, 106, 122, 167, 241, 259, 266, 284, 285, 286, 338, 389, 393, 395, 948, 957, 971, 988, 989], "impact": [4, 60, 1011], "model": [4, 7, 11, 74, 84, 96, 103, 109, 116, 117, 119, 123, 146, 149, 154, 164, 166, 167, 168, 172, 174, 175, 184, 185, 190, 196, 199, 214, 226, 231, 235, 240, 242, 246, 247, 249, 255, 256, 263, 288, 295, 307, 309, 332, 338, 353, 367, 376, 377, 384, 385, 389, 394, 943, 949, 950, 953, 954, 956, 958, 959, 980, 984, 987, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "predict": [4, 10, 24, 85, 111, 122, 132, 150, 176, 196, 231, 234, 252, 263, 313, 353, 376, 377, 393, 394, 400, 954, 965, 980, 987], "pairwis": [4, 256, 389, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 952], "interact": [4, 167, 397, 987], "polynomi": [4, 172, 175, 176, 197, 946, 950, 952, 964, 987], "non": [4, 14, 95, 122, 191, 196, 217, 261, 324, 331, 332, 395, 950, 964], "kernel": [4, 5, 100, 149, 154, 155, 158, 164, 171, 172, 230, 231, 280, 281, 289, 308, 321, 324, 329, 332, 389, 395, 396, 400, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 946, 947, 952, 964, 969, 987], "conclud": [4, 109, 221], "remark": [4, 109, 221, 229], "imag": [5, 47, 50, 53, 65, 98, 360, 389, 398, 560, 561, 562, 563, 564], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 127, 129, 183, 199, 210, 212, 256, 260, 265, 299, 332, 338, 339, 349, 355, 370, 371, 373, 376, 394, 395, 397, 398, 399, 404, 412, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 440, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 481, 483, 487, 488, 489, 490, 491, 492, 496, 497, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 558, 559, 561, 564, 565, 566, 567, 568, 570, 571, 574, 576, 577, 579, 581, 582, 583, 585, 587, 588, 590, 591, 592, 594, 595, 596, 599, 600, 602, 604, 605, 607, 609, 610, 611, 612, 616, 617, 618, 620, 621, 622, 623, 625, 626, 629, 630, 632, 633, 634, 635, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 665, 666, 667, 668, 669, 670, 674, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 693, 694, 695, 702, 704, 709, 712, 713, 716, 717, 720, 723, 724, 725, 727, 728, 730, 732, 753, 754, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 804, 806, 808, 810, 811, 812, 815, 816, 817, 818, 819, 820, 822, 826, 829, 830, 831, 832, 833, 834, 837, 838, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 858, 861, 865, 866, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 886, 887, 895, 904, 906, 913, 916, 928, 938, 948, 950, 951, 954, 958, 968, 969, 970, 978, 987, 989, 1006], "pca": [5, 57, 72, 95, 96, 99, 100, 101, 102, 103, 104, 395, 518, 971, 988], "refer": [5, 11, 25, 27, 79, 80, 98, 113, 168, 172, 184, 256, 261, 262, 289, 360, 361, 363, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 943, 944, 946, 947, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970], "load": [5, 7, 17, 50, 57, 117, 119, 123, 135, 146, 168, 189, 214, 218, 226, 230, 237, 257, 265, 266, 325, 328, 338, 339, 340, 359, 360, 370, 376, 398, 980, 988, 989], "via": [5, 53, 184, 185, 214, 397, 946], "openml": [5, 306, 360], "basi": [5, 158, 400, 946, 950, 987], "reconstruct": [5, 13, 98], "test": [5, 77, 141, 259, 262, 269, 338, 343, 364, 366, 367, 373, 374, 394, 980, 987, 989], "face": [6, 50, 95, 233, 361, 978, 985], "recognit": [6, 361, 363, 985], "eigenfac": [6, 95, 985], "svm": [6, 138, 142, 143, 172, 210, 230, 309, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 389, 872, 873, 874, 875, 876, 877, 878, 879, 950, 960, 968, 987, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "complex": [7, 227, 236, 255, 315, 343, 353, 390, 950, 951, 957, 958, 968, 969, 970], "influenc": [7, 10, 353], "benchmark": [7, 10, 57, 338], "choos": [7, 943, 980, 982, 984], "paramet": [7, 77, 122, 254, 308, 325, 333, 366, 367, 377, 378, 389, 391, 397, 943, 950, 954, 969, 980, 984, 989], "run": [7, 57, 260], "code": [7, 95, 105, 366, 367, 370, 371, 373, 395, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 62, 63, 65, 66, 77, 81, 84, 90, 91, 96, 97, 101, 109, 111, 118, 123, 129, 130, 131, 132, 135, 162, 167, 175, 176, 180, 188, 189, 190, 200, 201, 205, 218, 226, 230, 234, 235, 237, 246, 252, 253, 258, 260, 263, 265, 269, 271, 295, 306, 308, 309, 313, 322, 323, 328, 338, 344, 372, 389, 949, 961, 993], "result": [7, 8, 38, 47, 49, 50, 57, 62, 63, 66, 77, 79, 81, 96, 97, 109, 111, 129, 132, 162, 172, 201, 231, 234, 260, 269, 332, 339, 349, 943], "conclus": [7, 149, 185], "out": [8, 121, 355, 373, 394, 398, 943, 950, 956], "classif": [8, 26, 29, 30, 32, 33, 69, 90, 137, 150, 151, 152, 153, 164, 212, 232, 259, 262, 263, 266, 279, 287, 295, 306, 312, 317, 338, 362, 389, 397, 400, 950, 954, 955, 957, 958, 968, 969, 970, 987, 989], "text": [8, 164, 227, 257, 317, 337, 338, 339, 340, 361, 389, 398, 565, 566, 567, 568, 989], "document": [8, 19, 164, 308, 309, 337, 338, 339, 366, 974, 975, 977, 992, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "reuter": 8, "routin": [8, 354, 374], "main": [8, 196], "outlier": [9, 178, 213, 225, 234, 282, 283, 298, 389, 950, 960, 964], "detect": [9, 225, 234, 253, 282, 283, 954, 960, 969], "set": [9, 74, 77, 102, 129, 162, 263, 325, 343, 376, 394, 950, 980, 986, 987, 989], "first": [9, 37, 366], "second": [9, 37], "latenc": [10, 353], "helper": [10, 158, 218, 374], "function": [10, 34, 94, 158, 186, 200, 201, 206, 218, 234, 251, 269, 308, 328, 340, 374, 389, 394, 397, 400, 946, 950, 954, 969, 987], "bulk": [10, 353], "atom": [10, 353], "speed": [10, 371], "variou": [10, 52, 203, 222], "regressor": [10, 111, 122, 175, 306, 309, 389, 397], "n_featur": 10, "throughput": [10, 353], "speci": [11, 289], "distribut": [11, 214, 217, 289, 302, 381, 951, 964], "visual": [12, 57, 106, 226, 231, 237, 251, 294, 307, 325, 390, 391, 993], "stock": [12, 985], "market": [12, 985], "structur": [12, 39, 47, 66, 157, 315, 347, 985], "retriev": [12, 306], "from": [12, 98, 146, 168, 306, 354, 360, 364, 376, 389, 398, 950, 954, 980, 987, 988, 989, 1006], "internet": 12, "graph": [12, 306, 374, 376, 390, 398, 914], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 57, 59, 62, 63, 64, 65, 66, 95, 164, 310, 339, 362, 387, 389, 390, 395, 401, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 690, 691, 954, 988, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "affin": [12, 38, 390, 952], "propag": [12, 38, 313, 314, 315, 390, 967], "embed": [12, 52, 217, 218, 229, 286, 397, 951], "2d": [12, 52, 97, 104, 167], "space": [12, 100, 391, 943, 951], "compress": [13, 53, 353, 399], "sens": [13, 399], "tomographi": 13, "l1": [13, 187, 189, 212, 333, 399], "prior": [13, 158, 241], "lasso": [13, 180, 181, 182, 183, 184, 185, 190, 307, 629, 950], "topic": 14, "extract": [14, 73, 98, 214, 257, 339, 353, 355, 389, 398, 989], "neg": [14, 95, 191, 395, 950], "matrix": [14, 17, 177, 250, 389, 390, 395, 954, 969], "factor": [14, 95, 103, 106, 282, 283, 395, 960], "latent": [14, 84, 395], "dirichlet": [14, 395, 953], "alloc": [14, 395], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 62, 63, 66, 67, 75, 77, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 189, 201, 215, 223, 239, 248, 269, 272, 275, 290, 296, 304, 311, 319, 336, 341, 348, 352, 353, 390, 391, 394, 961], "libsvm": [16, 360], "gui": 16, "wikipedia": 17, "princip": [17, 85, 101, 395, 971, 988], "eigenvector": 17, "download": [17, 129, 162, 360], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 381, 398, 989], "adjac": 17, "singular": [17, 395], "vector": [17, 25, 53, 164, 320, 323, 332, 338, 340, 361, 389, 398, 969, 987, 988], "random": [17, 95, 114, 127, 128, 168, 169, 229, 237, 262, 264, 349, 367, 374, 389, 394, 395, 397, 923, 943, 950, 966, 971], "svd": [17, 95, 395], "central": 17, "score": [17, 84, 120, 135, 162, 175, 246, 255, 262, 263, 328, 390, 394, 949, 954, 969, 984], "biclust": [18, 19, 20, 164, 362, 387, 389], "spectral": [19, 20, 21, 65, 217, 387, 390, 951], "co": [19, 21, 387], "algorithm": [19, 20, 21, 38, 44, 49, 62, 63, 64, 217, 225, 371, 376, 948, 950, 953, 955, 957, 958, 962, 970, 987], "A": [20, 21, 47, 57, 62, 196, 309, 365, 371, 394, 983, 986], "demo": [20, 21, 38, 47, 49, 57, 62, 64], "calibr": [23, 24, 25, 26, 27, 122, 164, 196, 388, 389, 416, 417, 418, 1005, 1006, 1008, 1009, 1010, 1011], "probabl": [24, 25, 26, 30, 131, 152, 388, 389, 397, 969], "classifi": [24, 25, 27, 31, 132, 179, 236, 253, 274, 306, 318, 322, 325, 338, 347, 388, 389, 397, 948, 957, 987, 989], "gener": [24, 34, 38, 47, 49, 62, 63, 65, 66, 77, 79, 81, 90, 91, 96, 97, 98, 116, 142, 149, 155, 156, 158, 164, 174, 175, 176, 180, 190, 196, 198, 231, 246, 253, 269, 288, 295, 307, 313, 332, 349, 362, 366, 378, 389, 395, 397, 950, 964, 975, 984], "synthet": [24, 74, 175, 253, 370], "gaussian": [24, 25, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 240, 241, 242, 245, 246, 247, 298, 389, 400, 953, 956, 964, 966], "bay": [24, 25, 389, 956], "curv": [25, 27, 176, 231, 237, 247, 253, 258, 263, 265, 271, 388, 949], "summari": [25, 185, 339, 340, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "3": [26, 179, 389, 989, 1004, 1005, 1010], "class": [26, 37, 110, 112, 131, 179, 205, 210, 259, 263, 265, 309, 324, 327, 378, 389, 394, 397, 398, 953, 954, 957, 960, 968, 969, 996, 997], "fit": [26, 96, 103, 116, 117, 120, 122, 123, 154, 175, 176, 177, 190, 193, 198, 202, 263, 288, 332, 349, 367, 377, 397, 956, 960, 980], "compar": [26, 42, 44, 61, 77, 84, 120, 128, 142, 172, 175, 182, 198, 203, 225, 231, 256, 264, 284, 293, 298, 376], "comparison": [27, 31, 43, 63, 79, 104, 119, 141, 149, 217, 218, 231, 256, 267, 340, 390, 400, 950], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 57, 88, 136, 137, 218, 295, 313, 314, 363, 986], "normal": [33, 172, 196, 298, 302, 389, 845, 859, 954, 964], "ledoit": [33, 78, 392], "wolf": [33, 78, 392], "oa": [33, 77, 78, 403, 453], "discrimin": [33, 34, 389, 948], "quadrat": [34, 400, 948], "covari": [34, 76, 77, 79, 80, 81, 164, 243, 389, 392, 403, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 948, 1004, 1008, 1009, 1010], "ellipsoid": [34, 242], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 259, 308, 310, 313, 339, 353, 366, 371, 390, 394, 398, 989], "evalu": [37, 57, 60, 80, 196, 234, 257, 260, 295, 339, 377, 385, 387, 390, 394, 397, 943, 949, 954, 989], "defin": [37, 47, 57, 66, 217, 234, 251, 253, 254, 340, 954], "list": [37, 977], "metric": [37, 40, 122, 260, 389, 390, 394, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 943, 951, 952, 954, 957, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "fix": [37, 996, 999, 1000, 1001, 1002, 1003, 1009], "ground": [37, 175], "truth": [37, 175], "label": [37, 263, 313, 314, 315, 361, 362, 390, 394, 397, 954, 965, 967], "grow": 37, "number": [37, 59, 119, 268, 353, 367, 943, 953], "vari": [37, 292, 316, 390], "sampl": [38, 62, 77, 96, 97, 142, 177, 209, 231, 257, 269, 288, 307, 332, 335, 360, 374, 378, 389, 390, 397, 950], "agglom": [39, 40, 52, 988], "without": [39, 120, 284, 338], "differ": [40, 44, 61, 77, 158, 167, 298, 301, 322, 367, 376, 390, 950, 987], "hierarch": [41, 47, 61, 66, 390, 988], "dendrogram": 41, "birch": [42, 390, 421], "minibatchkmean": [42, 63, 95, 427], "bisect": [43, 390], "k": [43, 45, 48, 56, 57, 58, 60, 63, 66, 84, 339, 390, 394, 954, 957, 964, 987, 988], "mean": [43, 45, 48, 56, 57, 58, 60, 62, 63, 116, 117, 162, 168, 339, 390, 954, 964, 988], "regular": [43, 77, 124, 166, 189, 200, 201, 292, 333, 950, 958], "toi": [44, 61, 225, 363], "segment": [46, 65], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 256], "ward": [47, 66, 390, 988], "an": [47, 58, 162, 177, 185, 234, 286, 306, 310, 376, 398, 943, 960, 980, 986, 987], "color": 48, "quantiz": [48, 53, 988], "dbscan": [49, 390, 401, 423], "onlin": [50, 203, 309, 310, 968], "dictionari": [50, 95, 98, 105, 395], "part": [50, 399], "agglomer": [51, 54, 971, 988], "origin": [53, 100, 262, 286, 298], "encod": [53, 119, 964, 965], "strategi": [53, 254, 293, 301, 355, 389, 390, 954], "memori": [53, 353, 371, 373, 390], "footprint": 53, "v": [54, 66, 77, 78, 80, 85, 100, 168, 178, 188, 214, 259, 265, 269, 270, 343, 390, 944, 964, 980], "univari": [54, 84, 142, 328, 399, 944], "select": [54, 59, 71, 103, 135, 140, 142, 146, 164, 184, 185, 190, 246, 249, 328, 376, 385, 389, 394, 399, 943, 950, 953, 984, 1002], "induct": 55, "demonstr": [56, 260, 301, 313], "assumpt": 56, "handwritten": [57, 218, 363], "our": [57, 251, 254, 366], "reduc": [57, 353], "initi": [58, 60, 244, 953], "silhouett": [59, 390], "kmean": [59, 63, 307, 425], "empir": [60, 80, 229, 392], "linkag": [61, 390], "method": [61, 73, 84, 108, 149, 164, 217, 219, 244, 273, 378, 389, 390, 397, 946, 953, 960, 961, 988], "shift": [62, 390], "meanshift": [62, 426], "establish": [63, 172], "pariti": 63, "between": [63, 267], "optic": [64, 363, 390, 428], "four": 65, "circl": 65, "two": [65, 112, 182, 235, 256], "unstructur": 66, "we": 66, "ar": [66, 309, 376], "nearest": [66, 164, 276, 277, 278, 279, 284, 287, 288, 306, 389, 944, 957, 987], "neighbor": [66, 164, 217, 276, 277, 278, 279, 284, 288, 306, 389, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 944, 951, 957, 987, 1004, 1005, 1006, 1008, 1009, 1010, 1011], "10": [66, 996], "pipelin": [68, 69, 71, 72, 129, 143, 164, 166, 227, 236, 257, 328, 367, 376, 377, 389, 391, 399, 832, 833, 834, 835, 971, 985, 989, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "composit": [68, 164, 389, 391, 943], "estim": [68, 76, 77, 78, 79, 80, 81, 113, 119, 121, 128, 155, 162, 164, 175, 199, 202, 227, 233, 234, 245, 264, 280, 281, 289, 306, 307, 308, 349, 367, 376, 377, 378, 386, 389, 391, 392, 394, 396, 397, 400, 943, 944, 948, 950, 953, 954, 969, 974, 982, 984, 986, 997, 1004, 1005, 1006], "column": [69, 70, 236], "transform": [69, 70, 71, 74, 84, 115, 127, 236, 308, 309, 310, 358, 376, 377, 391, 393, 394, 957, 964, 965, 966, 988], "heterogen": [69, 391], "sourc": [69, 96, 364], "20": [69, 338, 361, 989, 1004], "newsgroup": [69, 338, 361, 989], "creat": [69, 101, 103, 226, 263, 328, 376], "mix": 70, "type": [70, 241, 367, 378, 390, 980], "dimension": [71, 217, 220, 236, 285, 339, 948, 951, 957, 971, 987], "reduct": [71, 217, 221, 236, 285, 339, 948, 957, 971], "gridsearchcv": [71, 135, 260, 397, 772], "illustr": [71, 153, 158, 286, 400], "cach": [71, 278, 391], "within": 71, "chain": [72, 236, 274, 377, 391], "logist": [72, 179, 186, 187, 188, 189, 211, 212, 950, 987], "concaten": 73, "multipl": [73, 236, 260, 349, 372, 394, 943, 944, 954, 1004, 1005], "effect": [74, 222, 298, 316, 343, 957], "target": [74, 156, 214, 376, 378, 391, 393, 955, 965], "shrinkag": [77, 392, 397, 948, 987], "ledoitwolf": [77, 451], "max": [77, 954], "likelihood": [77, 175, 176, 259, 954, 959], "approach": [77, 185, 256], "robust": [79, 80, 175, 199, 202, 349, 389, 392, 943, 950], "mahalanobi": [79, 957], "distanc": [79, 389, 957], "relev": [79, 950], "minimum": [80, 392], "determin": [80, 392, 950, 954], "spars": [81, 95, 105, 166, 180, 182, 211, 306, 338, 339, 374, 392, 395, 399, 964, 966, 968], "invers": [81, 392, 966], "decomposit": [83, 84, 93, 95, 113, 164, 362, 389, 393, 395, 402, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 988, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "variabl": [84, 166, 354, 376, 389, 987], "canon": [84, 393], "symmetr": 84, "pl": 84, "scatter": 84, "multivari": [84, 944], "respons": [84, 379], "pls2": 84, "pls1": 84, "cca": [84, 459], "mode": [84, 353, 364], "b": 84, "deflat": 84, "compon": [85, 95, 101, 284, 285, 286, 395, 953, 957, 971, 988], "partial": [85, 167, 235, 961], "least": [85, 122, 185, 191, 194, 950], "squar": [85, 122, 158, 191, 194, 400, 946, 950, 952, 954], "The": [85, 88, 89, 166, 196, 222, 229, 254, 263, 361, 369, 394, 398, 953, 954, 966, 987, 988], "one": [85, 119, 235, 950, 954], "power": [85, 196], "iri": [89, 102, 104, 118, 151, 205, 318, 322, 344, 363, 400, 986], "randomli": [90, 91], "multilabel": [91, 232, 362, 374, 389, 954, 955, 980], "beta": [94, 395], "diverg": [94, 395], "loss": [94, 196, 206, 307, 310, 397, 954], "prepar": [95, 109, 111, 172, 217, 265, 266, 325, 369], "nmf": [95, 310, 395, 517], "independ": [95, 395, 988], "fastica": [95, 96, 97, 402, 510], "minibatchsparsepca": [95, 395, 516], "center": [95, 964], "fa": [95, 103], "posit": [95, 309], "blind": 96, "separ": [96, 208, 326, 327], "ica": [96, 395, 988], "point": [97, 286], "cloud": 97, "distort": 98, "displai": [98, 201, 226, 227, 236, 373, 993], "patch": [98, 398], "noisi": [98, 156], "them": [98, 365], "increment": [99, 355, 395], "kernelpca": [100, 512], "figur": 101, "probabilist": [103, 150, 395, 400], "lda": [104, 395, 948], "precomput": [105, 177, 306, 395], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 118, 164, 310, 389, 397, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "discret": [109, 157, 299, 300, 964], "versu": [109, 113, 210, 261, 318, 353], "adaboost": [109, 110, 111, 112, 397], "baselin": [109, 172, 196], "samm": 109, "r": 109, "multi": [110, 128, 167, 190, 205, 220, 233, 260, 263, 292, 346, 371, 389, 950, 951, 954, 958, 969, 970], "decis": [110, 111, 118, 130, 164, 230, 318, 342, 343, 344, 345, 346, 347, 376, 379, 389, 970], "tree": [110, 111, 115, 116, 117, 118, 127, 164, 168, 196, 306, 342, 343, 344, 345, 346, 347, 376, 389, 397, 399, 880, 881, 882, 883, 884, 885, 886, 957, 962, 970, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "train": [111, 123, 132, 226, 231, 235, 237, 246, 269, 295, 308, 316, 325, 338, 343, 344, 347, 361, 394, 957, 967, 980, 987, 989], "decisiontre": 111, "singl": [113, 129, 214, 226, 362, 390, 944], "bag": [113, 121, 338, 397, 398, 943, 989], "bia": 113, "varianc": [113, 194, 399, 954, 964], "oob": 114, "error": [114, 122, 135, 175, 253, 269, 373, 381, 950, 954], "forest": [114, 116, 117, 128, 168, 169, 237, 361, 397, 960], "import": [116, 117, 123, 146, 168, 169, 230, 303, 306, 397, 962], "decreas": [116, 117, 168], "impur": [116, 117, 168, 343, 962], "permut": [116, 168, 169, 262, 306, 394, 962], "pixel": 117, "parallel": [117, 354, 364, 371, 390, 397, 943], "mdi": [117, 168], "surfac": [118, 230, 344], "categor": [119, 308, 376, 397, 956, 964], "am": 119, "hous": [119, 167, 361], "drop": 119, "hot": 119, "ordin": 119, "nativ": [119, 306, 308], "limit": [119, 149, 353, 381, 384, 398], "split": [119, 308, 349, 394], "earli": [120, 204], "stop": [120, 204, 398, 968], "interv": 122, "quantil": [122, 198, 309, 310, 950], "confid": 122, "tune": [122, 254, 257, 308, 943, 989], "hyper": [122, 254, 308, 389, 943], "preprocess": [123, 129, 164, 166, 167, 234, 236, 297, 340, 349, 376, 389, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 964, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "devianc": [123, 954], "isolationforest": [125, 540], "monoton": [126, 397], "constraint": [126, 167, 390, 397], "hash": [127, 374, 398], "total": [127, 343, 397], "output": [128, 233, 298, 346, 970, 987], "meta": [128, 308, 397], "combin": [129, 226], "predictor": 129, "stack": [129, 306, 397], "make": [129, 132, 162, 366, 369, 379], "measur": [129, 259, 390, 954], "boundari": [130, 318], "votingclassifi": [130, 131, 397, 546], "calcul": 131, "individu": [132, 167, 308, 961], "vote": [132, 397], "tutori": [134, 164, 973, 981, 983, 989], "exercis": [134, 135, 136, 137, 138, 164, 984, 987, 989], "diabet": [135, 235, 363, 987], "appli": 135, "line": [135, 152], "show": [135, 265], "std": [135, 175], "bonu": 135, "how": [135, 349, 366, 371, 376], "much": 135, "can": [135, 376], "you": [135, 376], "trust": 135, "alpha": [135, 343], "f": [141, 954], "mutual": [141, 390], "inform": [141, 162, 184, 185, 369, 390, 943, 950], "anova": [143, 328], "recurs": [144, 145, 399], "elimin": [144, 145, 399, 943], "sequenti": [146, 399], "coeffici": [146, 166, 175, 200, 201, 390, 954], "discuss": [146, 365], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 166, 349, 379, 389, 400, 953, 983], "machin": [148, 164, 166, 295, 320, 373, 389, 959, 969, 980, 987], "ridg": [149, 176, 178, 194, 200, 201, 231, 389, 400, 649, 947, 950], "simpl": [149, 281, 371, 986], "final": 149, "gpc": [150, 151, 152, 153, 400], "iso": [152, 263], "xor": [153, 400], "gpr": [154, 155, 400], "mauna": [154, 400], "loa": [154, 400], "co2": [154, 400], "build": [154, 162, 364, 366, 373, 989], "design": 154, "proper": 154, "extrapol": 154, "interpret": [154, 166, 234, 395, 397], "hyperparamet": [154, 155, 257, 264, 594], "nois": [155, 156, 176, 400], "level": [155, 390, 397, 400], "optimis": 155, "basic": [156, 214, 377, 392, 400], "introductori": 156, "free": 156, "posterior": 158, "cookbook": 158, "radial": [158, 400, 946, 987], "ration": [158, 400], "quadradt": 158, "exp": [158, 400], "sine": [158, 247, 400], "dot": [158, 400], "product": [158, 214, 373, 376, 400, 598], "mat\u00e9rn": [158, 400], "miss": [160, 161, 162, 164, 306, 397, 944, 964], "valu": [160, 161, 162, 164, 222, 306, 366, 395, 397, 944, 954, 962, 964], "imput": [160, 161, 162, 164, 306, 389, 604, 605, 606, 607, 944, 964, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "variant": 161, "iterativeimput": [161, 604, 944], "befor": [162, 369], "replac": 162, "0": [162, 306, 307, 308, 309, 970, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "knn": [162, 306], "iter": [162, 268, 394, 943], "releas": [164, 305, 306, 307, 308, 309, 310, 369, 381, 994, 1002], "highlight": [164, 305, 306, 307, 308, 309, 310, 996, 999, 1000, 1003, 1004], "mixtur": [164, 240, 241, 242, 245, 246, 247, 389, 770, 771, 953, 1004, 1005, 1009, 1010], "inspect": [164, 165, 380, 389, 608, 609, 610, 611, 1005, 1006, 1007, 1008, 1009, 1010], "approxim": [164, 171, 172, 230, 276, 308, 389, 392, 946], "manifold": [164, 216, 217, 218, 219, 362, 389, 665, 666, 667, 668, 669, 670, 671, 672, 673, 951, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "miscellan": [164, 224, 389, 1004, 1005, 1006, 1007, 1008, 1009], "multioutput": [164, 273, 389, 804, 805, 806, 807, 955, 1004, 1005, 1006, 1007, 1008, 1011], "neural": [164, 291, 389, 958, 959], "network": [164, 291, 389, 958, 959], "semi": [164, 312, 313, 317, 318, 389, 967], "supervis": [164, 312, 313, 317, 318, 389, 958, 967, 976, 987], "work": [164, 337, 353, 365, 376, 989], "common": [166, 349, 378, 398, 954], "pitfal": [166, 349], "wage": 166, "scale": [166, 217, 220, 303, 333, 355, 398, 863, 951, 960, 964, 971], "matter": 166, "check": [166, 306, 373, 1004, 1005, 1006], "problem": [166, 395, 969, 970, 980, 985, 987, 988], "correl": [166, 169, 393, 954, 962], "numer": [166, 354, 367], "lesson": 166, "depend": [167, 235, 364, 961, 996, 1009, 1010], "condit": [167, 308, 961], "expect": [167, 308, 953, 961], "california": [167, 361], "1": [167, 193, 309, 310, 376, 389, 989, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "wai": [167, 366, 376], "layer": [167, 292, 958], "perceptron": [167, 292, 645, 950, 958], "3d": 167, "accuraci": [168, 230, 338, 343, 954], "": [168, 368, 376, 397, 954], "multicollinear": 169, "breast": [169, 363], "cancer": [169, 363], "handl": [169, 944], "scalabl": [172, 307], "partit": 172, "bayesian": [175, 176, 241, 256, 389, 950, 953], "recov": 175, "weight": [175, 177, 209, 294, 307, 335, 397, 398], "true": [175, 176], "margin": [175, 176, 208, 326, 330], "log": [175, 176, 954], "expans": 175, "sinusoid": 176, "cubic": 176, "l": 176, "elast": [177, 180, 181, 950], "net": [177, 180, 181, 950], "gram": [177, 969], "huberregressor": [178, 626], "strong": 178, "signal": [180, 395, 988], "elasticnet": [180, 307, 623], "dens": 182, "implement": [182, 376, 390, 398, 954, 957, 968, 969], "path": [183, 189, 201, 347, 381], "lar": [183, 627, 950], "criteria": [184, 376, 950, 970], "aic": 185, "bic": [185, 246], "criterion": [185, 308, 943, 968], "coordin": 185, "descent": [185, 204, 210, 950, 968], "angl": [185, 950], "penalti": [187, 207, 333], "sparsiti": [187, 193, 398, 987], "multinomi": [188, 212, 950, 956], "One": [188, 210, 265, 309, 324, 394, 960, 968], "rest": [188, 265], "joint": 190, "task": [190, 389, 950, 974], "seri": [190, 394], "onli": [193, 213, 1007, 1009], "2": [193, 989, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ordinari": [194, 950], "orthogon": [195, 950], "match": [195, 950], "pursuit": [195, 950], "poisson": [196, 214, 307, 308, 954], "french": 196, "motor": 196, "third": [196, 381], "parti": [196, 381], "liabil": 196, "claim": [196, 214], "constant": 196, "rank": [196, 389, 954], "takeawai": 196, "interpol": 197, "quantileregressor": [198, 647], "linearregress": [198, 634], "ransac": [199, 950], "l2": [200, 333], "solver": [203, 395, 950], "stochast": [204, 210, 217, 293, 950, 951, 959, 968], "sgd": [205, 206, 207, 208, 209, 950, 968], "convex": 206, "maximum": [208, 326, 959], "hyperplan": [208, 326, 327], "multiclass": [211, 265, 306, 374, 388, 389, 801, 802, 803, 918, 919, 920, 954, 955, 980, 987, 1005, 1008, 1009, 1010], "20newgroup": 211, "mnist": [212, 294], "theil": [213, 950], "sen": [213, 950], "y": [213, 376, 393, 965, 967], "direct": 213, "x": 213, "tweedi": [214, 954], "insur": 214, "definit": [214, 295, 961, 1006], "frequenc": [214, 989], "sever": [214, 219], "gamma": [214, 954], "pure": 214, "premium": 214, "tweedieregressor": [214, 657], "local": [217, 218, 282, 283, 951, 960], "isomap": [217, 218, 665, 951], "multidimension": 217, "t": [217, 222, 951], "techniqu": 218, "sphere": 219, "swiss": 221, "roll": [221, 367], "And": [221, 379], "hole": 221, "sne": [222, 951], "perplex": 222, "shape": [222, 980], "anomali": 225, "object": [226, 251, 367, 376, 943, 954, 986, 993], "confusionmatrixdisplai": [226, 674], "roccurvedisplai": [226, 678], "precisionrecalldisplai": [226, 677], "compact": 227, "represent": [227, 307, 353, 398, 988], "rich": [227, 307], "html": 227, "isoton": [228, 388, 389, 612, 613, 614, 945, 1004, 1005, 1006, 1008, 1010], "johnson": [229, 966], "lindenstrauss": [229, 966], "bound": 229, "theoret": [229, 950], "explicit": 230, "map": [230, 302, 964], "rbf": [230, 324, 325, 400, 599, 952, 969, 987], "python": [230, 354, 371, 384, 969, 973, 974, 1002], "packag": [230, 974, 1008], "svr": [231, 332, 878, 969], "construct": [231, 391], "look": [231, 332], "complet": [233, 390], "advanc": 235, "With": [235, 989], "togeth": [235, 265, 985, 988], "grid": [236, 254, 256, 264, 267, 943, 984, 989], "search": [236, 254, 256, 264, 267, 377, 943, 984, 989], "over": 236, "roc": [237, 253, 265, 266, 306, 954], "api": [237, 238, 306, 309, 367, 372, 378, 386, 389, 400, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006], "svc": [237, 333, 877, 969], "introduc": 238, "set_output": [238, 367], "concentr": 241, "variat": [241, 953], "gmm": [243, 244], "densiti": [245, 280, 281, 289, 396, 906, 969], "best": [246, 376], "confus": [250, 390, 954], "behavior": 251, "indic": 251, "mani": [251, 354, 376], "cv": [251, 349], "tradeoff": [253, 954], "det": [253, 954], "custom": [254, 321, 398, 964, 969], "refit": [254, 980], "balanc": [255, 954], "statist": [256, 974, 983, 986], "frequentist": 256, "practic": [256, 349, 370, 950, 951, 958, 968, 969, 970], "equival": 256, "all": [256, 265, 310, 381, 985, 1011], "take": 256, "home": 256, "messag": 256, "ratio": [259, 954], "pre": [259, 349, 377], "post": [259, 343], "invari": 259, "respect": 259, "preval": 259, "cross_val_scor": [260, 795], "nest": [261, 391, 984], "see": [261, 391], "also": [261, 391], "signific": 262, "precis": [263, 954], "recal": [263, 954], "In": 263, "binari": [263, 950, 954], "averag": [263, 265, 390, 397, 954], "micro": [263, 265], "each": [263, 268, 338, 943], "f1": 263, "receiv": [265, 266, 954], "oper": [265, 266, 365, 374, 400, 954], "characterist": [265, 266, 954], "specif": [265, 364, 367, 384, 943, 974, 975], "ovr": 265, "macro": 265, "ovo": 265, "success": [267, 268, 308, 943], "halv": [267, 268, 308, 943], "candid": [268, 943], "amount": [268, 943], "resourc": [268, 354, 366, 943, 973, 977], "underfit": 270, "overfit": 270, "tsne": [276, 669], "1d": 281, "novelti": [282, 960, 969], "lof": [282, 283], "neighborhood": [284, 285, 286, 957], "centroid": [287, 957], "mlpclassifi": [293, 830], "mlp": 294, "restrict": [295, 959], "boltzmann": [295, 959], "scaler": 298, "standardscal": [298, 853], "minmaxscal": [298, 843], "maxabsscal": [298, 842], "robustscal": [298, 851], "powertransform": [298, 849], "quantiletransform": [298, 850], "uniform": [298, 964], "kbinsdiscret": [299, 301, 838], "continu": [299, 366], "22": [306, 1006], "new": [306, 308, 309, 366, 376, 973, 996, 997, 999, 1000, 1001, 1002, 1003], "prune": [306, 343, 970], "datafram": [306, 376], "compat": [306, 366, 367, 386], "auc": [306, 682], "now": [306, 309, 1006], "23": [307, 1007], "stabil": 307, "improv": [307, 308, 309, 310, 365, 366, 999, 1000], "histogram": [307, 309, 396, 397], "24": [308, 1008], "histgradientboost": 308, "self": [308, 316, 967], "sequentialfeatureselector": [308, 579], "polynomialcountsketch": [308, 617], "decisiontreeregressor": [308, 881], "keyword": [309, 1007, 1009], "argument": [309, 367, 1007, 1009], "name": [309, 376], "more": [309, 361, 376, 958], "flexibl": [309, 944], "stabl": 309, "histgradientboostingregressor": [310, 539], "get_feature_names_out": 310, "avail": [310, 943, 992, 993], "group": [310, 394, 978, 988], "infrequ": [310, 964], "onehotencod": [310, 846], "minibatchnmf": [310, 515], "version": [310, 360, 364, 369, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "bisectingkmean": [310, 422], "divid": 310, "most": 313, "uncertain": 313, "activ": 314, "threshold": 316, "linearsvc": [323, 872, 969], "unbalanc": [327, 969], "some": 328, "plai": 328, "percentil": 328, "case": [333, 950, 954], "simul": 333, "note": [333, 355, 391, 394, 950], "tie": 334, "break": 334, "word": [338, 398, 989], "metadata": 338, "strip": 338, "quantifi": [339, 954], "qualiti": [339, 954], "tfidfvector": [339, 340, 568], "lsa": 339, "top": [339, 954], "term": [339, 378, 398], "per": 339, "hashingvector": [339, 398, 566], "featurehash": [340, 559], "dictvector": [340, 558], "special": 340, "purpos": [340, 975], "cost": [343, 970], "leav": [343, 394, 950], "understand": 347, "recommend": [349, 361, 974], "inconsist": 349, "leakag": 349, "dure": 349, "avoid": [349, 391], "control": [349, 397, 958], "none": 349, "randomst": 349, "instanc": [349, 355], "repeat": [349, 391, 394], "call": [349, 365], "splitter": [349, 389], "subtleti": 349, "get": [349, 376, 377], "reproduc": [349, 370], "across": 349, "execut": [349, 376], "configur": [353, 354], "overhead": 353, "input": [353, 367, 386, 390, 964], "tip": [353, 371, 373, 943, 951, 958, 968, 969, 970], "trick": [353, 371, 373, 398], "algebra": [353, 374], "librari": [353, 354], "reshap": [353, 986], "link": [353, 360, 954], "manag": [354, 381], "joblib": [354, 371], "openmp": [354, 371], "numpi": [354, 370], "oversubscript": 354, "spawn": 354, "too": 354, "thread": 354, "switch": 354, "runtim": [354, 364], "assume_finit": 354, "working_memori": 354, "environ": 354, "sklearn_assume_finit": 354, "sklearn_working_memori": 354, "sklearn_se": 354, "sklearn_tests_global_random_se": 354, "sklearn_skip_network_test": 354, "sklearn_run_float32_test": 354, "sklearn_enable_debug_cython_direct": 354, "computation": 355, "bigger": 355, "stream": 355, "tabl": [356, 376], "Of": 356, "content": [356, 376, 980], "util": [359, 370, 374, 389, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 989, 993, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "other": [360, 376, 974, 996], "svmlight": 360, "format": [360, 370, 376, 384, 955], "org": [360, 369, 978], "repositori": 360, "arff": 360, "parser": 360, "extern": [360, 973, 980, 996, 1005], "olivetti": 361, "usag": [361, 371, 376, 386, 388, 391, 397, 398, 950], "convert": 361, "filter": 361, "realist": 361, "consider": [361, 950], "wild": 361, "covertyp": 361, "rcv1": 361, "kddcup": 361, "99": 361, "plant": 363, "linnerrud": 363, "wine": 363, "wisconsin": 363, "diagnost": 363, "instal": [364, 381], "nightli": 364, "tag": [364, 366, 367], "edit": 364, "platform": [364, 373, 381], "instruct": 364, "window": [364, 381], "maco": 364, "compil": [364, 371], "conda": [364, 381], "forg": 364, "homebrew": 364, "linux": [364, 376, 381], "system": 364, "freebsd": 364, "bug": [365, 366, 977, 999, 1000, 1001, 1002, 1003, 1004, 1005], "triag": 365, "issu": [365, 366], "curat": 365, "fruit": 365, "pr": [365, 369], "help": [365, 366, 376], "review": [365, 366, 373, 989], "member": 365, "close": 365, "tough": 365, "typic": 365, "workflow": [365, 366], "contribut": [366, 376], "submit": 366, "report": [366, 370, 954], "request": [366, 369, 373, 376], "good": [366, 370], "video": [366, 973], "git": 366, "pull": [366, 369, 373, 376], "checklist": [366, 369], "integr": 366, "ci": 366, "stall": 366, "unclaim": 366, "easi": 366, "want": 366, "guidelin": [366, 367], "write": 366, "referenc": 366, "github": 366, "action": 366, "coverag": [366, 373, 954], "matplotlib": 366, "monitor": 366, "tracker": [366, 977], "maintain": [366, 369, 384], "backward": 366, "deprec": [366, 389, 899, 1006], "chang": [366, 978, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "default": 366, "read": 366, "exist": 366, "instanti": 367, "attribut": [367, 378, 943], "option": 367, "univers": 367, "your": [367, 370, 954], "own": [367, 376, 954], "templat": 367, "baseestim": [367, 404], "mixin": 367, "get_param": 367, "set_param": 367, "init": 367, "clone": [367, 413], "assert": 367, "guid": [368, 991], "major": [369, 397, 1004, 1005], "minor": 369, "merg": 369, "web": 369, "site": 369, "travi": 369, "cron": 369, "job": [369, 376], "experiment": [369, 386, 389, 555, 556, 557], "craft": 370, "minim": [370, 970, 1009, 1010], "provid": 370, "fail": 370, "comment": 370, "boil": 370, "down": 370, "script": 370, "someth": 370, "small": 370, "possibl": 370, "do": [370, 376], "NOT": 370, "unless": 370, "i": [370, 376, 394, 978], "extrem": [370, 397], "necessari": 370, "markdown": 370, "panda": [370, 376], "make_regress": [370, 501], "make_classif": [370, 492], "make_blob": [370, 489], "optim": [371, 389, 943, 951], "cython": [371, 373], "c": 371, "profil": 371, "extens": 371, "yep": 371, "gperftool": 371, "gprof": 371, "valgrind": [371, 373], "callgrind": 371, "kcachegrind": 371, "warm": 371, "restart": 371, "overview": [372, 390, 960], "ax": 372, "saniti": 373, "preserv": 373, "fold": [373, 394], "unfold": 373, "outdat": 373, "diff": 373, "remot": 373, "track": 373, "branch": 373, "pytest": 373, "alias": 373, "flag": 373, "standard": [373, 964], "repli": 373, "debug": 373, "arm64": 373, "x86_64": 373, "tool": [374, 376], "effici": 374, "arrai": [374, 386, 980], "matric": [374, 964], "warn": [374, 389], "except": [374, 389, 548, 549, 550, 551, 552, 553, 554, 1008], "dispatch": 375, "frequent": 376, "ask": 376, "question": [376, 977], "what": 376, "lot": 376, "peopl": [376, 996, 997, 998, 999], "wrong": 376, "pronounc": 376, "why": [376, 397], "pypi": 376, "deep": 376, "reinforc": 376, "Will": 376, "add": 376, "graphic": [376, 959], "sequenc": 376, "did": 376, "remov": [376, 389, 399, 964, 996], "hmm": 376, "gpu": 376, "need": 376, "doe": 376, "directli": 376, "plan": 376, "so": 376, "my": 376, "ani": 376, "attent": 376, "inclus": 376, "includ": 376, "should": 376, "save": 376, "export": 376, "deploi": 376, "bunch": [376, 887], "usabl": 376, "deal": 376, "string": 376, "sometim": 376, "crash": 376, "freez": 376, "n_job": 376, "under": 376, "osx": [376, 381], "than": 376, "specifi": [376, 943], "random_st": 376, "entir": 376, "start": 377, "processor": 377, "automat": [377, 950], "next": 377, "glossari": 378, "element": 378, "concept": [378, 950], "properti": 378, "role": 379, "technic": 379, "committe": 379, "enhanc": [379, 974, 999, 1000, 1001, 1002, 1003], "propos": 379, "slep": 379, "latest": 381, "appl": 381, "silicon": 381, "m1": 381, "hardwar": 381, "alpin": 381, "arch": 381, "debian": 381, "ubuntu": 381, "fedora": 381, "netbsd": 381, "macport": 381, "mac": 381, "anaconda": 381, "enthought": 381, "deploy": 381, "intel": 381, "channel": 381, "winpython": 381, "troubleshoot": 381, "caus": 381, "length": 381, "persist": 384, "serial": 384, "secur": 384, "interoper": [384, 974], "mathemat": [387, 390, 397, 946, 948, 950, 957, 958, 961, 968, 969, 970], "formul": [387, 390, 397, 948, 950, 957, 958, 968, 969, 970], "sigmoid": [388, 952], "sklearn": [389, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "compos": [389, 442, 443, 444, 445, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "cross_decomposit": [389, 459, 460, 461, 462, 1006, 1008, 1010], "loader": 389, "discriminant_analysi": [389, 526, 527, 1004, 1005, 1008, 1010, 1011], "dummi": [389, 528, 529, 954, 1004, 1005, 1006, 1009, 1010], "feature_extract": [389, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "feature_select": [389, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "gaussian_process": [389, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "kernel_approxim": [389, 615, 616, 617, 618, 619, 1006, 1008, 1009, 1010, 1011], "kernel_ridg": [389, 620], "linear_model": [389, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "classic": [389, 953], "glm": 389, "interfac": 389, "model_select": [389, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "naive_bay": [389, 808, 809, 810, 811, 812, 1004, 1006, 1007, 1008, 1009, 1011], "neural_network": [389, 829, 830, 831, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "random_project": [389, 864, 865, 866, 1010], "semi_supervis": [389, 867, 868, 869, 1006, 1007, 1008], "recent": 389, "To": 389, "low": [390, 397, 399], "mini": [390, 395], "batch": [390, 395], "assign": 390, "featureagglomer": [390, 424], "hierarchi": 390, "ad": 390, "connect": [390, 398, 988], "consumpt": 390, "larg": [390, 398], "size": [390, 397], "rand": 390, "index": [390, 915], "advantag": 390, "drawback": 390, "homogen": 390, "fowlk": 390, "mallow": 390, "calinski": 390, "harabasz": 390, "davi": 390, "bouldin": 390, "conting": 390, "pair": 390, "access": 391, "featureunion": [391, 832], "columntransform": [391, 442], "shrunk": 392, "oracl": 392, "plscanon": [393, 460], "plssvd": [393, 462], "plsregress": [393, 461], "held": 394, "cross_valid": [394, 796], "obtain": 394, "d": [394, 957], "loo": 394, "p": [394, 978], "lpo": 394, "shuffl": [394, 928], "stratif": 394, "stratifi": 394, "stratifiedgroupkfold": [394, 789], "predefin": [394, 954], "decompos": 395, "exact": 395, "sparsepca": [395, 520], "kpca": 395, "choic": [395, 953, 957], "truncat": 395, "semant": 395, "nnmf": 395, "frobeniu": 395, "norm": 395, "addit": [397, 946], "weak": 397, "learner": 397, "rate": 397, "subsampl": 397, "faster": 397, "hard": 397, "soft": 397, "dict": 398, "detail": [398, 946, 950, 968, 969], "tf": 398, "idf": 398, "decod": 398, "applic": [398, 988], "corpu": 398, "selectfrommodel": [399, 574], "recoveri": 399, "biclustermixin": 405, "classnameprefixfeaturesoutmixin": 406, "classifiermixin": 407, "clustermixin": 408, "densitymixin": 409, "onetoonefeaturemixin": 410, "regressormixin": 411, "transformermixin": 412, "is_classifi": 414, "is_regressor": 415, "calibratedclassifiercv": 416, "calibrationdisplai": 417, "calibration_curv": 418, "affinitypropag": 419, "agglomerativeclust": 420, "spectralbiclust": 429, "spectralclust": 430, "spectralcoclust": 431, "affinity_propag": 432, "cluster_optics_dbscan": 433, "cluster_optics_xi": 434, "compute_optics_graph": 435, "estimate_bandwidth": 436, "k_mean": 437, "kmeans_plusplu": 438, "mean_shift": 439, "spectral_clust": 440, "ward_tre": 441, "transformedtargetregressor": 443, "make_column_selector": 444, "make_column_transform": 445, "config_context": 446, "ellipticenvelop": 447, "empiricalcovari": 448, "graphicallasso": 449, "graphicallassocv": 450, "mincovdet": 452, "shrunkcovari": 454, "empirical_covari": 455, "graphical_lasso": 456, "ledoit_wolf": 457, "shrunk_covari": 458, "clear_data_hom": 463, "dump_svmlight_fil": 464, "fetch_20newsgroup": 465, "fetch_20newsgroups_vector": 466, "fetch_california_h": 467, "fetch_covtyp": 468, "fetch_kddcup99": 469, "fetch_lfw_pair": 470, "fetch_lfw_peopl": 471, "fetch_olivetti_fac": 472, "fetch_openml": 473, "fetch_rcv1": 474, "fetch_species_distribut": 475, "get_data_hom": 476, "load_breast_canc": 477, "load_diabet": 478, "load_digit": 479, "load_fil": 480, "load_iri": 481, "load_linnerud": 482, "load_sample_imag": [483, 484], "load_svmlight_fil": [485, 486], "load_win": 487, "make_biclust": 488, "make_checkerboard": 490, "make_circl": 491, "make_friedman1": 493, "make_friedman2": 494, "make_friedman3": 495, "make_gaussian_quantil": 496, "make_hastie_10_2": 497, "make_low_rank_matrix": 498, "make_moon": 499, "make_multilabel_classif": 500, "make_s_curv": 502, "make_sparse_coded_sign": 503, "make_sparse_spd_matrix": 504, "make_sparse_uncorrel": 505, "make_spd_matrix": 506, "make_swiss_rol": 507, "dictionarylearn": 508, "factoranalysi": 509, "incrementalpca": 511, "latentdirichletalloc": 513, "minibatchdictionarylearn": 514, "sparsecod": 519, "truncatedsvd": 521, "dict_learn": 522, "dict_learning_onlin": 523, "non_negative_factor": 524, "sparse_encod": 525, "lineardiscriminantanalysi": 526, "quadraticdiscriminantanalysi": 527, "dummyclassifi": 528, "dummyregressor": 529, "adaboostclassifi": 530, "adaboostregressor": 531, "baggingclassifi": 532, "baggingregressor": 533, "extratreesclassifi": 534, "extratreesregressor": 535, "gradientboostingclassifi": 536, "gradientboostingregressor": 537, "histgradientboostingclassifi": 538, "randomforestclassifi": 541, "randomforestregressor": 542, "randomtreesembed": 543, "stackingclassifi": 544, "stackingregressor": 545, "votingregressor": 547, "convergencewarn": 548, "dataconversionwarn": 549, "datadimensionalitywarn": 550, "efficiencywarn": 551, "fitfailedwarn": 552, "notfittederror": 553, "undefinedmetricwarn": 554, "enable_halving_search_cv": 555, "enable_hist_gradient_boost": 556, "enable_iterative_imput": 557, "patchextractor": 560, "extract_patches_2d": 561, "grid_to_graph": 562, "img_to_graph": 563, "reconstruct_from_patches_2d": 564, "countvector": 565, "tfidftransform": 567, "genericunivariateselect": 569, "rfe": 570, "rfecv": 571, "selectfdr": 572, "selectfpr": 573, "selectfw": 575, "selectkbest": 576, "selectpercentil": 577, "selectormixin": 578, "variancethreshold": 580, "chi2": 581, "f_classif": 582, "f_regress": 583, "mutual_info_classif": 584, "mutual_info_regress": 585, "r_regress": 586, "gaussianprocessclassifi": 587, "gaussianprocessregressor": 588, "compoundkernel": 589, "constantkernel": 590, "dotproduct": 591, "expsinesquar": 592, "exponenti": 593, "matern": 596, "pairwisekernel": 597, "rationalquadrat": 600, "sum": 601, "whitekernel": 602, "get_config": 603, "knnimput": 605, "missingind": 606, "simpleimput": 607, "decisionboundarydisplai": 608, "partialdependencedisplai": 609, "partial_depend": 610, "permutation_import": 611, "isotonicregress": 612, "check_increas": 613, "isotonic_regress": 614, "additivechi2sampl": 615, "nystroem": [616, 946], "rbfsampler": 618, "skewedchi2sampl": 619, "kernelridg": 620, "ardregress": 621, "bayesianridg": 622, "elasticnetcv": 624, "gammaregressor": 625, "larscv": 628, "lassocv": 630, "lassolar": 631, "lassolarscv": 632, "lassolars": 633, "logisticregress": 635, "logisticregressioncv": 636, "multitaskelasticnet": 637, "multitaskelasticnetcv": 638, "multitasklasso": 639, "multitasklassocv": 640, "orthogonalmatchingpursuit": 641, "orthogonalmatchingpursuitcv": 642, "passiveaggressiveclassifi": 643, "passiveaggressiveregressor": 644, "poissonregressor": 646, "ransacregressor": 648, "ridgecv": 650, "ridgeclassifi": 651, "ridgeclassifiercv": 652, "sgdclassifi": 653, "sgdoneclasssvm": 654, "sgdregressor": 655, "theilsenregressor": 656, "enet_path": 658, "lars_path": 659, "lars_path_gram": 660, "lasso_path": 661, "orthogonal_mp": 662, "orthogonal_mp_gram": 663, "ridge_regress": 664, "locallylinearembed": 666, "md": [667, 951], "spectralembed": 668, "locally_linear_embed": 670, "smacof": 671, "spectral_embed": 672, "trustworthi": 673, "detcurvedisplai": 675, "distancemetr": 676, "accuracy_scor": 679, "adjusted_mutual_info_scor": 680, "adjusted_rand_scor": 681, "average_precision_scor": 683, "balanced_accuracy_scor": 684, "brier_score_loss": 685, "calinski_harabasz_scor": 686, "check_scor": 687, "class_likelihood_ratio": 688, "classification_report": 689, "contingency_matrix": 690, "pair_confusion_matrix": 691, "cohen_kappa_scor": 692, "completeness_scor": 693, "confusion_matrix": 694, "consensus_scor": 695, "coverage_error": 696, "d2_absolute_error_scor": 697, "d2_pinball_scor": 698, "d2_tweedie_scor": 699, "davies_bouldin_scor": 700, "dcg_score": 701, "det_curv": 702, "explained_variance_scor": 703, "f1_score": 704, "fbeta_scor": 705, "fowlkes_mallows_scor": 706, "get_scor": 707, "get_scorer_nam": 708, "hamming_loss": 709, "hinge_loss": 710, "homogeneity_completeness_v_measur": 711, "homogeneity_scor": 712, "jaccard_scor": 713, "label_ranking_average_precision_scor": 714, "label_ranking_loss": 715, "log_loss": 716, "make_scor": 717, "matthews_corrcoef": 718, "max_error": 719, "mean_absolute_error": 720, "mean_absolute_percentage_error": 721, "mean_gamma_devi": 722, "mean_pinball_loss": 723, "mean_poisson_devi": 724, "mean_squared_error": 725, "mean_squared_log_error": 726, "mean_tweedie_devi": 727, "median_absolute_error": 728, "multilabel_confusion_matrix": 729, "mutual_info_scor": 730, "ndcg_score": 731, "normalized_mutual_info_scor": 732, "additive_chi2_kernel": 733, "chi2_kernel": 734, "cosine_dist": 735, "cosine_similar": 736, "distance_metr": 737, "euclidean_dist": 738, "haversine_dist": 739, "kernel_metr": 740, "laplacian_kernel": 741, "linear_kernel": 742, "manhattan_dist": 743, "nan_euclidean_dist": 744, "paired_cosine_dist": 745, "paired_dist": 746, "paired_euclidean_dist": 747, "paired_manhattan_dist": 748, "pairwise_kernel": 749, "polynomial_kernel": 750, "rbf_kernel": 751, "sigmoid_kernel": 752, "pairwise_dist": 753, "pairwise_distances_argmin": 754, "pairwise_distances_argmin_min": 755, "pairwise_distances_chunk": 756, "precision_recall_curv": 757, "precision_recall_fscore_support": 758, "precision_scor": 759, "r2_score": 760, "rand_scor": 761, "recall_scor": 762, "roc_auc_scor": 763, "roc_curv": 764, "silhouette_sampl": 765, "silhouette_scor": 766, "top_k_accuracy_scor": 767, "v_measure_scor": 768, "zero_one_loss": 769, "bayesiangaussianmixtur": [770, 953], "gaussianmixtur": [771, 953], "groupkfold": 773, "groupshufflesplit": 774, "halvinggridsearchcv": 775, "halvingrandomsearchcv": 776, "kfold": 777, "leaveonegroupout": 778, "leaveoneout": 779, "leavepgroupsout": 780, "leavepout": 781, "parametergrid": 782, "parametersampl": 783, "predefinedsplit": 784, "randomizedsearchcv": 785, "repeatedkfold": 786, "repeatedstratifiedkfold": 787, "shufflesplit": 788, "stratifiedkfold": 790, "stratifiedshufflesplit": 791, "timeseriessplit": 792, "check_cv": 793, "cross_val_predict": 794, "learning_curv": 797, "permutation_test_scor": 798, "train_test_split": 799, "validation_curv": 800, "onevsoneclassifi": [801, 955], "onevsrestclassifi": [802, 955], "outputcodeclassifi": [803, 955], "classifierchain": [804, 955], "multioutputclassifi": [805, 955], "multioutputregressor": [806, 955], "regressorchain": [807, 955], "bernoullinb": 808, "categoricalnb": 809, "complementnb": 810, "gaussiannb": 811, "multinomialnb": 812, "balltre": [813, 957], "kdtree": [814, 957], "kneighborsclassifi": 815, "kneighborsregressor": 816, "kneighborstransform": 817, "kerneldens": 818, "localoutlierfactor": 819, "nearestcentroid": 820, "nearestneighbor": 821, "neighborhoodcomponentsanalysi": 822, "radiusneighborsclassifi": 823, "radiusneighborsregressor": 824, "radiusneighborstransform": 825, "kneighbors_graph": 826, "radius_neighbors_graph": 827, "sort_graph_by_row_valu": 828, "bernoullirbm": 829, "mlpregressor": 831, "make_pipelin": 834, "make_union": 835, "binar": [836, 855, 964, 965], "functiontransform": 837, "kernelcenter": 839, "labelbinar": [840, 965], "labelencod": 841, "multilabelbinar": [844, 965], "ordinalencod": 847, "polynomialfeatur": 848, "splinetransform": 852, "add_dummy_featur": 854, "label_binar": 856, "maxabs_scal": 857, "minmax_scal": 858, "power_transform": 860, "quantile_transform": 861, "robust_scal": 862, "gaussianrandomproject": 864, "sparserandomproject": 865, "johnson_lindenstrauss_min_dim": 866, "labelpropag": 867, "labelspread": 868, "selftrainingclassifi": 869, "set_config": 870, "show_vers": 871, "linearsvr": [873, 969], "nusvc": [874, 969], "nusvr": 875, "oneclasssvm": 876, "l1_min_c": 879, "decisiontreeclassifi": 880, "extratreeclassifi": 882, "extratreeregressor": 883, "export_graphviz": 884, "export_text": 885, "plot_tre": 886, "_safe_index": 888, "arrayfunc": 889, "min_po": 889, "as_float_arrai": 890, "assert_all_finit": 891, "check_x_i": 892, "check_arrai": 893, "check_consistent_length": 894, "check_random_st": 895, "check_scalar": 896, "class_weight": [897, 898], "compute_class_weight": 897, "compute_sample_weight": 898, "discoveri": [900, 901, 902], "all_displai": 900, "all_estim": 901, "all_funct": 902, "estimator_check": [903, 904], "check_estim": 903, "parametrize_with_check": 904, "estimator_html_repr": 905, "extmath": [906, 907, 908, 909, 910, 911], "fast_logdet": 907, "randomized_range_find": 908, "randomized_svd": 909, "safe_sparse_dot": 910, "weighted_mod": 911, "gen_batch": 912, "gen_even_slic": 913, "single_source_shortest_path_length": 914, "metaestim": [916, 917], "available_if": 916, "if_delegate_has_method": 917, "is_multilabel": 918, "type_of_target": 919, "unique_label": 920, "murmurhash3_32": 921, "parallel_backend": 922, "sample_without_replac": 923, "register_parallel_backend": 924, "resampl": 925, "safe_mask": 926, "safe_sqr": 927, "sparsefunc": [929, 930, 931, 932, 933, 934, 935, 1005], "incr_mean_variance_axi": 929, "inplace_column_scal": 930, "inplace_csr_column_scal": 931, "inplace_row_scal": 932, "inplace_swap_column": 933, "inplace_swap_row": 934, "mean_variance_axi": 935, "sparsefuncs_fast": [936, 937], "inplace_csr_row_normalize_l1": 936, "inplace_csr_row_normalize_l2": 937, "check_is_fit": 938, "check_memori": 939, "check_symmetr": 940, "column_or_1d": 941, "has_fit_paramet": 942, "exhaust": 943, "min_resourc": 943, "aggress": [943, 950], "analyz": 943, "cv_results_": 943, "failur": 943, "altern": 943, "brute": [943, 957], "forc": [943, 957], "mark": 944, "nan": 944, "chi": [946, 952], "skew": 946, "tensor": 946, "sketch": 946, "qda": 948, "omp": 950, "ard": 950, "liblinear": 950, "passiv": 950, "scenario": 950, "trade": 950, "off": 950, "which": 950, "consensu": 950, "median": [950, 954], "huber": 950, "extend": 950, "introduct": [951, 980], "modifi": 951, "hessian": 951, "eigenmap": 951, "tangent": 951, "align": 951, "nonmetr": 951, "barn": 951, "hut": 951, "cosin": 952, "similar": [952, 954], "laplacian": 952, "pro": 953, "con": 953, "maxim": 953, "infer": 953, "rule": 954, "cohen": 954, "kappa": 954, "ham": 954, "jaccard": 954, "hing": 954, "matthew": 954, "zero": 954, "brier": 954, "discount": 954, "cumul": 954, "gain": 954, "r\u00b2": 954, "absolut": 954, "logarithm": 954, "percentag": 954, "explain": 954, "pinbal": 954, "d\u00b2": 954, "complement": 956, "bernoulli": [956, 959], "unsupervis": [957, 959, 971, 988, 990], "find": 957, "ball": 957, "leaf_siz": 957, "shrunken": 957, "warm_start": 958, "parametr": 959, "up": 960, "ellipt": 960, "envelop": 960, "isol": 960, "ic": 961, "outlin": 962, "mislead": 962, "strongli": 962, "rang": 964, "whiten": 964, "bin": 964, "lemma": 966, "unlabel": 967, "entri": 967, "id3": 970, "c4": 970, "5": [970, 996], "c5": 970, "cart": 970, "welcom": 972, "talk": 973, "scientif": [973, 983], "framework": 974, "domain": 974, "translat": 974, "roadmap": 975, "thi": 975, "statement": 975, "2018": 975, "architectur": 975, "goal": 975, "subpackag": 975, "mail": 977, "user": [977, 991], "gitter": 977, "who": 978, "j": 978, "morgan": 978, "spotifi": 978, "inria": 978, "betawork": 978, "hug": 978, "evernot": 978, "t\u00e9l\u00e9com": 978, "paristech": 978, "book": 978, "com": 978, "aweb": 978, "yhat": 978, "rangespan": 978, "birchbox": 978, "bestofmedia": 978, "phimeca": 978, "howaboutw": 978, "peerindex": 978, "datarobot": 978, "okcupid": 978, "love": 978, "publica": 978, "machinali": 978, "solido": 978, "infonea": 978, "dataiku": 978, "otto": 978, "zopa": 978, "mar": 978, "bnp": 978, "pariba": 978, "cardif": 978, "section": 980, "convent": 980, "cast": 980, "updat": [980, 1006], "right": 982, "put": 985, "open": 985, "ship": 986, "would": 986, "high": 987, "observ": [987, 988], "solv": [987, 988], "vocabulari": 987, "curs": 987, "iris": 987, "same": 987, "seek": 988, "constrain": 988, "inverse_transform": 988, "setup": 989, "token": 989, "occurr": 989, "languag": 989, "identif": 989, "sentiment": 989, "movi": 989, "cli": 989, "where": 989, "here": 989, "12": 996, "changelog": [996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "11": 996, "9": 996, "8": 996, "7": 996, "6": [996, 1002], "modul": [996, 1004, 1005, 1011], "misc": 996, "4": [996, 1004], "earlier": 996, "13": 997, "14": 998, "15": 999, "16": 1000, "17": 1001, "18": 1002, "last": 1002, "19": 1003, "known": [1004, 1005], "21": 1005, "legend": [1005, 1006, 1007, 1008, 1009, 1010, 1011], "post1": 1006, "websit": 1006, "clear": 1006, "public": 1006, "futurewarn": 1006, "enforc": [1007, 1009]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"SVM Exercise": [[138, "svm-exercise"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Load the data": [[123, "load-the-data"], [50, "load-the-data"], [7, "load-the-data"]], "Data preprocessing": [[123, "data-preprocessing"]], "Fit regression model": [[123, "fit-regression-model"], [288, "fit-regression-model"], [332, "fit-regression-model"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Cross decomposition": [[83, "cross-decomposition"], [164, "cross-decomposition"], [393, "cross-decomposition"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [172, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Plotting the results": [[111, "plotting-the-results"], [109, "plotting-the-results"], [63, "plotting-the-results"]], "Cross-validation on Digits Dataset Exercise": [[136, "cross-validation-on-digits-dataset-exercise"]], "Computation times": [[107, "computation-times"], [92, "computation-times"], [133, "computation-times"], [82, "computation-times"], [139, "computation-times"], [86, "computation-times"], [75, "computation-times"], [22, "computation-times"], [35, "computation-times"], [67, "computation-times"], [15, "computation-times"], [28, "computation-times"], [341, "computation-times"], [319, "computation-times"], [336, "computation-times"], [304, "computation-times"], [296, "computation-times"], [311, "computation-times"], [348, "computation-times"], [290, "computation-times"], [272, "computation-times"], [215, "computation-times"], [248, "computation-times"], [239, "computation-times"], [275, "computation-times"], [223, "computation-times"], [173, "computation-times"], [170, "computation-times"], [163, "computation-times"], [159, "computation-times"], [147, "computation-times"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Concluding remarks": [[109, "concluding-remarks"], [4, "concluding-remarks"], [221, "concluding-remarks"]], "Combine predictors using stacking": [[129, "combine-predictors-using-stacking"]], "Download the dataset": [[129, "download-the-dataset"]], "Make pipeline to preprocess the data": [[129, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[129, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[129, "measure-and-plot-the-results"]], "The Digit Dataset": [[88, "the-digit-dataset"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[119, "model-comparison"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "Plot the decision boundaries of a VotingClassifier": [[130, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "Compare cross decomposition methods": [[84, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[84, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[84, "canonical-symmetric-pls"]], "Transform data": [[84, "transform-data"]], "Scatter plot of scores": [[84, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[84, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[84, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[84, "cca-pls-mode-b-with-symmetric-deflation"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot class probabilities calculated by the VotingClassifier": [[131, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Early stopping of Gradient Boosting": [[120, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[120, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[120, "compare-fit-times-with-and-without-early-stopping"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Dataset examples": [[87, "dataset-examples"], [164, "dataset-examples"]], "The Iris Dataset": [[89, "the-iris-dataset"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Principal Component Regression vs Partial Least Squares Regression": [[85, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[85, "the-data"]], "Projection on one component and predictive power": [[85, "projection-on-one-component-and-predictive-power"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Cross-validation on diabetes Dataset Exercise": [[135, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[135, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[135, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[135, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Comparing random forests and the multi-output meta estimator": [[128, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[71, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[71, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[71, "caching-transformers-within-a-pipeline"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Ensemble methods": [[108, "ensemble-methods"], [164, "ensemble-methods"], [397, "ensemble-methods"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Ledoit-Wolf vs OAS estimation": [[78, "ledoit-wolf-vs-oas-estimation"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Generate sample data": [[96, "generate-sample-data"], [77, "generate-sample-data"], [97, "generate-sample-data"], [62, "generate-sample-data"], [38, "generate-sample-data"], [288, "generate-sample-data"], [332, "generate-sample-data"], [231, "generate-sample-data"], [269, "generate-sample-data"], [142, "generate-sample-data"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "Plot results": [[96, "plot-results"], [77, "plot-results"], [97, "plot-results"], [8, "plot-results"], [49, "plot-results"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[77, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[77, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[77, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [217, "dataset-preparation"]], "Decomposition": [[95, "decomposition"], [93, "decomposition"], [164, "decomposition"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Incremental PCA": [[99, "incremental-pca"], [395, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Plot randomly generated classification dataset": [[90, "plot-randomly-generated-classification-dataset"]], "Effect of transforming the targets in regression model": [[74, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[74, "synthetic-example"]], "Real-world data set": [[74, "real-world-data-set"]], "Covariance estimation": [[76, "covariance-estimation"], [164, "covariance-estimation"], [392, "covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[79, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[79, null], [956, null], [956, null], [956, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [948, null], [943, null], [943, null], [964, null], [964, null], [970, null], [970, null], [946, null], [969, null], [966, null], [966, null], [966, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [958, null], [952, null], [952, null], [960, null], [960, null], [960, null], [960, null], [962, null], [959, null], [957, null], [957, null], [957, null], [955, null], [955, null], [955, null], [951, null], [951, null], [951, null], [951, null], [951, null], [951, null], [951, null], [951, null], [968, null], [968, null], [947, null], [261, null], [262, null], [168, null], [361, null], [399, null], [387, null], [387, null], [387, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [398, null], [360, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [392, null], [392, null], [392, null], [392, null], [388, null], [394, null], [394, null]], "Generate data": [[79, "generate-data"], [47, "generate-data"], [66, "generate-data"], [295, "generate-data"], [190, "generate-data"]], "Comparison of results": [[79, "comparison-of-results"]], "Sparse inverse covariance estimation": [[81, "sparse-inverse-covariance-estimation"]], "Generate the data": [[81, "generate-the-data"], [65, "generate-the-data"], [63, "generate-the-data"]], "Estimate the covariance": [[81, "estimate-the-covariance"]], "Plot the results": [[81, "plot-the-results"], [132, "plot-the-results"], [50, "plot-the-results"], [162, "plot-the-results"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Pipelining: chaining a PCA and a logistic regression": [[72, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[73, "concatenating-multiple-feature-extraction-methods"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Plot individual and voting regression predictions": [[132, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[132, "training-classifiers"]], "Making predictions": [[132, "making-predictions"]], "Beta-divergence loss functions": [[94, "beta-divergence-loss-functions"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [395, "sparse-coding-with-a-precomputed-dictionary"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "References": [[113, "references"], [80, "references"], [5, null], [27, "references"], [11, "references"], [25, "references"], [967, null], [967, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [944, "references"], [964, null], [961, null], [289, "references"], [256, null], [172, "references"], [184, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [361, null], [361, null], [361, null], [363, null], [363, null], [363, null], [363, null], [363, null], [398, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [400, "references"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Hashing feature transformation using Totally Random Trees": [[127, "hashing-feature-transformation-using-totally-random-trees"]], "Tutorial exercises": [[134, "tutorial-exercises"], [164, "tutorial-exercises"]], "IsolationForest example": [[125, "isolationforest-example"]], "Robust vs Empirical covariance estimate": [[80, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[80, "minimum-covariance-determinant-estimator"]], "Evaluation": [[80, "evaluation"], [295, "evaluation"]], "Monotonic Constraints": [[126, "monotonic-constraints"], [397, "monotonic-constraints"]], "Plot randomly generated multilabel dataset": [[91, "plot-randomly-generated-multilabel-dataset"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Classifier comparison": [[31, "classifier-comparison"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [66, "compute-clustering"], [66, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Column Transformer with Mixed Types": [[70, "column-transformer-with-mixed-types"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Column Transformer with Heterogeneous Data Sources": [[69, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[69, "newsgroups-dataset"]], "Creating transformers": [[69, "creating-transformers"]], "Classification pipeline": [[69, "classification-pipeline"]], "Hierarchical clustering: structured vs unstructured ward": [[66, "hierarchical-clustering-structured-vs-unstructured-ward"]], "Plot result": [[66, "plot-result"], [66, "id2"], [62, "plot-result"], [38, "plot-result"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[66, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[59, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"], [180, "plot"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "An example of K-Means++ initialization": [[58, "an-example-of-k-means-initialization"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Prediction Latency": [[10, "prediction-latency"], [353, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Empirical evaluation of the impact of k-means initialization": [[60, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Demonstration of k-means assumptions": [[56, "demonstration-of-k-means-assumptions"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "A demo of K-Means clustering on the handwritten digits data": [[57, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[57, "load-the-dataset"]], "Define our evaluation benchmark": [[57, "define-our-evaluation-benchmark"]], "Run the benchmark": [[57, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[57, "visualize-the-results-on-pca-reduced-data"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Spectral clustering for image segmentation": [[65, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[65, "plotting-four-circles"]], "Plotting two circles": [[65, "plotting-two-circles"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Dataset": [[27, "dataset"], [25, "dataset"], [262, "dataset"], [185, "dataset"]], "Calibration curves": [[27, "calibration-curves"], [25, "calibration-curves"], [388, "calibration-curves"]], "Pipelines and composite estimators": [[68, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"], [391, "pipelines-and-composite-estimators"]], "Biclustering": [[18, "biclustering"], [164, "biclustering"], [387, "biclustering"], [362, "biclustering"]], "Comparing different hierarchical linkage methods on toy datasets": [[61, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[62, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[62, "compute-clustering-with-meanshift"]], "Inductive Clustering": [[55, "inductive-clustering"]], "Demo of OPTICS clustering algorithm": [[64, "demo-of-optics-clustering-algorithm"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Clustering": [[36, "clustering"], [164, "clustering"], [390, "clustering"]], "K-means Clustering": [[45, "k-means-clustering"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Feature agglomeration": [[51, "feature-agglomeration"], [988, "feature-agglomeration"], [971, "feature-agglomeration"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [313, "data-generation"], [246, "data-generation"], [155, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[63, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Compute clustering with KMeans": [[63, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[63, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[63, "establishing-parity-between-clusters"]], "Classification": [[29, "classification"], [32, "classification"], [950, "classification"], [987, "classification"], [970, "classification"], [969, "classification"], [958, "classification"], [957, "id4"], [968, "classification"], [164, "classification"], [397, "classification"], [397, "id18"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [956, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [340, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [185, "conclusion"]], "About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [996, "authors"], [996, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [379, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [325, "visualization"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Calibration": [[23, "calibration"], [164, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [175, "generate-synthetic-dataset"], [175, "id1"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Version 1.0.2": [[1009, "version-1-0-2"]], "Changelog": [[1009, "changelog"], [1009, "id1"], [1009, "id7"], [1001, "changelog"], [1001, "id1"], [1010, "changelog"], [1010, "id1"], [1010, "id7"], [1000, "changelog"], [1000, "id1"], [996, "changelog"], [996, "id1"], [996, "id3"], [996, "id6"], [996, "id9"], [996, "id12"], [996, "id14"], [996, "id16"], [996, "id18"], [996, "id19"], [999, "changelog"], [1005, "changelog"], [1005, "id1"], [1005, "id2"], [1005, "id7"], [1007, "changelog"], [1007, "id1"], [1007, "id4"], [1011, "changelog"], [1002, "changelog"], [1002, "id1"], [1002, "id2"], [1003, "changelog"], [1003, "id1"], [1008, "changelog"], [1008, "id1"], [1008, "id4"], [1006, "changelog"], [1006, "id1"], [1006, "id4"], [998, "changelog"], [1004, "changelog"], [1004, "id1"], [1004, "id5"], [1004, "id10"], [1004, "id23"], [997, "changelog"], [997, "id1"]], "sklearn.cluster": [[1009, "sklearn-cluster"], [1009, "id2"], [1009, "id9"], [1010, "sklearn-cluster"], [1010, "id8"], [1005, "sklearn-cluster"], [1005, "id8"], [1007, "sklearn-cluster"], [1007, "id2"], [1007, "id5"], [1011, "sklearn-cluster"], [1008, "sklearn-cluster"], [1006, "sklearn-cluster"], [1006, "id5"], [1004, "sklearn-cluster"], [1004, "id2"], [1004, "id11"], [1004, "id24"]], "sklearn.datasets": [[1009, "sklearn-datasets"], [1009, "id10"], [1010, "sklearn-datasets"], [1010, "id9"], [1005, "sklearn-datasets"], [1005, "id10"], [1007, "sklearn-datasets"], [1011, "sklearn-datasets"], [1008, "sklearn-datasets"], [1006, "sklearn-datasets"], [1004, "sklearn-datasets"], [1004, "id13"], [1004, "id27"]], "sklearn.decomposition": [[1009, "sklearn-decomposition"], [1009, "id11"], [1010, "sklearn-decomposition"], [1010, "id10"], [1005, "sklearn-decomposition"], [1005, "id11"], [1007, "sklearn-decomposition"], [1007, "id6"], [1011, "sklearn-decomposition"], [1008, "sklearn-decomposition"], [1008, "id7"], [1006, "sklearn-decomposition"], [1004, "sklearn-decomposition"], [1004, "id4"], [1004, "id14"], [1004, "id28"]], "sklearn.ensemble": [[1009, "sklearn-ensemble"], [1009, "id3"], [1009, "id12"], [1010, "sklearn-ensemble"], [1005, "sklearn-ensemble"], [1005, "id12"], [1007, "sklearn-ensemble"], [1007, "id7"], [1011, "sklearn-ensemble"], [1008, "sklearn-ensemble"], [1008, "id8"], [1006, "sklearn-ensemble"], [1004, "sklearn-ensemble"], [1004, "id29"]], "sklearn.feature_selection": [[1009, "sklearn-feature-selection"], [1009, "id14"], [1010, "sklearn-feature-selection"], [1010, "id2"], [1010, "id11"], [1007, "sklearn-feature-selection"], [1011, "sklearn-feature-selection"], [1008, "sklearn-feature-selection"], [1006, "sklearn-feature-selection"], [1004, "sklearn-feature-selection"]], "sklearn.impute": [[1009, "sklearn-impute"], [1010, "sklearn-impute"], [1010, "id12"], [1005, "sklearn-impute"], [1005, "id13"], [1007, "sklearn-impute"], [1008, "sklearn-impute"], [1006, "sklearn-impute"], [1006, "id6"], [1004, "sklearn-impute"], [1004, "id31"]], "sklearn.linear_model": [[1009, "sklearn-linear-model"], [1009, "id4"], [1009, "id15"], [1010, "sklearn-linear-model"], [1010, "id13"], [1005, "sklearn-linear-model"], [1005, "id15"], [1007, "sklearn-linear-model"], [1007, "id9"], [1011, "sklearn-linear-model"], [1008, "sklearn-linear-model"], [1008, "id10"], [1006, "sklearn-linear-model"], [1004, "sklearn-linear-model"], [1004, "id16"], [1004, "id32"]], "sklearn.manifold": [[1009, "sklearn-manifold"], [1009, "id16"], [1010, "sklearn-manifold"], [1010, "id14"], [1005, "sklearn-manifold"], [1007, "sklearn-manifold"], [1011, "sklearn-manifold"], [1008, "sklearn-manifold"], [1006, "sklearn-manifold"], [1004, "sklearn-manifold"]], "sklearn.metrics": [[1009, "sklearn-metrics"], [1009, "id17"], [1010, "sklearn-metrics"], [1010, "id3"], [1010, "id15"], [1005, "sklearn-metrics"], [1005, "id4"], [1005, "id16"], [1007, "sklearn-metrics"], [1007, "id10"], [1011, "sklearn-metrics"], [1008, "sklearn-metrics"], [1008, "id2"], [1008, "id11"], [1006, "sklearn-metrics"], [1006, "id2"], [1006, "id8"], [1004, "sklearn-metrics"], [1004, "id17"], [1004, "id33"]], "sklearn.multiclass": [[1009, "sklearn-multiclass"], [1010, "sklearn-multiclass"], [1005, "sklearn-multiclass"], [1008, "sklearn-multiclass"]], "sklearn.neighbors": [[1009, "sklearn-neighbors"], [1009, "id5"], [1009, "id18"], [1010, "sklearn-neighbors"], [1005, "sklearn-neighbors"], [1005, "id5"], [1005, "id17"], [1011, "sklearn-neighbors"], [1008, "sklearn-neighbors"], [1006, "sklearn-neighbors"], [1006, "id11"], [1004, "sklearn-neighbors"], [1004, "id7"], [1004, "id18"], [1004, "id36"]], "sklearn.preprocessing": [[1009, "sklearn-preprocessing"], [1009, "id20"], [1010, "sklearn-preprocessing"], [1010, "id4"], [1010, "id16"], [1005, "sklearn-preprocessing"], [1005, "id18"], [1007, "sklearn-preprocessing"], [1011, "sklearn-preprocessing"], [1008, "sklearn-preprocessing"], [1008, "id14"], [1006, "sklearn-preprocessing"], [1006, "id12"], [1004, "sklearn-preprocessing"], [1004, "id19"], [1004, "id37"]], "sklearn.tree": [[1009, "sklearn-tree"], [1009, "id22"], [1010, "sklearn-tree"], [1010, "id5"], [1010, "id17"], [1005, "sklearn-tree"], [1005, "id19"], [1007, "sklearn-tree"], [1011, "sklearn-tree"], [1008, "sklearn-tree"], [1008, "id16"], [1006, "sklearn-tree"], [1004, "sklearn-tree"]], "sklearn.utils": [[1009, "sklearn-utils"], [1009, "id6"], [1009, "id23"], [1010, "sklearn-utils"], [1010, "id18"], [1005, "sklearn-utils"], [1007, "sklearn-utils"], [1007, "id12"], [1011, "sklearn-utils"], [1008, "sklearn-utils"], [1008, "id17"], [1006, "sklearn-utils"], [1006, "id14"], [1004, "sklearn-utils"], [1004, "id20"], [1004, "id39"]], "Version 1.0.1": [[1009, "version-1-0-1"]], "Fixed models": [[1009, "fixed-models"]], "sklearn.calibration": [[1009, "sklearn-calibration"], [1009, "id8"], [1010, "sklearn-calibration"], [1005, "sklearn-calibration"], [1011, "sklearn-calibration"], [1008, "sklearn-calibration"], [1006, "sklearn-calibration"]], "sklearn.gaussian_process": [[1009, "sklearn-gaussian-process"], [1010, "sklearn-gaussian-process"], [1007, "sklearn-gaussian-process"], [1011, "sklearn-gaussian-process"], [1008, "sklearn-gaussian-process"], [1008, "id9"], [1006, "sklearn-gaussian-process"], [1004, "sklearn-gaussian-process"]], "sklearn.feature_extraction": [[1009, "sklearn-feature-extraction"], [1009, "id13"], [1010, "sklearn-feature-extraction"], [1005, "sklearn-feature-extraction"], [1007, "sklearn-feature-extraction"], [1007, "id8"], [1008, "sklearn-feature-extraction"], [1006, "sklearn-feature-extraction"], [1004, "sklearn-feature-extraction"], [1004, "id15"], [1004, "id30"]], "sklearn.pipeline": [[1009, "sklearn-pipeline"], [1009, "id19"], [1010, "sklearn-pipeline"], [1005, "sklearn-pipeline"], [1007, "sklearn-pipeline"], [1011, "sklearn-pipeline"], [1008, "sklearn-pipeline"], [1006, "sklearn-pipeline"], [1004, "sklearn-pipeline"]], "sklearn.svm": [[1009, "sklearn-svm"], [1009, "id21"], [1010, "sklearn-svm"], [1005, "sklearn-svm"], [1007, "sklearn-svm"], [1011, "sklearn-svm"], [1008, "sklearn-svm"], [1006, "sklearn-svm"], [1004, "sklearn-svm"], [1004, "id38"]], "Miscellaneous": [[1009, "miscellaneous"], [1005, "miscellaneous"], [1007, "miscellaneous"], [1007, "id13"], [1008, "miscellaneous"], [1006, "miscellaneous"], [1004, "miscellaneous"], [1004, "id40"], [224, "miscellaneous"], [164, "miscellaneous"], [389, "miscellaneous"]], "Version 1.0.0": [[1009, "version-1-0-0"]], "Legend for changelogs": [[1009, "legend-for-changelogs"], [1010, "legend-for-changelogs"], [1005, "legend-for-changelogs"], [1007, "legend-for-changelogs"], [1011, "legend-for-changelogs"], [1008, "legend-for-changelogs"], [1006, "legend-for-changelogs"]], "Minimal dependencies": [[1009, "minimal-dependencies"], [1010, "minimal-dependencies"]], "Enforcing keyword-only arguments": [[1009, "enforcing-keyword-only-arguments"], [1007, "enforcing-keyword-only-arguments"]], "Changed models": [[1009, "changed-models"], [1010, "changed-models"], [1010, "id6"], [1005, "changed-models"], [1005, "id6"], [1007, "changed-models"], [1007, "id3"], [1011, "changed-models"], [1003, "changed-models"], [1008, "changed-models"], [1006, "changed-models"], [1004, "changed-models"], [1004, "id9"], [1004, "id22"]], "sklearn.base": [[1009, "sklearn-base"], [1010, "sklearn-base"], [1005, "sklearn-base"], [1011, "sklearn-base"], [1008, "sklearn-base"], [1006, "sklearn-base"]], "sklearn.compose": [[1009, "sklearn-compose"], [1010, "sklearn-compose"], [1005, "sklearn-compose"], [1005, "id9"], [1007, "sklearn-compose"], [1008, "sklearn-compose"], [1008, "id5"], [1006, "sklearn-compose"], [1004, "sklearn-compose"], [1004, "id3"], [1004, "id6"], [1004, "id12"], [1004, "id25"]], "sklearn.covariance": [[1009, "sklearn-covariance"], [1010, "sklearn-covariance"], [1008, "sklearn-covariance"], [1004, "sklearn-covariance"], [1004, "id26"]], "sklearn.dummy": [[1009, "sklearn-dummy"], [1010, "sklearn-dummy"], [1005, "sklearn-dummy"], [1006, "sklearn-dummy"], [1004, "sklearn-dummy"]], "sklearn.inspection": [[1009, "sklearn-inspection"], [1010, "sklearn-inspection"], [1005, "sklearn-inspection"], [1005, "id3"], [1005, "id14"], [1007, "sklearn-inspection"], [1007, "id11"], [1008, "sklearn-inspection"], [1006, "sklearn-inspection"], [1006, "id7"]], "sklearn.kernel_approximation": [[1009, "sklearn-kernel-approximation"], [1010, "sklearn-kernel-approximation"], [1011, "sklearn-kernel-approximation"], [1008, "sklearn-kernel-approximation"], [1006, "sklearn-kernel-approximation"]], "sklearn.mixture": [[1009, "sklearn-mixture"], [1010, "sklearn-mixture"], [1005, "sklearn-mixture"], [1004, "sklearn-mixture"], [1004, "id34"]], "sklearn.model_selection": [[1009, "sklearn-model-selection"], [1010, "sklearn-model-selection"], [1005, "sklearn-model-selection"], [1007, "sklearn-model-selection"], [1011, "sklearn-model-selection"], [1008, "sklearn-model-selection"], [1008, "id12"], [1006, "sklearn-model-selection"], [1006, "id9"], [1006, "id13"], [1004, "sklearn-model-selection"], [1004, "id35"]], "sklearn.naive_bayes": [[1009, "sklearn-naive-bayes"], [1007, "sklearn-naive-bayes"], [1011, "sklearn-naive-bayes"], [1008, "sklearn-naive-bayes"], [1006, "sklearn-naive-bayes"], [1006, "id10"], [1004, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1009, "sklearn-neural-network"], [1010, "sklearn-neural-network"], [1005, "sklearn-neural-network"], [1007, "sklearn-neural-network"], [1008, "sklearn-neural-network"], [1006, "sklearn-neural-network"], [1004, "sklearn-neural-network"]], "Code and Documentation Contributors": [[1009, "code-and-documentation-contributors"], [1010, "code-and-documentation-contributors"], [1005, "code-and-documentation-contributors"], [1007, "code-and-documentation-contributors"], [1011, "code-and-documentation-contributors"], [1003, "code-and-documentation-contributors"], [1003, "id9"], [1008, "code-and-documentation-contributors"], [1006, "code-and-documentation-contributors"], [1004, "code-and-documentation-contributors"], [1004, "id8"], [1004, "id21"], [1004, "id41"]], "Release History": [[994, "release-history"]], "Version 0.17.1": [[1001, "version-0-17-1"]], "Bug fixes": [[1001, "bug-fixes"], [1001, "id2"], [1000, "bug-fixes"], [1000, "id2"], [999, "bug-fixes"], [999, "id1"], [999, "id2"], [1002, "bug-fixes"], [1002, "id4"], [1003, "bug-fixes"], [1003, "id3"]], "Version 0.17": [[1001, "version-0-17"]], "New features": [[1001, "new-features"], [1000, "new-features"], [999, "new-features"], [1002, "new-features"], [1003, "new-features"]], "Enhancements": [[1001, "enhancements"], [1000, "enhancements"], [999, "enhancements"], [1002, "enhancements"], [1002, "id3"], [1003, "enhancements"], [1003, "id2"]], "API changes summary": [[1001, "api-changes-summary"], [1000, "api-changes-summary"], [996, "api-changes-summary"], [996, "id4"], [996, "id7"], [996, "id10"], [999, "api-changes-summary"], [1002, "api-changes-summary"], [1002, "id5"], [1003, "api-changes-summary"], [998, "api-changes-summary"], [997, "api-changes-summary"]], "Code Contributors": [[1001, "code-contributors"], [1000, "code-contributors"], [1002, "code-contributors"], [1002, "id6"]], "Version 1.1.3": [[1010, "version-1-1-3"]], "Version 1.1.2": [[1010, "version-1-1-2"]], "Version 1.1.1": [[1010, "version-1-1-1"]], "Version 1.1.0": [[1010, "version-1-1-0"]], "sklearn.cross_decomposition": [[1010, "sklearn-cross-decomposition"], [1008, "sklearn-cross-decomposition"], [1008, "id6"], [1006, "sklearn-cross-decomposition"]], "sklearn.discriminant_analysis": [[1010, "sklearn-discriminant-analysis"], [1005, "sklearn-discriminant-analysis"], [1011, "sklearn-discriminant-analysis"], [1008, "sklearn-discriminant-analysis"], [1004, "sklearn-discriminant-analysis"]], "sklearn.isotonic": [[1010, "sklearn-isotonic"], [1005, "sklearn-isotonic"], [1008, "sklearn-isotonic"], [1006, "sklearn-isotonic"], [1004, "sklearn-isotonic"]], "sklearn.random_projection": [[1010, "sklearn-random-projection"]], "Version 0.16.1": [[1000, "version-0-16-1"]], "Version 0.16": [[1000, "version-0-16"]], "Highlights": [[1000, "highlights"], [996, "highlights"], [999, "highlights"], [1003, "highlights"], [1004, "highlights"]], "Documentation improvements": [[1000, "documentation-improvements"], [999, "documentation-improvements"]], "Version 0.12.1": [[996, "version-0-12-1"]], "People": [[996, "people"], [996, "id2"], [996, "id5"], [996, "id8"], [996, "id11"], [996, "id13"], [996, "id15"], [996, "id17"], [999, "people"], [998, "people"], [997, "people"], [997, "id2"]], "Version 0.12": [[996, "version-0-12"]], "Version 0.11": [[996, "version-0-11"]], "Other changes": [[996, "other-changes"]], "Version 0.10": [[996, "version-0-10"]], "Version 0.9": [[996, "version-0-9"]], "Version 0.8": [[996, "version-0-8"]], "Version 0.7": [[996, "version-0-7"]], "Version 0.6": [[996, "version-0-6"]], "Version 0.5": [[996, "version-0-5"]], "New classes": [[996, "new-classes"]], "Documentation": [[996, "documentation"], [366, "documentation"]], "Fixes": [[996, "fixes"]], "Examples": [[996, "examples"], [967, null], [967, null], [971, null], [971, null], [971, null], [164, "examples"], [361, null], [361, "examples"], [399, null], [399, null], [355, "examples"], [394, null], [394, null]], "External dependencies": [[996, "external-dependencies"]], "Removed modules": [[996, "removed-modules"]], "Misc": [[996, "misc"]], "Version 0.4": [[996, "version-0-4"]], "Earlier versions": [[996, "earlier-versions"]], "Version 0.15.2": [[999, "version-0-15-2"]], "Version 0.15.1": [[999, "version-0-15-1"]], "Version 0.15": [[999, "version-0-15"]], "Version 0.21.3": [[1005, "version-0-21-3"]], "Version 0.21.2": [[1005, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1005, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1005, "version-0-21-1"]], "Version 0.21.0": [[1005, "version-0-21-0"]], "Known Major Bugs": [[1005, "known-major-bugs"], [1004, "known-major-bugs"]], "sklearn.externals": [[1005, "sklearn-externals"]], "sklearn.multioutput": [[1005, "sklearn-multioutput"], [1007, "sklearn-multioutput"], [1011, "sklearn-multioutput"], [1008, "sklearn-multioutput"], [1008, "id13"], [1006, "sklearn-multioutput"], [1004, "sklearn-multioutput"]], "Multiple modules": [[1005, "multiple-modules"], [1004, "multiple-modules"]], "Changes to estimator checks": [[1005, "changes-to-estimator-checks"], [1006, "changes-to-estimator-checks"], [1004, "changes-to-estimator-checks"]], "Version 0.23.2": [[1007, "version-0-23-2"]], "Version 0.23.1": [[1007, "version-0-23-1"]], "Version 0.23.0": [[1007, "version-0-23-0"]], "sklearn.semi_supervised": [[1007, "sklearn-semi-supervised"], [1008, "sklearn-semi-supervised"], [1008, "id3"], [1008, "id15"], [1006, "sklearn-semi-supervised"]], "Version 1.2.0": [[1011, "version-1-2-0"]], "Changes impacting all modules": [[1011, "changes-impacting-all-modules"]], "Version 0.18.2": [[1002, "version-0-18-2"]], "Last release with Python 2.6 support": [[1002, null], [1002, null]], "Version 0.18.1": [[1002, "version-0-18-1"]], "Version 0.18": [[1002, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1002, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1003, "version-0-19-2"]], "Related changes": [[1003, "related-changes"]], "Version 0.19.1": [[1003, "version-0-19-1"]], "API changes": [[1003, "api-changes"]], "Version 0.19": [[1003, "version-0-19"]], "Version 0.24.2": [[1008, "version-0-24-2"]], "feature_extraction": [[1008, "feature-extraction"]], "Version 0.24.1": [[1008, "version-0-24-1"]], "Packaging": [[1008, "packaging"]], "Version 0.24.0": [[1008, "version-0-24-0"]], "sklearn.exceptions": [[1008, "sklearn-exceptions"]], "Version 0.22.2.post1": [[1006, "version-0-22-2-post1"]], "Version 0.22.1": [[1006, "version-0-22-1"]], "Version 0.22.0": [[1006, "version-0-22-0"]], "Website update": [[1006, "website-update"]], "Clear definition of the public API": [[1006, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1006, "deprecations-using-futurewarning-from-now-on"]], "Version 0.14": [[998, "version-0-14"]], "Version 0.20.4": [[1004, "version-0-20-4"]], "Version 0.20.3": [[1004, "version-0-20-3"]], "Version 0.20.2": [[1004, "version-0-20-2"]], "Version 0.20.1": [[1004, "version-0-20-1"]], "Version 0.20.0": [[1004, "version-0-20-0"]], "Version 0.13.1": [[997, "version-0-13-1"]], "Version 0.13": [[997, "version-0-13"]], "New Estimator Classes": [[997, "new-estimator-classes"]], "sklearn.utils.safe_sqr": [[927, "sklearn-utils-safe-sqr"]], "External Resources, Videos and Talks": [[973, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[973, "new-to-scientific-python"]], "External Tutorials": [[973, "external-tutorials"]], "Videos": [[973, "videos"]], "Naive Bayes": [[956, "naive-bayes"]], "Multinomial Naive Bayes": [[956, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[956, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[956, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[956, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[956, "out-of-core-naive-bayes-model-fitting"]], "Semi-supervised learning": [[967, "semi-supervised-learning"], [313, "semi-supervised-learning"]], "Unlabeled entries in y": [[967, null]], "Self Training": [[967, "self-training"]], "Label Propagation": [[967, "label-propagation"]], "Related Projects": [[974, "related-projects"]], "Interoperability and framework enhancements": [[974, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[974, "other-estimators-and-tasks"]], "Statistical learning with Python": [[974, "statistical-learning-with-python"]], "Recommendation Engine packages": [[974, "recommendation-engine-packages"]], "Domain specific packages": [[974, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[974, "translations-of-scikit-learn-documentation"]], "Validation curves: plotting scores to evaluate models": [[949, "validation-curves-plotting-scores-to-evaluate-models"]], "Examples:": [[949, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [948, null], [948, null], [948, null], [943, null], [943, null], [943, null], [964, null], [964, null], [970, null], [970, null], [970, null], [970, null], [946, null], [946, null], [969, null], [969, null], [969, null], [969, null], [969, null], [969, null], [954, null], [954, null], [954, null], [954, null], [954, null], [958, null], [958, null], [961, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [962, null], [953, null], [953, null], [953, null], [953, null], [959, null], [957, null], [957, null], [957, null], [957, null], [957, null], [993, null], [955, null], [951, null], [968, null], [968, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [399, null], [399, null], [399, null], [399, null], [387, null], [387, null], [396, null], [380, null], [391, null], [391, null], [391, null], [391, null], [391, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [360, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [390, null], [392, null], [392, null], [392, null], [392, null], [392, null], [392, null], [393, null], [388, null]], "Validation curve": [[949, "validation-curve"]], "Learning curve": [[949, "learning-curve"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[930, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "Linear Models": [[950, "linear-models"]], "Ordinary Least Squares": [[950, "ordinary-least-squares"]], "Non-Negative Least Squares": [[950, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[950, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[950, "ridge-regression-and-classification"]], "Regression": [[950, "regression"], [970, "regression"], [969, "regression"], [958, "regression"], [968, "regression"], [397, "regression"], [397, "id17"]], "Ridge Complexity": [[950, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[950, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Lasso": [[950, "lasso"], [180, "lasso"]], "Setting regularization parameter": [[950, "setting-regularization-parameter"]], "Using cross-validation": [[950, "using-cross-validation"]], "Information-criteria based model selection": [[950, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[950, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[950, "multi-task-lasso"]], "Elastic-Net": [[950, "elastic-net"]], "Multi-task Elastic-Net": [[950, "multi-task-elastic-net"]], "Least Angle Regression": [[950, "least-angle-regression"]], "LARS Lasso": [[950, "lars-lasso"]], "Mathematical formulation": [[950, "mathematical-formulation"], [970, "mathematical-formulation"], [969, "mathematical-formulation"], [958, "mathematical-formulation"], [957, "mathematical-formulation"], [968, "mathematical-formulation"], [397, "mathematical-formulation"], [387, "mathematical-formulation"], [387, "id3"], [390, "mathematical-formulation"], [390, "id12"], [390, "id19"], [390, "id29"], [390, "id33"]], "Orthogonal Matching Pursuit (OMP)": [[950, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[950, "bayesian-regression"]], "Bayesian Ridge Regression": [[950, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[950, "automatic-relevance-determination-ard"]], "Logistic regression": [[950, "logistic-regression"]], "Binary Case": [[950, "binary-case"]], "Multinomial Case": [[950, "multinomial-case"]], "Solvers": [[950, "solvers"]], "Differences from liblinear:": [[950, "liblinear-differences"]], "Generalized Linear Models": [[950, "generalized-linear-models"], [164, "generalized-linear-models"], [174, "generalized-linear-models"]], "Usage": [[950, "usage"], [397, "usage"], [397, "id26"], [397, "id31"], [397, "id32"], [397, "id34"], [361, "usage"], [361, "id2"], [391, "usage"], [391, "id1"], [388, "usage"]], "Practical considerations": [[950, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[950, "stochastic-gradient-descent-sgd"]], "Perceptron": [[950, "perceptron"]], "Passive Aggressive Algorithms": [[950, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[950, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[950, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[950, null]], "RANSAC: RANdom SAmple Consensus": [[950, "ransac-random-sample-consensus"]], "Details of the algorithm": [[950, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[950, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[950, "theoretical-considerations"]], "Huber Regression": [[950, "huber-regression"]], "Notes": [[950, "notes"], [391, "notes"], [355, "notes"]], "Quantile Regression": [[950, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[950, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Imputation of missing values": [[944, "imputation-of-missing-values"], [964, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[944, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[944, "univariate-feature-imputation"]], "Multivariate feature imputation": [[944, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[944, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[944, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[944, "nearest-neighbors-imputation"]], "Marking imputed values": [[944, "marking-imputed-values"]], "Estimators that handle NaN values": [[944, "estimators-that-handle-nan-values"]], "Supervised learning": [[976, "supervised-learning"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[933, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "Linear and Quadratic Discriminant Analysis": [[948, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[948, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[948, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[948, "qda"]], "LDA": [[948, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[948, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[948, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[948, "estimation-algorithms"]], "A tutorial on statistical-learning for scientific data processing": [[983, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[983, null]], "Tuning the hyper-parameters of an estimator": [[943, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[943, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[943, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[943, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[943, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[943, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[943, "choosing-a-resource"]], "Exhausting the available resources": [[943, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[943, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[943, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[943, "tips-for-parameter-search"]], "Specifying an objective metric": [[943, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[943, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[943, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[943, "model-selection-development-and-evaluation"]], "Parallelism": [[943, "parallelism"], [354, "parallelism"]], "Robustness to failure": [[943, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[943, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[943, "model-specific-cross-validation"]], "Information Criterion": [[943, "information-criterion"]], "Out of Bag Estimates": [[943, "out-of-bag-estimates"]], "Welcome to scikit-learn": [[972, "welcome-to-scikit-learn"]], "Preprocessing data": [[964, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[964, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[964, "scaling-features-to-a-range"]], "Scaling sparse data": [[964, "scaling-sparse-data"]], "Scaling data with outliers": [[964, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[964, null]], "Centering kernel matrices": [[964, "centering-kernel-matrices"]], "Non-linear transformation": [[964, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[964, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[964, "mapping-to-a-gaussian-distribution"]], "Normalization": [[964, "normalization"]], "Sparse input": [[964, null], [964, null]], "Encoding categorical features": [[964, "encoding-categorical-features"]], "Infrequent categories": [[964, "infrequent-categories"]], "Discretization": [[964, "discretization"]], "K-bins discretization": [[964, "k-bins-discretization"]], "Feature binarization": [[964, "feature-binarization"]], "Generating polynomial features": [[964, "generating-polynomial-features"]], "Polynomial features": [[964, "polynomial-features"]], "Spline transformer": [[964, "spline-transformer"]], "Custom transformers": [[964, "custom-transformers"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[987, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[987, null]], "Vocabulary: classification and regression": [[987, null]], "Nearest neighbor and the curse of dimensionality": [[987, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[987, null]], "k-Nearest neighbors classifier": [[987, "k-nearest-neighbors-classifier"]], "Training set and testing set": [[987, null], [980, null]], "The curse of dimensionality": [[987, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[987, "linear-model-from-regression-to-sparsity"]], "Diabetes dataset": [[987, null], [363, "diabetes-dataset"]], "Linear regression": [[987, "linear-regression"]], "Shrinkage": [[987, "shrinkage"]], "Sparsity": [[987, "sparsity"], [398, "sparsity"]], "Different algorithms for the same problem": [[987, null]], "Multiclass classification": [[987, null], [955, "multiclass-classification"]], "Shrinkage and sparsity with logistic regression": [[987, null]], "Exercise": [[987, null], [987, null], [984, null], [984, null]], "Support vector machines (SVMs)": [[987, "support-vector-machines-svms"]], "Linear SVMs": [[987, "linear-svms"]], "Example:": [[987, null], [966, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null]], "Using kernels": [[987, "using-kernels"]], "Linear kernel": [[987, "linear-kernel"], [952, "linear-kernel"]], "Polynomial kernel": [[987, "polynomial-kernel"], [952, "polynomial-kernel"]], "RBF kernel (Radial Basis Function)": [[987, "rbf-kernel-radial-basis-function"]], "Interactive example": [[987, null]], "Decision Trees": [[970, "decision-trees"], [342, "decision-trees"], [164, "decision-trees"]], "Multi-output problems": [[970, "multi-output-problems"]], "Complexity": [[970, "complexity"], [969, "complexity"], [958, "complexity"], [957, "complexity"], [951, "complexity"], [951, "id3"], [951, "id4"], [951, "id5"], [951, "id7"], [951, "id8"], [968, "complexity"]], "Tips on practical use": [[970, "tips-on-practical-use"], [951, "tips-on-practical-use"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[970, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[970, "classification-criteria"]], "Regression criteria": [[970, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[970, "minimal-cost-complexity-pruning"]], "sklearn.utils.register_parallel_backend": [[924, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[925, "sklearn-utils-resample"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[934, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "Kernel Approximation": [[946, "kernel-approximation"], [171, "kernel-approximation"], [164, "kernel-approximation"]], "Nystroem Method for Kernel Approximation": [[946, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[946, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[946, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[946, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[946, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[946, "mathematical-details"]], "Unsupervised learning: seeking representations of the data": [[988, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[988, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[988, null]], "K-means clustering": [[988, "k-means-clustering"]], "Application example: vector quantization": [[988, null]], "Hierarchical agglomerative clustering: Ward": [[988, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[988, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[988, null]], "Decompositions: from a signal to components and loadings": [[988, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[988, null]], "Principal component analysis: PCA": [[988, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[988, "independent-component-analysis-ica"]], "Choosing the right estimator": [[982, "choosing-the-right-estimator"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[931, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[937, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[935, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "Support Vector Machines": [[969, "support-vector-machines"], [320, "support-vector-machines"], [164, "support-vector-machines"]], "Multi-class classification": [[969, "multi-class-classification"]], "Scores and probabilities": [[969, "scores-and-probabilities"]], "Unbalanced problems": [[969, "unbalanced-problems"]], "Density estimation, novelty detection": [[969, "density-estimation-novelty-detection"]], "Tips on Practical Use": [[969, "tips-on-practical-use"], [958, "tips-on-practical-use"], [968, "tips-on-practical-use"]], "Kernel functions": [[969, "kernel-functions"]], "Parameters of the RBF Kernel": [[969, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[969, "custom-kernels"]], "Using Python functions as kernels": [[969, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[969, "using-the-gram-matrix"]], "SVC": [[969, "svc"]], "LinearSVC": [[969, "linearsvc"]], "NuSVC": [[969, "nusvc"]], "SVR": [[969, "svr"]], "LinearSVR": [[969, "linearsvr"]], "Implementation details": [[969, "implementation-details"], [968, "implementation-details"], [398, "implementation-details"]], "Random Projection": [[966, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[966, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[966, "gaussian-random-projection"]], "Sparse random projection": [[966, "sparse-random-projection"]], "Inverse Transform": [[966, "inverse-transform"]], "sklearn.utils.validation.check_is_fitted": [[938, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[938, "examples-using-sklearn-utils-validation-check-is-fitted"]], "Metrics and scoring: quantifying the quality of predictions": [[954, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[954, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[954, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[954, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[954, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[954, "using-multiple-metric-evaluation"]], "Classification metrics": [[954, "classification-metrics"], [389, "classification-metrics"]], "From binary to multiclass and multilabel": [[954, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[954, "accuracy-score"]], "Top-k accuracy score": [[954, "top-k-accuracy-score"]], "Balanced accuracy score": [[954, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[954, "cohen-s-kappa"]], "Confusion matrix": [[954, "confusion-matrix"], [250, "confusion-matrix"]], "Classification report": [[954, "classification-report"]], "Hamming loss": [[954, "hamming-loss"]], "Precision, recall and F-measures": [[954, "precision-recall-and-f-measures"]], "Binary classification": [[954, "binary-classification"]], "Multiclass and multilabel classification": [[954, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[954, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[954, "hinge-loss"]], "Log loss": [[954, "log-loss"]], "Matthews correlation coefficient": [[954, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[954, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[954, "receiver-operating-characteristic-roc"]], "Binary case": [[954, "binary-case"]], "Multi-class case": [[954, "multi-class-case"]], "Multi-label case": [[954, "multi-label-case"]], "Detection error tradeoff (DET)": [[954, "detection-error-tradeoff-det"]], "Zero one loss": [[954, "zero-one-loss"]], "Brier score loss": [[954, "brier-score-loss"]], "Class likelihood ratios": [[954, "class-likelihood-ratios"]], "Multilabel ranking metrics": [[954, "multilabel-ranking-metrics"], [389, "multilabel-ranking-metrics"]], "Coverage error": [[954, "coverage-error"]], "Label ranking average precision": [[954, "label-ranking-average-precision"]], "Ranking loss": [[954, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[954, "normalized-discounted-cumulative-gain"]], "Regression metrics": [[954, "regression-metrics"], [389, "regression-metrics"]], "R\u00b2 score, the coefficient of determination": [[954, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[954, "mean-absolute-error"]], "Mean squared error": [[954, "mean-squared-error"]], "Mean squared logarithmic error": [[954, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[954, "mean-absolute-percentage-error"]], "Median absolute error": [[954, "median-absolute-error"]], "Max error": [[954, "max-error"]], "Explained variance score": [[954, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[954, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[954, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[954, "pinball-loss"]], "D\u00b2 score": [[954, "d2-score"]], "D\u00b2 Tweedie score": [[954, "d2-tweedie-score"]], "D\u00b2 pinball score": [[954, "d2-pinball-score"]], "D\u00b2 absolute error score": [[954, "d2-absolute-error-score"]], "Clustering metrics": [[954, "clustering-metrics"], [389, "clustering-metrics"]], "Dummy estimators": [[954, "dummy-estimators"]], "Neural network models (supervised)": [[958, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[958, "multi-layer-perceptron"]], "Regularization": [[958, "regularization"]], "Algorithms": [[958, "algorithms"]], "More control with warm_start": [[958, "more-control-with-warm-start"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[986, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[986, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[986, null]], "An example of reshaping data would be the digits dataset": [[986, null]], "Estimators objects": [[986, "estimators-objects"]], "Unsupervised learning": [[990, "unsupervised-learning"]], "Who is using scikit-learn?": [[978, "who-is-using-scikit-learn"]], "J.P.Morgan": [[978, "id1"]], "Spotify": [[978, "id2"]], "Inria": [[978, "id3"]], "betaworks": [[978, "id4"]], "Hugging Face": [[978, "id5"]], "Evernote": [[978, "id6"]], "T\u00e9l\u00e9com ParisTech": [[978, "id7"]], "Booking.com": [[978, "id8"]], "AWeber": [[978, "id9"]], "Yhat": [[978, "id10"]], "Rangespan": [[978, "id11"]], "Birchbox": [[978, "id12"]], "Bestofmedia Group": [[978, "id13"]], "Change.org": [[978, "id14"]], "PHIMECA Engineering": [[978, "id15"]], "HowAboutWe": [[978, "id16"]], "PeerIndex": [[978, "id17"]], "DataRobot": [[978, "id18"]], "OkCupid": [[978, "id19"]], "Lovely": [[978, "id20"]], "Data Publica": [[978, "id21"]], "Machinalis": [[978, "id22"]], "solido": [[978, "id23"]], "INFONEA": [[978, "id24"]], "Dataiku": [[978, "id25"]], "Otto Group": [[978, "id26"]], "Zopa": [[978, "id27"]], "MARS": [[978, "id28"]], "BNP Paribas Cardif": [[978, "id29"]], "Pairwise metrics, Affinities and Kernels": [[952, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[952, "cosine-similarity"]], "Sigmoid kernel": [[952, "sigmoid-kernel"]], "RBF kernel": [[952, "rbf-kernel"]], "Laplacian kernel": [[952, "laplacian-kernel"]], "Chi-squared kernel": [[952, "chi-squared-kernel"]], "Isotonic regression": [[945, "isotonic-regression"]], "Transforming the prediction target (y)": [[965, "transforming-the-prediction-target-y"]], "Label binarization": [[965, "label-binarization"]], "LabelBinarizer": [[965, "labelbinarizer"]], "MultiLabelBinarizer": [[965, "multilabelbinarizer"]], "Label encoding": [[965, "label-encoding"]], "Partial Dependence and Individual Conditional Expectation plots": [[961, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[961, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[961, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[961, "mathematical-definition"]], "Computation methods": [[961, "computation-methods"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[936, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "Novelty and Outlier Detection": [[960, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[960, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[960, "novelty-detection"]], "Scaling up the One-Class SVM": [[960, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[960, "id1"]], "Fitting an elliptic envelope": [[960, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[960, "isolation-forest"]], "Local Outlier Factor": [[960, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[960, "novelty-detection-with-local-outlier-factor"]], "Permutation feature importance": [[962, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[962, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[962, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[962, "misleading-values-on-strongly-correlated-features"]], "Working With Text Data": [[989, "working-with-text-data"]], "Tutorial setup": [[989, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[989, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[989, "extracting-features-from-text-files"]], "Bags of words": [[989, "bags-of-words"]], "Tokenizing text with scikit-learn": [[989, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[989, "from-occurrences-to-frequencies"]], "Training a classifier": [[989, "training-a-classifier"]], "Building a pipeline": [[989, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[989, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[989, "parameter-tuning-using-grid-search"]], "Exercises": [[989, "exercises"]], "Exercise 1: Language identification": [[989, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[989, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[989, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[989, "where-to-from-here"]], "Model selection: choosing estimators and their parameters": [[984, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[984, "score-and-cross-validated-scores"]], "Cross-validation generators": [[984, "cross-validation-generators"]], "Grid-search and cross-validated estimators": [[984, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[984, "grid-search"]], "Nested cross-validation": [[984, null]], "Cross-validated estimators": [[984, "cross-validated-estimators"]], "sklearn.utils.validation.check_memory": [[939, "sklearn-utils-validation-check-memory"]], "Available documentation for Scikit-learn": [[992, "available-documentation-for-scikit-learn"]], "sklearn.utils.safe_mask": [[926, "sklearn-utils-safe-mask"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[929, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "Gaussian mixture models": [[953, "gaussian-mixture-models"]], "Gaussian Mixture": [[953, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[953, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[953, "pros"], [953, "id2"]], "Cons": [[953, "cons"], [953, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[953, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[953, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[953, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[953, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[953, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[953, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[953, "the-dirichlet-process"]], "Putting it all together": [[985, "putting-it-all-together"]], "Pipelining": [[985, "pipelining"], [971, null]], "Face recognition with eigenfaces": [[985, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[985, "open-problem-stock-market-structure"]], "sklearn.utils.random.sample_without_replacement": [[923, "sklearn-utils-random-sample-without-replacement"]], "Neural network models (unsupervised)": [[959, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[959, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[959, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[959, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[959, "stochastic-maximum-likelihood-learning"]], "sklearn.utils.validation.column_or_1d": [[941, "sklearn-utils-validation-column-or-1d"]], "Nearest Neighbors": [[957, "nearest-neighbors"], [277, "nearest-neighbors"], [164, "nearest-neighbors"]], "Unsupervised Nearest Neighbors": [[957, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[957, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[957, "kdtree-and-balltree-classes"]], "Nearest Neighbors Classification": [[957, "nearest-neighbors-classification"], [279, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[957, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[957, "nearest-neighbor-algorithms"]], "Brute Force": [[957, "brute-force"]], "K-D Tree": [[957, "k-d-tree"]], "Ball Tree": [[957, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[957, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[957, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[957, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[957, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[957, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[957, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[957, "neighborhood-components-analysis"]], "Dimensionality reduction": [[957, "dimensionality-reduction"]], "Mahalanobis distance": [[957, "mahalanobis-distance"]], "Implementation": [[957, "implementation"], [390, null]], "Training": [[957, "training"], [295, "training"]], "Transform": [[957, "transform"]], "An introduction to machine learning with scikit-learn": [[980, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[980, null]], "Machine learning: the problem setting": [[980, "machine-learning-the-problem-setting"]], "Loading an example dataset": [[980, "loading-an-example-dataset"]], "Shape of the data arrays": [[980, null]], "Loading from external datasets": [[980, null], [360, "loading-from-external-datasets"]], "Learning and predicting": [[980, "learning-and-predicting"]], "Choosing the parameters of the model": [[980, null]], "Conventions": [[980, "conventions"]], "Type casting": [[980, "type-casting"]], "Refitting and updating parameters": [[980, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[980, "multiclass-vs-multilabel-fitting"]], "User Guide": [[991, "user-guide"]], "Unsupervised dimensionality reduction": [[971, "unsupervised-dimensionality-reduction"]], "PCA: principal component analysis": [[971, "pca-principal-component-analysis"]], "Random projections": [[971, "random-projections"]], "Feature scaling": [[971, null]], "Visualizations": [[993, "visualizations"]], "Available Plotting Utilities": [[993, "available-plotting-utilities"]], "Display Objects": [[993, "display-objects"]], "Support": [[977, "support"]], "Mailing List": [[977, "mailing-list"]], "User questions": [[977, "user-questions"]], "Bug tracker": [[977, "bug-tracker"]], "Gitter": [[977, "gitter"]], "Documentation resources": [[977, "documentation-resources"]], "scikit-learn Tutorials": [[981, "scikit-learn-tutorials"]], "sklearn.utils.validation.check_symmetric": [[940, "sklearn-utils-validation-check-symmetric"]], "Multiclass and multioutput algorithms": [[955, "multiclass-and-multioutput-algorithms"]], "Target format": [[955, "target-format"], [955, "id5"], [955, "id8"], [955, "id10"]], "OneVsRestClassifier": [[955, "onevsrestclassifier"]], "OneVsOneClassifier": [[955, "onevsoneclassifier"]], "OutputCodeClassifier": [[955, "outputcodeclassifier"]], "Multilabel classification": [[955, "multilabel-classification"], [232, "multilabel-classification"]], "MultiOutputClassifier": [[955, "multioutputclassifier"]], "ClassifierChain": [[955, "classifierchain"]], "Multiclass-multioutput classification": [[955, "multiclass-multioutput-classification"]], "Multioutput regression": [[955, "multioutput-regression"]], "MultiOutputRegressor": [[955, "multioutputregressor"]], "RegressorChain": [[955, "regressorchain"]], "sklearn.utils.validation.has_fit_parameter": [[942, "sklearn-utils-validation-has-fit-parameter"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[932, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "Manifold learning": [[951, "manifold-learning"], [216, "manifold-learning"], [164, "manifold-learning"]], "Introduction": [[951, "introduction"]], "Isomap": [[951, "isomap"]], "Locally Linear Embedding": [[951, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[951, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[951, "hessian-eigenmapping"]], "Spectral Embedding": [[951, "spectral-embedding"]], "Local Tangent Space Alignment": [[951, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[951, "multi-dimensional-scaling-mds"]], "Metric MDS": [[951, "metric-mds"]], "Nonmetric MDS": [[951, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[951, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[951, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[951, "barnes-hut-t-sne"]], "Stochastic Gradient Descent": [[968, "stochastic-gradient-descent"]], "Online One-Class SVM": [[968, "online-one-class-svm"], [309, "online-one-class-svm"]], "Stochastic Gradient Descent for sparse data": [[968, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[968, "stopping-criterion"]], "SGD": [[968, "id5"]], "sklearn.utils.shuffle": [[928, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[928, "examples-using-sklearn-utils-shuffle"]], "Roadmap": [[975, "id1"]], "Purpose of this document": [[975, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[975, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[975, "architectural-general-goals"]], "Subpackage-specific goals": [[975, "subpackage-specific-goals"]], "Kernel ridge regression": [[947, "kernel-ridge-regression"]], "sklearn.preprocessing.SplineTransformer": [[852, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[852, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.scale": [[863, "sklearn-preprocessing-scale"]], "sklearn.utils.Bunch": [[887, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[887, "examples-using-sklearn-utils-bunch"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[866, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[866, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.utils.gen_batches": [[912, "sklearn-utils-gen-batches"]], "sklearn.svm.l1_min_c": [[879, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[879, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.preprocessing.add_dummy_feature": [[854, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.show_versions": [[871, "sklearn-show-versions"]], "sklearn.svm.SVC": [[877, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[877, "examples-using-sklearn-svm-svc"]], "sklearn.utils.discovery.all_functions": [[902, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.gen_even_slices": [[913, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[913, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.set_config": [[870, "sklearn-set-config"]], "Examples using sklearn.set_config": [[870, "examples-using-sklearn-set-config"]], "sklearn.random_projection.GaussianRandomProjection": [[864, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[865, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[865, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.svm.LinearSVR": [[873, "sklearn-svm-linearsvr"]], "sklearn.tree.DecisionTreeClassifier": [[880, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[880, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.utils.extmath.randomized_range_finder": [[908, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.svm.NuSVC": [[874, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[874, "examples-using-sklearn-svm-nusvc"]], "sklearn.utils.metaestimators.if_delegate_has_method": [[917, "sklearn-utils-metaestimators-if-delegate-has-method"]], "sklearn.utils.indexable": [[915, "sklearn-utils-indexable"]], "sklearn.preprocessing.binarize": [[855, "sklearn-preprocessing-binarize"]], "sklearn.utils.check_X_y": [[892, "sklearn-utils-check-x-y"]], "sklearn.utils.check_consistent_length": [[894, "sklearn-utils-check-consistent-length"]], "sklearn.utils.murmurhash3_32": [[921, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel_backend": [[922, "sklearn-utils-parallel-backend"]], "sklearn.utils.extmath.randomized_svd": [[909, "sklearn-utils-extmath-randomized-svd"]], "sklearn.tree.export_graphviz": [[884, "sklearn-tree-export-graphviz"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[904, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[904, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.semi_supervised.LabelPropagation": [[867, "sklearn-semi-supervised-labelpropagation"]], "sklearn.svm.SVR": [[878, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[878, "examples-using-sklearn-svm-svr"]], "sklearn.utils.as_float_array": [[890, "sklearn-utils-as-float-array"]], "sklearn.utils.check_random_state": [[895, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[895, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.extmath.density": [[906, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[906, "examples-using-sklearn-utils-extmath-density"]], "sklearn.tree.ExtraTreeClassifier": [[882, "sklearn-tree-extratreeclassifier"]], "sklearn.utils.class_weight.compute_sample_weight": [[898, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.tree.ExtraTreeRegressor": [[883, "sklearn-tree-extratreeregressor"]], "sklearn.preprocessing.quantile_transform": [[861, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[861, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.utils.estimator_checks.check_estimator": [[903, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.preprocessing.minmax_scale": [[858, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[858, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.utils.class_weight.compute_class_weight": [[897, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.tree.DecisionTreeRegressor": [[881, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[881, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.export_text": [[885, "sklearn-tree-export-text"]], "sklearn.utils.arrayfuncs.min_pos": [[889, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.extmath.fast_logdet": [[907, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.safe_sparse_dot": [[910, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.metaestimators.available_if": [[916, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[916, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.preprocessing.label_binarize": [[856, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[856, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.normalize": [[859, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[860, "sklearn-preprocessing-power-transform"]], "sklearn.svm.OneClassSVM": [[876, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[876, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.preprocessing.maxabs_scale": [[857, "sklearn-preprocessing-maxabs-scale"]], "sklearn.tree.plot_tree": [[886, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[886, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.deprecated": [[899, "sklearn-utils-deprecated"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[869, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[869, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.utils.check_scalar": [[896, "sklearn-utils-check-scalar"]], "sklearn.semi_supervised.LabelSpreading": [[868, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[868, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.utils.estimator_html_repr": [[905, "sklearn-utils-estimator-html-repr"]], "sklearn.utils._safe_indexing": [[888, "sklearn-utils-safe-indexing"]], "sklearn.utils.multiclass.type_of_target": [[919, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[920, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.multiclass.is_multilabel": [[918, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.svm.NuSVR": [[875, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[875, "examples-using-sklearn-svm-nusvr"]], "sklearn.utils.discovery.all_estimators": [[901, "sklearn-utils-discovery-all-estimators"]], "sklearn.preprocessing.robust_scale": [[862, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.StandardScaler": [[853, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[853, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.svm.LinearSVC": [[872, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[872, "examples-using-sklearn-svm-linearsvc"]], "sklearn.utils.check_array": [[893, "sklearn-utils-check-array"]], "sklearn.utils.assert_all_finite": [[891, "sklearn-utils-assert-all-finite"]], "sklearn.utils.discovery.all_displays": [[900, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.graph.single_source_shortest_path_length": [[914, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.extmath.weighted_mode": [[911, "sklearn-utils-extmath-weighted-mode"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[711, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.pairwise.laplacian_kernel": [[741, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.label_ranking_average_precision_score": [[714, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[733, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.mean_poisson_deviance": [[724, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[724, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.hinge_loss": [[710, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.silhouette_score": [[766, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[766, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.matthews_corrcoef": [[718, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.multilabel_confusion_matrix": [[729, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.silhouette_samples": [[765, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[765, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.model_selection.GridSearchCV": [[772, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[772, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.metrics.label_ranking_loss": [[715, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.pairwise_distances_argmin": [[754, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[754, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.log_loss": [[716, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[716, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.mutual_info_score": [[730, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[730, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.median_absolute_error": [[728, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[728, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.mean_squared_log_error": [[726, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.pairwise.chi2_kernel": [[734, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.distance_metrics": [[737, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.make_scorer": [[717, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[717, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.pairwise.linear_kernel": [[742, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.model_selection.GroupShuffleSplit": [[774, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[774, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.LeaveOneOut": [[779, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.KFold": [[777, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[777, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.GroupKFold": [[773, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[773, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.metrics.pairwise_distances_argmin_min": [[755, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.model_selection.LeaveOneGroupOut": [[778, "sklearn-model-selection-leaveonegroupout"]], "sklearn.metrics.precision_recall_fscore_support": [[758, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[744, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.zero_one_loss": [[769, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[769, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.metrics.pairwise_distances_chunked": [[756, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_score": [[759, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[759, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.pairwise.paired_distances": [[746, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.roc_auc_score": [[763, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[763, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.jaccard_score": [[713, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[713, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.model_selection.HalvingRandomSearchCV": [[776, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[776, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.metrics.pairwise.polynomial_kernel": [[750, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.mean_absolute_error": [[720, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[720, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.r2_score": [[760, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[760, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.pairwise.euclidean_distances": [[738, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[745, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.top_k_accuracy_score": [[767, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.pairwise.cosine_distances": [[735, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.manhattan_distances": [[743, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.homogeneity_score": [[712, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[712, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.mean_squared_error": [[725, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[725, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.pairwise.haversine_distances": [[739, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.mean_tweedie_deviance": [[727, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[727, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.recall_score": [[762, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[762, "examples-using-sklearn-metrics-recall-score"]], "sklearn.mixture.BayesianGaussianMixture": [[770, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[770, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.metrics.precision_recall_curve": [[757, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[757, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[748, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[740, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.rand_score": [[761, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[761, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[747, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.max_error": [[719, "sklearn-metrics-max-error"]], "sklearn.metrics.roc_curve": [[764, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[764, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.mean_pinball_loss": [[723, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[723, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.normalized_mutual_info_score": [[732, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[732, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.cosine_similarity": [[736, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.pairwise_kernels": [[749, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.rbf_kernel": [[751, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise_distances": [[753, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[753, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.v_measure_score": [[768, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[768, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[752, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.mean_gamma_deviance": [[722, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.mixture.GaussianMixture": [[771, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[771, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.LeavePGroupsOut": [[780, "sklearn-model-selection-leavepgroupsout"]], "sklearn.metrics.ndcg_score": [[731, "sklearn-metrics-ndcg-score"]], "sklearn.model_selection.HalvingGridSearchCV": [[775, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[775, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.metrics.mean_absolute_percentage_error": [[721, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[825, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.preprocessing.MaxAbsScaler": [[842, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[842, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.model_selection.learning_curve": [[797, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[797, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.neighbors.sort_graph_by_row_values": [[828, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.model_selection.TimeSeriesSplit": [[792, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[792, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.preprocessing.KBinsDiscretizer": [[838, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[838, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.multioutput.MultiOutputRegressor": [[806, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[806, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.naive_bayes.BernoulliNB": [[808, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[808, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.multiclass.OneVsOneClassifier": [[801, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.neighbors.NearestCentroid": [[820, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[820, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.preprocessing.MultiLabelBinarizer": [[844, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.model_selection.cross_val_predict": [[794, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[794, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.neighbors.kneighbors_graph": [[826, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[826, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neural_network.MLPClassifier": [[830, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[830, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[802, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[802, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.model_selection.validation_curve": [[800, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[800, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[822, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[822, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.preprocessing.Binarizer": [[836, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.LabelBinarizer": [[840, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[840, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.model_selection.StratifiedShuffleSplit": [[791, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[791, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.neighbors.KNeighborsRegressor": [[816, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[816, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[817, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[817, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.model_selection.ShuffleSplit": [[788, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[788, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.preprocessing.LabelEncoder": [[841, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[847, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[847, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.pipeline.Pipeline": [[833, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[833, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.model_selection.RandomizedSearchCV": [[785, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[785, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.multioutput.MultiOutputClassifier": [[805, "sklearn-multioutput-multioutputclassifier"]], "sklearn.neighbors.BallTree": [[813, "sklearn-neighbors-balltree"]], "sklearn.model_selection.StratifiedKFold": [[790, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[790, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.cross_validate": [[796, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[796, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.neighbors.radius_neighbors_graph": [[827, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.preprocessing.PolynomialFeatures": [[848, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[848, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.neural_network.MLPRegressor": [[831, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[831, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.model_selection.permutation_test_score": [[798, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[798, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.neighbors.KernelDensity": [[818, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[818, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.preprocessing.QuantileTransformer": [[850, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[850, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.pipeline.make_union": [[835, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.RobustScaler": [[851, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[851, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.MinMaxScaler": [[843, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[843, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.multioutput.ClassifierChain": [[804, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[804, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.naive_bayes.ComplementNB": [[810, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[810, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.multioutput.RegressorChain": [[807, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.MultinomialNB": [[812, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[812, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.model_selection.ParameterSampler": [[783, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.StratifiedGroupKFold": [[789, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[789, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.neighbors.LocalOutlierFactor": [[819, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[819, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestNeighbors": [[821, "sklearn-neighbors-nearestneighbors"]], "sklearn.model_selection.PredefinedSplit": [[784, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.ParameterGrid": [[782, "sklearn-model-selection-parametergrid"]], "sklearn.pipeline.make_pipeline": [[834, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[834, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.FeatureUnion": [[832, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[832, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[823, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.model_selection.check_cv": [[793, "sklearn-model-selection-check-cv"]], "sklearn.naive_bayes.CategoricalNB": [[809, "sklearn-naive-bayes-categoricalnb"]], "sklearn.preprocessing.FunctionTransformer": [[837, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[837, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.Normalizer": [[845, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[845, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.multiclass.OutputCodeClassifier": [[803, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.model_selection.RepeatedKFold": [[786, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[786, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[824, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.KDTree": [[814, "sklearn-neighbors-kdtree"]], "sklearn.preprocessing.OneHotEncoder": [[846, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[846, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.naive_bayes.GaussianNB": [[811, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[811, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.model_selection.train_test_split": [[799, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[799, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.neighbors.KNeighborsClassifier": [[815, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[815, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neural_network.BernoulliRBM": [[829, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[829, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.preprocessing.KernelCenterer": [[839, "sklearn-preprocessing-kernelcenterer"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[787, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[787, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.preprocessing.PowerTransformer": [[849, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[849, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.model_selection.LeavePOut": [[781, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.cross_val_score": [[795, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[795, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.linear_model.RANSACRegressor": [[648, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[648, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.lasso_path": [[661, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[661, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.MultiTaskLassoCV": [[640, "sklearn-linear-model-multitasklassocv"]], "sklearn.metrics.class_likelihood_ratios": [[688, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[688, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.confusion_matrix": [[694, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[694, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.f1_score": [[704, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[704, "examples-using-sklearn-metrics-f1-score"]], "sklearn.manifold.LocallyLinearEmbedding": [[666, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[666, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.metrics.det_curve": [[702, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[702, "examples-using-sklearn-metrics-det-curve"]], "sklearn.manifold.TSNE": [[669, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[669, "examples-using-sklearn-manifold-tsne"]], "sklearn.metrics.classification_report": [[689, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[689, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[690, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.d2_tweedie_score": [[699, "sklearn-metrics-d2-tweedie-score"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[643, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[643, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.metrics.explained_variance_score": [[703, "sklearn-metrics-explained-variance-score"]], "sklearn.linear_model.SGDOneClassSVM": [[654, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[654, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.manifold.MDS": [[667, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[667, "examples-using-sklearn-manifold-mds"]], "sklearn.metrics.RocCurveDisplay": [[678, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[678, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.linear_model.MultiTaskLasso": [[639, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[639, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.metrics.adjusted_mutual_info_score": [[680, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[680, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.get_scorer": [[707, "sklearn-metrics-get-scorer"]], "sklearn.metrics.accuracy_score": [[679, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[679, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.manifold.trustworthiness": [[673, "sklearn-manifold-trustworthiness"]], "sklearn.manifold.spectral_embedding": [[672, "sklearn-manifold-spectral-embedding"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[691, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.manifold.SpectralEmbedding": [[668, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[668, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[642, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[642, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.TheilSenRegressor": [[656, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[656, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.RidgeClassifier": [[651, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[651, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.metrics.fbeta_score": [[705, "sklearn-metrics-fbeta-score"]], "sklearn.linear_model.ridge_regression": [[664, "sklearn-linear-model-ridge-regression"]], "sklearn.metrics.DetCurveDisplay": [[675, "sklearn-metrics-detcurvedisplay"]], "sklearn.linear_model.RidgeCV": [[650, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[650, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.Ridge": [[649, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[649, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.TweedieRegressor": [[657, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[657, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.PoissonRegressor": [[646, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[646, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.metrics.ConfusionMatrixDisplay": [[674, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[674, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.linear_model.orthogonal_mp": [[662, "sklearn-linear-model-orthogonal-mp"]], "sklearn.metrics.brier_score_loss": [[685, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[685, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.d2_absolute_error_score": [[697, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.adjusted_rand_score": [[681, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[681, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.linear_model.SGDClassifier": [[653, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[653, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.metrics.davies_bouldin_score": [[700, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.get_scorer_names": [[708, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.balanced_accuracy_score": [[684, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.calinski_harabasz_score": [[686, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[641, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[641, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.metrics.coverage_error": [[696, "sklearn-metrics-coverage-error"]], "sklearn.linear_model.orthogonal_mp_gram": [[663, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.RidgeClassifierCV": [[652, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDRegressor": [[655, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[655, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.metrics.consensus_score": [[695, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[695, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.auc": [[682, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[682, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.fowlkes_mallows_score": [[706, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.manifold.locally_linear_embedding": [[670, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[670, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.linear_model.QuantileRegressor": [[647, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[647, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.Perceptron": [[645, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[645, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.metrics.dcg_score": [[701, "sklearn-metrics-dcg-score"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[644, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.lars_path_gram": [[660, "sklearn-linear-model-lars-path-gram"]], "sklearn.metrics.check_scoring": [[687, "sklearn-metrics-check-scoring"]], "sklearn.metrics.d2_pinball_score": [[698, "sklearn-metrics-d2-pinball-score"]], "sklearn.linear_model.lars_path": [[659, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[659, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.manifold.Isomap": [[665, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[665, "examples-using-sklearn-manifold-isomap"]], "sklearn.metrics.cohen_kappa_score": [[692, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.average_precision_score": [[683, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[683, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.manifold.smacof": [[671, "sklearn-manifold-smacof"]], "sklearn.metrics.hamming_loss": [[709, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[709, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.completeness_score": [[693, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[693, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.linear_model.enet_path": [[658, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[658, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.metrics.PrecisionRecallDisplay": [[677, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[677, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.metrics.DistanceMetric": [[676, "sklearn-metrics-distancemetric"]], "sklearn.isotonic.isotonic_regression": [[614, "sklearn-isotonic-isotonic-regression"]], "sklearn.linear_model.BayesianRidge": [[622, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[622, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.feature_selection.RFECV": [[571, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[571, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.gaussian_process.kernels.Product": [[598, "sklearn-gaussian-process-kernels-product"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[619, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[615, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.gaussian_process.kernels.Exponentiation": [[593, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.inspection.DecisionBoundaryDisplay": [[608, "sklearn-inspection-decisionboundarydisplay"]], "sklearn.feature_selection.SelectFromModel": [[574, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[574, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.mutual_info_classif": [[584, "sklearn-feature-selection-mutual-info-classif"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[592, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[592, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[587, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[587, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.impute.MissingIndicator": [[606, "sklearn-impute-missingindicator"]], "sklearn.inspection.PartialDependenceDisplay": [[609, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[609, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.kernel_approximation.RBFSampler": [[618, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[618, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.linear_model.Lasso": [[629, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[629, "examples-using-sklearn-linear-model-lasso"]], "sklearn.feature_selection.f_regression": [[583, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[583, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.gaussian_process.kernels.Kernel": [[595, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[595, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.feature_selection.VarianceThreshold": [[580, "sklearn-feature-selection-variancethreshold"]], "sklearn.linear_model.ElasticNetCV": [[624, "sklearn-linear-model-elasticnetcv"]], "sklearn.feature_selection.SequentialFeatureSelector": [[579, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[579, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.SelectPercentile": [[577, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[577, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[589, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.linear_model.LassoLarsIC": [[633, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[633, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.feature_selection.SelectFwe": [[575, "sklearn-feature-selection-selectfwe"]], "sklearn.get_config": [[603, "sklearn-get-config"]], "sklearn.inspection.partial_dependence": [[610, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[610, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[597, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.linear_model.LogisticRegression": [[635, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[635, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.impute.SimpleImputer": [[607, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[607, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.kernel_approximation.Nystroem": [[616, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[616, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.linear_model.Lars": [[627, "sklearn-linear-model-lars"]], "sklearn.gaussian_process.kernels.RBF": [[599, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[599, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[638, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.feature_selection.RFE": [[570, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[570, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[600, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[600, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.linear_model.LassoLarsCV": [[632, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[632, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.feature_selection.SelectorMixin": [[578, "sklearn-feature-selection-selectormixin"]], "sklearn.linear_model.ElasticNet": [[623, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[623, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.isotonic.check_increasing": [[613, "sklearn-isotonic-check-increasing"]], "sklearn.linear_model.GammaRegressor": [[625, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[625, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.LarsCV": [[628, "sklearn-linear-model-larscv"]], "sklearn.feature_selection.SelectFpr": [[573, "sklearn-feature-selection-selectfpr"]], "sklearn.impute.KNNImputer": [[605, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[605, "examples-using-sklearn-impute-knnimputer"]], "sklearn.feature_selection.chi2": [[581, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[581, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.r_regression": [[586, "sklearn-feature-selection-r-regression"]], "sklearn.isotonic.IsotonicRegression": [[612, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[612, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[617, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[617, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.linear_model.LassoLars": [[631, "sklearn-linear-model-lassolars"]], "sklearn.feature_selection.SelectKBest": [[576, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[576, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[568, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[568, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.linear_model.MultiTaskElasticNet": [[637, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.feature_selection.GenericUnivariateSelect": [[569, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[588, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[588, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[590, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[590, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.linear_model.ARDRegression": [[621, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[621, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.LassoCV": [[630, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[630, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.gaussian_process.kernels.Matern": [[596, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[596, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.linear_model.LogisticRegressionCV": [[636, "sklearn-linear-model-logisticregressioncv"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[602, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[602, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.impute.IterativeImputer": [[604, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[604, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.kernel_ridge.KernelRidge": [[620, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[620, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[594, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[594, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.linear_model.LinearRegression": [[634, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[634, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.gaussian_process.kernels.Sum": [[601, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.DotProduct": [[591, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[591, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.feature_selection.mutual_info_regression": [[585, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[585, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.f_classif": [[582, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[582, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.linear_model.HuberRegressor": [[626, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[626, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.inspection.permutation_importance": [[611, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[611, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.feature_selection.SelectFdr": [[572, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_extraction.DictVectorizer": [[558, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[558, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.ensemble.VotingRegressor": [[547, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[547, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.datasets.make_regression": [[501, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[501, "examples-using-sklearn-datasets-make-regression"]], "sklearn.exceptions.UndefinedMetricWarning": [[554, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.decomposition.dict_learning_online": [[523, "sklearn-decomposition-dict-learning-online"]], "sklearn.ensemble.AdaBoostClassifier": [[530, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[530, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.datasets.make_moons": [[499, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[499, "examples-using-sklearn-datasets-make-moons"]], "sklearn.decomposition.FactorAnalysis": [[509, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[509, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.exceptions.ConvergenceWarning": [[548, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[548, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[527, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[527, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.ensemble.RandomForestRegressor": [[542, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[542, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.BaggingClassifier": [[532, "sklearn-ensemble-baggingclassifier"]], "sklearn.decomposition.MiniBatchSparsePCA": [[516, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[516, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.ensemble.VotingClassifier": [[546, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[546, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.feature_extraction.image.grid_to_graph": [[562, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.decomposition.DictionaryLearning": [[508, "sklearn-decomposition-dictionarylearning"]], "sklearn.dummy.DummyClassifier": [[528, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[528, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[538, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[538, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.feature_extraction.FeatureHasher": [[559, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[559, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.extract_patches_2d": [[561, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[561, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.exceptions.NotFittedError": [[553, "sklearn-exceptions-notfittederror"]], "sklearn.feature_extraction.text.HashingVectorizer": [[566, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[566, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.decomposition.PCA": [[518, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[518, "examples-using-sklearn-decomposition-pca"]], "sklearn.exceptions.DataConversionWarning": [[549, "sklearn-exceptions-dataconversionwarning"]], "sklearn.ensemble.ExtraTreesRegressor": [[535, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[535, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.experimental.enable_halving_search_cv": [[555, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.datasets.make_low_rank_matrix": [[498, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[505, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.decomposition.dict_learning": [[522, "sklearn-decomposition-dict-learning"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[539, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[539, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.experimental.enable_iterative_imputer": [[557, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.ensemble.ExtraTreesClassifier": [[534, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[534, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.decomposition.KernelPCA": [[512, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[512, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.ensemble.RandomTreesEmbedding": [[543, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[543, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.feature_extraction.image.PatchExtractor": [[560, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.img_to_graph": [[563, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.ensemble.AdaBoostRegressor": [[531, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[531, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.feature_extraction.text.TfidfTransformer": [[567, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[567, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.decomposition.LatentDirichletAllocation": [[513, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[513, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.ensemble.RandomForestClassifier": [[541, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[541, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.dummy.DummyRegressor": [[529, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[529, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.decomposition.MiniBatchNMF": [[515, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[515, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.ensemble.StackingRegressor": [[545, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[545, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.decomposition.NMF": [[517, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[517, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.sparse_encode": [[525, "sklearn-decomposition-sparse-encode"]], "sklearn.decomposition.TruncatedSVD": [[521, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[521, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.experimental.enable_hist_gradient_boosting": [[556, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.feature_extraction.text.CountVectorizer": [[565, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[565, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.decomposition.IncrementalPCA": [[511, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[511, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[514, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[514, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.datasets.make_swiss_roll": [[507, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[507, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.ensemble.StackingClassifier": [[544, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[544, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.decomposition.SparseCoder": [[519, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[519, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[526, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[526, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.datasets.make_s_curve": [[502, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[502, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_spd_matrix": [[504, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[504, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.decomposition.non_negative_factorization": [[524, "sklearn-decomposition-non-negative-factorization"]], "sklearn.ensemble.GradientBoostingClassifier": [[536, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[536, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.decomposition.FastICA": [[510, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[510, "examples-using-sklearn-decomposition-fastica"]], "sklearn.datasets.make_multilabel_classification": [[500, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[500, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.exceptions.DataDimensionalityWarning": [[550, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.ensemble.GradientBoostingRegressor": [[537, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[537, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.datasets.make_hastie_10_2": [[497, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[497, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.ensemble.IsolationForest": [[540, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[540, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.datasets.make_spd_matrix": [[506, "sklearn-datasets-make-spd-matrix"]], "sklearn.exceptions.EfficiencyWarning": [[551, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[552, "sklearn-exceptions-fitfailedwarning"]], "sklearn.ensemble.BaggingRegressor": [[533, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[533, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[564, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[564, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.decomposition.SparsePCA": [[520, "sklearn-decomposition-sparsepca"]], "sklearn.datasets.make_sparse_coded_signal": [[503, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[503, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.load_sample_image": [[483, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[483, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.compose.make_column_selector": [[444, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[444, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.cluster.MiniBatchKMeans": [[427, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[427, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.covariance.ShrunkCovariance": [[454, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[454, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.cluster.SpectralBiclustering": [[429, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[429, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.affinity_propagation": [[432, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[432, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[466, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[466, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_species_distributions": [[475, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[475, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.load_svmlight_files": [[486, "sklearn-datasets-load-svmlight-files"]], "sklearn.cluster.ward_tree": [[441, "sklearn-cluster-ward-tree"]], "sklearn.covariance.LedoitWolf": [[451, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[451, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.cross_decomposition.PLSRegression": [[461, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[461, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.CCA": [[459, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[459, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cluster.estimate_bandwidth": [[436, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[436, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.datasets.load_diabetes": [[478, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[478, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.config_context": [[446, "sklearn-config-context"]], "sklearn.covariance.EmpiricalCovariance": [[448, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[448, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.compose.ColumnTransformer": [[442, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[442, "examples-using-sklearn-compose-columntransformer"]], "sklearn.cluster.compute_optics_graph": [[435, "sklearn-cluster-compute-optics-graph"]], "sklearn.covariance.MinCovDet": [[452, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[452, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.datasets.fetch_california_housing": [[467, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[467, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.load_breast_cancer": [[477, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[477, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.cluster.MeanShift": [[426, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[426, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.mean_shift": [[439, "sklearn-cluster-mean-shift"]], "sklearn.covariance.GraphicalLassoCV": [[450, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[450, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.datasets.make_checkerboard": [[490, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[490, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.cluster.cluster_optics_xi": [[434, "sklearn-cluster-cluster-optics-xi"]], "sklearn.datasets.load_svmlight_file": [[485, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.fetch_kddcup99": [[469, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[469, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.compose.make_column_transformer": [[445, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[445, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.datasets.load_digits": [[479, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[479, "examples-using-sklearn-datasets-load-digits"]], "sklearn.covariance.empirical_covariance": [[455, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[455, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[456, "sklearn-covariance-graphical-lasso"]], "sklearn.datasets.fetch_rcv1": [[474, "sklearn-datasets-fetch-rcv1"]], "sklearn.cluster.k_means": [[437, "sklearn-cluster-k-means"]], "sklearn.datasets.load_iris": [[481, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[481, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.make_blobs": [[489, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[489, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.covariance.shrunk_covariance": [[458, "sklearn-covariance-shrunk-covariance"]], "sklearn.datasets.make_friedman1": [[493, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.load_linnerud": [[482, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.dump_svmlight_file": [[464, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[464, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_olivetti_faces": [[472, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[472, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.make_friedman2": [[494, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.fetch_20newsgroups": [[465, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[465, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.load_sample_images": [[484, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.fetch_lfw_people": [[471, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[471, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.clear_data_home": [[463, "sklearn-datasets-clear-data-home"]], "sklearn.covariance.ledoit_wolf": [[457, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[457, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.datasets.make_classification": [[492, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[492, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.get_data_home": [[476, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[476, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.cluster.SpectralCoclustering": [[431, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[431, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.covariance.EllipticEnvelope": [[447, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[447, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.GraphicalLasso": [[449, "sklearn-covariance-graphicallasso"]], "sklearn.cross_decomposition.PLSSVD": [[462, "sklearn-cross-decomposition-plssvd"]], "sklearn.cluster.cluster_optics_dbscan": [[433, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[433, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.compose.TransformedTargetRegressor": [[443, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[443, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.cluster.SpectralClustering": [[430, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[430, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.datasets.make_circles": [[491, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[491, "examples-using-sklearn-datasets-make-circles"]], "sklearn.cluster.OPTICS": [[428, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[428, "examples-using-sklearn-cluster-optics"]], "sklearn.covariance.OAS": [[453, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[453, "examples-using-sklearn-covariance-oas"]], "sklearn.cluster.spectral_clustering": [[440, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[440, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.datasets.fetch_covtype": [[468, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[468, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_openml": [[473, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[473, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.make_biclusters": [[488, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[488, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.cluster.kmeans_plusplus": [[438, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[438, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.datasets.load_files": [[480, "sklearn-datasets-load-files"]], "sklearn.datasets.make_friedman3": [[495, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.fetch_lfw_pairs": [[470, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.load_wine": [[487, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[487, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_gaussian_quantiles": [[496, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[496, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.cross_decomposition.PLSCanonical": [[460, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[460, "examples-using-sklearn-cross-decomposition-plscanonical"]], "Neighborhood Components Analysis Illustration": [[286, "neighborhood-components-analysis-illustration"]], "Original points": [[286, "original-points"]], "Learning an embedding": [[286, "learning-an-embedding"]], "Non-linear SVM": [[331, "non-linear-svm"]], "Working with text documents": [[337, "working-with-text-documents"], [164, "working-with-text-documents"]], "SVM: Weighted samples": [[335, "svm-weighted-samples"]], "Compare the effect of different scalers on data with outliers": [[298, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Original data": [[298, "original-data"], [262, "original-data"]], "StandardScaler": [[298, "standardscaler"]], "MinMaxScaler": [[298, "minmaxscaler"]], "MaxAbsScaler": [[298, "maxabsscaler"]], "RobustScaler": [[298, "robustscaler"]], "PowerTransformer": [[298, "powertransformer"]], "QuantileTransformer (uniform output)": [[298, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[298, "quantiletransformer-gaussian-output"]], "Normalizer": [[298, "normalizer"]], "SVM-Anova: SVM with univariate feature selection": [[328, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[328, "load-some-data-to-play-with"]], "Create the pipeline": [[328, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[328, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Clustering text documents using k-means": [[339, "clustering-text-documents-using-k-means"]], "Loading text data": [[339, "loading-text-data"]], "Quantifying the quality of clustering results": [[339, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[339, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[339, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[339, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[339, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[339, "top-terms-per-cluster"]], "HashingVectorizer": [[339, "hashingvectorizer"]], "Clustering evaluation summary": [[339, "clustering-evaluation-summary"]], "Label Propagation digits: Demonstrating performance": [[313, "label-propagation-digits-demonstrating-performance"]], "Plot the most uncertain predictions": [[313, "plot-the-most-uncertain-predictions"]], "Preprocessing": [[297, "preprocessing"], [164, "preprocessing"]], "Release Highlights for scikit-learn 0.23": [[307, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[307, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[307, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[307, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[307, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[307, "sample-weight-support-for-lasso-and-elasticnet"]], "Understanding the decision tree structure": [[347, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[347, "train-tree-classifier"]], "Tree structure": [[347, "tree-structure"]], "Decision path": [[347, "decision-path"]], "Restricted Boltzmann Machine features for digit classification": [[295, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[295, "models-definition"]], "Plotting": [[295, "plotting"], [389, "plotting"], [389, "id5"], [389, "id7"]], "One-class SVM with non-linear kernel (RBF)": [[324, "one-class-svm-with-non-linear-kernel-rbf"]], "Classification of text documents using sparse features": [[338, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[338, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[338, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[338, "model-without-metadata-stripping"]], "Model with metadata stripping": [[338, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[338, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[338, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Semi-supervised Classification on a Text Dataset": [[317, "semi-supervised-classification-on-a-text-dataset"]], "Demonstrating the different strategies of KBinsDiscretizer": [[301, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Plot different SVM classifiers in the iris dataset": [[322, "plot-different-svm-classifiers-in-the-iris-dataset"]], "SVM Tie Breaking Example": [[334, "svm-tie-breaking-example"]], "Nearest Neighbors regression": [[288, "nearest-neighbors-regression"]], "Effect of varying threshold for self-training": [[316, "effect-of-varying-threshold-for-self-training"]], "Post pruning decision trees with cost complexity pruning": [[343, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[343, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[343, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Multi-output Decision Tree Regression": [[346, "multi-output-decision-tree-regression"]], "Computational Performance": [[353, "computational-performance"]], "Bulk versus Atomic mode": [[353, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[353, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[353, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[353, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[353, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[353, "feature-extraction-latency"]], "Prediction Throughput": [[353, "prediction-throughput"]], "Tips and Tricks": [[353, "tips-and-tricks"]], "Linear algebra libraries": [[353, "linear-algebra-libraries"]], "Limiting Working Memory": [[353, "limiting-working-memory"]], "Model Compression": [[353, "model-compression"]], "Model Reshaping": [[353, "model-reshaping"]], "Links": [[353, "links"]], "Plot the decision surface of decision trees trained on the iris dataset": [[344, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[284, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Varying regularization in Multi-layer Perceptron": [[292, "varying-regularization-in-multi-layer-perceptron"]], "FeatureHasher and DictVectorizer Comparison": [[340, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[340, "load-data"]], "Define preprocessing functions": [[340, "define-preprocessing-functions"]], "DictVectorizer": [[340, "dictvectorizer"]], "FeatureHasher": [[340, "featurehasher"]], "Comparison with special purpose text vectorizers": [[340, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[340, "tfidfvectorizer"]], "Release Highlights for scikit-learn 1.1": [[310, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[310, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[310, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[310, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[310, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[310, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[310, "bisectingkmeans-divide-and-cluster"]], "Label Propagation learning a complex structure": [[315, "label-propagation-learning-a-complex-structure"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[318, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM-Kernels": [[329, "svm-kernels"]], "Label Propagation digits active learning": [[314, "label-propagation-digits-active-learning"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[285, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Computing with scikit-learn": [[352, "computing-with-scikit-learn"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[332, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Look at the results": [[332, "look-at-the-results"], [231, "look-at-the-results"]], "Compare Stochastic learning strategies for MLPClassifier": [[293, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[294, "visualization-of-mlp-weights-on-mnist"]], "Release Highlights for scikit-learn 1.0": [[309, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[309, "keyword-and-positional-arguments"]], "Spline Transformers": [[309, "spline-transformers"]], "Quantile Regressor": [[309, "quantile-regressor"]], "Feature Names Support": [[309, "feature-names-support"]], "A more flexible plotting API": [[309, "a-more-flexible-plotting-api"]], "Histogram-based Gradient Boosting Models are now stable": [[309, "histogram-based-gradient-boosting-models-are-now-stable"]], "New documentation improvements": [[309, "new-documentation-improvements"], [308, "new-documentation-improvements"]], "Parallelism, resource management, and configuration": [[354, "parallelism-resource-management-and-configuration"]], "Joblib-based parallelism": [[354, "joblib-based-parallelism"]], "OpenMP-based parallelism": [[354, "openmp-based-parallelism"]], "Parallel Numpy routines from numerical libraries": [[354, "parallel-numpy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[354, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[354, "configuration-switches"]], "Python runtime": [[354, "python-runtime"]], "assume_finite": [[354, "assume-finite"]], "working_memory": [[354, "working-memory"]], "Environment variables": [[354, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[354, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[354, "sklearn-working-memory"]], "SKLEARN_SEED": [[354, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[354, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[354, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[354, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[354, "sklearn-enable-debug-cython-directives"]], "Nearest Centroid Classification": [[287, "nearest-centroid-classification"]], "Common pitfalls and recommended practices": [[349, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[349, "inconsistent-preprocessing"]], "Data leakage": [[349, "data-leakage"]], "Data leakage during pre-processing": [[349, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[349, "how-to-avoid-data-leakage"]], "Controlling randomness": [[349, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[349, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[349, "estimators"], [349, "id2"], [389, "estimators"], [367, "estimators"]], "CV splitters": [[349, "cv-splitters"], [349, "id3"]], "Common pitfalls and subtleties": [[349, "common-pitfalls-and-subtleties"]], "General recommendations": [[349, "general-recommendations"]], "Getting reproducible results across multiple executions": [[349, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[349, "robustness-of-cross-validation-results"]], "Neural Networks": [[291, "neural-networks"], [164, "neural-networks"]], "RBF SVM parameters": [[325, "rbf-svm-parameters"]], "Load and prepare data set": [[325, "load-and-prepare-data-set"]], "Train classifiers": [[325, "train-classifiers"]], "Scaling the regularization parameter for SVCs": [[333, "scaling-the-regularization-parameter-for-svcs"]], "l1-penalty case": [[333, "l1-penalty-case"]], "l2-penalty case": [[333, "l2-penalty-case"]], "Simulations": [[333, "simulations"]], "Note:": [[333, null]], "Map data to a normal distribution": [[302, "map-data-to-a-normal-distribution"]], "Release Highlights for scikit-learn 0.24": [[308, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[308, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[308, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[308, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[308, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[308, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[308, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[308, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[308, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "Semi Supervised Classification": [[312, "semi-supervised-classification"], [164, "semi-supervised-classification"]], "Kernel Density Estimate of Species Distributions": [[289, "kernel-density-estimate-of-species-distributions"]], "SVM with custom kernel": [[321, "svm-with-custom-kernel"]], "Release Highlights": [[305, "release-highlights"], [164, "release-highlights"]], "Release Highlights for scikit-learn 0.22": [[306, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[306, "new-plotting-api"]], "Stacking Classifier and Regressor": [[306, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[306, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[306, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[306, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[306, "knn-based-imputation"]], "Tree pruning": [[306, "tree-pruning"]], "Retrieve dataframes from OpenML": [[306, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[306, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[306, "roc-auc-now-supports-multiclass-classification"]], "Plot the support vectors in LinearSVC": [[323, "plot-the-support-vectors-in-linearsvc"]], "SVM: Separating hyperplane for unbalanced classes": [[327, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM Margins Example": [[330, "svm-margins-example"]], "Using KBinsDiscretizer to discretize continuous features": [[299, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[300, "feature-discretization"]], "Importance of Feature Scaling": [[303, "importance-of-feature-scaling"]], "Decision Tree Regression": [[345, "decision-tree-regression"]], "SVM: Maximum margin separating hyperplane": [[326, "svm-maximum-margin-separating-hyperplane"]], "Statistical comparison of models using grid search": [[256, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[256, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[256, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[256, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[256, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[256, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[256, "take-home-messages"]], "Precision-Recall": [[263, "precision-recall"]], "In binary classification settings": [[263, "in-binary-classification-settings"]], "Dataset and model": [[263, "dataset-and-model"]], "Plot the Precision-Recall curve": [[263, "plot-the-precision-recall-curve"]], "In multi-label settings": [[263, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[263, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[263, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[263, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[263, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparison between grid search and successive halving": [[267, "comparison-between-grid-search-and-successive-halving"]], "Nested versus non-nested cross-validation": [[261, "nested-versus-non-nested-cross-validation"]], "See Also:": [[261, null], [391, null]], "Approximate nearest neighbors in TSNE": [[276, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[278, "caching-nearest-neighbors"]], "Theil-Sen Regression": [[213, "theil-sen-regression"]], "Outliers only in the y direction": [[213, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[213, "outliers-in-the-x-direction"]], "Simple 1D Kernel Density Estimation": [[281, "simple-1d-kernel-density-estimation"]], "Gaussian Mixture Model Ellipsoids": [[242, "gaussian-mixture-model-ellipsoids"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[229, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[229, "theoretical-bounds"]], "Empirical validation": [[229, "empirical-validation"]], "Remarks": [[229, "remarks"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[225, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Sample pipeline for text feature extraction and evaluation": [[257, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[257, "data-loading"]], "Pipeline with hyperparameter tuning": [[257, "pipeline-with-hyperparameter-tuning"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[260, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[260, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[260, "plotting-the-result"]], "ROC Curve with Visualization API": [[237, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[237, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[237, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[237, "training-a-random-forest-and-plotting-the-roc-curve"]], "t-SNE: The effect of various perplexity values on the shape": [[222, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Visualizing cross-validation behavior in scikit-learn": [[251, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[251, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[251, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[251, "visualize-cross-validation-indices-for-many-cv-objects"]], "Class Likelihood Ratios to measure classification performance": [[259, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[259, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[259, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[259, "invariance-with-respect-to-prevalence"]], "Test with permutations the significance of a classification score": [[262, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[262, "permutation-test-score"], [394, "permutation-test-score"]], "Random data": [[262, "random-data"]], "Multioutput methods": [[273, "multioutput-methods"], [164, "multioutput-methods"]], "Advanced Plotting With Partial Dependence": [[235, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[235, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[235, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[235, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[235, "plotting-partial-dependence-for-one-feature"]], "Comparison of kernel ridge regression and SVR": [[231, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[231, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[231, "compare-times-of-svr-and-kernel-ridge-regression"]], "Visualize training and prediction times": [[231, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[231, "visualize-the-learning-curves"]], "Swiss Roll And Swiss-Hole Reduction": [[221, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[221, "swiss-roll"]], "Swiss-Hole": [[221, "swiss-hole"]], "Novelty detection with Local Outlier Factor (LOF)": [[282, "novelty-detection-with-local-outlier-factor-lof"]], "Isotonic Regression": [[228, "isotonic-regression"]], "Gaussian Mixture Model Selection": [[246, "gaussian-mixture-model-selection"]], "Model training and selection": [[246, "model-training-and-selection"]], "Plot the BIC scores": [[246, "plot-the-bic-scores"]], "Plot the best model": [[246, "plot-the-best-model"]], "Plotting Learning Curves": [[258, "plotting-learning-curves"]], "Detection error tradeoff (DET) curve": [[253, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[253, "generate-synthetic-data"]], "Define the classifiers": [[253, "define-the-classifiers"]], "Plot ROC and DET curves": [[253, "plot-roc-and-det-curves"]], "Explicit feature map approximation for RBF kernels": [[230, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[230, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[230, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[230, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Underfitting vs. Overfitting": [[270, "underfitting-vs-overfitting"]], "Comparison of Manifold Learning methods": [[217, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[217, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[217, "locally-linear-embeddings"]], "Isomap Embedding": [[217, "isomap-embedding"]], "Multidimensional scaling": [[217, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[217, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[217, "t-distributed-stochastic-neighbor-embedding"]], "Plotting Cross-Validated Predictions": [[252, "plotting-cross-validated-predictions"]], "Kernel Density Estimation": [[280, "kernel-density-estimation"], [396, "kernel-density-estimation"]], "Density Estimation for a Gaussian mixture": [[245, "density-estimation-for-a-gaussian-mixture"]], "Displaying estimators and complex pipelines": [[227, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[227, "compact-text-representation"]], "Rich HTML representation": [[227, "rich-html-representation"]], "Model Selection": [[249, "model-selection"], [164, "model-selection"]], "Multiclass Receiver Operating Characteristic (ROC)": [[265, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[265, "load-and-prepare-data"], [266, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[265, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[265, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[265, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[265, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[265, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[265, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[265, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[265, "plot-all-ovo-roc-curves-together"]], "Introducing the set_output API": [[238, "introducing-the-set-output-api"]], "Gaussian Mixture Model Sine Curve": [[247, "gaussian-mixture-model-sine-curve"]], "Comparing randomized search and grid search for hyperparameter estimation": [[264, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Plotting Validation Curves": [[271, "plotting-validation-curves"]], "Gaussian Mixture Models": [[240, "gaussian-mixture-models"], [164, "gaussian-mixture-models"]], "Manifold Learning methods on a severed sphere": [[219, "manifold-learning-methods-on-a-severed-sphere"]], "Receiver Operating Characteristic (ROC) with cross validation": [[266, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[266, "classification-and-roc-analysis"]], "Classifier Chain": [[274, "classifier-chain"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[218, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[218, "load-digits-dataset"]], "Helper function to plot embedding": [[218, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[218, "embedding-techniques-comparison"]], "Custom refit strategy of a grid search with cross-validation": [[254, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[254, "the-dataset"]], "Define our grid-search strategy": [[254, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[254, "tuning-hyper-parameters"]], "Tweedie regression on insurance claims": [[214, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[214, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[214, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[214, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[214, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Train error vs Test error": [[269, "train-error-vs-test-error"]], "Compute train and test errors": [[269, "compute-train-and-test-errors"]], "Plot results functions": [[269, "plot-results-functions"]], "Displaying Pipelines": [[236, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[236, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[236, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[236, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[236, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[236, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Outlier detection with Local Outlier Factor (LOF)": [[283, "outlier-detection-with-local-outlier-factor-lof"]], "Successive Halving Iterations": [[268, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[268, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Face completion with a multi-output estimators": [[233, "face-completion-with-a-multi-output-estimators"]], "GMM Initialization Methods": [[244, "gmm-initialization-methods"]], "Balance model complexity and cross-validated score": [[255, "balance-model-complexity-and-cross-validated-score"]], "Multi-dimensional scaling": [[220, "multi-dimensional-scaling"]], "Visualizations with Display Objects": [[226, "visualizations-with-display-objects"]], "Load Data and train model": [[226, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[226, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[226, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[226, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[226, "combining-the-display-objects-into-a-single-plot"]], "GMM covariances": [[243, "gmm-covariances"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[241, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Evaluation of outlier detection estimators": [[234, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[234, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[234, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[234, "plot-and-interpret-results"]], "Early stopping of Stochastic Gradient Descent": [[204, "early-stopping-of-stochastic-gradient-descent"]], "Scalable learning with polynomial kernel approximation": [[172, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[172, "partitioning-the-data"]], "Feature normalization": [[172, "feature-normalization"]], "Establishing a baseline model": [[172, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[172, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[172, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[172, "comparing-the-results"]], "Polynomial and Spline interpolation": [[197, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[197, "periodic-splines"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[158, "helper-function"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[158, "exp-sine-squared-kernel"], [400, "exp-sine-squared-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[158, "matern-kernel"], [400, "matern-kernel"]], "Lasso path using LARS": [[183, "lasso-path-using-lars"]], "Orthogonal Matching Pursuit": [[195, "orthogonal-matching-pursuit"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "Logistic Regression 3-class Classifier": [[179, "logistic-regression-3-class-classifier"]], "SGD: convex loss functions": [[206, "sgd-convex-loss-functions"]], "Lasso model selection via information criteria": [[184, "lasso-model-selection-via-information-criteria"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[168, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[168, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[168, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[168, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[156, "dataset-generation"], [198, "dataset-generation"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Comparing Linear Bayesian Regressors": [[175, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[175, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[175, "fit-the-regressors"], [175, "id2"]], "Plot the true and estimated coefficients": [[175, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[175, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[175, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[175, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[177, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Regularization path of L1- Logistic Regression": [[189, "regularization-path-of-l1-logistic-regression"]], "Load data": [[189, "load-data"]], "Compute regularization path": [[189, "compute-regularization-path"]], "Plot regularization path": [[189, "plot-regularization-path"]], "Ordinary Least Squares and Ridge Regression Variance": [[194, "ordinary-least-squares-and-ridge-regression-variance"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Linear Regression Example": [[192, "linear-regression-example"]], "Robust linear model estimation using RANSAC": [[199, "robust-linear-model-estimation-using-ransac"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "MNIST classification using multinomial logistic + L1": [[212, "mnist-classification-using-multinomial-logistic-l1"]], "Permutation Importance with Multicollinear or Correlated Features": [[169, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[169, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[169, "handling-multicollinear-features"]], "Lasso on dense and sparse data": [[182, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[182, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[182, "comparing-the-two-lasso-implementations-on-sparse-data"]], "SGD: Weighted samples": [[209, "sgd-weighted-samples"]], "Non-negative least squares": [[191, "non-negative-least-squares"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[210, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Univariate feature selection": [[142, "id1"], [399, "univariate-feature-selection"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Comparing various online solvers": [[203, "comparing-various-online-solvers"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Recursive feature elimination": [[144, "recursive-feature-elimination"], [399, "recursive-feature-elimination"]], "Lasso and Elastic Net": [[181, "lasso-and-elastic-net"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[188, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Robust linear estimator fitting": [[202, "robust-linear-estimator-fitting"]], "Missing Value Imputation": [[160, "missing-value-imputation"], [164, "missing-value-imputation"]], "Plot Ridge coefficients as a function of the L2 regularization": [[200, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot multi-class SGD on the iris dataset": [[205, "plot-multi-class-sgd-on-the-iris-dataset"]], "Inspection": [[165, "inspection"], [164, "inspection"], [380, "inspection"]], "SGD: Maximum margin separating hyperplane": [[208, "sgd-maximum-margin-separating-hyperplane"]], "Partial Dependence and Individual Conditional Expectation Plots": [[167, "partial-dependence-and-individual-conditional-expectation-plots"]], "California Housing data preprocessing": [[167, "california-housing-data-preprocessing"]], "1-way partial dependence with different models": [[167, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[167, "multi-layer-perceptron"]], "Gradient boosting": [[167, "gradient-boosting"]], "Analysis of the plots": [[167, "analysis-of-the-plots"]], "2D interaction plots": [[167, "d-interaction-plots"]], "Interaction constraints": [[167, "interaction-constraints"], [397, "interaction-constraints"]], "3D interaction plots": [[167, "id7"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Missing information": [[162, "missing-information"]], "Estimate the score": [[162, "estimate-the-score"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "Gaussian Process for Machine Learning": [[148, "gaussian-process-for-machine-learning"], [164, "gaussian-process-for-machine-learning"]], "Plot Ridge coefficients as a function of the regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[201, "compute-paths"]], "Display results": [[201, "display-results"]], "Gaussian process classification (GPC) on iris dataset": [[151, "gaussian-process-classification-gpc-on-iris-dataset"], [400, "gaussian-process-classification-gpc-on-iris-dataset"]], "Joint feature selection with multi-task Lasso": [[190, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[190, "fit-models"]], "Plot support and time series": [[190, "plot-support-and-time-series"]], "Lasso and Elastic Net for Sparse Signals": [[180, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[180, "data-generation"]], "ElasticNet": [[180, "elasticnet"]], "Sparsity Example: Fitting only features 1  and 2": [[193, "sparsity-example-fitting-only-features-1-and-2"]], "Multiclass sparse logistic regression on 20newgroups": [[211, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Loading the data": [[146, "loading-the-data"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[146, "discussion"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[149, "kernel-ridge"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Final conclusion": [[149, "final-conclusion"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[178, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Curve Fitting with Bayesian Ridge Regression": [[176, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[176, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[176, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[176, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "L1 Penalty and Sparsity in Logistic Regression": [[187, "l1-penalty-and-sparsity-in-logistic-regression"]], "Quantile regression": [[198, "quantile-regression"]], "Fitting a QuantileRegressor": [[198, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[198, "comparing-quantileregressor-and-linearregression"]], "SGD: Penalties": [[207, "sgd-penalties"]], "Logistic function": [[186, "logistic-function"]], "Lasso model selection: AIC-BIC / cross-validation": [[185, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[185, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[185, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[185, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[185, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[185, "summary-of-cross-validation-approach"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Poisson regression and non-normal loss": [[196, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[196, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[196, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[196, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[196, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[196, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[196, "evaluation-of-the-ranking-power"]], "Main takeaways": [[196, "main-takeaways"]], "Gaussian process regression (GPR) with noise-level estimation": [[155, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Common pitfalls in the interpretation of coefficients of linear models": [[166, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[166, "the-dataset-wages"]], "The machine-learning pipeline": [[166, "the-machine-learning-pipeline"]], "Processing the dataset": [[166, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[166, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[166, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[166, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[166, "preprocessing-numerical-variables"]], "Linear models with regularization": [[166, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[166, "linear-models-with-sparse-coefficients"]], "Lessons learned": [[166, "lessons-learned"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[154, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[154, "build-the-dataset"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Bagging meta-estimator": [[397, "bagging-meta-estimator"]], "Forests of randomized trees": [[397, "forests-of-randomized-trees"]], "Random Forests": [[397, "random-forests"]], "Extremely Randomized Trees": [[397, "extremely-randomized-trees"]], "Parameters": [[397, "parameters"], [378, "parameters"]], "Parallelization": [[397, "parallelization"]], "Feature importance evaluation": [[397, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[397, "totally-random-trees-embedding"]], "AdaBoost": [[397, "adaboost"]], "Gradient Tree Boosting": [[397, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[397, "fitting-additional-weak-learners"]], "Controlling the tree size": [[397, "controlling-the-tree-size"]], "Loss Functions": [[397, "loss-functions"]], "Shrinkage via learning rate": [[397, "shrinkage-via-learning-rate"]], "Subsampling": [[397, "subsampling"]], "Interpretation with feature importance": [[397, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[397, "histogram-based-gradient-boosting"]], "Missing values support": [[397, "missing-values-support"]], "Sample weight support": [[397, "sample-weight-support"]], "Categorical Features Support": [[397, "categorical-features-support"]], "Low-level parallelism": [[397, "low-level-parallelism"], [390, "low-level-parallelism"]], "Why it\u2019s faster": [[397, "why-it-s-faster"]], "Voting Classifier": [[397, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[397, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[397, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[397, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[397, "voting-regressor"]], "Stacked generalization": [[397, "stacked-generalization"]], "Real world datasets": [[361, "real-world-datasets"]], "The Olivetti faces dataset": [[361, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[361, "the-20-newsgroups-text-dataset"]], "Converting text to vectors": [[361, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[361, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[361, null]], "Recommendation": [[361, null]], "The Labeled Faces in the Wild face recognition dataset": [[361, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[361, "forest-covertypes"]], "RCV1 dataset": [[361, "rcv1-dataset"]], "Kddcup 99 dataset": [[361, "kddcup-99-dataset"]], "California Housing dataset": [[361, "california-housing-dataset"]], "Toy datasets": [[363, "toy-datasets"]], "Iris plants dataset": [[363, "iris-plants-dataset"]], "Optical recognition of handwritten digits dataset": [[363, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[363, "linnerrud-dataset"]], "Wine recognition dataset": [[363, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[363, "breast-cancer-wisconsin-diagnostic-dataset"]], "sklearn.base.ClusterMixin": [[408, "sklearn-base-clustermixin"]], "Feature selection": [[399, "feature-selection"]], "Removing features with low variance": [[399, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[399, null]], "Feature selection using SelectFromModel": [[399, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[399, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[399, "compressive-sensing"]], "Tree-based feature selection": [[399, "tree-based-feature-selection"]], "Sequential Feature Selection": [[399, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[399, "feature-selection-as-part-of-a-pipeline"]], "Spectral Co-Clustering": [[387, "spectral-co-clustering"]], "Spectral Biclustering": [[387, "spectral-biclustering"]], "Biclustering evaluation": [[387, "biclustering-evaluation"]], "Installing scikit-learn": [[381, "installing-scikit-learn"]], "Installing the latest release": [[381, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[381, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[381, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[381, "alpine-linux"]], "Arch Linux": [[381, "arch-linux"]], "Debian/Ubuntu": [[381, "debian-ubuntu"]], "Fedora": [[381, "fedora"]], "NetBSD": [[381, "netbsd"]], "MacPorts for Mac OSX": [[381, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[381, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[381, "intel-conda-channel"]], "WinPython for Windows": [[381, "winpython-for-windows"]], "Troubleshooting": [[381, "troubleshooting"]], "Error caused by file path length limit on Windows": [[381, "error-caused-by-file-path-length-limit-on-windows"]], "sklearn.base.is_regressor": [[415, "sklearn-base-is-regressor"]], "sklearn.decomposition.fastica": [[402, "sklearn-decomposition-fastica"]], "sklearn.cluster.FeatureAgglomeration": [[424, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[424, "examples-using-sklearn-cluster-featureagglomeration"]], "Crafting a minimal reproducer for scikit-learn": [[370, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[370, "good-practices"]], "Provide a failing code example with minimal comments": [[370, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[370, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[370, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[370, "use-markdown-formatting"]], "Synthetic dataset": [[370, "synthetic-dataset"]], "NumPy": [[370, "numpy"]], "Pandas": [[370, "pandas"]], "make_regression": [[370, "make-regression"]], "make_classification": [[370, "make-classification"]], "make_blobs": [[370, "make-blobs"]], "Dataset loading utilities": [[370, "dataset-loading-utilities"], [359, "dataset-loading-utilities"]], "sklearn.base.TransformerMixin": [[412, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[412, "examples-using-sklearn-base-transformermixin"]], "Density Estimation": [[396, "density-estimation"]], "Density Estimation: Histograms": [[396, "density-estimation-histograms"]], "Pipeline: chaining estimators": [[391, "pipeline-chaining-estimators"]], "Construction": [[391, "construction"]], "Accessing steps": [[391, "accessing-steps"]], "Nested parameters": [[391, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[391, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[391, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[391, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[391, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[391, "visualizing-composite-estimators"]], "API Reference": [[389, "api-reference"]], "sklearn.base: Base classes and utility functions": [[389, "module-sklearn.base"]], "Base classes": [[389, "base-classes"]], "Functions": [[389, "functions"], [389, "id1"]], "sklearn.calibration: Probability Calibration": [[389, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[389, "module-sklearn.cluster"]], "Classes": [[389, "classes"]], "sklearn.compose: Composite Estimators": [[389, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[389, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[389, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[389, "module-sklearn.datasets"]], "Loaders": [[389, "loaders"]], "Samples generator": [[389, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[389, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[389, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[389, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[389, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[389, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[389, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[389, "module-sklearn.feature_extraction"]], "From images": [[389, "module-sklearn.feature_extraction.image"]], "From text": [[389, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[389, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[389, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[389, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[389, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[389, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[389, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[389, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[389, "module-sklearn.linear_model"]], "Linear classifiers": [[389, "linear-classifiers"]], "Classical linear regressors": [[389, "classical-linear-regressors"]], "Regressors with variable selection": [[389, "regressors-with-variable-selection"]], "Bayesian regressors": [[389, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[389, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[389, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[389, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[389, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[389, "sklearn-metrics-metrics"]], "Model Selection Interface": [[389, "model-selection-interface"]], "Biclustering metrics": [[389, "biclustering-metrics"]], "Distance metrics": [[389, "distance-metrics"]], "Pairwise metrics": [[389, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[389, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[389, "module-sklearn.model_selection"]], "Splitter Classes": [[389, "splitter-classes"]], "Splitter Functions": [[389, "splitter-functions"]], "Hyper-parameter optimizers": [[389, "hyper-parameter-optimizers"]], "Model validation": [[389, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[389, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[389, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[389, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[389, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[389, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[389, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[389, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[389, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[389, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[389, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[389, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[389, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[389, "module-sklearn.utils"]], "Recently deprecated": [[389, "recently-deprecated"]], "To be removed in 1.3": [[389, "to-be-removed-in-1-3"]], "sklearn.cluster.KMeans": [[425, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[425, "examples-using-sklearn-cluster-kmeans"]], "sklearn.base.clone": [[413, "sklearn-base-clone"]], "sklearn.cluster.dbscan": [[401, "sklearn-cluster-dbscan"]], "sklearn.base.DensityMixin": [[409, "sklearn-base-densitymixin"]], "Getting Started": [[377, "getting-started"]], "Fitting and predicting: estimator basics": [[377, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[377, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[377, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[377, "model-evaluation"]], "Automatic parameter searches": [[377, "automatic-parameter-searches"]], "Next steps": [[377, "next-steps"]], "Developing scikit-learn estimators": [[367, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[367, "apis-of-scikit-learn-objects"]], "Different objects": [[367, "different-objects"]], "Instantiation": [[367, "instantiation"]], "Fitting": [[367, "fitting"]], "Estimated Attributes": [[367, "estimated-attributes"]], "Optional Arguments": [[367, "optional-arguments"]], "Universal attributes": [[367, "universal-attributes"]], "Rolling your own estimator": [[367, "rolling-your-own-estimator"]], "Project template:": [[367, null]], "BaseEstimator and mixins:": [[367, null]], "get_params and set_params": [[367, "get-params-and-set-params"]], "Parameters and init": [[367, "parameters-and-init"]], "Cloning": [[367, "cloning"]], "Pipeline compatibility": [[367, "pipeline-compatibility"]], "Estimator types": [[367, "estimator-types"]], "Specific models": [[367, "specific-models"]], "Estimator Tags": [[367, "estimator-tags"]], "Developer API for set_output": [[367, "developer-api-for-set-output"]], "Coding guidelines": [[367, "coding-guidelines"]], "Input validation": [[367, "input-validation"]], "Random Numbers": [[367, "random-numbers"]], "Numerical assertions in tests": [[367, "numerical-assertions-in-tests"]], "Decomposing signals in components (matrix factorization problems)": [[395, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[395, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[395, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[395, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[395, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[395, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[395, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[395, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[395, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[395, "dictionary-learning"]], "Generic dictionary learning": [[395, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[395, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[395, null]], "Factor Analysis": [[395, "factor-analysis"]], "Independent component analysis (ICA)": [[395, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[395, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[395, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[395, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[395, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[395, "latent-dirichlet-allocation-lda"]], "Frequently Asked Questions": [[376, "frequently-asked-questions"]], "Table of Contents": [[376, "table-of-contents"]], "About the project": [[376, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[376, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[376, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[376, "why-scikit"]], "Do you support PyPy?": [[376, "do-you-support-pypy"]], "Implementation decisions": [[376, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[376, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[376, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[376, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[376, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[376, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[376, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[376, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[376, "why-are-there-so-many-different-estimators-for-linear-models"]], "Contributing": [[376, "contributing"], [366, "contributing"]], "How can I contribute to scikit-learn?": [[376, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[376, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[376, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[376, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[376, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[376, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[376, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[376, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[376, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[376, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[376, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[376, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[376, "how-do-i-set-a-random-state-for-an-entire-execution"]], "sklearn.base.BiclusterMixin": [[405, "sklearn-base-biclustermixin"]], "sklearn.cluster.BisectingKMeans": [[422, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[422, "examples-using-sklearn-cluster-bisectingkmeans"]], "Model persistence": [[384, "model-persistence"]], "Python specific serialization": [[384, "python-specific-serialization"]], "Security & maintainability limitations": [[384, "security-maintainability-limitations"]], "Interoperable formats": [[384, "interoperable-formats"]], "sklearn.base.OneToOneFeatureMixin": [[410, "sklearn-base-onetoonefeaturemixin"]], "Model selection and evaluation": [[385, "model-selection-and-evaluation"]], "sklearn.calibration.CalibratedClassifierCV": [[416, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[416, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "Utilities for Developers": [[374, "utilities-for-developers"]], "Validation Tools": [[374, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[374, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[374, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[374, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[374, "graph-routines"]], "Testing Functions": [[374, "testing-functions"]], "Multiclass and multilabel utility function": [[374, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[374, "helper-functions"]], "Hash Functions": [[374, "hash-functions"]], "Warnings and Exceptions": [[374, "warnings-and-exceptions"]], "Feature extraction": [[398, "feature-extraction"]], "Loading features from dicts": [[398, "loading-features-from-dicts"]], "Feature hashing": [[398, "feature-hashing"]], "Text feature extraction": [[398, "text-feature-extraction"]], "The Bag of Words representation": [[398, "the-bag-of-words-representation"]], "Common Vectorizer usage": [[398, "common-vectorizer-usage"]], "Using stop words": [[398, "using-stop-words"]], "Tf\u2013idf term weighting": [[398, "tfidf-term-weighting"]], "Decoding text files": [[398, "decoding-text-files"]], "Applications and examples": [[398, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[398, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[398, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[398, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[398, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[398, "image-feature-extraction"]], "Patch extraction": [[398, "patch-extraction"]], "Connectivity graph of an image": [[398, "connectivity-graph-of-an-image"]], "Bug triaging and issue curation": [[365, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[365, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[365, null]], "Working on PRs to help review": [[365, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[365, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[365, null]], "A typical workflow for triaging issues": [[365, "a-typical-workflow-for-triaging-issues"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[406, "sklearn-base-classnameprefixfeaturesoutmixin"]], "Installing the development version of scikit-learn": [[364, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[364, "installing-nightly-builds"]], "Building from source": [[364, "building-from-source"]], "Dependencies": [[364, "dependencies"]], "Runtime dependencies": [[364, "runtime-dependencies"]], "Build dependencies": [[364, "build-dependencies"]], "Test dependencies": [[364, "test-dependencies"]], "Building a specific version from a tag": [[364, "building-a-specific-version-from-a-tag"]], "Editable mode": [[364, "editable-mode"]], "Platform-specific instructions": [[364, "platform-specific-instructions"]], "Windows": [[364, "windows"]], "macOS": [[364, "macos"]], "macOS compilers from conda-forge": [[364, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[364, "macos-compilers-from-homebrew"]], "Linux": [[364, "linux"]], "Linux compilers from the system": [[364, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[364, "linux-compilers-from-conda-forge"]], "FreeBSD": [[364, "freebsd"]], "Parallel builds": [[364, "parallel-builds"]], "sklearn.cluster.DBSCAN": [[423, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[423, "examples-using-sklearn-cluster-dbscan"]], "Strategies to scale computationally: bigger data": [[355, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[355, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[355, "streaming-instances"]], "Extracting features": [[355, "extracting-features"]], "Incremental learning": [[355, "incremental-learning"]], "Loading other datasets": [[360, "loading-other-datasets"]], "Sample images": [[360, "sample-images"]], "Datasets in svmlight / libsvm format": [[360, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[360, null]], "Downloading datasets from the openml.org repository": [[360, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[360, "dataset-versions"]], "ARFF parser": [[360, "arff-parser"]], "Our community, our values": [[366, null]], "Ways to contribute": [[366, "ways-to-contribute"]], "Contributing to related projects": [[366, null]], "Submitting a bug report or a feature request": [[366, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[366, "how-to-make-a-good-bug-report"]], "Contributing code": [[366, "contributing-code"]], "Video resources": [[366, "video-resources"]], "How to contribute": [[366, "how-to-contribute"]], "Learning git:": [[366, null]], "Pull request checklist": [[366, "pull-request-checklist"]], "Continuous Integration (CI)": [[366, "continuous-integration-ci"]], "Stalled pull requests": [[366, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[366, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[366, "issues-for-new-contributors"]], "good first issue tag": [[366, null]], "Easy tag": [[366, null]], "help wanted tag": [[366, null]], "Building the documentation": [[366, "building-the-documentation"]], "Guidelines for writing documentation": [[366, "guidelines-for-writing-documentation"]], "Cross-referencing": [[366, "cross-referencing"]], "Generated documentation on GitHub Actions": [[366, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[366, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[366, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[366, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[366, "monitoring-performance"]], "Issue Tracker Tags": [[366, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[366, "maintaining-backwards-compatibility"]], "Deprecation": [[366, "deprecation"]], "Change the default value of a parameter": [[366, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[366, "code-review-guidelines"]], "Communication Guidelines": [[366, "communication-guidelines"]], "Reading the existing code base": [[366, "reading-the-existing-code-base"]], "Dispatching": [[375, "dispatching"]], "Input data": [[390, null]], "Overview of clustering methods": [[390, "overview-of-clustering-methods"]], "K-means": [[390, "k-means"]], "Mini Batch K-Means": [[390, "mini-batch-k-means"]], "Affinity Propagation": [[390, "affinity-propagation"]], "Mean Shift": [[390, "mean-shift"]], "Spectral clustering": [[390, "spectral-clustering"]], "Different label assignment strategies": [[390, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[390, "spectral-clustering-graphs"]], "Hierarchical clustering": [[390, "hierarchical-clustering"]], "FeatureAgglomeration": [[390, null]], "Different linkage type: Ward, complete, average, and single linkage": [[390, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[390, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[390, "adding-connectivity-constraints"]], "Varying the metric": [[390, "varying-the-metric"]], "Bisecting K-Means": [[390, "bisecting-k-means"]], "DBSCAN": [[390, "dbscan"]], "Memory consumption for large sample sizes": [[390, null]], "OPTICS": [[390, "optics"]], "Comparison with DBSCAN": [[390, null]], "Computational Complexity": [[390, null]], "BIRCH": [[390, "birch"]], "Clustering performance evaluation": [[390, "clustering-performance-evaluation"]], "Rand index": [[390, "rand-index"]], "Advantages": [[390, "advantages"], [390, "id10"], [390, "id17"], [390, "id21"], [390, "id24"], [390, "id27"], [390, "id31"], [390, "id35"]], "Drawbacks": [[390, "drawbacks"], [390, "id11"], [390, "id18"], [390, "id22"], [390, "id25"], [390, "id28"], [390, "id32"], [390, "id36"]], "Mutual Information based scores": [[390, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[390, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[390, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[390, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[390, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[390, "davies-bouldin-index"]], "Contingency Matrix": [[390, "contingency-matrix"]], "Pair Confusion Matrix": [[390, "pair-confusion-matrix"]], "Empirical covariance": [[392, "empirical-covariance"]], "Shrunk Covariance": [[392, "shrunk-covariance"]], "Basic shrinkage": [[392, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[392, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[392, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[392, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[392, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[392, "minimum-covariance-determinant"]], "Developers\u2019 Tips and Tricks": [[373, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[373, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[373, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[373, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[373, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[373, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[373, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[373, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[373, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Array API support (experimental)": [[386, "array-api-support-experimental"]], "Example usage": [[386, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[386, "estimators-with-support-for-array-api-compatible-inputs"]], "Maintainer / core-developer information": [[369, "maintainer-core-developer-information"]], "Releasing": [[369, "releasing"]], "Before a release": [[369, "before-a-release"]], "Preparing a release PR": [[369, "preparing-a-release-pr"]], "Major version release": [[369, "major-version-release"]], "Minor version release": [[369, "minor-version-release"]], "Making a release": [[369, "making-a-release"]], "Release checklist": [[369, "release-checklist"]], "Merging Pull Requests": [[369, "merging-pull-requests"]], "The scikit-learn.org web site": [[369, "the-scikit-learn-org-web-site"]], "Travis Cron jobs": [[369, "travis-cron-jobs"]], "Experimental features": [[369, "experimental-features"]], "Dataset transformations": [[358, "dataset-transformations"]], "Table Of Contents": [[356, "table-of-contents"]], "PLSCanonical": [[393, "plscanonical"]], "Transforming data": [[393, "transforming-data"]], "Predicting the targets Y": [[393, "predicting-the-targets-y"]], "PLSSVD": [[393, "plssvd"]], "PLSRegression": [[393, "plsregression"]], "Canonical Correlation Analysis": [[393, "canonical-correlation-analysis"]], "Reference:": [[393, null]], "sklearn.base.RegressorMixin": [[411, "sklearn-base-regressormixin"]], "How to optimize for speed": [[371, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[371, "python-cython-or-c-c"]], "Profiling Python code": [[371, "profiling-python-code"]], "Memory usage profiling": [[371, "memory-usage-profiling"]], "Performance tips for the Cython developer": [[371, "performance-tips-for-the-cython-developer"]], "Using OpenMP": [[371, "using-openmp"]], "Profiling compiled extensions": [[371, "profiling-compiled-extensions"]], "Using yep and gperftools": [[371, "using-yep-and-gperftools"]], "Using gprof": [[371, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[371, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[371, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[371, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[371, "a-simple-algorithmic-trick-warm-restarts"]], "sklearn.covariance.oas": [[403, "sklearn-covariance-oas"]], "sklearn.calibration.calibration_curve": [[418, "sklearn-calibration-calibration-curve"]], "Probability calibration": [[388, "probability-calibration"]], "Calibrating a classifier": [[388, "calibrating-a-classifier"]], "Sigmoid": [[388, "sigmoid"]], "Isotonic": [[388, "isotonic"]], "Multiclass support": [[388, "multiclass-support"]], "sklearn.cluster.AffinityPropagation": [[419, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[419, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[420, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[420, "examples-using-sklearn-cluster-agglomerativeclustering"]], "Developing with the Plotting API": [[372, "developing-with-the-plotting-api"]], "Plotting API Overview": [[372, "plotting-api-overview"]], "Plotting with Multiple Axes": [[372, "plotting-with-multiple-axes"]], "sklearn.calibration.CalibrationDisplay": [[417, "sklearn-calibration-calibrationdisplay"]], "Generated datasets": [[362, "generated-datasets"]], "Generators for classification and clustering": [[362, "generators-for-classification-and-clustering"]], "Single label": [[362, "single-label"]], "Multilabel": [[362, "multilabel"]], "Generators for regression": [[362, "generators-for-regression"]], "Generators for manifold learning": [[362, "generators-for-manifold-learning"]], "Generators for decomposition": [[362, "generators-for-decomposition"]], "sklearn.base.BaseEstimator": [[404, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[404, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.is_classifier": [[414, "sklearn-base-is-classifier"]], "sklearn.cluster.Birch": [[421, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[421, "examples-using-sklearn-cluster-birch"]], "sklearn.base.ClassifierMixin": [[407, "sklearn-base-classifiermixin"]], "Gaussian Processes": [[400, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[400, "gaussian-process-regression-gpr"]], "GPR examples": [[400, "gpr-examples"]], "GPR with noise-level estimation": [[400, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[400, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[400, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[400, "gaussian-process-classification-gpc"]], "GPC examples": [[400, "gpc-examples"]], "Probabilistic predictions with GPC": [[400, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[400, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[400, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[400, "gaussian-process-kernel-api"]], "Basic kernels": [[400, "basic-kernels"]], "Kernel operators": [[400, "kernel-operators"]], "Radial basis function (RBF) kernel": [[400, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[400, "rational-quadratic-kernel"]], "Dot-Product kernel": [[400, "dot-product-kernel"]], "Cross-validation: evaluating estimator performance": [[394, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[394, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[394, null]], "The cross_validate function and multiple metric evaluation": [[394, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[394, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[394, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[394, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[394, "k-fold"]], "Repeated K-Fold": [[394, "repeated-k-fold"]], "Leave One Out (LOO)": [[394, "leave-one-out-loo"]], "Leave P Out (LPO)": [[394, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[394, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[394, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[394, "stratified-k-fold"]], "Stratified Shuffle Split": [[394, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[394, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[394, "group-k-fold"]], "StratifiedGroupKFold": [[394, "stratifiedgroupkfold"]], "Leave One Group Out": [[394, "leave-one-group-out"]], "Leave P Groups Out": [[394, "leave-p-groups-out"]], "Group Shuffle Split": [[394, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[394, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[394, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[394, "cross-validation-of-time-series-data"]], "Time Series Split": [[394, "time-series-split"]], "A note on shuffling": [[394, "a-note-on-shuffling"]], "Cross validation and model selection": [[394, "cross-validation-and-model-selection"]], "Developer\u2019s Guide": [[368, "developer-s-guide"]], "Scikit-learn governance and decision-making": [[379, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[379, "roles-and-responsibilities"]], "Contributors": [[379, "contributors"]], "Communication team": [[379, "communication-team"]], "Core developers": [[379, "core-developers"]], "Technical Committee": [[379, "technical-committee"]], "Decision Making Process": [[379, "decision-making-process"]], "Enhancement proposals (SLEPs)": [[379, "enhancement-proposals-sleps"]], "Glossary of Common Terms and API Elements": [[378, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[378, "general-concepts"]], "Class APIs and Estimator Types": [[378, "class-apis-and-estimator-types"]], "Target Types": [[378, "target-types"]], "Methods": [[378, "methods"]], "Attributes": [[378, "attributes"]], "Data and sample properties": [[378, "data-and-sample-properties"]]}, "indexentries": {"1d": [[378, "term-1d"]], "1d array": [[378, "term-1d-array"]], "2d": [[378, "term-2d"]], "2d array": [[378, "term-2d-array"]], "api": [[378, "term-API"]], "cv splitter": [[378, "term-CV-splitter"]], "slep": [[378, "term-SLEP"]], "sleps": [[378, "term-SLEPs"]], "x": [[378, "term-X"]], "xt": [[378, "term-Xt"]], "y": [[378, "term-Y"], [378, "term-y"]], "_estimator_type": [[378, "term-_estimator_type"]], "array-like": [[378, "term-array-like"]], "attribute": [[378, "term-attribute"]], "attributes": [[378, "term-attributes"]], "backwards compatibility": [[378, "term-backwards-compatibility"]], "binary": [[378, "term-binary"]], "callable": [[378, "term-callable"]], "categorical feature": [[378, "term-categorical-feature"]], "class_weight": [[378, "term-class_weight"]], "classes_": [[378, "term-classes_"]], "classifier": [[378, "term-classifier"]], "classifiers": [[378, "term-classifiers"]], "clone": [[378, "term-clone"]], "cloned": [[378, "term-cloned"]], "clusterer": [[378, "term-clusterer"]], "clusterers": [[378, "term-clusterers"]], "coef_": [[378, "term-coef_"]], "common tests": [[378, "term-common-tests"]], "components_": [[378, "term-components_"]], "continuous": [[378, "term-continuous"]], "continuous multi-output": [[378, "term-continuous-multi-output"]], "continuous multioutput": [[378, "term-continuous-multioutput"]], "cross-validation estimator": [[378, "term-cross-validation-estimator"]], "cross-validation generator": [[378, "term-cross-validation-generator"]], "cross-validation splitter": [[378, "term-cross-validation-splitter"]], "cv": [[378, "term-cv"]], "data leakage": [[378, "term-data-leakage"]], "data type": [[378, "term-data-type"]], "decision_function": [[378, "term-decision_function"]], "density estimator": [[378, "term-density-estimator"]], "deprecation": [[378, "term-deprecation"]], "dimensionality": [[378, "term-dimensionality"]], "docstring": [[378, "term-docstring"]], "double underscore": [[378, "term-double-underscore"]], "double underscore notation": [[378, "term-double-underscore-notation"]], "dtype": [[378, "term-dtype"]], "duck typing": [[378, "term-duck-typing"]], "early stopping": [[378, "term-early-stopping"]], "embedding_": [[378, "term-embedding_"]], "estimator": [[378, "term-estimator"]], "estimator instance": [[378, "term-estimator-instance"]], "estimator tags": [[378, "term-estimator-tags"]], "estimators": [[378, "term-estimators"]], "evaluation metric": [[378, "term-evaluation-metric"]], "evaluation metrics": [[378, "term-evaluation-metrics"]], "examples": [[378, "term-examples"]], "experimental": [[378, "term-experimental"]], "feature": [[378, "term-feature"]], "feature extractor": [[378, "term-feature-extractor"]], "feature extractors": [[378, "term-feature-extractors"]], "feature vector": [[378, "term-feature-vector"]], "feature_importances_": [[378, "term-feature_importances_"]], "features": [[378, "term-features"]], "fit": [[378, "term-fit"]], "fit_predict": [[378, "term-fit_predict"]], "fit_transform": [[378, "term-fit_transform"]], "fitted": [[378, "term-fitted"]], "fitting": [[378, "term-fitting"]], "function": [[378, "term-function"]], "gallery": [[378, "term-gallery"]], "get_feature_names_out": [[378, "term-get_feature_names_out"]], "get_n_splits": [[378, "term-get_n_splits"]], "get_params": [[378, "term-get_params"]], "groups": [[378, "term-groups"]], "hyper-parameter": [[378, "term-hyper-parameter"]], "hyperparameter": [[378, "term-hyperparameter"]], "imputation": [[378, "term-imputation"]], "impute": [[378, "term-impute"]], "indexable": [[378, "term-indexable"]], "induction": [[378, "term-induction"]], "inductive": [[378, "term-inductive"]], "joblib": [[378, "term-joblib"]], "kernel": [[378, "term-kernel"]], "label indicator matrix": [[378, "term-label-indicator-matrix"]], "labels_": [[378, "term-labels_"]], "leakage": [[378, "term-leakage"]], "max_iter": [[378, "term-max_iter"]], "memmapping": [[378, "term-memmapping"]], "memory": [[378, "term-memory"]], "memory map": [[378, "term-memory-map"]], "memory mapping": [[378, "term-memory-mapping"]], "meta-estimator": [[378, "term-meta-estimator"]], "meta-estimators": [[378, "term-meta-estimators"]], "metaestimator": [[378, "term-metaestimator"]], "metaestimators": [[378, "term-metaestimators"]], "metric": [[378, "term-metric"]], "missing values": [[378, "term-missing-values"]], "multi-class": [[378, "term-multi-class"]], "multi-class multi-output": [[378, "term-multi-class-multi-output"]], "multi-label": [[378, "term-multi-label"]], "multi-output": [[378, "term-multi-output"]], "multi-output continuous": [[378, "term-multi-output-continuous"]], "multi-output multi-class": [[378, "term-multi-output-multi-class"]], "multiclass": [[378, "term-multiclass"]], "multiclass multioutput": [[378, "term-multiclass-multioutput"]], "multilabel": [[378, "term-multilabel"]], "multilabel indicator matrices": [[378, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[378, "term-multilabel-indicator-matrix"]], "multioutput": [[378, "term-multioutput"]], "multioutput continuous": [[378, "term-multioutput-continuous"]], "multioutput multiclass": [[378, "term-multioutput-multiclass"]], "n_components": [[378, "term-n_components"]], "n_features": [[378, "term-n_features"]], "n_iter_": [[378, "term-n_iter_"]], "n_iter_no_change": [[378, "term-n_iter_no_change"]], "n_jobs": [[378, "term-n_jobs"]], "n_outputs": [[378, "term-n_outputs"]], "n_samples": [[378, "term-n_samples"]], "n_targets": [[378, "term-n_targets"]], "narrative docs": [[378, "term-narrative-docs"]], "narrative documentation": [[378, "term-narrative-documentation"]], "np": [[378, "term-np"]], "online learning": [[378, "term-online-learning"]], "out-of-core": [[378, "term-out-of-core"]], "outlier detector": [[378, "term-outlier-detector"]], "outlier detectors": [[378, "term-outlier-detectors"]], "outputs": [[378, "term-outputs"]], "pair": [[378, "term-pair"]], "pairwise metric": [[378, "term-pairwise-metric"]], "pairwise metrics": [[378, "term-pairwise-metrics"]], "param": [[378, "term-param"]], "parameter": [[378, "term-parameter"]], "parameters": [[378, "term-parameters"]], "params": [[378, "term-params"]], "partial_fit": [[378, "term-partial_fit"]], "pd": [[378, "term-pd"]], "pos_label": [[378, "term-pos_label"]], "precomputed": [[378, "term-precomputed"]], "predict": [[378, "term-predict"]], "predict_log_proba": [[378, "term-predict_log_proba"]], "predict_proba": [[378, "term-predict_proba"]], "predictor": [[378, "term-predictor"]], "predictors": [[378, "term-predictors"]], "random_state": [[378, "term-random_state"]], "rectangular": [[378, "term-rectangular"]], "regressor": [[378, "term-regressor"]], "regressors": [[378, "term-regressors"]], "sample": [[378, "term-sample"]], "sample properties": [[378, "term-sample-properties"]], "sample property": [[378, "term-sample-property"]], "sample_weight": [[378, "term-sample_weight"]], "samples": [[378, "term-samples"]], "scikit-learn enhancement proposals": [[378, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[378, "term-scikit-learn-contrib"]], "score": [[378, "term-score"]], "score_samples": [[378, "term-score_samples"]], "scorer": [[378, "term-scorer"]], "scoring": [[378, "term-scoring"]], "semi-supervised": [[378, "term-semi-supervised"]], "semi-supervised learning": [[378, "term-semi-supervised-learning"]], "semisupervised": [[378, "term-semisupervised"]], "set_params": [[378, "term-set_params"]], "sparse graph": [[378, "term-sparse-graph"]], "sparse matrix": [[378, "term-sparse-matrix"]], "split": [[378, "term-split"]], "supervised": [[378, "term-supervised"]], "supervised learning": [[378, "term-supervised-learning"]], "target": [[378, "term-target"]], "targets": [[378, "term-targets"]], "transduction": [[378, "term-transduction"]], "transductive": [[378, "term-transductive"]], "transform": [[378, "term-transform"]], "transformer": [[378, "term-transformer"]], "transformers": [[378, "term-transformers"]], "unlabeled": [[378, "term-unlabeled"]], "unlabeled data": [[378, "term-unlabeled-data"]], "unsupervised": [[378, "term-unsupervised"]], "unsupervised learning": [[378, "term-unsupervised-learning"]], "vectorizer": [[378, "term-vectorizer"]], "vectorizers": [[378, "term-vectorizers"]], "verbose": [[378, "term-verbose"]], "warm_start": [[378, "term-warm_start"]], "module": [[389, "module-sklearn.base"], [389, "module-sklearn.calibration"], [389, "module-sklearn.cluster"], [389, "module-sklearn.compose"], [389, "module-sklearn.covariance"], [389, "module-sklearn.cross_decomposition"], [389, "module-sklearn.datasets"], [389, "module-sklearn.decomposition"], [389, "module-sklearn.discriminant_analysis"], [389, "module-sklearn.dummy"], [389, "module-sklearn.ensemble"], [389, "module-sklearn.exceptions"], [389, "module-sklearn.experimental"], [389, "module-sklearn.feature_extraction"], [389, "module-sklearn.feature_extraction.image"], [389, "module-sklearn.feature_extraction.text"], [389, "module-sklearn.feature_selection"], [389, "module-sklearn.gaussian_process"], [389, "module-sklearn.impute"], [389, "module-sklearn.inspection"], [389, "module-sklearn.isotonic"], [389, "module-sklearn.kernel_approximation"], [389, "module-sklearn.kernel_ridge"], [389, "module-sklearn.linear_model"], [389, "module-sklearn.manifold"], [389, "module-sklearn.metrics"], [389, "module-sklearn.metrics.cluster"], [389, "module-sklearn.metrics.pairwise"], [389, "module-sklearn.mixture"], [389, "module-sklearn.model_selection"], [389, "module-sklearn.multiclass"], [389, "module-sklearn.multioutput"], [389, "module-sklearn.naive_bayes"], [389, "module-sklearn.neighbors"], [389, "module-sklearn.neural_network"], [389, "module-sklearn.pipeline"], [389, "module-sklearn.preprocessing"], [389, "module-sklearn.random_projection"], [389, "module-sklearn.semi_supervised"], [389, "module-sklearn.svm"], [389, "module-sklearn.tree"], [389, "module-sklearn.utils"], [555, "module-sklearn.experimental.enable_halving_search_cv"], [556, "module-sklearn.experimental.enable_hist_gradient_boosting"], [557, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[389, "module-sklearn.base"]], "sklearn.calibration": [[389, "module-sklearn.calibration"]], "sklearn.cluster": [[389, "module-sklearn.cluster"]], "sklearn.compose": [[389, "module-sklearn.compose"]], "sklearn.covariance": [[389, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[389, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[389, "module-sklearn.datasets"]], "sklearn.decomposition": [[389, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[389, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[389, "module-sklearn.dummy"]], "sklearn.ensemble": [[389, "module-sklearn.ensemble"]], "sklearn.exceptions": [[389, "module-sklearn.exceptions"]], "sklearn.experimental": [[389, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[389, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[389, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[389, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[389, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[389, "module-sklearn.gaussian_process"]], "sklearn.impute": [[389, "module-sklearn.impute"]], "sklearn.inspection": [[389, "module-sklearn.inspection"]], "sklearn.isotonic": [[389, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[389, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[389, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[389, "module-sklearn.linear_model"]], "sklearn.manifold": [[389, "module-sklearn.manifold"]], "sklearn.metrics": [[389, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[389, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[389, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[389, "module-sklearn.mixture"]], "sklearn.model_selection": [[389, "module-sklearn.model_selection"]], "sklearn.multiclass": [[389, "module-sklearn.multiclass"]], "sklearn.multioutput": [[389, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[389, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[389, "module-sklearn.neighbors"]], "sklearn.neural_network": [[389, "module-sklearn.neural_network"]], "sklearn.pipeline": [[389, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[389, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[389, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[389, "module-sklearn.semi_supervised"]], "sklearn.svm": [[389, "module-sklearn.svm"]], "sklearn.tree": [[389, "module-sklearn.tree"]], "sklearn.utils": [[389, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[401, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[402, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[403, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[404, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[404, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[404, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[405, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[405, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[405, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[405, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[405, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[406, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[406, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[407, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[407, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[408, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[408, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[409, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[409, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[410, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[410, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[411, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[411, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[412, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[412, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[412, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[413, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[414, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[415, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[416, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[416, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[416, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[416, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[416, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[416, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[416, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[417, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[417, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[417, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[417, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[418, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[419, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[419, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[419, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[419, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[419, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[419, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[420, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[420, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[420, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[420, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[420, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[421, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[421, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[422, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[422, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[423, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[423, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[423, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[423, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[423, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[424, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[424, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[424, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[425, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[425, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[426, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[426, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[426, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[426, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[426, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[426, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[427, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[427, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[428, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[428, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[428, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[428, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[428, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[429, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[429, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[429, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[429, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[429, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[429, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[429, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[429, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[430, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[430, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[430, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[430, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[430, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[431, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[431, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[431, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[431, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[431, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[431, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[431, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[431, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[432, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[433, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[434, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[435, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[436, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[437, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[438, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[439, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[440, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[441, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[442, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[442, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[442, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[443, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[443, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[443, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[443, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[443, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[443, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[443, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[444, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[445, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[446, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[447, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[447, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[448, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[448, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[449, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[449, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[450, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[450, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[451, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[451, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[452, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[452, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[453, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[453, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[454, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[454, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[455, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[456, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[457, "sklearn.covariance.ledoit_wolf"]], "shrunk_covariance() (in module sklearn.covariance)": [[458, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[459, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[459, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[459, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[460, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[460, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[460, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[461, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[461, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[461, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[462, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[462, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[463, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[464, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[465, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[466, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[467, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[468, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[469, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[470, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[471, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[472, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[473, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[476, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[477, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[478, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[479, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[480, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[481, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[482, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[483, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[484, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[488, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[489, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[490, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[491, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[508, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[508, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[509, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[509, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[510, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[510, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[511, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[511, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[512, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[512, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[513, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[513, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[514, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[515, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[515, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[516, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[516, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[517, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[517, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[518, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[518, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[519, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[519, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[519, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[519, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[520, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[520, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[521, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[521, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[522, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[523, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[524, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[525, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[526, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[528, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[528, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[529, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[529, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[529, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[529, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[529, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[529, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[530, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[530, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "estimator_ (sklearn.ensemble.adaboostclassifier property)": [[530, "sklearn.ensemble.AdaBoostClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[530, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[530, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[531, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[531, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.adaboostregressor property)": [[531, "sklearn.ensemble.AdaBoostRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[531, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[531, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[532, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[532, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.baggingclassifier property)": [[532, "sklearn.ensemble.BaggingClassifier.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[532, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[532, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[533, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[533, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.baggingregressor property)": [[533, "sklearn.ensemble.BaggingRegressor.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[533, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[533, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[533, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[533, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[533, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[533, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[534, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[534, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimator_ (sklearn.ensemble.extratreesclassifier property)": [[534, "sklearn.ensemble.ExtraTreesClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[534, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[534, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[535, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[535, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimator_ (sklearn.ensemble.extratreesregressor property)": [[535, "sklearn.ensemble.ExtraTreesRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[535, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[535, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[536, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[536, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[536, "sklearn.ensemble.GradientBoostingClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[536, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[536, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[537, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[537, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[537, "sklearn.ensemble.GradientBoostingRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[537, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[537, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[538, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[539, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[540, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[540, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.decision_function"]], "estimator_ (sklearn.ensemble.isolationforest property)": [[540, "sklearn.ensemble.IsolationForest.estimator_"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[540, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[540, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[541, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[541, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimator_ (sklearn.ensemble.randomforestclassifier property)": [[541, "sklearn.ensemble.RandomForestClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[541, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[541, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[542, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[542, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimator_ (sklearn.ensemble.randomforestregressor property)": [[542, "sklearn.ensemble.RandomForestRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[542, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[542, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[543, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[543, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimator_ (sklearn.ensemble.randomtreesembedding property)": [[543, "sklearn.ensemble.RandomTreesEmbedding.estimator_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[543, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[543, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[544, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[544, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[544, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[545, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[545, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[545, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[546, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[546, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[546, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[546, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[547, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[547, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[547, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[547, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[548, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[548, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[549, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[549, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[550, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[550, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[551, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[551, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[552, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[552, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[553, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[553, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[554, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[554, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[555, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_hist_gradient_boosting": [[556, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.experimental.enable_iterative_imputer": [[557, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[558, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[558, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[559, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[559, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[559, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[559, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[559, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[559, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[559, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[560, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[560, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[560, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[560, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[560, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[561, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[562, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[563, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[564, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[565, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[565, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[566, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[566, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[567, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[567, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[568, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[569, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[569, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[570, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[570, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[570, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[571, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[571, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[571, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[572, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[572, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[573, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[573, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[574, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[574, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[574, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[574, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[575, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[575, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[576, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[576, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[577, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[578, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[578, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[578, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[578, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[578, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[578, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[579, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[580, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[581, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[582, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[583, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[584, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[585, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[586, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[587, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[588, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[589, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[590, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[591, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[591, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[591, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[591, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[591, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[591, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[591, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[591, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[591, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[591, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[591, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[591, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[592, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[593, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[593, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[594, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[595, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[595, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[595, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[595, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[595, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[595, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[595, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[595, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[595, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[595, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[595, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[595, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[596, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[596, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[596, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[596, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[596, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[596, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[596, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[596, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[596, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[596, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[596, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[596, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[597, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[598, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[598, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[598, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[598, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[598, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[598, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[598, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[598, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[598, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[598, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[598, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[599, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[599, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[599, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[599, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[599, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[599, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[599, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[599, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[599, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[599, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[599, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[600, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[601, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[601, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[601, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[601, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[601, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[601, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[601, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[601, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[601, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[601, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[601, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[602, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[603, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[604, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[604, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[605, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[605, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[606, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[606, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[607, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[607, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[608, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[608, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[608, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[609, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[609, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[609, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[610, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[611, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[612, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[612, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[613, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[614, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[615, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[616, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[616, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[617, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[618, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[618, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[619, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[620, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[620, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[620, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[620, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[620, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[620, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[621, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[621, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[621, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[621, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[621, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[621, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[622, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[622, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[622, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[622, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[622, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[622, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[623, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[623, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[623, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[623, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[623, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[623, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[623, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[623, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[624, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[624, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[624, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[624, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[624, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[624, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[624, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[625, "sklearn.linear_model.GammaRegressor"]], "family (sklearn.linear_model.gammaregressor property)": [[625, "sklearn.linear_model.GammaRegressor.family"]], "fit() (sklearn.linear_model.gammaregressor method)": [[625, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[625, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[625, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[625, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[625, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[626, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[626, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[626, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[626, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[626, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[626, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[627, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[627, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[627, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[627, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[627, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[627, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[628, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[628, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[628, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[628, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[628, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[628, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[629, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[629, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[629, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[629, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[629, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[629, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[629, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[629, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[630, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[630, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[630, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[630, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[630, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[630, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[630, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[631, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[631, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[631, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[631, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[631, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[631, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[632, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[632, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[632, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[632, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[632, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[632, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[633, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[633, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[633, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[633, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[633, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[633, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[634, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[634, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[634, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[634, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[634, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[634, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[635, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[635, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[636, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[637, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[637, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[637, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[637, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[637, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[637, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[637, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[637, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[638, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[639, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[639, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[639, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[639, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[639, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[639, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[639, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[639, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[640, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[640, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[640, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[640, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[640, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[640, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[641, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[641, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[641, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[641, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[641, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[641, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[643, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[644, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[645, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[645, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[646, "sklearn.linear_model.PoissonRegressor"]], "family (sklearn.linear_model.poissonregressor property)": [[646, "sklearn.linear_model.PoissonRegressor.family"]], "fit() (sklearn.linear_model.poissonregressor method)": [[646, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[646, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[646, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[646, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[646, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[647, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[647, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[647, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[647, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[647, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[647, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[648, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[648, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[648, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[648, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[648, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[649, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[649, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[649, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[649, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[649, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[649, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[650, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[650, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[650, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[650, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[650, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[651, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[651, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[651, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[651, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[651, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[651, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[651, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[651, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[652, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[652, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[652, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[652, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[652, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[652, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[652, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[653, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[653, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[654, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[654, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[655, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[655, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[656, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[656, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[656, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[656, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[656, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[656, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[657, "sklearn.linear_model.TweedieRegressor"]], "family (sklearn.linear_model.tweedieregressor property)": [[657, "sklearn.linear_model.TweedieRegressor.family"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[657, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[657, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[657, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[657, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[657, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[658, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[659, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[660, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[661, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[662, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[663, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[664, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[665, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[665, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[666, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[666, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[667, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[667, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[667, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[667, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[667, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[668, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[668, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[668, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[668, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[668, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[669, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[669, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[669, "sklearn.manifold.TSNE.fit_transform"]], "get_params() (sklearn.manifold.tsne method)": [[669, "sklearn.manifold.TSNE.get_params"]], "set_params() (sklearn.manifold.tsne method)": [[669, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[670, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[671, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[672, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[673, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[674, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[674, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[674, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[674, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[675, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[675, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[675, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[675, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[676, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[676, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[676, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[676, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[676, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[677, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[677, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[677, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[677, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[678, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[678, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[678, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[678, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[679, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[680, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[681, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[682, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[683, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[684, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[685, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[687, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[688, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[689, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[690, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[691, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[692, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[694, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[695, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[696, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[698, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[702, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[707, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[708, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[709, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[710, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[711, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[715, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[716, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[717, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[718, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[719, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[720, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[721, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[722, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[723, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[724, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[725, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[726, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[727, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[728, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[729, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[733, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[734, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[735, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[736, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[737, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[753, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[754, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[755, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[756, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[757, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[758, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[762, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[763, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[764, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[765, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[766, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[767, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[768, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[769, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[770, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[770, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[771, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[771, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[772, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[772, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[772, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[772, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[773, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[773, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[773, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[774, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[774, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[774, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[775, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[775, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[775, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[775, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[776, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[776, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[777, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[777, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[777, "sklearn.model_selection.KFold.split"]], "leaveonegroupout (class in sklearn.model_selection)": [[778, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[778, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[778, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[779, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[779, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[779, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[780, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[780, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[780, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[781, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[781, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[781, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[782, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[783, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[784, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[784, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[784, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[785, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[785, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[785, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[785, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[786, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[786, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[786, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[787, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[787, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[787, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[788, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[788, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[788, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[789, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[789, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[789, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[790, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[790, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[790, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[791, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[791, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[791, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[792, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[792, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[792, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[793, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[794, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[795, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[796, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[797, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[798, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[799, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[800, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[801, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[801, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[801, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[802, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[802, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[802, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[802, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[803, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[803, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[803, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[803, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[803, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[803, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[804, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[804, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[805, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[805, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[806, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[806, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[806, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[806, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[806, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[806, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[806, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[807, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[807, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[807, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[807, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[807, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[807, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[808, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[808, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[809, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[809, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[810, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[810, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[811, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[811, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[812, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[812, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[813, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[813, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[814, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[814, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[815, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[815, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[816, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[816, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[817, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[817, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[818, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[818, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[818, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[818, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[818, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[818, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[818, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[819, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[819, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[820, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[820, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[820, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[820, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[820, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[820, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[821, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[821, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[822, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[823, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[824, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[825, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[826, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[827, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[828, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[829, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[829, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[830, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[830, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[831, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[831, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[831, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[831, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[831, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[831, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[831, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[832, "sklearn.pipeline.FeatureUnion"]], "fit() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[832, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[832, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[833, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[833, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[833, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[833, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[833, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[833, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[834, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[835, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[836, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[836, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[837, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[837, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[838, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[838, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[839, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[839, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[840, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[840, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[841, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[841, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[842, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[843, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[844, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[845, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[846, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[846, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[847, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[848, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[848, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[849, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[850, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[851, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[852, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[853, "sklearn.preprocessing.StandardScaler.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[854, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[855, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[856, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[857, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[858, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[859, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[860, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[861, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[862, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[863, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[864, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[864, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[865, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[865, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[866, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[867, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[867, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[867, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[867, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[867, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[867, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[867, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[868, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[868, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[868, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[868, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[868, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[868, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[868, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[869, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[870, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[871, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[872, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[872, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[873, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[873, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[873, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[873, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[873, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[873, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[874, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[874, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[874, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[874, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[874, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[874, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[875, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[875, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[875, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[875, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[875, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[875, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[875, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[875, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[876, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[876, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[876, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[876, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[877, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[877, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[877, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[877, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[877, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[877, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[878, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[878, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[878, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[878, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[878, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[878, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[878, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[878, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[879, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[880, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[880, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[880, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[881, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[881, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[881, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[882, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[882, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[882, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[883, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[883, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[883, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[884, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[885, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[886, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[887, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[887, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[888, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[889, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[890, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[891, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[892, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[893, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[894, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[895, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[896, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[897, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[898, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[899, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[900, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[901, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[902, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[903, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[904, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[905, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[906, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[907, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[908, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[909, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[910, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[911, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[912, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[913, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[914, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[915, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[916, "sklearn.utils.metaestimators.available_if"]], "if_delegate_has_method() (in module sklearn.utils.metaestimators)": [[917, "sklearn.utils.metaestimators.if_delegate_has_method"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[918, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[919, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[920, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[921, "sklearn.utils.murmurhash3_32"]], "parallel_backend() (in module sklearn.utils)": [[922, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[923, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[924, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[925, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[926, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[927, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[928, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[929, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[930, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[931, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[932, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[933, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[934, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[935, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[936, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[937, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[938, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[939, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[940, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[941, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[942, "sklearn.utils.validation.has_fit_parameter"]]}})